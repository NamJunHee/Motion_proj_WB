
Motion_proj_WB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ce3c  08000140  08000140  00001140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000278  0800cf7c  0800cf7c  0000df7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800d1f4  0800d1f4  0000e1f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800d1fc  0800d1fc  0000e1fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800d200  0800d200  0000e200  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000000c0  20000008  0800d204  0000f008  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 BLE_DRIVER_CONTEXT 00000035  200000c8  0800d2c4  0000f0c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 SYSTEM_DRIVER_CONTEXT 00000011  20000100  0800d2f9  0000f100  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008b4  20000114  0800d30a  0000f114  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200009c8  0800d30a  0000f9c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000fa67  2**0
                  CONTENTS, READONLY
 12 MAPPING_TABLE 00000028  20030000  20030000  00010000  2**2
                  ALLOC
 13 MB_MEM1       000001bb  20030028  20030028  00010000  2**2
                  ALLOC
 14 .MB_MEM2      00000883  200301e4  0800d30a  0000f1e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 15 .debug_info   0002da29  00000000  00000000  0000fa97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00006055  00000000  00000000  0003d4c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00002c60  00000000  00000000  00043518  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00002227  00000000  00000000  00046178  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0002c05e  00000000  00000000  0004839f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   000306c0  00000000  00000000  000743fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    000ff02d  00000000  00000000  000a4abd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      00000043  00000000  00000000  001a3aea  2**0
                  CONTENTS, READONLY
 23 .debug_frame  0000bf30  00000000  00000000  001a3b30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 0000006e  00000000  00000000  001afa60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000114 	.word	0x20000114
 800015c:	00000000 	.word	0x00000000
 8000160:	0800cf64 	.word	0x0800cf64

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000118 	.word	0x20000118
 800017c:	0800cf64 	.word	0x0800cf64

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <__aeabi_drsub>:
 8000190:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000194:	e002      	b.n	800019c <__adddf3>
 8000196:	bf00      	nop

08000198 <__aeabi_dsub>:
 8000198:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800019c <__adddf3>:
 800019c:	b530      	push	{r4, r5, lr}
 800019e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001a6:	ea94 0f05 	teq	r4, r5
 80001aa:	bf08      	it	eq
 80001ac:	ea90 0f02 	teqeq	r0, r2
 80001b0:	bf1f      	itttt	ne
 80001b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001c2:	f000 80e2 	beq.w	800038a <__adddf3+0x1ee>
 80001c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001ce:	bfb8      	it	lt
 80001d0:	426d      	neglt	r5, r5
 80001d2:	dd0c      	ble.n	80001ee <__adddf3+0x52>
 80001d4:	442c      	add	r4, r5
 80001d6:	ea80 0202 	eor.w	r2, r0, r2
 80001da:	ea81 0303 	eor.w	r3, r1, r3
 80001de:	ea82 0000 	eor.w	r0, r2, r0
 80001e2:	ea83 0101 	eor.w	r1, r3, r1
 80001e6:	ea80 0202 	eor.w	r2, r0, r2
 80001ea:	ea81 0303 	eor.w	r3, r1, r3
 80001ee:	2d36      	cmp	r5, #54	@ 0x36
 80001f0:	bf88      	it	hi
 80001f2:	bd30      	pophi	{r4, r5, pc}
 80001f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000200:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000204:	d002      	beq.n	800020c <__adddf3+0x70>
 8000206:	4240      	negs	r0, r0
 8000208:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800020c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000210:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000214:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000218:	d002      	beq.n	8000220 <__adddf3+0x84>
 800021a:	4252      	negs	r2, r2
 800021c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000220:	ea94 0f05 	teq	r4, r5
 8000224:	f000 80a7 	beq.w	8000376 <__adddf3+0x1da>
 8000228:	f1a4 0401 	sub.w	r4, r4, #1
 800022c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000230:	db0d      	blt.n	800024e <__adddf3+0xb2>
 8000232:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000236:	fa22 f205 	lsr.w	r2, r2, r5
 800023a:	1880      	adds	r0, r0, r2
 800023c:	f141 0100 	adc.w	r1, r1, #0
 8000240:	fa03 f20e 	lsl.w	r2, r3, lr
 8000244:	1880      	adds	r0, r0, r2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	4159      	adcs	r1, r3
 800024c:	e00e      	b.n	800026c <__adddf3+0xd0>
 800024e:	f1a5 0520 	sub.w	r5, r5, #32
 8000252:	f10e 0e20 	add.w	lr, lr, #32
 8000256:	2a01      	cmp	r2, #1
 8000258:	fa03 fc0e 	lsl.w	ip, r3, lr
 800025c:	bf28      	it	cs
 800025e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000262:	fa43 f305 	asr.w	r3, r3, r5
 8000266:	18c0      	adds	r0, r0, r3
 8000268:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800026c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000270:	d507      	bpl.n	8000282 <__adddf3+0xe6>
 8000272:	f04f 0e00 	mov.w	lr, #0
 8000276:	f1dc 0c00 	rsbs	ip, ip, #0
 800027a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800027e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000282:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000286:	d31b      	bcc.n	80002c0 <__adddf3+0x124>
 8000288:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800028c:	d30c      	bcc.n	80002a8 <__adddf3+0x10c>
 800028e:	0849      	lsrs	r1, r1, #1
 8000290:	ea5f 0030 	movs.w	r0, r0, rrx
 8000294:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000298:	f104 0401 	add.w	r4, r4, #1
 800029c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002a4:	f080 809a 	bcs.w	80003dc <__adddf3+0x240>
 80002a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002ac:	bf08      	it	eq
 80002ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002b2:	f150 0000 	adcs.w	r0, r0, #0
 80002b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ba:	ea41 0105 	orr.w	r1, r1, r5
 80002be:	bd30      	pop	{r4, r5, pc}
 80002c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002c4:	4140      	adcs	r0, r0
 80002c6:	eb41 0101 	adc.w	r1, r1, r1
 80002ca:	3c01      	subs	r4, #1
 80002cc:	bf28      	it	cs
 80002ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002d2:	d2e9      	bcs.n	80002a8 <__adddf3+0x10c>
 80002d4:	f091 0f00 	teq	r1, #0
 80002d8:	bf04      	itt	eq
 80002da:	4601      	moveq	r1, r0
 80002dc:	2000      	moveq	r0, #0
 80002de:	fab1 f381 	clz	r3, r1
 80002e2:	bf08      	it	eq
 80002e4:	3320      	addeq	r3, #32
 80002e6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ea:	f1b3 0220 	subs.w	r2, r3, #32
 80002ee:	da0c      	bge.n	800030a <__adddf3+0x16e>
 80002f0:	320c      	adds	r2, #12
 80002f2:	dd08      	ble.n	8000306 <__adddf3+0x16a>
 80002f4:	f102 0c14 	add.w	ip, r2, #20
 80002f8:	f1c2 020c 	rsb	r2, r2, #12
 80002fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000300:	fa21 f102 	lsr.w	r1, r1, r2
 8000304:	e00c      	b.n	8000320 <__adddf3+0x184>
 8000306:	f102 0214 	add.w	r2, r2, #20
 800030a:	bfd8      	it	le
 800030c:	f1c2 0c20 	rsble	ip, r2, #32
 8000310:	fa01 f102 	lsl.w	r1, r1, r2
 8000314:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000318:	bfdc      	itt	le
 800031a:	ea41 010c 	orrle.w	r1, r1, ip
 800031e:	4090      	lslle	r0, r2
 8000320:	1ae4      	subs	r4, r4, r3
 8000322:	bfa2      	ittt	ge
 8000324:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000328:	4329      	orrge	r1, r5
 800032a:	bd30      	popge	{r4, r5, pc}
 800032c:	ea6f 0404 	mvn.w	r4, r4
 8000330:	3c1f      	subs	r4, #31
 8000332:	da1c      	bge.n	800036e <__adddf3+0x1d2>
 8000334:	340c      	adds	r4, #12
 8000336:	dc0e      	bgt.n	8000356 <__adddf3+0x1ba>
 8000338:	f104 0414 	add.w	r4, r4, #20
 800033c:	f1c4 0220 	rsb	r2, r4, #32
 8000340:	fa20 f004 	lsr.w	r0, r0, r4
 8000344:	fa01 f302 	lsl.w	r3, r1, r2
 8000348:	ea40 0003 	orr.w	r0, r0, r3
 800034c:	fa21 f304 	lsr.w	r3, r1, r4
 8000350:	ea45 0103 	orr.w	r1, r5, r3
 8000354:	bd30      	pop	{r4, r5, pc}
 8000356:	f1c4 040c 	rsb	r4, r4, #12
 800035a:	f1c4 0220 	rsb	r2, r4, #32
 800035e:	fa20 f002 	lsr.w	r0, r0, r2
 8000362:	fa01 f304 	lsl.w	r3, r1, r4
 8000366:	ea40 0003 	orr.w	r0, r0, r3
 800036a:	4629      	mov	r1, r5
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	fa21 f004 	lsr.w	r0, r1, r4
 8000372:	4629      	mov	r1, r5
 8000374:	bd30      	pop	{r4, r5, pc}
 8000376:	f094 0f00 	teq	r4, #0
 800037a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800037e:	bf06      	itte	eq
 8000380:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000384:	3401      	addeq	r4, #1
 8000386:	3d01      	subne	r5, #1
 8000388:	e74e      	b.n	8000228 <__adddf3+0x8c>
 800038a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800038e:	bf18      	it	ne
 8000390:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000394:	d029      	beq.n	80003ea <__adddf3+0x24e>
 8000396:	ea94 0f05 	teq	r4, r5
 800039a:	bf08      	it	eq
 800039c:	ea90 0f02 	teqeq	r0, r2
 80003a0:	d005      	beq.n	80003ae <__adddf3+0x212>
 80003a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003a6:	bf04      	itt	eq
 80003a8:	4619      	moveq	r1, r3
 80003aa:	4610      	moveq	r0, r2
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	ea91 0f03 	teq	r1, r3
 80003b2:	bf1e      	ittt	ne
 80003b4:	2100      	movne	r1, #0
 80003b6:	2000      	movne	r0, #0
 80003b8:	bd30      	popne	{r4, r5, pc}
 80003ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003be:	d105      	bne.n	80003cc <__adddf3+0x230>
 80003c0:	0040      	lsls	r0, r0, #1
 80003c2:	4149      	adcs	r1, r1
 80003c4:	bf28      	it	cs
 80003c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80003ca:	bd30      	pop	{r4, r5, pc}
 80003cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003d0:	bf3c      	itt	cc
 80003d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003d6:	bd30      	popcc	{r4, r5, pc}
 80003d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003e4:	f04f 0000 	mov.w	r0, #0
 80003e8:	bd30      	pop	{r4, r5, pc}
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf1a      	itte	ne
 80003f0:	4619      	movne	r1, r3
 80003f2:	4610      	movne	r0, r2
 80003f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003f8:	bf1c      	itt	ne
 80003fa:	460b      	movne	r3, r1
 80003fc:	4602      	movne	r2, r0
 80003fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000402:	bf06      	itte	eq
 8000404:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000408:	ea91 0f03 	teqeq	r1, r3
 800040c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000410:	bd30      	pop	{r4, r5, pc}
 8000412:	bf00      	nop

08000414 <__aeabi_ui2d>:
 8000414:	f090 0f00 	teq	r0, #0
 8000418:	bf04      	itt	eq
 800041a:	2100      	moveq	r1, #0
 800041c:	4770      	bxeq	lr
 800041e:	b530      	push	{r4, r5, lr}
 8000420:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000424:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000428:	f04f 0500 	mov.w	r5, #0
 800042c:	f04f 0100 	mov.w	r1, #0
 8000430:	e750      	b.n	80002d4 <__adddf3+0x138>
 8000432:	bf00      	nop

08000434 <__aeabi_i2d>:
 8000434:	f090 0f00 	teq	r0, #0
 8000438:	bf04      	itt	eq
 800043a:	2100      	moveq	r1, #0
 800043c:	4770      	bxeq	lr
 800043e:	b530      	push	{r4, r5, lr}
 8000440:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000444:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000448:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800044c:	bf48      	it	mi
 800044e:	4240      	negmi	r0, r0
 8000450:	f04f 0100 	mov.w	r1, #0
 8000454:	e73e      	b.n	80002d4 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_f2d>:
 8000458:	0042      	lsls	r2, r0, #1
 800045a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800045e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000462:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000466:	bf1f      	itttt	ne
 8000468:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800046c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000470:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000474:	4770      	bxne	lr
 8000476:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800047a:	bf08      	it	eq
 800047c:	4770      	bxeq	lr
 800047e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000482:	bf04      	itt	eq
 8000484:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000488:	4770      	bxeq	lr
 800048a:	b530      	push	{r4, r5, lr}
 800048c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000490:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000494:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000498:	e71c      	b.n	80002d4 <__adddf3+0x138>
 800049a:	bf00      	nop

0800049c <__aeabi_ul2d>:
 800049c:	ea50 0201 	orrs.w	r2, r0, r1
 80004a0:	bf08      	it	eq
 80004a2:	4770      	bxeq	lr
 80004a4:	b530      	push	{r4, r5, lr}
 80004a6:	f04f 0500 	mov.w	r5, #0
 80004aa:	e00a      	b.n	80004c2 <__aeabi_l2d+0x16>

080004ac <__aeabi_l2d>:
 80004ac:	ea50 0201 	orrs.w	r2, r0, r1
 80004b0:	bf08      	it	eq
 80004b2:	4770      	bxeq	lr
 80004b4:	b530      	push	{r4, r5, lr}
 80004b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004ba:	d502      	bpl.n	80004c2 <__aeabi_l2d+0x16>
 80004bc:	4240      	negs	r0, r0
 80004be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004ce:	f43f aed8 	beq.w	8000282 <__adddf3+0xe6>
 80004d2:	f04f 0203 	mov.w	r2, #3
 80004d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004da:	bf18      	it	ne
 80004dc:	3203      	addne	r2, #3
 80004de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004e2:	bf18      	it	ne
 80004e4:	3203      	addne	r2, #3
 80004e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80004f2:	fa20 f002 	lsr.w	r0, r0, r2
 80004f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004fa:	ea40 000e 	orr.w	r0, r0, lr
 80004fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000502:	4414      	add	r4, r2
 8000504:	e6bd      	b.n	8000282 <__adddf3+0xe6>
 8000506:	bf00      	nop

08000508 <__aeabi_dmul>:
 8000508:	b570      	push	{r4, r5, r6, lr}
 800050a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800050e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000512:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000516:	bf1d      	ittte	ne
 8000518:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800051c:	ea94 0f0c 	teqne	r4, ip
 8000520:	ea95 0f0c 	teqne	r5, ip
 8000524:	f000 f8de 	bleq	80006e4 <__aeabi_dmul+0x1dc>
 8000528:	442c      	add	r4, r5
 800052a:	ea81 0603 	eor.w	r6, r1, r3
 800052e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000532:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000536:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800053a:	bf18      	it	ne
 800053c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000540:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000544:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000548:	d038      	beq.n	80005bc <__aeabi_dmul+0xb4>
 800054a:	fba0 ce02 	umull	ip, lr, r0, r2
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000556:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800055a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800055e:	f04f 0600 	mov.w	r6, #0
 8000562:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000566:	f09c 0f00 	teq	ip, #0
 800056a:	bf18      	it	ne
 800056c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000570:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000574:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000578:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800057c:	d204      	bcs.n	8000588 <__aeabi_dmul+0x80>
 800057e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000582:	416d      	adcs	r5, r5
 8000584:	eb46 0606 	adc.w	r6, r6, r6
 8000588:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800058c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000590:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000594:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000598:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800059c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005a0:	bf88      	it	hi
 80005a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005a6:	d81e      	bhi.n	80005e6 <__aeabi_dmul+0xde>
 80005a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005ac:	bf08      	it	eq
 80005ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005b2:	f150 0000 	adcs.w	r0, r0, #0
 80005b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ba:	bd70      	pop	{r4, r5, r6, pc}
 80005bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005c0:	ea46 0101 	orr.w	r1, r6, r1
 80005c4:	ea40 0002 	orr.w	r0, r0, r2
 80005c8:	ea81 0103 	eor.w	r1, r1, r3
 80005cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005d0:	bfc2      	ittt	gt
 80005d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005da:	bd70      	popgt	{r4, r5, r6, pc}
 80005dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005e0:	f04f 0e00 	mov.w	lr, #0
 80005e4:	3c01      	subs	r4, #1
 80005e6:	f300 80ab 	bgt.w	8000740 <__aeabi_dmul+0x238>
 80005ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005ee:	bfde      	ittt	le
 80005f0:	2000      	movle	r0, #0
 80005f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005f6:	bd70      	pople	{r4, r5, r6, pc}
 80005f8:	f1c4 0400 	rsb	r4, r4, #0
 80005fc:	3c20      	subs	r4, #32
 80005fe:	da35      	bge.n	800066c <__aeabi_dmul+0x164>
 8000600:	340c      	adds	r4, #12
 8000602:	dc1b      	bgt.n	800063c <__aeabi_dmul+0x134>
 8000604:	f104 0414 	add.w	r4, r4, #20
 8000608:	f1c4 0520 	rsb	r5, r4, #32
 800060c:	fa00 f305 	lsl.w	r3, r0, r5
 8000610:	fa20 f004 	lsr.w	r0, r0, r4
 8000614:	fa01 f205 	lsl.w	r2, r1, r5
 8000618:	ea40 0002 	orr.w	r0, r0, r2
 800061c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000620:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000624:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000628:	fa21 f604 	lsr.w	r6, r1, r4
 800062c:	eb42 0106 	adc.w	r1, r2, r6
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 040c 	rsb	r4, r4, #12
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f304 	lsl.w	r3, r0, r4
 8000648:	fa20 f005 	lsr.w	r0, r0, r5
 800064c:	fa01 f204 	lsl.w	r2, r1, r4
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000658:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800065c:	f141 0100 	adc.w	r1, r1, #0
 8000660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000664:	bf08      	it	eq
 8000666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f1c4 0520 	rsb	r5, r4, #32
 8000670:	fa00 f205 	lsl.w	r2, r0, r5
 8000674:	ea4e 0e02 	orr.w	lr, lr, r2
 8000678:	fa20 f304 	lsr.w	r3, r0, r4
 800067c:	fa01 f205 	lsl.w	r2, r1, r5
 8000680:	ea43 0302 	orr.w	r3, r3, r2
 8000684:	fa21 f004 	lsr.w	r0, r1, r4
 8000688:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800068c:	fa21 f204 	lsr.w	r2, r1, r4
 8000690:	ea20 0002 	bic.w	r0, r0, r2
 8000694:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f094 0f00 	teq	r4, #0
 80006a8:	d10f      	bne.n	80006ca <__aeabi_dmul+0x1c2>
 80006aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006ae:	0040      	lsls	r0, r0, #1
 80006b0:	eb41 0101 	adc.w	r1, r1, r1
 80006b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006b8:	bf08      	it	eq
 80006ba:	3c01      	subeq	r4, #1
 80006bc:	d0f7      	beq.n	80006ae <__aeabi_dmul+0x1a6>
 80006be:	ea41 0106 	orr.w	r1, r1, r6
 80006c2:	f095 0f00 	teq	r5, #0
 80006c6:	bf18      	it	ne
 80006c8:	4770      	bxne	lr
 80006ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80006ce:	0052      	lsls	r2, r2, #1
 80006d0:	eb43 0303 	adc.w	r3, r3, r3
 80006d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006d8:	bf08      	it	eq
 80006da:	3d01      	subeq	r5, #1
 80006dc:	d0f7      	beq.n	80006ce <__aeabi_dmul+0x1c6>
 80006de:	ea43 0306 	orr.w	r3, r3, r6
 80006e2:	4770      	bx	lr
 80006e4:	ea94 0f0c 	teq	r4, ip
 80006e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ec:	bf18      	it	ne
 80006ee:	ea95 0f0c 	teqne	r5, ip
 80006f2:	d00c      	beq.n	800070e <__aeabi_dmul+0x206>
 80006f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f8:	bf18      	it	ne
 80006fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006fe:	d1d1      	bne.n	80006a4 <__aeabi_dmul+0x19c>
 8000700:	ea81 0103 	eor.w	r1, r1, r3
 8000704:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000708:	f04f 0000 	mov.w	r0, #0
 800070c:	bd70      	pop	{r4, r5, r6, pc}
 800070e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000712:	bf06      	itte	eq
 8000714:	4610      	moveq	r0, r2
 8000716:	4619      	moveq	r1, r3
 8000718:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800071c:	d019      	beq.n	8000752 <__aeabi_dmul+0x24a>
 800071e:	ea94 0f0c 	teq	r4, ip
 8000722:	d102      	bne.n	800072a <__aeabi_dmul+0x222>
 8000724:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000728:	d113      	bne.n	8000752 <__aeabi_dmul+0x24a>
 800072a:	ea95 0f0c 	teq	r5, ip
 800072e:	d105      	bne.n	800073c <__aeabi_dmul+0x234>
 8000730:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000734:	bf1c      	itt	ne
 8000736:	4610      	movne	r0, r2
 8000738:	4619      	movne	r1, r3
 800073a:	d10a      	bne.n	8000752 <__aeabi_dmul+0x24a>
 800073c:	ea81 0103 	eor.w	r1, r1, r3
 8000740:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000748:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800074c:	f04f 0000 	mov.w	r0, #0
 8000750:	bd70      	pop	{r4, r5, r6, pc}
 8000752:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000756:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800075a:	bd70      	pop	{r4, r5, r6, pc}

0800075c <__aeabi_ddiv>:
 800075c:	b570      	push	{r4, r5, r6, lr}
 800075e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000762:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000766:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800076a:	bf1d      	ittte	ne
 800076c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000770:	ea94 0f0c 	teqne	r4, ip
 8000774:	ea95 0f0c 	teqne	r5, ip
 8000778:	f000 f8a7 	bleq	80008ca <__aeabi_ddiv+0x16e>
 800077c:	eba4 0405 	sub.w	r4, r4, r5
 8000780:	ea81 0e03 	eor.w	lr, r1, r3
 8000784:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000788:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800078c:	f000 8088 	beq.w	80008a0 <__aeabi_ddiv+0x144>
 8000790:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000794:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000798:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800079c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007b4:	429d      	cmp	r5, r3
 80007b6:	bf08      	it	eq
 80007b8:	4296      	cmpeq	r6, r2
 80007ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007c2:	d202      	bcs.n	80007ca <__aeabi_ddiv+0x6e>
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	1ab6      	subs	r6, r6, r2
 80007cc:	eb65 0503 	sbc.w	r5, r5, r3
 80007d0:	085b      	lsrs	r3, r3, #1
 80007d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000812:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000816:	bf22      	ittt	cs
 8000818:	1ab6      	subcs	r6, r6, r2
 800081a:	4675      	movcs	r5, lr
 800081c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000838:	ea55 0e06 	orrs.w	lr, r5, r6
 800083c:	d018      	beq.n	8000870 <__aeabi_ddiv+0x114>
 800083e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000842:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000846:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800084a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800084e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000852:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000856:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800085a:	d1c0      	bne.n	80007de <__aeabi_ddiv+0x82>
 800085c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000860:	d10b      	bne.n	800087a <__aeabi_ddiv+0x11e>
 8000862:	ea41 0100 	orr.w	r1, r1, r0
 8000866:	f04f 0000 	mov.w	r0, #0
 800086a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800086e:	e7b6      	b.n	80007de <__aeabi_ddiv+0x82>
 8000870:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000874:	bf04      	itt	eq
 8000876:	4301      	orreq	r1, r0
 8000878:	2000      	moveq	r0, #0
 800087a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800087e:	bf88      	it	hi
 8000880:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000884:	f63f aeaf 	bhi.w	80005e6 <__aeabi_dmul+0xde>
 8000888:	ebb5 0c03 	subs.w	ip, r5, r3
 800088c:	bf04      	itt	eq
 800088e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000892:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000896:	f150 0000 	adcs.w	r0, r0, #0
 800089a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800089e:	bd70      	pop	{r4, r5, r6, pc}
 80008a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ac:	bfc2      	ittt	gt
 80008ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008b6:	bd70      	popgt	{r4, r5, r6, pc}
 80008b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008bc:	f04f 0e00 	mov.w	lr, #0
 80008c0:	3c01      	subs	r4, #1
 80008c2:	e690      	b.n	80005e6 <__aeabi_dmul+0xde>
 80008c4:	ea45 0e06 	orr.w	lr, r5, r6
 80008c8:	e68d      	b.n	80005e6 <__aeabi_dmul+0xde>
 80008ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008ce:	ea94 0f0c 	teq	r4, ip
 80008d2:	bf08      	it	eq
 80008d4:	ea95 0f0c 	teqeq	r5, ip
 80008d8:	f43f af3b 	beq.w	8000752 <__aeabi_dmul+0x24a>
 80008dc:	ea94 0f0c 	teq	r4, ip
 80008e0:	d10a      	bne.n	80008f8 <__aeabi_ddiv+0x19c>
 80008e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008e6:	f47f af34 	bne.w	8000752 <__aeabi_dmul+0x24a>
 80008ea:	ea95 0f0c 	teq	r5, ip
 80008ee:	f47f af25 	bne.w	800073c <__aeabi_dmul+0x234>
 80008f2:	4610      	mov	r0, r2
 80008f4:	4619      	mov	r1, r3
 80008f6:	e72c      	b.n	8000752 <__aeabi_dmul+0x24a>
 80008f8:	ea95 0f0c 	teq	r5, ip
 80008fc:	d106      	bne.n	800090c <__aeabi_ddiv+0x1b0>
 80008fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000902:	f43f aefd 	beq.w	8000700 <__aeabi_dmul+0x1f8>
 8000906:	4610      	mov	r0, r2
 8000908:	4619      	mov	r1, r3
 800090a:	e722      	b.n	8000752 <__aeabi_dmul+0x24a>
 800090c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000916:	f47f aec5 	bne.w	80006a4 <__aeabi_dmul+0x19c>
 800091a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800091e:	f47f af0d 	bne.w	800073c <__aeabi_dmul+0x234>
 8000922:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000926:	f47f aeeb 	bne.w	8000700 <__aeabi_dmul+0x1f8>
 800092a:	e712      	b.n	8000752 <__aeabi_dmul+0x24a>

0800092c <__gedf2>:
 800092c:	f04f 3cff 	mov.w	ip, #4294967295
 8000930:	e006      	b.n	8000940 <__cmpdf2+0x4>
 8000932:	bf00      	nop

08000934 <__ledf2>:
 8000934:	f04f 0c01 	mov.w	ip, #1
 8000938:	e002      	b.n	8000940 <__cmpdf2+0x4>
 800093a:	bf00      	nop

0800093c <__cmpdf2>:
 800093c:	f04f 0c01 	mov.w	ip, #1
 8000940:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000944:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000948:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800094c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000956:	d01b      	beq.n	8000990 <__cmpdf2+0x54>
 8000958:	b001      	add	sp, #4
 800095a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800095e:	bf0c      	ite	eq
 8000960:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000964:	ea91 0f03 	teqne	r1, r3
 8000968:	bf02      	ittt	eq
 800096a:	ea90 0f02 	teqeq	r0, r2
 800096e:	2000      	moveq	r0, #0
 8000970:	4770      	bxeq	lr
 8000972:	f110 0f00 	cmn.w	r0, #0
 8000976:	ea91 0f03 	teq	r1, r3
 800097a:	bf58      	it	pl
 800097c:	4299      	cmppl	r1, r3
 800097e:	bf08      	it	eq
 8000980:	4290      	cmpeq	r0, r2
 8000982:	bf2c      	ite	cs
 8000984:	17d8      	asrcs	r0, r3, #31
 8000986:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800098a:	f040 0001 	orr.w	r0, r0, #1
 800098e:	4770      	bx	lr
 8000990:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000994:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000998:	d102      	bne.n	80009a0 <__cmpdf2+0x64>
 800099a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800099e:	d107      	bne.n	80009b0 <__cmpdf2+0x74>
 80009a0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a8:	d1d6      	bne.n	8000958 <__cmpdf2+0x1c>
 80009aa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009ae:	d0d3      	beq.n	8000958 <__cmpdf2+0x1c>
 80009b0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop

080009b8 <__aeabi_cdrcmple>:
 80009b8:	4684      	mov	ip, r0
 80009ba:	4610      	mov	r0, r2
 80009bc:	4662      	mov	r2, ip
 80009be:	468c      	mov	ip, r1
 80009c0:	4619      	mov	r1, r3
 80009c2:	4663      	mov	r3, ip
 80009c4:	e000      	b.n	80009c8 <__aeabi_cdcmpeq>
 80009c6:	bf00      	nop

080009c8 <__aeabi_cdcmpeq>:
 80009c8:	b501      	push	{r0, lr}
 80009ca:	f7ff ffb7 	bl	800093c <__cmpdf2>
 80009ce:	2800      	cmp	r0, #0
 80009d0:	bf48      	it	mi
 80009d2:	f110 0f00 	cmnmi.w	r0, #0
 80009d6:	bd01      	pop	{r0, pc}

080009d8 <__aeabi_dcmpeq>:
 80009d8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009dc:	f7ff fff4 	bl	80009c8 <__aeabi_cdcmpeq>
 80009e0:	bf0c      	ite	eq
 80009e2:	2001      	moveq	r0, #1
 80009e4:	2000      	movne	r0, #0
 80009e6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ea:	bf00      	nop

080009ec <__aeabi_dcmplt>:
 80009ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f0:	f7ff ffea 	bl	80009c8 <__aeabi_cdcmpeq>
 80009f4:	bf34      	ite	cc
 80009f6:	2001      	movcc	r0, #1
 80009f8:	2000      	movcs	r0, #0
 80009fa:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fe:	bf00      	nop

08000a00 <__aeabi_dcmple>:
 8000a00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a04:	f7ff ffe0 	bl	80009c8 <__aeabi_cdcmpeq>
 8000a08:	bf94      	ite	ls
 8000a0a:	2001      	movls	r0, #1
 8000a0c:	2000      	movhi	r0, #0
 8000a0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a12:	bf00      	nop

08000a14 <__aeabi_dcmpge>:
 8000a14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a18:	f7ff ffce 	bl	80009b8 <__aeabi_cdrcmple>
 8000a1c:	bf94      	ite	ls
 8000a1e:	2001      	movls	r0, #1
 8000a20:	2000      	movhi	r0, #0
 8000a22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a26:	bf00      	nop

08000a28 <__aeabi_dcmpgt>:
 8000a28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a2c:	f7ff ffc4 	bl	80009b8 <__aeabi_cdrcmple>
 8000a30:	bf34      	ite	cc
 8000a32:	2001      	movcc	r0, #1
 8000a34:	2000      	movcs	r0, #0
 8000a36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3a:	bf00      	nop

08000a3c <__aeabi_dcmpun>:
 8000a3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a44:	d102      	bne.n	8000a4c <__aeabi_dcmpun+0x10>
 8000a46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a4a:	d10a      	bne.n	8000a62 <__aeabi_dcmpun+0x26>
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a54:	d102      	bne.n	8000a5c <__aeabi_dcmpun+0x20>
 8000a56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a5a:	d102      	bne.n	8000a62 <__aeabi_dcmpun+0x26>
 8000a5c:	f04f 0000 	mov.w	r0, #0
 8000a60:	4770      	bx	lr
 8000a62:	f04f 0001 	mov.w	r0, #1
 8000a66:	4770      	bx	lr

08000a68 <__aeabi_d2f>:
 8000a68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a6c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a70:	bf24      	itt	cs
 8000a72:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a76:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a7a:	d90d      	bls.n	8000a98 <__aeabi_d2f+0x30>
 8000a7c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a80:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a84:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a88:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a8c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a90:	bf08      	it	eq
 8000a92:	f020 0001 	biceq.w	r0, r0, #1
 8000a96:	4770      	bx	lr
 8000a98:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a9c:	d121      	bne.n	8000ae2 <__aeabi_d2f+0x7a>
 8000a9e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000aa2:	bfbc      	itt	lt
 8000aa4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000aa8:	4770      	bxlt	lr
 8000aaa:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000aae:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ab2:	f1c2 0218 	rsb	r2, r2, #24
 8000ab6:	f1c2 0c20 	rsb	ip, r2, #32
 8000aba:	fa10 f30c 	lsls.w	r3, r0, ip
 8000abe:	fa20 f002 	lsr.w	r0, r0, r2
 8000ac2:	bf18      	it	ne
 8000ac4:	f040 0001 	orrne.w	r0, r0, #1
 8000ac8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000acc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ad0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ad4:	ea40 000c 	orr.w	r0, r0, ip
 8000ad8:	fa23 f302 	lsr.w	r3, r3, r2
 8000adc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ae0:	e7cc      	b.n	8000a7c <__aeabi_d2f+0x14>
 8000ae2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ae6:	d107      	bne.n	8000af8 <__aeabi_d2f+0x90>
 8000ae8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000aec:	bf1e      	ittt	ne
 8000aee:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000af2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000af6:	4770      	bxne	lr
 8000af8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000afc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b00:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <APPD_EnableCPU2>:
/* USER CODE END APPD_Init */
  return;
}

void APPD_EnableCPU2( void )
{
 8000b08:	b5b0      	push	{r4, r5, r7, lr}
 8000b0a:	b088      	sub	sp, #32
 8000b0c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 8000b0e:	4b0b      	ldr	r3, [pc, #44]	@ (8000b3c <APPD_EnableCPU2+0x34>)
 8000b10:	1d3c      	adds	r4, r7, #4
 8000b12:	461d      	mov	r5, r3
 8000b14:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b16:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b18:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000b1c:	c403      	stmia	r4!, {r0, r1}
 8000b1e:	8022      	strh	r2, [r4, #0]
 8000b20:	3402      	adds	r4, #2
 8000b22:	0c13      	lsrs	r3, r2, #16
 8000b24:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 8000b26:	f00a fc8f 	bl	800b448 <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 8000b2a:	1d3b      	adds	r3, r7, #4
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	f009 ff20 	bl	800a972 <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 8000b32:	bf00      	nop
}
 8000b34:	3720      	adds	r7, #32
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bdb0      	pop	{r4, r5, r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	0800cf7c 	.word	0x0800cf7c

08000b40 <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 8000b40:	b480      	push	{r7}
 8000b42:	b083      	sub	sp, #12
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 8000b48:	4b07      	ldr	r3, [pc, #28]	@ (8000b68 <LL_C2_PWR_SetPowerMode+0x28>)
 8000b4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000b4e:	f023 0207 	bic.w	r2, r3, #7
 8000b52:	4905      	ldr	r1, [pc, #20]	@ (8000b68 <LL_C2_PWR_SetPowerMode+0x28>)
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	4313      	orrs	r3, r2
 8000b58:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 8000b5c:	bf00      	nop
 8000b5e:	370c      	adds	r7, #12
 8000b60:	46bd      	mov	sp, r7
 8000b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b66:	4770      	bx	lr
 8000b68:	58000400 	.word	0x58000400

08000b6c <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	b083      	sub	sp, #12
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8000b74:	4b06      	ldr	r3, [pc, #24]	@ (8000b90 <LL_EXTI_EnableIT_32_63+0x24>)
 8000b76:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8000b7a:	4905      	ldr	r1, [pc, #20]	@ (8000b90 <LL_EXTI_EnableIT_32_63+0x24>)
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	4313      	orrs	r3, r2
 8000b80:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8000b84:	bf00      	nop
 8000b86:	370c      	adds	r7, #12
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8e:	4770      	bx	lr
 8000b90:	58000800 	.word	0x58000800

08000b94 <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 8000b94:	b480      	push	{r7}
 8000b96:	b083      	sub	sp, #12
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 8000b9c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000ba0:	4a0a      	ldr	r2, [pc, #40]	@ (8000bcc <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 8000ba2:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 8000ba6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000baa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000bae:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	021b      	lsls	r3, r3, #8
 8000bb6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000bba:	4313      	orrs	r3, r2
 8000bbc:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
}
 8000bc0:	bf00      	nop
 8000bc2:	370c      	adds	r7, #12
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bca:	4770      	bx	lr
 8000bcc:	cafecafe 	.word	0xcafecafe

08000bd0 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	b083      	sub	sp, #12
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8000bd8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000bdc:	689b      	ldr	r3, [r3, #8]
 8000bde:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8000be2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	4313      	orrs	r3, r2
 8000bea:	608b      	str	r3, [r1, #8]
}
 8000bec:	bf00      	nop
 8000bee:	370c      	adds	r7, #12
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf6:	4770      	bx	lr

08000bf8 <LL_DBGMCU_GetDeviceID>:
  * @note   For STM32WBxxxx devices, the device ID is 0x495
  * @rmtoll DBGMCU_IDCODE DEV_ID        LL_DBGMCU_GetDeviceID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFF (ex: device ID is 0x495)
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetDeviceID(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_DEV_ID));
 8000bfc:	4b04      	ldr	r3, [pc, #16]	@ (8000c10 <LL_DBGMCU_GetDeviceID+0x18>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 8000c04:	4618      	mov	r0, r3
 8000c06:	46bd      	mov	sp, r7
 8000c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0c:	4770      	bx	lr
 8000c0e:	bf00      	nop
 8000c10:	e0042000 	.word	0xe0042000

08000c14 <LL_DBGMCU_GetRevisionID>:
  * @note   This field indicates the revision of the device.
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 8000c18:	4b04      	ldr	r3, [pc, #16]	@ (8000c2c <LL_DBGMCU_GetRevisionID+0x18>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	0c1b      	lsrs	r3, r3, #16
 8000c1e:	b29b      	uxth	r3, r3
}
 8000c20:	4618      	mov	r0, r3
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr
 8000c2a:	bf00      	nop
 8000c2c:	e0042000 	.word	0xe0042000

08000c30 <LL_LPM_EnableSleep>:
  * @brief  Processor uses sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8000c34:	4b05      	ldr	r3, [pc, #20]	@ (8000c4c <LL_LPM_EnableSleep+0x1c>)
 8000c36:	691b      	ldr	r3, [r3, #16]
 8000c38:	4a04      	ldr	r2, [pc, #16]	@ (8000c4c <LL_LPM_EnableSleep+0x1c>)
 8000c3a:	f023 0304 	bic.w	r3, r3, #4
 8000c3e:	6113      	str	r3, [r2, #16]
}
 8000c40:	bf00      	nop
 8000c42:	46bd      	mov	sp, r7
 8000c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop
 8000c4c:	e000ed00 	.word	0xe000ed00

08000c50 <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 8000c50:	b480      	push	{r7}
 8000c52:	b083      	sub	sp, #12
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	22ff      	movs	r2, #255	@ 0xff
 8000c5c:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8000c5e:	bf00      	nop
 8000c60:	370c      	adds	r7, #12
 8000c62:	46bd      	mov	sp, r7
 8000c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c68:	4770      	bx	lr

08000c6a <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 8000c6a:	b480      	push	{r7}
 8000c6c:	b083      	sub	sp, #12
 8000c6e:	af00      	add	r7, sp, #0
 8000c70:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	22ca      	movs	r2, #202	@ 0xca
 8000c76:	625a      	str	r2, [r3, #36]	@ 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	2253      	movs	r2, #83	@ 0x53
 8000c7c:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8000c7e:	bf00      	nop
 8000c80:	370c      	adds	r7, #12
 8000c82:	46bd      	mov	sp, r7
 8000c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c88:	4770      	bx	lr

08000c8a <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 8000c8a:	b480      	push	{r7}
 8000c8c:	b083      	sub	sp, #12
 8000c8e:	af00      	add	r7, sp, #0
 8000c90:	6078      	str	r0, [r7, #4]
 8000c92:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	689b      	ldr	r3, [r3, #8]
 8000c98:	f023 0207 	bic.w	r2, r3, #7
 8000c9c:	683b      	ldr	r3, [r7, #0]
 8000c9e:	431a      	orrs	r2, r3
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	609a      	str	r2, [r3, #8]
}
 8000ca4:	bf00      	nop
 8000ca6:	370c      	adds	r7, #12
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cae:	4770      	bx	lr

08000cb0 <MX_APPE_Config>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8000cb4:	4b04      	ldr	r3, [pc, #16]	@ (8000cc8 <MX_APPE_Config+0x18>)
 8000cb6:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000cba:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device();
 8000cbc:	f000 f824 	bl	8000d08 <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 8000cc0:	f000 f829 	bl	8000d16 <Config_HSE>

  return;
 8000cc4:	bf00      	nop
}
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	58004000 	.word	0x58004000

08000ccc <MX_APPE_Init>:

void MX_APPE_Init(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	af00      	add	r7, sp, #0
  System_Init();       /**< System initialization */
 8000cd0:	f000 f835 	bl	8000d3e <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 8000cd4:	f000 f84e 	bl	8000d74 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 8000cd8:	4903      	ldr	r1, [pc, #12]	@ (8000ce8 <MX_APPE_Init+0x1c>)
 8000cda:	2000      	movs	r0, #0
 8000cdc:	f000 fd9a 	bl	8001814 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 8000ce0:	f000 f856 	bl	8000d90 <appe_Tl_Init>
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */

   return;
 8000ce4:	bf00      	nop
}
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	200002c0 	.word	0x200002c0

08000cec <Init_Smps>:

void Init_Smps(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif /* CFG_USE_SMPS != 0 */

  return;
 8000cf0:	bf00      	nop
}
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr

08000cfa <Init_Exti>:

void Init_Exti(void)
{
 8000cfa:	b580      	push	{r7, lr}
 8000cfc:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_36 | LL_EXTI_LINE_38);
 8000cfe:	2050      	movs	r0, #80	@ 0x50
 8000d00:	f7ff ff34 	bl	8000b6c <LL_EXTI_EnableIT_32_63>

  return;
 8000d04:	bf00      	nop
}
 8000d06:	bd80      	pop	{r7, pc}

08000d08 <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0
  Reset_BackupDomain();

  Reset_IPCC();
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 8000d0c:	bf00      	nop
}
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d14:	4770      	bx	lr

08000d16 <Config_HSE>:
  return;
}
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 8000d16:	b580      	push	{r7, lr}
 8000d18:	b082      	sub	sp, #8
 8000d1a:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 8000d1c:	2000      	movs	r0, #0
 8000d1e:	f00a fc1f 	bl	800b560 <OTP_Read>
 8000d22:	6078      	str	r0, [r7, #4]
  if (p_otp)
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d005      	beq.n	8000d36 <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	799b      	ldrb	r3, [r3, #6]
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f7ff ff30 	bl	8000b94 <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 8000d34:	bf00      	nop
 8000d36:	bf00      	nop
}
 8000d38:	3708      	adds	r7, #8
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}

08000d3e <System_Init>:

static void System_Init(void)
{
 8000d3e:	b580      	push	{r7, lr}
 8000d40:	af00      	add	r7, sp, #0
  Init_Smps();
 8000d42:	f7ff ffd3 	bl	8000cec <Init_Smps>

  Init_Exti();
 8000d46:	f7ff ffd8 	bl	8000cfa <Init_Exti>

  Init_Rtc();
 8000d4a:	f000 f803 	bl	8000d54 <Init_Rtc>

  return;
 8000d4e:	bf00      	nop
}
 8000d50:	bd80      	pop	{r7, pc}
	...

08000d54 <Init_Rtc>:

static void Init_Rtc(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 8000d58:	4805      	ldr	r0, [pc, #20]	@ (8000d70 <Init_Rtc+0x1c>)
 8000d5a:	f7ff ff86 	bl	8000c6a <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 8000d5e:	2100      	movs	r1, #0
 8000d60:	4803      	ldr	r0, [pc, #12]	@ (8000d70 <Init_Rtc+0x1c>)
 8000d62:	f7ff ff92 	bl	8000c8a <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 8000d66:	4802      	ldr	r0, [pc, #8]	@ (8000d70 <Init_Rtc+0x1c>)
 8000d68:	f7ff ff72 	bl	8000c50 <LL_RTC_EnableWriteProtection>

  return;
 8000d6c:	bf00      	nop
}
 8000d6e:	bd80      	pop	{r7, pc}
 8000d70:	40002800 	.word	0x40002800

08000d74 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8000d78:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8000d7c:	f7ff ff28 	bl	8000bd0 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 8000d80:	f00b fd2e 	bl	800c7e0 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 8000d84:	2004      	movs	r0, #4
 8000d86:	f7ff fedb 	bl	8000b40 <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif /* CFG_USB_INTERFACE_ENABLE != 0 */

  return;
 8000d8a:	bf00      	nop
}
 8000d8c:	bd80      	pop	{r7, pc}
	...

08000d90 <appe_Tl_Init>:

static void appe_Tl_Init(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b088      	sub	sp, #32
 8000d94:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 8000d96:	f00a f9a1 	bl	800b0dc <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask(1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc);
 8000d9a:	4a11      	ldr	r2, [pc, #68]	@ (8000de0 <appe_Tl_Init+0x50>)
 8000d9c:	2100      	movs	r1, #0
 8000d9e:	2010      	movs	r0, #16
 8000da0:	f00b fe5c 	bl	800ca5c <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 8000da4:	4b0f      	ldr	r3, [pc, #60]	@ (8000de4 <appe_Tl_Init+0x54>)
 8000da6:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 8000da8:	4b0f      	ldr	r3, [pc, #60]	@ (8000de8 <appe_Tl_Init+0x58>)
 8000daa:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 8000dac:	463b      	mov	r3, r7
 8000dae:	4619      	mov	r1, r3
 8000db0:	480e      	ldr	r0, [pc, #56]	@ (8000dec <appe_Tl_Init+0x5c>)
 8000db2:	f00a f855 	bl	800ae60 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 8000db6:	4b0e      	ldr	r3, [pc, #56]	@ (8000df0 <appe_Tl_Init+0x60>)
 8000db8:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 8000dba:	4b0e      	ldr	r3, [pc, #56]	@ (8000df4 <appe_Tl_Init+0x64>)
 8000dbc:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 8000dbe:	4b0e      	ldr	r3, [pc, #56]	@ (8000df8 <appe_Tl_Init+0x68>)
 8000dc0:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 8000dc2:	f240 533c 	movw	r3, #1340	@ 0x53c
 8000dc6:	617b      	str	r3, [r7, #20]
  TL_MM_Init(&tl_mm_config);
 8000dc8:	f107 0308 	add.w	r3, r7, #8
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f00a fac7 	bl	800b360 <TL_MM_Init>

  TL_Enable();
 8000dd2:	f00a f97d 	bl	800b0d0 <TL_Enable>

  return;
 8000dd6:	bf00      	nop
}
 8000dd8:	3720      	adds	r7, #32
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	0800ae99 	.word	0x0800ae99
 8000de4:	20030734 	.word	0x20030734
 8000de8:	08000dfd 	.word	0x08000dfd
 8000dec:	08000e15 	.word	0x08000e15
 8000df0:	2003094c 	.word	0x2003094c
 8000df4:	20030840 	.word	0x20030840
 8000df8:	200301f8 	.word	0x200301f8

08000dfc <APPE_SysStatusNot>:

static void APPE_SysStatusNot(SHCI_TL_CmdStatus_t status)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	b083      	sub	sp, #12
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	4603      	mov	r3, r0
 8000e04:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 8000e06:	bf00      	nop
}
 8000e08:	370c      	adds	r7, #12
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e10:	4770      	bx	lr
	...

08000e14 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * (eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable)
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx(void * pPayload)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b088      	sub	sp, #32
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  WirelessFwInfo_t WirelessInfo;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	685b      	ldr	r3, [r3, #4]
 8000e20:	330b      	adds	r3, #11
 8000e22:	61fb      	str	r3, [r7, #28]

  switch(p_sys_event->subevtcode)
 8000e24:	69fb      	ldr	r3, [r7, #28]
 8000e26:	881b      	ldrh	r3, [r3, #0]
 8000e28:	b29b      	uxth	r3, r3
 8000e2a:	f5a3 4312 	sub.w	r3, r3, #37376	@ 0x9200
 8000e2e:	2b07      	cmp	r3, #7
 8000e30:	d81f      	bhi.n	8000e72 <APPE_SysUserEvtRx+0x5e>
 8000e32:	a201      	add	r2, pc, #4	@ (adr r2, 8000e38 <APPE_SysUserEvtRx+0x24>)
 8000e34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e38:	08000e59 	.word	0x08000e59
 8000e3c:	08000e6b 	.word	0x08000e6b
 8000e40:	08000e73 	.word	0x08000e73
 8000e44:	08000e73 	.word	0x08000e73
 8000e48:	08000e73 	.word	0x08000e73
 8000e4c:	08000e73 	.word	0x08000e73
 8000e50:	08000e73 	.word	0x08000e73
 8000e54:	08000e73 	.word	0x08000e73
  {
  case SHCI_SUB_EVT_CODE_READY:
    /* Read the firmware version of both the wireless firmware and the FUS */
    SHCI_GetWirelessFwInfo(&WirelessInfo);
 8000e58:	f107 030c 	add.w	r3, r7, #12
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	f009 fdb5 	bl	800a9cc <SHCI_GetWirelessFwInfo>
    APP_DBG_MSG("Wireless Firmware version %d.%d.%d\n", WirelessInfo.VersionMajor, WirelessInfo.VersionMinor, WirelessInfo.VersionSub);
    APP_DBG_MSG("Wireless Firmware build %d\n", WirelessInfo.VersionReleaseType);
    APP_DBG_MSG("FUS version %d.%d.%d\n", WirelessInfo.FusVersionMajor, WirelessInfo.FusVersionMinor, WirelessInfo.FusVersionSub);

    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY\n\r");
    APPE_SysEvtReadyProcessing(pPayload);
 8000e62:	6878      	ldr	r0, [r7, #4]
 8000e64:	f000 f81b 	bl	8000e9e <APPE_SysEvtReadyProcessing>
    break;
 8000e68:	e004      	b.n	8000e74 <APPE_SysUserEvtRx+0x60>

  case SHCI_SUB_EVT_ERROR_NOTIF:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF \n\r");
    APPE_SysEvtError(pPayload);
 8000e6a:	6878      	ldr	r0, [r7, #4]
 8000e6c:	f000 f806 	bl	8000e7c <APPE_SysEvtError>
    break;
 8000e70:	e000      	b.n	8000e74 <APPE_SysUserEvtRx+0x60>
  case SHCI_SUB_EVT_NVM_END_ERASE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_ERASE\n\r");
    break;

  default:
    break;
 8000e72:	bf00      	nop
  }

  return;
 8000e74:	bf00      	nop
}
 8000e76:	3720      	adds	r7, #32
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}

08000e7c <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError(void * pPayload)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	b085      	sub	sp, #20
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SCHI_SystemErrCode_t *p_sys_error_code;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	685b      	ldr	r3, [r3, #4]
 8000e88:	330b      	adds	r3, #11
 8000e8a:	60fb      	str	r3, [r7, #12]
  p_sys_error_code = (SCHI_SystemErrCode_t*) p_sys_event->payload;
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	3302      	adds	r3, #2
 8000e90:	60bb      	str	r3, [r7, #8]
  }
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
  }
  return;
 8000e92:	bf00      	nop
}
 8000e94:	3714      	adds	r7, #20
 8000e96:	46bd      	mov	sp, r7
 8000e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9c:	4770      	bx	lr

08000e9e <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing(void * pPayload)
{
 8000e9e:	b580      	push	{r7, lr}
 8000ea0:	b08a      	sub	sp, #40	@ 0x28
 8000ea2:	af00      	add	r7, sp, #0
 8000ea4:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SHCI_C2_Ready_Evt_t *p_sys_ready_event;

  SHCI_C2_CONFIG_Cmd_Param_t config_param = {0};
 8000ea6:	f107 0308 	add.w	r3, r7, #8
 8000eaa:	2200      	movs	r2, #0
 8000eac:	601a      	str	r2, [r3, #0]
 8000eae:	605a      	str	r2, [r3, #4]
 8000eb0:	609a      	str	r2, [r3, #8]
 8000eb2:	60da      	str	r2, [r3, #12]
  uint32_t RevisionID=0;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t DeviceID=0;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	623b      	str	r3, [r7, #32]

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	685b      	ldr	r3, [r3, #4]
 8000ec0:	330b      	adds	r3, #11
 8000ec2:	61fb      	str	r3, [r7, #28]
  p_sys_ready_event = (SHCI_C2_Ready_Evt_t*) p_sys_event->payload;
 8000ec4:	69fb      	ldr	r3, [r7, #28]
 8000ec6:	3302      	adds	r3, #2
 8000ec8:	61bb      	str	r3, [r7, #24]

  if (p_sys_ready_event->sysevt_ready_rsp == WIRELESS_FW_RUNNING)
 8000eca:	69bb      	ldr	r3, [r7, #24]
 8000ecc:	781b      	ldrb	r3, [r3, #0]
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d11d      	bne.n	8000f0e <APPE_SysEvtReadyProcessing+0x70>
    * The wireless firmware is running on the CPU2
    */
    APP_DBG_MSG(">>== WIRELESS_FW_RUNNING \n");

    /* Traces channel initialization */
    APPD_EnableCPU2();
 8000ed2:	f7ff fe19 	bl	8000b08 <APPD_EnableCPU2>

    /* Enable all events Notification */
    config_param.PayloadCmdSize = SHCI_C2_CONFIG_PAYLOAD_CMD_SIZE;
 8000ed6:	230f      	movs	r3, #15
 8000ed8:	723b      	strb	r3, [r7, #8]
    config_param.EvtMask1 = SHCI_C2_CONFIG_EVTMASK1_BIT0_ERROR_NOTIF_ENABLE
 8000eda:	237f      	movs	r3, #127	@ 0x7f
 8000edc:	72bb      	strb	r3, [r7, #10]
    * @brief  Return the device revision identifier
    * @note   This field indicates the revision of the device.
    * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
    * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
    */
    RevisionID = LL_DBGMCU_GetRevisionID();
 8000ede:	f7ff fe99 	bl	8000c14 <LL_DBGMCU_GetRevisionID>
 8000ee2:	6278      	str	r0, [r7, #36]	@ 0x24

    APP_DBG_MSG(">>== DBGMCU_GetRevisionID= %lx \n\r", RevisionID);

    config_param.RevisionID = (uint16_t)RevisionID;
 8000ee4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ee6:	b29b      	uxth	r3, r3
 8000ee8:	82bb      	strh	r3, [r7, #20]

    DeviceID = LL_DBGMCU_GetDeviceID();
 8000eea:	f7ff fe85 	bl	8000bf8 <LL_DBGMCU_GetDeviceID>
 8000eee:	6238      	str	r0, [r7, #32]
    APP_DBG_MSG(">>== DBGMCU_GetDeviceID= %lx \n\r", DeviceID);
    config_param.DeviceID = (uint16_t)DeviceID;
 8000ef0:	6a3b      	ldr	r3, [r7, #32]
 8000ef2:	b29b      	uxth	r3, r3
 8000ef4:	82fb      	strh	r3, [r7, #22]
    (void)SHCI_C2_Config(&config_param);
 8000ef6:	f107 0308 	add.w	r3, r7, #8
 8000efa:	4618      	mov	r0, r3
 8000efc:	f009 fd50 	bl	800a9a0 <SHCI_C2_Config>

    APP_BLE_Init();
 8000f00:	f00a fc38 	bl	800b774 <APP_BLE_Init>
    UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 8000f04:	2100      	movs	r1, #0
 8000f06:	2001      	movs	r0, #1
 8000f08:	f00b fc7c 	bl	800c804 <UTIL_LPM_SetOffMode>
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
  }

  return;
 8000f0c:	e007      	b.n	8000f1e <APPE_SysEvtReadyProcessing+0x80>
  else if (p_sys_ready_event->sysevt_ready_rsp == FUS_FW_RUNNING)
 8000f0e:	69bb      	ldr	r3, [r7, #24]
 8000f10:	781b      	ldrb	r3, [r3, #0]
 8000f12:	2b01      	cmp	r3, #1
 8000f14:	d103      	bne.n	8000f1e <APPE_SysEvtReadyProcessing+0x80>
    ((tSHCI_UserEvtRxParam*)pPayload)->status = SHCI_TL_UserEventFlow_Disable;
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	2200      	movs	r2, #0
 8000f1a:	701a      	strb	r2, [r3, #0]
  return;
 8000f1c:	bf00      	nop
 8000f1e:	bf00      	nop
}
 8000f20:	3728      	adds	r7, #40	@ 0x28
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}

08000f26 <HAL_Delay>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void HAL_Delay(uint32_t Delay)
{
 8000f26:	b580      	push	{r7, lr}
 8000f28:	b084      	sub	sp, #16
 8000f2a:	af00      	add	r7, sp, #0
 8000f2c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f2e:	f003 f937 	bl	80041a0 <HAL_GetTick>
 8000f32:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f3e:	d00a      	beq.n	8000f56 <HAL_Delay+0x30>
  {
    wait += HAL_GetTickFreq();
 8000f40:	f003 f946 	bl	80041d0 <HAL_GetTickFreq>
 8000f44:	4603      	mov	r3, r0
 8000f46:	461a      	mov	r2, r3
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	4413      	add	r3, r2
 8000f4c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f4e:	e002      	b.n	8000f56 <HAL_Delay+0x30>
  {
    /************************************************************************************
     * ENTER SLEEP MODE
     ***********************************************************************************/
    LL_LPM_EnableSleep(); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 8000f50:	f7ff fe6e 	bl	8000c30 <LL_LPM_EnableSleep>
     */
  #if defined (__CC_ARM) || defined (__ARMCC_VERSION)
    __force_stores();
  #endif /* __ARMCC_VERSION */

    __WFI();
 8000f54:	bf30      	wfi
  while ((HAL_GetTick() - tickstart) < wait)
 8000f56:	f003 f923 	bl	80041a0 <HAL_GetTick>
 8000f5a:	4602      	mov	r2, r0
 8000f5c:	68bb      	ldr	r3, [r7, #8]
 8000f5e:	1ad3      	subs	r3, r2, r3
 8000f60:	68fa      	ldr	r2, [r7, #12]
 8000f62:	429a      	cmp	r2, r3
 8000f64:	d8f4      	bhi.n	8000f50 <HAL_Delay+0x2a>
  }
}
 8000f66:	bf00      	nop
 8000f68:	bf00      	nop
 8000f6a:	3710      	adds	r7, #16
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}

08000f70 <MX_APPE_Process>:

void MX_APPE_Process(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8000f74:	f04f 30ff 	mov.w	r0, #4294967295
 8000f78:	f00b fc74 	bl	800c864 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 8000f7c:	bf00      	nop
 8000f7e:	bd80      	pop	{r7, pc}

08000f80 <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle(void)
{
 8000f80:	b480      	push	{r7}
 8000f82:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
#endif /* CFG_LPM_SUPPORTED == 1 */
  return;
 8000f84:	bf00      	nop
}
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr

08000f8e <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle(UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm)
{
 8000f8e:	b580      	push	{r7, lr}
 8000f90:	b082      	sub	sp, #8
 8000f92:	af00      	add	r7, sp, #0
 8000f94:	6078      	str	r0, [r7, #4]
 8000f96:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8000f98:	f04f 30ff 	mov.w	r0, #4294967295
 8000f9c:	f00b fc62 	bl	800c864 <UTIL_SEQ_Run>
  return;
 8000fa0:	bf00      	nop
}
 8000fa2:	3708      	adds	r7, #8
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}

08000fa8 <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8000fb0:	2100      	movs	r1, #0
 8000fb2:	2010      	movs	r0, #16
 8000fb4:	f00b fd74 	bl	800caa0 <UTIL_SEQ_SetTask>
  return;
 8000fb8:	bf00      	nop
}
 8000fba:	3708      	adds	r7, #8
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}

08000fc0 <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b082      	sub	sp, #8
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 8000fc8:	2002      	movs	r0, #2
 8000fca:	f00b fdd5 	bl	800cb78 <UTIL_SEQ_SetEvt>
  return;
 8000fce:	bf00      	nop
}
 8000fd0:	3708      	adds	r7, #8
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}

08000fd6 <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 8000fd6:	b580      	push	{r7, lr}
 8000fd8:	b082      	sub	sp, #8
 8000fda:	af00      	add	r7, sp, #0
 8000fdc:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 8000fde:	2002      	movs	r0, #2
 8000fe0:	f00b fdea 	bl	800cbb8 <UTIL_SEQ_WaitEvt>
  return;
 8000fe4:	bf00      	nop
}
 8000fe6:	3708      	adds	r7, #8
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}

08000fec <LL_EXTI_EnableIT_0_31>:
{
 8000fec:	b480      	push	{r7}
 8000fee:	b083      	sub	sp, #12
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8000ff4:	4b06      	ldr	r3, [pc, #24]	@ (8001010 <LL_EXTI_EnableIT_0_31+0x24>)
 8000ff6:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8000ffa:	4905      	ldr	r1, [pc, #20]	@ (8001010 <LL_EXTI_EnableIT_0_31+0x24>)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	4313      	orrs	r3, r2
 8001000:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 8001004:	bf00      	nop
 8001006:	370c      	adds	r7, #12
 8001008:	46bd      	mov	sp, r7
 800100a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100e:	4770      	bx	lr
 8001010:	58000800 	.word	0x58000800

08001014 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8001014:	b480      	push	{r7}
 8001016:	b083      	sub	sp, #12
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 800101c:	4b05      	ldr	r3, [pc, #20]	@ (8001034 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800101e:	681a      	ldr	r2, [r3, #0]
 8001020:	4904      	ldr	r1, [pc, #16]	@ (8001034 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	4313      	orrs	r3, r2
 8001026:	600b      	str	r3, [r1, #0]

}
 8001028:	bf00      	nop
 800102a:	370c      	adds	r7, #12
 800102c:	46bd      	mov	sp, r7
 800102e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001032:	4770      	bx	lr
 8001034:	58000800 	.word	0x58000800

08001038 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 8001038:	b480      	push	{r7}
 800103a:	b083      	sub	sp, #12
 800103c:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 800103e:	4b0d      	ldr	r3, [pc, #52]	@ (8001074 <ReadRtcSsrValue+0x3c>)
 8001040:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001042:	b29b      	uxth	r3, r3
 8001044:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8001046:	4b0b      	ldr	r3, [pc, #44]	@ (8001074 <ReadRtcSsrValue+0x3c>)
 8001048:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800104a:	b29b      	uxth	r3, r3
 800104c:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 800104e:	e005      	b.n	800105c <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8001054:	4b07      	ldr	r3, [pc, #28]	@ (8001074 <ReadRtcSsrValue+0x3c>)
 8001056:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001058:	b29b      	uxth	r3, r3
 800105a:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 800105c:	687a      	ldr	r2, [r7, #4]
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	429a      	cmp	r2, r3
 8001062:	d1f5      	bne.n	8001050 <ReadRtcSsrValue+0x18>
  }

  return second_read;
 8001064:	683b      	ldr	r3, [r7, #0]
}
 8001066:	4618      	mov	r0, r3
 8001068:	370c      	adds	r7, #12
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr
 8001072:	bf00      	nop
 8001074:	40002800 	.word	0x40002800

08001078 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8001078:	b480      	push	{r7}
 800107a:	b085      	sub	sp, #20
 800107c:	af00      	add	r7, sp, #0
 800107e:	4603      	mov	r3, r0
 8001080:	460a      	mov	r2, r1
 8001082:	71fb      	strb	r3, [r7, #7]
 8001084:	4613      	mov	r3, r2
 8001086:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 8001088:	79ba      	ldrb	r2, [r7, #6]
 800108a:	491d      	ldr	r1, [pc, #116]	@ (8001100 <LinkTimerAfter+0x88>)
 800108c:	4613      	mov	r3, r2
 800108e:	005b      	lsls	r3, r3, #1
 8001090:	4413      	add	r3, r2
 8001092:	00db      	lsls	r3, r3, #3
 8001094:	440b      	add	r3, r1
 8001096:	3315      	adds	r3, #21
 8001098:	781b      	ldrb	r3, [r3, #0]
 800109a:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800109c:	7bfb      	ldrb	r3, [r7, #15]
 800109e:	2b06      	cmp	r3, #6
 80010a0:	d009      	beq.n	80010b6 <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 80010a2:	7bfa      	ldrb	r2, [r7, #15]
 80010a4:	4916      	ldr	r1, [pc, #88]	@ (8001100 <LinkTimerAfter+0x88>)
 80010a6:	4613      	mov	r3, r2
 80010a8:	005b      	lsls	r3, r3, #1
 80010aa:	4413      	add	r3, r2
 80010ac:	00db      	lsls	r3, r3, #3
 80010ae:	440b      	add	r3, r1
 80010b0:	3314      	adds	r3, #20
 80010b2:	79fa      	ldrb	r2, [r7, #7]
 80010b4:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 80010b6:	79fa      	ldrb	r2, [r7, #7]
 80010b8:	4911      	ldr	r1, [pc, #68]	@ (8001100 <LinkTimerAfter+0x88>)
 80010ba:	4613      	mov	r3, r2
 80010bc:	005b      	lsls	r3, r3, #1
 80010be:	4413      	add	r3, r2
 80010c0:	00db      	lsls	r3, r3, #3
 80010c2:	440b      	add	r3, r1
 80010c4:	3315      	adds	r3, #21
 80010c6:	7bfa      	ldrb	r2, [r7, #15]
 80010c8:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 80010ca:	79fa      	ldrb	r2, [r7, #7]
 80010cc:	490c      	ldr	r1, [pc, #48]	@ (8001100 <LinkTimerAfter+0x88>)
 80010ce:	4613      	mov	r3, r2
 80010d0:	005b      	lsls	r3, r3, #1
 80010d2:	4413      	add	r3, r2
 80010d4:	00db      	lsls	r3, r3, #3
 80010d6:	440b      	add	r3, r1
 80010d8:	3314      	adds	r3, #20
 80010da:	79ba      	ldrb	r2, [r7, #6]
 80010dc:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 80010de:	79ba      	ldrb	r2, [r7, #6]
 80010e0:	4907      	ldr	r1, [pc, #28]	@ (8001100 <LinkTimerAfter+0x88>)
 80010e2:	4613      	mov	r3, r2
 80010e4:	005b      	lsls	r3, r3, #1
 80010e6:	4413      	add	r3, r2
 80010e8:	00db      	lsls	r3, r3, #3
 80010ea:	440b      	add	r3, r1
 80010ec:	3315      	adds	r3, #21
 80010ee:	79fa      	ldrb	r2, [r7, #7]
 80010f0:	701a      	strb	r2, [r3, #0]

  return;
 80010f2:	bf00      	nop
}
 80010f4:	3714      	adds	r7, #20
 80010f6:	46bd      	mov	sp, r7
 80010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fc:	4770      	bx	lr
 80010fe:	bf00      	nop
 8001100:	20000130 	.word	0x20000130

08001104 <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 8001104:	b480      	push	{r7}
 8001106:	b085      	sub	sp, #20
 8001108:	af00      	add	r7, sp, #0
 800110a:	4603      	mov	r3, r0
 800110c:	460a      	mov	r2, r1
 800110e:	71fb      	strb	r3, [r7, #7]
 8001110:	4613      	mov	r3, r2
 8001112:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 8001114:	4b29      	ldr	r3, [pc, #164]	@ (80011bc <LinkTimerBefore+0xb8>)
 8001116:	781b      	ldrb	r3, [r3, #0]
 8001118:	b2db      	uxtb	r3, r3
 800111a:	79ba      	ldrb	r2, [r7, #6]
 800111c:	429a      	cmp	r2, r3
 800111e:	d032      	beq.n	8001186 <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 8001120:	79ba      	ldrb	r2, [r7, #6]
 8001122:	4927      	ldr	r1, [pc, #156]	@ (80011c0 <LinkTimerBefore+0xbc>)
 8001124:	4613      	mov	r3, r2
 8001126:	005b      	lsls	r3, r3, #1
 8001128:	4413      	add	r3, r2
 800112a:	00db      	lsls	r3, r3, #3
 800112c:	440b      	add	r3, r1
 800112e:	3314      	adds	r3, #20
 8001130:	781b      	ldrb	r3, [r3, #0]
 8001132:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 8001134:	7bfa      	ldrb	r2, [r7, #15]
 8001136:	4922      	ldr	r1, [pc, #136]	@ (80011c0 <LinkTimerBefore+0xbc>)
 8001138:	4613      	mov	r3, r2
 800113a:	005b      	lsls	r3, r3, #1
 800113c:	4413      	add	r3, r2
 800113e:	00db      	lsls	r3, r3, #3
 8001140:	440b      	add	r3, r1
 8001142:	3315      	adds	r3, #21
 8001144:	79fa      	ldrb	r2, [r7, #7]
 8001146:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 8001148:	79fa      	ldrb	r2, [r7, #7]
 800114a:	491d      	ldr	r1, [pc, #116]	@ (80011c0 <LinkTimerBefore+0xbc>)
 800114c:	4613      	mov	r3, r2
 800114e:	005b      	lsls	r3, r3, #1
 8001150:	4413      	add	r3, r2
 8001152:	00db      	lsls	r3, r3, #3
 8001154:	440b      	add	r3, r1
 8001156:	3315      	adds	r3, #21
 8001158:	79ba      	ldrb	r2, [r7, #6]
 800115a:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 800115c:	79fa      	ldrb	r2, [r7, #7]
 800115e:	4918      	ldr	r1, [pc, #96]	@ (80011c0 <LinkTimerBefore+0xbc>)
 8001160:	4613      	mov	r3, r2
 8001162:	005b      	lsls	r3, r3, #1
 8001164:	4413      	add	r3, r2
 8001166:	00db      	lsls	r3, r3, #3
 8001168:	440b      	add	r3, r1
 800116a:	3314      	adds	r3, #20
 800116c:	7bfa      	ldrb	r2, [r7, #15]
 800116e:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8001170:	79ba      	ldrb	r2, [r7, #6]
 8001172:	4913      	ldr	r1, [pc, #76]	@ (80011c0 <LinkTimerBefore+0xbc>)
 8001174:	4613      	mov	r3, r2
 8001176:	005b      	lsls	r3, r3, #1
 8001178:	4413      	add	r3, r2
 800117a:	00db      	lsls	r3, r3, #3
 800117c:	440b      	add	r3, r1
 800117e:	3314      	adds	r3, #20
 8001180:	79fa      	ldrb	r2, [r7, #7]
 8001182:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 8001184:	e014      	b.n	80011b0 <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 8001186:	79fa      	ldrb	r2, [r7, #7]
 8001188:	490d      	ldr	r1, [pc, #52]	@ (80011c0 <LinkTimerBefore+0xbc>)
 800118a:	4613      	mov	r3, r2
 800118c:	005b      	lsls	r3, r3, #1
 800118e:	4413      	add	r3, r2
 8001190:	00db      	lsls	r3, r3, #3
 8001192:	440b      	add	r3, r1
 8001194:	3315      	adds	r3, #21
 8001196:	79ba      	ldrb	r2, [r7, #6]
 8001198:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 800119a:	79ba      	ldrb	r2, [r7, #6]
 800119c:	4908      	ldr	r1, [pc, #32]	@ (80011c0 <LinkTimerBefore+0xbc>)
 800119e:	4613      	mov	r3, r2
 80011a0:	005b      	lsls	r3, r3, #1
 80011a2:	4413      	add	r3, r2
 80011a4:	00db      	lsls	r3, r3, #3
 80011a6:	440b      	add	r3, r1
 80011a8:	3314      	adds	r3, #20
 80011aa:	79fa      	ldrb	r2, [r7, #7]
 80011ac:	701a      	strb	r2, [r3, #0]
  return;
 80011ae:	bf00      	nop
}
 80011b0:	3714      	adds	r7, #20
 80011b2:	46bd      	mov	sp, r7
 80011b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b8:	4770      	bx	lr
 80011ba:	bf00      	nop
 80011bc:	200001c0 	.word	0x200001c0
 80011c0:	20000130 	.word	0x20000130

080011c4 <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b084      	sub	sp, #16
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	4603      	mov	r3, r0
 80011cc:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80011ce:	4b4e      	ldr	r3, [pc, #312]	@ (8001308 <linkTimer+0x144>)
 80011d0:	781b      	ldrb	r3, [r3, #0]
 80011d2:	b2db      	uxtb	r3, r3
 80011d4:	2b06      	cmp	r3, #6
 80011d6:	d118      	bne.n	800120a <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 80011d8:	4b4b      	ldr	r3, [pc, #300]	@ (8001308 <linkTimer+0x144>)
 80011da:	781b      	ldrb	r3, [r3, #0]
 80011dc:	b2da      	uxtb	r2, r3
 80011de:	4b4b      	ldr	r3, [pc, #300]	@ (800130c <linkTimer+0x148>)
 80011e0:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 80011e2:	4a49      	ldr	r2, [pc, #292]	@ (8001308 <linkTimer+0x144>)
 80011e4:	79fb      	ldrb	r3, [r7, #7]
 80011e6:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 80011e8:	79fa      	ldrb	r2, [r7, #7]
 80011ea:	4949      	ldr	r1, [pc, #292]	@ (8001310 <linkTimer+0x14c>)
 80011ec:	4613      	mov	r3, r2
 80011ee:	005b      	lsls	r3, r3, #1
 80011f0:	4413      	add	r3, r2
 80011f2:	00db      	lsls	r3, r3, #3
 80011f4:	440b      	add	r3, r1
 80011f6:	3315      	adds	r3, #21
 80011f8:	2206      	movs	r2, #6
 80011fa:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 80011fc:	4b45      	ldr	r3, [pc, #276]	@ (8001314 <linkTimer+0x150>)
 80011fe:	f04f 32ff 	mov.w	r2, #4294967295
 8001202:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 8001204:	2300      	movs	r3, #0
 8001206:	81fb      	strh	r3, [r7, #14]
 8001208:	e078      	b.n	80012fc <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 800120a:	f000 f909 	bl	8001420 <ReturnTimeElapsed>
 800120e:	4603      	mov	r3, r0
 8001210:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 8001212:	79fa      	ldrb	r2, [r7, #7]
 8001214:	493e      	ldr	r1, [pc, #248]	@ (8001310 <linkTimer+0x14c>)
 8001216:	4613      	mov	r3, r2
 8001218:	005b      	lsls	r3, r3, #1
 800121a:	4413      	add	r3, r2
 800121c:	00db      	lsls	r3, r3, #3
 800121e:	440b      	add	r3, r1
 8001220:	3308      	adds	r3, #8
 8001222:	6819      	ldr	r1, [r3, #0]
 8001224:	89fb      	ldrh	r3, [r7, #14]
 8001226:	79fa      	ldrb	r2, [r7, #7]
 8001228:	4419      	add	r1, r3
 800122a:	4839      	ldr	r0, [pc, #228]	@ (8001310 <linkTimer+0x14c>)
 800122c:	4613      	mov	r3, r2
 800122e:	005b      	lsls	r3, r3, #1
 8001230:	4413      	add	r3, r2
 8001232:	00db      	lsls	r3, r3, #3
 8001234:	4403      	add	r3, r0
 8001236:	3308      	adds	r3, #8
 8001238:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 800123a:	79fa      	ldrb	r2, [r7, #7]
 800123c:	4934      	ldr	r1, [pc, #208]	@ (8001310 <linkTimer+0x14c>)
 800123e:	4613      	mov	r3, r2
 8001240:	005b      	lsls	r3, r3, #1
 8001242:	4413      	add	r3, r2
 8001244:	00db      	lsls	r3, r3, #3
 8001246:	440b      	add	r3, r1
 8001248:	3308      	adds	r3, #8
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 800124e:	4b2e      	ldr	r3, [pc, #184]	@ (8001308 <linkTimer+0x144>)
 8001250:	781b      	ldrb	r3, [r3, #0]
 8001252:	b2db      	uxtb	r3, r3
 8001254:	4619      	mov	r1, r3
 8001256:	4a2e      	ldr	r2, [pc, #184]	@ (8001310 <linkTimer+0x14c>)
 8001258:	460b      	mov	r3, r1
 800125a:	005b      	lsls	r3, r3, #1
 800125c:	440b      	add	r3, r1
 800125e:	00db      	lsls	r3, r3, #3
 8001260:	4413      	add	r3, r2
 8001262:	3308      	adds	r3, #8
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	68ba      	ldr	r2, [r7, #8]
 8001268:	429a      	cmp	r2, r3
 800126a:	d337      	bcc.n	80012dc <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 800126c:	4b26      	ldr	r3, [pc, #152]	@ (8001308 <linkTimer+0x144>)
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 8001272:	7b7a      	ldrb	r2, [r7, #13]
 8001274:	4926      	ldr	r1, [pc, #152]	@ (8001310 <linkTimer+0x14c>)
 8001276:	4613      	mov	r3, r2
 8001278:	005b      	lsls	r3, r3, #1
 800127a:	4413      	add	r3, r2
 800127c:	00db      	lsls	r3, r3, #3
 800127e:	440b      	add	r3, r1
 8001280:	3315      	adds	r3, #21
 8001282:	781b      	ldrb	r3, [r3, #0]
 8001284:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8001286:	e013      	b.n	80012b0 <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8001288:	7b7a      	ldrb	r2, [r7, #13]
 800128a:	4921      	ldr	r1, [pc, #132]	@ (8001310 <linkTimer+0x14c>)
 800128c:	4613      	mov	r3, r2
 800128e:	005b      	lsls	r3, r3, #1
 8001290:	4413      	add	r3, r2
 8001292:	00db      	lsls	r3, r3, #3
 8001294:	440b      	add	r3, r1
 8001296:	3315      	adds	r3, #21
 8001298:	781b      	ldrb	r3, [r3, #0]
 800129a:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 800129c:	7b7a      	ldrb	r2, [r7, #13]
 800129e:	491c      	ldr	r1, [pc, #112]	@ (8001310 <linkTimer+0x14c>)
 80012a0:	4613      	mov	r3, r2
 80012a2:	005b      	lsls	r3, r3, #1
 80012a4:	4413      	add	r3, r2
 80012a6:	00db      	lsls	r3, r3, #3
 80012a8:	440b      	add	r3, r1
 80012aa:	3315      	adds	r3, #21
 80012ac:	781b      	ldrb	r3, [r3, #0]
 80012ae:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 80012b0:	7b3b      	ldrb	r3, [r7, #12]
 80012b2:	2b06      	cmp	r3, #6
 80012b4:	d00b      	beq.n	80012ce <linkTimer+0x10a>
 80012b6:	7b3a      	ldrb	r2, [r7, #12]
 80012b8:	4915      	ldr	r1, [pc, #84]	@ (8001310 <linkTimer+0x14c>)
 80012ba:	4613      	mov	r3, r2
 80012bc:	005b      	lsls	r3, r3, #1
 80012be:	4413      	add	r3, r2
 80012c0:	00db      	lsls	r3, r3, #3
 80012c2:	440b      	add	r3, r1
 80012c4:	3308      	adds	r3, #8
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	68ba      	ldr	r2, [r7, #8]
 80012ca:	429a      	cmp	r2, r3
 80012cc:	d2dc      	bcs.n	8001288 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 80012ce:	7b7a      	ldrb	r2, [r7, #13]
 80012d0:	79fb      	ldrb	r3, [r7, #7]
 80012d2:	4611      	mov	r1, r2
 80012d4:	4618      	mov	r0, r3
 80012d6:	f7ff fecf 	bl	8001078 <LinkTimerAfter>
 80012da:	e00f      	b.n	80012fc <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 80012dc:	4b0a      	ldr	r3, [pc, #40]	@ (8001308 <linkTimer+0x144>)
 80012de:	781b      	ldrb	r3, [r3, #0]
 80012e0:	b2da      	uxtb	r2, r3
 80012e2:	79fb      	ldrb	r3, [r7, #7]
 80012e4:	4611      	mov	r1, r2
 80012e6:	4618      	mov	r0, r3
 80012e8:	f7ff ff0c 	bl	8001104 <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 80012ec:	4b06      	ldr	r3, [pc, #24]	@ (8001308 <linkTimer+0x144>)
 80012ee:	781b      	ldrb	r3, [r3, #0]
 80012f0:	b2da      	uxtb	r2, r3
 80012f2:	4b06      	ldr	r3, [pc, #24]	@ (800130c <linkTimer+0x148>)
 80012f4:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 80012f6:	4a04      	ldr	r2, [pc, #16]	@ (8001308 <linkTimer+0x144>)
 80012f8:	79fb      	ldrb	r3, [r7, #7]
 80012fa:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 80012fc:	89fb      	ldrh	r3, [r7, #14]
}
 80012fe:	4618      	mov	r0, r3
 8001300:	3710      	adds	r7, #16
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	200001c0 	.word	0x200001c0
 800130c:	200001c1 	.word	0x200001c1
 8001310:	20000130 	.word	0x20000130
 8001314:	200001c4 	.word	0x200001c4

08001318 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8001318:	b480      	push	{r7}
 800131a:	b085      	sub	sp, #20
 800131c:	af00      	add	r7, sp, #0
 800131e:	4603      	mov	r3, r0
 8001320:	460a      	mov	r2, r1
 8001322:	71fb      	strb	r3, [r7, #7]
 8001324:	4613      	mov	r3, r2
 8001326:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8001328:	4b39      	ldr	r3, [pc, #228]	@ (8001410 <UnlinkTimer+0xf8>)
 800132a:	781b      	ldrb	r3, [r3, #0]
 800132c:	b2db      	uxtb	r3, r3
 800132e:	79fa      	ldrb	r2, [r7, #7]
 8001330:	429a      	cmp	r2, r3
 8001332:	d111      	bne.n	8001358 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 8001334:	4b36      	ldr	r3, [pc, #216]	@ (8001410 <UnlinkTimer+0xf8>)
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	b2da      	uxtb	r2, r3
 800133a:	4b36      	ldr	r3, [pc, #216]	@ (8001414 <UnlinkTimer+0xfc>)
 800133c:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 800133e:	79fa      	ldrb	r2, [r7, #7]
 8001340:	4935      	ldr	r1, [pc, #212]	@ (8001418 <UnlinkTimer+0x100>)
 8001342:	4613      	mov	r3, r2
 8001344:	005b      	lsls	r3, r3, #1
 8001346:	4413      	add	r3, r2
 8001348:	00db      	lsls	r3, r3, #3
 800134a:	440b      	add	r3, r1
 800134c:	3315      	adds	r3, #21
 800134e:	781b      	ldrb	r3, [r3, #0]
 8001350:	b2da      	uxtb	r2, r3
 8001352:	4b2f      	ldr	r3, [pc, #188]	@ (8001410 <UnlinkTimer+0xf8>)
 8001354:	701a      	strb	r2, [r3, #0]
 8001356:	e03e      	b.n	80013d6 <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8001358:	79fa      	ldrb	r2, [r7, #7]
 800135a:	492f      	ldr	r1, [pc, #188]	@ (8001418 <UnlinkTimer+0x100>)
 800135c:	4613      	mov	r3, r2
 800135e:	005b      	lsls	r3, r3, #1
 8001360:	4413      	add	r3, r2
 8001362:	00db      	lsls	r3, r3, #3
 8001364:	440b      	add	r3, r1
 8001366:	3314      	adds	r3, #20
 8001368:	781b      	ldrb	r3, [r3, #0]
 800136a:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 800136c:	79fa      	ldrb	r2, [r7, #7]
 800136e:	492a      	ldr	r1, [pc, #168]	@ (8001418 <UnlinkTimer+0x100>)
 8001370:	4613      	mov	r3, r2
 8001372:	005b      	lsls	r3, r3, #1
 8001374:	4413      	add	r3, r2
 8001376:	00db      	lsls	r3, r3, #3
 8001378:	440b      	add	r3, r1
 800137a:	3315      	adds	r3, #21
 800137c:	781b      	ldrb	r3, [r3, #0]
 800137e:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8001380:	79f9      	ldrb	r1, [r7, #7]
 8001382:	7bfa      	ldrb	r2, [r7, #15]
 8001384:	4824      	ldr	r0, [pc, #144]	@ (8001418 <UnlinkTimer+0x100>)
 8001386:	460b      	mov	r3, r1
 8001388:	005b      	lsls	r3, r3, #1
 800138a:	440b      	add	r3, r1
 800138c:	00db      	lsls	r3, r3, #3
 800138e:	4403      	add	r3, r0
 8001390:	3315      	adds	r3, #21
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	b2d8      	uxtb	r0, r3
 8001396:	4920      	ldr	r1, [pc, #128]	@ (8001418 <UnlinkTimer+0x100>)
 8001398:	4613      	mov	r3, r2
 800139a:	005b      	lsls	r3, r3, #1
 800139c:	4413      	add	r3, r2
 800139e:	00db      	lsls	r3, r3, #3
 80013a0:	440b      	add	r3, r1
 80013a2:	3315      	adds	r3, #21
 80013a4:	4602      	mov	r2, r0
 80013a6:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80013a8:	7bbb      	ldrb	r3, [r7, #14]
 80013aa:	2b06      	cmp	r3, #6
 80013ac:	d013      	beq.n	80013d6 <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 80013ae:	79f9      	ldrb	r1, [r7, #7]
 80013b0:	7bba      	ldrb	r2, [r7, #14]
 80013b2:	4819      	ldr	r0, [pc, #100]	@ (8001418 <UnlinkTimer+0x100>)
 80013b4:	460b      	mov	r3, r1
 80013b6:	005b      	lsls	r3, r3, #1
 80013b8:	440b      	add	r3, r1
 80013ba:	00db      	lsls	r3, r3, #3
 80013bc:	4403      	add	r3, r0
 80013be:	3314      	adds	r3, #20
 80013c0:	781b      	ldrb	r3, [r3, #0]
 80013c2:	b2d8      	uxtb	r0, r3
 80013c4:	4914      	ldr	r1, [pc, #80]	@ (8001418 <UnlinkTimer+0x100>)
 80013c6:	4613      	mov	r3, r2
 80013c8:	005b      	lsls	r3, r3, #1
 80013ca:	4413      	add	r3, r2
 80013cc:	00db      	lsls	r3, r3, #3
 80013ce:	440b      	add	r3, r1
 80013d0:	3314      	adds	r3, #20
 80013d2:	4602      	mov	r2, r0
 80013d4:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 80013d6:	79fa      	ldrb	r2, [r7, #7]
 80013d8:	490f      	ldr	r1, [pc, #60]	@ (8001418 <UnlinkTimer+0x100>)
 80013da:	4613      	mov	r3, r2
 80013dc:	005b      	lsls	r3, r3, #1
 80013de:	4413      	add	r3, r2
 80013e0:	00db      	lsls	r3, r3, #3
 80013e2:	440b      	add	r3, r1
 80013e4:	330c      	adds	r3, #12
 80013e6:	2201      	movs	r2, #1
 80013e8:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 80013ea:	4b09      	ldr	r3, [pc, #36]	@ (8001410 <UnlinkTimer+0xf8>)
 80013ec:	781b      	ldrb	r3, [r3, #0]
 80013ee:	b2db      	uxtb	r3, r3
 80013f0:	2b06      	cmp	r3, #6
 80013f2:	d107      	bne.n	8001404 <UnlinkTimer+0xec>
 80013f4:	79bb      	ldrb	r3, [r7, #6]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d104      	bne.n	8001404 <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 80013fa:	4b08      	ldr	r3, [pc, #32]	@ (800141c <UnlinkTimer+0x104>)
 80013fc:	f04f 32ff 	mov.w	r2, #4294967295
 8001400:	601a      	str	r2, [r3, #0]
  }

  return;
 8001402:	bf00      	nop
 8001404:	bf00      	nop
}
 8001406:	3714      	adds	r7, #20
 8001408:	46bd      	mov	sp, r7
 800140a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140e:	4770      	bx	lr
 8001410:	200001c0 	.word	0x200001c0
 8001414:	200001c1 	.word	0x200001c1
 8001418:	20000130 	.word	0x20000130
 800141c:	200001c4 	.word	0x200001c4

08001420 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b082      	sub	sp, #8
 8001424:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 8001426:	4b1a      	ldr	r3, [pc, #104]	@ (8001490 <ReturnTimeElapsed+0x70>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800142e:	d026      	beq.n	800147e <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8001430:	f7ff fe02 	bl	8001038 <ReadRtcSsrValue>
 8001434:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 8001436:	4b16      	ldr	r3, [pc, #88]	@ (8001490 <ReturnTimeElapsed+0x70>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	687a      	ldr	r2, [r7, #4]
 800143c:	429a      	cmp	r2, r3
 800143e:	d805      	bhi.n	800144c <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8001440:	4b13      	ldr	r3, [pc, #76]	@ (8001490 <ReturnTimeElapsed+0x70>)
 8001442:	681a      	ldr	r2, [r3, #0]
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	1ad3      	subs	r3, r2, r3
 8001448:	607b      	str	r3, [r7, #4]
 800144a:	e00a      	b.n	8001462 <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 800144c:	4b11      	ldr	r3, [pc, #68]	@ (8001494 <ReturnTimeElapsed+0x74>)
 800144e:	881b      	ldrh	r3, [r3, #0]
 8001450:	461a      	mov	r2, r3
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	1ad3      	subs	r3, r2, r3
 8001456:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8001458:	4b0d      	ldr	r3, [pc, #52]	@ (8001490 <ReturnTimeElapsed+0x70>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	683a      	ldr	r2, [r7, #0]
 800145e:	4413      	add	r3, r2
 8001460:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 8001462:	4b0d      	ldr	r3, [pc, #52]	@ (8001498 <ReturnTimeElapsed+0x78>)
 8001464:	781b      	ldrb	r3, [r3, #0]
 8001466:	461a      	mov	r2, r3
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	fb02 f303 	mul.w	r3, r2, r3
 800146e:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8001470:	4b0a      	ldr	r3, [pc, #40]	@ (800149c <ReturnTimeElapsed+0x7c>)
 8001472:	781b      	ldrb	r3, [r3, #0]
 8001474:	461a      	mov	r2, r3
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	40d3      	lsrs	r3, r2
 800147a:	607b      	str	r3, [r7, #4]
 800147c:	e001      	b.n	8001482 <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 800147e:	2300      	movs	r3, #0
 8001480:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	b29b      	uxth	r3, r3
}
 8001486:	4618      	mov	r0, r3
 8001488:	3708      	adds	r7, #8
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	200001c4 	.word	0x200001c4
 8001494:	200001cc 	.word	0x200001cc
 8001498:	200001ca 	.word	0x200001ca
 800149c:	200001c9 	.word	0x200001c9

080014a0 <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b082      	sub	sp, #8
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	4603      	mov	r3, r0
 80014a8:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
   */

  if(Value == 0)
 80014aa:	88fb      	ldrh	r3, [r7, #6]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d108      	bne.n	80014c2 <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 80014b0:	f7ff fdc2 	bl	8001038 <ReadRtcSsrValue>
 80014b4:	4603      	mov	r3, r0
 80014b6:	4a21      	ldr	r2, [pc, #132]	@ (800153c <RestartWakeupCounter+0x9c>)
 80014b8:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 80014ba:	2003      	movs	r0, #3
 80014bc:	f003 f811 	bl	80044e2 <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 80014c0:	e039      	b.n	8001536 <RestartWakeupCounter+0x96>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 80014c2:	88fb      	ldrh	r3, [r7, #6]
 80014c4:	2b01      	cmp	r3, #1
 80014c6:	d803      	bhi.n	80014d0 <RestartWakeupCounter+0x30>
 80014c8:	4b1d      	ldr	r3, [pc, #116]	@ (8001540 <RestartWakeupCounter+0xa0>)
 80014ca:	781b      	ldrb	r3, [r3, #0]
 80014cc:	2b01      	cmp	r3, #1
 80014ce:	d002      	beq.n	80014d6 <RestartWakeupCounter+0x36>
      Value -= 1;
 80014d0:	88fb      	ldrh	r3, [r7, #6]
 80014d2:	3b01      	subs	r3, #1
 80014d4:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 80014d6:	bf00      	nop
 80014d8:	4b1a      	ldr	r3, [pc, #104]	@ (8001544 <RestartWakeupCounter+0xa4>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	68db      	ldr	r3, [r3, #12]
 80014de:	f003 0304 	and.w	r3, r3, #4
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d0f8      	beq.n	80014d8 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 80014e6:	4b17      	ldr	r3, [pc, #92]	@ (8001544 <RestartWakeupCounter+0xa4>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	68db      	ldr	r3, [r3, #12]
 80014ec:	b2da      	uxtb	r2, r3
 80014ee:	4b15      	ldr	r3, [pc, #84]	@ (8001544 <RestartWakeupCounter+0xa4>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 80014f6:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 80014f8:	4b13      	ldr	r3, [pc, #76]	@ (8001548 <RestartWakeupCounter+0xa8>)
 80014fa:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80014fe:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8001500:	2003      	movs	r0, #3
 8001502:	f002 fffc 	bl	80044fe <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 8001506:	4b11      	ldr	r3, [pc, #68]	@ (800154c <RestartWakeupCounter+0xac>)
 8001508:	695b      	ldr	r3, [r3, #20]
 800150a:	0c1b      	lsrs	r3, r3, #16
 800150c:	041b      	lsls	r3, r3, #16
 800150e:	88fa      	ldrh	r2, [r7, #6]
 8001510:	490e      	ldr	r1, [pc, #56]	@ (800154c <RestartWakeupCounter+0xac>)
 8001512:	4313      	orrs	r3, r2
 8001514:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8001516:	f7ff fd8f 	bl	8001038 <ReadRtcSsrValue>
 800151a:	4603      	mov	r3, r0
 800151c:	4a07      	ldr	r2, [pc, #28]	@ (800153c <RestartWakeupCounter+0x9c>)
 800151e:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */
 8001520:	4b08      	ldr	r3, [pc, #32]	@ (8001544 <RestartWakeupCounter+0xa4>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	689a      	ldr	r2, [r3, #8]
 8001526:	4b07      	ldr	r3, [pc, #28]	@ (8001544 <RestartWakeupCounter+0xa4>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800152e:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8001530:	f3af 8000 	nop.w
  return ;
 8001534:	bf00      	nop
}
 8001536:	3708      	adds	r7, #8
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}
 800153c:	200001c4 	.word	0x200001c4
 8001540:	200001c9 	.word	0x200001c9
 8001544:	200002c0 	.word	0x200002c0
 8001548:	58000800 	.word	0x58000800
 800154c:	40002800 	.word	0x40002800

08001550 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b084      	sub	sp, #16
 8001554:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8001556:	4b45      	ldr	r3, [pc, #276]	@ (800166c <RescheduleTimerList+0x11c>)
 8001558:	689b      	ldr	r3, [r3, #8]
 800155a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800155e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001562:	d107      	bne.n	8001574 <RescheduleTimerList+0x24>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8001564:	bf00      	nop
 8001566:	4b42      	ldr	r3, [pc, #264]	@ (8001670 <RescheduleTimerList+0x120>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	68db      	ldr	r3, [r3, #12]
 800156c:	f003 0304 	and.w	r3, r3, #4
 8001570:	2b00      	cmp	r3, #0
 8001572:	d1f8      	bne.n	8001566 <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8001574:	4b3e      	ldr	r3, [pc, #248]	@ (8001670 <RescheduleTimerList+0x120>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	689a      	ldr	r2, [r3, #8]
 800157a:	4b3d      	ldr	r3, [pc, #244]	@ (8001670 <RescheduleTimerList+0x120>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001582:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 8001584:	4b3b      	ldr	r3, [pc, #236]	@ (8001674 <RescheduleTimerList+0x124>)
 8001586:	781b      	ldrb	r3, [r3, #0]
 8001588:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 800158a:	7bfa      	ldrb	r2, [r7, #15]
 800158c:	493a      	ldr	r1, [pc, #232]	@ (8001678 <RescheduleTimerList+0x128>)
 800158e:	4613      	mov	r3, r2
 8001590:	005b      	lsls	r3, r3, #1
 8001592:	4413      	add	r3, r2
 8001594:	00db      	lsls	r3, r3, #3
 8001596:	440b      	add	r3, r1
 8001598:	3308      	adds	r3, #8
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 800159e:	f7ff ff3f 	bl	8001420 <ReturnTimeElapsed>
 80015a2:	4603      	mov	r3, r0
 80015a4:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 80015a6:	88fb      	ldrh	r3, [r7, #6]
 80015a8:	68ba      	ldr	r2, [r7, #8]
 80015aa:	429a      	cmp	r2, r3
 80015ac:	d205      	bcs.n	80015ba <RescheduleTimerList+0x6a>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 80015ae:	2300      	movs	r3, #0
 80015b0:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 80015b2:	4b32      	ldr	r3, [pc, #200]	@ (800167c <RescheduleTimerList+0x12c>)
 80015b4:	2201      	movs	r2, #1
 80015b6:	701a      	strb	r2, [r3, #0]
 80015b8:	e04d      	b.n	8001656 <RescheduleTimerList+0x106>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 80015ba:	88fb      	ldrh	r3, [r7, #6]
 80015bc:	4a30      	ldr	r2, [pc, #192]	@ (8001680 <RescheduleTimerList+0x130>)
 80015be:	8812      	ldrh	r2, [r2, #0]
 80015c0:	b292      	uxth	r2, r2
 80015c2:	4413      	add	r3, r2
 80015c4:	461a      	mov	r2, r3
 80015c6:	68bb      	ldr	r3, [r7, #8]
 80015c8:	4293      	cmp	r3, r2
 80015ca:	d906      	bls.n	80015da <RescheduleTimerList+0x8a>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 80015cc:	4b2c      	ldr	r3, [pc, #176]	@ (8001680 <RescheduleTimerList+0x130>)
 80015ce:	881b      	ldrh	r3, [r3, #0]
 80015d0:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 80015d2:	4b2a      	ldr	r3, [pc, #168]	@ (800167c <RescheduleTimerList+0x12c>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	701a      	strb	r2, [r3, #0]
 80015d8:	e03d      	b.n	8001656 <RescheduleTimerList+0x106>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 80015da:	68bb      	ldr	r3, [r7, #8]
 80015dc:	b29a      	uxth	r2, r3
 80015de:	88fb      	ldrh	r3, [r7, #6]
 80015e0:	1ad3      	subs	r3, r2, r3
 80015e2:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 80015e4:	4b25      	ldr	r3, [pc, #148]	@ (800167c <RescheduleTimerList+0x12c>)
 80015e6:	2201      	movs	r2, #1
 80015e8:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80015ea:	e034      	b.n	8001656 <RescheduleTimerList+0x106>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 80015ec:	7bfa      	ldrb	r2, [r7, #15]
 80015ee:	4922      	ldr	r1, [pc, #136]	@ (8001678 <RescheduleTimerList+0x128>)
 80015f0:	4613      	mov	r3, r2
 80015f2:	005b      	lsls	r3, r3, #1
 80015f4:	4413      	add	r3, r2
 80015f6:	00db      	lsls	r3, r3, #3
 80015f8:	440b      	add	r3, r1
 80015fa:	3308      	adds	r3, #8
 80015fc:	681a      	ldr	r2, [r3, #0]
 80015fe:	88fb      	ldrh	r3, [r7, #6]
 8001600:	429a      	cmp	r2, r3
 8001602:	d20a      	bcs.n	800161a <RescheduleTimerList+0xca>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 8001604:	7bfa      	ldrb	r2, [r7, #15]
 8001606:	491c      	ldr	r1, [pc, #112]	@ (8001678 <RescheduleTimerList+0x128>)
 8001608:	4613      	mov	r3, r2
 800160a:	005b      	lsls	r3, r3, #1
 800160c:	4413      	add	r3, r2
 800160e:	00db      	lsls	r3, r3, #3
 8001610:	440b      	add	r3, r1
 8001612:	3308      	adds	r3, #8
 8001614:	2200      	movs	r2, #0
 8001616:	601a      	str	r2, [r3, #0]
 8001618:	e013      	b.n	8001642 <RescheduleTimerList+0xf2>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 800161a:	7bfa      	ldrb	r2, [r7, #15]
 800161c:	4916      	ldr	r1, [pc, #88]	@ (8001678 <RescheduleTimerList+0x128>)
 800161e:	4613      	mov	r3, r2
 8001620:	005b      	lsls	r3, r3, #1
 8001622:	4413      	add	r3, r2
 8001624:	00db      	lsls	r3, r3, #3
 8001626:	440b      	add	r3, r1
 8001628:	3308      	adds	r3, #8
 800162a:	6819      	ldr	r1, [r3, #0]
 800162c:	88fb      	ldrh	r3, [r7, #6]
 800162e:	7bfa      	ldrb	r2, [r7, #15]
 8001630:	1ac9      	subs	r1, r1, r3
 8001632:	4811      	ldr	r0, [pc, #68]	@ (8001678 <RescheduleTimerList+0x128>)
 8001634:	4613      	mov	r3, r2
 8001636:	005b      	lsls	r3, r3, #1
 8001638:	4413      	add	r3, r2
 800163a:	00db      	lsls	r3, r3, #3
 800163c:	4403      	add	r3, r0
 800163e:	3308      	adds	r3, #8
 8001640:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 8001642:	7bfa      	ldrb	r2, [r7, #15]
 8001644:	490c      	ldr	r1, [pc, #48]	@ (8001678 <RescheduleTimerList+0x128>)
 8001646:	4613      	mov	r3, r2
 8001648:	005b      	lsls	r3, r3, #1
 800164a:	4413      	add	r3, r2
 800164c:	00db      	lsls	r3, r3, #3
 800164e:	440b      	add	r3, r1
 8001650:	3315      	adds	r3, #21
 8001652:	781b      	ldrb	r3, [r3, #0]
 8001654:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001656:	7bfb      	ldrb	r3, [r7, #15]
 8001658:	2b06      	cmp	r3, #6
 800165a:	d1c7      	bne.n	80015ec <RescheduleTimerList+0x9c>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 800165c:	89bb      	ldrh	r3, [r7, #12]
 800165e:	4618      	mov	r0, r3
 8001660:	f7ff ff1e 	bl	80014a0 <RestartWakeupCounter>

  return ;
 8001664:	bf00      	nop
}
 8001666:	3710      	adds	r7, #16
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}
 800166c:	40002800 	.word	0x40002800
 8001670:	200002c0 	.word	0x200002c0
 8001674:	200001c0 	.word	0x200001c0
 8001678:	20000130 	.word	0x20000130
 800167c:	200001c8 	.word	0x200001c8
 8001680:	200001ce 	.word	0x200001ce

08001684 <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b08a      	sub	sp, #40	@ 0x28
 8001688:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800168a:	f3ef 8310 	mrs	r3, PRIMASK
 800168e:	617b      	str	r3, [r7, #20]
  return(result);
 8001690:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001692:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8001694:	b672      	cpsid	i
}
 8001696:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001698:	4b59      	ldr	r3, [pc, #356]	@ (8001800 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	22ca      	movs	r2, #202	@ 0xca
 800169e:	625a      	str	r2, [r3, #36]	@ 0x24
 80016a0:	4b57      	ldr	r3, [pc, #348]	@ (8001800 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	2253      	movs	r2, #83	@ 0x53
 80016a6:	625a      	str	r2, [r3, #36]	@ 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
 80016a8:	4b55      	ldr	r3, [pc, #340]	@ (8001800 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	689a      	ldr	r2, [r3, #8]
 80016ae:	4b54      	ldr	r3, [pc, #336]	@ (8001800 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80016b6:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 80016b8:	4b52      	ldr	r3, [pc, #328]	@ (8001804 <HW_TS_RTC_Wakeup_Handler+0x180>)
 80016ba:	781b      	ldrb	r3, [r3, #0]
 80016bc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 80016c0:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 80016c4:	4950      	ldr	r1, [pc, #320]	@ (8001808 <HW_TS_RTC_Wakeup_Handler+0x184>)
 80016c6:	4613      	mov	r3, r2
 80016c8:	005b      	lsls	r3, r3, #1
 80016ca:	4413      	add	r3, r2
 80016cc:	00db      	lsls	r3, r3, #3
 80016ce:	440b      	add	r3, r1
 80016d0:	330c      	adds	r3, #12
 80016d2:	781b      	ldrb	r3, [r3, #0]
 80016d4:	b2db      	uxtb	r3, r3
 80016d6:	2b02      	cmp	r3, #2
 80016d8:	d16e      	bne.n	80017b8 <HW_TS_RTC_Wakeup_Handler+0x134>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 80016da:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 80016de:	494a      	ldr	r1, [pc, #296]	@ (8001808 <HW_TS_RTC_Wakeup_Handler+0x184>)
 80016e0:	4613      	mov	r3, r2
 80016e2:	005b      	lsls	r3, r3, #1
 80016e4:	4413      	add	r3, r2
 80016e6:	00db      	lsls	r3, r3, #3
 80016e8:	440b      	add	r3, r1
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 80016ee:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 80016f2:	4945      	ldr	r1, [pc, #276]	@ (8001808 <HW_TS_RTC_Wakeup_Handler+0x184>)
 80016f4:	4613      	mov	r3, r2
 80016f6:	005b      	lsls	r3, r3, #1
 80016f8:	4413      	add	r3, r2
 80016fa:	00db      	lsls	r3, r3, #3
 80016fc:	440b      	add	r3, r1
 80016fe:	3310      	adds	r3, #16
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 8001704:	4b41      	ldr	r3, [pc, #260]	@ (800180c <HW_TS_RTC_Wakeup_Handler+0x188>)
 8001706:	781b      	ldrb	r3, [r3, #0]
 8001708:	b2db      	uxtb	r3, r3
 800170a:	2b00      	cmp	r3, #0
 800170c:	d04c      	beq.n	80017a8 <HW_TS_RTC_Wakeup_Handler+0x124>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 800170e:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8001712:	493d      	ldr	r1, [pc, #244]	@ (8001808 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001714:	4613      	mov	r3, r2
 8001716:	005b      	lsls	r3, r3, #1
 8001718:	4413      	add	r3, r2
 800171a:	00db      	lsls	r3, r3, #3
 800171c:	440b      	add	r3, r1
 800171e:	330d      	adds	r3, #13
 8001720:	781b      	ldrb	r3, [r3, #0]
 8001722:	b2db      	uxtb	r3, r3
 8001724:	2b01      	cmp	r3, #1
 8001726:	d124      	bne.n	8001772 <HW_TS_RTC_Wakeup_Handler+0xee>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 8001728:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800172c:	2101      	movs	r1, #1
 800172e:	4618      	mov	r0, r3
 8001730:	f7ff fdf2 	bl	8001318 <UnlinkTimer>
 8001734:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001736:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001738:	693b      	ldr	r3, [r7, #16]
 800173a:	f383 8810 	msr	PRIMASK, r3
}
 800173e:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 8001740:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8001744:	4930      	ldr	r1, [pc, #192]	@ (8001808 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001746:	4613      	mov	r3, r2
 8001748:	005b      	lsls	r3, r3, #1
 800174a:	4413      	add	r3, r2
 800174c:	00db      	lsls	r3, r3, #3
 800174e:	440b      	add	r3, r1
 8001750:	3304      	adds	r3, #4
 8001752:	681a      	ldr	r2, [r3, #0]
 8001754:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001758:	4611      	mov	r1, r2
 800175a:	4618      	mov	r0, r3
 800175c:	f000 f9b8 	bl	8001ad0 <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001760:	4b27      	ldr	r3, [pc, #156]	@ (8001800 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	22ca      	movs	r2, #202	@ 0xca
 8001766:	625a      	str	r2, [r3, #36]	@ 0x24
 8001768:	4b25      	ldr	r3, [pc, #148]	@ (8001800 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	2253      	movs	r2, #83	@ 0x53
 800176e:	625a      	str	r2, [r3, #36]	@ 0x24
 8001770:	e012      	b.n	8001798 <HW_TS_RTC_Wakeup_Handler+0x114>
 8001772:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001774:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	f383 8810 	msr	PRIMASK, r3
}
 800177c:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 800177e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001782:	4618      	mov	r0, r3
 8001784:	f000 f920 	bl	80019c8 <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001788:	4b1d      	ldr	r3, [pc, #116]	@ (8001800 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	22ca      	movs	r2, #202	@ 0xca
 800178e:	625a      	str	r2, [r3, #36]	@ 0x24
 8001790:	4b1b      	ldr	r3, [pc, #108]	@ (8001800 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	2253      	movs	r2, #83	@ 0x53
 8001796:	625a      	str	r2, [r3, #36]	@ 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 8001798:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800179c:	69fa      	ldr	r2, [r7, #28]
 800179e:	4619      	mov	r1, r3
 80017a0:	69b8      	ldr	r0, [r7, #24]
 80017a2:	f000 fa1b 	bl	8001bdc <HW_TS_RTC_Int_AppNot>
 80017a6:	e022      	b.n	80017ee <HW_TS_RTC_Wakeup_Handler+0x16a>
    }
    else
    {
      RescheduleTimerList();
 80017a8:	f7ff fed2 	bl	8001550 <RescheduleTimerList>
 80017ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017ae:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80017b0:	68bb      	ldr	r3, [r7, #8]
 80017b2:	f383 8810 	msr	PRIMASK, r3
}
 80017b6:	e01a      	b.n	80017ee <HW_TS_RTC_Wakeup_Handler+0x16a>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 80017b8:	bf00      	nop
 80017ba:	4b11      	ldr	r3, [pc, #68]	@ (8001800 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	68db      	ldr	r3, [r3, #12]
 80017c0:	f003 0304 	and.w	r3, r3, #4
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d0f8      	beq.n	80017ba <HW_TS_RTC_Wakeup_Handler+0x136>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 80017c8:	4b0d      	ldr	r3, [pc, #52]	@ (8001800 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	68db      	ldr	r3, [r3, #12]
 80017ce:	b2da      	uxtb	r2, r3
 80017d0:	4b0b      	ldr	r3, [pc, #44]	@ (8001800 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 80017d8:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 80017da:	4b0d      	ldr	r3, [pc, #52]	@ (8001810 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 80017dc:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80017e0:	60da      	str	r2, [r3, #12]
 80017e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017e4:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	f383 8810 	msr	PRIMASK, r3
}
 80017ec:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80017ee:	4b04      	ldr	r3, [pc, #16]	@ (8001800 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	22ff      	movs	r2, #255	@ 0xff
 80017f4:	625a      	str	r2, [r3, #36]	@ 0x24

  return;
 80017f6:	bf00      	nop
}
 80017f8:	3728      	adds	r7, #40	@ 0x28
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	200002c0 	.word	0x200002c0
 8001804:	200001c0 	.word	0x200001c0
 8001808:	20000130 	.word	0x20000130
 800180c:	200001c8 	.word	0x200001c8
 8001810:	58000800 	.word	0x58000800

08001814 <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *phrtc)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b088      	sub	sp, #32
 8001818:	af00      	add	r7, sp, #0
 800181a:	4603      	mov	r3, r0
 800181c:	6039      	str	r1, [r7, #0]
 800181e:	71fb      	strb	r3, [r7, #7]
  uint8_t loop;
  uint32_t localmaxwakeuptimersetup;

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001820:	4b5e      	ldr	r3, [pc, #376]	@ (800199c <HW_TS_Init+0x188>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	22ca      	movs	r2, #202	@ 0xca
 8001826:	625a      	str	r2, [r3, #36]	@ 0x24
 8001828:	4b5c      	ldr	r3, [pc, #368]	@ (800199c <HW_TS_Init+0x188>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	2253      	movs	r2, #83	@ 0x53
 800182e:	625a      	str	r2, [r3, #36]	@ 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8001830:	4b5b      	ldr	r3, [pc, #364]	@ (80019a0 <HW_TS_Init+0x18c>)
 8001832:	689b      	ldr	r3, [r3, #8]
 8001834:	4a5a      	ldr	r2, [pc, #360]	@ (80019a0 <HW_TS_Init+0x18c>)
 8001836:	f043 0320 	orr.w	r3, r3, #32
 800183a:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 800183c:	4b58      	ldr	r3, [pc, #352]	@ (80019a0 <HW_TS_Init+0x18c>)
 800183e:	689b      	ldr	r3, [r3, #8]
 8001840:	b2db      	uxtb	r3, r3
 8001842:	f003 0307 	and.w	r3, r3, #7
 8001846:	b2db      	uxtb	r3, r3
 8001848:	f1c3 0304 	rsb	r3, r3, #4
 800184c:	b2da      	uxtb	r2, r3
 800184e:	4b55      	ldr	r3, [pc, #340]	@ (80019a4 <HW_TS_Init+0x190>)
 8001850:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 8001852:	4b53      	ldr	r3, [pc, #332]	@ (80019a0 <HW_TS_Init+0x18c>)
 8001854:	691b      	ldr	r3, [r3, #16]
 8001856:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800185a:	f44f 02fe 	mov.w	r2, #8323072	@ 0x7f0000
 800185e:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001860:	693a      	ldr	r2, [r7, #16]
 8001862:	fa92 f2a2 	rbit	r2, r2
 8001866:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001868:	68fa      	ldr	r2, [r7, #12]
 800186a:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800186c:	697a      	ldr	r2, [r7, #20]
 800186e:	2a00      	cmp	r2, #0
 8001870:	d101      	bne.n	8001876 <HW_TS_Init+0x62>
  {
    return 32U;
 8001872:	2220      	movs	r2, #32
 8001874:	e003      	b.n	800187e <HW_TS_Init+0x6a>
  }
  return __builtin_clz(value);
 8001876:	697a      	ldr	r2, [r7, #20]
 8001878:	fab2 f282 	clz	r2, r2
 800187c:	b2d2      	uxtb	r2, r2
 800187e:	40d3      	lsrs	r3, r2
 8001880:	b2db      	uxtb	r3, r3
 8001882:	3301      	adds	r3, #1
 8001884:	b2da      	uxtb	r2, r3
 8001886:	4b48      	ldr	r3, [pc, #288]	@ (80019a8 <HW_TS_Init+0x194>)
 8001888:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 800188a:	4b45      	ldr	r3, [pc, #276]	@ (80019a0 <HW_TS_Init+0x18c>)
 800188c:	691b      	ldr	r3, [r3, #16]
 800188e:	b29b      	uxth	r3, r3
 8001890:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001894:	b29b      	uxth	r3, r3
 8001896:	3301      	adds	r3, #1
 8001898:	b29a      	uxth	r2, r3
 800189a:	4b44      	ldr	r3, [pc, #272]	@ (80019ac <HW_TS_Init+0x198>)
 800189c:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 800189e:	4b43      	ldr	r3, [pc, #268]	@ (80019ac <HW_TS_Init+0x198>)
 80018a0:	881b      	ldrh	r3, [r3, #0]
 80018a2:	3b01      	subs	r3, #1
 80018a4:	4a40      	ldr	r2, [pc, #256]	@ (80019a8 <HW_TS_Init+0x194>)
 80018a6:	7812      	ldrb	r2, [r2, #0]
 80018a8:	fb02 f303 	mul.w	r3, r2, r3
 80018ac:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80018b0:	4a3c      	ldr	r2, [pc, #240]	@ (80019a4 <HW_TS_Init+0x190>)
 80018b2:	7812      	ldrb	r2, [r2, #0]
 80018b4:	40d3      	lsrs	r3, r2
 80018b6:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 80018b8:	69bb      	ldr	r3, [r7, #24]
 80018ba:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80018be:	4293      	cmp	r3, r2
 80018c0:	d904      	bls.n	80018cc <HW_TS_Init+0xb8>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 80018c2:	4b3b      	ldr	r3, [pc, #236]	@ (80019b0 <HW_TS_Init+0x19c>)
 80018c4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80018c8:	801a      	strh	r2, [r3, #0]
 80018ca:	e003      	b.n	80018d4 <HW_TS_Init+0xc0>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 80018cc:	69bb      	ldr	r3, [r7, #24]
 80018ce:	b29a      	uxth	r2, r3
 80018d0:	4b37      	ldr	r3, [pc, #220]	@ (80019b0 <HW_TS_Init+0x19c>)
 80018d2:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 80018d4:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80018d8:	f7ff fb9c 	bl	8001014 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 80018dc:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80018e0:	f7ff fb84 	bl	8000fec <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 80018e4:	79fb      	ldrb	r3, [r7, #7]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d13d      	bne.n	8001966 <HW_TS_Init+0x152>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 80018ea:	4b32      	ldr	r3, [pc, #200]	@ (80019b4 <HW_TS_Init+0x1a0>)
 80018ec:	2201      	movs	r2, #1
 80018ee:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 80018f0:	4b31      	ldr	r3, [pc, #196]	@ (80019b8 <HW_TS_Init+0x1a4>)
 80018f2:	f04f 32ff 	mov.w	r2, #4294967295
 80018f6:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 80018f8:	2300      	movs	r3, #0
 80018fa:	77fb      	strb	r3, [r7, #31]
 80018fc:	e00c      	b.n	8001918 <HW_TS_Init+0x104>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 80018fe:	7ffa      	ldrb	r2, [r7, #31]
 8001900:	492e      	ldr	r1, [pc, #184]	@ (80019bc <HW_TS_Init+0x1a8>)
 8001902:	4613      	mov	r3, r2
 8001904:	005b      	lsls	r3, r3, #1
 8001906:	4413      	add	r3, r2
 8001908:	00db      	lsls	r3, r3, #3
 800190a:	440b      	add	r3, r1
 800190c:	330c      	adds	r3, #12
 800190e:	2200      	movs	r2, #0
 8001910:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8001912:	7ffb      	ldrb	r3, [r7, #31]
 8001914:	3301      	adds	r3, #1
 8001916:	77fb      	strb	r3, [r7, #31]
 8001918:	7ffb      	ldrb	r3, [r7, #31]
 800191a:	2b05      	cmp	r3, #5
 800191c:	d9ef      	bls.n	80018fe <HW_TS_Init+0xea>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 800191e:	4b28      	ldr	r3, [pc, #160]	@ (80019c0 <HW_TS_Init+0x1ac>)
 8001920:	2206      	movs	r2, #6
 8001922:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);                       /**<  Disable the Wakeup Timer */
 8001924:	4b1d      	ldr	r3, [pc, #116]	@ (800199c <HW_TS_Init+0x188>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	689a      	ldr	r2, [r3, #8]
 800192a:	4b1c      	ldr	r3, [pc, #112]	@ (800199c <HW_TS_Init+0x188>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001932:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8001934:	4b19      	ldr	r3, [pc, #100]	@ (800199c <HW_TS_Init+0x188>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	68db      	ldr	r3, [r3, #12]
 800193a:	b2da      	uxtb	r2, r3
 800193c:	4b17      	ldr	r3, [pc, #92]	@ (800199c <HW_TS_Init+0x188>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8001944:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 8001946:	4b1f      	ldr	r3, [pc, #124]	@ (80019c4 <HW_TS_Init+0x1b0>)
 8001948:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800194c:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 800194e:	2003      	movs	r0, #3
 8001950:	f002 fdd5 	bl	80044fe <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(&hrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8001954:	4b11      	ldr	r3, [pc, #68]	@ (800199c <HW_TS_Init+0x188>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	689a      	ldr	r2, [r3, #8]
 800195a:	4b10      	ldr	r3, [pc, #64]	@ (800199c <HW_TS_Init+0x188>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001962:	609a      	str	r2, [r3, #8]
 8001964:	e009      	b.n	800197a <HW_TS_Init+0x166>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTF) != RESET)
 8001966:	4b0d      	ldr	r3, [pc, #52]	@ (800199c <HW_TS_Init+0x188>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	68db      	ldr	r3, [r3, #12]
 800196c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001970:	2b00      	cmp	r3, #0
 8001972:	d002      	beq.n	800197a <HW_TS_Init+0x166>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8001974:	2003      	movs	r0, #3
 8001976:	f002 fdb4 	bl	80044e2 <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 800197a:	4b08      	ldr	r3, [pc, #32]	@ (800199c <HW_TS_Init+0x188>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	22ff      	movs	r2, #255	@ 0xff
 8001980:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 8001982:	2200      	movs	r2, #0
 8001984:	2103      	movs	r1, #3
 8001986:	2003      	movs	r0, #3
 8001988:	f002 fd69 	bl	800445e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 800198c:	2003      	movs	r0, #3
 800198e:	f002 fd80 	bl	8004492 <HAL_NVIC_EnableIRQ>

  return;
 8001992:	bf00      	nop
}
 8001994:	3720      	adds	r7, #32
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	200002c0 	.word	0x200002c0
 80019a0:	40002800 	.word	0x40002800
 80019a4:	200001c9 	.word	0x200001c9
 80019a8:	200001ca 	.word	0x200001ca
 80019ac:	200001cc 	.word	0x200001cc
 80019b0:	200001ce 	.word	0x200001ce
 80019b4:	200001c8 	.word	0x200001c8
 80019b8:	200001c4 	.word	0x200001c4
 80019bc:	20000130 	.word	0x20000130
 80019c0:	200001c0 	.word	0x200001c0
 80019c4:	58000800 	.word	0x58000800

080019c8 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b086      	sub	sp, #24
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	4603      	mov	r3, r0
 80019d0:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80019d2:	f3ef 8310 	mrs	r3, PRIMASK
 80019d6:	60fb      	str	r3, [r7, #12]
  return(result);
 80019d8:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80019da:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80019dc:	b672      	cpsid	i
}
 80019de:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 80019e0:	2003      	movs	r0, #3
 80019e2:	f002 fd64 	bl	80044ae <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80019e6:	4b34      	ldr	r3, [pc, #208]	@ (8001ab8 <HW_TS_Stop+0xf0>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	22ca      	movs	r2, #202	@ 0xca
 80019ec:	625a      	str	r2, [r3, #36]	@ 0x24
 80019ee:	4b32      	ldr	r3, [pc, #200]	@ (8001ab8 <HW_TS_Stop+0xf0>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	2253      	movs	r2, #83	@ 0x53
 80019f4:	625a      	str	r2, [r3, #36]	@ 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 80019f6:	79fa      	ldrb	r2, [r7, #7]
 80019f8:	4930      	ldr	r1, [pc, #192]	@ (8001abc <HW_TS_Stop+0xf4>)
 80019fa:	4613      	mov	r3, r2
 80019fc:	005b      	lsls	r3, r3, #1
 80019fe:	4413      	add	r3, r2
 8001a00:	00db      	lsls	r3, r3, #3
 8001a02:	440b      	add	r3, r1
 8001a04:	330c      	adds	r3, #12
 8001a06:	781b      	ldrb	r3, [r3, #0]
 8001a08:	b2db      	uxtb	r3, r3
 8001a0a:	2b02      	cmp	r3, #2
 8001a0c:	d142      	bne.n	8001a94 <HW_TS_Stop+0xcc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 8001a0e:	79fb      	ldrb	r3, [r7, #7]
 8001a10:	2100      	movs	r1, #0
 8001a12:	4618      	mov	r0, r3
 8001a14:	f7ff fc80 	bl	8001318 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 8001a18:	4b29      	ldr	r3, [pc, #164]	@ (8001ac0 <HW_TS_Stop+0xf8>)
 8001a1a:	781b      	ldrb	r3, [r3, #0]
 8001a1c:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001a1e:	7cfb      	ldrb	r3, [r7, #19]
 8001a20:	2b06      	cmp	r3, #6
 8001a22:	d12f      	bne.n	8001a84 <HW_TS_Stop+0xbc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8001a24:	4b27      	ldr	r3, [pc, #156]	@ (8001ac4 <HW_TS_Stop+0xfc>)
 8001a26:	689b      	ldr	r3, [r3, #8]
 8001a28:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a2c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001a30:	d107      	bne.n	8001a42 <HW_TS_Stop+0x7a>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8001a32:	bf00      	nop
 8001a34:	4b20      	ldr	r3, [pc, #128]	@ (8001ab8 <HW_TS_Stop+0xf0>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	68db      	ldr	r3, [r3, #12]
 8001a3a:	f003 0304 	and.w	r3, r3, #4
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d1f8      	bne.n	8001a34 <HW_TS_Stop+0x6c>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8001a42:	4b1d      	ldr	r3, [pc, #116]	@ (8001ab8 <HW_TS_Stop+0xf0>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	689a      	ldr	r2, [r3, #8]
 8001a48:	4b1b      	ldr	r3, [pc, #108]	@ (8001ab8 <HW_TS_Stop+0xf0>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001a50:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8001a52:	bf00      	nop
 8001a54:	4b18      	ldr	r3, [pc, #96]	@ (8001ab8 <HW_TS_Stop+0xf0>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	68db      	ldr	r3, [r3, #12]
 8001a5a:	f003 0304 	and.w	r3, r3, #4
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d0f8      	beq.n	8001a54 <HW_TS_Stop+0x8c>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001a62:	4b15      	ldr	r3, [pc, #84]	@ (8001ab8 <HW_TS_Stop+0xf0>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	68db      	ldr	r3, [r3, #12]
 8001a68:	b2da      	uxtb	r2, r3
 8001a6a:	4b13      	ldr	r3, [pc, #76]	@ (8001ab8 <HW_TS_Stop+0xf0>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8001a72:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001a74:	4b14      	ldr	r3, [pc, #80]	@ (8001ac8 <HW_TS_Stop+0x100>)
 8001a76:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001a7a:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8001a7c:	2003      	movs	r0, #3
 8001a7e:	f002 fd3e 	bl	80044fe <HAL_NVIC_ClearPendingIRQ>
 8001a82:	e007      	b.n	8001a94 <HW_TS_Stop+0xcc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8001a84:	4b11      	ldr	r3, [pc, #68]	@ (8001acc <HW_TS_Stop+0x104>)
 8001a86:	781b      	ldrb	r3, [r3, #0]
 8001a88:	b2db      	uxtb	r3, r3
 8001a8a:	7cfa      	ldrb	r2, [r7, #19]
 8001a8c:	429a      	cmp	r2, r3
 8001a8e:	d001      	beq.n	8001a94 <HW_TS_Stop+0xcc>
    {
      RescheduleTimerList();
 8001a90:	f7ff fd5e 	bl	8001550 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8001a94:	4b08      	ldr	r3, [pc, #32]	@ (8001ab8 <HW_TS_Stop+0xf0>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	22ff      	movs	r2, #255	@ 0xff
 8001a9a:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001a9c:	2003      	movs	r0, #3
 8001a9e:	f002 fcf8 	bl	8004492 <HAL_NVIC_EnableIRQ>
 8001aa2:	697b      	ldr	r3, [r7, #20]
 8001aa4:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001aa6:	68bb      	ldr	r3, [r7, #8]
 8001aa8:	f383 8810 	msr	PRIMASK, r3
}
 8001aac:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8001aae:	bf00      	nop
}
 8001ab0:	3718      	adds	r7, #24
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	200002c0 	.word	0x200002c0
 8001abc:	20000130 	.word	0x20000130
 8001ac0:	200001c0 	.word	0x200001c0
 8001ac4:	40002800 	.word	0x40002800
 8001ac8:	58000800 	.word	0x58000800
 8001acc:	200001c1 	.word	0x200001c1

08001ad0 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b086      	sub	sp, #24
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	6039      	str	r1, [r7, #0]
 8001ada:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8001adc:	79fa      	ldrb	r2, [r7, #7]
 8001ade:	493b      	ldr	r1, [pc, #236]	@ (8001bcc <HW_TS_Start+0xfc>)
 8001ae0:	4613      	mov	r3, r2
 8001ae2:	005b      	lsls	r3, r3, #1
 8001ae4:	4413      	add	r3, r2
 8001ae6:	00db      	lsls	r3, r3, #3
 8001ae8:	440b      	add	r3, r1
 8001aea:	330c      	adds	r3, #12
 8001aec:	781b      	ldrb	r3, [r3, #0]
 8001aee:	b2db      	uxtb	r3, r3
 8001af0:	2b02      	cmp	r3, #2
 8001af2:	d103      	bne.n	8001afc <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 8001af4:	79fb      	ldrb	r3, [r7, #7]
 8001af6:	4618      	mov	r0, r3
 8001af8:	f7ff ff66 	bl	80019c8 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001afc:	f3ef 8310 	mrs	r3, PRIMASK
 8001b00:	60fb      	str	r3, [r7, #12]
  return(result);
 8001b02:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001b04:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001b06:	b672      	cpsid	i
}
 8001b08:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8001b0a:	2003      	movs	r0, #3
 8001b0c:	f002 fccf 	bl	80044ae <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001b10:	4b2f      	ldr	r3, [pc, #188]	@ (8001bd0 <HW_TS_Start+0x100>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	22ca      	movs	r2, #202	@ 0xca
 8001b16:	625a      	str	r2, [r3, #36]	@ 0x24
 8001b18:	4b2d      	ldr	r3, [pc, #180]	@ (8001bd0 <HW_TS_Start+0x100>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	2253      	movs	r2, #83	@ 0x53
 8001b1e:	625a      	str	r2, [r3, #36]	@ 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 8001b20:	79fa      	ldrb	r2, [r7, #7]
 8001b22:	492a      	ldr	r1, [pc, #168]	@ (8001bcc <HW_TS_Start+0xfc>)
 8001b24:	4613      	mov	r3, r2
 8001b26:	005b      	lsls	r3, r3, #1
 8001b28:	4413      	add	r3, r2
 8001b2a:	00db      	lsls	r3, r3, #3
 8001b2c:	440b      	add	r3, r1
 8001b2e:	330c      	adds	r3, #12
 8001b30:	2202      	movs	r2, #2
 8001b32:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 8001b34:	79fa      	ldrb	r2, [r7, #7]
 8001b36:	4925      	ldr	r1, [pc, #148]	@ (8001bcc <HW_TS_Start+0xfc>)
 8001b38:	4613      	mov	r3, r2
 8001b3a:	005b      	lsls	r3, r3, #1
 8001b3c:	4413      	add	r3, r2
 8001b3e:	00db      	lsls	r3, r3, #3
 8001b40:	440b      	add	r3, r1
 8001b42:	3308      	adds	r3, #8
 8001b44:	683a      	ldr	r2, [r7, #0]
 8001b46:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 8001b48:	79fa      	ldrb	r2, [r7, #7]
 8001b4a:	4920      	ldr	r1, [pc, #128]	@ (8001bcc <HW_TS_Start+0xfc>)
 8001b4c:	4613      	mov	r3, r2
 8001b4e:	005b      	lsls	r3, r3, #1
 8001b50:	4413      	add	r3, r2
 8001b52:	00db      	lsls	r3, r3, #3
 8001b54:	440b      	add	r3, r1
 8001b56:	3304      	adds	r3, #4
 8001b58:	683a      	ldr	r2, [r7, #0]
 8001b5a:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 8001b5c:	79fb      	ldrb	r3, [r7, #7]
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f7ff fb30 	bl	80011c4 <linkTimer>
 8001b64:	4603      	mov	r3, r0
 8001b66:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 8001b68:	4b1a      	ldr	r3, [pc, #104]	@ (8001bd4 <HW_TS_Start+0x104>)
 8001b6a:	781b      	ldrb	r3, [r3, #0]
 8001b6c:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8001b6e:	4b1a      	ldr	r3, [pc, #104]	@ (8001bd8 <HW_TS_Start+0x108>)
 8001b70:	781b      	ldrb	r3, [r3, #0]
 8001b72:	b2db      	uxtb	r3, r3
 8001b74:	7c7a      	ldrb	r2, [r7, #17]
 8001b76:	429a      	cmp	r2, r3
 8001b78:	d002      	beq.n	8001b80 <HW_TS_Start+0xb0>
  {
    RescheduleTimerList();
 8001b7a:	f7ff fce9 	bl	8001550 <RescheduleTimerList>
 8001b7e:	e013      	b.n	8001ba8 <HW_TS_Start+0xd8>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 8001b80:	79fa      	ldrb	r2, [r7, #7]
 8001b82:	4912      	ldr	r1, [pc, #72]	@ (8001bcc <HW_TS_Start+0xfc>)
 8001b84:	4613      	mov	r3, r2
 8001b86:	005b      	lsls	r3, r3, #1
 8001b88:	4413      	add	r3, r2
 8001b8a:	00db      	lsls	r3, r3, #3
 8001b8c:	440b      	add	r3, r1
 8001b8e:	3308      	adds	r3, #8
 8001b90:	6819      	ldr	r1, [r3, #0]
 8001b92:	8a7b      	ldrh	r3, [r7, #18]
 8001b94:	79fa      	ldrb	r2, [r7, #7]
 8001b96:	1ac9      	subs	r1, r1, r3
 8001b98:	480c      	ldr	r0, [pc, #48]	@ (8001bcc <HW_TS_Start+0xfc>)
 8001b9a:	4613      	mov	r3, r2
 8001b9c:	005b      	lsls	r3, r3, #1
 8001b9e:	4413      	add	r3, r2
 8001ba0:	00db      	lsls	r3, r3, #3
 8001ba2:	4403      	add	r3, r0
 8001ba4:	3308      	adds	r3, #8
 8001ba6:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8001ba8:	4b09      	ldr	r3, [pc, #36]	@ (8001bd0 <HW_TS_Start+0x100>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	22ff      	movs	r2, #255	@ 0xff
 8001bae:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001bb0:	2003      	movs	r0, #3
 8001bb2:	f002 fc6e 	bl	8004492 <HAL_NVIC_EnableIRQ>
 8001bb6:	697b      	ldr	r3, [r7, #20]
 8001bb8:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001bba:	68bb      	ldr	r3, [r7, #8]
 8001bbc:	f383 8810 	msr	PRIMASK, r3
}
 8001bc0:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8001bc2:	bf00      	nop
}
 8001bc4:	3718      	adds	r7, #24
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	20000130 	.word	0x20000130
 8001bd0:	200002c0 	.word	0x200002c0
 8001bd4:	200001c0 	.word	0x200001c0
 8001bd8:	200001c1 	.word	0x200001c1

08001bdc <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b084      	sub	sp, #16
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	60f8      	str	r0, [r7, #12]
 8001be4:	460b      	mov	r3, r1
 8001be6:	607a      	str	r2, [r7, #4]
 8001be8:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	4798      	blx	r3

  return;
 8001bee:	bf00      	nop
}
 8001bf0:	3710      	adds	r7, #16
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}

08001bf6 <LL_RCC_LSE_SetDriveCapability>:
{
 8001bf6:	b480      	push	{r7}
 8001bf8:	b083      	sub	sp, #12
 8001bfa:	af00      	add	r7, sp, #0
 8001bfc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8001bfe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c06:	f023 0218 	bic.w	r2, r3, #24
 8001c0a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	4313      	orrs	r3, r2
 8001c12:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8001c16:	bf00      	nop
 8001c18:	370c      	adds	r7, #12
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c20:	4770      	bx	lr

08001c22 <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_TSC
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001c22:	b480      	push	{r7}
 8001c24:	b085      	sub	sp, #20
 8001c26:	af00      	add	r7, sp, #0
 8001c28:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001c2a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c2e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8001c30:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	4313      	orrs	r3, r2
 8001c38:	648b      	str	r3, [r1, #72]	@ 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001c3a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c3e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	4013      	ands	r3, r2
 8001c44:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001c46:	68fb      	ldr	r3, [r7, #12]
}
 8001c48:	bf00      	nop
 8001c4a:	3714      	adds	r7, #20
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c52:	4770      	bx	lr

08001c54 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b085      	sub	sp, #20
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001c5c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c60:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001c62:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	4313      	orrs	r3, r2
 8001c6a:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001c6c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c70:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	4013      	ands	r3, r2
 8001c76:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001c78:	68fb      	ldr	r3, [r7, #12]
}
 8001c7a:	bf00      	nop
 8001c7c:	3714      	adds	r7, #20
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c84:	4770      	bx	lr
	...

08001c88 <LSM9DS1_WriteRegister>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void LSM9DS1_WriteRegister(uint8_t addr, uint8_t reg, uint8_t value) {
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b086      	sub	sp, #24
 8001c8c:	af04      	add	r7, sp, #16
 8001c8e:	4603      	mov	r3, r0
 8001c90:	71fb      	strb	r3, [r7, #7]
 8001c92:	460b      	mov	r3, r1
 8001c94:	71bb      	strb	r3, [r7, #6]
 8001c96:	4613      	mov	r3, r2
 8001c98:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Write(&hi2c1, addr, reg, I2C_MEMADD_SIZE_8BIT, &value, 1,
 8001c9a:	79fb      	ldrb	r3, [r7, #7]
 8001c9c:	b299      	uxth	r1, r3
 8001c9e:	79bb      	ldrb	r3, [r7, #6]
 8001ca0:	b29a      	uxth	r2, r3
 8001ca2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ca6:	9302      	str	r3, [sp, #8]
 8001ca8:	2301      	movs	r3, #1
 8001caa:	9301      	str	r3, [sp, #4]
 8001cac:	1d7b      	adds	r3, r7, #5
 8001cae:	9300      	str	r3, [sp, #0]
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	4803      	ldr	r0, [pc, #12]	@ (8001cc0 <LSM9DS1_WriteRegister+0x38>)
 8001cb4:	f003 f976 	bl	8004fa4 <HAL_I2C_Mem_Write>
	HAL_MAX_DELAY);
}
 8001cb8:	bf00      	nop
 8001cba:	3708      	adds	r7, #8
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd80      	pop	{r7, pc}
 8001cc0:	200001d0 	.word	0x200001d0

08001cc4 <LSM9DS1_Init>:
	HAL_I2C_Mem_Read(&hi2c1, addr, reg, I2C_MEMADD_SIZE_8BIT, &value, 1,
	HAL_MAX_DELAY);
	return value;
}

void LSM9DS1_Init() {
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	af00      	add	r7, sp, #0
	//sensor reset
	LSM9DS1_WriteRegister(LSM9DS1_ADDR, CTRL_REG8, 0x05);
 8001cc8:	2205      	movs	r2, #5
 8001cca:	2122      	movs	r1, #34	@ 0x22
 8001ccc:	20d4      	movs	r0, #212	@ 0xd4
 8001cce:	f7ff ffdb 	bl	8001c88 <LSM9DS1_WriteRegister>
	HAL_Delay(10);
 8001cd2:	200a      	movs	r0, #10
 8001cd4:	f7ff f927 	bl	8000f26 <HAL_Delay>

	//low-power setting
//	gyro setting
	LSM9DS1_WriteRegister(LSM9DS1_ADDR, CTRL_REG1_G, 0x40); //gyro ODR 59.5 Hz(low-power mode), full scale 245dps(basic)
 8001cd8:	2240      	movs	r2, #64	@ 0x40
 8001cda:	2110      	movs	r1, #16
 8001cdc:	20d4      	movs	r0, #212	@ 0xd4
 8001cde:	f7ff ffd3 	bl	8001c88 <LSM9DS1_WriteRegister>
	LSM9DS1_WriteRegister(LSM9DS1_ADDR, CTRL_REG3_G, 0x80); //gyro low-power mode activate
 8001ce2:	2280      	movs	r2, #128	@ 0x80
 8001ce4:	2112      	movs	r1, #18
 8001ce6:	20d4      	movs	r0, #212	@ 0xd4
 8001ce8:	f7ff ffce 	bl	8001c88 <LSM9DS1_WriteRegister>
	HAL_Delay(10);
 8001cec:	200a      	movs	r0, #10
 8001cee:	f7ff f91a 	bl	8000f26 <HAL_Delay>

	//accel setting
	LSM9DS1_WriteRegister(LSM9DS1_ADDR, CTRL_REG6_XL, 0x20); //accel ODR 10Hz, full scale 2g(basic)
 8001cf2:	2220      	movs	r2, #32
 8001cf4:	2120      	movs	r1, #32
 8001cf6:	20d4      	movs	r0, #212	@ 0xd4
 8001cf8:	f7ff ffc6 	bl	8001c88 <LSM9DS1_WriteRegister>
	LSM9DS1_WriteRegister(LSM9DS1_ADDR, CTRL_REG7_XL, 0x00); //accel low-power mode activate
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	2121      	movs	r1, #33	@ 0x21
 8001d00:	20d4      	movs	r0, #212	@ 0xd4
 8001d02:	f7ff ffc1 	bl	8001c88 <LSM9DS1_WriteRegister>
	HAL_Delay(10);
 8001d06:	200a      	movs	r0, #10
 8001d08:	f7ff f90d 	bl	8000f26 <HAL_Delay>

	//mag setting
	LSM9DS1_WriteRegister(MAG_ADDR, CTRL_REG1_M, 0x10); // mag ODR 10Hz, temp-comp activate
 8001d0c:	2210      	movs	r2, #16
 8001d0e:	2120      	movs	r1, #32
 8001d10:	203c      	movs	r0, #60	@ 0x3c
 8001d12:	f7ff ffb9 	bl	8001c88 <LSM9DS1_WriteRegister>
	LSM9DS1_WriteRegister(MAG_ADDR, CTRL_REG3_M, 0x00); // mag Continuous-conversion mode activate
 8001d16:	2200      	movs	r2, #0
 8001d18:	2122      	movs	r1, #34	@ 0x22
 8001d1a:	203c      	movs	r0, #60	@ 0x3c
 8001d1c:	f7ff ffb4 	bl	8001c88 <LSM9DS1_WriteRegister>
	HAL_Delay(10);
 8001d20:	200a      	movs	r0, #10
 8001d22:	f7ff f900 	bl	8000f26 <HAL_Delay>
//
//	//mag setting
//	LSM9DS1_WriteRegister(MAG_ADDR, CTRL_REG1_M, 0x70); // mag ODR 80Hz, temp-comp activate
//	LSM9DS1_WriteRegister(MAG_ADDR, CTRL_REG3_M, 0x00); // mag Continuous-conversion mode activate
//	HAL_Delay(10);
}
 8001d26:	bf00      	nop
 8001d28:	bd80      	pop	{r7, pc}
	...

08001d2c <micros>:

uint32_t micros(void) {
 8001d2c:	b480      	push	{r7}
 8001d2e:	af00      	add	r7, sp, #0
	return micro_time = __HAL_TIM_GET_COUNTER(&htim2);
 8001d30:	4b05      	ldr	r3, [pc, #20]	@ (8001d48 <micros+0x1c>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d36:	4a05      	ldr	r2, [pc, #20]	@ (8001d4c <micros+0x20>)
 8001d38:	6013      	str	r3, [r2, #0]
 8001d3a:	4b04      	ldr	r3, [pc, #16]	@ (8001d4c <micros+0x20>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	46bd      	mov	sp, r7
 8001d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d46:	4770      	bx	lr
 8001d48:	200002e4 	.word	0x200002e4
 8001d4c:	20000474 	.word	0x20000474

08001d50 <invSqrt>:

float invSqrt(float x) {
 8001d50:	b480      	push	{r7}
 8001d52:	b087      	sub	sp, #28
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	ed87 0a01 	vstr	s0, [r7, #4]
	float halfx = 0.5f * x;
 8001d5a:	edd7 7a01 	vldr	s15, [r7, #4]
 8001d5e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001d62:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d66:	edc7 7a05 	vstr	s15, [r7, #20]
	float y = x;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	613b      	str	r3, [r7, #16]
	long i = *(long*) &y;
 8001d6e:	f107 0310 	add.w	r3, r7, #16
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	60fb      	str	r3, [r7, #12]
	i = 0x5f3759df - (i >> 1);
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	105a      	asrs	r2, r3, #1
 8001d7a:	4b12      	ldr	r3, [pc, #72]	@ (8001dc4 <invSqrt+0x74>)
 8001d7c:	1a9b      	subs	r3, r3, r2
 8001d7e:	60fb      	str	r3, [r7, #12]
	y = *(float*) &i;
 8001d80:	f107 030c 	add.w	r3, r7, #12
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	613b      	str	r3, [r7, #16]
	y = y * (1.5f - (halfx * y * y));
 8001d88:	ed97 7a04 	vldr	s14, [r7, #16]
 8001d8c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001d90:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d94:	edd7 7a04 	vldr	s15, [r7, #16]
 8001d98:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d9c:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 8001da0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001da4:	edd7 7a04 	vldr	s15, [r7, #16]
 8001da8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001dac:	edc7 7a04 	vstr	s15, [r7, #16]
	return y;
 8001db0:	693b      	ldr	r3, [r7, #16]
 8001db2:	ee07 3a90 	vmov	s15, r3
}
 8001db6:	eeb0 0a67 	vmov.f32	s0, s15
 8001dba:	371c      	adds	r7, #28
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc2:	4770      	bx	lr
 8001dc4:	5f3759df 	.word	0x5f3759df

08001dc8 <vector_dot>:

float vector_dot(float a[3], float b[3]) {
 8001dc8:	b480      	push	{r7}
 8001dca:	b083      	sub	sp, #12
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
 8001dd0:	6039      	str	r1, [r7, #0]
	return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	ed93 7a00 	vldr	s14, [r3]
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	edd3 7a00 	vldr	s15, [r3]
 8001dde:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	3304      	adds	r3, #4
 8001de6:	edd3 6a00 	vldr	s13, [r3]
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	3304      	adds	r3, #4
 8001dee:	edd3 7a00 	vldr	s15, [r3]
 8001df2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001df6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	3308      	adds	r3, #8
 8001dfe:	edd3 6a00 	vldr	s13, [r3]
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	3308      	adds	r3, #8
 8001e06:	edd3 7a00 	vldr	s15, [r3]
 8001e0a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e0e:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8001e12:	eeb0 0a67 	vmov.f32	s0, s15
 8001e16:	370c      	adds	r7, #12
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1e:	4770      	bx	lr

08001e20 <vector_normalize>:

void vector_normalize(float a[3]) {
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b084      	sub	sp, #16
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
	float mag = sqrt(vector_dot(a, a));
 8001e28:	6879      	ldr	r1, [r7, #4]
 8001e2a:	6878      	ldr	r0, [r7, #4]
 8001e2c:	f7ff ffcc 	bl	8001dc8 <vector_dot>
 8001e30:	ee10 3a10 	vmov	r3, s0
 8001e34:	4618      	mov	r0, r3
 8001e36:	f7fe fb0f 	bl	8000458 <__aeabi_f2d>
 8001e3a:	4602      	mov	r2, r0
 8001e3c:	460b      	mov	r3, r1
 8001e3e:	ec43 2b10 	vmov	d0, r2, r3
 8001e42:	f00a ff89 	bl	800cd58 <sqrt>
 8001e46:	ec53 2b10 	vmov	r2, r3, d0
 8001e4a:	4610      	mov	r0, r2
 8001e4c:	4619      	mov	r1, r3
 8001e4e:	f7fe fe0b 	bl	8000a68 <__aeabi_d2f>
 8001e52:	4603      	mov	r3, r0
 8001e54:	60fb      	str	r3, [r7, #12]
	a[0] /= mag;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	edd3 6a00 	vldr	s13, [r3]
 8001e5c:	ed97 7a03 	vldr	s14, [r7, #12]
 8001e60:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	edc3 7a00 	vstr	s15, [r3]
	a[1] /= mag;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	3304      	adds	r3, #4
 8001e6e:	edd3 6a00 	vldr	s13, [r3]
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	3304      	adds	r3, #4
 8001e76:	ed97 7a03 	vldr	s14, [r7, #12]
 8001e7a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e7e:	edc3 7a00 	vstr	s15, [r3]
	a[2] /= mag;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	3308      	adds	r3, #8
 8001e86:	edd3 6a00 	vldr	s13, [r3]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	3308      	adds	r3, #8
 8001e8e:	ed97 7a03 	vldr	s14, [r7, #12]
 8001e92:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e96:	edc3 7a00 	vstr	s15, [r3]
}
 8001e9a:	bf00      	nop
 8001e9c:	3710      	adds	r7, #16
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}
	...

08001ea4 <MadgwickAHRSupdate>:

void MadgwickAHRSupdate(float gx, float gy, float gz, float ax, float ay,
		float az, float mx, float my, float mz) {
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b08a      	sub	sp, #40	@ 0x28
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24
 8001eae:	edc7 0a08 	vstr	s1, [r7, #32]
 8001eb2:	ed87 1a07 	vstr	s2, [r7, #28]
 8001eb6:	edc7 1a06 	vstr	s3, [r7, #24]
 8001eba:	ed87 2a05 	vstr	s4, [r7, #20]
 8001ebe:	edc7 2a04 	vstr	s5, [r7, #16]
 8001ec2:	ed87 3a03 	vstr	s6, [r7, #12]
 8001ec6:	edc7 3a02 	vstr	s7, [r7, #8]
 8001eca:	ed87 4a01 	vstr	s8, [r7, #4]

	qDot1 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz);
 8001ece:	4bda      	ldr	r3, [pc, #872]	@ (8002238 <MadgwickAHRSupdate+0x394>)
 8001ed0:	edd3 7a00 	vldr	s15, [r3]
 8001ed4:	eeb1 7a67 	vneg.f32	s14, s15
 8001ed8:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001edc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ee0:	4bd6      	ldr	r3, [pc, #856]	@ (800223c <MadgwickAHRSupdate+0x398>)
 8001ee2:	edd3 6a00 	vldr	s13, [r3]
 8001ee6:	edd7 7a08 	vldr	s15, [r7, #32]
 8001eea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001eee:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001ef2:	4bd3      	ldr	r3, [pc, #844]	@ (8002240 <MadgwickAHRSupdate+0x39c>)
 8001ef4:	edd3 6a00 	vldr	s13, [r3]
 8001ef8:	edd7 7a07 	vldr	s15, [r7, #28]
 8001efc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f00:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f04:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001f08:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f0c:	4bcd      	ldr	r3, [pc, #820]	@ (8002244 <MadgwickAHRSupdate+0x3a0>)
 8001f0e:	edc3 7a00 	vstr	s15, [r3]
	qDot2 = 0.5f * (q0 * gx + q2 * gz - q3 * gy);
 8001f12:	4bcd      	ldr	r3, [pc, #820]	@ (8002248 <MadgwickAHRSupdate+0x3a4>)
 8001f14:	ed93 7a00 	vldr	s14, [r3]
 8001f18:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001f1c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f20:	4bc6      	ldr	r3, [pc, #792]	@ (800223c <MadgwickAHRSupdate+0x398>)
 8001f22:	edd3 6a00 	vldr	s13, [r3]
 8001f26:	edd7 7a07 	vldr	s15, [r7, #28]
 8001f2a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f2e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f32:	4bc3      	ldr	r3, [pc, #780]	@ (8002240 <MadgwickAHRSupdate+0x39c>)
 8001f34:	edd3 6a00 	vldr	s13, [r3]
 8001f38:	edd7 7a08 	vldr	s15, [r7, #32]
 8001f3c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f40:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f44:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001f48:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f4c:	4bbf      	ldr	r3, [pc, #764]	@ (800224c <MadgwickAHRSupdate+0x3a8>)
 8001f4e:	edc3 7a00 	vstr	s15, [r3]
	qDot3 = 0.5f * (q0 * gy - q1 * gz + q3 * gx);
 8001f52:	4bbd      	ldr	r3, [pc, #756]	@ (8002248 <MadgwickAHRSupdate+0x3a4>)
 8001f54:	ed93 7a00 	vldr	s14, [r3]
 8001f58:	edd7 7a08 	vldr	s15, [r7, #32]
 8001f5c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f60:	4bb5      	ldr	r3, [pc, #724]	@ (8002238 <MadgwickAHRSupdate+0x394>)
 8001f62:	edd3 6a00 	vldr	s13, [r3]
 8001f66:	edd7 7a07 	vldr	s15, [r7, #28]
 8001f6a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f6e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001f72:	4bb3      	ldr	r3, [pc, #716]	@ (8002240 <MadgwickAHRSupdate+0x39c>)
 8001f74:	edd3 6a00 	vldr	s13, [r3]
 8001f78:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001f7c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f80:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f84:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001f88:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f8c:	4bb0      	ldr	r3, [pc, #704]	@ (8002250 <MadgwickAHRSupdate+0x3ac>)
 8001f8e:	edc3 7a00 	vstr	s15, [r3]
	qDot4 = 0.5f * (q0 * gz + q1 * gy - q2 * gx);
 8001f92:	4bad      	ldr	r3, [pc, #692]	@ (8002248 <MadgwickAHRSupdate+0x3a4>)
 8001f94:	ed93 7a00 	vldr	s14, [r3]
 8001f98:	edd7 7a07 	vldr	s15, [r7, #28]
 8001f9c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001fa0:	4ba5      	ldr	r3, [pc, #660]	@ (8002238 <MadgwickAHRSupdate+0x394>)
 8001fa2:	edd3 6a00 	vldr	s13, [r3]
 8001fa6:	edd7 7a08 	vldr	s15, [r7, #32]
 8001faa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001fae:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001fb2:	4ba2      	ldr	r3, [pc, #648]	@ (800223c <MadgwickAHRSupdate+0x398>)
 8001fb4:	edd3 6a00 	vldr	s13, [r3]
 8001fb8:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001fbc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001fc0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001fc4:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001fc8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001fcc:	4ba1      	ldr	r3, [pc, #644]	@ (8002254 <MadgwickAHRSupdate+0x3b0>)
 8001fce:	edc3 7a00 	vstr	s15, [r3]

	if (!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f))) {
 8001fd2:	edd7 7a06 	vldr	s15, [r7, #24]
 8001fd6:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001fda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fde:	d10e      	bne.n	8001ffe <MadgwickAHRSupdate+0x15a>
 8001fe0:	edd7 7a05 	vldr	s15, [r7, #20]
 8001fe4:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001fe8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fec:	d107      	bne.n	8001ffe <MadgwickAHRSupdate+0x15a>
 8001fee:	edd7 7a04 	vldr	s15, [r7, #16]
 8001ff2:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001ff6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ffa:	f000 874b 	beq.w	8002e94 <MadgwickAHRSupdate+0xff0>

		recipNorm = invSqrt(ax * ax + ay * ay + az * az);
 8001ffe:	edd7 7a06 	vldr	s15, [r7, #24]
 8002002:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8002006:	edd7 7a05 	vldr	s15, [r7, #20]
 800200a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800200e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002012:	edd7 7a04 	vldr	s15, [r7, #16]
 8002016:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800201a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800201e:	eeb0 0a67 	vmov.f32	s0, s15
 8002022:	f7ff fe95 	bl	8001d50 <invSqrt>
 8002026:	eef0 7a40 	vmov.f32	s15, s0
 800202a:	4b8b      	ldr	r3, [pc, #556]	@ (8002258 <MadgwickAHRSupdate+0x3b4>)
 800202c:	edc3 7a00 	vstr	s15, [r3]
		ax *= recipNorm;
 8002030:	4b89      	ldr	r3, [pc, #548]	@ (8002258 <MadgwickAHRSupdate+0x3b4>)
 8002032:	edd3 7a00 	vldr	s15, [r3]
 8002036:	ed97 7a06 	vldr	s14, [r7, #24]
 800203a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800203e:	edc7 7a06 	vstr	s15, [r7, #24]
		ay *= recipNorm;
 8002042:	4b85      	ldr	r3, [pc, #532]	@ (8002258 <MadgwickAHRSupdate+0x3b4>)
 8002044:	edd3 7a00 	vldr	s15, [r3]
 8002048:	ed97 7a05 	vldr	s14, [r7, #20]
 800204c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002050:	edc7 7a05 	vstr	s15, [r7, #20]
		az *= recipNorm;
 8002054:	4b80      	ldr	r3, [pc, #512]	@ (8002258 <MadgwickAHRSupdate+0x3b4>)
 8002056:	edd3 7a00 	vldr	s15, [r3]
 800205a:	ed97 7a04 	vldr	s14, [r7, #16]
 800205e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002062:	edc7 7a04 	vstr	s15, [r7, #16]

		recipNorm = invSqrt(mx * mx + my * my + mz * mz);
 8002066:	edd7 7a03 	vldr	s15, [r7, #12]
 800206a:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800206e:	edd7 7a02 	vldr	s15, [r7, #8]
 8002072:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002076:	ee37 7a27 	vadd.f32	s14, s14, s15
 800207a:	edd7 7a01 	vldr	s15, [r7, #4]
 800207e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002082:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002086:	eeb0 0a67 	vmov.f32	s0, s15
 800208a:	f7ff fe61 	bl	8001d50 <invSqrt>
 800208e:	eef0 7a40 	vmov.f32	s15, s0
 8002092:	4b71      	ldr	r3, [pc, #452]	@ (8002258 <MadgwickAHRSupdate+0x3b4>)
 8002094:	edc3 7a00 	vstr	s15, [r3]
		mx *= recipNorm;
 8002098:	4b6f      	ldr	r3, [pc, #444]	@ (8002258 <MadgwickAHRSupdate+0x3b4>)
 800209a:	edd3 7a00 	vldr	s15, [r3]
 800209e:	ed97 7a03 	vldr	s14, [r7, #12]
 80020a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020a6:	edc7 7a03 	vstr	s15, [r7, #12]
		my *= recipNorm;
 80020aa:	4b6b      	ldr	r3, [pc, #428]	@ (8002258 <MadgwickAHRSupdate+0x3b4>)
 80020ac:	edd3 7a00 	vldr	s15, [r3]
 80020b0:	ed97 7a02 	vldr	s14, [r7, #8]
 80020b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020b8:	edc7 7a02 	vstr	s15, [r7, #8]
		mz *= recipNorm;
 80020bc:	4b66      	ldr	r3, [pc, #408]	@ (8002258 <MadgwickAHRSupdate+0x3b4>)
 80020be:	edd3 7a00 	vldr	s15, [r3]
 80020c2:	ed97 7a01 	vldr	s14, [r7, #4]
 80020c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020ca:	edc7 7a01 	vstr	s15, [r7, #4]

		_2q0mx = 2.0f * q0 * mx;
 80020ce:	4b5e      	ldr	r3, [pc, #376]	@ (8002248 <MadgwickAHRSupdate+0x3a4>)
 80020d0:	edd3 7a00 	vldr	s15, [r3]
 80020d4:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80020d8:	edd7 7a03 	vldr	s15, [r7, #12]
 80020dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020e0:	4b5e      	ldr	r3, [pc, #376]	@ (800225c <MadgwickAHRSupdate+0x3b8>)
 80020e2:	edc3 7a00 	vstr	s15, [r3]
		_2q0my = 2.0f * q0 * my;
 80020e6:	4b58      	ldr	r3, [pc, #352]	@ (8002248 <MadgwickAHRSupdate+0x3a4>)
 80020e8:	edd3 7a00 	vldr	s15, [r3]
 80020ec:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80020f0:	edd7 7a02 	vldr	s15, [r7, #8]
 80020f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020f8:	4b59      	ldr	r3, [pc, #356]	@ (8002260 <MadgwickAHRSupdate+0x3bc>)
 80020fa:	edc3 7a00 	vstr	s15, [r3]
		_2q0mz = 2.0f * q0 * mz;
 80020fe:	4b52      	ldr	r3, [pc, #328]	@ (8002248 <MadgwickAHRSupdate+0x3a4>)
 8002100:	edd3 7a00 	vldr	s15, [r3]
 8002104:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002108:	edd7 7a01 	vldr	s15, [r7, #4]
 800210c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002110:	4b54      	ldr	r3, [pc, #336]	@ (8002264 <MadgwickAHRSupdate+0x3c0>)
 8002112:	edc3 7a00 	vstr	s15, [r3]
		_2q1mx = 2.0f * q1 * mx;
 8002116:	4b48      	ldr	r3, [pc, #288]	@ (8002238 <MadgwickAHRSupdate+0x394>)
 8002118:	edd3 7a00 	vldr	s15, [r3]
 800211c:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002120:	edd7 7a03 	vldr	s15, [r7, #12]
 8002124:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002128:	4b4f      	ldr	r3, [pc, #316]	@ (8002268 <MadgwickAHRSupdate+0x3c4>)
 800212a:	edc3 7a00 	vstr	s15, [r3]
		_2q0 = 2.0f * q0;
 800212e:	4b46      	ldr	r3, [pc, #280]	@ (8002248 <MadgwickAHRSupdate+0x3a4>)
 8002130:	edd3 7a00 	vldr	s15, [r3]
 8002134:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002138:	4b4c      	ldr	r3, [pc, #304]	@ (800226c <MadgwickAHRSupdate+0x3c8>)
 800213a:	edc3 7a00 	vstr	s15, [r3]
		_2q1 = 2.0f * q1;
 800213e:	4b3e      	ldr	r3, [pc, #248]	@ (8002238 <MadgwickAHRSupdate+0x394>)
 8002140:	edd3 7a00 	vldr	s15, [r3]
 8002144:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002148:	4b49      	ldr	r3, [pc, #292]	@ (8002270 <MadgwickAHRSupdate+0x3cc>)
 800214a:	edc3 7a00 	vstr	s15, [r3]
		_2q2 = 2.0f * q2;
 800214e:	4b3b      	ldr	r3, [pc, #236]	@ (800223c <MadgwickAHRSupdate+0x398>)
 8002150:	edd3 7a00 	vldr	s15, [r3]
 8002154:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002158:	4b46      	ldr	r3, [pc, #280]	@ (8002274 <MadgwickAHRSupdate+0x3d0>)
 800215a:	edc3 7a00 	vstr	s15, [r3]
		_2q3 = 2.0f * q3;
 800215e:	4b38      	ldr	r3, [pc, #224]	@ (8002240 <MadgwickAHRSupdate+0x39c>)
 8002160:	edd3 7a00 	vldr	s15, [r3]
 8002164:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002168:	4b43      	ldr	r3, [pc, #268]	@ (8002278 <MadgwickAHRSupdate+0x3d4>)
 800216a:	edc3 7a00 	vstr	s15, [r3]
		_2q0q2 = 2.0f * q0 * q2;
 800216e:	4b36      	ldr	r3, [pc, #216]	@ (8002248 <MadgwickAHRSupdate+0x3a4>)
 8002170:	edd3 7a00 	vldr	s15, [r3]
 8002174:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002178:	4b30      	ldr	r3, [pc, #192]	@ (800223c <MadgwickAHRSupdate+0x398>)
 800217a:	edd3 7a00 	vldr	s15, [r3]
 800217e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002182:	4b3e      	ldr	r3, [pc, #248]	@ (800227c <MadgwickAHRSupdate+0x3d8>)
 8002184:	edc3 7a00 	vstr	s15, [r3]
		_2q2q3 = 2.0f * q2 * q3;
 8002188:	4b2c      	ldr	r3, [pc, #176]	@ (800223c <MadgwickAHRSupdate+0x398>)
 800218a:	edd3 7a00 	vldr	s15, [r3]
 800218e:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002192:	4b2b      	ldr	r3, [pc, #172]	@ (8002240 <MadgwickAHRSupdate+0x39c>)
 8002194:	edd3 7a00 	vldr	s15, [r3]
 8002198:	ee67 7a27 	vmul.f32	s15, s14, s15
 800219c:	4b38      	ldr	r3, [pc, #224]	@ (8002280 <MadgwickAHRSupdate+0x3dc>)
 800219e:	edc3 7a00 	vstr	s15, [r3]
		q0q0 = q0 * q0;
 80021a2:	4b29      	ldr	r3, [pc, #164]	@ (8002248 <MadgwickAHRSupdate+0x3a4>)
 80021a4:	ed93 7a00 	vldr	s14, [r3]
 80021a8:	4b27      	ldr	r3, [pc, #156]	@ (8002248 <MadgwickAHRSupdate+0x3a4>)
 80021aa:	edd3 7a00 	vldr	s15, [r3]
 80021ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021b2:	4b34      	ldr	r3, [pc, #208]	@ (8002284 <MadgwickAHRSupdate+0x3e0>)
 80021b4:	edc3 7a00 	vstr	s15, [r3]
		q0q1 = q0 * q1;
 80021b8:	4b23      	ldr	r3, [pc, #140]	@ (8002248 <MadgwickAHRSupdate+0x3a4>)
 80021ba:	ed93 7a00 	vldr	s14, [r3]
 80021be:	4b1e      	ldr	r3, [pc, #120]	@ (8002238 <MadgwickAHRSupdate+0x394>)
 80021c0:	edd3 7a00 	vldr	s15, [r3]
 80021c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021c8:	4b2f      	ldr	r3, [pc, #188]	@ (8002288 <MadgwickAHRSupdate+0x3e4>)
 80021ca:	edc3 7a00 	vstr	s15, [r3]
		q0q2 = q0 * q2;
 80021ce:	4b1e      	ldr	r3, [pc, #120]	@ (8002248 <MadgwickAHRSupdate+0x3a4>)
 80021d0:	ed93 7a00 	vldr	s14, [r3]
 80021d4:	4b19      	ldr	r3, [pc, #100]	@ (800223c <MadgwickAHRSupdate+0x398>)
 80021d6:	edd3 7a00 	vldr	s15, [r3]
 80021da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021de:	4b2b      	ldr	r3, [pc, #172]	@ (800228c <MadgwickAHRSupdate+0x3e8>)
 80021e0:	edc3 7a00 	vstr	s15, [r3]
		q0q3 = q0 * q3;
 80021e4:	4b18      	ldr	r3, [pc, #96]	@ (8002248 <MadgwickAHRSupdate+0x3a4>)
 80021e6:	ed93 7a00 	vldr	s14, [r3]
 80021ea:	4b15      	ldr	r3, [pc, #84]	@ (8002240 <MadgwickAHRSupdate+0x39c>)
 80021ec:	edd3 7a00 	vldr	s15, [r3]
 80021f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021f4:	4b26      	ldr	r3, [pc, #152]	@ (8002290 <MadgwickAHRSupdate+0x3ec>)
 80021f6:	edc3 7a00 	vstr	s15, [r3]
		q1q1 = q1 * q1;
 80021fa:	4b0f      	ldr	r3, [pc, #60]	@ (8002238 <MadgwickAHRSupdate+0x394>)
 80021fc:	ed93 7a00 	vldr	s14, [r3]
 8002200:	4b0d      	ldr	r3, [pc, #52]	@ (8002238 <MadgwickAHRSupdate+0x394>)
 8002202:	edd3 7a00 	vldr	s15, [r3]
 8002206:	ee67 7a27 	vmul.f32	s15, s14, s15
 800220a:	4b22      	ldr	r3, [pc, #136]	@ (8002294 <MadgwickAHRSupdate+0x3f0>)
 800220c:	edc3 7a00 	vstr	s15, [r3]
		q1q2 = q1 * q2;
 8002210:	4b09      	ldr	r3, [pc, #36]	@ (8002238 <MadgwickAHRSupdate+0x394>)
 8002212:	ed93 7a00 	vldr	s14, [r3]
 8002216:	4b09      	ldr	r3, [pc, #36]	@ (800223c <MadgwickAHRSupdate+0x398>)
 8002218:	edd3 7a00 	vldr	s15, [r3]
 800221c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002220:	4b1d      	ldr	r3, [pc, #116]	@ (8002298 <MadgwickAHRSupdate+0x3f4>)
 8002222:	edc3 7a00 	vstr	s15, [r3]
		q1q3 = q1 * q3;
 8002226:	4b04      	ldr	r3, [pc, #16]	@ (8002238 <MadgwickAHRSupdate+0x394>)
 8002228:	ed93 7a00 	vldr	s14, [r3]
 800222c:	4b04      	ldr	r3, [pc, #16]	@ (8002240 <MadgwickAHRSupdate+0x39c>)
 800222e:	edd3 7a00 	vldr	s15, [r3]
 8002232:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002236:	e031      	b.n	800229c <MadgwickAHRSupdate+0x3f8>
 8002238:	20000460 	.word	0x20000460
 800223c:	20000464 	.word	0x20000464
 8002240:	20000468 	.word	0x20000468
 8002244:	200003c4 	.word	0x200003c4
 8002248:	20000008 	.word	0x20000008
 800224c:	200003c8 	.word	0x200003c8
 8002250:	200003cc 	.word	0x200003cc
 8002254:	200003d0 	.word	0x200003d0
 8002258:	200003b0 	.word	0x200003b0
 800225c:	200003dc 	.word	0x200003dc
 8002260:	200003e0 	.word	0x200003e0
 8002264:	200003e4 	.word	0x200003e4
 8002268:	200003e8 	.word	0x200003e8
 800226c:	200003fc 	.word	0x200003fc
 8002270:	20000400 	.word	0x20000400
 8002274:	20000404 	.word	0x20000404
 8002278:	20000408 	.word	0x20000408
 800227c:	2000040c 	.word	0x2000040c
 8002280:	20000410 	.word	0x20000410
 8002284:	20000414 	.word	0x20000414
 8002288:	20000418 	.word	0x20000418
 800228c:	2000041c 	.word	0x2000041c
 8002290:	20000420 	.word	0x20000420
 8002294:	20000424 	.word	0x20000424
 8002298:	20000428 	.word	0x20000428
 800229c:	4bd8      	ldr	r3, [pc, #864]	@ (8002600 <MadgwickAHRSupdate+0x75c>)
 800229e:	edc3 7a00 	vstr	s15, [r3]
		q2q2 = q2 * q2;
 80022a2:	4bd8      	ldr	r3, [pc, #864]	@ (8002604 <MadgwickAHRSupdate+0x760>)
 80022a4:	ed93 7a00 	vldr	s14, [r3]
 80022a8:	4bd6      	ldr	r3, [pc, #856]	@ (8002604 <MadgwickAHRSupdate+0x760>)
 80022aa:	edd3 7a00 	vldr	s15, [r3]
 80022ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022b2:	4bd5      	ldr	r3, [pc, #852]	@ (8002608 <MadgwickAHRSupdate+0x764>)
 80022b4:	edc3 7a00 	vstr	s15, [r3]
		q2q3 = q2 * q3;
 80022b8:	4bd2      	ldr	r3, [pc, #840]	@ (8002604 <MadgwickAHRSupdate+0x760>)
 80022ba:	ed93 7a00 	vldr	s14, [r3]
 80022be:	4bd3      	ldr	r3, [pc, #844]	@ (800260c <MadgwickAHRSupdate+0x768>)
 80022c0:	edd3 7a00 	vldr	s15, [r3]
 80022c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022c8:	4bd1      	ldr	r3, [pc, #836]	@ (8002610 <MadgwickAHRSupdate+0x76c>)
 80022ca:	edc3 7a00 	vstr	s15, [r3]
		q3q3 = q3 * q3;
 80022ce:	4bcf      	ldr	r3, [pc, #828]	@ (800260c <MadgwickAHRSupdate+0x768>)
 80022d0:	ed93 7a00 	vldr	s14, [r3]
 80022d4:	4bcd      	ldr	r3, [pc, #820]	@ (800260c <MadgwickAHRSupdate+0x768>)
 80022d6:	edd3 7a00 	vldr	s15, [r3]
 80022da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022de:	4bcd      	ldr	r3, [pc, #820]	@ (8002614 <MadgwickAHRSupdate+0x770>)
 80022e0:	edc3 7a00 	vstr	s15, [r3]

		hx = mx * q0q0 - _2q0my * q3 + _2q0mz * q2 + mx * q1q1 + _2q1 * my * q2
 80022e4:	4bcc      	ldr	r3, [pc, #816]	@ (8002618 <MadgwickAHRSupdate+0x774>)
 80022e6:	ed93 7a00 	vldr	s14, [r3]
 80022ea:	edd7 7a03 	vldr	s15, [r7, #12]
 80022ee:	ee27 7a27 	vmul.f32	s14, s14, s15
 80022f2:	4bca      	ldr	r3, [pc, #808]	@ (800261c <MadgwickAHRSupdate+0x778>)
 80022f4:	edd3 6a00 	vldr	s13, [r3]
 80022f8:	4bc4      	ldr	r3, [pc, #784]	@ (800260c <MadgwickAHRSupdate+0x768>)
 80022fa:	edd3 7a00 	vldr	s15, [r3]
 80022fe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002302:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002306:	4bc6      	ldr	r3, [pc, #792]	@ (8002620 <MadgwickAHRSupdate+0x77c>)
 8002308:	edd3 6a00 	vldr	s13, [r3]
 800230c:	4bbd      	ldr	r3, [pc, #756]	@ (8002604 <MadgwickAHRSupdate+0x760>)
 800230e:	edd3 7a00 	vldr	s15, [r3]
 8002312:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002316:	ee37 7a27 	vadd.f32	s14, s14, s15
 800231a:	4bc2      	ldr	r3, [pc, #776]	@ (8002624 <MadgwickAHRSupdate+0x780>)
 800231c:	edd3 6a00 	vldr	s13, [r3]
 8002320:	edd7 7a03 	vldr	s15, [r7, #12]
 8002324:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002328:	ee37 7a27 	vadd.f32	s14, s14, s15
 800232c:	4bbe      	ldr	r3, [pc, #760]	@ (8002628 <MadgwickAHRSupdate+0x784>)
 800232e:	edd3 6a00 	vldr	s13, [r3]
 8002332:	edd7 7a02 	vldr	s15, [r7, #8]
 8002336:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800233a:	4bb2      	ldr	r3, [pc, #712]	@ (8002604 <MadgwickAHRSupdate+0x760>)
 800233c:	edd3 7a00 	vldr	s15, [r3]
 8002340:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002344:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ _2q1 * mz * q3 - mx * q2q2 - mx * q3q3;
 8002348:	4bb7      	ldr	r3, [pc, #732]	@ (8002628 <MadgwickAHRSupdate+0x784>)
 800234a:	edd3 6a00 	vldr	s13, [r3]
 800234e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002352:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002356:	4bad      	ldr	r3, [pc, #692]	@ (800260c <MadgwickAHRSupdate+0x768>)
 8002358:	edd3 7a00 	vldr	s15, [r3]
 800235c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002360:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002364:	4ba8      	ldr	r3, [pc, #672]	@ (8002608 <MadgwickAHRSupdate+0x764>)
 8002366:	edd3 6a00 	vldr	s13, [r3]
 800236a:	edd7 7a03 	vldr	s15, [r7, #12]
 800236e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002372:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002376:	4ba7      	ldr	r3, [pc, #668]	@ (8002614 <MadgwickAHRSupdate+0x770>)
 8002378:	edd3 6a00 	vldr	s13, [r3]
 800237c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002380:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002384:	ee77 7a67 	vsub.f32	s15, s14, s15
		hx = mx * q0q0 - _2q0my * q3 + _2q0mz * q2 + mx * q1q1 + _2q1 * my * q2
 8002388:	4ba8      	ldr	r3, [pc, #672]	@ (800262c <MadgwickAHRSupdate+0x788>)
 800238a:	edc3 7a00 	vstr	s15, [r3]
		hy = _2q0mx * q3 + my * q0q0 - _2q0mz * q1 + _2q1mx * q2 - my * q1q1
 800238e:	4ba8      	ldr	r3, [pc, #672]	@ (8002630 <MadgwickAHRSupdate+0x78c>)
 8002390:	ed93 7a00 	vldr	s14, [r3]
 8002394:	4b9d      	ldr	r3, [pc, #628]	@ (800260c <MadgwickAHRSupdate+0x768>)
 8002396:	edd3 7a00 	vldr	s15, [r3]
 800239a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800239e:	4b9e      	ldr	r3, [pc, #632]	@ (8002618 <MadgwickAHRSupdate+0x774>)
 80023a0:	edd3 6a00 	vldr	s13, [r3]
 80023a4:	edd7 7a02 	vldr	s15, [r7, #8]
 80023a8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023ac:	ee37 7a27 	vadd.f32	s14, s14, s15
 80023b0:	4b9b      	ldr	r3, [pc, #620]	@ (8002620 <MadgwickAHRSupdate+0x77c>)
 80023b2:	edd3 6a00 	vldr	s13, [r3]
 80023b6:	4b9f      	ldr	r3, [pc, #636]	@ (8002634 <MadgwickAHRSupdate+0x790>)
 80023b8:	edd3 7a00 	vldr	s15, [r3]
 80023bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023c0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80023c4:	4b9c      	ldr	r3, [pc, #624]	@ (8002638 <MadgwickAHRSupdate+0x794>)
 80023c6:	edd3 6a00 	vldr	s13, [r3]
 80023ca:	4b8e      	ldr	r3, [pc, #568]	@ (8002604 <MadgwickAHRSupdate+0x760>)
 80023cc:	edd3 7a00 	vldr	s15, [r3]
 80023d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023d4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80023d8:	4b92      	ldr	r3, [pc, #584]	@ (8002624 <MadgwickAHRSupdate+0x780>)
 80023da:	edd3 6a00 	vldr	s13, [r3]
 80023de:	edd7 7a02 	vldr	s15, [r7, #8]
 80023e2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023e6:	ee37 7a67 	vsub.f32	s14, s14, s15
				+ my * q2q2 + _2q2 * mz * q3 - my * q3q3;
 80023ea:	4b87      	ldr	r3, [pc, #540]	@ (8002608 <MadgwickAHRSupdate+0x764>)
 80023ec:	edd3 6a00 	vldr	s13, [r3]
 80023f0:	edd7 7a02 	vldr	s15, [r7, #8]
 80023f4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023f8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80023fc:	4b8f      	ldr	r3, [pc, #572]	@ (800263c <MadgwickAHRSupdate+0x798>)
 80023fe:	edd3 6a00 	vldr	s13, [r3]
 8002402:	edd7 7a01 	vldr	s15, [r7, #4]
 8002406:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800240a:	4b80      	ldr	r3, [pc, #512]	@ (800260c <MadgwickAHRSupdate+0x768>)
 800240c:	edd3 7a00 	vldr	s15, [r3]
 8002410:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002414:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002418:	4b7e      	ldr	r3, [pc, #504]	@ (8002614 <MadgwickAHRSupdate+0x770>)
 800241a:	edd3 6a00 	vldr	s13, [r3]
 800241e:	edd7 7a02 	vldr	s15, [r7, #8]
 8002422:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002426:	ee77 7a67 	vsub.f32	s15, s14, s15
		hy = _2q0mx * q3 + my * q0q0 - _2q0mz * q1 + _2q1mx * q2 - my * q1q1
 800242a:	4b85      	ldr	r3, [pc, #532]	@ (8002640 <MadgwickAHRSupdate+0x79c>)
 800242c:	edc3 7a00 	vstr	s15, [r3]
		_2bx = sqrt(hx * hx + hy * hy);
 8002430:	4b7e      	ldr	r3, [pc, #504]	@ (800262c <MadgwickAHRSupdate+0x788>)
 8002432:	ed93 7a00 	vldr	s14, [r3]
 8002436:	4b7d      	ldr	r3, [pc, #500]	@ (800262c <MadgwickAHRSupdate+0x788>)
 8002438:	edd3 7a00 	vldr	s15, [r3]
 800243c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002440:	4b7f      	ldr	r3, [pc, #508]	@ (8002640 <MadgwickAHRSupdate+0x79c>)
 8002442:	edd3 6a00 	vldr	s13, [r3]
 8002446:	4b7e      	ldr	r3, [pc, #504]	@ (8002640 <MadgwickAHRSupdate+0x79c>)
 8002448:	edd3 7a00 	vldr	s15, [r3]
 800244c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002450:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002454:	ee17 0a90 	vmov	r0, s15
 8002458:	f7fd fffe 	bl	8000458 <__aeabi_f2d>
 800245c:	4602      	mov	r2, r0
 800245e:	460b      	mov	r3, r1
 8002460:	ec43 2b10 	vmov	d0, r2, r3
 8002464:	f00a fc78 	bl	800cd58 <sqrt>
 8002468:	ec53 2b10 	vmov	r2, r3, d0
 800246c:	4610      	mov	r0, r2
 800246e:	4619      	mov	r1, r3
 8002470:	f7fe fafa 	bl	8000a68 <__aeabi_d2f>
 8002474:	4603      	mov	r3, r0
 8002476:	4a73      	ldr	r2, [pc, #460]	@ (8002644 <MadgwickAHRSupdate+0x7a0>)
 8002478:	6013      	str	r3, [r2, #0]
		_2bz = -_2q0mx * q2 + _2q0my * q1 + mz * q0q0 + _2q1mx * q3 - mz * q1q1
 800247a:	4b6d      	ldr	r3, [pc, #436]	@ (8002630 <MadgwickAHRSupdate+0x78c>)
 800247c:	edd3 7a00 	vldr	s15, [r3]
 8002480:	eeb1 7a67 	vneg.f32	s14, s15
 8002484:	4b5f      	ldr	r3, [pc, #380]	@ (8002604 <MadgwickAHRSupdate+0x760>)
 8002486:	edd3 7a00 	vldr	s15, [r3]
 800248a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800248e:	4b63      	ldr	r3, [pc, #396]	@ (800261c <MadgwickAHRSupdate+0x778>)
 8002490:	edd3 6a00 	vldr	s13, [r3]
 8002494:	4b67      	ldr	r3, [pc, #412]	@ (8002634 <MadgwickAHRSupdate+0x790>)
 8002496:	edd3 7a00 	vldr	s15, [r3]
 800249a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800249e:	ee37 7a27 	vadd.f32	s14, s14, s15
 80024a2:	4b5d      	ldr	r3, [pc, #372]	@ (8002618 <MadgwickAHRSupdate+0x774>)
 80024a4:	edd3 6a00 	vldr	s13, [r3]
 80024a8:	edd7 7a01 	vldr	s15, [r7, #4]
 80024ac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80024b0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80024b4:	4b60      	ldr	r3, [pc, #384]	@ (8002638 <MadgwickAHRSupdate+0x794>)
 80024b6:	edd3 6a00 	vldr	s13, [r3]
 80024ba:	4b54      	ldr	r3, [pc, #336]	@ (800260c <MadgwickAHRSupdate+0x768>)
 80024bc:	edd3 7a00 	vldr	s15, [r3]
 80024c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80024c4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80024c8:	4b56      	ldr	r3, [pc, #344]	@ (8002624 <MadgwickAHRSupdate+0x780>)
 80024ca:	edd3 6a00 	vldr	s13, [r3]
 80024ce:	edd7 7a01 	vldr	s15, [r7, #4]
 80024d2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80024d6:	ee37 7a67 	vsub.f32	s14, s14, s15
				+ _2q2 * my * q3 - mz * q2q2 + mz * q3q3;
 80024da:	4b58      	ldr	r3, [pc, #352]	@ (800263c <MadgwickAHRSupdate+0x798>)
 80024dc:	edd3 6a00 	vldr	s13, [r3]
 80024e0:	edd7 7a02 	vldr	s15, [r7, #8]
 80024e4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80024e8:	4b48      	ldr	r3, [pc, #288]	@ (800260c <MadgwickAHRSupdate+0x768>)
 80024ea:	edd3 7a00 	vldr	s15, [r3]
 80024ee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80024f2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80024f6:	4b44      	ldr	r3, [pc, #272]	@ (8002608 <MadgwickAHRSupdate+0x764>)
 80024f8:	edd3 6a00 	vldr	s13, [r3]
 80024fc:	edd7 7a01 	vldr	s15, [r7, #4]
 8002500:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002504:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002508:	4b42      	ldr	r3, [pc, #264]	@ (8002614 <MadgwickAHRSupdate+0x770>)
 800250a:	edd3 6a00 	vldr	s13, [r3]
 800250e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002512:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002516:	ee77 7a27 	vadd.f32	s15, s14, s15
		_2bz = -_2q0mx * q2 + _2q0my * q1 + mz * q0q0 + _2q1mx * q3 - mz * q1q1
 800251a:	4b4b      	ldr	r3, [pc, #300]	@ (8002648 <MadgwickAHRSupdate+0x7a4>)
 800251c:	edc3 7a00 	vstr	s15, [r3]
		_4bx = 2.0f * _2bx;
 8002520:	4b48      	ldr	r3, [pc, #288]	@ (8002644 <MadgwickAHRSupdate+0x7a0>)
 8002522:	edd3 7a00 	vldr	s15, [r3]
 8002526:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800252a:	4b48      	ldr	r3, [pc, #288]	@ (800264c <MadgwickAHRSupdate+0x7a8>)
 800252c:	edc3 7a00 	vstr	s15, [r3]
		_4bz = 2.0f * _2bz;
 8002530:	4b45      	ldr	r3, [pc, #276]	@ (8002648 <MadgwickAHRSupdate+0x7a4>)
 8002532:	edd3 7a00 	vldr	s15, [r3]
 8002536:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800253a:	4b45      	ldr	r3, [pc, #276]	@ (8002650 <MadgwickAHRSupdate+0x7ac>)
 800253c:	edc3 7a00 	vstr	s15, [r3]

		s0 = -_2q2 * (2.0f * q1q3 - _2q0q2 - ax)
 8002540:	4b3e      	ldr	r3, [pc, #248]	@ (800263c <MadgwickAHRSupdate+0x798>)
 8002542:	edd3 7a00 	vldr	s15, [r3]
 8002546:	eeb1 7a67 	vneg.f32	s14, s15
 800254a:	4b2d      	ldr	r3, [pc, #180]	@ (8002600 <MadgwickAHRSupdate+0x75c>)
 800254c:	edd3 7a00 	vldr	s15, [r3]
 8002550:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8002554:	4b3f      	ldr	r3, [pc, #252]	@ (8002654 <MadgwickAHRSupdate+0x7b0>)
 8002556:	edd3 7a00 	vldr	s15, [r3]
 800255a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800255e:	edd7 7a06 	vldr	s15, [r7, #24]
 8002562:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002566:	ee27 7a27 	vmul.f32	s14, s14, s15
				+ _2q1 * (2.0f * q0q1 + _2q2q3 - ay)
 800256a:	4b3b      	ldr	r3, [pc, #236]	@ (8002658 <MadgwickAHRSupdate+0x7b4>)
 800256c:	edd3 7a00 	vldr	s15, [r3]
 8002570:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8002574:	4b39      	ldr	r3, [pc, #228]	@ (800265c <MadgwickAHRSupdate+0x7b8>)
 8002576:	edd3 7a00 	vldr	s15, [r3]
 800257a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800257e:	edd7 7a05 	vldr	s15, [r7, #20]
 8002582:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002586:	4b28      	ldr	r3, [pc, #160]	@ (8002628 <MadgwickAHRSupdate+0x784>)
 8002588:	edd3 7a00 	vldr	s15, [r3]
 800258c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002590:	ee37 7a27 	vadd.f32	s14, s14, s15
				- _2bz * q2
 8002594:	4b2c      	ldr	r3, [pc, #176]	@ (8002648 <MadgwickAHRSupdate+0x7a4>)
 8002596:	edd3 6a00 	vldr	s13, [r3]
 800259a:	4b1a      	ldr	r3, [pc, #104]	@ (8002604 <MadgwickAHRSupdate+0x760>)
 800259c:	edd3 7a00 	vldr	s15, [r3]
 80025a0:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2)
 80025a4:	4b18      	ldr	r3, [pc, #96]	@ (8002608 <MadgwickAHRSupdate+0x764>)
 80025a6:	edd3 7a00 	vldr	s15, [r3]
 80025aa:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 80025ae:	ee36 6a67 	vsub.f32	s12, s12, s15
 80025b2:	4b18      	ldr	r3, [pc, #96]	@ (8002614 <MadgwickAHRSupdate+0x770>)
 80025b4:	edd3 7a00 	vldr	s15, [r3]
 80025b8:	ee36 6a67 	vsub.f32	s12, s12, s15
 80025bc:	4b21      	ldr	r3, [pc, #132]	@ (8002644 <MadgwickAHRSupdate+0x7a0>)
 80025be:	edd3 7a00 	vldr	s15, [r3]
 80025c2:	ee26 6a27 	vmul.f32	s12, s12, s15
 80025c6:	4b0e      	ldr	r3, [pc, #56]	@ (8002600 <MadgwickAHRSupdate+0x75c>)
 80025c8:	edd3 5a00 	vldr	s11, [r3]
 80025cc:	4b24      	ldr	r3, [pc, #144]	@ (8002660 <MadgwickAHRSupdate+0x7bc>)
 80025ce:	edd3 7a00 	vldr	s15, [r3]
 80025d2:	ee75 5ae7 	vsub.f32	s11, s11, s15
 80025d6:	4b1c      	ldr	r3, [pc, #112]	@ (8002648 <MadgwickAHRSupdate+0x7a4>)
 80025d8:	edd3 7a00 	vldr	s15, [r3]
 80025dc:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80025e0:	ee36 6a27 	vadd.f32	s12, s12, s15
								- mx)
 80025e4:	edd7 7a03 	vldr	s15, [r7, #12]
 80025e8:	ee76 7a67 	vsub.f32	s15, s12, s15
						* (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2)
 80025ec:	ee66 7aa7 	vmul.f32	s15, s13, s15
				- _2bz * q2
 80025f0:	ee37 7a67 	vsub.f32	s14, s14, s15
				+ (-_2bx * q3 + _2bz * q1)
 80025f4:	4b13      	ldr	r3, [pc, #76]	@ (8002644 <MadgwickAHRSupdate+0x7a0>)
 80025f6:	edd3 7a00 	vldr	s15, [r3]
 80025fa:	eef1 6a67 	vneg.f32	s13, s15
 80025fe:	e031      	b.n	8002664 <MadgwickAHRSupdate+0x7c0>
 8002600:	2000042c 	.word	0x2000042c
 8002604:	20000464 	.word	0x20000464
 8002608:	20000430 	.word	0x20000430
 800260c:	20000468 	.word	0x20000468
 8002610:	20000434 	.word	0x20000434
 8002614:	20000438 	.word	0x20000438
 8002618:	20000414 	.word	0x20000414
 800261c:	200003e0 	.word	0x200003e0
 8002620:	200003e4 	.word	0x200003e4
 8002624:	20000424 	.word	0x20000424
 8002628:	20000400 	.word	0x20000400
 800262c:	200003d4 	.word	0x200003d4
 8002630:	200003dc 	.word	0x200003dc
 8002634:	20000460 	.word	0x20000460
 8002638:	200003e8 	.word	0x200003e8
 800263c:	20000404 	.word	0x20000404
 8002640:	200003d8 	.word	0x200003d8
 8002644:	200003ec 	.word	0x200003ec
 8002648:	200003f0 	.word	0x200003f0
 800264c:	200003f4 	.word	0x200003f4
 8002650:	200003f8 	.word	0x200003f8
 8002654:	2000040c 	.word	0x2000040c
 8002658:	20000418 	.word	0x20000418
 800265c:	20000410 	.word	0x20000410
 8002660:	2000041c 	.word	0x2000041c
 8002664:	4bda      	ldr	r3, [pc, #872]	@ (80029d0 <MadgwickAHRSupdate+0xb2c>)
 8002666:	edd3 7a00 	vldr	s15, [r3]
 800266a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800266e:	4bd9      	ldr	r3, [pc, #868]	@ (80029d4 <MadgwickAHRSupdate+0xb30>)
 8002670:	ed93 6a00 	vldr	s12, [r3]
 8002674:	4bd8      	ldr	r3, [pc, #864]	@ (80029d8 <MadgwickAHRSupdate+0xb34>)
 8002676:	edd3 7a00 	vldr	s15, [r3]
 800267a:	ee66 7a27 	vmul.f32	s15, s12, s15
 800267e:	ee76 6aa7 	vadd.f32	s13, s13, s15
						* (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my)
 8002682:	4bd6      	ldr	r3, [pc, #856]	@ (80029dc <MadgwickAHRSupdate+0xb38>)
 8002684:	ed93 6a00 	vldr	s12, [r3]
 8002688:	4bd5      	ldr	r3, [pc, #852]	@ (80029e0 <MadgwickAHRSupdate+0xb3c>)
 800268a:	edd3 7a00 	vldr	s15, [r3]
 800268e:	ee36 6a67 	vsub.f32	s12, s12, s15
 8002692:	4bd4      	ldr	r3, [pc, #848]	@ (80029e4 <MadgwickAHRSupdate+0xb40>)
 8002694:	edd3 7a00 	vldr	s15, [r3]
 8002698:	ee26 6a27 	vmul.f32	s12, s12, s15
 800269c:	4bd2      	ldr	r3, [pc, #840]	@ (80029e8 <MadgwickAHRSupdate+0xb44>)
 800269e:	edd3 5a00 	vldr	s11, [r3]
 80026a2:	4bd2      	ldr	r3, [pc, #840]	@ (80029ec <MadgwickAHRSupdate+0xb48>)
 80026a4:	edd3 7a00 	vldr	s15, [r3]
 80026a8:	ee75 5aa7 	vadd.f32	s11, s11, s15
 80026ac:	4bc9      	ldr	r3, [pc, #804]	@ (80029d4 <MadgwickAHRSupdate+0xb30>)
 80026ae:	edd3 7a00 	vldr	s15, [r3]
 80026b2:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80026b6:	ee36 6a27 	vadd.f32	s12, s12, s15
 80026ba:	edd7 7a02 	vldr	s15, [r7, #8]
 80026be:	ee76 7a67 	vsub.f32	s15, s12, s15
 80026c2:	ee66 7aa7 	vmul.f32	s15, s13, s15
				+ (-_2bx * q3 + _2bz * q1)
 80026c6:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ _2bx * q2
 80026ca:	4bc6      	ldr	r3, [pc, #792]	@ (80029e4 <MadgwickAHRSupdate+0xb40>)
 80026cc:	edd3 6a00 	vldr	s13, [r3]
 80026d0:	4bc7      	ldr	r3, [pc, #796]	@ (80029f0 <MadgwickAHRSupdate+0xb4c>)
 80026d2:	edd3 7a00 	vldr	s15, [r3]
 80026d6:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2)
 80026da:	4bc6      	ldr	r3, [pc, #792]	@ (80029f4 <MadgwickAHRSupdate+0xb50>)
 80026dc:	ed93 6a00 	vldr	s12, [r3]
 80026e0:	4bc5      	ldr	r3, [pc, #788]	@ (80029f8 <MadgwickAHRSupdate+0xb54>)
 80026e2:	edd3 7a00 	vldr	s15, [r3]
 80026e6:	ee36 6a27 	vadd.f32	s12, s12, s15
 80026ea:	4bbe      	ldr	r3, [pc, #760]	@ (80029e4 <MadgwickAHRSupdate+0xb40>)
 80026ec:	edd3 7a00 	vldr	s15, [r3]
 80026f0:	ee26 6a27 	vmul.f32	s12, s12, s15
 80026f4:	4bc1      	ldr	r3, [pc, #772]	@ (80029fc <MadgwickAHRSupdate+0xb58>)
 80026f6:	edd3 7a00 	vldr	s15, [r3]
 80026fa:	eef6 5a00 	vmov.f32	s11, #96	@ 0x3f000000  0.5
 80026fe:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8002702:	4bbf      	ldr	r3, [pc, #764]	@ (8002a00 <MadgwickAHRSupdate+0xb5c>)
 8002704:	edd3 7a00 	vldr	s15, [r3]
 8002708:	ee75 5ae7 	vsub.f32	s11, s11, s15
 800270c:	4bb1      	ldr	r3, [pc, #708]	@ (80029d4 <MadgwickAHRSupdate+0xb30>)
 800270e:	edd3 7a00 	vldr	s15, [r3]
 8002712:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8002716:	ee36 6a27 	vadd.f32	s12, s12, s15
								- mz);
 800271a:	edd7 7a01 	vldr	s15, [r7, #4]
 800271e:	ee76 7a67 	vsub.f32	s15, s12, s15
						* (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2)
 8002722:	ee66 7aa7 	vmul.f32	s15, s13, s15
				+ _2bx * q2
 8002726:	ee77 7a27 	vadd.f32	s15, s14, s15
		s0 = -_2q2 * (2.0f * q1q3 - _2q0q2 - ax)
 800272a:	4bb6      	ldr	r3, [pc, #728]	@ (8002a04 <MadgwickAHRSupdate+0xb60>)
 800272c:	edc3 7a00 	vstr	s15, [r3]
		s1 = _2q3 * (2.0f * q1q3 - _2q0q2 - ax)
 8002730:	4bb1      	ldr	r3, [pc, #708]	@ (80029f8 <MadgwickAHRSupdate+0xb54>)
 8002732:	edd3 7a00 	vldr	s15, [r3]
 8002736:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800273a:	4bb3      	ldr	r3, [pc, #716]	@ (8002a08 <MadgwickAHRSupdate+0xb64>)
 800273c:	edd3 7a00 	vldr	s15, [r3]
 8002740:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002744:	edd7 7a06 	vldr	s15, [r7, #24]
 8002748:	ee37 7a67 	vsub.f32	s14, s14, s15
 800274c:	4baf      	ldr	r3, [pc, #700]	@ (8002a0c <MadgwickAHRSupdate+0xb68>)
 800274e:	edd3 7a00 	vldr	s15, [r3]
 8002752:	ee27 7a27 	vmul.f32	s14, s14, s15
				+ _2q0 * (2.0f * q0q1 + _2q2q3 - ay)
 8002756:	4ba4      	ldr	r3, [pc, #656]	@ (80029e8 <MadgwickAHRSupdate+0xb44>)
 8002758:	edd3 7a00 	vldr	s15, [r3]
 800275c:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8002760:	4bab      	ldr	r3, [pc, #684]	@ (8002a10 <MadgwickAHRSupdate+0xb6c>)
 8002762:	edd3 7a00 	vldr	s15, [r3]
 8002766:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800276a:	edd7 7a05 	vldr	s15, [r7, #20]
 800276e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002772:	4ba8      	ldr	r3, [pc, #672]	@ (8002a14 <MadgwickAHRSupdate+0xb70>)
 8002774:	edd3 7a00 	vldr	s15, [r3]
 8002778:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800277c:	ee37 7a27 	vadd.f32	s14, s14, s15
				- 4.0f * q1 * (1 - 2.0f * q1q1 - 2.0f * q2q2 - az)
 8002780:	4b95      	ldr	r3, [pc, #596]	@ (80029d8 <MadgwickAHRSupdate+0xb34>)
 8002782:	edd3 7a00 	vldr	s15, [r3]
 8002786:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 800278a:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800278e:	4b9b      	ldr	r3, [pc, #620]	@ (80029fc <MadgwickAHRSupdate+0xb58>)
 8002790:	edd3 7a00 	vldr	s15, [r3]
 8002794:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002798:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 800279c:	ee36 6a67 	vsub.f32	s12, s12, s15
 80027a0:	4b97      	ldr	r3, [pc, #604]	@ (8002a00 <MadgwickAHRSupdate+0xb5c>)
 80027a2:	edd3 7a00 	vldr	s15, [r3]
 80027a6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80027aa:	ee36 6a67 	vsub.f32	s12, s12, s15
 80027ae:	edd7 7a04 	vldr	s15, [r7, #16]
 80027b2:	ee76 7a67 	vsub.f32	s15, s12, s15
 80027b6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80027ba:	ee37 7a67 	vsub.f32	s14, s14, s15
				+ _2bz * q3
 80027be:	4b85      	ldr	r3, [pc, #532]	@ (80029d4 <MadgwickAHRSupdate+0xb30>)
 80027c0:	edd3 6a00 	vldr	s13, [r3]
 80027c4:	4b82      	ldr	r3, [pc, #520]	@ (80029d0 <MadgwickAHRSupdate+0xb2c>)
 80027c6:	edd3 7a00 	vldr	s15, [r3]
 80027ca:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2)
 80027ce:	4b8c      	ldr	r3, [pc, #560]	@ (8002a00 <MadgwickAHRSupdate+0xb5c>)
 80027d0:	edd3 7a00 	vldr	s15, [r3]
 80027d4:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 80027d8:	ee36 6a67 	vsub.f32	s12, s12, s15
 80027dc:	4b8e      	ldr	r3, [pc, #568]	@ (8002a18 <MadgwickAHRSupdate+0xb74>)
 80027de:	edd3 7a00 	vldr	s15, [r3]
 80027e2:	ee36 6a67 	vsub.f32	s12, s12, s15
 80027e6:	4b7f      	ldr	r3, [pc, #508]	@ (80029e4 <MadgwickAHRSupdate+0xb40>)
 80027e8:	edd3 7a00 	vldr	s15, [r3]
 80027ec:	ee26 6a27 	vmul.f32	s12, s12, s15
 80027f0:	4b81      	ldr	r3, [pc, #516]	@ (80029f8 <MadgwickAHRSupdate+0xb54>)
 80027f2:	edd3 5a00 	vldr	s11, [r3]
 80027f6:	4b7f      	ldr	r3, [pc, #508]	@ (80029f4 <MadgwickAHRSupdate+0xb50>)
 80027f8:	edd3 7a00 	vldr	s15, [r3]
 80027fc:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8002800:	4b74      	ldr	r3, [pc, #464]	@ (80029d4 <MadgwickAHRSupdate+0xb30>)
 8002802:	edd3 7a00 	vldr	s15, [r3]
 8002806:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800280a:	ee36 6a27 	vadd.f32	s12, s12, s15
								- mx)
 800280e:	edd7 7a03 	vldr	s15, [r7, #12]
 8002812:	ee76 7a67 	vsub.f32	s15, s12, s15
						* (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2)
 8002816:	ee66 7aa7 	vmul.f32	s15, s13, s15
				+ _2bz * q3
 800281a:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ (_2bx * q2 + _2bz * q0)
 800281e:	4b71      	ldr	r3, [pc, #452]	@ (80029e4 <MadgwickAHRSupdate+0xb40>)
 8002820:	edd3 6a00 	vldr	s13, [r3]
 8002824:	4b72      	ldr	r3, [pc, #456]	@ (80029f0 <MadgwickAHRSupdate+0xb4c>)
 8002826:	edd3 7a00 	vldr	s15, [r3]
 800282a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800282e:	4b69      	ldr	r3, [pc, #420]	@ (80029d4 <MadgwickAHRSupdate+0xb30>)
 8002830:	ed93 6a00 	vldr	s12, [r3]
 8002834:	4b79      	ldr	r3, [pc, #484]	@ (8002a1c <MadgwickAHRSupdate+0xb78>)
 8002836:	edd3 7a00 	vldr	s15, [r3]
 800283a:	ee66 7a27 	vmul.f32	s15, s12, s15
 800283e:	ee76 6aa7 	vadd.f32	s13, s13, s15
						* (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my)
 8002842:	4b66      	ldr	r3, [pc, #408]	@ (80029dc <MadgwickAHRSupdate+0xb38>)
 8002844:	ed93 6a00 	vldr	s12, [r3]
 8002848:	4b65      	ldr	r3, [pc, #404]	@ (80029e0 <MadgwickAHRSupdate+0xb3c>)
 800284a:	edd3 7a00 	vldr	s15, [r3]
 800284e:	ee36 6a67 	vsub.f32	s12, s12, s15
 8002852:	4b64      	ldr	r3, [pc, #400]	@ (80029e4 <MadgwickAHRSupdate+0xb40>)
 8002854:	edd3 7a00 	vldr	s15, [r3]
 8002858:	ee26 6a27 	vmul.f32	s12, s12, s15
 800285c:	4b62      	ldr	r3, [pc, #392]	@ (80029e8 <MadgwickAHRSupdate+0xb44>)
 800285e:	edd3 5a00 	vldr	s11, [r3]
 8002862:	4b62      	ldr	r3, [pc, #392]	@ (80029ec <MadgwickAHRSupdate+0xb48>)
 8002864:	edd3 7a00 	vldr	s15, [r3]
 8002868:	ee75 5aa7 	vadd.f32	s11, s11, s15
 800286c:	4b59      	ldr	r3, [pc, #356]	@ (80029d4 <MadgwickAHRSupdate+0xb30>)
 800286e:	edd3 7a00 	vldr	s15, [r3]
 8002872:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8002876:	ee36 6a27 	vadd.f32	s12, s12, s15
 800287a:	edd7 7a02 	vldr	s15, [r7, #8]
 800287e:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002882:	ee66 7aa7 	vmul.f32	s15, s13, s15
				+ (_2bx * q2 + _2bz * q0)
 8002886:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ (_2bx * q3 - _4bz * q1)
 800288a:	4b56      	ldr	r3, [pc, #344]	@ (80029e4 <MadgwickAHRSupdate+0xb40>)
 800288c:	edd3 6a00 	vldr	s13, [r3]
 8002890:	4b4f      	ldr	r3, [pc, #316]	@ (80029d0 <MadgwickAHRSupdate+0xb2c>)
 8002892:	edd3 7a00 	vldr	s15, [r3]
 8002896:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800289a:	4b61      	ldr	r3, [pc, #388]	@ (8002a20 <MadgwickAHRSupdate+0xb7c>)
 800289c:	ed93 6a00 	vldr	s12, [r3]
 80028a0:	4b4d      	ldr	r3, [pc, #308]	@ (80029d8 <MadgwickAHRSupdate+0xb34>)
 80028a2:	edd3 7a00 	vldr	s15, [r3]
 80028a6:	ee66 7a27 	vmul.f32	s15, s12, s15
 80028aa:	ee76 6ae7 	vsub.f32	s13, s13, s15
						* (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2)
 80028ae:	4b51      	ldr	r3, [pc, #324]	@ (80029f4 <MadgwickAHRSupdate+0xb50>)
 80028b0:	ed93 6a00 	vldr	s12, [r3]
 80028b4:	4b50      	ldr	r3, [pc, #320]	@ (80029f8 <MadgwickAHRSupdate+0xb54>)
 80028b6:	edd3 7a00 	vldr	s15, [r3]
 80028ba:	ee36 6a27 	vadd.f32	s12, s12, s15
 80028be:	4b49      	ldr	r3, [pc, #292]	@ (80029e4 <MadgwickAHRSupdate+0xb40>)
 80028c0:	edd3 7a00 	vldr	s15, [r3]
 80028c4:	ee26 6a27 	vmul.f32	s12, s12, s15
 80028c8:	4b4c      	ldr	r3, [pc, #304]	@ (80029fc <MadgwickAHRSupdate+0xb58>)
 80028ca:	edd3 7a00 	vldr	s15, [r3]
 80028ce:	eef6 5a00 	vmov.f32	s11, #96	@ 0x3f000000  0.5
 80028d2:	ee75 5ae7 	vsub.f32	s11, s11, s15
 80028d6:	4b4a      	ldr	r3, [pc, #296]	@ (8002a00 <MadgwickAHRSupdate+0xb5c>)
 80028d8:	edd3 7a00 	vldr	s15, [r3]
 80028dc:	ee75 5ae7 	vsub.f32	s11, s11, s15
 80028e0:	4b3c      	ldr	r3, [pc, #240]	@ (80029d4 <MadgwickAHRSupdate+0xb30>)
 80028e2:	edd3 7a00 	vldr	s15, [r3]
 80028e6:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80028ea:	ee36 6a27 	vadd.f32	s12, s12, s15
								- mz);
 80028ee:	edd7 7a01 	vldr	s15, [r7, #4]
 80028f2:	ee76 7a67 	vsub.f32	s15, s12, s15
						* (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2)
 80028f6:	ee66 7aa7 	vmul.f32	s15, s13, s15
				+ (_2bx * q3 - _4bz * q1)
 80028fa:	ee77 7a27 	vadd.f32	s15, s14, s15
		s1 = _2q3 * (2.0f * q1q3 - _2q0q2 - ax)
 80028fe:	4b49      	ldr	r3, [pc, #292]	@ (8002a24 <MadgwickAHRSupdate+0xb80>)
 8002900:	edc3 7a00 	vstr	s15, [r3]
		s2 = -_2q0 * (2.0f * q1q3 - _2q0q2 - ax)
 8002904:	4b43      	ldr	r3, [pc, #268]	@ (8002a14 <MadgwickAHRSupdate+0xb70>)
 8002906:	edd3 7a00 	vldr	s15, [r3]
 800290a:	eeb1 7a67 	vneg.f32	s14, s15
 800290e:	4b3a      	ldr	r3, [pc, #232]	@ (80029f8 <MadgwickAHRSupdate+0xb54>)
 8002910:	edd3 7a00 	vldr	s15, [r3]
 8002914:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8002918:	4b3b      	ldr	r3, [pc, #236]	@ (8002a08 <MadgwickAHRSupdate+0xb64>)
 800291a:	edd3 7a00 	vldr	s15, [r3]
 800291e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002922:	edd7 7a06 	vldr	s15, [r7, #24]
 8002926:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800292a:	ee27 7a27 	vmul.f32	s14, s14, s15
				+ _2q3 * (2.0f * q0q1 + _2q2q3 - ay)
 800292e:	4b2e      	ldr	r3, [pc, #184]	@ (80029e8 <MadgwickAHRSupdate+0xb44>)
 8002930:	edd3 7a00 	vldr	s15, [r3]
 8002934:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8002938:	4b35      	ldr	r3, [pc, #212]	@ (8002a10 <MadgwickAHRSupdate+0xb6c>)
 800293a:	edd3 7a00 	vldr	s15, [r3]
 800293e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002942:	edd7 7a05 	vldr	s15, [r7, #20]
 8002946:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800294a:	4b30      	ldr	r3, [pc, #192]	@ (8002a0c <MadgwickAHRSupdate+0xb68>)
 800294c:	edd3 7a00 	vldr	s15, [r3]
 8002950:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002954:	ee37 7a27 	vadd.f32	s14, s14, s15
				- 4.0f * q2 * (1 - 2.0f * q1q1 - 2.0f * q2q2 - az)
 8002958:	4b25      	ldr	r3, [pc, #148]	@ (80029f0 <MadgwickAHRSupdate+0xb4c>)
 800295a:	edd3 7a00 	vldr	s15, [r3]
 800295e:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8002962:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002966:	4b25      	ldr	r3, [pc, #148]	@ (80029fc <MadgwickAHRSupdate+0xb58>)
 8002968:	edd3 7a00 	vldr	s15, [r3]
 800296c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002970:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 8002974:	ee36 6a67 	vsub.f32	s12, s12, s15
 8002978:	4b21      	ldr	r3, [pc, #132]	@ (8002a00 <MadgwickAHRSupdate+0xb5c>)
 800297a:	edd3 7a00 	vldr	s15, [r3]
 800297e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002982:	ee36 6a67 	vsub.f32	s12, s12, s15
 8002986:	edd7 7a04 	vldr	s15, [r7, #16]
 800298a:	ee76 7a67 	vsub.f32	s15, s12, s15
 800298e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002992:	ee37 7a67 	vsub.f32	s14, s14, s15
				+ (-_4bx * q2 - _2bz * q0)
 8002996:	4b24      	ldr	r3, [pc, #144]	@ (8002a28 <MadgwickAHRSupdate+0xb84>)
 8002998:	edd3 7a00 	vldr	s15, [r3]
 800299c:	eef1 6a67 	vneg.f32	s13, s15
 80029a0:	4b13      	ldr	r3, [pc, #76]	@ (80029f0 <MadgwickAHRSupdate+0xb4c>)
 80029a2:	edd3 7a00 	vldr	s15, [r3]
 80029a6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80029aa:	4b0a      	ldr	r3, [pc, #40]	@ (80029d4 <MadgwickAHRSupdate+0xb30>)
 80029ac:	ed93 6a00 	vldr	s12, [r3]
 80029b0:	4b1a      	ldr	r3, [pc, #104]	@ (8002a1c <MadgwickAHRSupdate+0xb78>)
 80029b2:	edd3 7a00 	vldr	s15, [r3]
 80029b6:	ee66 7a27 	vmul.f32	s15, s12, s15
 80029ba:	ee76 6ae7 	vsub.f32	s13, s13, s15
						* (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2)
 80029be:	4b10      	ldr	r3, [pc, #64]	@ (8002a00 <MadgwickAHRSupdate+0xb5c>)
 80029c0:	edd3 7a00 	vldr	s15, [r3]
 80029c4:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 80029c8:	ee36 6a67 	vsub.f32	s12, s12, s15
 80029cc:	e02e      	b.n	8002a2c <MadgwickAHRSupdate+0xb88>
 80029ce:	bf00      	nop
 80029d0:	20000468 	.word	0x20000468
 80029d4:	200003f0 	.word	0x200003f0
 80029d8:	20000460 	.word	0x20000460
 80029dc:	20000428 	.word	0x20000428
 80029e0:	20000420 	.word	0x20000420
 80029e4:	200003ec 	.word	0x200003ec
 80029e8:	20000418 	.word	0x20000418
 80029ec:	20000434 	.word	0x20000434
 80029f0:	20000464 	.word	0x20000464
 80029f4:	2000041c 	.word	0x2000041c
 80029f8:	2000042c 	.word	0x2000042c
 80029fc:	20000424 	.word	0x20000424
 8002a00:	20000430 	.word	0x20000430
 8002a04:	200003b4 	.word	0x200003b4
 8002a08:	2000040c 	.word	0x2000040c
 8002a0c:	20000408 	.word	0x20000408
 8002a10:	20000410 	.word	0x20000410
 8002a14:	200003fc 	.word	0x200003fc
 8002a18:	20000438 	.word	0x20000438
 8002a1c:	20000008 	.word	0x20000008
 8002a20:	200003f8 	.word	0x200003f8
 8002a24:	200003b8 	.word	0x200003b8
 8002a28:	200003f4 	.word	0x200003f4
 8002a2c:	4bd7      	ldr	r3, [pc, #860]	@ (8002d8c <MadgwickAHRSupdate+0xee8>)
 8002a2e:	edd3 7a00 	vldr	s15, [r3]
 8002a32:	ee36 6a67 	vsub.f32	s12, s12, s15
 8002a36:	4bd6      	ldr	r3, [pc, #856]	@ (8002d90 <MadgwickAHRSupdate+0xeec>)
 8002a38:	edd3 7a00 	vldr	s15, [r3]
 8002a3c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002a40:	4bd4      	ldr	r3, [pc, #848]	@ (8002d94 <MadgwickAHRSupdate+0xef0>)
 8002a42:	edd3 5a00 	vldr	s11, [r3]
 8002a46:	4bd4      	ldr	r3, [pc, #848]	@ (8002d98 <MadgwickAHRSupdate+0xef4>)
 8002a48:	edd3 7a00 	vldr	s15, [r3]
 8002a4c:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8002a50:	4bd2      	ldr	r3, [pc, #840]	@ (8002d9c <MadgwickAHRSupdate+0xef8>)
 8002a52:	edd3 7a00 	vldr	s15, [r3]
 8002a56:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8002a5a:	ee36 6a27 	vadd.f32	s12, s12, s15
								- mx)
 8002a5e:	edd7 7a03 	vldr	s15, [r7, #12]
 8002a62:	ee76 7a67 	vsub.f32	s15, s12, s15
						* (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2)
 8002a66:	ee66 7aa7 	vmul.f32	s15, s13, s15
				+ (-_4bx * q2 - _2bz * q0)
 8002a6a:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ (_2bx * q1 + _2bz * q3)
 8002a6e:	4bc8      	ldr	r3, [pc, #800]	@ (8002d90 <MadgwickAHRSupdate+0xeec>)
 8002a70:	edd3 6a00 	vldr	s13, [r3]
 8002a74:	4bca      	ldr	r3, [pc, #808]	@ (8002da0 <MadgwickAHRSupdate+0xefc>)
 8002a76:	edd3 7a00 	vldr	s15, [r3]
 8002a7a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002a7e:	4bc7      	ldr	r3, [pc, #796]	@ (8002d9c <MadgwickAHRSupdate+0xef8>)
 8002a80:	ed93 6a00 	vldr	s12, [r3]
 8002a84:	4bc7      	ldr	r3, [pc, #796]	@ (8002da4 <MadgwickAHRSupdate+0xf00>)
 8002a86:	edd3 7a00 	vldr	s15, [r3]
 8002a8a:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002a8e:	ee76 6aa7 	vadd.f32	s13, s13, s15
						* (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my)
 8002a92:	4bc5      	ldr	r3, [pc, #788]	@ (8002da8 <MadgwickAHRSupdate+0xf04>)
 8002a94:	ed93 6a00 	vldr	s12, [r3]
 8002a98:	4bc4      	ldr	r3, [pc, #784]	@ (8002dac <MadgwickAHRSupdate+0xf08>)
 8002a9a:	edd3 7a00 	vldr	s15, [r3]
 8002a9e:	ee36 6a67 	vsub.f32	s12, s12, s15
 8002aa2:	4bbb      	ldr	r3, [pc, #748]	@ (8002d90 <MadgwickAHRSupdate+0xeec>)
 8002aa4:	edd3 7a00 	vldr	s15, [r3]
 8002aa8:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002aac:	4bc0      	ldr	r3, [pc, #768]	@ (8002db0 <MadgwickAHRSupdate+0xf0c>)
 8002aae:	edd3 5a00 	vldr	s11, [r3]
 8002ab2:	4bc0      	ldr	r3, [pc, #768]	@ (8002db4 <MadgwickAHRSupdate+0xf10>)
 8002ab4:	edd3 7a00 	vldr	s15, [r3]
 8002ab8:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8002abc:	4bb7      	ldr	r3, [pc, #732]	@ (8002d9c <MadgwickAHRSupdate+0xef8>)
 8002abe:	edd3 7a00 	vldr	s15, [r3]
 8002ac2:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8002ac6:	ee36 6a27 	vadd.f32	s12, s12, s15
 8002aca:	edd7 7a02 	vldr	s15, [r7, #8]
 8002ace:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002ad2:	ee66 7aa7 	vmul.f32	s15, s13, s15
				+ (_2bx * q1 + _2bz * q3)
 8002ad6:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ (_2bx * q0 - _4bz * q2)
 8002ada:	4bad      	ldr	r3, [pc, #692]	@ (8002d90 <MadgwickAHRSupdate+0xeec>)
 8002adc:	edd3 6a00 	vldr	s13, [r3]
 8002ae0:	4bb5      	ldr	r3, [pc, #724]	@ (8002db8 <MadgwickAHRSupdate+0xf14>)
 8002ae2:	edd3 7a00 	vldr	s15, [r3]
 8002ae6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002aea:	4bb4      	ldr	r3, [pc, #720]	@ (8002dbc <MadgwickAHRSupdate+0xf18>)
 8002aec:	ed93 6a00 	vldr	s12, [r3]
 8002af0:	4bb3      	ldr	r3, [pc, #716]	@ (8002dc0 <MadgwickAHRSupdate+0xf1c>)
 8002af2:	edd3 7a00 	vldr	s15, [r3]
 8002af6:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002afa:	ee76 6ae7 	vsub.f32	s13, s13, s15
						* (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2)
 8002afe:	4ba6      	ldr	r3, [pc, #664]	@ (8002d98 <MadgwickAHRSupdate+0xef4>)
 8002b00:	ed93 6a00 	vldr	s12, [r3]
 8002b04:	4ba3      	ldr	r3, [pc, #652]	@ (8002d94 <MadgwickAHRSupdate+0xef0>)
 8002b06:	edd3 7a00 	vldr	s15, [r3]
 8002b0a:	ee36 6a27 	vadd.f32	s12, s12, s15
 8002b0e:	4ba0      	ldr	r3, [pc, #640]	@ (8002d90 <MadgwickAHRSupdate+0xeec>)
 8002b10:	edd3 7a00 	vldr	s15, [r3]
 8002b14:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002b18:	4baa      	ldr	r3, [pc, #680]	@ (8002dc4 <MadgwickAHRSupdate+0xf20>)
 8002b1a:	edd3 7a00 	vldr	s15, [r3]
 8002b1e:	eef6 5a00 	vmov.f32	s11, #96	@ 0x3f000000  0.5
 8002b22:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8002b26:	4ba8      	ldr	r3, [pc, #672]	@ (8002dc8 <MadgwickAHRSupdate+0xf24>)
 8002b28:	edd3 7a00 	vldr	s15, [r3]
 8002b2c:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8002b30:	4b9a      	ldr	r3, [pc, #616]	@ (8002d9c <MadgwickAHRSupdate+0xef8>)
 8002b32:	edd3 7a00 	vldr	s15, [r3]
 8002b36:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8002b3a:	ee36 6a27 	vadd.f32	s12, s12, s15
								- mz);
 8002b3e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002b42:	ee76 7a67 	vsub.f32	s15, s12, s15
						* (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2)
 8002b46:	ee66 7aa7 	vmul.f32	s15, s13, s15
				+ (_2bx * q0 - _4bz * q2)
 8002b4a:	ee77 7a27 	vadd.f32	s15, s14, s15
		s2 = -_2q0 * (2.0f * q1q3 - _2q0q2 - ax)
 8002b4e:	4b9f      	ldr	r3, [pc, #636]	@ (8002dcc <MadgwickAHRSupdate+0xf28>)
 8002b50:	edc3 7a00 	vstr	s15, [r3]
		s3 = _2q1 * (2.0f * q1q3 - _2q0q2 - ax)
 8002b54:	4b8f      	ldr	r3, [pc, #572]	@ (8002d94 <MadgwickAHRSupdate+0xef0>)
 8002b56:	edd3 7a00 	vldr	s15, [r3]
 8002b5a:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002b5e:	4b9c      	ldr	r3, [pc, #624]	@ (8002dd0 <MadgwickAHRSupdate+0xf2c>)
 8002b60:	edd3 7a00 	vldr	s15, [r3]
 8002b64:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002b68:	edd7 7a06 	vldr	s15, [r7, #24]
 8002b6c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002b70:	4b98      	ldr	r3, [pc, #608]	@ (8002dd4 <MadgwickAHRSupdate+0xf30>)
 8002b72:	edd3 7a00 	vldr	s15, [r3]
 8002b76:	ee27 7a27 	vmul.f32	s14, s14, s15
				+ _2q2 * (2.0f * q0q1 + _2q2q3 - ay)
 8002b7a:	4b8d      	ldr	r3, [pc, #564]	@ (8002db0 <MadgwickAHRSupdate+0xf0c>)
 8002b7c:	edd3 7a00 	vldr	s15, [r3]
 8002b80:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8002b84:	4b94      	ldr	r3, [pc, #592]	@ (8002dd8 <MadgwickAHRSupdate+0xf34>)
 8002b86:	edd3 7a00 	vldr	s15, [r3]
 8002b8a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002b8e:	edd7 7a05 	vldr	s15, [r7, #20]
 8002b92:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002b96:	4b91      	ldr	r3, [pc, #580]	@ (8002ddc <MadgwickAHRSupdate+0xf38>)
 8002b98:	edd3 7a00 	vldr	s15, [r3]
 8002b9c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ba0:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ (-_4bx * q3 + _2bz * q1)
 8002ba4:	4b8e      	ldr	r3, [pc, #568]	@ (8002de0 <MadgwickAHRSupdate+0xf3c>)
 8002ba6:	edd3 7a00 	vldr	s15, [r3]
 8002baa:	eef1 6a67 	vneg.f32	s13, s15
 8002bae:	4b7d      	ldr	r3, [pc, #500]	@ (8002da4 <MadgwickAHRSupdate+0xf00>)
 8002bb0:	edd3 7a00 	vldr	s15, [r3]
 8002bb4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002bb8:	4b78      	ldr	r3, [pc, #480]	@ (8002d9c <MadgwickAHRSupdate+0xef8>)
 8002bba:	ed93 6a00 	vldr	s12, [r3]
 8002bbe:	4b78      	ldr	r3, [pc, #480]	@ (8002da0 <MadgwickAHRSupdate+0xefc>)
 8002bc0:	edd3 7a00 	vldr	s15, [r3]
 8002bc4:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002bc8:	ee76 6aa7 	vadd.f32	s13, s13, s15
						* (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2)
 8002bcc:	4b7e      	ldr	r3, [pc, #504]	@ (8002dc8 <MadgwickAHRSupdate+0xf24>)
 8002bce:	edd3 7a00 	vldr	s15, [r3]
 8002bd2:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 8002bd6:	ee36 6a67 	vsub.f32	s12, s12, s15
 8002bda:	4b6c      	ldr	r3, [pc, #432]	@ (8002d8c <MadgwickAHRSupdate+0xee8>)
 8002bdc:	edd3 7a00 	vldr	s15, [r3]
 8002be0:	ee36 6a67 	vsub.f32	s12, s12, s15
 8002be4:	4b6a      	ldr	r3, [pc, #424]	@ (8002d90 <MadgwickAHRSupdate+0xeec>)
 8002be6:	edd3 7a00 	vldr	s15, [r3]
 8002bea:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002bee:	4b69      	ldr	r3, [pc, #420]	@ (8002d94 <MadgwickAHRSupdate+0xef0>)
 8002bf0:	edd3 5a00 	vldr	s11, [r3]
 8002bf4:	4b68      	ldr	r3, [pc, #416]	@ (8002d98 <MadgwickAHRSupdate+0xef4>)
 8002bf6:	edd3 7a00 	vldr	s15, [r3]
 8002bfa:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8002bfe:	4b67      	ldr	r3, [pc, #412]	@ (8002d9c <MadgwickAHRSupdate+0xef8>)
 8002c00:	edd3 7a00 	vldr	s15, [r3]
 8002c04:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8002c08:	ee36 6a27 	vadd.f32	s12, s12, s15
								- mx)
 8002c0c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002c10:	ee76 7a67 	vsub.f32	s15, s12, s15
						* (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2)
 8002c14:	ee66 7aa7 	vmul.f32	s15, s13, s15
				+ (-_4bx * q3 + _2bz * q1)
 8002c18:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ (-_2bx * q0 + _2bz * q2)
 8002c1c:	4b5c      	ldr	r3, [pc, #368]	@ (8002d90 <MadgwickAHRSupdate+0xeec>)
 8002c1e:	edd3 7a00 	vldr	s15, [r3]
 8002c22:	eef1 6a67 	vneg.f32	s13, s15
 8002c26:	4b64      	ldr	r3, [pc, #400]	@ (8002db8 <MadgwickAHRSupdate+0xf14>)
 8002c28:	edd3 7a00 	vldr	s15, [r3]
 8002c2c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002c30:	4b5a      	ldr	r3, [pc, #360]	@ (8002d9c <MadgwickAHRSupdate+0xef8>)
 8002c32:	ed93 6a00 	vldr	s12, [r3]
 8002c36:	4b62      	ldr	r3, [pc, #392]	@ (8002dc0 <MadgwickAHRSupdate+0xf1c>)
 8002c38:	edd3 7a00 	vldr	s15, [r3]
 8002c3c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002c40:	ee76 6aa7 	vadd.f32	s13, s13, s15
						* (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my)
 8002c44:	4b58      	ldr	r3, [pc, #352]	@ (8002da8 <MadgwickAHRSupdate+0xf04>)
 8002c46:	ed93 6a00 	vldr	s12, [r3]
 8002c4a:	4b58      	ldr	r3, [pc, #352]	@ (8002dac <MadgwickAHRSupdate+0xf08>)
 8002c4c:	edd3 7a00 	vldr	s15, [r3]
 8002c50:	ee36 6a67 	vsub.f32	s12, s12, s15
 8002c54:	4b4e      	ldr	r3, [pc, #312]	@ (8002d90 <MadgwickAHRSupdate+0xeec>)
 8002c56:	edd3 7a00 	vldr	s15, [r3]
 8002c5a:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002c5e:	4b54      	ldr	r3, [pc, #336]	@ (8002db0 <MadgwickAHRSupdate+0xf0c>)
 8002c60:	edd3 5a00 	vldr	s11, [r3]
 8002c64:	4b53      	ldr	r3, [pc, #332]	@ (8002db4 <MadgwickAHRSupdate+0xf10>)
 8002c66:	edd3 7a00 	vldr	s15, [r3]
 8002c6a:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8002c6e:	4b4b      	ldr	r3, [pc, #300]	@ (8002d9c <MadgwickAHRSupdate+0xef8>)
 8002c70:	edd3 7a00 	vldr	s15, [r3]
 8002c74:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8002c78:	ee36 6a27 	vadd.f32	s12, s12, s15
 8002c7c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002c80:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002c84:	ee66 7aa7 	vmul.f32	s15, s13, s15
				+ (-_2bx * q0 + _2bz * q2)
 8002c88:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ _2bx * q1
 8002c8c:	4b40      	ldr	r3, [pc, #256]	@ (8002d90 <MadgwickAHRSupdate+0xeec>)
 8002c8e:	edd3 6a00 	vldr	s13, [r3]
 8002c92:	4b43      	ldr	r3, [pc, #268]	@ (8002da0 <MadgwickAHRSupdate+0xefc>)
 8002c94:	edd3 7a00 	vldr	s15, [r3]
 8002c98:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2)
 8002c9c:	4b3e      	ldr	r3, [pc, #248]	@ (8002d98 <MadgwickAHRSupdate+0xef4>)
 8002c9e:	ed93 6a00 	vldr	s12, [r3]
 8002ca2:	4b3c      	ldr	r3, [pc, #240]	@ (8002d94 <MadgwickAHRSupdate+0xef0>)
 8002ca4:	edd3 7a00 	vldr	s15, [r3]
 8002ca8:	ee36 6a27 	vadd.f32	s12, s12, s15
 8002cac:	4b38      	ldr	r3, [pc, #224]	@ (8002d90 <MadgwickAHRSupdate+0xeec>)
 8002cae:	edd3 7a00 	vldr	s15, [r3]
 8002cb2:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002cb6:	4b43      	ldr	r3, [pc, #268]	@ (8002dc4 <MadgwickAHRSupdate+0xf20>)
 8002cb8:	edd3 7a00 	vldr	s15, [r3]
 8002cbc:	eef6 5a00 	vmov.f32	s11, #96	@ 0x3f000000  0.5
 8002cc0:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8002cc4:	4b40      	ldr	r3, [pc, #256]	@ (8002dc8 <MadgwickAHRSupdate+0xf24>)
 8002cc6:	edd3 7a00 	vldr	s15, [r3]
 8002cca:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8002cce:	4b33      	ldr	r3, [pc, #204]	@ (8002d9c <MadgwickAHRSupdate+0xef8>)
 8002cd0:	edd3 7a00 	vldr	s15, [r3]
 8002cd4:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8002cd8:	ee36 6a27 	vadd.f32	s12, s12, s15
								- mz);
 8002cdc:	edd7 7a01 	vldr	s15, [r7, #4]
 8002ce0:	ee76 7a67 	vsub.f32	s15, s12, s15
						* (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2)
 8002ce4:	ee66 7aa7 	vmul.f32	s15, s13, s15
				+ _2bx * q1
 8002ce8:	ee77 7a27 	vadd.f32	s15, s14, s15
		s3 = _2q1 * (2.0f * q1q3 - _2q0q2 - ax)
 8002cec:	4b3d      	ldr	r3, [pc, #244]	@ (8002de4 <MadgwickAHRSupdate+0xf40>)
 8002cee:	edc3 7a00 	vstr	s15, [r3]
		recipNorm = invSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3); // normalise step magnitude
 8002cf2:	4b3d      	ldr	r3, [pc, #244]	@ (8002de8 <MadgwickAHRSupdate+0xf44>)
 8002cf4:	ed93 7a00 	vldr	s14, [r3]
 8002cf8:	4b3b      	ldr	r3, [pc, #236]	@ (8002de8 <MadgwickAHRSupdate+0xf44>)
 8002cfa:	edd3 7a00 	vldr	s15, [r3]
 8002cfe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002d02:	4b3a      	ldr	r3, [pc, #232]	@ (8002dec <MadgwickAHRSupdate+0xf48>)
 8002d04:	edd3 6a00 	vldr	s13, [r3]
 8002d08:	4b38      	ldr	r3, [pc, #224]	@ (8002dec <MadgwickAHRSupdate+0xf48>)
 8002d0a:	edd3 7a00 	vldr	s15, [r3]
 8002d0e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002d12:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002d16:	4b2d      	ldr	r3, [pc, #180]	@ (8002dcc <MadgwickAHRSupdate+0xf28>)
 8002d18:	edd3 6a00 	vldr	s13, [r3]
 8002d1c:	4b2b      	ldr	r3, [pc, #172]	@ (8002dcc <MadgwickAHRSupdate+0xf28>)
 8002d1e:	edd3 7a00 	vldr	s15, [r3]
 8002d22:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002d26:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002d2a:	4b2e      	ldr	r3, [pc, #184]	@ (8002de4 <MadgwickAHRSupdate+0xf40>)
 8002d2c:	edd3 6a00 	vldr	s13, [r3]
 8002d30:	4b2c      	ldr	r3, [pc, #176]	@ (8002de4 <MadgwickAHRSupdate+0xf40>)
 8002d32:	edd3 7a00 	vldr	s15, [r3]
 8002d36:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002d3a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d3e:	eeb0 0a67 	vmov.f32	s0, s15
 8002d42:	f7ff f805 	bl	8001d50 <invSqrt>
 8002d46:	eef0 7a40 	vmov.f32	s15, s0
 8002d4a:	4b29      	ldr	r3, [pc, #164]	@ (8002df0 <MadgwickAHRSupdate+0xf4c>)
 8002d4c:	edc3 7a00 	vstr	s15, [r3]
		s0 *= recipNorm;
 8002d50:	4b25      	ldr	r3, [pc, #148]	@ (8002de8 <MadgwickAHRSupdate+0xf44>)
 8002d52:	ed93 7a00 	vldr	s14, [r3]
 8002d56:	4b26      	ldr	r3, [pc, #152]	@ (8002df0 <MadgwickAHRSupdate+0xf4c>)
 8002d58:	edd3 7a00 	vldr	s15, [r3]
 8002d5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d60:	4b21      	ldr	r3, [pc, #132]	@ (8002de8 <MadgwickAHRSupdate+0xf44>)
 8002d62:	edc3 7a00 	vstr	s15, [r3]
		s1 *= recipNorm;
 8002d66:	4b21      	ldr	r3, [pc, #132]	@ (8002dec <MadgwickAHRSupdate+0xf48>)
 8002d68:	ed93 7a00 	vldr	s14, [r3]
 8002d6c:	4b20      	ldr	r3, [pc, #128]	@ (8002df0 <MadgwickAHRSupdate+0xf4c>)
 8002d6e:	edd3 7a00 	vldr	s15, [r3]
 8002d72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d76:	4b1d      	ldr	r3, [pc, #116]	@ (8002dec <MadgwickAHRSupdate+0xf48>)
 8002d78:	edc3 7a00 	vstr	s15, [r3]
		s2 *= recipNorm;
 8002d7c:	4b13      	ldr	r3, [pc, #76]	@ (8002dcc <MadgwickAHRSupdate+0xf28>)
 8002d7e:	ed93 7a00 	vldr	s14, [r3]
 8002d82:	4b1b      	ldr	r3, [pc, #108]	@ (8002df0 <MadgwickAHRSupdate+0xf4c>)
 8002d84:	edd3 7a00 	vldr	s15, [r3]
 8002d88:	e034      	b.n	8002df4 <MadgwickAHRSupdate+0xf50>
 8002d8a:	bf00      	nop
 8002d8c:	20000438 	.word	0x20000438
 8002d90:	200003ec 	.word	0x200003ec
 8002d94:	2000042c 	.word	0x2000042c
 8002d98:	2000041c 	.word	0x2000041c
 8002d9c:	200003f0 	.word	0x200003f0
 8002da0:	20000460 	.word	0x20000460
 8002da4:	20000468 	.word	0x20000468
 8002da8:	20000428 	.word	0x20000428
 8002dac:	20000420 	.word	0x20000420
 8002db0:	20000418 	.word	0x20000418
 8002db4:	20000434 	.word	0x20000434
 8002db8:	20000008 	.word	0x20000008
 8002dbc:	200003f8 	.word	0x200003f8
 8002dc0:	20000464 	.word	0x20000464
 8002dc4:	20000424 	.word	0x20000424
 8002dc8:	20000430 	.word	0x20000430
 8002dcc:	200003bc 	.word	0x200003bc
 8002dd0:	2000040c 	.word	0x2000040c
 8002dd4:	20000400 	.word	0x20000400
 8002dd8:	20000410 	.word	0x20000410
 8002ddc:	20000404 	.word	0x20000404
 8002de0:	200003f4 	.word	0x200003f4
 8002de4:	200003c0 	.word	0x200003c0
 8002de8:	200003b4 	.word	0x200003b4
 8002dec:	200003b8 	.word	0x200003b8
 8002df0:	200003b0 	.word	0x200003b0
 8002df4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002df8:	4b76      	ldr	r3, [pc, #472]	@ (8002fd4 <MadgwickAHRSupdate+0x1130>)
 8002dfa:	edc3 7a00 	vstr	s15, [r3]
		s3 *= recipNorm;
 8002dfe:	4b76      	ldr	r3, [pc, #472]	@ (8002fd8 <MadgwickAHRSupdate+0x1134>)
 8002e00:	ed93 7a00 	vldr	s14, [r3]
 8002e04:	4b75      	ldr	r3, [pc, #468]	@ (8002fdc <MadgwickAHRSupdate+0x1138>)
 8002e06:	edd3 7a00 	vldr	s15, [r3]
 8002e0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e0e:	4b72      	ldr	r3, [pc, #456]	@ (8002fd8 <MadgwickAHRSupdate+0x1134>)
 8002e10:	edc3 7a00 	vstr	s15, [r3]

		qDot1 -= beta * s0;
 8002e14:	4b72      	ldr	r3, [pc, #456]	@ (8002fe0 <MadgwickAHRSupdate+0x113c>)
 8002e16:	ed93 7a00 	vldr	s14, [r3]
 8002e1a:	4b72      	ldr	r3, [pc, #456]	@ (8002fe4 <MadgwickAHRSupdate+0x1140>)
 8002e1c:	edd3 7a00 	vldr	s15, [r3]
 8002e20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e24:	4b70      	ldr	r3, [pc, #448]	@ (8002fe8 <MadgwickAHRSupdate+0x1144>)
 8002e26:	ed93 7a00 	vldr	s14, [r3]
 8002e2a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e2e:	4b6e      	ldr	r3, [pc, #440]	@ (8002fe8 <MadgwickAHRSupdate+0x1144>)
 8002e30:	edc3 7a00 	vstr	s15, [r3]
		qDot2 -= beta * s1;
 8002e34:	4b6a      	ldr	r3, [pc, #424]	@ (8002fe0 <MadgwickAHRSupdate+0x113c>)
 8002e36:	ed93 7a00 	vldr	s14, [r3]
 8002e3a:	4b6c      	ldr	r3, [pc, #432]	@ (8002fec <MadgwickAHRSupdate+0x1148>)
 8002e3c:	edd3 7a00 	vldr	s15, [r3]
 8002e40:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e44:	4b6a      	ldr	r3, [pc, #424]	@ (8002ff0 <MadgwickAHRSupdate+0x114c>)
 8002e46:	ed93 7a00 	vldr	s14, [r3]
 8002e4a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e4e:	4b68      	ldr	r3, [pc, #416]	@ (8002ff0 <MadgwickAHRSupdate+0x114c>)
 8002e50:	edc3 7a00 	vstr	s15, [r3]
		qDot3 -= beta * s2;
 8002e54:	4b62      	ldr	r3, [pc, #392]	@ (8002fe0 <MadgwickAHRSupdate+0x113c>)
 8002e56:	ed93 7a00 	vldr	s14, [r3]
 8002e5a:	4b5e      	ldr	r3, [pc, #376]	@ (8002fd4 <MadgwickAHRSupdate+0x1130>)
 8002e5c:	edd3 7a00 	vldr	s15, [r3]
 8002e60:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e64:	4b63      	ldr	r3, [pc, #396]	@ (8002ff4 <MadgwickAHRSupdate+0x1150>)
 8002e66:	ed93 7a00 	vldr	s14, [r3]
 8002e6a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e6e:	4b61      	ldr	r3, [pc, #388]	@ (8002ff4 <MadgwickAHRSupdate+0x1150>)
 8002e70:	edc3 7a00 	vstr	s15, [r3]
		qDot4 -= beta * s3;
 8002e74:	4b5a      	ldr	r3, [pc, #360]	@ (8002fe0 <MadgwickAHRSupdate+0x113c>)
 8002e76:	ed93 7a00 	vldr	s14, [r3]
 8002e7a:	4b57      	ldr	r3, [pc, #348]	@ (8002fd8 <MadgwickAHRSupdate+0x1134>)
 8002e7c:	edd3 7a00 	vldr	s15, [r3]
 8002e80:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e84:	4b5c      	ldr	r3, [pc, #368]	@ (8002ff8 <MadgwickAHRSupdate+0x1154>)
 8002e86:	ed93 7a00 	vldr	s14, [r3]
 8002e8a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e8e:	4b5a      	ldr	r3, [pc, #360]	@ (8002ff8 <MadgwickAHRSupdate+0x1154>)
 8002e90:	edc3 7a00 	vstr	s15, [r3]
	}

	q0 += qDot1 * (deltat);
 8002e94:	4b54      	ldr	r3, [pc, #336]	@ (8002fe8 <MadgwickAHRSupdate+0x1144>)
 8002e96:	ed93 7a00 	vldr	s14, [r3]
 8002e9a:	4b58      	ldr	r3, [pc, #352]	@ (8002ffc <MadgwickAHRSupdate+0x1158>)
 8002e9c:	edd3 7a00 	vldr	s15, [r3]
 8002ea0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002ea4:	4b56      	ldr	r3, [pc, #344]	@ (8003000 <MadgwickAHRSupdate+0x115c>)
 8002ea6:	edd3 7a00 	vldr	s15, [r3]
 8002eaa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002eae:	4b54      	ldr	r3, [pc, #336]	@ (8003000 <MadgwickAHRSupdate+0x115c>)
 8002eb0:	edc3 7a00 	vstr	s15, [r3]
	q1 += qDot2 * (deltat);
 8002eb4:	4b4e      	ldr	r3, [pc, #312]	@ (8002ff0 <MadgwickAHRSupdate+0x114c>)
 8002eb6:	ed93 7a00 	vldr	s14, [r3]
 8002eba:	4b50      	ldr	r3, [pc, #320]	@ (8002ffc <MadgwickAHRSupdate+0x1158>)
 8002ebc:	edd3 7a00 	vldr	s15, [r3]
 8002ec0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002ec4:	4b4f      	ldr	r3, [pc, #316]	@ (8003004 <MadgwickAHRSupdate+0x1160>)
 8002ec6:	edd3 7a00 	vldr	s15, [r3]
 8002eca:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ece:	4b4d      	ldr	r3, [pc, #308]	@ (8003004 <MadgwickAHRSupdate+0x1160>)
 8002ed0:	edc3 7a00 	vstr	s15, [r3]
	q2 += qDot3 * (deltat);
 8002ed4:	4b47      	ldr	r3, [pc, #284]	@ (8002ff4 <MadgwickAHRSupdate+0x1150>)
 8002ed6:	ed93 7a00 	vldr	s14, [r3]
 8002eda:	4b48      	ldr	r3, [pc, #288]	@ (8002ffc <MadgwickAHRSupdate+0x1158>)
 8002edc:	edd3 7a00 	vldr	s15, [r3]
 8002ee0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002ee4:	4b48      	ldr	r3, [pc, #288]	@ (8003008 <MadgwickAHRSupdate+0x1164>)
 8002ee6:	edd3 7a00 	vldr	s15, [r3]
 8002eea:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002eee:	4b46      	ldr	r3, [pc, #280]	@ (8003008 <MadgwickAHRSupdate+0x1164>)
 8002ef0:	edc3 7a00 	vstr	s15, [r3]
	q3 += qDot4 * (deltat);
 8002ef4:	4b40      	ldr	r3, [pc, #256]	@ (8002ff8 <MadgwickAHRSupdate+0x1154>)
 8002ef6:	ed93 7a00 	vldr	s14, [r3]
 8002efa:	4b40      	ldr	r3, [pc, #256]	@ (8002ffc <MadgwickAHRSupdate+0x1158>)
 8002efc:	edd3 7a00 	vldr	s15, [r3]
 8002f00:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002f04:	4b41      	ldr	r3, [pc, #260]	@ (800300c <MadgwickAHRSupdate+0x1168>)
 8002f06:	edd3 7a00 	vldr	s15, [r3]
 8002f0a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f0e:	4b3f      	ldr	r3, [pc, #252]	@ (800300c <MadgwickAHRSupdate+0x1168>)
 8002f10:	edc3 7a00 	vstr	s15, [r3]

	recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 8002f14:	4b3a      	ldr	r3, [pc, #232]	@ (8003000 <MadgwickAHRSupdate+0x115c>)
 8002f16:	ed93 7a00 	vldr	s14, [r3]
 8002f1a:	4b39      	ldr	r3, [pc, #228]	@ (8003000 <MadgwickAHRSupdate+0x115c>)
 8002f1c:	edd3 7a00 	vldr	s15, [r3]
 8002f20:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002f24:	4b37      	ldr	r3, [pc, #220]	@ (8003004 <MadgwickAHRSupdate+0x1160>)
 8002f26:	edd3 6a00 	vldr	s13, [r3]
 8002f2a:	4b36      	ldr	r3, [pc, #216]	@ (8003004 <MadgwickAHRSupdate+0x1160>)
 8002f2c:	edd3 7a00 	vldr	s15, [r3]
 8002f30:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f34:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002f38:	4b33      	ldr	r3, [pc, #204]	@ (8003008 <MadgwickAHRSupdate+0x1164>)
 8002f3a:	edd3 6a00 	vldr	s13, [r3]
 8002f3e:	4b32      	ldr	r3, [pc, #200]	@ (8003008 <MadgwickAHRSupdate+0x1164>)
 8002f40:	edd3 7a00 	vldr	s15, [r3]
 8002f44:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f48:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002f4c:	4b2f      	ldr	r3, [pc, #188]	@ (800300c <MadgwickAHRSupdate+0x1168>)
 8002f4e:	edd3 6a00 	vldr	s13, [r3]
 8002f52:	4b2e      	ldr	r3, [pc, #184]	@ (800300c <MadgwickAHRSupdate+0x1168>)
 8002f54:	edd3 7a00 	vldr	s15, [r3]
 8002f58:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f5c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f60:	eeb0 0a67 	vmov.f32	s0, s15
 8002f64:	f7fe fef4 	bl	8001d50 <invSqrt>
 8002f68:	eef0 7a40 	vmov.f32	s15, s0
 8002f6c:	4b1b      	ldr	r3, [pc, #108]	@ (8002fdc <MadgwickAHRSupdate+0x1138>)
 8002f6e:	edc3 7a00 	vstr	s15, [r3]
	q0 *= recipNorm;
 8002f72:	4b23      	ldr	r3, [pc, #140]	@ (8003000 <MadgwickAHRSupdate+0x115c>)
 8002f74:	ed93 7a00 	vldr	s14, [r3]
 8002f78:	4b18      	ldr	r3, [pc, #96]	@ (8002fdc <MadgwickAHRSupdate+0x1138>)
 8002f7a:	edd3 7a00 	vldr	s15, [r3]
 8002f7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f82:	4b1f      	ldr	r3, [pc, #124]	@ (8003000 <MadgwickAHRSupdate+0x115c>)
 8002f84:	edc3 7a00 	vstr	s15, [r3]
	q1 *= recipNorm;
 8002f88:	4b1e      	ldr	r3, [pc, #120]	@ (8003004 <MadgwickAHRSupdate+0x1160>)
 8002f8a:	ed93 7a00 	vldr	s14, [r3]
 8002f8e:	4b13      	ldr	r3, [pc, #76]	@ (8002fdc <MadgwickAHRSupdate+0x1138>)
 8002f90:	edd3 7a00 	vldr	s15, [r3]
 8002f94:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f98:	4b1a      	ldr	r3, [pc, #104]	@ (8003004 <MadgwickAHRSupdate+0x1160>)
 8002f9a:	edc3 7a00 	vstr	s15, [r3]
	q2 *= recipNorm;
 8002f9e:	4b1a      	ldr	r3, [pc, #104]	@ (8003008 <MadgwickAHRSupdate+0x1164>)
 8002fa0:	ed93 7a00 	vldr	s14, [r3]
 8002fa4:	4b0d      	ldr	r3, [pc, #52]	@ (8002fdc <MadgwickAHRSupdate+0x1138>)
 8002fa6:	edd3 7a00 	vldr	s15, [r3]
 8002faa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fae:	4b16      	ldr	r3, [pc, #88]	@ (8003008 <MadgwickAHRSupdate+0x1164>)
 8002fb0:	edc3 7a00 	vstr	s15, [r3]
	q3 *= recipNorm;
 8002fb4:	4b15      	ldr	r3, [pc, #84]	@ (800300c <MadgwickAHRSupdate+0x1168>)
 8002fb6:	ed93 7a00 	vldr	s14, [r3]
 8002fba:	4b08      	ldr	r3, [pc, #32]	@ (8002fdc <MadgwickAHRSupdate+0x1138>)
 8002fbc:	edd3 7a00 	vldr	s15, [r3]
 8002fc0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fc4:	4b11      	ldr	r3, [pc, #68]	@ (800300c <MadgwickAHRSupdate+0x1168>)
 8002fc6:	edc3 7a00 	vstr	s15, [r3]
}
 8002fca:	bf00      	nop
 8002fcc:	3728      	adds	r7, #40	@ 0x28
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}
 8002fd2:	bf00      	nop
 8002fd4:	200003bc 	.word	0x200003bc
 8002fd8:	200003c0 	.word	0x200003c0
 8002fdc:	200003b0 	.word	0x200003b0
 8002fe0:	2000000c 	.word	0x2000000c
 8002fe4:	200003b4 	.word	0x200003b4
 8002fe8:	200003c4 	.word	0x200003c4
 8002fec:	200003b8 	.word	0x200003b8
 8002ff0:	200003c8 	.word	0x200003c8
 8002ff4:	200003cc 	.word	0x200003cc
 8002ff8:	200003d0 	.word	0x200003d0
 8002ffc:	2000046c 	.word	0x2000046c
 8003000:	20000008 	.word	0x20000008
 8003004:	20000460 	.word	0x20000460
 8003008:	20000464 	.word	0x20000464
 800300c:	20000468 	.word	0x20000468

08003010 <LSM9DS1_ReadGyro_DMA>:
//		magX = magY = magZ = 0;
//	}
//}

//low_power_code
void LSM9DS1_ReadGyro_DMA(void) {
 8003010:	b580      	push	{r7, lr}
 8003012:	b082      	sub	sp, #8
 8003014:	af02      	add	r7, sp, #8
	HAL_I2C_Mem_Read_DMA(&hi2c1, LSM9DS1_ADDR, OUT_X_G | 0x80,
 8003016:	2306      	movs	r3, #6
 8003018:	9301      	str	r3, [sp, #4]
 800301a:	4b05      	ldr	r3, [pc, #20]	@ (8003030 <LSM9DS1_ReadGyro_DMA+0x20>)
 800301c:	9300      	str	r3, [sp, #0]
 800301e:	2301      	movs	r3, #1
 8003020:	2298      	movs	r2, #152	@ 0x98
 8003022:	21d4      	movs	r1, #212	@ 0xd4
 8003024:	4803      	ldr	r0, [pc, #12]	@ (8003034 <LSM9DS1_ReadGyro_DMA+0x24>)
 8003026:	f002 f8d1 	bl	80051cc <HAL_I2C_Mem_Read_DMA>
	I2C_MEMADD_SIZE_8BIT, gyro_buffer, 6);
}
 800302a:	bf00      	nop
 800302c:	46bd      	mov	sp, r7
 800302e:	bd80      	pop	{r7, pc}
 8003030:	20000330 	.word	0x20000330
 8003034:	200001d0 	.word	0x200001d0

08003038 <LSM9DS1_ReadAccel_DMA>:

void LSM9DS1_ReadAccel_DMA(void) {
 8003038:	b580      	push	{r7, lr}
 800303a:	b082      	sub	sp, #8
 800303c:	af02      	add	r7, sp, #8
	HAL_I2C_Mem_Read_DMA(&hi2c1, LSM9DS1_ADDR, OUT_X_XL | 0x80,
 800303e:	2306      	movs	r3, #6
 8003040:	9301      	str	r3, [sp, #4]
 8003042:	4b05      	ldr	r3, [pc, #20]	@ (8003058 <LSM9DS1_ReadAccel_DMA+0x20>)
 8003044:	9300      	str	r3, [sp, #0]
 8003046:	2301      	movs	r3, #1
 8003048:	22a8      	movs	r2, #168	@ 0xa8
 800304a:	21d4      	movs	r1, #212	@ 0xd4
 800304c:	4803      	ldr	r0, [pc, #12]	@ (800305c <LSM9DS1_ReadAccel_DMA+0x24>)
 800304e:	f002 f8bd 	bl	80051cc <HAL_I2C_Mem_Read_DMA>
	I2C_MEMADD_SIZE_8BIT, accel_buffer, 6);
}
 8003052:	bf00      	nop
 8003054:	46bd      	mov	sp, r7
 8003056:	bd80      	pop	{r7, pc}
 8003058:	20000338 	.word	0x20000338
 800305c:	200001d0 	.word	0x200001d0

08003060 <LSM9DS1_ReadMag_DMA>:

void LSM9DS1_ReadMag_DMA(void) {
 8003060:	b580      	push	{r7, lr}
 8003062:	b082      	sub	sp, #8
 8003064:	af02      	add	r7, sp, #8
	HAL_I2C_Mem_Read_DMA(&hi2c1, MAG_ADDR, OUT_X_M | 0x80, I2C_MEMADD_SIZE_8BIT,
 8003066:	2306      	movs	r3, #6
 8003068:	9301      	str	r3, [sp, #4]
 800306a:	4b05      	ldr	r3, [pc, #20]	@ (8003080 <LSM9DS1_ReadMag_DMA+0x20>)
 800306c:	9300      	str	r3, [sp, #0]
 800306e:	2301      	movs	r3, #1
 8003070:	22a8      	movs	r2, #168	@ 0xa8
 8003072:	213c      	movs	r1, #60	@ 0x3c
 8003074:	4803      	ldr	r0, [pc, #12]	@ (8003084 <LSM9DS1_ReadMag_DMA+0x24>)
 8003076:	f002 f8a9 	bl	80051cc <HAL_I2C_Mem_Read_DMA>
			mag_buffer, 6);
}
 800307a:	bf00      	nop
 800307c:	46bd      	mov	sp, r7
 800307e:	bd80      	pop	{r7, pc}
 8003080:	20000340 	.word	0x20000340
 8003084:	200001d0 	.word	0x200001d0

08003088 <HAL_I2C_MemRxCpltCallback>:

void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c) {
 8003088:	b580      	push	{r7, lr}
 800308a:	b086      	sub	sp, #24
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]

	DAM_Callback_cnt++;
 8003090:	4b79      	ldr	r3, [pc, #484]	@ (8003278 <HAL_I2C_MemRxCpltCallback+0x1f0>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	3301      	adds	r3, #1
 8003096:	4a78      	ldr	r2, [pc, #480]	@ (8003278 <HAL_I2C_MemRxCpltCallback+0x1f0>)
 8003098:	6013      	str	r3, [r2, #0]

	if (hi2c->Instance == I2C1) {
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4a77      	ldr	r2, [pc, #476]	@ (800327c <HAL_I2C_MemRxCpltCallback+0x1f4>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	f040 8343 	bne.w	800372c <HAL_I2C_MemRxCpltCallback+0x6a4>
		if (CurrentSensor == GYRO_SENSOR) {
 80030a6:	4b76      	ldr	r3, [pc, #472]	@ (8003280 <HAL_I2C_MemRxCpltCallback+0x1f8>)
 80030a8:	781b      	ldrb	r3, [r3, #0]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	f040 8116 	bne.w	80032dc <HAL_I2C_MemRxCpltCallback+0x254>
			gyroX = (int16_t) ((gyro_buffer[1] << 8) | gyro_buffer[0]);
 80030b0:	4b74      	ldr	r3, [pc, #464]	@ (8003284 <HAL_I2C_MemRxCpltCallback+0x1fc>)
 80030b2:	785b      	ldrb	r3, [r3, #1]
 80030b4:	021b      	lsls	r3, r3, #8
 80030b6:	b21a      	sxth	r2, r3
 80030b8:	4b72      	ldr	r3, [pc, #456]	@ (8003284 <HAL_I2C_MemRxCpltCallback+0x1fc>)
 80030ba:	781b      	ldrb	r3, [r3, #0]
 80030bc:	b21b      	sxth	r3, r3
 80030be:	4313      	orrs	r3, r2
 80030c0:	b21a      	sxth	r2, r3
 80030c2:	4b71      	ldr	r3, [pc, #452]	@ (8003288 <HAL_I2C_MemRxCpltCallback+0x200>)
 80030c4:	801a      	strh	r2, [r3, #0]
			gyroY = (int16_t) ((gyro_buffer[3] << 8) | gyro_buffer[2]);
 80030c6:	4b6f      	ldr	r3, [pc, #444]	@ (8003284 <HAL_I2C_MemRxCpltCallback+0x1fc>)
 80030c8:	78db      	ldrb	r3, [r3, #3]
 80030ca:	021b      	lsls	r3, r3, #8
 80030cc:	b21a      	sxth	r2, r3
 80030ce:	4b6d      	ldr	r3, [pc, #436]	@ (8003284 <HAL_I2C_MemRxCpltCallback+0x1fc>)
 80030d0:	789b      	ldrb	r3, [r3, #2]
 80030d2:	b21b      	sxth	r3, r3
 80030d4:	4313      	orrs	r3, r2
 80030d6:	b21a      	sxth	r2, r3
 80030d8:	4b6c      	ldr	r3, [pc, #432]	@ (800328c <HAL_I2C_MemRxCpltCallback+0x204>)
 80030da:	801a      	strh	r2, [r3, #0]
			gyroZ = (int16_t) ((gyro_buffer[5] << 8) | gyro_buffer[4]);
 80030dc:	4b69      	ldr	r3, [pc, #420]	@ (8003284 <HAL_I2C_MemRxCpltCallback+0x1fc>)
 80030de:	795b      	ldrb	r3, [r3, #5]
 80030e0:	021b      	lsls	r3, r3, #8
 80030e2:	b21a      	sxth	r2, r3
 80030e4:	4b67      	ldr	r3, [pc, #412]	@ (8003284 <HAL_I2C_MemRxCpltCallback+0x1fc>)
 80030e6:	791b      	ldrb	r3, [r3, #4]
 80030e8:	b21b      	sxth	r3, r3
 80030ea:	4313      	orrs	r3, r2
 80030ec:	b21a      	sxth	r2, r3
 80030ee:	4b68      	ldr	r3, [pc, #416]	@ (8003290 <HAL_I2C_MemRxCpltCallback+0x208>)
 80030f0:	801a      	strh	r2, [r3, #0]

			gyroX_current = gyroX * GYRO_SENSITIVITY_245DPS / 1000.0f;
 80030f2:	4b65      	ldr	r3, [pc, #404]	@ (8003288 <HAL_I2C_MemRxCpltCallback+0x200>)
 80030f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80030f8:	ee07 3a90 	vmov	s15, r3
 80030fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003100:	ed9f 7a64 	vldr	s14, [pc, #400]	@ 8003294 <HAL_I2C_MemRxCpltCallback+0x20c>
 8003104:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003108:	eddf 6a63 	vldr	s13, [pc, #396]	@ 8003298 <HAL_I2C_MemRxCpltCallback+0x210>
 800310c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003110:	4b62      	ldr	r3, [pc, #392]	@ (800329c <HAL_I2C_MemRxCpltCallback+0x214>)
 8003112:	edc3 7a00 	vstr	s15, [r3]
			gyroY_current = gyroY * GYRO_SENSITIVITY_245DPS / 1000.0f;
 8003116:	4b5d      	ldr	r3, [pc, #372]	@ (800328c <HAL_I2C_MemRxCpltCallback+0x204>)
 8003118:	f9b3 3000 	ldrsh.w	r3, [r3]
 800311c:	ee07 3a90 	vmov	s15, r3
 8003120:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003124:	ed9f 7a5b 	vldr	s14, [pc, #364]	@ 8003294 <HAL_I2C_MemRxCpltCallback+0x20c>
 8003128:	ee27 7a87 	vmul.f32	s14, s15, s14
 800312c:	eddf 6a5a 	vldr	s13, [pc, #360]	@ 8003298 <HAL_I2C_MemRxCpltCallback+0x210>
 8003130:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003134:	4b5a      	ldr	r3, [pc, #360]	@ (80032a0 <HAL_I2C_MemRxCpltCallback+0x218>)
 8003136:	edc3 7a00 	vstr	s15, [r3]
			gyroZ_current = gyroZ * GYRO_SENSITIVITY_245DPS / 1000.0f - 4.6;
 800313a:	4b55      	ldr	r3, [pc, #340]	@ (8003290 <HAL_I2C_MemRxCpltCallback+0x208>)
 800313c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003140:	ee07 3a90 	vmov	s15, r3
 8003144:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003148:	ed9f 7a52 	vldr	s14, [pc, #328]	@ 8003294 <HAL_I2C_MemRxCpltCallback+0x20c>
 800314c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003150:	ed9f 7a51 	vldr	s14, [pc, #324]	@ 8003298 <HAL_I2C_MemRxCpltCallback+0x210>
 8003154:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003158:	ee16 0a90 	vmov	r0, s13
 800315c:	f7fd f97c 	bl	8000458 <__aeabi_f2d>
 8003160:	a343      	add	r3, pc, #268	@ (adr r3, 8003270 <HAL_I2C_MemRxCpltCallback+0x1e8>)
 8003162:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003166:	f7fd f817 	bl	8000198 <__aeabi_dsub>
 800316a:	4602      	mov	r2, r0
 800316c:	460b      	mov	r3, r1
 800316e:	4610      	mov	r0, r2
 8003170:	4619      	mov	r1, r3
 8003172:	f7fd fc79 	bl	8000a68 <__aeabi_d2f>
 8003176:	4603      	mov	r3, r0
 8003178:	4a4a      	ldr	r2, [pc, #296]	@ (80032a4 <HAL_I2C_MemRxCpltCallback+0x21c>)
 800317a:	6013      	str	r3, [r2, #0]

			if (DAM_Callback_cnt < 1000) {
 800317c:	4b3e      	ldr	r3, [pc, #248]	@ (8003278 <HAL_I2C_MemRxCpltCallback+0x1f0>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003184:	da21      	bge.n	80031ca <HAL_I2C_MemRxCpltCallback+0x142>
				gyroX_sum += gyroX_current;
 8003186:	4b48      	ldr	r3, [pc, #288]	@ (80032a8 <HAL_I2C_MemRxCpltCallback+0x220>)
 8003188:	ed93 7a00 	vldr	s14, [r3]
 800318c:	4b43      	ldr	r3, [pc, #268]	@ (800329c <HAL_I2C_MemRxCpltCallback+0x214>)
 800318e:	edd3 7a00 	vldr	s15, [r3]
 8003192:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003196:	4b44      	ldr	r3, [pc, #272]	@ (80032a8 <HAL_I2C_MemRxCpltCallback+0x220>)
 8003198:	edc3 7a00 	vstr	s15, [r3]
				gyroY_sum += gyroY_current;
 800319c:	4b43      	ldr	r3, [pc, #268]	@ (80032ac <HAL_I2C_MemRxCpltCallback+0x224>)
 800319e:	ed93 7a00 	vldr	s14, [r3]
 80031a2:	4b3f      	ldr	r3, [pc, #252]	@ (80032a0 <HAL_I2C_MemRxCpltCallback+0x218>)
 80031a4:	edd3 7a00 	vldr	s15, [r3]
 80031a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031ac:	4b3f      	ldr	r3, [pc, #252]	@ (80032ac <HAL_I2C_MemRxCpltCallback+0x224>)
 80031ae:	edc3 7a00 	vstr	s15, [r3]
				gyroZ_sum += gyroZ_current;
 80031b2:	4b3f      	ldr	r3, [pc, #252]	@ (80032b0 <HAL_I2C_MemRxCpltCallback+0x228>)
 80031b4:	ed93 7a00 	vldr	s14, [r3]
 80031b8:	4b3a      	ldr	r3, [pc, #232]	@ (80032a4 <HAL_I2C_MemRxCpltCallback+0x21c>)
 80031ba:	edd3 7a00 	vldr	s15, [r3]
 80031be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031c2:	4b3b      	ldr	r3, [pc, #236]	@ (80032b0 <HAL_I2C_MemRxCpltCallback+0x228>)
 80031c4:	edc3 7a00 	vstr	s15, [r3]
			UTIL_SEQ_SetTask(1 << CFG_TASK_MY_TASK_BLE, CFG_SCH_PRIO_0);

			CurrentSensor = GYRO_SENSOR;
		}
	}
}
 80031c8:	e2b0      	b.n	800372c <HAL_I2C_MemRxCpltCallback+0x6a4>
				gyroX_avg = gyroX_sum / 1000.0f;
 80031ca:	4b37      	ldr	r3, [pc, #220]	@ (80032a8 <HAL_I2C_MemRxCpltCallback+0x220>)
 80031cc:	ed93 7a00 	vldr	s14, [r3]
 80031d0:	eddf 6a31 	vldr	s13, [pc, #196]	@ 8003298 <HAL_I2C_MemRxCpltCallback+0x210>
 80031d4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80031d8:	4b36      	ldr	r3, [pc, #216]	@ (80032b4 <HAL_I2C_MemRxCpltCallback+0x22c>)
 80031da:	edc3 7a00 	vstr	s15, [r3]
				gyroY_avg = gyroY_sum / 1000.0f;
 80031de:	4b33      	ldr	r3, [pc, #204]	@ (80032ac <HAL_I2C_MemRxCpltCallback+0x224>)
 80031e0:	ed93 7a00 	vldr	s14, [r3]
 80031e4:	eddf 6a2c 	vldr	s13, [pc, #176]	@ 8003298 <HAL_I2C_MemRxCpltCallback+0x210>
 80031e8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80031ec:	4b32      	ldr	r3, [pc, #200]	@ (80032b8 <HAL_I2C_MemRxCpltCallback+0x230>)
 80031ee:	edc3 7a00 	vstr	s15, [r3]
				gyroZ_avg = gyroZ_sum / 1000.0f;
 80031f2:	4b2f      	ldr	r3, [pc, #188]	@ (80032b0 <HAL_I2C_MemRxCpltCallback+0x228>)
 80031f4:	ed93 7a00 	vldr	s14, [r3]
 80031f8:	eddf 6a27 	vldr	s13, [pc, #156]	@ 8003298 <HAL_I2C_MemRxCpltCallback+0x210>
 80031fc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003200:	4b2e      	ldr	r3, [pc, #184]	@ (80032bc <HAL_I2C_MemRxCpltCallback+0x234>)
 8003202:	edc3 7a00 	vstr	s15, [r3]
				gyro_x = gyroX_current - gyroX_avg;
 8003206:	4b25      	ldr	r3, [pc, #148]	@ (800329c <HAL_I2C_MemRxCpltCallback+0x214>)
 8003208:	ed93 7a00 	vldr	s14, [r3]
 800320c:	4b29      	ldr	r3, [pc, #164]	@ (80032b4 <HAL_I2C_MemRxCpltCallback+0x22c>)
 800320e:	edd3 7a00 	vldr	s15, [r3]
 8003212:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003216:	4b2a      	ldr	r3, [pc, #168]	@ (80032c0 <HAL_I2C_MemRxCpltCallback+0x238>)
 8003218:	edc3 7a00 	vstr	s15, [r3]
				gyro_y = gyroY_current - gyroY_avg;
 800321c:	4b20      	ldr	r3, [pc, #128]	@ (80032a0 <HAL_I2C_MemRxCpltCallback+0x218>)
 800321e:	ed93 7a00 	vldr	s14, [r3]
 8003222:	4b25      	ldr	r3, [pc, #148]	@ (80032b8 <HAL_I2C_MemRxCpltCallback+0x230>)
 8003224:	edd3 7a00 	vldr	s15, [r3]
 8003228:	ee77 7a67 	vsub.f32	s15, s14, s15
 800322c:	4b25      	ldr	r3, [pc, #148]	@ (80032c4 <HAL_I2C_MemRxCpltCallback+0x23c>)
 800322e:	edc3 7a00 	vstr	s15, [r3]
				gyro_z = gyroZ_current - gyroZ_avg;
 8003232:	4b1c      	ldr	r3, [pc, #112]	@ (80032a4 <HAL_I2C_MemRxCpltCallback+0x21c>)
 8003234:	ed93 7a00 	vldr	s14, [r3]
 8003238:	4b20      	ldr	r3, [pc, #128]	@ (80032bc <HAL_I2C_MemRxCpltCallback+0x234>)
 800323a:	edd3 7a00 	vldr	s15, [r3]
 800323e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003242:	4b21      	ldr	r3, [pc, #132]	@ (80032c8 <HAL_I2C_MemRxCpltCallback+0x240>)
 8003244:	edc3 7a00 	vstr	s15, [r3]
				gxyz[0] = gx1;
 8003248:	4b20      	ldr	r3, [pc, #128]	@ (80032cc <HAL_I2C_MemRxCpltCallback+0x244>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a20      	ldr	r2, [pc, #128]	@ (80032d0 <HAL_I2C_MemRxCpltCallback+0x248>)
 800324e:	6013      	str	r3, [r2, #0]
				gxyz[1] = gy1;
 8003250:	4b20      	ldr	r3, [pc, #128]	@ (80032d4 <HAL_I2C_MemRxCpltCallback+0x24c>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a1e      	ldr	r2, [pc, #120]	@ (80032d0 <HAL_I2C_MemRxCpltCallback+0x248>)
 8003256:	6053      	str	r3, [r2, #4]
				gxyz[2] = gz1;
 8003258:	4b1f      	ldr	r3, [pc, #124]	@ (80032d8 <HAL_I2C_MemRxCpltCallback+0x250>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a1c      	ldr	r2, [pc, #112]	@ (80032d0 <HAL_I2C_MemRxCpltCallback+0x248>)
 800325e:	6093      	str	r3, [r2, #8]
				CurrentSensor = ACCEL_SENSOR;
 8003260:	4b07      	ldr	r3, [pc, #28]	@ (8003280 <HAL_I2C_MemRxCpltCallback+0x1f8>)
 8003262:	2201      	movs	r2, #1
 8003264:	701a      	strb	r2, [r3, #0]
				LSM9DS1_ReadAccel_DMA();
 8003266:	f7ff fee7 	bl	8003038 <LSM9DS1_ReadAccel_DMA>
}
 800326a:	e25f      	b.n	800372c <HAL_I2C_MemRxCpltCallback+0x6a4>
 800326c:	f3af 8000 	nop.w
 8003270:	66666666 	.word	0x66666666
 8003274:	40126666 	.word	0x40126666
 8003278:	200003a8 	.word	0x200003a8
 800327c:	40005400 	.word	0x40005400
 8003280:	200003a0 	.word	0x200003a0
 8003284:	20000330 	.word	0x20000330
 8003288:	20000346 	.word	0x20000346
 800328c:	20000348 	.word	0x20000348
 8003290:	2000034a 	.word	0x2000034a
 8003294:	410c0000 	.word	0x410c0000
 8003298:	447a0000 	.word	0x447a0000
 800329c:	20000388 	.word	0x20000388
 80032a0:	2000038c 	.word	0x2000038c
 80032a4:	20000390 	.word	0x20000390
 80032a8:	20000370 	.word	0x20000370
 80032ac:	20000374 	.word	0x20000374
 80032b0:	20000378 	.word	0x20000378
 80032b4:	2000037c 	.word	0x2000037c
 80032b8:	20000380 	.word	0x20000380
 80032bc:	20000384 	.word	0x20000384
 80032c0:	20000364 	.word	0x20000364
 80032c4:	20000368 	.word	0x20000368
 80032c8:	2000036c 	.word	0x2000036c
 80032cc:	2000043c 	.word	0x2000043c
 80032d0:	2000047c 	.word	0x2000047c
 80032d4:	20000440 	.word	0x20000440
 80032d8:	20000444 	.word	0x20000444
		} else if (CurrentSensor == ACCEL_SENSOR) {
 80032dc:	4b5c      	ldr	r3, [pc, #368]	@ (8003450 <HAL_I2C_MemRxCpltCallback+0x3c8>)
 80032de:	781b      	ldrb	r3, [r3, #0]
 80032e0:	2b01      	cmp	r3, #1
 80032e2:	f040 80cd 	bne.w	8003480 <HAL_I2C_MemRxCpltCallback+0x3f8>
			accelX = (int16_t) ((accel_buffer[1] << 8) | accel_buffer[0]);
 80032e6:	4b5b      	ldr	r3, [pc, #364]	@ (8003454 <HAL_I2C_MemRxCpltCallback+0x3cc>)
 80032e8:	785b      	ldrb	r3, [r3, #1]
 80032ea:	021b      	lsls	r3, r3, #8
 80032ec:	b21a      	sxth	r2, r3
 80032ee:	4b59      	ldr	r3, [pc, #356]	@ (8003454 <HAL_I2C_MemRxCpltCallback+0x3cc>)
 80032f0:	781b      	ldrb	r3, [r3, #0]
 80032f2:	b21b      	sxth	r3, r3
 80032f4:	4313      	orrs	r3, r2
 80032f6:	b21a      	sxth	r2, r3
 80032f8:	4b57      	ldr	r3, [pc, #348]	@ (8003458 <HAL_I2C_MemRxCpltCallback+0x3d0>)
 80032fa:	801a      	strh	r2, [r3, #0]
			accelY = (int16_t) ((accel_buffer[3] << 8) | accel_buffer[2]);
 80032fc:	4b55      	ldr	r3, [pc, #340]	@ (8003454 <HAL_I2C_MemRxCpltCallback+0x3cc>)
 80032fe:	78db      	ldrb	r3, [r3, #3]
 8003300:	021b      	lsls	r3, r3, #8
 8003302:	b21a      	sxth	r2, r3
 8003304:	4b53      	ldr	r3, [pc, #332]	@ (8003454 <HAL_I2C_MemRxCpltCallback+0x3cc>)
 8003306:	789b      	ldrb	r3, [r3, #2]
 8003308:	b21b      	sxth	r3, r3
 800330a:	4313      	orrs	r3, r2
 800330c:	b21a      	sxth	r2, r3
 800330e:	4b53      	ldr	r3, [pc, #332]	@ (800345c <HAL_I2C_MemRxCpltCallback+0x3d4>)
 8003310:	801a      	strh	r2, [r3, #0]
			accelZ = (int16_t) ((accel_buffer[5] << 8) | accel_buffer[4]);
 8003312:	4b50      	ldr	r3, [pc, #320]	@ (8003454 <HAL_I2C_MemRxCpltCallback+0x3cc>)
 8003314:	795b      	ldrb	r3, [r3, #5]
 8003316:	021b      	lsls	r3, r3, #8
 8003318:	b21a      	sxth	r2, r3
 800331a:	4b4e      	ldr	r3, [pc, #312]	@ (8003454 <HAL_I2C_MemRxCpltCallback+0x3cc>)
 800331c:	791b      	ldrb	r3, [r3, #4]
 800331e:	b21b      	sxth	r3, r3
 8003320:	4313      	orrs	r3, r2
 8003322:	b21a      	sxth	r2, r3
 8003324:	4b4e      	ldr	r3, [pc, #312]	@ (8003460 <HAL_I2C_MemRxCpltCallback+0x3d8>)
 8003326:	801a      	strh	r2, [r3, #0]
			accel_x = accelX * ACCEL_SENSITIVITY_2G / 100000;
 8003328:	4b4b      	ldr	r3, [pc, #300]	@ (8003458 <HAL_I2C_MemRxCpltCallback+0x3d0>)
 800332a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800332e:	ee07 3a90 	vmov	s15, r3
 8003332:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003336:	ed9f 7a4b 	vldr	s14, [pc, #300]	@ 8003464 <HAL_I2C_MemRxCpltCallback+0x3dc>
 800333a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800333e:	eddf 6a4a 	vldr	s13, [pc, #296]	@ 8003468 <HAL_I2C_MemRxCpltCallback+0x3e0>
 8003342:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003346:	4b49      	ldr	r3, [pc, #292]	@ (800346c <HAL_I2C_MemRxCpltCallback+0x3e4>)
 8003348:	edc3 7a00 	vstr	s15, [r3]
			accel_y = accelY * ACCEL_SENSITIVITY_2G / 100000;
 800334c:	4b43      	ldr	r3, [pc, #268]	@ (800345c <HAL_I2C_MemRxCpltCallback+0x3d4>)
 800334e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003352:	ee07 3a90 	vmov	s15, r3
 8003356:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800335a:	ed9f 7a42 	vldr	s14, [pc, #264]	@ 8003464 <HAL_I2C_MemRxCpltCallback+0x3dc>
 800335e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003362:	eddf 6a41 	vldr	s13, [pc, #260]	@ 8003468 <HAL_I2C_MemRxCpltCallback+0x3e0>
 8003366:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800336a:	4b41      	ldr	r3, [pc, #260]	@ (8003470 <HAL_I2C_MemRxCpltCallback+0x3e8>)
 800336c:	edc3 7a00 	vstr	s15, [r3]
			accel_z = accelZ * ACCEL_SENSITIVITY_2G / 100000;
 8003370:	4b3b      	ldr	r3, [pc, #236]	@ (8003460 <HAL_I2C_MemRxCpltCallback+0x3d8>)
 8003372:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003376:	ee07 3a90 	vmov	s15, r3
 800337a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800337e:	ed9f 7a39 	vldr	s14, [pc, #228]	@ 8003464 <HAL_I2C_MemRxCpltCallback+0x3dc>
 8003382:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003386:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8003468 <HAL_I2C_MemRxCpltCallback+0x3e0>
 800338a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800338e:	4b39      	ldr	r3, [pc, #228]	@ (8003474 <HAL_I2C_MemRxCpltCallback+0x3ec>)
 8003390:	edc3 7a00 	vstr	s15, [r3]
			axyz[0] = accel_x;
 8003394:	4b35      	ldr	r3, [pc, #212]	@ (800346c <HAL_I2C_MemRxCpltCallback+0x3e4>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a37      	ldr	r2, [pc, #220]	@ (8003478 <HAL_I2C_MemRxCpltCallback+0x3f0>)
 800339a:	6013      	str	r3, [r2, #0]
			axyz[1] = accel_y;
 800339c:	4b34      	ldr	r3, [pc, #208]	@ (8003470 <HAL_I2C_MemRxCpltCallback+0x3e8>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a35      	ldr	r2, [pc, #212]	@ (8003478 <HAL_I2C_MemRxCpltCallback+0x3f0>)
 80033a2:	6053      	str	r3, [r2, #4]
			axyz[2] = accel_z;
 80033a4:	4b33      	ldr	r3, [pc, #204]	@ (8003474 <HAL_I2C_MemRxCpltCallback+0x3ec>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a33      	ldr	r2, [pc, #204]	@ (8003478 <HAL_I2C_MemRxCpltCallback+0x3f0>)
 80033aa:	6093      	str	r3, [r2, #8]
			axyz2[0] = axyz[0];
 80033ac:	4b32      	ldr	r3, [pc, #200]	@ (8003478 <HAL_I2C_MemRxCpltCallback+0x3f0>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a32      	ldr	r2, [pc, #200]	@ (800347c <HAL_I2C_MemRxCpltCallback+0x3f4>)
 80033b2:	6013      	str	r3, [r2, #0]
			axyz2[1] = axyz[1];
 80033b4:	4b30      	ldr	r3, [pc, #192]	@ (8003478 <HAL_I2C_MemRxCpltCallback+0x3f0>)
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	4a30      	ldr	r2, [pc, #192]	@ (800347c <HAL_I2C_MemRxCpltCallback+0x3f4>)
 80033ba:	6053      	str	r3, [r2, #4]
			axyz2[2] = axyz[2];
 80033bc:	4b2e      	ldr	r3, [pc, #184]	@ (8003478 <HAL_I2C_MemRxCpltCallback+0x3f0>)
 80033be:	689b      	ldr	r3, [r3, #8]
 80033c0:	4a2e      	ldr	r2, [pc, #184]	@ (800347c <HAL_I2C_MemRxCpltCallback+0x3f4>)
 80033c2:	6093      	str	r3, [r2, #8]
			axyz[0] = axyz[0] * 1 / 9.8;
 80033c4:	4b2c      	ldr	r3, [pc, #176]	@ (8003478 <HAL_I2C_MemRxCpltCallback+0x3f0>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4618      	mov	r0, r3
 80033ca:	f7fd f845 	bl	8000458 <__aeabi_f2d>
 80033ce:	a31e      	add	r3, pc, #120	@ (adr r3, 8003448 <HAL_I2C_MemRxCpltCallback+0x3c0>)
 80033d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033d4:	f7fd f9c2 	bl	800075c <__aeabi_ddiv>
 80033d8:	4602      	mov	r2, r0
 80033da:	460b      	mov	r3, r1
 80033dc:	4610      	mov	r0, r2
 80033de:	4619      	mov	r1, r3
 80033e0:	f7fd fb42 	bl	8000a68 <__aeabi_d2f>
 80033e4:	4603      	mov	r3, r0
 80033e6:	4a24      	ldr	r2, [pc, #144]	@ (8003478 <HAL_I2C_MemRxCpltCallback+0x3f0>)
 80033e8:	6013      	str	r3, [r2, #0]
			axyz[1] = axyz[1] * 1 / 9.8;
 80033ea:	4b23      	ldr	r3, [pc, #140]	@ (8003478 <HAL_I2C_MemRxCpltCallback+0x3f0>)
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	4618      	mov	r0, r3
 80033f0:	f7fd f832 	bl	8000458 <__aeabi_f2d>
 80033f4:	a314      	add	r3, pc, #80	@ (adr r3, 8003448 <HAL_I2C_MemRxCpltCallback+0x3c0>)
 80033f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033fa:	f7fd f9af 	bl	800075c <__aeabi_ddiv>
 80033fe:	4602      	mov	r2, r0
 8003400:	460b      	mov	r3, r1
 8003402:	4610      	mov	r0, r2
 8003404:	4619      	mov	r1, r3
 8003406:	f7fd fb2f 	bl	8000a68 <__aeabi_d2f>
 800340a:	4603      	mov	r3, r0
 800340c:	4a1a      	ldr	r2, [pc, #104]	@ (8003478 <HAL_I2C_MemRxCpltCallback+0x3f0>)
 800340e:	6053      	str	r3, [r2, #4]
			axyz[2] = axyz[2] * 1 / 9.8;
 8003410:	4b19      	ldr	r3, [pc, #100]	@ (8003478 <HAL_I2C_MemRxCpltCallback+0x3f0>)
 8003412:	689b      	ldr	r3, [r3, #8]
 8003414:	4618      	mov	r0, r3
 8003416:	f7fd f81f 	bl	8000458 <__aeabi_f2d>
 800341a:	a30b      	add	r3, pc, #44	@ (adr r3, 8003448 <HAL_I2C_MemRxCpltCallback+0x3c0>)
 800341c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003420:	f7fd f99c 	bl	800075c <__aeabi_ddiv>
 8003424:	4602      	mov	r2, r0
 8003426:	460b      	mov	r3, r1
 8003428:	4610      	mov	r0, r2
 800342a:	4619      	mov	r1, r3
 800342c:	f7fd fb1c 	bl	8000a68 <__aeabi_d2f>
 8003430:	4603      	mov	r3, r0
 8003432:	4a11      	ldr	r2, [pc, #68]	@ (8003478 <HAL_I2C_MemRxCpltCallback+0x3f0>)
 8003434:	6093      	str	r3, [r2, #8]
			vector_normalize(axyz);
 8003436:	4810      	ldr	r0, [pc, #64]	@ (8003478 <HAL_I2C_MemRxCpltCallback+0x3f0>)
 8003438:	f7fe fcf2 	bl	8001e20 <vector_normalize>
			CurrentSensor = MAG_SENSOR;
 800343c:	4b04      	ldr	r3, [pc, #16]	@ (8003450 <HAL_I2C_MemRxCpltCallback+0x3c8>)
 800343e:	2202      	movs	r2, #2
 8003440:	701a      	strb	r2, [r3, #0]
			LSM9DS1_ReadMag_DMA();
 8003442:	f7ff fe0d 	bl	8003060 <LSM9DS1_ReadMag_DMA>
}
 8003446:	e171      	b.n	800372c <HAL_I2C_MemRxCpltCallback+0x6a4>
 8003448:	9999999a 	.word	0x9999999a
 800344c:	40239999 	.word	0x40239999
 8003450:	200003a0 	.word	0x200003a0
 8003454:	20000338 	.word	0x20000338
 8003458:	2000034c 	.word	0x2000034c
 800345c:	2000034e 	.word	0x2000034e
 8003460:	20000350 	.word	0x20000350
 8003464:	42740000 	.word	0x42740000
 8003468:	47c35000 	.word	0x47c35000
 800346c:	20000358 	.word	0x20000358
 8003470:	2000035c 	.word	0x2000035c
 8003474:	20000360 	.word	0x20000360
 8003478:	20000494 	.word	0x20000494
 800347c:	200004b8 	.word	0x200004b8
		} else if (CurrentSensor == MAG_SENSOR) {
 8003480:	4baf      	ldr	r3, [pc, #700]	@ (8003740 <HAL_I2C_MemRxCpltCallback+0x6b8>)
 8003482:	781b      	ldrb	r3, [r3, #0]
 8003484:	2b02      	cmp	r3, #2
 8003486:	f040 8151 	bne.w	800372c <HAL_I2C_MemRxCpltCallback+0x6a4>
			magX = (int16_t) ((mag_buffer[1] << 8) | mag_buffer[0]);
 800348a:	4bae      	ldr	r3, [pc, #696]	@ (8003744 <HAL_I2C_MemRxCpltCallback+0x6bc>)
 800348c:	785b      	ldrb	r3, [r3, #1]
 800348e:	021b      	lsls	r3, r3, #8
 8003490:	b21a      	sxth	r2, r3
 8003492:	4bac      	ldr	r3, [pc, #688]	@ (8003744 <HAL_I2C_MemRxCpltCallback+0x6bc>)
 8003494:	781b      	ldrb	r3, [r3, #0]
 8003496:	b21b      	sxth	r3, r3
 8003498:	4313      	orrs	r3, r2
 800349a:	b21a      	sxth	r2, r3
 800349c:	4baa      	ldr	r3, [pc, #680]	@ (8003748 <HAL_I2C_MemRxCpltCallback+0x6c0>)
 800349e:	801a      	strh	r2, [r3, #0]
			magY = (int16_t) ((mag_buffer[3] << 8) | mag_buffer[2]);
 80034a0:	4ba8      	ldr	r3, [pc, #672]	@ (8003744 <HAL_I2C_MemRxCpltCallback+0x6bc>)
 80034a2:	78db      	ldrb	r3, [r3, #3]
 80034a4:	021b      	lsls	r3, r3, #8
 80034a6:	b21a      	sxth	r2, r3
 80034a8:	4ba6      	ldr	r3, [pc, #664]	@ (8003744 <HAL_I2C_MemRxCpltCallback+0x6bc>)
 80034aa:	789b      	ldrb	r3, [r3, #2]
 80034ac:	b21b      	sxth	r3, r3
 80034ae:	4313      	orrs	r3, r2
 80034b0:	b21a      	sxth	r2, r3
 80034b2:	4ba6      	ldr	r3, [pc, #664]	@ (800374c <HAL_I2C_MemRxCpltCallback+0x6c4>)
 80034b4:	801a      	strh	r2, [r3, #0]
			magZ = (int16_t) ((mag_buffer[5] << 8) | mag_buffer[4]);
 80034b6:	4ba3      	ldr	r3, [pc, #652]	@ (8003744 <HAL_I2C_MemRxCpltCallback+0x6bc>)
 80034b8:	795b      	ldrb	r3, [r3, #5]
 80034ba:	021b      	lsls	r3, r3, #8
 80034bc:	b21a      	sxth	r2, r3
 80034be:	4ba1      	ldr	r3, [pc, #644]	@ (8003744 <HAL_I2C_MemRxCpltCallback+0x6bc>)
 80034c0:	791b      	ldrb	r3, [r3, #4]
 80034c2:	b21b      	sxth	r3, r3
 80034c4:	4313      	orrs	r3, r2
 80034c6:	b21a      	sxth	r2, r3
 80034c8:	4ba1      	ldr	r3, [pc, #644]	@ (8003750 <HAL_I2C_MemRxCpltCallback+0x6c8>)
 80034ca:	801a      	strh	r2, [r3, #0]
			mag_x = magX * MAG_SENSITIVITY_4GAUSS / 1000;
 80034cc:	4b9e      	ldr	r3, [pc, #632]	@ (8003748 <HAL_I2C_MemRxCpltCallback+0x6c0>)
 80034ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80034d2:	ee07 3a90 	vmov	s15, r3
 80034d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80034da:	ed9f 7a9e 	vldr	s14, [pc, #632]	@ 8003754 <HAL_I2C_MemRxCpltCallback+0x6cc>
 80034de:	ee27 7a87 	vmul.f32	s14, s15, s14
 80034e2:	eddf 6a9d 	vldr	s13, [pc, #628]	@ 8003758 <HAL_I2C_MemRxCpltCallback+0x6d0>
 80034e6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80034ea:	4b9c      	ldr	r3, [pc, #624]	@ (800375c <HAL_I2C_MemRxCpltCallback+0x6d4>)
 80034ec:	edc3 7a00 	vstr	s15, [r3]
			mag_y = magY * MAG_SENSITIVITY_4GAUSS / 1000;
 80034f0:	4b96      	ldr	r3, [pc, #600]	@ (800374c <HAL_I2C_MemRxCpltCallback+0x6c4>)
 80034f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80034f6:	ee07 3a90 	vmov	s15, r3
 80034fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80034fe:	ed9f 7a95 	vldr	s14, [pc, #596]	@ 8003754 <HAL_I2C_MemRxCpltCallback+0x6cc>
 8003502:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003506:	eddf 6a94 	vldr	s13, [pc, #592]	@ 8003758 <HAL_I2C_MemRxCpltCallback+0x6d0>
 800350a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800350e:	4b94      	ldr	r3, [pc, #592]	@ (8003760 <HAL_I2C_MemRxCpltCallback+0x6d8>)
 8003510:	edc3 7a00 	vstr	s15, [r3]
			mag_z = magZ * MAG_SENSITIVITY_4GAUSS / 1000;
 8003514:	4b8e      	ldr	r3, [pc, #568]	@ (8003750 <HAL_I2C_MemRxCpltCallback+0x6c8>)
 8003516:	f9b3 3000 	ldrsh.w	r3, [r3]
 800351a:	ee07 3a90 	vmov	s15, r3
 800351e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003522:	ed9f 7a8c 	vldr	s14, [pc, #560]	@ 8003754 <HAL_I2C_MemRxCpltCallback+0x6cc>
 8003526:	ee27 7a87 	vmul.f32	s14, s15, s14
 800352a:	eddf 6a8b 	vldr	s13, [pc, #556]	@ 8003758 <HAL_I2C_MemRxCpltCallback+0x6d0>
 800352e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003532:	4b8c      	ldr	r3, [pc, #560]	@ (8003764 <HAL_I2C_MemRxCpltCallback+0x6dc>)
 8003534:	edc3 7a00 	vstr	s15, [r3]
			mx1 = mag_x - hardIron_x;
 8003538:	4b88      	ldr	r3, [pc, #544]	@ (800375c <HAL_I2C_MemRxCpltCallback+0x6d4>)
 800353a:	ed93 7a00 	vldr	s14, [r3]
 800353e:	4b8a      	ldr	r3, [pc, #552]	@ (8003768 <HAL_I2C_MemRxCpltCallback+0x6e0>)
 8003540:	edd3 7a00 	vldr	s15, [r3]
 8003544:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003548:	4b88      	ldr	r3, [pc, #544]	@ (800376c <HAL_I2C_MemRxCpltCallback+0x6e4>)
 800354a:	edc3 7a00 	vstr	s15, [r3]
			my1 = mag_y - hardIron_y;
 800354e:	4b84      	ldr	r3, [pc, #528]	@ (8003760 <HAL_I2C_MemRxCpltCallback+0x6d8>)
 8003550:	ed93 7a00 	vldr	s14, [r3]
 8003554:	4b86      	ldr	r3, [pc, #536]	@ (8003770 <HAL_I2C_MemRxCpltCallback+0x6e8>)
 8003556:	edd3 7a00 	vldr	s15, [r3]
 800355a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800355e:	4b85      	ldr	r3, [pc, #532]	@ (8003774 <HAL_I2C_MemRxCpltCallback+0x6ec>)
 8003560:	edc3 7a00 	vstr	s15, [r3]
			mz1 = mag_z - hardIron_z;
 8003564:	4b7f      	ldr	r3, [pc, #508]	@ (8003764 <HAL_I2C_MemRxCpltCallback+0x6dc>)
 8003566:	ed93 7a00 	vldr	s14, [r3]
 800356a:	4b83      	ldr	r3, [pc, #524]	@ (8003778 <HAL_I2C_MemRxCpltCallback+0x6f0>)
 800356c:	edd3 7a00 	vldr	s15, [r3]
 8003570:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003574:	4b81      	ldr	r3, [pc, #516]	@ (800377c <HAL_I2C_MemRxCpltCallback+0x6f4>)
 8003576:	edc3 7a00 	vstr	s15, [r3]
			float corrected_V[] = { mx1, my1, mz1 };
 800357a:	4b7c      	ldr	r3, [pc, #496]	@ (800376c <HAL_I2C_MemRxCpltCallback+0x6e4>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	60fb      	str	r3, [r7, #12]
 8003580:	4b7c      	ldr	r3, [pc, #496]	@ (8003774 <HAL_I2C_MemRxCpltCallback+0x6ec>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	613b      	str	r3, [r7, #16]
 8003586:	4b7d      	ldr	r3, [pc, #500]	@ (800377c <HAL_I2C_MemRxCpltCallback+0x6f4>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	617b      	str	r3, [r7, #20]
			result_V[0] = corrected_V[0] * softIron_cali[0][0]
 800358c:	ed97 7a03 	vldr	s14, [r7, #12]
 8003590:	4b7b      	ldr	r3, [pc, #492]	@ (8003780 <HAL_I2C_MemRxCpltCallback+0x6f8>)
 8003592:	edd3 7a00 	vldr	s15, [r3]
 8003596:	ee27 7a27 	vmul.f32	s14, s14, s15
					+ corrected_V[1] * softIron_cali[0][1]
 800359a:	edd7 6a04 	vldr	s13, [r7, #16]
 800359e:	4b78      	ldr	r3, [pc, #480]	@ (8003780 <HAL_I2C_MemRxCpltCallback+0x6f8>)
 80035a0:	edd3 7a01 	vldr	s15, [r3, #4]
 80035a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80035a8:	ee37 7a27 	vadd.f32	s14, s14, s15
					+ corrected_V[2] * softIron_cali[0][2];
 80035ac:	edd7 6a05 	vldr	s13, [r7, #20]
 80035b0:	4b73      	ldr	r3, [pc, #460]	@ (8003780 <HAL_I2C_MemRxCpltCallback+0x6f8>)
 80035b2:	edd3 7a02 	vldr	s15, [r3, #8]
 80035b6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80035ba:	ee77 7a27 	vadd.f32	s15, s14, s15
			result_V[0] = corrected_V[0] * softIron_cali[0][0]
 80035be:	4b71      	ldr	r3, [pc, #452]	@ (8003784 <HAL_I2C_MemRxCpltCallback+0x6fc>)
 80035c0:	edc3 7a00 	vstr	s15, [r3]
			result_V[1] = corrected_V[0] * softIron_cali[1][0]
 80035c4:	ed97 7a03 	vldr	s14, [r7, #12]
 80035c8:	4b6d      	ldr	r3, [pc, #436]	@ (8003780 <HAL_I2C_MemRxCpltCallback+0x6f8>)
 80035ca:	edd3 7a03 	vldr	s15, [r3, #12]
 80035ce:	ee27 7a27 	vmul.f32	s14, s14, s15
					+ corrected_V[1] * softIron_cali[1][1]
 80035d2:	edd7 6a04 	vldr	s13, [r7, #16]
 80035d6:	4b6a      	ldr	r3, [pc, #424]	@ (8003780 <HAL_I2C_MemRxCpltCallback+0x6f8>)
 80035d8:	edd3 7a04 	vldr	s15, [r3, #16]
 80035dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80035e0:	ee37 7a27 	vadd.f32	s14, s14, s15
					+ corrected_V[2] * softIron_cali[1][2];
 80035e4:	edd7 6a05 	vldr	s13, [r7, #20]
 80035e8:	4b65      	ldr	r3, [pc, #404]	@ (8003780 <HAL_I2C_MemRxCpltCallback+0x6f8>)
 80035ea:	edd3 7a05 	vldr	s15, [r3, #20]
 80035ee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80035f2:	ee77 7a27 	vadd.f32	s15, s14, s15
			result_V[1] = corrected_V[0] * softIron_cali[1][0]
 80035f6:	4b63      	ldr	r3, [pc, #396]	@ (8003784 <HAL_I2C_MemRxCpltCallback+0x6fc>)
 80035f8:	edc3 7a01 	vstr	s15, [r3, #4]
			result_V[2] = corrected_V[0] * softIron_cali[2][0]
 80035fc:	ed97 7a03 	vldr	s14, [r7, #12]
 8003600:	4b5f      	ldr	r3, [pc, #380]	@ (8003780 <HAL_I2C_MemRxCpltCallback+0x6f8>)
 8003602:	edd3 7a06 	vldr	s15, [r3, #24]
 8003606:	ee27 7a27 	vmul.f32	s14, s14, s15
					+ corrected_V[1] * softIron_cali[2][1]
 800360a:	edd7 6a04 	vldr	s13, [r7, #16]
 800360e:	4b5c      	ldr	r3, [pc, #368]	@ (8003780 <HAL_I2C_MemRxCpltCallback+0x6f8>)
 8003610:	edd3 7a07 	vldr	s15, [r3, #28]
 8003614:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003618:	ee37 7a27 	vadd.f32	s14, s14, s15
					+ corrected_V[2] * softIron_cali[2][2];
 800361c:	edd7 6a05 	vldr	s13, [r7, #20]
 8003620:	4b57      	ldr	r3, [pc, #348]	@ (8003780 <HAL_I2C_MemRxCpltCallback+0x6f8>)
 8003622:	edd3 7a08 	vldr	s15, [r3, #32]
 8003626:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800362a:	ee77 7a27 	vadd.f32	s15, s14, s15
			result_V[2] = corrected_V[0] * softIron_cali[2][0]
 800362e:	4b55      	ldr	r3, [pc, #340]	@ (8003784 <HAL_I2C_MemRxCpltCallback+0x6fc>)
 8003630:	edc3 7a02 	vstr	s15, [r3, #8]
			mx2 = result_V[0];
 8003634:	4b53      	ldr	r3, [pc, #332]	@ (8003784 <HAL_I2C_MemRxCpltCallback+0x6fc>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a53      	ldr	r2, [pc, #332]	@ (8003788 <HAL_I2C_MemRxCpltCallback+0x700>)
 800363a:	6013      	str	r3, [r2, #0]
			my2 = result_V[1];
 800363c:	4b51      	ldr	r3, [pc, #324]	@ (8003784 <HAL_I2C_MemRxCpltCallback+0x6fc>)
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	4a52      	ldr	r2, [pc, #328]	@ (800378c <HAL_I2C_MemRxCpltCallback+0x704>)
 8003642:	6013      	str	r3, [r2, #0]
			mz2 = result_V[2];
 8003644:	4b4f      	ldr	r3, [pc, #316]	@ (8003784 <HAL_I2C_MemRxCpltCallback+0x6fc>)
 8003646:	689b      	ldr	r3, [r3, #8]
 8003648:	4a51      	ldr	r2, [pc, #324]	@ (8003790 <HAL_I2C_MemRxCpltCallback+0x708>)
 800364a:	6013      	str	r3, [r2, #0]
			mxyz[0] = mx2;
 800364c:	4b4e      	ldr	r3, [pc, #312]	@ (8003788 <HAL_I2C_MemRxCpltCallback+0x700>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a50      	ldr	r2, [pc, #320]	@ (8003794 <HAL_I2C_MemRxCpltCallback+0x70c>)
 8003652:	6013      	str	r3, [r2, #0]
			mxyz[1] = my2;
 8003654:	4b4d      	ldr	r3, [pc, #308]	@ (800378c <HAL_I2C_MemRxCpltCallback+0x704>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a4e      	ldr	r2, [pc, #312]	@ (8003794 <HAL_I2C_MemRxCpltCallback+0x70c>)
 800365a:	6053      	str	r3, [r2, #4]
			mxyz[2] = mz2;
 800365c:	4b4c      	ldr	r3, [pc, #304]	@ (8003790 <HAL_I2C_MemRxCpltCallback+0x708>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4a4c      	ldr	r2, [pc, #304]	@ (8003794 <HAL_I2C_MemRxCpltCallback+0x70c>)
 8003662:	6093      	str	r3, [r2, #8]
			vector_normalize(mxyz);
 8003664:	484b      	ldr	r0, [pc, #300]	@ (8003794 <HAL_I2C_MemRxCpltCallback+0x70c>)
 8003666:	f7fe fbdb 	bl	8001e20 <vector_normalize>
			axyz1[0] = -axyz[0];
 800366a:	4b4b      	ldr	r3, [pc, #300]	@ (8003798 <HAL_I2C_MemRxCpltCallback+0x710>)
 800366c:	edd3 7a00 	vldr	s15, [r3]
 8003670:	eef1 7a67 	vneg.f32	s15, s15
 8003674:	4b49      	ldr	r3, [pc, #292]	@ (800379c <HAL_I2C_MemRxCpltCallback+0x714>)
 8003676:	edc3 7a00 	vstr	s15, [r3]
			gxyz1[0] = -gxyz[0];
 800367a:	4b49      	ldr	r3, [pc, #292]	@ (80037a0 <HAL_I2C_MemRxCpltCallback+0x718>)
 800367c:	edd3 7a00 	vldr	s15, [r3]
 8003680:	eef1 7a67 	vneg.f32	s15, s15
 8003684:	4b47      	ldr	r3, [pc, #284]	@ (80037a4 <HAL_I2C_MemRxCpltCallback+0x71c>)
 8003686:	edc3 7a00 	vstr	s15, [r3]
			Now = micros();
 800368a:	f7fe fb4f 	bl	8001d2c <micros>
 800368e:	4603      	mov	r3, r0
 8003690:	4a45      	ldr	r2, [pc, #276]	@ (80037a8 <HAL_I2C_MemRxCpltCallback+0x720>)
 8003692:	6013      	str	r3, [r2, #0]
			deltat = (Now - lastUpdate) * 1.5e-4;
 8003694:	4b44      	ldr	r3, [pc, #272]	@ (80037a8 <HAL_I2C_MemRxCpltCallback+0x720>)
 8003696:	681a      	ldr	r2, [r3, #0]
 8003698:	4b44      	ldr	r3, [pc, #272]	@ (80037ac <HAL_I2C_MemRxCpltCallback+0x724>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	1ad3      	subs	r3, r2, r3
 800369e:	4618      	mov	r0, r3
 80036a0:	f7fc feb8 	bl	8000414 <__aeabi_ui2d>
 80036a4:	a324      	add	r3, pc, #144	@ (adr r3, 8003738 <HAL_I2C_MemRxCpltCallback+0x6b0>)
 80036a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036aa:	f7fc ff2d 	bl	8000508 <__aeabi_dmul>
 80036ae:	4602      	mov	r2, r0
 80036b0:	460b      	mov	r3, r1
 80036b2:	4610      	mov	r0, r2
 80036b4:	4619      	mov	r1, r3
 80036b6:	f7fd f9d7 	bl	8000a68 <__aeabi_d2f>
 80036ba:	4603      	mov	r3, r0
 80036bc:	4a3c      	ldr	r2, [pc, #240]	@ (80037b0 <HAL_I2C_MemRxCpltCallback+0x728>)
 80036be:	6013      	str	r3, [r2, #0]
			lastUpdate = Now;
 80036c0:	4b39      	ldr	r3, [pc, #228]	@ (80037a8 <HAL_I2C_MemRxCpltCallback+0x720>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a39      	ldr	r2, [pc, #228]	@ (80037ac <HAL_I2C_MemRxCpltCallback+0x724>)
 80036c6:	6013      	str	r3, [r2, #0]
			MadgwickAHRSupdate(gxyz1[0], gxyz[1], gxyz[2], axyz1[0], axyz[1],
 80036c8:	4b36      	ldr	r3, [pc, #216]	@ (80037a4 <HAL_I2C_MemRxCpltCallback+0x71c>)
 80036ca:	edd3 7a00 	vldr	s15, [r3]
 80036ce:	4b34      	ldr	r3, [pc, #208]	@ (80037a0 <HAL_I2C_MemRxCpltCallback+0x718>)
 80036d0:	ed93 7a01 	vldr	s14, [r3, #4]
 80036d4:	4b32      	ldr	r3, [pc, #200]	@ (80037a0 <HAL_I2C_MemRxCpltCallback+0x718>)
 80036d6:	edd3 6a02 	vldr	s13, [r3, #8]
 80036da:	4b30      	ldr	r3, [pc, #192]	@ (800379c <HAL_I2C_MemRxCpltCallback+0x714>)
 80036dc:	ed93 6a00 	vldr	s12, [r3]
 80036e0:	4b2d      	ldr	r3, [pc, #180]	@ (8003798 <HAL_I2C_MemRxCpltCallback+0x710>)
 80036e2:	edd3 5a01 	vldr	s11, [r3, #4]
 80036e6:	4b2c      	ldr	r3, [pc, #176]	@ (8003798 <HAL_I2C_MemRxCpltCallback+0x710>)
 80036e8:	ed93 5a02 	vldr	s10, [r3, #8]
 80036ec:	4b29      	ldr	r3, [pc, #164]	@ (8003794 <HAL_I2C_MemRxCpltCallback+0x70c>)
 80036ee:	edd3 4a00 	vldr	s9, [r3]
 80036f2:	4b28      	ldr	r3, [pc, #160]	@ (8003794 <HAL_I2C_MemRxCpltCallback+0x70c>)
 80036f4:	edd3 3a01 	vldr	s7, [r3, #4]
 80036f8:	4b26      	ldr	r3, [pc, #152]	@ (8003794 <HAL_I2C_MemRxCpltCallback+0x70c>)
 80036fa:	ed93 4a02 	vldr	s8, [r3, #8]
 80036fe:	eeb0 3a64 	vmov.f32	s6, s9
 8003702:	eef0 2a45 	vmov.f32	s5, s10
 8003706:	eeb0 2a65 	vmov.f32	s4, s11
 800370a:	eef0 1a46 	vmov.f32	s3, s12
 800370e:	eeb0 1a66 	vmov.f32	s2, s13
 8003712:	eef0 0a47 	vmov.f32	s1, s14
 8003716:	eeb0 0a67 	vmov.f32	s0, s15
 800371a:	f7fe fbc3 	bl	8001ea4 <MadgwickAHRSupdate>
			UTIL_SEQ_SetTask(1 << CFG_TASK_MY_TASK_BLE, CFG_SCH_PRIO_0);
 800371e:	2100      	movs	r1, #0
 8003720:	2004      	movs	r0, #4
 8003722:	f009 f9bd 	bl	800caa0 <UTIL_SEQ_SetTask>
			CurrentSensor = GYRO_SENSOR;
 8003726:	4b06      	ldr	r3, [pc, #24]	@ (8003740 <HAL_I2C_MemRxCpltCallback+0x6b8>)
 8003728:	2200      	movs	r2, #0
 800372a:	701a      	strb	r2, [r3, #0]
}
 800372c:	bf00      	nop
 800372e:	3718      	adds	r7, #24
 8003730:	46bd      	mov	sp, r7
 8003732:	bd80      	pop	{r7, pc}
 8003734:	f3af 8000 	nop.w
 8003738:	30553261 	.word	0x30553261
 800373c:	3f23a92a 	.word	0x3f23a92a
 8003740:	200003a0 	.word	0x200003a0
 8003744:	20000340 	.word	0x20000340
 8003748:	20000352 	.word	0x20000352
 800374c:	20000354 	.word	0x20000354
 8003750:	20000356 	.word	0x20000356
 8003754:	3e0f5c29 	.word	0x3e0f5c29
 8003758:	447a0000 	.word	0x447a0000
 800375c:	20000394 	.word	0x20000394
 8003760:	20000398 	.word	0x20000398
 8003764:	2000039c 	.word	0x2000039c
 8003768:	20000010 	.word	0x20000010
 800376c:	20000448 	.word	0x20000448
 8003770:	20000014 	.word	0x20000014
 8003774:	2000044c 	.word	0x2000044c
 8003778:	20000018 	.word	0x20000018
 800377c:	20000450 	.word	0x20000450
 8003780:	2000001c 	.word	0x2000001c
 8003784:	200004c4 	.word	0x200004c4
 8003788:	20000454 	.word	0x20000454
 800378c:	20000458 	.word	0x20000458
 8003790:	2000045c 	.word	0x2000045c
 8003794:	200004ac 	.word	0x200004ac
 8003798:	20000494 	.word	0x20000494
 800379c:	200004a0 	.word	0x200004a0
 80037a0:	2000047c 	.word	0x2000047c
 80037a4:	20000488 	.word	0x20000488
 80037a8:	20000478 	.word	0x20000478
 80037ac:	20000470 	.word	0x20000470
 80037b0:	2000046c 	.word	0x2000046c

080037b4 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80037b4:	b580      	push	{r7, lr}
 80037b6:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80037b8:	f000 fc84 	bl	80040c4 <HAL_Init>
	/* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
	MX_APPE_Config();
 80037bc:	f7fd fa78 	bl	8000cb0 <MX_APPE_Config>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80037c0:	f000 f82a 	bl	8003818 <SystemClock_Config>

	/* Configure the peripherals common clocks */
	PeriphCommonClock_Config();
 80037c4:	f000 f88a 	bl	80038dc <PeriphCommonClock_Config>

	/* IPCC initialisation */
	MX_IPCC_Init();
 80037c8:	f000 f8e8 	bl	800399c <MX_IPCC_Init>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80037cc:	f000 f99e 	bl	8003b0c <MX_GPIO_Init>
	MX_DMA_Init();
 80037d0:	f000 f982 	bl	8003ad8 <MX_DMA_Init>
	MX_I2C1_Init();
 80037d4:	f000 f8a2 	bl	800391c <MX_I2C1_Init>
	MX_RTC_Init();
 80037d8:	f000 f8fc 	bl	80039d4 <MX_RTC_Init>
	MX_TIM2_Init();
 80037dc:	f000 f92e 	bl	8003a3c <MX_TIM2_Init>
	MX_RF_Init();
 80037e0:	f000 f8f0 	bl	80039c4 <MX_RF_Init>
	/* USER CODE BEGIN 2 */

	/* USER CODE END 2 */

	/* Init code for STM32_WPAN */
	MX_APPE_Init();
 80037e4:	f7fd fa72 	bl	8000ccc <MX_APPE_Init>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	LSM9DS1_Init();
 80037e8:	f7fe fa6c 	bl	8001cc4 <LSM9DS1_Init>
	HAL_Delay(10);
 80037ec:	200a      	movs	r0, #10
 80037ee:	f7fd fb9a 	bl	8000f26 <HAL_Delay>

	HAL_TIM_Base_Start(&htim2);
 80037f2:	4807      	ldr	r0, [pc, #28]	@ (8003810 <main+0x5c>)
 80037f4:	f005 fbc4 	bl	8008f80 <HAL_TIM_Base_Start>

	while (1) {
		cnt = cnt + 1;
 80037f8:	4b06      	ldr	r3, [pc, #24]	@ (8003814 <main+0x60>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	3301      	adds	r3, #1
 80037fe:	4a05      	ldr	r2, [pc, #20]	@ (8003814 <main+0x60>)
 8003800:	6013      	str	r3, [r2, #0]

		/* USER CODE END WHILE */
		MX_APPE_Process();
 8003802:	f7fd fbb5 	bl	8000f70 <MX_APPE_Process>
		//nomal_power_code
//		UTIL_SEQ_SetTask(1 << CFG_TASK_MY_TASK_IMU, CFG_SCH_PRIO_0);
//		UTIL_SEQ_SetTask(1 << CFG_TASK_MY_TASK_BLE, CFG_SCH_PRIO_0);

		//low_power_code
		LSM9DS1_ReadGyro_DMA();
 8003806:	f7ff fc03 	bl	8003010 <LSM9DS1_ReadGyro_DMA>
		cnt = cnt + 1;
 800380a:	bf00      	nop
 800380c:	e7f4      	b.n	80037f8 <main+0x44>
 800380e:	bf00      	nop
 8003810:	200002e4 	.word	0x200002e4
 8003814:	200003a4 	.word	0x200003a4

08003818 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8003818:	b580      	push	{r7, lr}
 800381a:	b09a      	sub	sp, #104	@ 0x68
 800381c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800381e:	f107 0320 	add.w	r3, r7, #32
 8003822:	2248      	movs	r2, #72	@ 0x48
 8003824:	2100      	movs	r1, #0
 8003826:	4618      	mov	r0, r3
 8003828:	f009 fa56 	bl	800ccd8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800382c:	1d3b      	adds	r3, r7, #4
 800382e:	2200      	movs	r2, #0
 8003830:	601a      	str	r2, [r3, #0]
 8003832:	605a      	str	r2, [r3, #4]
 8003834:	609a      	str	r2, [r3, #8]
 8003836:	60da      	str	r2, [r3, #12]
 8003838:	611a      	str	r2, [r3, #16]
 800383a:	615a      	str	r2, [r3, #20]
 800383c:	619a      	str	r2, [r3, #24]

	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess();
 800383e:	f003 fc03 	bl	8007048 <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMHIGH);
 8003842:	2010      	movs	r0, #16
 8003844:	f7fe f9d7 	bl	8001bf6 <LL_RCC_LSE_SetDriveCapability>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003848:	4b23      	ldr	r3, [pc, #140]	@ (80038d8 <SystemClock_Config+0xc0>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003850:	4a21      	ldr	r2, [pc, #132]	@ (80038d8 <SystemClock_Config+0xc0>)
 8003852:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003856:	6013      	str	r3, [r2, #0]
 8003858:	4b1f      	ldr	r3, [pc, #124]	@ (80038d8 <SystemClock_Config+0xc0>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003860:	603b      	str	r3, [r7, #0]
 8003862:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI
 8003864:	2327      	movs	r3, #39	@ 0x27
 8003866:	623b      	str	r3, [r7, #32]
			| RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_LSE
			| RCC_OSCILLATORTYPE_MSI;
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003868:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800386c:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800386e:	2301      	movs	r3, #1
 8003870:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003872:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003876:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8003878:	2301      	movs	r3, #1
 800387a:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800387c:	2340      	movs	r3, #64	@ 0x40
 800387e:	633b      	str	r3, [r7, #48]	@ 0x30
	RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8003880:	2300      	movs	r3, #0
 8003882:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_10;
 8003884:	23a0      	movs	r3, #160	@ 0xa0
 8003886:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8003888:	2300      	movs	r3, #0
 800388a:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800388c:	f107 0320 	add.w	r3, r7, #32
 8003890:	4618      	mov	r0, r3
 8003892:	f003 ff55 	bl	8007740 <HAL_RCC_OscConfig>
 8003896:	4603      	mov	r3, r0
 8003898:	2b00      	cmp	r3, #0
 800389a:	d001      	beq.n	80038a0 <SystemClock_Config+0x88>
		Error_Handler();
 800389c:	f000 f9b2 	bl	8003c04 <Error_Handler>
	}

	/** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4 | RCC_CLOCKTYPE_HCLK2
 80038a0:	236f      	movs	r3, #111	@ 0x6f
 80038a2:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1
			| RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80038a4:	2300      	movs	r3, #0
 80038a6:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80038a8:	2300      	movs	r3, #0
 80038aa:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80038ac:	2300      	movs	r3, #0
 80038ae:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80038b0:	2300      	movs	r3, #0
 80038b2:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 80038b4:	2300      	movs	r3, #0
 80038b6:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 80038b8:	2300      	movs	r3, #0
 80038ba:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 80038bc:	1d3b      	adds	r3, r7, #4
 80038be:	2101      	movs	r1, #1
 80038c0:	4618      	mov	r0, r3
 80038c2:	f004 fab1 	bl	8007e28 <HAL_RCC_ClockConfig>
 80038c6:	4603      	mov	r3, r0
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d001      	beq.n	80038d0 <SystemClock_Config+0xb8>
		Error_Handler();
 80038cc:	f000 f99a 	bl	8003c04 <Error_Handler>
	}
}
 80038d0:	bf00      	nop
 80038d2:	3768      	adds	r7, #104	@ 0x68
 80038d4:	46bd      	mov	sp, r7
 80038d6:	bd80      	pop	{r7, pc}
 80038d8:	58000400 	.word	0x58000400

080038dc <PeriphCommonClock_Config>:

/**
 * @brief Peripherals Common Clock Configuration
 * @retval None
 */
void PeriphCommonClock_Config(void) {
 80038dc:	b580      	push	{r7, lr}
 80038de:	b094      	sub	sp, #80	@ 0x50
 80038e0:	af00      	add	r7, sp, #0
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 80038e2:	463b      	mov	r3, r7
 80038e4:	2250      	movs	r2, #80	@ 0x50
 80038e6:	2100      	movs	r1, #0
 80038e8:	4618      	mov	r0, r3
 80038ea:	f009 f9f5 	bl	800ccd8 <memset>

	/** Initializes the peripherals clock
	 */
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS
 80038ee:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80038f2:	603b      	str	r3, [r7, #0]
			| RCC_PERIPHCLK_RFWAKEUP;
	PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 80038f4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80038f8:	647b      	str	r3, [r7, #68]	@ 0x44
	PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 80038fa:	2300      	movs	r3, #0
 80038fc:	64bb      	str	r3, [r7, #72]	@ 0x48
	PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 80038fe:	2300      	movs	r3, #0
 8003900:	64fb      	str	r3, [r7, #76]	@ 0x4c

	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 8003902:	463b      	mov	r3, r7
 8003904:	4618      	mov	r0, r3
 8003906:	f004 fea0 	bl	800864a <HAL_RCCEx_PeriphCLKConfig>
 800390a:	4603      	mov	r3, r0
 800390c:	2b00      	cmp	r3, #0
 800390e:	d001      	beq.n	8003914 <PeriphCommonClock_Config+0x38>
		Error_Handler();
 8003910:	f000 f978 	bl	8003c04 <Error_Handler>
	}
	/* USER CODE BEGIN Smps */

	/* USER CODE END Smps */
}
 8003914:	bf00      	nop
 8003916:	3750      	adds	r7, #80	@ 0x50
 8003918:	46bd      	mov	sp, r7
 800391a:	bd80      	pop	{r7, pc}

0800391c <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 800391c:	b580      	push	{r7, lr}
 800391e:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8003920:	4b1b      	ldr	r3, [pc, #108]	@ (8003990 <MX_I2C1_Init+0x74>)
 8003922:	4a1c      	ldr	r2, [pc, #112]	@ (8003994 <MX_I2C1_Init+0x78>)
 8003924:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x00B07CB4;
 8003926:	4b1a      	ldr	r3, [pc, #104]	@ (8003990 <MX_I2C1_Init+0x74>)
 8003928:	4a1b      	ldr	r2, [pc, #108]	@ (8003998 <MX_I2C1_Init+0x7c>)
 800392a:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0;
 800392c:	4b18      	ldr	r3, [pc, #96]	@ (8003990 <MX_I2C1_Init+0x74>)
 800392e:	2200      	movs	r2, #0
 8003930:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003932:	4b17      	ldr	r3, [pc, #92]	@ (8003990 <MX_I2C1_Init+0x74>)
 8003934:	2201      	movs	r2, #1
 8003936:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003938:	4b15      	ldr	r3, [pc, #84]	@ (8003990 <MX_I2C1_Init+0x74>)
 800393a:	2200      	movs	r2, #0
 800393c:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 800393e:	4b14      	ldr	r3, [pc, #80]	@ (8003990 <MX_I2C1_Init+0x74>)
 8003940:	2200      	movs	r2, #0
 8003942:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003944:	4b12      	ldr	r3, [pc, #72]	@ (8003990 <MX_I2C1_Init+0x74>)
 8003946:	2200      	movs	r2, #0
 8003948:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800394a:	4b11      	ldr	r3, [pc, #68]	@ (8003990 <MX_I2C1_Init+0x74>)
 800394c:	2200      	movs	r2, #0
 800394e:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003950:	4b0f      	ldr	r3, [pc, #60]	@ (8003990 <MX_I2C1_Init+0x74>)
 8003952:	2200      	movs	r2, #0
 8003954:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8003956:	480e      	ldr	r0, [pc, #56]	@ (8003990 <MX_I2C1_Init+0x74>)
 8003958:	f001 fa88 	bl	8004e6c <HAL_I2C_Init>
 800395c:	4603      	mov	r3, r0
 800395e:	2b00      	cmp	r3, #0
 8003960:	d001      	beq.n	8003966 <MX_I2C1_Init+0x4a>
		Error_Handler();
 8003962:	f000 f94f 	bl	8003c04 <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE)
 8003966:	2100      	movs	r1, #0
 8003968:	4809      	ldr	r0, [pc, #36]	@ (8003990 <MX_I2C1_Init+0x74>)
 800396a:	f003 fa4f 	bl	8006e0c <HAL_I2CEx_ConfigAnalogFilter>
 800396e:	4603      	mov	r3, r0
 8003970:	2b00      	cmp	r3, #0
 8003972:	d001      	beq.n	8003978 <MX_I2C1_Init+0x5c>
			!= HAL_OK) {
		Error_Handler();
 8003974:	f000 f946 	bl	8003c04 <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK) {
 8003978:	2100      	movs	r1, #0
 800397a:	4805      	ldr	r0, [pc, #20]	@ (8003990 <MX_I2C1_Init+0x74>)
 800397c:	f003 fa91 	bl	8006ea2 <HAL_I2CEx_ConfigDigitalFilter>
 8003980:	4603      	mov	r3, r0
 8003982:	2b00      	cmp	r3, #0
 8003984:	d001      	beq.n	800398a <MX_I2C1_Init+0x6e>
		Error_Handler();
 8003986:	f000 f93d 	bl	8003c04 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */
//	__HAL_LINKDMA(&hi2c1, hdmarx, hdma_i2c1_rx);
	/* USER CODE END I2C1_Init 2 */

}
 800398a:	bf00      	nop
 800398c:	bd80      	pop	{r7, pc}
 800398e:	bf00      	nop
 8003990:	200001d0 	.word	0x200001d0
 8003994:	40005400 	.word	0x40005400
 8003998:	00b07cb4 	.word	0x00b07cb4

0800399c <MX_IPCC_Init>:
/**
 * @brief IPCC Initialization Function
 * @param None
 * @retval None
 */
static void MX_IPCC_Init(void) {
 800399c:	b580      	push	{r7, lr}
 800399e:	af00      	add	r7, sp, #0
	/* USER CODE END IPCC_Init 0 */

	/* USER CODE BEGIN IPCC_Init 1 */

	/* USER CODE END IPCC_Init 1 */
	hipcc.Instance = IPCC;
 80039a0:	4b06      	ldr	r3, [pc, #24]	@ (80039bc <MX_IPCC_Init+0x20>)
 80039a2:	4a07      	ldr	r2, [pc, #28]	@ (80039c0 <MX_IPCC_Init+0x24>)
 80039a4:	601a      	str	r2, [r3, #0]
	if (HAL_IPCC_Init(&hipcc) != HAL_OK) {
 80039a6:	4805      	ldr	r0, [pc, #20]	@ (80039bc <MX_IPCC_Init+0x20>)
 80039a8:	f003 fac8 	bl	8006f3c <HAL_IPCC_Init>
 80039ac:	4603      	mov	r3, r0
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d001      	beq.n	80039b6 <MX_IPCC_Init+0x1a>
		Error_Handler();
 80039b2:	f000 f927 	bl	8003c04 <Error_Handler>
	}
	/* USER CODE BEGIN IPCC_Init 2 */

	/* USER CODE END IPCC_Init 2 */

}
 80039b6:	bf00      	nop
 80039b8:	bd80      	pop	{r7, pc}
 80039ba:	bf00      	nop
 80039bc:	20000284 	.word	0x20000284
 80039c0:	58000c00 	.word	0x58000c00

080039c4 <MX_RF_Init>:
/**
 * @brief RF Initialization Function
 * @param None
 * @retval None
 */
static void MX_RF_Init(void) {
 80039c4:	b480      	push	{r7}
 80039c6:	af00      	add	r7, sp, #0
	/* USER CODE END RF_Init 1 */
	/* USER CODE BEGIN RF_Init 2 */

	/* USER CODE END RF_Init 2 */

}
 80039c8:	bf00      	nop
 80039ca:	46bd      	mov	sp, r7
 80039cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d0:	4770      	bx	lr
	...

080039d4 <MX_RTC_Init>:
/**
 * @brief RTC Initialization Function
 * @param None
 * @retval None
 */
static void MX_RTC_Init(void) {
 80039d4:	b580      	push	{r7, lr}
 80039d6:	af00      	add	r7, sp, #0

	/* USER CODE END RTC_Init 1 */

	/** Initialize RTC Only
	 */
	hrtc.Instance = RTC;
 80039d8:	4b16      	ldr	r3, [pc, #88]	@ (8003a34 <MX_RTC_Init+0x60>)
 80039da:	4a17      	ldr	r2, [pc, #92]	@ (8003a38 <MX_RTC_Init+0x64>)
 80039dc:	601a      	str	r2, [r3, #0]
	hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80039de:	4b15      	ldr	r3, [pc, #84]	@ (8003a34 <MX_RTC_Init+0x60>)
 80039e0:	2200      	movs	r2, #0
 80039e2:	605a      	str	r2, [r3, #4]
	hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 80039e4:	4b13      	ldr	r3, [pc, #76]	@ (8003a34 <MX_RTC_Init+0x60>)
 80039e6:	220f      	movs	r2, #15
 80039e8:	609a      	str	r2, [r3, #8]
	hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 80039ea:	4b12      	ldr	r3, [pc, #72]	@ (8003a34 <MX_RTC_Init+0x60>)
 80039ec:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 80039f0:	60da      	str	r2, [r3, #12]
	hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80039f2:	4b10      	ldr	r3, [pc, #64]	@ (8003a34 <MX_RTC_Init+0x60>)
 80039f4:	2200      	movs	r2, #0
 80039f6:	611a      	str	r2, [r3, #16]
	hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80039f8:	4b0e      	ldr	r3, [pc, #56]	@ (8003a34 <MX_RTC_Init+0x60>)
 80039fa:	2200      	movs	r2, #0
 80039fc:	619a      	str	r2, [r3, #24]
	hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80039fe:	4b0d      	ldr	r3, [pc, #52]	@ (8003a34 <MX_RTC_Init+0x60>)
 8003a00:	2200      	movs	r2, #0
 8003a02:	61da      	str	r2, [r3, #28]
	hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8003a04:	4b0b      	ldr	r3, [pc, #44]	@ (8003a34 <MX_RTC_Init+0x60>)
 8003a06:	2200      	movs	r2, #0
 8003a08:	615a      	str	r2, [r3, #20]
	if (HAL_RTC_Init(&hrtc) != HAL_OK) {
 8003a0a:	480a      	ldr	r0, [pc, #40]	@ (8003a34 <MX_RTC_Init+0x60>)
 8003a0c:	f005 f8a4 	bl	8008b58 <HAL_RTC_Init>
 8003a10:	4603      	mov	r3, r0
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d001      	beq.n	8003a1a <MX_RTC_Init+0x46>
		Error_Handler();
 8003a16:	f000 f8f5 	bl	8003c04 <Error_Handler>
	}

	/** Enable the WakeUp
	 */
	if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16)
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	2100      	movs	r1, #0
 8003a1e:	4805      	ldr	r0, [pc, #20]	@ (8003a34 <MX_RTC_Init+0x60>)
 8003a20:	f005 f99a 	bl	8008d58 <HAL_RTCEx_SetWakeUpTimer_IT>
 8003a24:	4603      	mov	r3, r0
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d001      	beq.n	8003a2e <MX_RTC_Init+0x5a>
			!= HAL_OK) {
		Error_Handler();
 8003a2a:	f000 f8eb 	bl	8003c04 <Error_Handler>
	}
	/* USER CODE BEGIN RTC_Init 2 */

	/* USER CODE END RTC_Init 2 */

}
 8003a2e:	bf00      	nop
 8003a30:	bd80      	pop	{r7, pc}
 8003a32:	bf00      	nop
 8003a34:	200002c0 	.word	0x200002c0
 8003a38:	40002800 	.word	0x40002800

08003a3c <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b088      	sub	sp, #32
 8003a40:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8003a42:	f107 0310 	add.w	r3, r7, #16
 8003a46:	2200      	movs	r2, #0
 8003a48:	601a      	str	r2, [r3, #0]
 8003a4a:	605a      	str	r2, [r3, #4]
 8003a4c:	609a      	str	r2, [r3, #8]
 8003a4e:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8003a50:	1d3b      	adds	r3, r7, #4
 8003a52:	2200      	movs	r2, #0
 8003a54:	601a      	str	r2, [r3, #0]
 8003a56:	605a      	str	r2, [r3, #4]
 8003a58:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8003a5a:	4b1e      	ldr	r3, [pc, #120]	@ (8003ad4 <MX_TIM2_Init+0x98>)
 8003a5c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003a60:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 99;
 8003a62:	4b1c      	ldr	r3, [pc, #112]	@ (8003ad4 <MX_TIM2_Init+0x98>)
 8003a64:	2263      	movs	r2, #99	@ 0x63
 8003a66:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a68:	4b1a      	ldr	r3, [pc, #104]	@ (8003ad4 <MX_TIM2_Init+0x98>)
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 0xffffffff;
 8003a6e:	4b19      	ldr	r3, [pc, #100]	@ (8003ad4 <MX_TIM2_Init+0x98>)
 8003a70:	f04f 32ff 	mov.w	r2, #4294967295
 8003a74:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003a76:	4b17      	ldr	r3, [pc, #92]	@ (8003ad4 <MX_TIM2_Init+0x98>)
 8003a78:	2200      	movs	r2, #0
 8003a7a:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003a7c:	4b15      	ldr	r3, [pc, #84]	@ (8003ad4 <MX_TIM2_Init+0x98>)
 8003a7e:	2200      	movs	r2, #0
 8003a80:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8003a82:	4814      	ldr	r0, [pc, #80]	@ (8003ad4 <MX_TIM2_Init+0x98>)
 8003a84:	f005 fa24 	bl	8008ed0 <HAL_TIM_Base_Init>
 8003a88:	4603      	mov	r3, r0
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d001      	beq.n	8003a92 <MX_TIM2_Init+0x56>
		Error_Handler();
 8003a8e:	f000 f8b9 	bl	8003c04 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003a92:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003a96:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8003a98:	f107 0310 	add.w	r3, r7, #16
 8003a9c:	4619      	mov	r1, r3
 8003a9e:	480d      	ldr	r0, [pc, #52]	@ (8003ad4 <MX_TIM2_Init+0x98>)
 8003aa0:	f005 fab4 	bl	800900c <HAL_TIM_ConfigClockSource>
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d001      	beq.n	8003aae <MX_TIM2_Init+0x72>
		Error_Handler();
 8003aaa:	f000 f8ab 	bl	8003c04 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003aae:	2300      	movs	r3, #0
 8003ab0:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8003ab6:	1d3b      	adds	r3, r7, #4
 8003ab8:	4619      	mov	r1, r3
 8003aba:	4806      	ldr	r0, [pc, #24]	@ (8003ad4 <MX_TIM2_Init+0x98>)
 8003abc:	f005 fc7c 	bl	80093b8 <HAL_TIMEx_MasterConfigSynchronization>
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d001      	beq.n	8003aca <MX_TIM2_Init+0x8e>
			!= HAL_OK) {
		Error_Handler();
 8003ac6:	f000 f89d 	bl	8003c04 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8003aca:	bf00      	nop
 8003acc:	3720      	adds	r7, #32
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bd80      	pop	{r7, pc}
 8003ad2:	bf00      	nop
 8003ad4:	200002e4 	.word	0x200002e4

08003ad8 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMAMUX1_CLK_ENABLE();
 8003adc:	2004      	movs	r0, #4
 8003ade:	f7fe f8a0 	bl	8001c22 <LL_AHB1_GRP1_EnableClock>
	__HAL_RCC_DMA1_CLK_ENABLE();
 8003ae2:	2001      	movs	r0, #1
 8003ae4:	f7fe f89d 	bl	8001c22 <LL_AHB1_GRP1_EnableClock>

	/* DMA interrupt init */
	/* DMA1_Channel7_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8003ae8:	2200      	movs	r2, #0
 8003aea:	2100      	movs	r1, #0
 8003aec:	2011      	movs	r0, #17
 8003aee:	f000 fcb6 	bl	800445e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8003af2:	2011      	movs	r0, #17
 8003af4:	f000 fccd 	bl	8004492 <HAL_NVIC_EnableIRQ>
	/* DMAMUX1_OVR_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMAMUX1_OVR_IRQn, 0, 0);
 8003af8:	2200      	movs	r2, #0
 8003afa:	2100      	movs	r1, #0
 8003afc:	203e      	movs	r0, #62	@ 0x3e
 8003afe:	f000 fcae 	bl	800445e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMAMUX1_OVR_IRQn);
 8003b02:	203e      	movs	r0, #62	@ 0x3e
 8003b04:	f000 fcc5 	bl	8004492 <HAL_NVIC_EnableIRQ>

}
 8003b08:	bf00      	nop
 8003b0a:	bd80      	pop	{r7, pc}

08003b0c <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b086      	sub	sp, #24
 8003b10:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8003b12:	1d3b      	adds	r3, r7, #4
 8003b14:	2200      	movs	r2, #0
 8003b16:	601a      	str	r2, [r3, #0]
 8003b18:	605a      	str	r2, [r3, #4]
 8003b1a:	609a      	str	r2, [r3, #8]
 8003b1c:	60da      	str	r2, [r3, #12]
 8003b1e:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8003b20:	2004      	movs	r0, #4
 8003b22:	f7fe f897 	bl	8001c54 <LL_AHB2_GRP1_EnableClock>
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8003b26:	2002      	movs	r0, #2
 8003b28:	f7fe f894 	bl	8001c54 <LL_AHB2_GRP1_EnableClock>
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8003b2c:	2001      	movs	r0, #1
 8003b2e:	f7fe f891 	bl	8001c54 <LL_AHB2_GRP1_EnableClock>
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8003b32:	2008      	movs	r0, #8
 8003b34:	f7fe f88e 	bl	8001c54 <LL_AHB2_GRP1_EnableClock>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6 | GPIO_PIN_7, GPIO_PIN_RESET);
 8003b38:	2200      	movs	r2, #0
 8003b3a:	21c0      	movs	r1, #192	@ 0xc0
 8003b3c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003b40:	f001 f93e 	bl	8004dc0 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LD2_Pin | LD3_Pin | LD1_Pin, GPIO_PIN_RESET);
 8003b44:	2200      	movs	r2, #0
 8003b46:	2123      	movs	r1, #35	@ 0x23
 8003b48:	482b      	ldr	r0, [pc, #172]	@ (8003bf8 <MX_GPIO_Init+0xec>)
 8003b4a:	f001 f939 	bl	8004dc0 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : PA6 PA7 */
	GPIO_InitStruct.Pin = GPIO_PIN_6 | GPIO_PIN_7;
 8003b4e:	23c0      	movs	r3, #192	@ 0xc0
 8003b50:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b52:	2301      	movs	r3, #1
 8003b54:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b56:	2300      	movs	r3, #0
 8003b58:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b5e:	1d3b      	adds	r3, r7, #4
 8003b60:	4619      	mov	r1, r3
 8003b62:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003b66:	f000 ffbb 	bl	8004ae0 <HAL_GPIO_Init>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8003b6a:	2310      	movs	r3, #16
 8003b6c:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003b6e:	2300      	movs	r3, #0
 8003b70:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003b72:	2301      	movs	r3, #1
 8003b74:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003b76:	1d3b      	adds	r3, r7, #4
 8003b78:	4619      	mov	r1, r3
 8003b7a:	4820      	ldr	r0, [pc, #128]	@ (8003bfc <MX_GPIO_Init+0xf0>)
 8003b7c:	f000 ffb0 	bl	8004ae0 <HAL_GPIO_Init>

	/*Configure GPIO pins : LD2_Pin LD3_Pin LD1_Pin */
	GPIO_InitStruct.Pin = LD2_Pin | LD3_Pin | LD1_Pin;
 8003b80:	2323      	movs	r3, #35	@ 0x23
 8003b82:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b84:	2301      	movs	r3, #1
 8003b86:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b88:	2300      	movs	r3, #0
 8003b8a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b90:	1d3b      	adds	r3, r7, #4
 8003b92:	4619      	mov	r1, r3
 8003b94:	4818      	ldr	r0, [pc, #96]	@ (8003bf8 <MX_GPIO_Init+0xec>)
 8003b96:	f000 ffa3 	bl	8004ae0 <HAL_GPIO_Init>

	/*Configure GPIO pins : USB_DM_Pin USB_DP_Pin */
	GPIO_InitStruct.Pin = USB_DM_Pin | USB_DP_Pin;
 8003b9a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8003b9e:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ba0:	2302      	movs	r3, #2
 8003ba2:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ba8:	2300      	movs	r3, #0
 8003baa:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8003bac:	230a      	movs	r3, #10
 8003bae:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003bb0:	1d3b      	adds	r3, r7, #4
 8003bb2:	4619      	mov	r1, r3
 8003bb4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003bb8:	f000 ff92 	bl	8004ae0 <HAL_GPIO_Init>

	/*Configure GPIO pins : B2_Pin B3_Pin */
	GPIO_InitStruct.Pin = B2_Pin | B3_Pin;
 8003bbc:	2303      	movs	r3, #3
 8003bbe:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003bc8:	1d3b      	adds	r3, r7, #4
 8003bca:	4619      	mov	r1, r3
 8003bcc:	480c      	ldr	r0, [pc, #48]	@ (8003c00 <MX_GPIO_Init+0xf4>)
 8003bce:	f000 ff87 	bl	8004ae0 <HAL_GPIO_Init>

	/*Configure GPIO pins : STLINK_RX_Pin STLINK_TX_Pin */
	GPIO_InitStruct.Pin = STLINK_RX_Pin | STLINK_TX_Pin;
 8003bd2:	23c0      	movs	r3, #192	@ 0xc0
 8003bd4:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bd6:	2302      	movs	r3, #2
 8003bd8:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bda:	2300      	movs	r3, #0
 8003bdc:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bde:	2300      	movs	r3, #0
 8003be0:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003be2:	2307      	movs	r3, #7
 8003be4:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003be6:	1d3b      	adds	r3, r7, #4
 8003be8:	4619      	mov	r1, r3
 8003bea:	4803      	ldr	r0, [pc, #12]	@ (8003bf8 <MX_GPIO_Init+0xec>)
 8003bec:	f000 ff78 	bl	8004ae0 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8003bf0:	bf00      	nop
 8003bf2:	3718      	adds	r7, #24
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	bd80      	pop	{r7, pc}
 8003bf8:	48000400 	.word	0x48000400
 8003bfc:	48000800 	.word	0x48000800
 8003c00:	48000c00 	.word	0x48000c00

08003c04 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8003c04:	b480      	push	{r7}
 8003c06:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003c08:	b672      	cpsid	i
}
 8003c0a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8003c0c:	bf00      	nop
 8003c0e:	e7fd      	b.n	8003c0c <Error_Handler+0x8>

08003c10 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8003c10:	b480      	push	{r7}
 8003c12:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8003c14:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003c18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c1c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003c20:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003c24:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8003c28:	bf00      	nop
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c30:	4770      	bx	lr

08003c32 <LL_AHB2_GRP1_EnableClock>:
{
 8003c32:	b480      	push	{r7}
 8003c34:	b085      	sub	sp, #20
 8003c36:	af00      	add	r7, sp, #0
 8003c38:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8003c3a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003c3e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003c40:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	4313      	orrs	r3, r2
 8003c48:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8003c4a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003c4e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	4013      	ands	r3, r2
 8003c54:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003c56:	68fb      	ldr	r3, [r7, #12]
}
 8003c58:	bf00      	nop
 8003c5a:	3714      	adds	r7, #20
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c62:	4770      	bx	lr

08003c64 <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8003c64:	b480      	push	{r7}
 8003c66:	b085      	sub	sp, #20
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 8003c6c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003c70:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003c72:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	650b      	str	r3, [r1, #80]	@ 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8003c7c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003c80:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	4013      	ands	r3, r2
 8003c86:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003c88:	68fb      	ldr	r3, [r7, #12]
}
 8003c8a:	bf00      	nop
 8003c8c:	3714      	adds	r7, #20
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c94:	4770      	bx	lr

08003c96 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8003c96:	b480      	push	{r7}
 8003c98:	b085      	sub	sp, #20
 8003c9a:	af00      	add	r7, sp, #0
 8003c9c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8003c9e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003ca2:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8003ca4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	4313      	orrs	r3, r2
 8003cac:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8003cae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003cb2:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	4013      	ands	r3, r2
 8003cb8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003cba:	68fb      	ldr	r3, [r7, #12]
}
 8003cbc:	bf00      	nop
 8003cbe:	3714      	adds	r7, #20
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc6:	4770      	bx	lr

08003cc8 <HAL_MspInit>:

/* USER CODE END 0 */
/**
 * Initializes the Global MSP.
 */
void HAL_MspInit(void) {
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN MspInit 0 */

	/* USER CODE END MspInit 0 */

	__HAL_RCC_HSEM_CLK_ENABLE();
 8003ccc:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8003cd0:	f7ff ffc8 	bl	8003c64 <LL_AHB3_GRP1_EnableClock>

	/* System interrupt init*/

	/* Peripheral interrupt init */
	/* HSEM_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	2100      	movs	r1, #0
 8003cd8:	202e      	movs	r0, #46	@ 0x2e
 8003cda:	f000 fbc0 	bl	800445e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8003cde:	202e      	movs	r0, #46	@ 0x2e
 8003ce0:	f000 fbd7 	bl	8004492 <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MspInit 1 */

	/* USER CODE END MspInit 1 */
}
 8003ce4:	bf00      	nop
 8003ce6:	bd80      	pop	{r7, pc}

08003ce8 <HAL_I2C_MspInit>:
 * @brief I2C MSP Initialization
 * This function configures the hardware resources used in this example
 * @param hi2c: I2C handle pointer
 * @retval None
 */
void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c) {
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b09c      	sub	sp, #112	@ 0x70
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8003cf0:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	601a      	str	r2, [r3, #0]
 8003cf8:	605a      	str	r2, [r3, #4]
 8003cfa:	609a      	str	r2, [r3, #8]
 8003cfc:	60da      	str	r2, [r3, #12]
 8003cfe:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 8003d00:	f107 030c 	add.w	r3, r7, #12
 8003d04:	2250      	movs	r2, #80	@ 0x50
 8003d06:	2100      	movs	r1, #0
 8003d08:	4618      	mov	r0, r3
 8003d0a:	f008 ffe5 	bl	800ccd8 <memset>
	if (hi2c->Instance == I2C1) {
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4a34      	ldr	r2, [pc, #208]	@ (8003de4 <HAL_I2C_MspInit+0xfc>)
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d160      	bne.n	8003dda <HAL_I2C_MspInit+0xf2>

		/* USER CODE END I2C1_MspInit 0 */

		/** Initializes the peripherals clock
		 */
		PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8003d18:	2304      	movs	r3, #4
 8003d1a:	60fb      	str	r3, [r7, #12]
		PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8003d1c:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 8003d20:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 8003d22:	f107 030c 	add.w	r3, r7, #12
 8003d26:	4618      	mov	r0, r3
 8003d28:	f004 fc8f 	bl	800864a <HAL_RCCEx_PeriphCLKConfig>
 8003d2c:	4603      	mov	r3, r0
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d001      	beq.n	8003d36 <HAL_I2C_MspInit+0x4e>
			Error_Handler();
 8003d32:	f7ff ff67 	bl	8003c04 <Error_Handler>
		}

		__HAL_RCC_GPIOB_CLK_ENABLE();
 8003d36:	2002      	movs	r0, #2
 8003d38:	f7ff ff7b 	bl	8003c32 <LL_AHB2_GRP1_EnableClock>
		/**I2C1 GPIO Configuration
		 PB8     ------> I2C1_SCL
		 PB9     ------> I2C1_SDA
		 */
		GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9;
 8003d3c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8003d40:	65fb      	str	r3, [r7, #92]	@ 0x5c
		GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003d42:	2312      	movs	r3, #18
 8003d44:	663b      	str	r3, [r7, #96]	@ 0x60
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d46:	2300      	movs	r3, #0
 8003d48:	667b      	str	r3, [r7, #100]	@ 0x64
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	66bb      	str	r3, [r7, #104]	@ 0x68
		GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003d4e:	2304      	movs	r3, #4
 8003d50:	66fb      	str	r3, [r7, #108]	@ 0x6c
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d52:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8003d56:	4619      	mov	r1, r3
 8003d58:	4823      	ldr	r0, [pc, #140]	@ (8003de8 <HAL_I2C_MspInit+0x100>)
 8003d5a:	f000 fec1 	bl	8004ae0 <HAL_GPIO_Init>

		/* Peripheral clock enable */
		__HAL_RCC_I2C1_CLK_ENABLE();
 8003d5e:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8003d62:	f7ff ff98 	bl	8003c96 <LL_APB1_GRP1_EnableClock>

		/* I2C1 DMA Init */
		/* I2C1_RX Init */
		hdma_i2c1_rx.Instance = DMA1_Channel7;
 8003d66:	4b21      	ldr	r3, [pc, #132]	@ (8003dec <HAL_I2C_MspInit+0x104>)
 8003d68:	4a21      	ldr	r2, [pc, #132]	@ (8003df0 <HAL_I2C_MspInit+0x108>)
 8003d6a:	601a      	str	r2, [r3, #0]
		hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
 8003d6c:	4b1f      	ldr	r3, [pc, #124]	@ (8003dec <HAL_I2C_MspInit+0x104>)
 8003d6e:	220a      	movs	r2, #10
 8003d70:	605a      	str	r2, [r3, #4]
		hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003d72:	4b1e      	ldr	r3, [pc, #120]	@ (8003dec <HAL_I2C_MspInit+0x104>)
 8003d74:	2200      	movs	r2, #0
 8003d76:	609a      	str	r2, [r3, #8]
		hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003d78:	4b1c      	ldr	r3, [pc, #112]	@ (8003dec <HAL_I2C_MspInit+0x104>)
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	60da      	str	r2, [r3, #12]
		hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003d7e:	4b1b      	ldr	r3, [pc, #108]	@ (8003dec <HAL_I2C_MspInit+0x104>)
 8003d80:	2280      	movs	r2, #128	@ 0x80
 8003d82:	611a      	str	r2, [r3, #16]
		hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003d84:	4b19      	ldr	r3, [pc, #100]	@ (8003dec <HAL_I2C_MspInit+0x104>)
 8003d86:	2200      	movs	r2, #0
 8003d88:	615a      	str	r2, [r3, #20]
		hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003d8a:	4b18      	ldr	r3, [pc, #96]	@ (8003dec <HAL_I2C_MspInit+0x104>)
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	619a      	str	r2, [r3, #24]
		hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8003d90:	4b16      	ldr	r3, [pc, #88]	@ (8003dec <HAL_I2C_MspInit+0x104>)
 8003d92:	2200      	movs	r2, #0
 8003d94:	61da      	str	r2, [r3, #28]
		hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8003d96:	4b15      	ldr	r3, [pc, #84]	@ (8003dec <HAL_I2C_MspInit+0x104>)
 8003d98:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003d9c:	621a      	str	r2, [r3, #32]
		if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK) {
 8003d9e:	4813      	ldr	r0, [pc, #76]	@ (8003dec <HAL_I2C_MspInit+0x104>)
 8003da0:	f000 fbbc 	bl	800451c <HAL_DMA_Init>
 8003da4:	4603      	mov	r3, r0
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d001      	beq.n	8003dae <HAL_I2C_MspInit+0xc6>
			Error_Handler();
 8003daa:	f7ff ff2b 	bl	8003c04 <Error_Handler>
		}

		__HAL_LINKDMA(hi2c, hdmarx, hdma_i2c1_rx);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	4a0e      	ldr	r2, [pc, #56]	@ (8003dec <HAL_I2C_MspInit+0x104>)
 8003db2:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003db4:	4a0d      	ldr	r2, [pc, #52]	@ (8003dec <HAL_I2C_MspInit+0x104>)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6293      	str	r3, [r2, #40]	@ 0x28

		/* I2C1 interrupt Init */
		HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8003dba:	2200      	movs	r2, #0
 8003dbc:	2100      	movs	r1, #0
 8003dbe:	201e      	movs	r0, #30
 8003dc0:	f000 fb4d 	bl	800445e <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8003dc4:	201e      	movs	r0, #30
 8003dc6:	f000 fb64 	bl	8004492 <HAL_NVIC_EnableIRQ>
		HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8003dca:	2200      	movs	r2, #0
 8003dcc:	2100      	movs	r1, #0
 8003dce:	201f      	movs	r0, #31
 8003dd0:	f000 fb45 	bl	800445e <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8003dd4:	201f      	movs	r0, #31
 8003dd6:	f000 fb5c 	bl	8004492 <HAL_NVIC_EnableIRQ>

		/* USER CODE END I2C1_MspInit 1 */

	}

}
 8003dda:	bf00      	nop
 8003ddc:	3770      	adds	r7, #112	@ 0x70
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bd80      	pop	{r7, pc}
 8003de2:	bf00      	nop
 8003de4:	40005400 	.word	0x40005400
 8003de8:	48000400 	.word	0x48000400
 8003dec:	20000224 	.word	0x20000224
 8003df0:	40020080 	.word	0x40020080

08003df4 <HAL_IPCC_MspInit>:
 * @brief IPCC MSP Initialization
 * This function configures the hardware resources used in this example
 * @param hipcc: IPCC handle pointer
 * @retval None
 */
void HAL_IPCC_MspInit(IPCC_HandleTypeDef *hipcc) {
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b082      	sub	sp, #8
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
	if (hipcc->Instance == IPCC) {
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a0d      	ldr	r2, [pc, #52]	@ (8003e38 <HAL_IPCC_MspInit+0x44>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d113      	bne.n	8003e2e <HAL_IPCC_MspInit+0x3a>
		/* USER CODE BEGIN IPCC_MspInit 0 */

		/* USER CODE END IPCC_MspInit 0 */
		/* Peripheral clock enable */
		__HAL_RCC_IPCC_CLK_ENABLE();
 8003e06:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8003e0a:	f7ff ff2b 	bl	8003c64 <LL_AHB3_GRP1_EnableClock>
		/* IPCC interrupt Init */
		HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 8003e0e:	2200      	movs	r2, #0
 8003e10:	2100      	movs	r1, #0
 8003e12:	202c      	movs	r0, #44	@ 0x2c
 8003e14:	f000 fb23 	bl	800445e <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8003e18:	202c      	movs	r0, #44	@ 0x2c
 8003e1a:	f000 fb3a 	bl	8004492 <HAL_NVIC_EnableIRQ>
		HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 8003e1e:	2200      	movs	r2, #0
 8003e20:	2100      	movs	r1, #0
 8003e22:	202d      	movs	r0, #45	@ 0x2d
 8003e24:	f000 fb1b 	bl	800445e <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8003e28:	202d      	movs	r0, #45	@ 0x2d
 8003e2a:	f000 fb32 	bl	8004492 <HAL_NVIC_EnableIRQ>

		/* USER CODE END IPCC_MspInit 1 */

	}

}
 8003e2e:	bf00      	nop
 8003e30:	3708      	adds	r7, #8
 8003e32:	46bd      	mov	sp, r7
 8003e34:	bd80      	pop	{r7, pc}
 8003e36:	bf00      	nop
 8003e38:	58000c00 	.word	0x58000c00

08003e3c <HAL_RTC_MspInit>:
 * @brief RTC MSP Initialization
 * This function configures the hardware resources used in this example
 * @param hrtc: RTC handle pointer
 * @retval None
 */
void HAL_RTC_MspInit(RTC_HandleTypeDef *hrtc) {
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b096      	sub	sp, #88	@ 0x58
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 8003e44:	f107 0308 	add.w	r3, r7, #8
 8003e48:	2250      	movs	r2, #80	@ 0x50
 8003e4a:	2100      	movs	r1, #0
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	f008 ff43 	bl	800ccd8 <memset>
	if (hrtc->Instance == RTC) {
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4a12      	ldr	r2, [pc, #72]	@ (8003ea0 <HAL_RTC_MspInit+0x64>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d11d      	bne.n	8003e98 <HAL_RTC_MspInit+0x5c>

		/* USER CODE END RTC_MspInit 0 */

		/** Initializes the peripherals clock
		 */
		PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003e5c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003e60:	60bb      	str	r3, [r7, #8]
		PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8003e62:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003e66:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 8003e68:	f107 0308 	add.w	r3, r7, #8
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	f004 fbec 	bl	800864a <HAL_RCCEx_PeriphCLKConfig>
 8003e72:	4603      	mov	r3, r0
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d001      	beq.n	8003e7c <HAL_RTC_MspInit+0x40>
			Error_Handler();
 8003e78:	f7ff fec4 	bl	8003c04 <Error_Handler>
		}

		/* Peripheral clock enable */
		__HAL_RCC_RTC_ENABLE();
 8003e7c:	f7ff fec8 	bl	8003c10 <LL_RCC_EnableRTC>
		__HAL_RCC_RTCAPB_CLK_ENABLE();
 8003e80:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8003e84:	f7ff ff07 	bl	8003c96 <LL_APB1_GRP1_EnableClock>
		/* RTC interrupt Init */
		HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8003e88:	2200      	movs	r2, #0
 8003e8a:	2100      	movs	r1, #0
 8003e8c:	2003      	movs	r0, #3
 8003e8e:	f000 fae6 	bl	800445e <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8003e92:	2003      	movs	r0, #3
 8003e94:	f000 fafd 	bl	8004492 <HAL_NVIC_EnableIRQ>

		/* USER CODE END RTC_MspInit 1 */

	}

}
 8003e98:	bf00      	nop
 8003e9a:	3758      	adds	r7, #88	@ 0x58
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	bd80      	pop	{r7, pc}
 8003ea0:	40002800 	.word	0x40002800

08003ea4 <HAL_TIM_Base_MspInit>:
 * @brief TIM_Base MSP Initialization
 * This function configures the hardware resources used in this example
 * @param htim_base: TIM_Base handle pointer
 * @retval None
 */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim_base) {
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b082      	sub	sp, #8
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
	if (htim_base->Instance == TIM2) {
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003eb4:	d102      	bne.n	8003ebc <HAL_TIM_Base_MspInit+0x18>
		/* USER CODE BEGIN TIM2_MspInit 0 */

		/* USER CODE END TIM2_MspInit 0 */
		/* Peripheral clock enable */
		__HAL_RCC_TIM2_CLK_ENABLE();
 8003eb6:	2001      	movs	r0, #1
 8003eb8:	f7ff feed 	bl	8003c96 <LL_APB1_GRP1_EnableClock>

		/* USER CODE END TIM2_MspInit 1 */

	}

}
 8003ebc:	bf00      	nop
 8003ebe:	3708      	adds	r7, #8
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	bd80      	pop	{r7, pc}

08003ec4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8003ec8:	bf00      	nop
 8003eca:	e7fd      	b.n	8003ec8 <NMI_Handler+0x4>

08003ecc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003ecc:	b480      	push	{r7}
 8003ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003ed0:	bf00      	nop
 8003ed2:	e7fd      	b.n	8003ed0 <HardFault_Handler+0x4>

08003ed4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003ed8:	bf00      	nop
 8003eda:	e7fd      	b.n	8003ed8 <MemManage_Handler+0x4>

08003edc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003edc:	b480      	push	{r7}
 8003ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003ee0:	bf00      	nop
 8003ee2:	e7fd      	b.n	8003ee0 <BusFault_Handler+0x4>

08003ee4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003ee8:	bf00      	nop
 8003eea:	e7fd      	b.n	8003ee8 <UsageFault_Handler+0x4>

08003eec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003eec:	b480      	push	{r7}
 8003eee:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003ef0:	bf00      	nop
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef8:	4770      	bx	lr

08003efa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003efa:	b480      	push	{r7}
 8003efc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003efe:	bf00      	nop
 8003f00:	46bd      	mov	sp, r7
 8003f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f06:	4770      	bx	lr

08003f08 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003f08:	b480      	push	{r7}
 8003f0a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003f0c:	bf00      	nop
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f14:	4770      	bx	lr

08003f16 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003f16:	b580      	push	{r7, lr}
 8003f18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003f1a:	f000 f92d 	bl	8004178 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003f1e:	bf00      	nop
 8003f20:	bd80      	pop	{r7, pc}

08003f22 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 8003f22:	b580      	push	{r7, lr}
 8003f24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8003f26:	f7fd fbad 	bl	8001684 <HW_TS_RTC_Wakeup_Handler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8003f2a:	bf00      	nop
 8003f2c:	bd80      	pop	{r7, pc}
	...

08003f30 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */
	interrupt_cnt ++;
 8003f34:	4b04      	ldr	r3, [pc, #16]	@ (8003f48 <DMA1_Channel7_IRQHandler+0x18>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	3301      	adds	r3, #1
 8003f3a:	4a03      	ldr	r2, [pc, #12]	@ (8003f48 <DMA1_Channel7_IRQHandler+0x18>)
 8003f3c:	6013      	str	r3, [r2, #0]
  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8003f3e:	4803      	ldr	r0, [pc, #12]	@ (8003f4c <DMA1_Channel7_IRQHandler+0x1c>)
 8003f40:	f000 fc6e 	bl	8004820 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8003f44:	bf00      	nop
 8003f46:	bd80      	pop	{r7, pc}
 8003f48:	200003ac 	.word	0x200003ac
 8003f4c:	20000224 	.word	0x20000224

08003f50 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8003f54:	4802      	ldr	r0, [pc, #8]	@ (8003f60 <I2C1_EV_IRQHandler+0x10>)
 8003f56:	f001 fa1f 	bl	8005398 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8003f5a:	bf00      	nop
 8003f5c:	bd80      	pop	{r7, pc}
 8003f5e:	bf00      	nop
 8003f60:	200001d0 	.word	0x200001d0

08003f64 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8003f68:	4802      	ldr	r0, [pc, #8]	@ (8003f74 <I2C1_ER_IRQHandler+0x10>)
 8003f6a:	f001 fa2f 	bl	80053cc <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8003f6e:	bf00      	nop
 8003f70:	bd80      	pop	{r7, pc}
 8003f72:	bf00      	nop
 8003f74:	200001d0 	.word	0x200001d0

08003f78 <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 8003f7c:	f008 faf2 	bl	800c564 <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 8003f80:	bf00      	nop
 8003f82:	bd80      	pop	{r7, pc}

08003f84 <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 8003f88:	f008 fb22 	bl	800c5d0 <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 8003f8c:	bf00      	nop
 8003f8e:	bd80      	pop	{r7, pc}

08003f90 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8003f94:	f000 ff46 	bl	8004e24 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 8003f98:	bf00      	nop
 8003f9a:	bd80      	pop	{r7, pc}

08003f9c <DMAMUX1_OVR_IRQHandler>:

/**
  * @brief This function handles DMAMUX1 overrun interrupt.
  */
void DMAMUX1_OVR_IRQHandler(void)
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	af00      	add	r7, sp, #0
  /* USER CODE END DMAMUX1_OVR_IRQn 0 */

  /* USER CODE BEGIN DMAMUX1_OVR_IRQn 1 */

  /* USER CODE END DMAMUX1_OVR_IRQn 1 */
}
 8003fa0:	bf00      	nop
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa8:	4770      	bx	lr
	...

08003fac <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003fac:	b480      	push	{r7}
 8003fae:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8003fb0:	4b24      	ldr	r3, [pc, #144]	@ (8004044 <SystemInit+0x98>)
 8003fb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fb6:	4a23      	ldr	r2, [pc, #140]	@ (8004044 <SystemInit+0x98>)
 8003fb8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003fbc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8003fc0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003fca:	f043 0301 	orr.w	r3, r3, #1
 8003fce:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8003fd0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003fd4:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 8003fd8:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8003fda:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003fde:	681a      	ldr	r2, [r3, #0]
 8003fe0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003fe4:	4b18      	ldr	r3, [pc, #96]	@ (8004048 <SystemInit+0x9c>)
 8003fe6:	4013      	ands	r3, r2
 8003fe8:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8003fea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003fee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003ff2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003ff6:	f023 0305 	bic.w	r3, r3, #5
 8003ffa:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8003ffe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004002:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004006:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800400a:	f023 0301 	bic.w	r3, r3, #1
 800400e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8004012:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004016:	4a0d      	ldr	r2, [pc, #52]	@ (800404c <SystemInit+0xa0>)
 8004018:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 800401a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800401e:	4a0b      	ldr	r2, [pc, #44]	@ (800404c <SystemInit+0xa0>)
 8004020:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004022:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800402c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004030:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8004032:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004036:	2200      	movs	r2, #0
 8004038:	619a      	str	r2, [r3, #24]
}
 800403a:	bf00      	nop
 800403c:	46bd      	mov	sp, r7
 800403e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004042:	4770      	bx	lr
 8004044:	e000ed00 	.word	0xe000ed00
 8004048:	faf6fefb 	.word	0xfaf6fefb
 800404c:	22041000 	.word	0x22041000

08004050 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8004050:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004052:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004054:	3304      	adds	r3, #4

08004056 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004056:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004058:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 800405a:	d3f9      	bcc.n	8004050 <CopyDataInit>
  bx lr
 800405c:	4770      	bx	lr

0800405e <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 800405e:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8004060:	3004      	adds	r0, #4

08004062 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8004062:	4288      	cmp	r0, r1
  bcc FillZerobss
 8004064:	d3fb      	bcc.n	800405e <FillZerobss>
  bx lr
 8004066:	4770      	bx	lr

08004068 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004068:	480c      	ldr	r0, [pc, #48]	@ (800409c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800406a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800406c:	f7ff ff9e 	bl	8003fac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8004070:	480b      	ldr	r0, [pc, #44]	@ (80040a0 <LoopForever+0x6>)
 8004072:	490c      	ldr	r1, [pc, #48]	@ (80040a4 <LoopForever+0xa>)
 8004074:	4a0c      	ldr	r2, [pc, #48]	@ (80040a8 <LoopForever+0xe>)
 8004076:	2300      	movs	r3, #0
 8004078:	f7ff ffed 	bl	8004056 <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 800407c:	480b      	ldr	r0, [pc, #44]	@ (80040ac <LoopForever+0x12>)
 800407e:	490c      	ldr	r1, [pc, #48]	@ (80040b0 <LoopForever+0x16>)
 8004080:	4a0c      	ldr	r2, [pc, #48]	@ (80040b4 <LoopForever+0x1a>)
 8004082:	2300      	movs	r3, #0
 8004084:	f7ff ffe7 	bl	8004056 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8004088:	480b      	ldr	r0, [pc, #44]	@ (80040b8 <LoopForever+0x1e>)
 800408a:	490c      	ldr	r1, [pc, #48]	@ (80040bc <LoopForever+0x22>)
 800408c:	2300      	movs	r3, #0
 800408e:	f7ff ffe8 	bl	8004062 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8004092:	f008 fe2f 	bl	800ccf4 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8004096:	f7ff fb8d 	bl	80037b4 <main>

0800409a <LoopForever>:

LoopForever:
  b LoopForever
 800409a:	e7fe      	b.n	800409a <LoopForever>
  ldr   r0, =_estack
 800409c:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 80040a0:	20000008 	.word	0x20000008
 80040a4:	200000c8 	.word	0x200000c8
 80040a8:	0800d204 	.word	0x0800d204
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 80040ac:	200301e4 	.word	0x200301e4
 80040b0:	20030a67 	.word	0x20030a67
 80040b4:	0800d30a 	.word	0x0800d30a
  INIT_BSS _sbss, _ebss
 80040b8:	20000114 	.word	0x20000114
 80040bc:	200009c8 	.word	0x200009c8

080040c0 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80040c0:	e7fe      	b.n	80040c0 <ADC1_IRQHandler>
	...

080040c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b082      	sub	sp, #8
 80040c8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80040ca:	2300      	movs	r3, #0
 80040cc:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80040ce:	4b0c      	ldr	r3, [pc, #48]	@ (8004100 <HAL_Init+0x3c>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4a0b      	ldr	r2, [pc, #44]	@ (8004100 <HAL_Init+0x3c>)
 80040d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80040d8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80040da:	2003      	movs	r0, #3
 80040dc:	f000 f9b4 	bl	8004448 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80040e0:	2000      	movs	r0, #0
 80040e2:	f000 f80f 	bl	8004104 <HAL_InitTick>
 80040e6:	4603      	mov	r3, r0
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d002      	beq.n	80040f2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80040ec:	2301      	movs	r3, #1
 80040ee:	71fb      	strb	r3, [r7, #7]
 80040f0:	e001      	b.n	80040f6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80040f2:	f7ff fde9 	bl	8003cc8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80040f6:	79fb      	ldrb	r3, [r7, #7]
}
 80040f8:	4618      	mov	r0, r3
 80040fa:	3708      	adds	r7, #8
 80040fc:	46bd      	mov	sp, r7
 80040fe:	bd80      	pop	{r7, pc}
 8004100:	58004000 	.word	0x58004000

08004104 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b084      	sub	sp, #16
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800410c:	2300      	movs	r3, #0
 800410e:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8004110:	4b17      	ldr	r3, [pc, #92]	@ (8004170 <HAL_InitTick+0x6c>)
 8004112:	781b      	ldrb	r3, [r3, #0]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d024      	beq.n	8004162 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8004118:	f004 f832 	bl	8008180 <HAL_RCC_GetHCLKFreq>
 800411c:	4602      	mov	r2, r0
 800411e:	4b14      	ldr	r3, [pc, #80]	@ (8004170 <HAL_InitTick+0x6c>)
 8004120:	781b      	ldrb	r3, [r3, #0]
 8004122:	4619      	mov	r1, r3
 8004124:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004128:	fbb3 f3f1 	udiv	r3, r3, r1
 800412c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004130:	4618      	mov	r0, r3
 8004132:	f000 f9ca 	bl	80044ca <HAL_SYSTICK_Config>
 8004136:	4603      	mov	r3, r0
 8004138:	2b00      	cmp	r3, #0
 800413a:	d10f      	bne.n	800415c <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2b0f      	cmp	r3, #15
 8004140:	d809      	bhi.n	8004156 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004142:	2200      	movs	r2, #0
 8004144:	6879      	ldr	r1, [r7, #4]
 8004146:	f04f 30ff 	mov.w	r0, #4294967295
 800414a:	f000 f988 	bl	800445e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800414e:	4a09      	ldr	r2, [pc, #36]	@ (8004174 <HAL_InitTick+0x70>)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6013      	str	r3, [r2, #0]
 8004154:	e007      	b.n	8004166 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8004156:	2301      	movs	r3, #1
 8004158:	73fb      	strb	r3, [r7, #15]
 800415a:	e004      	b.n	8004166 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 800415c:	2301      	movs	r3, #1
 800415e:	73fb      	strb	r3, [r7, #15]
 8004160:	e001      	b.n	8004166 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004162:	2301      	movs	r3, #1
 8004164:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8004166:	7bfb      	ldrb	r3, [r7, #15]
}
 8004168:	4618      	mov	r0, r3
 800416a:	3710      	adds	r7, #16
 800416c:	46bd      	mov	sp, r7
 800416e:	bd80      	pop	{r7, pc}
 8004170:	20000048 	.word	0x20000048
 8004174:	20000044 	.word	0x20000044

08004178 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004178:	b480      	push	{r7}
 800417a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800417c:	4b06      	ldr	r3, [pc, #24]	@ (8004198 <HAL_IncTick+0x20>)
 800417e:	781b      	ldrb	r3, [r3, #0]
 8004180:	461a      	mov	r2, r3
 8004182:	4b06      	ldr	r3, [pc, #24]	@ (800419c <HAL_IncTick+0x24>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4413      	add	r3, r2
 8004188:	4a04      	ldr	r2, [pc, #16]	@ (800419c <HAL_IncTick+0x24>)
 800418a:	6013      	str	r3, [r2, #0]
}
 800418c:	bf00      	nop
 800418e:	46bd      	mov	sp, r7
 8004190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004194:	4770      	bx	lr
 8004196:	bf00      	nop
 8004198:	20000048 	.word	0x20000048
 800419c:	200004d0 	.word	0x200004d0

080041a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80041a0:	b480      	push	{r7}
 80041a2:	af00      	add	r7, sp, #0
  return uwTick;
 80041a4:	4b03      	ldr	r3, [pc, #12]	@ (80041b4 <HAL_GetTick+0x14>)
 80041a6:	681b      	ldr	r3, [r3, #0]
}
 80041a8:	4618      	mov	r0, r3
 80041aa:	46bd      	mov	sp, r7
 80041ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b0:	4770      	bx	lr
 80041b2:	bf00      	nop
 80041b4:	200004d0 	.word	0x200004d0

080041b8 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 80041b8:	b480      	push	{r7}
 80041ba:	af00      	add	r7, sp, #0
  return uwTickPrio;
 80041bc:	4b03      	ldr	r3, [pc, #12]	@ (80041cc <HAL_GetTickPrio+0x14>)
 80041be:	681b      	ldr	r3, [r3, #0]
}
 80041c0:	4618      	mov	r0, r3
 80041c2:	46bd      	mov	sp, r7
 80041c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c8:	4770      	bx	lr
 80041ca:	bf00      	nop
 80041cc:	20000044 	.word	0x20000044

080041d0 <HAL_GetTickFreq>:
  * @brief Return tick frequency.
  * @retval Tick frequency.
  *         Value of @ref HAL_TickFreqTypeDef.
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
 80041d0:	b480      	push	{r7}
 80041d2:	af00      	add	r7, sp, #0
  return uwTickFreq;
 80041d4:	4b03      	ldr	r3, [pc, #12]	@ (80041e4 <HAL_GetTickFreq+0x14>)
 80041d6:	781b      	ldrb	r3, [r3, #0]
}
 80041d8:	4618      	mov	r0, r3
 80041da:	46bd      	mov	sp, r7
 80041dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e0:	4770      	bx	lr
 80041e2:	bf00      	nop
 80041e4:	20000048 	.word	0x20000048

080041e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80041e8:	b480      	push	{r7}
 80041ea:	b085      	sub	sp, #20
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	f003 0307 	and.w	r3, r3, #7
 80041f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80041f8:	4b0c      	ldr	r3, [pc, #48]	@ (800422c <__NVIC_SetPriorityGrouping+0x44>)
 80041fa:	68db      	ldr	r3, [r3, #12]
 80041fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80041fe:	68ba      	ldr	r2, [r7, #8]
 8004200:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004204:	4013      	ands	r3, r2
 8004206:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800420c:	68bb      	ldr	r3, [r7, #8]
 800420e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004210:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004214:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004218:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800421a:	4a04      	ldr	r2, [pc, #16]	@ (800422c <__NVIC_SetPriorityGrouping+0x44>)
 800421c:	68bb      	ldr	r3, [r7, #8]
 800421e:	60d3      	str	r3, [r2, #12]
}
 8004220:	bf00      	nop
 8004222:	3714      	adds	r7, #20
 8004224:	46bd      	mov	sp, r7
 8004226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422a:	4770      	bx	lr
 800422c:	e000ed00 	.word	0xe000ed00

08004230 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004230:	b480      	push	{r7}
 8004232:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004234:	4b04      	ldr	r3, [pc, #16]	@ (8004248 <__NVIC_GetPriorityGrouping+0x18>)
 8004236:	68db      	ldr	r3, [r3, #12]
 8004238:	0a1b      	lsrs	r3, r3, #8
 800423a:	f003 0307 	and.w	r3, r3, #7
}
 800423e:	4618      	mov	r0, r3
 8004240:	46bd      	mov	sp, r7
 8004242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004246:	4770      	bx	lr
 8004248:	e000ed00 	.word	0xe000ed00

0800424c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800424c:	b480      	push	{r7}
 800424e:	b083      	sub	sp, #12
 8004250:	af00      	add	r7, sp, #0
 8004252:	4603      	mov	r3, r0
 8004254:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004256:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800425a:	2b00      	cmp	r3, #0
 800425c:	db0b      	blt.n	8004276 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800425e:	79fb      	ldrb	r3, [r7, #7]
 8004260:	f003 021f 	and.w	r2, r3, #31
 8004264:	4907      	ldr	r1, [pc, #28]	@ (8004284 <__NVIC_EnableIRQ+0x38>)
 8004266:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800426a:	095b      	lsrs	r3, r3, #5
 800426c:	2001      	movs	r0, #1
 800426e:	fa00 f202 	lsl.w	r2, r0, r2
 8004272:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004276:	bf00      	nop
 8004278:	370c      	adds	r7, #12
 800427a:	46bd      	mov	sp, r7
 800427c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004280:	4770      	bx	lr
 8004282:	bf00      	nop
 8004284:	e000e100 	.word	0xe000e100

08004288 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004288:	b480      	push	{r7}
 800428a:	b083      	sub	sp, #12
 800428c:	af00      	add	r7, sp, #0
 800428e:	4603      	mov	r3, r0
 8004290:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004292:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004296:	2b00      	cmp	r3, #0
 8004298:	db12      	blt.n	80042c0 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800429a:	79fb      	ldrb	r3, [r7, #7]
 800429c:	f003 021f 	and.w	r2, r3, #31
 80042a0:	490a      	ldr	r1, [pc, #40]	@ (80042cc <__NVIC_DisableIRQ+0x44>)
 80042a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042a6:	095b      	lsrs	r3, r3, #5
 80042a8:	2001      	movs	r0, #1
 80042aa:	fa00 f202 	lsl.w	r2, r0, r2
 80042ae:	3320      	adds	r3, #32
 80042b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80042b4:	f3bf 8f4f 	dsb	sy
}
 80042b8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80042ba:	f3bf 8f6f 	isb	sy
}
 80042be:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80042c0:	bf00      	nop
 80042c2:	370c      	adds	r7, #12
 80042c4:	46bd      	mov	sp, r7
 80042c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ca:	4770      	bx	lr
 80042cc:	e000e100 	.word	0xe000e100

080042d0 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 80042d0:	b480      	push	{r7}
 80042d2:	b083      	sub	sp, #12
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	4603      	mov	r3, r0
 80042d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80042da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	db0c      	blt.n	80042fc <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80042e2:	79fb      	ldrb	r3, [r7, #7]
 80042e4:	f003 021f 	and.w	r2, r3, #31
 80042e8:	4907      	ldr	r1, [pc, #28]	@ (8004308 <__NVIC_SetPendingIRQ+0x38>)
 80042ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042ee:	095b      	lsrs	r3, r3, #5
 80042f0:	2001      	movs	r0, #1
 80042f2:	fa00 f202 	lsl.w	r2, r0, r2
 80042f6:	3340      	adds	r3, #64	@ 0x40
 80042f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80042fc:	bf00      	nop
 80042fe:	370c      	adds	r7, #12
 8004300:	46bd      	mov	sp, r7
 8004302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004306:	4770      	bx	lr
 8004308:	e000e100 	.word	0xe000e100

0800430c <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 800430c:	b480      	push	{r7}
 800430e:	b083      	sub	sp, #12
 8004310:	af00      	add	r7, sp, #0
 8004312:	4603      	mov	r3, r0
 8004314:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004316:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800431a:	2b00      	cmp	r3, #0
 800431c:	db0c      	blt.n	8004338 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800431e:	79fb      	ldrb	r3, [r7, #7]
 8004320:	f003 021f 	and.w	r2, r3, #31
 8004324:	4907      	ldr	r1, [pc, #28]	@ (8004344 <__NVIC_ClearPendingIRQ+0x38>)
 8004326:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800432a:	095b      	lsrs	r3, r3, #5
 800432c:	2001      	movs	r0, #1
 800432e:	fa00 f202 	lsl.w	r2, r0, r2
 8004332:	3360      	adds	r3, #96	@ 0x60
 8004334:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004338:	bf00      	nop
 800433a:	370c      	adds	r7, #12
 800433c:	46bd      	mov	sp, r7
 800433e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004342:	4770      	bx	lr
 8004344:	e000e100 	.word	0xe000e100

08004348 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004348:	b480      	push	{r7}
 800434a:	b083      	sub	sp, #12
 800434c:	af00      	add	r7, sp, #0
 800434e:	4603      	mov	r3, r0
 8004350:	6039      	str	r1, [r7, #0]
 8004352:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004354:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004358:	2b00      	cmp	r3, #0
 800435a:	db0a      	blt.n	8004372 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	b2da      	uxtb	r2, r3
 8004360:	490c      	ldr	r1, [pc, #48]	@ (8004394 <__NVIC_SetPriority+0x4c>)
 8004362:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004366:	0112      	lsls	r2, r2, #4
 8004368:	b2d2      	uxtb	r2, r2
 800436a:	440b      	add	r3, r1
 800436c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004370:	e00a      	b.n	8004388 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	b2da      	uxtb	r2, r3
 8004376:	4908      	ldr	r1, [pc, #32]	@ (8004398 <__NVIC_SetPriority+0x50>)
 8004378:	79fb      	ldrb	r3, [r7, #7]
 800437a:	f003 030f 	and.w	r3, r3, #15
 800437e:	3b04      	subs	r3, #4
 8004380:	0112      	lsls	r2, r2, #4
 8004382:	b2d2      	uxtb	r2, r2
 8004384:	440b      	add	r3, r1
 8004386:	761a      	strb	r2, [r3, #24]
}
 8004388:	bf00      	nop
 800438a:	370c      	adds	r7, #12
 800438c:	46bd      	mov	sp, r7
 800438e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004392:	4770      	bx	lr
 8004394:	e000e100 	.word	0xe000e100
 8004398:	e000ed00 	.word	0xe000ed00

0800439c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800439c:	b480      	push	{r7}
 800439e:	b089      	sub	sp, #36	@ 0x24
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	60f8      	str	r0, [r7, #12]
 80043a4:	60b9      	str	r1, [r7, #8]
 80043a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	f003 0307 	and.w	r3, r3, #7
 80043ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80043b0:	69fb      	ldr	r3, [r7, #28]
 80043b2:	f1c3 0307 	rsb	r3, r3, #7
 80043b6:	2b04      	cmp	r3, #4
 80043b8:	bf28      	it	cs
 80043ba:	2304      	movcs	r3, #4
 80043bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80043be:	69fb      	ldr	r3, [r7, #28]
 80043c0:	3304      	adds	r3, #4
 80043c2:	2b06      	cmp	r3, #6
 80043c4:	d902      	bls.n	80043cc <NVIC_EncodePriority+0x30>
 80043c6:	69fb      	ldr	r3, [r7, #28]
 80043c8:	3b03      	subs	r3, #3
 80043ca:	e000      	b.n	80043ce <NVIC_EncodePriority+0x32>
 80043cc:	2300      	movs	r3, #0
 80043ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80043d0:	f04f 32ff 	mov.w	r2, #4294967295
 80043d4:	69bb      	ldr	r3, [r7, #24]
 80043d6:	fa02 f303 	lsl.w	r3, r2, r3
 80043da:	43da      	mvns	r2, r3
 80043dc:	68bb      	ldr	r3, [r7, #8]
 80043de:	401a      	ands	r2, r3
 80043e0:	697b      	ldr	r3, [r7, #20]
 80043e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80043e4:	f04f 31ff 	mov.w	r1, #4294967295
 80043e8:	697b      	ldr	r3, [r7, #20]
 80043ea:	fa01 f303 	lsl.w	r3, r1, r3
 80043ee:	43d9      	mvns	r1, r3
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80043f4:	4313      	orrs	r3, r2
         );
}
 80043f6:	4618      	mov	r0, r3
 80043f8:	3724      	adds	r7, #36	@ 0x24
 80043fa:	46bd      	mov	sp, r7
 80043fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004400:	4770      	bx	lr
	...

08004404 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b082      	sub	sp, #8
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	3b01      	subs	r3, #1
 8004410:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004414:	d301      	bcc.n	800441a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004416:	2301      	movs	r3, #1
 8004418:	e00f      	b.n	800443a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800441a:	4a0a      	ldr	r2, [pc, #40]	@ (8004444 <SysTick_Config+0x40>)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	3b01      	subs	r3, #1
 8004420:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004422:	210f      	movs	r1, #15
 8004424:	f04f 30ff 	mov.w	r0, #4294967295
 8004428:	f7ff ff8e 	bl	8004348 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800442c:	4b05      	ldr	r3, [pc, #20]	@ (8004444 <SysTick_Config+0x40>)
 800442e:	2200      	movs	r2, #0
 8004430:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004432:	4b04      	ldr	r3, [pc, #16]	@ (8004444 <SysTick_Config+0x40>)
 8004434:	2207      	movs	r2, #7
 8004436:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004438:	2300      	movs	r3, #0
}
 800443a:	4618      	mov	r0, r3
 800443c:	3708      	adds	r7, #8
 800443e:	46bd      	mov	sp, r7
 8004440:	bd80      	pop	{r7, pc}
 8004442:	bf00      	nop
 8004444:	e000e010 	.word	0xe000e010

08004448 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b082      	sub	sp, #8
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004450:	6878      	ldr	r0, [r7, #4]
 8004452:	f7ff fec9 	bl	80041e8 <__NVIC_SetPriorityGrouping>
}
 8004456:	bf00      	nop
 8004458:	3708      	adds	r7, #8
 800445a:	46bd      	mov	sp, r7
 800445c:	bd80      	pop	{r7, pc}

0800445e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800445e:	b580      	push	{r7, lr}
 8004460:	b086      	sub	sp, #24
 8004462:	af00      	add	r7, sp, #0
 8004464:	4603      	mov	r3, r0
 8004466:	60b9      	str	r1, [r7, #8]
 8004468:	607a      	str	r2, [r7, #4]
 800446a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800446c:	f7ff fee0 	bl	8004230 <__NVIC_GetPriorityGrouping>
 8004470:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004472:	687a      	ldr	r2, [r7, #4]
 8004474:	68b9      	ldr	r1, [r7, #8]
 8004476:	6978      	ldr	r0, [r7, #20]
 8004478:	f7ff ff90 	bl	800439c <NVIC_EncodePriority>
 800447c:	4602      	mov	r2, r0
 800447e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004482:	4611      	mov	r1, r2
 8004484:	4618      	mov	r0, r3
 8004486:	f7ff ff5f 	bl	8004348 <__NVIC_SetPriority>
}
 800448a:	bf00      	nop
 800448c:	3718      	adds	r7, #24
 800448e:	46bd      	mov	sp, r7
 8004490:	bd80      	pop	{r7, pc}

08004492 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004492:	b580      	push	{r7, lr}
 8004494:	b082      	sub	sp, #8
 8004496:	af00      	add	r7, sp, #0
 8004498:	4603      	mov	r3, r0
 800449a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800449c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044a0:	4618      	mov	r0, r3
 80044a2:	f7ff fed3 	bl	800424c <__NVIC_EnableIRQ>
}
 80044a6:	bf00      	nop
 80044a8:	3708      	adds	r7, #8
 80044aa:	46bd      	mov	sp, r7
 80044ac:	bd80      	pop	{r7, pc}

080044ae <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80044ae:	b580      	push	{r7, lr}
 80044b0:	b082      	sub	sp, #8
 80044b2:	af00      	add	r7, sp, #0
 80044b4:	4603      	mov	r3, r0
 80044b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80044b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044bc:	4618      	mov	r0, r3
 80044be:	f7ff fee3 	bl	8004288 <__NVIC_DisableIRQ>
}
 80044c2:	bf00      	nop
 80044c4:	3708      	adds	r7, #8
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bd80      	pop	{r7, pc}

080044ca <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80044ca:	b580      	push	{r7, lr}
 80044cc:	b082      	sub	sp, #8
 80044ce:	af00      	add	r7, sp, #0
 80044d0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80044d2:	6878      	ldr	r0, [r7, #4]
 80044d4:	f7ff ff96 	bl	8004404 <SysTick_Config>
 80044d8:	4603      	mov	r3, r0
}
 80044da:	4618      	mov	r0, r3
 80044dc:	3708      	adds	r7, #8
 80044de:	46bd      	mov	sp, r7
 80044e0:	bd80      	pop	{r7, pc}

080044e2 <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 80044e2:	b580      	push	{r7, lr}
 80044e4:	b082      	sub	sp, #8
 80044e6:	af00      	add	r7, sp, #0
 80044e8:	4603      	mov	r3, r0
 80044ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 80044ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044f0:	4618      	mov	r0, r3
 80044f2:	f7ff feed 	bl	80042d0 <__NVIC_SetPendingIRQ>
}
 80044f6:	bf00      	nop
 80044f8:	3708      	adds	r7, #8
 80044fa:	46bd      	mov	sp, r7
 80044fc:	bd80      	pop	{r7, pc}

080044fe <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80044fe:	b580      	push	{r7, lr}
 8004500:	b082      	sub	sp, #8
 8004502:	af00      	add	r7, sp, #0
 8004504:	4603      	mov	r3, r0
 8004506:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8004508:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800450c:	4618      	mov	r0, r3
 800450e:	f7ff fefd 	bl	800430c <__NVIC_ClearPendingIRQ>
}
 8004512:	bf00      	nop
 8004514:	3708      	adds	r7, #8
 8004516:	46bd      	mov	sp, r7
 8004518:	bd80      	pop	{r7, pc}
	...

0800451c <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b084      	sub	sp, #16
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d101      	bne.n	800452e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800452a:	2301      	movs	r3, #1
 800452c:	e08e      	b.n	800464c <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	461a      	mov	r2, r3
 8004534:	4b47      	ldr	r3, [pc, #284]	@ (8004654 <HAL_DMA_Init+0x138>)
 8004536:	429a      	cmp	r2, r3
 8004538:	d80f      	bhi.n	800455a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	461a      	mov	r2, r3
 8004540:	4b45      	ldr	r3, [pc, #276]	@ (8004658 <HAL_DMA_Init+0x13c>)
 8004542:	4413      	add	r3, r2
 8004544:	4a45      	ldr	r2, [pc, #276]	@ (800465c <HAL_DMA_Init+0x140>)
 8004546:	fba2 2303 	umull	r2, r3, r2, r3
 800454a:	091b      	lsrs	r3, r3, #4
 800454c:	009a      	lsls	r2, r3, #2
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	4a42      	ldr	r2, [pc, #264]	@ (8004660 <HAL_DMA_Init+0x144>)
 8004556:	641a      	str	r2, [r3, #64]	@ 0x40
 8004558:	e00e      	b.n	8004578 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	461a      	mov	r2, r3
 8004560:	4b40      	ldr	r3, [pc, #256]	@ (8004664 <HAL_DMA_Init+0x148>)
 8004562:	4413      	add	r3, r2
 8004564:	4a3d      	ldr	r2, [pc, #244]	@ (800465c <HAL_DMA_Init+0x140>)
 8004566:	fba2 2303 	umull	r2, r3, r2, r3
 800456a:	091b      	lsrs	r3, r3, #4
 800456c:	009a      	lsls	r2, r3, #2
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	4a3c      	ldr	r2, [pc, #240]	@ (8004668 <HAL_DMA_Init+0x14c>)
 8004576:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2202      	movs	r2, #2
 800457c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800458e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004592:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800459c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	691b      	ldr	r3, [r3, #16]
 80045a2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80045a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	699b      	ldr	r3, [r3, #24]
 80045ae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80045b4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6a1b      	ldr	r3, [r3, #32]
 80045ba:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80045bc:	68fa      	ldr	r2, [r7, #12]
 80045be:	4313      	orrs	r3, r2
 80045c0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	68fa      	ldr	r2, [r7, #12]
 80045c8:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80045ca:	6878      	ldr	r0, [r7, #4]
 80045cc:	f000 fa24 	bl	8004a18 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	689b      	ldr	r3, [r3, #8]
 80045d4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80045d8:	d102      	bne.n	80045e0 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2200      	movs	r2, #0
 80045de:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	685a      	ldr	r2, [r3, #4]
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80045e8:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 80045ec:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80045f2:	687a      	ldr	r2, [r7, #4]
 80045f4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80045f6:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	685b      	ldr	r3, [r3, #4]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d010      	beq.n	8004622 <HAL_DMA_Init+0x106>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	685b      	ldr	r3, [r3, #4]
 8004604:	2b04      	cmp	r3, #4
 8004606:	d80c      	bhi.n	8004622 <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004608:	6878      	ldr	r0, [r7, #4]
 800460a:	f000 fa43 	bl	8004a94 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004612:	2200      	movs	r2, #0
 8004614:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800461a:	687a      	ldr	r2, [r7, #4]
 800461c:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800461e:	605a      	str	r2, [r3, #4]
 8004620:	e008      	b.n	8004634 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2200      	movs	r2, #0
 8004626:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2200      	movs	r2, #0
 800462c:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2200      	movs	r2, #0
 8004632:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2200      	movs	r2, #0
 8004638:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2201      	movs	r2, #1
 800463e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2200      	movs	r2, #0
 8004646:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800464a:	2300      	movs	r3, #0
}
 800464c:	4618      	mov	r0, r3
 800464e:	3710      	adds	r7, #16
 8004650:	46bd      	mov	sp, r7
 8004652:	bd80      	pop	{r7, pc}
 8004654:	40020407 	.word	0x40020407
 8004658:	bffdfff8 	.word	0xbffdfff8
 800465c:	cccccccd 	.word	0xcccccccd
 8004660:	40020000 	.word	0x40020000
 8004664:	bffdfbf8 	.word	0xbffdfbf8
 8004668:	40020400 	.word	0x40020400

0800466c <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b086      	sub	sp, #24
 8004670:	af00      	add	r7, sp, #0
 8004672:	60f8      	str	r0, [r7, #12]
 8004674:	60b9      	str	r1, [r7, #8]
 8004676:	607a      	str	r2, [r7, #4]
 8004678:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800467a:	2300      	movs	r3, #0
 800467c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004684:	2b01      	cmp	r3, #1
 8004686:	d101      	bne.n	800468c <HAL_DMA_Start_IT+0x20>
 8004688:	2302      	movs	r3, #2
 800468a:	e066      	b.n	800475a <HAL_DMA_Start_IT+0xee>
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	2201      	movs	r2, #1
 8004690:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800469a:	b2db      	uxtb	r3, r3
 800469c:	2b01      	cmp	r3, #1
 800469e:	d155      	bne.n	800474c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	2202      	movs	r2, #2
 80046a4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	2200      	movs	r2, #0
 80046ac:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	681a      	ldr	r2, [r3, #0]
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f022 0201 	bic.w	r2, r2, #1
 80046bc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	687a      	ldr	r2, [r7, #4]
 80046c2:	68b9      	ldr	r1, [r7, #8]
 80046c4:	68f8      	ldr	r0, [r7, #12]
 80046c6:	f000 f968 	bl	800499a <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d008      	beq.n	80046e4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	681a      	ldr	r2, [r3, #0]
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f042 020e 	orr.w	r2, r2, #14
 80046e0:	601a      	str	r2, [r3, #0]
 80046e2:	e00f      	b.n	8004704 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	681a      	ldr	r2, [r3, #0]
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f022 0204 	bic.w	r2, r2, #4
 80046f2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	681a      	ldr	r2, [r3, #0]
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f042 020a 	orr.w	r2, r2, #10
 8004702:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800470e:	2b00      	cmp	r3, #0
 8004710:	d007      	beq.n	8004722 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004716:	681a      	ldr	r2, [r3, #0]
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800471c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004720:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004726:	2b00      	cmp	r3, #0
 8004728:	d007      	beq.n	800473a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800472e:	681a      	ldr	r2, [r3, #0]
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004734:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004738:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	681a      	ldr	r2, [r3, #0]
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f042 0201 	orr.w	r2, r2, #1
 8004748:	601a      	str	r2, [r3, #0]
 800474a:	e005      	b.n	8004758 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	2200      	movs	r2, #0
 8004750:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004754:	2302      	movs	r3, #2
 8004756:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004758:	7dfb      	ldrb	r3, [r7, #23]
}
 800475a:	4618      	mov	r0, r3
 800475c:	3718      	adds	r7, #24
 800475e:	46bd      	mov	sp, r7
 8004760:	bd80      	pop	{r7, pc}

08004762 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004762:	b580      	push	{r7, lr}
 8004764:	b084      	sub	sp, #16
 8004766:	af00      	add	r7, sp, #0
 8004768:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800476a:	2300      	movs	r3, #0
 800476c:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004774:	b2db      	uxtb	r3, r3
 8004776:	2b02      	cmp	r3, #2
 8004778:	d005      	beq.n	8004786 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2204      	movs	r2, #4
 800477e:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8004780:	2301      	movs	r3, #1
 8004782:	73fb      	strb	r3, [r7, #15]
 8004784:	e047      	b.n	8004816 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	681a      	ldr	r2, [r3, #0]
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f022 020e 	bic.w	r2, r2, #14
 8004794:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	681a      	ldr	r2, [r3, #0]
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f022 0201 	bic.w	r2, r2, #1
 80047a4:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80047aa:	681a      	ldr	r2, [r3, #0]
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80047b0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80047b4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047ba:	f003 021c 	and.w	r2, r3, #28
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047c2:	2101      	movs	r1, #1
 80047c4:	fa01 f202 	lsl.w	r2, r1, r2
 80047c8:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80047ce:	687a      	ldr	r2, [r7, #4]
 80047d0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80047d2:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d00c      	beq.n	80047f6 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047e0:	681a      	ldr	r2, [r3, #0]
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047e6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80047ea:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047f0:	687a      	ldr	r2, [r7, #4]
 80047f2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80047f4:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2201      	movs	r2, #1
 80047fa:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	2200      	movs	r2, #0
 8004802:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800480a:	2b00      	cmp	r3, #0
 800480c:	d003      	beq.n	8004816 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004812:	6878      	ldr	r0, [r7, #4]
 8004814:	4798      	blx	r3
    }
  }
  return status;
 8004816:	7bfb      	ldrb	r3, [r7, #15]
}
 8004818:	4618      	mov	r0, r3
 800481a:	3710      	adds	r7, #16
 800481c:	46bd      	mov	sp, r7
 800481e:	bd80      	pop	{r7, pc}

08004820 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b084      	sub	sp, #16
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800483c:	f003 031c 	and.w	r3, r3, #28
 8004840:	2204      	movs	r2, #4
 8004842:	409a      	lsls	r2, r3
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	4013      	ands	r3, r2
 8004848:	2b00      	cmp	r3, #0
 800484a:	d026      	beq.n	800489a <HAL_DMA_IRQHandler+0x7a>
 800484c:	68bb      	ldr	r3, [r7, #8]
 800484e:	f003 0304 	and.w	r3, r3, #4
 8004852:	2b00      	cmp	r3, #0
 8004854:	d021      	beq.n	800489a <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f003 0320 	and.w	r3, r3, #32
 8004860:	2b00      	cmp	r3, #0
 8004862:	d107      	bne.n	8004874 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	681a      	ldr	r2, [r3, #0]
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f022 0204 	bic.w	r2, r2, #4
 8004872:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004878:	f003 021c 	and.w	r2, r3, #28
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004880:	2104      	movs	r1, #4
 8004882:	fa01 f202 	lsl.w	r2, r1, r2
 8004886:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800488c:	2b00      	cmp	r3, #0
 800488e:	d071      	beq.n	8004974 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004894:	6878      	ldr	r0, [r7, #4]
 8004896:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8004898:	e06c      	b.n	8004974 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800489e:	f003 031c 	and.w	r3, r3, #28
 80048a2:	2202      	movs	r2, #2
 80048a4:	409a      	lsls	r2, r3
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	4013      	ands	r3, r2
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d02e      	beq.n	800490c <HAL_DMA_IRQHandler+0xec>
 80048ae:	68bb      	ldr	r3, [r7, #8]
 80048b0:	f003 0302 	and.w	r3, r3, #2
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d029      	beq.n	800490c <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f003 0320 	and.w	r3, r3, #32
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d10b      	bne.n	80048de <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	681a      	ldr	r2, [r3, #0]
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f022 020a 	bic.w	r2, r2, #10
 80048d4:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2201      	movs	r2, #1
 80048da:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048e2:	f003 021c 	and.w	r2, r3, #28
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048ea:	2102      	movs	r1, #2
 80048ec:	fa01 f202 	lsl.w	r2, r1, r2
 80048f0:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2200      	movs	r2, #0
 80048f6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d038      	beq.n	8004974 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004906:	6878      	ldr	r0, [r7, #4]
 8004908:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800490a:	e033      	b.n	8004974 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004910:	f003 031c 	and.w	r3, r3, #28
 8004914:	2208      	movs	r2, #8
 8004916:	409a      	lsls	r2, r3
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	4013      	ands	r3, r2
 800491c:	2b00      	cmp	r3, #0
 800491e:	d02a      	beq.n	8004976 <HAL_DMA_IRQHandler+0x156>
 8004920:	68bb      	ldr	r3, [r7, #8]
 8004922:	f003 0308 	and.w	r3, r3, #8
 8004926:	2b00      	cmp	r3, #0
 8004928:	d025      	beq.n	8004976 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	681a      	ldr	r2, [r3, #0]
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f022 020e 	bic.w	r2, r2, #14
 8004938:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800493e:	f003 021c 	and.w	r2, r3, #28
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004946:	2101      	movs	r1, #1
 8004948:	fa01 f202 	lsl.w	r2, r1, r2
 800494c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2201      	movs	r2, #1
 8004952:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2201      	movs	r2, #1
 8004958:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2200      	movs	r2, #0
 8004960:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004968:	2b00      	cmp	r3, #0
 800496a:	d004      	beq.n	8004976 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004970:	6878      	ldr	r0, [r7, #4]
 8004972:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004974:	bf00      	nop
 8004976:	bf00      	nop
}
 8004978:	3710      	adds	r7, #16
 800497a:	46bd      	mov	sp, r7
 800497c:	bd80      	pop	{r7, pc}

0800497e <HAL_DMA_GetState>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800497e:	b480      	push	{r7}
 8004980:	b083      	sub	sp, #12
 8004982:	af00      	add	r7, sp, #0
 8004984:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800498c:	b2db      	uxtb	r3, r3
}
 800498e:	4618      	mov	r0, r3
 8004990:	370c      	adds	r7, #12
 8004992:	46bd      	mov	sp, r7
 8004994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004998:	4770      	bx	lr

0800499a <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800499a:	b480      	push	{r7}
 800499c:	b085      	sub	sp, #20
 800499e:	af00      	add	r7, sp, #0
 80049a0:	60f8      	str	r0, [r7, #12]
 80049a2:	60b9      	str	r1, [r7, #8]
 80049a4:	607a      	str	r2, [r7, #4]
 80049a6:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80049ac:	68fa      	ldr	r2, [r7, #12]
 80049ae:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80049b0:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d004      	beq.n	80049c4 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049be:	68fa      	ldr	r2, [r7, #12]
 80049c0:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80049c2:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049c8:	f003 021c 	and.w	r2, r3, #28
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049d0:	2101      	movs	r1, #1
 80049d2:	fa01 f202 	lsl.w	r2, r1, r2
 80049d6:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	683a      	ldr	r2, [r7, #0]
 80049de:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	689b      	ldr	r3, [r3, #8]
 80049e4:	2b10      	cmp	r3, #16
 80049e6:	d108      	bne.n	80049fa <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	687a      	ldr	r2, [r7, #4]
 80049ee:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	68ba      	ldr	r2, [r7, #8]
 80049f6:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80049f8:	e007      	b.n	8004a0a <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	68ba      	ldr	r2, [r7, #8]
 8004a00:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	687a      	ldr	r2, [r7, #4]
 8004a08:	60da      	str	r2, [r3, #12]
}
 8004a0a:	bf00      	nop
 8004a0c:	3714      	adds	r7, #20
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a14:	4770      	bx	lr
	...

08004a18 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004a18:	b480      	push	{r7}
 8004a1a:	b085      	sub	sp, #20
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	461a      	mov	r2, r3
 8004a26:	4b17      	ldr	r3, [pc, #92]	@ (8004a84 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8004a28:	429a      	cmp	r2, r3
 8004a2a:	d80a      	bhi.n	8004a42 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a30:	089b      	lsrs	r3, r3, #2
 8004a32:	009b      	lsls	r3, r3, #2
 8004a34:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004a38:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 8004a3c:	687a      	ldr	r2, [r7, #4]
 8004a3e:	6493      	str	r3, [r2, #72]	@ 0x48
 8004a40:	e007      	b.n	8004a52 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a46:	089b      	lsrs	r3, r3, #2
 8004a48:	009a      	lsls	r2, r3, #2
 8004a4a:	4b0f      	ldr	r3, [pc, #60]	@ (8004a88 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8004a4c:	4413      	add	r3, r2
 8004a4e:	687a      	ldr	r2, [r7, #4]
 8004a50:	6493      	str	r3, [r2, #72]	@ 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif /* DMA2 */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	b2db      	uxtb	r3, r3
 8004a58:	3b08      	subs	r3, #8
 8004a5a:	4a0c      	ldr	r2, [pc, #48]	@ (8004a8c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8004a5c:	fba2 2303 	umull	r2, r3, r2, r3
 8004a60:	091b      	lsrs	r3, r3, #4
 8004a62:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	4a0a      	ldr	r2, [pc, #40]	@ (8004a90 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8004a68:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	f003 031f 	and.w	r3, r3, #31
 8004a70:	2201      	movs	r2, #1
 8004a72:	409a      	lsls	r2, r3
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004a78:	bf00      	nop
 8004a7a:	3714      	adds	r7, #20
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a82:	4770      	bx	lr
 8004a84:	40020407 	.word	0x40020407
 8004a88:	4002081c 	.word	0x4002081c
 8004a8c:	cccccccd 	.word	0xcccccccd
 8004a90:	40020880 	.word	0x40020880

08004a94 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004a94:	b480      	push	{r7}
 8004a96:	b085      	sub	sp, #20
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	685b      	ldr	r3, [r3, #4]
 8004aa0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004aa4:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004aa6:	68fa      	ldr	r2, [r7, #12]
 8004aa8:	4b0b      	ldr	r3, [pc, #44]	@ (8004ad8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004aaa:	4413      	add	r3, r2
 8004aac:	009b      	lsls	r3, r3, #2
 8004aae:	461a      	mov	r2, r3
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	4a09      	ldr	r2, [pc, #36]	@ (8004adc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 8004ab8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	3b01      	subs	r3, #1
 8004abe:	f003 0303 	and.w	r3, r3, #3
 8004ac2:	2201      	movs	r2, #1
 8004ac4:	409a      	lsls	r2, r3
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8004aca:	bf00      	nop
 8004acc:	3714      	adds	r7, #20
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad4:	4770      	bx	lr
 8004ad6:	bf00      	nop
 8004ad8:	1000823f 	.word	0x1000823f
 8004adc:	40020940 	.word	0x40020940

08004ae0 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004ae0:	b480      	push	{r7}
 8004ae2:	b087      	sub	sp, #28
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
 8004ae8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004aea:	2300      	movs	r3, #0
 8004aec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004aee:	e14c      	b.n	8004d8a <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	681a      	ldr	r2, [r3, #0]
 8004af4:	2101      	movs	r1, #1
 8004af6:	697b      	ldr	r3, [r7, #20]
 8004af8:	fa01 f303 	lsl.w	r3, r1, r3
 8004afc:	4013      	ands	r3, r2
 8004afe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	f000 813e 	beq.w	8004d84 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	685b      	ldr	r3, [r3, #4]
 8004b0c:	f003 0303 	and.w	r3, r3, #3
 8004b10:	2b01      	cmp	r3, #1
 8004b12:	d005      	beq.n	8004b20 <HAL_GPIO_Init+0x40>
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	685b      	ldr	r3, [r3, #4]
 8004b18:	f003 0303 	and.w	r3, r3, #3
 8004b1c:	2b02      	cmp	r3, #2
 8004b1e:	d130      	bne.n	8004b82 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	689b      	ldr	r3, [r3, #8]
 8004b24:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004b26:	697b      	ldr	r3, [r7, #20]
 8004b28:	005b      	lsls	r3, r3, #1
 8004b2a:	2203      	movs	r2, #3
 8004b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b30:	43db      	mvns	r3, r3
 8004b32:	693a      	ldr	r2, [r7, #16]
 8004b34:	4013      	ands	r3, r2
 8004b36:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	68da      	ldr	r2, [r3, #12]
 8004b3c:	697b      	ldr	r3, [r7, #20]
 8004b3e:	005b      	lsls	r3, r3, #1
 8004b40:	fa02 f303 	lsl.w	r3, r2, r3
 8004b44:	693a      	ldr	r2, [r7, #16]
 8004b46:	4313      	orrs	r3, r2
 8004b48:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	693a      	ldr	r2, [r7, #16]
 8004b4e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	685b      	ldr	r3, [r3, #4]
 8004b54:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004b56:	2201      	movs	r2, #1
 8004b58:	697b      	ldr	r3, [r7, #20]
 8004b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b5e:	43db      	mvns	r3, r3
 8004b60:	693a      	ldr	r2, [r7, #16]
 8004b62:	4013      	ands	r3, r2
 8004b64:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	685b      	ldr	r3, [r3, #4]
 8004b6a:	091b      	lsrs	r3, r3, #4
 8004b6c:	f003 0201 	and.w	r2, r3, #1
 8004b70:	697b      	ldr	r3, [r7, #20]
 8004b72:	fa02 f303 	lsl.w	r3, r2, r3
 8004b76:	693a      	ldr	r2, [r7, #16]
 8004b78:	4313      	orrs	r3, r2
 8004b7a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	693a      	ldr	r2, [r7, #16]
 8004b80:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	685b      	ldr	r3, [r3, #4]
 8004b86:	f003 0303 	and.w	r3, r3, #3
 8004b8a:	2b03      	cmp	r3, #3
 8004b8c:	d017      	beq.n	8004bbe <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	68db      	ldr	r3, [r3, #12]
 8004b92:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004b94:	697b      	ldr	r3, [r7, #20]
 8004b96:	005b      	lsls	r3, r3, #1
 8004b98:	2203      	movs	r2, #3
 8004b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b9e:	43db      	mvns	r3, r3
 8004ba0:	693a      	ldr	r2, [r7, #16]
 8004ba2:	4013      	ands	r3, r2
 8004ba4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	689a      	ldr	r2, [r3, #8]
 8004baa:	697b      	ldr	r3, [r7, #20]
 8004bac:	005b      	lsls	r3, r3, #1
 8004bae:	fa02 f303 	lsl.w	r3, r2, r3
 8004bb2:	693a      	ldr	r2, [r7, #16]
 8004bb4:	4313      	orrs	r3, r2
 8004bb6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	693a      	ldr	r2, [r7, #16]
 8004bbc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	685b      	ldr	r3, [r3, #4]
 8004bc2:	f003 0303 	and.w	r3, r3, #3
 8004bc6:	2b02      	cmp	r3, #2
 8004bc8:	d123      	bne.n	8004c12 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004bca:	697b      	ldr	r3, [r7, #20]
 8004bcc:	08da      	lsrs	r2, r3, #3
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	3208      	adds	r2, #8
 8004bd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004bd6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004bd8:	697b      	ldr	r3, [r7, #20]
 8004bda:	f003 0307 	and.w	r3, r3, #7
 8004bde:	009b      	lsls	r3, r3, #2
 8004be0:	220f      	movs	r2, #15
 8004be2:	fa02 f303 	lsl.w	r3, r2, r3
 8004be6:	43db      	mvns	r3, r3
 8004be8:	693a      	ldr	r2, [r7, #16]
 8004bea:	4013      	ands	r3, r2
 8004bec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	691a      	ldr	r2, [r3, #16]
 8004bf2:	697b      	ldr	r3, [r7, #20]
 8004bf4:	f003 0307 	and.w	r3, r3, #7
 8004bf8:	009b      	lsls	r3, r3, #2
 8004bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8004bfe:	693a      	ldr	r2, [r7, #16]
 8004c00:	4313      	orrs	r3, r2
 8004c02:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004c04:	697b      	ldr	r3, [r7, #20]
 8004c06:	08da      	lsrs	r2, r3, #3
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	3208      	adds	r2, #8
 8004c0c:	6939      	ldr	r1, [r7, #16]
 8004c0e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004c18:	697b      	ldr	r3, [r7, #20]
 8004c1a:	005b      	lsls	r3, r3, #1
 8004c1c:	2203      	movs	r2, #3
 8004c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8004c22:	43db      	mvns	r3, r3
 8004c24:	693a      	ldr	r2, [r7, #16]
 8004c26:	4013      	ands	r3, r2
 8004c28:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	685b      	ldr	r3, [r3, #4]
 8004c2e:	f003 0203 	and.w	r2, r3, #3
 8004c32:	697b      	ldr	r3, [r7, #20]
 8004c34:	005b      	lsls	r3, r3, #1
 8004c36:	fa02 f303 	lsl.w	r3, r2, r3
 8004c3a:	693a      	ldr	r2, [r7, #16]
 8004c3c:	4313      	orrs	r3, r2
 8004c3e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	693a      	ldr	r2, [r7, #16]
 8004c44:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	685b      	ldr	r3, [r3, #4]
 8004c4a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	f000 8098 	beq.w	8004d84 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8004c54:	4a54      	ldr	r2, [pc, #336]	@ (8004da8 <HAL_GPIO_Init+0x2c8>)
 8004c56:	697b      	ldr	r3, [r7, #20]
 8004c58:	089b      	lsrs	r3, r3, #2
 8004c5a:	3302      	adds	r3, #2
 8004c5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c60:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004c62:	697b      	ldr	r3, [r7, #20]
 8004c64:	f003 0303 	and.w	r3, r3, #3
 8004c68:	009b      	lsls	r3, r3, #2
 8004c6a:	220f      	movs	r2, #15
 8004c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8004c70:	43db      	mvns	r3, r3
 8004c72:	693a      	ldr	r2, [r7, #16]
 8004c74:	4013      	ands	r3, r2
 8004c76:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004c7e:	d019      	beq.n	8004cb4 <HAL_GPIO_Init+0x1d4>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	4a4a      	ldr	r2, [pc, #296]	@ (8004dac <HAL_GPIO_Init+0x2cc>)
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d013      	beq.n	8004cb0 <HAL_GPIO_Init+0x1d0>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	4a49      	ldr	r2, [pc, #292]	@ (8004db0 <HAL_GPIO_Init+0x2d0>)
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d00d      	beq.n	8004cac <HAL_GPIO_Init+0x1cc>
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	4a48      	ldr	r2, [pc, #288]	@ (8004db4 <HAL_GPIO_Init+0x2d4>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d007      	beq.n	8004ca8 <HAL_GPIO_Init+0x1c8>
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	4a47      	ldr	r2, [pc, #284]	@ (8004db8 <HAL_GPIO_Init+0x2d8>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d101      	bne.n	8004ca4 <HAL_GPIO_Init+0x1c4>
 8004ca0:	2304      	movs	r3, #4
 8004ca2:	e008      	b.n	8004cb6 <HAL_GPIO_Init+0x1d6>
 8004ca4:	2307      	movs	r3, #7
 8004ca6:	e006      	b.n	8004cb6 <HAL_GPIO_Init+0x1d6>
 8004ca8:	2303      	movs	r3, #3
 8004caa:	e004      	b.n	8004cb6 <HAL_GPIO_Init+0x1d6>
 8004cac:	2302      	movs	r3, #2
 8004cae:	e002      	b.n	8004cb6 <HAL_GPIO_Init+0x1d6>
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	e000      	b.n	8004cb6 <HAL_GPIO_Init+0x1d6>
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	697a      	ldr	r2, [r7, #20]
 8004cb8:	f002 0203 	and.w	r2, r2, #3
 8004cbc:	0092      	lsls	r2, r2, #2
 8004cbe:	4093      	lsls	r3, r2
 8004cc0:	693a      	ldr	r2, [r7, #16]
 8004cc2:	4313      	orrs	r3, r2
 8004cc4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004cc6:	4938      	ldr	r1, [pc, #224]	@ (8004da8 <HAL_GPIO_Init+0x2c8>)
 8004cc8:	697b      	ldr	r3, [r7, #20]
 8004cca:	089b      	lsrs	r3, r3, #2
 8004ccc:	3302      	adds	r3, #2
 8004cce:	693a      	ldr	r2, [r7, #16]
 8004cd0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004cd4:	4b39      	ldr	r3, [pc, #228]	@ (8004dbc <HAL_GPIO_Init+0x2dc>)
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	43db      	mvns	r3, r3
 8004cde:	693a      	ldr	r2, [r7, #16]
 8004ce0:	4013      	ands	r3, r2
 8004ce2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	685b      	ldr	r3, [r3, #4]
 8004ce8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d003      	beq.n	8004cf8 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8004cf0:	693a      	ldr	r2, [r7, #16]
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	4313      	orrs	r3, r2
 8004cf6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004cf8:	4a30      	ldr	r2, [pc, #192]	@ (8004dbc <HAL_GPIO_Init+0x2dc>)
 8004cfa:	693b      	ldr	r3, [r7, #16]
 8004cfc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004cfe:	4b2f      	ldr	r3, [pc, #188]	@ (8004dbc <HAL_GPIO_Init+0x2dc>)
 8004d00:	685b      	ldr	r3, [r3, #4]
 8004d02:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	43db      	mvns	r3, r3
 8004d08:	693a      	ldr	r2, [r7, #16]
 8004d0a:	4013      	ands	r3, r2
 8004d0c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	685b      	ldr	r3, [r3, #4]
 8004d12:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d003      	beq.n	8004d22 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8004d1a:	693a      	ldr	r2, [r7, #16]
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	4313      	orrs	r3, r2
 8004d20:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004d22:	4a26      	ldr	r2, [pc, #152]	@ (8004dbc <HAL_GPIO_Init+0x2dc>)
 8004d24:	693b      	ldr	r3, [r7, #16]
 8004d26:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004d28:	4b24      	ldr	r3, [pc, #144]	@ (8004dbc <HAL_GPIO_Init+0x2dc>)
 8004d2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004d2e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	43db      	mvns	r3, r3
 8004d34:	693a      	ldr	r2, [r7, #16]
 8004d36:	4013      	ands	r3, r2
 8004d38:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	685b      	ldr	r3, [r3, #4]
 8004d3e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d003      	beq.n	8004d4e <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8004d46:	693a      	ldr	r2, [r7, #16]
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	4313      	orrs	r3, r2
 8004d4c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004d4e:	4a1b      	ldr	r2, [pc, #108]	@ (8004dbc <HAL_GPIO_Init+0x2dc>)
 8004d50:	693b      	ldr	r3, [r7, #16]
 8004d52:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 8004d56:	4b19      	ldr	r3, [pc, #100]	@ (8004dbc <HAL_GPIO_Init+0x2dc>)
 8004d58:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004d5c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	43db      	mvns	r3, r3
 8004d62:	693a      	ldr	r2, [r7, #16]
 8004d64:	4013      	ands	r3, r2
 8004d66:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	685b      	ldr	r3, [r3, #4]
 8004d6c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d003      	beq.n	8004d7c <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8004d74:	693a      	ldr	r2, [r7, #16]
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	4313      	orrs	r3, r2
 8004d7a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004d7c:	4a0f      	ldr	r2, [pc, #60]	@ (8004dbc <HAL_GPIO_Init+0x2dc>)
 8004d7e:	693b      	ldr	r3, [r7, #16]
 8004d80:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      }
    }

    position++;
 8004d84:	697b      	ldr	r3, [r7, #20]
 8004d86:	3301      	adds	r3, #1
 8004d88:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	681a      	ldr	r2, [r3, #0]
 8004d8e:	697b      	ldr	r3, [r7, #20]
 8004d90:	fa22 f303 	lsr.w	r3, r2, r3
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	f47f aeab 	bne.w	8004af0 <HAL_GPIO_Init+0x10>
  }
}
 8004d9a:	bf00      	nop
 8004d9c:	bf00      	nop
 8004d9e:	371c      	adds	r7, #28
 8004da0:	46bd      	mov	sp, r7
 8004da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da6:	4770      	bx	lr
 8004da8:	40010000 	.word	0x40010000
 8004dac:	48000400 	.word	0x48000400
 8004db0:	48000800 	.word	0x48000800
 8004db4:	48000c00 	.word	0x48000c00
 8004db8:	48001000 	.word	0x48001000
 8004dbc:	58000800 	.word	0x58000800

08004dc0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004dc0:	b480      	push	{r7}
 8004dc2:	b083      	sub	sp, #12
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
 8004dc8:	460b      	mov	r3, r1
 8004dca:	807b      	strh	r3, [r7, #2]
 8004dcc:	4613      	mov	r3, r2
 8004dce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004dd0:	787b      	ldrb	r3, [r7, #1]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d003      	beq.n	8004dde <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004dd6:	887a      	ldrh	r2, [r7, #2]
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004ddc:	e002      	b.n	8004de4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004dde:	887a      	ldrh	r2, [r7, #2]
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004de4:	bf00      	nop
 8004de6:	370c      	adds	r7, #12
 8004de8:	46bd      	mov	sp, r7
 8004dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dee:	4770      	bx	lr

08004df0 <HAL_GPIO_TogglePin>:
  * @param GPIOx where x can be (A..H) to select the GPIO peripheral for STM32WBxx family
  * @param GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004df0:	b480      	push	{r7}
 8004df2:	b085      	sub	sp, #20
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
 8004df8:	460b      	mov	r3, r1
 8004dfa:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	695b      	ldr	r3, [r3, #20]
 8004e00:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004e02:	887a      	ldrh	r2, [r7, #2]
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	4013      	ands	r3, r2
 8004e08:	041a      	lsls	r2, r3, #16
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	43d9      	mvns	r1, r3
 8004e0e:	887b      	ldrh	r3, [r7, #2]
 8004e10:	400b      	ands	r3, r1
 8004e12:	431a      	orrs	r2, r3
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	619a      	str	r2, [r3, #24]
}
 8004e18:	bf00      	nop
 8004e1a:	3714      	adds	r7, #20
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e22:	4770      	bx	lr

08004e24 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b082      	sub	sp, #8
 8004e28:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8004e2a:	4b0a      	ldr	r3, [pc, #40]	@ (8004e54 <HAL_HSEM_IRQHandler+0x30>)
 8004e2c:	68db      	ldr	r3, [r3, #12]
 8004e2e:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8004e30:	4b08      	ldr	r3, [pc, #32]	@ (8004e54 <HAL_HSEM_IRQHandler+0x30>)
 8004e32:	681a      	ldr	r2, [r3, #0]
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	43db      	mvns	r3, r3
 8004e38:	4906      	ldr	r1, [pc, #24]	@ (8004e54 <HAL_HSEM_IRQHandler+0x30>)
 8004e3a:	4013      	ands	r3, r2
 8004e3c:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8004e3e:	4a05      	ldr	r2, [pc, #20]	@ (8004e54 <HAL_HSEM_IRQHandler+0x30>)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8004e44:	6878      	ldr	r0, [r7, #4]
 8004e46:	f000 f807 	bl	8004e58 <HAL_HSEM_FreeCallback>
}
 8004e4a:	bf00      	nop
 8004e4c:	3708      	adds	r7, #8
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	bd80      	pop	{r7, pc}
 8004e52:	bf00      	nop
 8004e54:	58001500 	.word	0x58001500

08004e58 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8004e58:	b480      	push	{r7}
 8004e5a:	b083      	sub	sp, #12
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8004e60:	bf00      	nop
 8004e62:	370c      	adds	r7, #12
 8004e64:	46bd      	mov	sp, r7
 8004e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6a:	4770      	bx	lr

08004e6c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b082      	sub	sp, #8
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d101      	bne.n	8004e7e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	e08d      	b.n	8004f9a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004e84:	b2db      	uxtb	r3, r3
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d106      	bne.n	8004e98 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004e92:	6878      	ldr	r0, [r7, #4]
 8004e94:	f7fe ff28 	bl	8003ce8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2224      	movs	r2, #36	@ 0x24
 8004e9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	681a      	ldr	r2, [r3, #0]
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f022 0201 	bic.w	r2, r2, #1
 8004eae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	685a      	ldr	r2, [r3, #4]
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004ebc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	689a      	ldr	r2, [r3, #8]
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004ecc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	68db      	ldr	r3, [r3, #12]
 8004ed2:	2b01      	cmp	r3, #1
 8004ed4:	d107      	bne.n	8004ee6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	689a      	ldr	r2, [r3, #8]
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004ee2:	609a      	str	r2, [r3, #8]
 8004ee4:	e006      	b.n	8004ef4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	689a      	ldr	r2, [r3, #8]
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8004ef2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	68db      	ldr	r3, [r3, #12]
 8004ef8:	2b02      	cmp	r3, #2
 8004efa:	d108      	bne.n	8004f0e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	685a      	ldr	r2, [r3, #4]
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004f0a:	605a      	str	r2, [r3, #4]
 8004f0c:	e007      	b.n	8004f1e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	685a      	ldr	r2, [r3, #4]
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004f1c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	685b      	ldr	r3, [r3, #4]
 8004f24:	687a      	ldr	r2, [r7, #4]
 8004f26:	6812      	ldr	r2, [r2, #0]
 8004f28:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004f2c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004f30:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	68da      	ldr	r2, [r3, #12]
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004f40:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	691a      	ldr	r2, [r3, #16]
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	695b      	ldr	r3, [r3, #20]
 8004f4a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	699b      	ldr	r3, [r3, #24]
 8004f52:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	430a      	orrs	r2, r1
 8004f5a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	69d9      	ldr	r1, [r3, #28]
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6a1a      	ldr	r2, [r3, #32]
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	430a      	orrs	r2, r1
 8004f6a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	681a      	ldr	r2, [r3, #0]
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f042 0201 	orr.w	r2, r2, #1
 8004f7a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2200      	movs	r2, #0
 8004f80:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2220      	movs	r2, #32
 8004f86:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2200      	movs	r2, #0
 8004f94:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8004f98:	2300      	movs	r3, #0
}
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	3708      	adds	r7, #8
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	bd80      	pop	{r7, pc}
	...

08004fa4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b088      	sub	sp, #32
 8004fa8:	af02      	add	r7, sp, #8
 8004faa:	60f8      	str	r0, [r7, #12]
 8004fac:	4608      	mov	r0, r1
 8004fae:	4611      	mov	r1, r2
 8004fb0:	461a      	mov	r2, r3
 8004fb2:	4603      	mov	r3, r0
 8004fb4:	817b      	strh	r3, [r7, #10]
 8004fb6:	460b      	mov	r3, r1
 8004fb8:	813b      	strh	r3, [r7, #8]
 8004fba:	4613      	mov	r3, r2
 8004fbc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004fc4:	b2db      	uxtb	r3, r3
 8004fc6:	2b20      	cmp	r3, #32
 8004fc8:	f040 80f9 	bne.w	80051be <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004fcc:	6a3b      	ldr	r3, [r7, #32]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d002      	beq.n	8004fd8 <HAL_I2C_Mem_Write+0x34>
 8004fd2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d105      	bne.n	8004fe4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004fde:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8004fe0:	2301      	movs	r3, #1
 8004fe2:	e0ed      	b.n	80051c0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004fea:	2b01      	cmp	r3, #1
 8004fec:	d101      	bne.n	8004ff2 <HAL_I2C_Mem_Write+0x4e>
 8004fee:	2302      	movs	r3, #2
 8004ff0:	e0e6      	b.n	80051c0 <HAL_I2C_Mem_Write+0x21c>
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	2201      	movs	r2, #1
 8004ff6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004ffa:	f7ff f8d1 	bl	80041a0 <HAL_GetTick>
 8004ffe:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005000:	697b      	ldr	r3, [r7, #20]
 8005002:	9300      	str	r3, [sp, #0]
 8005004:	2319      	movs	r3, #25
 8005006:	2201      	movs	r2, #1
 8005008:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800500c:	68f8      	ldr	r0, [r7, #12]
 800500e:	f001 fc26 	bl	800685e <I2C_WaitOnFlagUntilTimeout>
 8005012:	4603      	mov	r3, r0
 8005014:	2b00      	cmp	r3, #0
 8005016:	d001      	beq.n	800501c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8005018:	2301      	movs	r3, #1
 800501a:	e0d1      	b.n	80051c0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	2221      	movs	r2, #33	@ 0x21
 8005020:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	2240      	movs	r2, #64	@ 0x40
 8005028:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	2200      	movs	r2, #0
 8005030:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	6a3a      	ldr	r2, [r7, #32]
 8005036:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800503c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	2200      	movs	r2, #0
 8005042:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005044:	88f8      	ldrh	r0, [r7, #6]
 8005046:	893a      	ldrh	r2, [r7, #8]
 8005048:	8979      	ldrh	r1, [r7, #10]
 800504a:	697b      	ldr	r3, [r7, #20]
 800504c:	9301      	str	r3, [sp, #4]
 800504e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005050:	9300      	str	r3, [sp, #0]
 8005052:	4603      	mov	r3, r0
 8005054:	68f8      	ldr	r0, [r7, #12]
 8005056:	f000 fe55 	bl	8005d04 <I2C_RequestMemoryWrite>
 800505a:	4603      	mov	r3, r0
 800505c:	2b00      	cmp	r3, #0
 800505e:	d005      	beq.n	800506c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	2200      	movs	r2, #0
 8005064:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8005068:	2301      	movs	r3, #1
 800506a:	e0a9      	b.n	80051c0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005070:	b29b      	uxth	r3, r3
 8005072:	2bff      	cmp	r3, #255	@ 0xff
 8005074:	d90e      	bls.n	8005094 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	22ff      	movs	r2, #255	@ 0xff
 800507a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005080:	b2da      	uxtb	r2, r3
 8005082:	8979      	ldrh	r1, [r7, #10]
 8005084:	2300      	movs	r3, #0
 8005086:	9300      	str	r3, [sp, #0]
 8005088:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800508c:	68f8      	ldr	r0, [r7, #12]
 800508e:	f001 fda9 	bl	8006be4 <I2C_TransferConfig>
 8005092:	e00f      	b.n	80050b4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005098:	b29a      	uxth	r2, r3
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80050a2:	b2da      	uxtb	r2, r3
 80050a4:	8979      	ldrh	r1, [r7, #10]
 80050a6:	2300      	movs	r3, #0
 80050a8:	9300      	str	r3, [sp, #0]
 80050aa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80050ae:	68f8      	ldr	r0, [r7, #12]
 80050b0:	f001 fd98 	bl	8006be4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80050b4:	697a      	ldr	r2, [r7, #20]
 80050b6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80050b8:	68f8      	ldr	r0, [r7, #12]
 80050ba:	f001 fc29 	bl	8006910 <I2C_WaitOnTXISFlagUntilTimeout>
 80050be:	4603      	mov	r3, r0
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d001      	beq.n	80050c8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80050c4:	2301      	movs	r3, #1
 80050c6:	e07b      	b.n	80051c0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050cc:	781a      	ldrb	r2, [r3, #0]
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050d8:	1c5a      	adds	r2, r3, #1
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050e2:	b29b      	uxth	r3, r3
 80050e4:	3b01      	subs	r3, #1
 80050e6:	b29a      	uxth	r2, r3
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80050f0:	3b01      	subs	r3, #1
 80050f2:	b29a      	uxth	r2, r3
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050fc:	b29b      	uxth	r3, r3
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d034      	beq.n	800516c <HAL_I2C_Mem_Write+0x1c8>
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005106:	2b00      	cmp	r3, #0
 8005108:	d130      	bne.n	800516c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800510a:	697b      	ldr	r3, [r7, #20]
 800510c:	9300      	str	r3, [sp, #0]
 800510e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005110:	2200      	movs	r2, #0
 8005112:	2180      	movs	r1, #128	@ 0x80
 8005114:	68f8      	ldr	r0, [r7, #12]
 8005116:	f001 fba2 	bl	800685e <I2C_WaitOnFlagUntilTimeout>
 800511a:	4603      	mov	r3, r0
 800511c:	2b00      	cmp	r3, #0
 800511e:	d001      	beq.n	8005124 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8005120:	2301      	movs	r3, #1
 8005122:	e04d      	b.n	80051c0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005128:	b29b      	uxth	r3, r3
 800512a:	2bff      	cmp	r3, #255	@ 0xff
 800512c:	d90e      	bls.n	800514c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	22ff      	movs	r2, #255	@ 0xff
 8005132:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005138:	b2da      	uxtb	r2, r3
 800513a:	8979      	ldrh	r1, [r7, #10]
 800513c:	2300      	movs	r3, #0
 800513e:	9300      	str	r3, [sp, #0]
 8005140:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005144:	68f8      	ldr	r0, [r7, #12]
 8005146:	f001 fd4d 	bl	8006be4 <I2C_TransferConfig>
 800514a:	e00f      	b.n	800516c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005150:	b29a      	uxth	r2, r3
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800515a:	b2da      	uxtb	r2, r3
 800515c:	8979      	ldrh	r1, [r7, #10]
 800515e:	2300      	movs	r3, #0
 8005160:	9300      	str	r3, [sp, #0]
 8005162:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005166:	68f8      	ldr	r0, [r7, #12]
 8005168:	f001 fd3c 	bl	8006be4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005170:	b29b      	uxth	r3, r3
 8005172:	2b00      	cmp	r3, #0
 8005174:	d19e      	bne.n	80050b4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005176:	697a      	ldr	r2, [r7, #20]
 8005178:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800517a:	68f8      	ldr	r0, [r7, #12]
 800517c:	f001 fc0f 	bl	800699e <I2C_WaitOnSTOPFlagUntilTimeout>
 8005180:	4603      	mov	r3, r0
 8005182:	2b00      	cmp	r3, #0
 8005184:	d001      	beq.n	800518a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8005186:	2301      	movs	r3, #1
 8005188:	e01a      	b.n	80051c0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	2220      	movs	r2, #32
 8005190:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	6859      	ldr	r1, [r3, #4]
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681a      	ldr	r2, [r3, #0]
 800519c:	4b0a      	ldr	r3, [pc, #40]	@ (80051c8 <HAL_I2C_Mem_Write+0x224>)
 800519e:	400b      	ands	r3, r1
 80051a0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	2220      	movs	r2, #32
 80051a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	2200      	movs	r2, #0
 80051ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	2200      	movs	r2, #0
 80051b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80051ba:	2300      	movs	r3, #0
 80051bc:	e000      	b.n	80051c0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80051be:	2302      	movs	r3, #2
  }
}
 80051c0:	4618      	mov	r0, r3
 80051c2:	3718      	adds	r7, #24
 80051c4:	46bd      	mov	sp, r7
 80051c6:	bd80      	pop	{r7, pc}
 80051c8:	fe00e800 	.word	0xfe00e800

080051cc <HAL_I2C_Mem_Read_DMA>:
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                       uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 80051cc:	b580      	push	{r7, lr}
 80051ce:	b088      	sub	sp, #32
 80051d0:	af02      	add	r7, sp, #8
 80051d2:	60f8      	str	r0, [r7, #12]
 80051d4:	4608      	mov	r0, r1
 80051d6:	4611      	mov	r1, r2
 80051d8:	461a      	mov	r2, r3
 80051da:	4603      	mov	r3, r0
 80051dc:	817b      	strh	r3, [r7, #10]
 80051de:	460b      	mov	r3, r1
 80051e0:	813b      	strh	r3, [r7, #8]
 80051e2:	4613      	mov	r3, r2
 80051e4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80051ec:	b2db      	uxtb	r3, r3
 80051ee:	2b20      	cmp	r3, #32
 80051f0:	f040 80c2 	bne.w	8005378 <HAL_I2C_Mem_Read_DMA+0x1ac>
  {
    if ((pData == NULL) || (Size == 0U))
 80051f4:	6a3b      	ldr	r3, [r7, #32]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d002      	beq.n	8005200 <HAL_I2C_Mem_Read_DMA+0x34>
 80051fa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d105      	bne.n	800520c <HAL_I2C_Mem_Read_DMA+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005206:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8005208:	2301      	movs	r3, #1
 800520a:	e0b6      	b.n	800537a <HAL_I2C_Mem_Read_DMA+0x1ae>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	699b      	ldr	r3, [r3, #24]
 8005212:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005216:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800521a:	d101      	bne.n	8005220 <HAL_I2C_Mem_Read_DMA+0x54>
    {
      return HAL_BUSY;
 800521c:	2302      	movs	r3, #2
 800521e:	e0ac      	b.n	800537a <HAL_I2C_Mem_Read_DMA+0x1ae>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005226:	2b01      	cmp	r3, #1
 8005228:	d101      	bne.n	800522e <HAL_I2C_Mem_Read_DMA+0x62>
 800522a:	2302      	movs	r3, #2
 800522c:	e0a5      	b.n	800537a <HAL_I2C_Mem_Read_DMA+0x1ae>
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	2201      	movs	r2, #1
 8005232:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	2222      	movs	r2, #34	@ 0x22
 800523a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	2240      	movs	r2, #64	@ 0x40
 8005242:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	2200      	movs	r2, #0
 800524a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	6a3a      	ldr	r2, [r7, #32]
 8005250:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005256:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	4a4a      	ldr	r2, [pc, #296]	@ (8005384 <HAL_I2C_Mem_Read_DMA+0x1b8>)
 800525c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Mem_ISR_DMA;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	4a49      	ldr	r2, [pc, #292]	@ (8005388 <HAL_I2C_Mem_Read_DMA+0x1bc>)
 8005262:	635a      	str	r2, [r3, #52]	@ 0x34
    hi2c->Devaddress  = DevAddress;
 8005264:	897a      	ldrh	r2, [r7, #10]
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	64da      	str	r2, [r3, #76]	@ 0x4c

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800526e:	b29b      	uxth	r3, r3
 8005270:	2bff      	cmp	r3, #255	@ 0xff
 8005272:	d903      	bls.n	800527c <HAL_I2C_Mem_Read_DMA+0xb0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	22ff      	movs	r2, #255	@ 0xff
 8005278:	851a      	strh	r2, [r3, #40]	@ 0x28
 800527a:	e004      	b.n	8005286 <HAL_I2C_Mem_Read_DMA+0xba>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005280:	b29a      	uxth	r2, r3
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	851a      	strh	r2, [r3, #40]	@ 0x28
    }

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005286:	88fb      	ldrh	r3, [r7, #6]
 8005288:	2b01      	cmp	r3, #1
 800528a:	d109      	bne.n	80052a0 <HAL_I2C_Mem_Read_DMA+0xd4>
    {
      /* Prefetch Memory Address */
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800528c:	893b      	ldrh	r3, [r7, #8]
 800528e:	b2da      	uxtb	r2, r3
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	f04f 32ff 	mov.w	r2, #4294967295
 800529c:	651a      	str	r2, [r3, #80]	@ 0x50
 800529e:	e00b      	b.n	80052b8 <HAL_I2C_Mem_Read_DMA+0xec>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Prefetch Memory Address (MSB part, LSB will be manage through interrupt) */
      hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80052a0:	893b      	ldrh	r3, [r7, #8]
 80052a2:	0a1b      	lsrs	r3, r3, #8
 80052a4:	b29b      	uxth	r3, r3
 80052a6:	b2da      	uxtb	r2, r3
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Prepare Memaddress buffer for LSB part */
      hi2c->Memaddress = I2C_MEM_ADD_LSB(MemAddress);
 80052ae:	893b      	ldrh	r3, [r7, #8]
 80052b0:	b2db      	uxtb	r3, r3
 80052b2:	461a      	mov	r2, r3
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    if (hi2c->hdmarx != NULL)
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d020      	beq.n	8005302 <HAL_I2C_Mem_Read_DMA+0x136>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052c4:	4a31      	ldr	r2, [pc, #196]	@ (800538c <HAL_I2C_Mem_Read_DMA+0x1c0>)
 80052c6:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052cc:	4a30      	ldr	r2, [pc, #192]	@ (8005390 <HAL_I2C_Mem_Read_DMA+0x1c4>)
 80052ce:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052d4:	2200      	movs	r2, #0
 80052d6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->hdmarx->XferAbortCallback = NULL;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052dc:	2200      	movs	r2, #0
 80052de:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the DMA channel */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	3324      	adds	r3, #36	@ 0x24
 80052ea:	4619      	mov	r1, r3
 80052ec:	6a3a      	ldr	r2, [r7, #32]
                                       hi2c->XferSize);
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 80052f2:	f7ff f9bb 	bl	800466c <HAL_DMA_Start_IT>
 80052f6:	4603      	mov	r3, r0
 80052f8:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 80052fa:	7dfb      	ldrb	r3, [r7, #23]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d127      	bne.n	8005350 <HAL_I2C_Mem_Read_DMA+0x184>
 8005300:	e013      	b.n	800532a <HAL_I2C_Mem_Read_DMA+0x15e>
      hi2c->State     = HAL_I2C_STATE_READY;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	2220      	movs	r2, #32
 8005306:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	2200      	movs	r2, #0
 800530e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005316:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	645a      	str	r2, [r3, #68]	@ 0x44
      __HAL_UNLOCK(hi2c);
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	2200      	movs	r2, #0
 8005322:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8005326:	2301      	movs	r3, #1
 8005328:	e027      	b.n	800537a <HAL_I2C_Mem_Read_DMA+0x1ae>
    {
      /* Send Slave Address and Memory Address */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800532a:	88fb      	ldrh	r3, [r7, #6]
 800532c:	b2da      	uxtb	r2, r3
 800532e:	8979      	ldrh	r1, [r7, #10]
 8005330:	4b18      	ldr	r3, [pc, #96]	@ (8005394 <HAL_I2C_Mem_Read_DMA+0x1c8>)
 8005332:	9300      	str	r3, [sp, #0]
 8005334:	2300      	movs	r3, #0
 8005336:	68f8      	ldr	r0, [r7, #12]
 8005338:	f001 fc54 	bl	8006be4 <I2C_TransferConfig>

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	2200      	movs	r2, #0
 8005340:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8005344:	2101      	movs	r1, #1
 8005346:	68f8      	ldr	r0, [r7, #12]
 8005348:	f001 fc7e 	bl	8006c48 <I2C_Enable_IRQ>
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
 800534c:	2300      	movs	r3, #0
 800534e:	e014      	b.n	800537a <HAL_I2C_Mem_Read_DMA+0x1ae>
      hi2c->State     = HAL_I2C_STATE_READY;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	2220      	movs	r2, #32
 8005354:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	2200      	movs	r2, #0
 800535c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005364:	f043 0210 	orr.w	r2, r3, #16
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	645a      	str	r2, [r3, #68]	@ 0x44
      __HAL_UNLOCK(hi2c);
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	2200      	movs	r2, #0
 8005370:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8005374:	2301      	movs	r3, #1
 8005376:	e000      	b.n	800537a <HAL_I2C_Mem_Read_DMA+0x1ae>
  }
  else
  {
    return HAL_BUSY;
 8005378:	2302      	movs	r3, #2
  }
}
 800537a:	4618      	mov	r0, r3
 800537c:	3718      	adds	r7, #24
 800537e:	46bd      	mov	sp, r7
 8005380:	bd80      	pop	{r7, pc}
 8005382:	bf00      	nop
 8005384:	ffff0000 	.word	0xffff0000
 8005388:	08005909 	.word	0x08005909
 800538c:	0800675f 	.word	0x0800675f
 8005390:	080067f5 	.word	0x080067f5
 8005394:	80002000 	.word	0x80002000

08005398 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8005398:	b580      	push	{r7, lr}
 800539a:	b084      	sub	sp, #16
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	699b      	ldr	r3, [r3, #24]
 80053a6:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d005      	beq.n	80053c4 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80053bc:	68ba      	ldr	r2, [r7, #8]
 80053be:	68f9      	ldr	r1, [r7, #12]
 80053c0:	6878      	ldr	r0, [r7, #4]
 80053c2:	4798      	blx	r3
  }
}
 80053c4:	bf00      	nop
 80053c6:	3710      	adds	r7, #16
 80053c8:	46bd      	mov	sp, r7
 80053ca:	bd80      	pop	{r7, pc}

080053cc <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b086      	sub	sp, #24
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	699b      	ldr	r3, [r3, #24]
 80053da:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80053e4:	697b      	ldr	r3, [r7, #20]
 80053e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d00f      	beq.n	800540e <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80053ee:	693b      	ldr	r3, [r7, #16]
 80053f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d00a      	beq.n	800540e <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053fc:	f043 0201 	orr.w	r2, r3, #1
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800540c:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800540e:	697b      	ldr	r3, [r7, #20]
 8005410:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005414:	2b00      	cmp	r3, #0
 8005416:	d00f      	beq.n	8005438 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8005418:	693b      	ldr	r3, [r7, #16]
 800541a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800541e:	2b00      	cmp	r3, #0
 8005420:	d00a      	beq.n	8005438 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005426:	f043 0208 	orr.w	r2, r3, #8
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005436:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8005438:	697b      	ldr	r3, [r7, #20]
 800543a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800543e:	2b00      	cmp	r3, #0
 8005440:	d00f      	beq.n	8005462 <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8005442:	693b      	ldr	r3, [r7, #16]
 8005444:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8005448:	2b00      	cmp	r3, #0
 800544a:	d00a      	beq.n	8005462 <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005450:	f043 0202 	orr.w	r2, r3, #2
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005460:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005466:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	f003 030b 	and.w	r3, r3, #11
 800546e:	2b00      	cmp	r3, #0
 8005470:	d003      	beq.n	800547a <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 8005472:	68f9      	ldr	r1, [r7, #12]
 8005474:	6878      	ldr	r0, [r7, #4]
 8005476:	f001 f837 	bl	80064e8 <I2C_ITError>
  }
}
 800547a:	bf00      	nop
 800547c:	3718      	adds	r7, #24
 800547e:	46bd      	mov	sp, r7
 8005480:	bd80      	pop	{r7, pc}

08005482 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005482:	b480      	push	{r7}
 8005484:	b083      	sub	sp, #12
 8005486:	af00      	add	r7, sp, #0
 8005488:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800548a:	bf00      	nop
 800548c:	370c      	adds	r7, #12
 800548e:	46bd      	mov	sp, r7
 8005490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005494:	4770      	bx	lr

08005496 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005496:	b480      	push	{r7}
 8005498:	b083      	sub	sp, #12
 800549a:	af00      	add	r7, sp, #0
 800549c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800549e:	bf00      	nop
 80054a0:	370c      	adds	r7, #12
 80054a2:	46bd      	mov	sp, r7
 80054a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a8:	4770      	bx	lr

080054aa <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80054aa:	b480      	push	{r7}
 80054ac:	b083      	sub	sp, #12
 80054ae:	af00      	add	r7, sp, #0
 80054b0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80054b2:	bf00      	nop
 80054b4:	370c      	adds	r7, #12
 80054b6:	46bd      	mov	sp, r7
 80054b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054bc:	4770      	bx	lr

080054be <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80054be:	b480      	push	{r7}
 80054c0:	b083      	sub	sp, #12
 80054c2:	af00      	add	r7, sp, #0
 80054c4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80054c6:	bf00      	nop
 80054c8:	370c      	adds	r7, #12
 80054ca:	46bd      	mov	sp, r7
 80054cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d0:	4770      	bx	lr

080054d2 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80054d2:	b480      	push	{r7}
 80054d4:	b083      	sub	sp, #12
 80054d6:	af00      	add	r7, sp, #0
 80054d8:	6078      	str	r0, [r7, #4]
 80054da:	460b      	mov	r3, r1
 80054dc:	70fb      	strb	r3, [r7, #3]
 80054de:	4613      	mov	r3, r2
 80054e0:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80054e2:	bf00      	nop
 80054e4:	370c      	adds	r7, #12
 80054e6:	46bd      	mov	sp, r7
 80054e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ec:	4770      	bx	lr

080054ee <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80054ee:	b480      	push	{r7}
 80054f0:	b083      	sub	sp, #12
 80054f2:	af00      	add	r7, sp, #0
 80054f4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80054f6:	bf00      	nop
 80054f8:	370c      	adds	r7, #12
 80054fa:	46bd      	mov	sp, r7
 80054fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005500:	4770      	bx	lr

08005502 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005502:	b480      	push	{r7}
 8005504:	b083      	sub	sp, #12
 8005506:	af00      	add	r7, sp, #0
 8005508:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800550a:	bf00      	nop
 800550c:	370c      	adds	r7, #12
 800550e:	46bd      	mov	sp, r7
 8005510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005514:	4770      	bx	lr

08005516 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005516:	b480      	push	{r7}
 8005518:	b083      	sub	sp, #12
 800551a:	af00      	add	r7, sp, #0
 800551c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800551e:	bf00      	nop
 8005520:	370c      	adds	r7, #12
 8005522:	46bd      	mov	sp, r7
 8005524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005528:	4770      	bx	lr

0800552a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800552a:	b480      	push	{r7}
 800552c:	b083      	sub	sp, #12
 800552e:	af00      	add	r7, sp, #0
 8005530:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8005532:	bf00      	nop
 8005534:	370c      	adds	r7, #12
 8005536:	46bd      	mov	sp, r7
 8005538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553c:	4770      	bx	lr

0800553e <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800553e:	b580      	push	{r7, lr}
 8005540:	b086      	sub	sp, #24
 8005542:	af00      	add	r7, sp, #0
 8005544:	60f8      	str	r0, [r7, #12]
 8005546:	60b9      	str	r1, [r7, #8]
 8005548:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800554e:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8005550:	68bb      	ldr	r3, [r7, #8]
 8005552:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800555a:	2b01      	cmp	r3, #1
 800555c:	d101      	bne.n	8005562 <I2C_Slave_ISR_IT+0x24>
 800555e:	2302      	movs	r3, #2
 8005560:	e0e2      	b.n	8005728 <I2C_Slave_ISR_IT+0x1ea>
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	2201      	movs	r2, #1
 8005566:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800556a:	693b      	ldr	r3, [r7, #16]
 800556c:	f003 0320 	and.w	r3, r3, #32
 8005570:	2b00      	cmp	r3, #0
 8005572:	d009      	beq.n	8005588 <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800557a:	2b00      	cmp	r3, #0
 800557c:	d004      	beq.n	8005588 <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800557e:	6939      	ldr	r1, [r7, #16]
 8005580:	68f8      	ldr	r0, [r7, #12]
 8005582:	f000 fdf9 	bl	8006178 <I2C_ITSlaveCplt>
 8005586:	e0ca      	b.n	800571e <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005588:	693b      	ldr	r3, [r7, #16]
 800558a:	f003 0310 	and.w	r3, r3, #16
 800558e:	2b00      	cmp	r3, #0
 8005590:	d04b      	beq.n	800562a <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005598:	2b00      	cmp	r3, #0
 800559a:	d046      	beq.n	800562a <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80055a0:	b29b      	uxth	r3, r3
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d128      	bne.n	80055f8 <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80055ac:	b2db      	uxtb	r3, r3
 80055ae:	2b28      	cmp	r3, #40	@ 0x28
 80055b0:	d108      	bne.n	80055c4 <I2C_Slave_ISR_IT+0x86>
 80055b2:	697b      	ldr	r3, [r7, #20]
 80055b4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80055b8:	d104      	bne.n	80055c4 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80055ba:	6939      	ldr	r1, [r7, #16]
 80055bc:	68f8      	ldr	r0, [r7, #12]
 80055be:	f000 ff3f 	bl	8006440 <I2C_ITListenCplt>
 80055c2:	e031      	b.n	8005628 <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80055ca:	b2db      	uxtb	r3, r3
 80055cc:	2b29      	cmp	r3, #41	@ 0x29
 80055ce:	d10e      	bne.n	80055ee <I2C_Slave_ISR_IT+0xb0>
 80055d0:	697b      	ldr	r3, [r7, #20]
 80055d2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80055d6:	d00a      	beq.n	80055ee <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	2210      	movs	r2, #16
 80055de:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80055e0:	68f8      	ldr	r0, [r7, #12]
 80055e2:	f001 f898 	bl	8006716 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80055e6:	68f8      	ldr	r0, [r7, #12]
 80055e8:	f000 fca1 	bl	8005f2e <I2C_ITSlaveSeqCplt>
 80055ec:	e01c      	b.n	8005628 <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	2210      	movs	r2, #16
 80055f4:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80055f6:	e08f      	b.n	8005718 <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	2210      	movs	r2, #16
 80055fe:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005604:	f043 0204 	orr.w	r2, r3, #4
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800560c:	697b      	ldr	r3, [r7, #20]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d003      	beq.n	800561a <I2C_Slave_ISR_IT+0xdc>
 8005612:	697b      	ldr	r3, [r7, #20]
 8005614:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005618:	d17e      	bne.n	8005718 <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800561e:	4619      	mov	r1, r3
 8005620:	68f8      	ldr	r0, [r7, #12]
 8005622:	f000 ff61 	bl	80064e8 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8005626:	e077      	b.n	8005718 <I2C_Slave_ISR_IT+0x1da>
 8005628:	e076      	b.n	8005718 <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800562a:	693b      	ldr	r3, [r7, #16]
 800562c:	f003 0304 	and.w	r3, r3, #4
 8005630:	2b00      	cmp	r3, #0
 8005632:	d02f      	beq.n	8005694 <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800563a:	2b00      	cmp	r3, #0
 800563c:	d02a      	beq.n	8005694 <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005642:	b29b      	uxth	r3, r3
 8005644:	2b00      	cmp	r3, #0
 8005646:	d018      	beq.n	800567a <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005652:	b2d2      	uxtb	r2, r2
 8005654:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800565a:	1c5a      	adds	r2, r3, #1
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005664:	3b01      	subs	r3, #1
 8005666:	b29a      	uxth	r2, r3
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005670:	b29b      	uxth	r3, r3
 8005672:	3b01      	subs	r3, #1
 8005674:	b29a      	uxth	r2, r3
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800567e:	b29b      	uxth	r3, r3
 8005680:	2b00      	cmp	r3, #0
 8005682:	d14b      	bne.n	800571c <I2C_Slave_ISR_IT+0x1de>
 8005684:	697b      	ldr	r3, [r7, #20]
 8005686:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800568a:	d047      	beq.n	800571c <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800568c:	68f8      	ldr	r0, [r7, #12]
 800568e:	f000 fc4e 	bl	8005f2e <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8005692:	e043      	b.n	800571c <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8005694:	693b      	ldr	r3, [r7, #16]
 8005696:	f003 0308 	and.w	r3, r3, #8
 800569a:	2b00      	cmp	r3, #0
 800569c:	d009      	beq.n	80056b2 <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d004      	beq.n	80056b2 <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80056a8:	6939      	ldr	r1, [r7, #16]
 80056aa:	68f8      	ldr	r0, [r7, #12]
 80056ac:	f000 fb7e 	bl	8005dac <I2C_ITAddrCplt>
 80056b0:	e035      	b.n	800571e <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80056b2:	693b      	ldr	r3, [r7, #16]
 80056b4:	f003 0302 	and.w	r3, r3, #2
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d030      	beq.n	800571e <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d02b      	beq.n	800571e <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80056ca:	b29b      	uxth	r3, r3
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d018      	beq.n	8005702 <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056d4:	781a      	ldrb	r2, [r3, #0]
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056e0:	1c5a      	adds	r2, r3, #1
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80056ea:	b29b      	uxth	r3, r3
 80056ec:	3b01      	subs	r3, #1
 80056ee:	b29a      	uxth	r2, r3
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80056f8:	3b01      	subs	r3, #1
 80056fa:	b29a      	uxth	r2, r3
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	851a      	strh	r2, [r3, #40]	@ 0x28
 8005700:	e00d      	b.n	800571e <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8005702:	697b      	ldr	r3, [r7, #20]
 8005704:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005708:	d002      	beq.n	8005710 <I2C_Slave_ISR_IT+0x1d2>
 800570a:	697b      	ldr	r3, [r7, #20]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d106      	bne.n	800571e <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8005710:	68f8      	ldr	r0, [r7, #12]
 8005712:	f000 fc0c 	bl	8005f2e <I2C_ITSlaveSeqCplt>
 8005716:	e002      	b.n	800571e <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 8005718:	bf00      	nop
 800571a:	e000      	b.n	800571e <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 800571c:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	2200      	movs	r2, #0
 8005722:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005726:	2300      	movs	r3, #0
}
 8005728:	4618      	mov	r0, r3
 800572a:	3718      	adds	r7, #24
 800572c:	46bd      	mov	sp, r7
 800572e:	bd80      	pop	{r7, pc}

08005730 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8005730:	b580      	push	{r7, lr}
 8005732:	b088      	sub	sp, #32
 8005734:	af02      	add	r7, sp, #8
 8005736:	60f8      	str	r0, [r7, #12]
 8005738:	60b9      	str	r1, [r7, #8]
 800573a:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005742:	2b01      	cmp	r3, #1
 8005744:	d101      	bne.n	800574a <I2C_Master_ISR_DMA+0x1a>
 8005746:	2302      	movs	r3, #2
 8005748:	e0d9      	b.n	80058fe <I2C_Master_ISR_DMA+0x1ce>
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	2201      	movs	r2, #1
 800574e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8005752:	68bb      	ldr	r3, [r7, #8]
 8005754:	f003 0310 	and.w	r3, r3, #16
 8005758:	2b00      	cmp	r3, #0
 800575a:	d016      	beq.n	800578a <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8005762:	2b00      	cmp	r3, #0
 8005764:	d011      	beq.n	800578a <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	2210      	movs	r2, #16
 800576c:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005772:	f043 0204 	orr.w	r2, r3, #4
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800577a:	2120      	movs	r1, #32
 800577c:	68f8      	ldr	r0, [r7, #12]
 800577e:	f001 fa63 	bl	8006c48 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005782:	68f8      	ldr	r0, [r7, #12]
 8005784:	f000 ffc7 	bl	8006716 <I2C_Flush_TXDR>
 8005788:	e0b4      	b.n	80058f4 <I2C_Master_ISR_DMA+0x1c4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800578a:	68bb      	ldr	r3, [r7, #8]
 800578c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005790:	2b00      	cmp	r3, #0
 8005792:	d071      	beq.n	8005878 <I2C_Master_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800579a:	2b00      	cmp	r3, #0
 800579c:	d06c      	beq.n	8005878 <I2C_Master_ISR_DMA+0x148>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	681a      	ldr	r2, [r3, #0]
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80057ac:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057b2:	b29b      	uxth	r3, r3
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d04e      	beq.n	8005856 <I2C_Master_ISR_DMA+0x126>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	685b      	ldr	r3, [r3, #4]
 80057be:	b29b      	uxth	r3, r3
 80057c0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80057c4:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057ca:	b29b      	uxth	r3, r3
 80057cc:	2bff      	cmp	r3, #255	@ 0xff
 80057ce:	d906      	bls.n	80057de <I2C_Master_ISR_DMA+0xae>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	22ff      	movs	r2, #255	@ 0xff
 80057d4:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 80057d6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80057da:	617b      	str	r3, [r7, #20]
 80057dc:	e010      	b.n	8005800 <I2C_Master_ISR_DMA+0xd0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057e2:	b29a      	uxth	r2, r3
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057ec:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80057f0:	d003      	beq.n	80057fa <I2C_Master_ISR_DMA+0xca>
        {
          xfermode = hi2c->XferOptions;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057f6:	617b      	str	r3, [r7, #20]
 80057f8:	e002      	b.n	8005800 <I2C_Master_ISR_DMA+0xd0>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 80057fa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80057fe:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005804:	b2da      	uxtb	r2, r3
 8005806:	8a79      	ldrh	r1, [r7, #18]
 8005808:	2300      	movs	r3, #0
 800580a:	9300      	str	r3, [sp, #0]
 800580c:	697b      	ldr	r3, [r7, #20]
 800580e:	68f8      	ldr	r0, [r7, #12]
 8005810:	f001 f9e8 	bl	8006be4 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005818:	b29a      	uxth	r2, r3
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800581e:	1ad3      	subs	r3, r2, r3
 8005820:	b29a      	uxth	r2, r3
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800582c:	b2db      	uxtb	r3, r3
 800582e:	2b22      	cmp	r3, #34	@ 0x22
 8005830:	d108      	bne.n	8005844 <I2C_Master_ISR_DMA+0x114>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	681a      	ldr	r2, [r3, #0]
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005840:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8005842:	e057      	b.n	80058f4 <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	681a      	ldr	r2, [r3, #0]
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005852:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8005854:	e04e      	b.n	80058f4 <I2C_Master_ISR_DMA+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	685b      	ldr	r3, [r3, #4]
 800585c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005860:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005864:	d003      	beq.n	800586e <I2C_Master_ISR_DMA+0x13e>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8005866:	68f8      	ldr	r0, [r7, #12]
 8005868:	f000 fb24 	bl	8005eb4 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 800586c:	e042      	b.n	80058f4 <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800586e:	2140      	movs	r1, #64	@ 0x40
 8005870:	68f8      	ldr	r0, [r7, #12]
 8005872:	f000 fe39 	bl	80064e8 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8005876:	e03d      	b.n	80058f4 <I2C_Master_ISR_DMA+0x1c4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8005878:	68bb      	ldr	r3, [r7, #8]
 800587a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800587e:	2b00      	cmp	r3, #0
 8005880:	d028      	beq.n	80058d4 <I2C_Master_ISR_DMA+0x1a4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8005888:	2b00      	cmp	r3, #0
 800588a:	d023      	beq.n	80058d4 <I2C_Master_ISR_DMA+0x1a4>
  {
    if (hi2c->XferCount == 0U)
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005890:	b29b      	uxth	r3, r3
 8005892:	2b00      	cmp	r3, #0
 8005894:	d119      	bne.n	80058ca <I2C_Master_ISR_DMA+0x19a>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	685b      	ldr	r3, [r3, #4]
 800589c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80058a0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80058a4:	d025      	beq.n	80058f2 <I2C_Master_ISR_DMA+0x1c2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058aa:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80058ae:	d108      	bne.n	80058c2 <I2C_Master_ISR_DMA+0x192>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	685a      	ldr	r2, [r3, #4]
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80058be:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 80058c0:	e017      	b.n	80058f2 <I2C_Master_ISR_DMA+0x1c2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 80058c2:	68f8      	ldr	r0, [r7, #12]
 80058c4:	f000 faf6 	bl	8005eb4 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 80058c8:	e013      	b.n	80058f2 <I2C_Master_ISR_DMA+0x1c2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80058ca:	2140      	movs	r1, #64	@ 0x40
 80058cc:	68f8      	ldr	r0, [r7, #12]
 80058ce:	f000 fe0b 	bl	80064e8 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80058d2:	e00e      	b.n	80058f2 <I2C_Master_ISR_DMA+0x1c2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80058d4:	68bb      	ldr	r3, [r7, #8]
 80058d6:	f003 0320 	and.w	r3, r3, #32
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d00a      	beq.n	80058f4 <I2C_Master_ISR_DMA+0x1c4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d005      	beq.n	80058f4 <I2C_Master_ISR_DMA+0x1c4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 80058e8:	68b9      	ldr	r1, [r7, #8]
 80058ea:	68f8      	ldr	r0, [r7, #12]
 80058ec:	f000 fb7c 	bl	8005fe8 <I2C_ITMasterCplt>
 80058f0:	e000      	b.n	80058f4 <I2C_Master_ISR_DMA+0x1c4>
    if (hi2c->XferCount == 0U)
 80058f2:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	2200      	movs	r2, #0
 80058f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80058fc:	2300      	movs	r3, #0
}
 80058fe:	4618      	mov	r0, r3
 8005900:	3718      	adds	r7, #24
 8005902:	46bd      	mov	sp, r7
 8005904:	bd80      	pop	{r7, pc}
	...

08005908 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8005908:	b580      	push	{r7, lr}
 800590a:	b088      	sub	sp, #32
 800590c:	af02      	add	r7, sp, #8
 800590e:	60f8      	str	r0, [r7, #12]
 8005910:	60b9      	str	r1, [r7, #8]
 8005912:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8005914:	4b8d      	ldr	r3, [pc, #564]	@ (8005b4c <I2C_Mem_ISR_DMA+0x244>)
 8005916:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800591e:	2b01      	cmp	r3, #1
 8005920:	d101      	bne.n	8005926 <I2C_Mem_ISR_DMA+0x1e>
 8005922:	2302      	movs	r3, #2
 8005924:	e10e      	b.n	8005b44 <I2C_Mem_ISR_DMA+0x23c>
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	2201      	movs	r2, #1
 800592a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800592e:	68bb      	ldr	r3, [r7, #8]
 8005930:	f003 0310 	and.w	r3, r3, #16
 8005934:	2b00      	cmp	r3, #0
 8005936:	d016      	beq.n	8005966 <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800593e:	2b00      	cmp	r3, #0
 8005940:	d011      	beq.n	8005966 <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	2210      	movs	r2, #16
 8005948:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800594e:	f043 0204 	orr.w	r2, r3, #4
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8005956:	2120      	movs	r1, #32
 8005958:	68f8      	ldr	r0, [r7, #12]
 800595a:	f001 f975 	bl	8006c48 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800595e:	68f8      	ldr	r0, [r7, #12]
 8005960:	f000 fed9 	bl	8006716 <I2C_Flush_TXDR>
 8005964:	e0e9      	b.n	8005b3a <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005966:	68bb      	ldr	r3, [r7, #8]
 8005968:	f003 0302 	and.w	r3, r3, #2
 800596c:	2b00      	cmp	r3, #0
 800596e:	d00e      	beq.n	800598e <I2C_Mem_ISR_DMA+0x86>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005976:	2b00      	cmp	r3, #0
 8005978:	d009      	beq.n	800598e <I2C_Mem_ISR_DMA+0x86>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	68fa      	ldr	r2, [r7, #12]
 8005980:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005982:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	f04f 32ff 	mov.w	r2, #4294967295
 800598a:	651a      	str	r2, [r3, #80]	@ 0x50
 800598c:	e0d5      	b.n	8005b3a <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800598e:	68bb      	ldr	r3, [r7, #8]
 8005990:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005994:	2b00      	cmp	r3, #0
 8005996:	d05f      	beq.n	8005a58 <I2C_Mem_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d05a      	beq.n	8005a58 <I2C_Mem_ISR_DMA+0x150>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80059a2:	2101      	movs	r1, #1
 80059a4:	68f8      	ldr	r0, [r7, #12]
 80059a6:	f001 f9d3 	bl	8006d50 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80059aa:	2110      	movs	r1, #16
 80059ac:	68f8      	ldr	r0, [r7, #12]
 80059ae:	f001 f94b 	bl	8006c48 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80059b6:	b29b      	uxth	r3, r3
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d048      	beq.n	8005a4e <I2C_Mem_ISR_DMA+0x146>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80059c0:	b29b      	uxth	r3, r3
 80059c2:	2bff      	cmp	r3, #255	@ 0xff
 80059c4:	d910      	bls.n	80059e8 <I2C_Mem_ISR_DMA+0xe0>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	22ff      	movs	r2, #255	@ 0xff
 80059ca:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80059d0:	b299      	uxth	r1, r3
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80059d6:	b2da      	uxtb	r2, r3
 80059d8:	2300      	movs	r3, #0
 80059da:	9300      	str	r3, [sp, #0]
 80059dc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80059e0:	68f8      	ldr	r0, [r7, #12]
 80059e2:	f001 f8ff 	bl	8006be4 <I2C_TransferConfig>
 80059e6:	e011      	b.n	8005a0c <I2C_Mem_ISR_DMA+0x104>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80059ec:	b29a      	uxth	r2, r3
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80059f6:	b299      	uxth	r1, r3
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80059fc:	b2da      	uxtb	r2, r3
 80059fe:	2300      	movs	r3, #0
 8005a00:	9300      	str	r3, [sp, #0]
 8005a02:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005a06:	68f8      	ldr	r0, [r7, #12]
 8005a08:	f001 f8ec 	bl	8006be4 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a10:	b29a      	uxth	r2, r3
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a16:	1ad3      	subs	r3, r2, r3
 8005a18:	b29a      	uxth	r2, r3
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005a24:	b2db      	uxtb	r3, r3
 8005a26:	2b22      	cmp	r3, #34	@ 0x22
 8005a28:	d108      	bne.n	8005a3c <I2C_Mem_ISR_DMA+0x134>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	681a      	ldr	r2, [r3, #0]
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005a38:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8005a3a:	e07e      	b.n	8005b3a <I2C_Mem_ISR_DMA+0x232>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	681a      	ldr	r2, [r3, #0]
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005a4a:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8005a4c:	e075      	b.n	8005b3a <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8005a4e:	2140      	movs	r1, #64	@ 0x40
 8005a50:	68f8      	ldr	r0, [r7, #12]
 8005a52:	f000 fd49 	bl	80064e8 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8005a56:	e070      	b.n	8005b3a <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8005a58:	68bb      	ldr	r3, [r7, #8]
 8005a5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d05d      	beq.n	8005b1e <I2C_Mem_ISR_DMA+0x216>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d058      	beq.n	8005b1e <I2C_Mem_ISR_DMA+0x216>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8005a6c:	2101      	movs	r1, #1
 8005a6e:	68f8      	ldr	r0, [r7, #12]
 8005a70:	f001 f96e 	bl	8006d50 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8005a74:	2110      	movs	r1, #16
 8005a76:	68f8      	ldr	r0, [r7, #12]
 8005a78:	f001 f8e6 	bl	8006c48 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005a82:	b2db      	uxtb	r3, r3
 8005a84:	2b22      	cmp	r3, #34	@ 0x22
 8005a86:	d101      	bne.n	8005a8c <I2C_Mem_ISR_DMA+0x184>
    {
      direction = I2C_GENERATE_START_READ;
 8005a88:	4b31      	ldr	r3, [pc, #196]	@ (8005b50 <I2C_Mem_ISR_DMA+0x248>)
 8005a8a:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a90:	b29b      	uxth	r3, r3
 8005a92:	2bff      	cmp	r3, #255	@ 0xff
 8005a94:	d910      	bls.n	8005ab8 <I2C_Mem_ISR_DMA+0x1b0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	22ff      	movs	r2, #255	@ 0xff
 8005a9a:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005aa0:	b299      	uxth	r1, r3
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005aa6:	b2da      	uxtb	r2, r3
 8005aa8:	697b      	ldr	r3, [r7, #20]
 8005aaa:	9300      	str	r3, [sp, #0]
 8005aac:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005ab0:	68f8      	ldr	r0, [r7, #12]
 8005ab2:	f001 f897 	bl	8006be4 <I2C_TransferConfig>
 8005ab6:	e011      	b.n	8005adc <I2C_Mem_ISR_DMA+0x1d4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005abc:	b29a      	uxth	r2, r3
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005ac6:	b299      	uxth	r1, r3
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005acc:	b2da      	uxtb	r2, r3
 8005ace:	697b      	ldr	r3, [r7, #20]
 8005ad0:	9300      	str	r3, [sp, #0]
 8005ad2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005ad6:	68f8      	ldr	r0, [r7, #12]
 8005ad8:	f001 f884 	bl	8006be4 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ae0:	b29a      	uxth	r2, r3
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ae6:	1ad3      	subs	r3, r2, r3
 8005ae8:	b29a      	uxth	r2, r3
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005af4:	b2db      	uxtb	r3, r3
 8005af6:	2b22      	cmp	r3, #34	@ 0x22
 8005af8:	d108      	bne.n	8005b0c <I2C_Mem_ISR_DMA+0x204>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	681a      	ldr	r2, [r3, #0]
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005b08:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005b0a:	e016      	b.n	8005b3a <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	681a      	ldr	r2, [r3, #0]
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005b1a:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005b1c:	e00d      	b.n	8005b3a <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005b1e:	68bb      	ldr	r3, [r7, #8]
 8005b20:	f003 0320 	and.w	r3, r3, #32
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d008      	beq.n	8005b3a <I2C_Mem_ISR_DMA+0x232>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d003      	beq.n	8005b3a <I2C_Mem_ISR_DMA+0x232>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8005b32:	68b9      	ldr	r1, [r7, #8]
 8005b34:	68f8      	ldr	r0, [r7, #12]
 8005b36:	f000 fa57 	bl	8005fe8 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005b42:	2300      	movs	r3, #0
}
 8005b44:	4618      	mov	r0, r3
 8005b46:	3718      	adds	r7, #24
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	bd80      	pop	{r7, pc}
 8005b4c:	80002000 	.word	0x80002000
 8005b50:	80002400 	.word	0x80002400

08005b54 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b088      	sub	sp, #32
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	60f8      	str	r0, [r7, #12]
 8005b5c:	60b9      	str	r1, [r7, #8]
 8005b5e:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b64:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8005b66:	2300      	movs	r3, #0
 8005b68:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005b70:	2b01      	cmp	r3, #1
 8005b72:	d101      	bne.n	8005b78 <I2C_Slave_ISR_DMA+0x24>
 8005b74:	2302      	movs	r3, #2
 8005b76:	e0c0      	b.n	8005cfa <I2C_Slave_ISR_DMA+0x1a6>
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	2201      	movs	r2, #1
 8005b7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005b80:	68bb      	ldr	r3, [r7, #8]
 8005b82:	f003 0320 	and.w	r3, r3, #32
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d009      	beq.n	8005b9e <I2C_Slave_ISR_DMA+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d004      	beq.n	8005b9e <I2C_Slave_ISR_DMA+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8005b94:	68b9      	ldr	r1, [r7, #8]
 8005b96:	68f8      	ldr	r0, [r7, #12]
 8005b98:	f000 faee 	bl	8006178 <I2C_ITSlaveCplt>
 8005b9c:	e0a8      	b.n	8005cf0 <I2C_Slave_ISR_DMA+0x19c>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8005b9e:	68bb      	ldr	r3, [r7, #8]
 8005ba0:	f003 0310 	and.w	r3, r3, #16
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	f000 8095 	beq.w	8005cd4 <I2C_Slave_ISR_DMA+0x180>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	f000 808f 	beq.w	8005cd4 <I2C_Slave_ISR_DMA+0x180>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d104      	bne.n	8005bca <I2C_Slave_ISR_DMA+0x76>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d07d      	beq.n	8005cc6 <I2C_Slave_ISR_DMA+0x172>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d00c      	beq.n	8005bec <I2C_Slave_ISR_DMA+0x98>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d007      	beq.n	8005bec <I2C_Slave_ISR_DMA+0x98>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	685b      	ldr	r3, [r3, #4]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d101      	bne.n	8005bec <I2C_Slave_ISR_DMA+0x98>
          {
            treatdmanack = 1U;
 8005be8:	2301      	movs	r3, #1
 8005bea:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d00c      	beq.n	8005c0e <I2C_Slave_ISR_DMA+0xba>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d007      	beq.n	8005c0e <I2C_Slave_ISR_DMA+0xba>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	685b      	ldr	r3, [r3, #4]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d101      	bne.n	8005c0e <I2C_Slave_ISR_DMA+0xba>
          {
            treatdmanack = 1U;
 8005c0a:	2301      	movs	r3, #1
 8005c0c:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8005c0e:	69fb      	ldr	r3, [r7, #28]
 8005c10:	2b01      	cmp	r3, #1
 8005c12:	d128      	bne.n	8005c66 <I2C_Slave_ISR_DMA+0x112>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005c1a:	b2db      	uxtb	r3, r3
 8005c1c:	2b28      	cmp	r3, #40	@ 0x28
 8005c1e:	d108      	bne.n	8005c32 <I2C_Slave_ISR_DMA+0xde>
 8005c20:	69bb      	ldr	r3, [r7, #24]
 8005c22:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005c26:	d104      	bne.n	8005c32 <I2C_Slave_ISR_DMA+0xde>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8005c28:	68b9      	ldr	r1, [r7, #8]
 8005c2a:	68f8      	ldr	r0, [r7, #12]
 8005c2c:	f000 fc08 	bl	8006440 <I2C_ITListenCplt>
 8005c30:	e048      	b.n	8005cc4 <I2C_Slave_ISR_DMA+0x170>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005c38:	b2db      	uxtb	r3, r3
 8005c3a:	2b29      	cmp	r3, #41	@ 0x29
 8005c3c:	d10e      	bne.n	8005c5c <I2C_Slave_ISR_DMA+0x108>
 8005c3e:	69bb      	ldr	r3, [r7, #24]
 8005c40:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005c44:	d00a      	beq.n	8005c5c <I2C_Slave_ISR_DMA+0x108>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	2210      	movs	r2, #16
 8005c4c:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8005c4e:	68f8      	ldr	r0, [r7, #12]
 8005c50:	f000 fd61 	bl	8006716 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8005c54:	68f8      	ldr	r0, [r7, #12]
 8005c56:	f000 f96a 	bl	8005f2e <I2C_ITSlaveSeqCplt>
 8005c5a:	e033      	b.n	8005cc4 <I2C_Slave_ISR_DMA+0x170>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	2210      	movs	r2, #16
 8005c62:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8005c64:	e034      	b.n	8005cd0 <I2C_Slave_ISR_DMA+0x17c>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	2210      	movs	r2, #16
 8005c6c:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c72:	f043 0204 	orr.w	r2, r3, #4
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005c80:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8005c82:	69bb      	ldr	r3, [r7, #24]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d003      	beq.n	8005c90 <I2C_Slave_ISR_DMA+0x13c>
 8005c88:	69bb      	ldr	r3, [r7, #24]
 8005c8a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005c8e:	d11f      	bne.n	8005cd0 <I2C_Slave_ISR_DMA+0x17c>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005c90:	7dfb      	ldrb	r3, [r7, #23]
 8005c92:	2b21      	cmp	r3, #33	@ 0x21
 8005c94:	d002      	beq.n	8005c9c <I2C_Slave_ISR_DMA+0x148>
 8005c96:	7dfb      	ldrb	r3, [r7, #23]
 8005c98:	2b29      	cmp	r3, #41	@ 0x29
 8005c9a:	d103      	bne.n	8005ca4 <I2C_Slave_ISR_DMA+0x150>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	2221      	movs	r2, #33	@ 0x21
 8005ca0:	631a      	str	r2, [r3, #48]	@ 0x30
 8005ca2:	e008      	b.n	8005cb6 <I2C_Slave_ISR_DMA+0x162>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005ca4:	7dfb      	ldrb	r3, [r7, #23]
 8005ca6:	2b22      	cmp	r3, #34	@ 0x22
 8005ca8:	d002      	beq.n	8005cb0 <I2C_Slave_ISR_DMA+0x15c>
 8005caa:	7dfb      	ldrb	r3, [r7, #23]
 8005cac:	2b2a      	cmp	r3, #42	@ 0x2a
 8005cae:	d102      	bne.n	8005cb6 <I2C_Slave_ISR_DMA+0x162>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	2222      	movs	r2, #34	@ 0x22
 8005cb4:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005cba:	4619      	mov	r1, r3
 8005cbc:	68f8      	ldr	r0, [r7, #12]
 8005cbe:	f000 fc13 	bl	80064e8 <I2C_ITError>
      if (treatdmanack == 1U)
 8005cc2:	e005      	b.n	8005cd0 <I2C_Slave_ISR_DMA+0x17c>
 8005cc4:	e004      	b.n	8005cd0 <I2C_Slave_ISR_DMA+0x17c>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	2210      	movs	r2, #16
 8005ccc:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8005cce:	e00f      	b.n	8005cf0 <I2C_Slave_ISR_DMA+0x19c>
      if (treatdmanack == 1U)
 8005cd0:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8005cd2:	e00d      	b.n	8005cf0 <I2C_Slave_ISR_DMA+0x19c>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8005cd4:	68bb      	ldr	r3, [r7, #8]
 8005cd6:	f003 0308 	and.w	r3, r3, #8
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d008      	beq.n	8005cf0 <I2C_Slave_ISR_DMA+0x19c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d003      	beq.n	8005cf0 <I2C_Slave_ISR_DMA+0x19c>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8005ce8:	68b9      	ldr	r1, [r7, #8]
 8005cea:	68f8      	ldr	r0, [r7, #12]
 8005cec:	f000 f85e 	bl	8005dac <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005cf8:	2300      	movs	r3, #0
}
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	3720      	adds	r7, #32
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	bd80      	pop	{r7, pc}
	...

08005d04 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8005d04:	b580      	push	{r7, lr}
 8005d06:	b086      	sub	sp, #24
 8005d08:	af02      	add	r7, sp, #8
 8005d0a:	60f8      	str	r0, [r7, #12]
 8005d0c:	4608      	mov	r0, r1
 8005d0e:	4611      	mov	r1, r2
 8005d10:	461a      	mov	r2, r3
 8005d12:	4603      	mov	r3, r0
 8005d14:	817b      	strh	r3, [r7, #10]
 8005d16:	460b      	mov	r3, r1
 8005d18:	813b      	strh	r3, [r7, #8]
 8005d1a:	4613      	mov	r3, r2
 8005d1c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005d1e:	88fb      	ldrh	r3, [r7, #6]
 8005d20:	b2da      	uxtb	r2, r3
 8005d22:	8979      	ldrh	r1, [r7, #10]
 8005d24:	4b20      	ldr	r3, [pc, #128]	@ (8005da8 <I2C_RequestMemoryWrite+0xa4>)
 8005d26:	9300      	str	r3, [sp, #0]
 8005d28:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005d2c:	68f8      	ldr	r0, [r7, #12]
 8005d2e:	f000 ff59 	bl	8006be4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005d32:	69fa      	ldr	r2, [r7, #28]
 8005d34:	69b9      	ldr	r1, [r7, #24]
 8005d36:	68f8      	ldr	r0, [r7, #12]
 8005d38:	f000 fdea 	bl	8006910 <I2C_WaitOnTXISFlagUntilTimeout>
 8005d3c:	4603      	mov	r3, r0
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d001      	beq.n	8005d46 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8005d42:	2301      	movs	r3, #1
 8005d44:	e02c      	b.n	8005da0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005d46:	88fb      	ldrh	r3, [r7, #6]
 8005d48:	2b01      	cmp	r3, #1
 8005d4a:	d105      	bne.n	8005d58 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005d4c:	893b      	ldrh	r3, [r7, #8]
 8005d4e:	b2da      	uxtb	r2, r3
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	629a      	str	r2, [r3, #40]	@ 0x28
 8005d56:	e015      	b.n	8005d84 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005d58:	893b      	ldrh	r3, [r7, #8]
 8005d5a:	0a1b      	lsrs	r3, r3, #8
 8005d5c:	b29b      	uxth	r3, r3
 8005d5e:	b2da      	uxtb	r2, r3
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005d66:	69fa      	ldr	r2, [r7, #28]
 8005d68:	69b9      	ldr	r1, [r7, #24]
 8005d6a:	68f8      	ldr	r0, [r7, #12]
 8005d6c:	f000 fdd0 	bl	8006910 <I2C_WaitOnTXISFlagUntilTimeout>
 8005d70:	4603      	mov	r3, r0
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d001      	beq.n	8005d7a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8005d76:	2301      	movs	r3, #1
 8005d78:	e012      	b.n	8005da0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005d7a:	893b      	ldrh	r3, [r7, #8]
 8005d7c:	b2da      	uxtb	r2, r3
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8005d84:	69fb      	ldr	r3, [r7, #28]
 8005d86:	9300      	str	r3, [sp, #0]
 8005d88:	69bb      	ldr	r3, [r7, #24]
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	2180      	movs	r1, #128	@ 0x80
 8005d8e:	68f8      	ldr	r0, [r7, #12]
 8005d90:	f000 fd65 	bl	800685e <I2C_WaitOnFlagUntilTimeout>
 8005d94:	4603      	mov	r3, r0
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d001      	beq.n	8005d9e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8005d9a:	2301      	movs	r3, #1
 8005d9c:	e000      	b.n	8005da0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8005d9e:	2300      	movs	r3, #0
}
 8005da0:	4618      	mov	r0, r3
 8005da2:	3710      	adds	r7, #16
 8005da4:	46bd      	mov	sp, r7
 8005da6:	bd80      	pop	{r7, pc}
 8005da8:	80002000 	.word	0x80002000

08005dac <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005dac:	b580      	push	{r7, lr}
 8005dae:	b084      	sub	sp, #16
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
 8005db4:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005dbc:	b2db      	uxtb	r3, r3
 8005dbe:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005dc2:	2b28      	cmp	r3, #40	@ 0x28
 8005dc4:	d16a      	bne.n	8005e9c <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	699b      	ldr	r3, [r3, #24]
 8005dcc:	0c1b      	lsrs	r3, r3, #16
 8005dce:	b2db      	uxtb	r3, r3
 8005dd0:	f003 0301 	and.w	r3, r3, #1
 8005dd4:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	699b      	ldr	r3, [r3, #24]
 8005ddc:	0c1b      	lsrs	r3, r3, #16
 8005dde:	b29b      	uxth	r3, r3
 8005de0:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8005de4:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	689b      	ldr	r3, [r3, #8]
 8005dec:	b29b      	uxth	r3, r3
 8005dee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005df2:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	68db      	ldr	r3, [r3, #12]
 8005dfa:	b29b      	uxth	r3, r3
 8005dfc:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8005e00:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	68db      	ldr	r3, [r3, #12]
 8005e06:	2b02      	cmp	r3, #2
 8005e08:	d138      	bne.n	8005e7c <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8005e0a:	897b      	ldrh	r3, [r7, #10]
 8005e0c:	09db      	lsrs	r3, r3, #7
 8005e0e:	b29a      	uxth	r2, r3
 8005e10:	89bb      	ldrh	r3, [r7, #12]
 8005e12:	4053      	eors	r3, r2
 8005e14:	b29b      	uxth	r3, r3
 8005e16:	f003 0306 	and.w	r3, r3, #6
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d11c      	bne.n	8005e58 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8005e1e:	897b      	ldrh	r3, [r7, #10]
 8005e20:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005e26:	1c5a      	adds	r2, r3, #1
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005e30:	2b02      	cmp	r3, #2
 8005e32:	d13b      	bne.n	8005eac <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2200      	movs	r2, #0
 8005e38:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	2208      	movs	r2, #8
 8005e40:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	2200      	movs	r2, #0
 8005e46:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8005e4a:	89ba      	ldrh	r2, [r7, #12]
 8005e4c:	7bfb      	ldrb	r3, [r7, #15]
 8005e4e:	4619      	mov	r1, r3
 8005e50:	6878      	ldr	r0, [r7, #4]
 8005e52:	f7ff fb3e 	bl	80054d2 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8005e56:	e029      	b.n	8005eac <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8005e58:	893b      	ldrh	r3, [r7, #8]
 8005e5a:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8005e5c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005e60:	6878      	ldr	r0, [r7, #4]
 8005e62:	f000 ff75 	bl	8006d50 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	2200      	movs	r2, #0
 8005e6a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8005e6e:	89ba      	ldrh	r2, [r7, #12]
 8005e70:	7bfb      	ldrb	r3, [r7, #15]
 8005e72:	4619      	mov	r1, r3
 8005e74:	6878      	ldr	r0, [r7, #4]
 8005e76:	f7ff fb2c 	bl	80054d2 <HAL_I2C_AddrCallback>
}
 8005e7a:	e017      	b.n	8005eac <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8005e7c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005e80:	6878      	ldr	r0, [r7, #4]
 8005e82:	f000 ff65 	bl	8006d50 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	2200      	movs	r2, #0
 8005e8a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8005e8e:	89ba      	ldrh	r2, [r7, #12]
 8005e90:	7bfb      	ldrb	r3, [r7, #15]
 8005e92:	4619      	mov	r1, r3
 8005e94:	6878      	ldr	r0, [r7, #4]
 8005e96:	f7ff fb1c 	bl	80054d2 <HAL_I2C_AddrCallback>
}
 8005e9a:	e007      	b.n	8005eac <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	2208      	movs	r2, #8
 8005ea2:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8005eac:	bf00      	nop
 8005eae:	3710      	adds	r7, #16
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	bd80      	pop	{r7, pc}

08005eb4 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8005eb4:	b580      	push	{r7, lr}
 8005eb6:	b082      	sub	sp, #8
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005eca:	b2db      	uxtb	r3, r3
 8005ecc:	2b21      	cmp	r3, #33	@ 0x21
 8005ece:	d115      	bne.n	8005efc <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2220      	movs	r2, #32
 8005ed4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2211      	movs	r2, #17
 8005edc:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8005ee4:	2101      	movs	r1, #1
 8005ee6:	6878      	ldr	r0, [r7, #4]
 8005ee8:	f000 ff32 	bl	8006d50 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2200      	movs	r2, #0
 8005ef0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8005ef4:	6878      	ldr	r0, [r7, #4]
 8005ef6:	f7ff fac4 	bl	8005482 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005efa:	e014      	b.n	8005f26 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2220      	movs	r2, #32
 8005f00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2212      	movs	r2, #18
 8005f08:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8005f10:	2102      	movs	r1, #2
 8005f12:	6878      	ldr	r0, [r7, #4]
 8005f14:	f000 ff1c 	bl	8006d50 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8005f20:	6878      	ldr	r0, [r7, #4]
 8005f22:	f7ff fab8 	bl	8005496 <HAL_I2C_MasterRxCpltCallback>
}
 8005f26:	bf00      	nop
 8005f28:	3708      	adds	r7, #8
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	bd80      	pop	{r7, pc}

08005f2e <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8005f2e:	b580      	push	{r7, lr}
 8005f30:	b084      	sub	sp, #16
 8005f32:	af00      	add	r7, sp, #0
 8005f34:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	2200      	movs	r2, #0
 8005f42:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d008      	beq.n	8005f62 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	681a      	ldr	r2, [r3, #0]
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005f5e:	601a      	str	r2, [r3, #0]
 8005f60:	e00c      	b.n	8005f7c <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d007      	beq.n	8005f7c <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	681a      	ldr	r2, [r3, #0]
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005f7a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005f82:	b2db      	uxtb	r3, r3
 8005f84:	2b29      	cmp	r3, #41	@ 0x29
 8005f86:	d112      	bne.n	8005fae <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2228      	movs	r2, #40	@ 0x28
 8005f8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2221      	movs	r2, #33	@ 0x21
 8005f94:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8005f96:	2101      	movs	r1, #1
 8005f98:	6878      	ldr	r0, [r7, #4]
 8005f9a:	f000 fed9 	bl	8006d50 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005fa6:	6878      	ldr	r0, [r7, #4]
 8005fa8:	f7ff fa7f 	bl	80054aa <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8005fac:	e017      	b.n	8005fde <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005fb4:	b2db      	uxtb	r3, r3
 8005fb6:	2b2a      	cmp	r3, #42	@ 0x2a
 8005fb8:	d111      	bne.n	8005fde <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	2228      	movs	r2, #40	@ 0x28
 8005fbe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	2222      	movs	r2, #34	@ 0x22
 8005fc6:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8005fc8:	2102      	movs	r1, #2
 8005fca:	6878      	ldr	r0, [r7, #4]
 8005fcc:	f000 fec0 	bl	8006d50 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005fd8:	6878      	ldr	r0, [r7, #4]
 8005fda:	f7ff fa70 	bl	80054be <HAL_I2C_SlaveRxCpltCallback>
}
 8005fde:	bf00      	nop
 8005fe0:	3710      	adds	r7, #16
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	bd80      	pop	{r7, pc}
	...

08005fe8 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b086      	sub	sp, #24
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
 8005ff0:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	2220      	movs	r2, #32
 8005ffc:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006004:	b2db      	uxtb	r3, r3
 8006006:	2b21      	cmp	r3, #33	@ 0x21
 8006008:	d107      	bne.n	800601a <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800600a:	2101      	movs	r1, #1
 800600c:	6878      	ldr	r0, [r7, #4]
 800600e:	f000 fe9f 	bl	8006d50 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	2211      	movs	r2, #17
 8006016:	631a      	str	r2, [r3, #48]	@ 0x30
 8006018:	e00c      	b.n	8006034 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006020:	b2db      	uxtb	r3, r3
 8006022:	2b22      	cmp	r3, #34	@ 0x22
 8006024:	d106      	bne.n	8006034 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8006026:	2102      	movs	r1, #2
 8006028:	6878      	ldr	r0, [r7, #4]
 800602a:	f000 fe91 	bl	8006d50 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2212      	movs	r2, #18
 8006032:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	6859      	ldr	r1, [r3, #4]
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681a      	ldr	r2, [r3, #0]
 800603e:	4b4c      	ldr	r3, [pc, #304]	@ (8006170 <I2C_ITMasterCplt+0x188>)
 8006040:	400b      	ands	r3, r1
 8006042:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2200      	movs	r2, #0
 8006048:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	4a49      	ldr	r2, [pc, #292]	@ (8006174 <I2C_ITMasterCplt+0x18c>)
 800604e:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8006050:	697b      	ldr	r3, [r7, #20]
 8006052:	f003 0310 	and.w	r3, r3, #16
 8006056:	2b00      	cmp	r3, #0
 8006058:	d009      	beq.n	800606e <I2C_ITMasterCplt+0x86>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	2210      	movs	r2, #16
 8006060:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006066:	f043 0204 	orr.w	r2, r3, #4
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006074:	b2db      	uxtb	r3, r3
 8006076:	2b60      	cmp	r3, #96	@ 0x60
 8006078:	d10a      	bne.n	8006090 <I2C_ITMasterCplt+0xa8>
 800607a:	697b      	ldr	r3, [r7, #20]
 800607c:	f003 0304 	and.w	r3, r3, #4
 8006080:	2b00      	cmp	r3, #0
 8006082:	d005      	beq.n	8006090 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800608a:	b2db      	uxtb	r3, r3
 800608c:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 800608e:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8006090:	6878      	ldr	r0, [r7, #4]
 8006092:	f000 fb40 	bl	8006716 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800609a:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80060a2:	b2db      	uxtb	r3, r3
 80060a4:	2b60      	cmp	r3, #96	@ 0x60
 80060a6:	d002      	beq.n	80060ae <I2C_ITMasterCplt+0xc6>
 80060a8:	693b      	ldr	r3, [r7, #16]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d006      	beq.n	80060bc <I2C_ITMasterCplt+0xd4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80060b2:	4619      	mov	r1, r3
 80060b4:	6878      	ldr	r0, [r7, #4]
 80060b6:	f000 fa17 	bl	80064e8 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 80060ba:	e054      	b.n	8006166 <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80060c2:	b2db      	uxtb	r3, r3
 80060c4:	2b21      	cmp	r3, #33	@ 0x21
 80060c6:	d124      	bne.n	8006112 <I2C_ITMasterCplt+0x12a>
    hi2c->State = HAL_I2C_STATE_READY;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2220      	movs	r2, #32
 80060cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2200      	movs	r2, #0
 80060d4:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80060dc:	b2db      	uxtb	r3, r3
 80060de:	2b40      	cmp	r3, #64	@ 0x40
 80060e0:	d10b      	bne.n	80060fa <I2C_ITMasterCplt+0x112>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	2200      	movs	r2, #0
 80060e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	2200      	movs	r2, #0
 80060ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 80060f2:	6878      	ldr	r0, [r7, #4]
 80060f4:	f7ff fa05 	bl	8005502 <HAL_I2C_MemTxCpltCallback>
}
 80060f8:	e035      	b.n	8006166 <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	2200      	movs	r2, #0
 80060fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	2200      	movs	r2, #0
 8006106:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800610a:	6878      	ldr	r0, [r7, #4]
 800610c:	f7ff f9b9 	bl	8005482 <HAL_I2C_MasterTxCpltCallback>
}
 8006110:	e029      	b.n	8006166 <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006118:	b2db      	uxtb	r3, r3
 800611a:	2b22      	cmp	r3, #34	@ 0x22
 800611c:	d123      	bne.n	8006166 <I2C_ITMasterCplt+0x17e>
    hi2c->State = HAL_I2C_STATE_READY;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	2220      	movs	r2, #32
 8006122:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	2200      	movs	r2, #0
 800612a:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006132:	b2db      	uxtb	r3, r3
 8006134:	2b40      	cmp	r3, #64	@ 0x40
 8006136:	d10b      	bne.n	8006150 <I2C_ITMasterCplt+0x168>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2200      	movs	r2, #0
 800613c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2200      	movs	r2, #0
 8006144:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8006148:	6878      	ldr	r0, [r7, #4]
 800614a:	f7fc ff9d 	bl	8003088 <HAL_I2C_MemRxCpltCallback>
}
 800614e:	e00a      	b.n	8006166 <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2200      	movs	r2, #0
 8006154:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2200      	movs	r2, #0
 800615c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8006160:	6878      	ldr	r0, [r7, #4]
 8006162:	f7ff f998 	bl	8005496 <HAL_I2C_MasterRxCpltCallback>
}
 8006166:	bf00      	nop
 8006168:	3718      	adds	r7, #24
 800616a:	46bd      	mov	sp, r7
 800616c:	bd80      	pop	{r7, pc}
 800616e:	bf00      	nop
 8006170:	fe00e800 	.word	0xfe00e800
 8006174:	ffff0000 	.word	0xffff0000

08006178 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006178:	b580      	push	{r7, lr}
 800617a:	b086      	sub	sp, #24
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
 8006180:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800618a:	683b      	ldr	r3, [r7, #0]
 800618c:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006192:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800619a:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	2220      	movs	r2, #32
 80061a2:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80061a4:	7afb      	ldrb	r3, [r7, #11]
 80061a6:	2b21      	cmp	r3, #33	@ 0x21
 80061a8:	d002      	beq.n	80061b0 <I2C_ITSlaveCplt+0x38>
 80061aa:	7afb      	ldrb	r3, [r7, #11]
 80061ac:	2b29      	cmp	r3, #41	@ 0x29
 80061ae:	d108      	bne.n	80061c2 <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80061b0:	f248 0101 	movw	r1, #32769	@ 0x8001
 80061b4:	6878      	ldr	r0, [r7, #4]
 80061b6:	f000 fdcb 	bl	8006d50 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	2221      	movs	r2, #33	@ 0x21
 80061be:	631a      	str	r2, [r3, #48]	@ 0x30
 80061c0:	e019      	b.n	80061f6 <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80061c2:	7afb      	ldrb	r3, [r7, #11]
 80061c4:	2b22      	cmp	r3, #34	@ 0x22
 80061c6:	d002      	beq.n	80061ce <I2C_ITSlaveCplt+0x56>
 80061c8:	7afb      	ldrb	r3, [r7, #11]
 80061ca:	2b2a      	cmp	r3, #42	@ 0x2a
 80061cc:	d108      	bne.n	80061e0 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80061ce:	f248 0102 	movw	r1, #32770	@ 0x8002
 80061d2:	6878      	ldr	r0, [r7, #4]
 80061d4:	f000 fdbc 	bl	8006d50 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2222      	movs	r2, #34	@ 0x22
 80061dc:	631a      	str	r2, [r3, #48]	@ 0x30
 80061de:	e00a      	b.n	80061f6 <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 80061e0:	7afb      	ldrb	r3, [r7, #11]
 80061e2:	2b28      	cmp	r3, #40	@ 0x28
 80061e4:	d107      	bne.n	80061f6 <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 80061e6:	f248 0103 	movw	r1, #32771	@ 0x8003
 80061ea:	6878      	ldr	r0, [r7, #4]
 80061ec:	f000 fdb0 	bl	8006d50 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2200      	movs	r2, #0
 80061f4:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	685a      	ldr	r2, [r3, #4]
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006204:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	6859      	ldr	r1, [r3, #4]
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681a      	ldr	r2, [r3, #0]
 8006210:	4b89      	ldr	r3, [pc, #548]	@ (8006438 <I2C_ITSlaveCplt+0x2c0>)
 8006212:	400b      	ands	r3, r1
 8006214:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8006216:	6878      	ldr	r0, [r7, #4]
 8006218:	f000 fa7d 	bl	8006716 <I2C_Flush_TXDR>

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800621c:	693b      	ldr	r3, [r7, #16]
 800621e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006222:	2b00      	cmp	r3, #0
 8006224:	d013      	beq.n	800624e <I2C_ITSlaveCplt+0xd6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	681a      	ldr	r2, [r3, #0]
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006234:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800623a:	2b00      	cmp	r3, #0
 800623c:	d01f      	beq.n	800627e <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	685b      	ldr	r3, [r3, #4]
 8006246:	b29a      	uxth	r2, r3
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800624c:	e017      	b.n	800627e <I2C_ITSlaveCplt+0x106>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800624e:	693b      	ldr	r3, [r7, #16]
 8006250:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006254:	2b00      	cmp	r3, #0
 8006256:	d012      	beq.n	800627e <I2C_ITSlaveCplt+0x106>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	681a      	ldr	r2, [r3, #0]
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006266:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800626c:	2b00      	cmp	r3, #0
 800626e:	d006      	beq.n	800627e <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	685b      	ldr	r3, [r3, #4]
 8006278:	b29a      	uxth	r2, r3
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800627e:	697b      	ldr	r3, [r7, #20]
 8006280:	f003 0304 	and.w	r3, r3, #4
 8006284:	2b00      	cmp	r3, #0
 8006286:	d020      	beq.n	80062ca <I2C_ITSlaveCplt+0x152>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8006288:	697b      	ldr	r3, [r7, #20]
 800628a:	f023 0304 	bic.w	r3, r3, #4
 800628e:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800629a:	b2d2      	uxtb	r2, r2
 800629c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062a2:	1c5a      	adds	r2, r3, #1
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d00c      	beq.n	80062ca <I2C_ITSlaveCplt+0x152>
    {
      hi2c->XferSize--;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80062b4:	3b01      	subs	r3, #1
 80062b6:	b29a      	uxth	r2, r3
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80062c0:	b29b      	uxth	r3, r3
 80062c2:	3b01      	subs	r3, #1
 80062c4:	b29a      	uxth	r2, r3
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80062ce:	b29b      	uxth	r3, r3
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d005      	beq.n	80062e0 <I2C_ITSlaveCplt+0x168>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80062d8:	f043 0204 	orr.w	r2, r3, #4
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80062e0:	697b      	ldr	r3, [r7, #20]
 80062e2:	f003 0310 	and.w	r3, r3, #16
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d049      	beq.n	800637e <I2C_ITSlaveCplt+0x206>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 80062ea:	693b      	ldr	r3, [r7, #16]
 80062ec:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d044      	beq.n	800637e <I2C_ITSlaveCplt+0x206>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80062f8:	b29b      	uxth	r3, r3
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d128      	bne.n	8006350 <I2C_ITSlaveCplt+0x1d8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006304:	b2db      	uxtb	r3, r3
 8006306:	2b28      	cmp	r3, #40	@ 0x28
 8006308:	d108      	bne.n	800631c <I2C_ITSlaveCplt+0x1a4>
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006310:	d104      	bne.n	800631c <I2C_ITSlaveCplt+0x1a4>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8006312:	6979      	ldr	r1, [r7, #20]
 8006314:	6878      	ldr	r0, [r7, #4]
 8006316:	f000 f893 	bl	8006440 <I2C_ITListenCplt>
 800631a:	e030      	b.n	800637e <I2C_ITSlaveCplt+0x206>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006322:	b2db      	uxtb	r3, r3
 8006324:	2b29      	cmp	r3, #41	@ 0x29
 8006326:	d10e      	bne.n	8006346 <I2C_ITSlaveCplt+0x1ce>
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800632e:	d00a      	beq.n	8006346 <I2C_ITSlaveCplt+0x1ce>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	2210      	movs	r2, #16
 8006336:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8006338:	6878      	ldr	r0, [r7, #4]
 800633a:	f000 f9ec 	bl	8006716 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800633e:	6878      	ldr	r0, [r7, #4]
 8006340:	f7ff fdf5 	bl	8005f2e <I2C_ITSlaveSeqCplt>
 8006344:	e01b      	b.n	800637e <I2C_ITSlaveCplt+0x206>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	2210      	movs	r2, #16
 800634c:	61da      	str	r2, [r3, #28]
 800634e:	e016      	b.n	800637e <I2C_ITSlaveCplt+0x206>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	2210      	movs	r2, #16
 8006356:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800635c:	f043 0204 	orr.w	r2, r3, #4
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d003      	beq.n	8006372 <I2C_ITSlaveCplt+0x1fa>
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006370:	d105      	bne.n	800637e <I2C_ITSlaveCplt+0x206>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006376:	4619      	mov	r1, r3
 8006378:	6878      	ldr	r0, [r7, #4]
 800637a:	f000 f8b5 	bl	80064e8 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	2200      	movs	r2, #0
 8006382:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	2200      	movs	r2, #0
 800638a:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006390:	2b00      	cmp	r3, #0
 8006392:	d010      	beq.n	80063b6 <I2C_ITSlaveCplt+0x23e>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006398:	4619      	mov	r1, r3
 800639a:	6878      	ldr	r0, [r7, #4]
 800639c:	f000 f8a4 	bl	80064e8 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80063a6:	b2db      	uxtb	r3, r3
 80063a8:	2b28      	cmp	r3, #40	@ 0x28
 80063aa:	d141      	bne.n	8006430 <I2C_ITSlaveCplt+0x2b8>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80063ac:	6979      	ldr	r1, [r7, #20]
 80063ae:	6878      	ldr	r0, [r7, #4]
 80063b0:	f000 f846 	bl	8006440 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80063b4:	e03c      	b.n	8006430 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063ba:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80063be:	d014      	beq.n	80063ea <I2C_ITSlaveCplt+0x272>
    I2C_ITSlaveSeqCplt(hi2c);
 80063c0:	6878      	ldr	r0, [r7, #4]
 80063c2:	f7ff fdb4 	bl	8005f2e <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	4a1c      	ldr	r2, [pc, #112]	@ (800643c <I2C_ITSlaveCplt+0x2c4>)
 80063ca:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2220      	movs	r2, #32
 80063d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2200      	movs	r2, #0
 80063d8:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	2200      	movs	r2, #0
 80063de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 80063e2:	6878      	ldr	r0, [r7, #4]
 80063e4:	f7ff f883 	bl	80054ee <HAL_I2C_ListenCpltCallback>
}
 80063e8:	e022      	b.n	8006430 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80063f0:	b2db      	uxtb	r3, r3
 80063f2:	2b22      	cmp	r3, #34	@ 0x22
 80063f4:	d10e      	bne.n	8006414 <I2C_ITSlaveCplt+0x29c>
    hi2c->State = HAL_I2C_STATE_READY;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	2220      	movs	r2, #32
 80063fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	2200      	movs	r2, #0
 8006402:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2200      	movs	r2, #0
 8006408:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800640c:	6878      	ldr	r0, [r7, #4]
 800640e:	f7ff f856 	bl	80054be <HAL_I2C_SlaveRxCpltCallback>
}
 8006412:	e00d      	b.n	8006430 <I2C_ITSlaveCplt+0x2b8>
    hi2c->State = HAL_I2C_STATE_READY;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2220      	movs	r2, #32
 8006418:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	2200      	movs	r2, #0
 8006420:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	2200      	movs	r2, #0
 8006426:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800642a:	6878      	ldr	r0, [r7, #4]
 800642c:	f7ff f83d 	bl	80054aa <HAL_I2C_SlaveTxCpltCallback>
}
 8006430:	bf00      	nop
 8006432:	3718      	adds	r7, #24
 8006434:	46bd      	mov	sp, r7
 8006436:	bd80      	pop	{r7, pc}
 8006438:	fe00e800 	.word	0xfe00e800
 800643c:	ffff0000 	.word	0xffff0000

08006440 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006440:	b580      	push	{r7, lr}
 8006442:	b082      	sub	sp, #8
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
 8006448:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	4a25      	ldr	r2, [pc, #148]	@ (80064e4 <I2C_ITListenCplt+0xa4>)
 800644e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2200      	movs	r2, #0
 8006454:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	2220      	movs	r2, #32
 800645a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	2200      	movs	r2, #0
 8006462:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	2200      	movs	r2, #0
 800646a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	f003 0304 	and.w	r3, r3, #4
 8006472:	2b00      	cmp	r3, #0
 8006474:	d022      	beq.n	80064bc <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006480:	b2d2      	uxtb	r2, r2
 8006482:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006488:	1c5a      	adds	r2, r3, #1
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006492:	2b00      	cmp	r3, #0
 8006494:	d012      	beq.n	80064bc <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800649a:	3b01      	subs	r3, #1
 800649c:	b29a      	uxth	r2, r3
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80064a6:	b29b      	uxth	r3, r3
 80064a8:	3b01      	subs	r3, #1
 80064aa:	b29a      	uxth	r2, r3
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80064b4:	f043 0204 	orr.w	r2, r3, #4
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80064bc:	f248 0103 	movw	r1, #32771	@ 0x8003
 80064c0:	6878      	ldr	r0, [r7, #4]
 80064c2:	f000 fc45 	bl	8006d50 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	2210      	movs	r2, #16
 80064cc:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	2200      	movs	r2, #0
 80064d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80064d6:	6878      	ldr	r0, [r7, #4]
 80064d8:	f7ff f809 	bl	80054ee <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80064dc:	bf00      	nop
 80064de:	3708      	adds	r7, #8
 80064e0:	46bd      	mov	sp, r7
 80064e2:	bd80      	pop	{r7, pc}
 80064e4:	ffff0000 	.word	0xffff0000

080064e8 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80064e8:	b580      	push	{r7, lr}
 80064ea:	b084      	sub	sp, #16
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	6078      	str	r0, [r7, #4]
 80064f0:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80064f8:	73fb      	strb	r3, [r7, #15]
#if defined(HAL_DMA_MODULE_ENABLED)
  uint32_t tmppreviousstate;
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	2200      	movs	r2, #0
 80064fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	4a6d      	ldr	r2, [pc, #436]	@ (80066bc <I2C_ITError+0x1d4>)
 8006506:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2200      	movs	r2, #0
 800650c:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	431a      	orrs	r2, r3
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800651a:	7bfb      	ldrb	r3, [r7, #15]
 800651c:	2b28      	cmp	r3, #40	@ 0x28
 800651e:	d005      	beq.n	800652c <I2C_ITError+0x44>
 8006520:	7bfb      	ldrb	r3, [r7, #15]
 8006522:	2b29      	cmp	r3, #41	@ 0x29
 8006524:	d002      	beq.n	800652c <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8006526:	7bfb      	ldrb	r3, [r7, #15]
 8006528:	2b2a      	cmp	r3, #42	@ 0x2a
 800652a:	d10b      	bne.n	8006544 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800652c:	2103      	movs	r1, #3
 800652e:	6878      	ldr	r0, [r7, #4]
 8006530:	f000 fc0e 	bl	8006d50 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2228      	movs	r2, #40	@ 0x28
 8006538:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	4a60      	ldr	r2, [pc, #384]	@ (80066c0 <I2C_ITError+0x1d8>)
 8006540:	635a      	str	r2, [r3, #52]	@ 0x34
 8006542:	e030      	b.n	80065a6 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8006544:	f248 0103 	movw	r1, #32771	@ 0x8003
 8006548:	6878      	ldr	r0, [r7, #4]
 800654a:	f000 fc01 	bl	8006d50 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800654e:	6878      	ldr	r0, [r7, #4]
 8006550:	f000 f8e1 	bl	8006716 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800655a:	b2db      	uxtb	r3, r3
 800655c:	2b60      	cmp	r3, #96	@ 0x60
 800655e:	d01f      	beq.n	80065a0 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2220      	movs	r2, #32
 8006564:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	699b      	ldr	r3, [r3, #24]
 800656e:	f003 0320 	and.w	r3, r3, #32
 8006572:	2b20      	cmp	r3, #32
 8006574:	d114      	bne.n	80065a0 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	699b      	ldr	r3, [r3, #24]
 800657c:	f003 0310 	and.w	r3, r3, #16
 8006580:	2b10      	cmp	r3, #16
 8006582:	d109      	bne.n	8006598 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	2210      	movs	r2, #16
 800658a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006590:	f043 0204 	orr.w	r2, r3, #4
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	2220      	movs	r2, #32
 800659e:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2200      	movs	r2, #0
 80065a4:	635a      	str	r2, [r3, #52]	@ 0x34
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065aa:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d039      	beq.n	8006628 <I2C_ITError+0x140>
 80065b4:	68bb      	ldr	r3, [r7, #8]
 80065b6:	2b11      	cmp	r3, #17
 80065b8:	d002      	beq.n	80065c0 <I2C_ITError+0xd8>
 80065ba:	68bb      	ldr	r3, [r7, #8]
 80065bc:	2b21      	cmp	r3, #33	@ 0x21
 80065be:	d133      	bne.n	8006628 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80065ca:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80065ce:	d107      	bne.n	80065e0 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	681a      	ldr	r2, [r3, #0]
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80065de:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065e4:	4618      	mov	r0, r3
 80065e6:	f7fe f9ca 	bl	800497e <HAL_DMA_GetState>
 80065ea:	4603      	mov	r3, r0
 80065ec:	2b01      	cmp	r3, #1
 80065ee:	d017      	beq.n	8006620 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065f4:	4a33      	ldr	r2, [pc, #204]	@ (80066c4 <I2C_ITError+0x1dc>)
 80065f6:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2200      	movs	r2, #0
 80065fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006604:	4618      	mov	r0, r3
 8006606:	f7fe f8ac 	bl	8004762 <HAL_DMA_Abort_IT>
 800660a:	4603      	mov	r3, r0
 800660c:	2b00      	cmp	r3, #0
 800660e:	d04d      	beq.n	80066ac <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006614:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006616:	687a      	ldr	r2, [r7, #4]
 8006618:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800661a:	4610      	mov	r0, r2
 800661c:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800661e:	e045      	b.n	80066ac <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8006620:	6878      	ldr	r0, [r7, #4]
 8006622:	f000 f851 	bl	80066c8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006626:	e041      	b.n	80066ac <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800662c:	2b00      	cmp	r3, #0
 800662e:	d039      	beq.n	80066a4 <I2C_ITError+0x1bc>
 8006630:	68bb      	ldr	r3, [r7, #8]
 8006632:	2b12      	cmp	r3, #18
 8006634:	d002      	beq.n	800663c <I2C_ITError+0x154>
 8006636:	68bb      	ldr	r3, [r7, #8]
 8006638:	2b22      	cmp	r3, #34	@ 0x22
 800663a:	d133      	bne.n	80066a4 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006646:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800664a:	d107      	bne.n	800665c <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	681a      	ldr	r2, [r3, #0]
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800665a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006660:	4618      	mov	r0, r3
 8006662:	f7fe f98c 	bl	800497e <HAL_DMA_GetState>
 8006666:	4603      	mov	r3, r0
 8006668:	2b01      	cmp	r3, #1
 800666a:	d017      	beq.n	800669c <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006670:	4a14      	ldr	r2, [pc, #80]	@ (80066c4 <I2C_ITError+0x1dc>)
 8006672:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2200      	movs	r2, #0
 8006678:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006680:	4618      	mov	r0, r3
 8006682:	f7fe f86e 	bl	8004762 <HAL_DMA_Abort_IT>
 8006686:	4603      	mov	r3, r0
 8006688:	2b00      	cmp	r3, #0
 800668a:	d011      	beq.n	80066b0 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006690:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006692:	687a      	ldr	r2, [r7, #4]
 8006694:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006696:	4610      	mov	r0, r2
 8006698:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800669a:	e009      	b.n	80066b0 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800669c:	6878      	ldr	r0, [r7, #4]
 800669e:	f000 f813 	bl	80066c8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80066a2:	e005      	b.n	80066b0 <I2C_ITError+0x1c8>
    }
  }
  else
#endif /* HAL_DMA_MODULE_ENABLED */
  {
    I2C_TreatErrorCallback(hi2c);
 80066a4:	6878      	ldr	r0, [r7, #4]
 80066a6:	f000 f80f 	bl	80066c8 <I2C_TreatErrorCallback>
  }
}
 80066aa:	e002      	b.n	80066b2 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80066ac:	bf00      	nop
 80066ae:	e000      	b.n	80066b2 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80066b0:	bf00      	nop
}
 80066b2:	bf00      	nop
 80066b4:	3710      	adds	r7, #16
 80066b6:	46bd      	mov	sp, r7
 80066b8:	bd80      	pop	{r7, pc}
 80066ba:	bf00      	nop
 80066bc:	ffff0000 	.word	0xffff0000
 80066c0:	0800553f 	.word	0x0800553f
 80066c4:	08006823 	.word	0x08006823

080066c8 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80066c8:	b580      	push	{r7, lr}
 80066ca:	b082      	sub	sp, #8
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80066d6:	b2db      	uxtb	r3, r3
 80066d8:	2b60      	cmp	r3, #96	@ 0x60
 80066da:	d10e      	bne.n	80066fa <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	2220      	movs	r2, #32
 80066e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	2200      	movs	r2, #0
 80066e8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	2200      	movs	r2, #0
 80066ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80066f2:	6878      	ldr	r0, [r7, #4]
 80066f4:	f7fe ff19 	bl	800552a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80066f8:	e009      	b.n	800670e <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	2200      	movs	r2, #0
 80066fe:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2200      	movs	r2, #0
 8006704:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8006708:	6878      	ldr	r0, [r7, #4]
 800670a:	f7fe ff04 	bl	8005516 <HAL_I2C_ErrorCallback>
}
 800670e:	bf00      	nop
 8006710:	3708      	adds	r7, #8
 8006712:	46bd      	mov	sp, r7
 8006714:	bd80      	pop	{r7, pc}

08006716 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006716:	b480      	push	{r7}
 8006718:	b083      	sub	sp, #12
 800671a:	af00      	add	r7, sp, #0
 800671c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	699b      	ldr	r3, [r3, #24]
 8006724:	f003 0302 	and.w	r3, r3, #2
 8006728:	2b02      	cmp	r3, #2
 800672a:	d103      	bne.n	8006734 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	2200      	movs	r2, #0
 8006732:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	699b      	ldr	r3, [r3, #24]
 800673a:	f003 0301 	and.w	r3, r3, #1
 800673e:	2b01      	cmp	r3, #1
 8006740:	d007      	beq.n	8006752 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	699a      	ldr	r2, [r3, #24]
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f042 0201 	orr.w	r2, r2, #1
 8006750:	619a      	str	r2, [r3, #24]
  }
}
 8006752:	bf00      	nop
 8006754:	370c      	adds	r7, #12
 8006756:	46bd      	mov	sp, r7
 8006758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675c:	4770      	bx	lr

0800675e <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800675e:	b580      	push	{r7, lr}
 8006760:	b084      	sub	sp, #16
 8006762:	af00      	add	r7, sp, #0
 8006764:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800676a:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	681a      	ldr	r2, [r3, #0]
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800677a:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006780:	b29b      	uxth	r3, r3
 8006782:	2b00      	cmp	r3, #0
 8006784:	d104      	bne.n	8006790 <I2C_DMAMasterReceiveCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8006786:	2120      	movs	r1, #32
 8006788:	68f8      	ldr	r0, [r7, #12]
 800678a:	f000 fa5d 	bl	8006c48 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 800678e:	e02d      	b.n	80067ec <I2C_DMAMasterReceiveCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006794:	68fa      	ldr	r2, [r7, #12]
 8006796:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8006798:	441a      	add	r2, r3
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80067a2:	b29b      	uxth	r3, r3
 80067a4:	2bff      	cmp	r3, #255	@ 0xff
 80067a6:	d903      	bls.n	80067b0 <I2C_DMAMasterReceiveCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	22ff      	movs	r2, #255	@ 0xff
 80067ac:	851a      	strh	r2, [r3, #40]	@ 0x28
 80067ae:	e004      	b.n	80067ba <I2C_DMAMasterReceiveCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80067b4:	b29a      	uxth	r2, r3
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	3324      	adds	r3, #36	@ 0x24
 80067c4:	4619      	mov	r1, r3
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067ca:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 80067d0:	f7fd ff4c 	bl	800466c <HAL_DMA_Start_IT>
 80067d4:	4603      	mov	r3, r0
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d004      	beq.n	80067e4 <I2C_DMAMasterReceiveCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 80067da:	2110      	movs	r1, #16
 80067dc:	68f8      	ldr	r0, [r7, #12]
 80067de:	f7ff fe83 	bl	80064e8 <I2C_ITError>
}
 80067e2:	e003      	b.n	80067ec <I2C_DMAMasterReceiveCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 80067e4:	2140      	movs	r1, #64	@ 0x40
 80067e6:	68f8      	ldr	r0, [r7, #12]
 80067e8:	f000 fa2e 	bl	8006c48 <I2C_Enable_IRQ>
}
 80067ec:	bf00      	nop
 80067ee:	3710      	adds	r7, #16
 80067f0:	46bd      	mov	sp, r7
 80067f2:	bd80      	pop	{r7, pc}

080067f4 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 80067f4:	b580      	push	{r7, lr}
 80067f6:	b084      	sub	sp, #16
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006800:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	685a      	ldr	r2, [r3, #4]
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006810:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8006812:	2110      	movs	r1, #16
 8006814:	68f8      	ldr	r0, [r7, #12]
 8006816:	f7ff fe67 	bl	80064e8 <I2C_ITError>
}
 800681a:	bf00      	nop
 800681c:	3710      	adds	r7, #16
 800681e:	46bd      	mov	sp, r7
 8006820:	bd80      	pop	{r7, pc}

08006822 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8006822:	b580      	push	{r7, lr}
 8006824:	b084      	sub	sp, #16
 8006826:	af00      	add	r7, sp, #0
 8006828:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800682e:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006834:	2b00      	cmp	r3, #0
 8006836:	d003      	beq.n	8006840 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800683c:	2200      	movs	r2, #0
 800683e:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006844:	2b00      	cmp	r3, #0
 8006846:	d003      	beq.n	8006850 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800684c:	2200      	movs	r2, #0
 800684e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8006850:	68f8      	ldr	r0, [r7, #12]
 8006852:	f7ff ff39 	bl	80066c8 <I2C_TreatErrorCallback>
}
 8006856:	bf00      	nop
 8006858:	3710      	adds	r7, #16
 800685a:	46bd      	mov	sp, r7
 800685c:	bd80      	pop	{r7, pc}

0800685e <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800685e:	b580      	push	{r7, lr}
 8006860:	b084      	sub	sp, #16
 8006862:	af00      	add	r7, sp, #0
 8006864:	60f8      	str	r0, [r7, #12]
 8006866:	60b9      	str	r1, [r7, #8]
 8006868:	603b      	str	r3, [r7, #0]
 800686a:	4613      	mov	r3, r2
 800686c:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800686e:	e03b      	b.n	80068e8 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006870:	69ba      	ldr	r2, [r7, #24]
 8006872:	6839      	ldr	r1, [r7, #0]
 8006874:	68f8      	ldr	r0, [r7, #12]
 8006876:	f000 f8d5 	bl	8006a24 <I2C_IsErrorOccurred>
 800687a:	4603      	mov	r3, r0
 800687c:	2b00      	cmp	r3, #0
 800687e:	d001      	beq.n	8006884 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8006880:	2301      	movs	r3, #1
 8006882:	e041      	b.n	8006908 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006884:	683b      	ldr	r3, [r7, #0]
 8006886:	f1b3 3fff 	cmp.w	r3, #4294967295
 800688a:	d02d      	beq.n	80068e8 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800688c:	f7fd fc88 	bl	80041a0 <HAL_GetTick>
 8006890:	4602      	mov	r2, r0
 8006892:	69bb      	ldr	r3, [r7, #24]
 8006894:	1ad3      	subs	r3, r2, r3
 8006896:	683a      	ldr	r2, [r7, #0]
 8006898:	429a      	cmp	r2, r3
 800689a:	d302      	bcc.n	80068a2 <I2C_WaitOnFlagUntilTimeout+0x44>
 800689c:	683b      	ldr	r3, [r7, #0]
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d122      	bne.n	80068e8 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	699a      	ldr	r2, [r3, #24]
 80068a8:	68bb      	ldr	r3, [r7, #8]
 80068aa:	4013      	ands	r3, r2
 80068ac:	68ba      	ldr	r2, [r7, #8]
 80068ae:	429a      	cmp	r2, r3
 80068b0:	bf0c      	ite	eq
 80068b2:	2301      	moveq	r3, #1
 80068b4:	2300      	movne	r3, #0
 80068b6:	b2db      	uxtb	r3, r3
 80068b8:	461a      	mov	r2, r3
 80068ba:	79fb      	ldrb	r3, [r7, #7]
 80068bc:	429a      	cmp	r2, r3
 80068be:	d113      	bne.n	80068e8 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80068c4:	f043 0220 	orr.w	r2, r3, #32
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	2220      	movs	r2, #32
 80068d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	2200      	movs	r2, #0
 80068d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	2200      	movs	r2, #0
 80068e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80068e4:	2301      	movs	r3, #1
 80068e6:	e00f      	b.n	8006908 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	699a      	ldr	r2, [r3, #24]
 80068ee:	68bb      	ldr	r3, [r7, #8]
 80068f0:	4013      	ands	r3, r2
 80068f2:	68ba      	ldr	r2, [r7, #8]
 80068f4:	429a      	cmp	r2, r3
 80068f6:	bf0c      	ite	eq
 80068f8:	2301      	moveq	r3, #1
 80068fa:	2300      	movne	r3, #0
 80068fc:	b2db      	uxtb	r3, r3
 80068fe:	461a      	mov	r2, r3
 8006900:	79fb      	ldrb	r3, [r7, #7]
 8006902:	429a      	cmp	r2, r3
 8006904:	d0b4      	beq.n	8006870 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006906:	2300      	movs	r3, #0
}
 8006908:	4618      	mov	r0, r3
 800690a:	3710      	adds	r7, #16
 800690c:	46bd      	mov	sp, r7
 800690e:	bd80      	pop	{r7, pc}

08006910 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006910:	b580      	push	{r7, lr}
 8006912:	b084      	sub	sp, #16
 8006914:	af00      	add	r7, sp, #0
 8006916:	60f8      	str	r0, [r7, #12]
 8006918:	60b9      	str	r1, [r7, #8]
 800691a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800691c:	e033      	b.n	8006986 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800691e:	687a      	ldr	r2, [r7, #4]
 8006920:	68b9      	ldr	r1, [r7, #8]
 8006922:	68f8      	ldr	r0, [r7, #12]
 8006924:	f000 f87e 	bl	8006a24 <I2C_IsErrorOccurred>
 8006928:	4603      	mov	r3, r0
 800692a:	2b00      	cmp	r3, #0
 800692c:	d001      	beq.n	8006932 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800692e:	2301      	movs	r3, #1
 8006930:	e031      	b.n	8006996 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006932:	68bb      	ldr	r3, [r7, #8]
 8006934:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006938:	d025      	beq.n	8006986 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800693a:	f7fd fc31 	bl	80041a0 <HAL_GetTick>
 800693e:	4602      	mov	r2, r0
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	1ad3      	subs	r3, r2, r3
 8006944:	68ba      	ldr	r2, [r7, #8]
 8006946:	429a      	cmp	r2, r3
 8006948:	d302      	bcc.n	8006950 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800694a:	68bb      	ldr	r3, [r7, #8]
 800694c:	2b00      	cmp	r3, #0
 800694e:	d11a      	bne.n	8006986 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	699b      	ldr	r3, [r3, #24]
 8006956:	f003 0302 	and.w	r3, r3, #2
 800695a:	2b02      	cmp	r3, #2
 800695c:	d013      	beq.n	8006986 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006962:	f043 0220 	orr.w	r2, r3, #32
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	2220      	movs	r2, #32
 800696e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	2200      	movs	r2, #0
 8006976:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	2200      	movs	r2, #0
 800697e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8006982:	2301      	movs	r3, #1
 8006984:	e007      	b.n	8006996 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	699b      	ldr	r3, [r3, #24]
 800698c:	f003 0302 	and.w	r3, r3, #2
 8006990:	2b02      	cmp	r3, #2
 8006992:	d1c4      	bne.n	800691e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006994:	2300      	movs	r3, #0
}
 8006996:	4618      	mov	r0, r3
 8006998:	3710      	adds	r7, #16
 800699a:	46bd      	mov	sp, r7
 800699c:	bd80      	pop	{r7, pc}

0800699e <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800699e:	b580      	push	{r7, lr}
 80069a0:	b084      	sub	sp, #16
 80069a2:	af00      	add	r7, sp, #0
 80069a4:	60f8      	str	r0, [r7, #12]
 80069a6:	60b9      	str	r1, [r7, #8]
 80069a8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80069aa:	e02f      	b.n	8006a0c <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80069ac:	687a      	ldr	r2, [r7, #4]
 80069ae:	68b9      	ldr	r1, [r7, #8]
 80069b0:	68f8      	ldr	r0, [r7, #12]
 80069b2:	f000 f837 	bl	8006a24 <I2C_IsErrorOccurred>
 80069b6:	4603      	mov	r3, r0
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d001      	beq.n	80069c0 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80069bc:	2301      	movs	r3, #1
 80069be:	e02d      	b.n	8006a1c <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80069c0:	f7fd fbee 	bl	80041a0 <HAL_GetTick>
 80069c4:	4602      	mov	r2, r0
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	1ad3      	subs	r3, r2, r3
 80069ca:	68ba      	ldr	r2, [r7, #8]
 80069cc:	429a      	cmp	r2, r3
 80069ce:	d302      	bcc.n	80069d6 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80069d0:	68bb      	ldr	r3, [r7, #8]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d11a      	bne.n	8006a0c <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	699b      	ldr	r3, [r3, #24]
 80069dc:	f003 0320 	and.w	r3, r3, #32
 80069e0:	2b20      	cmp	r3, #32
 80069e2:	d013      	beq.n	8006a0c <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80069e8:	f043 0220 	orr.w	r2, r3, #32
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	2220      	movs	r2, #32
 80069f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	2200      	movs	r2, #0
 80069fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	2200      	movs	r2, #0
 8006a04:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8006a08:	2301      	movs	r3, #1
 8006a0a:	e007      	b.n	8006a1c <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	699b      	ldr	r3, [r3, #24]
 8006a12:	f003 0320 	and.w	r3, r3, #32
 8006a16:	2b20      	cmp	r3, #32
 8006a18:	d1c8      	bne.n	80069ac <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006a1a:	2300      	movs	r3, #0
}
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	3710      	adds	r7, #16
 8006a20:	46bd      	mov	sp, r7
 8006a22:	bd80      	pop	{r7, pc}

08006a24 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006a24:	b580      	push	{r7, lr}
 8006a26:	b08a      	sub	sp, #40	@ 0x28
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	60f8      	str	r0, [r7, #12]
 8006a2c:	60b9      	str	r1, [r7, #8]
 8006a2e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006a30:	2300      	movs	r3, #0
 8006a32:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	699b      	ldr	r3, [r3, #24]
 8006a3c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8006a3e:	2300      	movs	r3, #0
 8006a40:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8006a46:	69bb      	ldr	r3, [r7, #24]
 8006a48:	f003 0310 	and.w	r3, r3, #16
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d068      	beq.n	8006b22 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	2210      	movs	r2, #16
 8006a56:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006a58:	e049      	b.n	8006aee <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006a5a:	68bb      	ldr	r3, [r7, #8]
 8006a5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a60:	d045      	beq.n	8006aee <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006a62:	f7fd fb9d 	bl	80041a0 <HAL_GetTick>
 8006a66:	4602      	mov	r2, r0
 8006a68:	69fb      	ldr	r3, [r7, #28]
 8006a6a:	1ad3      	subs	r3, r2, r3
 8006a6c:	68ba      	ldr	r2, [r7, #8]
 8006a6e:	429a      	cmp	r2, r3
 8006a70:	d302      	bcc.n	8006a78 <I2C_IsErrorOccurred+0x54>
 8006a72:	68bb      	ldr	r3, [r7, #8]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d13a      	bne.n	8006aee <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	685b      	ldr	r3, [r3, #4]
 8006a7e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006a82:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006a8a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	699b      	ldr	r3, [r3, #24]
 8006a92:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006a96:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006a9a:	d121      	bne.n	8006ae0 <I2C_IsErrorOccurred+0xbc>
 8006a9c:	697b      	ldr	r3, [r7, #20]
 8006a9e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006aa2:	d01d      	beq.n	8006ae0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8006aa4:	7cfb      	ldrb	r3, [r7, #19]
 8006aa6:	2b20      	cmp	r3, #32
 8006aa8:	d01a      	beq.n	8006ae0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	685a      	ldr	r2, [r3, #4]
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006ab8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8006aba:	f7fd fb71 	bl	80041a0 <HAL_GetTick>
 8006abe:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006ac0:	e00e      	b.n	8006ae0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8006ac2:	f7fd fb6d 	bl	80041a0 <HAL_GetTick>
 8006ac6:	4602      	mov	r2, r0
 8006ac8:	69fb      	ldr	r3, [r7, #28]
 8006aca:	1ad3      	subs	r3, r2, r3
 8006acc:	2b19      	cmp	r3, #25
 8006ace:	d907      	bls.n	8006ae0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8006ad0:	6a3b      	ldr	r3, [r7, #32]
 8006ad2:	f043 0320 	orr.w	r3, r3, #32
 8006ad6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8006ad8:	2301      	movs	r3, #1
 8006ada:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8006ade:	e006      	b.n	8006aee <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	699b      	ldr	r3, [r3, #24]
 8006ae6:	f003 0320 	and.w	r3, r3, #32
 8006aea:	2b20      	cmp	r3, #32
 8006aec:	d1e9      	bne.n	8006ac2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	699b      	ldr	r3, [r3, #24]
 8006af4:	f003 0320 	and.w	r3, r3, #32
 8006af8:	2b20      	cmp	r3, #32
 8006afa:	d003      	beq.n	8006b04 <I2C_IsErrorOccurred+0xe0>
 8006afc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d0aa      	beq.n	8006a5a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8006b04:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d103      	bne.n	8006b14 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	2220      	movs	r2, #32
 8006b12:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006b14:	6a3b      	ldr	r3, [r7, #32]
 8006b16:	f043 0304 	orr.w	r3, r3, #4
 8006b1a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006b1c:	2301      	movs	r3, #1
 8006b1e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	699b      	ldr	r3, [r3, #24]
 8006b28:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8006b2a:	69bb      	ldr	r3, [r7, #24]
 8006b2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d00b      	beq.n	8006b4c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006b34:	6a3b      	ldr	r3, [r7, #32]
 8006b36:	f043 0301 	orr.w	r3, r3, #1
 8006b3a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006b44:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006b46:	2301      	movs	r3, #1
 8006b48:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006b4c:	69bb      	ldr	r3, [r7, #24]
 8006b4e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d00b      	beq.n	8006b6e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8006b56:	6a3b      	ldr	r3, [r7, #32]
 8006b58:	f043 0308 	orr.w	r3, r3, #8
 8006b5c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006b66:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006b68:	2301      	movs	r3, #1
 8006b6a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006b6e:	69bb      	ldr	r3, [r7, #24]
 8006b70:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d00b      	beq.n	8006b90 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8006b78:	6a3b      	ldr	r3, [r7, #32]
 8006b7a:	f043 0302 	orr.w	r3, r3, #2
 8006b7e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006b88:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006b8a:	2301      	movs	r3, #1
 8006b8c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8006b90:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d01c      	beq.n	8006bd2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006b98:	68f8      	ldr	r0, [r7, #12]
 8006b9a:	f7ff fdbc 	bl	8006716 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	6859      	ldr	r1, [r3, #4]
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	681a      	ldr	r2, [r3, #0]
 8006ba8:	4b0d      	ldr	r3, [pc, #52]	@ (8006be0 <I2C_IsErrorOccurred+0x1bc>)
 8006baa:	400b      	ands	r3, r1
 8006bac:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006bb2:	6a3b      	ldr	r3, [r7, #32]
 8006bb4:	431a      	orrs	r2, r3
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	2220      	movs	r2, #32
 8006bbe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	2200      	movs	r2, #0
 8006bc6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	2200      	movs	r2, #0
 8006bce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8006bd2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	3728      	adds	r7, #40	@ 0x28
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	bd80      	pop	{r7, pc}
 8006bde:	bf00      	nop
 8006be0:	fe00e800 	.word	0xfe00e800

08006be4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006be4:	b480      	push	{r7}
 8006be6:	b087      	sub	sp, #28
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	60f8      	str	r0, [r7, #12]
 8006bec:	607b      	str	r3, [r7, #4]
 8006bee:	460b      	mov	r3, r1
 8006bf0:	817b      	strh	r3, [r7, #10]
 8006bf2:	4613      	mov	r3, r2
 8006bf4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006bf6:	897b      	ldrh	r3, [r7, #10]
 8006bf8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006bfc:	7a7b      	ldrb	r3, [r7, #9]
 8006bfe:	041b      	lsls	r3, r3, #16
 8006c00:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006c04:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006c0a:	6a3b      	ldr	r3, [r7, #32]
 8006c0c:	4313      	orrs	r3, r2
 8006c0e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006c12:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	685a      	ldr	r2, [r3, #4]
 8006c1a:	6a3b      	ldr	r3, [r7, #32]
 8006c1c:	0d5b      	lsrs	r3, r3, #21
 8006c1e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8006c22:	4b08      	ldr	r3, [pc, #32]	@ (8006c44 <I2C_TransferConfig+0x60>)
 8006c24:	430b      	orrs	r3, r1
 8006c26:	43db      	mvns	r3, r3
 8006c28:	ea02 0103 	and.w	r1, r2, r3
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	697a      	ldr	r2, [r7, #20]
 8006c32:	430a      	orrs	r2, r1
 8006c34:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006c36:	bf00      	nop
 8006c38:	371c      	adds	r7, #28
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c40:	4770      	bx	lr
 8006c42:	bf00      	nop
 8006c44:	03ff63ff 	.word	0x03ff63ff

08006c48 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8006c48:	b480      	push	{r7}
 8006c4a:	b085      	sub	sp, #20
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
 8006c50:	460b      	mov	r3, r1
 8006c52:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8006c54:	2300      	movs	r3, #0
 8006c56:	60fb      	str	r3, [r7, #12]

#if defined(HAL_DMA_MODULE_ENABLED)
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c5c:	4a39      	ldr	r2, [pc, #228]	@ (8006d44 <I2C_Enable_IRQ+0xfc>)
 8006c5e:	4293      	cmp	r3, r2
 8006c60:	d032      	beq.n	8006cc8 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8006c66:	4a38      	ldr	r2, [pc, #224]	@ (8006d48 <I2C_Enable_IRQ+0x100>)
 8006c68:	4293      	cmp	r3, r2
 8006c6a:	d02d      	beq.n	8006cc8 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8006c70:	4a36      	ldr	r2, [pc, #216]	@ (8006d4c <I2C_Enable_IRQ+0x104>)
 8006c72:	4293      	cmp	r3, r2
 8006c74:	d028      	beq.n	8006cc8 <I2C_Enable_IRQ+0x80>
#endif /* HAL_DMA_MODULE_ENABLED */
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8006c76:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	da03      	bge.n	8006c86 <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8006c84:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8006c86:	887b      	ldrh	r3, [r7, #2]
 8006c88:	f003 0301 	and.w	r3, r3, #1
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d003      	beq.n	8006c98 <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8006c96:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8006c98:	887b      	ldrh	r3, [r7, #2]
 8006c9a:	f003 0302 	and.w	r3, r3, #2
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d003      	beq.n	8006caa <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8006ca8:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8006caa:	887b      	ldrh	r3, [r7, #2]
 8006cac:	2b10      	cmp	r3, #16
 8006cae:	d103      	bne.n	8006cb8 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8006cb6:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8006cb8:	887b      	ldrh	r3, [r7, #2]
 8006cba:	2b20      	cmp	r3, #32
 8006cbc:	d133      	bne.n	8006d26 <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	f043 0320 	orr.w	r3, r3, #32
 8006cc4:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8006cc6:	e02e      	b.n	8006d26 <I2C_Enable_IRQ+0xde>
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8006cc8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	da03      	bge.n	8006cd8 <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8006cd6:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8006cd8:	887b      	ldrh	r3, [r7, #2]
 8006cda:	f003 0301 	and.w	r3, r3, #1
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d003      	beq.n	8006cea <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8006ce8:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8006cea:	887b      	ldrh	r3, [r7, #2]
 8006cec:	f003 0302 	and.w	r3, r3, #2
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d003      	beq.n	8006cfc <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8006cfa:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8006cfc:	887b      	ldrh	r3, [r7, #2]
 8006cfe:	2b10      	cmp	r3, #16
 8006d00:	d103      	bne.n	8006d0a <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8006d08:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8006d0a:	887b      	ldrh	r3, [r7, #2]
 8006d0c:	2b20      	cmp	r3, #32
 8006d0e:	d103      	bne.n	8006d18 <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8006d16:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8006d18:	887b      	ldrh	r3, [r7, #2]
 8006d1a:	2b40      	cmp	r3, #64	@ 0x40
 8006d1c:	d103      	bne.n	8006d26 <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006d24:	60fb      	str	r3, [r7, #12]
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	6819      	ldr	r1, [r3, #0]
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	68fa      	ldr	r2, [r7, #12]
 8006d32:	430a      	orrs	r2, r1
 8006d34:	601a      	str	r2, [r3, #0]
}
 8006d36:	bf00      	nop
 8006d38:	3714      	adds	r7, #20
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d40:	4770      	bx	lr
 8006d42:	bf00      	nop
 8006d44:	08005731 	.word	0x08005731
 8006d48:	08005b55 	.word	0x08005b55
 8006d4c:	08005909 	.word	0x08005909

08006d50 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8006d50:	b480      	push	{r7}
 8006d52:	b085      	sub	sp, #20
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	6078      	str	r0, [r7, #4]
 8006d58:	460b      	mov	r3, r1
 8006d5a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8006d60:	887b      	ldrh	r3, [r7, #2]
 8006d62:	f003 0301 	and.w	r3, r3, #1
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d00f      	beq.n	8006d8a <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8006d70:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006d78:	b2db      	uxtb	r3, r3
 8006d7a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8006d7e:	2b28      	cmp	r3, #40	@ 0x28
 8006d80:	d003      	beq.n	8006d8a <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8006d88:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8006d8a:	887b      	ldrh	r3, [r7, #2]
 8006d8c:	f003 0302 	and.w	r3, r3, #2
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d00f      	beq.n	8006db4 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8006d9a:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006da2:	b2db      	uxtb	r3, r3
 8006da4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8006da8:	2b28      	cmp	r3, #40	@ 0x28
 8006daa:	d003      	beq.n	8006db4 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8006db2:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8006db4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	da03      	bge.n	8006dc4 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8006dc2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8006dc4:	887b      	ldrh	r3, [r7, #2]
 8006dc6:	2b10      	cmp	r3, #16
 8006dc8:	d103      	bne.n	8006dd2 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8006dd0:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8006dd2:	887b      	ldrh	r3, [r7, #2]
 8006dd4:	2b20      	cmp	r3, #32
 8006dd6:	d103      	bne.n	8006de0 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	f043 0320 	orr.w	r3, r3, #32
 8006dde:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8006de0:	887b      	ldrh	r3, [r7, #2]
 8006de2:	2b40      	cmp	r3, #64	@ 0x40
 8006de4:	d103      	bne.n	8006dee <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006dec:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	6819      	ldr	r1, [r3, #0]
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	43da      	mvns	r2, r3
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	400a      	ands	r2, r1
 8006dfe:	601a      	str	r2, [r3, #0]
}
 8006e00:	bf00      	nop
 8006e02:	3714      	adds	r7, #20
 8006e04:	46bd      	mov	sp, r7
 8006e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0a:	4770      	bx	lr

08006e0c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006e0c:	b480      	push	{r7}
 8006e0e:	b083      	sub	sp, #12
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	6078      	str	r0, [r7, #4]
 8006e14:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006e1c:	b2db      	uxtb	r3, r3
 8006e1e:	2b20      	cmp	r3, #32
 8006e20:	d138      	bne.n	8006e94 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006e28:	2b01      	cmp	r3, #1
 8006e2a:	d101      	bne.n	8006e30 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006e2c:	2302      	movs	r3, #2
 8006e2e:	e032      	b.n	8006e96 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2201      	movs	r2, #1
 8006e34:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2224      	movs	r2, #36	@ 0x24
 8006e3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	681a      	ldr	r2, [r3, #0]
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	f022 0201 	bic.w	r2, r2, #1
 8006e4e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	681a      	ldr	r2, [r3, #0]
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006e5e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	6819      	ldr	r1, [r3, #0]
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	683a      	ldr	r2, [r7, #0]
 8006e6c:	430a      	orrs	r2, r1
 8006e6e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	681a      	ldr	r2, [r3, #0]
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	f042 0201 	orr.w	r2, r2, #1
 8006e7e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	2220      	movs	r2, #32
 8006e84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2200      	movs	r2, #0
 8006e8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006e90:	2300      	movs	r3, #0
 8006e92:	e000      	b.n	8006e96 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006e94:	2302      	movs	r3, #2
  }
}
 8006e96:	4618      	mov	r0, r3
 8006e98:	370c      	adds	r7, #12
 8006e9a:	46bd      	mov	sp, r7
 8006e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea0:	4770      	bx	lr

08006ea2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006ea2:	b480      	push	{r7}
 8006ea4:	b085      	sub	sp, #20
 8006ea6:	af00      	add	r7, sp, #0
 8006ea8:	6078      	str	r0, [r7, #4]
 8006eaa:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006eb2:	b2db      	uxtb	r3, r3
 8006eb4:	2b20      	cmp	r3, #32
 8006eb6:	d139      	bne.n	8006f2c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006ebe:	2b01      	cmp	r3, #1
 8006ec0:	d101      	bne.n	8006ec6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006ec2:	2302      	movs	r3, #2
 8006ec4:	e033      	b.n	8006f2e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	2201      	movs	r2, #1
 8006eca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	2224      	movs	r2, #36	@ 0x24
 8006ed2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	681a      	ldr	r2, [r3, #0]
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	f022 0201 	bic.w	r2, r2, #1
 8006ee4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8006ef4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006ef6:	683b      	ldr	r3, [r7, #0]
 8006ef8:	021b      	lsls	r3, r3, #8
 8006efa:	68fa      	ldr	r2, [r7, #12]
 8006efc:	4313      	orrs	r3, r2
 8006efe:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	68fa      	ldr	r2, [r7, #12]
 8006f06:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	681a      	ldr	r2, [r3, #0]
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	f042 0201 	orr.w	r2, r2, #1
 8006f16:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	2220      	movs	r2, #32
 8006f1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2200      	movs	r2, #0
 8006f24:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006f28:	2300      	movs	r3, #0
 8006f2a:	e000      	b.n	8006f2e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006f2c:	2302      	movs	r3, #2
  }
}
 8006f2e:	4618      	mov	r0, r3
 8006f30:	3714      	adds	r7, #20
 8006f32:	46bd      	mov	sp, r7
 8006f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f38:	4770      	bx	lr
	...

08006f3c <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 8006f3c:	b580      	push	{r7, lr}
 8006f3e:	b084      	sub	sp, #16
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 8006f44:	2300      	movs	r3, #0
 8006f46:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d01e      	beq.n	8006f8c <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 8006f4e:	4b13      	ldr	r3, [pc, #76]	@ (8006f9c <HAL_IPCC_Init+0x60>)
 8006f50:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8006f58:	b2db      	uxtb	r3, r3
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d102      	bne.n	8006f64 <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 8006f5e:	6878      	ldr	r0, [r7, #4]
 8006f60:	f7fc ff48 	bl	8003df4 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 8006f64:	68b8      	ldr	r0, [r7, #8]
 8006f66:	f000 f85b 	bl	8007020 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 8006f6a:	68bb      	ldr	r3, [r7, #8]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	f043 1201 	orr.w	r2, r3, #65537	@ 0x10001
 8006f72:	68bb      	ldr	r3, [r7, #8]
 8006f74:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 8006f76:	6878      	ldr	r0, [r7, #4]
 8006f78:	f000 f82c 	bl	8006fd4 <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	2200      	movs	r2, #0
 8006f80:	635a      	str	r2, [r3, #52]	@ 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	2201      	movs	r2, #1
 8006f86:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
 8006f8a:	e001      	b.n	8006f90 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 8006f8c:	2301      	movs	r3, #1
 8006f8e:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 8006f90:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f92:	4618      	mov	r0, r3
 8006f94:	3710      	adds	r7, #16
 8006f96:	46bd      	mov	sp, r7
 8006f98:	bd80      	pop	{r7, pc}
 8006f9a:	bf00      	nop
 8006f9c:	58000c00 	.word	0x58000c00

08006fa0 <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8006fa0:	b480      	push	{r7}
 8006fa2:	b085      	sub	sp, #20
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	60f8      	str	r0, [r7, #12]
 8006fa8:	60b9      	str	r1, [r7, #8]
 8006faa:	4613      	mov	r3, r2
 8006fac:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 8006fae:	bf00      	nop
 8006fb0:	3714      	adds	r7, #20
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb8:	4770      	bx	lr

08006fba <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8006fba:	b480      	push	{r7}
 8006fbc:	b085      	sub	sp, #20
 8006fbe:	af00      	add	r7, sp, #0
 8006fc0:	60f8      	str	r0, [r7, #12]
 8006fc2:	60b9      	str	r1, [r7, #8]
 8006fc4:	4613      	mov	r3, r2
 8006fc6:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 8006fc8:	bf00      	nop
 8006fca:	3714      	adds	r7, #20
 8006fcc:	46bd      	mov	sp, r7
 8006fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd2:	4770      	bx	lr

08006fd4 <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 8006fd4:	b480      	push	{r7}
 8006fd6:	b085      	sub	sp, #20
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8006fdc:	2300      	movs	r3, #0
 8006fde:	60fb      	str	r3, [r7, #12]
 8006fe0:	e00f      	b.n	8007002 <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 8006fe2:	687a      	ldr	r2, [r7, #4]
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	009b      	lsls	r3, r3, #2
 8006fe8:	4413      	add	r3, r2
 8006fea:	4a0b      	ldr	r2, [pc, #44]	@ (8007018 <IPCC_SetDefaultCallbacks+0x44>)
 8006fec:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 8006fee:	687a      	ldr	r2, [r7, #4]
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	3306      	adds	r3, #6
 8006ff4:	009b      	lsls	r3, r3, #2
 8006ff6:	4413      	add	r3, r2
 8006ff8:	4a08      	ldr	r2, [pc, #32]	@ (800701c <IPCC_SetDefaultCallbacks+0x48>)
 8006ffa:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	3301      	adds	r3, #1
 8007000:	60fb      	str	r3, [r7, #12]
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	2b05      	cmp	r3, #5
 8007006:	d9ec      	bls.n	8006fe2 <IPCC_SetDefaultCallbacks+0xe>
  }
}
 8007008:	bf00      	nop
 800700a:	bf00      	nop
 800700c:	3714      	adds	r7, #20
 800700e:	46bd      	mov	sp, r7
 8007010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007014:	4770      	bx	lr
 8007016:	bf00      	nop
 8007018:	08006fa1 	.word	0x08006fa1
 800701c:	08006fbb 	.word	0x08006fbb

08007020 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 8007020:	b480      	push	{r7}
 8007022:	b083      	sub	sp, #12
 8007024:	af00      	add	r7, sp, #0
 8007026:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	2200      	movs	r2, #0
 800702c:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	f04f 123f 	mov.w	r2, #4128831	@ 0x3f003f
 8007034:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	223f      	movs	r2, #63	@ 0x3f
 800703a:	609a      	str	r2, [r3, #8]
}
 800703c:	bf00      	nop
 800703e:	370c      	adds	r7, #12
 8007040:	46bd      	mov	sp, r7
 8007042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007046:	4770      	bx	lr

08007048 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8007048:	b480      	push	{r7}
 800704a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800704c:	4b05      	ldr	r3, [pc, #20]	@ (8007064 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	4a04      	ldr	r2, [pc, #16]	@ (8007064 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8007052:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007056:	6013      	str	r3, [r2, #0]
}
 8007058:	bf00      	nop
 800705a:	46bd      	mov	sp, r7
 800705c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007060:	4770      	bx	lr
 8007062:	bf00      	nop
 8007064:	58000400 	.word	0x58000400

08007068 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8007068:	b480      	push	{r7}
 800706a:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 800706c:	4b04      	ldr	r3, [pc, #16]	@ (8007080 <HAL_PWREx_GetVoltageRange+0x18>)
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 8007074:	4618      	mov	r0, r3
 8007076:	46bd      	mov	sp, r7
 8007078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707c:	4770      	bx	lr
 800707e:	bf00      	nop
 8007080:	58000400 	.word	0x58000400

08007084 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8007084:	b480      	push	{r7}
 8007086:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8007088:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007092:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007096:	d101      	bne.n	800709c <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8007098:	2301      	movs	r3, #1
 800709a:	e000      	b.n	800709e <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 800709c:	2300      	movs	r3, #0
}
 800709e:	4618      	mov	r0, r3
 80070a0:	46bd      	mov	sp, r7
 80070a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a6:	4770      	bx	lr

080070a8 <LL_RCC_HSE_Enable>:
{
 80070a8:	b480      	push	{r7}
 80070aa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80070ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80070b6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80070ba:	6013      	str	r3, [r2, #0]
}
 80070bc:	bf00      	nop
 80070be:	46bd      	mov	sp, r7
 80070c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c4:	4770      	bx	lr

080070c6 <LL_RCC_HSE_Disable>:
{
 80070c6:	b480      	push	{r7}
 80070c8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80070ca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80070d4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80070d8:	6013      	str	r3, [r2, #0]
}
 80070da:	bf00      	nop
 80070dc:	46bd      	mov	sp, r7
 80070de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e2:	4770      	bx	lr

080070e4 <LL_RCC_HSE_IsReady>:
{
 80070e4:	b480      	push	{r7}
 80070e6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80070e8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80070f2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80070f6:	d101      	bne.n	80070fc <LL_RCC_HSE_IsReady+0x18>
 80070f8:	2301      	movs	r3, #1
 80070fa:	e000      	b.n	80070fe <LL_RCC_HSE_IsReady+0x1a>
 80070fc:	2300      	movs	r3, #0
}
 80070fe:	4618      	mov	r0, r3
 8007100:	46bd      	mov	sp, r7
 8007102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007106:	4770      	bx	lr

08007108 <LL_RCC_HSI_Enable>:
{
 8007108:	b480      	push	{r7}
 800710a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800710c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007116:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800711a:	6013      	str	r3, [r2, #0]
}
 800711c:	bf00      	nop
 800711e:	46bd      	mov	sp, r7
 8007120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007124:	4770      	bx	lr

08007126 <LL_RCC_HSI_Disable>:
{
 8007126:	b480      	push	{r7}
 8007128:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800712a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007134:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007138:	6013      	str	r3, [r2, #0]
}
 800713a:	bf00      	nop
 800713c:	46bd      	mov	sp, r7
 800713e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007142:	4770      	bx	lr

08007144 <LL_RCC_HSI_IsReady>:
{
 8007144:	b480      	push	{r7}
 8007146:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8007148:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007152:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007156:	d101      	bne.n	800715c <LL_RCC_HSI_IsReady+0x18>
 8007158:	2301      	movs	r3, #1
 800715a:	e000      	b.n	800715e <LL_RCC_HSI_IsReady+0x1a>
 800715c:	2300      	movs	r3, #0
}
 800715e:	4618      	mov	r0, r3
 8007160:	46bd      	mov	sp, r7
 8007162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007166:	4770      	bx	lr

08007168 <LL_RCC_HSI_SetCalibTrimming>:
{
 8007168:	b480      	push	{r7}
 800716a:	b083      	sub	sp, #12
 800716c:	af00      	add	r7, sp, #0
 800716e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8007170:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007174:	685b      	ldr	r3, [r3, #4]
 8007176:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	061b      	lsls	r3, r3, #24
 800717e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007182:	4313      	orrs	r3, r2
 8007184:	604b      	str	r3, [r1, #4]
}
 8007186:	bf00      	nop
 8007188:	370c      	adds	r7, #12
 800718a:	46bd      	mov	sp, r7
 800718c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007190:	4770      	bx	lr

08007192 <LL_RCC_HSI48_Enable>:
{
 8007192:	b480      	push	{r7}
 8007194:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8007196:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800719a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800719e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80071a2:	f043 0301 	orr.w	r3, r3, #1
 80071a6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 80071aa:	bf00      	nop
 80071ac:	46bd      	mov	sp, r7
 80071ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b2:	4770      	bx	lr

080071b4 <LL_RCC_HSI48_Disable>:
{
 80071b4:	b480      	push	{r7}
 80071b6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80071b8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80071bc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80071c0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80071c4:	f023 0301 	bic.w	r3, r3, #1
 80071c8:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 80071cc:	bf00      	nop
 80071ce:	46bd      	mov	sp, r7
 80071d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d4:	4770      	bx	lr

080071d6 <LL_RCC_HSI48_IsReady>:
{
 80071d6:	b480      	push	{r7}
 80071d8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 80071da:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80071de:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80071e2:	f003 0302 	and.w	r3, r3, #2
 80071e6:	2b02      	cmp	r3, #2
 80071e8:	d101      	bne.n	80071ee <LL_RCC_HSI48_IsReady+0x18>
 80071ea:	2301      	movs	r3, #1
 80071ec:	e000      	b.n	80071f0 <LL_RCC_HSI48_IsReady+0x1a>
 80071ee:	2300      	movs	r3, #0
}
 80071f0:	4618      	mov	r0, r3
 80071f2:	46bd      	mov	sp, r7
 80071f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f8:	4770      	bx	lr

080071fa <LL_RCC_LSE_Enable>:
{
 80071fa:	b480      	push	{r7}
 80071fc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80071fe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007202:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007206:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800720a:	f043 0301 	orr.w	r3, r3, #1
 800720e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8007212:	bf00      	nop
 8007214:	46bd      	mov	sp, r7
 8007216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721a:	4770      	bx	lr

0800721c <LL_RCC_LSE_Disable>:
{
 800721c:	b480      	push	{r7}
 800721e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8007220:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007224:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007228:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800722c:	f023 0301 	bic.w	r3, r3, #1
 8007230:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8007234:	bf00      	nop
 8007236:	46bd      	mov	sp, r7
 8007238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723c:	4770      	bx	lr

0800723e <LL_RCC_LSE_EnableBypass>:
{
 800723e:	b480      	push	{r7}
 8007240:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8007242:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007246:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800724a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800724e:	f043 0304 	orr.w	r3, r3, #4
 8007252:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8007256:	bf00      	nop
 8007258:	46bd      	mov	sp, r7
 800725a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725e:	4770      	bx	lr

08007260 <LL_RCC_LSE_DisableBypass>:
{
 8007260:	b480      	push	{r7}
 8007262:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8007264:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007268:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800726c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007270:	f023 0304 	bic.w	r3, r3, #4
 8007274:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8007278:	bf00      	nop
 800727a:	46bd      	mov	sp, r7
 800727c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007280:	4770      	bx	lr

08007282 <LL_RCC_LSE_IsReady>:
{
 8007282:	b480      	push	{r7}
 8007284:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8007286:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800728a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800728e:	f003 0302 	and.w	r3, r3, #2
 8007292:	2b02      	cmp	r3, #2
 8007294:	d101      	bne.n	800729a <LL_RCC_LSE_IsReady+0x18>
 8007296:	2301      	movs	r3, #1
 8007298:	e000      	b.n	800729c <LL_RCC_LSE_IsReady+0x1a>
 800729a:	2300      	movs	r3, #0
}
 800729c:	4618      	mov	r0, r3
 800729e:	46bd      	mov	sp, r7
 80072a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a4:	4770      	bx	lr

080072a6 <LL_RCC_LSI1_Enable>:
{
 80072a6:	b480      	push	{r7}
 80072a8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80072aa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80072ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80072b2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80072b6:	f043 0301 	orr.w	r3, r3, #1
 80072ba:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 80072be:	bf00      	nop
 80072c0:	46bd      	mov	sp, r7
 80072c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c6:	4770      	bx	lr

080072c8 <LL_RCC_LSI1_Disable>:
{
 80072c8:	b480      	push	{r7}
 80072ca:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80072cc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80072d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80072d4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80072d8:	f023 0301 	bic.w	r3, r3, #1
 80072dc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 80072e0:	bf00      	nop
 80072e2:	46bd      	mov	sp, r7
 80072e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e8:	4770      	bx	lr

080072ea <LL_RCC_LSI1_IsReady>:
{
 80072ea:	b480      	push	{r7}
 80072ec:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 80072ee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80072f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80072f6:	f003 0302 	and.w	r3, r3, #2
 80072fa:	2b02      	cmp	r3, #2
 80072fc:	d101      	bne.n	8007302 <LL_RCC_LSI1_IsReady+0x18>
 80072fe:	2301      	movs	r3, #1
 8007300:	e000      	b.n	8007304 <LL_RCC_LSI1_IsReady+0x1a>
 8007302:	2300      	movs	r3, #0
}
 8007304:	4618      	mov	r0, r3
 8007306:	46bd      	mov	sp, r7
 8007308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730c:	4770      	bx	lr

0800730e <LL_RCC_LSI2_Enable>:
{
 800730e:	b480      	push	{r7}
 8007310:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8007312:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007316:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800731a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800731e:	f043 0304 	orr.w	r3, r3, #4
 8007322:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8007326:	bf00      	nop
 8007328:	46bd      	mov	sp, r7
 800732a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732e:	4770      	bx	lr

08007330 <LL_RCC_LSI2_Disable>:
{
 8007330:	b480      	push	{r7}
 8007332:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8007334:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007338:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800733c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007340:	f023 0304 	bic.w	r3, r3, #4
 8007344:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8007348:	bf00      	nop
 800734a:	46bd      	mov	sp, r7
 800734c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007350:	4770      	bx	lr

08007352 <LL_RCC_LSI2_IsReady>:
{
 8007352:	b480      	push	{r7}
 8007354:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8007356:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800735a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800735e:	f003 0308 	and.w	r3, r3, #8
 8007362:	2b08      	cmp	r3, #8
 8007364:	d101      	bne.n	800736a <LL_RCC_LSI2_IsReady+0x18>
 8007366:	2301      	movs	r3, #1
 8007368:	e000      	b.n	800736c <LL_RCC_LSI2_IsReady+0x1a>
 800736a:	2300      	movs	r3, #0
}
 800736c:	4618      	mov	r0, r3
 800736e:	46bd      	mov	sp, r7
 8007370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007374:	4770      	bx	lr

08007376 <LL_RCC_LSI2_SetTrimming>:
{
 8007376:	b480      	push	{r7}
 8007378:	b083      	sub	sp, #12
 800737a:	af00      	add	r7, sp, #0
 800737c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 800737e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007382:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007386:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	021b      	lsls	r3, r3, #8
 800738e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007392:	4313      	orrs	r3, r2
 8007394:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8007398:	bf00      	nop
 800739a:	370c      	adds	r7, #12
 800739c:	46bd      	mov	sp, r7
 800739e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a2:	4770      	bx	lr

080073a4 <LL_RCC_MSI_Enable>:
{
 80073a4:	b480      	push	{r7}
 80073a6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80073a8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80073b2:	f043 0301 	orr.w	r3, r3, #1
 80073b6:	6013      	str	r3, [r2, #0]
}
 80073b8:	bf00      	nop
 80073ba:	46bd      	mov	sp, r7
 80073bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c0:	4770      	bx	lr

080073c2 <LL_RCC_MSI_Disable>:
{
 80073c2:	b480      	push	{r7}
 80073c4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80073c6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80073d0:	f023 0301 	bic.w	r3, r3, #1
 80073d4:	6013      	str	r3, [r2, #0]
}
 80073d6:	bf00      	nop
 80073d8:	46bd      	mov	sp, r7
 80073da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073de:	4770      	bx	lr

080073e0 <LL_RCC_MSI_IsReady>:
{
 80073e0:	b480      	push	{r7}
 80073e2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80073e4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	f003 0302 	and.w	r3, r3, #2
 80073ee:	2b02      	cmp	r3, #2
 80073f0:	d101      	bne.n	80073f6 <LL_RCC_MSI_IsReady+0x16>
 80073f2:	2301      	movs	r3, #1
 80073f4:	e000      	b.n	80073f8 <LL_RCC_MSI_IsReady+0x18>
 80073f6:	2300      	movs	r3, #0
}
 80073f8:	4618      	mov	r0, r3
 80073fa:	46bd      	mov	sp, r7
 80073fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007400:	4770      	bx	lr

08007402 <LL_RCC_MSI_SetRange>:
{
 8007402:	b480      	push	{r7}
 8007404:	b083      	sub	sp, #12
 8007406:	af00      	add	r7, sp, #0
 8007408:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 800740a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007414:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	4313      	orrs	r3, r2
 800741c:	600b      	str	r3, [r1, #0]
}
 800741e:	bf00      	nop
 8007420:	370c      	adds	r7, #12
 8007422:	46bd      	mov	sp, r7
 8007424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007428:	4770      	bx	lr

0800742a <LL_RCC_MSI_GetRange>:
{
 800742a:	b480      	push	{r7}
 800742c:	b083      	sub	sp, #12
 800742e:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8007430:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800743a:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	2bb0      	cmp	r3, #176	@ 0xb0
 8007440:	d901      	bls.n	8007446 <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8007442:	23b0      	movs	r3, #176	@ 0xb0
 8007444:	607b      	str	r3, [r7, #4]
  return msiRange;
 8007446:	687b      	ldr	r3, [r7, #4]
}
 8007448:	4618      	mov	r0, r3
 800744a:	370c      	adds	r7, #12
 800744c:	46bd      	mov	sp, r7
 800744e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007452:	4770      	bx	lr

08007454 <LL_RCC_MSI_SetCalibTrimming>:
{
 8007454:	b480      	push	{r7}
 8007456:	b083      	sub	sp, #12
 8007458:	af00      	add	r7, sp, #0
 800745a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 800745c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007460:	685b      	ldr	r3, [r3, #4]
 8007462:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	021b      	lsls	r3, r3, #8
 800746a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800746e:	4313      	orrs	r3, r2
 8007470:	604b      	str	r3, [r1, #4]
}
 8007472:	bf00      	nop
 8007474:	370c      	adds	r7, #12
 8007476:	46bd      	mov	sp, r7
 8007478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747c:	4770      	bx	lr

0800747e <LL_RCC_SetSysClkSource>:
{
 800747e:	b480      	push	{r7}
 8007480:	b083      	sub	sp, #12
 8007482:	af00      	add	r7, sp, #0
 8007484:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8007486:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800748a:	689b      	ldr	r3, [r3, #8]
 800748c:	f023 0203 	bic.w	r2, r3, #3
 8007490:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	4313      	orrs	r3, r2
 8007498:	608b      	str	r3, [r1, #8]
}
 800749a:	bf00      	nop
 800749c:	370c      	adds	r7, #12
 800749e:	46bd      	mov	sp, r7
 80074a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a4:	4770      	bx	lr

080074a6 <LL_RCC_GetSysClkSource>:
{
 80074a6:	b480      	push	{r7}
 80074a8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80074aa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80074ae:	689b      	ldr	r3, [r3, #8]
 80074b0:	f003 030c 	and.w	r3, r3, #12
}
 80074b4:	4618      	mov	r0, r3
 80074b6:	46bd      	mov	sp, r7
 80074b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074bc:	4770      	bx	lr

080074be <LL_RCC_SetAHBPrescaler>:
{
 80074be:	b480      	push	{r7}
 80074c0:	b083      	sub	sp, #12
 80074c2:	af00      	add	r7, sp, #0
 80074c4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80074c6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80074ca:	689b      	ldr	r3, [r3, #8]
 80074cc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80074d0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	4313      	orrs	r3, r2
 80074d8:	608b      	str	r3, [r1, #8]
}
 80074da:	bf00      	nop
 80074dc:	370c      	adds	r7, #12
 80074de:	46bd      	mov	sp, r7
 80074e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e4:	4770      	bx	lr

080074e6 <LL_C2_RCC_SetAHBPrescaler>:
{
 80074e6:	b480      	push	{r7}
 80074e8:	b083      	sub	sp, #12
 80074ea:	af00      	add	r7, sp, #0
 80074ec:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 80074ee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80074f2:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80074f6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80074fa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	4313      	orrs	r3, r2
 8007502:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8007506:	bf00      	nop
 8007508:	370c      	adds	r7, #12
 800750a:	46bd      	mov	sp, r7
 800750c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007510:	4770      	bx	lr

08007512 <LL_RCC_SetAHB4Prescaler>:
{
 8007512:	b480      	push	{r7}
 8007514:	b083      	sub	sp, #12
 8007516:	af00      	add	r7, sp, #0
 8007518:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800751a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800751e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8007522:	f023 020f 	bic.w	r2, r3, #15
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	091b      	lsrs	r3, r3, #4
 800752a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800752e:	4313      	orrs	r3, r2
 8007530:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8007534:	bf00      	nop
 8007536:	370c      	adds	r7, #12
 8007538:	46bd      	mov	sp, r7
 800753a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753e:	4770      	bx	lr

08007540 <LL_RCC_SetAPB1Prescaler>:
{
 8007540:	b480      	push	{r7}
 8007542:	b083      	sub	sp, #12
 8007544:	af00      	add	r7, sp, #0
 8007546:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8007548:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800754c:	689b      	ldr	r3, [r3, #8]
 800754e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007552:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	4313      	orrs	r3, r2
 800755a:	608b      	str	r3, [r1, #8]
}
 800755c:	bf00      	nop
 800755e:	370c      	adds	r7, #12
 8007560:	46bd      	mov	sp, r7
 8007562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007566:	4770      	bx	lr

08007568 <LL_RCC_SetAPB2Prescaler>:
{
 8007568:	b480      	push	{r7}
 800756a:	b083      	sub	sp, #12
 800756c:	af00      	add	r7, sp, #0
 800756e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8007570:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007574:	689b      	ldr	r3, [r3, #8]
 8007576:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800757a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	4313      	orrs	r3, r2
 8007582:	608b      	str	r3, [r1, #8]
}
 8007584:	bf00      	nop
 8007586:	370c      	adds	r7, #12
 8007588:	46bd      	mov	sp, r7
 800758a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800758e:	4770      	bx	lr

08007590 <LL_RCC_GetAHBPrescaler>:
{
 8007590:	b480      	push	{r7}
 8007592:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8007594:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007598:	689b      	ldr	r3, [r3, #8]
 800759a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800759e:	4618      	mov	r0, r3
 80075a0:	46bd      	mov	sp, r7
 80075a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a6:	4770      	bx	lr

080075a8 <LL_RCC_GetAHB4Prescaler>:
{
 80075a8:	b480      	push	{r7}
 80075aa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80075ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80075b0:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80075b4:	011b      	lsls	r3, r3, #4
 80075b6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 80075ba:	4618      	mov	r0, r3
 80075bc:	46bd      	mov	sp, r7
 80075be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c2:	4770      	bx	lr

080075c4 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80075c4:	b480      	push	{r7}
 80075c6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80075c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80075d2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80075d6:	6013      	str	r3, [r2, #0]
}
 80075d8:	bf00      	nop
 80075da:	46bd      	mov	sp, r7
 80075dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e0:	4770      	bx	lr

080075e2 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 80075e2:	b480      	push	{r7}
 80075e4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80075e6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80075f0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80075f4:	6013      	str	r3, [r2, #0]
}
 80075f6:	bf00      	nop
 80075f8:	46bd      	mov	sp, r7
 80075fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075fe:	4770      	bx	lr

08007600 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8007600:	b480      	push	{r7}
 8007602:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8007604:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800760e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007612:	d101      	bne.n	8007618 <LL_RCC_PLL_IsReady+0x18>
 8007614:	2301      	movs	r3, #1
 8007616:	e000      	b.n	800761a <LL_RCC_PLL_IsReady+0x1a>
 8007618:	2300      	movs	r3, #0
}
 800761a:	4618      	mov	r0, r3
 800761c:	46bd      	mov	sp, r7
 800761e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007622:	4770      	bx	lr

08007624 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8007624:	b480      	push	{r7}
 8007626:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8007628:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800762c:	68db      	ldr	r3, [r3, #12]
 800762e:	0a1b      	lsrs	r3, r3, #8
 8007630:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 8007634:	4618      	mov	r0, r3
 8007636:	46bd      	mov	sp, r7
 8007638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763c:	4770      	bx	lr

0800763e <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800763e:	b480      	push	{r7}
 8007640:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8007642:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007646:	68db      	ldr	r3, [r3, #12]
 8007648:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 800764c:	4618      	mov	r0, r3
 800764e:	46bd      	mov	sp, r7
 8007650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007654:	4770      	bx	lr

08007656 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8007656:	b480      	push	{r7}
 8007658:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800765a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800765e:	68db      	ldr	r3, [r3, #12]
 8007660:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 8007664:	4618      	mov	r0, r3
 8007666:	46bd      	mov	sp, r7
 8007668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766c:	4770      	bx	lr

0800766e <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800766e:	b480      	push	{r7}
 8007670:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8007672:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007676:	68db      	ldr	r3, [r3, #12]
 8007678:	f003 0303 	and.w	r3, r3, #3
}
 800767c:	4618      	mov	r0, r3
 800767e:	46bd      	mov	sp, r7
 8007680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007684:	4770      	bx	lr

08007686 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8007686:	b480      	push	{r7}
 8007688:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800768a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800768e:	689b      	ldr	r3, [r3, #8]
 8007690:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007694:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007698:	d101      	bne.n	800769e <LL_RCC_IsActiveFlag_HPRE+0x18>
 800769a:	2301      	movs	r3, #1
 800769c:	e000      	b.n	80076a0 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800769e:	2300      	movs	r3, #0
}
 80076a0:	4618      	mov	r0, r3
 80076a2:	46bd      	mov	sp, r7
 80076a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a8:	4770      	bx	lr

080076aa <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 80076aa:	b480      	push	{r7}
 80076ac:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 80076ae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80076b2:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80076b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80076ba:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80076be:	d101      	bne.n	80076c4 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 80076c0:	2301      	movs	r3, #1
 80076c2:	e000      	b.n	80076c6 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 80076c4:	2300      	movs	r3, #0
}
 80076c6:	4618      	mov	r0, r3
 80076c8:	46bd      	mov	sp, r7
 80076ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ce:	4770      	bx	lr

080076d0 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 80076d0:	b480      	push	{r7}
 80076d2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80076d4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80076d8:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80076dc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80076e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80076e4:	d101      	bne.n	80076ea <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80076e6:	2301      	movs	r3, #1
 80076e8:	e000      	b.n	80076ec <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80076ea:	2300      	movs	r3, #0
}
 80076ec:	4618      	mov	r0, r3
 80076ee:	46bd      	mov	sp, r7
 80076f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f4:	4770      	bx	lr

080076f6 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 80076f6:	b480      	push	{r7}
 80076f8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80076fa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80076fe:	689b      	ldr	r3, [r3, #8]
 8007700:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007704:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007708:	d101      	bne.n	800770e <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800770a:	2301      	movs	r3, #1
 800770c:	e000      	b.n	8007710 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800770e:	2300      	movs	r3, #0
}
 8007710:	4618      	mov	r0, r3
 8007712:	46bd      	mov	sp, r7
 8007714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007718:	4770      	bx	lr

0800771a <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 800771a:	b480      	push	{r7}
 800771c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800771e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007722:	689b      	ldr	r3, [r3, #8]
 8007724:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007728:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800772c:	d101      	bne.n	8007732 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800772e:	2301      	movs	r3, #1
 8007730:	e000      	b.n	8007734 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8007732:	2300      	movs	r3, #0
}
 8007734:	4618      	mov	r0, r3
 8007736:	46bd      	mov	sp, r7
 8007738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773c:	4770      	bx	lr
	...

08007740 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007740:	b590      	push	{r4, r7, lr}
 8007742:	b08d      	sub	sp, #52	@ 0x34
 8007744:	af00      	add	r7, sp, #0
 8007746:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	2b00      	cmp	r3, #0
 800774c:	d101      	bne.n	8007752 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800774e:	2301      	movs	r3, #1
 8007750:	e363      	b.n	8007e1a <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	f003 0320 	and.w	r3, r3, #32
 800775a:	2b00      	cmp	r3, #0
 800775c:	f000 808d 	beq.w	800787a <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007760:	f7ff fea1 	bl	80074a6 <LL_RCC_GetSysClkSource>
 8007764:	62f8      	str	r0, [r7, #44]	@ 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007766:	f7ff ff82 	bl	800766e <LL_RCC_PLL_GetMainSource>
 800776a:	62b8      	str	r0, [r7, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800776c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800776e:	2b00      	cmp	r3, #0
 8007770:	d005      	beq.n	800777e <HAL_RCC_OscConfig+0x3e>
 8007772:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007774:	2b0c      	cmp	r3, #12
 8007776:	d147      	bne.n	8007808 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8007778:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800777a:	2b01      	cmp	r3, #1
 800777c:	d144      	bne.n	8007808 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	69db      	ldr	r3, [r3, #28]
 8007782:	2b00      	cmp	r3, #0
 8007784:	d101      	bne.n	800778a <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8007786:	2301      	movs	r3, #1
 8007788:	e347      	b.n	8007e1a <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800778e:	f7ff fe4c 	bl	800742a <LL_RCC_MSI_GetRange>
 8007792:	4603      	mov	r3, r0
 8007794:	429c      	cmp	r4, r3
 8007796:	d914      	bls.n	80077c2 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800779c:	4618      	mov	r0, r3
 800779e:	f000 fd03 	bl	80081a8 <RCC_SetFlashLatencyFromMSIRange>
 80077a2:	4603      	mov	r3, r0
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d001      	beq.n	80077ac <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 80077a8:	2301      	movs	r3, #1
 80077aa:	e336      	b.n	8007e1a <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077b0:	4618      	mov	r0, r3
 80077b2:	f7ff fe26 	bl	8007402 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	6a1b      	ldr	r3, [r3, #32]
 80077ba:	4618      	mov	r0, r3
 80077bc:	f7ff fe4a 	bl	8007454 <LL_RCC_MSI_SetCalibTrimming>
 80077c0:	e013      	b.n	80077ea <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077c6:	4618      	mov	r0, r3
 80077c8:	f7ff fe1b 	bl	8007402 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	6a1b      	ldr	r3, [r3, #32]
 80077d0:	4618      	mov	r0, r3
 80077d2:	f7ff fe3f 	bl	8007454 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077da:	4618      	mov	r0, r3
 80077dc:	f000 fce4 	bl	80081a8 <RCC_SetFlashLatencyFromMSIRange>
 80077e0:	4603      	mov	r3, r0
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d001      	beq.n	80077ea <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 80077e6:	2301      	movs	r3, #1
 80077e8:	e317      	b.n	8007e1a <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80077ea:	f000 fcc9 	bl	8008180 <HAL_RCC_GetHCLKFreq>
 80077ee:	4603      	mov	r3, r0
 80077f0:	4aa4      	ldr	r2, [pc, #656]	@ (8007a84 <HAL_RCC_OscConfig+0x344>)
 80077f2:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80077f4:	4ba4      	ldr	r3, [pc, #656]	@ (8007a88 <HAL_RCC_OscConfig+0x348>)
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	4618      	mov	r0, r3
 80077fa:	f7fc fc83 	bl	8004104 <HAL_InitTick>
 80077fe:	4603      	mov	r3, r0
 8007800:	2b00      	cmp	r3, #0
 8007802:	d039      	beq.n	8007878 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8007804:	2301      	movs	r3, #1
 8007806:	e308      	b.n	8007e1a <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	69db      	ldr	r3, [r3, #28]
 800780c:	2b00      	cmp	r3, #0
 800780e:	d01e      	beq.n	800784e <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8007810:	f7ff fdc8 	bl	80073a4 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8007814:	f7fc fcc4 	bl	80041a0 <HAL_GetTick>
 8007818:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800781a:	e008      	b.n	800782e <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800781c:	f7fc fcc0 	bl	80041a0 <HAL_GetTick>
 8007820:	4602      	mov	r2, r0
 8007822:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007824:	1ad3      	subs	r3, r2, r3
 8007826:	2b02      	cmp	r3, #2
 8007828:	d901      	bls.n	800782e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800782a:	2303      	movs	r3, #3
 800782c:	e2f5      	b.n	8007e1a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 800782e:	f7ff fdd7 	bl	80073e0 <LL_RCC_MSI_IsReady>
 8007832:	4603      	mov	r3, r0
 8007834:	2b00      	cmp	r3, #0
 8007836:	d0f1      	beq.n	800781c <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800783c:	4618      	mov	r0, r3
 800783e:	f7ff fde0 	bl	8007402 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	6a1b      	ldr	r3, [r3, #32]
 8007846:	4618      	mov	r0, r3
 8007848:	f7ff fe04 	bl	8007454 <LL_RCC_MSI_SetCalibTrimming>
 800784c:	e015      	b.n	800787a <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800784e:	f7ff fdb8 	bl	80073c2 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8007852:	f7fc fca5 	bl	80041a0 <HAL_GetTick>
 8007856:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8007858:	e008      	b.n	800786c <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800785a:	f7fc fca1 	bl	80041a0 <HAL_GetTick>
 800785e:	4602      	mov	r2, r0
 8007860:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007862:	1ad3      	subs	r3, r2, r3
 8007864:	2b02      	cmp	r3, #2
 8007866:	d901      	bls.n	800786c <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8007868:	2303      	movs	r3, #3
 800786a:	e2d6      	b.n	8007e1a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 800786c:	f7ff fdb8 	bl	80073e0 <LL_RCC_MSI_IsReady>
 8007870:	4603      	mov	r3, r0
 8007872:	2b00      	cmp	r3, #0
 8007874:	d1f1      	bne.n	800785a <HAL_RCC_OscConfig+0x11a>
 8007876:	e000      	b.n	800787a <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8007878:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	f003 0301 	and.w	r3, r3, #1
 8007882:	2b00      	cmp	r3, #0
 8007884:	d047      	beq.n	8007916 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007886:	f7ff fe0e 	bl	80074a6 <LL_RCC_GetSysClkSource>
 800788a:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800788c:	f7ff feef 	bl	800766e <LL_RCC_PLL_GetMainSource>
 8007890:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8007892:	6a3b      	ldr	r3, [r7, #32]
 8007894:	2b08      	cmp	r3, #8
 8007896:	d005      	beq.n	80078a4 <HAL_RCC_OscConfig+0x164>
 8007898:	6a3b      	ldr	r3, [r7, #32]
 800789a:	2b0c      	cmp	r3, #12
 800789c:	d108      	bne.n	80078b0 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 800789e:	69fb      	ldr	r3, [r7, #28]
 80078a0:	2b03      	cmp	r3, #3
 80078a2:	d105      	bne.n	80078b0 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	685b      	ldr	r3, [r3, #4]
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d134      	bne.n	8007916 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 80078ac:	2301      	movs	r3, #1
 80078ae:	e2b4      	b.n	8007e1a <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	685b      	ldr	r3, [r3, #4]
 80078b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80078b8:	d102      	bne.n	80078c0 <HAL_RCC_OscConfig+0x180>
 80078ba:	f7ff fbf5 	bl	80070a8 <LL_RCC_HSE_Enable>
 80078be:	e001      	b.n	80078c4 <HAL_RCC_OscConfig+0x184>
 80078c0:	f7ff fc01 	bl	80070c6 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	685b      	ldr	r3, [r3, #4]
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d012      	beq.n	80078f2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80078cc:	f7fc fc68 	bl	80041a0 <HAL_GetTick>
 80078d0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80078d2:	e008      	b.n	80078e6 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80078d4:	f7fc fc64 	bl	80041a0 <HAL_GetTick>
 80078d8:	4602      	mov	r2, r0
 80078da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078dc:	1ad3      	subs	r3, r2, r3
 80078de:	2b64      	cmp	r3, #100	@ 0x64
 80078e0:	d901      	bls.n	80078e6 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80078e2:	2303      	movs	r3, #3
 80078e4:	e299      	b.n	8007e1a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 80078e6:	f7ff fbfd 	bl	80070e4 <LL_RCC_HSE_IsReady>
 80078ea:	4603      	mov	r3, r0
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d0f1      	beq.n	80078d4 <HAL_RCC_OscConfig+0x194>
 80078f0:	e011      	b.n	8007916 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80078f2:	f7fc fc55 	bl	80041a0 <HAL_GetTick>
 80078f6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80078f8:	e008      	b.n	800790c <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80078fa:	f7fc fc51 	bl	80041a0 <HAL_GetTick>
 80078fe:	4602      	mov	r2, r0
 8007900:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007902:	1ad3      	subs	r3, r2, r3
 8007904:	2b64      	cmp	r3, #100	@ 0x64
 8007906:	d901      	bls.n	800790c <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8007908:	2303      	movs	r3, #3
 800790a:	e286      	b.n	8007e1a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 800790c:	f7ff fbea 	bl	80070e4 <LL_RCC_HSE_IsReady>
 8007910:	4603      	mov	r3, r0
 8007912:	2b00      	cmp	r3, #0
 8007914:	d1f1      	bne.n	80078fa <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	f003 0302 	and.w	r3, r3, #2
 800791e:	2b00      	cmp	r3, #0
 8007920:	d04c      	beq.n	80079bc <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007922:	f7ff fdc0 	bl	80074a6 <LL_RCC_GetSysClkSource>
 8007926:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007928:	f7ff fea1 	bl	800766e <LL_RCC_PLL_GetMainSource>
 800792c:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800792e:	69bb      	ldr	r3, [r7, #24]
 8007930:	2b04      	cmp	r3, #4
 8007932:	d005      	beq.n	8007940 <HAL_RCC_OscConfig+0x200>
 8007934:	69bb      	ldr	r3, [r7, #24]
 8007936:	2b0c      	cmp	r3, #12
 8007938:	d10e      	bne.n	8007958 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800793a:	697b      	ldr	r3, [r7, #20]
 800793c:	2b02      	cmp	r3, #2
 800793e:	d10b      	bne.n	8007958 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	68db      	ldr	r3, [r3, #12]
 8007944:	2b00      	cmp	r3, #0
 8007946:	d101      	bne.n	800794c <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8007948:	2301      	movs	r3, #1
 800794a:	e266      	b.n	8007e1a <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	691b      	ldr	r3, [r3, #16]
 8007950:	4618      	mov	r0, r3
 8007952:	f7ff fc09 	bl	8007168 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8007956:	e031      	b.n	80079bc <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	68db      	ldr	r3, [r3, #12]
 800795c:	2b00      	cmp	r3, #0
 800795e:	d019      	beq.n	8007994 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007960:	f7ff fbd2 	bl	8007108 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007964:	f7fc fc1c 	bl	80041a0 <HAL_GetTick>
 8007968:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800796a:	e008      	b.n	800797e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800796c:	f7fc fc18 	bl	80041a0 <HAL_GetTick>
 8007970:	4602      	mov	r2, r0
 8007972:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007974:	1ad3      	subs	r3, r2, r3
 8007976:	2b02      	cmp	r3, #2
 8007978:	d901      	bls.n	800797e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800797a:	2303      	movs	r3, #3
 800797c:	e24d      	b.n	8007e1a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 800797e:	f7ff fbe1 	bl	8007144 <LL_RCC_HSI_IsReady>
 8007982:	4603      	mov	r3, r0
 8007984:	2b00      	cmp	r3, #0
 8007986:	d0f1      	beq.n	800796c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	691b      	ldr	r3, [r3, #16]
 800798c:	4618      	mov	r0, r3
 800798e:	f7ff fbeb 	bl	8007168 <LL_RCC_HSI_SetCalibTrimming>
 8007992:	e013      	b.n	80079bc <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007994:	f7ff fbc7 	bl	8007126 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007998:	f7fc fc02 	bl	80041a0 <HAL_GetTick>
 800799c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800799e:	e008      	b.n	80079b2 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80079a0:	f7fc fbfe 	bl	80041a0 <HAL_GetTick>
 80079a4:	4602      	mov	r2, r0
 80079a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079a8:	1ad3      	subs	r3, r2, r3
 80079aa:	2b02      	cmp	r3, #2
 80079ac:	d901      	bls.n	80079b2 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 80079ae:	2303      	movs	r3, #3
 80079b0:	e233      	b.n	8007e1a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 80079b2:	f7ff fbc7 	bl	8007144 <LL_RCC_HSI_IsReady>
 80079b6:	4603      	mov	r3, r0
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d1f1      	bne.n	80079a0 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	f003 0308 	and.w	r3, r3, #8
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d106      	bne.n	80079d6 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	f000 80a3 	beq.w	8007b1c <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	695b      	ldr	r3, [r3, #20]
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d076      	beq.n	8007acc <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	f003 0310 	and.w	r3, r3, #16
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d046      	beq.n	8007a78 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 80079ea:	f7ff fc7e 	bl	80072ea <LL_RCC_LSI1_IsReady>
 80079ee:	4603      	mov	r3, r0
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d113      	bne.n	8007a1c <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 80079f4:	f7ff fc57 	bl	80072a6 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80079f8:	f7fc fbd2 	bl	80041a0 <HAL_GetTick>
 80079fc:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 80079fe:	e008      	b.n	8007a12 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8007a00:	f7fc fbce 	bl	80041a0 <HAL_GetTick>
 8007a04:	4602      	mov	r2, r0
 8007a06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a08:	1ad3      	subs	r3, r2, r3
 8007a0a:	2b02      	cmp	r3, #2
 8007a0c:	d901      	bls.n	8007a12 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8007a0e:	2303      	movs	r3, #3
 8007a10:	e203      	b.n	8007e1a <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8007a12:	f7ff fc6a 	bl	80072ea <LL_RCC_LSI1_IsReady>
 8007a16:	4603      	mov	r3, r0
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d0f1      	beq.n	8007a00 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8007a1c:	f7ff fc77 	bl	800730e <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a20:	f7fc fbbe 	bl	80041a0 <HAL_GetTick>
 8007a24:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8007a26:	e008      	b.n	8007a3a <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8007a28:	f7fc fbba 	bl	80041a0 <HAL_GetTick>
 8007a2c:	4602      	mov	r2, r0
 8007a2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a30:	1ad3      	subs	r3, r2, r3
 8007a32:	2b03      	cmp	r3, #3
 8007a34:	d901      	bls.n	8007a3a <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8007a36:	2303      	movs	r3, #3
 8007a38:	e1ef      	b.n	8007e1a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8007a3a:	f7ff fc8a 	bl	8007352 <LL_RCC_LSI2_IsReady>
 8007a3e:	4603      	mov	r3, r0
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d0f1      	beq.n	8007a28 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	699b      	ldr	r3, [r3, #24]
 8007a48:	4618      	mov	r0, r3
 8007a4a:	f7ff fc94 	bl	8007376 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8007a4e:	f7ff fc3b 	bl	80072c8 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a52:	f7fc fba5 	bl	80041a0 <HAL_GetTick>
 8007a56:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8007a58:	e008      	b.n	8007a6c <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8007a5a:	f7fc fba1 	bl	80041a0 <HAL_GetTick>
 8007a5e:	4602      	mov	r2, r0
 8007a60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a62:	1ad3      	subs	r3, r2, r3
 8007a64:	2b02      	cmp	r3, #2
 8007a66:	d901      	bls.n	8007a6c <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8007a68:	2303      	movs	r3, #3
 8007a6a:	e1d6      	b.n	8007e1a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8007a6c:	f7ff fc3d 	bl	80072ea <LL_RCC_LSI1_IsReady>
 8007a70:	4603      	mov	r3, r0
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d1f1      	bne.n	8007a5a <HAL_RCC_OscConfig+0x31a>
 8007a76:	e051      	b.n	8007b1c <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8007a78:	f7ff fc15 	bl	80072a6 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a7c:	f7fc fb90 	bl	80041a0 <HAL_GetTick>
 8007a80:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8007a82:	e00c      	b.n	8007a9e <HAL_RCC_OscConfig+0x35e>
 8007a84:	20000040 	.word	0x20000040
 8007a88:	20000044 	.word	0x20000044
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8007a8c:	f7fc fb88 	bl	80041a0 <HAL_GetTick>
 8007a90:	4602      	mov	r2, r0
 8007a92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a94:	1ad3      	subs	r3, r2, r3
 8007a96:	2b02      	cmp	r3, #2
 8007a98:	d901      	bls.n	8007a9e <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8007a9a:	2303      	movs	r3, #3
 8007a9c:	e1bd      	b.n	8007e1a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8007a9e:	f7ff fc24 	bl	80072ea <LL_RCC_LSI1_IsReady>
 8007aa2:	4603      	mov	r3, r0
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d0f1      	beq.n	8007a8c <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8007aa8:	f7ff fc42 	bl	8007330 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8007aac:	e008      	b.n	8007ac0 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8007aae:	f7fc fb77 	bl	80041a0 <HAL_GetTick>
 8007ab2:	4602      	mov	r2, r0
 8007ab4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ab6:	1ad3      	subs	r3, r2, r3
 8007ab8:	2b03      	cmp	r3, #3
 8007aba:	d901      	bls.n	8007ac0 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8007abc:	2303      	movs	r3, #3
 8007abe:	e1ac      	b.n	8007e1a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8007ac0:	f7ff fc47 	bl	8007352 <LL_RCC_LSI2_IsReady>
 8007ac4:	4603      	mov	r3, r0
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d1f1      	bne.n	8007aae <HAL_RCC_OscConfig+0x36e>
 8007aca:	e027      	b.n	8007b1c <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8007acc:	f7ff fc30 	bl	8007330 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007ad0:	f7fc fb66 	bl	80041a0 <HAL_GetTick>
 8007ad4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8007ad6:	e008      	b.n	8007aea <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8007ad8:	f7fc fb62 	bl	80041a0 <HAL_GetTick>
 8007adc:	4602      	mov	r2, r0
 8007ade:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ae0:	1ad3      	subs	r3, r2, r3
 8007ae2:	2b03      	cmp	r3, #3
 8007ae4:	d901      	bls.n	8007aea <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8007ae6:	2303      	movs	r3, #3
 8007ae8:	e197      	b.n	8007e1a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8007aea:	f7ff fc32 	bl	8007352 <LL_RCC_LSI2_IsReady>
 8007aee:	4603      	mov	r3, r0
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d1f1      	bne.n	8007ad8 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8007af4:	f7ff fbe8 	bl	80072c8 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007af8:	f7fc fb52 	bl	80041a0 <HAL_GetTick>
 8007afc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8007afe:	e008      	b.n	8007b12 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8007b00:	f7fc fb4e 	bl	80041a0 <HAL_GetTick>
 8007b04:	4602      	mov	r2, r0
 8007b06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b08:	1ad3      	subs	r3, r2, r3
 8007b0a:	2b02      	cmp	r3, #2
 8007b0c:	d901      	bls.n	8007b12 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8007b0e:	2303      	movs	r3, #3
 8007b10:	e183      	b.n	8007e1a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8007b12:	f7ff fbea 	bl	80072ea <LL_RCC_LSI1_IsReady>
 8007b16:	4603      	mov	r3, r0
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d1f1      	bne.n	8007b00 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	f003 0304 	and.w	r3, r3, #4
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d05b      	beq.n	8007be0 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007b28:	4ba7      	ldr	r3, [pc, #668]	@ (8007dc8 <HAL_RCC_OscConfig+0x688>)
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d114      	bne.n	8007b5e <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8007b34:	f7ff fa88 	bl	8007048 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007b38:	f7fc fb32 	bl	80041a0 <HAL_GetTick>
 8007b3c:	6278      	str	r0, [r7, #36]	@ 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007b3e:	e008      	b.n	8007b52 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007b40:	f7fc fb2e 	bl	80041a0 <HAL_GetTick>
 8007b44:	4602      	mov	r2, r0
 8007b46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b48:	1ad3      	subs	r3, r2, r3
 8007b4a:	2b02      	cmp	r3, #2
 8007b4c:	d901      	bls.n	8007b52 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8007b4e:	2303      	movs	r3, #3
 8007b50:	e163      	b.n	8007e1a <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007b52:	4b9d      	ldr	r3, [pc, #628]	@ (8007dc8 <HAL_RCC_OscConfig+0x688>)
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d0f0      	beq.n	8007b40 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	689b      	ldr	r3, [r3, #8]
 8007b62:	2b01      	cmp	r3, #1
 8007b64:	d102      	bne.n	8007b6c <HAL_RCC_OscConfig+0x42c>
 8007b66:	f7ff fb48 	bl	80071fa <LL_RCC_LSE_Enable>
 8007b6a:	e00c      	b.n	8007b86 <HAL_RCC_OscConfig+0x446>
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	689b      	ldr	r3, [r3, #8]
 8007b70:	2b05      	cmp	r3, #5
 8007b72:	d104      	bne.n	8007b7e <HAL_RCC_OscConfig+0x43e>
 8007b74:	f7ff fb63 	bl	800723e <LL_RCC_LSE_EnableBypass>
 8007b78:	f7ff fb3f 	bl	80071fa <LL_RCC_LSE_Enable>
 8007b7c:	e003      	b.n	8007b86 <HAL_RCC_OscConfig+0x446>
 8007b7e:	f7ff fb4d 	bl	800721c <LL_RCC_LSE_Disable>
 8007b82:	f7ff fb6d 	bl	8007260 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	689b      	ldr	r3, [r3, #8]
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d014      	beq.n	8007bb8 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007b8e:	f7fc fb07 	bl	80041a0 <HAL_GetTick>
 8007b92:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8007b94:	e00a      	b.n	8007bac <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007b96:	f7fc fb03 	bl	80041a0 <HAL_GetTick>
 8007b9a:	4602      	mov	r2, r0
 8007b9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b9e:	1ad3      	subs	r3, r2, r3
 8007ba0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007ba4:	4293      	cmp	r3, r2
 8007ba6:	d901      	bls.n	8007bac <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8007ba8:	2303      	movs	r3, #3
 8007baa:	e136      	b.n	8007e1a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8007bac:	f7ff fb69 	bl	8007282 <LL_RCC_LSE_IsReady>
 8007bb0:	4603      	mov	r3, r0
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d0ef      	beq.n	8007b96 <HAL_RCC_OscConfig+0x456>
 8007bb6:	e013      	b.n	8007be0 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007bb8:	f7fc faf2 	bl	80041a0 <HAL_GetTick>
 8007bbc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8007bbe:	e00a      	b.n	8007bd6 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007bc0:	f7fc faee 	bl	80041a0 <HAL_GetTick>
 8007bc4:	4602      	mov	r2, r0
 8007bc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bc8:	1ad3      	subs	r3, r2, r3
 8007bca:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007bce:	4293      	cmp	r3, r2
 8007bd0:	d901      	bls.n	8007bd6 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 8007bd2:	2303      	movs	r3, #3
 8007bd4:	e121      	b.n	8007e1a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 8007bd6:	f7ff fb54 	bl	8007282 <LL_RCC_LSE_IsReady>
 8007bda:	4603      	mov	r3, r0
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d1ef      	bne.n	8007bc0 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d02c      	beq.n	8007c46 <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d014      	beq.n	8007c1e <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007bf4:	f7ff facd 	bl	8007192 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007bf8:	f7fc fad2 	bl	80041a0 <HAL_GetTick>
 8007bfc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8007bfe:	e008      	b.n	8007c12 <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007c00:	f7fc face 	bl	80041a0 <HAL_GetTick>
 8007c04:	4602      	mov	r2, r0
 8007c06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c08:	1ad3      	subs	r3, r2, r3
 8007c0a:	2b02      	cmp	r3, #2
 8007c0c:	d901      	bls.n	8007c12 <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 8007c0e:	2303      	movs	r3, #3
 8007c10:	e103      	b.n	8007e1a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8007c12:	f7ff fae0 	bl	80071d6 <LL_RCC_HSI48_IsReady>
 8007c16:	4603      	mov	r3, r0
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d0f1      	beq.n	8007c00 <HAL_RCC_OscConfig+0x4c0>
 8007c1c:	e013      	b.n	8007c46 <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007c1e:	f7ff fac9 	bl	80071b4 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007c22:	f7fc fabd 	bl	80041a0 <HAL_GetTick>
 8007c26:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8007c28:	e008      	b.n	8007c3c <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007c2a:	f7fc fab9 	bl	80041a0 <HAL_GetTick>
 8007c2e:	4602      	mov	r2, r0
 8007c30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c32:	1ad3      	subs	r3, r2, r3
 8007c34:	2b02      	cmp	r3, #2
 8007c36:	d901      	bls.n	8007c3c <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8007c38:	2303      	movs	r3, #3
 8007c3a:	e0ee      	b.n	8007e1a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8007c3c:	f7ff facb 	bl	80071d6 <LL_RCC_HSI48_IsReady>
 8007c40:	4603      	mov	r3, r0
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d1f1      	bne.n	8007c2a <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	f000 80e4 	beq.w	8007e18 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007c50:	f7ff fc29 	bl	80074a6 <LL_RCC_GetSysClkSource>
 8007c54:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8007c56:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007c5a:	68db      	ldr	r3, [r3, #12]
 8007c5c:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c62:	2b02      	cmp	r3, #2
 8007c64:	f040 80b4 	bne.w	8007dd0 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	f003 0203 	and.w	r2, r3, #3
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c72:	429a      	cmp	r2, r3
 8007c74:	d123      	bne.n	8007cbe <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007c80:	429a      	cmp	r2, r3
 8007c82:	d11c      	bne.n	8007cbe <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	0a1b      	lsrs	r3, r3, #8
 8007c88:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007c90:	429a      	cmp	r2, r3
 8007c92:	d114      	bne.n	8007cbe <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8007c9e:	429a      	cmp	r2, r3
 8007ca0:	d10d      	bne.n	8007cbe <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	f003 6260 	and.w	r2, r3, #234881024	@ 0xe000000
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8007cac:	429a      	cmp	r2, r3
 8007cae:	d106      	bne.n	8007cbe <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8007cba:	429a      	cmp	r2, r3
 8007cbc:	d05d      	beq.n	8007d7a <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007cbe:	693b      	ldr	r3, [r7, #16]
 8007cc0:	2b0c      	cmp	r3, #12
 8007cc2:	d058      	beq.n	8007d76 <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8007cc4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d001      	beq.n	8007cd6 <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 8007cd2:	2301      	movs	r3, #1
 8007cd4:	e0a1      	b.n	8007e1a <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8007cd6:	f7ff fc84 	bl	80075e2 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8007cda:	f7fc fa61 	bl	80041a0 <HAL_GetTick>
 8007cde:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007ce0:	e008      	b.n	8007cf4 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007ce2:	f7fc fa5d 	bl	80041a0 <HAL_GetTick>
 8007ce6:	4602      	mov	r2, r0
 8007ce8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cea:	1ad3      	subs	r3, r2, r3
 8007cec:	2b02      	cmp	r3, #2
 8007cee:	d901      	bls.n	8007cf4 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8007cf0:	2303      	movs	r3, #3
 8007cf2:	e092      	b.n	8007e1a <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007cf4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d1ef      	bne.n	8007ce2 <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007d02:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007d06:	68da      	ldr	r2, [r3, #12]
 8007d08:	4b30      	ldr	r3, [pc, #192]	@ (8007dcc <HAL_RCC_OscConfig+0x68c>)
 8007d0a:	4013      	ands	r3, r2
 8007d0c:	687a      	ldr	r2, [r7, #4]
 8007d0e:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8007d10:	687a      	ldr	r2, [r7, #4]
 8007d12:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8007d14:	4311      	orrs	r1, r2
 8007d16:	687a      	ldr	r2, [r7, #4]
 8007d18:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8007d1a:	0212      	lsls	r2, r2, #8
 8007d1c:	4311      	orrs	r1, r2
 8007d1e:	687a      	ldr	r2, [r7, #4]
 8007d20:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8007d22:	4311      	orrs	r1, r2
 8007d24:	687a      	ldr	r2, [r7, #4]
 8007d26:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8007d28:	4311      	orrs	r1, r2
 8007d2a:	687a      	ldr	r2, [r7, #4]
 8007d2c:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8007d2e:	430a      	orrs	r2, r1
 8007d30:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007d34:	4313      	orrs	r3, r2
 8007d36:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8007d38:	f7ff fc44 	bl	80075c4 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007d3c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007d40:	68db      	ldr	r3, [r3, #12]
 8007d42:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007d46:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007d4a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8007d4c:	f7fc fa28 	bl	80041a0 <HAL_GetTick>
 8007d50:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007d52:	e008      	b.n	8007d66 <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007d54:	f7fc fa24 	bl	80041a0 <HAL_GetTick>
 8007d58:	4602      	mov	r2, r0
 8007d5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d5c:	1ad3      	subs	r3, r2, r3
 8007d5e:	2b02      	cmp	r3, #2
 8007d60:	d901      	bls.n	8007d66 <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 8007d62:	2303      	movs	r3, #3
 8007d64:	e059      	b.n	8007e1a <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007d66:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d0ef      	beq.n	8007d54 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007d74:	e050      	b.n	8007e18 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8007d76:	2301      	movs	r3, #1
 8007d78:	e04f      	b.n	8007e1a <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007d7a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d147      	bne.n	8007e18 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8007d88:	f7ff fc1c 	bl	80075c4 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007d8c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007d90:	68db      	ldr	r3, [r3, #12]
 8007d92:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007d96:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007d9a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007d9c:	f7fc fa00 	bl	80041a0 <HAL_GetTick>
 8007da0:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007da2:	e008      	b.n	8007db6 <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007da4:	f7fc f9fc 	bl	80041a0 <HAL_GetTick>
 8007da8:	4602      	mov	r2, r0
 8007daa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dac:	1ad3      	subs	r3, r2, r3
 8007dae:	2b02      	cmp	r3, #2
 8007db0:	d901      	bls.n	8007db6 <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 8007db2:	2303      	movs	r3, #3
 8007db4:	e031      	b.n	8007e1a <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007db6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d0ef      	beq.n	8007da4 <HAL_RCC_OscConfig+0x664>
 8007dc4:	e028      	b.n	8007e18 <HAL_RCC_OscConfig+0x6d8>
 8007dc6:	bf00      	nop
 8007dc8:	58000400 	.word	0x58000400
 8007dcc:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007dd0:	693b      	ldr	r3, [r7, #16]
 8007dd2:	2b0c      	cmp	r3, #12
 8007dd4:	d01e      	beq.n	8007e14 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007dd6:	f7ff fc04 	bl	80075e2 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007dda:	f7fc f9e1 	bl	80041a0 <HAL_GetTick>
 8007dde:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007de0:	e008      	b.n	8007df4 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007de2:	f7fc f9dd 	bl	80041a0 <HAL_GetTick>
 8007de6:	4602      	mov	r2, r0
 8007de8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dea:	1ad3      	subs	r3, r2, r3
 8007dec:	2b02      	cmp	r3, #2
 8007dee:	d901      	bls.n	8007df4 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8007df0:	2303      	movs	r3, #3
 8007df2:	e012      	b.n	8007e1a <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007df4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d1ef      	bne.n	8007de2 <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8007e02:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007e06:	68da      	ldr	r2, [r3, #12]
 8007e08:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007e0c:	4b05      	ldr	r3, [pc, #20]	@ (8007e24 <HAL_RCC_OscConfig+0x6e4>)
 8007e0e:	4013      	ands	r3, r2
 8007e10:	60cb      	str	r3, [r1, #12]
 8007e12:	e001      	b.n	8007e18 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8007e14:	2301      	movs	r3, #1
 8007e16:	e000      	b.n	8007e1a <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8007e18:	2300      	movs	r3, #0
}
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	3734      	adds	r7, #52	@ 0x34
 8007e1e:	46bd      	mov	sp, r7
 8007e20:	bd90      	pop	{r4, r7, pc}
 8007e22:	bf00      	nop
 8007e24:	eefefffc 	.word	0xeefefffc

08007e28 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007e28:	b580      	push	{r7, lr}
 8007e2a:	b084      	sub	sp, #16
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	6078      	str	r0, [r7, #4]
 8007e30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d101      	bne.n	8007e3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007e38:	2301      	movs	r3, #1
 8007e3a:	e12d      	b.n	8008098 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007e3c:	4b98      	ldr	r3, [pc, #608]	@ (80080a0 <HAL_RCC_ClockConfig+0x278>)
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	f003 0307 	and.w	r3, r3, #7
 8007e44:	683a      	ldr	r2, [r7, #0]
 8007e46:	429a      	cmp	r2, r3
 8007e48:	d91b      	bls.n	8007e82 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007e4a:	4b95      	ldr	r3, [pc, #596]	@ (80080a0 <HAL_RCC_ClockConfig+0x278>)
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	f023 0207 	bic.w	r2, r3, #7
 8007e52:	4993      	ldr	r1, [pc, #588]	@ (80080a0 <HAL_RCC_ClockConfig+0x278>)
 8007e54:	683b      	ldr	r3, [r7, #0]
 8007e56:	4313      	orrs	r3, r2
 8007e58:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007e5a:	f7fc f9a1 	bl	80041a0 <HAL_GetTick>
 8007e5e:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007e60:	e008      	b.n	8007e74 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8007e62:	f7fc f99d 	bl	80041a0 <HAL_GetTick>
 8007e66:	4602      	mov	r2, r0
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	1ad3      	subs	r3, r2, r3
 8007e6c:	2b02      	cmp	r3, #2
 8007e6e:	d901      	bls.n	8007e74 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8007e70:	2303      	movs	r3, #3
 8007e72:	e111      	b.n	8008098 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007e74:	4b8a      	ldr	r3, [pc, #552]	@ (80080a0 <HAL_RCC_ClockConfig+0x278>)
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	f003 0307 	and.w	r3, r3, #7
 8007e7c:	683a      	ldr	r2, [r7, #0]
 8007e7e:	429a      	cmp	r2, r3
 8007e80:	d1ef      	bne.n	8007e62 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	f003 0302 	and.w	r3, r3, #2
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d016      	beq.n	8007ebc <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	689b      	ldr	r3, [r3, #8]
 8007e92:	4618      	mov	r0, r3
 8007e94:	f7ff fb13 	bl	80074be <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8007e98:	f7fc f982 	bl	80041a0 <HAL_GetTick>
 8007e9c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8007e9e:	e008      	b.n	8007eb2 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8007ea0:	f7fc f97e 	bl	80041a0 <HAL_GetTick>
 8007ea4:	4602      	mov	r2, r0
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	1ad3      	subs	r3, r2, r3
 8007eaa:	2b02      	cmp	r3, #2
 8007eac:	d901      	bls.n	8007eb2 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8007eae:	2303      	movs	r3, #3
 8007eb0:	e0f2      	b.n	8008098 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8007eb2:	f7ff fbe8 	bl	8007686 <LL_RCC_IsActiveFlag_HPRE>
 8007eb6:	4603      	mov	r3, r0
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d0f1      	beq.n	8007ea0 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	f003 0320 	and.w	r3, r3, #32
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d016      	beq.n	8007ef6 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	695b      	ldr	r3, [r3, #20]
 8007ecc:	4618      	mov	r0, r3
 8007ece:	f7ff fb0a 	bl	80074e6 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8007ed2:	f7fc f965 	bl	80041a0 <HAL_GetTick>
 8007ed6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8007ed8:	e008      	b.n	8007eec <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8007eda:	f7fc f961 	bl	80041a0 <HAL_GetTick>
 8007ede:	4602      	mov	r2, r0
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	1ad3      	subs	r3, r2, r3
 8007ee4:	2b02      	cmp	r3, #2
 8007ee6:	d901      	bls.n	8007eec <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8007ee8:	2303      	movs	r3, #3
 8007eea:	e0d5      	b.n	8008098 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8007eec:	f7ff fbdd 	bl	80076aa <LL_RCC_IsActiveFlag_C2HPRE>
 8007ef0:	4603      	mov	r3, r0
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d0f1      	beq.n	8007eda <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d016      	beq.n	8007f30 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	699b      	ldr	r3, [r3, #24]
 8007f06:	4618      	mov	r0, r3
 8007f08:	f7ff fb03 	bl	8007512 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8007f0c:	f7fc f948 	bl	80041a0 <HAL_GetTick>
 8007f10:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8007f12:	e008      	b.n	8007f26 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8007f14:	f7fc f944 	bl	80041a0 <HAL_GetTick>
 8007f18:	4602      	mov	r2, r0
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	1ad3      	subs	r3, r2, r3
 8007f1e:	2b02      	cmp	r3, #2
 8007f20:	d901      	bls.n	8007f26 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8007f22:	2303      	movs	r3, #3
 8007f24:	e0b8      	b.n	8008098 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8007f26:	f7ff fbd3 	bl	80076d0 <LL_RCC_IsActiveFlag_SHDHPRE>
 8007f2a:	4603      	mov	r3, r0
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d0f1      	beq.n	8007f14 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	f003 0304 	and.w	r3, r3, #4
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d016      	beq.n	8007f6a <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	68db      	ldr	r3, [r3, #12]
 8007f40:	4618      	mov	r0, r3
 8007f42:	f7ff fafd 	bl	8007540 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8007f46:	f7fc f92b 	bl	80041a0 <HAL_GetTick>
 8007f4a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8007f4c:	e008      	b.n	8007f60 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8007f4e:	f7fc f927 	bl	80041a0 <HAL_GetTick>
 8007f52:	4602      	mov	r2, r0
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	1ad3      	subs	r3, r2, r3
 8007f58:	2b02      	cmp	r3, #2
 8007f5a:	d901      	bls.n	8007f60 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8007f5c:	2303      	movs	r3, #3
 8007f5e:	e09b      	b.n	8008098 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8007f60:	f7ff fbc9 	bl	80076f6 <LL_RCC_IsActiveFlag_PPRE1>
 8007f64:	4603      	mov	r3, r0
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d0f1      	beq.n	8007f4e <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	f003 0308 	and.w	r3, r3, #8
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d017      	beq.n	8007fa6 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	691b      	ldr	r3, [r3, #16]
 8007f7a:	00db      	lsls	r3, r3, #3
 8007f7c:	4618      	mov	r0, r3
 8007f7e:	f7ff faf3 	bl	8007568 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8007f82:	f7fc f90d 	bl	80041a0 <HAL_GetTick>
 8007f86:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8007f88:	e008      	b.n	8007f9c <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8007f8a:	f7fc f909 	bl	80041a0 <HAL_GetTick>
 8007f8e:	4602      	mov	r2, r0
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	1ad3      	subs	r3, r2, r3
 8007f94:	2b02      	cmp	r3, #2
 8007f96:	d901      	bls.n	8007f9c <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8007f98:	2303      	movs	r3, #3
 8007f9a:	e07d      	b.n	8008098 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8007f9c:	f7ff fbbd 	bl	800771a <LL_RCC_IsActiveFlag_PPRE2>
 8007fa0:	4603      	mov	r3, r0
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d0f1      	beq.n	8007f8a <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	f003 0301 	and.w	r3, r3, #1
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d043      	beq.n	800803a <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	685b      	ldr	r3, [r3, #4]
 8007fb6:	2b02      	cmp	r3, #2
 8007fb8:	d106      	bne.n	8007fc8 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8007fba:	f7ff f893 	bl	80070e4 <LL_RCC_HSE_IsReady>
 8007fbe:	4603      	mov	r3, r0
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d11e      	bne.n	8008002 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8007fc4:	2301      	movs	r3, #1
 8007fc6:	e067      	b.n	8008098 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	685b      	ldr	r3, [r3, #4]
 8007fcc:	2b03      	cmp	r3, #3
 8007fce:	d106      	bne.n	8007fde <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8007fd0:	f7ff fb16 	bl	8007600 <LL_RCC_PLL_IsReady>
 8007fd4:	4603      	mov	r3, r0
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d113      	bne.n	8008002 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8007fda:	2301      	movs	r3, #1
 8007fdc:	e05c      	b.n	8008098 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	685b      	ldr	r3, [r3, #4]
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d106      	bne.n	8007ff4 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8007fe6:	f7ff f9fb 	bl	80073e0 <LL_RCC_MSI_IsReady>
 8007fea:	4603      	mov	r3, r0
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d108      	bne.n	8008002 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8007ff0:	2301      	movs	r3, #1
 8007ff2:	e051      	b.n	8008098 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8007ff4:	f7ff f8a6 	bl	8007144 <LL_RCC_HSI_IsReady>
 8007ff8:	4603      	mov	r3, r0
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d101      	bne.n	8008002 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8007ffe:	2301      	movs	r3, #1
 8008000:	e04a      	b.n	8008098 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	685b      	ldr	r3, [r3, #4]
 8008006:	4618      	mov	r0, r3
 8008008:	f7ff fa39 	bl	800747e <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800800c:	f7fc f8c8 	bl	80041a0 <HAL_GetTick>
 8008010:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008012:	e00a      	b.n	800802a <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008014:	f7fc f8c4 	bl	80041a0 <HAL_GetTick>
 8008018:	4602      	mov	r2, r0
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	1ad3      	subs	r3, r2, r3
 800801e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008022:	4293      	cmp	r3, r2
 8008024:	d901      	bls.n	800802a <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8008026:	2303      	movs	r3, #3
 8008028:	e036      	b.n	8008098 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800802a:	f7ff fa3c 	bl	80074a6 <LL_RCC_GetSysClkSource>
 800802e:	4602      	mov	r2, r0
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	685b      	ldr	r3, [r3, #4]
 8008034:	009b      	lsls	r3, r3, #2
 8008036:	429a      	cmp	r2, r3
 8008038:	d1ec      	bne.n	8008014 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800803a:	4b19      	ldr	r3, [pc, #100]	@ (80080a0 <HAL_RCC_ClockConfig+0x278>)
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	f003 0307 	and.w	r3, r3, #7
 8008042:	683a      	ldr	r2, [r7, #0]
 8008044:	429a      	cmp	r2, r3
 8008046:	d21b      	bcs.n	8008080 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008048:	4b15      	ldr	r3, [pc, #84]	@ (80080a0 <HAL_RCC_ClockConfig+0x278>)
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	f023 0207 	bic.w	r2, r3, #7
 8008050:	4913      	ldr	r1, [pc, #76]	@ (80080a0 <HAL_RCC_ClockConfig+0x278>)
 8008052:	683b      	ldr	r3, [r7, #0]
 8008054:	4313      	orrs	r3, r2
 8008056:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008058:	f7fc f8a2 	bl	80041a0 <HAL_GetTick>
 800805c:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800805e:	e008      	b.n	8008072 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8008060:	f7fc f89e 	bl	80041a0 <HAL_GetTick>
 8008064:	4602      	mov	r2, r0
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	1ad3      	subs	r3, r2, r3
 800806a:	2b02      	cmp	r3, #2
 800806c:	d901      	bls.n	8008072 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 800806e:	2303      	movs	r3, #3
 8008070:	e012      	b.n	8008098 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008072:	4b0b      	ldr	r3, [pc, #44]	@ (80080a0 <HAL_RCC_ClockConfig+0x278>)
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	f003 0307 	and.w	r3, r3, #7
 800807a:	683a      	ldr	r2, [r7, #0]
 800807c:	429a      	cmp	r2, r3
 800807e:	d1ef      	bne.n	8008060 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8008080:	f000 f87e 	bl	8008180 <HAL_RCC_GetHCLKFreq>
 8008084:	4603      	mov	r3, r0
 8008086:	4a07      	ldr	r2, [pc, #28]	@ (80080a4 <HAL_RCC_ClockConfig+0x27c>)
 8008088:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 800808a:	f7fc f895 	bl	80041b8 <HAL_GetTickPrio>
 800808e:	4603      	mov	r3, r0
 8008090:	4618      	mov	r0, r3
 8008092:	f7fc f837 	bl	8004104 <HAL_InitTick>
 8008096:	4603      	mov	r3, r0
}
 8008098:	4618      	mov	r0, r3
 800809a:	3710      	adds	r7, #16
 800809c:	46bd      	mov	sp, r7
 800809e:	bd80      	pop	{r7, pc}
 80080a0:	58004000 	.word	0x58004000
 80080a4:	20000040 	.word	0x20000040

080080a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80080a8:	b590      	push	{r4, r7, lr}
 80080aa:	b085      	sub	sp, #20
 80080ac:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80080ae:	f7ff f9fa 	bl	80074a6 <LL_RCC_GetSysClkSource>
 80080b2:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d10a      	bne.n	80080d0 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80080ba:	f7ff f9b6 	bl	800742a <LL_RCC_MSI_GetRange>
 80080be:	4603      	mov	r3, r0
 80080c0:	091b      	lsrs	r3, r3, #4
 80080c2:	f003 030f 	and.w	r3, r3, #15
 80080c6:	4a2b      	ldr	r2, [pc, #172]	@ (8008174 <HAL_RCC_GetSysClockFreq+0xcc>)
 80080c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80080cc:	60fb      	str	r3, [r7, #12]
 80080ce:	e04b      	b.n	8008168 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	2b04      	cmp	r3, #4
 80080d4:	d102      	bne.n	80080dc <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80080d6:	4b28      	ldr	r3, [pc, #160]	@ (8008178 <HAL_RCC_GetSysClockFreq+0xd0>)
 80080d8:	60fb      	str	r3, [r7, #12]
 80080da:	e045      	b.n	8008168 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	2b08      	cmp	r3, #8
 80080e0:	d10a      	bne.n	80080f8 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80080e2:	f7fe ffcf 	bl	8007084 <LL_RCC_HSE_IsEnabledDiv2>
 80080e6:	4603      	mov	r3, r0
 80080e8:	2b01      	cmp	r3, #1
 80080ea:	d102      	bne.n	80080f2 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 80080ec:	4b22      	ldr	r3, [pc, #136]	@ (8008178 <HAL_RCC_GetSysClockFreq+0xd0>)
 80080ee:	60fb      	str	r3, [r7, #12]
 80080f0:	e03a      	b.n	8008168 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 80080f2:	4b22      	ldr	r3, [pc, #136]	@ (800817c <HAL_RCC_GetSysClockFreq+0xd4>)
 80080f4:	60fb      	str	r3, [r7, #12]
 80080f6:	e037      	b.n	8008168 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 80080f8:	f7ff fab9 	bl	800766e <LL_RCC_PLL_GetMainSource>
 80080fc:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 80080fe:	683b      	ldr	r3, [r7, #0]
 8008100:	2b02      	cmp	r3, #2
 8008102:	d003      	beq.n	800810c <HAL_RCC_GetSysClockFreq+0x64>
 8008104:	683b      	ldr	r3, [r7, #0]
 8008106:	2b03      	cmp	r3, #3
 8008108:	d003      	beq.n	8008112 <HAL_RCC_GetSysClockFreq+0x6a>
 800810a:	e00d      	b.n	8008128 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 800810c:	4b1a      	ldr	r3, [pc, #104]	@ (8008178 <HAL_RCC_GetSysClockFreq+0xd0>)
 800810e:	60bb      	str	r3, [r7, #8]
        break;
 8008110:	e015      	b.n	800813e <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8008112:	f7fe ffb7 	bl	8007084 <LL_RCC_HSE_IsEnabledDiv2>
 8008116:	4603      	mov	r3, r0
 8008118:	2b01      	cmp	r3, #1
 800811a:	d102      	bne.n	8008122 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 800811c:	4b16      	ldr	r3, [pc, #88]	@ (8008178 <HAL_RCC_GetSysClockFreq+0xd0>)
 800811e:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8008120:	e00d      	b.n	800813e <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8008122:	4b16      	ldr	r3, [pc, #88]	@ (800817c <HAL_RCC_GetSysClockFreq+0xd4>)
 8008124:	60bb      	str	r3, [r7, #8]
        break;
 8008126:	e00a      	b.n	800813e <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8008128:	f7ff f97f 	bl	800742a <LL_RCC_MSI_GetRange>
 800812c:	4603      	mov	r3, r0
 800812e:	091b      	lsrs	r3, r3, #4
 8008130:	f003 030f 	and.w	r3, r3, #15
 8008134:	4a0f      	ldr	r2, [pc, #60]	@ (8008174 <HAL_RCC_GetSysClockFreq+0xcc>)
 8008136:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800813a:	60bb      	str	r3, [r7, #8]
        break;
 800813c:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 800813e:	f7ff fa71 	bl	8007624 <LL_RCC_PLL_GetN>
 8008142:	4602      	mov	r2, r0
 8008144:	68bb      	ldr	r3, [r7, #8]
 8008146:	fb03 f402 	mul.w	r4, r3, r2
 800814a:	f7ff fa84 	bl	8007656 <LL_RCC_PLL_GetDivider>
 800814e:	4603      	mov	r3, r0
 8008150:	091b      	lsrs	r3, r3, #4
 8008152:	3301      	adds	r3, #1
 8008154:	fbb4 f4f3 	udiv	r4, r4, r3
 8008158:	f7ff fa71 	bl	800763e <LL_RCC_PLL_GetR>
 800815c:	4603      	mov	r3, r0
 800815e:	0f5b      	lsrs	r3, r3, #29
 8008160:	3301      	adds	r3, #1
 8008162:	fbb4 f3f3 	udiv	r3, r4, r3
 8008166:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8008168:	68fb      	ldr	r3, [r7, #12]
}
 800816a:	4618      	mov	r0, r3
 800816c:	3714      	adds	r7, #20
 800816e:	46bd      	mov	sp, r7
 8008170:	bd90      	pop	{r4, r7, pc}
 8008172:	bf00      	nop
 8008174:	0800d17c 	.word	0x0800d17c
 8008178:	00f42400 	.word	0x00f42400
 800817c:	01e84800 	.word	0x01e84800

08008180 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008180:	b598      	push	{r3, r4, r7, lr}
 8008182:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8008184:	f7ff ff90 	bl	80080a8 <HAL_RCC_GetSysClockFreq>
 8008188:	4604      	mov	r4, r0
 800818a:	f7ff fa01 	bl	8007590 <LL_RCC_GetAHBPrescaler>
 800818e:	4603      	mov	r3, r0
 8008190:	091b      	lsrs	r3, r3, #4
 8008192:	f003 030f 	and.w	r3, r3, #15
 8008196:	4a03      	ldr	r2, [pc, #12]	@ (80081a4 <HAL_RCC_GetHCLKFreq+0x24>)
 8008198:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800819c:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80081a0:	4618      	mov	r0, r3
 80081a2:	bd98      	pop	{r3, r4, r7, pc}
 80081a4:	0800d13c 	.word	0x0800d13c

080081a8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 80081a8:	b590      	push	{r4, r7, lr}
 80081aa:	b085      	sub	sp, #20
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	2bb0      	cmp	r3, #176	@ 0xb0
 80081b4:	d903      	bls.n	80081be <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 80081b6:	4b15      	ldr	r3, [pc, #84]	@ (800820c <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80081b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081ba:	60fb      	str	r3, [r7, #12]
 80081bc:	e007      	b.n	80081ce <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	091b      	lsrs	r3, r3, #4
 80081c2:	f003 030f 	and.w	r3, r3, #15
 80081c6:	4a11      	ldr	r2, [pc, #68]	@ (800820c <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80081c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80081cc:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 80081ce:	f7ff f9eb 	bl	80075a8 <LL_RCC_GetAHB4Prescaler>
 80081d2:	4603      	mov	r3, r0
 80081d4:	091b      	lsrs	r3, r3, #4
 80081d6:	f003 030f 	and.w	r3, r3, #15
 80081da:	4a0d      	ldr	r2, [pc, #52]	@ (8008210 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 80081dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80081e0:	68fa      	ldr	r2, [r7, #12]
 80081e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80081e6:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80081e8:	68bb      	ldr	r3, [r7, #8]
 80081ea:	4a0a      	ldr	r2, [pc, #40]	@ (8008214 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 80081ec:	fba2 2303 	umull	r2, r3, r2, r3
 80081f0:	0c9c      	lsrs	r4, r3, #18
 80081f2:	f7fe ff39 	bl	8007068 <HAL_PWREx_GetVoltageRange>
 80081f6:	4603      	mov	r3, r0
 80081f8:	4619      	mov	r1, r3
 80081fa:	4620      	mov	r0, r4
 80081fc:	f000 f80c 	bl	8008218 <RCC_SetFlashLatency>
 8008200:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8008202:	4618      	mov	r0, r3
 8008204:	3714      	adds	r7, #20
 8008206:	46bd      	mov	sp, r7
 8008208:	bd90      	pop	{r4, r7, pc}
 800820a:	bf00      	nop
 800820c:	0800d17c 	.word	0x0800d17c
 8008210:	0800d13c 	.word	0x0800d13c
 8008214:	431bde83 	.word	0x431bde83

08008218 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8008218:	b590      	push	{r4, r7, lr}
 800821a:	b093      	sub	sp, #76	@ 0x4c
 800821c:	af00      	add	r7, sp, #0
 800821e:	6078      	str	r0, [r7, #4]
 8008220:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8008222:	4b37      	ldr	r3, [pc, #220]	@ (8008300 <RCC_SetFlashLatency+0xe8>)
 8008224:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 8008228:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800822a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 800822e:	4a35      	ldr	r2, [pc, #212]	@ (8008304 <RCC_SetFlashLatency+0xec>)
 8008230:	f107 031c 	add.w	r3, r7, #28
 8008234:	ca07      	ldmia	r2, {r0, r1, r2}
 8008236:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 800823a:	4b33      	ldr	r3, [pc, #204]	@ (8008308 <RCC_SetFlashLatency+0xf0>)
 800823c:	f107 040c 	add.w	r4, r7, #12
 8008240:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008242:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8008246:	2300      	movs	r3, #0
 8008248:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800824a:	683b      	ldr	r3, [r7, #0]
 800824c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008250:	d11a      	bne.n	8008288 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8008252:	2300      	movs	r3, #0
 8008254:	643b      	str	r3, [r7, #64]	@ 0x40
 8008256:	e013      	b.n	8008280 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8008258:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800825a:	009b      	lsls	r3, r3, #2
 800825c:	3348      	adds	r3, #72	@ 0x48
 800825e:	443b      	add	r3, r7
 8008260:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8008264:	687a      	ldr	r2, [r7, #4]
 8008266:	429a      	cmp	r2, r3
 8008268:	d807      	bhi.n	800827a <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800826a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800826c:	009b      	lsls	r3, r3, #2
 800826e:	3348      	adds	r3, #72	@ 0x48
 8008270:	443b      	add	r3, r7
 8008272:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8008276:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 8008278:	e020      	b.n	80082bc <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800827a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800827c:	3301      	adds	r3, #1
 800827e:	643b      	str	r3, [r7, #64]	@ 0x40
 8008280:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008282:	2b03      	cmp	r3, #3
 8008284:	d9e8      	bls.n	8008258 <RCC_SetFlashLatency+0x40>
 8008286:	e019      	b.n	80082bc <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8008288:	2300      	movs	r3, #0
 800828a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800828c:	e013      	b.n	80082b6 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800828e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008290:	009b      	lsls	r3, r3, #2
 8008292:	3348      	adds	r3, #72	@ 0x48
 8008294:	443b      	add	r3, r7
 8008296:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800829a:	687a      	ldr	r2, [r7, #4]
 800829c:	429a      	cmp	r2, r3
 800829e:	d807      	bhi.n	80082b0 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80082a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80082a2:	009b      	lsls	r3, r3, #2
 80082a4:	3348      	adds	r3, #72	@ 0x48
 80082a6:	443b      	add	r3, r7
 80082a8:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80082ac:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 80082ae:	e005      	b.n	80082bc <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80082b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80082b2:	3301      	adds	r3, #1
 80082b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80082b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80082b8:	2b02      	cmp	r3, #2
 80082ba:	d9e8      	bls.n	800828e <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 80082bc:	4b13      	ldr	r3, [pc, #76]	@ (800830c <RCC_SetFlashLatency+0xf4>)
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	f023 0207 	bic.w	r2, r3, #7
 80082c4:	4911      	ldr	r1, [pc, #68]	@ (800830c <RCC_SetFlashLatency+0xf4>)
 80082c6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80082c8:	4313      	orrs	r3, r2
 80082ca:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80082cc:	f7fb ff68 	bl	80041a0 <HAL_GetTick>
 80082d0:	63b8      	str	r0, [r7, #56]	@ 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80082d2:	e008      	b.n	80082e6 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80082d4:	f7fb ff64 	bl	80041a0 <HAL_GetTick>
 80082d8:	4602      	mov	r2, r0
 80082da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082dc:	1ad3      	subs	r3, r2, r3
 80082de:	2b02      	cmp	r3, #2
 80082e0:	d901      	bls.n	80082e6 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 80082e2:	2303      	movs	r3, #3
 80082e4:	e007      	b.n	80082f6 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80082e6:	4b09      	ldr	r3, [pc, #36]	@ (800830c <RCC_SetFlashLatency+0xf4>)
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	f003 0307 	and.w	r3, r3, #7
 80082ee:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80082f0:	429a      	cmp	r2, r3
 80082f2:	d1ef      	bne.n	80082d4 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 80082f4:	2300      	movs	r3, #0
}
 80082f6:	4618      	mov	r0, r3
 80082f8:	374c      	adds	r7, #76	@ 0x4c
 80082fa:	46bd      	mov	sp, r7
 80082fc:	bd90      	pop	{r4, r7, pc}
 80082fe:	bf00      	nop
 8008300:	0800cf98 	.word	0x0800cf98
 8008304:	0800cfa8 	.word	0x0800cfa8
 8008308:	0800cfb4 	.word	0x0800cfb4
 800830c:	58004000 	.word	0x58004000

08008310 <LL_RCC_LSE_IsEnabled>:
{
 8008310:	b480      	push	{r7}
 8008312:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8008314:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008318:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800831c:	f003 0301 	and.w	r3, r3, #1
 8008320:	2b01      	cmp	r3, #1
 8008322:	d101      	bne.n	8008328 <LL_RCC_LSE_IsEnabled+0x18>
 8008324:	2301      	movs	r3, #1
 8008326:	e000      	b.n	800832a <LL_RCC_LSE_IsEnabled+0x1a>
 8008328:	2300      	movs	r3, #0
}
 800832a:	4618      	mov	r0, r3
 800832c:	46bd      	mov	sp, r7
 800832e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008332:	4770      	bx	lr

08008334 <LL_RCC_LSE_IsReady>:
{
 8008334:	b480      	push	{r7}
 8008336:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8008338:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800833c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008340:	f003 0302 	and.w	r3, r3, #2
 8008344:	2b02      	cmp	r3, #2
 8008346:	d101      	bne.n	800834c <LL_RCC_LSE_IsReady+0x18>
 8008348:	2301      	movs	r3, #1
 800834a:	e000      	b.n	800834e <LL_RCC_LSE_IsReady+0x1a>
 800834c:	2300      	movs	r3, #0
}
 800834e:	4618      	mov	r0, r3
 8008350:	46bd      	mov	sp, r7
 8008352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008356:	4770      	bx	lr

08008358 <LL_RCC_SetRFWKPClockSource>:
{
 8008358:	b480      	push	{r7}
 800835a:	b083      	sub	sp, #12
 800835c:	af00      	add	r7, sp, #0
 800835e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8008360:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008364:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008368:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800836c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	4313      	orrs	r3, r2
 8008374:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8008378:	bf00      	nop
 800837a:	370c      	adds	r7, #12
 800837c:	46bd      	mov	sp, r7
 800837e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008382:	4770      	bx	lr

08008384 <LL_RCC_SetSMPSClockSource>:
{
 8008384:	b480      	push	{r7}
 8008386:	b083      	sub	sp, #12
 8008388:	af00      	add	r7, sp, #0
 800838a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 800838c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008390:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008392:	f023 0203 	bic.w	r2, r3, #3
 8008396:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	4313      	orrs	r3, r2
 800839e:	624b      	str	r3, [r1, #36]	@ 0x24
}
 80083a0:	bf00      	nop
 80083a2:	370c      	adds	r7, #12
 80083a4:	46bd      	mov	sp, r7
 80083a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083aa:	4770      	bx	lr

080083ac <LL_RCC_SetSMPSPrescaler>:
{
 80083ac:	b480      	push	{r7}
 80083ae:	b083      	sub	sp, #12
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 80083b4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80083b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083ba:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80083be:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	4313      	orrs	r3, r2
 80083c6:	624b      	str	r3, [r1, #36]	@ 0x24
}
 80083c8:	bf00      	nop
 80083ca:	370c      	adds	r7, #12
 80083cc:	46bd      	mov	sp, r7
 80083ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d2:	4770      	bx	lr

080083d4 <LL_RCC_SetUSARTClockSource>:
{
 80083d4:	b480      	push	{r7}
 80083d6:	b083      	sub	sp, #12
 80083d8:	af00      	add	r7, sp, #0
 80083da:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 80083dc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80083e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80083e4:	f023 0203 	bic.w	r2, r3, #3
 80083e8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	4313      	orrs	r3, r2
 80083f0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80083f4:	bf00      	nop
 80083f6:	370c      	adds	r7, #12
 80083f8:	46bd      	mov	sp, r7
 80083fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083fe:	4770      	bx	lr

08008400 <LL_RCC_SetLPUARTClockSource>:
{
 8008400:	b480      	push	{r7}
 8008402:	b083      	sub	sp, #12
 8008404:	af00      	add	r7, sp, #0
 8008406:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8008408:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800840c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008410:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8008414:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	4313      	orrs	r3, r2
 800841c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8008420:	bf00      	nop
 8008422:	370c      	adds	r7, #12
 8008424:	46bd      	mov	sp, r7
 8008426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800842a:	4770      	bx	lr

0800842c <LL_RCC_SetI2CClockSource>:
{
 800842c:	b480      	push	{r7}
 800842e:	b083      	sub	sp, #12
 8008430:	af00      	add	r7, sp, #0
 8008432:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8008434:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008438:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	091b      	lsrs	r3, r3, #4
 8008440:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8008444:	43db      	mvns	r3, r3
 8008446:	401a      	ands	r2, r3
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	011b      	lsls	r3, r3, #4
 800844c:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8008450:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008454:	4313      	orrs	r3, r2
 8008456:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800845a:	bf00      	nop
 800845c:	370c      	adds	r7, #12
 800845e:	46bd      	mov	sp, r7
 8008460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008464:	4770      	bx	lr

08008466 <LL_RCC_SetLPTIMClockSource>:
{
 8008466:	b480      	push	{r7}
 8008468:	b083      	sub	sp, #12
 800846a:	af00      	add	r7, sp, #0
 800846c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800846e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008472:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	0c1b      	lsrs	r3, r3, #16
 800847a:	041b      	lsls	r3, r3, #16
 800847c:	43db      	mvns	r3, r3
 800847e:	401a      	ands	r2, r3
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	041b      	lsls	r3, r3, #16
 8008484:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008488:	4313      	orrs	r3, r2
 800848a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800848e:	bf00      	nop
 8008490:	370c      	adds	r7, #12
 8008492:	46bd      	mov	sp, r7
 8008494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008498:	4770      	bx	lr

0800849a <LL_RCC_SetSAIClockSource>:
{
 800849a:	b480      	push	{r7}
 800849c:	b083      	sub	sp, #12
 800849e:	af00      	add	r7, sp, #0
 80084a0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 80084a2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80084a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80084aa:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80084ae:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	4313      	orrs	r3, r2
 80084b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80084ba:	bf00      	nop
 80084bc:	370c      	adds	r7, #12
 80084be:	46bd      	mov	sp, r7
 80084c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c4:	4770      	bx	lr

080084c6 <LL_RCC_SetRNGClockSource>:
{
 80084c6:	b480      	push	{r7}
 80084c8:	b083      	sub	sp, #12
 80084ca:	af00      	add	r7, sp, #0
 80084cc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80084ce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80084d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80084d6:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80084da:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	4313      	orrs	r3, r2
 80084e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80084e6:	bf00      	nop
 80084e8:	370c      	adds	r7, #12
 80084ea:	46bd      	mov	sp, r7
 80084ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f0:	4770      	bx	lr

080084f2 <LL_RCC_SetCLK48ClockSource>:
{
 80084f2:	b480      	push	{r7}
 80084f4:	b083      	sub	sp, #12
 80084f6:	af00      	add	r7, sp, #0
 80084f8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 80084fa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80084fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008502:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8008506:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	4313      	orrs	r3, r2
 800850e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8008512:	bf00      	nop
 8008514:	370c      	adds	r7, #12
 8008516:	46bd      	mov	sp, r7
 8008518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800851c:	4770      	bx	lr

0800851e <LL_RCC_SetUSBClockSource>:
{
 800851e:	b580      	push	{r7, lr}
 8008520:	b082      	sub	sp, #8
 8008522:	af00      	add	r7, sp, #0
 8008524:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8008526:	6878      	ldr	r0, [r7, #4]
 8008528:	f7ff ffe3 	bl	80084f2 <LL_RCC_SetCLK48ClockSource>
}
 800852c:	bf00      	nop
 800852e:	3708      	adds	r7, #8
 8008530:	46bd      	mov	sp, r7
 8008532:	bd80      	pop	{r7, pc}

08008534 <LL_RCC_SetADCClockSource>:
{
 8008534:	b480      	push	{r7}
 8008536:	b083      	sub	sp, #12
 8008538:	af00      	add	r7, sp, #0
 800853a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800853c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008540:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008544:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8008548:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	4313      	orrs	r3, r2
 8008550:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8008554:	bf00      	nop
 8008556:	370c      	adds	r7, #12
 8008558:	46bd      	mov	sp, r7
 800855a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800855e:	4770      	bx	lr

08008560 <LL_RCC_SetRTCClockSource>:
{
 8008560:	b480      	push	{r7}
 8008562:	b083      	sub	sp, #12
 8008564:	af00      	add	r7, sp, #0
 8008566:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8008568:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800856c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008570:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008574:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	4313      	orrs	r3, r2
 800857c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8008580:	bf00      	nop
 8008582:	370c      	adds	r7, #12
 8008584:	46bd      	mov	sp, r7
 8008586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800858a:	4770      	bx	lr

0800858c <LL_RCC_GetRTCClockSource>:
{
 800858c:	b480      	push	{r7}
 800858e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8008590:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008594:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008598:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 800859c:	4618      	mov	r0, r3
 800859e:	46bd      	mov	sp, r7
 80085a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a4:	4770      	bx	lr

080085a6 <LL_RCC_ForceBackupDomainReset>:
{
 80085a6:	b480      	push	{r7}
 80085a8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80085aa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80085ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80085b2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80085b6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80085ba:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80085be:	bf00      	nop
 80085c0:	46bd      	mov	sp, r7
 80085c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c6:	4770      	bx	lr

080085c8 <LL_RCC_ReleaseBackupDomainReset>:
{
 80085c8:	b480      	push	{r7}
 80085ca:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80085cc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80085d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80085d4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80085d8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80085dc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80085e0:	bf00      	nop
 80085e2:	46bd      	mov	sp, r7
 80085e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e8:	4770      	bx	lr

080085ea <LL_RCC_PLLSAI1_Enable>:
{
 80085ea:	b480      	push	{r7}
 80085ec:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80085ee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80085f8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80085fc:	6013      	str	r3, [r2, #0]
}
 80085fe:	bf00      	nop
 8008600:	46bd      	mov	sp, r7
 8008602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008606:	4770      	bx	lr

08008608 <LL_RCC_PLLSAI1_Disable>:
{
 8008608:	b480      	push	{r7}
 800860a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800860c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008616:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800861a:	6013      	str	r3, [r2, #0]
}
 800861c:	bf00      	nop
 800861e:	46bd      	mov	sp, r7
 8008620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008624:	4770      	bx	lr

08008626 <LL_RCC_PLLSAI1_IsReady>:
{
 8008626:	b480      	push	{r7}
 8008628:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 800862a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008634:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008638:	d101      	bne.n	800863e <LL_RCC_PLLSAI1_IsReady+0x18>
 800863a:	2301      	movs	r3, #1
 800863c:	e000      	b.n	8008640 <LL_RCC_PLLSAI1_IsReady+0x1a>
 800863e:	2300      	movs	r3, #0
}
 8008640:	4618      	mov	r0, r3
 8008642:	46bd      	mov	sp, r7
 8008644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008648:	4770      	bx	lr

0800864a <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800864a:	b580      	push	{r7, lr}
 800864c:	b088      	sub	sp, #32
 800864e:	af00      	add	r7, sp, #0
 8008650:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8008652:	2300      	movs	r3, #0
 8008654:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8008656:	2300      	movs	r3, #0
 8008658:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008662:	2b00      	cmp	r3, #0
 8008664:	d034      	beq.n	80086d0 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800866a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800866e:	d021      	beq.n	80086b4 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8008670:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8008674:	d81b      	bhi.n	80086ae <HAL_RCCEx_PeriphCLKConfig+0x64>
 8008676:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800867a:	d01d      	beq.n	80086b8 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 800867c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008680:	d815      	bhi.n	80086ae <HAL_RCCEx_PeriphCLKConfig+0x64>
 8008682:	2b00      	cmp	r3, #0
 8008684:	d00b      	beq.n	800869e <HAL_RCCEx_PeriphCLKConfig+0x54>
 8008686:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800868a:	d110      	bne.n	80086ae <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 800868c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008690:	68db      	ldr	r3, [r3, #12]
 8008692:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008696:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800869a:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 800869c:	e00d      	b.n	80086ba <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	3304      	adds	r3, #4
 80086a2:	4618      	mov	r0, r3
 80086a4:	f000 f947 	bl	8008936 <RCCEx_PLLSAI1_ConfigNP>
 80086a8:	4603      	mov	r3, r0
 80086aa:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 80086ac:	e005      	b.n	80086ba <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 80086ae:	2301      	movs	r3, #1
 80086b0:	77fb      	strb	r3, [r7, #31]
        break;
 80086b2:	e002      	b.n	80086ba <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 80086b4:	bf00      	nop
 80086b6:	e000      	b.n	80086ba <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 80086b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80086ba:	7ffb      	ldrb	r3, [r7, #31]
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d105      	bne.n	80086cc <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80086c4:	4618      	mov	r0, r3
 80086c6:	f7ff fee8 	bl	800849a <LL_RCC_SetSAIClockSource>
 80086ca:	e001      	b.n	80086d0 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80086cc:	7ffb      	ldrb	r3, [r7, #31]
 80086ce:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d046      	beq.n	800876a <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 80086dc:	f7ff ff56 	bl	800858c <LL_RCC_GetRTCClockSource>
 80086e0:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80086e6:	69ba      	ldr	r2, [r7, #24]
 80086e8:	429a      	cmp	r2, r3
 80086ea:	d03c      	beq.n	8008766 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80086ec:	f7fe fcac 	bl	8007048 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 80086f0:	69bb      	ldr	r3, [r7, #24]
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d105      	bne.n	8008702 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80086fa:	4618      	mov	r0, r3
 80086fc:	f7ff ff30 	bl	8008560 <LL_RCC_SetRTCClockSource>
 8008700:	e02e      	b.n	8008760 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8008702:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008706:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800870a:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 800870c:	f7ff ff4b 	bl	80085a6 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8008710:	f7ff ff5a 	bl	80085c8 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8008714:	697b      	ldr	r3, [r7, #20]
 8008716:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800871e:	4313      	orrs	r3, r2
 8008720:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8008722:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008726:	697b      	ldr	r3, [r7, #20]
 8008728:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 800872c:	f7ff fdf0 	bl	8008310 <LL_RCC_LSE_IsEnabled>
 8008730:	4603      	mov	r3, r0
 8008732:	2b01      	cmp	r3, #1
 8008734:	d114      	bne.n	8008760 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008736:	f7fb fd33 	bl	80041a0 <HAL_GetTick>
 800873a:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 800873c:	e00b      	b.n	8008756 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800873e:	f7fb fd2f 	bl	80041a0 <HAL_GetTick>
 8008742:	4602      	mov	r2, r0
 8008744:	693b      	ldr	r3, [r7, #16]
 8008746:	1ad3      	subs	r3, r2, r3
 8008748:	f241 3288 	movw	r2, #5000	@ 0x1388
 800874c:	4293      	cmp	r3, r2
 800874e:	d902      	bls.n	8008756 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8008750:	2303      	movs	r3, #3
 8008752:	77fb      	strb	r3, [r7, #31]
              break;
 8008754:	e004      	b.n	8008760 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8008756:	f7ff fded 	bl	8008334 <LL_RCC_LSE_IsReady>
 800875a:	4603      	mov	r3, r0
 800875c:	2b01      	cmp	r3, #1
 800875e:	d1ee      	bne.n	800873e <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8008760:	7ffb      	ldrb	r3, [r7, #31]
 8008762:	77bb      	strb	r3, [r7, #30]
 8008764:	e001      	b.n	800876a <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008766:	7ffb      	ldrb	r3, [r7, #31]
 8008768:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	f003 0301 	and.w	r3, r3, #1
 8008772:	2b00      	cmp	r3, #0
 8008774:	d004      	beq.n	8008780 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	699b      	ldr	r3, [r3, #24]
 800877a:	4618      	mov	r0, r3
 800877c:	f7ff fe2a 	bl	80083d4 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	f003 0302 	and.w	r3, r3, #2
 8008788:	2b00      	cmp	r3, #0
 800878a:	d004      	beq.n	8008796 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	69db      	ldr	r3, [r3, #28]
 8008790:	4618      	mov	r0, r3
 8008792:	f7ff fe35 	bl	8008400 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	f003 0310 	and.w	r3, r3, #16
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d004      	beq.n	80087ac <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087a6:	4618      	mov	r0, r3
 80087a8:	f7ff fe5d 	bl	8008466 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	f003 0320 	and.w	r3, r3, #32
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d004      	beq.n	80087c2 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087bc:	4618      	mov	r0, r3
 80087be:	f7ff fe52 	bl	8008466 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	f003 0304 	and.w	r3, r3, #4
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d004      	beq.n	80087d8 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	6a1b      	ldr	r3, [r3, #32]
 80087d2:	4618      	mov	r0, r3
 80087d4:	f7ff fe2a 	bl	800842c <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	f003 0308 	and.w	r3, r3, #8
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d004      	beq.n	80087ee <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087e8:	4618      	mov	r0, r3
 80087ea:	f7ff fe1f 	bl	800842c <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d022      	beq.n	8008840 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80087fe:	4618      	mov	r0, r3
 8008800:	f7ff fe8d 	bl	800851e <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008808:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800880c:	d107      	bne.n	800881e <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 800880e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008812:	68db      	ldr	r3, [r3, #12]
 8008814:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008818:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800881c:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008822:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008826:	d10b      	bne.n	8008840 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	3304      	adds	r3, #4
 800882c:	4618      	mov	r0, r3
 800882e:	f000 f8dd 	bl	80089ec <RCCEx_PLLSAI1_ConfigNQ>
 8008832:	4603      	mov	r3, r0
 8008834:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8008836:	7ffb      	ldrb	r3, [r7, #31]
 8008838:	2b00      	cmp	r3, #0
 800883a:	d001      	beq.n	8008840 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 800883c:	7ffb      	ldrb	r3, [r7, #31]
 800883e:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008848:	2b00      	cmp	r3, #0
 800884a:	d02b      	beq.n	80088a4 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008850:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008854:	d008      	beq.n	8008868 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800885a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800885e:	d003      	beq.n	8008868 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008864:	2b00      	cmp	r3, #0
 8008866:	d105      	bne.n	8008874 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800886c:	4618      	mov	r0, r3
 800886e:	f7ff fe2a 	bl	80084c6 <LL_RCC_SetRNGClockSource>
 8008872:	e00a      	b.n	800888a <HAL_RCCEx_PeriphCLKConfig+0x240>
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008878:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800887c:	60fb      	str	r3, [r7, #12]
 800887e:	2000      	movs	r0, #0
 8008880:	f7ff fe21 	bl	80084c6 <LL_RCC_SetRNGClockSource>
 8008884:	68f8      	ldr	r0, [r7, #12]
 8008886:	f7ff fe34 	bl	80084f2 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800888e:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 8008892:	d107      	bne.n	80088a4 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8008894:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008898:	68db      	ldr	r3, [r3, #12]
 800889a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800889e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80088a2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d022      	beq.n	80088f6 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80088b4:	4618      	mov	r0, r3
 80088b6:	f7ff fe3d 	bl	8008534 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80088be:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80088c2:	d107      	bne.n	80088d4 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80088c4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80088c8:	68db      	ldr	r3, [r3, #12]
 80088ca:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80088ce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80088d2:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80088d8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80088dc:	d10b      	bne.n	80088f6 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	3304      	adds	r3, #4
 80088e2:	4618      	mov	r0, r3
 80088e4:	f000 f8dd 	bl	8008aa2 <RCCEx_PLLSAI1_ConfigNR>
 80088e8:	4603      	mov	r3, r0
 80088ea:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80088ec:	7ffb      	ldrb	r3, [r7, #31]
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d001      	beq.n	80088f6 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 80088f2:	7ffb      	ldrb	r3, [r7, #31]
 80088f4:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d004      	beq.n	800890c <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008906:	4618      	mov	r0, r3
 8008908:	f7ff fd26 	bl	8008358 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008914:	2b00      	cmp	r3, #0
 8008916:	d009      	beq.n	800892c <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800891c:	4618      	mov	r0, r3
 800891e:	f7ff fd45 	bl	80083ac <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008926:	4618      	mov	r0, r3
 8008928:	f7ff fd2c 	bl	8008384 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 800892c:	7fbb      	ldrb	r3, [r7, #30]
}
 800892e:	4618      	mov	r0, r3
 8008930:	3720      	adds	r7, #32
 8008932:	46bd      	mov	sp, r7
 8008934:	bd80      	pop	{r7, pc}

08008936 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8008936:	b580      	push	{r7, lr}
 8008938:	b084      	sub	sp, #16
 800893a:	af00      	add	r7, sp, #0
 800893c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800893e:	2300      	movs	r3, #0
 8008940:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8008942:	f7ff fe61 	bl	8008608 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008946:	f7fb fc2b 	bl	80041a0 <HAL_GetTick>
 800894a:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800894c:	e009      	b.n	8008962 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800894e:	f7fb fc27 	bl	80041a0 <HAL_GetTick>
 8008952:	4602      	mov	r2, r0
 8008954:	68bb      	ldr	r3, [r7, #8]
 8008956:	1ad3      	subs	r3, r2, r3
 8008958:	2b02      	cmp	r3, #2
 800895a:	d902      	bls.n	8008962 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 800895c:	2303      	movs	r3, #3
 800895e:	73fb      	strb	r3, [r7, #15]
      break;
 8008960:	e004      	b.n	800896c <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8008962:	f7ff fe60 	bl	8008626 <LL_RCC_PLLSAI1_IsReady>
 8008966:	4603      	mov	r3, r0
 8008968:	2b00      	cmp	r3, #0
 800896a:	d1f0      	bne.n	800894e <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 800896c:	7bfb      	ldrb	r3, [r7, #15]
 800896e:	2b00      	cmp	r3, #0
 8008970:	d137      	bne.n	80089e2 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8008972:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008976:	691b      	ldr	r3, [r3, #16]
 8008978:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	021b      	lsls	r3, r3, #8
 8008982:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008986:	4313      	orrs	r3, r2
 8008988:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 800898a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800898e:	691b      	ldr	r3, [r3, #16]
 8008990:	f423 1278 	bic.w	r2, r3, #4063232	@ 0x3e0000
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	685b      	ldr	r3, [r3, #4]
 8008998:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800899c:	4313      	orrs	r3, r2
 800899e:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80089a0:	f7ff fe23 	bl	80085ea <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80089a4:	f7fb fbfc 	bl	80041a0 <HAL_GetTick>
 80089a8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80089aa:	e009      	b.n	80089c0 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80089ac:	f7fb fbf8 	bl	80041a0 <HAL_GetTick>
 80089b0:	4602      	mov	r2, r0
 80089b2:	68bb      	ldr	r3, [r7, #8]
 80089b4:	1ad3      	subs	r3, r2, r3
 80089b6:	2b02      	cmp	r3, #2
 80089b8:	d902      	bls.n	80089c0 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 80089ba:	2303      	movs	r3, #3
 80089bc:	73fb      	strb	r3, [r7, #15]
        break;
 80089be:	e004      	b.n	80089ca <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80089c0:	f7ff fe31 	bl	8008626 <LL_RCC_PLLSAI1_IsReady>
 80089c4:	4603      	mov	r3, r0
 80089c6:	2b01      	cmp	r3, #1
 80089c8:	d1f0      	bne.n	80089ac <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 80089ca:	7bfb      	ldrb	r3, [r7, #15]
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d108      	bne.n	80089e2 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80089d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80089d4:	691a      	ldr	r2, [r3, #16]
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	691b      	ldr	r3, [r3, #16]
 80089da:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80089de:	4313      	orrs	r3, r2
 80089e0:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80089e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80089e4:	4618      	mov	r0, r3
 80089e6:	3710      	adds	r7, #16
 80089e8:	46bd      	mov	sp, r7
 80089ea:	bd80      	pop	{r7, pc}

080089ec <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80089ec:	b580      	push	{r7, lr}
 80089ee:	b084      	sub	sp, #16
 80089f0:	af00      	add	r7, sp, #0
 80089f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80089f4:	2300      	movs	r3, #0
 80089f6:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80089f8:	f7ff fe06 	bl	8008608 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80089fc:	f7fb fbd0 	bl	80041a0 <HAL_GetTick>
 8008a00:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8008a02:	e009      	b.n	8008a18 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008a04:	f7fb fbcc 	bl	80041a0 <HAL_GetTick>
 8008a08:	4602      	mov	r2, r0
 8008a0a:	68bb      	ldr	r3, [r7, #8]
 8008a0c:	1ad3      	subs	r3, r2, r3
 8008a0e:	2b02      	cmp	r3, #2
 8008a10:	d902      	bls.n	8008a18 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8008a12:	2303      	movs	r3, #3
 8008a14:	73fb      	strb	r3, [r7, #15]
      break;
 8008a16:	e004      	b.n	8008a22 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8008a18:	f7ff fe05 	bl	8008626 <LL_RCC_PLLSAI1_IsReady>
 8008a1c:	4603      	mov	r3, r0
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d1f0      	bne.n	8008a04 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8008a22:	7bfb      	ldrb	r3, [r7, #15]
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d137      	bne.n	8008a98 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8008a28:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008a2c:	691b      	ldr	r3, [r3, #16]
 8008a2e:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	021b      	lsls	r3, r3, #8
 8008a38:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008a3c:	4313      	orrs	r3, r2
 8008a3e:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8008a40:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008a44:	691b      	ldr	r3, [r3, #16]
 8008a46:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	689b      	ldr	r3, [r3, #8]
 8008a4e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008a52:	4313      	orrs	r3, r2
 8008a54:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8008a56:	f7ff fdc8 	bl	80085ea <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008a5a:	f7fb fba1 	bl	80041a0 <HAL_GetTick>
 8008a5e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8008a60:	e009      	b.n	8008a76 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008a62:	f7fb fb9d 	bl	80041a0 <HAL_GetTick>
 8008a66:	4602      	mov	r2, r0
 8008a68:	68bb      	ldr	r3, [r7, #8]
 8008a6a:	1ad3      	subs	r3, r2, r3
 8008a6c:	2b02      	cmp	r3, #2
 8008a6e:	d902      	bls.n	8008a76 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8008a70:	2303      	movs	r3, #3
 8008a72:	73fb      	strb	r3, [r7, #15]
        break;
 8008a74:	e004      	b.n	8008a80 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8008a76:	f7ff fdd6 	bl	8008626 <LL_RCC_PLLSAI1_IsReady>
 8008a7a:	4603      	mov	r3, r0
 8008a7c:	2b01      	cmp	r3, #1
 8008a7e:	d1f0      	bne.n	8008a62 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8008a80:	7bfb      	ldrb	r3, [r7, #15]
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d108      	bne.n	8008a98 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8008a86:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008a8a:	691a      	ldr	r2, [r3, #16]
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	691b      	ldr	r3, [r3, #16]
 8008a90:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008a94:	4313      	orrs	r3, r2
 8008a96:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8008a98:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a9a:	4618      	mov	r0, r3
 8008a9c:	3710      	adds	r7, #16
 8008a9e:	46bd      	mov	sp, r7
 8008aa0:	bd80      	pop	{r7, pc}

08008aa2 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8008aa2:	b580      	push	{r7, lr}
 8008aa4:	b084      	sub	sp, #16
 8008aa6:	af00      	add	r7, sp, #0
 8008aa8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008aaa:	2300      	movs	r3, #0
 8008aac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8008aae:	f7ff fdab 	bl	8008608 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008ab2:	f7fb fb75 	bl	80041a0 <HAL_GetTick>
 8008ab6:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8008ab8:	e009      	b.n	8008ace <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008aba:	f7fb fb71 	bl	80041a0 <HAL_GetTick>
 8008abe:	4602      	mov	r2, r0
 8008ac0:	68bb      	ldr	r3, [r7, #8]
 8008ac2:	1ad3      	subs	r3, r2, r3
 8008ac4:	2b02      	cmp	r3, #2
 8008ac6:	d902      	bls.n	8008ace <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8008ac8:	2303      	movs	r3, #3
 8008aca:	73fb      	strb	r3, [r7, #15]
      break;
 8008acc:	e004      	b.n	8008ad8 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8008ace:	f7ff fdaa 	bl	8008626 <LL_RCC_PLLSAI1_IsReady>
 8008ad2:	4603      	mov	r3, r0
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d1f0      	bne.n	8008aba <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8008ad8:	7bfb      	ldrb	r3, [r7, #15]
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d137      	bne.n	8008b4e <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8008ade:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008ae2:	691b      	ldr	r3, [r3, #16]
 8008ae4:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	021b      	lsls	r3, r3, #8
 8008aee:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008af2:	4313      	orrs	r3, r2
 8008af4:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8008af6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008afa:	691b      	ldr	r3, [r3, #16]
 8008afc:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	68db      	ldr	r3, [r3, #12]
 8008b04:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008b08:	4313      	orrs	r3, r2
 8008b0a:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8008b0c:	f7ff fd6d 	bl	80085ea <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008b10:	f7fb fb46 	bl	80041a0 <HAL_GetTick>
 8008b14:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8008b16:	e009      	b.n	8008b2c <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008b18:	f7fb fb42 	bl	80041a0 <HAL_GetTick>
 8008b1c:	4602      	mov	r2, r0
 8008b1e:	68bb      	ldr	r3, [r7, #8]
 8008b20:	1ad3      	subs	r3, r2, r3
 8008b22:	2b02      	cmp	r3, #2
 8008b24:	d902      	bls.n	8008b2c <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8008b26:	2303      	movs	r3, #3
 8008b28:	73fb      	strb	r3, [r7, #15]
        break;
 8008b2a:	e004      	b.n	8008b36 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8008b2c:	f7ff fd7b 	bl	8008626 <LL_RCC_PLLSAI1_IsReady>
 8008b30:	4603      	mov	r3, r0
 8008b32:	2b01      	cmp	r3, #1
 8008b34:	d1f0      	bne.n	8008b18 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8008b36:	7bfb      	ldrb	r3, [r7, #15]
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d108      	bne.n	8008b4e <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8008b3c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008b40:	691a      	ldr	r2, [r3, #16]
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	691b      	ldr	r3, [r3, #16]
 8008b46:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008b4a:	4313      	orrs	r3, r2
 8008b4c:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8008b4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b50:	4618      	mov	r0, r3
 8008b52:	3710      	adds	r7, #16
 8008b54:	46bd      	mov	sp, r7
 8008b56:	bd80      	pop	{r7, pc}

08008b58 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8008b58:	b580      	push	{r7, lr}
 8008b5a:	b084      	sub	sp, #16
 8008b5c:	af00      	add	r7, sp, #0
 8008b5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d101      	bne.n	8008b6a <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8008b66:	2301      	movs	r3, #1
 8008b68:	e09f      	b.n	8008caa <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8008b70:	b2db      	uxtb	r3, r3
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d106      	bne.n	8008b84 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	2200      	movs	r2, #0
 8008b7a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8008b7e:	6878      	ldr	r0, [r7, #4]
 8008b80:	f7fb f95c 	bl	8003e3c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	2202      	movs	r2, #2
 8008b88:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8008b8c:	4b49      	ldr	r3, [pc, #292]	@ (8008cb4 <HAL_RTC_Init+0x15c>)
 8008b8e:	68db      	ldr	r3, [r3, #12]
 8008b90:	f003 0310 	and.w	r3, r3, #16
 8008b94:	2b10      	cmp	r3, #16
 8008b96:	d07e      	beq.n	8008c96 <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	22ca      	movs	r2, #202	@ 0xca
 8008b9e:	625a      	str	r2, [r3, #36]	@ 0x24
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	2253      	movs	r2, #83	@ 0x53
 8008ba6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8008ba8:	6878      	ldr	r0, [r7, #4]
 8008baa:	f000 f8ab 	bl	8008d04 <RTC_EnterInitMode>
 8008bae:	4603      	mov	r3, r0
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d00a      	beq.n	8008bca <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	22ff      	movs	r2, #255	@ 0xff
 8008bba:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	2204      	movs	r2, #4
 8008bc0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

      status = HAL_ERROR;
 8008bc4:	2301      	movs	r3, #1
 8008bc6:	73fb      	strb	r3, [r7, #15]
 8008bc8:	e067      	b.n	8008c9a <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	689b      	ldr	r3, [r3, #8]
 8008bd0:	687a      	ldr	r2, [r7, #4]
 8008bd2:	6812      	ldr	r2, [r2, #0]
 8008bd4:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8008bd8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008bdc:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	6899      	ldr	r1, [r3, #8]
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	685a      	ldr	r2, [r3, #4]
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	691b      	ldr	r3, [r3, #16]
 8008bec:	431a      	orrs	r2, r3
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	699b      	ldr	r3, [r3, #24]
 8008bf2:	431a      	orrs	r2, r3
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	430a      	orrs	r2, r1
 8008bfa:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	687a      	ldr	r2, [r7, #4]
 8008c02:	68d2      	ldr	r2, [r2, #12]
 8008c04:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	6919      	ldr	r1, [r3, #16]
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	689b      	ldr	r3, [r3, #8]
 8008c10:	041a      	lsls	r2, r3, #16
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	430a      	orrs	r2, r1
 8008c18:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	68da      	ldr	r2, [r3, #12]
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008c28:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	f022 0203 	bic.w	r2, r2, #3
 8008c38:	64da      	str	r2, [r3, #76]	@ 0x4c
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	69da      	ldr	r2, [r3, #28]
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	695b      	ldr	r3, [r3, #20]
 8008c48:	431a      	orrs	r2, r3
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	430a      	orrs	r2, r1
 8008c50:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	689b      	ldr	r3, [r3, #8]
 8008c58:	f003 0320 	and.w	r3, r3, #32
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d113      	bne.n	8008c88 <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008c60:	6878      	ldr	r0, [r7, #4]
 8008c62:	f000 f829 	bl	8008cb8 <HAL_RTC_WaitForSynchro>
 8008c66:	4603      	mov	r3, r0
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d00d      	beq.n	8008c88 <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	22ff      	movs	r2, #255	@ 0xff
 8008c72:	625a      	str	r2, [r3, #36]	@ 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	2204      	movs	r2, #4
 8008c78:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	2200      	movs	r2, #0
 8008c80:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 8008c84:	2301      	movs	r3, #1
 8008c86:	e010      	b.n	8008caa <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	22ff      	movs	r2, #255	@ 0xff
 8008c8e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Set RTC state */
      status = HAL_OK;
 8008c90:	2300      	movs	r3, #0
 8008c92:	73fb      	strb	r3, [r7, #15]
 8008c94:	e001      	b.n	8008c9a <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 8008c96:	2300      	movs	r3, #0
 8008c98:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8008c9a:	7bfb      	ldrb	r3, [r7, #15]
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d103      	bne.n	8008ca8 <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	2201      	movs	r2, #1
 8008ca4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  return status;
 8008ca8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008caa:	4618      	mov	r0, r3
 8008cac:	3710      	adds	r7, #16
 8008cae:	46bd      	mov	sp, r7
 8008cb0:	bd80      	pop	{r7, pc}
 8008cb2:	bf00      	nop
 8008cb4:	40002800 	.word	0x40002800

08008cb8 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8008cb8:	b580      	push	{r7, lr}
 8008cba:	b084      	sub	sp, #16
 8008cbc:	af00      	add	r7, sp, #0
 8008cbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	68da      	ldr	r2, [r3, #12]
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8008cce:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8008cd0:	f7fb fa66 	bl	80041a0 <HAL_GetTick>
 8008cd4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8008cd6:	e009      	b.n	8008cec <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008cd8:	f7fb fa62 	bl	80041a0 <HAL_GetTick>
 8008cdc:	4602      	mov	r2, r0
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	1ad3      	subs	r3, r2, r3
 8008ce2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008ce6:	d901      	bls.n	8008cec <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8008ce8:	2303      	movs	r3, #3
 8008cea:	e007      	b.n	8008cfc <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	68db      	ldr	r3, [r3, #12]
 8008cf2:	f003 0320 	and.w	r3, r3, #32
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d0ee      	beq.n	8008cd8 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8008cfa:	2300      	movs	r3, #0
}
 8008cfc:	4618      	mov	r0, r3
 8008cfe:	3710      	adds	r7, #16
 8008d00:	46bd      	mov	sp, r7
 8008d02:	bd80      	pop	{r7, pc}

08008d04 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8008d04:	b580      	push	{r7, lr}
 8008d06:	b084      	sub	sp, #16
 8008d08:	af00      	add	r7, sp, #0
 8008d0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	68db      	ldr	r3, [r3, #12]
 8008d12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d119      	bne.n	8008d4e <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	f04f 32ff 	mov.w	r2, #4294967295
 8008d22:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8008d24:	f7fb fa3c 	bl	80041a0 <HAL_GetTick>
 8008d28:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8008d2a:	e009      	b.n	8008d40 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8008d2c:	f7fb fa38 	bl	80041a0 <HAL_GetTick>
 8008d30:	4602      	mov	r2, r0
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	1ad3      	subs	r3, r2, r3
 8008d36:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008d3a:	d901      	bls.n	8008d40 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8008d3c:	2303      	movs	r3, #3
 8008d3e:	e007      	b.n	8008d50 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	68db      	ldr	r3, [r3, #12]
 8008d46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d0ee      	beq.n	8008d2c <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8008d4e:	2300      	movs	r3, #0
}
 8008d50:	4618      	mov	r0, r3
 8008d52:	3710      	adds	r7, #16
 8008d54:	46bd      	mov	sp, r7
 8008d56:	bd80      	pop	{r7, pc}

08008d58 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8008d58:	b580      	push	{r7, lr}
 8008d5a:	b086      	sub	sp, #24
 8008d5c:	af00      	add	r7, sp, #0
 8008d5e:	60f8      	str	r0, [r7, #12]
 8008d60:	60b9      	str	r1, [r7, #8]
 8008d62:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008d6a:	2b01      	cmp	r3, #1
 8008d6c:	d101      	bne.n	8008d72 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 8008d6e:	2302      	movs	r3, #2
 8008d70:	e0a8      	b.n	8008ec4 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	2201      	movs	r2, #1
 8008d76:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	2202      	movs	r2, #2
 8008d7e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	22ca      	movs	r2, #202	@ 0xca
 8008d88:	625a      	str	r2, [r3, #36]	@ 0x24
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	2253      	movs	r2, #83	@ 0x53
 8008d90:	625a      	str	r2, [r3, #36]	@ 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	689b      	ldr	r3, [r3, #8]
 8008d98:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d020      	beq.n	8008de2 <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
  {
    tickstart = HAL_GetTick();
 8008da0:	f7fb f9fe 	bl	80041a0 <HAL_GetTick>
 8008da4:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8008da6:	e015      	b.n	8008dd4 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008da8:	f7fb f9fa 	bl	80041a0 <HAL_GetTick>
 8008dac:	4602      	mov	r2, r0
 8008dae:	697b      	ldr	r3, [r7, #20]
 8008db0:	1ad3      	subs	r3, r2, r3
 8008db2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008db6:	d90d      	bls.n	8008dd4 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	22ff      	movs	r2, #255	@ 0xff
 8008dbe:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	2203      	movs	r2, #3
 8008dc4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	2200      	movs	r2, #0
 8008dcc:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8008dd0:	2303      	movs	r3, #3
 8008dd2:	e077      	b.n	8008ec4 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	68db      	ldr	r3, [r3, #12]
 8008dda:	f003 0304 	and.w	r3, r3, #4
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d1e2      	bne.n	8008da8 <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	689a      	ldr	r2, [r3, #8]
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008df0:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	68db      	ldr	r3, [r3, #12]
 8008df8:	b2da      	uxtb	r2, r3
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8008e02:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8008e04:	f7fb f9cc 	bl	80041a0 <HAL_GetTick>
 8008e08:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8008e0a:	e015      	b.n	8008e38 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008e0c:	f7fb f9c8 	bl	80041a0 <HAL_GetTick>
 8008e10:	4602      	mov	r2, r0
 8008e12:	697b      	ldr	r3, [r7, #20]
 8008e14:	1ad3      	subs	r3, r2, r3
 8008e16:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008e1a:	d90d      	bls.n	8008e38 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	22ff      	movs	r2, #255	@ 0xff
 8008e22:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	2203      	movs	r2, #3
 8008e28:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	2200      	movs	r2, #0
 8008e30:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 8008e34:	2303      	movs	r3, #3
 8008e36:	e045      	b.n	8008ec4 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	68db      	ldr	r3, [r3, #12]
 8008e3e:	f003 0304 	and.w	r3, r3, #4
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d0e2      	beq.n	8008e0c <HAL_RTCEx_SetWakeUpTimer_IT+0xb4>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	68ba      	ldr	r2, [r7, #8]
 8008e4c:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	689a      	ldr	r2, [r3, #8]
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	f022 0207 	bic.w	r2, r2, #7
 8008e5c:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	6899      	ldr	r1, [r3, #8]
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	687a      	ldr	r2, [r7, #4]
 8008e6a:	430a      	orrs	r2, r1
 8008e6c:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8008e6e:	4b17      	ldr	r3, [pc, #92]	@ (8008ecc <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8008e70:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008e74:	4a15      	ldr	r2, [pc, #84]	@ (8008ecc <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8008e76:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008e7a:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8008e7e:	4b13      	ldr	r3, [pc, #76]	@ (8008ecc <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	4a12      	ldr	r2, [pc, #72]	@ (8008ecc <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8008e84:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008e88:	6013      	str	r3, [r2, #0]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	689a      	ldr	r2, [r3, #8]
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008e98:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	689a      	ldr	r2, [r3, #8]
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8008ea8:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	22ff      	movs	r2, #255	@ 0xff
 8008eb0:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	2201      	movs	r2, #1
 8008eb6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	2200      	movs	r2, #0
 8008ebe:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8008ec2:	2300      	movs	r3, #0
}
 8008ec4:	4618      	mov	r0, r3
 8008ec6:	3718      	adds	r7, #24
 8008ec8:	46bd      	mov	sp, r7
 8008eca:	bd80      	pop	{r7, pc}
 8008ecc:	58000800 	.word	0x58000800

08008ed0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008ed0:	b580      	push	{r7, lr}
 8008ed2:	b082      	sub	sp, #8
 8008ed4:	af00      	add	r7, sp, #0
 8008ed6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d101      	bne.n	8008ee2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008ede:	2301      	movs	r3, #1
 8008ee0:	e049      	b.n	8008f76 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008ee8:	b2db      	uxtb	r3, r3
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d106      	bne.n	8008efc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	2200      	movs	r2, #0
 8008ef2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008ef6:	6878      	ldr	r0, [r7, #4]
 8008ef8:	f7fa ffd4 	bl	8003ea4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	2202      	movs	r2, #2
 8008f00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	681a      	ldr	r2, [r3, #0]
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	3304      	adds	r3, #4
 8008f0c:	4619      	mov	r1, r3
 8008f0e:	4610      	mov	r0, r2
 8008f10:	f000 f946 	bl	80091a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	2201      	movs	r2, #1
 8008f18:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	2201      	movs	r2, #1
 8008f20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	2201      	movs	r2, #1
 8008f28:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	2201      	movs	r2, #1
 8008f30:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	2201      	movs	r2, #1
 8008f38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	2201      	movs	r2, #1
 8008f40:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	2201      	movs	r2, #1
 8008f48:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	2201      	movs	r2, #1
 8008f50:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	2201      	movs	r2, #1
 8008f58:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	2201      	movs	r2, #1
 8008f60:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	2201      	movs	r2, #1
 8008f68:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	2201      	movs	r2, #1
 8008f70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008f74:	2300      	movs	r3, #0
}
 8008f76:	4618      	mov	r0, r3
 8008f78:	3708      	adds	r7, #8
 8008f7a:	46bd      	mov	sp, r7
 8008f7c:	bd80      	pop	{r7, pc}
	...

08008f80 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8008f80:	b480      	push	{r7}
 8008f82:	b085      	sub	sp, #20
 8008f84:	af00      	add	r7, sp, #0
 8008f86:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008f8e:	b2db      	uxtb	r3, r3
 8008f90:	2b01      	cmp	r3, #1
 8008f92:	d001      	beq.n	8008f98 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8008f94:	2301      	movs	r3, #1
 8008f96:	e02e      	b.n	8008ff6 <HAL_TIM_Base_Start+0x76>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	2202      	movs	r2, #2
 8008f9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	4a17      	ldr	r2, [pc, #92]	@ (8009004 <HAL_TIM_Base_Start+0x84>)
 8008fa6:	4293      	cmp	r3, r2
 8008fa8:	d004      	beq.n	8008fb4 <HAL_TIM_Base_Start+0x34>
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008fb2:	d115      	bne.n	8008fe0 <HAL_TIM_Base_Start+0x60>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	689a      	ldr	r2, [r3, #8]
 8008fba:	4b13      	ldr	r3, [pc, #76]	@ (8009008 <HAL_TIM_Base_Start+0x88>)
 8008fbc:	4013      	ands	r3, r2
 8008fbe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	2b06      	cmp	r3, #6
 8008fc4:	d015      	beq.n	8008ff2 <HAL_TIM_Base_Start+0x72>
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008fcc:	d011      	beq.n	8008ff2 <HAL_TIM_Base_Start+0x72>
    {
      __HAL_TIM_ENABLE(htim);
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	681a      	ldr	r2, [r3, #0]
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	f042 0201 	orr.w	r2, r2, #1
 8008fdc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008fde:	e008      	b.n	8008ff2 <HAL_TIM_Base_Start+0x72>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	681a      	ldr	r2, [r3, #0]
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	f042 0201 	orr.w	r2, r2, #1
 8008fee:	601a      	str	r2, [r3, #0]
 8008ff0:	e000      	b.n	8008ff4 <HAL_TIM_Base_Start+0x74>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008ff2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008ff4:	2300      	movs	r3, #0
}
 8008ff6:	4618      	mov	r0, r3
 8008ff8:	3714      	adds	r7, #20
 8008ffa:	46bd      	mov	sp, r7
 8008ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009000:	4770      	bx	lr
 8009002:	bf00      	nop
 8009004:	40012c00 	.word	0x40012c00
 8009008:	00010007 	.word	0x00010007

0800900c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800900c:	b580      	push	{r7, lr}
 800900e:	b084      	sub	sp, #16
 8009010:	af00      	add	r7, sp, #0
 8009012:	6078      	str	r0, [r7, #4]
 8009014:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009016:	2300      	movs	r3, #0
 8009018:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009020:	2b01      	cmp	r3, #1
 8009022:	d101      	bne.n	8009028 <HAL_TIM_ConfigClockSource+0x1c>
 8009024:	2302      	movs	r3, #2
 8009026:	e0b6      	b.n	8009196 <HAL_TIM_ConfigClockSource+0x18a>
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	2201      	movs	r2, #1
 800902c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	2202      	movs	r2, #2
 8009034:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	689b      	ldr	r3, [r3, #8]
 800903e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009040:	68bb      	ldr	r3, [r7, #8]
 8009042:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8009046:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800904a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800904c:	68bb      	ldr	r3, [r7, #8]
 800904e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009052:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	68ba      	ldr	r2, [r7, #8]
 800905a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800905c:	683b      	ldr	r3, [r7, #0]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009064:	d03e      	beq.n	80090e4 <HAL_TIM_ConfigClockSource+0xd8>
 8009066:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800906a:	f200 8087 	bhi.w	800917c <HAL_TIM_ConfigClockSource+0x170>
 800906e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009072:	f000 8086 	beq.w	8009182 <HAL_TIM_ConfigClockSource+0x176>
 8009076:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800907a:	d87f      	bhi.n	800917c <HAL_TIM_ConfigClockSource+0x170>
 800907c:	2b70      	cmp	r3, #112	@ 0x70
 800907e:	d01a      	beq.n	80090b6 <HAL_TIM_ConfigClockSource+0xaa>
 8009080:	2b70      	cmp	r3, #112	@ 0x70
 8009082:	d87b      	bhi.n	800917c <HAL_TIM_ConfigClockSource+0x170>
 8009084:	2b60      	cmp	r3, #96	@ 0x60
 8009086:	d050      	beq.n	800912a <HAL_TIM_ConfigClockSource+0x11e>
 8009088:	2b60      	cmp	r3, #96	@ 0x60
 800908a:	d877      	bhi.n	800917c <HAL_TIM_ConfigClockSource+0x170>
 800908c:	2b50      	cmp	r3, #80	@ 0x50
 800908e:	d03c      	beq.n	800910a <HAL_TIM_ConfigClockSource+0xfe>
 8009090:	2b50      	cmp	r3, #80	@ 0x50
 8009092:	d873      	bhi.n	800917c <HAL_TIM_ConfigClockSource+0x170>
 8009094:	2b40      	cmp	r3, #64	@ 0x40
 8009096:	d058      	beq.n	800914a <HAL_TIM_ConfigClockSource+0x13e>
 8009098:	2b40      	cmp	r3, #64	@ 0x40
 800909a:	d86f      	bhi.n	800917c <HAL_TIM_ConfigClockSource+0x170>
 800909c:	2b30      	cmp	r3, #48	@ 0x30
 800909e:	d064      	beq.n	800916a <HAL_TIM_ConfigClockSource+0x15e>
 80090a0:	2b30      	cmp	r3, #48	@ 0x30
 80090a2:	d86b      	bhi.n	800917c <HAL_TIM_ConfigClockSource+0x170>
 80090a4:	2b20      	cmp	r3, #32
 80090a6:	d060      	beq.n	800916a <HAL_TIM_ConfigClockSource+0x15e>
 80090a8:	2b20      	cmp	r3, #32
 80090aa:	d867      	bhi.n	800917c <HAL_TIM_ConfigClockSource+0x170>
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d05c      	beq.n	800916a <HAL_TIM_ConfigClockSource+0x15e>
 80090b0:	2b10      	cmp	r3, #16
 80090b2:	d05a      	beq.n	800916a <HAL_TIM_ConfigClockSource+0x15e>
 80090b4:	e062      	b.n	800917c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80090ba:	683b      	ldr	r3, [r7, #0]
 80090bc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80090be:	683b      	ldr	r3, [r7, #0]
 80090c0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80090c2:	683b      	ldr	r3, [r7, #0]
 80090c4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80090c6:	f000 f957 	bl	8009378 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	689b      	ldr	r3, [r3, #8]
 80090d0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80090d2:	68bb      	ldr	r3, [r7, #8]
 80090d4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80090d8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	68ba      	ldr	r2, [r7, #8]
 80090e0:	609a      	str	r2, [r3, #8]
      break;
 80090e2:	e04f      	b.n	8009184 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80090e8:	683b      	ldr	r3, [r7, #0]
 80090ea:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80090ec:	683b      	ldr	r3, [r7, #0]
 80090ee:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80090f0:	683b      	ldr	r3, [r7, #0]
 80090f2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80090f4:	f000 f940 	bl	8009378 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	689a      	ldr	r2, [r3, #8]
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009106:	609a      	str	r2, [r3, #8]
      break;
 8009108:	e03c      	b.n	8009184 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800910e:	683b      	ldr	r3, [r7, #0]
 8009110:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009112:	683b      	ldr	r3, [r7, #0]
 8009114:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009116:	461a      	mov	r2, r3
 8009118:	f000 f8b2 	bl	8009280 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	2150      	movs	r1, #80	@ 0x50
 8009122:	4618      	mov	r0, r3
 8009124:	f000 f90b 	bl	800933e <TIM_ITRx_SetConfig>
      break;
 8009128:	e02c      	b.n	8009184 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800912e:	683b      	ldr	r3, [r7, #0]
 8009130:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009132:	683b      	ldr	r3, [r7, #0]
 8009134:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009136:	461a      	mov	r2, r3
 8009138:	f000 f8d1 	bl	80092de <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	2160      	movs	r1, #96	@ 0x60
 8009142:	4618      	mov	r0, r3
 8009144:	f000 f8fb 	bl	800933e <TIM_ITRx_SetConfig>
      break;
 8009148:	e01c      	b.n	8009184 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800914e:	683b      	ldr	r3, [r7, #0]
 8009150:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009152:	683b      	ldr	r3, [r7, #0]
 8009154:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009156:	461a      	mov	r2, r3
 8009158:	f000 f892 	bl	8009280 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	2140      	movs	r1, #64	@ 0x40
 8009162:	4618      	mov	r0, r3
 8009164:	f000 f8eb 	bl	800933e <TIM_ITRx_SetConfig>
      break;
 8009168:	e00c      	b.n	8009184 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	681a      	ldr	r2, [r3, #0]
 800916e:	683b      	ldr	r3, [r7, #0]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	4619      	mov	r1, r3
 8009174:	4610      	mov	r0, r2
 8009176:	f000 f8e2 	bl	800933e <TIM_ITRx_SetConfig>
      break;
 800917a:	e003      	b.n	8009184 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800917c:	2301      	movs	r3, #1
 800917e:	73fb      	strb	r3, [r7, #15]
      break;
 8009180:	e000      	b.n	8009184 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8009182:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	2201      	movs	r2, #1
 8009188:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	2200      	movs	r2, #0
 8009190:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009194:	7bfb      	ldrb	r3, [r7, #15]
}
 8009196:	4618      	mov	r0, r3
 8009198:	3710      	adds	r7, #16
 800919a:	46bd      	mov	sp, r7
 800919c:	bd80      	pop	{r7, pc}
	...

080091a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80091a0:	b480      	push	{r7}
 80091a2:	b085      	sub	sp, #20
 80091a4:	af00      	add	r7, sp, #0
 80091a6:	6078      	str	r0, [r7, #4]
 80091a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	4a30      	ldr	r2, [pc, #192]	@ (8009274 <TIM_Base_SetConfig+0xd4>)
 80091b4:	4293      	cmp	r3, r2
 80091b6:	d003      	beq.n	80091c0 <TIM_Base_SetConfig+0x20>
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80091be:	d108      	bne.n	80091d2 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80091c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80091c8:	683b      	ldr	r3, [r7, #0]
 80091ca:	685b      	ldr	r3, [r3, #4]
 80091cc:	68fa      	ldr	r2, [r7, #12]
 80091ce:	4313      	orrs	r3, r2
 80091d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	4a27      	ldr	r2, [pc, #156]	@ (8009274 <TIM_Base_SetConfig+0xd4>)
 80091d6:	4293      	cmp	r3, r2
 80091d8:	d00b      	beq.n	80091f2 <TIM_Base_SetConfig+0x52>
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80091e0:	d007      	beq.n	80091f2 <TIM_Base_SetConfig+0x52>
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	4a24      	ldr	r2, [pc, #144]	@ (8009278 <TIM_Base_SetConfig+0xd8>)
 80091e6:	4293      	cmp	r3, r2
 80091e8:	d003      	beq.n	80091f2 <TIM_Base_SetConfig+0x52>
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	4a23      	ldr	r2, [pc, #140]	@ (800927c <TIM_Base_SetConfig+0xdc>)
 80091ee:	4293      	cmp	r3, r2
 80091f0:	d108      	bne.n	8009204 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80091f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80091fa:	683b      	ldr	r3, [r7, #0]
 80091fc:	68db      	ldr	r3, [r3, #12]
 80091fe:	68fa      	ldr	r2, [r7, #12]
 8009200:	4313      	orrs	r3, r2
 8009202:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800920a:	683b      	ldr	r3, [r7, #0]
 800920c:	695b      	ldr	r3, [r3, #20]
 800920e:	4313      	orrs	r3, r2
 8009210:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	68fa      	ldr	r2, [r7, #12]
 8009216:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009218:	683b      	ldr	r3, [r7, #0]
 800921a:	689a      	ldr	r2, [r3, #8]
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009220:	683b      	ldr	r3, [r7, #0]
 8009222:	681a      	ldr	r2, [r3, #0]
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	4a12      	ldr	r2, [pc, #72]	@ (8009274 <TIM_Base_SetConfig+0xd4>)
 800922c:	4293      	cmp	r3, r2
 800922e:	d007      	beq.n	8009240 <TIM_Base_SetConfig+0xa0>
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	4a11      	ldr	r2, [pc, #68]	@ (8009278 <TIM_Base_SetConfig+0xd8>)
 8009234:	4293      	cmp	r3, r2
 8009236:	d003      	beq.n	8009240 <TIM_Base_SetConfig+0xa0>
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	4a10      	ldr	r2, [pc, #64]	@ (800927c <TIM_Base_SetConfig+0xdc>)
 800923c:	4293      	cmp	r3, r2
 800923e:	d103      	bne.n	8009248 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009240:	683b      	ldr	r3, [r7, #0]
 8009242:	691a      	ldr	r2, [r3, #16]
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	2201      	movs	r2, #1
 800924c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	691b      	ldr	r3, [r3, #16]
 8009252:	f003 0301 	and.w	r3, r3, #1
 8009256:	2b01      	cmp	r3, #1
 8009258:	d105      	bne.n	8009266 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	691b      	ldr	r3, [r3, #16]
 800925e:	f023 0201 	bic.w	r2, r3, #1
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	611a      	str	r2, [r3, #16]
  }
}
 8009266:	bf00      	nop
 8009268:	3714      	adds	r7, #20
 800926a:	46bd      	mov	sp, r7
 800926c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009270:	4770      	bx	lr
 8009272:	bf00      	nop
 8009274:	40012c00 	.word	0x40012c00
 8009278:	40014400 	.word	0x40014400
 800927c:	40014800 	.word	0x40014800

08009280 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009280:	b480      	push	{r7}
 8009282:	b087      	sub	sp, #28
 8009284:	af00      	add	r7, sp, #0
 8009286:	60f8      	str	r0, [r7, #12]
 8009288:	60b9      	str	r1, [r7, #8]
 800928a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	6a1b      	ldr	r3, [r3, #32]
 8009290:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	6a1b      	ldr	r3, [r3, #32]
 8009296:	f023 0201 	bic.w	r2, r3, #1
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	699b      	ldr	r3, [r3, #24]
 80092a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80092a4:	693b      	ldr	r3, [r7, #16]
 80092a6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80092aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	011b      	lsls	r3, r3, #4
 80092b0:	693a      	ldr	r2, [r7, #16]
 80092b2:	4313      	orrs	r3, r2
 80092b4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80092b6:	697b      	ldr	r3, [r7, #20]
 80092b8:	f023 030a 	bic.w	r3, r3, #10
 80092bc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80092be:	697a      	ldr	r2, [r7, #20]
 80092c0:	68bb      	ldr	r3, [r7, #8]
 80092c2:	4313      	orrs	r3, r2
 80092c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	693a      	ldr	r2, [r7, #16]
 80092ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	697a      	ldr	r2, [r7, #20]
 80092d0:	621a      	str	r2, [r3, #32]
}
 80092d2:	bf00      	nop
 80092d4:	371c      	adds	r7, #28
 80092d6:	46bd      	mov	sp, r7
 80092d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092dc:	4770      	bx	lr

080092de <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80092de:	b480      	push	{r7}
 80092e0:	b087      	sub	sp, #28
 80092e2:	af00      	add	r7, sp, #0
 80092e4:	60f8      	str	r0, [r7, #12]
 80092e6:	60b9      	str	r1, [r7, #8]
 80092e8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	6a1b      	ldr	r3, [r3, #32]
 80092ee:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	6a1b      	ldr	r3, [r3, #32]
 80092f4:	f023 0210 	bic.w	r2, r3, #16
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	699b      	ldr	r3, [r3, #24]
 8009300:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009302:	693b      	ldr	r3, [r7, #16]
 8009304:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009308:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	031b      	lsls	r3, r3, #12
 800930e:	693a      	ldr	r2, [r7, #16]
 8009310:	4313      	orrs	r3, r2
 8009312:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009314:	697b      	ldr	r3, [r7, #20]
 8009316:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800931a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800931c:	68bb      	ldr	r3, [r7, #8]
 800931e:	011b      	lsls	r3, r3, #4
 8009320:	697a      	ldr	r2, [r7, #20]
 8009322:	4313      	orrs	r3, r2
 8009324:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	693a      	ldr	r2, [r7, #16]
 800932a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	697a      	ldr	r2, [r7, #20]
 8009330:	621a      	str	r2, [r3, #32]
}
 8009332:	bf00      	nop
 8009334:	371c      	adds	r7, #28
 8009336:	46bd      	mov	sp, r7
 8009338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800933c:	4770      	bx	lr

0800933e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800933e:	b480      	push	{r7}
 8009340:	b085      	sub	sp, #20
 8009342:	af00      	add	r7, sp, #0
 8009344:	6078      	str	r0, [r7, #4]
 8009346:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	689b      	ldr	r3, [r3, #8]
 800934c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8009354:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009358:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800935a:	683a      	ldr	r2, [r7, #0]
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	4313      	orrs	r3, r2
 8009360:	f043 0307 	orr.w	r3, r3, #7
 8009364:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	68fa      	ldr	r2, [r7, #12]
 800936a:	609a      	str	r2, [r3, #8]
}
 800936c:	bf00      	nop
 800936e:	3714      	adds	r7, #20
 8009370:	46bd      	mov	sp, r7
 8009372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009376:	4770      	bx	lr

08009378 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009378:	b480      	push	{r7}
 800937a:	b087      	sub	sp, #28
 800937c:	af00      	add	r7, sp, #0
 800937e:	60f8      	str	r0, [r7, #12]
 8009380:	60b9      	str	r1, [r7, #8]
 8009382:	607a      	str	r2, [r7, #4]
 8009384:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	689b      	ldr	r3, [r3, #8]
 800938a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800938c:	697b      	ldr	r3, [r7, #20]
 800938e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009392:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009394:	683b      	ldr	r3, [r7, #0]
 8009396:	021a      	lsls	r2, r3, #8
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	431a      	orrs	r2, r3
 800939c:	68bb      	ldr	r3, [r7, #8]
 800939e:	4313      	orrs	r3, r2
 80093a0:	697a      	ldr	r2, [r7, #20]
 80093a2:	4313      	orrs	r3, r2
 80093a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	697a      	ldr	r2, [r7, #20]
 80093aa:	609a      	str	r2, [r3, #8]
}
 80093ac:	bf00      	nop
 80093ae:	371c      	adds	r7, #28
 80093b0:	46bd      	mov	sp, r7
 80093b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b6:	4770      	bx	lr

080093b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80093b8:	b480      	push	{r7}
 80093ba:	b085      	sub	sp, #20
 80093bc:	af00      	add	r7, sp, #0
 80093be:	6078      	str	r0, [r7, #4]
 80093c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80093c8:	2b01      	cmp	r3, #1
 80093ca:	d101      	bne.n	80093d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80093cc:	2302      	movs	r3, #2
 80093ce:	e04a      	b.n	8009466 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	2201      	movs	r2, #1
 80093d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	2202      	movs	r2, #2
 80093dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	685b      	ldr	r3, [r3, #4]
 80093e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	689b      	ldr	r3, [r3, #8]
 80093ee:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	4a1f      	ldr	r2, [pc, #124]	@ (8009474 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 80093f6:	4293      	cmp	r3, r2
 80093f8:	d108      	bne.n	800940c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8009400:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009402:	683b      	ldr	r3, [r7, #0]
 8009404:	685b      	ldr	r3, [r3, #4]
 8009406:	68fa      	ldr	r2, [r7, #12]
 8009408:	4313      	orrs	r3, r2
 800940a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009412:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009414:	683b      	ldr	r3, [r7, #0]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	68fa      	ldr	r2, [r7, #12]
 800941a:	4313      	orrs	r3, r2
 800941c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	68fa      	ldr	r2, [r7, #12]
 8009424:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	4a12      	ldr	r2, [pc, #72]	@ (8009474 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 800942c:	4293      	cmp	r3, r2
 800942e:	d004      	beq.n	800943a <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009438:	d10c      	bne.n	8009454 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800943a:	68bb      	ldr	r3, [r7, #8]
 800943c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009440:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009442:	683b      	ldr	r3, [r7, #0]
 8009444:	689b      	ldr	r3, [r3, #8]
 8009446:	68ba      	ldr	r2, [r7, #8]
 8009448:	4313      	orrs	r3, r2
 800944a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	68ba      	ldr	r2, [r7, #8]
 8009452:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	2201      	movs	r2, #1
 8009458:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	2200      	movs	r2, #0
 8009460:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009464:	2300      	movs	r3, #0
}
 8009466:	4618      	mov	r0, r3
 8009468:	3714      	adds	r7, #20
 800946a:	46bd      	mov	sp, r7
 800946c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009470:	4770      	bx	lr
 8009472:	bf00      	nop
 8009474:	40012c00 	.word	0x40012c00

08009478 <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 8009478:	b580      	push	{r7, lr}
 800947a:	b088      	sub	sp, #32
 800947c:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800947e:	2300      	movs	r3, #0
 8009480:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009482:	f107 0308 	add.w	r3, r7, #8
 8009486:	2218      	movs	r2, #24
 8009488:	2100      	movs	r1, #0
 800948a:	4618      	mov	r0, r3
 800948c:	f001 f92d 	bl	800a6ea <Osal_MemSet>
  rq.ogf = 0x3f;
 8009490:	233f      	movs	r3, #63	@ 0x3f
 8009492:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 8009494:	2381      	movs	r3, #129	@ 0x81
 8009496:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8009498:	1dfb      	adds	r3, r7, #7
 800949a:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800949c:	2301      	movs	r3, #1
 800949e:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 80094a0:	f107 0308 	add.w	r3, r7, #8
 80094a4:	2100      	movs	r1, #0
 80094a6:	4618      	mov	r0, r3
 80094a8:	f001 fba8 	bl	800abfc <hci_send_req>
 80094ac:	4603      	mov	r3, r0
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	da01      	bge.n	80094b6 <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 80094b2:	23ff      	movs	r3, #255	@ 0xff
 80094b4:	e000      	b.n	80094b8 <aci_gap_set_non_discoverable+0x40>
  return status;
 80094b6:	79fb      	ldrb	r3, [r7, #7]
}
 80094b8:	4618      	mov	r0, r3
 80094ba:	3720      	adds	r7, #32
 80094bc:	46bd      	mov	sp, r7
 80094be:	bd80      	pop	{r7, pc}

080094c0 <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Conn_Interval_Min,
                                     uint16_t Conn_Interval_Max )
{
 80094c0:	b5b0      	push	{r4, r5, r7, lr}
 80094c2:	b0ce      	sub	sp, #312	@ 0x138
 80094c4:	af00      	add	r7, sp, #0
 80094c6:	4605      	mov	r5, r0
 80094c8:	460c      	mov	r4, r1
 80094ca:	4610      	mov	r0, r2
 80094cc:	4619      	mov	r1, r3
 80094ce:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80094d2:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 80094d6:	462a      	mov	r2, r5
 80094d8:	701a      	strb	r2, [r3, #0]
 80094da:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80094de:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80094e2:	4622      	mov	r2, r4
 80094e4:	801a      	strh	r2, [r3, #0]
 80094e6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80094ea:	f5a3 739b 	sub.w	r3, r3, #310	@ 0x136
 80094ee:	4602      	mov	r2, r0
 80094f0:	801a      	strh	r2, [r3, #0]
 80094f2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80094f6:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 80094fa:	460a      	mov	r2, r1
 80094fc:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 80094fe:	f107 0310 	add.w	r3, r7, #16
 8009502:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 8009506:	f897 314c 	ldrb.w	r3, [r7, #332]	@ 0x14c
 800950a:	3308      	adds	r3, #8
 800950c:	f107 0210 	add.w	r2, r7, #16
 8009510:	4413      	add	r3, r2
 8009512:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 8009516:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 800951a:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 800951e:	4413      	add	r3, r2
 8009520:	3309      	adds	r3, #9
 8009522:	f107 0210 	add.w	r2, r7, #16
 8009526:	4413      	add	r3, r2
 8009528:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800952c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009530:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8009534:	2200      	movs	r2, #0
 8009536:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8009538:	2300      	movs	r3, #0
 800953a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Type = Advertising_Type;
 800953e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8009542:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8009546:	f2a2 1231 	subw	r2, r2, #305	@ 0x131
 800954a:	7812      	ldrb	r2, [r2, #0]
 800954c:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800954e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009552:	3301      	adds	r3, #1
 8009554:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 8009558:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800955c:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8009560:	f5a2 729a 	sub.w	r2, r2, #308	@ 0x134
 8009564:	8812      	ldrh	r2, [r2, #0]
 8009566:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 800956a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800956e:	3302      	adds	r3, #2
 8009570:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 8009574:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8009578:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800957c:	f5a2 729b 	sub.w	r2, r2, #310	@ 0x136
 8009580:	8812      	ldrh	r2, [r2, #0]
 8009582:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 8009586:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800958a:	3302      	adds	r3, #2
 800958c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 8009590:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8009594:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8009598:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 800959c:	7812      	ldrb	r2, [r2, #0]
 800959e:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 80095a0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80095a4:	3301      	adds	r3, #1
 80095a6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 80095aa:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80095ae:	f897 2148 	ldrb.w	r2, [r7, #328]	@ 0x148
 80095b2:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 80095b4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80095b8:	3301      	adds	r3, #1
 80095ba:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 80095be:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80095c2:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 80095c6:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 80095c8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80095cc:	3301      	adds	r3, #1
 80095ce:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 80095d2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80095d6:	3308      	adds	r3, #8
 80095d8:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 80095dc:	f8d7 1150 	ldr.w	r1, [r7, #336]	@ 0x150
 80095e0:	4618      	mov	r0, r3
 80095e2:	f001 f872 	bl	800a6ca <Osal_MemCpy>
    index_input += Local_Name_Length;
 80095e6:	f897 314c 	ldrb.w	r3, [r7, #332]	@ 0x14c
 80095ea:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 80095ee:	4413      	add	r3, r2
 80095f0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 80095f4:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80095f8:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 80095fc:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 80095fe:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009602:	3301      	adds	r3, #1
 8009604:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 8009608:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800960c:	3301      	adds	r3, #1
 800960e:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 8009612:	f8d7 1158 	ldr.w	r1, [r7, #344]	@ 0x158
 8009616:	4618      	mov	r0, r3
 8009618:	f001 f857 	bl	800a6ca <Osal_MemCpy>
    index_input += Service_Uuid_length;
 800961c:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 8009620:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8009624:	4413      	add	r3, r2
 8009626:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp2->Conn_Interval_Min = Conn_Interval_Min;
 800962a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800962e:	f8b7 215c 	ldrh.w	r2, [r7, #348]	@ 0x15c
 8009632:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8009634:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009638:	3302      	adds	r3, #2
 800963a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp2->Conn_Interval_Max = Conn_Interval_Max;
 800963e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009642:	f8b7 2160 	ldrh.w	r2, [r7, #352]	@ 0x160
 8009646:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 8009648:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800964c:	3302      	adds	r3, #2
 800964e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009652:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009656:	2218      	movs	r2, #24
 8009658:	2100      	movs	r1, #0
 800965a:	4618      	mov	r0, r3
 800965c:	f001 f845 	bl	800a6ea <Osal_MemSet>
  rq.ogf = 0x3f;
 8009660:	233f      	movs	r3, #63	@ 0x3f
 8009662:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x083;
 8009666:	2383      	movs	r3, #131	@ 0x83
 8009668:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800966c:	f107 0310 	add.w	r3, r7, #16
 8009670:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8009674:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009678:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800967c:	f107 030f 	add.w	r3, r7, #15
 8009680:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8009684:	2301      	movs	r3, #1
 8009686:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800968a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800968e:	2100      	movs	r1, #0
 8009690:	4618      	mov	r0, r3
 8009692:	f001 fab3 	bl	800abfc <hci_send_req>
 8009696:	4603      	mov	r3, r0
 8009698:	2b00      	cmp	r3, #0
 800969a:	da01      	bge.n	80096a0 <aci_gap_set_discoverable+0x1e0>
    return BLE_STATUS_TIMEOUT;
 800969c:	23ff      	movs	r3, #255	@ 0xff
 800969e:	e004      	b.n	80096aa <aci_gap_set_discoverable+0x1ea>
  return status;
 80096a0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80096a4:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 80096a8:	781b      	ldrb	r3, [r3, #0]
}
 80096aa:	4618      	mov	r0, r3
 80096ac:	f507 779c 	add.w	r7, r7, #312	@ 0x138
 80096b0:	46bd      	mov	sp, r7
 80096b2:	bdb0      	pop	{r4, r5, r7, pc}

080096b4 <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 80096b4:	b580      	push	{r7, lr}
 80096b6:	b0cc      	sub	sp, #304	@ 0x130
 80096b8:	af00      	add	r7, sp, #0
 80096ba:	4602      	mov	r2, r0
 80096bc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80096c0:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 80096c4:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 80096c6:	f107 0310 	add.w	r3, r7, #16
 80096ca:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 80096ce:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80096d2:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80096d6:	2200      	movs	r2, #0
 80096d8:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80096da:	2300      	movs	r3, #0
 80096dc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->IO_Capability = IO_Capability;
 80096e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80096e4:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80096e8:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 80096ec:	7812      	ldrb	r2, [r2, #0]
 80096ee:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80096f0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80096f4:	3301      	adds	r3, #1
 80096f6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80096fa:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80096fe:	2218      	movs	r2, #24
 8009700:	2100      	movs	r1, #0
 8009702:	4618      	mov	r0, r3
 8009704:	f000 fff1 	bl	800a6ea <Osal_MemSet>
  rq.ogf = 0x3f;
 8009708:	233f      	movs	r3, #63	@ 0x3f
 800970a:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x085;
 800970e:	2385      	movs	r3, #133	@ 0x85
 8009710:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8009714:	f107 0310 	add.w	r3, r7, #16
 8009718:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800971c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009720:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8009724:	f107 030f 	add.w	r3, r7, #15
 8009728:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800972c:	2301      	movs	r3, #1
 800972e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009732:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009736:	2100      	movs	r1, #0
 8009738:	4618      	mov	r0, r3
 800973a:	f001 fa5f 	bl	800abfc <hci_send_req>
 800973e:	4603      	mov	r3, r0
 8009740:	2b00      	cmp	r3, #0
 8009742:	da01      	bge.n	8009748 <aci_gap_set_io_capability+0x94>
    return BLE_STATUS_TIMEOUT;
 8009744:	23ff      	movs	r3, #255	@ 0xff
 8009746:	e004      	b.n	8009752 <aci_gap_set_io_capability+0x9e>
  return status;
 8009748:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800974c:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8009750:	781b      	ldrb	r3, [r3, #0]
}
 8009752:	4618      	mov	r0, r3
 8009754:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8009758:	46bd      	mov	sp, r7
 800975a:	bd80      	pop	{r7, pc}

0800975c <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 800975c:	b5b0      	push	{r4, r5, r7, lr}
 800975e:	b0cc      	sub	sp, #304	@ 0x130
 8009760:	af00      	add	r7, sp, #0
 8009762:	4605      	mov	r5, r0
 8009764:	460c      	mov	r4, r1
 8009766:	4610      	mov	r0, r2
 8009768:	4619      	mov	r1, r3
 800976a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800976e:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8009772:	462a      	mov	r2, r5
 8009774:	701a      	strb	r2, [r3, #0]
 8009776:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800977a:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800977e:	4622      	mov	r2, r4
 8009780:	701a      	strb	r2, [r3, #0]
 8009782:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009786:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 800978a:	4602      	mov	r2, r0
 800978c:	701a      	strb	r2, [r3, #0]
 800978e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009792:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8009796:	460a      	mov	r2, r1
 8009798:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 800979a:	f107 0310 	add.w	r3, r7, #16
 800979e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 80097a2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80097a6:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80097aa:	2200      	movs	r2, #0
 80097ac:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80097ae:	2300      	movs	r3, #0
 80097b0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 80097b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80097b8:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80097bc:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 80097c0:	7812      	ldrb	r2, [r2, #0]
 80097c2:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80097c4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80097c8:	3301      	adds	r3, #1
 80097ca:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->MITM_Mode = MITM_Mode;
 80097ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80097d2:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80097d6:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 80097da:	7812      	ldrb	r2, [r2, #0]
 80097dc:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80097de:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80097e2:	3301      	adds	r3, #1
 80097e4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->SC_Support = SC_Support;
 80097e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80097ec:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80097f0:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 80097f4:	7812      	ldrb	r2, [r2, #0]
 80097f6:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80097f8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80097fc:	3301      	adds	r3, #1
 80097fe:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 8009802:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009806:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800980a:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 800980e:	7812      	ldrb	r2, [r2, #0]
 8009810:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 8009812:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009816:	3301      	adds	r3, #1
 8009818:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 800981c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009820:	f897 2140 	ldrb.w	r2, [r7, #320]	@ 0x140
 8009824:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8009826:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800982a:	3301      	adds	r3, #1
 800982c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 8009830:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009834:	f897 2144 	ldrb.w	r2, [r7, #324]	@ 0x144
 8009838:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800983a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800983e:	3301      	adds	r3, #1
 8009840:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 8009844:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009848:	f897 2148 	ldrb.w	r2, [r7, #328]	@ 0x148
 800984c:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 800984e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009852:	3301      	adds	r3, #1
 8009854:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 8009858:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800985c:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8009860:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 8009864:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009868:	3304      	adds	r3, #4
 800986a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 800986e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009872:	f897 2150 	ldrb.w	r2, [r7, #336]	@ 0x150
 8009876:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 8009878:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800987c:	3301      	adds	r3, #1
 800987e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009882:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009886:	2218      	movs	r2, #24
 8009888:	2100      	movs	r1, #0
 800988a:	4618      	mov	r0, r3
 800988c:	f000 ff2d 	bl	800a6ea <Osal_MemSet>
  rq.ogf = 0x3f;
 8009890:	233f      	movs	r3, #63	@ 0x3f
 8009892:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x086;
 8009896:	2386      	movs	r3, #134	@ 0x86
 8009898:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800989c:	f107 0310 	add.w	r3, r7, #16
 80098a0:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80098a4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80098a8:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 80098ac:	f107 030f 	add.w	r3, r7, #15
 80098b0:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 80098b4:	2301      	movs	r3, #1
 80098b6:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80098ba:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80098be:	2100      	movs	r1, #0
 80098c0:	4618      	mov	r0, r3
 80098c2:	f001 f99b 	bl	800abfc <hci_send_req>
 80098c6:	4603      	mov	r3, r0
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	da01      	bge.n	80098d0 <aci_gap_set_authentication_requirement+0x174>
    return BLE_STATUS_TIMEOUT;
 80098cc:	23ff      	movs	r3, #255	@ 0xff
 80098ce:	e004      	b.n	80098da <aci_gap_set_authentication_requirement+0x17e>
  return status;
 80098d0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80098d4:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80098d8:	781b      	ldrb	r3, [r3, #0]
}
 80098da:	4618      	mov	r0, r3
 80098dc:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80098e0:	46bd      	mov	sp, r7
 80098e2:	bdb0      	pop	{r4, r5, r7, pc}

080098e4 <aci_gap_pass_key_resp>:
  return status;
}

tBleStatus aci_gap_pass_key_resp( uint16_t Connection_Handle,
                                  uint32_t Pass_Key )
{
 80098e4:	b580      	push	{r7, lr}
 80098e6:	b0cc      	sub	sp, #304	@ 0x130
 80098e8:	af00      	add	r7, sp, #0
 80098ea:	4602      	mov	r2, r0
 80098ec:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80098f0:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80098f4:	6019      	str	r1, [r3, #0]
 80098f6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80098fa:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 80098fe:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_pass_key_resp_cp0 *cp0 = (aci_gap_pass_key_resp_cp0*)(cmd_buffer);
 8009900:	f107 0310 	add.w	r3, r7, #16
 8009904:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8009908:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800990c:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8009910:	2200      	movs	r2, #0
 8009912:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8009914:	2300      	movs	r3, #0
 8009916:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 800991a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800991e:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8009922:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8009926:	8812      	ldrh	r2, [r2, #0]
 8009928:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800992a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800992e:	3302      	adds	r3, #2
 8009930:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Pass_Key = Pass_Key;
 8009934:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009938:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800993c:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 8009940:	6812      	ldr	r2, [r2, #0]
 8009942:	f8c3 2002 	str.w	r2, [r3, #2]
  index_input += 4;
 8009946:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800994a:	3304      	adds	r3, #4
 800994c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009950:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009954:	2218      	movs	r2, #24
 8009956:	2100      	movs	r1, #0
 8009958:	4618      	mov	r0, r3
 800995a:	f000 fec6 	bl	800a6ea <Osal_MemSet>
  rq.ogf = 0x3f;
 800995e:	233f      	movs	r3, #63	@ 0x3f
 8009960:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x088;
 8009964:	2388      	movs	r3, #136	@ 0x88
 8009966:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800996a:	f107 0310 	add.w	r3, r7, #16
 800996e:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8009972:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009976:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800997a:	f107 030f 	add.w	r3, r7, #15
 800997e:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8009982:	2301      	movs	r3, #1
 8009984:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009988:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800998c:	2100      	movs	r1, #0
 800998e:	4618      	mov	r0, r3
 8009990:	f001 f934 	bl	800abfc <hci_send_req>
 8009994:	4603      	mov	r3, r0
 8009996:	2b00      	cmp	r3, #0
 8009998:	da01      	bge.n	800999e <aci_gap_pass_key_resp+0xba>
    return BLE_STATUS_TIMEOUT;
 800999a:	23ff      	movs	r3, #255	@ 0xff
 800999c:	e004      	b.n	80099a8 <aci_gap_pass_key_resp+0xc4>
  return status;
 800999e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80099a2:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80099a6:	781b      	ldrb	r3, [r3, #0]
}
 80099a8:	4618      	mov	r0, r3
 80099aa:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80099ae:	46bd      	mov	sp, r7
 80099b0:	bd80      	pop	{r7, pc}

080099b2 <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 80099b2:	b590      	push	{r4, r7, lr}
 80099b4:	b0cd      	sub	sp, #308	@ 0x134
 80099b6:	af00      	add	r7, sp, #0
 80099b8:	4604      	mov	r4, r0
 80099ba:	4608      	mov	r0, r1
 80099bc:	4611      	mov	r1, r2
 80099be:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80099c2:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 80099c6:	6013      	str	r3, [r2, #0]
 80099c8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80099cc:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 80099d0:	4622      	mov	r2, r4
 80099d2:	701a      	strb	r2, [r3, #0]
 80099d4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80099d8:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 80099dc:	4602      	mov	r2, r0
 80099de:	701a      	strb	r2, [r3, #0]
 80099e0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80099e4:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 80099e8:	460a      	mov	r2, r1
 80099ea:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 80099ec:	f107 0310 	add.w	r3, r7, #16
 80099f0:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 80099f4:	f107 0308 	add.w	r3, r7, #8
 80099f8:	2207      	movs	r2, #7
 80099fa:	2100      	movs	r1, #0
 80099fc:	4618      	mov	r0, r3
 80099fe:	f000 fe74 	bl	800a6ea <Osal_MemSet>
  int index_input = 0;
 8009a02:	2300      	movs	r3, #0
 8009a04:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Role = Role;
 8009a08:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009a0c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8009a10:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8009a14:	7812      	ldrb	r2, [r2, #0]
 8009a16:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8009a18:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009a1c:	3301      	adds	r3, #1
 8009a1e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->privacy_enabled = privacy_enabled;
 8009a22:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009a26:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8009a2a:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8009a2e:	7812      	ldrb	r2, [r2, #0]
 8009a30:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8009a32:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009a36:	3301      	adds	r3, #1
 8009a38:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->device_name_char_len = device_name_char_len;
 8009a3c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009a40:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8009a44:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 8009a48:	7812      	ldrb	r2, [r2, #0]
 8009a4a:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8009a4c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009a50:	3301      	adds	r3, #1
 8009a52:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009a56:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009a5a:	2218      	movs	r2, #24
 8009a5c:	2100      	movs	r1, #0
 8009a5e:	4618      	mov	r0, r3
 8009a60:	f000 fe43 	bl	800a6ea <Osal_MemSet>
  rq.ogf = 0x3f;
 8009a64:	233f      	movs	r3, #63	@ 0x3f
 8009a66:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x08a;
 8009a6a:	238a      	movs	r3, #138	@ 0x8a
 8009a6c:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8009a70:	f107 0310 	add.w	r3, r7, #16
 8009a74:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8009a78:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009a7c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &resp;
 8009a80:	f107 0308 	add.w	r3, r7, #8
 8009a84:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = sizeof(resp);
 8009a88:	2307      	movs	r3, #7
 8009a8a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009a8e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009a92:	2100      	movs	r1, #0
 8009a94:	4618      	mov	r0, r3
 8009a96:	f001 f8b1 	bl	800abfc <hci_send_req>
 8009a9a:	4603      	mov	r3, r0
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	da01      	bge.n	8009aa4 <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 8009aa0:	23ff      	movs	r3, #255	@ 0xff
 8009aa2:	e02e      	b.n	8009b02 <aci_gap_init+0x150>
  if ( resp.Status )
 8009aa4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009aa8:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8009aac:	781b      	ldrb	r3, [r3, #0]
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d005      	beq.n	8009abe <aci_gap_init+0x10c>
    return resp.Status;
 8009ab2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009ab6:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8009aba:	781b      	ldrb	r3, [r3, #0]
 8009abc:	e021      	b.n	8009b02 <aci_gap_init+0x150>
  *Service_Handle = resp.Service_Handle;
 8009abe:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009ac2:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8009ac6:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8009aca:	b29a      	uxth	r2, r3
 8009acc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009ad0:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 8009ad8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009adc:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8009ae0:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8009ae4:	b29a      	uxth	r2, r3
 8009ae6:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8009aea:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 8009aec:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009af0:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8009af4:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8009af8:	b29a      	uxth	r2, r3
 8009afa:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8009afe:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8009b00:	2300      	movs	r3, #0
}
 8009b02:	4618      	mov	r0, r3
 8009b04:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 8009b08:	46bd      	mov	sp, r7
 8009b0a:	bd90      	pop	{r4, r7, pc}

08009b0c <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 8009b0c:	b580      	push	{r7, lr}
 8009b0e:	b0cc      	sub	sp, #304	@ 0x130
 8009b10:	af00      	add	r7, sp, #0
 8009b12:	4602      	mov	r2, r0
 8009b14:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009b18:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8009b1c:	6019      	str	r1, [r3, #0]
 8009b1e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009b22:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8009b26:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 8009b28:	f107 0310 	add.w	r3, r7, #16
 8009b2c:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8009b30:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009b34:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8009b38:	2200      	movs	r2, #0
 8009b3a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8009b3c:	2300      	movs	r3, #0
 8009b3e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->AdvDataLen = AdvDataLen;
 8009b42:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009b46:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8009b4a:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8009b4e:	7812      	ldrb	r2, [r2, #0]
 8009b50:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8009b52:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009b56:	3301      	adds	r3, #1
 8009b58:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 8009b5c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009b60:	1c58      	adds	r0, r3, #1
 8009b62:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009b66:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8009b6a:	781a      	ldrb	r2, [r3, #0]
 8009b6c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009b70:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8009b74:	6819      	ldr	r1, [r3, #0]
 8009b76:	f000 fda8 	bl	800a6ca <Osal_MemCpy>
  index_input += AdvDataLen;
 8009b7a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009b7e:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8009b82:	781b      	ldrb	r3, [r3, #0]
 8009b84:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8009b88:	4413      	add	r3, r2
 8009b8a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009b8e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009b92:	2218      	movs	r2, #24
 8009b94:	2100      	movs	r1, #0
 8009b96:	4618      	mov	r0, r3
 8009b98:	f000 fda7 	bl	800a6ea <Osal_MemSet>
  rq.ogf = 0x3f;
 8009b9c:	233f      	movs	r3, #63	@ 0x3f
 8009b9e:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x08e;
 8009ba2:	238e      	movs	r3, #142	@ 0x8e
 8009ba4:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8009ba8:	f107 0310 	add.w	r3, r7, #16
 8009bac:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8009bb0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009bb4:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8009bb8:	f107 030f 	add.w	r3, r7, #15
 8009bbc:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8009bc0:	2301      	movs	r3, #1
 8009bc2:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009bc6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009bca:	2100      	movs	r1, #0
 8009bcc:	4618      	mov	r0, r3
 8009bce:	f001 f815 	bl	800abfc <hci_send_req>
 8009bd2:	4603      	mov	r3, r0
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	da01      	bge.n	8009bdc <aci_gap_update_adv_data+0xd0>
    return BLE_STATUS_TIMEOUT;
 8009bd8:	23ff      	movs	r3, #255	@ 0xff
 8009bda:	e004      	b.n	8009be6 <aci_gap_update_adv_data+0xda>
  return status;
 8009bdc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009be0:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8009be4:	781b      	ldrb	r3, [r3, #0]
}
 8009be6:	4618      	mov	r0, r3
 8009be8:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8009bec:	46bd      	mov	sp, r7
 8009bee:	bd80      	pop	{r7, pc}

08009bf0 <aci_gap_configure_filter_accept_list>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_filter_accept_list( void )
{
 8009bf0:	b580      	push	{r7, lr}
 8009bf2:	b088      	sub	sp, #32
 8009bf4:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8009bf6:	2300      	movs	r3, #0
 8009bf8:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009bfa:	f107 0308 	add.w	r3, r7, #8
 8009bfe:	2218      	movs	r2, #24
 8009c00:	2100      	movs	r1, #0
 8009c02:	4618      	mov	r0, r3
 8009c04:	f000 fd71 	bl	800a6ea <Osal_MemSet>
  rq.ogf = 0x3f;
 8009c08:	233f      	movs	r3, #63	@ 0x3f
 8009c0a:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 8009c0c:	2392      	movs	r3, #146	@ 0x92
 8009c0e:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8009c10:	1dfb      	adds	r3, r7, #7
 8009c12:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8009c14:	2301      	movs	r3, #1
 8009c16:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009c18:	f107 0308 	add.w	r3, r7, #8
 8009c1c:	2100      	movs	r1, #0
 8009c1e:	4618      	mov	r0, r3
 8009c20:	f000 ffec 	bl	800abfc <hci_send_req>
 8009c24:	4603      	mov	r3, r0
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	da01      	bge.n	8009c2e <aci_gap_configure_filter_accept_list+0x3e>
    return BLE_STATUS_TIMEOUT;
 8009c2a:	23ff      	movs	r3, #255	@ 0xff
 8009c2c:	e000      	b.n	8009c30 <aci_gap_configure_filter_accept_list+0x40>
  return status;
 8009c2e:	79fb      	ldrb	r3, [r7, #7]
}
 8009c30:	4618      	mov	r0, r3
 8009c32:	3720      	adds	r7, #32
 8009c34:	46bd      	mov	sp, r7
 8009c36:	bd80      	pop	{r7, pc}

08009c38 <aci_gap_numeric_comparison_value_confirm_yesno>:
  return status;
}

tBleStatus aci_gap_numeric_comparison_value_confirm_yesno( uint16_t Connection_Handle,
                                                           uint8_t Confirm_Yes_No )
{
 8009c38:	b580      	push	{r7, lr}
 8009c3a:	b0cc      	sub	sp, #304	@ 0x130
 8009c3c:	af00      	add	r7, sp, #0
 8009c3e:	4602      	mov	r2, r0
 8009c40:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009c44:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8009c48:	801a      	strh	r2, [r3, #0]
 8009c4a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009c4e:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 8009c52:	460a      	mov	r2, r1
 8009c54:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_numeric_comparison_value_confirm_yesno_cp0 *cp0 = (aci_gap_numeric_comparison_value_confirm_yesno_cp0*)(cmd_buffer);
 8009c56:	f107 0310 	add.w	r3, r7, #16
 8009c5a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8009c5e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009c62:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8009c66:	2200      	movs	r2, #0
 8009c68:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8009c6a:	2300      	movs	r3, #0
 8009c6c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 8009c70:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009c74:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8009c78:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8009c7c:	8812      	ldrh	r2, [r2, #0]
 8009c7e:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8009c80:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009c84:	3302      	adds	r3, #2
 8009c86:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Confirm_Yes_No = Confirm_Yes_No;
 8009c8a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009c8e:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8009c92:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 8009c96:	7812      	ldrb	r2, [r2, #0]
 8009c98:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8009c9a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009c9e:	3301      	adds	r3, #1
 8009ca0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009ca4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009ca8:	2218      	movs	r2, #24
 8009caa:	2100      	movs	r1, #0
 8009cac:	4618      	mov	r0, r3
 8009cae:	f000 fd1c 	bl	800a6ea <Osal_MemSet>
  rq.ogf = 0x3f;
 8009cb2:	233f      	movs	r3, #63	@ 0x3f
 8009cb4:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x0a5;
 8009cb8:	23a5      	movs	r3, #165	@ 0xa5
 8009cba:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8009cbe:	f107 0310 	add.w	r3, r7, #16
 8009cc2:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8009cc6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009cca:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8009cce:	f107 030f 	add.w	r3, r7, #15
 8009cd2:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8009cd6:	2301      	movs	r3, #1
 8009cd8:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009cdc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009ce0:	2100      	movs	r1, #0
 8009ce2:	4618      	mov	r0, r3
 8009ce4:	f000 ff8a 	bl	800abfc <hci_send_req>
 8009ce8:	4603      	mov	r3, r0
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	da01      	bge.n	8009cf2 <aci_gap_numeric_comparison_value_confirm_yesno+0xba>
    return BLE_STATUS_TIMEOUT;
 8009cee:	23ff      	movs	r3, #255	@ 0xff
 8009cf0:	e004      	b.n	8009cfc <aci_gap_numeric_comparison_value_confirm_yesno+0xc4>
  return status;
 8009cf2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009cf6:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8009cfa:	781b      	ldrb	r3, [r3, #0]
}
 8009cfc:	4618      	mov	r0, r3
 8009cfe:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8009d02:	46bd      	mov	sp, r7
 8009d04:	bd80      	pop	{r7, pc}

08009d06 <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 8009d06:	b580      	push	{r7, lr}
 8009d08:	b088      	sub	sp, #32
 8009d0a:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8009d0c:	2300      	movs	r3, #0
 8009d0e:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009d10:	f107 0308 	add.w	r3, r7, #8
 8009d14:	2218      	movs	r2, #24
 8009d16:	2100      	movs	r1, #0
 8009d18:	4618      	mov	r0, r3
 8009d1a:	f000 fce6 	bl	800a6ea <Osal_MemSet>
  rq.ogf = 0x3f;
 8009d1e:	233f      	movs	r3, #63	@ 0x3f
 8009d20:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 8009d22:	f240 1301 	movw	r3, #257	@ 0x101
 8009d26:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8009d28:	1dfb      	adds	r3, r7, #7
 8009d2a:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8009d2c:	2301      	movs	r3, #1
 8009d2e:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009d30:	f107 0308 	add.w	r3, r7, #8
 8009d34:	2100      	movs	r1, #0
 8009d36:	4618      	mov	r0, r3
 8009d38:	f000 ff60 	bl	800abfc <hci_send_req>
 8009d3c:	4603      	mov	r3, r0
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	da01      	bge.n	8009d46 <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 8009d42:	23ff      	movs	r3, #255	@ 0xff
 8009d44:	e000      	b.n	8009d48 <aci_gatt_init+0x42>
  return status;
 8009d46:	79fb      	ldrb	r3, [r7, #7]
}
 8009d48:	4618      	mov	r0, r3
 8009d4a:	3720      	adds	r7, #32
 8009d4c:	46bd      	mov	sp, r7
 8009d4e:	bd80      	pop	{r7, pc}

08009d50 <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 8009d50:	b590      	push	{r4, r7, lr}
 8009d52:	b0cf      	sub	sp, #316	@ 0x13c
 8009d54:	af00      	add	r7, sp, #0
 8009d56:	4604      	mov	r4, r0
 8009d58:	f507 709c 	add.w	r0, r7, #312	@ 0x138
 8009d5c:	f5a0 709c 	sub.w	r0, r0, #312	@ 0x138
 8009d60:	6001      	str	r1, [r0, #0]
 8009d62:	4610      	mov	r0, r2
 8009d64:	4619      	mov	r1, r3
 8009d66:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009d6a:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 8009d6e:	4622      	mov	r2, r4
 8009d70:	701a      	strb	r2, [r3, #0]
 8009d72:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009d76:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 8009d7a:	4602      	mov	r2, r0
 8009d7c:	701a      	strb	r2, [r3, #0]
 8009d7e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009d82:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8009d86:	460a      	mov	r2, r1
 8009d88:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 8009d8a:	f107 0310 	add.w	r3, r7, #16
 8009d8e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 8009d92:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009d96:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 8009d9a:	781b      	ldrb	r3, [r3, #0]
 8009d9c:	2b01      	cmp	r3, #1
 8009d9e:	d00a      	beq.n	8009db6 <aci_gatt_add_service+0x66>
 8009da0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009da4:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 8009da8:	781b      	ldrb	r3, [r3, #0]
 8009daa:	2b02      	cmp	r3, #2
 8009dac:	d101      	bne.n	8009db2 <aci_gatt_add_service+0x62>
 8009dae:	2311      	movs	r3, #17
 8009db0:	e002      	b.n	8009db8 <aci_gatt_add_service+0x68>
 8009db2:	2301      	movs	r3, #1
 8009db4:	e000      	b.n	8009db8 <aci_gatt_add_service+0x68>
 8009db6:	2303      	movs	r3, #3
 8009db8:	f107 0210 	add.w	r2, r7, #16
 8009dbc:	4413      	add	r3, r2
 8009dbe:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8009dc2:	f107 030c 	add.w	r3, r7, #12
 8009dc6:	2203      	movs	r2, #3
 8009dc8:	2100      	movs	r1, #0
 8009dca:	4618      	mov	r0, r3
 8009dcc:	f000 fc8d 	bl	800a6ea <Osal_MemSet>
  int index_input = 0;
 8009dd0:	2300      	movs	r3, #0
 8009dd2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 8009dd6:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8009dda:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8009dde:	f2a2 1231 	subw	r2, r2, #305	@ 0x131
 8009de2:	7812      	ldrb	r2, [r2, #0]
 8009de4:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8009de6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009dea:	3301      	adds	r3, #1
 8009dec:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 8009df0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009df4:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 8009df8:	781b      	ldrb	r3, [r3, #0]
 8009dfa:	2b01      	cmp	r3, #1
 8009dfc:	d002      	beq.n	8009e04 <aci_gatt_add_service+0xb4>
 8009dfe:	2b02      	cmp	r3, #2
 8009e00:	d004      	beq.n	8009e0c <aci_gatt_add_service+0xbc>
 8009e02:	e007      	b.n	8009e14 <aci_gatt_add_service+0xc4>
    {
      case 1: size = 2; break;
 8009e04:	2302      	movs	r3, #2
 8009e06:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
 8009e0a:	e005      	b.n	8009e18 <aci_gatt_add_service+0xc8>
      case 2: size = 16; break;
 8009e0c:	2310      	movs	r3, #16
 8009e0e:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
 8009e12:	e001      	b.n	8009e18 <aci_gatt_add_service+0xc8>
      default: return BLE_STATUS_ERROR;
 8009e14:	2397      	movs	r3, #151	@ 0x97
 8009e16:	e06c      	b.n	8009ef2 <aci_gatt_add_service+0x1a2>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 8009e18:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8009e1c:	1c58      	adds	r0, r3, #1
 8009e1e:	f897 2137 	ldrb.w	r2, [r7, #311]	@ 0x137
 8009e22:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009e26:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8009e2a:	6819      	ldr	r1, [r3, #0]
 8009e2c:	f000 fc4d 	bl	800a6ca <Osal_MemCpy>
    index_input += size;
 8009e30:	f897 3137 	ldrb.w	r3, [r7, #311]	@ 0x137
 8009e34:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8009e38:	4413      	add	r3, r2
 8009e3a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Service_Type = Service_Type;
 8009e3e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009e42:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8009e46:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 8009e4a:	7812      	ldrb	r2, [r2, #0]
 8009e4c:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8009e4e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009e52:	3301      	adds	r3, #1
 8009e54:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 8009e58:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009e5c:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8009e60:	f2a2 1233 	subw	r2, r2, #307	@ 0x133
 8009e64:	7812      	ldrb	r2, [r2, #0]
 8009e66:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 8009e68:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009e6c:	3301      	adds	r3, #1
 8009e6e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009e72:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009e76:	2218      	movs	r2, #24
 8009e78:	2100      	movs	r1, #0
 8009e7a:	4618      	mov	r0, r3
 8009e7c:	f000 fc35 	bl	800a6ea <Osal_MemSet>
  rq.ogf = 0x3f;
 8009e80:	233f      	movs	r3, #63	@ 0x3f
 8009e82:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x102;
 8009e86:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8009e8a:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8009e8e:	f107 0310 	add.w	r3, r7, #16
 8009e92:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8009e96:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009e9a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &resp;
 8009e9e:	f107 030c 	add.w	r3, r7, #12
 8009ea2:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = sizeof(resp);
 8009ea6:	2303      	movs	r3, #3
 8009ea8:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009eac:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009eb0:	2100      	movs	r1, #0
 8009eb2:	4618      	mov	r0, r3
 8009eb4:	f000 fea2 	bl	800abfc <hci_send_req>
 8009eb8:	4603      	mov	r3, r0
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	da01      	bge.n	8009ec2 <aci_gatt_add_service+0x172>
    return BLE_STATUS_TIMEOUT;
 8009ebe:	23ff      	movs	r3, #255	@ 0xff
 8009ec0:	e017      	b.n	8009ef2 <aci_gatt_add_service+0x1a2>
  if ( resp.Status )
 8009ec2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009ec6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8009eca:	781b      	ldrb	r3, [r3, #0]
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d005      	beq.n	8009edc <aci_gatt_add_service+0x18c>
    return resp.Status;
 8009ed0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009ed4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8009ed8:	781b      	ldrb	r3, [r3, #0]
 8009eda:	e00a      	b.n	8009ef2 <aci_gatt_add_service+0x1a2>
  *Service_Handle = resp.Service_Handle;
 8009edc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009ee0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8009ee4:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8009ee8:	b29a      	uxth	r2, r3
 8009eea:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8009eee:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8009ef0:	2300      	movs	r3, #0
}
 8009ef2:	4618      	mov	r0, r3
 8009ef4:	f507 779e 	add.w	r7, r7, #316	@ 0x13c
 8009ef8:	46bd      	mov	sp, r7
 8009efa:	bd90      	pop	{r4, r7, pc}

08009efc <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 8009efc:	b590      	push	{r4, r7, lr}
 8009efe:	b0d1      	sub	sp, #324	@ 0x144
 8009f00:	af00      	add	r7, sp, #0
 8009f02:	4604      	mov	r4, r0
 8009f04:	4608      	mov	r0, r1
 8009f06:	f507 71a0 	add.w	r1, r7, #320	@ 0x140
 8009f0a:	f5a1 719c 	sub.w	r1, r1, #312	@ 0x138
 8009f0e:	600a      	str	r2, [r1, #0]
 8009f10:	4619      	mov	r1, r3
 8009f12:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8009f16:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 8009f1a:	4622      	mov	r2, r4
 8009f1c:	801a      	strh	r2, [r3, #0]
 8009f1e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8009f22:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8009f26:	4602      	mov	r2, r0
 8009f28:	701a      	strb	r2, [r3, #0]
 8009f2a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8009f2e:	f5a3 739d 	sub.w	r3, r3, #314	@ 0x13a
 8009f32:	460a      	mov	r2, r1
 8009f34:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 8009f36:	f107 0318 	add.w	r3, r7, #24
 8009f3a:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 8009f3e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8009f42:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8009f46:	781b      	ldrb	r3, [r3, #0]
 8009f48:	2b01      	cmp	r3, #1
 8009f4a:	d00a      	beq.n	8009f62 <aci_gatt_add_char+0x66>
 8009f4c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8009f50:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8009f54:	781b      	ldrb	r3, [r3, #0]
 8009f56:	2b02      	cmp	r3, #2
 8009f58:	d101      	bne.n	8009f5e <aci_gatt_add_char+0x62>
 8009f5a:	2313      	movs	r3, #19
 8009f5c:	e002      	b.n	8009f64 <aci_gatt_add_char+0x68>
 8009f5e:	2303      	movs	r3, #3
 8009f60:	e000      	b.n	8009f64 <aci_gatt_add_char+0x68>
 8009f62:	2305      	movs	r3, #5
 8009f64:	f107 0218 	add.w	r2, r7, #24
 8009f68:	4413      	add	r3, r2
 8009f6a:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8009f6e:	f107 0314 	add.w	r3, r7, #20
 8009f72:	2203      	movs	r2, #3
 8009f74:	2100      	movs	r1, #0
 8009f76:	4618      	mov	r0, r3
 8009f78:	f000 fbb7 	bl	800a6ea <Osal_MemSet>
  int index_input = 0;
 8009f7c:	2300      	movs	r3, #0
 8009f7e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Service_Handle = Service_Handle;
 8009f82:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8009f86:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8009f8a:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 8009f8e:	8812      	ldrh	r2, [r2, #0]
 8009f90:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8009f92:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8009f96:	3302      	adds	r3, #2
 8009f98:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 8009f9c:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8009fa0:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8009fa4:	f2a2 1233 	subw	r2, r2, #307	@ 0x133
 8009fa8:	7812      	ldrb	r2, [r2, #0]
 8009faa:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8009fac:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8009fb0:	3301      	adds	r3, #1
 8009fb2:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 8009fb6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8009fba:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8009fbe:	781b      	ldrb	r3, [r3, #0]
 8009fc0:	2b01      	cmp	r3, #1
 8009fc2:	d002      	beq.n	8009fca <aci_gatt_add_char+0xce>
 8009fc4:	2b02      	cmp	r3, #2
 8009fc6:	d004      	beq.n	8009fd2 <aci_gatt_add_char+0xd6>
 8009fc8:	e007      	b.n	8009fda <aci_gatt_add_char+0xde>
    {
      case 1: size = 2; break;
 8009fca:	2302      	movs	r3, #2
 8009fcc:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
 8009fd0:	e005      	b.n	8009fde <aci_gatt_add_char+0xe2>
      case 2: size = 16; break;
 8009fd2:	2310      	movs	r3, #16
 8009fd4:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
 8009fd8:	e001      	b.n	8009fde <aci_gatt_add_char+0xe2>
      default: return BLE_STATUS_ERROR;
 8009fda:	2397      	movs	r3, #151	@ 0x97
 8009fdc:	e091      	b.n	800a102 <aci_gatt_add_char+0x206>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 8009fde:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8009fe2:	1cd8      	adds	r0, r3, #3
 8009fe4:	f897 213f 	ldrb.w	r2, [r7, #319]	@ 0x13f
 8009fe8:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8009fec:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8009ff0:	6819      	ldr	r1, [r3, #0]
 8009ff2:	f000 fb6a 	bl	800a6ca <Osal_MemCpy>
    index_input += size;
 8009ff6:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 8009ffa:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8009ffe:	4413      	add	r3, r2
 800a000:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 800a004:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800a008:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 800a00c:	f5a2 729d 	sub.w	r2, r2, #314	@ 0x13a
 800a010:	8812      	ldrh	r2, [r2, #0]
 800a012:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 800a014:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800a018:	3302      	adds	r3, #2
 800a01a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Char_Properties = Char_Properties;
 800a01e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800a022:	f897 2150 	ldrb.w	r2, [r7, #336]	@ 0x150
 800a026:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 800a028:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800a02c:	3301      	adds	r3, #1
 800a02e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 800a032:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800a036:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 800a03a:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 800a03c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800a040:	3301      	adds	r3, #1
 800a042:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 800a046:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800a04a:	f897 2158 	ldrb.w	r2, [r7, #344]	@ 0x158
 800a04e:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 800a050:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800a054:	3301      	adds	r3, #1
 800a056:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 800a05a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800a05e:	f897 215c 	ldrb.w	r2, [r7, #348]	@ 0x15c
 800a062:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 800a064:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800a068:	3301      	adds	r3, #1
 800a06a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Is_Variable = Is_Variable;
 800a06e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800a072:	f897 2160 	ldrb.w	r2, [r7, #352]	@ 0x160
 800a076:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 800a078:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800a07c:	3301      	adds	r3, #1
 800a07e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a082:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800a086:	2218      	movs	r2, #24
 800a088:	2100      	movs	r1, #0
 800a08a:	4618      	mov	r0, r3
 800a08c:	f000 fb2d 	bl	800a6ea <Osal_MemSet>
  rq.ogf = 0x3f;
 800a090:	233f      	movs	r3, #63	@ 0x3f
 800a092:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
  rq.ocf = 0x104;
 800a096:	f44f 7382 	mov.w	r3, #260	@ 0x104
 800a09a:	f8a7 311a 	strh.w	r3, [r7, #282]	@ 0x11a
  rq.cparam = cmd_buffer;
 800a09e:	f107 0318 	add.w	r3, r7, #24
 800a0a2:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.clen = index_input;
 800a0a6:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800a0aa:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  rq.rparam = &resp;
 800a0ae:	f107 0314 	add.w	r3, r7, #20
 800a0b2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  rq.rlen = sizeof(resp);
 800a0b6:	2303      	movs	r3, #3
 800a0b8:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a0bc:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800a0c0:	2100      	movs	r1, #0
 800a0c2:	4618      	mov	r0, r3
 800a0c4:	f000 fd9a 	bl	800abfc <hci_send_req>
 800a0c8:	4603      	mov	r3, r0
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	da01      	bge.n	800a0d2 <aci_gatt_add_char+0x1d6>
    return BLE_STATUS_TIMEOUT;
 800a0ce:	23ff      	movs	r3, #255	@ 0xff
 800a0d0:	e017      	b.n	800a102 <aci_gatt_add_char+0x206>
  if ( resp.Status )
 800a0d2:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800a0d6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800a0da:	781b      	ldrb	r3, [r3, #0]
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d005      	beq.n	800a0ec <aci_gatt_add_char+0x1f0>
    return resp.Status;
 800a0e0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800a0e4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800a0e8:	781b      	ldrb	r3, [r3, #0]
 800a0ea:	e00a      	b.n	800a102 <aci_gatt_add_char+0x206>
  *Char_Handle = resp.Char_Handle;
 800a0ec:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800a0f0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800a0f4:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800a0f8:	b29a      	uxth	r2, r3
 800a0fa:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 800a0fe:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800a100:	2300      	movs	r3, #0
}
 800a102:	4618      	mov	r0, r3
 800a104:	f507 77a2 	add.w	r7, r7, #324	@ 0x144
 800a108:	46bd      	mov	sp, r7
 800a10a:	bd90      	pop	{r4, r7, pc}

0800a10c <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 800a10c:	b5b0      	push	{r4, r5, r7, lr}
 800a10e:	b0cc      	sub	sp, #304	@ 0x130
 800a110:	af00      	add	r7, sp, #0
 800a112:	4605      	mov	r5, r0
 800a114:	460c      	mov	r4, r1
 800a116:	4610      	mov	r0, r2
 800a118:	4619      	mov	r1, r3
 800a11a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a11e:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800a122:	462a      	mov	r2, r5
 800a124:	801a      	strh	r2, [r3, #0]
 800a126:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a12a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800a12e:	4622      	mov	r2, r4
 800a130:	801a      	strh	r2, [r3, #0]
 800a132:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a136:	f2a3 132d 	subw	r3, r3, #301	@ 0x12d
 800a13a:	4602      	mov	r2, r0
 800a13c:	701a      	strb	r2, [r3, #0]
 800a13e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a142:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 800a146:	460a      	mov	r2, r1
 800a148:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 800a14a:	f107 0310 	add.w	r3, r7, #16
 800a14e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800a152:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a156:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800a15a:	2200      	movs	r2, #0
 800a15c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800a15e:	2300      	movs	r3, #0
 800a160:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Service_Handle = Service_Handle;
 800a164:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a168:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800a16c:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800a170:	8812      	ldrh	r2, [r2, #0]
 800a172:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800a174:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a178:	3302      	adds	r3, #2
 800a17a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Char_Handle = Char_Handle;
 800a17e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a182:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800a186:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 800a18a:	8812      	ldrh	r2, [r2, #0]
 800a18c:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 800a18e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a192:	3302      	adds	r3, #2
 800a194:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Val_Offset = Val_Offset;
 800a198:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a19c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800a1a0:	f2a2 122d 	subw	r2, r2, #301	@ 0x12d
 800a1a4:	7812      	ldrb	r2, [r2, #0]
 800a1a6:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800a1a8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a1ac:	3301      	adds	r3, #1
 800a1ae:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 800a1b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a1b6:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800a1ba:	f5a2 7297 	sub.w	r2, r2, #302	@ 0x12e
 800a1be:	7812      	ldrb	r2, [r2, #0]
 800a1c0:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800a1c2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a1c6:	3301      	adds	r3, #1
 800a1c8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 800a1cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a1d0:	1d98      	adds	r0, r3, #6
 800a1d2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a1d6:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 800a1da:	781b      	ldrb	r3, [r3, #0]
 800a1dc:	461a      	mov	r2, r3
 800a1de:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 800a1e2:	f000 fa72 	bl	800a6ca <Osal_MemCpy>
  index_input += Char_Value_Length;
 800a1e6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a1ea:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 800a1ee:	781b      	ldrb	r3, [r3, #0]
 800a1f0:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800a1f4:	4413      	add	r3, r2
 800a1f6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a1fa:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a1fe:	2218      	movs	r2, #24
 800a200:	2100      	movs	r1, #0
 800a202:	4618      	mov	r0, r3
 800a204:	f000 fa71 	bl	800a6ea <Osal_MemSet>
  rq.ogf = 0x3f;
 800a208:	233f      	movs	r3, #63	@ 0x3f
 800a20a:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x106;
 800a20e:	f44f 7383 	mov.w	r3, #262	@ 0x106
 800a212:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800a216:	f107 0310 	add.w	r3, r7, #16
 800a21a:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800a21e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a222:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800a226:	f107 030f 	add.w	r3, r7, #15
 800a22a:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800a22e:	2301      	movs	r3, #1
 800a230:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a234:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a238:	2100      	movs	r1, #0
 800a23a:	4618      	mov	r0, r3
 800a23c:	f000 fcde 	bl	800abfc <hci_send_req>
 800a240:	4603      	mov	r3, r0
 800a242:	2b00      	cmp	r3, #0
 800a244:	da01      	bge.n	800a24a <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 800a246:	23ff      	movs	r3, #255	@ 0xff
 800a248:	e004      	b.n	800a254 <aci_gatt_update_char_value+0x148>
  return status;
 800a24a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a24e:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800a252:	781b      	ldrb	r3, [r3, #0]
}
 800a254:	4618      	mov	r0, r3
 800a256:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800a25a:	46bd      	mov	sp, r7
 800a25c:	bdb0      	pop	{r4, r5, r7, pc}

0800a25e <aci_gatt_confirm_indication>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gatt_confirm_indication( uint16_t Connection_Handle )
{
 800a25e:	b580      	push	{r7, lr}
 800a260:	b0cc      	sub	sp, #304	@ 0x130
 800a262:	af00      	add	r7, sp, #0
 800a264:	4602      	mov	r2, r0
 800a266:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a26a:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800a26e:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_confirm_indication_cp0 *cp0 = (aci_gatt_confirm_indication_cp0*)(cmd_buffer);
 800a270:	f107 0310 	add.w	r3, r7, #16
 800a274:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800a278:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a27c:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800a280:	2200      	movs	r2, #0
 800a282:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800a284:	2300      	movs	r3, #0
 800a286:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 800a28a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a28e:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800a292:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800a296:	8812      	ldrh	r2, [r2, #0]
 800a298:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800a29a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a29e:	3302      	adds	r3, #2
 800a2a0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a2a4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a2a8:	2218      	movs	r2, #24
 800a2aa:	2100      	movs	r1, #0
 800a2ac:	4618      	mov	r0, r3
 800a2ae:	f000 fa1c 	bl	800a6ea <Osal_MemSet>
  rq.ogf = 0x3f;
 800a2b2:	233f      	movs	r3, #63	@ 0x3f
 800a2b4:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x125;
 800a2b8:	f240 1325 	movw	r3, #293	@ 0x125
 800a2bc:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800a2c0:	f107 0310 	add.w	r3, r7, #16
 800a2c4:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800a2c8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a2cc:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800a2d0:	f107 030f 	add.w	r3, r7, #15
 800a2d4:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800a2d8:	2301      	movs	r3, #1
 800a2da:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a2de:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a2e2:	2100      	movs	r1, #0
 800a2e4:	4618      	mov	r0, r3
 800a2e6:	f000 fc89 	bl	800abfc <hci_send_req>
 800a2ea:	4603      	mov	r3, r0
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	da01      	bge.n	800a2f4 <aci_gatt_confirm_indication+0x96>
    return BLE_STATUS_TIMEOUT;
 800a2f0:	23ff      	movs	r3, #255	@ 0xff
 800a2f2:	e004      	b.n	800a2fe <aci_gatt_confirm_indication+0xa0>
  return status;
 800a2f4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a2f8:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800a2fc:	781b      	ldrb	r3, [r3, #0]
}
 800a2fe:	4618      	mov	r0, r3
 800a300:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800a304:	46bd      	mov	sp, r7
 800a306:	bd80      	pop	{r7, pc}

0800a308 <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 800a308:	b580      	push	{r7, lr}
 800a30a:	b0cc      	sub	sp, #304	@ 0x130
 800a30c:	af00      	add	r7, sp, #0
 800a30e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a312:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800a316:	601a      	str	r2, [r3, #0]
 800a318:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a31c:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800a320:	4602      	mov	r2, r0
 800a322:	701a      	strb	r2, [r3, #0]
 800a324:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a328:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800a32c:	460a      	mov	r2, r1
 800a32e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 800a330:	f107 0310 	add.w	r3, r7, #16
 800a334:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800a338:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a33c:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800a340:	2200      	movs	r2, #0
 800a342:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800a344:	2300      	movs	r3, #0
 800a346:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Offset = Offset;
 800a34a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a34e:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800a352:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800a356:	7812      	ldrb	r2, [r2, #0]
 800a358:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800a35a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a35e:	3301      	adds	r3, #1
 800a360:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Length = Length;
 800a364:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a368:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800a36c:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800a370:	7812      	ldrb	r2, [r2, #0]
 800a372:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800a374:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a378:	3301      	adds	r3, #1
 800a37a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 800a37e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a382:	1c98      	adds	r0, r3, #2
 800a384:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a388:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800a38c:	781a      	ldrb	r2, [r3, #0]
 800a38e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a392:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800a396:	6819      	ldr	r1, [r3, #0]
 800a398:	f000 f997 	bl	800a6ca <Osal_MemCpy>
  index_input += Length;
 800a39c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a3a0:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800a3a4:	781b      	ldrb	r3, [r3, #0]
 800a3a6:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800a3aa:	4413      	add	r3, r2
 800a3ac:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a3b0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a3b4:	2218      	movs	r2, #24
 800a3b6:	2100      	movs	r1, #0
 800a3b8:	4618      	mov	r0, r3
 800a3ba:	f000 f996 	bl	800a6ea <Osal_MemSet>
  rq.ogf = 0x3f;
 800a3be:	233f      	movs	r3, #63	@ 0x3f
 800a3c0:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x00c;
 800a3c4:	230c      	movs	r3, #12
 800a3c6:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800a3ca:	f107 0310 	add.w	r3, r7, #16
 800a3ce:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800a3d2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a3d6:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800a3da:	f107 030f 	add.w	r3, r7, #15
 800a3de:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800a3e2:	2301      	movs	r3, #1
 800a3e4:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a3e8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a3ec:	2100      	movs	r1, #0
 800a3ee:	4618      	mov	r0, r3
 800a3f0:	f000 fc04 	bl	800abfc <hci_send_req>
 800a3f4:	4603      	mov	r3, r0
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	da01      	bge.n	800a3fe <aci_hal_write_config_data+0xf6>
    return BLE_STATUS_TIMEOUT;
 800a3fa:	23ff      	movs	r3, #255	@ 0xff
 800a3fc:	e004      	b.n	800a408 <aci_hal_write_config_data+0x100>
  return status;
 800a3fe:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a402:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800a406:	781b      	ldrb	r3, [r3, #0]
}
 800a408:	4618      	mov	r0, r3
 800a40a:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800a40e:	46bd      	mov	sp, r7
 800a410:	bd80      	pop	{r7, pc}

0800a412 <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 800a412:	b580      	push	{r7, lr}
 800a414:	b0cc      	sub	sp, #304	@ 0x130
 800a416:	af00      	add	r7, sp, #0
 800a418:	4602      	mov	r2, r0
 800a41a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a41e:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800a422:	701a      	strb	r2, [r3, #0]
 800a424:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a428:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800a42c:	460a      	mov	r2, r1
 800a42e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 800a430:	f107 0310 	add.w	r3, r7, #16
 800a434:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800a438:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a43c:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800a440:	2200      	movs	r2, #0
 800a442:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800a444:	2300      	movs	r3, #0
 800a446:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->En_High_Power = En_High_Power;
 800a44a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a44e:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800a452:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800a456:	7812      	ldrb	r2, [r2, #0]
 800a458:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800a45a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a45e:	3301      	adds	r3, #1
 800a460:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->PA_Level = PA_Level;
 800a464:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a468:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800a46c:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800a470:	7812      	ldrb	r2, [r2, #0]
 800a472:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800a474:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a478:	3301      	adds	r3, #1
 800a47a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a47e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a482:	2218      	movs	r2, #24
 800a484:	2100      	movs	r1, #0
 800a486:	4618      	mov	r0, r3
 800a488:	f000 f92f 	bl	800a6ea <Osal_MemSet>
  rq.ogf = 0x3f;
 800a48c:	233f      	movs	r3, #63	@ 0x3f
 800a48e:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x00f;
 800a492:	230f      	movs	r3, #15
 800a494:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800a498:	f107 0310 	add.w	r3, r7, #16
 800a49c:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800a4a0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a4a4:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800a4a8:	f107 030f 	add.w	r3, r7, #15
 800a4ac:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800a4b0:	2301      	movs	r3, #1
 800a4b2:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a4b6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a4ba:	2100      	movs	r1, #0
 800a4bc:	4618      	mov	r0, r3
 800a4be:	f000 fb9d 	bl	800abfc <hci_send_req>
 800a4c2:	4603      	mov	r3, r0
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	da01      	bge.n	800a4cc <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 800a4c8:	23ff      	movs	r3, #255	@ 0xff
 800a4ca:	e004      	b.n	800a4d6 <aci_hal_set_tx_power_level+0xc4>
  return status;
 800a4cc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a4d0:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800a4d4:	781b      	ldrb	r3, [r3, #0]
}
 800a4d6:	4618      	mov	r0, r3
 800a4d8:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800a4dc:	46bd      	mov	sp, r7
 800a4de:	bd80      	pop	{r7, pc}

0800a4e0 <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy( (void*)Link_Connection_Handle, (const void*)resp.Link_Connection_Handle, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
 800a4e0:	b580      	push	{r7, lr}
 800a4e2:	b0cc      	sub	sp, #304	@ 0x130
 800a4e4:	af00      	add	r7, sp, #0
 800a4e6:	4602      	mov	r2, r0
 800a4e8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a4ec:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800a4f0:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 800a4f2:	f107 0310 	add.w	r3, r7, #16
 800a4f6:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800a4fa:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a4fe:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800a502:	2200      	movs	r2, #0
 800a504:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800a506:	2300      	movs	r3, #0
 800a508:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 800a50c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a510:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800a514:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800a518:	8812      	ldrh	r2, [r2, #0]
 800a51a:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800a51c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a520:	3302      	adds	r3, #2
 800a522:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a526:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a52a:	2218      	movs	r2, #24
 800a52c:	2100      	movs	r1, #0
 800a52e:	4618      	mov	r0, r3
 800a530:	f000 f8db 	bl	800a6ea <Osal_MemSet>
  rq.ogf = 0x3f;
 800a534:	233f      	movs	r3, #63	@ 0x3f
 800a536:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x018;
 800a53a:	2318      	movs	r3, #24
 800a53c:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800a540:	f107 0310 	add.w	r3, r7, #16
 800a544:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800a548:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a54c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800a550:	f107 030f 	add.w	r3, r7, #15
 800a554:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800a558:	2301      	movs	r3, #1
 800a55a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a55e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a562:	2100      	movs	r1, #0
 800a564:	4618      	mov	r0, r3
 800a566:	f000 fb49 	bl	800abfc <hci_send_req>
 800a56a:	4603      	mov	r3, r0
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	da01      	bge.n	800a574 <aci_hal_set_radio_activity_mask+0x94>
    return BLE_STATUS_TIMEOUT;
 800a570:	23ff      	movs	r3, #255	@ 0xff
 800a572:	e004      	b.n	800a57e <aci_hal_set_radio_activity_mask+0x9e>
  return status;
 800a574:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a578:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800a57c:	781b      	ldrb	r3, [r3, #0]
}
 800a57e:	4618      	mov	r0, r3
 800a580:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800a584:	46bd      	mov	sp, r7
 800a586:	bd80      	pop	{r7, pc}

0800a588 <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 800a588:	b580      	push	{r7, lr}
 800a58a:	b088      	sub	sp, #32
 800a58c:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800a58e:	2300      	movs	r3, #0
 800a590:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a592:	f107 0308 	add.w	r3, r7, #8
 800a596:	2218      	movs	r2, #24
 800a598:	2100      	movs	r1, #0
 800a59a:	4618      	mov	r0, r3
 800a59c:	f000 f8a5 	bl	800a6ea <Osal_MemSet>
  rq.ogf = 0x03;
 800a5a0:	2303      	movs	r3, #3
 800a5a2:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 800a5a4:	2303      	movs	r3, #3
 800a5a6:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800a5a8:	1dfb      	adds	r3, r7, #7
 800a5aa:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800a5ac:	2301      	movs	r3, #1
 800a5ae:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a5b0:	f107 0308 	add.w	r3, r7, #8
 800a5b4:	2100      	movs	r1, #0
 800a5b6:	4618      	mov	r0, r3
 800a5b8:	f000 fb20 	bl	800abfc <hci_send_req>
 800a5bc:	4603      	mov	r3, r0
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	da01      	bge.n	800a5c6 <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 800a5c2:	23ff      	movs	r3, #255	@ 0xff
 800a5c4:	e000      	b.n	800a5c8 <hci_reset+0x40>
  return status;
 800a5c6:	79fb      	ldrb	r3, [r7, #7]
}
 800a5c8:	4618      	mov	r0, r3
 800a5ca:	3720      	adds	r7, #32
 800a5cc:	46bd      	mov	sp, r7
 800a5ce:	bd80      	pop	{r7, pc}

0800a5d0 <hci_le_set_default_phy>:
}

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 800a5d0:	b590      	push	{r4, r7, lr}
 800a5d2:	b0cd      	sub	sp, #308	@ 0x134
 800a5d4:	af00      	add	r7, sp, #0
 800a5d6:	4604      	mov	r4, r0
 800a5d8:	4608      	mov	r0, r1
 800a5da:	4611      	mov	r1, r2
 800a5dc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a5e0:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800a5e4:	4622      	mov	r2, r4
 800a5e6:	701a      	strb	r2, [r3, #0]
 800a5e8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a5ec:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800a5f0:	4602      	mov	r2, r0
 800a5f2:	701a      	strb	r2, [r3, #0]
 800a5f4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a5f8:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 800a5fc:	460a      	mov	r2, r1
 800a5fe:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 800a600:	f107 0310 	add.w	r3, r7, #16
 800a604:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800a608:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a60c:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800a610:	2200      	movs	r2, #0
 800a612:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800a614:	2300      	movs	r3, #0
 800a616:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 800a61a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a61e:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800a622:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800a626:	7812      	ldrb	r2, [r2, #0]
 800a628:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800a62a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a62e:	3301      	adds	r3, #1
 800a630:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->TX_PHYS = TX_PHYS;
 800a634:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a638:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800a63c:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800a640:	7812      	ldrb	r2, [r2, #0]
 800a642:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800a644:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a648:	3301      	adds	r3, #1
 800a64a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->RX_PHYS = RX_PHYS;
 800a64e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a652:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800a656:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 800a65a:	7812      	ldrb	r2, [r2, #0]
 800a65c:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800a65e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a662:	3301      	adds	r3, #1
 800a664:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a668:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a66c:	2218      	movs	r2, #24
 800a66e:	2100      	movs	r1, #0
 800a670:	4618      	mov	r0, r3
 800a672:	f000 f83a 	bl	800a6ea <Osal_MemSet>
  rq.ogf = 0x08;
 800a676:	2308      	movs	r3, #8
 800a678:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x031;
 800a67c:	2331      	movs	r3, #49	@ 0x31
 800a67e:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800a682:	f107 0310 	add.w	r3, r7, #16
 800a686:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800a68a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a68e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800a692:	f107 030f 	add.w	r3, r7, #15
 800a696:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800a69a:	2301      	movs	r3, #1
 800a69c:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a6a0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a6a4:	2100      	movs	r1, #0
 800a6a6:	4618      	mov	r0, r3
 800a6a8:	f000 faa8 	bl	800abfc <hci_send_req>
 800a6ac:	4603      	mov	r3, r0
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	da01      	bge.n	800a6b6 <hci_le_set_default_phy+0xe6>
    return BLE_STATUS_TIMEOUT;
 800a6b2:	23ff      	movs	r3, #255	@ 0xff
 800a6b4:	e004      	b.n	800a6c0 <hci_le_set_default_phy+0xf0>
  return status;
 800a6b6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a6ba:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800a6be:	781b      	ldrb	r3, [r3, #0]
}
 800a6c0:	4618      	mov	r0, r3
 800a6c2:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 800a6c6:	46bd      	mov	sp, r7
 800a6c8:	bd90      	pop	{r4, r7, pc}

0800a6ca <Osal_MemCpy>:
 * Osal_MemCpy
 *
 */

void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 800a6ca:	b580      	push	{r7, lr}
 800a6cc:	b084      	sub	sp, #16
 800a6ce:	af00      	add	r7, sp, #0
 800a6d0:	60f8      	str	r0, [r7, #12]
 800a6d2:	60b9      	str	r1, [r7, #8]
 800a6d4:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size );
 800a6d6:	687a      	ldr	r2, [r7, #4]
 800a6d8:	68b9      	ldr	r1, [r7, #8]
 800a6da:	68f8      	ldr	r0, [r7, #12]
 800a6dc:	f002 fb2e 	bl	800cd3c <memcpy>
 800a6e0:	4603      	mov	r3, r0
}
 800a6e2:	4618      	mov	r0, r3
 800a6e4:	3710      	adds	r7, #16
 800a6e6:	46bd      	mov	sp, r7
 800a6e8:	bd80      	pop	{r7, pc}

0800a6ea <Osal_MemSet>:
 * Osal_MemSet
 *
 */

void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 800a6ea:	b580      	push	{r7, lr}
 800a6ec:	b084      	sub	sp, #16
 800a6ee:	af00      	add	r7, sp, #0
 800a6f0:	60f8      	str	r0, [r7, #12]
 800a6f2:	60b9      	str	r1, [r7, #8]
 800a6f4:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 800a6f6:	687a      	ldr	r2, [r7, #4]
 800a6f8:	68b9      	ldr	r1, [r7, #8]
 800a6fa:	68f8      	ldr	r0, [r7, #12]
 800a6fc:	f002 faec 	bl	800ccd8 <memset>
 800a700:	4603      	mov	r3, r0
}
 800a702:	4618      	mov	r0, r3
 800a704:	3710      	adds	r7, #16
 800a706:	46bd      	mov	sp, r7
 800a708:	bd80      	pop	{r7, pc}

0800a70a <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__WEAK void BAS_Init( void )
{
 800a70a:	b480      	push	{r7}
 800a70c:	af00      	add	r7, sp, #0
  return;
 800a70e:	bf00      	nop
}
 800a710:	46bd      	mov	sp, r7
 800a712:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a716:	4770      	bx	lr

0800a718 <BLS_Init>:

__WEAK void BLS_Init( void )
{
 800a718:	b480      	push	{r7}
 800a71a:	af00      	add	r7, sp, #0
  return;
 800a71c:	bf00      	nop
}
 800a71e:	46bd      	mov	sp, r7
 800a720:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a724:	4770      	bx	lr

0800a726 <CRS_STM_Init>:
__WEAK void CRS_STM_Init( void )
{
 800a726:	b480      	push	{r7}
 800a728:	af00      	add	r7, sp, #0
  return;
 800a72a:	bf00      	nop
}
 800a72c:	46bd      	mov	sp, r7
 800a72e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a732:	4770      	bx	lr

0800a734 <DIS_Init>:
__WEAK void DIS_Init( void )
{
 800a734:	b480      	push	{r7}
 800a736:	af00      	add	r7, sp, #0
  return;
 800a738:	bf00      	nop
}
 800a73a:	46bd      	mov	sp, r7
 800a73c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a740:	4770      	bx	lr

0800a742 <EDS_STM_Init>:
__WEAK void EDS_STM_Init( void )
{
 800a742:	b480      	push	{r7}
 800a744:	af00      	add	r7, sp, #0
  return;
 800a746:	bf00      	nop
}
 800a748:	46bd      	mov	sp, r7
 800a74a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a74e:	4770      	bx	lr

0800a750 <HIDS_Init>:
__WEAK void HIDS_Init( void )
{
 800a750:	b480      	push	{r7}
 800a752:	af00      	add	r7, sp, #0
  return;
 800a754:	bf00      	nop
}
 800a756:	46bd      	mov	sp, r7
 800a758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a75c:	4770      	bx	lr

0800a75e <HRS_Init>:
__WEAK void HRS_Init( void )
{
 800a75e:	b480      	push	{r7}
 800a760:	af00      	add	r7, sp, #0
  return;
 800a762:	bf00      	nop
}
 800a764:	46bd      	mov	sp, r7
 800a766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a76a:	4770      	bx	lr

0800a76c <HTS_Init>:
__WEAK void HTS_Init( void )
{
 800a76c:	b480      	push	{r7}
 800a76e:	af00      	add	r7, sp, #0
  return;
 800a770:	bf00      	nop
}
 800a772:	46bd      	mov	sp, r7
 800a774:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a778:	4770      	bx	lr

0800a77a <IAS_Init>:
__WEAK void IAS_Init( void )
{
 800a77a:	b480      	push	{r7}
 800a77c:	af00      	add	r7, sp, #0
  return;
 800a77e:	bf00      	nop
}
 800a780:	46bd      	mov	sp, r7
 800a782:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a786:	4770      	bx	lr

0800a788 <LLS_Init>:
__WEAK void LLS_Init( void )
{
 800a788:	b480      	push	{r7}
 800a78a:	af00      	add	r7, sp, #0
  return;
 800a78c:	bf00      	nop
}
 800a78e:	46bd      	mov	sp, r7
 800a790:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a794:	4770      	bx	lr

0800a796 <TPS_Init>:
__WEAK void TPS_Init( void )
{
 800a796:	b480      	push	{r7}
 800a798:	af00      	add	r7, sp, #0
  return;
 800a79a:	bf00      	nop
}
 800a79c:	46bd      	mov	sp, r7
 800a79e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7a2:	4770      	bx	lr

0800a7a4 <MOTENV_STM_Init>:
__WEAK void MOTENV_STM_Init( void )
{
 800a7a4:	b480      	push	{r7}
 800a7a6:	af00      	add	r7, sp, #0
  return;
 800a7a8:	bf00      	nop
}
 800a7aa:	46bd      	mov	sp, r7
 800a7ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7b0:	4770      	bx	lr

0800a7b2 <P2PS_STM_Init>:
__WEAK void P2PS_STM_Init( void )
{
 800a7b2:	b480      	push	{r7}
 800a7b4:	af00      	add	r7, sp, #0
  return;
 800a7b6:	bf00      	nop
}
 800a7b8:	46bd      	mov	sp, r7
 800a7ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7be:	4770      	bx	lr

0800a7c0 <ZDD_STM_Init>:
__WEAK void ZDD_STM_Init( void )
{
 800a7c0:	b480      	push	{r7}
 800a7c2:	af00      	add	r7, sp, #0
  return;
 800a7c4:	bf00      	nop
}
 800a7c6:	46bd      	mov	sp, r7
 800a7c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7cc:	4770      	bx	lr

0800a7ce <OTAS_STM_Init>:
__WEAK void OTAS_STM_Init( void )
{
 800a7ce:	b480      	push	{r7}
 800a7d0:	af00      	add	r7, sp, #0
  return;
 800a7d2:	bf00      	nop
}
 800a7d4:	46bd      	mov	sp, r7
 800a7d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7da:	4770      	bx	lr

0800a7dc <MESH_Init>:
__WEAK void MESH_Init( void )
{
 800a7dc:	b480      	push	{r7}
 800a7de:	af00      	add	r7, sp, #0
  return;
 800a7e0:	bf00      	nop
}
 800a7e2:	46bd      	mov	sp, r7
 800a7e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7e8:	4770      	bx	lr

0800a7ea <BVOPUS_STM_Init>:
__WEAK void BVOPUS_STM_Init( void )
{
 800a7ea:	b480      	push	{r7}
 800a7ec:	af00      	add	r7, sp, #0
  return;
 800a7ee:	bf00      	nop
}
 800a7f0:	46bd      	mov	sp, r7
 800a7f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7f6:	4770      	bx	lr

0800a7f8 <SVCCTL_Init>:
}

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 800a7f8:	b580      	push	{r7, lr}
 800a7fa:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 800a7fc:	4b04      	ldr	r3, [pc, #16]	@ (800a810 <SVCCTL_Init+0x18>)
 800a7fe:	2200      	movs	r2, #0
 800a800:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 800a802:	4b04      	ldr	r3, [pc, #16]	@ (800a814 <SVCCTL_Init+0x1c>)
 800a804:	2200      	movs	r2, #0
 800a806:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 800a808:	f000 f806 	bl	800a818 <SVCCTL_SvcInit>

  return;
 800a80c:	bf00      	nop
}
 800a80e:	bd80      	pop	{r7, pc}
 800a810:	200000c8 	.word	0x200000c8
 800a814:	200000e8 	.word	0x200000e8

0800a818 <SVCCTL_SvcInit>:

__WEAK void SVCCTL_SvcInit(void)
{
 800a818:	b580      	push	{r7, lr}
 800a81a:	af00      	add	r7, sp, #0
  BAS_Init();
 800a81c:	f7ff ff75 	bl	800a70a <BAS_Init>

  BLS_Init();
 800a820:	f7ff ff7a 	bl	800a718 <BLS_Init>

  CRS_STM_Init();
 800a824:	f7ff ff7f 	bl	800a726 <CRS_STM_Init>

  DIS_Init();
 800a828:	f7ff ff84 	bl	800a734 <DIS_Init>

  EDS_STM_Init();
 800a82c:	f7ff ff89 	bl	800a742 <EDS_STM_Init>

  HIDS_Init();
 800a830:	f7ff ff8e 	bl	800a750 <HIDS_Init>

  HRS_Init();
 800a834:	f7ff ff93 	bl	800a75e <HRS_Init>

  HTS_Init();
 800a838:	f7ff ff98 	bl	800a76c <HTS_Init>

  IAS_Init();
 800a83c:	f7ff ff9d 	bl	800a77a <IAS_Init>

  LLS_Init();
 800a840:	f7ff ffa2 	bl	800a788 <LLS_Init>

  TPS_Init();
 800a844:	f7ff ffa7 	bl	800a796 <TPS_Init>

  MOTENV_STM_Init();
 800a848:	f7ff ffac 	bl	800a7a4 <MOTENV_STM_Init>

  P2PS_STM_Init();
 800a84c:	f7ff ffb1 	bl	800a7b2 <P2PS_STM_Init>

  ZDD_STM_Init();
 800a850:	f7ff ffb6 	bl	800a7c0 <ZDD_STM_Init>

  OTAS_STM_Init();
 800a854:	f7ff ffbb 	bl	800a7ce <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 800a858:	f7ff ffc7 	bl	800a7ea <BVOPUS_STM_Init>

  MESH_Init();
 800a85c:	f7ff ffbe 	bl	800a7dc <MESH_Init>

  SVCCTL_InitCustomSvc();
 800a860:	f001 fc80 	bl	800c164 <SVCCTL_InitCustomSvc>
  
  return;
 800a864:	bf00      	nop
}
 800a866:	bd80      	pop	{r7, pc}

0800a868 <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 800a868:	b480      	push	{r7}
 800a86a:	b083      	sub	sp, #12
 800a86c:	af00      	add	r7, sp, #0
 800a86e:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 800a870:	4b09      	ldr	r3, [pc, #36]	@ (800a898 <SVCCTL_RegisterSvcHandler+0x30>)
 800a872:	7f1b      	ldrb	r3, [r3, #28]
 800a874:	4619      	mov	r1, r3
 800a876:	4a08      	ldr	r2, [pc, #32]	@ (800a898 <SVCCTL_RegisterSvcHandler+0x30>)
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 800a87e:	4b06      	ldr	r3, [pc, #24]	@ (800a898 <SVCCTL_RegisterSvcHandler+0x30>)
 800a880:	7f1b      	ldrb	r3, [r3, #28]
 800a882:	3301      	adds	r3, #1
 800a884:	b2da      	uxtb	r2, r3
 800a886:	4b04      	ldr	r3, [pc, #16]	@ (800a898 <SVCCTL_RegisterSvcHandler+0x30>)
 800a888:	771a      	strb	r2, [r3, #28]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 800a88a:	bf00      	nop
}
 800a88c:	370c      	adds	r7, #12
 800a88e:	46bd      	mov	sp, r7
 800a890:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a894:	4770      	bx	lr
 800a896:	bf00      	nop
 800a898:	200000c8 	.word	0x200000c8

0800a89c <SVCCTL_UserEvtRx>:

  return;
}

__WEAK SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 800a89c:	b580      	push	{r7, lr}
 800a89e:	b086      	sub	sp, #24
 800a8a0:	af00      	add	r7, sp, #0
 800a8a2:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	3301      	adds	r3, #1
 800a8a8:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 800a8aa:	2300      	movs	r3, #0
 800a8ac:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 800a8ae:	693b      	ldr	r3, [r7, #16]
 800a8b0:	781b      	ldrb	r3, [r3, #0]
 800a8b2:	2bff      	cmp	r3, #255	@ 0xff
 800a8b4:	d125      	bne.n	800a902 <SVCCTL_UserEvtRx+0x66>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 800a8b6:	693b      	ldr	r3, [r7, #16]
 800a8b8:	3302      	adds	r3, #2
 800a8ba:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	881b      	ldrh	r3, [r3, #0]
 800a8c0:	b29b      	uxth	r3, r3
 800a8c2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800a8c6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a8ca:	d118      	bne.n	800a8fe <SVCCTL_UserEvtRx+0x62>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800a8cc:	2300      	movs	r3, #0
 800a8ce:	757b      	strb	r3, [r7, #21]
 800a8d0:	e00d      	b.n	800a8ee <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 800a8d2:	7d7b      	ldrb	r3, [r7, #21]
 800a8d4:	4a1a      	ldr	r2, [pc, #104]	@ (800a940 <SVCCTL_UserEvtRx+0xa4>)
 800a8d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a8da:	6878      	ldr	r0, [r7, #4]
 800a8dc:	4798      	blx	r3
 800a8de:	4603      	mov	r3, r0
 800a8e0:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 800a8e2:	7dfb      	ldrb	r3, [r7, #23]
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d108      	bne.n	800a8fa <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800a8e8:	7d7b      	ldrb	r3, [r7, #21]
 800a8ea:	3301      	adds	r3, #1
 800a8ec:	757b      	strb	r3, [r7, #21]
 800a8ee:	4b14      	ldr	r3, [pc, #80]	@ (800a940 <SVCCTL_UserEvtRx+0xa4>)
 800a8f0:	7f1b      	ldrb	r3, [r3, #28]
 800a8f2:	7d7a      	ldrb	r2, [r7, #21]
 800a8f4:	429a      	cmp	r2, r3
 800a8f6:	d3ec      	bcc.n	800a8d2 <SVCCTL_UserEvtRx+0x36>
               */
              break;
            }
          }
#endif
          break;
 800a8f8:	e002      	b.n	800a900 <SVCCTL_UserEvtRx+0x64>
              break;
 800a8fa:	bf00      	nop
          break;
 800a8fc:	e000      	b.n	800a900 <SVCCTL_UserEvtRx+0x64>

        default:
          break;
 800a8fe:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 800a900:	e000      	b.n	800a904 <SVCCTL_UserEvtRx+0x68>

    default:
      break;
 800a902:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the application.
   */
  switch (event_notification_status)
 800a904:	7dfb      	ldrb	r3, [r7, #23]
 800a906:	2b02      	cmp	r3, #2
 800a908:	d00f      	beq.n	800a92a <SVCCTL_UserEvtRx+0x8e>
 800a90a:	2b02      	cmp	r3, #2
 800a90c:	dc10      	bgt.n	800a930 <SVCCTL_UserEvtRx+0x94>
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d002      	beq.n	800a918 <SVCCTL_UserEvtRx+0x7c>
 800a912:	2b01      	cmp	r3, #1
 800a914:	d006      	beq.n	800a924 <SVCCTL_UserEvtRx+0x88>
 800a916:	e00b      	b.n	800a930 <SVCCTL_UserEvtRx+0x94>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 800a918:	6878      	ldr	r0, [r7, #4]
 800a91a:	f000 ff9b 	bl	800b854 <SVCCTL_App_Notification>
 800a91e:	4603      	mov	r3, r0
 800a920:	75bb      	strb	r3, [r7, #22]
      break;
 800a922:	e008      	b.n	800a936 <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 800a924:	2301      	movs	r3, #1
 800a926:	75bb      	strb	r3, [r7, #22]
      break;
 800a928:	e005      	b.n	800a936 <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 800a92a:	2300      	movs	r3, #0
 800a92c:	75bb      	strb	r3, [r7, #22]
      break;
 800a92e:	e002      	b.n	800a936 <SVCCTL_UserEvtRx+0x9a>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 800a930:	2301      	movs	r3, #1
 800a932:	75bb      	strb	r3, [r7, #22]
      break;
 800a934:	bf00      	nop
  }

  return (return_status);
 800a936:	7dbb      	ldrb	r3, [r7, #22]
}
 800a938:	4618      	mov	r0, r3
 800a93a:	3718      	adds	r7, #24
 800a93c:	46bd      	mov	sp, r7
 800a93e:	bd80      	pop	{r7, pc}
 800a940:	200000c8 	.word	0x200000c8

0800a944 <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 800a944:	b580      	push	{r7, lr}
 800a946:	b088      	sub	sp, #32
 800a948:	af00      	add	r7, sp, #0
 800a94a:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800a94c:	f107 030c 	add.w	r3, r7, #12
 800a950:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 800a958:	69fb      	ldr	r3, [r7, #28]
 800a95a:	212e      	movs	r1, #46	@ 0x2e
 800a95c:	f64f 4066 	movw	r0, #64614	@ 0xfc66
 800a960:	f000 fae8 	bl	800af34 <shci_send>
            p_rsp );
 
  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800a964:	69fb      	ldr	r3, [r7, #28]
 800a966:	330b      	adds	r3, #11
 800a968:	78db      	ldrb	r3, [r3, #3]
}
 800a96a:	4618      	mov	r0, r3
 800a96c:	3720      	adds	r7, #32
 800a96e:	46bd      	mov	sp, r7
 800a970:	bd80      	pop	{r7, pc}

0800a972 <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 800a972:	b580      	push	{r7, lr}
 800a974:	b088      	sub	sp, #32
 800a976:	af00      	add	r7, sp, #0
 800a978:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800a97a:	f107 030c 	add.w	r3, r7, #12
 800a97e:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 800a986:	69fb      	ldr	r3, [r7, #28]
 800a988:	210f      	movs	r1, #15
 800a98a:	f64f 4068 	movw	r0, #64616	@ 0xfc68
 800a98e:	f000 fad1 	bl	800af34 <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800a992:	69fb      	ldr	r3, [r7, #28]
 800a994:	330b      	adds	r3, #11
 800a996:	78db      	ldrb	r3, [r3, #3]
}
 800a998:	4618      	mov	r0, r3
 800a99a:	3720      	adds	r7, #32
 800a99c:	46bd      	mov	sp, r7
 800a99e:	bd80      	pop	{r7, pc}

0800a9a0 <SHCI_C2_Config>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_Config(SHCI_C2_CONFIG_Cmd_Param_t *pCmdPacket)
{
 800a9a0:	b580      	push	{r7, lr}
 800a9a2:	b088      	sub	sp, #32
 800a9a4:	af00      	add	r7, sp, #0
 800a9a6:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800a9a8:	f107 030c 	add.w	r3, r7, #12
 800a9ac:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_CONFIG,
 800a9ae:	69fb      	ldr	r3, [r7, #28]
 800a9b0:	687a      	ldr	r2, [r7, #4]
 800a9b2:	2110      	movs	r1, #16
 800a9b4:	f64f 4075 	movw	r0, #64629	@ 0xfc75
 800a9b8:	f000 fabc 	bl	800af34 <shci_send>
             sizeof(SHCI_C2_CONFIG_Cmd_Param_t),
             (uint8_t*)pCmdPacket,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800a9bc:	69fb      	ldr	r3, [r7, #28]
 800a9be:	330b      	adds	r3, #11
 800a9c0:	78db      	ldrb	r3, [r3, #3]
}
 800a9c2:	4618      	mov	r0, r3
 800a9c4:	3720      	adds	r7, #32
 800a9c6:	46bd      	mov	sp, r7
 800a9c8:	bd80      	pop	{r7, pc}
	...

0800a9cc <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 800a9cc:	b480      	push	{r7}
 800a9ce:	b08b      	sub	sp, #44	@ 0x2c
 800a9d0:	af00      	add	r7, sp, #0
 800a9d2:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 800a9d4:	2300      	movs	r3, #0
 800a9d6:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 800a9d8:	2300      	movs	r3, #0
 800a9da:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 800a9dc:	2300      	movs	r3, #0
 800a9de:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t wireless_firmware_memorySize = 0;
 800a9e0:	2300      	movs	r3, #0
 800a9e2:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 800a9e4:	2300      	movs	r3, #0
 800a9e6:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 800a9e8:	2300      	movs	r3, #0
 800a9ea:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 800a9ec:	2300      	movs	r3, #0
 800a9ee:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 800a9f0:	2300      	movs	r3, #0
 800a9f2:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 800a9f4:	4b4a      	ldr	r3, [pc, #296]	@ (800ab20 <SHCI_GetWirelessFwInfo+0x154>)
 800a9f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a9f8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800a9fc:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 800a9fe:	693b      	ldr	r3, [r7, #16]
 800aa00:	009b      	lsls	r3, r3, #2
 800aa02:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 800aa06:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 800aa0e:	68bb      	ldr	r3, [r7, #8]
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	4a44      	ldr	r2, [pc, #272]	@ (800ab24 <SHCI_GetWirelessFwInfo+0x158>)
 800aa14:	4293      	cmp	r3, r2
 800aa16:	d10f      	bne.n	800aa38 <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 800aa18:	68bb      	ldr	r3, [r7, #8]
 800aa1a:	695b      	ldr	r3, [r3, #20]
 800aa1c:	627b      	str	r3, [r7, #36]	@ 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 800aa1e:	68bb      	ldr	r3, [r7, #8]
 800aa20:	699b      	ldr	r3, [r3, #24]
 800aa22:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 800aa24:	68bb      	ldr	r3, [r7, #8]
 800aa26:	69db      	ldr	r3, [r3, #28]
 800aa28:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 800aa2a:	68bb      	ldr	r3, [r7, #8]
 800aa2c:	68db      	ldr	r3, [r3, #12]
 800aa2e:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 800aa30:	68bb      	ldr	r3, [r7, #8]
 800aa32:	691b      	ldr	r3, [r3, #16]
 800aa34:	617b      	str	r3, [r7, #20]
 800aa36:	e01a      	b.n	800aa6e <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 800aa38:	693b      	ldr	r3, [r7, #16]
 800aa3a:	009b      	lsls	r3, r3, #2
 800aa3c:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 800aa40:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 800aa44:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	691b      	ldr	r3, [r3, #16]
 800aa4c:	627b      	str	r3, [r7, #36]	@ 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	695b      	ldr	r3, [r3, #20]
 800aa54:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	699b      	ldr	r3, [r3, #24]
 800aa5c:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	685b      	ldr	r3, [r3, #4]
 800aa64:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	689b      	ldr	r3, [r3, #8]
 800aa6c:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 800aa6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa70:	0e1b      	lsrs	r3, r3, #24
 800aa72:	b2da      	uxtb	r2, r3
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 800aa78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa7a:	0c1b      	lsrs	r3, r3, #16
 800aa7c:	b2da      	uxtb	r2, r3
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 800aa82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa84:	0a1b      	lsrs	r3, r3, #8
 800aa86:	b2da      	uxtb	r2, r3
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 800aa8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa8e:	091b      	lsrs	r3, r3, #4
 800aa90:	b2db      	uxtb	r3, r3
 800aa92:	f003 030f 	and.w	r3, r3, #15
 800aa96:	b2da      	uxtb	r2, r3
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 800aa9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa9e:	b2db      	uxtb	r3, r3
 800aaa0:	f003 030f 	and.w	r3, r3, #15
 800aaa4:	b2da      	uxtb	r2, r3
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800aaaa:	6a3b      	ldr	r3, [r7, #32]
 800aaac:	0e1b      	lsrs	r3, r3, #24
 800aaae:	b2da      	uxtb	r2, r3
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 800aab4:	6a3b      	ldr	r3, [r7, #32]
 800aab6:	0c1b      	lsrs	r3, r3, #16
 800aab8:	b2da      	uxtb	r2, r3
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 800aabe:	6a3b      	ldr	r3, [r7, #32]
 800aac0:	0a1b      	lsrs	r3, r3, #8
 800aac2:	b2da      	uxtb	r2, r3
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 800aac8:	6a3b      	ldr	r3, [r7, #32]
 800aaca:	b2da      	uxtb	r2, r3
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 800aad0:	69fb      	ldr	r3, [r7, #28]
 800aad2:	b2da      	uxtb	r2, r3
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 800aad8:	69bb      	ldr	r3, [r7, #24]
 800aada:	0e1b      	lsrs	r3, r3, #24
 800aadc:	b2da      	uxtb	r2, r3
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 800aae2:	69bb      	ldr	r3, [r7, #24]
 800aae4:	0c1b      	lsrs	r3, r3, #16
 800aae6:	b2da      	uxtb	r2, r3
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 800aaec:	69bb      	ldr	r3, [r7, #24]
 800aaee:	0a1b      	lsrs	r3, r3, #8
 800aaf0:	b2da      	uxtb	r2, r3
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800aaf6:	697b      	ldr	r3, [r7, #20]
 800aaf8:	0e1b      	lsrs	r3, r3, #24
 800aafa:	b2da      	uxtb	r2, r3
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 800ab00:	697b      	ldr	r3, [r7, #20]
 800ab02:	0c1b      	lsrs	r3, r3, #16
 800ab04:	b2da      	uxtb	r2, r3
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 800ab0a:	697b      	ldr	r3, [r7, #20]
 800ab0c:	b2da      	uxtb	r2, r3
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 800ab12:	2300      	movs	r3, #0
}
 800ab14:	4618      	mov	r0, r3
 800ab16:	372c      	adds	r7, #44	@ 0x2c
 800ab18:	46bd      	mov	sp, r7
 800ab1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab1e:	4770      	bx	lr
 800ab20:	58004000 	.word	0x58004000
 800ab24:	a94656b9 	.word	0xa94656b9

0800ab28 <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800ab28:	b580      	push	{r7, lr}
 800ab2a:	b082      	sub	sp, #8
 800ab2c:	af00      	add	r7, sp, #0
 800ab2e:	6078      	str	r0, [r7, #4]
 800ab30:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800ab32:	683b      	ldr	r3, [r7, #0]
 800ab34:	685b      	ldr	r3, [r3, #4]
 800ab36:	4a08      	ldr	r2, [pc, #32]	@ (800ab58 <hci_init+0x30>)
 800ab38:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 800ab3a:	4a08      	ldr	r2, [pc, #32]	@ (800ab5c <hci_init+0x34>)
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 800ab40:	4806      	ldr	r0, [pc, #24]	@ (800ab5c <hci_init+0x34>)
 800ab42:	f000 f979 	bl	800ae38 <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800ab46:	683b      	ldr	r3, [r7, #0]
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	4618      	mov	r0, r3
 800ab4c:	f000 f8da 	bl	800ad04 <TlInit>

  return;
 800ab50:	bf00      	nop
}
 800ab52:	3708      	adds	r7, #8
 800ab54:	46bd      	mov	sp, r7
 800ab56:	bd80      	pop	{r7, pc}
 800ab58:	200004fc 	.word	0x200004fc
 800ab5c:	200004d4 	.word	0x200004d4

0800ab60 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 800ab60:	b580      	push	{r7, lr}
 800ab62:	b084      	sub	sp, #16
 800ab64:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800ab66:	4822      	ldr	r0, [pc, #136]	@ (800abf0 <hci_user_evt_proc+0x90>)
 800ab68:	f000 fd32 	bl	800b5d0 <LST_is_empty>
 800ab6c:	4603      	mov	r3, r0
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d12b      	bne.n	800abca <hci_user_evt_proc+0x6a>
 800ab72:	4b20      	ldr	r3, [pc, #128]	@ (800abf4 <hci_user_evt_proc+0x94>)
 800ab74:	781b      	ldrb	r3, [r3, #0]
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d027      	beq.n	800abca <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800ab7a:	f107 030c 	add.w	r3, r7, #12
 800ab7e:	4619      	mov	r1, r3
 800ab80:	481b      	ldr	r0, [pc, #108]	@ (800abf0 <hci_user_evt_proc+0x90>)
 800ab82:	f000 fdb4 	bl	800b6ee <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 800ab86:	4b1c      	ldr	r3, [pc, #112]	@ (800abf8 <hci_user_evt_proc+0x98>)
 800ab88:	69db      	ldr	r3, [r3, #28]
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d00c      	beq.n	800aba8 <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 800ab92:	2301      	movs	r3, #1
 800ab94:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 800ab96:	4b18      	ldr	r3, [pc, #96]	@ (800abf8 <hci_user_evt_proc+0x98>)
 800ab98:	69db      	ldr	r3, [r3, #28]
 800ab9a:	1d3a      	adds	r2, r7, #4
 800ab9c:	4610      	mov	r0, r2
 800ab9e:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 800aba0:	793a      	ldrb	r2, [r7, #4]
 800aba2:	4b14      	ldr	r3, [pc, #80]	@ (800abf4 <hci_user_evt_proc+0x94>)
 800aba4:	701a      	strb	r2, [r3, #0]
 800aba6:	e002      	b.n	800abae <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800aba8:	4b12      	ldr	r3, [pc, #72]	@ (800abf4 <hci_user_evt_proc+0x94>)
 800abaa:	2201      	movs	r2, #1
 800abac:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 800abae:	4b11      	ldr	r3, [pc, #68]	@ (800abf4 <hci_user_evt_proc+0x94>)
 800abb0:	781b      	ldrb	r3, [r3, #0]
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d004      	beq.n	800abc0 <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	4618      	mov	r0, r3
 800abba:	f000 fc0d 	bl	800b3d8 <TL_MM_EvtDone>
 800abbe:	e004      	b.n	800abca <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	4619      	mov	r1, r3
 800abc4:	480a      	ldr	r0, [pc, #40]	@ (800abf0 <hci_user_evt_proc+0x90>)
 800abc6:	f000 fd25 	bl	800b614 <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800abca:	4809      	ldr	r0, [pc, #36]	@ (800abf0 <hci_user_evt_proc+0x90>)
 800abcc:	f000 fd00 	bl	800b5d0 <LST_is_empty>
 800abd0:	4603      	mov	r3, r0
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d107      	bne.n	800abe6 <hci_user_evt_proc+0x86>
 800abd6:	4b07      	ldr	r3, [pc, #28]	@ (800abf4 <hci_user_evt_proc+0x94>)
 800abd8:	781b      	ldrb	r3, [r3, #0]
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d003      	beq.n	800abe6 <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 800abde:	4804      	ldr	r0, [pc, #16]	@ (800abf0 <hci_user_evt_proc+0x90>)
 800abe0:	f001 f85e 	bl	800bca0 <hci_notify_asynch_evt>
  }


  return;
 800abe4:	bf00      	nop
 800abe6:	bf00      	nop
}
 800abe8:	3710      	adds	r7, #16
 800abea:	46bd      	mov	sp, r7
 800abec:	bd80      	pop	{r7, pc}
 800abee:	bf00      	nop
 800abf0:	200000f0 	.word	0x200000f0
 800abf4:	200000fc 	.word	0x200000fc
 800abf8:	200004d4 	.word	0x200004d4

0800abfc <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 800abfc:	b580      	push	{r7, lr}
 800abfe:	b088      	sub	sp, #32
 800ac00:	af00      	add	r7, sp, #0
 800ac02:	6078      	str	r0, [r7, #4]
 800ac04:	460b      	mov	r3, r1
 800ac06:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 800ac08:	2000      	movs	r0, #0
 800ac0a:	f000 f8d1 	bl	800adb0 <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 800ac0e:	2300      	movs	r3, #0
 800ac10:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	885b      	ldrh	r3, [r3, #2]
 800ac16:	b21b      	sxth	r3, r3
 800ac18:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ac1c:	b21a      	sxth	r2, r3
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	881b      	ldrh	r3, [r3, #0]
 800ac22:	029b      	lsls	r3, r3, #10
 800ac24:	b21b      	sxth	r3, r3
 800ac26:	4313      	orrs	r3, r2
 800ac28:	b21b      	sxth	r3, r3
 800ac2a:	83bb      	strh	r3, [r7, #28]
  
  CmdRspStatusFlag = HCI_TL_CMD_RESP_WAIT;
 800ac2c:	4b33      	ldr	r3, [pc, #204]	@ (800acfc <hci_send_req+0x100>)
 800ac2e:	2201      	movs	r2, #1
 800ac30:	701a      	strb	r2, [r3, #0]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	68db      	ldr	r3, [r3, #12]
 800ac36:	b2d9      	uxtb	r1, r3
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	689a      	ldr	r2, [r3, #8]
 800ac3c:	8bbb      	ldrh	r3, [r7, #28]
 800ac3e:	4618      	mov	r0, r3
 800ac40:	f000 f890 	bl	800ad64 <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 800ac44:	e04e      	b.n	800ace4 <hci_send_req+0xe8>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 800ac46:	f248 00e8 	movw	r0, #33000	@ 0x80e8
 800ac4a:	f001 f840 	bl	800bcce <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800ac4e:	e043      	b.n	800acd8 <hci_send_req+0xdc>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 800ac50:	f107 030c 	add.w	r3, r7, #12
 800ac54:	4619      	mov	r1, r3
 800ac56:	482a      	ldr	r0, [pc, #168]	@ (800ad00 <hci_send_req+0x104>)
 800ac58:	f000 fd49 	bl	800b6ee <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	7a5b      	ldrb	r3, [r3, #9]
 800ac60:	2b0f      	cmp	r3, #15
 800ac62:	d114      	bne.n	800ac8e <hci_send_req+0x92>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	330b      	adds	r3, #11
 800ac68:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 800ac6a:	693b      	ldr	r3, [r7, #16]
 800ac6c:	885b      	ldrh	r3, [r3, #2]
 800ac6e:	b29b      	uxth	r3, r3
 800ac70:	8bba      	ldrh	r2, [r7, #28]
 800ac72:	429a      	cmp	r2, r3
 800ac74:	d104      	bne.n	800ac80 <hci_send_req+0x84>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	691b      	ldr	r3, [r3, #16]
 800ac7a:	693a      	ldr	r2, [r7, #16]
 800ac7c:	7812      	ldrb	r2, [r2, #0]
 800ac7e:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 800ac80:	693b      	ldr	r3, [r7, #16]
 800ac82:	785b      	ldrb	r3, [r3, #1]
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d027      	beq.n	800acd8 <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800ac88:	2301      	movs	r3, #1
 800ac8a:	77fb      	strb	r3, [r7, #31]
 800ac8c:	e024      	b.n	800acd8 <hci_send_req+0xdc>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	330b      	adds	r3, #11
 800ac92:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 800ac94:	69bb      	ldr	r3, [r7, #24]
 800ac96:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800ac9a:	b29b      	uxth	r3, r3
 800ac9c:	8bba      	ldrh	r2, [r7, #28]
 800ac9e:	429a      	cmp	r2, r3
 800aca0:	d114      	bne.n	800accc <hci_send_req+0xd0>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	7a9b      	ldrb	r3, [r3, #10]
 800aca6:	3b03      	subs	r3, #3
 800aca8:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	695a      	ldr	r2, [r3, #20]
 800acae:	7dfb      	ldrb	r3, [r7, #23]
 800acb0:	429a      	cmp	r2, r3
 800acb2:	bfa8      	it	ge
 800acb4:	461a      	movge	r2, r3
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	6918      	ldr	r0, [r3, #16]
 800acbe:	69bb      	ldr	r3, [r7, #24]
 800acc0:	1cd9      	adds	r1, r3, #3
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	695b      	ldr	r3, [r3, #20]
 800acc6:	461a      	mov	r2, r3
 800acc8:	f002 f838 	bl	800cd3c <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 800accc:	69bb      	ldr	r3, [r7, #24]
 800acce:	781b      	ldrb	r3, [r3, #0]
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	d001      	beq.n	800acd8 <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800acd4:	2301      	movs	r3, #1
 800acd6:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800acd8:	4809      	ldr	r0, [pc, #36]	@ (800ad00 <hci_send_req+0x104>)
 800acda:	f000 fc79 	bl	800b5d0 <LST_is_empty>
 800acde:	4603      	mov	r3, r0
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	d0b5      	beq.n	800ac50 <hci_send_req+0x54>
  while(local_cmd_status == HCI_TL_CmdBusy)
 800ace4:	7ffb      	ldrb	r3, [r7, #31]
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d0ad      	beq.n	800ac46 <hci_send_req+0x4a>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 800acea:	2001      	movs	r0, #1
 800acec:	f000 f860 	bl	800adb0 <NotifyCmdStatus>

  return 0;
 800acf0:	2300      	movs	r3, #0
}
 800acf2:	4618      	mov	r0, r3
 800acf4:	3720      	adds	r7, #32
 800acf6:	46bd      	mov	sp, r7
 800acf8:	bd80      	pop	{r7, pc}
 800acfa:	bf00      	nop
 800acfc:	20000500 	.word	0x20000500
 800ad00:	200004f4 	.word	0x200004f4

0800ad04 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800ad04:	b580      	push	{r7, lr}
 800ad06:	b086      	sub	sp, #24
 800ad08:	af00      	add	r7, sp, #0
 800ad0a:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 800ad0c:	480f      	ldr	r0, [pc, #60]	@ (800ad4c <TlInit+0x48>)
 800ad0e:	f000 fc4f 	bl	800b5b0 <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 800ad12:	4a0f      	ldr	r2, [pc, #60]	@ (800ad50 <TlInit+0x4c>)
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 800ad18:	480e      	ldr	r0, [pc, #56]	@ (800ad54 <TlInit+0x50>)
 800ad1a:	f000 fc49 	bl	800b5b0 <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800ad1e:	4b0e      	ldr	r3, [pc, #56]	@ (800ad58 <TlInit+0x54>)
 800ad20:	2201      	movs	r2, #1
 800ad22:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 800ad24:	4b0d      	ldr	r3, [pc, #52]	@ (800ad5c <TlInit+0x58>)
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d00a      	beq.n	800ad42 <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 800ad30:	4b0b      	ldr	r3, [pc, #44]	@ (800ad60 <TlInit+0x5c>)
 800ad32:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 800ad34:	4b09      	ldr	r3, [pc, #36]	@ (800ad5c <TlInit+0x58>)
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	f107 0208 	add.w	r2, r7, #8
 800ad3c:	4610      	mov	r0, r2
 800ad3e:	4798      	blx	r3
  }

  return;
 800ad40:	bf00      	nop
 800ad42:	bf00      	nop
}
 800ad44:	3718      	adds	r7, #24
 800ad46:	46bd      	mov	sp, r7
 800ad48:	bd80      	pop	{r7, pc}
 800ad4a:	bf00      	nop
 800ad4c:	200004f4 	.word	0x200004f4
 800ad50:	200000f8 	.word	0x200000f8
 800ad54:	200000f0 	.word	0x200000f0
 800ad58:	200000fc 	.word	0x200000fc
 800ad5c:	200004d4 	.word	0x200004d4
 800ad60:	0800adf1 	.word	0x0800adf1

0800ad64 <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 800ad64:	b580      	push	{r7, lr}
 800ad66:	b082      	sub	sp, #8
 800ad68:	af00      	add	r7, sp, #0
 800ad6a:	4603      	mov	r3, r0
 800ad6c:	603a      	str	r2, [r7, #0]
 800ad6e:	80fb      	strh	r3, [r7, #6]
 800ad70:	460b      	mov	r3, r1
 800ad72:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 800ad74:	4b0c      	ldr	r3, [pc, #48]	@ (800ada8 <SendCmd+0x44>)
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	88fa      	ldrh	r2, [r7, #6]
 800ad7a:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 800ad7e:	4b0a      	ldr	r3, [pc, #40]	@ (800ada8 <SendCmd+0x44>)
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	797a      	ldrb	r2, [r7, #5]
 800ad84:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 800ad86:	4b08      	ldr	r3, [pc, #32]	@ (800ada8 <SendCmd+0x44>)
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	330c      	adds	r3, #12
 800ad8c:	797a      	ldrb	r2, [r7, #5]
 800ad8e:	6839      	ldr	r1, [r7, #0]
 800ad90:	4618      	mov	r0, r3
 800ad92:	f001 ffd3 	bl	800cd3c <memcpy>

  hciContext.io.Send(0,0);
 800ad96:	4b05      	ldr	r3, [pc, #20]	@ (800adac <SendCmd+0x48>)
 800ad98:	691b      	ldr	r3, [r3, #16]
 800ad9a:	2100      	movs	r1, #0
 800ad9c:	2000      	movs	r0, #0
 800ad9e:	4798      	blx	r3

  return;
 800ada0:	bf00      	nop
}
 800ada2:	3708      	adds	r7, #8
 800ada4:	46bd      	mov	sp, r7
 800ada6:	bd80      	pop	{r7, pc}
 800ada8:	200000f8 	.word	0x200000f8
 800adac:	200004d4 	.word	0x200004d4

0800adb0 <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 800adb0:	b580      	push	{r7, lr}
 800adb2:	b082      	sub	sp, #8
 800adb4:	af00      	add	r7, sp, #0
 800adb6:	4603      	mov	r3, r0
 800adb8:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 800adba:	79fb      	ldrb	r3, [r7, #7]
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d108      	bne.n	800add2 <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 800adc0:	4b0a      	ldr	r3, [pc, #40]	@ (800adec <NotifyCmdStatus+0x3c>)
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d00d      	beq.n	800ade4 <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 800adc8:	4b08      	ldr	r3, [pc, #32]	@ (800adec <NotifyCmdStatus+0x3c>)
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	2000      	movs	r0, #0
 800adce:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 800add0:	e008      	b.n	800ade4 <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 800add2:	4b06      	ldr	r3, [pc, #24]	@ (800adec <NotifyCmdStatus+0x3c>)
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	2b00      	cmp	r3, #0
 800add8:	d004      	beq.n	800ade4 <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 800adda:	4b04      	ldr	r3, [pc, #16]	@ (800adec <NotifyCmdStatus+0x3c>)
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	2001      	movs	r0, #1
 800ade0:	4798      	blx	r3
  return;
 800ade2:	bf00      	nop
 800ade4:	bf00      	nop
}
 800ade6:	3708      	adds	r7, #8
 800ade8:	46bd      	mov	sp, r7
 800adea:	bd80      	pop	{r7, pc}
 800adec:	200004fc 	.word	0x200004fc

0800adf0 <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 800adf0:	b580      	push	{r7, lr}
 800adf2:	b082      	sub	sp, #8
 800adf4:	af00      	add	r7, sp, #0
 800adf6:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	7a5b      	ldrb	r3, [r3, #9]
 800adfc:	2b0f      	cmp	r3, #15
 800adfe:	d003      	beq.n	800ae08 <TlEvtReceived+0x18>
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	7a5b      	ldrb	r3, [r3, #9]
 800ae04:	2b0e      	cmp	r3, #14
 800ae06:	d107      	bne.n	800ae18 <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 800ae08:	6879      	ldr	r1, [r7, #4]
 800ae0a:	4809      	ldr	r0, [pc, #36]	@ (800ae30 <TlEvtReceived+0x40>)
 800ae0c:	f000 fc28 	bl	800b660 <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 800ae10:	2000      	movs	r0, #0
 800ae12:	f000 ff51 	bl	800bcb8 <hci_cmd_resp_release>
 800ae16:	e006      	b.n	800ae26 <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 800ae18:	6879      	ldr	r1, [r7, #4]
 800ae1a:	4806      	ldr	r0, [pc, #24]	@ (800ae34 <TlEvtReceived+0x44>)
 800ae1c:	f000 fc20 	bl	800b660 <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800ae20:	4804      	ldr	r0, [pc, #16]	@ (800ae34 <TlEvtReceived+0x44>)
 800ae22:	f000 ff3d 	bl	800bca0 <hci_notify_asynch_evt>
  }

  return;
 800ae26:	bf00      	nop
}
 800ae28:	3708      	adds	r7, #8
 800ae2a:	46bd      	mov	sp, r7
 800ae2c:	bd80      	pop	{r7, pc}
 800ae2e:	bf00      	nop
 800ae30:	200004f4 	.word	0x200004f4
 800ae34:	200000f0 	.word	0x200000f0

0800ae38 <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 800ae38:	b480      	push	{r7}
 800ae3a:	b083      	sub	sp, #12
 800ae3c:	af00      	add	r7, sp, #0
 800ae3e:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	4a05      	ldr	r2, [pc, #20]	@ (800ae58 <hci_register_io_bus+0x20>)
 800ae44:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	4a04      	ldr	r2, [pc, #16]	@ (800ae5c <hci_register_io_bus+0x24>)
 800ae4a:	611a      	str	r2, [r3, #16]

  return;
 800ae4c:	bf00      	nop
}
 800ae4e:	370c      	adds	r7, #12
 800ae50:	46bd      	mov	sp, r7
 800ae52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae56:	4770      	bx	lr
 800ae58:	0800b151 	.word	0x0800b151
 800ae5c:	0800b1b9 	.word	0x0800b1b9

0800ae60 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800ae60:	b580      	push	{r7, lr}
 800ae62:	b082      	sub	sp, #8
 800ae64:	af00      	add	r7, sp, #0
 800ae66:	6078      	str	r0, [r7, #4]
 800ae68:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800ae6a:	683b      	ldr	r3, [r7, #0]
 800ae6c:	685b      	ldr	r3, [r3, #4]
 800ae6e:	4a08      	ldr	r2, [pc, #32]	@ (800ae90 <shci_init+0x30>)
 800ae70:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 800ae72:	4a08      	ldr	r2, [pc, #32]	@ (800ae94 <shci_init+0x34>)
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 800ae78:	4806      	ldr	r0, [pc, #24]	@ (800ae94 <shci_init+0x34>)
 800ae7a:	f000 f915 	bl	800b0a8 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800ae7e:	683b      	ldr	r3, [r7, #0]
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	4618      	mov	r0, r3
 800ae84:	f000 f898 	bl	800afb8 <TlInit>

  return;
 800ae88:	bf00      	nop
}
 800ae8a:	3708      	adds	r7, #8
 800ae8c:	46bd      	mov	sp, r7
 800ae8e:	bd80      	pop	{r7, pc}
 800ae90:	20000524 	.word	0x20000524
 800ae94:	20000504 	.word	0x20000504

0800ae98 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 800ae98:	b580      	push	{r7, lr}
 800ae9a:	b084      	sub	sp, #16
 800ae9c:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800ae9e:	4822      	ldr	r0, [pc, #136]	@ (800af28 <shci_user_evt_proc+0x90>)
 800aea0:	f000 fb96 	bl	800b5d0 <LST_is_empty>
 800aea4:	4603      	mov	r3, r0
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d12b      	bne.n	800af02 <shci_user_evt_proc+0x6a>
 800aeaa:	4b20      	ldr	r3, [pc, #128]	@ (800af2c <shci_user_evt_proc+0x94>)
 800aeac:	781b      	ldrb	r3, [r3, #0]
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d027      	beq.n	800af02 <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800aeb2:	f107 030c 	add.w	r3, r7, #12
 800aeb6:	4619      	mov	r1, r3
 800aeb8:	481b      	ldr	r0, [pc, #108]	@ (800af28 <shci_user_evt_proc+0x90>)
 800aeba:	f000 fc18 	bl	800b6ee <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 800aebe:	4b1c      	ldr	r3, [pc, #112]	@ (800af30 <shci_user_evt_proc+0x98>)
 800aec0:	69db      	ldr	r3, [r3, #28]
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d00c      	beq.n	800aee0 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 800aeca:	2301      	movs	r3, #1
 800aecc:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 800aece:	4b18      	ldr	r3, [pc, #96]	@ (800af30 <shci_user_evt_proc+0x98>)
 800aed0:	69db      	ldr	r3, [r3, #28]
 800aed2:	1d3a      	adds	r2, r7, #4
 800aed4:	4610      	mov	r0, r2
 800aed6:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 800aed8:	793a      	ldrb	r2, [r7, #4]
 800aeda:	4b14      	ldr	r3, [pc, #80]	@ (800af2c <shci_user_evt_proc+0x94>)
 800aedc:	701a      	strb	r2, [r3, #0]
 800aede:	e002      	b.n	800aee6 <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800aee0:	4b12      	ldr	r3, [pc, #72]	@ (800af2c <shci_user_evt_proc+0x94>)
 800aee2:	2201      	movs	r2, #1
 800aee4:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 800aee6:	4b11      	ldr	r3, [pc, #68]	@ (800af2c <shci_user_evt_proc+0x94>)
 800aee8:	781b      	ldrb	r3, [r3, #0]
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d004      	beq.n	800aef8 <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	4618      	mov	r0, r3
 800aef2:	f000 fa71 	bl	800b3d8 <TL_MM_EvtDone>
 800aef6:	e004      	b.n	800af02 <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	4619      	mov	r1, r3
 800aefc:	480a      	ldr	r0, [pc, #40]	@ (800af28 <shci_user_evt_proc+0x90>)
 800aefe:	f000 fb89 	bl	800b614 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800af02:	4809      	ldr	r0, [pc, #36]	@ (800af28 <shci_user_evt_proc+0x90>)
 800af04:	f000 fb64 	bl	800b5d0 <LST_is_empty>
 800af08:	4603      	mov	r3, r0
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d107      	bne.n	800af1e <shci_user_evt_proc+0x86>
 800af0e:	4b07      	ldr	r3, [pc, #28]	@ (800af2c <shci_user_evt_proc+0x94>)
 800af10:	781b      	ldrb	r3, [r3, #0]
 800af12:	2b00      	cmp	r3, #0
 800af14:	d003      	beq.n	800af1e <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 800af16:	4804      	ldr	r0, [pc, #16]	@ (800af28 <shci_user_evt_proc+0x90>)
 800af18:	f7f6 f846 	bl	8000fa8 <shci_notify_asynch_evt>
  }


  return;
 800af1c:	bf00      	nop
 800af1e:	bf00      	nop
}
 800af20:	3710      	adds	r7, #16
 800af22:	46bd      	mov	sp, r7
 800af24:	bd80      	pop	{r7, pc}
 800af26:	bf00      	nop
 800af28:	20000100 	.word	0x20000100
 800af2c:	20000110 	.word	0x20000110
 800af30:	20000504 	.word	0x20000504

0800af34 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 800af34:	b580      	push	{r7, lr}
 800af36:	b084      	sub	sp, #16
 800af38:	af00      	add	r7, sp, #0
 800af3a:	60ba      	str	r2, [r7, #8]
 800af3c:	607b      	str	r3, [r7, #4]
 800af3e:	4603      	mov	r3, r0
 800af40:	81fb      	strh	r3, [r7, #14]
 800af42:	460b      	mov	r3, r1
 800af44:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 800af46:	2000      	movs	r0, #0
 800af48:	f000 f868 	bl	800b01c <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 800af4c:	4b17      	ldr	r3, [pc, #92]	@ (800afac <shci_send+0x78>)
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	89fa      	ldrh	r2, [r7, #14]
 800af52:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 800af56:	4b15      	ldr	r3, [pc, #84]	@ (800afac <shci_send+0x78>)
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	7b7a      	ldrb	r2, [r7, #13]
 800af5c:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 800af5e:	4b13      	ldr	r3, [pc, #76]	@ (800afac <shci_send+0x78>)
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	330c      	adds	r3, #12
 800af64:	7b7a      	ldrb	r2, [r7, #13]
 800af66:	68b9      	ldr	r1, [r7, #8]
 800af68:	4618      	mov	r0, r3
 800af6a:	f001 fee7 	bl	800cd3c <memcpy>
  CmdRspStatusFlag = SHCI_TL_CMD_RESP_WAIT;
 800af6e:	4b10      	ldr	r3, [pc, #64]	@ (800afb0 <shci_send+0x7c>)
 800af70:	2201      	movs	r2, #1
 800af72:	701a      	strb	r2, [r3, #0]
  shciContext.io.Send(0,0);
 800af74:	4b0f      	ldr	r3, [pc, #60]	@ (800afb4 <shci_send+0x80>)
 800af76:	691b      	ldr	r3, [r3, #16]
 800af78:	2100      	movs	r1, #0
 800af7a:	2000      	movs	r0, #0
 800af7c:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 800af7e:	f248 00e8 	movw	r0, #33000	@ 0x80e8
 800af82:	f7f6 f828 	bl	8000fd6 <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	f103 0008 	add.w	r0, r3, #8
 800af8c:	4b07      	ldr	r3, [pc, #28]	@ (800afac <shci_send+0x78>)
 800af8e:	6819      	ldr	r1, [r3, #0]
 800af90:	4b06      	ldr	r3, [pc, #24]	@ (800afac <shci_send+0x78>)
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	789b      	ldrb	r3, [r3, #2]
 800af96:	3303      	adds	r3, #3
 800af98:	461a      	mov	r2, r3
 800af9a:	f001 fecf 	bl	800cd3c <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800af9e:	2001      	movs	r0, #1
 800afa0:	f000 f83c 	bl	800b01c <Cmd_SetStatus>

  return;
 800afa4:	bf00      	nop
}
 800afa6:	3710      	adds	r7, #16
 800afa8:	46bd      	mov	sp, r7
 800afaa:	bd80      	pop	{r7, pc}
 800afac:	2000010c 	.word	0x2000010c
 800afb0:	20000528 	.word	0x20000528
 800afb4:	20000504 	.word	0x20000504

0800afb8 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800afb8:	b580      	push	{r7, lr}
 800afba:	b086      	sub	sp, #24
 800afbc:	af00      	add	r7, sp, #0
 800afbe:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 800afc0:	4a10      	ldr	r2, [pc, #64]	@ (800b004 <TlInit+0x4c>)
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 800afc6:	4810      	ldr	r0, [pc, #64]	@ (800b008 <TlInit+0x50>)
 800afc8:	f000 faf2 	bl	800b5b0 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800afcc:	2001      	movs	r0, #1
 800afce:	f000 f825 	bl	800b01c <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800afd2:	4b0e      	ldr	r3, [pc, #56]	@ (800b00c <TlInit+0x54>)
 800afd4:	2201      	movs	r2, #1
 800afd6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 800afd8:	4b0d      	ldr	r3, [pc, #52]	@ (800b010 <TlInit+0x58>)
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d00c      	beq.n	800affa <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 800afe4:	4b0b      	ldr	r3, [pc, #44]	@ (800b014 <TlInit+0x5c>)
 800afe6:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 800afe8:	4b0b      	ldr	r3, [pc, #44]	@ (800b018 <TlInit+0x60>)
 800afea:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 800afec:	4b08      	ldr	r3, [pc, #32]	@ (800b010 <TlInit+0x58>)
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	f107 020c 	add.w	r2, r7, #12
 800aff4:	4610      	mov	r0, r2
 800aff6:	4798      	blx	r3
  }

  return;
 800aff8:	bf00      	nop
 800affa:	bf00      	nop
}
 800affc:	3718      	adds	r7, #24
 800affe:	46bd      	mov	sp, r7
 800b000:	bd80      	pop	{r7, pc}
 800b002:	bf00      	nop
 800b004:	2000010c 	.word	0x2000010c
 800b008:	20000100 	.word	0x20000100
 800b00c:	20000110 	.word	0x20000110
 800b010:	20000504 	.word	0x20000504
 800b014:	0800b06d 	.word	0x0800b06d
 800b018:	0800b085 	.word	0x0800b085

0800b01c <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 800b01c:	b580      	push	{r7, lr}
 800b01e:	b082      	sub	sp, #8
 800b020:	af00      	add	r7, sp, #0
 800b022:	4603      	mov	r3, r0
 800b024:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 800b026:	79fb      	ldrb	r3, [r7, #7]
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d10b      	bne.n	800b044 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 800b02c:	4b0d      	ldr	r3, [pc, #52]	@ (800b064 <Cmd_SetStatus+0x48>)
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	2b00      	cmp	r3, #0
 800b032:	d003      	beq.n	800b03c <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 800b034:	4b0b      	ldr	r3, [pc, #44]	@ (800b064 <Cmd_SetStatus+0x48>)
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	2000      	movs	r0, #0
 800b03a:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 800b03c:	4b0a      	ldr	r3, [pc, #40]	@ (800b068 <Cmd_SetStatus+0x4c>)
 800b03e:	2200      	movs	r2, #0
 800b040:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 800b042:	e00b      	b.n	800b05c <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 800b044:	4b08      	ldr	r3, [pc, #32]	@ (800b068 <Cmd_SetStatus+0x4c>)
 800b046:	2201      	movs	r2, #1
 800b048:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 800b04a:	4b06      	ldr	r3, [pc, #24]	@ (800b064 <Cmd_SetStatus+0x48>)
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d004      	beq.n	800b05c <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 800b052:	4b04      	ldr	r3, [pc, #16]	@ (800b064 <Cmd_SetStatus+0x48>)
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	2001      	movs	r0, #1
 800b058:	4798      	blx	r3
  return;
 800b05a:	bf00      	nop
 800b05c:	bf00      	nop
}
 800b05e:	3708      	adds	r7, #8
 800b060:	46bd      	mov	sp, r7
 800b062:	bd80      	pop	{r7, pc}
 800b064:	20000524 	.word	0x20000524
 800b068:	20000108 	.word	0x20000108

0800b06c <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 800b06c:	b580      	push	{r7, lr}
 800b06e:	b082      	sub	sp, #8
 800b070:	af00      	add	r7, sp, #0
 800b072:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 800b074:	2000      	movs	r0, #0
 800b076:	f7f5 ffa3 	bl	8000fc0 <shci_cmd_resp_release>

  return;
 800b07a:	bf00      	nop
}
 800b07c:	3708      	adds	r7, #8
 800b07e:	46bd      	mov	sp, r7
 800b080:	bd80      	pop	{r7, pc}
	...

0800b084 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 800b084:	b580      	push	{r7, lr}
 800b086:	b082      	sub	sp, #8
 800b088:	af00      	add	r7, sp, #0
 800b08a:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 800b08c:	6879      	ldr	r1, [r7, #4]
 800b08e:	4805      	ldr	r0, [pc, #20]	@ (800b0a4 <TlUserEvtReceived+0x20>)
 800b090:	f000 fae6 	bl	800b660 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800b094:	4803      	ldr	r0, [pc, #12]	@ (800b0a4 <TlUserEvtReceived+0x20>)
 800b096:	f7f5 ff87 	bl	8000fa8 <shci_notify_asynch_evt>

  return;
 800b09a:	bf00      	nop
}
 800b09c:	3708      	adds	r7, #8
 800b09e:	46bd      	mov	sp, r7
 800b0a0:	bd80      	pop	{r7, pc}
 800b0a2:	bf00      	nop
 800b0a4:	20000100 	.word	0x20000100

0800b0a8 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 800b0a8:	b480      	push	{r7}
 800b0aa:	b083      	sub	sp, #12
 800b0ac:	af00      	add	r7, sp, #0
 800b0ae:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	4a05      	ldr	r2, [pc, #20]	@ (800b0c8 <shci_register_io_bus+0x20>)
 800b0b4:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	4a04      	ldr	r2, [pc, #16]	@ (800b0cc <shci_register_io_bus+0x24>)
 800b0ba:	611a      	str	r2, [r3, #16]

  return;
 800b0bc:	bf00      	nop
}
 800b0be:	370c      	adds	r7, #12
 800b0c0:	46bd      	mov	sp, r7
 800b0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0c6:	4770      	bx	lr
 800b0c8:	0800b265 	.word	0x0800b265
 800b0cc:	0800b2b9 	.word	0x0800b2b9

0800b0d0 <TL_Enable>:

/******************************************************************************
 * GENERAL - refer to AN5289 for functions description.
 ******************************************************************************/
void TL_Enable( void )
{
 800b0d0:	b580      	push	{r7, lr}
 800b0d2:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 800b0d4:	f001 fab2 	bl	800c63c <HW_IPCC_Enable>

  return;
 800b0d8:	bf00      	nop
}
 800b0da:	bd80      	pop	{r7, pc}

0800b0dc <TL_Init>:


void TL_Init( void )
{
 800b0dc:	b580      	push	{r7, lr}
 800b0de:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 800b0e0:	4b10      	ldr	r3, [pc, #64]	@ (800b124 <TL_Init+0x48>)
 800b0e2:	4a11      	ldr	r2, [pc, #68]	@ (800b128 <TL_Init+0x4c>)
 800b0e4:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 800b0e6:	4b0f      	ldr	r3, [pc, #60]	@ (800b124 <TL_Init+0x48>)
 800b0e8:	4a10      	ldr	r2, [pc, #64]	@ (800b12c <TL_Init+0x50>)
 800b0ea:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 800b0ec:	4b0d      	ldr	r3, [pc, #52]	@ (800b124 <TL_Init+0x48>)
 800b0ee:	4a10      	ldr	r2, [pc, #64]	@ (800b130 <TL_Init+0x54>)
 800b0f0:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 800b0f2:	4b0c      	ldr	r3, [pc, #48]	@ (800b124 <TL_Init+0x48>)
 800b0f4:	4a0f      	ldr	r2, [pc, #60]	@ (800b134 <TL_Init+0x58>)
 800b0f6:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 800b0f8:	4b0a      	ldr	r3, [pc, #40]	@ (800b124 <TL_Init+0x48>)
 800b0fa:	4a0f      	ldr	r2, [pc, #60]	@ (800b138 <TL_Init+0x5c>)
 800b0fc:	625a      	str	r2, [r3, #36]	@ 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 800b0fe:	4b09      	ldr	r3, [pc, #36]	@ (800b124 <TL_Init+0x48>)
 800b100:	4a0e      	ldr	r2, [pc, #56]	@ (800b13c <TL_Init+0x60>)
 800b102:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 800b104:	4b07      	ldr	r3, [pc, #28]	@ (800b124 <TL_Init+0x48>)
 800b106:	4a0e      	ldr	r2, [pc, #56]	@ (800b140 <TL_Init+0x64>)
 800b108:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 800b10a:	4b06      	ldr	r3, [pc, #24]	@ (800b124 <TL_Init+0x48>)
 800b10c:	4a0d      	ldr	r2, [pc, #52]	@ (800b144 <TL_Init+0x68>)
 800b10e:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 800b110:	4b04      	ldr	r3, [pc, #16]	@ (800b124 <TL_Init+0x48>)
 800b112:	4a0d      	ldr	r2, [pc, #52]	@ (800b148 <TL_Init+0x6c>)
 800b114:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 800b116:	4b03      	ldr	r3, [pc, #12]	@ (800b124 <TL_Init+0x48>)
 800b118:	4a0c      	ldr	r2, [pc, #48]	@ (800b14c <TL_Init+0x70>)
 800b11a:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 800b11c:	f001 faa2 	bl	800c664 <HW_IPCC_Init>

  return;
 800b120:	bf00      	nop
}
 800b122:	bd80      	pop	{r7, pc}
 800b124:	20030000 	.word	0x20030000
 800b128:	20030028 	.word	0x20030028
 800b12c:	20030048 	.word	0x20030048
 800b130:	20030058 	.word	0x20030058
 800b134:	20030068 	.word	0x20030068
 800b138:	20030070 	.word	0x20030070
 800b13c:	20030078 	.word	0x20030078
 800b140:	20030080 	.word	0x20030080
 800b144:	2003009c 	.word	0x2003009c
 800b148:	200300a0 	.word	0x200300a0
 800b14c:	200300ac 	.word	0x200300ac

0800b150 <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 800b150:	b580      	push	{r7, lr}
 800b152:	b084      	sub	sp, #16
 800b154:	af00      	add	r7, sp, #0
 800b156:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 800b15c:	4811      	ldr	r0, [pc, #68]	@ (800b1a4 <TL_BLE_Init+0x54>)
 800b15e:	f000 fa27 	bl	800b5b0 <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 800b162:	4b11      	ldr	r3, [pc, #68]	@ (800b1a8 <TL_BLE_Init+0x58>)
 800b164:	685b      	ldr	r3, [r3, #4]
 800b166:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	689a      	ldr	r2, [r3, #8]
 800b16c:	68bb      	ldr	r3, [r7, #8]
 800b16e:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	68da      	ldr	r2, [r3, #12]
 800b174:	68bb      	ldr	r3, [r7, #8]
 800b176:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 800b178:	68bb      	ldr	r3, [r7, #8]
 800b17a:	4a0c      	ldr	r2, [pc, #48]	@ (800b1ac <TL_BLE_Init+0x5c>)
 800b17c:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 800b17e:	68bb      	ldr	r3, [r7, #8]
 800b180:	4a08      	ldr	r2, [pc, #32]	@ (800b1a4 <TL_BLE_Init+0x54>)
 800b182:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 800b184:	f001 fa84 	bl	800c690 <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 800b188:	68fb      	ldr	r3, [r7, #12]
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	4a08      	ldr	r2, [pc, #32]	@ (800b1b0 <TL_BLE_Init+0x60>)
 800b18e:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 800b190:	68fb      	ldr	r3, [r7, #12]
 800b192:	685b      	ldr	r3, [r3, #4]
 800b194:	4a07      	ldr	r2, [pc, #28]	@ (800b1b4 <TL_BLE_Init+0x64>)
 800b196:	6013      	str	r3, [r2, #0]

  return 0;
 800b198:	2300      	movs	r3, #0
}
 800b19a:	4618      	mov	r0, r3
 800b19c:	3710      	adds	r7, #16
 800b19e:	46bd      	mov	sp, r7
 800b1a0:	bd80      	pop	{r7, pc}
 800b1a2:	bf00      	nop
 800b1a4:	200300c8 	.word	0x200300c8
 800b1a8:	20030000 	.word	0x20030000
 800b1ac:	20030a58 	.word	0x20030a58
 800b1b0:	20000534 	.word	0x20000534
 800b1b4:	20000538 	.word	0x20000538

0800b1b8 <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 800b1b8:	b580      	push	{r7, lr}
 800b1ba:	b082      	sub	sp, #8
 800b1bc:	af00      	add	r7, sp, #0
 800b1be:	6078      	str	r0, [r7, #4]
 800b1c0:	460b      	mov	r3, r1
 800b1c2:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 800b1c4:	4b09      	ldr	r3, [pc, #36]	@ (800b1ec <TL_BLE_SendCmd+0x34>)
 800b1c6:	685b      	ldr	r3, [r3, #4]
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	2201      	movs	r2, #1
 800b1cc:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 800b1ce:	4b07      	ldr	r3, [pc, #28]	@ (800b1ec <TL_BLE_SendCmd+0x34>)
 800b1d0:	685b      	ldr	r3, [r3, #4]
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	4619      	mov	r1, r3
 800b1d6:	2001      	movs	r0, #1
 800b1d8:	f000 f96c 	bl	800b4b4 <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 800b1dc:	f001 fa62 	bl	800c6a4 <HW_IPCC_BLE_SendCmd>

  return 0;
 800b1e0:	2300      	movs	r3, #0
}
 800b1e2:	4618      	mov	r0, r3
 800b1e4:	3708      	adds	r7, #8
 800b1e6:	46bd      	mov	sp, r7
 800b1e8:	bd80      	pop	{r7, pc}
 800b1ea:	bf00      	nop
 800b1ec:	20030000 	.word	0x20030000

0800b1f0 <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 800b1f0:	b580      	push	{r7, lr}
 800b1f2:	b082      	sub	sp, #8
 800b1f4:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 800b1f6:	e01c      	b.n	800b232 <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 800b1f8:	1d3b      	adds	r3, r7, #4
 800b1fa:	4619      	mov	r1, r3
 800b1fc:	4812      	ldr	r0, [pc, #72]	@ (800b248 <HW_IPCC_BLE_RxEvtNot+0x58>)
 800b1fe:	f000 fa76 	bl	800b6ee <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	7a5b      	ldrb	r3, [r3, #9]
 800b206:	2b0f      	cmp	r3, #15
 800b208:	d003      	beq.n	800b212 <HW_IPCC_BLE_RxEvtNot+0x22>
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	7a5b      	ldrb	r3, [r3, #9]
 800b20e:	2b0e      	cmp	r3, #14
 800b210:	d105      	bne.n	800b21e <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	4619      	mov	r1, r3
 800b216:	2002      	movs	r0, #2
 800b218:	f000 f94c 	bl	800b4b4 <OutputDbgTrace>
 800b21c:	e004      	b.n	800b228 <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	4619      	mov	r1, r3
 800b222:	2003      	movs	r0, #3
 800b224:	f000 f946 	bl	800b4b4 <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 800b228:	4b08      	ldr	r3, [pc, #32]	@ (800b24c <HW_IPCC_BLE_RxEvtNot+0x5c>)
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	687a      	ldr	r2, [r7, #4]
 800b22e:	4610      	mov	r0, r2
 800b230:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 800b232:	4805      	ldr	r0, [pc, #20]	@ (800b248 <HW_IPCC_BLE_RxEvtNot+0x58>)
 800b234:	f000 f9cc 	bl	800b5d0 <LST_is_empty>
 800b238:	4603      	mov	r3, r0
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d0dc      	beq.n	800b1f8 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 800b23e:	bf00      	nop
}
 800b240:	3708      	adds	r7, #8
 800b242:	46bd      	mov	sp, r7
 800b244:	bd80      	pop	{r7, pc}
 800b246:	bf00      	nop
 800b248:	200300c8 	.word	0x200300c8
 800b24c:	20000534 	.word	0x20000534

0800b250 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 800b250:	b580      	push	{r7, lr}
 800b252:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 800b254:	4b02      	ldr	r3, [pc, #8]	@ (800b260 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	4798      	blx	r3

  return;
 800b25a:	bf00      	nop
}
 800b25c:	bd80      	pop	{r7, pc}
 800b25e:	bf00      	nop
 800b260:	20000538 	.word	0x20000538

0800b264 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 800b264:	b580      	push	{r7, lr}
 800b266:	b084      	sub	sp, #16
 800b268:	af00      	add	r7, sp, #0
 800b26a:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 800b270:	480d      	ldr	r0, [pc, #52]	@ (800b2a8 <TL_SYS_Init+0x44>)
 800b272:	f000 f99d 	bl	800b5b0 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 800b276:	4b0d      	ldr	r3, [pc, #52]	@ (800b2ac <TL_SYS_Init+0x48>)
 800b278:	68db      	ldr	r3, [r3, #12]
 800b27a:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	689a      	ldr	r2, [r3, #8]
 800b280:	68bb      	ldr	r3, [r7, #8]
 800b282:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 800b284:	68bb      	ldr	r3, [r7, #8]
 800b286:	4a08      	ldr	r2, [pc, #32]	@ (800b2a8 <TL_SYS_Init+0x44>)
 800b288:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 800b28a:	f001 fa2d 	bl	800c6e8 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 800b28e:	68fb      	ldr	r3, [r7, #12]
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	4a07      	ldr	r2, [pc, #28]	@ (800b2b0 <TL_SYS_Init+0x4c>)
 800b294:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 800b296:	68fb      	ldr	r3, [r7, #12]
 800b298:	685b      	ldr	r3, [r3, #4]
 800b29a:	4a06      	ldr	r2, [pc, #24]	@ (800b2b4 <TL_SYS_Init+0x50>)
 800b29c:	6013      	str	r3, [r2, #0]

  return 0;
 800b29e:	2300      	movs	r3, #0
}
 800b2a0:	4618      	mov	r0, r3
 800b2a2:	3710      	adds	r7, #16
 800b2a4:	46bd      	mov	sp, r7
 800b2a6:	bd80      	pop	{r7, pc}
 800b2a8:	200300d0 	.word	0x200300d0
 800b2ac:	20030000 	.word	0x20030000
 800b2b0:	2000053c 	.word	0x2000053c
 800b2b4:	20000540 	.word	0x20000540

0800b2b8 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 800b2b8:	b580      	push	{r7, lr}
 800b2ba:	b082      	sub	sp, #8
 800b2bc:	af00      	add	r7, sp, #0
 800b2be:	6078      	str	r0, [r7, #4]
 800b2c0:	460b      	mov	r3, r1
 800b2c2:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 800b2c4:	4b09      	ldr	r3, [pc, #36]	@ (800b2ec <TL_SYS_SendCmd+0x34>)
 800b2c6:	68db      	ldr	r3, [r3, #12]
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	2210      	movs	r2, #16
 800b2cc:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 800b2ce:	4b07      	ldr	r3, [pc, #28]	@ (800b2ec <TL_SYS_SendCmd+0x34>)
 800b2d0:	68db      	ldr	r3, [r3, #12]
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	4619      	mov	r1, r3
 800b2d6:	2004      	movs	r0, #4
 800b2d8:	f000 f8ec 	bl	800b4b4 <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 800b2dc:	f001 fa0e 	bl	800c6fc <HW_IPCC_SYS_SendCmd>

  return 0;
 800b2e0:	2300      	movs	r3, #0
}
 800b2e2:	4618      	mov	r0, r3
 800b2e4:	3708      	adds	r7, #8
 800b2e6:	46bd      	mov	sp, r7
 800b2e8:	bd80      	pop	{r7, pc}
 800b2ea:	bf00      	nop
 800b2ec:	20030000 	.word	0x20030000

0800b2f0 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 800b2f0:	b580      	push	{r7, lr}
 800b2f2:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800b2f4:	4b07      	ldr	r3, [pc, #28]	@ (800b314 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800b2f6:	68db      	ldr	r3, [r3, #12]
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	4619      	mov	r1, r3
 800b2fc:	2005      	movs	r0, #5
 800b2fe:	f000 f8d9 	bl	800b4b4 <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800b302:	4b05      	ldr	r3, [pc, #20]	@ (800b318 <HW_IPCC_SYS_CmdEvtNot+0x28>)
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	4a03      	ldr	r2, [pc, #12]	@ (800b314 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800b308:	68d2      	ldr	r2, [r2, #12]
 800b30a:	6812      	ldr	r2, [r2, #0]
 800b30c:	4610      	mov	r0, r2
 800b30e:	4798      	blx	r3

  return;
 800b310:	bf00      	nop
}
 800b312:	bd80      	pop	{r7, pc}
 800b314:	20030000 	.word	0x20030000
 800b318:	2000053c 	.word	0x2000053c

0800b31c <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 800b31c:	b580      	push	{r7, lr}
 800b31e:	b082      	sub	sp, #8
 800b320:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800b322:	e00e      	b.n	800b342 <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 800b324:	1d3b      	adds	r3, r7, #4
 800b326:	4619      	mov	r1, r3
 800b328:	480b      	ldr	r0, [pc, #44]	@ (800b358 <HW_IPCC_SYS_EvtNot+0x3c>)
 800b32a:	f000 f9e0 	bl	800b6ee <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	4619      	mov	r1, r3
 800b332:	2006      	movs	r0, #6
 800b334:	f000 f8be 	bl	800b4b4 <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 800b338:	4b08      	ldr	r3, [pc, #32]	@ (800b35c <HW_IPCC_SYS_EvtNot+0x40>)
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	687a      	ldr	r2, [r7, #4]
 800b33e:	4610      	mov	r0, r2
 800b340:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800b342:	4805      	ldr	r0, [pc, #20]	@ (800b358 <HW_IPCC_SYS_EvtNot+0x3c>)
 800b344:	f000 f944 	bl	800b5d0 <LST_is_empty>
 800b348:	4603      	mov	r3, r0
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d0ea      	beq.n	800b324 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 800b34e:	bf00      	nop
}
 800b350:	3708      	adds	r7, #8
 800b352:	46bd      	mov	sp, r7
 800b354:	bd80      	pop	{r7, pc}
 800b356:	bf00      	nop
 800b358:	200300d0 	.word	0x200300d0
 800b35c:	20000540 	.word	0x20000540

0800b360 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 800b360:	b580      	push	{r7, lr}
 800b362:	b082      	sub	sp, #8
 800b364:	af00      	add	r7, sp, #0
 800b366:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 800b368:	4817      	ldr	r0, [pc, #92]	@ (800b3c8 <TL_MM_Init+0x68>)
 800b36a:	f000 f921 	bl	800b5b0 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 800b36e:	4817      	ldr	r0, [pc, #92]	@ (800b3cc <TL_MM_Init+0x6c>)
 800b370:	f000 f91e 	bl	800b5b0 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 800b374:	4b16      	ldr	r3, [pc, #88]	@ (800b3d0 <TL_MM_Init+0x70>)
 800b376:	691b      	ldr	r3, [r3, #16]
 800b378:	4a16      	ldr	r2, [pc, #88]	@ (800b3d4 <TL_MM_Init+0x74>)
 800b37a:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 800b37c:	4b15      	ldr	r3, [pc, #84]	@ (800b3d4 <TL_MM_Init+0x74>)
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	687a      	ldr	r2, [r7, #4]
 800b382:	6892      	ldr	r2, [r2, #8]
 800b384:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 800b386:	4b13      	ldr	r3, [pc, #76]	@ (800b3d4 <TL_MM_Init+0x74>)
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	687a      	ldr	r2, [r7, #4]
 800b38c:	68d2      	ldr	r2, [r2, #12]
 800b38e:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 800b390:	4b10      	ldr	r3, [pc, #64]	@ (800b3d4 <TL_MM_Init+0x74>)
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	4a0c      	ldr	r2, [pc, #48]	@ (800b3c8 <TL_MM_Init+0x68>)
 800b396:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 800b398:	4b0e      	ldr	r3, [pc, #56]	@ (800b3d4 <TL_MM_Init+0x74>)
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	687a      	ldr	r2, [r7, #4]
 800b39e:	6812      	ldr	r2, [r2, #0]
 800b3a0:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 800b3a2:	4b0c      	ldr	r3, [pc, #48]	@ (800b3d4 <TL_MM_Init+0x74>)
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	687a      	ldr	r2, [r7, #4]
 800b3a8:	6852      	ldr	r2, [r2, #4]
 800b3aa:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 800b3ac:	4b09      	ldr	r3, [pc, #36]	@ (800b3d4 <TL_MM_Init+0x74>)
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	687a      	ldr	r2, [r7, #4]
 800b3b2:	6912      	ldr	r2, [r2, #16]
 800b3b4:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 800b3b6:	4b07      	ldr	r3, [pc, #28]	@ (800b3d4 <TL_MM_Init+0x74>)
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	687a      	ldr	r2, [r7, #4]
 800b3bc:	6952      	ldr	r2, [r2, #20]
 800b3be:	619a      	str	r2, [r3, #24]

  return;
 800b3c0:	bf00      	nop
}
 800b3c2:	3708      	adds	r7, #8
 800b3c4:	46bd      	mov	sp, r7
 800b3c6:	bd80      	pop	{r7, pc}
 800b3c8:	200300b8 	.word	0x200300b8
 800b3cc:	2000052c 	.word	0x2000052c
 800b3d0:	20030000 	.word	0x20030000
 800b3d4:	20000544 	.word	0x20000544

0800b3d8 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 800b3d8:	b580      	push	{r7, lr}
 800b3da:	b082      	sub	sp, #8
 800b3dc:	af00      	add	r7, sp, #0
 800b3de:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 800b3e0:	6879      	ldr	r1, [r7, #4]
 800b3e2:	4807      	ldr	r0, [pc, #28]	@ (800b400 <TL_MM_EvtDone+0x28>)
 800b3e4:	f000 f93c 	bl	800b660 <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 800b3e8:	6879      	ldr	r1, [r7, #4]
 800b3ea:	2000      	movs	r0, #0
 800b3ec:	f000 f862 	bl	800b4b4 <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 800b3f0:	4804      	ldr	r0, [pc, #16]	@ (800b404 <TL_MM_EvtDone+0x2c>)
 800b3f2:	f001 f9a9 	bl	800c748 <HW_IPCC_MM_SendFreeBuf>

  return;
 800b3f6:	bf00      	nop
}
 800b3f8:	3708      	adds	r7, #8
 800b3fa:	46bd      	mov	sp, r7
 800b3fc:	bd80      	pop	{r7, pc}
 800b3fe:	bf00      	nop
 800b400:	2000052c 	.word	0x2000052c
 800b404:	0800b409 	.word	0x0800b409

0800b408 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 800b408:	b580      	push	{r7, lr}
 800b40a:	b082      	sub	sp, #8
 800b40c:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800b40e:	e00c      	b.n	800b42a <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 800b410:	1d3b      	adds	r3, r7, #4
 800b412:	4619      	mov	r1, r3
 800b414:	480a      	ldr	r0, [pc, #40]	@ (800b440 <SendFreeBuf+0x38>)
 800b416:	f000 f96a 	bl	800b6ee <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 800b41a:	4b0a      	ldr	r3, [pc, #40]	@ (800b444 <SendFreeBuf+0x3c>)
 800b41c:	691b      	ldr	r3, [r3, #16]
 800b41e:	691b      	ldr	r3, [r3, #16]
 800b420:	687a      	ldr	r2, [r7, #4]
 800b422:	4611      	mov	r1, r2
 800b424:	4618      	mov	r0, r3
 800b426:	f000 f91b 	bl	800b660 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800b42a:	4805      	ldr	r0, [pc, #20]	@ (800b440 <SendFreeBuf+0x38>)
 800b42c:	f000 f8d0 	bl	800b5d0 <LST_is_empty>
 800b430:	4603      	mov	r3, r0
 800b432:	2b00      	cmp	r3, #0
 800b434:	d0ec      	beq.n	800b410 <SendFreeBuf+0x8>
  }

  return;
 800b436:	bf00      	nop
}
 800b438:	3708      	adds	r7, #8
 800b43a:	46bd      	mov	sp, r7
 800b43c:	bd80      	pop	{r7, pc}
 800b43e:	bf00      	nop
 800b440:	2000052c 	.word	0x2000052c
 800b444:	20030000 	.word	0x20030000

0800b448 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 800b448:	b580      	push	{r7, lr}
 800b44a:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 800b44c:	4805      	ldr	r0, [pc, #20]	@ (800b464 <TL_TRACES_Init+0x1c>)
 800b44e:	f000 f8af 	bl	800b5b0 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 800b452:	4b05      	ldr	r3, [pc, #20]	@ (800b468 <TL_TRACES_Init+0x20>)
 800b454:	695b      	ldr	r3, [r3, #20]
 800b456:	4a03      	ldr	r2, [pc, #12]	@ (800b464 <TL_TRACES_Init+0x1c>)
 800b458:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 800b45a:	f001 f9ab 	bl	800c7b4 <HW_IPCC_TRACES_Init>

  return;
 800b45e:	bf00      	nop
}
 800b460:	bd80      	pop	{r7, pc}
 800b462:	bf00      	nop
 800b464:	200300c0 	.word	0x200300c0
 800b468:	20030000 	.word	0x20030000

0800b46c <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 800b46c:	b580      	push	{r7, lr}
 800b46e:	b082      	sub	sp, #8
 800b470:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800b472:	e008      	b.n	800b486 <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 800b474:	1d3b      	adds	r3, r7, #4
 800b476:	4619      	mov	r1, r3
 800b478:	4808      	ldr	r0, [pc, #32]	@ (800b49c <HW_IPCC_TRACES_EvtNot+0x30>)
 800b47a:	f000 f938 	bl	800b6ee <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	4618      	mov	r0, r3
 800b482:	f000 f80d 	bl	800b4a0 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800b486:	4805      	ldr	r0, [pc, #20]	@ (800b49c <HW_IPCC_TRACES_EvtNot+0x30>)
 800b488:	f000 f8a2 	bl	800b5d0 <LST_is_empty>
 800b48c:	4603      	mov	r3, r0
 800b48e:	2b00      	cmp	r3, #0
 800b490:	d0f0      	beq.n	800b474 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 800b492:	bf00      	nop
}
 800b494:	3708      	adds	r7, #8
 800b496:	46bd      	mov	sp, r7
 800b498:	bd80      	pop	{r7, pc}
 800b49a:	bf00      	nop
 800b49c:	200300c0 	.word	0x200300c0

0800b4a0 <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 800b4a0:	b480      	push	{r7}
 800b4a2:	b083      	sub	sp, #12
 800b4a4:	af00      	add	r7, sp, #0
 800b4a6:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 800b4a8:	bf00      	nop
 800b4aa:	370c      	adds	r7, #12
 800b4ac:	46bd      	mov	sp, r7
 800b4ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4b2:	4770      	bx	lr

0800b4b4 <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 800b4b4:	b480      	push	{r7}
 800b4b6:	b085      	sub	sp, #20
 800b4b8:	af00      	add	r7, sp, #0
 800b4ba:	4603      	mov	r3, r0
 800b4bc:	6039      	str	r1, [r7, #0]
 800b4be:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 800b4c0:	79fb      	ldrb	r3, [r7, #7]
 800b4c2:	2b06      	cmp	r3, #6
 800b4c4:	d845      	bhi.n	800b552 <OutputDbgTrace+0x9e>
 800b4c6:	a201      	add	r2, pc, #4	@ (adr r2, 800b4cc <OutputDbgTrace+0x18>)
 800b4c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4cc:	0800b4e9 	.word	0x0800b4e9
 800b4d0:	0800b50d 	.word	0x0800b50d
 800b4d4:	0800b513 	.word	0x0800b513
 800b4d8:	0800b527 	.word	0x0800b527
 800b4dc:	0800b533 	.word	0x0800b533
 800b4e0:	0800b539 	.word	0x0800b539
 800b4e4:	0800b547 	.word	0x0800b547
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800b4e8:	683b      	ldr	r3, [r7, #0]
 800b4ea:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	7a5b      	ldrb	r3, [r3, #9]
 800b4f0:	2bff      	cmp	r3, #255	@ 0xff
 800b4f2:	d005      	beq.n	800b500 <OutputDbgTrace+0x4c>
 800b4f4:	2bff      	cmp	r3, #255	@ 0xff
 800b4f6:	dc05      	bgt.n	800b504 <OutputDbgTrace+0x50>
 800b4f8:	2b0e      	cmp	r3, #14
 800b4fa:	d005      	beq.n	800b508 <OutputDbgTrace+0x54>
 800b4fc:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 800b4fe:	e001      	b.n	800b504 <OutputDbgTrace+0x50>
          break;
 800b500:	bf00      	nop
 800b502:	e027      	b.n	800b554 <OutputDbgTrace+0xa0>
          break;
 800b504:	bf00      	nop
 800b506:	e025      	b.n	800b554 <OutputDbgTrace+0xa0>
          break;
 800b508:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 800b50a:	e023      	b.n	800b554 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800b50c:	683b      	ldr	r3, [r7, #0]
 800b50e:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800b510:	e020      	b.n	800b554 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800b512:	683b      	ldr	r3, [r7, #0]
 800b514:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800b516:	68fb      	ldr	r3, [r7, #12]
 800b518:	7a5b      	ldrb	r3, [r3, #9]
 800b51a:	2b0e      	cmp	r3, #14
 800b51c:	d001      	beq.n	800b522 <OutputDbgTrace+0x6e>
 800b51e:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800b520:	e000      	b.n	800b524 <OutputDbgTrace+0x70>
          break;
 800b522:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800b524:	e016      	b.n	800b554 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800b526:	683b      	ldr	r3, [r7, #0]
 800b528:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800b52a:	68fb      	ldr	r3, [r7, #12]
 800b52c:	7a5b      	ldrb	r3, [r3, #9]
 800b52e:	2bff      	cmp	r3, #255	@ 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800b530:	e010      	b.n	800b554 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800b532:	683b      	ldr	r3, [r7, #0]
 800b534:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800b536:	e00d      	b.n	800b554 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800b538:	683b      	ldr	r3, [r7, #0]
 800b53a:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	7a5b      	ldrb	r3, [r3, #9]
 800b540:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800b542:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800b544:	e006      	b.n	800b554 <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800b546:	683b      	ldr	r3, [r7, #0]
 800b548:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800b54a:	68fb      	ldr	r3, [r7, #12]
 800b54c:	7a5b      	ldrb	r3, [r3, #9]
 800b54e:	2bff      	cmp	r3, #255	@ 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800b550:	e000      	b.n	800b554 <OutputDbgTrace+0xa0>

    default:
      break;
 800b552:	bf00      	nop
  }

  return;
 800b554:	bf00      	nop
}
 800b556:	3714      	adds	r7, #20
 800b558:	46bd      	mov	sp, r7
 800b55a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b55e:	4770      	bx	lr

0800b560 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 800b560:	b480      	push	{r7}
 800b562:	b085      	sub	sp, #20
 800b564:	af00      	add	r7, sp, #0
 800b566:	4603      	mov	r3, r0
 800b568:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 800b56a:	4b0f      	ldr	r3, [pc, #60]	@ (800b5a8 <OTP_Read+0x48>)
 800b56c:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800b56e:	e002      	b.n	800b576 <OTP_Read+0x16>
  {
    p_id -= 8 ;
 800b570:	68fb      	ldr	r3, [r7, #12]
 800b572:	3b08      	subs	r3, #8
 800b574:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800b576:	68fb      	ldr	r3, [r7, #12]
 800b578:	3307      	adds	r3, #7
 800b57a:	781b      	ldrb	r3, [r3, #0]
 800b57c:	79fa      	ldrb	r2, [r7, #7]
 800b57e:	429a      	cmp	r2, r3
 800b580:	d003      	beq.n	800b58a <OTP_Read+0x2a>
 800b582:	68fb      	ldr	r3, [r7, #12]
 800b584:	4a09      	ldr	r2, [pc, #36]	@ (800b5ac <OTP_Read+0x4c>)
 800b586:	4293      	cmp	r3, r2
 800b588:	d1f2      	bne.n	800b570 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 800b58a:	68fb      	ldr	r3, [r7, #12]
 800b58c:	3307      	adds	r3, #7
 800b58e:	781b      	ldrb	r3, [r3, #0]
 800b590:	79fa      	ldrb	r2, [r7, #7]
 800b592:	429a      	cmp	r2, r3
 800b594:	d001      	beq.n	800b59a <OTP_Read+0x3a>
  {
    p_id = 0 ;
 800b596:	2300      	movs	r3, #0
 800b598:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 800b59a:	68fb      	ldr	r3, [r7, #12]
}
 800b59c:	4618      	mov	r0, r3
 800b59e:	3714      	adds	r7, #20
 800b5a0:	46bd      	mov	sp, r7
 800b5a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5a6:	4770      	bx	lr
 800b5a8:	1fff73f8 	.word	0x1fff73f8
 800b5ac:	1fff7000 	.word	0x1fff7000

0800b5b0 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 800b5b0:	b480      	push	{r7}
 800b5b2:	b083      	sub	sp, #12
 800b5b4:	af00      	add	r7, sp, #0
 800b5b6:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	687a      	ldr	r2, [r7, #4]
 800b5bc:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	687a      	ldr	r2, [r7, #4]
 800b5c2:	605a      	str	r2, [r3, #4]
}
 800b5c4:	bf00      	nop
 800b5c6:	370c      	adds	r7, #12
 800b5c8:	46bd      	mov	sp, r7
 800b5ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ce:	4770      	bx	lr

0800b5d0 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 800b5d0:	b480      	push	{r7}
 800b5d2:	b087      	sub	sp, #28
 800b5d4:	af00      	add	r7, sp, #0
 800b5d6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b5d8:	f3ef 8310 	mrs	r3, PRIMASK
 800b5dc:	60fb      	str	r3, [r7, #12]
  return(result);
 800b5de:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800b5e0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800b5e2:	b672      	cpsid	i
}
 800b5e4:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	687a      	ldr	r2, [r7, #4]
 800b5ec:	429a      	cmp	r2, r3
 800b5ee:	d102      	bne.n	800b5f6 <LST_is_empty+0x26>
  {
    return_value = TRUE;
 800b5f0:	2301      	movs	r3, #1
 800b5f2:	75fb      	strb	r3, [r7, #23]
 800b5f4:	e001      	b.n	800b5fa <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 800b5f6:	2300      	movs	r3, #0
 800b5f8:	75fb      	strb	r3, [r7, #23]
 800b5fa:	693b      	ldr	r3, [r7, #16]
 800b5fc:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b5fe:	68bb      	ldr	r3, [r7, #8]
 800b600:	f383 8810 	msr	PRIMASK, r3
}
 800b604:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 800b606:	7dfb      	ldrb	r3, [r7, #23]
}
 800b608:	4618      	mov	r0, r3
 800b60a:	371c      	adds	r7, #28
 800b60c:	46bd      	mov	sp, r7
 800b60e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b612:	4770      	bx	lr

0800b614 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 800b614:	b480      	push	{r7}
 800b616:	b087      	sub	sp, #28
 800b618:	af00      	add	r7, sp, #0
 800b61a:	6078      	str	r0, [r7, #4]
 800b61c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b61e:	f3ef 8310 	mrs	r3, PRIMASK
 800b622:	60fb      	str	r3, [r7, #12]
  return(result);
 800b624:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800b626:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b628:	b672      	cpsid	i
}
 800b62a:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	681a      	ldr	r2, [r3, #0]
 800b630:	683b      	ldr	r3, [r7, #0]
 800b632:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 800b634:	683b      	ldr	r3, [r7, #0]
 800b636:	687a      	ldr	r2, [r7, #4]
 800b638:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	683a      	ldr	r2, [r7, #0]
 800b63e:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 800b640:	683b      	ldr	r3, [r7, #0]
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	683a      	ldr	r2, [r7, #0]
 800b646:	605a      	str	r2, [r3, #4]
 800b648:	697b      	ldr	r3, [r7, #20]
 800b64a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b64c:	693b      	ldr	r3, [r7, #16]
 800b64e:	f383 8810 	msr	PRIMASK, r3
}
 800b652:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800b654:	bf00      	nop
 800b656:	371c      	adds	r7, #28
 800b658:	46bd      	mov	sp, r7
 800b65a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b65e:	4770      	bx	lr

0800b660 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 800b660:	b480      	push	{r7}
 800b662:	b087      	sub	sp, #28
 800b664:	af00      	add	r7, sp, #0
 800b666:	6078      	str	r0, [r7, #4]
 800b668:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b66a:	f3ef 8310 	mrs	r3, PRIMASK
 800b66e:	60fb      	str	r3, [r7, #12]
  return(result);
 800b670:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800b672:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b674:	b672      	cpsid	i
}
 800b676:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 800b678:	683b      	ldr	r3, [r7, #0]
 800b67a:	687a      	ldr	r2, [r7, #4]
 800b67c:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	685a      	ldr	r2, [r3, #4]
 800b682:	683b      	ldr	r3, [r7, #0]
 800b684:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	683a      	ldr	r2, [r7, #0]
 800b68a:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 800b68c:	683b      	ldr	r3, [r7, #0]
 800b68e:	685b      	ldr	r3, [r3, #4]
 800b690:	683a      	ldr	r2, [r7, #0]
 800b692:	601a      	str	r2, [r3, #0]
 800b694:	697b      	ldr	r3, [r7, #20]
 800b696:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b698:	693b      	ldr	r3, [r7, #16]
 800b69a:	f383 8810 	msr	PRIMASK, r3
}
 800b69e:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800b6a0:	bf00      	nop
 800b6a2:	371c      	adds	r7, #28
 800b6a4:	46bd      	mov	sp, r7
 800b6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6aa:	4770      	bx	lr

0800b6ac <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 800b6ac:	b480      	push	{r7}
 800b6ae:	b087      	sub	sp, #28
 800b6b0:	af00      	add	r7, sp, #0
 800b6b2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b6b4:	f3ef 8310 	mrs	r3, PRIMASK
 800b6b8:	60fb      	str	r3, [r7, #12]
  return(result);
 800b6ba:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800b6bc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b6be:	b672      	cpsid	i
}
 800b6c0:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	685b      	ldr	r3, [r3, #4]
 800b6c6:	687a      	ldr	r2, [r7, #4]
 800b6c8:	6812      	ldr	r2, [r2, #0]
 800b6ca:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	687a      	ldr	r2, [r7, #4]
 800b6d2:	6852      	ldr	r2, [r2, #4]
 800b6d4:	605a      	str	r2, [r3, #4]
 800b6d6:	697b      	ldr	r3, [r7, #20]
 800b6d8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b6da:	693b      	ldr	r3, [r7, #16]
 800b6dc:	f383 8810 	msr	PRIMASK, r3
}
 800b6e0:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800b6e2:	bf00      	nop
 800b6e4:	371c      	adds	r7, #28
 800b6e6:	46bd      	mov	sp, r7
 800b6e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ec:	4770      	bx	lr

0800b6ee <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 800b6ee:	b580      	push	{r7, lr}
 800b6f0:	b086      	sub	sp, #24
 800b6f2:	af00      	add	r7, sp, #0
 800b6f4:	6078      	str	r0, [r7, #4]
 800b6f6:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b6f8:	f3ef 8310 	mrs	r3, PRIMASK
 800b6fc:	60fb      	str	r3, [r7, #12]
  return(result);
 800b6fe:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800b700:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b702:	b672      	cpsid	i
}
 800b704:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	681a      	ldr	r2, [r3, #0]
 800b70a:	683b      	ldr	r3, [r7, #0]
 800b70c:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	681b      	ldr	r3, [r3, #0]
 800b712:	4618      	mov	r0, r3
 800b714:	f7ff ffca 	bl	800b6ac <LST_remove_node>
 800b718:	697b      	ldr	r3, [r7, #20]
 800b71a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b71c:	693b      	ldr	r3, [r7, #16]
 800b71e:	f383 8810 	msr	PRIMASK, r3
}
 800b722:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800b724:	bf00      	nop
 800b726:	3718      	adds	r7, #24
 800b728:	46bd      	mov	sp, r7
 800b72a:	bd80      	pop	{r7, pc}

0800b72c <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 800b72c:	b480      	push	{r7}
 800b72e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 800b730:	4b03      	ldr	r3, [pc, #12]	@ (800b740 <LL_FLASH_GetUDN+0x14>)
 800b732:	681b      	ldr	r3, [r3, #0]
}
 800b734:	4618      	mov	r0, r3
 800b736:	46bd      	mov	sp, r7
 800b738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b73c:	4770      	bx	lr
 800b73e:	bf00      	nop
 800b740:	1fff7580 	.word	0x1fff7580

0800b744 <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 for STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 800b744:	b480      	push	{r7}
 800b746:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 800b748:	4b03      	ldr	r3, [pc, #12]	@ (800b758 <LL_FLASH_GetDeviceID+0x14>)
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	b2db      	uxtb	r3, r3
}
 800b74e:	4618      	mov	r0, r3
 800b750:	46bd      	mov	sp, r7
 800b752:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b756:	4770      	bx	lr
 800b758:	1fff7584 	.word	0x1fff7584

0800b75c <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 800b75c:	b480      	push	{r7}
 800b75e:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 800b760:	4b03      	ldr	r3, [pc, #12]	@ (800b770 <LL_FLASH_GetSTCompanyID+0x14>)
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	0a1b      	lsrs	r3, r3, #8
}
 800b766:	4618      	mov	r0, r3
 800b768:	46bd      	mov	sp, r7
 800b76a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b76e:	4770      	bx	lr
 800b770:	1fff7584 	.word	0x1fff7584

0800b774 <APP_BLE_Init>:

/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init(void)
{
 800b774:	b5b0      	push	{r4, r5, r7, lr}
 800b776:	b090      	sub	sp, #64	@ 0x40
 800b778:	af00      	add	r7, sp, #0
  SHCI_CmdStatus_t status;
#if (RADIO_ACTIVITY_EVENT != 0)
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800b77a:	2392      	movs	r3, #146	@ 0x92
 800b77c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#endif /* RADIO_ACTIVITY_EVENT != 0 */
  /* USER CODE BEGIN APP_BLE_Init_1 */

  UTIL_SEQ_RegTask( 1<<CFG_TASK_MY_TASK_BLE, UTIL_SEQ_RFU, myTask_BLE);
 800b780:	4a2e      	ldr	r2, [pc, #184]	@ (800b83c <APP_BLE_Init+0xc8>)
 800b782:	2100      	movs	r1, #0
 800b784:	2004      	movs	r0, #4
 800b786:	f001 f969 	bl	800ca5c <UTIL_SEQ_RegTask>
  UTIL_SEQ_SetTask(1 << CFG_TASK_MY_TASK_BLE, CFG_SCH_PRIO_0);
 800b78a:	2100      	movs	r1, #0
 800b78c:	2004      	movs	r0, #4
 800b78e:	f001 f987 	bl	800caa0 <UTIL_SEQ_SetTask>

  UTIL_SEQ_RegTask( 1<<CFG_TASK_MY_TASK_IMU, UTIL_SEQ_RFU, myTask_IMU);
 800b792:	4a2b      	ldr	r2, [pc, #172]	@ (800b840 <APP_BLE_Init+0xcc>)
 800b794:	2100      	movs	r1, #0
 800b796:	2008      	movs	r0, #8
 800b798:	f001 f960 	bl	800ca5c <UTIL_SEQ_RegTask>
  UTIL_SEQ_SetTask(1 << CFG_TASK_MY_TASK_IMU, CFG_SCH_PRIO_0);
 800b79c:	2100      	movs	r1, #0
 800b79e:	2008      	movs	r0, #8
 800b7a0:	f001 f97e 	bl	800caa0 <UTIL_SEQ_SetTask>

  /* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 800b7a4:	4b27      	ldr	r3, [pc, #156]	@ (800b844 <APP_BLE_Init+0xd0>)
 800b7a6:	1d3c      	adds	r4, r7, #4
 800b7a8:	461d      	mov	r5, r3
 800b7aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b7ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b7ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b7b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b7b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b7b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b7b6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800b7ba:	c403      	stmia	r4!, {r0, r1}
 800b7bc:	8022      	strh	r2, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init();
 800b7be:	f000 f917 	bl	800b9f0 <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 800b7c2:	2101      	movs	r1, #1
 800b7c4:	2002      	movs	r0, #2
 800b7c6:	f001 f81d 	bl	800c804 <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 800b7ca:	4a1f      	ldr	r2, [pc, #124]	@ (800b848 <APP_BLE_Init+0xd4>)
 800b7cc:	2100      	movs	r1, #0
 800b7ce:	2002      	movs	r0, #2
 800b7d0:	f001 f944 	bl	800ca5c <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  status = SHCI_C2_BLE_Init(&ble_init_cmd_packet);
 800b7d4:	1d3b      	adds	r3, r7, #4
 800b7d6:	4618      	mov	r0, r3
 800b7d8:	f7ff f8b4 	bl	800a944 <SHCI_C2_BLE_Init>
 800b7dc:	4603      	mov	r3, r0
 800b7de:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  if (status != SHCI_Success)
 800b7e2:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d001      	beq.n	800b7ee <APP_BLE_Init+0x7a>
  {
    APP_DBG_MSG("  Fail   : SHCI_C2_BLE_Init command, result: 0x%02x\n\r", status);
    /* if you are here, maybe CPU2 doesn't contain STM32WB_Copro_Wireless_Binaries, see Release_Notes.html */
    Error_Handler();
 800b7ea:	f7f8 fa0b 	bl	8003c04 <Error_Handler>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 800b7ee:	f000 f915 	bl	800ba1c <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 800b7f2:	f7ff f801 	bl	800a7f8 <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800b7f6:	4b15      	ldr	r3, [pc, #84]	@ (800b84c <APP_BLE_Init+0xd8>)
 800b7f8:	2200      	movs	r2, #0
 800b7fa:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 800b7fe:	4b13      	ldr	r3, [pc, #76]	@ (800b84c <APP_BLE_Init+0xd8>)
 800b800:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800b804:	82da      	strh	r2, [r3, #22]

  /**
   * From here, all initialization are BLE application specific
   */

  UTIL_SEQ_RegTask(1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 800b806:	4a12      	ldr	r2, [pc, #72]	@ (800b850 <APP_BLE_Init+0xdc>)
 800b808:	2100      	movs	r1, #0
 800b80a:	2001      	movs	r0, #1
 800b80c:	f001 f926 	bl	800ca5c <UTIL_SEQ_RegTask>

  /**
   * Initialization of ADV - Ad Manufacturer Element - Support OTA Bit Mask
   */
#if (RADIO_ACTIVITY_EVENT != 0)
  ret = aci_hal_set_radio_activity_mask(0x0006);
 800b810:	2006      	movs	r0, #6
 800b812:	f7fe fe65 	bl	800a4e0 <aci_hal_set_radio_activity_mask>
 800b816:	4603      	mov	r3, r0
 800b818:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#endif /* L2CAP_REQUEST_NEW_CONN_PARAM != 0 */

  /**
   * Initialize Custom Template Application
   */
  Custom_APP_Init();
 800b81c:	f000 fbdc 	bl	800bfd8 <Custom_APP_Init>
  /* USER CODE END APP_BLE_Init_3 */

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 800b820:	4b0a      	ldr	r3, [pc, #40]	@ (800b84c <APP_BLE_Init+0xd8>)
 800b822:	2200      	movs	r2, #0
 800b824:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 800b826:	4b09      	ldr	r3, [pc, #36]	@ (800b84c <APP_BLE_Init+0xd8>)
 800b828:	2200      	movs	r2, #0
 800b82a:	761a      	strb	r2, [r3, #24]

  /**
   * Start to Advertise to be connected by a Client
   */
  Adv_Request(APP_BLE_FAST_ADV);
 800b82c:	2001      	movs	r0, #1
 800b82e:	f000 f9a9 	bl	800bb84 <Adv_Request>

  /* USER CODE BEGIN APP_BLE_Init_2 */

  /* USER CODE END APP_BLE_Init_2 */

  return;
 800b832:	bf00      	nop
}
 800b834:	3740      	adds	r7, #64	@ 0x40
 800b836:	46bd      	mov	sp, r7
 800b838:	bdb0      	pop	{r4, r5, r7, pc}
 800b83a:	bf00      	nop
 800b83c:	0800bd61 	.word	0x0800bd61
 800b840:	0800bd53 	.word	0x0800bd53
 800b844:	0800cfc4 	.word	0x0800cfc4
 800b848:	0800ab61 	.word	0x0800ab61
 800b84c:	20000550 	.word	0x20000550
 800b850:	0800bc6d 	.word	0x0800bc6d

0800b854 <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification(void *p_Pckt)
{
 800b854:	b580      	push	{r7, lr}
 800b856:	b08a      	sub	sp, #40	@ 0x28
 800b858:	af00      	add	r7, sp, #0
 800b85a:	6078      	str	r0, [r7, #4]
  hci_event_pckt    *p_event_pckt;
  evt_le_meta_event *p_meta_evt;
  evt_blecore_aci   *p_blecore_evt;
  tBleStatus        ret = BLE_STATUS_INVALID_PARAMS;
 800b85c:	2392      	movs	r3, #146	@ 0x92
 800b85e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  p_event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) p_Pckt)->data;
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	3301      	adds	r3, #1
 800b866:	623b      	str	r3, [r7, #32]

  switch (p_event_pckt->evt)
 800b868:	6a3b      	ldr	r3, [r7, #32]
 800b86a:	781b      	ldrb	r3, [r3, #0]
 800b86c:	2bff      	cmp	r3, #255	@ 0xff
 800b86e:	d053      	beq.n	800b918 <SVCCTL_App_Notification+0xc4>
 800b870:	2bff      	cmp	r3, #255	@ 0xff
 800b872:	f300 80af 	bgt.w	800b9d4 <SVCCTL_App_Notification+0x180>
 800b876:	2b05      	cmp	r3, #5
 800b878:	d002      	beq.n	800b880 <SVCCTL_App_Notification+0x2c>
 800b87a:	2b3e      	cmp	r3, #62	@ 0x3e
 800b87c:	d020      	beq.n	800b8c0 <SVCCTL_App_Notification+0x6c>

    default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
      break;
 800b87e:	e0a9      	b.n	800b9d4 <SVCCTL_App_Notification+0x180>
      p_disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) p_event_pckt->data;
 800b880:	6a3b      	ldr	r3, [r7, #32]
 800b882:	3302      	adds	r3, #2
 800b884:	60fb      	str	r3, [r7, #12]
      if (p_disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800b88c:	b29a      	uxth	r2, r3
 800b88e:	4b55      	ldr	r3, [pc, #340]	@ (800b9e4 <SVCCTL_App_Notification+0x190>)
 800b890:	8adb      	ldrh	r3, [r3, #22]
 800b892:	429a      	cmp	r2, r3
 800b894:	d106      	bne.n	800b8a4 <SVCCTL_App_Notification+0x50>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 800b896:	4b53      	ldr	r3, [pc, #332]	@ (800b9e4 <SVCCTL_App_Notification+0x190>)
 800b898:	2200      	movs	r2, #0
 800b89a:	82da      	strh	r2, [r3, #22]
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800b89c:	4b51      	ldr	r3, [pc, #324]	@ (800b9e4 <SVCCTL_App_Notification+0x190>)
 800b89e:	2200      	movs	r2, #0
 800b8a0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
      Adv_Request(APP_BLE_FAST_ADV);
 800b8a4:	2001      	movs	r0, #1
 800b8a6:	f000 f96d 	bl	800bb84 <Adv_Request>
      HandleNotification.Custom_Evt_Opcode = CUSTOM_DISCON_HANDLE_EVT;
 800b8aa:	4b4f      	ldr	r3, [pc, #316]	@ (800b9e8 <SVCCTL_App_Notification+0x194>)
 800b8ac:	2201      	movs	r2, #1
 800b8ae:	701a      	strb	r2, [r3, #0]
      HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 800b8b0:	4b4c      	ldr	r3, [pc, #304]	@ (800b9e4 <SVCCTL_App_Notification+0x190>)
 800b8b2:	8ada      	ldrh	r2, [r3, #22]
 800b8b4:	4b4c      	ldr	r3, [pc, #304]	@ (800b9e8 <SVCCTL_App_Notification+0x194>)
 800b8b6:	805a      	strh	r2, [r3, #2]
      Custom_APP_Notification(&HandleNotification);
 800b8b8:	484b      	ldr	r0, [pc, #300]	@ (800b9e8 <SVCCTL_App_Notification+0x194>)
 800b8ba:	f000 fb79 	bl	800bfb0 <Custom_APP_Notification>
      break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 800b8be:	e08c      	b.n	800b9da <SVCCTL_App_Notification+0x186>
      p_meta_evt = (evt_le_meta_event*) p_event_pckt->data;
 800b8c0:	6a3b      	ldr	r3, [r7, #32]
 800b8c2:	3302      	adds	r3, #2
 800b8c4:	617b      	str	r3, [r7, #20]
      switch (p_meta_evt->subevent)
 800b8c6:	697b      	ldr	r3, [r7, #20]
 800b8c8:	781b      	ldrb	r3, [r3, #0]
 800b8ca:	2b01      	cmp	r3, #1
 800b8cc:	d001      	beq.n	800b8d2 <SVCCTL_App_Notification+0x7e>
 800b8ce:	2b03      	cmp	r3, #3
          break;
 800b8d0:	e021      	b.n	800b916 <SVCCTL_App_Notification+0xc2>
          p_connection_complete_event = (hci_le_connection_complete_event_rp0 *) p_meta_evt->data;
 800b8d2:	697b      	ldr	r3, [r7, #20]
 800b8d4:	3301      	adds	r3, #1
 800b8d6:	613b      	str	r3, [r7, #16]
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 800b8d8:	4b42      	ldr	r3, [pc, #264]	@ (800b9e4 <SVCCTL_App_Notification+0x190>)
 800b8da:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800b8de:	2b04      	cmp	r3, #4
 800b8e0:	d104      	bne.n	800b8ec <SVCCTL_App_Notification+0x98>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 800b8e2:	4b40      	ldr	r3, [pc, #256]	@ (800b9e4 <SVCCTL_App_Notification+0x190>)
 800b8e4:	2206      	movs	r2, #6
 800b8e6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
 800b8ea:	e003      	b.n	800b8f4 <SVCCTL_App_Notification+0xa0>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 800b8ec:	4b3d      	ldr	r3, [pc, #244]	@ (800b9e4 <SVCCTL_App_Notification+0x190>)
 800b8ee:	2205      	movs	r2, #5
 800b8f0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = p_connection_complete_event->Connection_Handle;
 800b8f4:	693b      	ldr	r3, [r7, #16]
 800b8f6:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800b8fa:	b29a      	uxth	r2, r3
 800b8fc:	4b39      	ldr	r3, [pc, #228]	@ (800b9e4 <SVCCTL_App_Notification+0x190>)
 800b8fe:	82da      	strh	r2, [r3, #22]
          HandleNotification.Custom_Evt_Opcode = CUSTOM_CONN_HANDLE_EVT;
 800b900:	4b39      	ldr	r3, [pc, #228]	@ (800b9e8 <SVCCTL_App_Notification+0x194>)
 800b902:	2200      	movs	r2, #0
 800b904:	701a      	strb	r2, [r3, #0]
          HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 800b906:	4b37      	ldr	r3, [pc, #220]	@ (800b9e4 <SVCCTL_App_Notification+0x190>)
 800b908:	8ada      	ldrh	r2, [r3, #22]
 800b90a:	4b37      	ldr	r3, [pc, #220]	@ (800b9e8 <SVCCTL_App_Notification+0x194>)
 800b90c:	805a      	strh	r2, [r3, #2]
          Custom_APP_Notification(&HandleNotification);
 800b90e:	4836      	ldr	r0, [pc, #216]	@ (800b9e8 <SVCCTL_App_Notification+0x194>)
 800b910:	f000 fb4e 	bl	800bfb0 <Custom_APP_Notification>
          break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 800b914:	bf00      	nop
      break; /* HCI_LE_META_EVT_CODE */
 800b916:	e060      	b.n	800b9da <SVCCTL_App_Notification+0x186>
      p_blecore_evt = (evt_blecore_aci*) p_event_pckt->data;
 800b918:	6a3b      	ldr	r3, [r7, #32]
 800b91a:	3302      	adds	r3, #2
 800b91c:	61fb      	str	r3, [r7, #28]
      switch (p_blecore_evt->ecode)
 800b91e:	69fb      	ldr	r3, [r7, #28]
 800b920:	881b      	ldrh	r3, [r3, #0]
 800b922:	b29b      	uxth	r3, r3
 800b924:	f640 420e 	movw	r2, #3086	@ 0xc0e
 800b928:	4293      	cmp	r3, r2
 800b92a:	d047      	beq.n	800b9bc <SVCCTL_App_Notification+0x168>
 800b92c:	f640 420e 	movw	r2, #3086	@ 0xc0e
 800b930:	4293      	cmp	r3, r2
 800b932:	dc51      	bgt.n	800b9d8 <SVCCTL_App_Notification+0x184>
 800b934:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b938:	d046      	beq.n	800b9c8 <SVCCTL_App_Notification+0x174>
 800b93a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b93e:	dc4b      	bgt.n	800b9d8 <SVCCTL_App_Notification+0x184>
 800b940:	2b04      	cmp	r3, #4
 800b942:	d043      	beq.n	800b9cc <SVCCTL_App_Notification+0x178>
 800b944:	2b04      	cmp	r3, #4
 800b946:	db47      	blt.n	800b9d8 <SVCCTL_App_Notification+0x184>
 800b948:	f240 420a 	movw	r2, #1034	@ 0x40a
 800b94c:	4293      	cmp	r3, r2
 800b94e:	dc43      	bgt.n	800b9d8 <SVCCTL_App_Notification+0x184>
 800b950:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b954:	dd40      	ble.n	800b9d8 <SVCCTL_App_Notification+0x184>
 800b956:	f2a3 4301 	subw	r3, r3, #1025	@ 0x401
 800b95a:	2b09      	cmp	r3, #9
 800b95c:	d83c      	bhi.n	800b9d8 <SVCCTL_App_Notification+0x184>
 800b95e:	a201      	add	r2, pc, #4	@ (adr r2, 800b964 <SVCCTL_App_Notification+0x110>)
 800b960:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b964:	0800b9b5 	.word	0x0800b9b5
 800b968:	0800b98d 	.word	0x0800b98d
 800b96c:	0800b9d9 	.word	0x0800b9d9
 800b970:	0800b9d9 	.word	0x0800b9d9
 800b974:	0800b9d9 	.word	0x0800b9d9
 800b978:	0800b9d9 	.word	0x0800b9d9
 800b97c:	0800b9d1 	.word	0x0800b9d1
 800b980:	0800b9d9 	.word	0x0800b9d9
 800b984:	0800b9a1 	.word	0x0800b9a1
 800b988:	0800b9d1 	.word	0x0800b9d1
          ret = aci_gap_pass_key_resp(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, CFG_FIXED_PIN);
 800b98c:	4b15      	ldr	r3, [pc, #84]	@ (800b9e4 <SVCCTL_App_Notification+0x190>)
 800b98e:	8adb      	ldrh	r3, [r3, #22]
 800b990:	4916      	ldr	r1, [pc, #88]	@ (800b9ec <SVCCTL_App_Notification+0x198>)
 800b992:	4618      	mov	r0, r3
 800b994:	f7fd ffa6 	bl	80098e4 <aci_gap_pass_key_resp>
 800b998:	4603      	mov	r3, r0
 800b99a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
          break;
 800b99e:	e018      	b.n	800b9d2 <SVCCTL_App_Notification+0x17e>
          ret = aci_gap_numeric_comparison_value_confirm_yesno(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, YES);
 800b9a0:	4b10      	ldr	r3, [pc, #64]	@ (800b9e4 <SVCCTL_App_Notification+0x190>)
 800b9a2:	8adb      	ldrh	r3, [r3, #22]
 800b9a4:	2101      	movs	r1, #1
 800b9a6:	4618      	mov	r0, r3
 800b9a8:	f7fe f946 	bl	8009c38 <aci_gap_numeric_comparison_value_confirm_yesno>
 800b9ac:	4603      	mov	r3, r0
 800b9ae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
          break;
 800b9b2:	e00e      	b.n	800b9d2 <SVCCTL_App_Notification+0x17e>
          p_pairing_complete = (aci_gap_pairing_complete_event_rp0*)p_blecore_evt->data;
 800b9b4:	69fb      	ldr	r3, [r7, #28]
 800b9b6:	3302      	adds	r3, #2
 800b9b8:	61bb      	str	r3, [r7, #24]
          break;
 800b9ba:	e00a      	b.n	800b9d2 <SVCCTL_App_Notification+0x17e>
          aci_gatt_confirm_indication(BleApplicationContext.BleApplicationContext_legacy.connectionHandle);
 800b9bc:	4b09      	ldr	r3, [pc, #36]	@ (800b9e4 <SVCCTL_App_Notification+0x190>)
 800b9be:	8adb      	ldrh	r3, [r3, #22]
 800b9c0:	4618      	mov	r0, r3
 800b9c2:	f7fe fc4c 	bl	800a25e <aci_gatt_confirm_indication>
        break;
 800b9c6:	e004      	b.n	800b9d2 <SVCCTL_App_Notification+0x17e>
          break;
 800b9c8:	bf00      	nop
 800b9ca:	e005      	b.n	800b9d8 <SVCCTL_App_Notification+0x184>
          break; /* ACI_HAL_END_OF_RADIO_ACTIVITY_VSEVT_CODE */
 800b9cc:	bf00      	nop
 800b9ce:	e003      	b.n	800b9d8 <SVCCTL_App_Notification+0x184>
          break; /* ACI_GAP_PROC_COMPLETE_VSEVT_CODE */
 800b9d0:	bf00      	nop
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800b9d2:	e001      	b.n	800b9d8 <SVCCTL_App_Notification+0x184>
      break;
 800b9d4:	bf00      	nop
 800b9d6:	e000      	b.n	800b9da <SVCCTL_App_Notification+0x186>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800b9d8:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 800b9da:	2301      	movs	r3, #1
}
 800b9dc:	4618      	mov	r0, r3
 800b9de:	3728      	adds	r7, #40	@ 0x28
 800b9e0:	46bd      	mov	sp, r7
 800b9e2:	bd80      	pop	{r7, pc}
 800b9e4:	20000550 	.word	0x20000550
 800b9e8:	200005d4 	.word	0x200005d4
 800b9ec:	0001b207 	.word	0x0001b207

0800b9f0 <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init(void)
{
 800b9f0:	b580      	push	{r7, lr}
 800b9f2:	b082      	sub	sp, #8
 800b9f4:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 800b9f6:	4b06      	ldr	r3, [pc, #24]	@ (800ba10 <Ble_Tl_Init+0x20>)
 800b9f8:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 800b9fa:	4b06      	ldr	r3, [pc, #24]	@ (800ba14 <Ble_Tl_Init+0x24>)
 800b9fc:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 800b9fe:	463b      	mov	r3, r7
 800ba00:	4619      	mov	r1, r3
 800ba02:	4805      	ldr	r0, [pc, #20]	@ (800ba18 <Ble_Tl_Init+0x28>)
 800ba04:	f7ff f890 	bl	800ab28 <hci_init>

  return;
 800ba08:	bf00      	nop
}
 800ba0a:	3708      	adds	r7, #8
 800ba0c:	46bd      	mov	sp, r7
 800ba0e:	bd80      	pop	{r7, pc}
 800ba10:	200300d8 	.word	0x200300d8
 800ba14:	0800bd1d 	.word	0x0800bd1d
 800ba18:	0800bce5 	.word	0x0800bce5

0800ba1c <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void)
{
 800ba1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ba1e:	b08d      	sub	sp, #52	@ 0x34
 800ba20:	af06      	add	r7, sp, #24
  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *p_bd_addr;
  uint16_t a_appearance[1] = {BLE_CFG_GAP_APPEARANCE};
 800ba22:	2300      	movs	r3, #0
 800ba24:	803b      	strh	r3, [r7, #0]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800ba26:	2392      	movs	r3, #146	@ 0x92
 800ba28:	75fb      	strb	r3, [r7, #23]

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  ret = hci_reset();
 800ba2a:	f7fe fdad 	bl	800a588 <hci_reset>
 800ba2e:	4603      	mov	r3, r0
 800ba30:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write the BD Address
   */
  p_bd_addr = BleGetBdAddress();
 800ba32:	f000 f8d7 	bl	800bbe4 <BleGetBdAddress>
 800ba36:	6138      	str	r0, [r7, #16]
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET, CONFIG_DATA_PUBADDR_LEN, (uint8_t*) p_bd_addr);
 800ba38:	693a      	ldr	r2, [r7, #16]
 800ba3a:	2106      	movs	r1, #6
 800ba3c:	2000      	movs	r0, #0
 800ba3e:	f7fe fc63 	bl	800a308 <aci_hal_write_config_data>
 800ba42:	4603      	mov	r3, r0
 800ba44:	75fb      	strb	r3, [r7, #23]
#endif /* CFG_BLE_ADDRESS_TYPE != GAP_PUBLIC_ADDR */

  /**
   * Write Identity root key used to derive IRK and DHK(Legacy)
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)a_BLE_CfgIrValue);
 800ba46:	4a4a      	ldr	r2, [pc, #296]	@ (800bb70 <Ble_Hci_Gap_Gatt_Init+0x154>)
 800ba48:	2110      	movs	r1, #16
 800ba4a:	2018      	movs	r0, #24
 800ba4c:	f7fe fc5c 	bl	800a308 <aci_hal_write_config_data>
 800ba50:	4603      	mov	r3, r0
 800ba52:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write Encryption root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)a_BLE_CfgErValue);
 800ba54:	4a47      	ldr	r2, [pc, #284]	@ (800bb74 <Ble_Hci_Gap_Gatt_Init+0x158>)
 800ba56:	2110      	movs	r1, #16
 800ba58:	2008      	movs	r0, #8
 800ba5a:	f7fe fc55 	bl	800a308 <aci_hal_write_config_data>
 800ba5e:	4603      	mov	r3, r0
 800ba60:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Set TX Power.
   */
  ret = aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 800ba62:	2118      	movs	r1, #24
 800ba64:	2001      	movs	r0, #1
 800ba66:	f7fe fcd4 	bl	800a412 <aci_hal_set_tx_power_level>
 800ba6a:	4603      	mov	r3, r0
 800ba6c:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GATT interface
   */
  ret = aci_gatt_init();
 800ba6e:	f7fe f94a 	bl	8009d06 <aci_gatt_init>
 800ba72:	4603      	mov	r3, r0
 800ba74:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GAP interface
   */
  role = 0;
 800ba76:	2300      	movs	r3, #0
 800ba78:	73fb      	strb	r3, [r7, #15]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 800ba7a:	7bfb      	ldrb	r3, [r7, #15]
 800ba7c:	f043 0301 	orr.w	r3, r3, #1
 800ba80:	73fb      	strb	r3, [r7, #15]

/* USER CODE BEGIN Role_Mngt*/

/* USER CODE END Role_Mngt */

  if (role > 0)
 800ba82:	7bfb      	ldrb	r3, [r7, #15]
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	d01f      	beq.n	800bac8 <Ble_Hci_Gap_Gatt_Init+0xac>
  {
    const char *name = CFG_GAP_DEVICE_NAME;
 800ba88:	4b3b      	ldr	r3, [pc, #236]	@ (800bb78 <Ble_Hci_Gap_Gatt_Init+0x15c>)
 800ba8a:	60bb      	str	r3, [r7, #8]
    ret = aci_gap_init(role,
 800ba8c:	1dba      	adds	r2, r7, #6
 800ba8e:	7bf8      	ldrb	r0, [r7, #15]
 800ba90:	1cbb      	adds	r3, r7, #2
 800ba92:	9301      	str	r3, [sp, #4]
 800ba94:	1d3b      	adds	r3, r7, #4
 800ba96:	9300      	str	r3, [sp, #0]
 800ba98:	4613      	mov	r3, r2
 800ba9a:	2208      	movs	r2, #8
 800ba9c:	2100      	movs	r1, #0
 800ba9e:	f7fd ff88 	bl	80099b2 <aci_gap_init>
 800baa2:	4603      	mov	r3, r0
 800baa4:	75fb      	strb	r3, [r7, #23]
    else
    {
      APP_DBG_MSG("  Success: aci_gap_init command\n");
    }

    ret = aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name);
 800baa6:	88fc      	ldrh	r4, [r7, #6]
 800baa8:	88bd      	ldrh	r5, [r7, #4]
 800baaa:	68b8      	ldr	r0, [r7, #8]
 800baac:	f7f4 fb68 	bl	8000180 <strlen>
 800bab0:	4603      	mov	r3, r0
 800bab2:	b2da      	uxtb	r2, r3
 800bab4:	68bb      	ldr	r3, [r7, #8]
 800bab6:	9300      	str	r3, [sp, #0]
 800bab8:	4613      	mov	r3, r2
 800baba:	2200      	movs	r2, #0
 800babc:	4629      	mov	r1, r5
 800babe:	4620      	mov	r0, r4
 800bac0:	f7fe fb24 	bl	800a10c <aci_gatt_update_char_value>
 800bac4:	4603      	mov	r3, r0
 800bac6:	75fb      	strb	r3, [r7, #23]
    {
      BLE_DBG_SVCCTL_MSG("  Success: aci_gatt_update_char_value - Device Name\n");
    }
  }

  ret = aci_gatt_update_char_value(gap_service_handle,
 800bac8:	88f8      	ldrh	r0, [r7, #6]
 800baca:	8879      	ldrh	r1, [r7, #2]
 800bacc:	463b      	mov	r3, r7
 800bace:	9300      	str	r3, [sp, #0]
 800bad0:	2302      	movs	r3, #2
 800bad2:	2200      	movs	r2, #0
 800bad4:	f7fe fb1a 	bl	800a10c <aci_gatt_update_char_value>
 800bad8:	4603      	mov	r3, r0
 800bada:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize Default PHY
   */
  ret = hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 800badc:	2202      	movs	r2, #2
 800bade:	2102      	movs	r1, #2
 800bae0:	2000      	movs	r0, #0
 800bae2:	f7fe fd75 	bl	800a5d0 <hci_le_set_default_phy>
 800bae6:	4603      	mov	r3, r0
 800bae8:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 800baea:	4b24      	ldr	r3, [pc, #144]	@ (800bb7c <Ble_Hci_Gap_Gatt_Init+0x160>)
 800baec:	2201      	movs	r2, #1
 800baee:	701a      	strb	r2, [r3, #0]
  ret = aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 800baf0:	4b22      	ldr	r3, [pc, #136]	@ (800bb7c <Ble_Hci_Gap_Gatt_Init+0x160>)
 800baf2:	781b      	ldrb	r3, [r3, #0]
 800baf4:	4618      	mov	r0, r3
 800baf6:	f7fd fddd 	bl	80096b4 <aci_gap_set_io_capability>
 800bafa:	4603      	mov	r3, r0
 800bafc:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 800bafe:	4b1f      	ldr	r3, [pc, #124]	@ (800bb7c <Ble_Hci_Gap_Gatt_Init+0x160>)
 800bb00:	2201      	movs	r2, #1
 800bb02:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 800bb04:	4b1d      	ldr	r3, [pc, #116]	@ (800bb7c <Ble_Hci_Gap_Gatt_Init+0x160>)
 800bb06:	2208      	movs	r2, #8
 800bb08:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 800bb0a:	4b1c      	ldr	r3, [pc, #112]	@ (800bb7c <Ble_Hci_Gap_Gatt_Init+0x160>)
 800bb0c:	2210      	movs	r2, #16
 800bb0e:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 800bb10:	4b1a      	ldr	r3, [pc, #104]	@ (800bb7c <Ble_Hci_Gap_Gatt_Init+0x160>)
 800bb12:	2200      	movs	r2, #0
 800bb14:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 800bb16:	4b19      	ldr	r3, [pc, #100]	@ (800bb7c <Ble_Hci_Gap_Gatt_Init+0x160>)
 800bb18:	4a19      	ldr	r2, [pc, #100]	@ (800bb80 <Ble_Hci_Gap_Gatt_Init+0x164>)
 800bb1a:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 800bb1c:	4b17      	ldr	r3, [pc, #92]	@ (800bb7c <Ble_Hci_Gap_Gatt_Init+0x160>)
 800bb1e:	2200      	movs	r2, #0
 800bb20:	709a      	strb	r2, [r3, #2]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init_1*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init_1*/

  ret = aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 800bb22:	4b16      	ldr	r3, [pc, #88]	@ (800bb7c <Ble_Hci_Gap_Gatt_Init+0x160>)
 800bb24:	789c      	ldrb	r4, [r3, #2]
 800bb26:	4b15      	ldr	r3, [pc, #84]	@ (800bb7c <Ble_Hci_Gap_Gatt_Init+0x160>)
 800bb28:	785d      	ldrb	r5, [r3, #1]
 800bb2a:	4b14      	ldr	r3, [pc, #80]	@ (800bb7c <Ble_Hci_Gap_Gatt_Init+0x160>)
 800bb2c:	791b      	ldrb	r3, [r3, #4]
 800bb2e:	4a13      	ldr	r2, [pc, #76]	@ (800bb7c <Ble_Hci_Gap_Gatt_Init+0x160>)
 800bb30:	7952      	ldrb	r2, [r2, #5]
 800bb32:	4912      	ldr	r1, [pc, #72]	@ (800bb7c <Ble_Hci_Gap_Gatt_Init+0x160>)
 800bb34:	78c9      	ldrb	r1, [r1, #3]
 800bb36:	4811      	ldr	r0, [pc, #68]	@ (800bb7c <Ble_Hci_Gap_Gatt_Init+0x160>)
 800bb38:	6880      	ldr	r0, [r0, #8]
 800bb3a:	2600      	movs	r6, #0
 800bb3c:	9604      	str	r6, [sp, #16]
 800bb3e:	9003      	str	r0, [sp, #12]
 800bb40:	9102      	str	r1, [sp, #8]
 800bb42:	9201      	str	r2, [sp, #4]
 800bb44:	9300      	str	r3, [sp, #0]
 800bb46:	2300      	movs	r3, #0
 800bb48:	2201      	movs	r2, #1
 800bb4a:	4629      	mov	r1, r5
 800bb4c:	4620      	mov	r0, r4
 800bb4e:	f7fd fe05 	bl	800975c <aci_gap_set_authentication_requirement>
 800bb52:	4603      	mov	r3, r0
 800bb54:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize whitelist
   */
  if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 800bb56:	4b09      	ldr	r3, [pc, #36]	@ (800bb7c <Ble_Hci_Gap_Gatt_Init+0x160>)
 800bb58:	789b      	ldrb	r3, [r3, #2]
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d003      	beq.n	800bb66 <Ble_Hci_Gap_Gatt_Init+0x14a>
  {
    ret = aci_gap_configure_whitelist();
 800bb5e:	f7fe f847 	bl	8009bf0 <aci_gap_configure_filter_accept_list>
 800bb62:	4603      	mov	r3, r0
 800bb64:	75fb      	strb	r3, [r7, #23]
    {
      APP_DBG_MSG("  Success: aci_gap_configure_whitelist command\n");
    }
  }
  APP_DBG_MSG("==>> End Ble_Hci_Gap_Gatt_Init function\n\r");
}
 800bb66:	bf00      	nop
 800bb68:	371c      	adds	r7, #28
 800bb6a:	46bd      	mov	sp, r7
 800bb6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bb6e:	bf00      	nop
 800bb70:	0800d1c4 	.word	0x0800d1c4
 800bb74:	0800d1d4 	.word	0x0800d1d4
 800bb78:	0800d000 	.word	0x0800d000
 800bb7c:	20000550 	.word	0x20000550
 800bb80:	0001b207 	.word	0x0001b207

0800bb84 <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t NewStatus)
{
 800bb84:	b580      	push	{r7, lr}
 800bb86:	b08c      	sub	sp, #48	@ 0x30
 800bb88:	af08      	add	r7, sp, #32
 800bb8a:	4603      	mov	r3, r0
 800bb8c:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800bb8e:	2392      	movs	r3, #146	@ 0x92
 800bb90:	73fb      	strb	r3, [r7, #15]

  BleApplicationContext.Device_Connection_Status = NewStatus;
 800bb92:	4a12      	ldr	r2, [pc, #72]	@ (800bbdc <Adv_Request+0x58>)
 800bb94:	79fb      	ldrb	r3, [r7, #7]
 800bb96:	f882 3080 	strb.w	r3, [r2, #128]	@ 0x80
  /* Start Fast or Low Power Advertising */
  ret = aci_gap_set_discoverable(ADV_TYPE,
 800bb9a:	2300      	movs	r3, #0
 800bb9c:	9306      	str	r3, [sp, #24]
 800bb9e:	2300      	movs	r3, #0
 800bba0:	9305      	str	r3, [sp, #20]
 800bba2:	2300      	movs	r3, #0
 800bba4:	9304      	str	r3, [sp, #16]
 800bba6:	2300      	movs	r3, #0
 800bba8:	9303      	str	r3, [sp, #12]
 800bbaa:	2300      	movs	r3, #0
 800bbac:	9302      	str	r3, [sp, #8]
 800bbae:	2300      	movs	r3, #0
 800bbb0:	9301      	str	r3, [sp, #4]
 800bbb2:	2300      	movs	r3, #0
 800bbb4:	9300      	str	r3, [sp, #0]
 800bbb6:	2300      	movs	r3, #0
 800bbb8:	22a0      	movs	r2, #160	@ 0xa0
 800bbba:	2180      	movs	r1, #128	@ 0x80
 800bbbc:	2000      	movs	r0, #0
 800bbbe:	f7fd fc7f 	bl	80094c0 <aci_gap_set_discoverable>
 800bbc2:	4603      	mov	r3, r0
 800bbc4:	73fb      	strb	r3, [r7, #15]
/* USER CODE BEGIN Adv_Request_1*/

/* USER CODE END Adv_Request_1*/

  /* Update Advertising data */
  ret = aci_gap_update_adv_data(sizeof(a_AdvData), (uint8_t*) a_AdvData);
 800bbc6:	4906      	ldr	r1, [pc, #24]	@ (800bbe0 <Adv_Request+0x5c>)
 800bbc8:	200a      	movs	r0, #10
 800bbca:	f7fd ff9f 	bl	8009b0c <aci_gap_update_adv_data>
 800bbce:	4603      	mov	r3, r0
 800bbd0:	73fb      	strb	r3, [r7, #15]
  else
  {
      APP_DBG_MSG("==>> Success: Start Fast Advertising \n\r");
  }

  return;
 800bbd2:	bf00      	nop
}
 800bbd4:	3710      	adds	r7, #16
 800bbd6:	46bd      	mov	sp, r7
 800bbd8:	bd80      	pop	{r7, pc}
 800bbda:	bf00      	nop
 800bbdc:	20000550 	.word	0x20000550
 800bbe0:	2000004c 	.word	0x2000004c

0800bbe4 <BleGetBdAddress>:

const uint8_t* BleGetBdAddress(void)
{
 800bbe4:	b580      	push	{r7, lr}
 800bbe6:	b086      	sub	sp, #24
 800bbe8:	af00      	add	r7, sp, #0
  const uint8_t *p_bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 800bbea:	f7ff fd9f 	bl	800b72c <LL_FLASH_GetUDN>
 800bbee:	6138      	str	r0, [r7, #16]

  if (udn != 0xFFFFFFFF)
 800bbf0:	693b      	ldr	r3, [r7, #16]
 800bbf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bbf6:	d023      	beq.n	800bc40 <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 800bbf8:	f7ff fdb0 	bl	800b75c <LL_FLASH_GetSTCompanyID>
 800bbfc:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 800bbfe:	f7ff fda1 	bl	800b744 <LL_FLASH_GetDeviceID>
 800bc02:	6078      	str	r0, [r7, #4]
     * bit[23:16] : Device ID.
     * bit[15:0] : The last 16bits from the UDN
     * Note: In order to use the Public Address in a final product, a dedicated
     * 24bits company ID (OUI) shall be bought.
     */
    a_BdAddrUdn[0] = (uint8_t)(udn & 0x000000FF);
 800bc04:	693b      	ldr	r3, [r7, #16]
 800bc06:	b2da      	uxtb	r2, r3
 800bc08:	4b16      	ldr	r3, [pc, #88]	@ (800bc64 <BleGetBdAddress+0x80>)
 800bc0a:	701a      	strb	r2, [r3, #0]
    a_BdAddrUdn[1] = (uint8_t)((udn & 0x0000FF00) >> 8);
 800bc0c:	693b      	ldr	r3, [r7, #16]
 800bc0e:	0a1b      	lsrs	r3, r3, #8
 800bc10:	b2da      	uxtb	r2, r3
 800bc12:	4b14      	ldr	r3, [pc, #80]	@ (800bc64 <BleGetBdAddress+0x80>)
 800bc14:	705a      	strb	r2, [r3, #1]
    a_BdAddrUdn[2] = (uint8_t)device_id;
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	b2da      	uxtb	r2, r3
 800bc1a:	4b12      	ldr	r3, [pc, #72]	@ (800bc64 <BleGetBdAddress+0x80>)
 800bc1c:	709a      	strb	r2, [r3, #2]
    a_BdAddrUdn[3] = (uint8_t)(company_id & 0x000000FF);
 800bc1e:	68bb      	ldr	r3, [r7, #8]
 800bc20:	b2da      	uxtb	r2, r3
 800bc22:	4b10      	ldr	r3, [pc, #64]	@ (800bc64 <BleGetBdAddress+0x80>)
 800bc24:	70da      	strb	r2, [r3, #3]
    a_BdAddrUdn[4] = (uint8_t)((company_id & 0x0000FF00) >> 8);
 800bc26:	68bb      	ldr	r3, [r7, #8]
 800bc28:	0a1b      	lsrs	r3, r3, #8
 800bc2a:	b2da      	uxtb	r2, r3
 800bc2c:	4b0d      	ldr	r3, [pc, #52]	@ (800bc64 <BleGetBdAddress+0x80>)
 800bc2e:	711a      	strb	r2, [r3, #4]
    a_BdAddrUdn[5] = (uint8_t)((company_id & 0x00FF0000) >> 16);
 800bc30:	68bb      	ldr	r3, [r7, #8]
 800bc32:	0c1b      	lsrs	r3, r3, #16
 800bc34:	b2da      	uxtb	r2, r3
 800bc36:	4b0b      	ldr	r3, [pc, #44]	@ (800bc64 <BleGetBdAddress+0x80>)
 800bc38:	715a      	strb	r2, [r3, #5]

    p_bd_addr = (const uint8_t *)a_BdAddrUdn;
 800bc3a:	4b0a      	ldr	r3, [pc, #40]	@ (800bc64 <BleGetBdAddress+0x80>)
 800bc3c:	617b      	str	r3, [r7, #20]
 800bc3e:	e00b      	b.n	800bc58 <BleGetBdAddress+0x74>
  }
  else
  {
    p_otp_addr = OTP_Read(0);
 800bc40:	2000      	movs	r0, #0
 800bc42:	f7ff fc8d 	bl	800b560 <OTP_Read>
 800bc46:	60f8      	str	r0, [r7, #12]
    if (p_otp_addr)
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	d002      	beq.n	800bc54 <BleGetBdAddress+0x70>
    {
      p_bd_addr = ((OTP_ID0_t*)p_otp_addr)->bd_address;
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	617b      	str	r3, [r7, #20]
 800bc52:	e001      	b.n	800bc58 <BleGetBdAddress+0x74>
    }
    else
    {
      p_bd_addr = a_MBdAddr;
 800bc54:	4b04      	ldr	r3, [pc, #16]	@ (800bc68 <BleGetBdAddress+0x84>)
 800bc56:	617b      	str	r3, [r7, #20]
    }
  }

  return p_bd_addr;
 800bc58:	697b      	ldr	r3, [r7, #20]
}
 800bc5a:	4618      	mov	r0, r3
 800bc5c:	3718      	adds	r7, #24
 800bc5e:	46bd      	mov	sp, r7
 800bc60:	bd80      	pop	{r7, pc}
 800bc62:	bf00      	nop
 800bc64:	20000548 	.word	0x20000548
 800bc68:	0800d1bc 	.word	0x0800d1bc

0800bc6c <Adv_Cancel>:
 *
 * SPECIFIC FUNCTIONS FOR CUSTOM
 *
 *************************************************************/
static void Adv_Cancel(void)
{
 800bc6c:	b580      	push	{r7, lr}
 800bc6e:	b082      	sub	sp, #8
 800bc70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Adv_Cancel_1 */

  /* USER CODE END Adv_Cancel_1 */

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 800bc72:	4b0a      	ldr	r3, [pc, #40]	@ (800bc9c <Adv_Cancel+0x30>)
 800bc74:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800bc78:	2b05      	cmp	r3, #5
 800bc7a:	d00a      	beq.n	800bc92 <Adv_Cancel+0x26>
  {
    tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800bc7c:	2392      	movs	r3, #146	@ 0x92
 800bc7e:	71fb      	strb	r3, [r7, #7]

    ret = aci_gap_set_non_discoverable();
 800bc80:	f7fd fbfa 	bl	8009478 <aci_gap_set_non_discoverable>
 800bc84:	4603      	mov	r3, r0
 800bc86:	71fb      	strb	r3, [r7, #7]

    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800bc88:	4b04      	ldr	r3, [pc, #16]	@ (800bc9c <Adv_Cancel+0x30>)
 800bc8a:	2200      	movs	r2, #0
 800bc8c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* USER CODE BEGIN Adv_Cancel_2 */

  /* USER CODE END Adv_Cancel_2 */

  return;
 800bc90:	bf00      	nop
 800bc92:	bf00      	nop
}
 800bc94:	3708      	adds	r7, #8
 800bc96:	46bd      	mov	sp, r7
 800bc98:	bd80      	pop	{r7, pc}
 800bc9a:	bf00      	nop
 800bc9c:	20000550 	.word	0x20000550

0800bca0 <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* p_Data)
{
 800bca0:	b580      	push	{r7, lr}
 800bca2:	b082      	sub	sp, #8
 800bca4:	af00      	add	r7, sp, #0
 800bca6:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 800bca8:	2100      	movs	r1, #0
 800bcaa:	2002      	movs	r0, #2
 800bcac:	f000 fef8 	bl	800caa0 <UTIL_SEQ_SetTask>

  return;
 800bcb0:	bf00      	nop
}
 800bcb2:	3708      	adds	r7, #8
 800bcb4:	46bd      	mov	sp, r7
 800bcb6:	bd80      	pop	{r7, pc}

0800bcb8 <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t Flag)
{
 800bcb8:	b580      	push	{r7, lr}
 800bcba:	b082      	sub	sp, #8
 800bcbc:	af00      	add	r7, sp, #0
 800bcbe:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800bcc0:	2001      	movs	r0, #1
 800bcc2:	f000 ff59 	bl	800cb78 <UTIL_SEQ_SetEvt>

  return;
 800bcc6:	bf00      	nop
}
 800bcc8:	3708      	adds	r7, #8
 800bcca:	46bd      	mov	sp, r7
 800bccc:	bd80      	pop	{r7, pc}

0800bcce <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t Timeout)
{
 800bcce:	b580      	push	{r7, lr}
 800bcd0:	b082      	sub	sp, #8
 800bcd2:	af00      	add	r7, sp, #0
 800bcd4:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800bcd6:	2001      	movs	r0, #1
 800bcd8:	f000 ff6e 	bl	800cbb8 <UTIL_SEQ_WaitEvt>

  return;
 800bcdc:	bf00      	nop
}
 800bcde:	3708      	adds	r7, #8
 800bce0:	46bd      	mov	sp, r7
 800bce2:	bd80      	pop	{r7, pc}

0800bce4 <BLE_UserEvtRx>:

static void BLE_UserEvtRx(void *p_Payload)
{
 800bce4:	b580      	push	{r7, lr}
 800bce6:	b084      	sub	sp, #16
 800bce8:	af00      	add	r7, sp, #0
 800bcea:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *p_param;

  p_param = (tHCI_UserEvtRxParam *)p_Payload;
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(p_param->pckt->evtserial));
 800bcf0:	68fb      	ldr	r3, [r7, #12]
 800bcf2:	685b      	ldr	r3, [r3, #4]
 800bcf4:	3308      	adds	r3, #8
 800bcf6:	4618      	mov	r0, r3
 800bcf8:	f7fe fdd0 	bl	800a89c <SVCCTL_UserEvtRx>
 800bcfc:	4603      	mov	r3, r0
 800bcfe:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 800bd00:	7afb      	ldrb	r3, [r7, #11]
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	d003      	beq.n	800bd0e <BLE_UserEvtRx+0x2a>
  {
    p_param->status = HCI_TL_UserEventFlow_Enable;
 800bd06:	68fb      	ldr	r3, [r7, #12]
 800bd08:	2201      	movs	r2, #1
 800bd0a:	701a      	strb	r2, [r3, #0]
  else
  {
    p_param->status = HCI_TL_UserEventFlow_Disable;
  }

  return;
 800bd0c:	e003      	b.n	800bd16 <BLE_UserEvtRx+0x32>
    p_param->status = HCI_TL_UserEventFlow_Disable;
 800bd0e:	68fb      	ldr	r3, [r7, #12]
 800bd10:	2200      	movs	r2, #0
 800bd12:	701a      	strb	r2, [r3, #0]
  return;
 800bd14:	bf00      	nop
}
 800bd16:	3710      	adds	r7, #16
 800bd18:	46bd      	mov	sp, r7
 800bd1a:	bd80      	pop	{r7, pc}

0800bd1c <BLE_StatusNot>:

static void BLE_StatusNot(HCI_TL_CmdStatus_t Status)
{
 800bd1c:	b580      	push	{r7, lr}
 800bd1e:	b084      	sub	sp, #16
 800bd20:	af00      	add	r7, sp, #0
 800bd22:	4603      	mov	r3, r0
 800bd24:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (Status)
 800bd26:	79fb      	ldrb	r3, [r7, #7]
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d002      	beq.n	800bd32 <BLE_StatusNot+0x16>
 800bd2c:	2b01      	cmp	r3, #1
 800bd2e:	d006      	beq.n	800bd3e <BLE_StatusNot+0x22>

    default:
      /* USER CODE BEGIN Status */

      /* USER CODE END Status */
      break;
 800bd30:	e00b      	b.n	800bd4a <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800bd32:	230f      	movs	r3, #15
 800bd34:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 800bd36:	68f8      	ldr	r0, [r7, #12]
 800bd38:	f000 fede 	bl	800caf8 <UTIL_SEQ_PauseTask>
      break;
 800bd3c:	e005      	b.n	800bd4a <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800bd3e:	230f      	movs	r3, #15
 800bd40:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 800bd42:	68f8      	ldr	r0, [r7, #12]
 800bd44:	f000 fef8 	bl	800cb38 <UTIL_SEQ_ResumeTask>
      break;
 800bd48:	bf00      	nop
  }

  return;
 800bd4a:	bf00      	nop
}
 800bd4c:	3710      	adds	r7, #16
 800bd4e:	46bd      	mov	sp, r7
 800bd50:	bd80      	pop	{r7, pc}

0800bd52 <myTask_IMU>:
/* mySVC */
static void Custom_Mycharnotify_Update_Char(void);
static void Custom_Mycharnotify_Send_Notification(void);

/* USER CODE BEGIN PFP */
void myTask_IMU(void) {
 800bd52:	b480      	push	{r7}
 800bd54:	af00      	add	r7, sp, #0

	//nomal_power_code
//	LSM9DS1_ReadGyro();
//	LSM9DS1_ReadAccel();
//	LSM9DS1_ReadMag();
}
 800bd56:	bf00      	nop
 800bd58:	46bd      	mov	sp, r7
 800bd5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd5e:	4770      	bx	lr

0800bd60 <myTask_BLE>:

void myTask_BLE(void) {
 800bd60:	b580      	push	{r7, lr}
 800bd62:	b086      	sub	sp, #24
 800bd64:	af00      	add	r7, sp, #0

	int16_t accel_x_int = (int16_t) (accel_x * 1000);
 800bd66:	4b78      	ldr	r3, [pc, #480]	@ (800bf48 <myTask_BLE+0x1e8>)
 800bd68:	edd3 7a00 	vldr	s15, [r3]
 800bd6c:	ed9f 7a77 	vldr	s14, [pc, #476]	@ 800bf4c <myTask_BLE+0x1ec>
 800bd70:	ee67 7a87 	vmul.f32	s15, s15, s14
 800bd74:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bd78:	ee17 3a90 	vmov	r3, s15
 800bd7c:	82fb      	strh	r3, [r7, #22]
	int16_t accel_y_int = (int16_t) (accel_y * 1000);
 800bd7e:	4b74      	ldr	r3, [pc, #464]	@ (800bf50 <myTask_BLE+0x1f0>)
 800bd80:	edd3 7a00 	vldr	s15, [r3]
 800bd84:	ed9f 7a71 	vldr	s14, [pc, #452]	@ 800bf4c <myTask_BLE+0x1ec>
 800bd88:	ee67 7a87 	vmul.f32	s15, s15, s14
 800bd8c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bd90:	ee17 3a90 	vmov	r3, s15
 800bd94:	82bb      	strh	r3, [r7, #20]
	int16_t accel_z_int = (int16_t) (accel_z * 1000);
 800bd96:	4b6f      	ldr	r3, [pc, #444]	@ (800bf54 <myTask_BLE+0x1f4>)
 800bd98:	edd3 7a00 	vldr	s15, [r3]
 800bd9c:	ed9f 7a6b 	vldr	s14, [pc, #428]	@ 800bf4c <myTask_BLE+0x1ec>
 800bda0:	ee67 7a87 	vmul.f32	s15, s15, s14
 800bda4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bda8:	ee17 3a90 	vmov	r3, s15
 800bdac:	827b      	strh	r3, [r7, #18]

	int16_t gyro_x_int = (int16_t) (gyro_x * 1000);
 800bdae:	4b6a      	ldr	r3, [pc, #424]	@ (800bf58 <myTask_BLE+0x1f8>)
 800bdb0:	edd3 7a00 	vldr	s15, [r3]
 800bdb4:	ed9f 7a65 	vldr	s14, [pc, #404]	@ 800bf4c <myTask_BLE+0x1ec>
 800bdb8:	ee67 7a87 	vmul.f32	s15, s15, s14
 800bdbc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bdc0:	ee17 3a90 	vmov	r3, s15
 800bdc4:	823b      	strh	r3, [r7, #16]
	int16_t gyro_y_int = (int16_t) (gyro_y * 1000);
 800bdc6:	4b65      	ldr	r3, [pc, #404]	@ (800bf5c <myTask_BLE+0x1fc>)
 800bdc8:	edd3 7a00 	vldr	s15, [r3]
 800bdcc:	ed9f 7a5f 	vldr	s14, [pc, #380]	@ 800bf4c <myTask_BLE+0x1ec>
 800bdd0:	ee67 7a87 	vmul.f32	s15, s15, s14
 800bdd4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bdd8:	ee17 3a90 	vmov	r3, s15
 800bddc:	81fb      	strh	r3, [r7, #14]
	int16_t gyro_z_int = (int16_t) (gyro_z * 1000);
 800bdde:	4b60      	ldr	r3, [pc, #384]	@ (800bf60 <myTask_BLE+0x200>)
 800bde0:	edd3 7a00 	vldr	s15, [r3]
 800bde4:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 800bf4c <myTask_BLE+0x1ec>
 800bde8:	ee67 7a87 	vmul.f32	s15, s15, s14
 800bdec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bdf0:	ee17 3a90 	vmov	r3, s15
 800bdf4:	81bb      	strh	r3, [r7, #12]

//	int16_t mag_x_int = (int16_t) (mag_x * 1000);
//	int16_t mag_y_int = (int16_t) (mag_y * 1000);
//	int16_t mag_z_int = (int16_t) (mag_z * 1000);

	int16_t q0_int = (int16_t) (q0 * 1000);
 800bdf6:	4b5b      	ldr	r3, [pc, #364]	@ (800bf64 <myTask_BLE+0x204>)
 800bdf8:	edd3 7a00 	vldr	s15, [r3]
 800bdfc:	ed9f 7a53 	vldr	s14, [pc, #332]	@ 800bf4c <myTask_BLE+0x1ec>
 800be00:	ee67 7a87 	vmul.f32	s15, s15, s14
 800be04:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800be08:	ee17 3a90 	vmov	r3, s15
 800be0c:	817b      	strh	r3, [r7, #10]
	int16_t q1_int = (int16_t) (q1 * 1000);
 800be0e:	4b56      	ldr	r3, [pc, #344]	@ (800bf68 <myTask_BLE+0x208>)
 800be10:	edd3 7a00 	vldr	s15, [r3]
 800be14:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 800bf4c <myTask_BLE+0x1ec>
 800be18:	ee67 7a87 	vmul.f32	s15, s15, s14
 800be1c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800be20:	ee17 3a90 	vmov	r3, s15
 800be24:	813b      	strh	r3, [r7, #8]
	int16_t q2_int = (int16_t) (q2 * 1000);
 800be26:	4b51      	ldr	r3, [pc, #324]	@ (800bf6c <myTask_BLE+0x20c>)
 800be28:	edd3 7a00 	vldr	s15, [r3]
 800be2c:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 800bf4c <myTask_BLE+0x1ec>
 800be30:	ee67 7a87 	vmul.f32	s15, s15, s14
 800be34:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800be38:	ee17 3a90 	vmov	r3, s15
 800be3c:	80fb      	strh	r3, [r7, #6]
	int16_t q3_int = (int16_t) (q3 * 1000);
 800be3e:	4b4c      	ldr	r3, [pc, #304]	@ (800bf70 <myTask_BLE+0x210>)
 800be40:	edd3 7a00 	vldr	s15, [r3]
 800be44:	ed9f 7a41 	vldr	s14, [pc, #260]	@ 800bf4c <myTask_BLE+0x1ec>
 800be48:	ee67 7a87 	vmul.f32	s15, s15, s14
 800be4c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800be50:	ee17 3a90 	vmov	r3, s15
 800be54:	80bb      	strh	r3, [r7, #4]

	UpdateCharData[0] = (uint8_t) (accel_x_int >> 8);
 800be56:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800be5a:	121b      	asrs	r3, r3, #8
 800be5c:	b21b      	sxth	r3, r3
 800be5e:	b2da      	uxtb	r2, r3
 800be60:	4b44      	ldr	r3, [pc, #272]	@ (800bf74 <myTask_BLE+0x214>)
 800be62:	701a      	strb	r2, [r3, #0]
	UpdateCharData[1] = (uint8_t) (accel_x_int & 0xFF);
 800be64:	8afb      	ldrh	r3, [r7, #22]
 800be66:	b2da      	uxtb	r2, r3
 800be68:	4b42      	ldr	r3, [pc, #264]	@ (800bf74 <myTask_BLE+0x214>)
 800be6a:	705a      	strb	r2, [r3, #1]
	UpdateCharData[2] = (uint8_t) (accel_y_int >> 8);
 800be6c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800be70:	121b      	asrs	r3, r3, #8
 800be72:	b21b      	sxth	r3, r3
 800be74:	b2da      	uxtb	r2, r3
 800be76:	4b3f      	ldr	r3, [pc, #252]	@ (800bf74 <myTask_BLE+0x214>)
 800be78:	709a      	strb	r2, [r3, #2]
	UpdateCharData[3] = (uint8_t) (accel_y_int & 0xFF);
 800be7a:	8abb      	ldrh	r3, [r7, #20]
 800be7c:	b2da      	uxtb	r2, r3
 800be7e:	4b3d      	ldr	r3, [pc, #244]	@ (800bf74 <myTask_BLE+0x214>)
 800be80:	70da      	strb	r2, [r3, #3]
	UpdateCharData[4] = (uint8_t) (accel_z_int >> 8);
 800be82:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800be86:	121b      	asrs	r3, r3, #8
 800be88:	b21b      	sxth	r3, r3
 800be8a:	b2da      	uxtb	r2, r3
 800be8c:	4b39      	ldr	r3, [pc, #228]	@ (800bf74 <myTask_BLE+0x214>)
 800be8e:	711a      	strb	r2, [r3, #4]
	UpdateCharData[5] = (uint8_t) (accel_z_int & 0xFF);
 800be90:	8a7b      	ldrh	r3, [r7, #18]
 800be92:	b2da      	uxtb	r2, r3
 800be94:	4b37      	ldr	r3, [pc, #220]	@ (800bf74 <myTask_BLE+0x214>)
 800be96:	715a      	strb	r2, [r3, #5]

	UpdateCharData[6] = (uint8_t) (gyro_x_int >> 8);
 800be98:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800be9c:	121b      	asrs	r3, r3, #8
 800be9e:	b21b      	sxth	r3, r3
 800bea0:	b2da      	uxtb	r2, r3
 800bea2:	4b34      	ldr	r3, [pc, #208]	@ (800bf74 <myTask_BLE+0x214>)
 800bea4:	719a      	strb	r2, [r3, #6]
	UpdateCharData[7] = (uint8_t) (gyro_x_int & 0xFF);
 800bea6:	8a3b      	ldrh	r3, [r7, #16]
 800bea8:	b2da      	uxtb	r2, r3
 800beaa:	4b32      	ldr	r3, [pc, #200]	@ (800bf74 <myTask_BLE+0x214>)
 800beac:	71da      	strb	r2, [r3, #7]
	UpdateCharData[8] = (uint8_t) (gyro_y_int >> 8);
 800beae:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800beb2:	121b      	asrs	r3, r3, #8
 800beb4:	b21b      	sxth	r3, r3
 800beb6:	b2da      	uxtb	r2, r3
 800beb8:	4b2e      	ldr	r3, [pc, #184]	@ (800bf74 <myTask_BLE+0x214>)
 800beba:	721a      	strb	r2, [r3, #8]

	UpdateCharData[9] = (uint8_t) (gyro_y_int & 0xFF);
 800bebc:	89fb      	ldrh	r3, [r7, #14]
 800bebe:	b2da      	uxtb	r2, r3
 800bec0:	4b2c      	ldr	r3, [pc, #176]	@ (800bf74 <myTask_BLE+0x214>)
 800bec2:	725a      	strb	r2, [r3, #9]
	UpdateCharData[10] = (uint8_t) (gyro_z_int >> 8);
 800bec4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800bec8:	121b      	asrs	r3, r3, #8
 800beca:	b21b      	sxth	r3, r3
 800becc:	b2da      	uxtb	r2, r3
 800bece:	4b29      	ldr	r3, [pc, #164]	@ (800bf74 <myTask_BLE+0x214>)
 800bed0:	729a      	strb	r2, [r3, #10]
	UpdateCharData[11] = (uint8_t) (gyro_z_int & 0xFF);
 800bed2:	89bb      	ldrh	r3, [r7, #12]
 800bed4:	b2da      	uxtb	r2, r3
 800bed6:	4b27      	ldr	r3, [pc, #156]	@ (800bf74 <myTask_BLE+0x214>)
 800bed8:	72da      	strb	r2, [r3, #11]

	UpdateCharData[12] = (uint8_t) (q0_int >> 8);
 800beda:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800bede:	121b      	asrs	r3, r3, #8
 800bee0:	b21b      	sxth	r3, r3
 800bee2:	b2da      	uxtb	r2, r3
 800bee4:	4b23      	ldr	r3, [pc, #140]	@ (800bf74 <myTask_BLE+0x214>)
 800bee6:	731a      	strb	r2, [r3, #12]
	UpdateCharData[13] = (uint8_t) (q0_int & 0xFF);
 800bee8:	897b      	ldrh	r3, [r7, #10]
 800beea:	b2da      	uxtb	r2, r3
 800beec:	4b21      	ldr	r3, [pc, #132]	@ (800bf74 <myTask_BLE+0x214>)
 800beee:	735a      	strb	r2, [r3, #13]
	UpdateCharData[14] = (uint8_t) (q1_int >> 8);
 800bef0:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800bef4:	121b      	asrs	r3, r3, #8
 800bef6:	b21b      	sxth	r3, r3
 800bef8:	b2da      	uxtb	r2, r3
 800befa:	4b1e      	ldr	r3, [pc, #120]	@ (800bf74 <myTask_BLE+0x214>)
 800befc:	739a      	strb	r2, [r3, #14]
	UpdateCharData[15] = (uint8_t) (q1_int & 0xFF);
 800befe:	893b      	ldrh	r3, [r7, #8]
 800bf00:	b2da      	uxtb	r2, r3
 800bf02:	4b1c      	ldr	r3, [pc, #112]	@ (800bf74 <myTask_BLE+0x214>)
 800bf04:	73da      	strb	r2, [r3, #15]
	UpdateCharData[16] = (uint8_t) (q2_int >> 8);
 800bf06:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800bf0a:	121b      	asrs	r3, r3, #8
 800bf0c:	b21b      	sxth	r3, r3
 800bf0e:	b2da      	uxtb	r2, r3
 800bf10:	4b18      	ldr	r3, [pc, #96]	@ (800bf74 <myTask_BLE+0x214>)
 800bf12:	741a      	strb	r2, [r3, #16]
	UpdateCharData[17] = (uint8_t) (q2_int & 0xFF);
 800bf14:	88fb      	ldrh	r3, [r7, #6]
 800bf16:	b2da      	uxtb	r2, r3
 800bf18:	4b16      	ldr	r3, [pc, #88]	@ (800bf74 <myTask_BLE+0x214>)
 800bf1a:	745a      	strb	r2, [r3, #17]
	UpdateCharData[18] = (uint8_t) (q3_int >> 8);
 800bf1c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800bf20:	121b      	asrs	r3, r3, #8
 800bf22:	b21b      	sxth	r3, r3
 800bf24:	b2da      	uxtb	r2, r3
 800bf26:	4b13      	ldr	r3, [pc, #76]	@ (800bf74 <myTask_BLE+0x214>)
 800bf28:	749a      	strb	r2, [r3, #18]
	UpdateCharData[19] = (uint8_t) (q3_int & 0xFF);
 800bf2a:	88bb      	ldrh	r3, [r7, #4]
 800bf2c:	b2da      	uxtb	r2, r3
 800bf2e:	4b11      	ldr	r3, [pc, #68]	@ (800bf74 <myTask_BLE+0x214>)
 800bf30:	74da      	strb	r2, [r3, #19]

	Custom_Mycharnotify_Update_Char();
 800bf32:	f000 f859 	bl	800bfe8 <Custom_Mycharnotify_Update_Char>

	UTIL_SEQ_SetTask(1 << CFG_TASK_MY_TASK_IMU, CFG_SCH_PRIO_0);
 800bf36:	2100      	movs	r1, #0
 800bf38:	2008      	movs	r0, #8
 800bf3a:	f000 fdb1 	bl	800caa0 <UTIL_SEQ_SetTask>
//	UTIL_SEQ_SetTask(1 << CFG_TASK_MY_TASK_BLE, CFG_SCH_PRIO_0);
}
 800bf3e:	bf00      	nop
 800bf40:	3718      	adds	r7, #24
 800bf42:	46bd      	mov	sp, r7
 800bf44:	bd80      	pop	{r7, pc}
 800bf46:	bf00      	nop
 800bf48:	20000358 	.word	0x20000358
 800bf4c:	447a0000 	.word	0x447a0000
 800bf50:	2000035c 	.word	0x2000035c
 800bf54:	20000360 	.word	0x20000360
 800bf58:	20000364 	.word	0x20000364
 800bf5c:	20000368 	.word	0x20000368
 800bf60:	2000036c 	.word	0x2000036c
 800bf64:	20000008 	.word	0x20000008
 800bf68:	20000460 	.word	0x20000460
 800bf6c:	20000464 	.word	0x20000464
 800bf70:	20000468 	.word	0x20000468
 800bf74:	200005d8 	.word	0x200005d8

0800bf78 <Custom_STM_App_Notification>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void Custom_STM_App_Notification(Custom_STM_App_Notification_evt_t *pNotification)
{
 800bf78:	b480      	push	{r7}
 800bf7a:	b083      	sub	sp, #12
 800bf7c:	af00      	add	r7, sp, #0
 800bf7e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_1 */

  /* USER CODE END CUSTOM_STM_App_Notification_1 */
  switch (pNotification->Custom_Evt_Opcode)
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	781b      	ldrb	r3, [r3, #0]
 800bf84:	2b03      	cmp	r3, #3
 800bf86:	d80b      	bhi.n	800bfa0 <Custom_STM_App_Notification+0x28>
 800bf88:	a201      	add	r2, pc, #4	@ (adr r2, 800bf90 <Custom_STM_App_Notification+0x18>)
 800bf8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf8e:	bf00      	nop
 800bf90:	0800bfa1 	.word	0x0800bfa1
 800bf94:	0800bfa1 	.word	0x0800bfa1
 800bf98:	0800bfa1 	.word	0x0800bfa1
 800bf9c:	0800bfa1 	.word	0x0800bfa1

    default:
      /* USER CODE BEGIN CUSTOM_STM_App_Notification_default */

      /* USER CODE END CUSTOM_STM_App_Notification_default */
      break;
 800bfa0:	bf00      	nop
  }
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_2 */

  /* USER CODE END CUSTOM_STM_App_Notification_2 */
  return;
 800bfa2:	bf00      	nop
}
 800bfa4:	370c      	adds	r7, #12
 800bfa6:	46bd      	mov	sp, r7
 800bfa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfac:	4770      	bx	lr
 800bfae:	bf00      	nop

0800bfb0 <Custom_APP_Notification>:

void Custom_APP_Notification(Custom_App_ConnHandle_Not_evt_t *pNotification)
{
 800bfb0:	b480      	push	{r7}
 800bfb2:	b083      	sub	sp, #12
 800bfb4:	af00      	add	r7, sp, #0
 800bfb6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_APP_Notification_1 */

  /* USER CODE END CUSTOM_APP_Notification_1 */

  switch (pNotification->Custom_Evt_Opcode)
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	781b      	ldrb	r3, [r3, #0]
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	d002      	beq.n	800bfc6 <Custom_APP_Notification+0x16>
 800bfc0:	2b01      	cmp	r3, #1
 800bfc2:	d002      	beq.n	800bfca <Custom_APP_Notification+0x1a>

    default:
      /* USER CODE BEGIN CUSTOM_APP_Notification_default */

      /* USER CODE END CUSTOM_APP_Notification_default */
      break;
 800bfc4:	e002      	b.n	800bfcc <Custom_APP_Notification+0x1c>
      break;
 800bfc6:	bf00      	nop
 800bfc8:	e000      	b.n	800bfcc <Custom_APP_Notification+0x1c>
      break;
 800bfca:	bf00      	nop

  /* USER CODE BEGIN CUSTOM_APP_Notification_2 */

  /* USER CODE END CUSTOM_APP_Notification_2 */

  return;
 800bfcc:	bf00      	nop
}
 800bfce:	370c      	adds	r7, #12
 800bfd0:	46bd      	mov	sp, r7
 800bfd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfd6:	4770      	bx	lr

0800bfd8 <Custom_APP_Init>:

void Custom_APP_Init(void)
{
 800bfd8:	b480      	push	{r7}
 800bfda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CUSTOM_APP_Init */

  /* USER CODE END CUSTOM_APP_Init */
  return;
 800bfdc:	bf00      	nop
}
 800bfde:	46bd      	mov	sp, r7
 800bfe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfe4:	4770      	bx	lr
	...

0800bfe8 <Custom_Mycharnotify_Update_Char>:
 *
 *************************************************************/

/* mySVC */
__USED void Custom_Mycharnotify_Update_Char(void) /* Property Read */
{
 800bfe8:	b580      	push	{r7, lr}
 800bfea:	b082      	sub	sp, #8
 800bfec:	af00      	add	r7, sp, #0
  uint8_t updateflag = 0;
 800bfee:	2300      	movs	r3, #0
 800bff0:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN Mycharnotify_UC_1*/
	updateflag = 1;
 800bff2:	2301      	movs	r3, #1
 800bff4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE END Mycharnotify_UC_1*/

  if (updateflag != 0)
 800bff6:	79fb      	ldrb	r3, [r7, #7]
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	d004      	beq.n	800c006 <Custom_Mycharnotify_Update_Char+0x1e>
  {
    Custom_STM_App_Update_Char(CUSTOM_STM_MYCHARNOTIFY, (uint8_t *)UpdateCharData);
 800bffc:	4904      	ldr	r1, [pc, #16]	@ (800c010 <Custom_Mycharnotify_Update_Char+0x28>)
 800bffe:	2001      	movs	r0, #1
 800c000:	f000 f960 	bl	800c2c4 <Custom_STM_App_Update_Char>
  }

  /* USER CODE BEGIN Mycharnotify_UC_Last*/

  /* USER CODE END Mycharnotify_UC_Last*/
  return;
 800c004:	bf00      	nop
 800c006:	bf00      	nop
}
 800c008:	3708      	adds	r7, #8
 800c00a:	46bd      	mov	sp, r7
 800c00c:	bd80      	pop	{r7, pc}
 800c00e:	bf00      	nop
 800c010:	200005d8 	.word	0x200005d8

0800c014 <Custom_STM_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t Custom_STM_Event_Handler(void *Event)
{
 800c014:	b580      	push	{r7, lr}
 800c016:	b08c      	sub	sp, #48	@ 0x30
 800c018:	af00      	add	r7, sp, #0
 800c01a:	6078      	str	r0, [r7, #4]
  Custom_STM_App_Notification_evt_t     Notification;
  /* USER CODE BEGIN Custom_STM_Event_Handler_1 */

  /* USER CODE END Custom_STM_Event_Handler_1 */

  return_value = SVCCTL_EvtNotAck;
 800c01c:	2300      	movs	r3, #0
 800c01e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	3301      	adds	r3, #1
 800c026:	62bb      	str	r3, [r7, #40]	@ 0x28

  switch (event_pckt->evt)
 800c028:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c02a:	781b      	ldrb	r3, [r3, #0]
 800c02c:	2bff      	cmp	r3, #255	@ 0xff
 800c02e:	f040 808e 	bne.w	800c14e <Custom_STM_Event_Handler+0x13a>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
      blecore_evt = (evt_blecore_aci*)event_pckt->data;
 800c032:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c034:	3302      	adds	r3, #2
 800c036:	627b      	str	r3, [r7, #36]	@ 0x24
      switch (blecore_evt->ecode)
 800c038:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c03a:	881b      	ldrh	r3, [r3, #0]
 800c03c:	b29b      	uxth	r3, r3
 800c03e:	f6a3 4301 	subw	r3, r3, #3073	@ 0xc01
 800c042:	2b1a      	cmp	r3, #26
 800c044:	d87f      	bhi.n	800c146 <Custom_STM_Event_Handler+0x132>
 800c046:	a201      	add	r2, pc, #4	@ (adr r2, 800c04c <Custom_STM_Event_Handler+0x38>)
 800c048:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c04c:	0800c0b9 	.word	0x0800c0b9
 800c050:	0800c147 	.word	0x0800c147
 800c054:	0800c147 	.word	0x0800c147
 800c058:	0800c147 	.word	0x0800c147
 800c05c:	0800c147 	.word	0x0800c147
 800c060:	0800c147 	.word	0x0800c147
 800c064:	0800c147 	.word	0x0800c147
 800c068:	0800c147 	.word	0x0800c147
 800c06c:	0800c147 	.word	0x0800c147
 800c070:	0800c147 	.word	0x0800c147
 800c074:	0800c147 	.word	0x0800c147
 800c078:	0800c147 	.word	0x0800c147
 800c07c:	0800c147 	.word	0x0800c147
 800c080:	0800c147 	.word	0x0800c147
 800c084:	0800c147 	.word	0x0800c147
 800c088:	0800c147 	.word	0x0800c147
 800c08c:	0800c147 	.word	0x0800c147
 800c090:	0800c147 	.word	0x0800c147
 800c094:	0800c147 	.word	0x0800c147
 800c098:	0800c147 	.word	0x0800c147
 800c09c:	0800c147 	.word	0x0800c147
 800c0a0:	0800c147 	.word	0x0800c147
 800c0a4:	0800c147 	.word	0x0800c147
 800c0a8:	0800c147 	.word	0x0800c147
 800c0ac:	0800c147 	.word	0x0800c147
 800c0b0:	0800c147 	.word	0x0800c147
 800c0b4:	0800c129 	.word	0x0800c129
      {
        case ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE:
          /* USER CODE BEGIN EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_BEGIN */

          /* USER CODE END EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_BEGIN */
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blecore_evt->data;
 800c0b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0ba:	3302      	adds	r3, #2
 800c0bc:	61fb      	str	r3, [r7, #28]
          if (attribute_modified->Attr_Handle == (CustomContext.CustomMycharnotifyHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))
 800c0be:	69fb      	ldr	r3, [r7, #28]
 800c0c0:	885b      	ldrh	r3, [r3, #2]
 800c0c2:	b29b      	uxth	r3, r3
 800c0c4:	461a      	mov	r2, r3
 800c0c6:	4b25      	ldr	r3, [pc, #148]	@ (800c15c <Custom_STM_Event_Handler+0x148>)
 800c0c8:	889b      	ldrh	r3, [r3, #4]
 800c0ca:	3302      	adds	r3, #2
 800c0cc:	429a      	cmp	r2, r3
 800c0ce:	d119      	bne.n	800c104 <Custom_STM_Event_Handler+0xf0>
          {
            return_value = SVCCTL_EvtAckFlowEnable;
 800c0d0:	2301      	movs	r3, #1
 800c0d2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            /* USER CODE BEGIN CUSTOM_STM_Service_1_Char_2 */
            /* USER CODE END CUSTOM_STM_Service_1_Char_2 */
            switch (attribute_modified->Attr_Data[0])
 800c0d6:	69fb      	ldr	r3, [r7, #28]
 800c0d8:	7a1b      	ldrb	r3, [r3, #8]
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	d002      	beq.n	800c0e4 <Custom_STM_Event_Handler+0xd0>
 800c0de:	2b01      	cmp	r3, #1
 800c0e0:	d008      	beq.n	800c0f4 <Custom_STM_Event_Handler+0xe0>

              default:
                /* USER CODE BEGIN CUSTOM_STM_Service_1_Char_2_default */

                /* USER CODE END CUSTOM_STM_Service_1_Char_2_default */
              break;
 800c0e2:	e020      	b.n	800c126 <Custom_STM_Event_Handler+0x112>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_MYCHARNOTIFY_NOTIFY_DISABLED_EVT;
 800c0e4:	2302      	movs	r3, #2
 800c0e6:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 800c0e8:	f107 0308 	add.w	r3, r7, #8
 800c0ec:	4618      	mov	r0, r3
 800c0ee:	f7ff ff43 	bl	800bf78 <Custom_STM_App_Notification>
                break;
 800c0f2:	e018      	b.n	800c126 <Custom_STM_Event_Handler+0x112>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_MYCHARNOTIFY_NOTIFY_ENABLED_EVT;
 800c0f4:	2301      	movs	r3, #1
 800c0f6:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 800c0f8:	f107 0308 	add.w	r3, r7, #8
 800c0fc:	4618      	mov	r0, r3
 800c0fe:	f7ff ff3b 	bl	800bf78 <Custom_STM_App_Notification>
                break;
 800c102:	e010      	b.n	800c126 <Custom_STM_Event_Handler+0x112>
            }
          }  /* if (attribute_modified->Attr_Handle == (CustomContext.CustomMycharnotifyHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))*/

          else if (attribute_modified->Attr_Handle == (CustomContext.CustomMycharwriteHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 800c104:	69fb      	ldr	r3, [r7, #28]
 800c106:	885b      	ldrh	r3, [r3, #2]
 800c108:	b29b      	uxth	r3, r3
 800c10a:	461a      	mov	r2, r3
 800c10c:	4b13      	ldr	r3, [pc, #76]	@ (800c15c <Custom_STM_Event_Handler+0x148>)
 800c10e:	885b      	ldrh	r3, [r3, #2]
 800c110:	3301      	adds	r3, #1
 800c112:	429a      	cmp	r2, r3
 800c114:	d119      	bne.n	800c14a <Custom_STM_Event_Handler+0x136>
          {
            return_value = SVCCTL_EvtAckFlowEnable;
 800c116:	2301      	movs	r3, #1
 800c118:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            /* USER CODE BEGIN CUSTOM_STM_Service_1_Char_1_ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE */
            HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800c11c:	2101      	movs	r1, #1
 800c11e:	4810      	ldr	r0, [pc, #64]	@ (800c160 <Custom_STM_Event_Handler+0x14c>)
 800c120:	f7f8 fe66 	bl	8004df0 <HAL_GPIO_TogglePin>
            /* USER CODE END CUSTOM_STM_Service_1_Char_1_ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE */
          } /* if (attribute_modified->Attr_Handle == (CustomContext.CustomMycharwriteHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))*/
          /* USER CODE BEGIN EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_END */

          /* USER CODE END EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_END */
          break;
 800c124:	e011      	b.n	800c14a <Custom_STM_Event_Handler+0x136>
 800c126:	e010      	b.n	800c14a <Custom_STM_Event_Handler+0x136>
		case ACI_GATT_NOTIFICATION_COMPLETE_VSEVT_CODE:
        {
          /* USER CODE BEGIN EVT_BLUE_GATT_NOTIFICATION_COMPLETE_BEGIN */

          /* USER CODE END EVT_BLUE_GATT_NOTIFICATION_COMPLETE_BEGIN */
          notification_complete = (aci_gatt_notification_complete_event_rp0*)blecore_evt->data;
 800c128:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c12a:	3302      	adds	r3, #2
 800c12c:	623b      	str	r3, [r7, #32]
          Notification.Custom_Evt_Opcode = CUSTOM_STM_NOTIFICATION_COMPLETE_EVT;
 800c12e:	2303      	movs	r3, #3
 800c130:	723b      	strb	r3, [r7, #8]
          Notification.AttrHandle = notification_complete->Attr_Handle;
 800c132:	6a3b      	ldr	r3, [r7, #32]
 800c134:	881b      	ldrh	r3, [r3, #0]
 800c136:	b29b      	uxth	r3, r3
 800c138:	833b      	strh	r3, [r7, #24]
          Custom_STM_App_Notification(&Notification);
 800c13a:	f107 0308 	add.w	r3, r7, #8
 800c13e:	4618      	mov	r0, r3
 800c140:	f7ff ff1a 	bl	800bf78 <Custom_STM_App_Notification>
          /* USER CODE BEGIN EVT_BLUE_GATT_NOTIFICATION_COMPLETE_END */

          /* USER CODE END EVT_BLUE_GATT_NOTIFICATION_COMPLETE_END */
          break;
 800c144:	e002      	b.n	800c14c <Custom_STM_Event_Handler+0x138>
        /* USER CODE END BLECORE_EVT */
        default:
          /* USER CODE BEGIN EVT_DEFAULT */

          /* USER CODE END EVT_DEFAULT */
          break;
 800c146:	bf00      	nop
 800c148:	e002      	b.n	800c150 <Custom_STM_Event_Handler+0x13c>
          break;
 800c14a:	bf00      	nop
      }
      /* USER CODE BEGIN EVT_VENDOR*/

      /* USER CODE END EVT_VENDOR*/
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800c14c:	e000      	b.n	800c150 <Custom_STM_Event_Handler+0x13c>

    default:
      /* USER CODE BEGIN EVENT_PCKT*/

      /* USER CODE END EVENT_PCKT*/
      break;
 800c14e:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_Event_Handler_2 */

  /* USER CODE END Custom_STM_Event_Handler_2 */

  return(return_value);
 800c150:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}/* end Custom_STM_Event_Handler */
 800c154:	4618      	mov	r0, r3
 800c156:	3730      	adds	r7, #48	@ 0x30
 800c158:	46bd      	mov	sp, r7
 800c15a:	bd80      	pop	{r7, pc}
 800c15c:	200007d8 	.word	0x200007d8
 800c160:	48000400 	.word	0x48000400

0800c164 <SVCCTL_InitCustomSvc>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void SVCCTL_InitCustomSvc(void)
{
 800c164:	b580      	push	{r7, lr}
 800c166:	b08c      	sub	sp, #48	@ 0x30
 800c168:	af06      	add	r7, sp, #24

  Char_UUID_t  uuid;
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800c16a:	2392      	movs	r3, #146	@ 0x92
 800c16c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE END SVCCTL_InitCustomSvc_1 */

  /**
   *  Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(Custom_STM_Event_Handler);
 800c16e:	484f      	ldr	r0, [pc, #316]	@ (800c2ac <SVCCTL_InitCustomSvc+0x148>)
 800c170:	f7fe fb7a 	bl	800a868 <SVCCTL_RegisterSvcHandler>
   *                              = 6
   *
   * This value doesn't take into account number of descriptors manually added
   * In case of descriptors added, please update the max_attr_record value accordingly in the next SVCCTL_InitService User Section
   */
  max_attr_record = 6;
 800c174:	2306      	movs	r3, #6
 800c176:	75bb      	strb	r3, [r7, #22]
  /* USER CODE BEGIN SVCCTL_InitService */
  /* max_attr_record to be updated if descriptors have been added */

  /* USER CODE END SVCCTL_InitService */

  COPY_MYSVC_UUID(uuid.Char_UUID_128);
 800c178:	238f      	movs	r3, #143	@ 0x8f
 800c17a:	713b      	strb	r3, [r7, #4]
 800c17c:	23e5      	movs	r3, #229	@ 0xe5
 800c17e:	717b      	strb	r3, [r7, #5]
 800c180:	23b3      	movs	r3, #179	@ 0xb3
 800c182:	71bb      	strb	r3, [r7, #6]
 800c184:	23d5      	movs	r3, #213	@ 0xd5
 800c186:	71fb      	strb	r3, [r7, #7]
 800c188:	232e      	movs	r3, #46	@ 0x2e
 800c18a:	723b      	strb	r3, [r7, #8]
 800c18c:	237f      	movs	r3, #127	@ 0x7f
 800c18e:	727b      	strb	r3, [r7, #9]
 800c190:	234a      	movs	r3, #74	@ 0x4a
 800c192:	72bb      	strb	r3, [r7, #10]
 800c194:	2398      	movs	r3, #152	@ 0x98
 800c196:	72fb      	strb	r3, [r7, #11]
 800c198:	232a      	movs	r3, #42	@ 0x2a
 800c19a:	733b      	strb	r3, [r7, #12]
 800c19c:	2348      	movs	r3, #72	@ 0x48
 800c19e:	737b      	strb	r3, [r7, #13]
 800c1a0:	237a      	movs	r3, #122	@ 0x7a
 800c1a2:	73bb      	strb	r3, [r7, #14]
 800c1a4:	23cc      	movs	r3, #204	@ 0xcc
 800c1a6:	73fb      	strb	r3, [r7, #15]
 800c1a8:	2300      	movs	r3, #0
 800c1aa:	743b      	strb	r3, [r7, #16]
 800c1ac:	2300      	movs	r3, #0
 800c1ae:	747b      	strb	r3, [r7, #17]
 800c1b0:	2300      	movs	r3, #0
 800c1b2:	74bb      	strb	r3, [r7, #18]
 800c1b4:	2300      	movs	r3, #0
 800c1b6:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_service(UUID_TYPE_128,
 800c1b8:	7dbb      	ldrb	r3, [r7, #22]
 800c1ba:	1d39      	adds	r1, r7, #4
 800c1bc:	4a3c      	ldr	r2, [pc, #240]	@ (800c2b0 <SVCCTL_InitCustomSvc+0x14c>)
 800c1be:	9200      	str	r2, [sp, #0]
 800c1c0:	2201      	movs	r2, #1
 800c1c2:	2002      	movs	r0, #2
 800c1c4:	f7fd fdc4 	bl	8009d50 <aci_gatt_add_service>
 800c1c8:	4603      	mov	r3, r0
 800c1ca:	75fb      	strb	r3, [r7, #23]
  }

  /**
   *  myCharWrite
   */
  COPY_MYCHARWRITE_UUID(uuid.Char_UUID_128);
 800c1cc:	2319      	movs	r3, #25
 800c1ce:	713b      	strb	r3, [r7, #4]
 800c1d0:	23ed      	movs	r3, #237	@ 0xed
 800c1d2:	717b      	strb	r3, [r7, #5]
 800c1d4:	2382      	movs	r3, #130	@ 0x82
 800c1d6:	71bb      	strb	r3, [r7, #6]
 800c1d8:	23ae      	movs	r3, #174	@ 0xae
 800c1da:	71fb      	strb	r3, [r7, #7]
 800c1dc:	23ed      	movs	r3, #237	@ 0xed
 800c1de:	723b      	strb	r3, [r7, #8]
 800c1e0:	2321      	movs	r3, #33	@ 0x21
 800c1e2:	727b      	strb	r3, [r7, #9]
 800c1e4:	234c      	movs	r3, #76	@ 0x4c
 800c1e6:	72bb      	strb	r3, [r7, #10]
 800c1e8:	239d      	movs	r3, #157	@ 0x9d
 800c1ea:	72fb      	strb	r3, [r7, #11]
 800c1ec:	2341      	movs	r3, #65	@ 0x41
 800c1ee:	733b      	strb	r3, [r7, #12]
 800c1f0:	2345      	movs	r3, #69	@ 0x45
 800c1f2:	737b      	strb	r3, [r7, #13]
 800c1f4:	2322      	movs	r3, #34	@ 0x22
 800c1f6:	73bb      	strb	r3, [r7, #14]
 800c1f8:	238e      	movs	r3, #142	@ 0x8e
 800c1fa:	73fb      	strb	r3, [r7, #15]
 800c1fc:	2300      	movs	r3, #0
 800c1fe:	743b      	strb	r3, [r7, #16]
 800c200:	2300      	movs	r3, #0
 800c202:	747b      	strb	r3, [r7, #17]
 800c204:	2300      	movs	r3, #0
 800c206:	74bb      	strb	r3, [r7, #18]
 800c208:	2300      	movs	r3, #0
 800c20a:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomMysvcHdle,
 800c20c:	4b28      	ldr	r3, [pc, #160]	@ (800c2b0 <SVCCTL_InitCustomSvc+0x14c>)
 800c20e:	8818      	ldrh	r0, [r3, #0]
 800c210:	4b28      	ldr	r3, [pc, #160]	@ (800c2b4 <SVCCTL_InitCustomSvc+0x150>)
 800c212:	881b      	ldrh	r3, [r3, #0]
 800c214:	1d3a      	adds	r2, r7, #4
 800c216:	4928      	ldr	r1, [pc, #160]	@ (800c2b8 <SVCCTL_InitCustomSvc+0x154>)
 800c218:	9105      	str	r1, [sp, #20]
 800c21a:	2100      	movs	r1, #0
 800c21c:	9104      	str	r1, [sp, #16]
 800c21e:	2110      	movs	r1, #16
 800c220:	9103      	str	r1, [sp, #12]
 800c222:	2101      	movs	r1, #1
 800c224:	9102      	str	r1, [sp, #8]
 800c226:	2100      	movs	r1, #0
 800c228:	9101      	str	r1, [sp, #4]
 800c22a:	2108      	movs	r1, #8
 800c22c:	9100      	str	r1, [sp, #0]
 800c22e:	2102      	movs	r1, #2
 800c230:	f7fd fe64 	bl	8009efc <aci_gatt_add_char>
 800c234:	4603      	mov	r3, r0
 800c236:	75fb      	strb	r3, [r7, #23]

  /* USER CODE END SVCCTL_Init_Service1_Char1 */
  /**
   *  myCharNotify
   */
  COPY_MYCHARNOTIFY_UUID(uuid.Char_UUID_128);
 800c238:	2300      	movs	r3, #0
 800c23a:	713b      	strb	r3, [r7, #4]
 800c23c:	2300      	movs	r3, #0
 800c23e:	717b      	strb	r3, [r7, #5]
 800c240:	2300      	movs	r3, #0
 800c242:	71bb      	strb	r3, [r7, #6]
 800c244:	2300      	movs	r3, #0
 800c246:	71fb      	strb	r3, [r7, #7]
 800c248:	2300      	movs	r3, #0
 800c24a:	723b      	strb	r3, [r7, #8]
 800c24c:	2300      	movs	r3, #0
 800c24e:	727b      	strb	r3, [r7, #9]
 800c250:	2300      	movs	r3, #0
 800c252:	72bb      	strb	r3, [r7, #10]
 800c254:	2300      	movs	r3, #0
 800c256:	72fb      	strb	r3, [r7, #11]
 800c258:	2300      	movs	r3, #0
 800c25a:	733b      	strb	r3, [r7, #12]
 800c25c:	2300      	movs	r3, #0
 800c25e:	737b      	strb	r3, [r7, #13]
 800c260:	2300      	movs	r3, #0
 800c262:	73bb      	strb	r3, [r7, #14]
 800c264:	2300      	movs	r3, #0
 800c266:	73fb      	strb	r3, [r7, #15]
 800c268:	2300      	movs	r3, #0
 800c26a:	743b      	strb	r3, [r7, #16]
 800c26c:	2300      	movs	r3, #0
 800c26e:	747b      	strb	r3, [r7, #17]
 800c270:	2301      	movs	r3, #1
 800c272:	74bb      	strb	r3, [r7, #18]
 800c274:	2300      	movs	r3, #0
 800c276:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomMysvcHdle,
 800c278:	4b0d      	ldr	r3, [pc, #52]	@ (800c2b0 <SVCCTL_InitCustomSvc+0x14c>)
 800c27a:	8818      	ldrh	r0, [r3, #0]
 800c27c:	4b0f      	ldr	r3, [pc, #60]	@ (800c2bc <SVCCTL_InitCustomSvc+0x158>)
 800c27e:	881b      	ldrh	r3, [r3, #0]
 800c280:	1d3a      	adds	r2, r7, #4
 800c282:	490f      	ldr	r1, [pc, #60]	@ (800c2c0 <SVCCTL_InitCustomSvc+0x15c>)
 800c284:	9105      	str	r1, [sp, #20]
 800c286:	2100      	movs	r1, #0
 800c288:	9104      	str	r1, [sp, #16]
 800c28a:	2110      	movs	r1, #16
 800c28c:	9103      	str	r1, [sp, #12]
 800c28e:	2107      	movs	r1, #7
 800c290:	9102      	str	r1, [sp, #8]
 800c292:	2100      	movs	r1, #0
 800c294:	9101      	str	r1, [sp, #4]
 800c296:	2110      	movs	r1, #16
 800c298:	9100      	str	r1, [sp, #0]
 800c29a:	2102      	movs	r1, #2
 800c29c:	f7fd fe2e 	bl	8009efc <aci_gatt_add_char>
 800c2a0:	4603      	mov	r3, r0
 800c2a2:	75fb      	strb	r3, [r7, #23]

  /* USER CODE BEGIN SVCCTL_InitCustomSvc_2 */

  /* USER CODE END SVCCTL_InitCustomSvc_2 */

  return;
 800c2a4:	bf00      	nop
}
 800c2a6:	3718      	adds	r7, #24
 800c2a8:	46bd      	mov	sp, r7
 800c2aa:	bd80      	pop	{r7, pc}
 800c2ac:	0800c015 	.word	0x0800c015
 800c2b0:	200007d8 	.word	0x200007d8
 800c2b4:	20000056 	.word	0x20000056
 800c2b8:	200007da 	.word	0x200007da
 800c2bc:	20000058 	.word	0x20000058
 800c2c0:	200007dc 	.word	0x200007dc

0800c2c4 <Custom_STM_App_Update_Char>:
 * @param  CharOpcode: Characteristic identifier
 * @param  Service_Instance: Instance of the service to which the characteristic belongs
 *
 */
tBleStatus Custom_STM_App_Update_Char(Custom_STM_Char_Opcode_t CharOpcode, uint8_t *pPayload)
{
 800c2c4:	b580      	push	{r7, lr}
 800c2c6:	b086      	sub	sp, #24
 800c2c8:	af02      	add	r7, sp, #8
 800c2ca:	4603      	mov	r3, r0
 800c2cc:	6039      	str	r1, [r7, #0]
 800c2ce:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800c2d0:	2392      	movs	r3, #146	@ 0x92
 800c2d2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN Custom_STM_App_Update_Char_1 */

  /* USER CODE END Custom_STM_App_Update_Char_1 */

  switch (CharOpcode)
 800c2d4:	79fb      	ldrb	r3, [r7, #7]
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	d002      	beq.n	800c2e0 <Custom_STM_App_Update_Char+0x1c>
 800c2da:	2b01      	cmp	r3, #1
 800c2dc:	d01a      	beq.n	800c314 <Custom_STM_App_Update_Char+0x50>

      /* USER CODE END CUSTOM_STM_App_Update_Service_1_Char_2*/
      break;

    default:
      break;
 800c2de:	e029      	b.n	800c334 <Custom_STM_App_Update_Char+0x70>
      ret = aci_gatt_update_char_value(CustomContext.CustomMysvcHdle,
 800c2e0:	4b17      	ldr	r3, [pc, #92]	@ (800c340 <Custom_STM_App_Update_Char+0x7c>)
 800c2e2:	8818      	ldrh	r0, [r3, #0]
 800c2e4:	4b16      	ldr	r3, [pc, #88]	@ (800c340 <Custom_STM_App_Update_Char+0x7c>)
 800c2e6:	8859      	ldrh	r1, [r3, #2]
 800c2e8:	4b16      	ldr	r3, [pc, #88]	@ (800c344 <Custom_STM_App_Update_Char+0x80>)
 800c2ea:	881b      	ldrh	r3, [r3, #0]
 800c2ec:	b2da      	uxtb	r2, r3
 800c2ee:	683b      	ldr	r3, [r7, #0]
 800c2f0:	9300      	str	r3, [sp, #0]
 800c2f2:	4613      	mov	r3, r2
 800c2f4:	2200      	movs	r2, #0
 800c2f6:	f7fd ff09 	bl	800a10c <aci_gatt_update_char_value>
 800c2fa:	4603      	mov	r3, r0
 800c2fc:	73fb      	strb	r3, [r7, #15]
      test4 = test4+1;
 800c2fe:	4b12      	ldr	r3, [pc, #72]	@ (800c348 <Custom_STM_App_Update_Char+0x84>)
 800c300:	edd3 7a00 	vldr	s15, [r3]
 800c304:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c308:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c30c:	4b0e      	ldr	r3, [pc, #56]	@ (800c348 <Custom_STM_App_Update_Char+0x84>)
 800c30e:	edc3 7a00 	vstr	s15, [r3]
      break;
 800c312:	e00f      	b.n	800c334 <Custom_STM_App_Update_Char+0x70>
      ret = aci_gatt_update_char_value(CustomContext.CustomMysvcHdle,
 800c314:	4b0a      	ldr	r3, [pc, #40]	@ (800c340 <Custom_STM_App_Update_Char+0x7c>)
 800c316:	8818      	ldrh	r0, [r3, #0]
 800c318:	4b09      	ldr	r3, [pc, #36]	@ (800c340 <Custom_STM_App_Update_Char+0x7c>)
 800c31a:	8899      	ldrh	r1, [r3, #4]
 800c31c:	4b0b      	ldr	r3, [pc, #44]	@ (800c34c <Custom_STM_App_Update_Char+0x88>)
 800c31e:	881b      	ldrh	r3, [r3, #0]
 800c320:	b2da      	uxtb	r2, r3
 800c322:	683b      	ldr	r3, [r7, #0]
 800c324:	9300      	str	r3, [sp, #0]
 800c326:	4613      	mov	r3, r2
 800c328:	2200      	movs	r2, #0
 800c32a:	f7fd feef 	bl	800a10c <aci_gatt_update_char_value>
 800c32e:	4603      	mov	r3, r0
 800c330:	73fb      	strb	r3, [r7, #15]
      break;
 800c332:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_App_Update_Char_2 */

  /* USER CODE END Custom_STM_App_Update_Char_2 */

  return ret;
 800c334:	7bfb      	ldrb	r3, [r7, #15]
}
 800c336:	4618      	mov	r0, r3
 800c338:	3710      	adds	r7, #16
 800c33a:	46bd      	mov	sp, r7
 800c33c:	bd80      	pop	{r7, pc}
 800c33e:	bf00      	nop
 800c340:	200007d8 	.word	0x200007d8
 800c344:	20000056 	.word	0x20000056
 800c348:	200007e0 	.word	0x200007e0
 800c34c:	20000058 	.word	0x20000058

0800c350 <LL_PWR_EnableBootC2>:
{
 800c350:	b480      	push	{r7}
 800c352:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 800c354:	4b05      	ldr	r3, [pc, #20]	@ (800c36c <LL_PWR_EnableBootC2+0x1c>)
 800c356:	68db      	ldr	r3, [r3, #12]
 800c358:	4a04      	ldr	r2, [pc, #16]	@ (800c36c <LL_PWR_EnableBootC2+0x1c>)
 800c35a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c35e:	60d3      	str	r3, [r2, #12]
}
 800c360:	bf00      	nop
 800c362:	46bd      	mov	sp, r7
 800c364:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c368:	4770      	bx	lr
 800c36a:	bf00      	nop
 800c36c:	58000400 	.word	0x58000400

0800c370 <LL_C2_EXTI_EnableEvent_32_63>:
{
 800c370:	b480      	push	{r7}
 800c372:	b083      	sub	sp, #12
 800c374:	af00      	add	r7, sp, #0
 800c376:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 800c378:	4b06      	ldr	r3, [pc, #24]	@ (800c394 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800c37a:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 800c37e:	4905      	ldr	r1, [pc, #20]	@ (800c394 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	4313      	orrs	r3, r2
 800c384:	f8c1 30d4 	str.w	r3, [r1, #212]	@ 0xd4
}
 800c388:	bf00      	nop
 800c38a:	370c      	adds	r7, #12
 800c38c:	46bd      	mov	sp, r7
 800c38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c392:	4770      	bx	lr
 800c394:	58000800 	.word	0x58000800

0800c398 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 800c398:	b480      	push	{r7}
 800c39a:	b083      	sub	sp, #12
 800c39c:	af00      	add	r7, sp, #0
 800c39e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 800c3a0:	4b05      	ldr	r3, [pc, #20]	@ (800c3b8 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800c3a2:	6a1a      	ldr	r2, [r3, #32]
 800c3a4:	4904      	ldr	r1, [pc, #16]	@ (800c3b8 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	4313      	orrs	r3, r2
 800c3aa:	620b      	str	r3, [r1, #32]
}
 800c3ac:	bf00      	nop
 800c3ae:	370c      	adds	r7, #12
 800c3b0:	46bd      	mov	sp, r7
 800c3b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3b6:	4770      	bx	lr
 800c3b8:	58000800 	.word	0x58000800

0800c3bc <LL_AHB3_GRP1_EnableClock>:
{
 800c3bc:	b480      	push	{r7}
 800c3be:	b085      	sub	sp, #20
 800c3c0:	af00      	add	r7, sp, #0
 800c3c2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 800c3c4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c3c8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800c3ca:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	4313      	orrs	r3, r2
 800c3d2:	650b      	str	r3, [r1, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800c3d4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c3d8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	4013      	ands	r3, r2
 800c3de:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800c3e0:	68fb      	ldr	r3, [r7, #12]
}
 800c3e2:	bf00      	nop
 800c3e4:	3714      	adds	r7, #20
 800c3e6:	46bd      	mov	sp, r7
 800c3e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ec:	4770      	bx	lr

0800c3ee <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 800c3ee:	b480      	push	{r7}
 800c3f0:	b085      	sub	sp, #20
 800c3f2:	af00      	add	r7, sp, #0
 800c3f4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 800c3f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c3fa:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 800c3fe:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	4313      	orrs	r3, r2
 800c406:	f8c1 3150 	str.w	r3, [r1, #336]	@ 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 800c40a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c40e:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	4013      	ands	r3, r2
 800c416:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800c418:	68fb      	ldr	r3, [r7, #12]
}
 800c41a:	bf00      	nop
 800c41c:	3714      	adds	r7, #20
 800c41e:	46bd      	mov	sp, r7
 800c420:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c424:	4770      	bx	lr

0800c426 <LL_C1_IPCC_EnableIT_TXF>:
  * @rmtoll C1CR          TXFIE         LL_C1_IPCC_EnableIT_TXF
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_TXF(IPCC_TypeDef *IPCCx)
{
 800c426:	b480      	push	{r7}
 800c428:	b083      	sub	sp, #12
 800c42a:	af00      	add	r7, sp, #0
 800c42c:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	681b      	ldr	r3, [r3, #0]
 800c432:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	601a      	str	r2, [r3, #0]
}
 800c43a:	bf00      	nop
 800c43c:	370c      	adds	r7, #12
 800c43e:	46bd      	mov	sp, r7
 800c440:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c444:	4770      	bx	lr

0800c446 <LL_C1_IPCC_EnableIT_RXO>:
  * @rmtoll C1CR          RXOIE         LL_C1_IPCC_EnableIT_RXO
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_RXO(IPCC_TypeDef *IPCCx)
{
 800c446:	b480      	push	{r7}
 800c448:	b083      	sub	sp, #12
 800c44a:	af00      	add	r7, sp, #0
 800c44c:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	681b      	ldr	r3, [r3, #0]
 800c452:	f043 0201 	orr.w	r2, r3, #1
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	601a      	str	r2, [r3, #0]
}
 800c45a:	bf00      	nop
 800c45c:	370c      	adds	r7, #12
 800c45e:	46bd      	mov	sp, r7
 800c460:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c464:	4770      	bx	lr

0800c466 <LL_C1_IPCC_EnableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800c466:	b480      	push	{r7}
 800c468:	b083      	sub	sp, #12
 800c46a:	af00      	add	r7, sp, #0
 800c46c:	6078      	str	r0, [r7, #4]
 800c46e:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	685a      	ldr	r2, [r3, #4]
 800c474:	683b      	ldr	r3, [r7, #0]
 800c476:	041b      	lsls	r3, r3, #16
 800c478:	43db      	mvns	r3, r3
 800c47a:	401a      	ands	r2, r3
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	605a      	str	r2, [r3, #4]
}
 800c480:	bf00      	nop
 800c482:	370c      	adds	r7, #12
 800c484:	46bd      	mov	sp, r7
 800c486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c48a:	4770      	bx	lr

0800c48c <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800c48c:	b480      	push	{r7}
 800c48e:	b083      	sub	sp, #12
 800c490:	af00      	add	r7, sp, #0
 800c492:	6078      	str	r0, [r7, #4]
 800c494:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	685a      	ldr	r2, [r3, #4]
 800c49a:	683b      	ldr	r3, [r7, #0]
 800c49c:	041b      	lsls	r3, r3, #16
 800c49e:	431a      	orrs	r2, r3
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	605a      	str	r2, [r3, #4]
}
 800c4a4:	bf00      	nop
 800c4a6:	370c      	adds	r7, #12
 800c4a8:	46bd      	mov	sp, r7
 800c4aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ae:	4770      	bx	lr

0800c4b0 <LL_C1_IPCC_EnableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800c4b0:	b480      	push	{r7}
 800c4b2:	b083      	sub	sp, #12
 800c4b4:	af00      	add	r7, sp, #0
 800c4b6:	6078      	str	r0, [r7, #4]
 800c4b8:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	685a      	ldr	r2, [r3, #4]
 800c4be:	683b      	ldr	r3, [r7, #0]
 800c4c0:	43db      	mvns	r3, r3
 800c4c2:	401a      	ands	r2, r3
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	605a      	str	r2, [r3, #4]
}
 800c4c8:	bf00      	nop
 800c4ca:	370c      	adds	r7, #12
 800c4cc:	46bd      	mov	sp, r7
 800c4ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4d2:	4770      	bx	lr

0800c4d4 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800c4d4:	b480      	push	{r7}
 800c4d6:	b083      	sub	sp, #12
 800c4d8:	af00      	add	r7, sp, #0
 800c4da:	6078      	str	r0, [r7, #4]
 800c4dc:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	683a      	ldr	r2, [r7, #0]
 800c4e2:	609a      	str	r2, [r3, #8]
}
 800c4e4:	bf00      	nop
 800c4e6:	370c      	adds	r7, #12
 800c4e8:	46bd      	mov	sp, r7
 800c4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ee:	4770      	bx	lr

0800c4f0 <LL_C1_IPCC_SetFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_SetFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800c4f0:	b480      	push	{r7}
 800c4f2:	b083      	sub	sp, #12
 800c4f4:	af00      	add	r7, sp, #0
 800c4f6:	6078      	str	r0, [r7, #4]
 800c4f8:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 800c4fa:	683b      	ldr	r3, [r7, #0]
 800c4fc:	041a      	lsls	r2, r3, #16
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	609a      	str	r2, [r3, #8]
}
 800c502:	bf00      	nop
 800c504:	370c      	adds	r7, #12
 800c506:	46bd      	mov	sp, r7
 800c508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c50c:	4770      	bx	lr

0800c50e <LL_C1_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C1_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 800c50e:	b480      	push	{r7}
 800c510:	b083      	sub	sp, #12
 800c512:	af00      	add	r7, sp, #0
 800c514:	6078      	str	r0, [r7, #4]
 800c516:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	68da      	ldr	r2, [r3, #12]
 800c51c:	683b      	ldr	r3, [r7, #0]
 800c51e:	4013      	ands	r3, r2
 800c520:	683a      	ldr	r2, [r7, #0]
 800c522:	429a      	cmp	r2, r3
 800c524:	d101      	bne.n	800c52a <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 800c526:	2301      	movs	r3, #1
 800c528:	e000      	b.n	800c52c <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 800c52a:	2300      	movs	r3, #0
}
 800c52c:	4618      	mov	r0, r3
 800c52e:	370c      	adds	r7, #12
 800c530:	46bd      	mov	sp, r7
 800c532:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c536:	4770      	bx	lr

0800c538 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 800c538:	b480      	push	{r7}
 800c53a:	b083      	sub	sp, #12
 800c53c:	af00      	add	r7, sp, #0
 800c53e:	6078      	str	r0, [r7, #4]
 800c540:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	69da      	ldr	r2, [r3, #28]
 800c546:	683b      	ldr	r3, [r7, #0]
 800c548:	4013      	ands	r3, r2
 800c54a:	683a      	ldr	r2, [r7, #0]
 800c54c:	429a      	cmp	r2, r3
 800c54e:	d101      	bne.n	800c554 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 800c550:	2301      	movs	r3, #1
 800c552:	e000      	b.n	800c556 <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 800c554:	2300      	movs	r3, #0
}
 800c556:	4618      	mov	r0, r3
 800c558:	370c      	adds	r7, #12
 800c55a:	46bd      	mov	sp, r7
 800c55c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c560:	4770      	bx	lr
	...

0800c564 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 800c564:	b580      	push	{r7, lr}
 800c566:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 800c568:	2102      	movs	r1, #2
 800c56a:	4818      	ldr	r0, [pc, #96]	@ (800c5cc <HW_IPCC_Rx_Handler+0x68>)
 800c56c:	f7ff ffe4 	bl	800c538 <LL_C2_IPCC_IsActiveFlag_CHx>
 800c570:	4603      	mov	r3, r0
 800c572:	2b00      	cmp	r3, #0
 800c574:	d008      	beq.n	800c588 <HW_IPCC_Rx_Handler+0x24>
 800c576:	4b15      	ldr	r3, [pc, #84]	@ (800c5cc <HW_IPCC_Rx_Handler+0x68>)
 800c578:	685b      	ldr	r3, [r3, #4]
 800c57a:	f003 0302 	and.w	r3, r3, #2
 800c57e:	2b00      	cmp	r3, #0
 800c580:	d102      	bne.n	800c588 <HW_IPCC_Rx_Handler+0x24>
  {
      HW_IPCC_SYS_EvtHandler();
 800c582:	f000 f8d5 	bl	800c730 <HW_IPCC_SYS_EvtHandler>
 800c586:	e01e      	b.n	800c5c6 <HW_IPCC_Rx_Handler+0x62>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 800c588:	2101      	movs	r1, #1
 800c58a:	4810      	ldr	r0, [pc, #64]	@ (800c5cc <HW_IPCC_Rx_Handler+0x68>)
 800c58c:	f7ff ffd4 	bl	800c538 <LL_C2_IPCC_IsActiveFlag_CHx>
 800c590:	4603      	mov	r3, r0
 800c592:	2b00      	cmp	r3, #0
 800c594:	d008      	beq.n	800c5a8 <HW_IPCC_Rx_Handler+0x44>
 800c596:	4b0d      	ldr	r3, [pc, #52]	@ (800c5cc <HW_IPCC_Rx_Handler+0x68>)
 800c598:	685b      	ldr	r3, [r3, #4]
 800c59a:	f003 0301 	and.w	r3, r3, #1
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	d102      	bne.n	800c5a8 <HW_IPCC_Rx_Handler+0x44>
  {
    HW_IPCC_BLE_EvtHandler();
 800c5a2:	f000 f889 	bl	800c6b8 <HW_IPCC_BLE_EvtHandler>
 800c5a6:	e00e      	b.n	800c5c6 <HW_IPCC_Rx_Handler+0x62>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 800c5a8:	2108      	movs	r1, #8
 800c5aa:	4808      	ldr	r0, [pc, #32]	@ (800c5cc <HW_IPCC_Rx_Handler+0x68>)
 800c5ac:	f7ff ffc4 	bl	800c538 <LL_C2_IPCC_IsActiveFlag_CHx>
 800c5b0:	4603      	mov	r3, r0
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	d008      	beq.n	800c5c8 <HW_IPCC_Rx_Handler+0x64>
 800c5b6:	4b05      	ldr	r3, [pc, #20]	@ (800c5cc <HW_IPCC_Rx_Handler+0x68>)
 800c5b8:	685b      	ldr	r3, [r3, #4]
 800c5ba:	f003 0308 	and.w	r3, r3, #8
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	d102      	bne.n	800c5c8 <HW_IPCC_Rx_Handler+0x64>
  {
    HW_IPCC_TRACES_EvtHandler();
 800c5c2:	f000 f901 	bl	800c7c8 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 800c5c6:	bf00      	nop
 800c5c8:	bf00      	nop
}
 800c5ca:	bd80      	pop	{r7, pc}
 800c5cc:	58000c00 	.word	0x58000c00

0800c5d0 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 800c5d0:	b580      	push	{r7, lr}
 800c5d2:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 800c5d4:	2102      	movs	r1, #2
 800c5d6:	4818      	ldr	r0, [pc, #96]	@ (800c638 <HW_IPCC_Tx_Handler+0x68>)
 800c5d8:	f7ff ff99 	bl	800c50e <LL_C1_IPCC_IsActiveFlag_CHx>
 800c5dc:	4603      	mov	r3, r0
 800c5de:	2b00      	cmp	r3, #0
 800c5e0:	d108      	bne.n	800c5f4 <HW_IPCC_Tx_Handler+0x24>
 800c5e2:	4b15      	ldr	r3, [pc, #84]	@ (800c638 <HW_IPCC_Tx_Handler+0x68>)
 800c5e4:	685b      	ldr	r3, [r3, #4]
 800c5e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c5ea:	2b00      	cmp	r3, #0
 800c5ec:	d102      	bne.n	800c5f4 <HW_IPCC_Tx_Handler+0x24>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 800c5ee:	f000 f893 	bl	800c718 <HW_IPCC_SYS_CmdEvtHandler>
 800c5f2:	e01e      	b.n	800c632 <HW_IPCC_Tx_Handler+0x62>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 800c5f4:	2108      	movs	r1, #8
 800c5f6:	4810      	ldr	r0, [pc, #64]	@ (800c638 <HW_IPCC_Tx_Handler+0x68>)
 800c5f8:	f7ff ff89 	bl	800c50e <LL_C1_IPCC_IsActiveFlag_CHx>
 800c5fc:	4603      	mov	r3, r0
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	d108      	bne.n	800c614 <HW_IPCC_Tx_Handler+0x44>
 800c602:	4b0d      	ldr	r3, [pc, #52]	@ (800c638 <HW_IPCC_Tx_Handler+0x68>)
 800c604:	685b      	ldr	r3, [r3, #4]
 800c606:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	d102      	bne.n	800c614 <HW_IPCC_Tx_Handler+0x44>
  {
    HW_IPCC_MM_FreeBufHandler();
 800c60e:	f000 f8bd 	bl	800c78c <HW_IPCC_MM_FreeBufHandler>
 800c612:	e00e      	b.n	800c632 <HW_IPCC_Tx_Handler+0x62>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 800c614:	2120      	movs	r1, #32
 800c616:	4808      	ldr	r0, [pc, #32]	@ (800c638 <HW_IPCC_Tx_Handler+0x68>)
 800c618:	f7ff ff79 	bl	800c50e <LL_C1_IPCC_IsActiveFlag_CHx>
 800c61c:	4603      	mov	r3, r0
 800c61e:	2b00      	cmp	r3, #0
 800c620:	d108      	bne.n	800c634 <HW_IPCC_Tx_Handler+0x64>
 800c622:	4b05      	ldr	r3, [pc, #20]	@ (800c638 <HW_IPCC_Tx_Handler+0x68>)
 800c624:	685b      	ldr	r3, [r3, #4]
 800c626:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	d102      	bne.n	800c634 <HW_IPCC_Tx_Handler+0x64>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 800c62e:	f000 f84f 	bl	800c6d0 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 800c632:	bf00      	nop
 800c634:	bf00      	nop
}
 800c636:	bd80      	pop	{r7, pc}
 800c638:	58000c00 	.word	0x58000c00

0800c63c <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 800c63c:	b580      	push	{r7, lr}
 800c63e:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
  * when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 800c640:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800c644:	f7ff fed3 	bl	800c3ee <LL_C2_AHB3_GRP1_EnableClock>

  /**
  * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
  */
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 800c648:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800c64c:	f7ff fea4 	bl	800c398 <LL_EXTI_EnableRisingTrig_32_63>
  /* It is required to have at least a system clock cycle before a SEV after LL_EXTI_EnableRisingTrig_32_63() */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 800c650:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800c654:	f7ff fe8c 	bl	800c370 <LL_C2_EXTI_EnableEvent_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 800c658:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 800c65a:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 800c65c:	f7ff fe78 	bl	800c350 <LL_PWR_EnableBootC2>

  return;
 800c660:	bf00      	nop
}
 800c662:	bd80      	pop	{r7, pc}

0800c664 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 800c664:	b580      	push	{r7, lr}
 800c666:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 800c668:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800c66c:	f7ff fea6 	bl	800c3bc <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 800c670:	4806      	ldr	r0, [pc, #24]	@ (800c68c <HW_IPCC_Init+0x28>)
 800c672:	f7ff fee8 	bl	800c446 <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 800c676:	4805      	ldr	r0, [pc, #20]	@ (800c68c <HW_IPCC_Init+0x28>)
 800c678:	f7ff fed5 	bl	800c426 <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 800c67c:	202c      	movs	r0, #44	@ 0x2c
 800c67e:	f7f7 ff08 	bl	8004492 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 800c682:	202d      	movs	r0, #45	@ 0x2d
 800c684:	f7f7 ff05 	bl	8004492 <HAL_NVIC_EnableIRQ>

  return;
 800c688:	bf00      	nop
}
 800c68a:	bd80      	pop	{r7, pc}
 800c68c:	58000c00 	.word	0x58000c00

0800c690 <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 800c690:	b580      	push	{r7, lr}
 800c692:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800c694:	2101      	movs	r1, #1
 800c696:	4802      	ldr	r0, [pc, #8]	@ (800c6a0 <HW_IPCC_BLE_Init+0x10>)
 800c698:	f7ff ff0a 	bl	800c4b0 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800c69c:	bf00      	nop
}
 800c69e:	bd80      	pop	{r7, pc}
 800c6a0:	58000c00 	.word	0x58000c00

0800c6a4 <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 800c6a4:	b580      	push	{r7, lr}
 800c6a6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 800c6a8:	2101      	movs	r1, #1
 800c6aa:	4802      	ldr	r0, [pc, #8]	@ (800c6b4 <HW_IPCC_BLE_SendCmd+0x10>)
 800c6ac:	f7ff ff20 	bl	800c4f0 <LL_C1_IPCC_SetFlag_CHx>

  return;
 800c6b0:	bf00      	nop
}
 800c6b2:	bd80      	pop	{r7, pc}
 800c6b4:	58000c00 	.word	0x58000c00

0800c6b8 <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 800c6b8:	b580      	push	{r7, lr}
 800c6ba:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 800c6bc:	f7fe fd98 	bl	800b1f0 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800c6c0:	2101      	movs	r1, #1
 800c6c2:	4802      	ldr	r0, [pc, #8]	@ (800c6cc <HW_IPCC_BLE_EvtHandler+0x14>)
 800c6c4:	f7ff ff06 	bl	800c4d4 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800c6c8:	bf00      	nop
}
 800c6ca:	bd80      	pop	{r7, pc}
 800c6cc:	58000c00 	.word	0x58000c00

0800c6d0 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 800c6d0:	b580      	push	{r7, lr}
 800c6d2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 800c6d4:	2120      	movs	r1, #32
 800c6d6:	4803      	ldr	r0, [pc, #12]	@ (800c6e4 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 800c6d8:	f7ff fed8 	bl	800c48c <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 800c6dc:	f7fe fdb8 	bl	800b250 <HW_IPCC_BLE_AclDataAckNot>

  return;
 800c6e0:	bf00      	nop
}
 800c6e2:	bd80      	pop	{r7, pc}
 800c6e4:	58000c00 	.word	0x58000c00

0800c6e8 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 800c6e8:	b580      	push	{r7, lr}
 800c6ea:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800c6ec:	2102      	movs	r1, #2
 800c6ee:	4802      	ldr	r0, [pc, #8]	@ (800c6f8 <HW_IPCC_SYS_Init+0x10>)
 800c6f0:	f7ff fede 	bl	800c4b0 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800c6f4:	bf00      	nop
}
 800c6f6:	bd80      	pop	{r7, pc}
 800c6f8:	58000c00 	.word	0x58000c00

0800c6fc <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 800c6fc:	b580      	push	{r7, lr}
 800c6fe:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800c700:	2102      	movs	r1, #2
 800c702:	4804      	ldr	r0, [pc, #16]	@ (800c714 <HW_IPCC_SYS_SendCmd+0x18>)
 800c704:	f7ff fef4 	bl	800c4f0 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800c708:	2102      	movs	r1, #2
 800c70a:	4802      	ldr	r0, [pc, #8]	@ (800c714 <HW_IPCC_SYS_SendCmd+0x18>)
 800c70c:	f7ff feab 	bl	800c466 <LL_C1_IPCC_EnableTransmitChannel>

  return;
 800c710:	bf00      	nop
}
 800c712:	bd80      	pop	{r7, pc}
 800c714:	58000c00 	.word	0x58000c00

0800c718 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 800c718:	b580      	push	{r7, lr}
 800c71a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800c71c:	2102      	movs	r1, #2
 800c71e:	4803      	ldr	r0, [pc, #12]	@ (800c72c <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 800c720:	f7ff feb4 	bl	800c48c <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 800c724:	f7fe fde4 	bl	800b2f0 <HW_IPCC_SYS_CmdEvtNot>

  return;
 800c728:	bf00      	nop
}
 800c72a:	bd80      	pop	{r7, pc}
 800c72c:	58000c00 	.word	0x58000c00

0800c730 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 800c730:	b580      	push	{r7, lr}
 800c732:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 800c734:	f7fe fdf2 	bl	800b31c <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800c738:	2102      	movs	r1, #2
 800c73a:	4802      	ldr	r0, [pc, #8]	@ (800c744 <HW_IPCC_SYS_EvtHandler+0x14>)
 800c73c:	f7ff feca 	bl	800c4d4 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800c740:	bf00      	nop
}
 800c742:	bd80      	pop	{r7, pc}
 800c744:	58000c00 	.word	0x58000c00

0800c748 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 800c748:	b580      	push	{r7, lr}
 800c74a:	b082      	sub	sp, #8
 800c74c:	af00      	add	r7, sp, #0
 800c74e:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 800c750:	2108      	movs	r1, #8
 800c752:	480c      	ldr	r0, [pc, #48]	@ (800c784 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800c754:	f7ff fedb 	bl	800c50e <LL_C1_IPCC_IsActiveFlag_CHx>
 800c758:	4603      	mov	r3, r0
 800c75a:	2b00      	cmp	r3, #0
 800c75c:	d007      	beq.n	800c76e <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 800c75e:	4a0a      	ldr	r2, [pc, #40]	@ (800c788 <HW_IPCC_MM_SendFreeBuf+0x40>)
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800c764:	2108      	movs	r1, #8
 800c766:	4807      	ldr	r0, [pc, #28]	@ (800c784 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800c768:	f7ff fe7d 	bl	800c466 <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 800c76c:	e006      	b.n	800c77c <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800c772:	2108      	movs	r1, #8
 800c774:	4803      	ldr	r0, [pc, #12]	@ (800c784 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800c776:	f7ff febb 	bl	800c4f0 <LL_C1_IPCC_SetFlag_CHx>
  return;
 800c77a:	bf00      	nop
}
 800c77c:	3708      	adds	r7, #8
 800c77e:	46bd      	mov	sp, r7
 800c780:	bd80      	pop	{r7, pc}
 800c782:	bf00      	nop
 800c784:	58000c00 	.word	0x58000c00
 800c788:	200007e4 	.word	0x200007e4

0800c78c <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 800c78c:	b580      	push	{r7, lr}
 800c78e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800c790:	2108      	movs	r1, #8
 800c792:	4806      	ldr	r0, [pc, #24]	@ (800c7ac <HW_IPCC_MM_FreeBufHandler+0x20>)
 800c794:	f7ff fe7a 	bl	800c48c <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 800c798:	4b05      	ldr	r3, [pc, #20]	@ (800c7b0 <HW_IPCC_MM_FreeBufHandler+0x24>)
 800c79a:	681b      	ldr	r3, [r3, #0]
 800c79c:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800c79e:	2108      	movs	r1, #8
 800c7a0:	4802      	ldr	r0, [pc, #8]	@ (800c7ac <HW_IPCC_MM_FreeBufHandler+0x20>)
 800c7a2:	f7ff fea5 	bl	800c4f0 <LL_C1_IPCC_SetFlag_CHx>

  return;
 800c7a6:	bf00      	nop
}
 800c7a8:	bd80      	pop	{r7, pc}
 800c7aa:	bf00      	nop
 800c7ac:	58000c00 	.word	0x58000c00
 800c7b0:	200007e4 	.word	0x200007e4

0800c7b4 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 800c7b4:	b580      	push	{r7, lr}
 800c7b6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 800c7b8:	2108      	movs	r1, #8
 800c7ba:	4802      	ldr	r0, [pc, #8]	@ (800c7c4 <HW_IPCC_TRACES_Init+0x10>)
 800c7bc:	f7ff fe78 	bl	800c4b0 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800c7c0:	bf00      	nop
}
 800c7c2:	bd80      	pop	{r7, pc}
 800c7c4:	58000c00 	.word	0x58000c00

0800c7c8 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 800c7c8:	b580      	push	{r7, lr}
 800c7ca:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 800c7cc:	f7fe fe4e 	bl	800b46c <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 800c7d0:	2108      	movs	r1, #8
 800c7d2:	4802      	ldr	r0, [pc, #8]	@ (800c7dc <HW_IPCC_TRACES_EvtHandler+0x14>)
 800c7d4:	f7ff fe7e 	bl	800c4d4 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800c7d8:	bf00      	nop
}
 800c7da:	bd80      	pop	{r7, pc}
 800c7dc:	58000c00 	.word	0x58000c00

0800c7e0 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 800c7e0:	b480      	push	{r7}
 800c7e2:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 800c7e4:	4b05      	ldr	r3, [pc, #20]	@ (800c7fc <UTIL_LPM_Init+0x1c>)
 800c7e6:	2200      	movs	r2, #0
 800c7e8:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 800c7ea:	4b05      	ldr	r3, [pc, #20]	@ (800c800 <UTIL_LPM_Init+0x20>)
 800c7ec:	2200      	movs	r2, #0
 800c7ee:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 800c7f0:	bf00      	nop
 800c7f2:	46bd      	mov	sp, r7
 800c7f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7f8:	4770      	bx	lr
 800c7fa:	bf00      	nop
 800c7fc:	200007e8 	.word	0x200007e8
 800c800:	200007ec 	.word	0x200007ec

0800c804 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800c804:	b480      	push	{r7}
 800c806:	b087      	sub	sp, #28
 800c808:	af00      	add	r7, sp, #0
 800c80a:	6078      	str	r0, [r7, #4]
 800c80c:	460b      	mov	r3, r1
 800c80e:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c810:	f3ef 8310 	mrs	r3, PRIMASK
 800c814:	613b      	str	r3, [r7, #16]
  return(result);
 800c816:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 800c818:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800c81a:	b672      	cpsid	i
}
 800c81c:	bf00      	nop
  
  switch(state)
 800c81e:	78fb      	ldrb	r3, [r7, #3]
 800c820:	2b00      	cmp	r3, #0
 800c822:	d008      	beq.n	800c836 <UTIL_LPM_SetOffMode+0x32>
 800c824:	2b01      	cmp	r3, #1
 800c826:	d10e      	bne.n	800c846 <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 800c828:	4b0d      	ldr	r3, [pc, #52]	@ (800c860 <UTIL_LPM_SetOffMode+0x5c>)
 800c82a:	681a      	ldr	r2, [r3, #0]
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	4313      	orrs	r3, r2
 800c830:	4a0b      	ldr	r2, [pc, #44]	@ (800c860 <UTIL_LPM_SetOffMode+0x5c>)
 800c832:	6013      	str	r3, [r2, #0]
      break;
 800c834:	e008      	b.n	800c848 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	43da      	mvns	r2, r3
 800c83a:	4b09      	ldr	r3, [pc, #36]	@ (800c860 <UTIL_LPM_SetOffMode+0x5c>)
 800c83c:	681b      	ldr	r3, [r3, #0]
 800c83e:	4013      	ands	r3, r2
 800c840:	4a07      	ldr	r2, [pc, #28]	@ (800c860 <UTIL_LPM_SetOffMode+0x5c>)
 800c842:	6013      	str	r3, [r2, #0]
      break;
 800c844:	e000      	b.n	800c848 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 800c846:	bf00      	nop
 800c848:	697b      	ldr	r3, [r7, #20]
 800c84a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c84c:	68fb      	ldr	r3, [r7, #12]
 800c84e:	f383 8810 	msr	PRIMASK, r3
}
 800c852:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800c854:	bf00      	nop
 800c856:	371c      	adds	r7, #28
 800c858:	46bd      	mov	sp, r7
 800c85a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c85e:	4770      	bx	lr
 800c860:	200007ec 	.word	0x200007ec

0800c864 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 800c864:	b580      	push	{r7, lr}
 800c866:	b090      	sub	sp, #64	@ 0x40
 800c868:	af00      	add	r7, sp, #0
 800c86a:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 800c86c:	4b73      	ldr	r3, [pc, #460]	@ (800ca3c <UTIL_SEQ_Run+0x1d8>)
 800c86e:	681b      	ldr	r3, [r3, #0]
 800c870:	62bb      	str	r3, [r7, #40]	@ 0x28
  SuperMask &= Mask_bm;
 800c872:	4b72      	ldr	r3, [pc, #456]	@ (800ca3c <UTIL_SEQ_Run+0x1d8>)
 800c874:	681a      	ldr	r2, [r3, #0]
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	4013      	ands	r3, r2
 800c87a:	4a70      	ldr	r2, [pc, #448]	@ (800ca3c <UTIL_SEQ_Run+0x1d8>)
 800c87c:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 800c87e:	4b70      	ldr	r3, [pc, #448]	@ (800ca40 <UTIL_SEQ_Run+0x1dc>)
 800c880:	681b      	ldr	r3, [r3, #0]
 800c882:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 800c884:	4b6f      	ldr	r3, [pc, #444]	@ (800ca44 <UTIL_SEQ_Run+0x1e0>)
 800c886:	681b      	ldr	r3, [r3, #0]
 800c888:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 800c88a:	4b6f      	ldr	r3, [pc, #444]	@ (800ca48 <UTIL_SEQ_Run+0x1e4>)
 800c88c:	681b      	ldr	r3, [r3, #0]
 800c88e:	633b      	str	r3, [r7, #48]	@ 0x30
  local_evtwaited =  EvtWaited;
 800c890:	4b6e      	ldr	r3, [pc, #440]	@ (800ca4c <UTIL_SEQ_Run+0x1e8>)
 800c892:	681b      	ldr	r3, [r3, #0]
 800c894:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800c896:	e08d      	b.n	800c9b4 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 800c898:	2300      	movs	r3, #0
 800c89a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800c89c:	e002      	b.n	800c8a4 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 800c89e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c8a0:	3301      	adds	r3, #1
 800c8a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800c8a4:	4a6a      	ldr	r2, [pc, #424]	@ (800ca50 <UTIL_SEQ_Run+0x1ec>)
 800c8a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c8a8:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800c8ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c8ae:	401a      	ands	r2, r3
 800c8b0:	4b62      	ldr	r3, [pc, #392]	@ (800ca3c <UTIL_SEQ_Run+0x1d8>)
 800c8b2:	681b      	ldr	r3, [r3, #0]
 800c8b4:	4013      	ands	r3, r2
 800c8b6:	2b00      	cmp	r3, #0
 800c8b8:	d0f1      	beq.n	800c89e <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 800c8ba:	4a65      	ldr	r2, [pc, #404]	@ (800ca50 <UTIL_SEQ_Run+0x1ec>)
 800c8bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c8be:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800c8c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c8c4:	401a      	ands	r2, r3
 800c8c6:	4b5d      	ldr	r3, [pc, #372]	@ (800ca3c <UTIL_SEQ_Run+0x1d8>)
 800c8c8:	681b      	ldr	r3, [r3, #0]
 800c8ca:	4013      	ands	r3, r2
 800c8cc:	627b      	str	r3, [r7, #36]	@ 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 800c8ce:	4a60      	ldr	r2, [pc, #384]	@ (800ca50 <UTIL_SEQ_Run+0x1ec>)
 800c8d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c8d2:	00db      	lsls	r3, r3, #3
 800c8d4:	4413      	add	r3, r2
 800c8d6:	685a      	ldr	r2, [r3, #4]
 800c8d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8da:	4013      	ands	r3, r2
 800c8dc:	2b00      	cmp	r3, #0
 800c8de:	d106      	bne.n	800c8ee <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 800c8e0:	4a5b      	ldr	r2, [pc, #364]	@ (800ca50 <UTIL_SEQ_Run+0x1ec>)
 800c8e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c8e4:	00db      	lsls	r3, r3, #3
 800c8e6:	4413      	add	r3, r2
 800c8e8:	f04f 32ff 	mov.w	r2, #4294967295
 800c8ec:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 800c8ee:	4a58      	ldr	r2, [pc, #352]	@ (800ca50 <UTIL_SEQ_Run+0x1ec>)
 800c8f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c8f2:	00db      	lsls	r3, r3, #3
 800c8f4:	4413      	add	r3, r2
 800c8f6:	685a      	ldr	r2, [r3, #4]
 800c8f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8fa:	4013      	ands	r3, r2
 800c8fc:	4618      	mov	r0, r3
 800c8fe:	f000 f9b3 	bl	800cc68 <SEQ_BitPosition>
 800c902:	4603      	mov	r3, r0
 800c904:	461a      	mov	r2, r3
 800c906:	4b53      	ldr	r3, [pc, #332]	@ (800ca54 <UTIL_SEQ_Run+0x1f0>)
 800c908:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 800c90a:	4a51      	ldr	r2, [pc, #324]	@ (800ca50 <UTIL_SEQ_Run+0x1ec>)
 800c90c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c90e:	00db      	lsls	r3, r3, #3
 800c910:	4413      	add	r3, r2
 800c912:	685a      	ldr	r2, [r3, #4]
 800c914:	4b4f      	ldr	r3, [pc, #316]	@ (800ca54 <UTIL_SEQ_Run+0x1f0>)
 800c916:	681b      	ldr	r3, [r3, #0]
 800c918:	2101      	movs	r1, #1
 800c91a:	fa01 f303 	lsl.w	r3, r1, r3
 800c91e:	43db      	mvns	r3, r3
 800c920:	401a      	ands	r2, r3
 800c922:	494b      	ldr	r1, [pc, #300]	@ (800ca50 <UTIL_SEQ_Run+0x1ec>)
 800c924:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c926:	00db      	lsls	r3, r3, #3
 800c928:	440b      	add	r3, r1
 800c92a:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c92c:	f3ef 8310 	mrs	r3, PRIMASK
 800c930:	61bb      	str	r3, [r7, #24]
  return(result);
 800c932:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800c934:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 800c936:	b672      	cpsid	i
}
 800c938:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 800c93a:	4b46      	ldr	r3, [pc, #280]	@ (800ca54 <UTIL_SEQ_Run+0x1f0>)
 800c93c:	681b      	ldr	r3, [r3, #0]
 800c93e:	2201      	movs	r2, #1
 800c940:	fa02 f303 	lsl.w	r3, r2, r3
 800c944:	43da      	mvns	r2, r3
 800c946:	4b3e      	ldr	r3, [pc, #248]	@ (800ca40 <UTIL_SEQ_Run+0x1dc>)
 800c948:	681b      	ldr	r3, [r3, #0]
 800c94a:	4013      	ands	r3, r2
 800c94c:	4a3c      	ldr	r2, [pc, #240]	@ (800ca40 <UTIL_SEQ_Run+0x1dc>)
 800c94e:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800c950:	2302      	movs	r3, #2
 800c952:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c954:	e013      	b.n	800c97e <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 800c956:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c958:	3b01      	subs	r3, #1
 800c95a:	4a3d      	ldr	r2, [pc, #244]	@ (800ca50 <UTIL_SEQ_Run+0x1ec>)
 800c95c:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 800c960:	4b3c      	ldr	r3, [pc, #240]	@ (800ca54 <UTIL_SEQ_Run+0x1f0>)
 800c962:	681b      	ldr	r3, [r3, #0]
 800c964:	2201      	movs	r2, #1
 800c966:	fa02 f303 	lsl.w	r3, r2, r3
 800c96a:	43da      	mvns	r2, r3
 800c96c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c96e:	3b01      	subs	r3, #1
 800c970:	400a      	ands	r2, r1
 800c972:	4937      	ldr	r1, [pc, #220]	@ (800ca50 <UTIL_SEQ_Run+0x1ec>)
 800c974:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800c978:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c97a:	3b01      	subs	r3, #1
 800c97c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c97e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c980:	2b00      	cmp	r3, #0
 800c982:	d1e8      	bne.n	800c956 <UTIL_SEQ_Run+0xf2>
 800c984:	6a3b      	ldr	r3, [r7, #32]
 800c986:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c988:	697b      	ldr	r3, [r7, #20]
 800c98a:	f383 8810 	msr	PRIMASK, r3
}
 800c98e:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 800c990:	4b30      	ldr	r3, [pc, #192]	@ (800ca54 <UTIL_SEQ_Run+0x1f0>)
 800c992:	681b      	ldr	r3, [r3, #0]
 800c994:	4a30      	ldr	r2, [pc, #192]	@ (800ca58 <UTIL_SEQ_Run+0x1f4>)
 800c996:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c99a:	4798      	blx	r3

    local_taskset = TaskSet;
 800c99c:	4b28      	ldr	r3, [pc, #160]	@ (800ca40 <UTIL_SEQ_Run+0x1dc>)
 800c99e:	681b      	ldr	r3, [r3, #0]
 800c9a0:	63bb      	str	r3, [r7, #56]	@ 0x38
    local_evtset = EvtSet;
 800c9a2:	4b28      	ldr	r3, [pc, #160]	@ (800ca44 <UTIL_SEQ_Run+0x1e0>)
 800c9a4:	681b      	ldr	r3, [r3, #0]
 800c9a6:	637b      	str	r3, [r7, #52]	@ 0x34
    local_taskmask = TaskMask;
 800c9a8:	4b27      	ldr	r3, [pc, #156]	@ (800ca48 <UTIL_SEQ_Run+0x1e4>)
 800c9aa:	681b      	ldr	r3, [r3, #0]
 800c9ac:	633b      	str	r3, [r7, #48]	@ 0x30
    local_evtwaited = EvtWaited;
 800c9ae:	4b27      	ldr	r3, [pc, #156]	@ (800ca4c <UTIL_SEQ_Run+0x1e8>)
 800c9b0:	681b      	ldr	r3, [r3, #0]
 800c9b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800c9b4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c9b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c9b8:	401a      	ands	r2, r3
 800c9ba:	4b20      	ldr	r3, [pc, #128]	@ (800ca3c <UTIL_SEQ_Run+0x1d8>)
 800c9bc:	681b      	ldr	r3, [r3, #0]
 800c9be:	4013      	ands	r3, r2
 800c9c0:	2b00      	cmp	r3, #0
 800c9c2:	d005      	beq.n	800c9d0 <UTIL_SEQ_Run+0x16c>
 800c9c4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c9c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c9c8:	4013      	ands	r3, r2
 800c9ca:	2b00      	cmp	r3, #0
 800c9cc:	f43f af64 	beq.w	800c898 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 800c9d0:	4b20      	ldr	r3, [pc, #128]	@ (800ca54 <UTIL_SEQ_Run+0x1f0>)
 800c9d2:	f04f 32ff 	mov.w	r2, #4294967295
 800c9d6:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 800c9d8:	f000 f938 	bl	800cc4c <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c9dc:	f3ef 8310 	mrs	r3, PRIMASK
 800c9e0:	613b      	str	r3, [r7, #16]
  return(result);
 800c9e2:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 800c9e4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800c9e6:	b672      	cpsid	i
}
 800c9e8:	bf00      	nop
  local_taskset = TaskSet;
 800c9ea:	4b15      	ldr	r3, [pc, #84]	@ (800ca40 <UTIL_SEQ_Run+0x1dc>)
 800c9ec:	681b      	ldr	r3, [r3, #0]
 800c9ee:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 800c9f0:	4b14      	ldr	r3, [pc, #80]	@ (800ca44 <UTIL_SEQ_Run+0x1e0>)
 800c9f2:	681b      	ldr	r3, [r3, #0]
 800c9f4:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 800c9f6:	4b14      	ldr	r3, [pc, #80]	@ (800ca48 <UTIL_SEQ_Run+0x1e4>)
 800c9f8:	681b      	ldr	r3, [r3, #0]
 800c9fa:	633b      	str	r3, [r7, #48]	@ 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 800c9fc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c9fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca00:	401a      	ands	r2, r3
 800ca02:	4b0e      	ldr	r3, [pc, #56]	@ (800ca3c <UTIL_SEQ_Run+0x1d8>)
 800ca04:	681b      	ldr	r3, [r3, #0]
 800ca06:	4013      	ands	r3, r2
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	d107      	bne.n	800ca1c <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 800ca0c:	4b0f      	ldr	r3, [pc, #60]	@ (800ca4c <UTIL_SEQ_Run+0x1e8>)
 800ca0e:	681a      	ldr	r2, [r3, #0]
 800ca10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ca12:	4013      	ands	r3, r2
 800ca14:	2b00      	cmp	r3, #0
 800ca16:	d101      	bne.n	800ca1c <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 800ca18:	f7f4 fab2 	bl	8000f80 <UTIL_SEQ_Idle>
 800ca1c:	69fb      	ldr	r3, [r7, #28]
 800ca1e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ca20:	68fb      	ldr	r3, [r7, #12]
 800ca22:	f383 8810 	msr	PRIMASK, r3
}
 800ca26:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 800ca28:	f000 f917 	bl	800cc5a <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 800ca2c:	4a03      	ldr	r2, [pc, #12]	@ (800ca3c <UTIL_SEQ_Run+0x1d8>)
 800ca2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca30:	6013      	str	r3, [r2, #0]

  return;
 800ca32:	bf00      	nop
}
 800ca34:	3740      	adds	r7, #64	@ 0x40
 800ca36:	46bd      	mov	sp, r7
 800ca38:	bd80      	pop	{r7, pc}
 800ca3a:	bf00      	nop
 800ca3c:	20000060 	.word	0x20000060
 800ca40:	200007f0 	.word	0x200007f0
 800ca44:	200007f4 	.word	0x200007f4
 800ca48:	2000005c 	.word	0x2000005c
 800ca4c:	200007f8 	.word	0x200007f8
 800ca50:	20000880 	.word	0x20000880
 800ca54:	200007fc 	.word	0x200007fc
 800ca58:	20000800 	.word	0x20000800

0800ca5c <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 800ca5c:	b580      	push	{r7, lr}
 800ca5e:	b088      	sub	sp, #32
 800ca60:	af00      	add	r7, sp, #0
 800ca62:	60f8      	str	r0, [r7, #12]
 800ca64:	60b9      	str	r1, [r7, #8]
 800ca66:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ca68:	f3ef 8310 	mrs	r3, PRIMASK
 800ca6c:	617b      	str	r3, [r7, #20]
  return(result);
 800ca6e:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 800ca70:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800ca72:	b672      	cpsid	i
}
 800ca74:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 800ca76:	68f8      	ldr	r0, [r7, #12]
 800ca78:	f000 f8f6 	bl	800cc68 <SEQ_BitPosition>
 800ca7c:	4603      	mov	r3, r0
 800ca7e:	4619      	mov	r1, r3
 800ca80:	4a06      	ldr	r2, [pc, #24]	@ (800ca9c <UTIL_SEQ_RegTask+0x40>)
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800ca88:	69fb      	ldr	r3, [r7, #28]
 800ca8a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ca8c:	69bb      	ldr	r3, [r7, #24]
 800ca8e:	f383 8810 	msr	PRIMASK, r3
}
 800ca92:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 800ca94:	bf00      	nop
}
 800ca96:	3720      	adds	r7, #32
 800ca98:	46bd      	mov	sp, r7
 800ca9a:	bd80      	pop	{r7, pc}
 800ca9c:	20000800 	.word	0x20000800

0800caa0 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 800caa0:	b480      	push	{r7}
 800caa2:	b087      	sub	sp, #28
 800caa4:	af00      	add	r7, sp, #0
 800caa6:	6078      	str	r0, [r7, #4]
 800caa8:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800caaa:	f3ef 8310 	mrs	r3, PRIMASK
 800caae:	60fb      	str	r3, [r7, #12]
  return(result);
 800cab0:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800cab2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800cab4:	b672      	cpsid	i
}
 800cab6:	bf00      	nop

  TaskSet |= TaskId_bm;
 800cab8:	4b0d      	ldr	r3, [pc, #52]	@ (800caf0 <UTIL_SEQ_SetTask+0x50>)
 800caba:	681a      	ldr	r2, [r3, #0]
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	4313      	orrs	r3, r2
 800cac0:	4a0b      	ldr	r2, [pc, #44]	@ (800caf0 <UTIL_SEQ_SetTask+0x50>)
 800cac2:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 800cac4:	4a0b      	ldr	r2, [pc, #44]	@ (800caf4 <UTIL_SEQ_SetTask+0x54>)
 800cac6:	683b      	ldr	r3, [r7, #0]
 800cac8:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	431a      	orrs	r2, r3
 800cad0:	4908      	ldr	r1, [pc, #32]	@ (800caf4 <UTIL_SEQ_SetTask+0x54>)
 800cad2:	683b      	ldr	r3, [r7, #0]
 800cad4:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 800cad8:	697b      	ldr	r3, [r7, #20]
 800cada:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cadc:	693b      	ldr	r3, [r7, #16]
 800cade:	f383 8810 	msr	PRIMASK, r3
}
 800cae2:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800cae4:	bf00      	nop
}
 800cae6:	371c      	adds	r7, #28
 800cae8:	46bd      	mov	sp, r7
 800caea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caee:	4770      	bx	lr
 800caf0:	200007f0 	.word	0x200007f0
 800caf4:	20000880 	.word	0x20000880

0800caf8 <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800caf8:	b480      	push	{r7}
 800cafa:	b087      	sub	sp, #28
 800cafc:	af00      	add	r7, sp, #0
 800cafe:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cb00:	f3ef 8310 	mrs	r3, PRIMASK
 800cb04:	60fb      	str	r3, [r7, #12]
  return(result);
 800cb06:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800cb08:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800cb0a:	b672      	cpsid	i
}
 800cb0c:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	43da      	mvns	r2, r3
 800cb12:	4b08      	ldr	r3, [pc, #32]	@ (800cb34 <UTIL_SEQ_PauseTask+0x3c>)
 800cb14:	681b      	ldr	r3, [r3, #0]
 800cb16:	4013      	ands	r3, r2
 800cb18:	4a06      	ldr	r2, [pc, #24]	@ (800cb34 <UTIL_SEQ_PauseTask+0x3c>)
 800cb1a:	6013      	str	r3, [r2, #0]
 800cb1c:	697b      	ldr	r3, [r7, #20]
 800cb1e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cb20:	693b      	ldr	r3, [r7, #16]
 800cb22:	f383 8810 	msr	PRIMASK, r3
}
 800cb26:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800cb28:	bf00      	nop
}
 800cb2a:	371c      	adds	r7, #28
 800cb2c:	46bd      	mov	sp, r7
 800cb2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb32:	4770      	bx	lr
 800cb34:	2000005c 	.word	0x2000005c

0800cb38 <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800cb38:	b480      	push	{r7}
 800cb3a:	b087      	sub	sp, #28
 800cb3c:	af00      	add	r7, sp, #0
 800cb3e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cb40:	f3ef 8310 	mrs	r3, PRIMASK
 800cb44:	60fb      	str	r3, [r7, #12]
  return(result);
 800cb46:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800cb48:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800cb4a:	b672      	cpsid	i
}
 800cb4c:	bf00      	nop

  TaskMask |= TaskId_bm;
 800cb4e:	4b09      	ldr	r3, [pc, #36]	@ (800cb74 <UTIL_SEQ_ResumeTask+0x3c>)
 800cb50:	681a      	ldr	r2, [r3, #0]
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	4313      	orrs	r3, r2
 800cb56:	4a07      	ldr	r2, [pc, #28]	@ (800cb74 <UTIL_SEQ_ResumeTask+0x3c>)
 800cb58:	6013      	str	r3, [r2, #0]
 800cb5a:	697b      	ldr	r3, [r7, #20]
 800cb5c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cb5e:	693b      	ldr	r3, [r7, #16]
 800cb60:	f383 8810 	msr	PRIMASK, r3
}
 800cb64:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800cb66:	bf00      	nop
}
 800cb68:	371c      	adds	r7, #28
 800cb6a:	46bd      	mov	sp, r7
 800cb6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb70:	4770      	bx	lr
 800cb72:	bf00      	nop
 800cb74:	2000005c 	.word	0x2000005c

0800cb78 <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 800cb78:	b480      	push	{r7}
 800cb7a:	b087      	sub	sp, #28
 800cb7c:	af00      	add	r7, sp, #0
 800cb7e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cb80:	f3ef 8310 	mrs	r3, PRIMASK
 800cb84:	60fb      	str	r3, [r7, #12]
  return(result);
 800cb86:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800cb88:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800cb8a:	b672      	cpsid	i
}
 800cb8c:	bf00      	nop

  EvtSet |= EvtId_bm;
 800cb8e:	4b09      	ldr	r3, [pc, #36]	@ (800cbb4 <UTIL_SEQ_SetEvt+0x3c>)
 800cb90:	681a      	ldr	r2, [r3, #0]
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	4313      	orrs	r3, r2
 800cb96:	4a07      	ldr	r2, [pc, #28]	@ (800cbb4 <UTIL_SEQ_SetEvt+0x3c>)
 800cb98:	6013      	str	r3, [r2, #0]
 800cb9a:	697b      	ldr	r3, [r7, #20]
 800cb9c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cb9e:	693b      	ldr	r3, [r7, #16]
 800cba0:	f383 8810 	msr	PRIMASK, r3
}
 800cba4:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800cba6:	bf00      	nop
}
 800cba8:	371c      	adds	r7, #28
 800cbaa:	46bd      	mov	sp, r7
 800cbac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbb0:	4770      	bx	lr
 800cbb2:	bf00      	nop
 800cbb4:	200007f4 	.word	0x200007f4

0800cbb8 <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 800cbb8:	b580      	push	{r7, lr}
 800cbba:	b088      	sub	sp, #32
 800cbbc:	af00      	add	r7, sp, #0
 800cbbe:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 800cbc0:	4b1f      	ldr	r3, [pc, #124]	@ (800cc40 <UTIL_SEQ_WaitEvt+0x88>)
 800cbc2:	681b      	ldr	r3, [r3, #0]
 800cbc4:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 800cbc6:	4b1e      	ldr	r3, [pc, #120]	@ (800cc40 <UTIL_SEQ_WaitEvt+0x88>)
 800cbc8:	681b      	ldr	r3, [r3, #0]
 800cbca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cbce:	d102      	bne.n	800cbd6 <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0u;
 800cbd0:	2300      	movs	r3, #0
 800cbd2:	61fb      	str	r3, [r7, #28]
 800cbd4:	e005      	b.n	800cbe2 <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
 800cbd6:	4b1a      	ldr	r3, [pc, #104]	@ (800cc40 <UTIL_SEQ_WaitEvt+0x88>)
 800cbd8:	681b      	ldr	r3, [r3, #0]
 800cbda:	2201      	movs	r2, #1
 800cbdc:	fa02 f303 	lsl.w	r3, r2, r3
 800cbe0:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 800cbe2:	4b18      	ldr	r3, [pc, #96]	@ (800cc44 <UTIL_SEQ_WaitEvt+0x8c>)
 800cbe4:	681b      	ldr	r3, [r3, #0]
 800cbe6:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 800cbe8:	4a16      	ldr	r2, [pc, #88]	@ (800cc44 <UTIL_SEQ_WaitEvt+0x8c>)
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	6013      	str	r3, [r2, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
 800cbee:	e003      	b.n	800cbf8 <UTIL_SEQ_WaitEvt+0x40>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
 800cbf0:	6879      	ldr	r1, [r7, #4]
 800cbf2:	69f8      	ldr	r0, [r7, #28]
 800cbf4:	f7f4 f9cb 	bl	8000f8e <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
 800cbf8:	4b13      	ldr	r3, [pc, #76]	@ (800cc48 <UTIL_SEQ_WaitEvt+0x90>)
 800cbfa:	681a      	ldr	r2, [r3, #0]
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	4013      	ands	r3, r2
 800cc00:	2b00      	cmp	r3, #0
 800cc02:	d0f5      	beq.n	800cbf0 <UTIL_SEQ_WaitEvt+0x38>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 800cc04:	4a0e      	ldr	r2, [pc, #56]	@ (800cc40 <UTIL_SEQ_WaitEvt+0x88>)
 800cc06:	69bb      	ldr	r3, [r7, #24]
 800cc08:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cc0a:	f3ef 8310 	mrs	r3, PRIMASK
 800cc0e:	60bb      	str	r3, [r7, #8]
  return(result);
 800cc10:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800cc12:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800cc14:	b672      	cpsid	i
}
 800cc16:	bf00      	nop

  EvtSet &= (~EvtId_bm);
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	43da      	mvns	r2, r3
 800cc1c:	4b0a      	ldr	r3, [pc, #40]	@ (800cc48 <UTIL_SEQ_WaitEvt+0x90>)
 800cc1e:	681b      	ldr	r3, [r3, #0]
 800cc20:	4013      	ands	r3, r2
 800cc22:	4a09      	ldr	r2, [pc, #36]	@ (800cc48 <UTIL_SEQ_WaitEvt+0x90>)
 800cc24:	6013      	str	r3, [r2, #0]
 800cc26:	693b      	ldr	r3, [r7, #16]
 800cc28:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cc2a:	68fb      	ldr	r3, [r7, #12]
 800cc2c:	f383 8810 	msr	PRIMASK, r3
}
 800cc30:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 800cc32:	4a04      	ldr	r2, [pc, #16]	@ (800cc44 <UTIL_SEQ_WaitEvt+0x8c>)
 800cc34:	697b      	ldr	r3, [r7, #20]
 800cc36:	6013      	str	r3, [r2, #0]
  return;
 800cc38:	bf00      	nop
}
 800cc3a:	3720      	adds	r7, #32
 800cc3c:	46bd      	mov	sp, r7
 800cc3e:	bd80      	pop	{r7, pc}
 800cc40:	200007fc 	.word	0x200007fc
 800cc44:	200007f8 	.word	0x200007f8
 800cc48:	200007f4 	.word	0x200007f4

0800cc4c <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 800cc4c:	b480      	push	{r7}
 800cc4e:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800cc50:	bf00      	nop
}
 800cc52:	46bd      	mov	sp, r7
 800cc54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc58:	4770      	bx	lr

0800cc5a <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 800cc5a:	b480      	push	{r7}
 800cc5c:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800cc5e:	bf00      	nop
}
 800cc60:	46bd      	mov	sp, r7
 800cc62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc66:	4770      	bx	lr

0800cc68 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 800cc68:	b480      	push	{r7}
 800cc6a:	b085      	sub	sp, #20
 800cc6c:	af00      	add	r7, sp, #0
 800cc6e:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 800cc70:	2300      	movs	r3, #0
 800cc72:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 800cc78:	68bb      	ldr	r3, [r7, #8]
 800cc7a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800cc7e:	d204      	bcs.n	800cc8a <SEQ_BitPosition+0x22>
 800cc80:	2310      	movs	r3, #16
 800cc82:	73fb      	strb	r3, [r7, #15]
 800cc84:	68bb      	ldr	r3, [r7, #8]
 800cc86:	041b      	lsls	r3, r3, #16
 800cc88:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 800cc8a:	68bb      	ldr	r3, [r7, #8]
 800cc8c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800cc90:	d205      	bcs.n	800cc9e <SEQ_BitPosition+0x36>
 800cc92:	7bfb      	ldrb	r3, [r7, #15]
 800cc94:	3308      	adds	r3, #8
 800cc96:	73fb      	strb	r3, [r7, #15]
 800cc98:	68bb      	ldr	r3, [r7, #8]
 800cc9a:	021b      	lsls	r3, r3, #8
 800cc9c:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 800cc9e:	68bb      	ldr	r3, [r7, #8]
 800cca0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800cca4:	d205      	bcs.n	800ccb2 <SEQ_BitPosition+0x4a>
 800cca6:	7bfb      	ldrb	r3, [r7, #15]
 800cca8:	3304      	adds	r3, #4
 800ccaa:	73fb      	strb	r3, [r7, #15]
 800ccac:	68bb      	ldr	r3, [r7, #8]
 800ccae:	011b      	lsls	r3, r3, #4
 800ccb0:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 800ccb2:	68bb      	ldr	r3, [r7, #8]
 800ccb4:	0f1b      	lsrs	r3, r3, #28
 800ccb6:	4a07      	ldr	r2, [pc, #28]	@ (800ccd4 <SEQ_BitPosition+0x6c>)
 800ccb8:	5cd2      	ldrb	r2, [r2, r3]
 800ccba:	7bfb      	ldrb	r3, [r7, #15]
 800ccbc:	4413      	add	r3, r2
 800ccbe:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 800ccc0:	7bfb      	ldrb	r3, [r7, #15]
 800ccc2:	f1c3 031f 	rsb	r3, r3, #31
 800ccc6:	b2db      	uxtb	r3, r3
}
 800ccc8:	4618      	mov	r0, r3
 800ccca:	3714      	adds	r7, #20
 800cccc:	46bd      	mov	sp, r7
 800ccce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccd2:	4770      	bx	lr
 800ccd4:	0800d1e4 	.word	0x0800d1e4

0800ccd8 <memset>:
 800ccd8:	4402      	add	r2, r0
 800ccda:	4603      	mov	r3, r0
 800ccdc:	4293      	cmp	r3, r2
 800ccde:	d100      	bne.n	800cce2 <memset+0xa>
 800cce0:	4770      	bx	lr
 800cce2:	f803 1b01 	strb.w	r1, [r3], #1
 800cce6:	e7f9      	b.n	800ccdc <memset+0x4>

0800cce8 <__errno>:
 800cce8:	4b01      	ldr	r3, [pc, #4]	@ (800ccf0 <__errno+0x8>)
 800ccea:	6818      	ldr	r0, [r3, #0]
 800ccec:	4770      	bx	lr
 800ccee:	bf00      	nop
 800ccf0:	20000064 	.word	0x20000064

0800ccf4 <__libc_init_array>:
 800ccf4:	b570      	push	{r4, r5, r6, lr}
 800ccf6:	4d0d      	ldr	r5, [pc, #52]	@ (800cd2c <__libc_init_array+0x38>)
 800ccf8:	4c0d      	ldr	r4, [pc, #52]	@ (800cd30 <__libc_init_array+0x3c>)
 800ccfa:	1b64      	subs	r4, r4, r5
 800ccfc:	10a4      	asrs	r4, r4, #2
 800ccfe:	2600      	movs	r6, #0
 800cd00:	42a6      	cmp	r6, r4
 800cd02:	d109      	bne.n	800cd18 <__libc_init_array+0x24>
 800cd04:	4d0b      	ldr	r5, [pc, #44]	@ (800cd34 <__libc_init_array+0x40>)
 800cd06:	4c0c      	ldr	r4, [pc, #48]	@ (800cd38 <__libc_init_array+0x44>)
 800cd08:	f000 f92c 	bl	800cf64 <_init>
 800cd0c:	1b64      	subs	r4, r4, r5
 800cd0e:	10a4      	asrs	r4, r4, #2
 800cd10:	2600      	movs	r6, #0
 800cd12:	42a6      	cmp	r6, r4
 800cd14:	d105      	bne.n	800cd22 <__libc_init_array+0x2e>
 800cd16:	bd70      	pop	{r4, r5, r6, pc}
 800cd18:	f855 3b04 	ldr.w	r3, [r5], #4
 800cd1c:	4798      	blx	r3
 800cd1e:	3601      	adds	r6, #1
 800cd20:	e7ee      	b.n	800cd00 <__libc_init_array+0xc>
 800cd22:	f855 3b04 	ldr.w	r3, [r5], #4
 800cd26:	4798      	blx	r3
 800cd28:	3601      	adds	r6, #1
 800cd2a:	e7f2      	b.n	800cd12 <__libc_init_array+0x1e>
 800cd2c:	0800d1fc 	.word	0x0800d1fc
 800cd30:	0800d1fc 	.word	0x0800d1fc
 800cd34:	0800d1fc 	.word	0x0800d1fc
 800cd38:	0800d200 	.word	0x0800d200

0800cd3c <memcpy>:
 800cd3c:	440a      	add	r2, r1
 800cd3e:	4291      	cmp	r1, r2
 800cd40:	f100 33ff 	add.w	r3, r0, #4294967295
 800cd44:	d100      	bne.n	800cd48 <memcpy+0xc>
 800cd46:	4770      	bx	lr
 800cd48:	b510      	push	{r4, lr}
 800cd4a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cd4e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cd52:	4291      	cmp	r1, r2
 800cd54:	d1f9      	bne.n	800cd4a <memcpy+0xe>
 800cd56:	bd10      	pop	{r4, pc}

0800cd58 <sqrt>:
 800cd58:	b538      	push	{r3, r4, r5, lr}
 800cd5a:	ed2d 8b02 	vpush	{d8}
 800cd5e:	ec55 4b10 	vmov	r4, r5, d0
 800cd62:	f000 f825 	bl	800cdb0 <__ieee754_sqrt>
 800cd66:	4622      	mov	r2, r4
 800cd68:	462b      	mov	r3, r5
 800cd6a:	4620      	mov	r0, r4
 800cd6c:	4629      	mov	r1, r5
 800cd6e:	eeb0 8a40 	vmov.f32	s16, s0
 800cd72:	eef0 8a60 	vmov.f32	s17, s1
 800cd76:	f7f3 fe61 	bl	8000a3c <__aeabi_dcmpun>
 800cd7a:	b990      	cbnz	r0, 800cda2 <sqrt+0x4a>
 800cd7c:	2200      	movs	r2, #0
 800cd7e:	2300      	movs	r3, #0
 800cd80:	4620      	mov	r0, r4
 800cd82:	4629      	mov	r1, r5
 800cd84:	f7f3 fe32 	bl	80009ec <__aeabi_dcmplt>
 800cd88:	b158      	cbz	r0, 800cda2 <sqrt+0x4a>
 800cd8a:	f7ff ffad 	bl	800cce8 <__errno>
 800cd8e:	2321      	movs	r3, #33	@ 0x21
 800cd90:	6003      	str	r3, [r0, #0]
 800cd92:	2200      	movs	r2, #0
 800cd94:	2300      	movs	r3, #0
 800cd96:	4610      	mov	r0, r2
 800cd98:	4619      	mov	r1, r3
 800cd9a:	f7f3 fcdf 	bl	800075c <__aeabi_ddiv>
 800cd9e:	ec41 0b18 	vmov	d8, r0, r1
 800cda2:	eeb0 0a48 	vmov.f32	s0, s16
 800cda6:	eef0 0a68 	vmov.f32	s1, s17
 800cdaa:	ecbd 8b02 	vpop	{d8}
 800cdae:	bd38      	pop	{r3, r4, r5, pc}

0800cdb0 <__ieee754_sqrt>:
 800cdb0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cdb4:	4a68      	ldr	r2, [pc, #416]	@ (800cf58 <__ieee754_sqrt+0x1a8>)
 800cdb6:	ec55 4b10 	vmov	r4, r5, d0
 800cdba:	43aa      	bics	r2, r5
 800cdbc:	462b      	mov	r3, r5
 800cdbe:	4621      	mov	r1, r4
 800cdc0:	d110      	bne.n	800cde4 <__ieee754_sqrt+0x34>
 800cdc2:	4622      	mov	r2, r4
 800cdc4:	4620      	mov	r0, r4
 800cdc6:	4629      	mov	r1, r5
 800cdc8:	f7f3 fb9e 	bl	8000508 <__aeabi_dmul>
 800cdcc:	4602      	mov	r2, r0
 800cdce:	460b      	mov	r3, r1
 800cdd0:	4620      	mov	r0, r4
 800cdd2:	4629      	mov	r1, r5
 800cdd4:	f7f3 f9e2 	bl	800019c <__adddf3>
 800cdd8:	4604      	mov	r4, r0
 800cdda:	460d      	mov	r5, r1
 800cddc:	ec45 4b10 	vmov	d0, r4, r5
 800cde0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cde4:	2d00      	cmp	r5, #0
 800cde6:	dc0e      	bgt.n	800ce06 <__ieee754_sqrt+0x56>
 800cde8:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800cdec:	4322      	orrs	r2, r4
 800cdee:	d0f5      	beq.n	800cddc <__ieee754_sqrt+0x2c>
 800cdf0:	b19d      	cbz	r5, 800ce1a <__ieee754_sqrt+0x6a>
 800cdf2:	4622      	mov	r2, r4
 800cdf4:	4620      	mov	r0, r4
 800cdf6:	4629      	mov	r1, r5
 800cdf8:	f7f3 f9ce 	bl	8000198 <__aeabi_dsub>
 800cdfc:	4602      	mov	r2, r0
 800cdfe:	460b      	mov	r3, r1
 800ce00:	f7f3 fcac 	bl	800075c <__aeabi_ddiv>
 800ce04:	e7e8      	b.n	800cdd8 <__ieee754_sqrt+0x28>
 800ce06:	152a      	asrs	r2, r5, #20
 800ce08:	d115      	bne.n	800ce36 <__ieee754_sqrt+0x86>
 800ce0a:	2000      	movs	r0, #0
 800ce0c:	e009      	b.n	800ce22 <__ieee754_sqrt+0x72>
 800ce0e:	0acb      	lsrs	r3, r1, #11
 800ce10:	3a15      	subs	r2, #21
 800ce12:	0549      	lsls	r1, r1, #21
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	d0fa      	beq.n	800ce0e <__ieee754_sqrt+0x5e>
 800ce18:	e7f7      	b.n	800ce0a <__ieee754_sqrt+0x5a>
 800ce1a:	462a      	mov	r2, r5
 800ce1c:	e7fa      	b.n	800ce14 <__ieee754_sqrt+0x64>
 800ce1e:	005b      	lsls	r3, r3, #1
 800ce20:	3001      	adds	r0, #1
 800ce22:	02dc      	lsls	r4, r3, #11
 800ce24:	d5fb      	bpl.n	800ce1e <__ieee754_sqrt+0x6e>
 800ce26:	1e44      	subs	r4, r0, #1
 800ce28:	1b12      	subs	r2, r2, r4
 800ce2a:	f1c0 0420 	rsb	r4, r0, #32
 800ce2e:	fa21 f404 	lsr.w	r4, r1, r4
 800ce32:	4323      	orrs	r3, r4
 800ce34:	4081      	lsls	r1, r0
 800ce36:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ce3a:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800ce3e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ce42:	07d2      	lsls	r2, r2, #31
 800ce44:	bf5c      	itt	pl
 800ce46:	005b      	lslpl	r3, r3, #1
 800ce48:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800ce4c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800ce50:	bf58      	it	pl
 800ce52:	0049      	lslpl	r1, r1, #1
 800ce54:	2600      	movs	r6, #0
 800ce56:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800ce5a:	106d      	asrs	r5, r5, #1
 800ce5c:	0049      	lsls	r1, r1, #1
 800ce5e:	2016      	movs	r0, #22
 800ce60:	4632      	mov	r2, r6
 800ce62:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800ce66:	1917      	adds	r7, r2, r4
 800ce68:	429f      	cmp	r7, r3
 800ce6a:	bfde      	ittt	le
 800ce6c:	193a      	addle	r2, r7, r4
 800ce6e:	1bdb      	suble	r3, r3, r7
 800ce70:	1936      	addle	r6, r6, r4
 800ce72:	0fcf      	lsrs	r7, r1, #31
 800ce74:	3801      	subs	r0, #1
 800ce76:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800ce7a:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800ce7e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800ce82:	d1f0      	bne.n	800ce66 <__ieee754_sqrt+0xb6>
 800ce84:	4604      	mov	r4, r0
 800ce86:	2720      	movs	r7, #32
 800ce88:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800ce8c:	429a      	cmp	r2, r3
 800ce8e:	eb00 0e0c 	add.w	lr, r0, ip
 800ce92:	db02      	blt.n	800ce9a <__ieee754_sqrt+0xea>
 800ce94:	d113      	bne.n	800cebe <__ieee754_sqrt+0x10e>
 800ce96:	458e      	cmp	lr, r1
 800ce98:	d811      	bhi.n	800cebe <__ieee754_sqrt+0x10e>
 800ce9a:	f1be 0f00 	cmp.w	lr, #0
 800ce9e:	eb0e 000c 	add.w	r0, lr, ip
 800cea2:	da42      	bge.n	800cf2a <__ieee754_sqrt+0x17a>
 800cea4:	2800      	cmp	r0, #0
 800cea6:	db40      	blt.n	800cf2a <__ieee754_sqrt+0x17a>
 800cea8:	f102 0801 	add.w	r8, r2, #1
 800ceac:	1a9b      	subs	r3, r3, r2
 800ceae:	458e      	cmp	lr, r1
 800ceb0:	bf88      	it	hi
 800ceb2:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800ceb6:	eba1 010e 	sub.w	r1, r1, lr
 800ceba:	4464      	add	r4, ip
 800cebc:	4642      	mov	r2, r8
 800cebe:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800cec2:	3f01      	subs	r7, #1
 800cec4:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800cec8:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800cecc:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800ced0:	d1dc      	bne.n	800ce8c <__ieee754_sqrt+0xdc>
 800ced2:	4319      	orrs	r1, r3
 800ced4:	d01b      	beq.n	800cf0e <__ieee754_sqrt+0x15e>
 800ced6:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800cf5c <__ieee754_sqrt+0x1ac>
 800ceda:	f8df b084 	ldr.w	fp, [pc, #132]	@ 800cf60 <__ieee754_sqrt+0x1b0>
 800cede:	e9da 0100 	ldrd	r0, r1, [sl]
 800cee2:	e9db 2300 	ldrd	r2, r3, [fp]
 800cee6:	f7f3 f957 	bl	8000198 <__aeabi_dsub>
 800ceea:	e9da 8900 	ldrd	r8, r9, [sl]
 800ceee:	4602      	mov	r2, r0
 800cef0:	460b      	mov	r3, r1
 800cef2:	4640      	mov	r0, r8
 800cef4:	4649      	mov	r1, r9
 800cef6:	f7f3 fd83 	bl	8000a00 <__aeabi_dcmple>
 800cefa:	b140      	cbz	r0, 800cf0e <__ieee754_sqrt+0x15e>
 800cefc:	f1b4 3fff 	cmp.w	r4, #4294967295
 800cf00:	e9da 0100 	ldrd	r0, r1, [sl]
 800cf04:	e9db 2300 	ldrd	r2, r3, [fp]
 800cf08:	d111      	bne.n	800cf2e <__ieee754_sqrt+0x17e>
 800cf0a:	3601      	adds	r6, #1
 800cf0c:	463c      	mov	r4, r7
 800cf0e:	1072      	asrs	r2, r6, #1
 800cf10:	0863      	lsrs	r3, r4, #1
 800cf12:	07f1      	lsls	r1, r6, #31
 800cf14:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800cf18:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800cf1c:	bf48      	it	mi
 800cf1e:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800cf22:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800cf26:	4618      	mov	r0, r3
 800cf28:	e756      	b.n	800cdd8 <__ieee754_sqrt+0x28>
 800cf2a:	4690      	mov	r8, r2
 800cf2c:	e7be      	b.n	800ceac <__ieee754_sqrt+0xfc>
 800cf2e:	f7f3 f935 	bl	800019c <__adddf3>
 800cf32:	e9da 8900 	ldrd	r8, r9, [sl]
 800cf36:	4602      	mov	r2, r0
 800cf38:	460b      	mov	r3, r1
 800cf3a:	4640      	mov	r0, r8
 800cf3c:	4649      	mov	r1, r9
 800cf3e:	f7f3 fd55 	bl	80009ec <__aeabi_dcmplt>
 800cf42:	b120      	cbz	r0, 800cf4e <__ieee754_sqrt+0x19e>
 800cf44:	1ca0      	adds	r0, r4, #2
 800cf46:	bf08      	it	eq
 800cf48:	3601      	addeq	r6, #1
 800cf4a:	3402      	adds	r4, #2
 800cf4c:	e7df      	b.n	800cf0e <__ieee754_sqrt+0x15e>
 800cf4e:	1c63      	adds	r3, r4, #1
 800cf50:	f023 0401 	bic.w	r4, r3, #1
 800cf54:	e7db      	b.n	800cf0e <__ieee754_sqrt+0x15e>
 800cf56:	bf00      	nop
 800cf58:	7ff00000 	.word	0x7ff00000
 800cf5c:	200000c0 	.word	0x200000c0
 800cf60:	200000b8 	.word	0x200000b8

0800cf64 <_init>:
 800cf64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf66:	bf00      	nop
 800cf68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cf6a:	bc08      	pop	{r3}
 800cf6c:	469e      	mov	lr, r3
 800cf6e:	4770      	bx	lr

0800cf70 <_fini>:
 800cf70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf72:	bf00      	nop
 800cf74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cf76:	bc08      	pop	{r3}
 800cf78:	469e      	mov	lr, r3
 800cf7a:	4770      	bx	lr
