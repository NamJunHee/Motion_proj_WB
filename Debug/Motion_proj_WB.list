
Motion_proj_WB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000122dc  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003a8  0801241c  0801241c  0001341c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080127c4  080127c4  000137c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080127cc  080127cc  000137cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  080127d0  080127d0  000137d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000000d8  20000008  080127d4  00014008  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 BLE_DRIVER_CONTEXT 00000035  200000e0  080128ac  000140e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 SYSTEM_DRIVER_CONTEXT 00000011  20000118  080128e1  00014118  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002d5c  20000130  080128f2  00014130  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20002e8c  080128f2  00014e8c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00014a67  2**0
                  CONTENTS, READONLY
 12 MAPPING_TABLE 00000028  20030000  20030000  00015000  2**2
                  ALLOC
 13 MB_MEM1       000001bb  20030028  20030028  00015000  2**2
                  ALLOC
 14 .MB_MEM2      00000883  200301e4  080128f2  000141e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 15 .debug_info   0002fa90  00000000  00000000  00014a97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 0000691c  00000000  00000000  00044527  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00002e40  00000000  00000000  0004ae48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 0000238a  00000000  00000000  0004dc88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0002ed9e  00000000  00000000  00050012  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   00036298  00000000  00000000  0007edb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    00102cbb  00000000  00000000  000b5048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      00000043  00000000  00000000  001b7d03  2**0
                  CONTENTS, READONLY
 23 .debug_frame  0000d0fc  00000000  00000000  001b7d48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 0000006e  00000000  00000000  001c4e44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000130 	.word	0x20000130
 800015c:	00000000 	.word	0x00000000
 8000160:	08012404 	.word	0x08012404

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000134 	.word	0x20000134
 800017c:	08012404 	.word	0x08012404

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	@ 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2f>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b10:	bf24      	itt	cs
 8000b12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b1a:	d90d      	bls.n	8000b38 <__aeabi_d2f+0x30>
 8000b1c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b28:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b30:	bf08      	it	eq
 8000b32:	f020 0001 	biceq.w	r0, r0, #1
 8000b36:	4770      	bx	lr
 8000b38:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b3c:	d121      	bne.n	8000b82 <__aeabi_d2f+0x7a>
 8000b3e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b42:	bfbc      	itt	lt
 8000b44:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b48:	4770      	bxlt	lr
 8000b4a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b52:	f1c2 0218 	rsb	r2, r2, #24
 8000b56:	f1c2 0c20 	rsb	ip, r2, #32
 8000b5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b62:	bf18      	it	ne
 8000b64:	f040 0001 	orrne.w	r0, r0, #1
 8000b68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b74:	ea40 000c 	orr.w	r0, r0, ip
 8000b78:	fa23 f302 	lsr.w	r3, r3, r2
 8000b7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b80:	e7cc      	b.n	8000b1c <__aeabi_d2f+0x14>
 8000b82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b86:	d107      	bne.n	8000b98 <__aeabi_d2f+0x90>
 8000b88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b8c:	bf1e      	ittt	ne
 8000b8e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b92:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b96:	4770      	bxne	lr
 8000b98:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b9c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ba0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <APPD_EnableCPU2>:
/* USER CODE END APPD_Init */
  return;
}

void APPD_EnableCPU2( void )
{
 8000ba8:	b5b0      	push	{r4, r5, r7, lr}
 8000baa:	b088      	sub	sp, #32
 8000bac:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 8000bae:	4b0b      	ldr	r3, [pc, #44]	@ (8000bdc <APPD_EnableCPU2+0x34>)
 8000bb0:	1d3c      	adds	r4, r7, #4
 8000bb2:	461d      	mov	r5, r3
 8000bb4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bb6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bb8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000bbc:	c403      	stmia	r4!, {r0, r1}
 8000bbe:	8022      	strh	r2, [r4, #0]
 8000bc0:	3402      	adds	r4, #2
 8000bc2:	0c13      	lsrs	r3, r2, #16
 8000bc4:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 8000bc6:	f00e f8f1 	bl	800edac <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 8000bca:	1d3b      	adds	r3, r7, #4
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f00d fb82 	bl	800e2d6 <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 8000bd2:	bf00      	nop
}
 8000bd4:	3720      	adds	r7, #32
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bdb0      	pop	{r4, r5, r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	0801241c 	.word	0x0801241c

08000be0 <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 8000be0:	b480      	push	{r7}
 8000be2:	b083      	sub	sp, #12
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 8000be8:	4b07      	ldr	r3, [pc, #28]	@ (8000c08 <LL_C2_PWR_SetPowerMode+0x28>)
 8000bea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000bee:	f023 0207 	bic.w	r2, r3, #7
 8000bf2:	4905      	ldr	r1, [pc, #20]	@ (8000c08 <LL_C2_PWR_SetPowerMode+0x28>)
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	4313      	orrs	r3, r2
 8000bf8:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 8000bfc:	bf00      	nop
 8000bfe:	370c      	adds	r7, #12
 8000c00:	46bd      	mov	sp, r7
 8000c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c06:	4770      	bx	lr
 8000c08:	58000400 	.word	0x58000400

08000c0c <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	b083      	sub	sp, #12
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8000c14:	4b06      	ldr	r3, [pc, #24]	@ (8000c30 <LL_EXTI_EnableIT_32_63+0x24>)
 8000c16:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8000c1a:	4905      	ldr	r1, [pc, #20]	@ (8000c30 <LL_EXTI_EnableIT_32_63+0x24>)
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	4313      	orrs	r3, r2
 8000c20:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8000c24:	bf00      	nop
 8000c26:	370c      	adds	r7, #12
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2e:	4770      	bx	lr
 8000c30:	58000800 	.word	0x58000800

08000c34 <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 8000c34:	b480      	push	{r7}
 8000c36:	b083      	sub	sp, #12
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 8000c3c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000c40:	4a0a      	ldr	r2, [pc, #40]	@ (8000c6c <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 8000c42:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 8000c46:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000c4a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000c4e:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	021b      	lsls	r3, r3, #8
 8000c56:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000c5a:	4313      	orrs	r3, r2
 8000c5c:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
}
 8000c60:	bf00      	nop
 8000c62:	370c      	adds	r7, #12
 8000c64:	46bd      	mov	sp, r7
 8000c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6a:	4770      	bx	lr
 8000c6c:	cafecafe 	.word	0xcafecafe

08000c70 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8000c70:	b480      	push	{r7}
 8000c72:	b083      	sub	sp, #12
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8000c78:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000c7c:	689b      	ldr	r3, [r3, #8]
 8000c7e:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8000c82:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	4313      	orrs	r3, r2
 8000c8a:	608b      	str	r3, [r1, #8]
}
 8000c8c:	bf00      	nop
 8000c8e:	370c      	adds	r7, #12
 8000c90:	46bd      	mov	sp, r7
 8000c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c96:	4770      	bx	lr

08000c98 <LL_DBGMCU_GetDeviceID>:
  * @note   For STM32WBxxxx devices, the device ID is 0x495
  * @rmtoll DBGMCU_IDCODE DEV_ID        LL_DBGMCU_GetDeviceID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFF (ex: device ID is 0x495)
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetDeviceID(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_DEV_ID));
 8000c9c:	4b04      	ldr	r3, [pc, #16]	@ (8000cb0 <LL_DBGMCU_GetDeviceID+0x18>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop
 8000cb0:	e0042000 	.word	0xe0042000

08000cb4 <LL_DBGMCU_GetRevisionID>:
  * @note   This field indicates the revision of the device.
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 8000cb8:	4b04      	ldr	r3, [pc, #16]	@ (8000ccc <LL_DBGMCU_GetRevisionID+0x18>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	0c1b      	lsrs	r3, r3, #16
 8000cbe:	b29b      	uxth	r3, r3
}
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc8:	4770      	bx	lr
 8000cca:	bf00      	nop
 8000ccc:	e0042000 	.word	0xe0042000

08000cd0 <LL_LPM_EnableSleep>:
  * @brief  Processor uses sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8000cd4:	4b05      	ldr	r3, [pc, #20]	@ (8000cec <LL_LPM_EnableSleep+0x1c>)
 8000cd6:	691b      	ldr	r3, [r3, #16]
 8000cd8:	4a04      	ldr	r2, [pc, #16]	@ (8000cec <LL_LPM_EnableSleep+0x1c>)
 8000cda:	f023 0304 	bic.w	r3, r3, #4
 8000cde:	6113      	str	r3, [r2, #16]
}
 8000ce0:	bf00      	nop
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce8:	4770      	bx	lr
 8000cea:	bf00      	nop
 8000cec:	e000ed00 	.word	0xe000ed00

08000cf0 <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	b083      	sub	sp, #12
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	22ff      	movs	r2, #255	@ 0xff
 8000cfc:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8000cfe:	bf00      	nop
 8000d00:	370c      	adds	r7, #12
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr

08000d0a <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 8000d0a:	b480      	push	{r7}
 8000d0c:	b083      	sub	sp, #12
 8000d0e:	af00      	add	r7, sp, #0
 8000d10:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	22ca      	movs	r2, #202	@ 0xca
 8000d16:	625a      	str	r2, [r3, #36]	@ 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	2253      	movs	r2, #83	@ 0x53
 8000d1c:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8000d1e:	bf00      	nop
 8000d20:	370c      	adds	r7, #12
 8000d22:	46bd      	mov	sp, r7
 8000d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d28:	4770      	bx	lr

08000d2a <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 8000d2a:	b480      	push	{r7}
 8000d2c:	b083      	sub	sp, #12
 8000d2e:	af00      	add	r7, sp, #0
 8000d30:	6078      	str	r0, [r7, #4]
 8000d32:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	689b      	ldr	r3, [r3, #8]
 8000d38:	f023 0207 	bic.w	r2, r3, #7
 8000d3c:	683b      	ldr	r3, [r7, #0]
 8000d3e:	431a      	orrs	r2, r3
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	609a      	str	r2, [r3, #8]
}
 8000d44:	bf00      	nop
 8000d46:	370c      	adds	r7, #12
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4e:	4770      	bx	lr

08000d50 <MX_APPE_Config>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8000d54:	4b04      	ldr	r3, [pc, #16]	@ (8000d68 <MX_APPE_Config+0x18>)
 8000d56:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000d5a:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device();
 8000d5c:	f000 f824 	bl	8000da8 <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 8000d60:	f000 f829 	bl	8000db6 <Config_HSE>

  return;
 8000d64:	bf00      	nop
}
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	58004000 	.word	0x58004000

08000d6c <MX_APPE_Init>:

void MX_APPE_Init(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	af00      	add	r7, sp, #0
  System_Init();       /**< System initialization */
 8000d70:	f000 f835 	bl	8000dde <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 8000d74:	f000 f84e 	bl	8000e14 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 8000d78:	4903      	ldr	r1, [pc, #12]	@ (8000d88 <MX_APPE_Init+0x1c>)
 8000d7a:	2000      	movs	r0, #0
 8000d7c:	f000 fd9a 	bl	80018b4 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 8000d80:	f000 f856 	bl	8000e30 <appe_Tl_Init>
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */

   return;
 8000d84:	bf00      	nop
}
 8000d86:	bd80      	pop	{r7, pc}
 8000d88:	200002e4 	.word	0x200002e4

08000d8c <Init_Smps>:

void Init_Smps(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif /* CFG_USE_SMPS != 0 */

  return;
 8000d90:	bf00      	nop
}
 8000d92:	46bd      	mov	sp, r7
 8000d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d98:	4770      	bx	lr

08000d9a <Init_Exti>:

void Init_Exti(void)
{
 8000d9a:	b580      	push	{r7, lr}
 8000d9c:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_36 | LL_EXTI_LINE_38);
 8000d9e:	2050      	movs	r0, #80	@ 0x50
 8000da0:	f7ff ff34 	bl	8000c0c <LL_EXTI_EnableIT_32_63>

  return;
 8000da4:	bf00      	nop
}
 8000da6:	bd80      	pop	{r7, pc}

08000da8 <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
  Reset_BackupDomain();

  Reset_IPCC();
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 8000dac:	bf00      	nop
}
 8000dae:	46bd      	mov	sp, r7
 8000db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db4:	4770      	bx	lr

08000db6 <Config_HSE>:
  return;
}
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 8000db6:	b580      	push	{r7, lr}
 8000db8:	b082      	sub	sp, #8
 8000dba:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 8000dbc:	2000      	movs	r0, #0
 8000dbe:	f00e f881 	bl	800eec4 <OTP_Read>
 8000dc2:	6078      	str	r0, [r7, #4]
  if (p_otp)
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d005      	beq.n	8000dd6 <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	799b      	ldrb	r3, [r3, #6]
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f7ff ff30 	bl	8000c34 <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 8000dd4:	bf00      	nop
 8000dd6:	bf00      	nop
}
 8000dd8:	3708      	adds	r7, #8
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}

08000dde <System_Init>:

static void System_Init(void)
{
 8000dde:	b580      	push	{r7, lr}
 8000de0:	af00      	add	r7, sp, #0
  Init_Smps();
 8000de2:	f7ff ffd3 	bl	8000d8c <Init_Smps>

  Init_Exti();
 8000de6:	f7ff ffd8 	bl	8000d9a <Init_Exti>

  Init_Rtc();
 8000dea:	f000 f803 	bl	8000df4 <Init_Rtc>

  return;
 8000dee:	bf00      	nop
}
 8000df0:	bd80      	pop	{r7, pc}
	...

08000df4 <Init_Rtc>:

static void Init_Rtc(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 8000df8:	4805      	ldr	r0, [pc, #20]	@ (8000e10 <Init_Rtc+0x1c>)
 8000dfa:	f7ff ff86 	bl	8000d0a <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 8000dfe:	2100      	movs	r1, #0
 8000e00:	4803      	ldr	r0, [pc, #12]	@ (8000e10 <Init_Rtc+0x1c>)
 8000e02:	f7ff ff92 	bl	8000d2a <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 8000e06:	4802      	ldr	r0, [pc, #8]	@ (8000e10 <Init_Rtc+0x1c>)
 8000e08:	f7ff ff72 	bl	8000cf0 <LL_RTC_EnableWriteProtection>

  return;
 8000e0c:	bf00      	nop
}
 8000e0e:	bd80      	pop	{r7, pc}
 8000e10:	40002800 	.word	0x40002800

08000e14 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8000e18:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8000e1c:	f7ff ff28 	bl	8000c70 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 8000e20:	f00f f9de 	bl	80101e0 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 8000e24:	2004      	movs	r0, #4
 8000e26:	f7ff fedb 	bl	8000be0 <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif /* CFG_USB_INTERFACE_ENABLE != 0 */

  return;
 8000e2a:	bf00      	nop
}
 8000e2c:	bd80      	pop	{r7, pc}
	...

08000e30 <appe_Tl_Init>:

static void appe_Tl_Init(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b088      	sub	sp, #32
 8000e34:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 8000e36:	f00d fe03 	bl	800ea40 <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask(1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc);
 8000e3a:	4a11      	ldr	r2, [pc, #68]	@ (8000e80 <appe_Tl_Init+0x50>)
 8000e3c:	2100      	movs	r1, #0
 8000e3e:	2010      	movs	r0, #16
 8000e40:	f00f fb0c 	bl	801045c <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 8000e44:	4b0f      	ldr	r3, [pc, #60]	@ (8000e84 <appe_Tl_Init+0x54>)
 8000e46:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 8000e48:	4b0f      	ldr	r3, [pc, #60]	@ (8000e88 <appe_Tl_Init+0x58>)
 8000e4a:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 8000e4c:	463b      	mov	r3, r7
 8000e4e:	4619      	mov	r1, r3
 8000e50:	480e      	ldr	r0, [pc, #56]	@ (8000e8c <appe_Tl_Init+0x5c>)
 8000e52:	f00d fcb7 	bl	800e7c4 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 8000e56:	4b0e      	ldr	r3, [pc, #56]	@ (8000e90 <appe_Tl_Init+0x60>)
 8000e58:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 8000e5a:	4b0e      	ldr	r3, [pc, #56]	@ (8000e94 <appe_Tl_Init+0x64>)
 8000e5c:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 8000e5e:	4b0e      	ldr	r3, [pc, #56]	@ (8000e98 <appe_Tl_Init+0x68>)
 8000e60:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 8000e62:	f240 533c 	movw	r3, #1340	@ 0x53c
 8000e66:	617b      	str	r3, [r7, #20]
  TL_MM_Init(&tl_mm_config);
 8000e68:	f107 0308 	add.w	r3, r7, #8
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f00d ff29 	bl	800ecc4 <TL_MM_Init>

  TL_Enable();
 8000e72:	f00d fddf 	bl	800ea34 <TL_Enable>

  return;
 8000e76:	bf00      	nop
}
 8000e78:	3720      	adds	r7, #32
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	0800e7fd 	.word	0x0800e7fd
 8000e84:	20030734 	.word	0x20030734
 8000e88:	08000e9d 	.word	0x08000e9d
 8000e8c:	08000eb5 	.word	0x08000eb5
 8000e90:	2003094c 	.word	0x2003094c
 8000e94:	20030840 	.word	0x20030840
 8000e98:	200301f8 	.word	0x200301f8

08000e9c <APPE_SysStatusNot>:

static void APPE_SysStatusNot(SHCI_TL_CmdStatus_t status)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	b083      	sub	sp, #12
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 8000ea6:	bf00      	nop
}
 8000ea8:	370c      	adds	r7, #12
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb0:	4770      	bx	lr
	...

08000eb4 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * (eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable)
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx(void * pPayload)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b088      	sub	sp, #32
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  WirelessFwInfo_t WirelessInfo;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	685b      	ldr	r3, [r3, #4]
 8000ec0:	330b      	adds	r3, #11
 8000ec2:	61fb      	str	r3, [r7, #28]

  switch(p_sys_event->subevtcode)
 8000ec4:	69fb      	ldr	r3, [r7, #28]
 8000ec6:	881b      	ldrh	r3, [r3, #0]
 8000ec8:	b29b      	uxth	r3, r3
 8000eca:	f5a3 4312 	sub.w	r3, r3, #37376	@ 0x9200
 8000ece:	2b07      	cmp	r3, #7
 8000ed0:	d81f      	bhi.n	8000f12 <APPE_SysUserEvtRx+0x5e>
 8000ed2:	a201      	add	r2, pc, #4	@ (adr r2, 8000ed8 <APPE_SysUserEvtRx+0x24>)
 8000ed4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ed8:	08000ef9 	.word	0x08000ef9
 8000edc:	08000f0b 	.word	0x08000f0b
 8000ee0:	08000f13 	.word	0x08000f13
 8000ee4:	08000f13 	.word	0x08000f13
 8000ee8:	08000f13 	.word	0x08000f13
 8000eec:	08000f13 	.word	0x08000f13
 8000ef0:	08000f13 	.word	0x08000f13
 8000ef4:	08000f13 	.word	0x08000f13
  {
  case SHCI_SUB_EVT_CODE_READY:
    /* Read the firmware version of both the wireless firmware and the FUS */
    SHCI_GetWirelessFwInfo(&WirelessInfo);
 8000ef8:	f107 030c 	add.w	r3, r7, #12
 8000efc:	4618      	mov	r0, r3
 8000efe:	f00d fa17 	bl	800e330 <SHCI_GetWirelessFwInfo>
    APP_DBG_MSG("Wireless Firmware version %d.%d.%d\n", WirelessInfo.VersionMajor, WirelessInfo.VersionMinor, WirelessInfo.VersionSub);
    APP_DBG_MSG("Wireless Firmware build %d\n", WirelessInfo.VersionReleaseType);
    APP_DBG_MSG("FUS version %d.%d.%d\n", WirelessInfo.FusVersionMajor, WirelessInfo.FusVersionMinor, WirelessInfo.FusVersionSub);

    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY\n\r");
    APPE_SysEvtReadyProcessing(pPayload);
 8000f02:	6878      	ldr	r0, [r7, #4]
 8000f04:	f000 f81b 	bl	8000f3e <APPE_SysEvtReadyProcessing>
    break;
 8000f08:	e004      	b.n	8000f14 <APPE_SysUserEvtRx+0x60>

  case SHCI_SUB_EVT_ERROR_NOTIF:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF \n\r");
    APPE_SysEvtError(pPayload);
 8000f0a:	6878      	ldr	r0, [r7, #4]
 8000f0c:	f000 f806 	bl	8000f1c <APPE_SysEvtError>
    break;
 8000f10:	e000      	b.n	8000f14 <APPE_SysUserEvtRx+0x60>
  case SHCI_SUB_EVT_NVM_END_ERASE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_ERASE\n\r");
    break;

  default:
    break;
 8000f12:	bf00      	nop
  }

  return;
 8000f14:	bf00      	nop
}
 8000f16:	3720      	adds	r7, #32
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}

08000f1c <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError(void * pPayload)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b085      	sub	sp, #20
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SCHI_SystemErrCode_t *p_sys_error_code;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	685b      	ldr	r3, [r3, #4]
 8000f28:	330b      	adds	r3, #11
 8000f2a:	60fb      	str	r3, [r7, #12]
  p_sys_error_code = (SCHI_SystemErrCode_t*) p_sys_event->payload;
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	3302      	adds	r3, #2
 8000f30:	60bb      	str	r3, [r7, #8]
  }
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
  }
  return;
 8000f32:	bf00      	nop
}
 8000f34:	3714      	adds	r7, #20
 8000f36:	46bd      	mov	sp, r7
 8000f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3c:	4770      	bx	lr

08000f3e <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing(void * pPayload)
{
 8000f3e:	b580      	push	{r7, lr}
 8000f40:	b08a      	sub	sp, #40	@ 0x28
 8000f42:	af00      	add	r7, sp, #0
 8000f44:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SHCI_C2_Ready_Evt_t *p_sys_ready_event;

  SHCI_C2_CONFIG_Cmd_Param_t config_param = {0};
 8000f46:	f107 0308 	add.w	r3, r7, #8
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	601a      	str	r2, [r3, #0]
 8000f4e:	605a      	str	r2, [r3, #4]
 8000f50:	609a      	str	r2, [r3, #8]
 8000f52:	60da      	str	r2, [r3, #12]
  uint32_t RevisionID=0;
 8000f54:	2300      	movs	r3, #0
 8000f56:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t DeviceID=0;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	623b      	str	r3, [r7, #32]

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	685b      	ldr	r3, [r3, #4]
 8000f60:	330b      	adds	r3, #11
 8000f62:	61fb      	str	r3, [r7, #28]
  p_sys_ready_event = (SHCI_C2_Ready_Evt_t*) p_sys_event->payload;
 8000f64:	69fb      	ldr	r3, [r7, #28]
 8000f66:	3302      	adds	r3, #2
 8000f68:	61bb      	str	r3, [r7, #24]

  if (p_sys_ready_event->sysevt_ready_rsp == WIRELESS_FW_RUNNING)
 8000f6a:	69bb      	ldr	r3, [r7, #24]
 8000f6c:	781b      	ldrb	r3, [r3, #0]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d11d      	bne.n	8000fae <APPE_SysEvtReadyProcessing+0x70>
    * The wireless firmware is running on the CPU2
    */
    APP_DBG_MSG(">>== WIRELESS_FW_RUNNING \n");

    /* Traces channel initialization */
    APPD_EnableCPU2();
 8000f72:	f7ff fe19 	bl	8000ba8 <APPD_EnableCPU2>

    /* Enable all events Notification */
    config_param.PayloadCmdSize = SHCI_C2_CONFIG_PAYLOAD_CMD_SIZE;
 8000f76:	230f      	movs	r3, #15
 8000f78:	723b      	strb	r3, [r7, #8]
    config_param.EvtMask1 = SHCI_C2_CONFIG_EVTMASK1_BIT0_ERROR_NOTIF_ENABLE
 8000f7a:	237f      	movs	r3, #127	@ 0x7f
 8000f7c:	72bb      	strb	r3, [r7, #10]
    * @brief  Return the device revision identifier
    * @note   This field indicates the revision of the device.
    * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
    * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
    */
    RevisionID = LL_DBGMCU_GetRevisionID();
 8000f7e:	f7ff fe99 	bl	8000cb4 <LL_DBGMCU_GetRevisionID>
 8000f82:	6278      	str	r0, [r7, #36]	@ 0x24

    APP_DBG_MSG(">>== DBGMCU_GetRevisionID= %lx \n\r", RevisionID);

    config_param.RevisionID = (uint16_t)RevisionID;
 8000f84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f86:	b29b      	uxth	r3, r3
 8000f88:	82bb      	strh	r3, [r7, #20]

    DeviceID = LL_DBGMCU_GetDeviceID();
 8000f8a:	f7ff fe85 	bl	8000c98 <LL_DBGMCU_GetDeviceID>
 8000f8e:	6238      	str	r0, [r7, #32]
    APP_DBG_MSG(">>== DBGMCU_GetDeviceID= %lx \n\r", DeviceID);
    config_param.DeviceID = (uint16_t)DeviceID;
 8000f90:	6a3b      	ldr	r3, [r7, #32]
 8000f92:	b29b      	uxth	r3, r3
 8000f94:	82fb      	strh	r3, [r7, #22]
    (void)SHCI_C2_Config(&config_param);
 8000f96:	f107 0308 	add.w	r3, r7, #8
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f00d f9b2 	bl	800e304 <SHCI_C2_Config>

    APP_BLE_Init();
 8000fa0:	f00e f89a 	bl	800f0d8 <APP_BLE_Init>
    UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 8000fa4:	2100      	movs	r1, #0
 8000fa6:	2001      	movs	r0, #1
 8000fa8:	f00f f92c 	bl	8010204 <UTIL_LPM_SetOffMode>
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
  }

  return;
 8000fac:	e007      	b.n	8000fbe <APPE_SysEvtReadyProcessing+0x80>
  else if (p_sys_ready_event->sysevt_ready_rsp == FUS_FW_RUNNING)
 8000fae:	69bb      	ldr	r3, [r7, #24]
 8000fb0:	781b      	ldrb	r3, [r3, #0]
 8000fb2:	2b01      	cmp	r3, #1
 8000fb4:	d103      	bne.n	8000fbe <APPE_SysEvtReadyProcessing+0x80>
    ((tSHCI_UserEvtRxParam*)pPayload)->status = SHCI_TL_UserEventFlow_Disable;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	2200      	movs	r2, #0
 8000fba:	701a      	strb	r2, [r3, #0]
  return;
 8000fbc:	bf00      	nop
 8000fbe:	bf00      	nop
}
 8000fc0:	3728      	adds	r7, #40	@ 0x28
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}

08000fc6 <HAL_Delay>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void HAL_Delay(uint32_t Delay)
{
 8000fc6:	b580      	push	{r7, lr}
 8000fc8:	b084      	sub	sp, #16
 8000fca:	af00      	add	r7, sp, #0
 8000fcc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fce:	f006 fd99 	bl	8007b04 <HAL_GetTick>
 8000fd2:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fde:	d00a      	beq.n	8000ff6 <HAL_Delay+0x30>
  {
    wait += HAL_GetTickFreq();
 8000fe0:	f006 fda8 	bl	8007b34 <HAL_GetTickFreq>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	461a      	mov	r2, r3
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	4413      	add	r3, r2
 8000fec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000fee:	e002      	b.n	8000ff6 <HAL_Delay+0x30>
  {
    /************************************************************************************
     * ENTER SLEEP MODE
     ***********************************************************************************/
    LL_LPM_EnableSleep(); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 8000ff0:	f7ff fe6e 	bl	8000cd0 <LL_LPM_EnableSleep>
     */
  #if defined (__CC_ARM) || defined (__ARMCC_VERSION)
    __force_stores();
  #endif /* __ARMCC_VERSION */

    __WFI();
 8000ff4:	bf30      	wfi
  while ((HAL_GetTick() - tickstart) < wait)
 8000ff6:	f006 fd85 	bl	8007b04 <HAL_GetTick>
 8000ffa:	4602      	mov	r2, r0
 8000ffc:	68bb      	ldr	r3, [r7, #8]
 8000ffe:	1ad3      	subs	r3, r2, r3
 8001000:	68fa      	ldr	r2, [r7, #12]
 8001002:	429a      	cmp	r2, r3
 8001004:	d8f4      	bhi.n	8000ff0 <HAL_Delay+0x2a>
  }
}
 8001006:	bf00      	nop
 8001008:	bf00      	nop
 800100a:	3710      	adds	r7, #16
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}

08001010 <MX_APPE_Process>:

void MX_APPE_Process(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8001014:	f04f 30ff 	mov.w	r0, #4294967295
 8001018:	f00f f924 	bl	8010264 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 800101c:	bf00      	nop
 800101e:	bd80      	pop	{r7, pc}

08001020 <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
#endif /* CFG_LPM_SUPPORTED == 1 */
  return;
 8001024:	bf00      	nop
}
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr

0800102e <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle(UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm)
{
 800102e:	b580      	push	{r7, lr}
 8001030:	b082      	sub	sp, #8
 8001032:	af00      	add	r7, sp, #0
 8001034:	6078      	str	r0, [r7, #4]
 8001036:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8001038:	f04f 30ff 	mov.w	r0, #4294967295
 800103c:	f00f f912 	bl	8010264 <UTIL_SEQ_Run>
  return;
 8001040:	bf00      	nop
}
 8001042:	3708      	adds	r7, #8
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}

08001048 <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8001050:	2100      	movs	r1, #0
 8001052:	2010      	movs	r0, #16
 8001054:	f00f fa24 	bl	80104a0 <UTIL_SEQ_SetTask>
  return;
 8001058:	bf00      	nop
}
 800105a:	3708      	adds	r7, #8
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}

08001060 <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b082      	sub	sp, #8
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 8001068:	2002      	movs	r0, #2
 800106a:	f00f fa85 	bl	8010578 <UTIL_SEQ_SetEvt>
  return;
 800106e:	bf00      	nop
}
 8001070:	3708      	adds	r7, #8
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}

08001076 <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 8001076:	b580      	push	{r7, lr}
 8001078:	b082      	sub	sp, #8
 800107a:	af00      	add	r7, sp, #0
 800107c:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 800107e:	2002      	movs	r0, #2
 8001080:	f00f fa9a 	bl	80105b8 <UTIL_SEQ_WaitEvt>
  return;
 8001084:	bf00      	nop
}
 8001086:	3708      	adds	r7, #8
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}

0800108c <LL_EXTI_EnableIT_0_31>:
{
 800108c:	b480      	push	{r7}
 800108e:	b083      	sub	sp, #12
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8001094:	4b06      	ldr	r3, [pc, #24]	@ (80010b0 <LL_EXTI_EnableIT_0_31+0x24>)
 8001096:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 800109a:	4905      	ldr	r1, [pc, #20]	@ (80010b0 <LL_EXTI_EnableIT_0_31+0x24>)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	4313      	orrs	r3, r2
 80010a0:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 80010a4:	bf00      	nop
 80010a6:	370c      	adds	r7, #12
 80010a8:	46bd      	mov	sp, r7
 80010aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ae:	4770      	bx	lr
 80010b0:	58000800 	.word	0x58000800

080010b4 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b083      	sub	sp, #12
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 80010bc:	4b05      	ldr	r3, [pc, #20]	@ (80010d4 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80010be:	681a      	ldr	r2, [r3, #0]
 80010c0:	4904      	ldr	r1, [pc, #16]	@ (80010d4 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	4313      	orrs	r3, r2
 80010c6:	600b      	str	r3, [r1, #0]

}
 80010c8:	bf00      	nop
 80010ca:	370c      	adds	r7, #12
 80010cc:	46bd      	mov	sp, r7
 80010ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d2:	4770      	bx	lr
 80010d4:	58000800 	.word	0x58000800

080010d8 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	b083      	sub	sp, #12
 80010dc:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80010de:	4b0d      	ldr	r3, [pc, #52]	@ (8001114 <ReadRtcSsrValue+0x3c>)
 80010e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80010e2:	b29b      	uxth	r3, r3
 80010e4:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80010e6:	4b0b      	ldr	r3, [pc, #44]	@ (8001114 <ReadRtcSsrValue+0x3c>)
 80010e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80010ea:	b29b      	uxth	r3, r3
 80010ec:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 80010ee:	e005      	b.n	80010fc <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80010f4:	4b07      	ldr	r3, [pc, #28]	@ (8001114 <ReadRtcSsrValue+0x3c>)
 80010f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80010f8:	b29b      	uxth	r3, r3
 80010fa:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 80010fc:	687a      	ldr	r2, [r7, #4]
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	429a      	cmp	r2, r3
 8001102:	d1f5      	bne.n	80010f0 <ReadRtcSsrValue+0x18>
  }

  return second_read;
 8001104:	683b      	ldr	r3, [r7, #0]
}
 8001106:	4618      	mov	r0, r3
 8001108:	370c      	adds	r7, #12
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr
 8001112:	bf00      	nop
 8001114:	40002800 	.word	0x40002800

08001118 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8001118:	b480      	push	{r7}
 800111a:	b085      	sub	sp, #20
 800111c:	af00      	add	r7, sp, #0
 800111e:	4603      	mov	r3, r0
 8001120:	460a      	mov	r2, r1
 8001122:	71fb      	strb	r3, [r7, #7]
 8001124:	4613      	mov	r3, r2
 8001126:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 8001128:	79ba      	ldrb	r2, [r7, #6]
 800112a:	491d      	ldr	r1, [pc, #116]	@ (80011a0 <LinkTimerAfter+0x88>)
 800112c:	4613      	mov	r3, r2
 800112e:	005b      	lsls	r3, r3, #1
 8001130:	4413      	add	r3, r2
 8001132:	00db      	lsls	r3, r3, #3
 8001134:	440b      	add	r3, r1
 8001136:	3315      	adds	r3, #21
 8001138:	781b      	ldrb	r3, [r3, #0]
 800113a:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800113c:	7bfb      	ldrb	r3, [r7, #15]
 800113e:	2b06      	cmp	r3, #6
 8001140:	d009      	beq.n	8001156 <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 8001142:	7bfa      	ldrb	r2, [r7, #15]
 8001144:	4916      	ldr	r1, [pc, #88]	@ (80011a0 <LinkTimerAfter+0x88>)
 8001146:	4613      	mov	r3, r2
 8001148:	005b      	lsls	r3, r3, #1
 800114a:	4413      	add	r3, r2
 800114c:	00db      	lsls	r3, r3, #3
 800114e:	440b      	add	r3, r1
 8001150:	3314      	adds	r3, #20
 8001152:	79fa      	ldrb	r2, [r7, #7]
 8001154:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 8001156:	79fa      	ldrb	r2, [r7, #7]
 8001158:	4911      	ldr	r1, [pc, #68]	@ (80011a0 <LinkTimerAfter+0x88>)
 800115a:	4613      	mov	r3, r2
 800115c:	005b      	lsls	r3, r3, #1
 800115e:	4413      	add	r3, r2
 8001160:	00db      	lsls	r3, r3, #3
 8001162:	440b      	add	r3, r1
 8001164:	3315      	adds	r3, #21
 8001166:	7bfa      	ldrb	r2, [r7, #15]
 8001168:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 800116a:	79fa      	ldrb	r2, [r7, #7]
 800116c:	490c      	ldr	r1, [pc, #48]	@ (80011a0 <LinkTimerAfter+0x88>)
 800116e:	4613      	mov	r3, r2
 8001170:	005b      	lsls	r3, r3, #1
 8001172:	4413      	add	r3, r2
 8001174:	00db      	lsls	r3, r3, #3
 8001176:	440b      	add	r3, r1
 8001178:	3314      	adds	r3, #20
 800117a:	79ba      	ldrb	r2, [r7, #6]
 800117c:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 800117e:	79ba      	ldrb	r2, [r7, #6]
 8001180:	4907      	ldr	r1, [pc, #28]	@ (80011a0 <LinkTimerAfter+0x88>)
 8001182:	4613      	mov	r3, r2
 8001184:	005b      	lsls	r3, r3, #1
 8001186:	4413      	add	r3, r2
 8001188:	00db      	lsls	r3, r3, #3
 800118a:	440b      	add	r3, r1
 800118c:	3315      	adds	r3, #21
 800118e:	79fa      	ldrb	r2, [r7, #7]
 8001190:	701a      	strb	r2, [r3, #0]

  return;
 8001192:	bf00      	nop
}
 8001194:	3714      	adds	r7, #20
 8001196:	46bd      	mov	sp, r7
 8001198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119c:	4770      	bx	lr
 800119e:	bf00      	nop
 80011a0:	2000014c 	.word	0x2000014c

080011a4 <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 80011a4:	b480      	push	{r7}
 80011a6:	b085      	sub	sp, #20
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	4603      	mov	r3, r0
 80011ac:	460a      	mov	r2, r1
 80011ae:	71fb      	strb	r3, [r7, #7]
 80011b0:	4613      	mov	r3, r2
 80011b2:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 80011b4:	4b29      	ldr	r3, [pc, #164]	@ (800125c <LinkTimerBefore+0xb8>)
 80011b6:	781b      	ldrb	r3, [r3, #0]
 80011b8:	b2db      	uxtb	r3, r3
 80011ba:	79ba      	ldrb	r2, [r7, #6]
 80011bc:	429a      	cmp	r2, r3
 80011be:	d032      	beq.n	8001226 <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 80011c0:	79ba      	ldrb	r2, [r7, #6]
 80011c2:	4927      	ldr	r1, [pc, #156]	@ (8001260 <LinkTimerBefore+0xbc>)
 80011c4:	4613      	mov	r3, r2
 80011c6:	005b      	lsls	r3, r3, #1
 80011c8:	4413      	add	r3, r2
 80011ca:	00db      	lsls	r3, r3, #3
 80011cc:	440b      	add	r3, r1
 80011ce:	3314      	adds	r3, #20
 80011d0:	781b      	ldrb	r3, [r3, #0]
 80011d2:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 80011d4:	7bfa      	ldrb	r2, [r7, #15]
 80011d6:	4922      	ldr	r1, [pc, #136]	@ (8001260 <LinkTimerBefore+0xbc>)
 80011d8:	4613      	mov	r3, r2
 80011da:	005b      	lsls	r3, r3, #1
 80011dc:	4413      	add	r3, r2
 80011de:	00db      	lsls	r3, r3, #3
 80011e0:	440b      	add	r3, r1
 80011e2:	3315      	adds	r3, #21
 80011e4:	79fa      	ldrb	r2, [r7, #7]
 80011e6:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 80011e8:	79fa      	ldrb	r2, [r7, #7]
 80011ea:	491d      	ldr	r1, [pc, #116]	@ (8001260 <LinkTimerBefore+0xbc>)
 80011ec:	4613      	mov	r3, r2
 80011ee:	005b      	lsls	r3, r3, #1
 80011f0:	4413      	add	r3, r2
 80011f2:	00db      	lsls	r3, r3, #3
 80011f4:	440b      	add	r3, r1
 80011f6:	3315      	adds	r3, #21
 80011f8:	79ba      	ldrb	r2, [r7, #6]
 80011fa:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 80011fc:	79fa      	ldrb	r2, [r7, #7]
 80011fe:	4918      	ldr	r1, [pc, #96]	@ (8001260 <LinkTimerBefore+0xbc>)
 8001200:	4613      	mov	r3, r2
 8001202:	005b      	lsls	r3, r3, #1
 8001204:	4413      	add	r3, r2
 8001206:	00db      	lsls	r3, r3, #3
 8001208:	440b      	add	r3, r1
 800120a:	3314      	adds	r3, #20
 800120c:	7bfa      	ldrb	r2, [r7, #15]
 800120e:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8001210:	79ba      	ldrb	r2, [r7, #6]
 8001212:	4913      	ldr	r1, [pc, #76]	@ (8001260 <LinkTimerBefore+0xbc>)
 8001214:	4613      	mov	r3, r2
 8001216:	005b      	lsls	r3, r3, #1
 8001218:	4413      	add	r3, r2
 800121a:	00db      	lsls	r3, r3, #3
 800121c:	440b      	add	r3, r1
 800121e:	3314      	adds	r3, #20
 8001220:	79fa      	ldrb	r2, [r7, #7]
 8001222:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 8001224:	e014      	b.n	8001250 <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 8001226:	79fa      	ldrb	r2, [r7, #7]
 8001228:	490d      	ldr	r1, [pc, #52]	@ (8001260 <LinkTimerBefore+0xbc>)
 800122a:	4613      	mov	r3, r2
 800122c:	005b      	lsls	r3, r3, #1
 800122e:	4413      	add	r3, r2
 8001230:	00db      	lsls	r3, r3, #3
 8001232:	440b      	add	r3, r1
 8001234:	3315      	adds	r3, #21
 8001236:	79ba      	ldrb	r2, [r7, #6]
 8001238:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 800123a:	79ba      	ldrb	r2, [r7, #6]
 800123c:	4908      	ldr	r1, [pc, #32]	@ (8001260 <LinkTimerBefore+0xbc>)
 800123e:	4613      	mov	r3, r2
 8001240:	005b      	lsls	r3, r3, #1
 8001242:	4413      	add	r3, r2
 8001244:	00db      	lsls	r3, r3, #3
 8001246:	440b      	add	r3, r1
 8001248:	3314      	adds	r3, #20
 800124a:	79fa      	ldrb	r2, [r7, #7]
 800124c:	701a      	strb	r2, [r3, #0]
  return;
 800124e:	bf00      	nop
}
 8001250:	3714      	adds	r7, #20
 8001252:	46bd      	mov	sp, r7
 8001254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001258:	4770      	bx	lr
 800125a:	bf00      	nop
 800125c:	200001dc 	.word	0x200001dc
 8001260:	2000014c 	.word	0x2000014c

08001264 <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b084      	sub	sp, #16
 8001268:	af00      	add	r7, sp, #0
 800126a:	4603      	mov	r3, r0
 800126c:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800126e:	4b4e      	ldr	r3, [pc, #312]	@ (80013a8 <linkTimer+0x144>)
 8001270:	781b      	ldrb	r3, [r3, #0]
 8001272:	b2db      	uxtb	r3, r3
 8001274:	2b06      	cmp	r3, #6
 8001276:	d118      	bne.n	80012aa <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8001278:	4b4b      	ldr	r3, [pc, #300]	@ (80013a8 <linkTimer+0x144>)
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	b2da      	uxtb	r2, r3
 800127e:	4b4b      	ldr	r3, [pc, #300]	@ (80013ac <linkTimer+0x148>)
 8001280:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 8001282:	4a49      	ldr	r2, [pc, #292]	@ (80013a8 <linkTimer+0x144>)
 8001284:	79fb      	ldrb	r3, [r7, #7]
 8001286:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8001288:	79fa      	ldrb	r2, [r7, #7]
 800128a:	4949      	ldr	r1, [pc, #292]	@ (80013b0 <linkTimer+0x14c>)
 800128c:	4613      	mov	r3, r2
 800128e:	005b      	lsls	r3, r3, #1
 8001290:	4413      	add	r3, r2
 8001292:	00db      	lsls	r3, r3, #3
 8001294:	440b      	add	r3, r1
 8001296:	3315      	adds	r3, #21
 8001298:	2206      	movs	r2, #6
 800129a:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 800129c:	4b45      	ldr	r3, [pc, #276]	@ (80013b4 <linkTimer+0x150>)
 800129e:	f04f 32ff 	mov.w	r2, #4294967295
 80012a2:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 80012a4:	2300      	movs	r3, #0
 80012a6:	81fb      	strh	r3, [r7, #14]
 80012a8:	e078      	b.n	800139c <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 80012aa:	f000 f909 	bl	80014c0 <ReturnTimeElapsed>
 80012ae:	4603      	mov	r3, r0
 80012b0:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 80012b2:	79fa      	ldrb	r2, [r7, #7]
 80012b4:	493e      	ldr	r1, [pc, #248]	@ (80013b0 <linkTimer+0x14c>)
 80012b6:	4613      	mov	r3, r2
 80012b8:	005b      	lsls	r3, r3, #1
 80012ba:	4413      	add	r3, r2
 80012bc:	00db      	lsls	r3, r3, #3
 80012be:	440b      	add	r3, r1
 80012c0:	3308      	adds	r3, #8
 80012c2:	6819      	ldr	r1, [r3, #0]
 80012c4:	89fb      	ldrh	r3, [r7, #14]
 80012c6:	79fa      	ldrb	r2, [r7, #7]
 80012c8:	4419      	add	r1, r3
 80012ca:	4839      	ldr	r0, [pc, #228]	@ (80013b0 <linkTimer+0x14c>)
 80012cc:	4613      	mov	r3, r2
 80012ce:	005b      	lsls	r3, r3, #1
 80012d0:	4413      	add	r3, r2
 80012d2:	00db      	lsls	r3, r3, #3
 80012d4:	4403      	add	r3, r0
 80012d6:	3308      	adds	r3, #8
 80012d8:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 80012da:	79fa      	ldrb	r2, [r7, #7]
 80012dc:	4934      	ldr	r1, [pc, #208]	@ (80013b0 <linkTimer+0x14c>)
 80012de:	4613      	mov	r3, r2
 80012e0:	005b      	lsls	r3, r3, #1
 80012e2:	4413      	add	r3, r2
 80012e4:	00db      	lsls	r3, r3, #3
 80012e6:	440b      	add	r3, r1
 80012e8:	3308      	adds	r3, #8
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 80012ee:	4b2e      	ldr	r3, [pc, #184]	@ (80013a8 <linkTimer+0x144>)
 80012f0:	781b      	ldrb	r3, [r3, #0]
 80012f2:	b2db      	uxtb	r3, r3
 80012f4:	4619      	mov	r1, r3
 80012f6:	4a2e      	ldr	r2, [pc, #184]	@ (80013b0 <linkTimer+0x14c>)
 80012f8:	460b      	mov	r3, r1
 80012fa:	005b      	lsls	r3, r3, #1
 80012fc:	440b      	add	r3, r1
 80012fe:	00db      	lsls	r3, r3, #3
 8001300:	4413      	add	r3, r2
 8001302:	3308      	adds	r3, #8
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	68ba      	ldr	r2, [r7, #8]
 8001308:	429a      	cmp	r2, r3
 800130a:	d337      	bcc.n	800137c <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 800130c:	4b26      	ldr	r3, [pc, #152]	@ (80013a8 <linkTimer+0x144>)
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 8001312:	7b7a      	ldrb	r2, [r7, #13]
 8001314:	4926      	ldr	r1, [pc, #152]	@ (80013b0 <linkTimer+0x14c>)
 8001316:	4613      	mov	r3, r2
 8001318:	005b      	lsls	r3, r3, #1
 800131a:	4413      	add	r3, r2
 800131c:	00db      	lsls	r3, r3, #3
 800131e:	440b      	add	r3, r1
 8001320:	3315      	adds	r3, #21
 8001322:	781b      	ldrb	r3, [r3, #0]
 8001324:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8001326:	e013      	b.n	8001350 <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8001328:	7b7a      	ldrb	r2, [r7, #13]
 800132a:	4921      	ldr	r1, [pc, #132]	@ (80013b0 <linkTimer+0x14c>)
 800132c:	4613      	mov	r3, r2
 800132e:	005b      	lsls	r3, r3, #1
 8001330:	4413      	add	r3, r2
 8001332:	00db      	lsls	r3, r3, #3
 8001334:	440b      	add	r3, r1
 8001336:	3315      	adds	r3, #21
 8001338:	781b      	ldrb	r3, [r3, #0]
 800133a:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 800133c:	7b7a      	ldrb	r2, [r7, #13]
 800133e:	491c      	ldr	r1, [pc, #112]	@ (80013b0 <linkTimer+0x14c>)
 8001340:	4613      	mov	r3, r2
 8001342:	005b      	lsls	r3, r3, #1
 8001344:	4413      	add	r3, r2
 8001346:	00db      	lsls	r3, r3, #3
 8001348:	440b      	add	r3, r1
 800134a:	3315      	adds	r3, #21
 800134c:	781b      	ldrb	r3, [r3, #0]
 800134e:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8001350:	7b3b      	ldrb	r3, [r7, #12]
 8001352:	2b06      	cmp	r3, #6
 8001354:	d00b      	beq.n	800136e <linkTimer+0x10a>
 8001356:	7b3a      	ldrb	r2, [r7, #12]
 8001358:	4915      	ldr	r1, [pc, #84]	@ (80013b0 <linkTimer+0x14c>)
 800135a:	4613      	mov	r3, r2
 800135c:	005b      	lsls	r3, r3, #1
 800135e:	4413      	add	r3, r2
 8001360:	00db      	lsls	r3, r3, #3
 8001362:	440b      	add	r3, r1
 8001364:	3308      	adds	r3, #8
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	68ba      	ldr	r2, [r7, #8]
 800136a:	429a      	cmp	r2, r3
 800136c:	d2dc      	bcs.n	8001328 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 800136e:	7b7a      	ldrb	r2, [r7, #13]
 8001370:	79fb      	ldrb	r3, [r7, #7]
 8001372:	4611      	mov	r1, r2
 8001374:	4618      	mov	r0, r3
 8001376:	f7ff fecf 	bl	8001118 <LinkTimerAfter>
 800137a:	e00f      	b.n	800139c <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 800137c:	4b0a      	ldr	r3, [pc, #40]	@ (80013a8 <linkTimer+0x144>)
 800137e:	781b      	ldrb	r3, [r3, #0]
 8001380:	b2da      	uxtb	r2, r3
 8001382:	79fb      	ldrb	r3, [r7, #7]
 8001384:	4611      	mov	r1, r2
 8001386:	4618      	mov	r0, r3
 8001388:	f7ff ff0c 	bl	80011a4 <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 800138c:	4b06      	ldr	r3, [pc, #24]	@ (80013a8 <linkTimer+0x144>)
 800138e:	781b      	ldrb	r3, [r3, #0]
 8001390:	b2da      	uxtb	r2, r3
 8001392:	4b06      	ldr	r3, [pc, #24]	@ (80013ac <linkTimer+0x148>)
 8001394:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 8001396:	4a04      	ldr	r2, [pc, #16]	@ (80013a8 <linkTimer+0x144>)
 8001398:	79fb      	ldrb	r3, [r7, #7]
 800139a:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 800139c:	89fb      	ldrh	r3, [r7, #14]
}
 800139e:	4618      	mov	r0, r3
 80013a0:	3710      	adds	r7, #16
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	200001dc 	.word	0x200001dc
 80013ac:	200001dd 	.word	0x200001dd
 80013b0:	2000014c 	.word	0x2000014c
 80013b4:	200001e0 	.word	0x200001e0

080013b8 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b085      	sub	sp, #20
 80013bc:	af00      	add	r7, sp, #0
 80013be:	4603      	mov	r3, r0
 80013c0:	460a      	mov	r2, r1
 80013c2:	71fb      	strb	r3, [r7, #7]
 80013c4:	4613      	mov	r3, r2
 80013c6:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 80013c8:	4b39      	ldr	r3, [pc, #228]	@ (80014b0 <UnlinkTimer+0xf8>)
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	b2db      	uxtb	r3, r3
 80013ce:	79fa      	ldrb	r2, [r7, #7]
 80013d0:	429a      	cmp	r2, r3
 80013d2:	d111      	bne.n	80013f8 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 80013d4:	4b36      	ldr	r3, [pc, #216]	@ (80014b0 <UnlinkTimer+0xf8>)
 80013d6:	781b      	ldrb	r3, [r3, #0]
 80013d8:	b2da      	uxtb	r2, r3
 80013da:	4b36      	ldr	r3, [pc, #216]	@ (80014b4 <UnlinkTimer+0xfc>)
 80013dc:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 80013de:	79fa      	ldrb	r2, [r7, #7]
 80013e0:	4935      	ldr	r1, [pc, #212]	@ (80014b8 <UnlinkTimer+0x100>)
 80013e2:	4613      	mov	r3, r2
 80013e4:	005b      	lsls	r3, r3, #1
 80013e6:	4413      	add	r3, r2
 80013e8:	00db      	lsls	r3, r3, #3
 80013ea:	440b      	add	r3, r1
 80013ec:	3315      	adds	r3, #21
 80013ee:	781b      	ldrb	r3, [r3, #0]
 80013f0:	b2da      	uxtb	r2, r3
 80013f2:	4b2f      	ldr	r3, [pc, #188]	@ (80014b0 <UnlinkTimer+0xf8>)
 80013f4:	701a      	strb	r2, [r3, #0]
 80013f6:	e03e      	b.n	8001476 <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 80013f8:	79fa      	ldrb	r2, [r7, #7]
 80013fa:	492f      	ldr	r1, [pc, #188]	@ (80014b8 <UnlinkTimer+0x100>)
 80013fc:	4613      	mov	r3, r2
 80013fe:	005b      	lsls	r3, r3, #1
 8001400:	4413      	add	r3, r2
 8001402:	00db      	lsls	r3, r3, #3
 8001404:	440b      	add	r3, r1
 8001406:	3314      	adds	r3, #20
 8001408:	781b      	ldrb	r3, [r3, #0]
 800140a:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 800140c:	79fa      	ldrb	r2, [r7, #7]
 800140e:	492a      	ldr	r1, [pc, #168]	@ (80014b8 <UnlinkTimer+0x100>)
 8001410:	4613      	mov	r3, r2
 8001412:	005b      	lsls	r3, r3, #1
 8001414:	4413      	add	r3, r2
 8001416:	00db      	lsls	r3, r3, #3
 8001418:	440b      	add	r3, r1
 800141a:	3315      	adds	r3, #21
 800141c:	781b      	ldrb	r3, [r3, #0]
 800141e:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8001420:	79f9      	ldrb	r1, [r7, #7]
 8001422:	7bfa      	ldrb	r2, [r7, #15]
 8001424:	4824      	ldr	r0, [pc, #144]	@ (80014b8 <UnlinkTimer+0x100>)
 8001426:	460b      	mov	r3, r1
 8001428:	005b      	lsls	r3, r3, #1
 800142a:	440b      	add	r3, r1
 800142c:	00db      	lsls	r3, r3, #3
 800142e:	4403      	add	r3, r0
 8001430:	3315      	adds	r3, #21
 8001432:	781b      	ldrb	r3, [r3, #0]
 8001434:	b2d8      	uxtb	r0, r3
 8001436:	4920      	ldr	r1, [pc, #128]	@ (80014b8 <UnlinkTimer+0x100>)
 8001438:	4613      	mov	r3, r2
 800143a:	005b      	lsls	r3, r3, #1
 800143c:	4413      	add	r3, r2
 800143e:	00db      	lsls	r3, r3, #3
 8001440:	440b      	add	r3, r1
 8001442:	3315      	adds	r3, #21
 8001444:	4602      	mov	r2, r0
 8001446:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001448:	7bbb      	ldrb	r3, [r7, #14]
 800144a:	2b06      	cmp	r3, #6
 800144c:	d013      	beq.n	8001476 <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 800144e:	79f9      	ldrb	r1, [r7, #7]
 8001450:	7bba      	ldrb	r2, [r7, #14]
 8001452:	4819      	ldr	r0, [pc, #100]	@ (80014b8 <UnlinkTimer+0x100>)
 8001454:	460b      	mov	r3, r1
 8001456:	005b      	lsls	r3, r3, #1
 8001458:	440b      	add	r3, r1
 800145a:	00db      	lsls	r3, r3, #3
 800145c:	4403      	add	r3, r0
 800145e:	3314      	adds	r3, #20
 8001460:	781b      	ldrb	r3, [r3, #0]
 8001462:	b2d8      	uxtb	r0, r3
 8001464:	4914      	ldr	r1, [pc, #80]	@ (80014b8 <UnlinkTimer+0x100>)
 8001466:	4613      	mov	r3, r2
 8001468:	005b      	lsls	r3, r3, #1
 800146a:	4413      	add	r3, r2
 800146c:	00db      	lsls	r3, r3, #3
 800146e:	440b      	add	r3, r1
 8001470:	3314      	adds	r3, #20
 8001472:	4602      	mov	r2, r0
 8001474:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 8001476:	79fa      	ldrb	r2, [r7, #7]
 8001478:	490f      	ldr	r1, [pc, #60]	@ (80014b8 <UnlinkTimer+0x100>)
 800147a:	4613      	mov	r3, r2
 800147c:	005b      	lsls	r3, r3, #1
 800147e:	4413      	add	r3, r2
 8001480:	00db      	lsls	r3, r3, #3
 8001482:	440b      	add	r3, r1
 8001484:	330c      	adds	r3, #12
 8001486:	2201      	movs	r2, #1
 8001488:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 800148a:	4b09      	ldr	r3, [pc, #36]	@ (80014b0 <UnlinkTimer+0xf8>)
 800148c:	781b      	ldrb	r3, [r3, #0]
 800148e:	b2db      	uxtb	r3, r3
 8001490:	2b06      	cmp	r3, #6
 8001492:	d107      	bne.n	80014a4 <UnlinkTimer+0xec>
 8001494:	79bb      	ldrb	r3, [r7, #6]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d104      	bne.n	80014a4 <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 800149a:	4b08      	ldr	r3, [pc, #32]	@ (80014bc <UnlinkTimer+0x104>)
 800149c:	f04f 32ff 	mov.w	r2, #4294967295
 80014a0:	601a      	str	r2, [r3, #0]
  }

  return;
 80014a2:	bf00      	nop
 80014a4:	bf00      	nop
}
 80014a6:	3714      	adds	r7, #20
 80014a8:	46bd      	mov	sp, r7
 80014aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ae:	4770      	bx	lr
 80014b0:	200001dc 	.word	0x200001dc
 80014b4:	200001dd 	.word	0x200001dd
 80014b8:	2000014c 	.word	0x2000014c
 80014bc:	200001e0 	.word	0x200001e0

080014c0 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b082      	sub	sp, #8
 80014c4:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 80014c6:	4b1a      	ldr	r3, [pc, #104]	@ (8001530 <ReturnTimeElapsed+0x70>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014ce:	d026      	beq.n	800151e <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 80014d0:	f7ff fe02 	bl	80010d8 <ReadRtcSsrValue>
 80014d4:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 80014d6:	4b16      	ldr	r3, [pc, #88]	@ (8001530 <ReturnTimeElapsed+0x70>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	687a      	ldr	r2, [r7, #4]
 80014dc:	429a      	cmp	r2, r3
 80014de:	d805      	bhi.n	80014ec <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 80014e0:	4b13      	ldr	r3, [pc, #76]	@ (8001530 <ReturnTimeElapsed+0x70>)
 80014e2:	681a      	ldr	r2, [r3, #0]
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	1ad3      	subs	r3, r2, r3
 80014e8:	607b      	str	r3, [r7, #4]
 80014ea:	e00a      	b.n	8001502 <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 80014ec:	4b11      	ldr	r3, [pc, #68]	@ (8001534 <ReturnTimeElapsed+0x74>)
 80014ee:	881b      	ldrh	r3, [r3, #0]
 80014f0:	461a      	mov	r2, r3
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	1ad3      	subs	r3, r2, r3
 80014f6:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 80014f8:	4b0d      	ldr	r3, [pc, #52]	@ (8001530 <ReturnTimeElapsed+0x70>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	683a      	ldr	r2, [r7, #0]
 80014fe:	4413      	add	r3, r2
 8001500:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 8001502:	4b0d      	ldr	r3, [pc, #52]	@ (8001538 <ReturnTimeElapsed+0x78>)
 8001504:	781b      	ldrb	r3, [r3, #0]
 8001506:	461a      	mov	r2, r3
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	fb02 f303 	mul.w	r3, r2, r3
 800150e:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8001510:	4b0a      	ldr	r3, [pc, #40]	@ (800153c <ReturnTimeElapsed+0x7c>)
 8001512:	781b      	ldrb	r3, [r3, #0]
 8001514:	461a      	mov	r2, r3
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	40d3      	lsrs	r3, r2
 800151a:	607b      	str	r3, [r7, #4]
 800151c:	e001      	b.n	8001522 <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 800151e:	2300      	movs	r3, #0
 8001520:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	b29b      	uxth	r3, r3
}
 8001526:	4618      	mov	r0, r3
 8001528:	3708      	adds	r7, #8
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	200001e0 	.word	0x200001e0
 8001534:	200001e8 	.word	0x200001e8
 8001538:	200001e6 	.word	0x200001e6
 800153c:	200001e5 	.word	0x200001e5

08001540 <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b082      	sub	sp, #8
 8001544:	af00      	add	r7, sp, #0
 8001546:	4603      	mov	r3, r0
 8001548:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
   */

  if(Value == 0)
 800154a:	88fb      	ldrh	r3, [r7, #6]
 800154c:	2b00      	cmp	r3, #0
 800154e:	d108      	bne.n	8001562 <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8001550:	f7ff fdc2 	bl	80010d8 <ReadRtcSsrValue>
 8001554:	4603      	mov	r3, r0
 8001556:	4a21      	ldr	r2, [pc, #132]	@ (80015dc <RestartWakeupCounter+0x9c>)
 8001558:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 800155a:	2003      	movs	r0, #3
 800155c:	f006 fc73 	bl	8007e46 <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8001560:	e039      	b.n	80015d6 <RestartWakeupCounter+0x96>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 8001562:	88fb      	ldrh	r3, [r7, #6]
 8001564:	2b01      	cmp	r3, #1
 8001566:	d803      	bhi.n	8001570 <RestartWakeupCounter+0x30>
 8001568:	4b1d      	ldr	r3, [pc, #116]	@ (80015e0 <RestartWakeupCounter+0xa0>)
 800156a:	781b      	ldrb	r3, [r3, #0]
 800156c:	2b01      	cmp	r3, #1
 800156e:	d002      	beq.n	8001576 <RestartWakeupCounter+0x36>
      Value -= 1;
 8001570:	88fb      	ldrh	r3, [r7, #6]
 8001572:	3b01      	subs	r3, #1
 8001574:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8001576:	bf00      	nop
 8001578:	4b1a      	ldr	r3, [pc, #104]	@ (80015e4 <RestartWakeupCounter+0xa4>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	68db      	ldr	r3, [r3, #12]
 800157e:	f003 0304 	and.w	r3, r3, #4
 8001582:	2b00      	cmp	r3, #0
 8001584:	d0f8      	beq.n	8001578 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001586:	4b17      	ldr	r3, [pc, #92]	@ (80015e4 <RestartWakeupCounter+0xa4>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	68db      	ldr	r3, [r3, #12]
 800158c:	b2da      	uxtb	r2, r3
 800158e:	4b15      	ldr	r3, [pc, #84]	@ (80015e4 <RestartWakeupCounter+0xa4>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8001596:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001598:	4b13      	ldr	r3, [pc, #76]	@ (80015e8 <RestartWakeupCounter+0xa8>)
 800159a:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800159e:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 80015a0:	2003      	movs	r0, #3
 80015a2:	f006 fc5e 	bl	8007e62 <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 80015a6:	4b11      	ldr	r3, [pc, #68]	@ (80015ec <RestartWakeupCounter+0xac>)
 80015a8:	695b      	ldr	r3, [r3, #20]
 80015aa:	0c1b      	lsrs	r3, r3, #16
 80015ac:	041b      	lsls	r3, r3, #16
 80015ae:	88fa      	ldrh	r2, [r7, #6]
 80015b0:	490e      	ldr	r1, [pc, #56]	@ (80015ec <RestartWakeupCounter+0xac>)
 80015b2:	4313      	orrs	r3, r2
 80015b4:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 80015b6:	f7ff fd8f 	bl	80010d8 <ReadRtcSsrValue>
 80015ba:	4603      	mov	r3, r0
 80015bc:	4a07      	ldr	r2, [pc, #28]	@ (80015dc <RestartWakeupCounter+0x9c>)
 80015be:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */
 80015c0:	4b08      	ldr	r3, [pc, #32]	@ (80015e4 <RestartWakeupCounter+0xa4>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	689a      	ldr	r2, [r3, #8]
 80015c6:	4b07      	ldr	r3, [pc, #28]	@ (80015e4 <RestartWakeupCounter+0xa4>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80015ce:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 80015d0:	f3af 8000 	nop.w
  return ;
 80015d4:	bf00      	nop
}
 80015d6:	3708      	adds	r7, #8
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	200001e0 	.word	0x200001e0
 80015e0:	200001e5 	.word	0x200001e5
 80015e4:	200002e4 	.word	0x200002e4
 80015e8:	58000800 	.word	0x58000800
 80015ec:	40002800 	.word	0x40002800

080015f0 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b084      	sub	sp, #16
 80015f4:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 80015f6:	4b45      	ldr	r3, [pc, #276]	@ (800170c <RescheduleTimerList+0x11c>)
 80015f8:	689b      	ldr	r3, [r3, #8]
 80015fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80015fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001602:	d107      	bne.n	8001614 <RescheduleTimerList+0x24>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8001604:	bf00      	nop
 8001606:	4b42      	ldr	r3, [pc, #264]	@ (8001710 <RescheduleTimerList+0x120>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	68db      	ldr	r3, [r3, #12]
 800160c:	f003 0304 	and.w	r3, r3, #4
 8001610:	2b00      	cmp	r3, #0
 8001612:	d1f8      	bne.n	8001606 <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8001614:	4b3e      	ldr	r3, [pc, #248]	@ (8001710 <RescheduleTimerList+0x120>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	689a      	ldr	r2, [r3, #8]
 800161a:	4b3d      	ldr	r3, [pc, #244]	@ (8001710 <RescheduleTimerList+0x120>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001622:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 8001624:	4b3b      	ldr	r3, [pc, #236]	@ (8001714 <RescheduleTimerList+0x124>)
 8001626:	781b      	ldrb	r3, [r3, #0]
 8001628:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 800162a:	7bfa      	ldrb	r2, [r7, #15]
 800162c:	493a      	ldr	r1, [pc, #232]	@ (8001718 <RescheduleTimerList+0x128>)
 800162e:	4613      	mov	r3, r2
 8001630:	005b      	lsls	r3, r3, #1
 8001632:	4413      	add	r3, r2
 8001634:	00db      	lsls	r3, r3, #3
 8001636:	440b      	add	r3, r1
 8001638:	3308      	adds	r3, #8
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 800163e:	f7ff ff3f 	bl	80014c0 <ReturnTimeElapsed>
 8001642:	4603      	mov	r3, r0
 8001644:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 8001646:	88fb      	ldrh	r3, [r7, #6]
 8001648:	68ba      	ldr	r2, [r7, #8]
 800164a:	429a      	cmp	r2, r3
 800164c:	d205      	bcs.n	800165a <RescheduleTimerList+0x6a>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 800164e:	2300      	movs	r3, #0
 8001650:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001652:	4b32      	ldr	r3, [pc, #200]	@ (800171c <RescheduleTimerList+0x12c>)
 8001654:	2201      	movs	r2, #1
 8001656:	701a      	strb	r2, [r3, #0]
 8001658:	e04d      	b.n	80016f6 <RescheduleTimerList+0x106>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 800165a:	88fb      	ldrh	r3, [r7, #6]
 800165c:	4a30      	ldr	r2, [pc, #192]	@ (8001720 <RescheduleTimerList+0x130>)
 800165e:	8812      	ldrh	r2, [r2, #0]
 8001660:	b292      	uxth	r2, r2
 8001662:	4413      	add	r3, r2
 8001664:	461a      	mov	r2, r3
 8001666:	68bb      	ldr	r3, [r7, #8]
 8001668:	4293      	cmp	r3, r2
 800166a:	d906      	bls.n	800167a <RescheduleTimerList+0x8a>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 800166c:	4b2c      	ldr	r3, [pc, #176]	@ (8001720 <RescheduleTimerList+0x130>)
 800166e:	881b      	ldrh	r3, [r3, #0]
 8001670:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 8001672:	4b2a      	ldr	r3, [pc, #168]	@ (800171c <RescheduleTimerList+0x12c>)
 8001674:	2200      	movs	r2, #0
 8001676:	701a      	strb	r2, [r3, #0]
 8001678:	e03d      	b.n	80016f6 <RescheduleTimerList+0x106>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 800167a:	68bb      	ldr	r3, [r7, #8]
 800167c:	b29a      	uxth	r2, r3
 800167e:	88fb      	ldrh	r3, [r7, #6]
 8001680:	1ad3      	subs	r3, r2, r3
 8001682:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001684:	4b25      	ldr	r3, [pc, #148]	@ (800171c <RescheduleTimerList+0x12c>)
 8001686:	2201      	movs	r2, #1
 8001688:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800168a:	e034      	b.n	80016f6 <RescheduleTimerList+0x106>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 800168c:	7bfa      	ldrb	r2, [r7, #15]
 800168e:	4922      	ldr	r1, [pc, #136]	@ (8001718 <RescheduleTimerList+0x128>)
 8001690:	4613      	mov	r3, r2
 8001692:	005b      	lsls	r3, r3, #1
 8001694:	4413      	add	r3, r2
 8001696:	00db      	lsls	r3, r3, #3
 8001698:	440b      	add	r3, r1
 800169a:	3308      	adds	r3, #8
 800169c:	681a      	ldr	r2, [r3, #0]
 800169e:	88fb      	ldrh	r3, [r7, #6]
 80016a0:	429a      	cmp	r2, r3
 80016a2:	d20a      	bcs.n	80016ba <RescheduleTimerList+0xca>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 80016a4:	7bfa      	ldrb	r2, [r7, #15]
 80016a6:	491c      	ldr	r1, [pc, #112]	@ (8001718 <RescheduleTimerList+0x128>)
 80016a8:	4613      	mov	r3, r2
 80016aa:	005b      	lsls	r3, r3, #1
 80016ac:	4413      	add	r3, r2
 80016ae:	00db      	lsls	r3, r3, #3
 80016b0:	440b      	add	r3, r1
 80016b2:	3308      	adds	r3, #8
 80016b4:	2200      	movs	r2, #0
 80016b6:	601a      	str	r2, [r3, #0]
 80016b8:	e013      	b.n	80016e2 <RescheduleTimerList+0xf2>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 80016ba:	7bfa      	ldrb	r2, [r7, #15]
 80016bc:	4916      	ldr	r1, [pc, #88]	@ (8001718 <RescheduleTimerList+0x128>)
 80016be:	4613      	mov	r3, r2
 80016c0:	005b      	lsls	r3, r3, #1
 80016c2:	4413      	add	r3, r2
 80016c4:	00db      	lsls	r3, r3, #3
 80016c6:	440b      	add	r3, r1
 80016c8:	3308      	adds	r3, #8
 80016ca:	6819      	ldr	r1, [r3, #0]
 80016cc:	88fb      	ldrh	r3, [r7, #6]
 80016ce:	7bfa      	ldrb	r2, [r7, #15]
 80016d0:	1ac9      	subs	r1, r1, r3
 80016d2:	4811      	ldr	r0, [pc, #68]	@ (8001718 <RescheduleTimerList+0x128>)
 80016d4:	4613      	mov	r3, r2
 80016d6:	005b      	lsls	r3, r3, #1
 80016d8:	4413      	add	r3, r2
 80016da:	00db      	lsls	r3, r3, #3
 80016dc:	4403      	add	r3, r0
 80016de:	3308      	adds	r3, #8
 80016e0:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 80016e2:	7bfa      	ldrb	r2, [r7, #15]
 80016e4:	490c      	ldr	r1, [pc, #48]	@ (8001718 <RescheduleTimerList+0x128>)
 80016e6:	4613      	mov	r3, r2
 80016e8:	005b      	lsls	r3, r3, #1
 80016ea:	4413      	add	r3, r2
 80016ec:	00db      	lsls	r3, r3, #3
 80016ee:	440b      	add	r3, r1
 80016f0:	3315      	adds	r3, #21
 80016f2:	781b      	ldrb	r3, [r3, #0]
 80016f4:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80016f6:	7bfb      	ldrb	r3, [r7, #15]
 80016f8:	2b06      	cmp	r3, #6
 80016fa:	d1c7      	bne.n	800168c <RescheduleTimerList+0x9c>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 80016fc:	89bb      	ldrh	r3, [r7, #12]
 80016fe:	4618      	mov	r0, r3
 8001700:	f7ff ff1e 	bl	8001540 <RestartWakeupCounter>

  return ;
 8001704:	bf00      	nop
}
 8001706:	3710      	adds	r7, #16
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}
 800170c:	40002800 	.word	0x40002800
 8001710:	200002e4 	.word	0x200002e4
 8001714:	200001dc 	.word	0x200001dc
 8001718:	2000014c 	.word	0x2000014c
 800171c:	200001e4 	.word	0x200001e4
 8001720:	200001ea 	.word	0x200001ea

08001724 <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b08a      	sub	sp, #40	@ 0x28
 8001728:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800172a:	f3ef 8310 	mrs	r3, PRIMASK
 800172e:	617b      	str	r3, [r7, #20]
  return(result);
 8001730:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001732:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8001734:	b672      	cpsid	i
}
 8001736:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001738:	4b59      	ldr	r3, [pc, #356]	@ (80018a0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	22ca      	movs	r2, #202	@ 0xca
 800173e:	625a      	str	r2, [r3, #36]	@ 0x24
 8001740:	4b57      	ldr	r3, [pc, #348]	@ (80018a0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	2253      	movs	r2, #83	@ 0x53
 8001746:	625a      	str	r2, [r3, #36]	@ 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
 8001748:	4b55      	ldr	r3, [pc, #340]	@ (80018a0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	689a      	ldr	r2, [r3, #8]
 800174e:	4b54      	ldr	r3, [pc, #336]	@ (80018a0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001756:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 8001758:	4b52      	ldr	r3, [pc, #328]	@ (80018a4 <HW_TS_RTC_Wakeup_Handler+0x180>)
 800175a:	781b      	ldrb	r3, [r3, #0]
 800175c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 8001760:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8001764:	4950      	ldr	r1, [pc, #320]	@ (80018a8 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001766:	4613      	mov	r3, r2
 8001768:	005b      	lsls	r3, r3, #1
 800176a:	4413      	add	r3, r2
 800176c:	00db      	lsls	r3, r3, #3
 800176e:	440b      	add	r3, r1
 8001770:	330c      	adds	r3, #12
 8001772:	781b      	ldrb	r3, [r3, #0]
 8001774:	b2db      	uxtb	r3, r3
 8001776:	2b02      	cmp	r3, #2
 8001778:	d16e      	bne.n	8001858 <HW_TS_RTC_Wakeup_Handler+0x134>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 800177a:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800177e:	494a      	ldr	r1, [pc, #296]	@ (80018a8 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001780:	4613      	mov	r3, r2
 8001782:	005b      	lsls	r3, r3, #1
 8001784:	4413      	add	r3, r2
 8001786:	00db      	lsls	r3, r3, #3
 8001788:	440b      	add	r3, r1
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 800178e:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8001792:	4945      	ldr	r1, [pc, #276]	@ (80018a8 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001794:	4613      	mov	r3, r2
 8001796:	005b      	lsls	r3, r3, #1
 8001798:	4413      	add	r3, r2
 800179a:	00db      	lsls	r3, r3, #3
 800179c:	440b      	add	r3, r1
 800179e:	3310      	adds	r3, #16
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 80017a4:	4b41      	ldr	r3, [pc, #260]	@ (80018ac <HW_TS_RTC_Wakeup_Handler+0x188>)
 80017a6:	781b      	ldrb	r3, [r3, #0]
 80017a8:	b2db      	uxtb	r3, r3
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d04c      	beq.n	8001848 <HW_TS_RTC_Wakeup_Handler+0x124>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 80017ae:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 80017b2:	493d      	ldr	r1, [pc, #244]	@ (80018a8 <HW_TS_RTC_Wakeup_Handler+0x184>)
 80017b4:	4613      	mov	r3, r2
 80017b6:	005b      	lsls	r3, r3, #1
 80017b8:	4413      	add	r3, r2
 80017ba:	00db      	lsls	r3, r3, #3
 80017bc:	440b      	add	r3, r1
 80017be:	330d      	adds	r3, #13
 80017c0:	781b      	ldrb	r3, [r3, #0]
 80017c2:	b2db      	uxtb	r3, r3
 80017c4:	2b01      	cmp	r3, #1
 80017c6:	d124      	bne.n	8001812 <HW_TS_RTC_Wakeup_Handler+0xee>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 80017c8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80017cc:	2101      	movs	r1, #1
 80017ce:	4618      	mov	r0, r3
 80017d0:	f7ff fdf2 	bl	80013b8 <UnlinkTimer>
 80017d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017d6:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80017d8:	693b      	ldr	r3, [r7, #16]
 80017da:	f383 8810 	msr	PRIMASK, r3
}
 80017de:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 80017e0:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 80017e4:	4930      	ldr	r1, [pc, #192]	@ (80018a8 <HW_TS_RTC_Wakeup_Handler+0x184>)
 80017e6:	4613      	mov	r3, r2
 80017e8:	005b      	lsls	r3, r3, #1
 80017ea:	4413      	add	r3, r2
 80017ec:	00db      	lsls	r3, r3, #3
 80017ee:	440b      	add	r3, r1
 80017f0:	3304      	adds	r3, #4
 80017f2:	681a      	ldr	r2, [r3, #0]
 80017f4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80017f8:	4611      	mov	r1, r2
 80017fa:	4618      	mov	r0, r3
 80017fc:	f000 f9b8 	bl	8001b70 <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001800:	4b27      	ldr	r3, [pc, #156]	@ (80018a0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	22ca      	movs	r2, #202	@ 0xca
 8001806:	625a      	str	r2, [r3, #36]	@ 0x24
 8001808:	4b25      	ldr	r3, [pc, #148]	@ (80018a0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	2253      	movs	r2, #83	@ 0x53
 800180e:	625a      	str	r2, [r3, #36]	@ 0x24
 8001810:	e012      	b.n	8001838 <HW_TS_RTC_Wakeup_Handler+0x114>
 8001812:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001814:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	f383 8810 	msr	PRIMASK, r3
}
 800181c:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 800181e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001822:	4618      	mov	r0, r3
 8001824:	f000 f920 	bl	8001a68 <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001828:	4b1d      	ldr	r3, [pc, #116]	@ (80018a0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	22ca      	movs	r2, #202	@ 0xca
 800182e:	625a      	str	r2, [r3, #36]	@ 0x24
 8001830:	4b1b      	ldr	r3, [pc, #108]	@ (80018a0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	2253      	movs	r2, #83	@ 0x53
 8001836:	625a      	str	r2, [r3, #36]	@ 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 8001838:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800183c:	69fa      	ldr	r2, [r7, #28]
 800183e:	4619      	mov	r1, r3
 8001840:	69b8      	ldr	r0, [r7, #24]
 8001842:	f000 fa1b 	bl	8001c7c <HW_TS_RTC_Int_AppNot>
 8001846:	e022      	b.n	800188e <HW_TS_RTC_Wakeup_Handler+0x16a>
    }
    else
    {
      RescheduleTimerList();
 8001848:	f7ff fed2 	bl	80015f0 <RescheduleTimerList>
 800184c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800184e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001850:	68bb      	ldr	r3, [r7, #8]
 8001852:	f383 8810 	msr	PRIMASK, r3
}
 8001856:	e01a      	b.n	800188e <HW_TS_RTC_Wakeup_Handler+0x16a>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8001858:	bf00      	nop
 800185a:	4b11      	ldr	r3, [pc, #68]	@ (80018a0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	68db      	ldr	r3, [r3, #12]
 8001860:	f003 0304 	and.w	r3, r3, #4
 8001864:	2b00      	cmp	r3, #0
 8001866:	d0f8      	beq.n	800185a <HW_TS_RTC_Wakeup_Handler+0x136>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001868:	4b0d      	ldr	r3, [pc, #52]	@ (80018a0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	68db      	ldr	r3, [r3, #12]
 800186e:	b2da      	uxtb	r2, r3
 8001870:	4b0b      	ldr	r3, [pc, #44]	@ (80018a0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8001878:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 800187a:	4b0d      	ldr	r3, [pc, #52]	@ (80018b0 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 800187c:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001880:	60da      	str	r2, [r3, #12]
 8001882:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001884:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	f383 8810 	msr	PRIMASK, r3
}
 800188c:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 800188e:	4b04      	ldr	r3, [pc, #16]	@ (80018a0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	22ff      	movs	r2, #255	@ 0xff
 8001894:	625a      	str	r2, [r3, #36]	@ 0x24

  return;
 8001896:	bf00      	nop
}
 8001898:	3728      	adds	r7, #40	@ 0x28
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	200002e4 	.word	0x200002e4
 80018a4:	200001dc 	.word	0x200001dc
 80018a8:	2000014c 	.word	0x2000014c
 80018ac:	200001e4 	.word	0x200001e4
 80018b0:	58000800 	.word	0x58000800

080018b4 <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *phrtc)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b088      	sub	sp, #32
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	4603      	mov	r3, r0
 80018bc:	6039      	str	r1, [r7, #0]
 80018be:	71fb      	strb	r3, [r7, #7]
  uint8_t loop;
  uint32_t localmaxwakeuptimersetup;

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80018c0:	4b5e      	ldr	r3, [pc, #376]	@ (8001a3c <HW_TS_Init+0x188>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	22ca      	movs	r2, #202	@ 0xca
 80018c6:	625a      	str	r2, [r3, #36]	@ 0x24
 80018c8:	4b5c      	ldr	r3, [pc, #368]	@ (8001a3c <HW_TS_Init+0x188>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	2253      	movs	r2, #83	@ 0x53
 80018ce:	625a      	str	r2, [r3, #36]	@ 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80018d0:	4b5b      	ldr	r3, [pc, #364]	@ (8001a40 <HW_TS_Init+0x18c>)
 80018d2:	689b      	ldr	r3, [r3, #8]
 80018d4:	4a5a      	ldr	r2, [pc, #360]	@ (8001a40 <HW_TS_Init+0x18c>)
 80018d6:	f043 0320 	orr.w	r3, r3, #32
 80018da:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 80018dc:	4b58      	ldr	r3, [pc, #352]	@ (8001a40 <HW_TS_Init+0x18c>)
 80018de:	689b      	ldr	r3, [r3, #8]
 80018e0:	b2db      	uxtb	r3, r3
 80018e2:	f003 0307 	and.w	r3, r3, #7
 80018e6:	b2db      	uxtb	r3, r3
 80018e8:	f1c3 0304 	rsb	r3, r3, #4
 80018ec:	b2da      	uxtb	r2, r3
 80018ee:	4b55      	ldr	r3, [pc, #340]	@ (8001a44 <HW_TS_Init+0x190>)
 80018f0:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 80018f2:	4b53      	ldr	r3, [pc, #332]	@ (8001a40 <HW_TS_Init+0x18c>)
 80018f4:	691b      	ldr	r3, [r3, #16]
 80018f6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80018fa:	f44f 02fe 	mov.w	r2, #8323072	@ 0x7f0000
 80018fe:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001900:	693a      	ldr	r2, [r7, #16]
 8001902:	fa92 f2a2 	rbit	r2, r2
 8001906:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001908:	68fa      	ldr	r2, [r7, #12]
 800190a:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800190c:	697a      	ldr	r2, [r7, #20]
 800190e:	2a00      	cmp	r2, #0
 8001910:	d101      	bne.n	8001916 <HW_TS_Init+0x62>
  {
    return 32U;
 8001912:	2220      	movs	r2, #32
 8001914:	e003      	b.n	800191e <HW_TS_Init+0x6a>
  }
  return __builtin_clz(value);
 8001916:	697a      	ldr	r2, [r7, #20]
 8001918:	fab2 f282 	clz	r2, r2
 800191c:	b2d2      	uxtb	r2, r2
 800191e:	40d3      	lsrs	r3, r2
 8001920:	b2db      	uxtb	r3, r3
 8001922:	3301      	adds	r3, #1
 8001924:	b2da      	uxtb	r2, r3
 8001926:	4b48      	ldr	r3, [pc, #288]	@ (8001a48 <HW_TS_Init+0x194>)
 8001928:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 800192a:	4b45      	ldr	r3, [pc, #276]	@ (8001a40 <HW_TS_Init+0x18c>)
 800192c:	691b      	ldr	r3, [r3, #16]
 800192e:	b29b      	uxth	r3, r3
 8001930:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001934:	b29b      	uxth	r3, r3
 8001936:	3301      	adds	r3, #1
 8001938:	b29a      	uxth	r2, r3
 800193a:	4b44      	ldr	r3, [pc, #272]	@ (8001a4c <HW_TS_Init+0x198>)
 800193c:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 800193e:	4b43      	ldr	r3, [pc, #268]	@ (8001a4c <HW_TS_Init+0x198>)
 8001940:	881b      	ldrh	r3, [r3, #0]
 8001942:	3b01      	subs	r3, #1
 8001944:	4a40      	ldr	r2, [pc, #256]	@ (8001a48 <HW_TS_Init+0x194>)
 8001946:	7812      	ldrb	r2, [r2, #0]
 8001948:	fb02 f303 	mul.w	r3, r2, r3
 800194c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001950:	4a3c      	ldr	r2, [pc, #240]	@ (8001a44 <HW_TS_Init+0x190>)
 8001952:	7812      	ldrb	r2, [r2, #0]
 8001954:	40d3      	lsrs	r3, r2
 8001956:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 8001958:	69bb      	ldr	r3, [r7, #24]
 800195a:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800195e:	4293      	cmp	r3, r2
 8001960:	d904      	bls.n	800196c <HW_TS_Init+0xb8>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 8001962:	4b3b      	ldr	r3, [pc, #236]	@ (8001a50 <HW_TS_Init+0x19c>)
 8001964:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001968:	801a      	strh	r2, [r3, #0]
 800196a:	e003      	b.n	8001974 <HW_TS_Init+0xc0>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 800196c:	69bb      	ldr	r3, [r7, #24]
 800196e:	b29a      	uxth	r2, r3
 8001970:	4b37      	ldr	r3, [pc, #220]	@ (8001a50 <HW_TS_Init+0x19c>)
 8001972:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8001974:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8001978:	f7ff fb9c 	bl	80010b4 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 800197c:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8001980:	f7ff fb84 	bl	800108c <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 8001984:	79fb      	ldrb	r3, [r7, #7]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d13d      	bne.n	8001a06 <HW_TS_Init+0x152>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 800198a:	4b32      	ldr	r3, [pc, #200]	@ (8001a54 <HW_TS_Init+0x1a0>)
 800198c:	2201      	movs	r2, #1
 800198e:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001990:	4b31      	ldr	r3, [pc, #196]	@ (8001a58 <HW_TS_Init+0x1a4>)
 8001992:	f04f 32ff 	mov.w	r2, #4294967295
 8001996:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8001998:	2300      	movs	r3, #0
 800199a:	77fb      	strb	r3, [r7, #31]
 800199c:	e00c      	b.n	80019b8 <HW_TS_Init+0x104>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 800199e:	7ffa      	ldrb	r2, [r7, #31]
 80019a0:	492e      	ldr	r1, [pc, #184]	@ (8001a5c <HW_TS_Init+0x1a8>)
 80019a2:	4613      	mov	r3, r2
 80019a4:	005b      	lsls	r3, r3, #1
 80019a6:	4413      	add	r3, r2
 80019a8:	00db      	lsls	r3, r3, #3
 80019aa:	440b      	add	r3, r1
 80019ac:	330c      	adds	r3, #12
 80019ae:	2200      	movs	r2, #0
 80019b0:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 80019b2:	7ffb      	ldrb	r3, [r7, #31]
 80019b4:	3301      	adds	r3, #1
 80019b6:	77fb      	strb	r3, [r7, #31]
 80019b8:	7ffb      	ldrb	r3, [r7, #31]
 80019ba:	2b05      	cmp	r3, #5
 80019bc:	d9ef      	bls.n	800199e <HW_TS_Init+0xea>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 80019be:	4b28      	ldr	r3, [pc, #160]	@ (8001a60 <HW_TS_Init+0x1ac>)
 80019c0:	2206      	movs	r2, #6
 80019c2:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);                       /**<  Disable the Wakeup Timer */
 80019c4:	4b1d      	ldr	r3, [pc, #116]	@ (8001a3c <HW_TS_Init+0x188>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	689a      	ldr	r2, [r3, #8]
 80019ca:	4b1c      	ldr	r3, [pc, #112]	@ (8001a3c <HW_TS_Init+0x188>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80019d2:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 80019d4:	4b19      	ldr	r3, [pc, #100]	@ (8001a3c <HW_TS_Init+0x188>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	68db      	ldr	r3, [r3, #12]
 80019da:	b2da      	uxtb	r2, r3
 80019dc:	4b17      	ldr	r3, [pc, #92]	@ (8001a3c <HW_TS_Init+0x188>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 80019e4:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 80019e6:	4b1f      	ldr	r3, [pc, #124]	@ (8001a64 <HW_TS_Init+0x1b0>)
 80019e8:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80019ec:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 80019ee:	2003      	movs	r0, #3
 80019f0:	f006 fa37 	bl	8007e62 <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(&hrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 80019f4:	4b11      	ldr	r3, [pc, #68]	@ (8001a3c <HW_TS_Init+0x188>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	689a      	ldr	r2, [r3, #8]
 80019fa:	4b10      	ldr	r3, [pc, #64]	@ (8001a3c <HW_TS_Init+0x188>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001a02:	609a      	str	r2, [r3, #8]
 8001a04:	e009      	b.n	8001a1a <HW_TS_Init+0x166>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTF) != RESET)
 8001a06:	4b0d      	ldr	r3, [pc, #52]	@ (8001a3c <HW_TS_Init+0x188>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	68db      	ldr	r3, [r3, #12]
 8001a0c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d002      	beq.n	8001a1a <HW_TS_Init+0x166>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8001a14:	2003      	movs	r0, #3
 8001a16:	f006 fa16 	bl	8007e46 <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8001a1a:	4b08      	ldr	r3, [pc, #32]	@ (8001a3c <HW_TS_Init+0x188>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	22ff      	movs	r2, #255	@ 0xff
 8001a20:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 8001a22:	2200      	movs	r2, #0
 8001a24:	2103      	movs	r1, #3
 8001a26:	2003      	movs	r0, #3
 8001a28:	f006 f9cb 	bl	8007dc2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001a2c:	2003      	movs	r0, #3
 8001a2e:	f006 f9e2 	bl	8007df6 <HAL_NVIC_EnableIRQ>

  return;
 8001a32:	bf00      	nop
}
 8001a34:	3720      	adds	r7, #32
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	200002e4 	.word	0x200002e4
 8001a40:	40002800 	.word	0x40002800
 8001a44:	200001e5 	.word	0x200001e5
 8001a48:	200001e6 	.word	0x200001e6
 8001a4c:	200001e8 	.word	0x200001e8
 8001a50:	200001ea 	.word	0x200001ea
 8001a54:	200001e4 	.word	0x200001e4
 8001a58:	200001e0 	.word	0x200001e0
 8001a5c:	2000014c 	.word	0x2000014c
 8001a60:	200001dc 	.word	0x200001dc
 8001a64:	58000800 	.word	0x58000800

08001a68 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b086      	sub	sp, #24
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	4603      	mov	r3, r0
 8001a70:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001a72:	f3ef 8310 	mrs	r3, PRIMASK
 8001a76:	60fb      	str	r3, [r7, #12]
  return(result);
 8001a78:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001a7a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001a7c:	b672      	cpsid	i
}
 8001a7e:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8001a80:	2003      	movs	r0, #3
 8001a82:	f006 f9c6 	bl	8007e12 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001a86:	4b34      	ldr	r3, [pc, #208]	@ (8001b58 <HW_TS_Stop+0xf0>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	22ca      	movs	r2, #202	@ 0xca
 8001a8c:	625a      	str	r2, [r3, #36]	@ 0x24
 8001a8e:	4b32      	ldr	r3, [pc, #200]	@ (8001b58 <HW_TS_Stop+0xf0>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	2253      	movs	r2, #83	@ 0x53
 8001a94:	625a      	str	r2, [r3, #36]	@ 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8001a96:	79fa      	ldrb	r2, [r7, #7]
 8001a98:	4930      	ldr	r1, [pc, #192]	@ (8001b5c <HW_TS_Stop+0xf4>)
 8001a9a:	4613      	mov	r3, r2
 8001a9c:	005b      	lsls	r3, r3, #1
 8001a9e:	4413      	add	r3, r2
 8001aa0:	00db      	lsls	r3, r3, #3
 8001aa2:	440b      	add	r3, r1
 8001aa4:	330c      	adds	r3, #12
 8001aa6:	781b      	ldrb	r3, [r3, #0]
 8001aa8:	b2db      	uxtb	r3, r3
 8001aaa:	2b02      	cmp	r3, #2
 8001aac:	d142      	bne.n	8001b34 <HW_TS_Stop+0xcc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 8001aae:	79fb      	ldrb	r3, [r7, #7]
 8001ab0:	2100      	movs	r1, #0
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f7ff fc80 	bl	80013b8 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 8001ab8:	4b29      	ldr	r3, [pc, #164]	@ (8001b60 <HW_TS_Stop+0xf8>)
 8001aba:	781b      	ldrb	r3, [r3, #0]
 8001abc:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001abe:	7cfb      	ldrb	r3, [r7, #19]
 8001ac0:	2b06      	cmp	r3, #6
 8001ac2:	d12f      	bne.n	8001b24 <HW_TS_Stop+0xbc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8001ac4:	4b27      	ldr	r3, [pc, #156]	@ (8001b64 <HW_TS_Stop+0xfc>)
 8001ac6:	689b      	ldr	r3, [r3, #8]
 8001ac8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001acc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001ad0:	d107      	bne.n	8001ae2 <HW_TS_Stop+0x7a>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8001ad2:	bf00      	nop
 8001ad4:	4b20      	ldr	r3, [pc, #128]	@ (8001b58 <HW_TS_Stop+0xf0>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	68db      	ldr	r3, [r3, #12]
 8001ada:	f003 0304 	and.w	r3, r3, #4
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d1f8      	bne.n	8001ad4 <HW_TS_Stop+0x6c>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8001ae2:	4b1d      	ldr	r3, [pc, #116]	@ (8001b58 <HW_TS_Stop+0xf0>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	689a      	ldr	r2, [r3, #8]
 8001ae8:	4b1b      	ldr	r3, [pc, #108]	@ (8001b58 <HW_TS_Stop+0xf0>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001af0:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8001af2:	bf00      	nop
 8001af4:	4b18      	ldr	r3, [pc, #96]	@ (8001b58 <HW_TS_Stop+0xf0>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	68db      	ldr	r3, [r3, #12]
 8001afa:	f003 0304 	and.w	r3, r3, #4
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d0f8      	beq.n	8001af4 <HW_TS_Stop+0x8c>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001b02:	4b15      	ldr	r3, [pc, #84]	@ (8001b58 <HW_TS_Stop+0xf0>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	68db      	ldr	r3, [r3, #12]
 8001b08:	b2da      	uxtb	r2, r3
 8001b0a:	4b13      	ldr	r3, [pc, #76]	@ (8001b58 <HW_TS_Stop+0xf0>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8001b12:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001b14:	4b14      	ldr	r3, [pc, #80]	@ (8001b68 <HW_TS_Stop+0x100>)
 8001b16:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001b1a:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8001b1c:	2003      	movs	r0, #3
 8001b1e:	f006 f9a0 	bl	8007e62 <HAL_NVIC_ClearPendingIRQ>
 8001b22:	e007      	b.n	8001b34 <HW_TS_Stop+0xcc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8001b24:	4b11      	ldr	r3, [pc, #68]	@ (8001b6c <HW_TS_Stop+0x104>)
 8001b26:	781b      	ldrb	r3, [r3, #0]
 8001b28:	b2db      	uxtb	r3, r3
 8001b2a:	7cfa      	ldrb	r2, [r7, #19]
 8001b2c:	429a      	cmp	r2, r3
 8001b2e:	d001      	beq.n	8001b34 <HW_TS_Stop+0xcc>
    {
      RescheduleTimerList();
 8001b30:	f7ff fd5e 	bl	80015f0 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8001b34:	4b08      	ldr	r3, [pc, #32]	@ (8001b58 <HW_TS_Stop+0xf0>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	22ff      	movs	r2, #255	@ 0xff
 8001b3a:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001b3c:	2003      	movs	r0, #3
 8001b3e:	f006 f95a 	bl	8007df6 <HAL_NVIC_EnableIRQ>
 8001b42:	697b      	ldr	r3, [r7, #20]
 8001b44:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001b46:	68bb      	ldr	r3, [r7, #8]
 8001b48:	f383 8810 	msr	PRIMASK, r3
}
 8001b4c:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8001b4e:	bf00      	nop
}
 8001b50:	3718      	adds	r7, #24
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	200002e4 	.word	0x200002e4
 8001b5c:	2000014c 	.word	0x2000014c
 8001b60:	200001dc 	.word	0x200001dc
 8001b64:	40002800 	.word	0x40002800
 8001b68:	58000800 	.word	0x58000800
 8001b6c:	200001dd 	.word	0x200001dd

08001b70 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b086      	sub	sp, #24
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	4603      	mov	r3, r0
 8001b78:	6039      	str	r1, [r7, #0]
 8001b7a:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8001b7c:	79fa      	ldrb	r2, [r7, #7]
 8001b7e:	493b      	ldr	r1, [pc, #236]	@ (8001c6c <HW_TS_Start+0xfc>)
 8001b80:	4613      	mov	r3, r2
 8001b82:	005b      	lsls	r3, r3, #1
 8001b84:	4413      	add	r3, r2
 8001b86:	00db      	lsls	r3, r3, #3
 8001b88:	440b      	add	r3, r1
 8001b8a:	330c      	adds	r3, #12
 8001b8c:	781b      	ldrb	r3, [r3, #0]
 8001b8e:	b2db      	uxtb	r3, r3
 8001b90:	2b02      	cmp	r3, #2
 8001b92:	d103      	bne.n	8001b9c <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 8001b94:	79fb      	ldrb	r3, [r7, #7]
 8001b96:	4618      	mov	r0, r3
 8001b98:	f7ff ff66 	bl	8001a68 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001b9c:	f3ef 8310 	mrs	r3, PRIMASK
 8001ba0:	60fb      	str	r3, [r7, #12]
  return(result);
 8001ba2:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001ba4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001ba6:	b672      	cpsid	i
}
 8001ba8:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8001baa:	2003      	movs	r0, #3
 8001bac:	f006 f931 	bl	8007e12 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001bb0:	4b2f      	ldr	r3, [pc, #188]	@ (8001c70 <HW_TS_Start+0x100>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	22ca      	movs	r2, #202	@ 0xca
 8001bb6:	625a      	str	r2, [r3, #36]	@ 0x24
 8001bb8:	4b2d      	ldr	r3, [pc, #180]	@ (8001c70 <HW_TS_Start+0x100>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	2253      	movs	r2, #83	@ 0x53
 8001bbe:	625a      	str	r2, [r3, #36]	@ 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 8001bc0:	79fa      	ldrb	r2, [r7, #7]
 8001bc2:	492a      	ldr	r1, [pc, #168]	@ (8001c6c <HW_TS_Start+0xfc>)
 8001bc4:	4613      	mov	r3, r2
 8001bc6:	005b      	lsls	r3, r3, #1
 8001bc8:	4413      	add	r3, r2
 8001bca:	00db      	lsls	r3, r3, #3
 8001bcc:	440b      	add	r3, r1
 8001bce:	330c      	adds	r3, #12
 8001bd0:	2202      	movs	r2, #2
 8001bd2:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 8001bd4:	79fa      	ldrb	r2, [r7, #7]
 8001bd6:	4925      	ldr	r1, [pc, #148]	@ (8001c6c <HW_TS_Start+0xfc>)
 8001bd8:	4613      	mov	r3, r2
 8001bda:	005b      	lsls	r3, r3, #1
 8001bdc:	4413      	add	r3, r2
 8001bde:	00db      	lsls	r3, r3, #3
 8001be0:	440b      	add	r3, r1
 8001be2:	3308      	adds	r3, #8
 8001be4:	683a      	ldr	r2, [r7, #0]
 8001be6:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 8001be8:	79fa      	ldrb	r2, [r7, #7]
 8001bea:	4920      	ldr	r1, [pc, #128]	@ (8001c6c <HW_TS_Start+0xfc>)
 8001bec:	4613      	mov	r3, r2
 8001bee:	005b      	lsls	r3, r3, #1
 8001bf0:	4413      	add	r3, r2
 8001bf2:	00db      	lsls	r3, r3, #3
 8001bf4:	440b      	add	r3, r1
 8001bf6:	3304      	adds	r3, #4
 8001bf8:	683a      	ldr	r2, [r7, #0]
 8001bfa:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 8001bfc:	79fb      	ldrb	r3, [r7, #7]
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f7ff fb30 	bl	8001264 <linkTimer>
 8001c04:	4603      	mov	r3, r0
 8001c06:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 8001c08:	4b1a      	ldr	r3, [pc, #104]	@ (8001c74 <HW_TS_Start+0x104>)
 8001c0a:	781b      	ldrb	r3, [r3, #0]
 8001c0c:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8001c0e:	4b1a      	ldr	r3, [pc, #104]	@ (8001c78 <HW_TS_Start+0x108>)
 8001c10:	781b      	ldrb	r3, [r3, #0]
 8001c12:	b2db      	uxtb	r3, r3
 8001c14:	7c7a      	ldrb	r2, [r7, #17]
 8001c16:	429a      	cmp	r2, r3
 8001c18:	d002      	beq.n	8001c20 <HW_TS_Start+0xb0>
  {
    RescheduleTimerList();
 8001c1a:	f7ff fce9 	bl	80015f0 <RescheduleTimerList>
 8001c1e:	e013      	b.n	8001c48 <HW_TS_Start+0xd8>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 8001c20:	79fa      	ldrb	r2, [r7, #7]
 8001c22:	4912      	ldr	r1, [pc, #72]	@ (8001c6c <HW_TS_Start+0xfc>)
 8001c24:	4613      	mov	r3, r2
 8001c26:	005b      	lsls	r3, r3, #1
 8001c28:	4413      	add	r3, r2
 8001c2a:	00db      	lsls	r3, r3, #3
 8001c2c:	440b      	add	r3, r1
 8001c2e:	3308      	adds	r3, #8
 8001c30:	6819      	ldr	r1, [r3, #0]
 8001c32:	8a7b      	ldrh	r3, [r7, #18]
 8001c34:	79fa      	ldrb	r2, [r7, #7]
 8001c36:	1ac9      	subs	r1, r1, r3
 8001c38:	480c      	ldr	r0, [pc, #48]	@ (8001c6c <HW_TS_Start+0xfc>)
 8001c3a:	4613      	mov	r3, r2
 8001c3c:	005b      	lsls	r3, r3, #1
 8001c3e:	4413      	add	r3, r2
 8001c40:	00db      	lsls	r3, r3, #3
 8001c42:	4403      	add	r3, r0
 8001c44:	3308      	adds	r3, #8
 8001c46:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8001c48:	4b09      	ldr	r3, [pc, #36]	@ (8001c70 <HW_TS_Start+0x100>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	22ff      	movs	r2, #255	@ 0xff
 8001c4e:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001c50:	2003      	movs	r0, #3
 8001c52:	f006 f8d0 	bl	8007df6 <HAL_NVIC_EnableIRQ>
 8001c56:	697b      	ldr	r3, [r7, #20]
 8001c58:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001c5a:	68bb      	ldr	r3, [r7, #8]
 8001c5c:	f383 8810 	msr	PRIMASK, r3
}
 8001c60:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8001c62:	bf00      	nop
}
 8001c64:	3718      	adds	r7, #24
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}
 8001c6a:	bf00      	nop
 8001c6c:	2000014c 	.word	0x2000014c
 8001c70:	200002e4 	.word	0x200002e4
 8001c74:	200001dc 	.word	0x200001dc
 8001c78:	200001dd 	.word	0x200001dd

08001c7c <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b084      	sub	sp, #16
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	60f8      	str	r0, [r7, #12]
 8001c84:	460b      	mov	r3, r1
 8001c86:	607a      	str	r2, [r7, #4]
 8001c88:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	4798      	blx	r3

  return;
 8001c8e:	bf00      	nop
}
 8001c90:	3710      	adds	r7, #16
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}
	...

08001c98 <MagCal_Run>:
static void fUpdateCalibration10EIG(MagCalibration_t *MagCal);

int magcal_type = 0;
int magcal_cnt = 0;

int MagCal_Run(void) {
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b084      	sub	sp, #16
 8001c9c:	af00      	add	r7, sp, #0
	int i, j;			// loop counters
	int isolver;		// magnetic solver used
	int count = 0;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	603b      	str	r3, [r7, #0]
	// only do the calibration occasionally
//	if (++waitcount < 20) return 0;
//	waitcount = 0;

	// count number of data points
	for (i = 0; i < MAGBUFFSIZE; i++) {
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	60fb      	str	r3, [r7, #12]
 8001ca6:	e00f      	b.n	8001cc8 <MagCal_Run+0x30>
		if (magcal.valid[i])
 8001ca8:	4a91      	ldr	r2, [pc, #580]	@ (8001ef0 <MagCal_Run+0x258>)
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	4413      	add	r3, r2
 8001cae:	f503 5391 	add.w	r3, r3, #4640	@ 0x1220
 8001cb2:	330a      	adds	r3, #10
 8001cb4:	f993 3000 	ldrsb.w	r3, [r3]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d002      	beq.n	8001cc2 <MagCal_Run+0x2a>
			count++;
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	3301      	adds	r3, #1
 8001cc0:	603b      	str	r3, [r7, #0]
	for (i = 0; i < MAGBUFFSIZE; i++) {
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	3301      	adds	r3, #1
 8001cc6:	60fb      	str	r3, [r7, #12]
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	f5b3 7f16 	cmp.w	r3, #600	@ 0x258
 8001cce:	dbeb      	blt.n	8001ca8 <MagCal_Run+0x10>
	}

	magcal_cnt = count;
 8001cd0:	4a88      	ldr	r2, [pc, #544]	@ (8001ef4 <MagCal_Run+0x25c>)
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	6013      	str	r3, [r2, #0]

	if (count < MINMEASUREMENTS4CAL)
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	2b27      	cmp	r3, #39	@ 0x27
 8001cda:	dc01      	bgt.n	8001ce0 <MagCal_Run+0x48>
		return 0;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	e103      	b.n	8001ee8 <MagCal_Run+0x250>

	if (magcal.ValidMagCal) {
 8001ce0:	4b83      	ldr	r3, [pc, #524]	@ (8001ef0 <MagCal_Run+0x258>)
 8001ce2:	f993 3418 	ldrsb.w	r3, [r3, #1048]	@ 0x418
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d009      	beq.n	8001cfe <MagCal_Run+0x66>
		// age the existing fit error to avoid one good calibration locking out future updates
		magcal.FitErrorAge *= 1.02f;
 8001cea:	4b81      	ldr	r3, [pc, #516]	@ (8001ef0 <MagCal_Run+0x258>)
 8001cec:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 8001cf0:	ed9f 7a81 	vldr	s14, [pc, #516]	@ 8001ef8 <MagCal_Run+0x260>
 8001cf4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001cf8:	4b7d      	ldr	r3, [pc, #500]	@ (8001ef0 <MagCal_Run+0x258>)
 8001cfa:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
	}

	if (count < MINMEASUREMENTS7CAL) {
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	2b63      	cmp	r3, #99	@ 0x63
 8001d02:	dc12      	bgt.n	8001d2a <MagCal_Run+0x92>
		isolver = 4;
 8001d04:	2304      	movs	r3, #4
 8001d06:	607b      	str	r3, [r7, #4]
		fUpdateCalibration4INV(&magcal); // 4 element matrix inversion calibration
 8001d08:	4879      	ldr	r0, [pc, #484]	@ (8001ef0 <MagCal_Run+0x258>)
 8001d0a:	f000 f8ff 	bl	8001f0c <fUpdateCalibration4INV>
		if (magcal.trFitErrorpc < 12.0f)
 8001d0e:	4b78      	ldr	r3, [pc, #480]	@ (8001ef0 <MagCal_Run+0x258>)
 8001d10:	edd3 7a1d 	vldr	s15, [r3, #116]	@ 0x74
 8001d14:	eeb2 7a08 	vmov.f32	s14, #40	@ 0x41400000  12.0
 8001d18:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d20:	d51e      	bpl.n	8001d60 <MagCal_Run+0xc8>
			magcal.trFitErrorpc = 12.0f;
 8001d22:	4b73      	ldr	r3, [pc, #460]	@ (8001ef0 <MagCal_Run+0x258>)
 8001d24:	4a75      	ldr	r2, [pc, #468]	@ (8001efc <MagCal_Run+0x264>)
 8001d26:	675a      	str	r2, [r3, #116]	@ 0x74
 8001d28:	e01a      	b.n	8001d60 <MagCal_Run+0xc8>
	} else if (count < MINMEASUREMENTS10CAL) {
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	2b95      	cmp	r3, #149	@ 0x95
 8001d2e:	dc12      	bgt.n	8001d56 <MagCal_Run+0xbe>
		isolver = 7;
 8001d30:	2307      	movs	r3, #7
 8001d32:	607b      	str	r3, [r7, #4]
		fUpdateCalibration7EIG(&magcal); // 7 element eigenpair calibration
 8001d34:	486e      	ldr	r0, [pc, #440]	@ (8001ef0 <MagCal_Run+0x258>)
 8001d36:	f000 fc7f 	bl	8002638 <fUpdateCalibration7EIG>
		if (magcal.trFitErrorpc < 7.5f)
 8001d3a:	4b6d      	ldr	r3, [pc, #436]	@ (8001ef0 <MagCal_Run+0x258>)
 8001d3c:	edd3 7a1d 	vldr	s15, [r3, #116]	@ 0x74
 8001d40:	eeb1 7a0e 	vmov.f32	s14, #30	@ 0x40f00000  7.5
 8001d44:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d4c:	d508      	bpl.n	8001d60 <MagCal_Run+0xc8>
			magcal.trFitErrorpc = 7.5f;
 8001d4e:	4b68      	ldr	r3, [pc, #416]	@ (8001ef0 <MagCal_Run+0x258>)
 8001d50:	4a6b      	ldr	r2, [pc, #428]	@ (8001f00 <MagCal_Run+0x268>)
 8001d52:	675a      	str	r2, [r3, #116]	@ 0x74
 8001d54:	e004      	b.n	8001d60 <MagCal_Run+0xc8>
	} else {
		isolver = 10;
 8001d56:	230a      	movs	r3, #10
 8001d58:	607b      	str	r3, [r7, #4]
		fUpdateCalibration10EIG(&magcal); // 10 element eigenpair calibration
 8001d5a:	4865      	ldr	r0, [pc, #404]	@ (8001ef0 <MagCal_Run+0x258>)
 8001d5c:	f000 ff5c 	bl	8002c18 <fUpdateCalibration10EIG>
	}

	// the trial geomagnetic field must be in range (earth is 22uT to 67uT)
	if ((magcal.trB >= MINBFITUT) && (magcal.trB <= MAXBFITUT)) {
 8001d60:	4b63      	ldr	r3, [pc, #396]	@ (8001ef0 <MagCal_Run+0x258>)
 8001d62:	edd3 7a1c 	vldr	s15, [r3, #112]	@ 0x70
 8001d66:	eeb3 7a06 	vmov.f32	s14, #54	@ 0x41b00000  22.0
 8001d6a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d72:	f2c0 80b8 	blt.w	8001ee6 <MagCal_Run+0x24e>
 8001d76:	4b5e      	ldr	r3, [pc, #376]	@ (8001ef0 <MagCal_Run+0x258>)
 8001d78:	edd3 7a1c 	vldr	s15, [r3, #112]	@ 0x70
 8001d7c:	ed9f 7a61 	vldr	s14, [pc, #388]	@ 8001f04 <MagCal_Run+0x26c>
 8001d80:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d88:	f200 80ad 	bhi.w	8001ee6 <MagCal_Run+0x24e>
		// always accept the calibration if
		//  1: no previous calibration exists
		//  2: the calibration fit is reduced or
		//  3: an improved solver was used giving a good trial calibration (4% or under)
		if ((magcal.ValidMagCal == 0)
 8001d8c:	4b58      	ldr	r3, [pc, #352]	@ (8001ef0 <MagCal_Run+0x258>)
 8001d8e:	f993 3418 	ldrsb.w	r3, [r3, #1048]	@ 0x418
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d01d      	beq.n	8001dd2 <MagCal_Run+0x13a>
				|| (magcal.trFitErrorpc <= magcal.FitErrorAge)
 8001d96:	4b56      	ldr	r3, [pc, #344]	@ (8001ef0 <MagCal_Run+0x258>)
 8001d98:	ed93 7a1d 	vldr	s14, [r3, #116]	@ 0x74
 8001d9c:	4b54      	ldr	r3, [pc, #336]	@ (8001ef0 <MagCal_Run+0x258>)
 8001d9e:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 8001da2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001da6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001daa:	d912      	bls.n	8001dd2 <MagCal_Run+0x13a>
				|| ((isolver > magcal.ValidMagCal)
 8001dac:	4b50      	ldr	r3, [pc, #320]	@ (8001ef0 <MagCal_Run+0x258>)
 8001dae:	f993 3418 	ldrsb.w	r3, [r3, #1048]	@ 0x418
 8001db2:	461a      	mov	r2, r3
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	4293      	cmp	r3, r2
 8001db8:	f340 8095 	ble.w	8001ee6 <MagCal_Run+0x24e>
						&& (magcal.trFitErrorpc <= 4.0F))) {
 8001dbc:	4b4c      	ldr	r3, [pc, #304]	@ (8001ef0 <MagCal_Run+0x258>)
 8001dbe:	edd3 7a1d 	vldr	s15, [r3, #116]	@ 0x74
 8001dc2:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8001dc6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001dca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dce:	f200 808a 	bhi.w	8001ee6 <MagCal_Run+0x24e>
			// accept the new calibration solution
			//printf("new magnetic cal, B=%.2f uT\n", magcal.trB);
			magcal.ValidMagCal = isolver;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	b25a      	sxtb	r2, r3
 8001dd6:	4b46      	ldr	r3, [pc, #280]	@ (8001ef0 <MagCal_Run+0x258>)
 8001dd8:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
			magcal.FitError = magcal.trFitErrorpc;
 8001ddc:	4b44      	ldr	r3, [pc, #272]	@ (8001ef0 <MagCal_Run+0x258>)
 8001dde:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001de0:	4a43      	ldr	r2, [pc, #268]	@ (8001ef0 <MagCal_Run+0x258>)
 8001de2:	6393      	str	r3, [r2, #56]	@ 0x38
			if (magcal.trFitErrorpc > 2.0f) {
 8001de4:	4b42      	ldr	r3, [pc, #264]	@ (8001ef0 <MagCal_Run+0x258>)
 8001de6:	edd3 7a1d 	vldr	s15, [r3, #116]	@ 0x74
 8001dea:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8001dee:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001df2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001df6:	dd04      	ble.n	8001e02 <MagCal_Run+0x16a>
				magcal.FitErrorAge = magcal.trFitErrorpc;
 8001df8:	4b3d      	ldr	r3, [pc, #244]	@ (8001ef0 <MagCal_Run+0x258>)
 8001dfa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001dfc:	4a3c      	ldr	r2, [pc, #240]	@ (8001ef0 <MagCal_Run+0x258>)
 8001dfe:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8001e00:	e003      	b.n	8001e0a <MagCal_Run+0x172>
			} else {
				magcal.FitErrorAge = 2.0f;
 8001e02:	4b3b      	ldr	r3, [pc, #236]	@ (8001ef0 <MagCal_Run+0x258>)
 8001e04:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001e08:	63da      	str	r2, [r3, #60]	@ 0x3c
			}
			magcal.B = magcal.trB;
 8001e0a:	4b39      	ldr	r3, [pc, #228]	@ (8001ef0 <MagCal_Run+0x258>)
 8001e0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e0e:	4a38      	ldr	r2, [pc, #224]	@ (8001ef0 <MagCal_Run+0x258>)
 8001e10:	6313      	str	r3, [r2, #48]	@ 0x30
			magcal.FourBsq = 4.0F * magcal.trB * magcal.trB;
 8001e12:	4b37      	ldr	r3, [pc, #220]	@ (8001ef0 <MagCal_Run+0x258>)
 8001e14:	edd3 7a1c 	vldr	s15, [r3, #112]	@ 0x70
 8001e18:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8001e1c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001e20:	4b33      	ldr	r3, [pc, #204]	@ (8001ef0 <MagCal_Run+0x258>)
 8001e22:	edd3 7a1c 	vldr	s15, [r3, #112]	@ 0x70
 8001e26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e2a:	4b31      	ldr	r3, [pc, #196]	@ (8001ef0 <MagCal_Run+0x258>)
 8001e2c:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
			if (fabs(magcal.trV[X]) <= 50.0f && fabs(magcal.trV[Y]) <= 50.0f
 8001e30:	4b2f      	ldr	r3, [pc, #188]	@ (8001ef0 <MagCal_Run+0x258>)
 8001e32:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8001e36:	eef0 7ae7 	vabs.f32	s15, s15
 8001e3a:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 8001f08 <MagCal_Run+0x270>
 8001e3e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e46:	d84e      	bhi.n	8001ee6 <MagCal_Run+0x24e>
 8001e48:	4b29      	ldr	r3, [pc, #164]	@ (8001ef0 <MagCal_Run+0x258>)
 8001e4a:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 8001e4e:	eef0 7ae7 	vabs.f32	s15, s15
 8001e52:	ed9f 7a2d 	vldr	s14, [pc, #180]	@ 8001f08 <MagCal_Run+0x270>
 8001e56:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e5e:	d842      	bhi.n	8001ee6 <MagCal_Run+0x24e>
					&& fabs(magcal.trV[Z]) <= 50.0f) {
 8001e60:	4b23      	ldr	r3, [pc, #140]	@ (8001ef0 <MagCal_Run+0x258>)
 8001e62:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 8001e66:	eef0 7ae7 	vabs.f32	s15, s15
 8001e6a:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 8001f08 <MagCal_Run+0x270>
 8001e6e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e76:	d836      	bhi.n	8001ee6 <MagCal_Run+0x24e>
				for (i = X; i <= Z; i++) {
 8001e78:	2300      	movs	r3, #0
 8001e7a:	60fb      	str	r3, [r7, #12]
 8001e7c:	e02e      	b.n	8001edc <MagCal_Run+0x244>
					magcal.V[i] = magcal.trV[i];
 8001e7e:	4a1c      	ldr	r2, [pc, #112]	@ (8001ef0 <MagCal_Run+0x258>)
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	3310      	adds	r3, #16
 8001e84:	009b      	lsls	r3, r3, #2
 8001e86:	4413      	add	r3, r2
 8001e88:	681a      	ldr	r2, [r3, #0]
 8001e8a:	4919      	ldr	r1, [pc, #100]	@ (8001ef0 <MagCal_Run+0x258>)
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	009b      	lsls	r3, r3, #2
 8001e90:	440b      	add	r3, r1
 8001e92:	601a      	str	r2, [r3, #0]
					for (j = X; j <= Z; j++) {
 8001e94:	2300      	movs	r3, #0
 8001e96:	60bb      	str	r3, [r7, #8]
 8001e98:	e01a      	b.n	8001ed0 <MagCal_Run+0x238>
						magcal.invW[i][j] = magcal.trinvW[i][j];
 8001e9a:	4915      	ldr	r1, [pc, #84]	@ (8001ef0 <MagCal_Run+0x258>)
 8001e9c:	68fa      	ldr	r2, [r7, #12]
 8001e9e:	4613      	mov	r3, r2
 8001ea0:	005b      	lsls	r3, r3, #1
 8001ea2:	4413      	add	r3, r2
 8001ea4:	68ba      	ldr	r2, [r7, #8]
 8001ea6:	4413      	add	r3, r2
 8001ea8:	3312      	adds	r3, #18
 8001eaa:	009b      	lsls	r3, r3, #2
 8001eac:	440b      	add	r3, r1
 8001eae:	3304      	adds	r3, #4
 8001eb0:	6819      	ldr	r1, [r3, #0]
 8001eb2:	480f      	ldr	r0, [pc, #60]	@ (8001ef0 <MagCal_Run+0x258>)
 8001eb4:	68fa      	ldr	r2, [r7, #12]
 8001eb6:	4613      	mov	r3, r2
 8001eb8:	005b      	lsls	r3, r3, #1
 8001eba:	4413      	add	r3, r2
 8001ebc:	68ba      	ldr	r2, [r7, #8]
 8001ebe:	4413      	add	r3, r2
 8001ec0:	3302      	adds	r3, #2
 8001ec2:	009b      	lsls	r3, r3, #2
 8001ec4:	4403      	add	r3, r0
 8001ec6:	3304      	adds	r3, #4
 8001ec8:	6019      	str	r1, [r3, #0]
					for (j = X; j <= Z; j++) {
 8001eca:	68bb      	ldr	r3, [r7, #8]
 8001ecc:	3301      	adds	r3, #1
 8001ece:	60bb      	str	r3, [r7, #8]
 8001ed0:	68bb      	ldr	r3, [r7, #8]
 8001ed2:	2b02      	cmp	r3, #2
 8001ed4:	dde1      	ble.n	8001e9a <MagCal_Run+0x202>
				for (i = X; i <= Z; i++) {
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	3301      	adds	r3, #1
 8001eda:	60fb      	str	r3, [r7, #12]
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	2b02      	cmp	r3, #2
 8001ee0:	ddcd      	ble.n	8001e7e <MagCal_Run+0x1e6>
					}
				}
				return 1; // indicates new calibration applied
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	e000      	b.n	8001ee8 <MagCal_Run+0x250>
			}

		}
	}

	return 0;
 8001ee6:	2300      	movs	r3, #0
}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	3710      	adds	r7, #16
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}
 8001ef0:	200004d8 	.word	0x200004d8
 8001ef4:	200001f0 	.word	0x200001f0
 8001ef8:	3f828f5c 	.word	0x3f828f5c
 8001efc:	41400000 	.word	0x41400000
 8001f00:	40f00000 	.word	0x40f00000
 8001f04:	42860000 	.word	0x42860000
 8001f08:	42480000 	.word	0x42480000

08001f0c <fUpdateCalibration4INV>:

static void fUpdateCalibration4INV(MagCalibration_t *MagCal) {
 8001f0c:	b590      	push	{r4, r7, lr}
 8001f0e:	b097      	sub	sp, #92	@ 0x5c
 8001f10:	af02      	add	r7, sp, #8
 8001f12:	6078      	str	r0, [r7, #4]
	float *pfRows[4];
	int8_t iColInd[4];
	int8_t iRowInd[4];
	int8_t iPivot[4];

	magcal_type = 1;
 8001f14:	4b68      	ldr	r3, [pc, #416]	@ (80020b8 <fUpdateCalibration4INV+0x1ac>)
 8001f16:	2201      	movs	r2, #1
 8001f18:	601a      	str	r2, [r3, #0]
	// compute fscaling to reduce multiplications later
	fscaling = FXOS8700_UTPERCOUNT / DEFAULTB;
 8001f1a:	4b68      	ldr	r3, [pc, #416]	@ (80020bc <fUpdateCalibration4INV+0x1b0>)
 8001f1c:	637b      	str	r3, [r7, #52]	@ 0x34

	// the trial inverse soft iron matrix invW always equals
	// the identity matrix for 4 element calibration
	f3x3matrixAeqI(MagCal->trinvW);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	334c      	adds	r3, #76	@ 0x4c
 8001f22:	4618      	mov	r0, r3
 8001f24:	f003 ffd4 	bl	8005ed0 <f3x3matrixAeqI>

	// zero fSumBp4=Y^T.Y, vecB=X^T.Y (4x1) and on and above
	// diagonal elements of matA=X^T*X (4x4)
	fSumBp4 = 0.0F;
 8001f28:	f04f 0300 	mov.w	r3, #0
 8001f2c:	64fb      	str	r3, [r7, #76]	@ 0x4c
	for (i = 0; i < 4; i++) {
 8001f2e:	2300      	movs	r3, #0
 8001f30:	643b      	str	r3, [r7, #64]	@ 0x40
 8001f32:	e022      	b.n	8001f7a <fUpdateCalibration4INV+0x6e>
		MagCal->vecB[i] = 0.0F;
 8001f34:	687a      	ldr	r2, [r7, #4]
 8001f36:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001f38:	f503 7381 	add.w	r3, r3, #258	@ 0x102
 8001f3c:	009b      	lsls	r3, r3, #2
 8001f3e:	4413      	add	r3, r2
 8001f40:	f04f 0200 	mov.w	r2, #0
 8001f44:	601a      	str	r2, [r3, #0]
		for (j = i; j < 4; j++) {
 8001f46:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001f48:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001f4a:	e010      	b.n	8001f6e <fUpdateCalibration4INV+0x62>
			MagCal->matA[i][j] = 0.0F;
 8001f4c:	6879      	ldr	r1, [r7, #4]
 8001f4e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001f50:	4613      	mov	r3, r2
 8001f52:	009b      	lsls	r3, r3, #2
 8001f54:	4413      	add	r3, r2
 8001f56:	005b      	lsls	r3, r3, #1
 8001f58:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001f5a:	4413      	add	r3, r2
 8001f5c:	3330      	adds	r3, #48	@ 0x30
 8001f5e:	009b      	lsls	r3, r3, #2
 8001f60:	440b      	add	r3, r1
 8001f62:	f04f 0200 	mov.w	r2, #0
 8001f66:	601a      	str	r2, [r3, #0]
		for (j = i; j < 4; j++) {
 8001f68:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001f6a:	3301      	adds	r3, #1
 8001f6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001f6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001f70:	2b03      	cmp	r3, #3
 8001f72:	ddeb      	ble.n	8001f4c <fUpdateCalibration4INV+0x40>
	for (i = 0; i < 4; i++) {
 8001f74:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001f76:	3301      	adds	r3, #1
 8001f78:	643b      	str	r3, [r7, #64]	@ 0x40
 8001f7a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001f7c:	2b03      	cmp	r3, #3
 8001f7e:	ddd9      	ble.n	8001f34 <fUpdateCalibration4INV+0x28>
		}
	}

	// the offsets are guaranteed to be set from the first element but to avoid compiler error
	iOffset[X] = iOffset[Y] = iOffset[Z] = 0;
 8001f80:	2300      	movs	r3, #0
 8001f82:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8001f84:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 8001f88:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8001f8a:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 8001f8e:	853b      	strh	r3, [r7, #40]	@ 0x28

	// use from MINEQUATIONS up to MAXEQUATIONS entries from magnetic buffer to compute matrices
	iCount = 0;
 8001f90:	2300      	movs	r3, #0
 8001f92:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
	for (j = 0; j < MAGBUFFSIZE; j++) {
 8001f96:	2300      	movs	r3, #0
 8001f98:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001f9a:	e13e      	b.n	800221a <fUpdateCalibration4INV+0x30e>
		if (MagCal->valid[j]) {
 8001f9c:	687a      	ldr	r2, [r7, #4]
 8001f9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001fa0:	4413      	add	r3, r2
 8001fa2:	f503 5391 	add.w	r3, r3, #4640	@ 0x1220
 8001fa6:	330a      	adds	r3, #10
 8001fa8:	f993 3000 	ldrsb.w	r3, [r3]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	f000 8131 	beq.w	8002214 <fUpdateCalibration4INV+0x308>
			// use first valid magnetic buffer entry as estimate (in counts) for offset
			if (iCount == 0) {
 8001fb2:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	@ 0x46
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d11c      	bne.n	8001ff4 <fUpdateCalibration4INV+0xe8>
				for (k = X; k <= Z; k++) {
 8001fba:	2300      	movs	r3, #0
 8001fbc:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001fbe:	e016      	b.n	8001fee <fUpdateCalibration4INV+0xe2>
					iOffset[k] = MagCal->BpFast[k][j];
 8001fc0:	687a      	ldr	r2, [r7, #4]
 8001fc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001fc4:	f44f 7116 	mov.w	r1, #600	@ 0x258
 8001fc8:	fb03 f101 	mul.w	r1, r3, r1
 8001fcc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001fce:	440b      	add	r3, r1
 8001fd0:	f503 7303 	add.w	r3, r3, #524	@ 0x20c
 8001fd4:	005b      	lsls	r3, r3, #1
 8001fd6:	4413      	add	r3, r2
 8001fd8:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8001fdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001fde:	005b      	lsls	r3, r3, #1
 8001fe0:	3350      	adds	r3, #80	@ 0x50
 8001fe2:	443b      	add	r3, r7
 8001fe4:	f823 2c28 	strh.w	r2, [r3, #-40]
				for (k = X; k <= Z; k++) {
 8001fe8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001fea:	3301      	adds	r3, #1
 8001fec:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001fee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001ff0:	2b02      	cmp	r3, #2
 8001ff2:	dde5      	ble.n	8001fc0 <fUpdateCalibration4INV+0xb4>
				}
			}

			// store scaled and offset fBp[XYZ] in vecA[0-2] and fBp[XYZ]^2 in vecA[3-5]
			for (k = X; k <= Z; k++) {
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001ff8:	e03f      	b.n	800207a <fUpdateCalibration4INV+0x16e>
				MagCal->vecA[k] = (float) ((int32_t) MagCal->BpFast[k][j]
 8001ffa:	687a      	ldr	r2, [r7, #4]
 8001ffc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001ffe:	f44f 7116 	mov.w	r1, #600	@ 0x258
 8002002:	fb03 f101 	mul.w	r1, r3, r1
 8002006:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002008:	440b      	add	r3, r1
 800200a:	f503 7303 	add.w	r3, r3, #524	@ 0x20c
 800200e:	005b      	lsls	r3, r3, #1
 8002010:	4413      	add	r3, r2
 8002012:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002016:	461a      	mov	r2, r3
						- (int32_t) iOffset[k]) * fscaling;
 8002018:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800201a:	005b      	lsls	r3, r3, #1
 800201c:	3350      	adds	r3, #80	@ 0x50
 800201e:	443b      	add	r3, r7
 8002020:	f933 3c28 	ldrsh.w	r3, [r3, #-40]
 8002024:	1ad3      	subs	r3, r2, r3
				MagCal->vecA[k] = (float) ((int32_t) MagCal->BpFast[k][j]
 8002026:	ee07 3a90 	vmov	s15, r3
 800202a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
						- (int32_t) iOffset[k]) * fscaling;
 800202e:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8002032:	ee67 7a27 	vmul.f32	s15, s14, s15
				MagCal->vecA[k] = (float) ((int32_t) MagCal->BpFast[k][j]
 8002036:	687a      	ldr	r2, [r7, #4]
 8002038:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800203a:	33f8      	adds	r3, #248	@ 0xf8
 800203c:	009b      	lsls	r3, r3, #2
 800203e:	4413      	add	r3, r2
 8002040:	edc3 7a00 	vstr	s15, [r3]
				MagCal->vecA[k + 3] = MagCal->vecA[k] * MagCal->vecA[k];
 8002044:	687a      	ldr	r2, [r7, #4]
 8002046:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002048:	33f8      	adds	r3, #248	@ 0xf8
 800204a:	009b      	lsls	r3, r3, #2
 800204c:	4413      	add	r3, r2
 800204e:	ed93 7a00 	vldr	s14, [r3]
 8002052:	687a      	ldr	r2, [r7, #4]
 8002054:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002056:	33f8      	adds	r3, #248	@ 0xf8
 8002058:	009b      	lsls	r3, r3, #2
 800205a:	4413      	add	r3, r2
 800205c:	edd3 7a00 	vldr	s15, [r3]
 8002060:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002062:	3303      	adds	r3, #3
 8002064:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002068:	687a      	ldr	r2, [r7, #4]
 800206a:	33f8      	adds	r3, #248	@ 0xf8
 800206c:	009b      	lsls	r3, r3, #2
 800206e:	4413      	add	r3, r2
 8002070:	edc3 7a00 	vstr	s15, [r3]
			for (k = X; k <= Z; k++) {
 8002074:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002076:	3301      	adds	r3, #1
 8002078:	63bb      	str	r3, [r7, #56]	@ 0x38
 800207a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800207c:	2b02      	cmp	r3, #2
 800207e:	ddbc      	ble.n	8001ffa <fUpdateCalibration4INV+0xee>
			}

			// calculate fBp2 = Bp[X]^2 + Bp[Y]^2 + Bp[Z]^2 (scaled uT^2)
			fBp2 = MagCal->vecA[3] + MagCal->vecA[4] + MagCal->vecA[5];
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	ed93 7afb 	vldr	s14, [r3, #1004]	@ 0x3ec
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	edd3 7afc 	vldr	s15, [r3, #1008]	@ 0x3f0
 800208c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	edd3 7afd 	vldr	s15, [r3, #1012]	@ 0x3f4
 8002096:	ee77 7a27 	vadd.f32	s15, s14, s15
 800209a:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30

			// accumulate fBp^4 over all measurements into fSumBp4=Y^T.Y
			fSumBp4 += fBp2 * fBp2;
 800209e:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80020a2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80020a6:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 80020aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020ae:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c

			// now we have fBp2, accumulate vecB[0-2] = X^T.Y =sum(Bp2.Bp[XYZ])
			for (k = X; k <= Z; k++) {
 80020b2:	2300      	movs	r3, #0
 80020b4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80020b6:	e023      	b.n	8002100 <fUpdateCalibration4INV+0x1f4>
 80020b8:	200001ec 	.word	0x200001ec
 80020bc:	3b03126f 	.word	0x3b03126f
				MagCal->vecB[k] += MagCal->vecA[k] * fBp2;
 80020c0:	687a      	ldr	r2, [r7, #4]
 80020c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80020c4:	f503 7381 	add.w	r3, r3, #258	@ 0x102
 80020c8:	009b      	lsls	r3, r3, #2
 80020ca:	4413      	add	r3, r2
 80020cc:	ed93 7a00 	vldr	s14, [r3]
 80020d0:	687a      	ldr	r2, [r7, #4]
 80020d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80020d4:	33f8      	adds	r3, #248	@ 0xf8
 80020d6:	009b      	lsls	r3, r3, #2
 80020d8:	4413      	add	r3, r2
 80020da:	edd3 6a00 	vldr	s13, [r3]
 80020de:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80020e2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80020e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020ea:	687a      	ldr	r2, [r7, #4]
 80020ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80020ee:	f503 7381 	add.w	r3, r3, #258	@ 0x102
 80020f2:	009b      	lsls	r3, r3, #2
 80020f4:	4413      	add	r3, r2
 80020f6:	edc3 7a00 	vstr	s15, [r3]
			for (k = X; k <= Z; k++) {
 80020fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80020fc:	3301      	adds	r3, #1
 80020fe:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002100:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002102:	2b02      	cmp	r3, #2
 8002104:	dddc      	ble.n	80020c0 <fUpdateCalibration4INV+0x1b4>
			}

			//accumulate vecB[3] = X^T.Y =sum(fBp2)
			MagCal->vecB[3] += fBp2;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	f203 4314 	addw	r3, r3, #1044	@ 0x414
 800210c:	ed93 7a00 	vldr	s14, [r3]
 8002110:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8002114:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	f203 4314 	addw	r3, r3, #1044	@ 0x414
 800211e:	edc3 7a00 	vstr	s15, [r3]

			// accumulate on and above-diagonal terms of matA = X^T.X ignoring matA[3][3]
			MagCal->matA[0][0] += MagCal->vecA[X + 3];
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	ed93 7a30 	vldr	s14, [r3, #192]	@ 0xc0
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	edd3 7afb 	vldr	s15, [r3, #1004]	@ 0x3ec
 800212e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	edc3 7a30 	vstr	s15, [r3, #192]	@ 0xc0
			MagCal->matA[0][1] += MagCal->vecA[X] * MagCal->vecA[Y];
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	ed93 7a31 	vldr	s14, [r3, #196]	@ 0xc4
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	edd3 6af8 	vldr	s13, [r3, #992]	@ 0x3e0
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	edd3 7af9 	vldr	s15, [r3, #996]	@ 0x3e4
 800214a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800214e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	edc3 7a31 	vstr	s15, [r3, #196]	@ 0xc4
			MagCal->matA[0][2] += MagCal->vecA[X] * MagCal->vecA[Z];
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	ed93 7a32 	vldr	s14, [r3, #200]	@ 0xc8
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	edd3 6af8 	vldr	s13, [r3, #992]	@ 0x3e0
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	edd3 7afa 	vldr	s15, [r3, #1000]	@ 0x3e8
 800216a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800216e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	edc3 7a32 	vstr	s15, [r3, #200]	@ 0xc8
			MagCal->matA[0][3] += MagCal->vecA[X];
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	ed93 7a33 	vldr	s14, [r3, #204]	@ 0xcc
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	edd3 7af8 	vldr	s15, [r3, #992]	@ 0x3e0
 8002184:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	edc3 7a33 	vstr	s15, [r3, #204]	@ 0xcc
			MagCal->matA[1][1] += MagCal->vecA[Y + 3];
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	ed93 7a3b 	vldr	s14, [r3, #236]	@ 0xec
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	edd3 7afc 	vldr	s15, [r3, #1008]	@ 0x3f0
 800219a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	edc3 7a3b 	vstr	s15, [r3, #236]	@ 0xec
			MagCal->matA[1][2] += MagCal->vecA[Y] * MagCal->vecA[Z];
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	ed93 7a3c 	vldr	s14, [r3, #240]	@ 0xf0
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	edd3 6af9 	vldr	s13, [r3, #996]	@ 0x3e4
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	edd3 7afa 	vldr	s15, [r3, #1000]	@ 0x3e8
 80021b6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80021ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	edc3 7a3c 	vstr	s15, [r3, #240]	@ 0xf0
			MagCal->matA[1][3] += MagCal->vecA[Y];
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	ed93 7a3d 	vldr	s14, [r3, #244]	@ 0xf4
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	edd3 7af9 	vldr	s15, [r3, #996]	@ 0x3e4
 80021d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	edc3 7a3d 	vstr	s15, [r3, #244]	@ 0xf4
			MagCal->matA[2][2] += MagCal->vecA[Z + 3];
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	ed93 7a46 	vldr	s14, [r3, #280]	@ 0x118
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	edd3 7afd 	vldr	s15, [r3, #1012]	@ 0x3f4
 80021e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	edc3 7a46 	vstr	s15, [r3, #280]	@ 0x118
			MagCal->matA[2][3] += MagCal->vecA[Z];
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	ed93 7a47 	vldr	s14, [r3, #284]	@ 0x11c
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	edd3 7afa 	vldr	s15, [r3, #1000]	@ 0x3e8
 80021fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	edc3 7a47 	vstr	s15, [r3, #284]	@ 0x11c

			// increment the counter for next iteration
			iCount++;
 8002206:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	@ 0x46
 800220a:	b29b      	uxth	r3, r3
 800220c:	3301      	adds	r3, #1
 800220e:	b29b      	uxth	r3, r3
 8002210:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
	for (j = 0; j < MAGBUFFSIZE; j++) {
 8002214:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002216:	3301      	adds	r3, #1
 8002218:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800221a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800221c:	f5b3 7f16 	cmp.w	r3, #600	@ 0x258
 8002220:	f6ff aebc 	blt.w	8001f9c <fUpdateCalibration4INV+0x90>
		}
	}

	// set the last element of the measurement matrix to the number of buffer elements used
	MagCal->matA[3][3] = (float) iCount;
 8002224:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	@ 0x46
 8002228:	ee07 3a90 	vmov	s15, r3
 800222c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	edc3 7a51 	vstr	s15, [r3, #324]	@ 0x144

	// store the number of measurements accumulated
	MagCal->MagBufferCount = iCount;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800223c:	461a      	mov	r2, r3
 800223e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8002242:	f8a2 3482 	strh.w	r3, [r2, #1154]	@ 0x482

	// use above diagonal elements of symmetric matA to set both matB and matA to X^T.X
	for (i = 0; i < 4; i++) {
 8002246:	2300      	movs	r3, #0
 8002248:	643b      	str	r3, [r7, #64]	@ 0x40
 800224a:	e053      	b.n	80022f4 <fUpdateCalibration4INV+0x3e8>
		for (j = i; j < 4; j++) {
 800224c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800224e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002250:	e04a      	b.n	80022e8 <fUpdateCalibration4INV+0x3dc>
			MagCal->matB[i][j] = MagCal->matB[j][i] = MagCal->matA[j][i] =
					MagCal->matA[i][j];
 8002252:	6879      	ldr	r1, [r7, #4]
 8002254:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002256:	4613      	mov	r3, r2
 8002258:	009b      	lsls	r3, r3, #2
 800225a:	4413      	add	r3, r2
 800225c:	005b      	lsls	r3, r3, #1
 800225e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002260:	4413      	add	r3, r2
 8002262:	3330      	adds	r3, #48	@ 0x30
 8002264:	009b      	lsls	r3, r3, #2
 8002266:	440b      	add	r3, r1
 8002268:	6819      	ldr	r1, [r3, #0]
			MagCal->matB[i][j] = MagCal->matB[j][i] = MagCal->matA[j][i] =
 800226a:	6878      	ldr	r0, [r7, #4]
 800226c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800226e:	4613      	mov	r3, r2
 8002270:	009b      	lsls	r3, r3, #2
 8002272:	4413      	add	r3, r2
 8002274:	005b      	lsls	r3, r3, #1
 8002276:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002278:	4413      	add	r3, r2
 800227a:	3330      	adds	r3, #48	@ 0x30
 800227c:	009b      	lsls	r3, r3, #2
 800227e:	4403      	add	r3, r0
 8002280:	6019      	str	r1, [r3, #0]
 8002282:	6879      	ldr	r1, [r7, #4]
 8002284:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002286:	4613      	mov	r3, r2
 8002288:	009b      	lsls	r3, r3, #2
 800228a:	4413      	add	r3, r2
 800228c:	005b      	lsls	r3, r3, #1
 800228e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002290:	4413      	add	r3, r2
 8002292:	3330      	adds	r3, #48	@ 0x30
 8002294:	009b      	lsls	r3, r3, #2
 8002296:	440b      	add	r3, r1
 8002298:	6819      	ldr	r1, [r3, #0]
 800229a:	6878      	ldr	r0, [r7, #4]
 800229c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800229e:	4613      	mov	r3, r2
 80022a0:	009b      	lsls	r3, r3, #2
 80022a2:	4413      	add	r3, r2
 80022a4:	005b      	lsls	r3, r3, #1
 80022a6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80022a8:	4413      	add	r3, r2
 80022aa:	3394      	adds	r3, #148	@ 0x94
 80022ac:	009b      	lsls	r3, r3, #2
 80022ae:	4403      	add	r3, r0
 80022b0:	6019      	str	r1, [r3, #0]
 80022b2:	6879      	ldr	r1, [r7, #4]
 80022b4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80022b6:	4613      	mov	r3, r2
 80022b8:	009b      	lsls	r3, r3, #2
 80022ba:	4413      	add	r3, r2
 80022bc:	005b      	lsls	r3, r3, #1
 80022be:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80022c0:	4413      	add	r3, r2
 80022c2:	3394      	adds	r3, #148	@ 0x94
 80022c4:	009b      	lsls	r3, r3, #2
 80022c6:	440b      	add	r3, r1
 80022c8:	6819      	ldr	r1, [r3, #0]
 80022ca:	6878      	ldr	r0, [r7, #4]
 80022cc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80022ce:	4613      	mov	r3, r2
 80022d0:	009b      	lsls	r3, r3, #2
 80022d2:	4413      	add	r3, r2
 80022d4:	005b      	lsls	r3, r3, #1
 80022d6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80022d8:	4413      	add	r3, r2
 80022da:	3394      	adds	r3, #148	@ 0x94
 80022dc:	009b      	lsls	r3, r3, #2
 80022de:	4403      	add	r3, r0
 80022e0:	6019      	str	r1, [r3, #0]
		for (j = i; j < 4; j++) {
 80022e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80022e4:	3301      	adds	r3, #1
 80022e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80022e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80022ea:	2b03      	cmp	r3, #3
 80022ec:	ddb1      	ble.n	8002252 <fUpdateCalibration4INV+0x346>
	for (i = 0; i < 4; i++) {
 80022ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80022f0:	3301      	adds	r3, #1
 80022f2:	643b      	str	r3, [r7, #64]	@ 0x40
 80022f4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80022f6:	2b03      	cmp	r3, #3
 80022f8:	dda8      	ble.n	800224c <fUpdateCalibration4INV+0x340>
		}
	}

	// calculate in situ inverse of matB = inv(X^T.X) (4x4) while matA still holds X^T.X
	for (i = 0; i < 4; i++) {
 80022fa:	2300      	movs	r3, #0
 80022fc:	643b      	str	r3, [r7, #64]	@ 0x40
 80022fe:	e011      	b.n	8002324 <fUpdateCalibration4INV+0x418>
		pfRows[i] = MagCal->matB[i];
 8002300:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002302:	4613      	mov	r3, r2
 8002304:	009b      	lsls	r3, r3, #2
 8002306:	4413      	add	r3, r2
 8002308:	00db      	lsls	r3, r3, #3
 800230a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800230e:	687a      	ldr	r2, [r7, #4]
 8002310:	441a      	add	r2, r3
 8002312:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002314:	009b      	lsls	r3, r3, #2
 8002316:	3350      	adds	r3, #80	@ 0x50
 8002318:	443b      	add	r3, r7
 800231a:	f843 2c38 	str.w	r2, [r3, #-56]
	for (i = 0; i < 4; i++) {
 800231e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002320:	3301      	adds	r3, #1
 8002322:	643b      	str	r3, [r7, #64]	@ 0x40
 8002324:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002326:	2b03      	cmp	r3, #3
 8002328:	ddea      	ble.n	8002300 <fUpdateCalibration4INV+0x3f4>
	}
	fmatrixAeqInvA(pfRows, iColInd, iRowInd, iPivot, 4);
 800232a:	f107 030c 	add.w	r3, r7, #12
 800232e:	f107 0210 	add.w	r2, r7, #16
 8002332:	f107 0114 	add.w	r1, r7, #20
 8002336:	f107 0018 	add.w	r0, r7, #24
 800233a:	2404      	movs	r4, #4
 800233c:	9400      	str	r4, [sp, #0]
 800233e:	f004 fc57 	bl	8006bf0 <fmatrixAeqInvA>

	// calculate vecA = solution beta (4x1) = inv(X^T.X).X^T.Y = matB * vecB
	for (i = 0; i < 4; i++) {
 8002342:	2300      	movs	r3, #0
 8002344:	643b      	str	r3, [r7, #64]	@ 0x40
 8002346:	e03a      	b.n	80023be <fUpdateCalibration4INV+0x4b2>
		MagCal->vecA[i] = 0.0F;
 8002348:	687a      	ldr	r2, [r7, #4]
 800234a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800234c:	33f8      	adds	r3, #248	@ 0xf8
 800234e:	009b      	lsls	r3, r3, #2
 8002350:	4413      	add	r3, r2
 8002352:	f04f 0200 	mov.w	r2, #0
 8002356:	601a      	str	r2, [r3, #0]
		for (k = 0; k < 4; k++) {
 8002358:	2300      	movs	r3, #0
 800235a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800235c:	e029      	b.n	80023b2 <fUpdateCalibration4INV+0x4a6>
			MagCal->vecA[i] += MagCal->matB[i][k] * MagCal->vecB[k];
 800235e:	687a      	ldr	r2, [r7, #4]
 8002360:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002362:	33f8      	adds	r3, #248	@ 0xf8
 8002364:	009b      	lsls	r3, r3, #2
 8002366:	4413      	add	r3, r2
 8002368:	ed93 7a00 	vldr	s14, [r3]
 800236c:	6879      	ldr	r1, [r7, #4]
 800236e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002370:	4613      	mov	r3, r2
 8002372:	009b      	lsls	r3, r3, #2
 8002374:	4413      	add	r3, r2
 8002376:	005b      	lsls	r3, r3, #1
 8002378:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800237a:	4413      	add	r3, r2
 800237c:	3394      	adds	r3, #148	@ 0x94
 800237e:	009b      	lsls	r3, r3, #2
 8002380:	440b      	add	r3, r1
 8002382:	edd3 6a00 	vldr	s13, [r3]
 8002386:	687a      	ldr	r2, [r7, #4]
 8002388:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800238a:	f503 7381 	add.w	r3, r3, #258	@ 0x102
 800238e:	009b      	lsls	r3, r3, #2
 8002390:	4413      	add	r3, r2
 8002392:	edd3 7a00 	vldr	s15, [r3]
 8002396:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800239a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800239e:	687a      	ldr	r2, [r7, #4]
 80023a0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80023a2:	33f8      	adds	r3, #248	@ 0xf8
 80023a4:	009b      	lsls	r3, r3, #2
 80023a6:	4413      	add	r3, r2
 80023a8:	edc3 7a00 	vstr	s15, [r3]
		for (k = 0; k < 4; k++) {
 80023ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80023ae:	3301      	adds	r3, #1
 80023b0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80023b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80023b4:	2b03      	cmp	r3, #3
 80023b6:	ddd2      	ble.n	800235e <fUpdateCalibration4INV+0x452>
	for (i = 0; i < 4; i++) {
 80023b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80023ba:	3301      	adds	r3, #1
 80023bc:	643b      	str	r3, [r7, #64]	@ 0x40
 80023be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80023c0:	2b03      	cmp	r3, #3
 80023c2:	ddc1      	ble.n	8002348 <fUpdateCalibration4INV+0x43c>
	}

	// calculate P = r^T.r = Y^T.Y - 2 * beta^T.(X^T.Y) + beta^T.(X^T.X).beta
	// = fSumBp4 - 2 * vecA^T.vecB + vecA^T.matA.vecA
	// first set P = Y^T.Y - 2 * beta^T.(X^T.Y) = SumBp4 - 2 * vecA^T.vecB
	fE = 0.0F;
 80023c4:	f04f 0300 	mov.w	r3, #0
 80023c8:	64bb      	str	r3, [r7, #72]	@ 0x48
	for (i = 0; i < 4; i++) {
 80023ca:	2300      	movs	r3, #0
 80023cc:	643b      	str	r3, [r7, #64]	@ 0x40
 80023ce:	e019      	b.n	8002404 <fUpdateCalibration4INV+0x4f8>
		fE += MagCal->vecA[i] * MagCal->vecB[i];
 80023d0:	687a      	ldr	r2, [r7, #4]
 80023d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80023d4:	33f8      	adds	r3, #248	@ 0xf8
 80023d6:	009b      	lsls	r3, r3, #2
 80023d8:	4413      	add	r3, r2
 80023da:	ed93 7a00 	vldr	s14, [r3]
 80023de:	687a      	ldr	r2, [r7, #4]
 80023e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80023e2:	f503 7381 	add.w	r3, r3, #258	@ 0x102
 80023e6:	009b      	lsls	r3, r3, #2
 80023e8:	4413      	add	r3, r2
 80023ea:	edd3 7a00 	vldr	s15, [r3]
 80023ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023f2:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 80023f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023fa:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
	for (i = 0; i < 4; i++) {
 80023fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002400:	3301      	adds	r3, #1
 8002402:	643b      	str	r3, [r7, #64]	@ 0x40
 8002404:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002406:	2b03      	cmp	r3, #3
 8002408:	dde2      	ble.n	80023d0 <fUpdateCalibration4INV+0x4c4>
	}
	fE = fSumBp4 - 2.0F * fE;
 800240a:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 800240e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002412:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8002416:	ee77 7a67 	vsub.f32	s15, s14, s15
 800241a:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48

	// set vecB = (X^T.X).beta = matA.vecA
	for (i = 0; i < 4; i++) {
 800241e:	2300      	movs	r3, #0
 8002420:	643b      	str	r3, [r7, #64]	@ 0x40
 8002422:	e03c      	b.n	800249e <fUpdateCalibration4INV+0x592>
		MagCal->vecB[i] = 0.0F;
 8002424:	687a      	ldr	r2, [r7, #4]
 8002426:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002428:	f503 7381 	add.w	r3, r3, #258	@ 0x102
 800242c:	009b      	lsls	r3, r3, #2
 800242e:	4413      	add	r3, r2
 8002430:	f04f 0200 	mov.w	r2, #0
 8002434:	601a      	str	r2, [r3, #0]
		for (k = 0; k < 4; k++) {
 8002436:	2300      	movs	r3, #0
 8002438:	63bb      	str	r3, [r7, #56]	@ 0x38
 800243a:	e02a      	b.n	8002492 <fUpdateCalibration4INV+0x586>
			MagCal->vecB[i] += MagCal->matA[i][k] * MagCal->vecA[k];
 800243c:	687a      	ldr	r2, [r7, #4]
 800243e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002440:	f503 7381 	add.w	r3, r3, #258	@ 0x102
 8002444:	009b      	lsls	r3, r3, #2
 8002446:	4413      	add	r3, r2
 8002448:	ed93 7a00 	vldr	s14, [r3]
 800244c:	6879      	ldr	r1, [r7, #4]
 800244e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002450:	4613      	mov	r3, r2
 8002452:	009b      	lsls	r3, r3, #2
 8002454:	4413      	add	r3, r2
 8002456:	005b      	lsls	r3, r3, #1
 8002458:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800245a:	4413      	add	r3, r2
 800245c:	3330      	adds	r3, #48	@ 0x30
 800245e:	009b      	lsls	r3, r3, #2
 8002460:	440b      	add	r3, r1
 8002462:	edd3 6a00 	vldr	s13, [r3]
 8002466:	687a      	ldr	r2, [r7, #4]
 8002468:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800246a:	33f8      	adds	r3, #248	@ 0xf8
 800246c:	009b      	lsls	r3, r3, #2
 800246e:	4413      	add	r3, r2
 8002470:	edd3 7a00 	vldr	s15, [r3]
 8002474:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002478:	ee77 7a27 	vadd.f32	s15, s14, s15
 800247c:	687a      	ldr	r2, [r7, #4]
 800247e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002480:	f503 7381 	add.w	r3, r3, #258	@ 0x102
 8002484:	009b      	lsls	r3, r3, #2
 8002486:	4413      	add	r3, r2
 8002488:	edc3 7a00 	vstr	s15, [r3]
		for (k = 0; k < 4; k++) {
 800248c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800248e:	3301      	adds	r3, #1
 8002490:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002492:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002494:	2b03      	cmp	r3, #3
 8002496:	ddd1      	ble.n	800243c <fUpdateCalibration4INV+0x530>
	for (i = 0; i < 4; i++) {
 8002498:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800249a:	3301      	adds	r3, #1
 800249c:	643b      	str	r3, [r7, #64]	@ 0x40
 800249e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80024a0:	2b03      	cmp	r3, #3
 80024a2:	ddbf      	ble.n	8002424 <fUpdateCalibration4INV+0x518>
		}
	}

	// complete calculation of P by adding beta^T.(X^T.X).beta = vecA^T * vecB
	for (i = 0; i < 4; i++) {
 80024a4:	2300      	movs	r3, #0
 80024a6:	643b      	str	r3, [r7, #64]	@ 0x40
 80024a8:	e019      	b.n	80024de <fUpdateCalibration4INV+0x5d2>
		fE += MagCal->vecB[i] * MagCal->vecA[i];
 80024aa:	687a      	ldr	r2, [r7, #4]
 80024ac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80024ae:	f503 7381 	add.w	r3, r3, #258	@ 0x102
 80024b2:	009b      	lsls	r3, r3, #2
 80024b4:	4413      	add	r3, r2
 80024b6:	ed93 7a00 	vldr	s14, [r3]
 80024ba:	687a      	ldr	r2, [r7, #4]
 80024bc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80024be:	33f8      	adds	r3, #248	@ 0xf8
 80024c0:	009b      	lsls	r3, r3, #2
 80024c2:	4413      	add	r3, r2
 80024c4:	edd3 7a00 	vldr	s15, [r3]
 80024c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024cc:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 80024d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024d4:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
	for (i = 0; i < 4; i++) {
 80024d8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80024da:	3301      	adds	r3, #1
 80024dc:	643b      	str	r3, [r7, #64]	@ 0x40
 80024de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80024e0:	2b03      	cmp	r3, #3
 80024e2:	dde2      	ble.n	80024aa <fUpdateCalibration4INV+0x59e>
	}

	// compute the hard iron vector (in uT but offset and scaled by FMATRIXSCALING)
	for (k = X; k <= Z; k++) {
 80024e4:	2300      	movs	r3, #0
 80024e6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80024e8:	e014      	b.n	8002514 <fUpdateCalibration4INV+0x608>
		MagCal->trV[k] = 0.5F * MagCal->vecA[k];
 80024ea:	687a      	ldr	r2, [r7, #4]
 80024ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80024ee:	33f8      	adds	r3, #248	@ 0xf8
 80024f0:	009b      	lsls	r3, r3, #2
 80024f2:	4413      	add	r3, r2
 80024f4:	edd3 7a00 	vldr	s15, [r3]
 80024f8:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80024fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002500:	687a      	ldr	r2, [r7, #4]
 8002502:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002504:	3310      	adds	r3, #16
 8002506:	009b      	lsls	r3, r3, #2
 8002508:	4413      	add	r3, r2
 800250a:	edc3 7a00 	vstr	s15, [r3]
	for (k = X; k <= Z; k++) {
 800250e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002510:	3301      	adds	r3, #1
 8002512:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002514:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002516:	2b02      	cmp	r3, #2
 8002518:	dde7      	ble.n	80024ea <fUpdateCalibration4INV+0x5de>
	}

	// compute the scaled geomagnetic field strength B (in uT but scaled by FMATRIXSCALING)
	MagCal->trB = sqrtf(
			MagCal->vecA[3] + MagCal->trV[X] * MagCal->trV[X]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	ed93 7afb 	vldr	s14, [r3, #1004]	@ 0x3ec
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	edd3 6a10 	vldr	s13, [r3, #64]	@ 0x40
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 800252c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002530:	ee37 7a27 	vadd.f32	s14, s14, s15
					+ MagCal->trV[Y] * MagCal->trV[Y]
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	edd3 6a11 	vldr	s13, [r3, #68]	@ 0x44
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 8002540:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002544:	ee37 7a27 	vadd.f32	s14, s14, s15
					+ MagCal->trV[Z] * MagCal->trV[Z]);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	edd3 6a12 	vldr	s13, [r3, #72]	@ 0x48
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 8002554:	ee66 7aa7 	vmul.f32	s15, s13, s15
	MagCal->trB = sqrtf(
 8002558:	ee77 7a27 	vadd.f32	s15, s14, s15
 800255c:	eeb0 0a67 	vmov.f32	s0, s15
 8002560:	f00f f92e 	bl	80117c0 <sqrtf>
 8002564:	eef0 7a40 	vmov.f32	s15, s0
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	edc3 7a1c 	vstr	s15, [r3, #112]	@ 0x70

	// calculate the trial fit error (percent) normalized to number of measurements
	// and scaled geomagnetic field strength
	MagCal->trFitErrorpc = sqrtf(fE / (float) MagCal->MagBufferCount) * 100.0F
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002574:	f9b3 3482 	ldrsh.w	r3, [r3, #1154]	@ 0x482
 8002578:	ee07 3a90 	vmov	s15, r3
 800257c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002580:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 8002584:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002588:	eeb0 0a66 	vmov.f32	s0, s13
 800258c:	f00f f918 	bl	80117c0 <sqrtf>
 8002590:	eef0 7a40 	vmov.f32	s15, s0
 8002594:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 800262c <fUpdateCalibration4INV+0x720>
 8002598:	ee67 6a87 	vmul.f32	s13, s15, s14
			/ (2.0F * MagCal->trB * MagCal->trB);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	edd3 7a1c 	vldr	s15, [r3, #112]	@ 0x70
 80025a2:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	edd3 7a1c 	vldr	s15, [r3, #112]	@ 0x70
 80025ac:	ee27 7a27 	vmul.f32	s14, s14, s15
 80025b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
	MagCal->trFitErrorpc = sqrtf(fE / (float) MagCal->MagBufferCount) * 100.0F
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	edc3 7a1d 	vstr	s15, [r3, #116]	@ 0x74

	// correct the hard iron estimate for FMATRIXSCALING and the offsets applied (result in uT)
	for (k = X; k <= Z; k++) {
 80025ba:	2300      	movs	r3, #0
 80025bc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80025be:	e024      	b.n	800260a <fUpdateCalibration4INV+0x6fe>
		MagCal->trV[k] = MagCal->trV[k] * DEFAULTB
 80025c0:	687a      	ldr	r2, [r7, #4]
 80025c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025c4:	3310      	adds	r3, #16
 80025c6:	009b      	lsls	r3, r3, #2
 80025c8:	4413      	add	r3, r2
 80025ca:	edd3 7a00 	vldr	s15, [r3]
 80025ce:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8002630 <fUpdateCalibration4INV+0x724>
 80025d2:	ee27 7a87 	vmul.f32	s14, s15, s14
				+ (float) iOffset[k] * FXOS8700_UTPERCOUNT;
 80025d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025d8:	005b      	lsls	r3, r3, #1
 80025da:	3350      	adds	r3, #80	@ 0x50
 80025dc:	443b      	add	r3, r7
 80025de:	f933 3c28 	ldrsh.w	r3, [r3, #-40]
 80025e2:	ee07 3a90 	vmov	s15, r3
 80025e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80025ea:	eddf 6a12 	vldr	s13, [pc, #72]	@ 8002634 <fUpdateCalibration4INV+0x728>
 80025ee:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80025f2:	ee77 7a27 	vadd.f32	s15, s14, s15
		MagCal->trV[k] = MagCal->trV[k] * DEFAULTB
 80025f6:	687a      	ldr	r2, [r7, #4]
 80025f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025fa:	3310      	adds	r3, #16
 80025fc:	009b      	lsls	r3, r3, #2
 80025fe:	4413      	add	r3, r2
 8002600:	edc3 7a00 	vstr	s15, [r3]
	for (k = X; k <= Z; k++) {
 8002604:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002606:	3301      	adds	r3, #1
 8002608:	63bb      	str	r3, [r7, #56]	@ 0x38
 800260a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800260c:	2b02      	cmp	r3, #2
 800260e:	ddd7      	ble.n	80025c0 <fUpdateCalibration4INV+0x6b4>
	}

	// correct the geomagnetic field strength B to correct scaling (result in uT)
	MagCal->trB *= DEFAULTB;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	edd3 7a1c 	vldr	s15, [r3, #112]	@ 0x70
 8002616:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 8002630 <fUpdateCalibration4INV+0x724>
 800261a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	edc3 7a1c 	vstr	s15, [r3, #112]	@ 0x70

}
 8002624:	bf00      	nop
 8002626:	3754      	adds	r7, #84	@ 0x54
 8002628:	46bd      	mov	sp, r7
 800262a:	bd90      	pop	{r4, r7, pc}
 800262c:	42c80000 	.word	0x42c80000
 8002630:	42480000 	.word	0x42480000
 8002634:	3dcccccd 	.word	0x3dcccccd

08002638 <fUpdateCalibration7EIG>:

static void fUpdateCalibration7EIG(MagCalibration_t *MagCal) {
 8002638:	b5b0      	push	{r4, r5, r7, lr}
 800263a:	ed2d 8b02 	vpush	{d8}
 800263e:	b08e      	sub	sp, #56	@ 0x38
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
	float ftmp;					// scratch variable
	int16_t iOffset[3];			// offset to remove large DC hard iron bias
	int16_t iCount;				// number of measurements counted
	int i, j, k, m, n;			// loop counters

	magcal_type = 2;
 8002644:	4bb1      	ldr	r3, [pc, #708]	@ (800290c <fUpdateCalibration7EIG+0x2d4>)
 8002646:	2202      	movs	r2, #2
 8002648:	601a      	str	r2, [r3, #0]

	// compute fscaling to reduce multiplications later
	fscaling = FXOS8700_UTPERCOUNT / DEFAULTB;
 800264a:	4bb1      	ldr	r3, [pc, #708]	@ (8002910 <fUpdateCalibration7EIG+0x2d8>)
 800264c:	617b      	str	r3, [r7, #20]

	// the offsets are guaranteed to be set from the first element but to avoid compiler error
	iOffset[X] = iOffset[Y] = iOffset[Z] = 0;
 800264e:	2300      	movs	r3, #0
 8002650:	823b      	strh	r3, [r7, #16]
 8002652:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002656:	81fb      	strh	r3, [r7, #14]
 8002658:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800265c:	81bb      	strh	r3, [r7, #12]

	// zero the on and above diagonal elements of the 7x7 symmetric measurement matrix matA
	for (m = 0; m < 7; m++) {
 800265e:	2300      	movs	r3, #0
 8002660:	61fb      	str	r3, [r7, #28]
 8002662:	e019      	b.n	8002698 <fUpdateCalibration7EIG+0x60>
		for (n = m; n < 7; n++) {
 8002664:	69fb      	ldr	r3, [r7, #28]
 8002666:	61bb      	str	r3, [r7, #24]
 8002668:	e010      	b.n	800268c <fUpdateCalibration7EIG+0x54>
			MagCal->matA[m][n] = 0.0F;
 800266a:	6879      	ldr	r1, [r7, #4]
 800266c:	69fa      	ldr	r2, [r7, #28]
 800266e:	4613      	mov	r3, r2
 8002670:	009b      	lsls	r3, r3, #2
 8002672:	4413      	add	r3, r2
 8002674:	005b      	lsls	r3, r3, #1
 8002676:	69ba      	ldr	r2, [r7, #24]
 8002678:	4413      	add	r3, r2
 800267a:	3330      	adds	r3, #48	@ 0x30
 800267c:	009b      	lsls	r3, r3, #2
 800267e:	440b      	add	r3, r1
 8002680:	f04f 0200 	mov.w	r2, #0
 8002684:	601a      	str	r2, [r3, #0]
		for (n = m; n < 7; n++) {
 8002686:	69bb      	ldr	r3, [r7, #24]
 8002688:	3301      	adds	r3, #1
 800268a:	61bb      	str	r3, [r7, #24]
 800268c:	69bb      	ldr	r3, [r7, #24]
 800268e:	2b06      	cmp	r3, #6
 8002690:	ddeb      	ble.n	800266a <fUpdateCalibration7EIG+0x32>
	for (m = 0; m < 7; m++) {
 8002692:	69fb      	ldr	r3, [r7, #28]
 8002694:	3301      	adds	r3, #1
 8002696:	61fb      	str	r3, [r7, #28]
 8002698:	69fb      	ldr	r3, [r7, #28]
 800269a:	2b06      	cmp	r3, #6
 800269c:	dde2      	ble.n	8002664 <fUpdateCalibration7EIG+0x2c>
		}
	}

	// place from MINEQUATIONS to MAXEQUATIONS entries into product matrix matA
	iCount = 0;
 800269e:	2300      	movs	r3, #0
 80026a0:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	for (j = 0; j < MAGBUFFSIZE; j++) {
 80026a2:	2300      	movs	r3, #0
 80026a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80026a6:	e0e0      	b.n	800286a <fUpdateCalibration7EIG+0x232>
		if (MagCal->valid[j]) {
 80026a8:	687a      	ldr	r2, [r7, #4]
 80026aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026ac:	4413      	add	r3, r2
 80026ae:	f503 5391 	add.w	r3, r3, #4640	@ 0x1220
 80026b2:	330a      	adds	r3, #10
 80026b4:	f993 3000 	ldrsb.w	r3, [r3]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	f000 80d3 	beq.w	8002864 <fUpdateCalibration7EIG+0x22c>
			// use first valid magnetic buffer entry as offset estimate (bit counts)
			if (iCount == 0) {
 80026be:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d11c      	bne.n	8002700 <fUpdateCalibration7EIG+0xc8>
				for (k = X; k <= Z; k++) {
 80026c6:	2300      	movs	r3, #0
 80026c8:	623b      	str	r3, [r7, #32]
 80026ca:	e016      	b.n	80026fa <fUpdateCalibration7EIG+0xc2>
					iOffset[k] = MagCal->BpFast[k][j];
 80026cc:	687a      	ldr	r2, [r7, #4]
 80026ce:	6a3b      	ldr	r3, [r7, #32]
 80026d0:	f44f 7116 	mov.w	r1, #600	@ 0x258
 80026d4:	fb03 f101 	mul.w	r1, r3, r1
 80026d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026da:	440b      	add	r3, r1
 80026dc:	f503 7303 	add.w	r3, r3, #524	@ 0x20c
 80026e0:	005b      	lsls	r3, r3, #1
 80026e2:	4413      	add	r3, r2
 80026e4:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80026e8:	6a3b      	ldr	r3, [r7, #32]
 80026ea:	005b      	lsls	r3, r3, #1
 80026ec:	3338      	adds	r3, #56	@ 0x38
 80026ee:	443b      	add	r3, r7
 80026f0:	f823 2c2c 	strh.w	r2, [r3, #-44]
				for (k = X; k <= Z; k++) {
 80026f4:	6a3b      	ldr	r3, [r7, #32]
 80026f6:	3301      	adds	r3, #1
 80026f8:	623b      	str	r3, [r7, #32]
 80026fa:	6a3b      	ldr	r3, [r7, #32]
 80026fc:	2b02      	cmp	r3, #2
 80026fe:	dde5      	ble.n	80026cc <fUpdateCalibration7EIG+0x94>
				}
			}

			// apply the offset and scaling and store in vecA
			for (k = X; k <= Z; k++) {
 8002700:	2300      	movs	r3, #0
 8002702:	623b      	str	r3, [r7, #32]
 8002704:	e041      	b.n	800278a <fUpdateCalibration7EIG+0x152>
				MagCal->vecA[k + 3] = (float) ((int32_t) MagCal->BpFast[k][j]
 8002706:	687a      	ldr	r2, [r7, #4]
 8002708:	6a3b      	ldr	r3, [r7, #32]
 800270a:	f44f 7116 	mov.w	r1, #600	@ 0x258
 800270e:	fb03 f101 	mul.w	r1, r3, r1
 8002712:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002714:	440b      	add	r3, r1
 8002716:	f503 7303 	add.w	r3, r3, #524	@ 0x20c
 800271a:	005b      	lsls	r3, r3, #1
 800271c:	4413      	add	r3, r2
 800271e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002722:	461a      	mov	r2, r3
						- (int32_t) iOffset[k]) * fscaling;
 8002724:	6a3b      	ldr	r3, [r7, #32]
 8002726:	005b      	lsls	r3, r3, #1
 8002728:	3338      	adds	r3, #56	@ 0x38
 800272a:	443b      	add	r3, r7
 800272c:	f933 3c2c 	ldrsh.w	r3, [r3, #-44]
 8002730:	1ad3      	subs	r3, r2, r3
				MagCal->vecA[k + 3] = (float) ((int32_t) MagCal->BpFast[k][j]
 8002732:	ee07 3a90 	vmov	s15, r3
 8002736:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800273a:	6a3b      	ldr	r3, [r7, #32]
 800273c:	3303      	adds	r3, #3
						- (int32_t) iOffset[k]) * fscaling;
 800273e:	edd7 7a05 	vldr	s15, [r7, #20]
 8002742:	ee67 7a27 	vmul.f32	s15, s14, s15
				MagCal->vecA[k + 3] = (float) ((int32_t) MagCal->BpFast[k][j]
 8002746:	687a      	ldr	r2, [r7, #4]
 8002748:	33f8      	adds	r3, #248	@ 0xf8
 800274a:	009b      	lsls	r3, r3, #2
 800274c:	4413      	add	r3, r2
 800274e:	edc3 7a00 	vstr	s15, [r3]
				MagCal->vecA[k] = MagCal->vecA[k + 3] * MagCal->vecA[k + 3];
 8002752:	6a3b      	ldr	r3, [r7, #32]
 8002754:	3303      	adds	r3, #3
 8002756:	687a      	ldr	r2, [r7, #4]
 8002758:	33f8      	adds	r3, #248	@ 0xf8
 800275a:	009b      	lsls	r3, r3, #2
 800275c:	4413      	add	r3, r2
 800275e:	ed93 7a00 	vldr	s14, [r3]
 8002762:	6a3b      	ldr	r3, [r7, #32]
 8002764:	3303      	adds	r3, #3
 8002766:	687a      	ldr	r2, [r7, #4]
 8002768:	33f8      	adds	r3, #248	@ 0xf8
 800276a:	009b      	lsls	r3, r3, #2
 800276c:	4413      	add	r3, r2
 800276e:	edd3 7a00 	vldr	s15, [r3]
 8002772:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002776:	687a      	ldr	r2, [r7, #4]
 8002778:	6a3b      	ldr	r3, [r7, #32]
 800277a:	33f8      	adds	r3, #248	@ 0xf8
 800277c:	009b      	lsls	r3, r3, #2
 800277e:	4413      	add	r3, r2
 8002780:	edc3 7a00 	vstr	s15, [r3]
			for (k = X; k <= Z; k++) {
 8002784:	6a3b      	ldr	r3, [r7, #32]
 8002786:	3301      	adds	r3, #1
 8002788:	623b      	str	r3, [r7, #32]
 800278a:	6a3b      	ldr	r3, [r7, #32]
 800278c:	2b02      	cmp	r3, #2
 800278e:	ddba      	ble.n	8002706 <fUpdateCalibration7EIG+0xce>
			// accumulate the on-and above-diagonal terms of
			// MagCal->matA=Sigma{vecA^T * vecA}
			// with the exception of matA[6][6] which will sum to the number
			// of measurements and remembering that vecA[6] equals 1.0F
			// update the right hand column [6] of matA except for matA[6][6]
			for (m = 0; m < 6; m++) {
 8002790:	2300      	movs	r3, #0
 8002792:	61fb      	str	r3, [r7, #28]
 8002794:	e01f      	b.n	80027d6 <fUpdateCalibration7EIG+0x19e>
				MagCal->matA[m][6] += MagCal->vecA[m];
 8002796:	6879      	ldr	r1, [r7, #4]
 8002798:	69fa      	ldr	r2, [r7, #28]
 800279a:	4613      	mov	r3, r2
 800279c:	009b      	lsls	r3, r3, #2
 800279e:	4413      	add	r3, r2
 80027a0:	00db      	lsls	r3, r3, #3
 80027a2:	440b      	add	r3, r1
 80027a4:	33d8      	adds	r3, #216	@ 0xd8
 80027a6:	ed93 7a00 	vldr	s14, [r3]
 80027aa:	687a      	ldr	r2, [r7, #4]
 80027ac:	69fb      	ldr	r3, [r7, #28]
 80027ae:	33f8      	adds	r3, #248	@ 0xf8
 80027b0:	009b      	lsls	r3, r3, #2
 80027b2:	4413      	add	r3, r2
 80027b4:	edd3 7a00 	vldr	s15, [r3]
 80027b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027bc:	6879      	ldr	r1, [r7, #4]
 80027be:	69fa      	ldr	r2, [r7, #28]
 80027c0:	4613      	mov	r3, r2
 80027c2:	009b      	lsls	r3, r3, #2
 80027c4:	4413      	add	r3, r2
 80027c6:	00db      	lsls	r3, r3, #3
 80027c8:	440b      	add	r3, r1
 80027ca:	33d8      	adds	r3, #216	@ 0xd8
 80027cc:	edc3 7a00 	vstr	s15, [r3]
			for (m = 0; m < 6; m++) {
 80027d0:	69fb      	ldr	r3, [r7, #28]
 80027d2:	3301      	adds	r3, #1
 80027d4:	61fb      	str	r3, [r7, #28]
 80027d6:	69fb      	ldr	r3, [r7, #28]
 80027d8:	2b05      	cmp	r3, #5
 80027da:	dddc      	ble.n	8002796 <fUpdateCalibration7EIG+0x15e>
			}
			// update the on and above diagonal terms except for right hand column 6
			for (m = 0; m < 6; m++) {
 80027dc:	2300      	movs	r3, #0
 80027de:	61fb      	str	r3, [r7, #28]
 80027e0:	e037      	b.n	8002852 <fUpdateCalibration7EIG+0x21a>
				for (n = m; n < 6; n++) {
 80027e2:	69fb      	ldr	r3, [r7, #28]
 80027e4:	61bb      	str	r3, [r7, #24]
 80027e6:	e02e      	b.n	8002846 <fUpdateCalibration7EIG+0x20e>
					MagCal->matA[m][n] += MagCal->vecA[m] * MagCal->vecA[n];
 80027e8:	6879      	ldr	r1, [r7, #4]
 80027ea:	69fa      	ldr	r2, [r7, #28]
 80027ec:	4613      	mov	r3, r2
 80027ee:	009b      	lsls	r3, r3, #2
 80027f0:	4413      	add	r3, r2
 80027f2:	005b      	lsls	r3, r3, #1
 80027f4:	69ba      	ldr	r2, [r7, #24]
 80027f6:	4413      	add	r3, r2
 80027f8:	3330      	adds	r3, #48	@ 0x30
 80027fa:	009b      	lsls	r3, r3, #2
 80027fc:	440b      	add	r3, r1
 80027fe:	ed93 7a00 	vldr	s14, [r3]
 8002802:	687a      	ldr	r2, [r7, #4]
 8002804:	69fb      	ldr	r3, [r7, #28]
 8002806:	33f8      	adds	r3, #248	@ 0xf8
 8002808:	009b      	lsls	r3, r3, #2
 800280a:	4413      	add	r3, r2
 800280c:	edd3 6a00 	vldr	s13, [r3]
 8002810:	687a      	ldr	r2, [r7, #4]
 8002812:	69bb      	ldr	r3, [r7, #24]
 8002814:	33f8      	adds	r3, #248	@ 0xf8
 8002816:	009b      	lsls	r3, r3, #2
 8002818:	4413      	add	r3, r2
 800281a:	edd3 7a00 	vldr	s15, [r3]
 800281e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002822:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002826:	6879      	ldr	r1, [r7, #4]
 8002828:	69fa      	ldr	r2, [r7, #28]
 800282a:	4613      	mov	r3, r2
 800282c:	009b      	lsls	r3, r3, #2
 800282e:	4413      	add	r3, r2
 8002830:	005b      	lsls	r3, r3, #1
 8002832:	69ba      	ldr	r2, [r7, #24]
 8002834:	4413      	add	r3, r2
 8002836:	3330      	adds	r3, #48	@ 0x30
 8002838:	009b      	lsls	r3, r3, #2
 800283a:	440b      	add	r3, r1
 800283c:	edc3 7a00 	vstr	s15, [r3]
				for (n = m; n < 6; n++) {
 8002840:	69bb      	ldr	r3, [r7, #24]
 8002842:	3301      	adds	r3, #1
 8002844:	61bb      	str	r3, [r7, #24]
 8002846:	69bb      	ldr	r3, [r7, #24]
 8002848:	2b05      	cmp	r3, #5
 800284a:	ddcd      	ble.n	80027e8 <fUpdateCalibration7EIG+0x1b0>
			for (m = 0; m < 6; m++) {
 800284c:	69fb      	ldr	r3, [r7, #28]
 800284e:	3301      	adds	r3, #1
 8002850:	61fb      	str	r3, [r7, #28]
 8002852:	69fb      	ldr	r3, [r7, #28]
 8002854:	2b05      	cmp	r3, #5
 8002856:	ddc4      	ble.n	80027e2 <fUpdateCalibration7EIG+0x1aa>
				}
			}

			// increment the measurement counter for the next iteration
			iCount++;
 8002858:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 800285c:	b29b      	uxth	r3, r3
 800285e:	3301      	adds	r3, #1
 8002860:	b29b      	uxth	r3, r3
 8002862:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	for (j = 0; j < MAGBUFFSIZE; j++) {
 8002864:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002866:	3301      	adds	r3, #1
 8002868:	627b      	str	r3, [r7, #36]	@ 0x24
 800286a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800286c:	f5b3 7f16 	cmp.w	r3, #600	@ 0x258
 8002870:	f6ff af1a 	blt.w	80026a8 <fUpdateCalibration7EIG+0x70>
		}
	}

	// finally set the last element matA[6][6] to the number of measurements
	MagCal->matA[6][6] = (float) iCount;
 8002874:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 8002878:	ee07 3a90 	vmov	s15, r3
 800287c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	edc3 7a72 	vstr	s15, [r3, #456]	@ 0x1c8

	// store the number of measurements accumulated
	MagCal->MagBufferCount = iCount;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800288c:	461a      	mov	r2, r3
 800288e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8002890:	f8a2 3482 	strh.w	r3, [r2, #1154]	@ 0x482

	// copy the above diagonal elements of matA to below the diagonal
	for (m = 1; m < 7; m++) {
 8002894:	2301      	movs	r3, #1
 8002896:	61fb      	str	r3, [r7, #28]
 8002898:	e024      	b.n	80028e4 <fUpdateCalibration7EIG+0x2ac>
		for (n = 0; n < m; n++) {
 800289a:	2300      	movs	r3, #0
 800289c:	61bb      	str	r3, [r7, #24]
 800289e:	e01a      	b.n	80028d6 <fUpdateCalibration7EIG+0x29e>
			MagCal->matA[m][n] = MagCal->matA[n][m];
 80028a0:	6879      	ldr	r1, [r7, #4]
 80028a2:	69ba      	ldr	r2, [r7, #24]
 80028a4:	4613      	mov	r3, r2
 80028a6:	009b      	lsls	r3, r3, #2
 80028a8:	4413      	add	r3, r2
 80028aa:	005b      	lsls	r3, r3, #1
 80028ac:	69fa      	ldr	r2, [r7, #28]
 80028ae:	4413      	add	r3, r2
 80028b0:	3330      	adds	r3, #48	@ 0x30
 80028b2:	009b      	lsls	r3, r3, #2
 80028b4:	440b      	add	r3, r1
 80028b6:	6819      	ldr	r1, [r3, #0]
 80028b8:	6878      	ldr	r0, [r7, #4]
 80028ba:	69fa      	ldr	r2, [r7, #28]
 80028bc:	4613      	mov	r3, r2
 80028be:	009b      	lsls	r3, r3, #2
 80028c0:	4413      	add	r3, r2
 80028c2:	005b      	lsls	r3, r3, #1
 80028c4:	69ba      	ldr	r2, [r7, #24]
 80028c6:	4413      	add	r3, r2
 80028c8:	3330      	adds	r3, #48	@ 0x30
 80028ca:	009b      	lsls	r3, r3, #2
 80028cc:	4403      	add	r3, r0
 80028ce:	6019      	str	r1, [r3, #0]
		for (n = 0; n < m; n++) {
 80028d0:	69bb      	ldr	r3, [r7, #24]
 80028d2:	3301      	adds	r3, #1
 80028d4:	61bb      	str	r3, [r7, #24]
 80028d6:	69ba      	ldr	r2, [r7, #24]
 80028d8:	69fb      	ldr	r3, [r7, #28]
 80028da:	429a      	cmp	r2, r3
 80028dc:	dbe0      	blt.n	80028a0 <fUpdateCalibration7EIG+0x268>
	for (m = 1; m < 7; m++) {
 80028de:	69fb      	ldr	r3, [r7, #28]
 80028e0:	3301      	adds	r3, #1
 80028e2:	61fb      	str	r3, [r7, #28]
 80028e4:	69fb      	ldr	r3, [r7, #28]
 80028e6:	2b06      	cmp	r3, #6
 80028e8:	ddd7      	ble.n	800289a <fUpdateCalibration7EIG+0x262>
		}
	}

	// set tmpA7x1 to the unsorted eigenvalues and matB to the unsorted eigenvectors of matA
	eigencompute(MagCal->matA, MagCal->vecA, MagCal->matB, 7);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	f103 00c0 	add.w	r0, r3, #192	@ 0xc0
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	f503 7214 	add.w	r2, r3, #592	@ 0x250
 80028fc:	2307      	movs	r3, #7
 80028fe:	f003 fd75 	bl	80063ec <eigencompute>

	// find the smallest eigenvalue
	j = 0;
 8002902:	2300      	movs	r3, #0
 8002904:	627b      	str	r3, [r7, #36]	@ 0x24
	for (i = 1; i < 7; i++) {
 8002906:	2301      	movs	r3, #1
 8002908:	62bb      	str	r3, [r7, #40]	@ 0x28
 800290a:	e025      	b.n	8002958 <fUpdateCalibration7EIG+0x320>
 800290c:	200001ec 	.word	0x200001ec
 8002910:	3b03126f 	.word	0x3b03126f
 8002914:	00000000 	.word	0x00000000
 8002918:	beaaaaab 	.word	0xbeaaaaab
 800291c:	be2aaaab 	.word	0xbe2aaaab
 8002920:	42480000 	.word	0x42480000
 8002924:	3dcccccd 	.word	0x3dcccccd
		if (MagCal->vecA[i] < MagCal->vecA[j]) {
 8002928:	687a      	ldr	r2, [r7, #4]
 800292a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800292c:	33f8      	adds	r3, #248	@ 0xf8
 800292e:	009b      	lsls	r3, r3, #2
 8002930:	4413      	add	r3, r2
 8002932:	ed93 7a00 	vldr	s14, [r3]
 8002936:	687a      	ldr	r2, [r7, #4]
 8002938:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800293a:	33f8      	adds	r3, #248	@ 0xf8
 800293c:	009b      	lsls	r3, r3, #2
 800293e:	4413      	add	r3, r2
 8002940:	edd3 7a00 	vldr	s15, [r3]
 8002944:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002948:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800294c:	d501      	bpl.n	8002952 <fUpdateCalibration7EIG+0x31a>
			j = i;
 800294e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002950:	627b      	str	r3, [r7, #36]	@ 0x24
	for (i = 1; i < 7; i++) {
 8002952:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002954:	3301      	adds	r3, #1
 8002956:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002958:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800295a:	2b06      	cmp	r3, #6
 800295c:	dde4      	ble.n	8002928 <fUpdateCalibration7EIG+0x2f0>
		}
	}

	// set ellipsoid matrix A to the solution vector with smallest eigenvalue,
	// compute its determinant and the hard iron offset (scaled and offset)
	f3x3matrixAeqScalar(MagCal->A, 0.0F);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	3378      	adds	r3, #120	@ 0x78
 8002962:	ed1f 0a14 	vldr	s0, [pc, #-80]	@ 8002914 <fUpdateCalibration7EIG+0x2dc>
 8002966:	4618      	mov	r0, r3
 8002968:	f003 fb3e 	bl	8005fe8 <f3x3matrixAeqScalar>
	det = 1.0F;
 800296c:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8002970:	637b      	str	r3, [r7, #52]	@ 0x34
	for (k = X; k <= Z; k++) {
 8002972:	2300      	movs	r3, #0
 8002974:	623b      	str	r3, [r7, #32]
 8002976:	e043      	b.n	8002a00 <fUpdateCalibration7EIG+0x3c8>
		MagCal->A[k][k] = MagCal->matB[k][j];
 8002978:	6879      	ldr	r1, [r7, #4]
 800297a:	6a3a      	ldr	r2, [r7, #32]
 800297c:	4613      	mov	r3, r2
 800297e:	009b      	lsls	r3, r3, #2
 8002980:	4413      	add	r3, r2
 8002982:	005b      	lsls	r3, r3, #1
 8002984:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002986:	4413      	add	r3, r2
 8002988:	3394      	adds	r3, #148	@ 0x94
 800298a:	009b      	lsls	r3, r3, #2
 800298c:	440b      	add	r3, r1
 800298e:	681a      	ldr	r2, [r3, #0]
 8002990:	6879      	ldr	r1, [r7, #4]
 8002992:	6a3b      	ldr	r3, [r7, #32]
 8002994:	011b      	lsls	r3, r3, #4
 8002996:	440b      	add	r3, r1
 8002998:	3378      	adds	r3, #120	@ 0x78
 800299a:	601a      	str	r2, [r3, #0]
		det *= MagCal->A[k][k];
 800299c:	687a      	ldr	r2, [r7, #4]
 800299e:	6a3b      	ldr	r3, [r7, #32]
 80029a0:	011b      	lsls	r3, r3, #4
 80029a2:	4413      	add	r3, r2
 80029a4:	3378      	adds	r3, #120	@ 0x78
 80029a6:	edd3 7a00 	vldr	s15, [r3]
 80029aa:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 80029ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029b2:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
		MagCal->trV[k] = -0.5F * MagCal->matB[k + 3][j] / MagCal->A[k][k];
 80029b6:	6a3b      	ldr	r3, [r7, #32]
 80029b8:	1cda      	adds	r2, r3, #3
 80029ba:	6879      	ldr	r1, [r7, #4]
 80029bc:	4613      	mov	r3, r2
 80029be:	009b      	lsls	r3, r3, #2
 80029c0:	4413      	add	r3, r2
 80029c2:	005b      	lsls	r3, r3, #1
 80029c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029c6:	4413      	add	r3, r2
 80029c8:	3394      	adds	r3, #148	@ 0x94
 80029ca:	009b      	lsls	r3, r3, #2
 80029cc:	440b      	add	r3, r1
 80029ce:	edd3 7a00 	vldr	s15, [r3]
 80029d2:	eebe 7a00 	vmov.f32	s14, #224	@ 0xbf000000 -0.5
 80029d6:	ee67 6a87 	vmul.f32	s13, s15, s14
 80029da:	687a      	ldr	r2, [r7, #4]
 80029dc:	6a3b      	ldr	r3, [r7, #32]
 80029de:	011b      	lsls	r3, r3, #4
 80029e0:	4413      	add	r3, r2
 80029e2:	3378      	adds	r3, #120	@ 0x78
 80029e4:	ed93 7a00 	vldr	s14, [r3]
 80029e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80029ec:	687a      	ldr	r2, [r7, #4]
 80029ee:	6a3b      	ldr	r3, [r7, #32]
 80029f0:	3310      	adds	r3, #16
 80029f2:	009b      	lsls	r3, r3, #2
 80029f4:	4413      	add	r3, r2
 80029f6:	edc3 7a00 	vstr	s15, [r3]
	for (k = X; k <= Z; k++) {
 80029fa:	6a3b      	ldr	r3, [r7, #32]
 80029fc:	3301      	adds	r3, #1
 80029fe:	623b      	str	r3, [r7, #32]
 8002a00:	6a3b      	ldr	r3, [r7, #32]
 8002a02:	2b02      	cmp	r3, #2
 8002a04:	ddb8      	ble.n	8002978 <fUpdateCalibration7EIG+0x340>
	}

	// negate A if it has negative determinant
	if (det < 0.0F) {
 8002a06:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8002a0a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002a0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a12:	d51a      	bpl.n	8002a4a <fUpdateCalibration7EIG+0x412>
		f3x3matrixAeqMinusA(MagCal->A);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	3378      	adds	r3, #120	@ 0x78
 8002a18:	4618      	mov	r0, r3
 8002a1a:	f003 fb57 	bl	80060cc <f3x3matrixAeqMinusA>
		MagCal->matB[6][j] = -MagCal->matB[6][j];
 8002a1e:	687a      	ldr	r2, [r7, #4]
 8002a20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a22:	33d0      	adds	r3, #208	@ 0xd0
 8002a24:	009b      	lsls	r3, r3, #2
 8002a26:	4413      	add	r3, r2
 8002a28:	edd3 7a00 	vldr	s15, [r3]
 8002a2c:	eef1 7a67 	vneg.f32	s15, s15
 8002a30:	687a      	ldr	r2, [r7, #4]
 8002a32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a34:	33d0      	adds	r3, #208	@ 0xd0
 8002a36:	009b      	lsls	r3, r3, #2
 8002a38:	4413      	add	r3, r2
 8002a3a:	edc3 7a00 	vstr	s15, [r3]
		det = -det;
 8002a3e:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8002a42:	eef1 7a67 	vneg.f32	s15, s15
 8002a46:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
	}

	// set ftmp to the square of the trial geomagnetic field strength B
	// (counts times FMATRIXSCALING)
	ftmp = -MagCal->matB[6][j];
 8002a4a:	687a      	ldr	r2, [r7, #4]
 8002a4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a4e:	33d0      	adds	r3, #208	@ 0xd0
 8002a50:	009b      	lsls	r3, r3, #2
 8002a52:	4413      	add	r3, r2
 8002a54:	edd3 7a00 	vldr	s15, [r3]
 8002a58:	eef1 7a67 	vneg.f32	s15, s15
 8002a5c:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
	for (k = X; k <= Z; k++) {
 8002a60:	2300      	movs	r3, #0
 8002a62:	623b      	str	r3, [r7, #32]
 8002a64:	e021      	b.n	8002aaa <fUpdateCalibration7EIG+0x472>
		ftmp += MagCal->A[k][k] * MagCal->trV[k] * MagCal->trV[k];
 8002a66:	687a      	ldr	r2, [r7, #4]
 8002a68:	6a3b      	ldr	r3, [r7, #32]
 8002a6a:	011b      	lsls	r3, r3, #4
 8002a6c:	4413      	add	r3, r2
 8002a6e:	3378      	adds	r3, #120	@ 0x78
 8002a70:	ed93 7a00 	vldr	s14, [r3]
 8002a74:	687a      	ldr	r2, [r7, #4]
 8002a76:	6a3b      	ldr	r3, [r7, #32]
 8002a78:	3310      	adds	r3, #16
 8002a7a:	009b      	lsls	r3, r3, #2
 8002a7c:	4413      	add	r3, r2
 8002a7e:	edd3 7a00 	vldr	s15, [r3]
 8002a82:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a86:	687a      	ldr	r2, [r7, #4]
 8002a88:	6a3b      	ldr	r3, [r7, #32]
 8002a8a:	3310      	adds	r3, #16
 8002a8c:	009b      	lsls	r3, r3, #2
 8002a8e:	4413      	add	r3, r2
 8002a90:	edd3 7a00 	vldr	s15, [r3]
 8002a94:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a98:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8002a9c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002aa0:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
	for (k = X; k <= Z; k++) {
 8002aa4:	6a3b      	ldr	r3, [r7, #32]
 8002aa6:	3301      	adds	r3, #1
 8002aa8:	623b      	str	r3, [r7, #32]
 8002aaa:	6a3b      	ldr	r3, [r7, #32]
 8002aac:	2b02      	cmp	r3, #2
 8002aae:	ddda      	ble.n	8002a66 <fUpdateCalibration7EIG+0x42e>
	}

	// calculate the trial normalized fit error as a percentage
	MagCal->trFitErrorpc = 50.0F
			* sqrtf(fabs(MagCal->vecA[j]) / (float) MagCal->MagBufferCount)
 8002ab0:	687a      	ldr	r2, [r7, #4]
 8002ab2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ab4:	33f8      	adds	r3, #248	@ 0xf8
 8002ab6:	009b      	lsls	r3, r3, #2
 8002ab8:	4413      	add	r3, r2
 8002aba:	edd3 7a00 	vldr	s15, [r3]
 8002abe:	eeb0 7ae7 	vabs.f32	s14, s15
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002ac8:	f9b3 3482 	ldrsh.w	r3, [r3, #1154]	@ 0x482
 8002acc:	ee07 3a90 	vmov	s15, r3
 8002ad0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ad4:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002ad8:	eeb0 0a66 	vmov.f32	s0, s13
 8002adc:	f00e fe70 	bl	80117c0 <sqrtf>
 8002ae0:	eef0 7a40 	vmov.f32	s15, s0
 8002ae4:	ed1f 7a72 	vldr	s14, [pc, #-456]	@ 8002920 <fUpdateCalibration7EIG+0x2e8>
 8002ae8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002aec:	ee17 0a90 	vmov	r0, s15
 8002af0:	f7fd fd02 	bl	80004f8 <__aeabi_f2d>
 8002af4:	4604      	mov	r4, r0
 8002af6:	460d      	mov	r5, r1
			/ fabs(ftmp);
 8002af8:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8002afc:	eef0 7ae7 	vabs.f32	s15, s15
 8002b00:	ee17 0a90 	vmov	r0, s15
 8002b04:	f7fd fcf8 	bl	80004f8 <__aeabi_f2d>
 8002b08:	4602      	mov	r2, r0
 8002b0a:	460b      	mov	r3, r1
 8002b0c:	4620      	mov	r0, r4
 8002b0e:	4629      	mov	r1, r5
 8002b10:	f7fd fe74 	bl	80007fc <__aeabi_ddiv>
 8002b14:	4602      	mov	r2, r0
 8002b16:	460b      	mov	r3, r1
 8002b18:	4610      	mov	r0, r2
 8002b1a:	4619      	mov	r1, r3
 8002b1c:	f7fd fff4 	bl	8000b08 <__aeabi_d2f>
 8002b20:	4602      	mov	r2, r0
	MagCal->trFitErrorpc = 50.0F
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	675a      	str	r2, [r3, #116]	@ 0x74

	// normalize the ellipsoid matrix A to unit determinant
	f3x3matrixAeqAxScalar(MagCal->A, powf(det, -(ONETHIRD)));
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	f103 0478 	add.w	r4, r3, #120	@ 0x78
 8002b2c:	ed5f 0a86 	vldr	s1, [pc, #-536]	@ 8002918 <fUpdateCalibration7EIG+0x2e0>
 8002b30:	ed97 0a0d 	vldr	s0, [r7, #52]	@ 0x34
 8002b34:	f00e fdec 	bl	8011710 <powf>
 8002b38:	eef0 7a40 	vmov.f32	s15, s0
 8002b3c:	eeb0 0a67 	vmov.f32	s0, s15
 8002b40:	4620      	mov	r0, r4
 8002b42:	f003 fa87 	bl	8006054 <f3x3matrixAeqAxScalar>

	// convert the geomagnetic field strength B into uT for normalized
	// soft iron matrix A and normalize
	MagCal->trB = sqrtf(fabs(ftmp)) * DEFAULTB * powf(det, -(ONESIXTH));
 8002b46:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8002b4a:	eef0 7ae7 	vabs.f32	s15, s15
 8002b4e:	eeb0 0a67 	vmov.f32	s0, s15
 8002b52:	f00e fe35 	bl	80117c0 <sqrtf>
 8002b56:	eef0 7a40 	vmov.f32	s15, s0
 8002b5a:	ed1f 7a8f 	vldr	s14, [pc, #-572]	@ 8002920 <fUpdateCalibration7EIG+0x2e8>
 8002b5e:	ee27 8a87 	vmul.f32	s16, s15, s14
 8002b62:	ed5f 0a92 	vldr	s1, [pc, #-584]	@ 800291c <fUpdateCalibration7EIG+0x2e4>
 8002b66:	ed97 0a0d 	vldr	s0, [r7, #52]	@ 0x34
 8002b6a:	f00e fdd1 	bl	8011710 <powf>
 8002b6e:	eef0 7a40 	vmov.f32	s15, s0
 8002b72:	ee68 7a27 	vmul.f32	s15, s16, s15
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	edc3 7a1c 	vstr	s15, [r3, #112]	@ 0x70

	// compute trial invW from the square root of A also with normalized
	// determinant and hard iron offset in uT
	f3x3matrixAeqI(MagCal->trinvW);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	334c      	adds	r3, #76	@ 0x4c
 8002b80:	4618      	mov	r0, r3
 8002b82:	f003 f9a5 	bl	8005ed0 <f3x3matrixAeqI>
	for (k = X; k <= Z; k++) {
 8002b86:	2300      	movs	r3, #0
 8002b88:	623b      	str	r3, [r7, #32]
 8002b8a:	e03a      	b.n	8002c02 <fUpdateCalibration7EIG+0x5ca>
		MagCal->trinvW[k][k] = sqrtf(fabs(MagCal->A[k][k]));
 8002b8c:	687a      	ldr	r2, [r7, #4]
 8002b8e:	6a3b      	ldr	r3, [r7, #32]
 8002b90:	011b      	lsls	r3, r3, #4
 8002b92:	4413      	add	r3, r2
 8002b94:	3378      	adds	r3, #120	@ 0x78
 8002b96:	edd3 7a00 	vldr	s15, [r3]
 8002b9a:	eef0 7ae7 	vabs.f32	s15, s15
 8002b9e:	eeb0 0a67 	vmov.f32	s0, s15
 8002ba2:	f00e fe0d 	bl	80117c0 <sqrtf>
 8002ba6:	eef0 7a40 	vmov.f32	s15, s0
 8002baa:	687a      	ldr	r2, [r7, #4]
 8002bac:	6a3b      	ldr	r3, [r7, #32]
 8002bae:	011b      	lsls	r3, r3, #4
 8002bb0:	4413      	add	r3, r2
 8002bb2:	334c      	adds	r3, #76	@ 0x4c
 8002bb4:	edc3 7a00 	vstr	s15, [r3]
		MagCal->trV[k] = MagCal->trV[k] * DEFAULTB
 8002bb8:	687a      	ldr	r2, [r7, #4]
 8002bba:	6a3b      	ldr	r3, [r7, #32]
 8002bbc:	3310      	adds	r3, #16
 8002bbe:	009b      	lsls	r3, r3, #2
 8002bc0:	4413      	add	r3, r2
 8002bc2:	edd3 7a00 	vldr	s15, [r3]
 8002bc6:	ed1f 7aaa 	vldr	s14, [pc, #-680]	@ 8002920 <fUpdateCalibration7EIG+0x2e8>
 8002bca:	ee27 7a87 	vmul.f32	s14, s15, s14
				+ (float) iOffset[k] * FXOS8700_UTPERCOUNT;
 8002bce:	6a3b      	ldr	r3, [r7, #32]
 8002bd0:	005b      	lsls	r3, r3, #1
 8002bd2:	3338      	adds	r3, #56	@ 0x38
 8002bd4:	443b      	add	r3, r7
 8002bd6:	f933 3c2c 	ldrsh.w	r3, [r3, #-44]
 8002bda:	ee07 3a90 	vmov	s15, r3
 8002bde:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002be2:	ed5f 6ab0 	vldr	s13, [pc, #-704]	@ 8002924 <fUpdateCalibration7EIG+0x2ec>
 8002be6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002bea:	ee77 7a27 	vadd.f32	s15, s14, s15
		MagCal->trV[k] = MagCal->trV[k] * DEFAULTB
 8002bee:	687a      	ldr	r2, [r7, #4]
 8002bf0:	6a3b      	ldr	r3, [r7, #32]
 8002bf2:	3310      	adds	r3, #16
 8002bf4:	009b      	lsls	r3, r3, #2
 8002bf6:	4413      	add	r3, r2
 8002bf8:	edc3 7a00 	vstr	s15, [r3]
	for (k = X; k <= Z; k++) {
 8002bfc:	6a3b      	ldr	r3, [r7, #32]
 8002bfe:	3301      	adds	r3, #1
 8002c00:	623b      	str	r3, [r7, #32]
 8002c02:	6a3b      	ldr	r3, [r7, #32]
 8002c04:	2b02      	cmp	r3, #2
 8002c06:	ddc1      	ble.n	8002b8c <fUpdateCalibration7EIG+0x554>
	}
}
 8002c08:	bf00      	nop
 8002c0a:	bf00      	nop
 8002c0c:	3738      	adds	r7, #56	@ 0x38
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	ecbd 8b02 	vpop	{d8}
 8002c14:	bdb0      	pop	{r4, r5, r7, pc}
 8002c16:	bf00      	nop

08002c18 <fUpdateCalibration10EIG>:

static void fUpdateCalibration10EIG(MagCalibration_t *MagCal) {
 8002c18:	b590      	push	{r4, r7, lr}
 8002c1a:	b08f      	sub	sp, #60	@ 0x3c
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
	float ftmp;					// scratch variable
	int16_t iOffset[3];	// offset to remove large DC hard iron bias in matrix
	int16_t iCount;				// number of measurements counted
	int i, j, k, m, n;			// loop counters

	magcal_type = 3;
 8002c20:	4bb2      	ldr	r3, [pc, #712]	@ (8002eec <fUpdateCalibration10EIG+0x2d4>)
 8002c22:	2203      	movs	r2, #3
 8002c24:	601a      	str	r2, [r3, #0]

	// compute fscaling to reduce multiplications later
	fscaling = FXOS8700_UTPERCOUNT / DEFAULTB;
 8002c26:	4bb2      	ldr	r3, [pc, #712]	@ (8002ef0 <fUpdateCalibration10EIG+0x2d8>)
 8002c28:	61bb      	str	r3, [r7, #24]

	// the offsets are guaranteed to be set from the first element but to avoid compiler error
	iOffset[X] = iOffset[Y] = iOffset[Z] = 0;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	823b      	strh	r3, [r7, #16]
 8002c2e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002c32:	81fb      	strh	r3, [r7, #14]
 8002c34:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002c38:	81bb      	strh	r3, [r7, #12]

	// zero the on and above diagonal elements of the 10x10 symmetric measurement matrix matA
	for (m = 0; m < 10; m++) {
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	623b      	str	r3, [r7, #32]
 8002c3e:	e019      	b.n	8002c74 <fUpdateCalibration10EIG+0x5c>
		for (n = m; n < 10; n++) {
 8002c40:	6a3b      	ldr	r3, [r7, #32]
 8002c42:	61fb      	str	r3, [r7, #28]
 8002c44:	e010      	b.n	8002c68 <fUpdateCalibration10EIG+0x50>
			MagCal->matA[m][n] = 0.0F;
 8002c46:	6879      	ldr	r1, [r7, #4]
 8002c48:	6a3a      	ldr	r2, [r7, #32]
 8002c4a:	4613      	mov	r3, r2
 8002c4c:	009b      	lsls	r3, r3, #2
 8002c4e:	4413      	add	r3, r2
 8002c50:	005b      	lsls	r3, r3, #1
 8002c52:	69fa      	ldr	r2, [r7, #28]
 8002c54:	4413      	add	r3, r2
 8002c56:	3330      	adds	r3, #48	@ 0x30
 8002c58:	009b      	lsls	r3, r3, #2
 8002c5a:	440b      	add	r3, r1
 8002c5c:	f04f 0200 	mov.w	r2, #0
 8002c60:	601a      	str	r2, [r3, #0]
		for (n = m; n < 10; n++) {
 8002c62:	69fb      	ldr	r3, [r7, #28]
 8002c64:	3301      	adds	r3, #1
 8002c66:	61fb      	str	r3, [r7, #28]
 8002c68:	69fb      	ldr	r3, [r7, #28]
 8002c6a:	2b09      	cmp	r3, #9
 8002c6c:	ddeb      	ble.n	8002c46 <fUpdateCalibration10EIG+0x2e>
	for (m = 0; m < 10; m++) {
 8002c6e:	6a3b      	ldr	r3, [r7, #32]
 8002c70:	3301      	adds	r3, #1
 8002c72:	623b      	str	r3, [r7, #32]
 8002c74:	6a3b      	ldr	r3, [r7, #32]
 8002c76:	2b09      	cmp	r3, #9
 8002c78:	dde2      	ble.n	8002c40 <fUpdateCalibration10EIG+0x28>
		}
	}

	// sum between MINEQUATIONS to MAXEQUATIONS entries into the 10x10 product matrix matA
	iCount = 0;
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	867b      	strh	r3, [r7, #50]	@ 0x32
	for (j = 0; j < MAGBUFFSIZE; j++) {
 8002c7e:	2300      	movs	r3, #0
 8002c80:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002c82:	e117      	b.n	8002eb4 <fUpdateCalibration10EIG+0x29c>
		if (MagCal->valid[j]) {
 8002c84:	687a      	ldr	r2, [r7, #4]
 8002c86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c88:	4413      	add	r3, r2
 8002c8a:	f503 5391 	add.w	r3, r3, #4640	@ 0x1220
 8002c8e:	330a      	adds	r3, #10
 8002c90:	f993 3000 	ldrsb.w	r3, [r3]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	f000 810a 	beq.w	8002eae <fUpdateCalibration10EIG+0x296>
			// use first valid magnetic buffer entry as estimate for offset
			// to help solution (bit counts)
			if (iCount == 0) {
 8002c9a:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d11c      	bne.n	8002cdc <fUpdateCalibration10EIG+0xc4>
				for (k = X; k <= Z; k++) {
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ca6:	e016      	b.n	8002cd6 <fUpdateCalibration10EIG+0xbe>
					iOffset[k] = MagCal->BpFast[k][j];
 8002ca8:	687a      	ldr	r2, [r7, #4]
 8002caa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cac:	f44f 7116 	mov.w	r1, #600	@ 0x258
 8002cb0:	fb03 f101 	mul.w	r1, r3, r1
 8002cb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cb6:	440b      	add	r3, r1
 8002cb8:	f503 7303 	add.w	r3, r3, #524	@ 0x20c
 8002cbc:	005b      	lsls	r3, r3, #1
 8002cbe:	4413      	add	r3, r2
 8002cc0:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8002cc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cc6:	005b      	lsls	r3, r3, #1
 8002cc8:	3338      	adds	r3, #56	@ 0x38
 8002cca:	443b      	add	r3, r7
 8002ccc:	f823 2c2c 	strh.w	r2, [r3, #-44]
				for (k = X; k <= Z; k++) {
 8002cd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cd2:	3301      	adds	r3, #1
 8002cd4:	627b      	str	r3, [r7, #36]	@ 0x24
 8002cd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cd8:	2b02      	cmp	r3, #2
 8002cda:	dde5      	ble.n	8002ca8 <fUpdateCalibration10EIG+0x90>
				}
			}

			// apply the fixed offset and scaling and enter into vecA[6-8]
			for (k = X; k <= Z; k++) {
 8002cdc:	2300      	movs	r3, #0
 8002cde:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ce0:	e028      	b.n	8002d34 <fUpdateCalibration10EIG+0x11c>
				MagCal->vecA[k + 6] = (float) ((int32_t) MagCal->BpFast[k][j]
 8002ce2:	687a      	ldr	r2, [r7, #4]
 8002ce4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ce6:	f44f 7116 	mov.w	r1, #600	@ 0x258
 8002cea:	fb03 f101 	mul.w	r1, r3, r1
 8002cee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cf0:	440b      	add	r3, r1
 8002cf2:	f503 7303 	add.w	r3, r3, #524	@ 0x20c
 8002cf6:	005b      	lsls	r3, r3, #1
 8002cf8:	4413      	add	r3, r2
 8002cfa:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002cfe:	461a      	mov	r2, r3
						- (int32_t) iOffset[k]) * fscaling;
 8002d00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d02:	005b      	lsls	r3, r3, #1
 8002d04:	3338      	adds	r3, #56	@ 0x38
 8002d06:	443b      	add	r3, r7
 8002d08:	f933 3c2c 	ldrsh.w	r3, [r3, #-44]
 8002d0c:	1ad3      	subs	r3, r2, r3
				MagCal->vecA[k + 6] = (float) ((int32_t) MagCal->BpFast[k][j]
 8002d0e:	ee07 3a90 	vmov	s15, r3
 8002d12:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002d16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d18:	3306      	adds	r3, #6
						- (int32_t) iOffset[k]) * fscaling;
 8002d1a:	edd7 7a06 	vldr	s15, [r7, #24]
 8002d1e:	ee67 7a27 	vmul.f32	s15, s14, s15
				MagCal->vecA[k + 6] = (float) ((int32_t) MagCal->BpFast[k][j]
 8002d22:	687a      	ldr	r2, [r7, #4]
 8002d24:	33f8      	adds	r3, #248	@ 0xf8
 8002d26:	009b      	lsls	r3, r3, #2
 8002d28:	4413      	add	r3, r2
 8002d2a:	edc3 7a00 	vstr	s15, [r3]
			for (k = X; k <= Z; k++) {
 8002d2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d30:	3301      	adds	r3, #1
 8002d32:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d36:	2b02      	cmp	r3, #2
 8002d38:	ddd3      	ble.n	8002ce2 <fUpdateCalibration10EIG+0xca>
			}

			// compute measurement vector elements vecA[0-5] from vecA[6-8]
			MagCal->vecA[0] = MagCal->vecA[6] * MagCal->vecA[6];
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	ed93 7afe 	vldr	s14, [r3, #1016]	@ 0x3f8
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	edd3 7afe 	vldr	s15, [r3, #1016]	@ 0x3f8
 8002d46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	edc3 7af8 	vstr	s15, [r3, #992]	@ 0x3e0
			MagCal->vecA[1] = 2.0F * MagCal->vecA[6] * MagCal->vecA[7];
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	edd3 7afe 	vldr	s15, [r3, #1016]	@ 0x3f8
 8002d56:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	edd3 7aff 	vldr	s15, [r3, #1020]	@ 0x3fc
 8002d60:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	edc3 7af9 	vstr	s15, [r3, #996]	@ 0x3e4
			MagCal->vecA[2] = 2.0F * MagCal->vecA[6] * MagCal->vecA[8];
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	edd3 7afe 	vldr	s15, [r3, #1016]	@ 0x3f8
 8002d70:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002d7a:	edd3 7a00 	vldr	s15, [r3]
 8002d7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	edc3 7afa 	vstr	s15, [r3, #1000]	@ 0x3e8
			MagCal->vecA[3] = MagCal->vecA[7] * MagCal->vecA[7];
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	ed93 7aff 	vldr	s14, [r3, #1020]	@ 0x3fc
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	edd3 7aff 	vldr	s15, [r3, #1020]	@ 0x3fc
 8002d94:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	edc3 7afb 	vstr	s15, [r3, #1004]	@ 0x3ec
			MagCal->vecA[4] = 2.0F * MagCal->vecA[7] * MagCal->vecA[8];
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	edd3 7aff 	vldr	s15, [r3, #1020]	@ 0x3fc
 8002da4:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002dae:	edd3 7a00 	vldr	s15, [r3]
 8002db2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	edc3 7afc 	vstr	s15, [r3, #1008]	@ 0x3f0
			MagCal->vecA[5] = MagCal->vecA[8] * MagCal->vecA[8];
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002dc2:	ed93 7a00 	vldr	s14, [r3]
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002dcc:	edd3 7a00 	vldr	s15, [r3]
 8002dd0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	edc3 7afd 	vstr	s15, [r3, #1012]	@ 0x3f4

			// accumulate the on-and above-diagonal terms of matA=Sigma{vecA^T * vecA}
			// with the exception of matA[9][9] which equals the number of measurements
			// update the right hand column [9] of matA[0-8][9] ignoring matA[9][9]
			for (m = 0; m < 9; m++) {
 8002dda:	2300      	movs	r3, #0
 8002ddc:	623b      	str	r3, [r7, #32]
 8002dde:	e01f      	b.n	8002e20 <fUpdateCalibration10EIG+0x208>
				MagCal->matA[m][9] += MagCal->vecA[m];
 8002de0:	6879      	ldr	r1, [r7, #4]
 8002de2:	6a3a      	ldr	r2, [r7, #32]
 8002de4:	4613      	mov	r3, r2
 8002de6:	009b      	lsls	r3, r3, #2
 8002de8:	4413      	add	r3, r2
 8002dea:	00db      	lsls	r3, r3, #3
 8002dec:	440b      	add	r3, r1
 8002dee:	33e4      	adds	r3, #228	@ 0xe4
 8002df0:	ed93 7a00 	vldr	s14, [r3]
 8002df4:	687a      	ldr	r2, [r7, #4]
 8002df6:	6a3b      	ldr	r3, [r7, #32]
 8002df8:	33f8      	adds	r3, #248	@ 0xf8
 8002dfa:	009b      	lsls	r3, r3, #2
 8002dfc:	4413      	add	r3, r2
 8002dfe:	edd3 7a00 	vldr	s15, [r3]
 8002e02:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e06:	6879      	ldr	r1, [r7, #4]
 8002e08:	6a3a      	ldr	r2, [r7, #32]
 8002e0a:	4613      	mov	r3, r2
 8002e0c:	009b      	lsls	r3, r3, #2
 8002e0e:	4413      	add	r3, r2
 8002e10:	00db      	lsls	r3, r3, #3
 8002e12:	440b      	add	r3, r1
 8002e14:	33e4      	adds	r3, #228	@ 0xe4
 8002e16:	edc3 7a00 	vstr	s15, [r3]
			for (m = 0; m < 9; m++) {
 8002e1a:	6a3b      	ldr	r3, [r7, #32]
 8002e1c:	3301      	adds	r3, #1
 8002e1e:	623b      	str	r3, [r7, #32]
 8002e20:	6a3b      	ldr	r3, [r7, #32]
 8002e22:	2b08      	cmp	r3, #8
 8002e24:	dddc      	ble.n	8002de0 <fUpdateCalibration10EIG+0x1c8>
			}
			// update the on and above diagonal terms of matA ignoring right hand column 9
			for (m = 0; m < 9; m++) {
 8002e26:	2300      	movs	r3, #0
 8002e28:	623b      	str	r3, [r7, #32]
 8002e2a:	e037      	b.n	8002e9c <fUpdateCalibration10EIG+0x284>
				for (n = m; n < 9; n++) {
 8002e2c:	6a3b      	ldr	r3, [r7, #32]
 8002e2e:	61fb      	str	r3, [r7, #28]
 8002e30:	e02e      	b.n	8002e90 <fUpdateCalibration10EIG+0x278>
					MagCal->matA[m][n] += MagCal->vecA[m] * MagCal->vecA[n];
 8002e32:	6879      	ldr	r1, [r7, #4]
 8002e34:	6a3a      	ldr	r2, [r7, #32]
 8002e36:	4613      	mov	r3, r2
 8002e38:	009b      	lsls	r3, r3, #2
 8002e3a:	4413      	add	r3, r2
 8002e3c:	005b      	lsls	r3, r3, #1
 8002e3e:	69fa      	ldr	r2, [r7, #28]
 8002e40:	4413      	add	r3, r2
 8002e42:	3330      	adds	r3, #48	@ 0x30
 8002e44:	009b      	lsls	r3, r3, #2
 8002e46:	440b      	add	r3, r1
 8002e48:	ed93 7a00 	vldr	s14, [r3]
 8002e4c:	687a      	ldr	r2, [r7, #4]
 8002e4e:	6a3b      	ldr	r3, [r7, #32]
 8002e50:	33f8      	adds	r3, #248	@ 0xf8
 8002e52:	009b      	lsls	r3, r3, #2
 8002e54:	4413      	add	r3, r2
 8002e56:	edd3 6a00 	vldr	s13, [r3]
 8002e5a:	687a      	ldr	r2, [r7, #4]
 8002e5c:	69fb      	ldr	r3, [r7, #28]
 8002e5e:	33f8      	adds	r3, #248	@ 0xf8
 8002e60:	009b      	lsls	r3, r3, #2
 8002e62:	4413      	add	r3, r2
 8002e64:	edd3 7a00 	vldr	s15, [r3]
 8002e68:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e6c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e70:	6879      	ldr	r1, [r7, #4]
 8002e72:	6a3a      	ldr	r2, [r7, #32]
 8002e74:	4613      	mov	r3, r2
 8002e76:	009b      	lsls	r3, r3, #2
 8002e78:	4413      	add	r3, r2
 8002e7a:	005b      	lsls	r3, r3, #1
 8002e7c:	69fa      	ldr	r2, [r7, #28]
 8002e7e:	4413      	add	r3, r2
 8002e80:	3330      	adds	r3, #48	@ 0x30
 8002e82:	009b      	lsls	r3, r3, #2
 8002e84:	440b      	add	r3, r1
 8002e86:	edc3 7a00 	vstr	s15, [r3]
				for (n = m; n < 9; n++) {
 8002e8a:	69fb      	ldr	r3, [r7, #28]
 8002e8c:	3301      	adds	r3, #1
 8002e8e:	61fb      	str	r3, [r7, #28]
 8002e90:	69fb      	ldr	r3, [r7, #28]
 8002e92:	2b08      	cmp	r3, #8
 8002e94:	ddcd      	ble.n	8002e32 <fUpdateCalibration10EIG+0x21a>
			for (m = 0; m < 9; m++) {
 8002e96:	6a3b      	ldr	r3, [r7, #32]
 8002e98:	3301      	adds	r3, #1
 8002e9a:	623b      	str	r3, [r7, #32]
 8002e9c:	6a3b      	ldr	r3, [r7, #32]
 8002e9e:	2b08      	cmp	r3, #8
 8002ea0:	ddc4      	ble.n	8002e2c <fUpdateCalibration10EIG+0x214>
				}
			}

			// increment the measurement counter for the next iteration
			iCount++;
 8002ea2:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 8002ea6:	b29b      	uxth	r3, r3
 8002ea8:	3301      	adds	r3, #1
 8002eaa:	b29b      	uxth	r3, r3
 8002eac:	867b      	strh	r3, [r7, #50]	@ 0x32
	for (j = 0; j < MAGBUFFSIZE; j++) {
 8002eae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002eb0:	3301      	adds	r3, #1
 8002eb2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002eb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002eb6:	f5b3 7f16 	cmp.w	r3, #600	@ 0x258
 8002eba:	f6ff aee3 	blt.w	8002c84 <fUpdateCalibration10EIG+0x6c>
		}
	}

	// set the last element matA[9][9] to the number of measurements
	MagCal->matA[9][9] = (float) iCount;
 8002ebe:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 8002ec2:	ee07 3a90 	vmov	s15, r3
 8002ec6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	edc3 7a93 	vstr	s15, [r3, #588]	@ 0x24c

	// store the number of measurements accumulated
	MagCal->MagBufferCount = iCount;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002ed6:	461a      	mov	r2, r3
 8002ed8:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8002eda:	f8a2 3482 	strh.w	r3, [r2, #1154]	@ 0x482

	// copy the above diagonal elements of symmetric product matrix matA to below the diagonal
	for (m = 1; m < 10; m++) {
 8002ede:	2301      	movs	r3, #1
 8002ee0:	623b      	str	r3, [r7, #32]
 8002ee2:	e029      	b.n	8002f38 <fUpdateCalibration10EIG+0x320>
		for (n = 0; n < m; n++) {
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	61fb      	str	r3, [r7, #28]
 8002ee8:	e01f      	b.n	8002f2a <fUpdateCalibration10EIG+0x312>
 8002eea:	bf00      	nop
 8002eec:	200001ec 	.word	0x200001ec
 8002ef0:	3b03126f 	.word	0x3b03126f
			MagCal->matA[m][n] = MagCal->matA[n][m];
 8002ef4:	6879      	ldr	r1, [r7, #4]
 8002ef6:	69fa      	ldr	r2, [r7, #28]
 8002ef8:	4613      	mov	r3, r2
 8002efa:	009b      	lsls	r3, r3, #2
 8002efc:	4413      	add	r3, r2
 8002efe:	005b      	lsls	r3, r3, #1
 8002f00:	6a3a      	ldr	r2, [r7, #32]
 8002f02:	4413      	add	r3, r2
 8002f04:	3330      	adds	r3, #48	@ 0x30
 8002f06:	009b      	lsls	r3, r3, #2
 8002f08:	440b      	add	r3, r1
 8002f0a:	6819      	ldr	r1, [r3, #0]
 8002f0c:	6878      	ldr	r0, [r7, #4]
 8002f0e:	6a3a      	ldr	r2, [r7, #32]
 8002f10:	4613      	mov	r3, r2
 8002f12:	009b      	lsls	r3, r3, #2
 8002f14:	4413      	add	r3, r2
 8002f16:	005b      	lsls	r3, r3, #1
 8002f18:	69fa      	ldr	r2, [r7, #28]
 8002f1a:	4413      	add	r3, r2
 8002f1c:	3330      	adds	r3, #48	@ 0x30
 8002f1e:	009b      	lsls	r3, r3, #2
 8002f20:	4403      	add	r3, r0
 8002f22:	6019      	str	r1, [r3, #0]
		for (n = 0; n < m; n++) {
 8002f24:	69fb      	ldr	r3, [r7, #28]
 8002f26:	3301      	adds	r3, #1
 8002f28:	61fb      	str	r3, [r7, #28]
 8002f2a:	69fa      	ldr	r2, [r7, #28]
 8002f2c:	6a3b      	ldr	r3, [r7, #32]
 8002f2e:	429a      	cmp	r2, r3
 8002f30:	dbe0      	blt.n	8002ef4 <fUpdateCalibration10EIG+0x2dc>
	for (m = 1; m < 10; m++) {
 8002f32:	6a3b      	ldr	r3, [r7, #32]
 8002f34:	3301      	adds	r3, #1
 8002f36:	623b      	str	r3, [r7, #32]
 8002f38:	6a3b      	ldr	r3, [r7, #32]
 8002f3a:	2b09      	cmp	r3, #9
 8002f3c:	ddd2      	ble.n	8002ee4 <fUpdateCalibration10EIG+0x2cc>
		}
	}

	// set MagCal->vecA to the unsorted eigenvalues and matB to the unsorted
	// normalized eigenvectors of matA
	eigencompute(MagCal->matA, MagCal->vecA, MagCal->matB, 10);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	f103 00c0 	add.w	r0, r3, #192	@ 0xc0
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	f503 7214 	add.w	r2, r3, #592	@ 0x250
 8002f50:	230a      	movs	r3, #10
 8002f52:	f003 fa4b 	bl	80063ec <eigencompute>

	// set ellipsoid matrix A from elements of the solution vector column j with
	// smallest eigenvalue
	j = 0;
 8002f56:	2300      	movs	r3, #0
 8002f58:	62bb      	str	r3, [r7, #40]	@ 0x28
	for (i = 1; i < 10; i++) {
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002f5e:	e017      	b.n	8002f90 <fUpdateCalibration10EIG+0x378>
		if (MagCal->vecA[i] < MagCal->vecA[j]) {
 8002f60:	687a      	ldr	r2, [r7, #4]
 8002f62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f64:	33f8      	adds	r3, #248	@ 0xf8
 8002f66:	009b      	lsls	r3, r3, #2
 8002f68:	4413      	add	r3, r2
 8002f6a:	ed93 7a00 	vldr	s14, [r3]
 8002f6e:	687a      	ldr	r2, [r7, #4]
 8002f70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f72:	33f8      	adds	r3, #248	@ 0xf8
 8002f74:	009b      	lsls	r3, r3, #2
 8002f76:	4413      	add	r3, r2
 8002f78:	edd3 7a00 	vldr	s15, [r3]
 8002f7c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002f80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f84:	d501      	bpl.n	8002f8a <fUpdateCalibration10EIG+0x372>
			j = i;
 8002f86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f88:	62bb      	str	r3, [r7, #40]	@ 0x28
	for (i = 1; i < 10; i++) {
 8002f8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f8c:	3301      	adds	r3, #1
 8002f8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002f90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f92:	2b09      	cmp	r3, #9
 8002f94:	dde4      	ble.n	8002f60 <fUpdateCalibration10EIG+0x348>
		}
	}
	MagCal->A[0][0] = MagCal->matB[0][j];
 8002f96:	687a      	ldr	r2, [r7, #4]
 8002f98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f9a:	3394      	adds	r3, #148	@ 0x94
 8002f9c:	009b      	lsls	r3, r3, #2
 8002f9e:	4413      	add	r3, r2
 8002fa0:	681a      	ldr	r2, [r3, #0]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	679a      	str	r2, [r3, #120]	@ 0x78
	MagCal->A[0][1] = MagCal->A[1][0] = MagCal->matB[1][j];
 8002fa6:	687a      	ldr	r2, [r7, #4]
 8002fa8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002faa:	339e      	adds	r3, #158	@ 0x9e
 8002fac:	009b      	lsls	r3, r3, #2
 8002fae:	4413      	add	r3, r2
 8002fb0:	681a      	ldr	r2, [r3, #0]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	67da      	str	r2, [r3, #124]	@ 0x7c
	MagCal->A[0][2] = MagCal->A[2][0] = MagCal->matB[2][j];
 8002fc2:	687a      	ldr	r2, [r7, #4]
 8002fc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fc6:	33a8      	adds	r3, #168	@ 0xa8
 8002fc8:	009b      	lsls	r3, r3, #2
 8002fca:	4413      	add	r3, r2
 8002fcc:	681a      	ldr	r2, [r3, #0]
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
	MagCal->A[1][1] = MagCal->matB[3][j];
 8002fe0:	687a      	ldr	r2, [r7, #4]
 8002fe2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fe4:	33b2      	adds	r3, #178	@ 0xb2
 8002fe6:	009b      	lsls	r3, r3, #2
 8002fe8:	4413      	add	r3, r2
 8002fea:	681a      	ldr	r2, [r3, #0]
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
	MagCal->A[1][2] = MagCal->A[2][1] = MagCal->matB[4][j];
 8002ff2:	687a      	ldr	r2, [r7, #4]
 8002ff4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ff6:	33bc      	adds	r3, #188	@ 0xbc
 8002ff8:	009b      	lsls	r3, r3, #2
 8002ffa:	4413      	add	r3, r2
 8002ffc:	681a      	ldr	r2, [r3, #0]
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
	MagCal->A[2][2] = MagCal->matB[5][j];
 8003010:	687a      	ldr	r2, [r7, #4]
 8003012:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003014:	33c6      	adds	r3, #198	@ 0xc6
 8003016:	009b      	lsls	r3, r3, #2
 8003018:	4413      	add	r3, r2
 800301a:	681a      	ldr	r2, [r3, #0]
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98

	// negate entire solution if A has negative determinant
	det = f3x3matrixDetA(MagCal->A);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	3378      	adds	r3, #120	@ 0x78
 8003026:	4618      	mov	r0, r3
 8003028:	f003 f980 	bl	800632c <f3x3matrixDetA>
 800302c:	ed87 0a0d 	vstr	s0, [r7, #52]	@ 0x34
	if (det < 0.0F) {
 8003030:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8003034:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003038:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800303c:	d54a      	bpl.n	80030d4 <fUpdateCalibration10EIG+0x4bc>
		f3x3matrixAeqMinusA(MagCal->A);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	3378      	adds	r3, #120	@ 0x78
 8003042:	4618      	mov	r0, r3
 8003044:	f003 f842 	bl	80060cc <f3x3matrixAeqMinusA>
		MagCal->matB[6][j] = -MagCal->matB[6][j];
 8003048:	687a      	ldr	r2, [r7, #4]
 800304a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800304c:	33d0      	adds	r3, #208	@ 0xd0
 800304e:	009b      	lsls	r3, r3, #2
 8003050:	4413      	add	r3, r2
 8003052:	edd3 7a00 	vldr	s15, [r3]
 8003056:	eef1 7a67 	vneg.f32	s15, s15
 800305a:	687a      	ldr	r2, [r7, #4]
 800305c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800305e:	33d0      	adds	r3, #208	@ 0xd0
 8003060:	009b      	lsls	r3, r3, #2
 8003062:	4413      	add	r3, r2
 8003064:	edc3 7a00 	vstr	s15, [r3]
		MagCal->matB[7][j] = -MagCal->matB[7][j];
 8003068:	687a      	ldr	r2, [r7, #4]
 800306a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800306c:	33da      	adds	r3, #218	@ 0xda
 800306e:	009b      	lsls	r3, r3, #2
 8003070:	4413      	add	r3, r2
 8003072:	edd3 7a00 	vldr	s15, [r3]
 8003076:	eef1 7a67 	vneg.f32	s15, s15
 800307a:	687a      	ldr	r2, [r7, #4]
 800307c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800307e:	33da      	adds	r3, #218	@ 0xda
 8003080:	009b      	lsls	r3, r3, #2
 8003082:	4413      	add	r3, r2
 8003084:	edc3 7a00 	vstr	s15, [r3]
		MagCal->matB[8][j] = -MagCal->matB[8][j];
 8003088:	687a      	ldr	r2, [r7, #4]
 800308a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800308c:	33e4      	adds	r3, #228	@ 0xe4
 800308e:	009b      	lsls	r3, r3, #2
 8003090:	4413      	add	r3, r2
 8003092:	edd3 7a00 	vldr	s15, [r3]
 8003096:	eef1 7a67 	vneg.f32	s15, s15
 800309a:	687a      	ldr	r2, [r7, #4]
 800309c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800309e:	33e4      	adds	r3, #228	@ 0xe4
 80030a0:	009b      	lsls	r3, r3, #2
 80030a2:	4413      	add	r3, r2
 80030a4:	edc3 7a00 	vstr	s15, [r3]
		MagCal->matB[9][j] = -MagCal->matB[9][j];
 80030a8:	687a      	ldr	r2, [r7, #4]
 80030aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030ac:	33ee      	adds	r3, #238	@ 0xee
 80030ae:	009b      	lsls	r3, r3, #2
 80030b0:	4413      	add	r3, r2
 80030b2:	edd3 7a00 	vldr	s15, [r3]
 80030b6:	eef1 7a67 	vneg.f32	s15, s15
 80030ba:	687a      	ldr	r2, [r7, #4]
 80030bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030be:	33ee      	adds	r3, #238	@ 0xee
 80030c0:	009b      	lsls	r3, r3, #2
 80030c2:	4413      	add	r3, r2
 80030c4:	edc3 7a00 	vstr	s15, [r3]
		det = -det;
 80030c8:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80030cc:	eef1 7a67 	vneg.f32	s15, s15
 80030d0:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
	}

	// compute the inverse of the ellipsoid matrix
	f3x3matrixAeqInvSymB(MagCal->invA, MagCal->A);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	f103 029c 	add.w	r2, r3, #156	@ 0x9c
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	3378      	adds	r3, #120	@ 0x78
 80030de:	4619      	mov	r1, r3
 80030e0:	4610      	mov	r0, r2
 80030e2:	f003 f82d 	bl	8006140 <f3x3matrixAeqInvSymB>

	// compute the trial hard iron vector in offset bit counts times FMATRIXSCALING
	for (k = X; k <= Z; k++) {
 80030e6:	2300      	movs	r3, #0
 80030e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80030ea:	e052      	b.n	8003192 <fUpdateCalibration10EIG+0x57a>
		MagCal->trV[k] = 0.0F;
 80030ec:	687a      	ldr	r2, [r7, #4]
 80030ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030f0:	3310      	adds	r3, #16
 80030f2:	009b      	lsls	r3, r3, #2
 80030f4:	4413      	add	r3, r2
 80030f6:	f04f 0200 	mov.w	r2, #0
 80030fa:	601a      	str	r2, [r3, #0]
		for (m = X; m <= Z; m++) {
 80030fc:	2300      	movs	r3, #0
 80030fe:	623b      	str	r3, [r7, #32]
 8003100:	e02f      	b.n	8003162 <fUpdateCalibration10EIG+0x54a>
			MagCal->trV[k] += MagCal->invA[k][m] * MagCal->matB[m + 6][j];
 8003102:	687a      	ldr	r2, [r7, #4]
 8003104:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003106:	3310      	adds	r3, #16
 8003108:	009b      	lsls	r3, r3, #2
 800310a:	4413      	add	r3, r2
 800310c:	ed93 7a00 	vldr	s14, [r3]
 8003110:	6879      	ldr	r1, [r7, #4]
 8003112:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003114:	4613      	mov	r3, r2
 8003116:	005b      	lsls	r3, r3, #1
 8003118:	4413      	add	r3, r2
 800311a:	6a3a      	ldr	r2, [r7, #32]
 800311c:	4413      	add	r3, r2
 800311e:	3326      	adds	r3, #38	@ 0x26
 8003120:	009b      	lsls	r3, r3, #2
 8003122:	440b      	add	r3, r1
 8003124:	3304      	adds	r3, #4
 8003126:	edd3 6a00 	vldr	s13, [r3]
 800312a:	6a3b      	ldr	r3, [r7, #32]
 800312c:	1d9a      	adds	r2, r3, #6
 800312e:	6879      	ldr	r1, [r7, #4]
 8003130:	4613      	mov	r3, r2
 8003132:	009b      	lsls	r3, r3, #2
 8003134:	4413      	add	r3, r2
 8003136:	005b      	lsls	r3, r3, #1
 8003138:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800313a:	4413      	add	r3, r2
 800313c:	3394      	adds	r3, #148	@ 0x94
 800313e:	009b      	lsls	r3, r3, #2
 8003140:	440b      	add	r3, r1
 8003142:	edd3 7a00 	vldr	s15, [r3]
 8003146:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800314a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800314e:	687a      	ldr	r2, [r7, #4]
 8003150:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003152:	3310      	adds	r3, #16
 8003154:	009b      	lsls	r3, r3, #2
 8003156:	4413      	add	r3, r2
 8003158:	edc3 7a00 	vstr	s15, [r3]
		for (m = X; m <= Z; m++) {
 800315c:	6a3b      	ldr	r3, [r7, #32]
 800315e:	3301      	adds	r3, #1
 8003160:	623b      	str	r3, [r7, #32]
 8003162:	6a3b      	ldr	r3, [r7, #32]
 8003164:	2b02      	cmp	r3, #2
 8003166:	ddcc      	ble.n	8003102 <fUpdateCalibration10EIG+0x4ea>
		}
		MagCal->trV[k] *= -0.5F;
 8003168:	687a      	ldr	r2, [r7, #4]
 800316a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800316c:	3310      	adds	r3, #16
 800316e:	009b      	lsls	r3, r3, #2
 8003170:	4413      	add	r3, r2
 8003172:	edd3 7a00 	vldr	s15, [r3]
 8003176:	eebe 7a00 	vmov.f32	s14, #224	@ 0xbf000000 -0.5
 800317a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800317e:	687a      	ldr	r2, [r7, #4]
 8003180:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003182:	3310      	adds	r3, #16
 8003184:	009b      	lsls	r3, r3, #2
 8003186:	4413      	add	r3, r2
 8003188:	edc3 7a00 	vstr	s15, [r3]
	for (k = X; k <= Z; k++) {
 800318c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800318e:	3301      	adds	r3, #1
 8003190:	627b      	str	r3, [r7, #36]	@ 0x24
 8003192:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003194:	2b02      	cmp	r3, #2
 8003196:	dda9      	ble.n	80030ec <fUpdateCalibration10EIG+0x4d4>
	}

	// compute the trial geomagnetic field strength B in bit counts times FMATRIXSCALING
	MagCal->trB = sqrtf(
			fabs(
					MagCal->A[0][0] * MagCal->trV[X] * MagCal->trV[X]
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	ed93 7a1e 	vldr	s14, [r3, #120]	@ 0x78
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 80031a4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 80031ae:	ee27 7a27 	vmul.f32	s14, s14, s15
							+ 2.0F * MagCal->A[0][1] * MagCal->trV[X]
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	edd3 7a1f 	vldr	s15, [r3, #124]	@ 0x7c
 80031b8:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 80031c2:	ee66 6aa7 	vmul.f32	s13, s13, s15
									* MagCal->trV[Y]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 80031cc:	ee66 7aa7 	vmul.f32	s15, s13, s15
							+ 2.0F * MagCal->A[0][1] * MagCal->trV[X]
 80031d0:	ee37 7a27 	vadd.f32	s14, s14, s15
							+ 2.0F * MagCal->A[0][2] * MagCal->trV[X]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	edd3 7a20 	vldr	s15, [r3, #128]	@ 0x80
 80031da:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 80031e4:	ee66 6aa7 	vmul.f32	s13, s13, s15
									* MagCal->trV[Z]
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 80031ee:	ee66 7aa7 	vmul.f32	s15, s13, s15
							+ 2.0F * MagCal->A[0][2] * MagCal->trV[X]
 80031f2:	ee37 7a27 	vadd.f32	s14, s14, s15
							+ MagCal->A[1][1] * MagCal->trV[Y] * MagCal->trV[Y]
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	edd3 6a22 	vldr	s13, [r3, #136]	@ 0x88
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 8003202:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 800320c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003210:	ee37 7a27 	vadd.f32	s14, s14, s15
							+ 2.0F * MagCal->A[1][2] * MagCal->trV[Y]
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	edd3 7a23 	vldr	s15, [r3, #140]	@ 0x8c
 800321a:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 8003224:	ee66 6aa7 	vmul.f32	s13, s13, s15
									* MagCal->trV[Z]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 800322e:	ee66 7aa7 	vmul.f32	s15, s13, s15
							+ 2.0F * MagCal->A[1][2] * MagCal->trV[Y]
 8003232:	ee37 7a27 	vadd.f32	s14, s14, s15
							+ MagCal->A[2][2] * MagCal->trV[Z] * MagCal->trV[Z]
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	edd3 6a26 	vldr	s13, [r3, #152]	@ 0x98
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 8003242:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 800324c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003250:	ee37 7a27 	vadd.f32	s14, s14, s15
							- MagCal->matB[9][j]));
 8003254:	687a      	ldr	r2, [r7, #4]
 8003256:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003258:	33ee      	adds	r3, #238	@ 0xee
 800325a:	009b      	lsls	r3, r3, #2
 800325c:	4413      	add	r3, r2
 800325e:	edd3 7a00 	vldr	s15, [r3]
 8003262:	ee77 7a67 	vsub.f32	s15, s14, s15
	MagCal->trB = sqrtf(
 8003266:	eef0 7ae7 	vabs.f32	s15, s15
 800326a:	eeb0 0a67 	vmov.f32	s0, s15
 800326e:	f00e faa7 	bl	80117c0 <sqrtf>
 8003272:	eef0 7a40 	vmov.f32	s15, s0
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	edc3 7a1c 	vstr	s15, [r3, #112]	@ 0x70

	// calculate the trial normalized fit error as a percentage
	MagCal->trFitErrorpc = 50.0F
			* sqrtf(fabs(MagCal->vecA[j]) / (float) MagCal->MagBufferCount)
 800327c:	687a      	ldr	r2, [r7, #4]
 800327e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003280:	33f8      	adds	r3, #248	@ 0xf8
 8003282:	009b      	lsls	r3, r3, #2
 8003284:	4413      	add	r3, r2
 8003286:	edd3 7a00 	vldr	s15, [r3]
 800328a:	eeb0 7ae7 	vabs.f32	s14, s15
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003294:	f9b3 3482 	ldrsh.w	r3, [r3, #1154]	@ 0x482
 8003298:	ee07 3a90 	vmov	s15, r3
 800329c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80032a0:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80032a4:	eeb0 0a66 	vmov.f32	s0, s13
 80032a8:	f00e fa8a 	bl	80117c0 <sqrtf>
 80032ac:	eef0 7a40 	vmov.f32	s15, s0
 80032b0:	ed9f 7aae 	vldr	s14, [pc, #696]	@ 800356c <fUpdateCalibration10EIG+0x954>
 80032b4:	ee67 6a87 	vmul.f32	s13, s15, s14
			/ (MagCal->trB * MagCal->trB);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	ed93 7a1c 	vldr	s14, [r3, #112]	@ 0x70
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	edd3 7a1c 	vldr	s15, [r3, #112]	@ 0x70
 80032c4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80032c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
	MagCal->trFitErrorpc = 50.0F
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	edc3 7a1d 	vstr	s15, [r3, #116]	@ 0x74

	// correct for the measurement matrix offset and scaling and
	// get the computed hard iron offset in uT
	for (k = X; k <= Z; k++) {
 80032d2:	2300      	movs	r3, #0
 80032d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80032d6:	e024      	b.n	8003322 <fUpdateCalibration10EIG+0x70a>
		MagCal->trV[k] = MagCal->trV[k] * DEFAULTB
 80032d8:	687a      	ldr	r2, [r7, #4]
 80032da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032dc:	3310      	adds	r3, #16
 80032de:	009b      	lsls	r3, r3, #2
 80032e0:	4413      	add	r3, r2
 80032e2:	edd3 7a00 	vldr	s15, [r3]
 80032e6:	ed9f 7aa1 	vldr	s14, [pc, #644]	@ 800356c <fUpdateCalibration10EIG+0x954>
 80032ea:	ee27 7a87 	vmul.f32	s14, s15, s14
				+ (float) iOffset[k] * FXOS8700_UTPERCOUNT;
 80032ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032f0:	005b      	lsls	r3, r3, #1
 80032f2:	3338      	adds	r3, #56	@ 0x38
 80032f4:	443b      	add	r3, r7
 80032f6:	f933 3c2c 	ldrsh.w	r3, [r3, #-44]
 80032fa:	ee07 3a90 	vmov	s15, r3
 80032fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003302:	eddf 6a9b 	vldr	s13, [pc, #620]	@ 8003570 <fUpdateCalibration10EIG+0x958>
 8003306:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800330a:	ee77 7a27 	vadd.f32	s15, s14, s15
		MagCal->trV[k] = MagCal->trV[k] * DEFAULTB
 800330e:	687a      	ldr	r2, [r7, #4]
 8003310:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003312:	3310      	adds	r3, #16
 8003314:	009b      	lsls	r3, r3, #2
 8003316:	4413      	add	r3, r2
 8003318:	edc3 7a00 	vstr	s15, [r3]
	for (k = X; k <= Z; k++) {
 800331c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800331e:	3301      	adds	r3, #1
 8003320:	627b      	str	r3, [r7, #36]	@ 0x24
 8003322:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003324:	2b02      	cmp	r3, #2
 8003326:	ddd7      	ble.n	80032d8 <fUpdateCalibration10EIG+0x6c0>
	}

	// convert the trial geomagnetic field strength B into uT for
	// un-normalized soft iron matrix A
	MagCal->trB *= DEFAULTB;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	edd3 7a1c 	vldr	s15, [r3, #112]	@ 0x70
 800332e:	ed9f 7a8f 	vldr	s14, [pc, #572]	@ 800356c <fUpdateCalibration10EIG+0x954>
 8003332:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	edc3 7a1c 	vstr	s15, [r3, #112]	@ 0x70

	// normalize the ellipsoid matrix A to unit determinant and
	// correct B by root of this multiplicative factor
	f3x3matrixAeqAxScalar(MagCal->A, powf(det, -(ONETHIRD)));
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	f103 0478 	add.w	r4, r3, #120	@ 0x78
 8003342:	eddf 0a8c 	vldr	s1, [pc, #560]	@ 8003574 <fUpdateCalibration10EIG+0x95c>
 8003346:	ed97 0a0d 	vldr	s0, [r7, #52]	@ 0x34
 800334a:	f00e f9e1 	bl	8011710 <powf>
 800334e:	eef0 7a40 	vmov.f32	s15, s0
 8003352:	eeb0 0a67 	vmov.f32	s0, s15
 8003356:	4620      	mov	r0, r4
 8003358:	f002 fe7c 	bl	8006054 <f3x3matrixAeqAxScalar>
	MagCal->trB *= powf(det, -(ONESIXTH));
 800335c:	eddf 0a86 	vldr	s1, [pc, #536]	@ 8003578 <fUpdateCalibration10EIG+0x960>
 8003360:	ed97 0a0d 	vldr	s0, [r7, #52]	@ 0x34
 8003364:	f00e f9d4 	bl	8011710 <powf>
 8003368:	eeb0 7a40 	vmov.f32	s14, s0
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	edd3 7a1c 	vldr	s15, [r3, #112]	@ 0x70
 8003372:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	edc3 7a1c 	vstr	s15, [r3, #112]	@ 0x70

	// compute trial invW from the square root of fA (both with normalized determinant)
	// set vecA to the unsorted eigenvalues and matB to the unsorted eigenvectors of matA
	// where matA holds the 3x3 matrix fA in its top left elements
	for (i = 0; i < 3; i++) {
 800337c:	2300      	movs	r3, #0
 800337e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003380:	e022      	b.n	80033c8 <fUpdateCalibration10EIG+0x7b0>
		for (j = 0; j < 3; j++) {
 8003382:	2300      	movs	r3, #0
 8003384:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003386:	e019      	b.n	80033bc <fUpdateCalibration10EIG+0x7a4>
			MagCal->matA[i][j] = MagCal->A[i][j];
 8003388:	6879      	ldr	r1, [r7, #4]
 800338a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800338c:	4613      	mov	r3, r2
 800338e:	005b      	lsls	r3, r3, #1
 8003390:	4413      	add	r3, r2
 8003392:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003394:	4413      	add	r3, r2
 8003396:	331e      	adds	r3, #30
 8003398:	009b      	lsls	r3, r3, #2
 800339a:	440b      	add	r3, r1
 800339c:	6819      	ldr	r1, [r3, #0]
 800339e:	6878      	ldr	r0, [r7, #4]
 80033a0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80033a2:	4613      	mov	r3, r2
 80033a4:	009b      	lsls	r3, r3, #2
 80033a6:	4413      	add	r3, r2
 80033a8:	005b      	lsls	r3, r3, #1
 80033aa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80033ac:	4413      	add	r3, r2
 80033ae:	3330      	adds	r3, #48	@ 0x30
 80033b0:	009b      	lsls	r3, r3, #2
 80033b2:	4403      	add	r3, r0
 80033b4:	6019      	str	r1, [r3, #0]
		for (j = 0; j < 3; j++) {
 80033b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033b8:	3301      	adds	r3, #1
 80033ba:	62bb      	str	r3, [r7, #40]	@ 0x28
 80033bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033be:	2b02      	cmp	r3, #2
 80033c0:	dde2      	ble.n	8003388 <fUpdateCalibration10EIG+0x770>
	for (i = 0; i < 3; i++) {
 80033c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033c4:	3301      	adds	r3, #1
 80033c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80033c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033ca:	2b02      	cmp	r3, #2
 80033cc:	ddd9      	ble.n	8003382 <fUpdateCalibration10EIG+0x76a>
		}
	}
	eigencompute(MagCal->matA, MagCal->vecA, MagCal->matB, 3);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	f103 00c0 	add.w	r0, r3, #192	@ 0xc0
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	f503 7214 	add.w	r2, r3, #592	@ 0x250
 80033e0:	2303      	movs	r3, #3
 80033e2:	f003 f803 	bl	80063ec <eigencompute>

	// set MagCal->matB to be eigenvectors . diag(sqrt(sqrt(eigenvalues))) =
	//   matB . diag(sqrt(sqrt(vecA))
	for (j = 0; j < 3; j++) { // loop over columns j
 80033e6:	2300      	movs	r3, #0
 80033e8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80033ea:	e03e      	b.n	800346a <fUpdateCalibration10EIG+0x852>
		ftmp = sqrtf(sqrtf(fabs(MagCal->vecA[j])));
 80033ec:	687a      	ldr	r2, [r7, #4]
 80033ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033f0:	33f8      	adds	r3, #248	@ 0xf8
 80033f2:	009b      	lsls	r3, r3, #2
 80033f4:	4413      	add	r3, r2
 80033f6:	edd3 7a00 	vldr	s15, [r3]
 80033fa:	eef0 7ae7 	vabs.f32	s15, s15
 80033fe:	eeb0 0a67 	vmov.f32	s0, s15
 8003402:	f00e f9dd 	bl	80117c0 <sqrtf>
 8003406:	eef0 7a40 	vmov.f32	s15, s0
 800340a:	eeb0 0a67 	vmov.f32	s0, s15
 800340e:	f00e f9d7 	bl	80117c0 <sqrtf>
 8003412:	ed87 0a05 	vstr	s0, [r7, #20]
		for (i = 0; i < 3; i++) { // loop over rows i
 8003416:	2300      	movs	r3, #0
 8003418:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800341a:	e020      	b.n	800345e <fUpdateCalibration10EIG+0x846>
			MagCal->matB[i][j] *= ftmp;
 800341c:	6879      	ldr	r1, [r7, #4]
 800341e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003420:	4613      	mov	r3, r2
 8003422:	009b      	lsls	r3, r3, #2
 8003424:	4413      	add	r3, r2
 8003426:	005b      	lsls	r3, r3, #1
 8003428:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800342a:	4413      	add	r3, r2
 800342c:	3394      	adds	r3, #148	@ 0x94
 800342e:	009b      	lsls	r3, r3, #2
 8003430:	440b      	add	r3, r1
 8003432:	ed93 7a00 	vldr	s14, [r3]
 8003436:	edd7 7a05 	vldr	s15, [r7, #20]
 800343a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800343e:	6879      	ldr	r1, [r7, #4]
 8003440:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003442:	4613      	mov	r3, r2
 8003444:	009b      	lsls	r3, r3, #2
 8003446:	4413      	add	r3, r2
 8003448:	005b      	lsls	r3, r3, #1
 800344a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800344c:	4413      	add	r3, r2
 800344e:	3394      	adds	r3, #148	@ 0x94
 8003450:	009b      	lsls	r3, r3, #2
 8003452:	440b      	add	r3, r1
 8003454:	edc3 7a00 	vstr	s15, [r3]
		for (i = 0; i < 3; i++) { // loop over rows i
 8003458:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800345a:	3301      	adds	r3, #1
 800345c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800345e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003460:	2b02      	cmp	r3, #2
 8003462:	dddb      	ble.n	800341c <fUpdateCalibration10EIG+0x804>
	for (j = 0; j < 3; j++) { // loop over columns j
 8003464:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003466:	3301      	adds	r3, #1
 8003468:	62bb      	str	r3, [r7, #40]	@ 0x28
 800346a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800346c:	2b02      	cmp	r3, #2
 800346e:	ddbd      	ble.n	80033ec <fUpdateCalibration10EIG+0x7d4>
	}

	// set trinvW to eigenvectors * diag(sqrt(eigenvalues)) * eigenvectors^T =
	//   matB * matB^T = sqrt(fA) (guaranteed symmetric)
	// loop over rows
	for (i = 0; i < 3; i++) {
 8003470:	2300      	movs	r3, #0
 8003472:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003474:	e072      	b.n	800355c <fUpdateCalibration10EIG+0x944>
		// loop over on and above diagonal columns
		for (j = i; j < 3; j++) {
 8003476:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003478:	62bb      	str	r3, [r7, #40]	@ 0x28
 800347a:	e069      	b.n	8003550 <fUpdateCalibration10EIG+0x938>
			MagCal->trinvW[i][j] = 0.0F;
 800347c:	6879      	ldr	r1, [r7, #4]
 800347e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003480:	4613      	mov	r3, r2
 8003482:	005b      	lsls	r3, r3, #1
 8003484:	4413      	add	r3, r2
 8003486:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003488:	4413      	add	r3, r2
 800348a:	3312      	adds	r3, #18
 800348c:	009b      	lsls	r3, r3, #2
 800348e:	440b      	add	r3, r1
 8003490:	3304      	adds	r3, #4
 8003492:	f04f 0200 	mov.w	r2, #0
 8003496:	601a      	str	r2, [r3, #0]
			// accumulate the matrix product
			for (k = 0; k < 3; k++) {
 8003498:	2300      	movs	r3, #0
 800349a:	627b      	str	r3, [r7, #36]	@ 0x24
 800349c:	e03a      	b.n	8003514 <fUpdateCalibration10EIG+0x8fc>
				MagCal->trinvW[i][j] += MagCal->matB[i][k] * MagCal->matB[j][k];
 800349e:	6879      	ldr	r1, [r7, #4]
 80034a0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80034a2:	4613      	mov	r3, r2
 80034a4:	005b      	lsls	r3, r3, #1
 80034a6:	4413      	add	r3, r2
 80034a8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80034aa:	4413      	add	r3, r2
 80034ac:	3312      	adds	r3, #18
 80034ae:	009b      	lsls	r3, r3, #2
 80034b0:	440b      	add	r3, r1
 80034b2:	3304      	adds	r3, #4
 80034b4:	ed93 7a00 	vldr	s14, [r3]
 80034b8:	6879      	ldr	r1, [r7, #4]
 80034ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80034bc:	4613      	mov	r3, r2
 80034be:	009b      	lsls	r3, r3, #2
 80034c0:	4413      	add	r3, r2
 80034c2:	005b      	lsls	r3, r3, #1
 80034c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80034c6:	4413      	add	r3, r2
 80034c8:	3394      	adds	r3, #148	@ 0x94
 80034ca:	009b      	lsls	r3, r3, #2
 80034cc:	440b      	add	r3, r1
 80034ce:	edd3 6a00 	vldr	s13, [r3]
 80034d2:	6879      	ldr	r1, [r7, #4]
 80034d4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80034d6:	4613      	mov	r3, r2
 80034d8:	009b      	lsls	r3, r3, #2
 80034da:	4413      	add	r3, r2
 80034dc:	005b      	lsls	r3, r3, #1
 80034de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80034e0:	4413      	add	r3, r2
 80034e2:	3394      	adds	r3, #148	@ 0x94
 80034e4:	009b      	lsls	r3, r3, #2
 80034e6:	440b      	add	r3, r1
 80034e8:	edd3 7a00 	vldr	s15, [r3]
 80034ec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80034f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034f4:	6879      	ldr	r1, [r7, #4]
 80034f6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80034f8:	4613      	mov	r3, r2
 80034fa:	005b      	lsls	r3, r3, #1
 80034fc:	4413      	add	r3, r2
 80034fe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003500:	4413      	add	r3, r2
 8003502:	3312      	adds	r3, #18
 8003504:	009b      	lsls	r3, r3, #2
 8003506:	440b      	add	r3, r1
 8003508:	3304      	adds	r3, #4
 800350a:	edc3 7a00 	vstr	s15, [r3]
			for (k = 0; k < 3; k++) {
 800350e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003510:	3301      	adds	r3, #1
 8003512:	627b      	str	r3, [r7, #36]	@ 0x24
 8003514:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003516:	2b02      	cmp	r3, #2
 8003518:	ddc1      	ble.n	800349e <fUpdateCalibration10EIG+0x886>
			}
			// copy to below diagonal element
			MagCal->trinvW[j][i] = MagCal->trinvW[i][j];
 800351a:	6879      	ldr	r1, [r7, #4]
 800351c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800351e:	4613      	mov	r3, r2
 8003520:	005b      	lsls	r3, r3, #1
 8003522:	4413      	add	r3, r2
 8003524:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003526:	4413      	add	r3, r2
 8003528:	3312      	adds	r3, #18
 800352a:	009b      	lsls	r3, r3, #2
 800352c:	440b      	add	r3, r1
 800352e:	3304      	adds	r3, #4
 8003530:	6819      	ldr	r1, [r3, #0]
 8003532:	6878      	ldr	r0, [r7, #4]
 8003534:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003536:	4613      	mov	r3, r2
 8003538:	005b      	lsls	r3, r3, #1
 800353a:	4413      	add	r3, r2
 800353c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800353e:	4413      	add	r3, r2
 8003540:	3312      	adds	r3, #18
 8003542:	009b      	lsls	r3, r3, #2
 8003544:	4403      	add	r3, r0
 8003546:	3304      	adds	r3, #4
 8003548:	6019      	str	r1, [r3, #0]
		for (j = i; j < 3; j++) {
 800354a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800354c:	3301      	adds	r3, #1
 800354e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003550:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003552:	2b02      	cmp	r3, #2
 8003554:	dd92      	ble.n	800347c <fUpdateCalibration10EIG+0x864>
	for (i = 0; i < 3; i++) {
 8003556:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003558:	3301      	adds	r3, #1
 800355a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800355c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800355e:	2b02      	cmp	r3, #2
 8003560:	dd89      	ble.n	8003476 <fUpdateCalibration10EIG+0x85e>
		}
	}
}
 8003562:	bf00      	nop
 8003564:	bf00      	nop
 8003566:	373c      	adds	r7, #60	@ 0x3c
 8003568:	46bd      	mov	sp, r7
 800356a:	bd90      	pop	{r4, r7, pc}
 800356c:	42480000 	.word	0x42480000
 8003570:	3dcccccd 	.word	0x3dcccccd
 8003574:	beaaaaab 	.word	0xbeaaaaab
 8003578:	be2aaaab 	.word	0xbe2aaaab

0800357c <LL_RCC_LSE_SetDriveCapability>:
{
 800357c:	b480      	push	{r7}
 800357e:	b083      	sub	sp, #12
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8003584:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003588:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800358c:	f023 0218 	bic.w	r2, r3, #24
 8003590:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	4313      	orrs	r3, r2
 8003598:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 800359c:	bf00      	nop
 800359e:	370c      	adds	r7, #12
 80035a0:	46bd      	mov	sp, r7
 80035a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a6:	4770      	bx	lr

080035a8 <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_TSC
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80035a8:	b480      	push	{r7}
 80035aa:	b085      	sub	sp, #20
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 80035b0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80035b4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80035b6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	4313      	orrs	r3, r2
 80035be:	648b      	str	r3, [r1, #72]	@ 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80035c0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80035c4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	4013      	ands	r3, r2
 80035ca:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80035cc:	68fb      	ldr	r3, [r7, #12]
}
 80035ce:	bf00      	nop
 80035d0:	3714      	adds	r7, #20
 80035d2:	46bd      	mov	sp, r7
 80035d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d8:	4770      	bx	lr

080035da <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80035da:	b480      	push	{r7}
 80035dc:	b085      	sub	sp, #20
 80035de:	af00      	add	r7, sp, #0
 80035e0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80035e2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80035e6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80035e8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	4313      	orrs	r3, r2
 80035f0:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80035f2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80035f6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	4013      	ands	r3, r2
 80035fc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80035fe:	68fb      	ldr	r3, [r7, #12]
}
 8003600:	bf00      	nop
 8003602:	3714      	adds	r7, #20
 8003604:	46bd      	mov	sp, r7
 8003606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360a:	4770      	bx	lr

0800360c <LSM9DS1_WriteRegister>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void LSM9DS1_WriteRegister(uint8_t addr, uint8_t reg, uint8_t value) {
 800360c:	b580      	push	{r7, lr}
 800360e:	b086      	sub	sp, #24
 8003610:	af04      	add	r7, sp, #16
 8003612:	4603      	mov	r3, r0
 8003614:	71fb      	strb	r3, [r7, #7]
 8003616:	460b      	mov	r3, r1
 8003618:	71bb      	strb	r3, [r7, #6]
 800361a:	4613      	mov	r3, r2
 800361c:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Write(&hi2c1, addr, reg, I2C_MEMADD_SIZE_8BIT, &value, 1,
 800361e:	79fb      	ldrb	r3, [r7, #7]
 8003620:	b299      	uxth	r1, r3
 8003622:	79bb      	ldrb	r3, [r7, #6]
 8003624:	b29a      	uxth	r2, r3
 8003626:	f04f 33ff 	mov.w	r3, #4294967295
 800362a:	9302      	str	r3, [sp, #8]
 800362c:	2301      	movs	r3, #1
 800362e:	9301      	str	r3, [sp, #4]
 8003630:	1d7b      	adds	r3, r7, #5
 8003632:	9300      	str	r3, [sp, #0]
 8003634:	2301      	movs	r3, #1
 8003636:	4803      	ldr	r0, [pc, #12]	@ (8003644 <LSM9DS1_WriteRegister+0x38>)
 8003638:	f005 f966 	bl	8008908 <HAL_I2C_Mem_Write>
	HAL_MAX_DELAY);
}
 800363c:	bf00      	nop
 800363e:	3708      	adds	r7, #8
 8003640:	46bd      	mov	sp, r7
 8003642:	bd80      	pop	{r7, pc}
 8003644:	200001f4 	.word	0x200001f4

08003648 <LSM9DS1_Init>:
	HAL_I2C_Mem_Read(&hi2c1, addr, reg, I2C_MEMADD_SIZE_8BIT, &value, 1,
	HAL_MAX_DELAY);
	return value;
}

void LSM9DS1_Init() {
 8003648:	b580      	push	{r7, lr}
 800364a:	af00      	add	r7, sp, #0
	//sensor reset
	LSM9DS1_WriteRegister(LSM9DS1_ADDR, CTRL_REG8, 0x05);
 800364c:	2205      	movs	r2, #5
 800364e:	2122      	movs	r1, #34	@ 0x22
 8003650:	20d4      	movs	r0, #212	@ 0xd4
 8003652:	f7ff ffdb 	bl	800360c <LSM9DS1_WriteRegister>
	HAL_Delay(10);
 8003656:	200a      	movs	r0, #10
 8003658:	f7fd fcb5 	bl	8000fc6 <HAL_Delay>

	//low-power setting
	//gyro setting
//	LSM9DS1_WriteRegister(LSM9DS1_ADDR, CTRL_REG1_G, 0x40); //gyro ODR 59.5 Hz(low-power mode), full scale 245dps(basic)
	LSM9DS1_WriteRegister(LSM9DS1_ADDR, CTRL_REG1_G, 0x60); //ODR_G = 119Hz, FS = 245dps
 800365c:	2260      	movs	r2, #96	@ 0x60
 800365e:	2110      	movs	r1, #16
 8003660:	20d4      	movs	r0, #212	@ 0xd4
 8003662:	f7ff ffd3 	bl	800360c <LSM9DS1_WriteRegister>
//	LSM9DS1_WriteRegister(LSM9DS1_ADDR, CTRL_REG1_G, 0x6C); //ODR_G = 119Hz, FS = 2000dps
	LSM9DS1_WriteRegister(LSM9DS1_ADDR, CTRL_REG3_G, 0x80); //gyro low-power mode activate
 8003666:	2280      	movs	r2, #128	@ 0x80
 8003668:	2112      	movs	r1, #18
 800366a:	20d4      	movs	r0, #212	@ 0xd4
 800366c:	f7ff ffce 	bl	800360c <LSM9DS1_WriteRegister>
	HAL_Delay(10);
 8003670:	200a      	movs	r0, #10
 8003672:	f7fd fca8 	bl	8000fc6 <HAL_Delay>

	//accel setting
//	LSM9DS1_WriteRegister(LSM9DS1_ADDR, CTRL_REG6_XL, 0x20); //accel ODR 10Hz, full scale 2g(basic)
	LSM9DS1_WriteRegister(LSM9DS1_ADDR, CTRL_REG6_XL, 0x60); // ODR_XL = 119Hz, FS = ±2g
 8003676:	2260      	movs	r2, #96	@ 0x60
 8003678:	2120      	movs	r1, #32
 800367a:	20d4      	movs	r0, #212	@ 0xd4
 800367c:	f7ff ffc6 	bl	800360c <LSM9DS1_WriteRegister>
//	LSM9DS1_WriteRegister(LSM9DS1_ADDR, CTRL_REG6_XL, 0x58); // ODR_XL = 119Hz, FS = ±4g
//	LSM9DS1_WriteRegister(LSM9DS1_ADDR, CTRL_REG6_XL, 0x68); // ODR_XL = 119Hz, FS = ±8g
	LSM9DS1_WriteRegister(LSM9DS1_ADDR, CTRL_REG7_XL, 0x00); //accel low-power mode activate
 8003680:	2200      	movs	r2, #0
 8003682:	2121      	movs	r1, #33	@ 0x21
 8003684:	20d4      	movs	r0, #212	@ 0xd4
 8003686:	f7ff ffc1 	bl	800360c <LSM9DS1_WriteRegister>
	HAL_Delay(10);
 800368a:	200a      	movs	r0, #10
 800368c:	f7fd fc9b 	bl	8000fc6 <HAL_Delay>

	//mag setting
//	LSM9DS1_WriteRegister(MAG_ADDR, CTRL_REG1_M, 0x10); // mag ODR 10Hz, temp-comp activate
	LSM9DS1_WriteRegister(MAG_ADDR, CTRL_REG1_M, 0x7C); // OM = 11 (ultra-high), DO = 110 (80Hz)
 8003690:	227c      	movs	r2, #124	@ 0x7c
 8003692:	2120      	movs	r1, #32
 8003694:	203c      	movs	r0, #60	@ 0x3c
 8003696:	f7ff ffb9 	bl	800360c <LSM9DS1_WriteRegister>
	LSM9DS1_WriteRegister(MAG_ADDR, CTRL_REG3_M, 0x00); // mag Continuous-conversion mode activate
 800369a:	2200      	movs	r2, #0
 800369c:	2122      	movs	r1, #34	@ 0x22
 800369e:	203c      	movs	r0, #60	@ 0x3c
 80036a0:	f7ff ffb4 	bl	800360c <LSM9DS1_WriteRegister>
	HAL_Delay(10);
 80036a4:	200a      	movs	r0, #10
 80036a6:	f7fd fc8e 	bl	8000fc6 <HAL_Delay>
//
//	//mag setting
//	LSM9DS1_WriteRegister(MAG_ADDR, CTRL_REG1_M, 0x70); // mag ODR 80Hz, temp-comp activate
//	LSM9DS1_WriteRegister(MAG_ADDR, CTRL_REG3_M, 0x00); // mag Continuous-conversion mode activate
//	HAL_Delay(10);
}
 80036aa:	bf00      	nop
 80036ac:	bd80      	pop	{r7, pc}
	...

080036b0 <micros>:

uint32_t micros(void) {
 80036b0:	b480      	push	{r7}
 80036b2:	af00      	add	r7, sp, #0
	return micro_time = __HAL_TIM_GET_COUNTER(&htim2);
 80036b4:	4b05      	ldr	r3, [pc, #20]	@ (80036cc <micros+0x1c>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036ba:	4a05      	ldr	r2, [pc, #20]	@ (80036d0 <micros+0x20>)
 80036bc:	6013      	str	r3, [r2, #0]
 80036be:	4b04      	ldr	r3, [pc, #16]	@ (80036d0 <micros+0x20>)
 80036c0:	681b      	ldr	r3, [r3, #0]
}
 80036c2:	4618      	mov	r0, r3
 80036c4:	46bd      	mov	sp, r7
 80036c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ca:	4770      	bx	lr
 80036cc:	20000308 	.word	0x20000308
 80036d0:	20000484 	.word	0x20000484

080036d4 <invSqrt>:

float invSqrt(float x) {
 80036d4:	b480      	push	{r7}
 80036d6:	b087      	sub	sp, #28
 80036d8:	af00      	add	r7, sp, #0
 80036da:	ed87 0a01 	vstr	s0, [r7, #4]
	float halfx = 0.5f * x;
 80036de:	edd7 7a01 	vldr	s15, [r7, #4]
 80036e2:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80036e6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80036ea:	edc7 7a05 	vstr	s15, [r7, #20]
	float y = x;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	613b      	str	r3, [r7, #16]
	long i = *(long*) &y;
 80036f2:	f107 0310 	add.w	r3, r7, #16
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	60fb      	str	r3, [r7, #12]
	i = 0x5f3759df - (i >> 1);
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	105a      	asrs	r2, r3, #1
 80036fe:	4b12      	ldr	r3, [pc, #72]	@ (8003748 <invSqrt+0x74>)
 8003700:	1a9b      	subs	r3, r3, r2
 8003702:	60fb      	str	r3, [r7, #12]
	y = *(float*) &i;
 8003704:	f107 030c 	add.w	r3, r7, #12
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	613b      	str	r3, [r7, #16]
	y = y * (1.5f - (halfx * y * y));
 800370c:	ed97 7a04 	vldr	s14, [r7, #16]
 8003710:	edd7 7a05 	vldr	s15, [r7, #20]
 8003714:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003718:	edd7 7a04 	vldr	s15, [r7, #16]
 800371c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003720:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 8003724:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003728:	edd7 7a04 	vldr	s15, [r7, #16]
 800372c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003730:	edc7 7a04 	vstr	s15, [r7, #16]
	return y;
 8003734:	693b      	ldr	r3, [r7, #16]
 8003736:	ee07 3a90 	vmov	s15, r3
}
 800373a:	eeb0 0a67 	vmov.f32	s0, s15
 800373e:	371c      	adds	r7, #28
 8003740:	46bd      	mov	sp, r7
 8003742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003746:	4770      	bx	lr
 8003748:	5f3759df 	.word	0x5f3759df

0800374c <vector_dot>:

float vector_dot(float a[3], float b[3]) {
 800374c:	b480      	push	{r7}
 800374e:	b083      	sub	sp, #12
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
 8003754:	6039      	str	r1, [r7, #0]
	return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	ed93 7a00 	vldr	s14, [r3]
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	edd3 7a00 	vldr	s15, [r3]
 8003762:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	3304      	adds	r3, #4
 800376a:	edd3 6a00 	vldr	s13, [r3]
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	3304      	adds	r3, #4
 8003772:	edd3 7a00 	vldr	s15, [r3]
 8003776:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800377a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	3308      	adds	r3, #8
 8003782:	edd3 6a00 	vldr	s13, [r3]
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	3308      	adds	r3, #8
 800378a:	edd3 7a00 	vldr	s15, [r3]
 800378e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003792:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8003796:	eeb0 0a67 	vmov.f32	s0, s15
 800379a:	370c      	adds	r7, #12
 800379c:	46bd      	mov	sp, r7
 800379e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a2:	4770      	bx	lr

080037a4 <vector_normalize>:

void vector_normalize(float a[3]) {
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b084      	sub	sp, #16
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
	float mag = sqrt(vector_dot(a, a));
 80037ac:	6879      	ldr	r1, [r7, #4]
 80037ae:	6878      	ldr	r0, [r7, #4]
 80037b0:	f7ff ffcc 	bl	800374c <vector_dot>
 80037b4:	ee10 3a10 	vmov	r3, s0
 80037b8:	4618      	mov	r0, r3
 80037ba:	f7fc fe9d 	bl	80004f8 <__aeabi_f2d>
 80037be:	4602      	mov	r2, r0
 80037c0:	460b      	mov	r3, r1
 80037c2:	ec43 2b10 	vmov	d0, r2, r3
 80037c6:	f00d ff75 	bl	80116b4 <sqrt>
 80037ca:	ec53 2b10 	vmov	r2, r3, d0
 80037ce:	4610      	mov	r0, r2
 80037d0:	4619      	mov	r1, r3
 80037d2:	f7fd f999 	bl	8000b08 <__aeabi_d2f>
 80037d6:	4603      	mov	r3, r0
 80037d8:	60fb      	str	r3, [r7, #12]
	a[0] /= mag;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	edd3 6a00 	vldr	s13, [r3]
 80037e0:	ed97 7a03 	vldr	s14, [r7, #12]
 80037e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	edc3 7a00 	vstr	s15, [r3]
	a[1] /= mag;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	3304      	adds	r3, #4
 80037f2:	edd3 6a00 	vldr	s13, [r3]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	3304      	adds	r3, #4
 80037fa:	ed97 7a03 	vldr	s14, [r7, #12]
 80037fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003802:	edc3 7a00 	vstr	s15, [r3]
	a[2] /= mag;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	3308      	adds	r3, #8
 800380a:	edd3 6a00 	vldr	s13, [r3]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	3308      	adds	r3, #8
 8003812:	ed97 7a03 	vldr	s14, [r7, #12]
 8003816:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800381a:	edc3 7a00 	vstr	s15, [r3]
}
 800381e:	bf00      	nop
 8003820:	3710      	adds	r7, #16
 8003822:	46bd      	mov	sp, r7
 8003824:	bd80      	pop	{r7, pc}
	...

08003828 <MadgwickAHRSupdate>:

void MadgwickAHRSupdate(float gx, float gy, float gz, float ax, float ay,
		float az, float mx, float my, float mz) {
 8003828:	b580      	push	{r7, lr}
 800382a:	b08a      	sub	sp, #40	@ 0x28
 800382c:	af00      	add	r7, sp, #0
 800382e:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24
 8003832:	edc7 0a08 	vstr	s1, [r7, #32]
 8003836:	ed87 1a07 	vstr	s2, [r7, #28]
 800383a:	edc7 1a06 	vstr	s3, [r7, #24]
 800383e:	ed87 2a05 	vstr	s4, [r7, #20]
 8003842:	edc7 2a04 	vstr	s5, [r7, #16]
 8003846:	ed87 3a03 	vstr	s6, [r7, #12]
 800384a:	edc7 3a02 	vstr	s7, [r7, #8]
 800384e:	ed87 4a01 	vstr	s8, [r7, #4]

	qDot1 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz);
 8003852:	4bda      	ldr	r3, [pc, #872]	@ (8003bbc <MadgwickAHRSupdate+0x394>)
 8003854:	edd3 7a00 	vldr	s15, [r3]
 8003858:	eeb1 7a67 	vneg.f32	s14, s15
 800385c:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8003860:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003864:	4bd6      	ldr	r3, [pc, #856]	@ (8003bc0 <MadgwickAHRSupdate+0x398>)
 8003866:	edd3 6a00 	vldr	s13, [r3]
 800386a:	edd7 7a08 	vldr	s15, [r7, #32]
 800386e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003872:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003876:	4bd3      	ldr	r3, [pc, #844]	@ (8003bc4 <MadgwickAHRSupdate+0x39c>)
 8003878:	edd3 6a00 	vldr	s13, [r3]
 800387c:	edd7 7a07 	vldr	s15, [r7, #28]
 8003880:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003884:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003888:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800388c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003890:	4bcd      	ldr	r3, [pc, #820]	@ (8003bc8 <MadgwickAHRSupdate+0x3a0>)
 8003892:	edc3 7a00 	vstr	s15, [r3]
	qDot2 = 0.5f * (q0 * gx + q2 * gz - q3 * gy);
 8003896:	4bcd      	ldr	r3, [pc, #820]	@ (8003bcc <MadgwickAHRSupdate+0x3a4>)
 8003898:	ed93 7a00 	vldr	s14, [r3]
 800389c:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80038a0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80038a4:	4bc6      	ldr	r3, [pc, #792]	@ (8003bc0 <MadgwickAHRSupdate+0x398>)
 80038a6:	edd3 6a00 	vldr	s13, [r3]
 80038aa:	edd7 7a07 	vldr	s15, [r7, #28]
 80038ae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80038b2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80038b6:	4bc3      	ldr	r3, [pc, #780]	@ (8003bc4 <MadgwickAHRSupdate+0x39c>)
 80038b8:	edd3 6a00 	vldr	s13, [r3]
 80038bc:	edd7 7a08 	vldr	s15, [r7, #32]
 80038c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80038c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80038c8:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80038cc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80038d0:	4bbf      	ldr	r3, [pc, #764]	@ (8003bd0 <MadgwickAHRSupdate+0x3a8>)
 80038d2:	edc3 7a00 	vstr	s15, [r3]
	qDot3 = 0.5f * (q0 * gy - q1 * gz + q3 * gx);
 80038d6:	4bbd      	ldr	r3, [pc, #756]	@ (8003bcc <MadgwickAHRSupdate+0x3a4>)
 80038d8:	ed93 7a00 	vldr	s14, [r3]
 80038dc:	edd7 7a08 	vldr	s15, [r7, #32]
 80038e0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80038e4:	4bb5      	ldr	r3, [pc, #724]	@ (8003bbc <MadgwickAHRSupdate+0x394>)
 80038e6:	edd3 6a00 	vldr	s13, [r3]
 80038ea:	edd7 7a07 	vldr	s15, [r7, #28]
 80038ee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80038f2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80038f6:	4bb3      	ldr	r3, [pc, #716]	@ (8003bc4 <MadgwickAHRSupdate+0x39c>)
 80038f8:	edd3 6a00 	vldr	s13, [r3]
 80038fc:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8003900:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003904:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003908:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800390c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003910:	4bb0      	ldr	r3, [pc, #704]	@ (8003bd4 <MadgwickAHRSupdate+0x3ac>)
 8003912:	edc3 7a00 	vstr	s15, [r3]
	qDot4 = 0.5f * (q0 * gz + q1 * gy - q2 * gx);
 8003916:	4bad      	ldr	r3, [pc, #692]	@ (8003bcc <MadgwickAHRSupdate+0x3a4>)
 8003918:	ed93 7a00 	vldr	s14, [r3]
 800391c:	edd7 7a07 	vldr	s15, [r7, #28]
 8003920:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003924:	4ba5      	ldr	r3, [pc, #660]	@ (8003bbc <MadgwickAHRSupdate+0x394>)
 8003926:	edd3 6a00 	vldr	s13, [r3]
 800392a:	edd7 7a08 	vldr	s15, [r7, #32]
 800392e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003932:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003936:	4ba2      	ldr	r3, [pc, #648]	@ (8003bc0 <MadgwickAHRSupdate+0x398>)
 8003938:	edd3 6a00 	vldr	s13, [r3]
 800393c:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8003940:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003944:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003948:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800394c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003950:	4ba1      	ldr	r3, [pc, #644]	@ (8003bd8 <MadgwickAHRSupdate+0x3b0>)
 8003952:	edc3 7a00 	vstr	s15, [r3]

	if (!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f))) {
 8003956:	edd7 7a06 	vldr	s15, [r7, #24]
 800395a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800395e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003962:	d10e      	bne.n	8003982 <MadgwickAHRSupdate+0x15a>
 8003964:	edd7 7a05 	vldr	s15, [r7, #20]
 8003968:	eef5 7a40 	vcmp.f32	s15, #0.0
 800396c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003970:	d107      	bne.n	8003982 <MadgwickAHRSupdate+0x15a>
 8003972:	edd7 7a04 	vldr	s15, [r7, #16]
 8003976:	eef5 7a40 	vcmp.f32	s15, #0.0
 800397a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800397e:	f000 874b 	beq.w	8004818 <MadgwickAHRSupdate+0xff0>

		recipNorm = invSqrt(ax * ax + ay * ay + az * az);
 8003982:	edd7 7a06 	vldr	s15, [r7, #24]
 8003986:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800398a:	edd7 7a05 	vldr	s15, [r7, #20]
 800398e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003992:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003996:	edd7 7a04 	vldr	s15, [r7, #16]
 800399a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800399e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80039a2:	eeb0 0a67 	vmov.f32	s0, s15
 80039a6:	f7ff fe95 	bl	80036d4 <invSqrt>
 80039aa:	eef0 7a40 	vmov.f32	s15, s0
 80039ae:	4b8b      	ldr	r3, [pc, #556]	@ (8003bdc <MadgwickAHRSupdate+0x3b4>)
 80039b0:	edc3 7a00 	vstr	s15, [r3]
		ax *= recipNorm;
 80039b4:	4b89      	ldr	r3, [pc, #548]	@ (8003bdc <MadgwickAHRSupdate+0x3b4>)
 80039b6:	edd3 7a00 	vldr	s15, [r3]
 80039ba:	ed97 7a06 	vldr	s14, [r7, #24]
 80039be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039c2:	edc7 7a06 	vstr	s15, [r7, #24]
		ay *= recipNorm;
 80039c6:	4b85      	ldr	r3, [pc, #532]	@ (8003bdc <MadgwickAHRSupdate+0x3b4>)
 80039c8:	edd3 7a00 	vldr	s15, [r3]
 80039cc:	ed97 7a05 	vldr	s14, [r7, #20]
 80039d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039d4:	edc7 7a05 	vstr	s15, [r7, #20]
		az *= recipNorm;
 80039d8:	4b80      	ldr	r3, [pc, #512]	@ (8003bdc <MadgwickAHRSupdate+0x3b4>)
 80039da:	edd3 7a00 	vldr	s15, [r3]
 80039de:	ed97 7a04 	vldr	s14, [r7, #16]
 80039e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039e6:	edc7 7a04 	vstr	s15, [r7, #16]

		recipNorm = invSqrt(mx * mx + my * my + mz * mz);
 80039ea:	edd7 7a03 	vldr	s15, [r7, #12]
 80039ee:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80039f2:	edd7 7a02 	vldr	s15, [r7, #8]
 80039f6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80039fa:	ee37 7a27 	vadd.f32	s14, s14, s15
 80039fe:	edd7 7a01 	vldr	s15, [r7, #4]
 8003a02:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003a06:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003a0a:	eeb0 0a67 	vmov.f32	s0, s15
 8003a0e:	f7ff fe61 	bl	80036d4 <invSqrt>
 8003a12:	eef0 7a40 	vmov.f32	s15, s0
 8003a16:	4b71      	ldr	r3, [pc, #452]	@ (8003bdc <MadgwickAHRSupdate+0x3b4>)
 8003a18:	edc3 7a00 	vstr	s15, [r3]
		mx *= recipNorm;
 8003a1c:	4b6f      	ldr	r3, [pc, #444]	@ (8003bdc <MadgwickAHRSupdate+0x3b4>)
 8003a1e:	edd3 7a00 	vldr	s15, [r3]
 8003a22:	ed97 7a03 	vldr	s14, [r7, #12]
 8003a26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a2a:	edc7 7a03 	vstr	s15, [r7, #12]
		my *= recipNorm;
 8003a2e:	4b6b      	ldr	r3, [pc, #428]	@ (8003bdc <MadgwickAHRSupdate+0x3b4>)
 8003a30:	edd3 7a00 	vldr	s15, [r3]
 8003a34:	ed97 7a02 	vldr	s14, [r7, #8]
 8003a38:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a3c:	edc7 7a02 	vstr	s15, [r7, #8]
		mz *= recipNorm;
 8003a40:	4b66      	ldr	r3, [pc, #408]	@ (8003bdc <MadgwickAHRSupdate+0x3b4>)
 8003a42:	edd3 7a00 	vldr	s15, [r3]
 8003a46:	ed97 7a01 	vldr	s14, [r7, #4]
 8003a4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a4e:	edc7 7a01 	vstr	s15, [r7, #4]

		_2q0mx = 2.0f * q0 * mx;
 8003a52:	4b5e      	ldr	r3, [pc, #376]	@ (8003bcc <MadgwickAHRSupdate+0x3a4>)
 8003a54:	edd3 7a00 	vldr	s15, [r3]
 8003a58:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8003a5c:	edd7 7a03 	vldr	s15, [r7, #12]
 8003a60:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a64:	4b5e      	ldr	r3, [pc, #376]	@ (8003be0 <MadgwickAHRSupdate+0x3b8>)
 8003a66:	edc3 7a00 	vstr	s15, [r3]
		_2q0my = 2.0f * q0 * my;
 8003a6a:	4b58      	ldr	r3, [pc, #352]	@ (8003bcc <MadgwickAHRSupdate+0x3a4>)
 8003a6c:	edd3 7a00 	vldr	s15, [r3]
 8003a70:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8003a74:	edd7 7a02 	vldr	s15, [r7, #8]
 8003a78:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a7c:	4b59      	ldr	r3, [pc, #356]	@ (8003be4 <MadgwickAHRSupdate+0x3bc>)
 8003a7e:	edc3 7a00 	vstr	s15, [r3]
		_2q0mz = 2.0f * q0 * mz;
 8003a82:	4b52      	ldr	r3, [pc, #328]	@ (8003bcc <MadgwickAHRSupdate+0x3a4>)
 8003a84:	edd3 7a00 	vldr	s15, [r3]
 8003a88:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8003a8c:	edd7 7a01 	vldr	s15, [r7, #4]
 8003a90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a94:	4b54      	ldr	r3, [pc, #336]	@ (8003be8 <MadgwickAHRSupdate+0x3c0>)
 8003a96:	edc3 7a00 	vstr	s15, [r3]
		_2q1mx = 2.0f * q1 * mx;
 8003a9a:	4b48      	ldr	r3, [pc, #288]	@ (8003bbc <MadgwickAHRSupdate+0x394>)
 8003a9c:	edd3 7a00 	vldr	s15, [r3]
 8003aa0:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8003aa4:	edd7 7a03 	vldr	s15, [r7, #12]
 8003aa8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003aac:	4b4f      	ldr	r3, [pc, #316]	@ (8003bec <MadgwickAHRSupdate+0x3c4>)
 8003aae:	edc3 7a00 	vstr	s15, [r3]
		_2q0 = 2.0f * q0;
 8003ab2:	4b46      	ldr	r3, [pc, #280]	@ (8003bcc <MadgwickAHRSupdate+0x3a4>)
 8003ab4:	edd3 7a00 	vldr	s15, [r3]
 8003ab8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003abc:	4b4c      	ldr	r3, [pc, #304]	@ (8003bf0 <MadgwickAHRSupdate+0x3c8>)
 8003abe:	edc3 7a00 	vstr	s15, [r3]
		_2q1 = 2.0f * q1;
 8003ac2:	4b3e      	ldr	r3, [pc, #248]	@ (8003bbc <MadgwickAHRSupdate+0x394>)
 8003ac4:	edd3 7a00 	vldr	s15, [r3]
 8003ac8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003acc:	4b49      	ldr	r3, [pc, #292]	@ (8003bf4 <MadgwickAHRSupdate+0x3cc>)
 8003ace:	edc3 7a00 	vstr	s15, [r3]
		_2q2 = 2.0f * q2;
 8003ad2:	4b3b      	ldr	r3, [pc, #236]	@ (8003bc0 <MadgwickAHRSupdate+0x398>)
 8003ad4:	edd3 7a00 	vldr	s15, [r3]
 8003ad8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003adc:	4b46      	ldr	r3, [pc, #280]	@ (8003bf8 <MadgwickAHRSupdate+0x3d0>)
 8003ade:	edc3 7a00 	vstr	s15, [r3]
		_2q3 = 2.0f * q3;
 8003ae2:	4b38      	ldr	r3, [pc, #224]	@ (8003bc4 <MadgwickAHRSupdate+0x39c>)
 8003ae4:	edd3 7a00 	vldr	s15, [r3]
 8003ae8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003aec:	4b43      	ldr	r3, [pc, #268]	@ (8003bfc <MadgwickAHRSupdate+0x3d4>)
 8003aee:	edc3 7a00 	vstr	s15, [r3]
		_2q0q2 = 2.0f * q0 * q2;
 8003af2:	4b36      	ldr	r3, [pc, #216]	@ (8003bcc <MadgwickAHRSupdate+0x3a4>)
 8003af4:	edd3 7a00 	vldr	s15, [r3]
 8003af8:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8003afc:	4b30      	ldr	r3, [pc, #192]	@ (8003bc0 <MadgwickAHRSupdate+0x398>)
 8003afe:	edd3 7a00 	vldr	s15, [r3]
 8003b02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b06:	4b3e      	ldr	r3, [pc, #248]	@ (8003c00 <MadgwickAHRSupdate+0x3d8>)
 8003b08:	edc3 7a00 	vstr	s15, [r3]
		_2q2q3 = 2.0f * q2 * q3;
 8003b0c:	4b2c      	ldr	r3, [pc, #176]	@ (8003bc0 <MadgwickAHRSupdate+0x398>)
 8003b0e:	edd3 7a00 	vldr	s15, [r3]
 8003b12:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8003b16:	4b2b      	ldr	r3, [pc, #172]	@ (8003bc4 <MadgwickAHRSupdate+0x39c>)
 8003b18:	edd3 7a00 	vldr	s15, [r3]
 8003b1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b20:	4b38      	ldr	r3, [pc, #224]	@ (8003c04 <MadgwickAHRSupdate+0x3dc>)
 8003b22:	edc3 7a00 	vstr	s15, [r3]
		q0q0 = q0 * q0;
 8003b26:	4b29      	ldr	r3, [pc, #164]	@ (8003bcc <MadgwickAHRSupdate+0x3a4>)
 8003b28:	ed93 7a00 	vldr	s14, [r3]
 8003b2c:	4b27      	ldr	r3, [pc, #156]	@ (8003bcc <MadgwickAHRSupdate+0x3a4>)
 8003b2e:	edd3 7a00 	vldr	s15, [r3]
 8003b32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b36:	4b34      	ldr	r3, [pc, #208]	@ (8003c08 <MadgwickAHRSupdate+0x3e0>)
 8003b38:	edc3 7a00 	vstr	s15, [r3]
		q0q1 = q0 * q1;
 8003b3c:	4b23      	ldr	r3, [pc, #140]	@ (8003bcc <MadgwickAHRSupdate+0x3a4>)
 8003b3e:	ed93 7a00 	vldr	s14, [r3]
 8003b42:	4b1e      	ldr	r3, [pc, #120]	@ (8003bbc <MadgwickAHRSupdate+0x394>)
 8003b44:	edd3 7a00 	vldr	s15, [r3]
 8003b48:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b4c:	4b2f      	ldr	r3, [pc, #188]	@ (8003c0c <MadgwickAHRSupdate+0x3e4>)
 8003b4e:	edc3 7a00 	vstr	s15, [r3]
		q0q2 = q0 * q2;
 8003b52:	4b1e      	ldr	r3, [pc, #120]	@ (8003bcc <MadgwickAHRSupdate+0x3a4>)
 8003b54:	ed93 7a00 	vldr	s14, [r3]
 8003b58:	4b19      	ldr	r3, [pc, #100]	@ (8003bc0 <MadgwickAHRSupdate+0x398>)
 8003b5a:	edd3 7a00 	vldr	s15, [r3]
 8003b5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b62:	4b2b      	ldr	r3, [pc, #172]	@ (8003c10 <MadgwickAHRSupdate+0x3e8>)
 8003b64:	edc3 7a00 	vstr	s15, [r3]
		q0q3 = q0 * q3;
 8003b68:	4b18      	ldr	r3, [pc, #96]	@ (8003bcc <MadgwickAHRSupdate+0x3a4>)
 8003b6a:	ed93 7a00 	vldr	s14, [r3]
 8003b6e:	4b15      	ldr	r3, [pc, #84]	@ (8003bc4 <MadgwickAHRSupdate+0x39c>)
 8003b70:	edd3 7a00 	vldr	s15, [r3]
 8003b74:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b78:	4b26      	ldr	r3, [pc, #152]	@ (8003c14 <MadgwickAHRSupdate+0x3ec>)
 8003b7a:	edc3 7a00 	vstr	s15, [r3]
		q1q1 = q1 * q1;
 8003b7e:	4b0f      	ldr	r3, [pc, #60]	@ (8003bbc <MadgwickAHRSupdate+0x394>)
 8003b80:	ed93 7a00 	vldr	s14, [r3]
 8003b84:	4b0d      	ldr	r3, [pc, #52]	@ (8003bbc <MadgwickAHRSupdate+0x394>)
 8003b86:	edd3 7a00 	vldr	s15, [r3]
 8003b8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b8e:	4b22      	ldr	r3, [pc, #136]	@ (8003c18 <MadgwickAHRSupdate+0x3f0>)
 8003b90:	edc3 7a00 	vstr	s15, [r3]
		q1q2 = q1 * q2;
 8003b94:	4b09      	ldr	r3, [pc, #36]	@ (8003bbc <MadgwickAHRSupdate+0x394>)
 8003b96:	ed93 7a00 	vldr	s14, [r3]
 8003b9a:	4b09      	ldr	r3, [pc, #36]	@ (8003bc0 <MadgwickAHRSupdate+0x398>)
 8003b9c:	edd3 7a00 	vldr	s15, [r3]
 8003ba0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ba4:	4b1d      	ldr	r3, [pc, #116]	@ (8003c1c <MadgwickAHRSupdate+0x3f4>)
 8003ba6:	edc3 7a00 	vstr	s15, [r3]
		q1q3 = q1 * q3;
 8003baa:	4b04      	ldr	r3, [pc, #16]	@ (8003bbc <MadgwickAHRSupdate+0x394>)
 8003bac:	ed93 7a00 	vldr	s14, [r3]
 8003bb0:	4b04      	ldr	r3, [pc, #16]	@ (8003bc4 <MadgwickAHRSupdate+0x39c>)
 8003bb2:	edd3 7a00 	vldr	s15, [r3]
 8003bb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bba:	e031      	b.n	8003c20 <MadgwickAHRSupdate+0x3f8>
 8003bbc:	20000470 	.word	0x20000470
 8003bc0:	20000474 	.word	0x20000474
 8003bc4:	20000478 	.word	0x20000478
 8003bc8:	200003e0 	.word	0x200003e0
 8003bcc:	20000008 	.word	0x20000008
 8003bd0:	200003e4 	.word	0x200003e4
 8003bd4:	200003e8 	.word	0x200003e8
 8003bd8:	200003ec 	.word	0x200003ec
 8003bdc:	200003cc 	.word	0x200003cc
 8003be0:	200003f8 	.word	0x200003f8
 8003be4:	200003fc 	.word	0x200003fc
 8003be8:	20000400 	.word	0x20000400
 8003bec:	20000404 	.word	0x20000404
 8003bf0:	20000418 	.word	0x20000418
 8003bf4:	2000041c 	.word	0x2000041c
 8003bf8:	20000420 	.word	0x20000420
 8003bfc:	20000424 	.word	0x20000424
 8003c00:	20000428 	.word	0x20000428
 8003c04:	2000042c 	.word	0x2000042c
 8003c08:	20000430 	.word	0x20000430
 8003c0c:	20000434 	.word	0x20000434
 8003c10:	20000438 	.word	0x20000438
 8003c14:	2000043c 	.word	0x2000043c
 8003c18:	20000440 	.word	0x20000440
 8003c1c:	20000444 	.word	0x20000444
 8003c20:	4bd8      	ldr	r3, [pc, #864]	@ (8003f84 <MadgwickAHRSupdate+0x75c>)
 8003c22:	edc3 7a00 	vstr	s15, [r3]
		q2q2 = q2 * q2;
 8003c26:	4bd8      	ldr	r3, [pc, #864]	@ (8003f88 <MadgwickAHRSupdate+0x760>)
 8003c28:	ed93 7a00 	vldr	s14, [r3]
 8003c2c:	4bd6      	ldr	r3, [pc, #856]	@ (8003f88 <MadgwickAHRSupdate+0x760>)
 8003c2e:	edd3 7a00 	vldr	s15, [r3]
 8003c32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c36:	4bd5      	ldr	r3, [pc, #852]	@ (8003f8c <MadgwickAHRSupdate+0x764>)
 8003c38:	edc3 7a00 	vstr	s15, [r3]
		q2q3 = q2 * q3;
 8003c3c:	4bd2      	ldr	r3, [pc, #840]	@ (8003f88 <MadgwickAHRSupdate+0x760>)
 8003c3e:	ed93 7a00 	vldr	s14, [r3]
 8003c42:	4bd3      	ldr	r3, [pc, #844]	@ (8003f90 <MadgwickAHRSupdate+0x768>)
 8003c44:	edd3 7a00 	vldr	s15, [r3]
 8003c48:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c4c:	4bd1      	ldr	r3, [pc, #836]	@ (8003f94 <MadgwickAHRSupdate+0x76c>)
 8003c4e:	edc3 7a00 	vstr	s15, [r3]
		q3q3 = q3 * q3;
 8003c52:	4bcf      	ldr	r3, [pc, #828]	@ (8003f90 <MadgwickAHRSupdate+0x768>)
 8003c54:	ed93 7a00 	vldr	s14, [r3]
 8003c58:	4bcd      	ldr	r3, [pc, #820]	@ (8003f90 <MadgwickAHRSupdate+0x768>)
 8003c5a:	edd3 7a00 	vldr	s15, [r3]
 8003c5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c62:	4bcd      	ldr	r3, [pc, #820]	@ (8003f98 <MadgwickAHRSupdate+0x770>)
 8003c64:	edc3 7a00 	vstr	s15, [r3]

		hx = mx * q0q0 - _2q0my * q3 + _2q0mz * q2 + mx * q1q1 + _2q1 * my * q2
 8003c68:	4bcc      	ldr	r3, [pc, #816]	@ (8003f9c <MadgwickAHRSupdate+0x774>)
 8003c6a:	ed93 7a00 	vldr	s14, [r3]
 8003c6e:	edd7 7a03 	vldr	s15, [r7, #12]
 8003c72:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003c76:	4bca      	ldr	r3, [pc, #808]	@ (8003fa0 <MadgwickAHRSupdate+0x778>)
 8003c78:	edd3 6a00 	vldr	s13, [r3]
 8003c7c:	4bc4      	ldr	r3, [pc, #784]	@ (8003f90 <MadgwickAHRSupdate+0x768>)
 8003c7e:	edd3 7a00 	vldr	s15, [r3]
 8003c82:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003c86:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003c8a:	4bc6      	ldr	r3, [pc, #792]	@ (8003fa4 <MadgwickAHRSupdate+0x77c>)
 8003c8c:	edd3 6a00 	vldr	s13, [r3]
 8003c90:	4bbd      	ldr	r3, [pc, #756]	@ (8003f88 <MadgwickAHRSupdate+0x760>)
 8003c92:	edd3 7a00 	vldr	s15, [r3]
 8003c96:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003c9a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003c9e:	4bc2      	ldr	r3, [pc, #776]	@ (8003fa8 <MadgwickAHRSupdate+0x780>)
 8003ca0:	edd3 6a00 	vldr	s13, [r3]
 8003ca4:	edd7 7a03 	vldr	s15, [r7, #12]
 8003ca8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003cac:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003cb0:	4bbe      	ldr	r3, [pc, #760]	@ (8003fac <MadgwickAHRSupdate+0x784>)
 8003cb2:	edd3 6a00 	vldr	s13, [r3]
 8003cb6:	edd7 7a02 	vldr	s15, [r7, #8]
 8003cba:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003cbe:	4bb2      	ldr	r3, [pc, #712]	@ (8003f88 <MadgwickAHRSupdate+0x760>)
 8003cc0:	edd3 7a00 	vldr	s15, [r3]
 8003cc4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003cc8:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ _2q1 * mz * q3 - mx * q2q2 - mx * q3q3;
 8003ccc:	4bb7      	ldr	r3, [pc, #732]	@ (8003fac <MadgwickAHRSupdate+0x784>)
 8003cce:	edd3 6a00 	vldr	s13, [r3]
 8003cd2:	edd7 7a01 	vldr	s15, [r7, #4]
 8003cd6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003cda:	4bad      	ldr	r3, [pc, #692]	@ (8003f90 <MadgwickAHRSupdate+0x768>)
 8003cdc:	edd3 7a00 	vldr	s15, [r3]
 8003ce0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003ce4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003ce8:	4ba8      	ldr	r3, [pc, #672]	@ (8003f8c <MadgwickAHRSupdate+0x764>)
 8003cea:	edd3 6a00 	vldr	s13, [r3]
 8003cee:	edd7 7a03 	vldr	s15, [r7, #12]
 8003cf2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003cf6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003cfa:	4ba7      	ldr	r3, [pc, #668]	@ (8003f98 <MadgwickAHRSupdate+0x770>)
 8003cfc:	edd3 6a00 	vldr	s13, [r3]
 8003d00:	edd7 7a03 	vldr	s15, [r7, #12]
 8003d04:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003d08:	ee77 7a67 	vsub.f32	s15, s14, s15
		hx = mx * q0q0 - _2q0my * q3 + _2q0mz * q2 + mx * q1q1 + _2q1 * my * q2
 8003d0c:	4ba8      	ldr	r3, [pc, #672]	@ (8003fb0 <MadgwickAHRSupdate+0x788>)
 8003d0e:	edc3 7a00 	vstr	s15, [r3]
		hy = _2q0mx * q3 + my * q0q0 - _2q0mz * q1 + _2q1mx * q2 - my * q1q1
 8003d12:	4ba8      	ldr	r3, [pc, #672]	@ (8003fb4 <MadgwickAHRSupdate+0x78c>)
 8003d14:	ed93 7a00 	vldr	s14, [r3]
 8003d18:	4b9d      	ldr	r3, [pc, #628]	@ (8003f90 <MadgwickAHRSupdate+0x768>)
 8003d1a:	edd3 7a00 	vldr	s15, [r3]
 8003d1e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003d22:	4b9e      	ldr	r3, [pc, #632]	@ (8003f9c <MadgwickAHRSupdate+0x774>)
 8003d24:	edd3 6a00 	vldr	s13, [r3]
 8003d28:	edd7 7a02 	vldr	s15, [r7, #8]
 8003d2c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003d30:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003d34:	4b9b      	ldr	r3, [pc, #620]	@ (8003fa4 <MadgwickAHRSupdate+0x77c>)
 8003d36:	edd3 6a00 	vldr	s13, [r3]
 8003d3a:	4b9f      	ldr	r3, [pc, #636]	@ (8003fb8 <MadgwickAHRSupdate+0x790>)
 8003d3c:	edd3 7a00 	vldr	s15, [r3]
 8003d40:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003d44:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003d48:	4b9c      	ldr	r3, [pc, #624]	@ (8003fbc <MadgwickAHRSupdate+0x794>)
 8003d4a:	edd3 6a00 	vldr	s13, [r3]
 8003d4e:	4b8e      	ldr	r3, [pc, #568]	@ (8003f88 <MadgwickAHRSupdate+0x760>)
 8003d50:	edd3 7a00 	vldr	s15, [r3]
 8003d54:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003d58:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003d5c:	4b92      	ldr	r3, [pc, #584]	@ (8003fa8 <MadgwickAHRSupdate+0x780>)
 8003d5e:	edd3 6a00 	vldr	s13, [r3]
 8003d62:	edd7 7a02 	vldr	s15, [r7, #8]
 8003d66:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003d6a:	ee37 7a67 	vsub.f32	s14, s14, s15
				+ my * q2q2 + _2q2 * mz * q3 - my * q3q3;
 8003d6e:	4b87      	ldr	r3, [pc, #540]	@ (8003f8c <MadgwickAHRSupdate+0x764>)
 8003d70:	edd3 6a00 	vldr	s13, [r3]
 8003d74:	edd7 7a02 	vldr	s15, [r7, #8]
 8003d78:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003d7c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003d80:	4b8f      	ldr	r3, [pc, #572]	@ (8003fc0 <MadgwickAHRSupdate+0x798>)
 8003d82:	edd3 6a00 	vldr	s13, [r3]
 8003d86:	edd7 7a01 	vldr	s15, [r7, #4]
 8003d8a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003d8e:	4b80      	ldr	r3, [pc, #512]	@ (8003f90 <MadgwickAHRSupdate+0x768>)
 8003d90:	edd3 7a00 	vldr	s15, [r3]
 8003d94:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003d98:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003d9c:	4b7e      	ldr	r3, [pc, #504]	@ (8003f98 <MadgwickAHRSupdate+0x770>)
 8003d9e:	edd3 6a00 	vldr	s13, [r3]
 8003da2:	edd7 7a02 	vldr	s15, [r7, #8]
 8003da6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003daa:	ee77 7a67 	vsub.f32	s15, s14, s15
		hy = _2q0mx * q3 + my * q0q0 - _2q0mz * q1 + _2q1mx * q2 - my * q1q1
 8003dae:	4b85      	ldr	r3, [pc, #532]	@ (8003fc4 <MadgwickAHRSupdate+0x79c>)
 8003db0:	edc3 7a00 	vstr	s15, [r3]
		_2bx = sqrt(hx * hx + hy * hy);
 8003db4:	4b7e      	ldr	r3, [pc, #504]	@ (8003fb0 <MadgwickAHRSupdate+0x788>)
 8003db6:	ed93 7a00 	vldr	s14, [r3]
 8003dba:	4b7d      	ldr	r3, [pc, #500]	@ (8003fb0 <MadgwickAHRSupdate+0x788>)
 8003dbc:	edd3 7a00 	vldr	s15, [r3]
 8003dc0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003dc4:	4b7f      	ldr	r3, [pc, #508]	@ (8003fc4 <MadgwickAHRSupdate+0x79c>)
 8003dc6:	edd3 6a00 	vldr	s13, [r3]
 8003dca:	4b7e      	ldr	r3, [pc, #504]	@ (8003fc4 <MadgwickAHRSupdate+0x79c>)
 8003dcc:	edd3 7a00 	vldr	s15, [r3]
 8003dd0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003dd4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003dd8:	ee17 0a90 	vmov	r0, s15
 8003ddc:	f7fc fb8c 	bl	80004f8 <__aeabi_f2d>
 8003de0:	4602      	mov	r2, r0
 8003de2:	460b      	mov	r3, r1
 8003de4:	ec43 2b10 	vmov	d0, r2, r3
 8003de8:	f00d fc64 	bl	80116b4 <sqrt>
 8003dec:	ec53 2b10 	vmov	r2, r3, d0
 8003df0:	4610      	mov	r0, r2
 8003df2:	4619      	mov	r1, r3
 8003df4:	f7fc fe88 	bl	8000b08 <__aeabi_d2f>
 8003df8:	4603      	mov	r3, r0
 8003dfa:	4a73      	ldr	r2, [pc, #460]	@ (8003fc8 <MadgwickAHRSupdate+0x7a0>)
 8003dfc:	6013      	str	r3, [r2, #0]
		_2bz = -_2q0mx * q2 + _2q0my * q1 + mz * q0q0 + _2q1mx * q3 - mz * q1q1
 8003dfe:	4b6d      	ldr	r3, [pc, #436]	@ (8003fb4 <MadgwickAHRSupdate+0x78c>)
 8003e00:	edd3 7a00 	vldr	s15, [r3]
 8003e04:	eeb1 7a67 	vneg.f32	s14, s15
 8003e08:	4b5f      	ldr	r3, [pc, #380]	@ (8003f88 <MadgwickAHRSupdate+0x760>)
 8003e0a:	edd3 7a00 	vldr	s15, [r3]
 8003e0e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003e12:	4b63      	ldr	r3, [pc, #396]	@ (8003fa0 <MadgwickAHRSupdate+0x778>)
 8003e14:	edd3 6a00 	vldr	s13, [r3]
 8003e18:	4b67      	ldr	r3, [pc, #412]	@ (8003fb8 <MadgwickAHRSupdate+0x790>)
 8003e1a:	edd3 7a00 	vldr	s15, [r3]
 8003e1e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003e22:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003e26:	4b5d      	ldr	r3, [pc, #372]	@ (8003f9c <MadgwickAHRSupdate+0x774>)
 8003e28:	edd3 6a00 	vldr	s13, [r3]
 8003e2c:	edd7 7a01 	vldr	s15, [r7, #4]
 8003e30:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003e34:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003e38:	4b60      	ldr	r3, [pc, #384]	@ (8003fbc <MadgwickAHRSupdate+0x794>)
 8003e3a:	edd3 6a00 	vldr	s13, [r3]
 8003e3e:	4b54      	ldr	r3, [pc, #336]	@ (8003f90 <MadgwickAHRSupdate+0x768>)
 8003e40:	edd3 7a00 	vldr	s15, [r3]
 8003e44:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003e48:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003e4c:	4b56      	ldr	r3, [pc, #344]	@ (8003fa8 <MadgwickAHRSupdate+0x780>)
 8003e4e:	edd3 6a00 	vldr	s13, [r3]
 8003e52:	edd7 7a01 	vldr	s15, [r7, #4]
 8003e56:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003e5a:	ee37 7a67 	vsub.f32	s14, s14, s15
				+ _2q2 * my * q3 - mz * q2q2 + mz * q3q3;
 8003e5e:	4b58      	ldr	r3, [pc, #352]	@ (8003fc0 <MadgwickAHRSupdate+0x798>)
 8003e60:	edd3 6a00 	vldr	s13, [r3]
 8003e64:	edd7 7a02 	vldr	s15, [r7, #8]
 8003e68:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003e6c:	4b48      	ldr	r3, [pc, #288]	@ (8003f90 <MadgwickAHRSupdate+0x768>)
 8003e6e:	edd3 7a00 	vldr	s15, [r3]
 8003e72:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003e76:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003e7a:	4b44      	ldr	r3, [pc, #272]	@ (8003f8c <MadgwickAHRSupdate+0x764>)
 8003e7c:	edd3 6a00 	vldr	s13, [r3]
 8003e80:	edd7 7a01 	vldr	s15, [r7, #4]
 8003e84:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003e88:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003e8c:	4b42      	ldr	r3, [pc, #264]	@ (8003f98 <MadgwickAHRSupdate+0x770>)
 8003e8e:	edd3 6a00 	vldr	s13, [r3]
 8003e92:	edd7 7a01 	vldr	s15, [r7, #4]
 8003e96:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003e9a:	ee77 7a27 	vadd.f32	s15, s14, s15
		_2bz = -_2q0mx * q2 + _2q0my * q1 + mz * q0q0 + _2q1mx * q3 - mz * q1q1
 8003e9e:	4b4b      	ldr	r3, [pc, #300]	@ (8003fcc <MadgwickAHRSupdate+0x7a4>)
 8003ea0:	edc3 7a00 	vstr	s15, [r3]
		_4bx = 2.0f * _2bx;
 8003ea4:	4b48      	ldr	r3, [pc, #288]	@ (8003fc8 <MadgwickAHRSupdate+0x7a0>)
 8003ea6:	edd3 7a00 	vldr	s15, [r3]
 8003eaa:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003eae:	4b48      	ldr	r3, [pc, #288]	@ (8003fd0 <MadgwickAHRSupdate+0x7a8>)
 8003eb0:	edc3 7a00 	vstr	s15, [r3]
		_4bz = 2.0f * _2bz;
 8003eb4:	4b45      	ldr	r3, [pc, #276]	@ (8003fcc <MadgwickAHRSupdate+0x7a4>)
 8003eb6:	edd3 7a00 	vldr	s15, [r3]
 8003eba:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003ebe:	4b45      	ldr	r3, [pc, #276]	@ (8003fd4 <MadgwickAHRSupdate+0x7ac>)
 8003ec0:	edc3 7a00 	vstr	s15, [r3]

		s0 = -_2q2 * (2.0f * q1q3 - _2q0q2 - ax)
 8003ec4:	4b3e      	ldr	r3, [pc, #248]	@ (8003fc0 <MadgwickAHRSupdate+0x798>)
 8003ec6:	edd3 7a00 	vldr	s15, [r3]
 8003eca:	eeb1 7a67 	vneg.f32	s14, s15
 8003ece:	4b2d      	ldr	r3, [pc, #180]	@ (8003f84 <MadgwickAHRSupdate+0x75c>)
 8003ed0:	edd3 7a00 	vldr	s15, [r3]
 8003ed4:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8003ed8:	4b3f      	ldr	r3, [pc, #252]	@ (8003fd8 <MadgwickAHRSupdate+0x7b0>)
 8003eda:	edd3 7a00 	vldr	s15, [r3]
 8003ede:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003ee2:	edd7 7a06 	vldr	s15, [r7, #24]
 8003ee6:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003eea:	ee27 7a27 	vmul.f32	s14, s14, s15
				+ _2q1 * (2.0f * q0q1 + _2q2q3 - ay)
 8003eee:	4b3b      	ldr	r3, [pc, #236]	@ (8003fdc <MadgwickAHRSupdate+0x7b4>)
 8003ef0:	edd3 7a00 	vldr	s15, [r3]
 8003ef4:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8003ef8:	4b39      	ldr	r3, [pc, #228]	@ (8003fe0 <MadgwickAHRSupdate+0x7b8>)
 8003efa:	edd3 7a00 	vldr	s15, [r3]
 8003efe:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8003f02:	edd7 7a05 	vldr	s15, [r7, #20]
 8003f06:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003f0a:	4b28      	ldr	r3, [pc, #160]	@ (8003fac <MadgwickAHRSupdate+0x784>)
 8003f0c:	edd3 7a00 	vldr	s15, [r3]
 8003f10:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003f14:	ee37 7a27 	vadd.f32	s14, s14, s15
				- _2bz * q2
 8003f18:	4b2c      	ldr	r3, [pc, #176]	@ (8003fcc <MadgwickAHRSupdate+0x7a4>)
 8003f1a:	edd3 6a00 	vldr	s13, [r3]
 8003f1e:	4b1a      	ldr	r3, [pc, #104]	@ (8003f88 <MadgwickAHRSupdate+0x760>)
 8003f20:	edd3 7a00 	vldr	s15, [r3]
 8003f24:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2)
 8003f28:	4b18      	ldr	r3, [pc, #96]	@ (8003f8c <MadgwickAHRSupdate+0x764>)
 8003f2a:	edd3 7a00 	vldr	s15, [r3]
 8003f2e:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 8003f32:	ee36 6a67 	vsub.f32	s12, s12, s15
 8003f36:	4b18      	ldr	r3, [pc, #96]	@ (8003f98 <MadgwickAHRSupdate+0x770>)
 8003f38:	edd3 7a00 	vldr	s15, [r3]
 8003f3c:	ee36 6a67 	vsub.f32	s12, s12, s15
 8003f40:	4b21      	ldr	r3, [pc, #132]	@ (8003fc8 <MadgwickAHRSupdate+0x7a0>)
 8003f42:	edd3 7a00 	vldr	s15, [r3]
 8003f46:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003f4a:	4b0e      	ldr	r3, [pc, #56]	@ (8003f84 <MadgwickAHRSupdate+0x75c>)
 8003f4c:	edd3 5a00 	vldr	s11, [r3]
 8003f50:	4b24      	ldr	r3, [pc, #144]	@ (8003fe4 <MadgwickAHRSupdate+0x7bc>)
 8003f52:	edd3 7a00 	vldr	s15, [r3]
 8003f56:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8003f5a:	4b1c      	ldr	r3, [pc, #112]	@ (8003fcc <MadgwickAHRSupdate+0x7a4>)
 8003f5c:	edd3 7a00 	vldr	s15, [r3]
 8003f60:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8003f64:	ee36 6a27 	vadd.f32	s12, s12, s15
								- mx)
 8003f68:	edd7 7a03 	vldr	s15, [r7, #12]
 8003f6c:	ee76 7a67 	vsub.f32	s15, s12, s15
						* (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2)
 8003f70:	ee66 7aa7 	vmul.f32	s15, s13, s15
				- _2bz * q2
 8003f74:	ee37 7a67 	vsub.f32	s14, s14, s15
				+ (-_2bx * q3 + _2bz * q1)
 8003f78:	4b13      	ldr	r3, [pc, #76]	@ (8003fc8 <MadgwickAHRSupdate+0x7a0>)
 8003f7a:	edd3 7a00 	vldr	s15, [r3]
 8003f7e:	eef1 6a67 	vneg.f32	s13, s15
 8003f82:	e031      	b.n	8003fe8 <MadgwickAHRSupdate+0x7c0>
 8003f84:	20000448 	.word	0x20000448
 8003f88:	20000474 	.word	0x20000474
 8003f8c:	2000044c 	.word	0x2000044c
 8003f90:	20000478 	.word	0x20000478
 8003f94:	20000450 	.word	0x20000450
 8003f98:	20000454 	.word	0x20000454
 8003f9c:	20000430 	.word	0x20000430
 8003fa0:	200003fc 	.word	0x200003fc
 8003fa4:	20000400 	.word	0x20000400
 8003fa8:	20000440 	.word	0x20000440
 8003fac:	2000041c 	.word	0x2000041c
 8003fb0:	200003f0 	.word	0x200003f0
 8003fb4:	200003f8 	.word	0x200003f8
 8003fb8:	20000470 	.word	0x20000470
 8003fbc:	20000404 	.word	0x20000404
 8003fc0:	20000420 	.word	0x20000420
 8003fc4:	200003f4 	.word	0x200003f4
 8003fc8:	20000408 	.word	0x20000408
 8003fcc:	2000040c 	.word	0x2000040c
 8003fd0:	20000410 	.word	0x20000410
 8003fd4:	20000414 	.word	0x20000414
 8003fd8:	20000428 	.word	0x20000428
 8003fdc:	20000434 	.word	0x20000434
 8003fe0:	2000042c 	.word	0x2000042c
 8003fe4:	20000438 	.word	0x20000438
 8003fe8:	4bda      	ldr	r3, [pc, #872]	@ (8004354 <MadgwickAHRSupdate+0xb2c>)
 8003fea:	edd3 7a00 	vldr	s15, [r3]
 8003fee:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003ff2:	4bd9      	ldr	r3, [pc, #868]	@ (8004358 <MadgwickAHRSupdate+0xb30>)
 8003ff4:	ed93 6a00 	vldr	s12, [r3]
 8003ff8:	4bd8      	ldr	r3, [pc, #864]	@ (800435c <MadgwickAHRSupdate+0xb34>)
 8003ffa:	edd3 7a00 	vldr	s15, [r3]
 8003ffe:	ee66 7a27 	vmul.f32	s15, s12, s15
 8004002:	ee76 6aa7 	vadd.f32	s13, s13, s15
						* (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my)
 8004006:	4bd6      	ldr	r3, [pc, #856]	@ (8004360 <MadgwickAHRSupdate+0xb38>)
 8004008:	ed93 6a00 	vldr	s12, [r3]
 800400c:	4bd5      	ldr	r3, [pc, #852]	@ (8004364 <MadgwickAHRSupdate+0xb3c>)
 800400e:	edd3 7a00 	vldr	s15, [r3]
 8004012:	ee36 6a67 	vsub.f32	s12, s12, s15
 8004016:	4bd4      	ldr	r3, [pc, #848]	@ (8004368 <MadgwickAHRSupdate+0xb40>)
 8004018:	edd3 7a00 	vldr	s15, [r3]
 800401c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8004020:	4bd2      	ldr	r3, [pc, #840]	@ (800436c <MadgwickAHRSupdate+0xb44>)
 8004022:	edd3 5a00 	vldr	s11, [r3]
 8004026:	4bd2      	ldr	r3, [pc, #840]	@ (8004370 <MadgwickAHRSupdate+0xb48>)
 8004028:	edd3 7a00 	vldr	s15, [r3]
 800402c:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8004030:	4bc9      	ldr	r3, [pc, #804]	@ (8004358 <MadgwickAHRSupdate+0xb30>)
 8004032:	edd3 7a00 	vldr	s15, [r3]
 8004036:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800403a:	ee36 6a27 	vadd.f32	s12, s12, s15
 800403e:	edd7 7a02 	vldr	s15, [r7, #8]
 8004042:	ee76 7a67 	vsub.f32	s15, s12, s15
 8004046:	ee66 7aa7 	vmul.f32	s15, s13, s15
				+ (-_2bx * q3 + _2bz * q1)
 800404a:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ _2bx * q2
 800404e:	4bc6      	ldr	r3, [pc, #792]	@ (8004368 <MadgwickAHRSupdate+0xb40>)
 8004050:	edd3 6a00 	vldr	s13, [r3]
 8004054:	4bc7      	ldr	r3, [pc, #796]	@ (8004374 <MadgwickAHRSupdate+0xb4c>)
 8004056:	edd3 7a00 	vldr	s15, [r3]
 800405a:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2)
 800405e:	4bc6      	ldr	r3, [pc, #792]	@ (8004378 <MadgwickAHRSupdate+0xb50>)
 8004060:	ed93 6a00 	vldr	s12, [r3]
 8004064:	4bc5      	ldr	r3, [pc, #788]	@ (800437c <MadgwickAHRSupdate+0xb54>)
 8004066:	edd3 7a00 	vldr	s15, [r3]
 800406a:	ee36 6a27 	vadd.f32	s12, s12, s15
 800406e:	4bbe      	ldr	r3, [pc, #760]	@ (8004368 <MadgwickAHRSupdate+0xb40>)
 8004070:	edd3 7a00 	vldr	s15, [r3]
 8004074:	ee26 6a27 	vmul.f32	s12, s12, s15
 8004078:	4bc1      	ldr	r3, [pc, #772]	@ (8004380 <MadgwickAHRSupdate+0xb58>)
 800407a:	edd3 7a00 	vldr	s15, [r3]
 800407e:	eef6 5a00 	vmov.f32	s11, #96	@ 0x3f000000  0.5
 8004082:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8004086:	4bbf      	ldr	r3, [pc, #764]	@ (8004384 <MadgwickAHRSupdate+0xb5c>)
 8004088:	edd3 7a00 	vldr	s15, [r3]
 800408c:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8004090:	4bb1      	ldr	r3, [pc, #708]	@ (8004358 <MadgwickAHRSupdate+0xb30>)
 8004092:	edd3 7a00 	vldr	s15, [r3]
 8004096:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800409a:	ee36 6a27 	vadd.f32	s12, s12, s15
								- mz);
 800409e:	edd7 7a01 	vldr	s15, [r7, #4]
 80040a2:	ee76 7a67 	vsub.f32	s15, s12, s15
						* (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2)
 80040a6:	ee66 7aa7 	vmul.f32	s15, s13, s15
				+ _2bx * q2
 80040aa:	ee77 7a27 	vadd.f32	s15, s14, s15
		s0 = -_2q2 * (2.0f * q1q3 - _2q0q2 - ax)
 80040ae:	4bb6      	ldr	r3, [pc, #728]	@ (8004388 <MadgwickAHRSupdate+0xb60>)
 80040b0:	edc3 7a00 	vstr	s15, [r3]
		s1 = _2q3 * (2.0f * q1q3 - _2q0q2 - ax)
 80040b4:	4bb1      	ldr	r3, [pc, #708]	@ (800437c <MadgwickAHRSupdate+0xb54>)
 80040b6:	edd3 7a00 	vldr	s15, [r3]
 80040ba:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80040be:	4bb3      	ldr	r3, [pc, #716]	@ (800438c <MadgwickAHRSupdate+0xb64>)
 80040c0:	edd3 7a00 	vldr	s15, [r3]
 80040c4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80040c8:	edd7 7a06 	vldr	s15, [r7, #24]
 80040cc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80040d0:	4baf      	ldr	r3, [pc, #700]	@ (8004390 <MadgwickAHRSupdate+0xb68>)
 80040d2:	edd3 7a00 	vldr	s15, [r3]
 80040d6:	ee27 7a27 	vmul.f32	s14, s14, s15
				+ _2q0 * (2.0f * q0q1 + _2q2q3 - ay)
 80040da:	4ba4      	ldr	r3, [pc, #656]	@ (800436c <MadgwickAHRSupdate+0xb44>)
 80040dc:	edd3 7a00 	vldr	s15, [r3]
 80040e0:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80040e4:	4bab      	ldr	r3, [pc, #684]	@ (8004394 <MadgwickAHRSupdate+0xb6c>)
 80040e6:	edd3 7a00 	vldr	s15, [r3]
 80040ea:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80040ee:	edd7 7a05 	vldr	s15, [r7, #20]
 80040f2:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80040f6:	4ba8      	ldr	r3, [pc, #672]	@ (8004398 <MadgwickAHRSupdate+0xb70>)
 80040f8:	edd3 7a00 	vldr	s15, [r3]
 80040fc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004100:	ee37 7a27 	vadd.f32	s14, s14, s15
				- 4.0f * q1 * (1 - 2.0f * q1q1 - 2.0f * q2q2 - az)
 8004104:	4b95      	ldr	r3, [pc, #596]	@ (800435c <MadgwickAHRSupdate+0xb34>)
 8004106:	edd3 7a00 	vldr	s15, [r3]
 800410a:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 800410e:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8004112:	4b9b      	ldr	r3, [pc, #620]	@ (8004380 <MadgwickAHRSupdate+0xb58>)
 8004114:	edd3 7a00 	vldr	s15, [r3]
 8004118:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800411c:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 8004120:	ee36 6a67 	vsub.f32	s12, s12, s15
 8004124:	4b97      	ldr	r3, [pc, #604]	@ (8004384 <MadgwickAHRSupdate+0xb5c>)
 8004126:	edd3 7a00 	vldr	s15, [r3]
 800412a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800412e:	ee36 6a67 	vsub.f32	s12, s12, s15
 8004132:	edd7 7a04 	vldr	s15, [r7, #16]
 8004136:	ee76 7a67 	vsub.f32	s15, s12, s15
 800413a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800413e:	ee37 7a67 	vsub.f32	s14, s14, s15
				+ _2bz * q3
 8004142:	4b85      	ldr	r3, [pc, #532]	@ (8004358 <MadgwickAHRSupdate+0xb30>)
 8004144:	edd3 6a00 	vldr	s13, [r3]
 8004148:	4b82      	ldr	r3, [pc, #520]	@ (8004354 <MadgwickAHRSupdate+0xb2c>)
 800414a:	edd3 7a00 	vldr	s15, [r3]
 800414e:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2)
 8004152:	4b8c      	ldr	r3, [pc, #560]	@ (8004384 <MadgwickAHRSupdate+0xb5c>)
 8004154:	edd3 7a00 	vldr	s15, [r3]
 8004158:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 800415c:	ee36 6a67 	vsub.f32	s12, s12, s15
 8004160:	4b8e      	ldr	r3, [pc, #568]	@ (800439c <MadgwickAHRSupdate+0xb74>)
 8004162:	edd3 7a00 	vldr	s15, [r3]
 8004166:	ee36 6a67 	vsub.f32	s12, s12, s15
 800416a:	4b7f      	ldr	r3, [pc, #508]	@ (8004368 <MadgwickAHRSupdate+0xb40>)
 800416c:	edd3 7a00 	vldr	s15, [r3]
 8004170:	ee26 6a27 	vmul.f32	s12, s12, s15
 8004174:	4b81      	ldr	r3, [pc, #516]	@ (800437c <MadgwickAHRSupdate+0xb54>)
 8004176:	edd3 5a00 	vldr	s11, [r3]
 800417a:	4b7f      	ldr	r3, [pc, #508]	@ (8004378 <MadgwickAHRSupdate+0xb50>)
 800417c:	edd3 7a00 	vldr	s15, [r3]
 8004180:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8004184:	4b74      	ldr	r3, [pc, #464]	@ (8004358 <MadgwickAHRSupdate+0xb30>)
 8004186:	edd3 7a00 	vldr	s15, [r3]
 800418a:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800418e:	ee36 6a27 	vadd.f32	s12, s12, s15
								- mx)
 8004192:	edd7 7a03 	vldr	s15, [r7, #12]
 8004196:	ee76 7a67 	vsub.f32	s15, s12, s15
						* (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2)
 800419a:	ee66 7aa7 	vmul.f32	s15, s13, s15
				+ _2bz * q3
 800419e:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ (_2bx * q2 + _2bz * q0)
 80041a2:	4b71      	ldr	r3, [pc, #452]	@ (8004368 <MadgwickAHRSupdate+0xb40>)
 80041a4:	edd3 6a00 	vldr	s13, [r3]
 80041a8:	4b72      	ldr	r3, [pc, #456]	@ (8004374 <MadgwickAHRSupdate+0xb4c>)
 80041aa:	edd3 7a00 	vldr	s15, [r3]
 80041ae:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80041b2:	4b69      	ldr	r3, [pc, #420]	@ (8004358 <MadgwickAHRSupdate+0xb30>)
 80041b4:	ed93 6a00 	vldr	s12, [r3]
 80041b8:	4b79      	ldr	r3, [pc, #484]	@ (80043a0 <MadgwickAHRSupdate+0xb78>)
 80041ba:	edd3 7a00 	vldr	s15, [r3]
 80041be:	ee66 7a27 	vmul.f32	s15, s12, s15
 80041c2:	ee76 6aa7 	vadd.f32	s13, s13, s15
						* (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my)
 80041c6:	4b66      	ldr	r3, [pc, #408]	@ (8004360 <MadgwickAHRSupdate+0xb38>)
 80041c8:	ed93 6a00 	vldr	s12, [r3]
 80041cc:	4b65      	ldr	r3, [pc, #404]	@ (8004364 <MadgwickAHRSupdate+0xb3c>)
 80041ce:	edd3 7a00 	vldr	s15, [r3]
 80041d2:	ee36 6a67 	vsub.f32	s12, s12, s15
 80041d6:	4b64      	ldr	r3, [pc, #400]	@ (8004368 <MadgwickAHRSupdate+0xb40>)
 80041d8:	edd3 7a00 	vldr	s15, [r3]
 80041dc:	ee26 6a27 	vmul.f32	s12, s12, s15
 80041e0:	4b62      	ldr	r3, [pc, #392]	@ (800436c <MadgwickAHRSupdate+0xb44>)
 80041e2:	edd3 5a00 	vldr	s11, [r3]
 80041e6:	4b62      	ldr	r3, [pc, #392]	@ (8004370 <MadgwickAHRSupdate+0xb48>)
 80041e8:	edd3 7a00 	vldr	s15, [r3]
 80041ec:	ee75 5aa7 	vadd.f32	s11, s11, s15
 80041f0:	4b59      	ldr	r3, [pc, #356]	@ (8004358 <MadgwickAHRSupdate+0xb30>)
 80041f2:	edd3 7a00 	vldr	s15, [r3]
 80041f6:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80041fa:	ee36 6a27 	vadd.f32	s12, s12, s15
 80041fe:	edd7 7a02 	vldr	s15, [r7, #8]
 8004202:	ee76 7a67 	vsub.f32	s15, s12, s15
 8004206:	ee66 7aa7 	vmul.f32	s15, s13, s15
				+ (_2bx * q2 + _2bz * q0)
 800420a:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ (_2bx * q3 - _4bz * q1)
 800420e:	4b56      	ldr	r3, [pc, #344]	@ (8004368 <MadgwickAHRSupdate+0xb40>)
 8004210:	edd3 6a00 	vldr	s13, [r3]
 8004214:	4b4f      	ldr	r3, [pc, #316]	@ (8004354 <MadgwickAHRSupdate+0xb2c>)
 8004216:	edd3 7a00 	vldr	s15, [r3]
 800421a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800421e:	4b61      	ldr	r3, [pc, #388]	@ (80043a4 <MadgwickAHRSupdate+0xb7c>)
 8004220:	ed93 6a00 	vldr	s12, [r3]
 8004224:	4b4d      	ldr	r3, [pc, #308]	@ (800435c <MadgwickAHRSupdate+0xb34>)
 8004226:	edd3 7a00 	vldr	s15, [r3]
 800422a:	ee66 7a27 	vmul.f32	s15, s12, s15
 800422e:	ee76 6ae7 	vsub.f32	s13, s13, s15
						* (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2)
 8004232:	4b51      	ldr	r3, [pc, #324]	@ (8004378 <MadgwickAHRSupdate+0xb50>)
 8004234:	ed93 6a00 	vldr	s12, [r3]
 8004238:	4b50      	ldr	r3, [pc, #320]	@ (800437c <MadgwickAHRSupdate+0xb54>)
 800423a:	edd3 7a00 	vldr	s15, [r3]
 800423e:	ee36 6a27 	vadd.f32	s12, s12, s15
 8004242:	4b49      	ldr	r3, [pc, #292]	@ (8004368 <MadgwickAHRSupdate+0xb40>)
 8004244:	edd3 7a00 	vldr	s15, [r3]
 8004248:	ee26 6a27 	vmul.f32	s12, s12, s15
 800424c:	4b4c      	ldr	r3, [pc, #304]	@ (8004380 <MadgwickAHRSupdate+0xb58>)
 800424e:	edd3 7a00 	vldr	s15, [r3]
 8004252:	eef6 5a00 	vmov.f32	s11, #96	@ 0x3f000000  0.5
 8004256:	ee75 5ae7 	vsub.f32	s11, s11, s15
 800425a:	4b4a      	ldr	r3, [pc, #296]	@ (8004384 <MadgwickAHRSupdate+0xb5c>)
 800425c:	edd3 7a00 	vldr	s15, [r3]
 8004260:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8004264:	4b3c      	ldr	r3, [pc, #240]	@ (8004358 <MadgwickAHRSupdate+0xb30>)
 8004266:	edd3 7a00 	vldr	s15, [r3]
 800426a:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800426e:	ee36 6a27 	vadd.f32	s12, s12, s15
								- mz);
 8004272:	edd7 7a01 	vldr	s15, [r7, #4]
 8004276:	ee76 7a67 	vsub.f32	s15, s12, s15
						* (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2)
 800427a:	ee66 7aa7 	vmul.f32	s15, s13, s15
				+ (_2bx * q3 - _4bz * q1)
 800427e:	ee77 7a27 	vadd.f32	s15, s14, s15
		s1 = _2q3 * (2.0f * q1q3 - _2q0q2 - ax)
 8004282:	4b49      	ldr	r3, [pc, #292]	@ (80043a8 <MadgwickAHRSupdate+0xb80>)
 8004284:	edc3 7a00 	vstr	s15, [r3]
		s2 = -_2q0 * (2.0f * q1q3 - _2q0q2 - ax)
 8004288:	4b43      	ldr	r3, [pc, #268]	@ (8004398 <MadgwickAHRSupdate+0xb70>)
 800428a:	edd3 7a00 	vldr	s15, [r3]
 800428e:	eeb1 7a67 	vneg.f32	s14, s15
 8004292:	4b3a      	ldr	r3, [pc, #232]	@ (800437c <MadgwickAHRSupdate+0xb54>)
 8004294:	edd3 7a00 	vldr	s15, [r3]
 8004298:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800429c:	4b3b      	ldr	r3, [pc, #236]	@ (800438c <MadgwickAHRSupdate+0xb64>)
 800429e:	edd3 7a00 	vldr	s15, [r3]
 80042a2:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80042a6:	edd7 7a06 	vldr	s15, [r7, #24]
 80042aa:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80042ae:	ee27 7a27 	vmul.f32	s14, s14, s15
				+ _2q3 * (2.0f * q0q1 + _2q2q3 - ay)
 80042b2:	4b2e      	ldr	r3, [pc, #184]	@ (800436c <MadgwickAHRSupdate+0xb44>)
 80042b4:	edd3 7a00 	vldr	s15, [r3]
 80042b8:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80042bc:	4b35      	ldr	r3, [pc, #212]	@ (8004394 <MadgwickAHRSupdate+0xb6c>)
 80042be:	edd3 7a00 	vldr	s15, [r3]
 80042c2:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80042c6:	edd7 7a05 	vldr	s15, [r7, #20]
 80042ca:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80042ce:	4b30      	ldr	r3, [pc, #192]	@ (8004390 <MadgwickAHRSupdate+0xb68>)
 80042d0:	edd3 7a00 	vldr	s15, [r3]
 80042d4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80042d8:	ee37 7a27 	vadd.f32	s14, s14, s15
				- 4.0f * q2 * (1 - 2.0f * q1q1 - 2.0f * q2q2 - az)
 80042dc:	4b25      	ldr	r3, [pc, #148]	@ (8004374 <MadgwickAHRSupdate+0xb4c>)
 80042de:	edd3 7a00 	vldr	s15, [r3]
 80042e2:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 80042e6:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80042ea:	4b25      	ldr	r3, [pc, #148]	@ (8004380 <MadgwickAHRSupdate+0xb58>)
 80042ec:	edd3 7a00 	vldr	s15, [r3]
 80042f0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80042f4:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 80042f8:	ee36 6a67 	vsub.f32	s12, s12, s15
 80042fc:	4b21      	ldr	r3, [pc, #132]	@ (8004384 <MadgwickAHRSupdate+0xb5c>)
 80042fe:	edd3 7a00 	vldr	s15, [r3]
 8004302:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8004306:	ee36 6a67 	vsub.f32	s12, s12, s15
 800430a:	edd7 7a04 	vldr	s15, [r7, #16]
 800430e:	ee76 7a67 	vsub.f32	s15, s12, s15
 8004312:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004316:	ee37 7a67 	vsub.f32	s14, s14, s15
				+ (-_4bx * q2 - _2bz * q0)
 800431a:	4b24      	ldr	r3, [pc, #144]	@ (80043ac <MadgwickAHRSupdate+0xb84>)
 800431c:	edd3 7a00 	vldr	s15, [r3]
 8004320:	eef1 6a67 	vneg.f32	s13, s15
 8004324:	4b13      	ldr	r3, [pc, #76]	@ (8004374 <MadgwickAHRSupdate+0xb4c>)
 8004326:	edd3 7a00 	vldr	s15, [r3]
 800432a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800432e:	4b0a      	ldr	r3, [pc, #40]	@ (8004358 <MadgwickAHRSupdate+0xb30>)
 8004330:	ed93 6a00 	vldr	s12, [r3]
 8004334:	4b1a      	ldr	r3, [pc, #104]	@ (80043a0 <MadgwickAHRSupdate+0xb78>)
 8004336:	edd3 7a00 	vldr	s15, [r3]
 800433a:	ee66 7a27 	vmul.f32	s15, s12, s15
 800433e:	ee76 6ae7 	vsub.f32	s13, s13, s15
						* (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2)
 8004342:	4b10      	ldr	r3, [pc, #64]	@ (8004384 <MadgwickAHRSupdate+0xb5c>)
 8004344:	edd3 7a00 	vldr	s15, [r3]
 8004348:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 800434c:	ee36 6a67 	vsub.f32	s12, s12, s15
 8004350:	e02e      	b.n	80043b0 <MadgwickAHRSupdate+0xb88>
 8004352:	bf00      	nop
 8004354:	20000478 	.word	0x20000478
 8004358:	2000040c 	.word	0x2000040c
 800435c:	20000470 	.word	0x20000470
 8004360:	20000444 	.word	0x20000444
 8004364:	2000043c 	.word	0x2000043c
 8004368:	20000408 	.word	0x20000408
 800436c:	20000434 	.word	0x20000434
 8004370:	20000450 	.word	0x20000450
 8004374:	20000474 	.word	0x20000474
 8004378:	20000438 	.word	0x20000438
 800437c:	20000448 	.word	0x20000448
 8004380:	20000440 	.word	0x20000440
 8004384:	2000044c 	.word	0x2000044c
 8004388:	200003d0 	.word	0x200003d0
 800438c:	20000428 	.word	0x20000428
 8004390:	20000424 	.word	0x20000424
 8004394:	2000042c 	.word	0x2000042c
 8004398:	20000418 	.word	0x20000418
 800439c:	20000454 	.word	0x20000454
 80043a0:	20000008 	.word	0x20000008
 80043a4:	20000414 	.word	0x20000414
 80043a8:	200003d4 	.word	0x200003d4
 80043ac:	20000410 	.word	0x20000410
 80043b0:	4bd7      	ldr	r3, [pc, #860]	@ (8004710 <MadgwickAHRSupdate+0xee8>)
 80043b2:	edd3 7a00 	vldr	s15, [r3]
 80043b6:	ee36 6a67 	vsub.f32	s12, s12, s15
 80043ba:	4bd6      	ldr	r3, [pc, #856]	@ (8004714 <MadgwickAHRSupdate+0xeec>)
 80043bc:	edd3 7a00 	vldr	s15, [r3]
 80043c0:	ee26 6a27 	vmul.f32	s12, s12, s15
 80043c4:	4bd4      	ldr	r3, [pc, #848]	@ (8004718 <MadgwickAHRSupdate+0xef0>)
 80043c6:	edd3 5a00 	vldr	s11, [r3]
 80043ca:	4bd4      	ldr	r3, [pc, #848]	@ (800471c <MadgwickAHRSupdate+0xef4>)
 80043cc:	edd3 7a00 	vldr	s15, [r3]
 80043d0:	ee75 5ae7 	vsub.f32	s11, s11, s15
 80043d4:	4bd2      	ldr	r3, [pc, #840]	@ (8004720 <MadgwickAHRSupdate+0xef8>)
 80043d6:	edd3 7a00 	vldr	s15, [r3]
 80043da:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80043de:	ee36 6a27 	vadd.f32	s12, s12, s15
								- mx)
 80043e2:	edd7 7a03 	vldr	s15, [r7, #12]
 80043e6:	ee76 7a67 	vsub.f32	s15, s12, s15
						* (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2)
 80043ea:	ee66 7aa7 	vmul.f32	s15, s13, s15
				+ (-_4bx * q2 - _2bz * q0)
 80043ee:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ (_2bx * q1 + _2bz * q3)
 80043f2:	4bc8      	ldr	r3, [pc, #800]	@ (8004714 <MadgwickAHRSupdate+0xeec>)
 80043f4:	edd3 6a00 	vldr	s13, [r3]
 80043f8:	4bca      	ldr	r3, [pc, #808]	@ (8004724 <MadgwickAHRSupdate+0xefc>)
 80043fa:	edd3 7a00 	vldr	s15, [r3]
 80043fe:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004402:	4bc7      	ldr	r3, [pc, #796]	@ (8004720 <MadgwickAHRSupdate+0xef8>)
 8004404:	ed93 6a00 	vldr	s12, [r3]
 8004408:	4bc7      	ldr	r3, [pc, #796]	@ (8004728 <MadgwickAHRSupdate+0xf00>)
 800440a:	edd3 7a00 	vldr	s15, [r3]
 800440e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8004412:	ee76 6aa7 	vadd.f32	s13, s13, s15
						* (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my)
 8004416:	4bc5      	ldr	r3, [pc, #788]	@ (800472c <MadgwickAHRSupdate+0xf04>)
 8004418:	ed93 6a00 	vldr	s12, [r3]
 800441c:	4bc4      	ldr	r3, [pc, #784]	@ (8004730 <MadgwickAHRSupdate+0xf08>)
 800441e:	edd3 7a00 	vldr	s15, [r3]
 8004422:	ee36 6a67 	vsub.f32	s12, s12, s15
 8004426:	4bbb      	ldr	r3, [pc, #748]	@ (8004714 <MadgwickAHRSupdate+0xeec>)
 8004428:	edd3 7a00 	vldr	s15, [r3]
 800442c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8004430:	4bc0      	ldr	r3, [pc, #768]	@ (8004734 <MadgwickAHRSupdate+0xf0c>)
 8004432:	edd3 5a00 	vldr	s11, [r3]
 8004436:	4bc0      	ldr	r3, [pc, #768]	@ (8004738 <MadgwickAHRSupdate+0xf10>)
 8004438:	edd3 7a00 	vldr	s15, [r3]
 800443c:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8004440:	4bb7      	ldr	r3, [pc, #732]	@ (8004720 <MadgwickAHRSupdate+0xef8>)
 8004442:	edd3 7a00 	vldr	s15, [r3]
 8004446:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800444a:	ee36 6a27 	vadd.f32	s12, s12, s15
 800444e:	edd7 7a02 	vldr	s15, [r7, #8]
 8004452:	ee76 7a67 	vsub.f32	s15, s12, s15
 8004456:	ee66 7aa7 	vmul.f32	s15, s13, s15
				+ (_2bx * q1 + _2bz * q3)
 800445a:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ (_2bx * q0 - _4bz * q2)
 800445e:	4bad      	ldr	r3, [pc, #692]	@ (8004714 <MadgwickAHRSupdate+0xeec>)
 8004460:	edd3 6a00 	vldr	s13, [r3]
 8004464:	4bb5      	ldr	r3, [pc, #724]	@ (800473c <MadgwickAHRSupdate+0xf14>)
 8004466:	edd3 7a00 	vldr	s15, [r3]
 800446a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800446e:	4bb4      	ldr	r3, [pc, #720]	@ (8004740 <MadgwickAHRSupdate+0xf18>)
 8004470:	ed93 6a00 	vldr	s12, [r3]
 8004474:	4bb3      	ldr	r3, [pc, #716]	@ (8004744 <MadgwickAHRSupdate+0xf1c>)
 8004476:	edd3 7a00 	vldr	s15, [r3]
 800447a:	ee66 7a27 	vmul.f32	s15, s12, s15
 800447e:	ee76 6ae7 	vsub.f32	s13, s13, s15
						* (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2)
 8004482:	4ba6      	ldr	r3, [pc, #664]	@ (800471c <MadgwickAHRSupdate+0xef4>)
 8004484:	ed93 6a00 	vldr	s12, [r3]
 8004488:	4ba3      	ldr	r3, [pc, #652]	@ (8004718 <MadgwickAHRSupdate+0xef0>)
 800448a:	edd3 7a00 	vldr	s15, [r3]
 800448e:	ee36 6a27 	vadd.f32	s12, s12, s15
 8004492:	4ba0      	ldr	r3, [pc, #640]	@ (8004714 <MadgwickAHRSupdate+0xeec>)
 8004494:	edd3 7a00 	vldr	s15, [r3]
 8004498:	ee26 6a27 	vmul.f32	s12, s12, s15
 800449c:	4baa      	ldr	r3, [pc, #680]	@ (8004748 <MadgwickAHRSupdate+0xf20>)
 800449e:	edd3 7a00 	vldr	s15, [r3]
 80044a2:	eef6 5a00 	vmov.f32	s11, #96	@ 0x3f000000  0.5
 80044a6:	ee75 5ae7 	vsub.f32	s11, s11, s15
 80044aa:	4ba8      	ldr	r3, [pc, #672]	@ (800474c <MadgwickAHRSupdate+0xf24>)
 80044ac:	edd3 7a00 	vldr	s15, [r3]
 80044b0:	ee75 5ae7 	vsub.f32	s11, s11, s15
 80044b4:	4b9a      	ldr	r3, [pc, #616]	@ (8004720 <MadgwickAHRSupdate+0xef8>)
 80044b6:	edd3 7a00 	vldr	s15, [r3]
 80044ba:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80044be:	ee36 6a27 	vadd.f32	s12, s12, s15
								- mz);
 80044c2:	edd7 7a01 	vldr	s15, [r7, #4]
 80044c6:	ee76 7a67 	vsub.f32	s15, s12, s15
						* (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2)
 80044ca:	ee66 7aa7 	vmul.f32	s15, s13, s15
				+ (_2bx * q0 - _4bz * q2)
 80044ce:	ee77 7a27 	vadd.f32	s15, s14, s15
		s2 = -_2q0 * (2.0f * q1q3 - _2q0q2 - ax)
 80044d2:	4b9f      	ldr	r3, [pc, #636]	@ (8004750 <MadgwickAHRSupdate+0xf28>)
 80044d4:	edc3 7a00 	vstr	s15, [r3]
		s3 = _2q1 * (2.0f * q1q3 - _2q0q2 - ax)
 80044d8:	4b8f      	ldr	r3, [pc, #572]	@ (8004718 <MadgwickAHRSupdate+0xef0>)
 80044da:	edd3 7a00 	vldr	s15, [r3]
 80044de:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80044e2:	4b9c      	ldr	r3, [pc, #624]	@ (8004754 <MadgwickAHRSupdate+0xf2c>)
 80044e4:	edd3 7a00 	vldr	s15, [r3]
 80044e8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80044ec:	edd7 7a06 	vldr	s15, [r7, #24]
 80044f0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80044f4:	4b98      	ldr	r3, [pc, #608]	@ (8004758 <MadgwickAHRSupdate+0xf30>)
 80044f6:	edd3 7a00 	vldr	s15, [r3]
 80044fa:	ee27 7a27 	vmul.f32	s14, s14, s15
				+ _2q2 * (2.0f * q0q1 + _2q2q3 - ay)
 80044fe:	4b8d      	ldr	r3, [pc, #564]	@ (8004734 <MadgwickAHRSupdate+0xf0c>)
 8004500:	edd3 7a00 	vldr	s15, [r3]
 8004504:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8004508:	4b94      	ldr	r3, [pc, #592]	@ (800475c <MadgwickAHRSupdate+0xf34>)
 800450a:	edd3 7a00 	vldr	s15, [r3]
 800450e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8004512:	edd7 7a05 	vldr	s15, [r7, #20]
 8004516:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800451a:	4b91      	ldr	r3, [pc, #580]	@ (8004760 <MadgwickAHRSupdate+0xf38>)
 800451c:	edd3 7a00 	vldr	s15, [r3]
 8004520:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004524:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ (-_4bx * q3 + _2bz * q1)
 8004528:	4b8e      	ldr	r3, [pc, #568]	@ (8004764 <MadgwickAHRSupdate+0xf3c>)
 800452a:	edd3 7a00 	vldr	s15, [r3]
 800452e:	eef1 6a67 	vneg.f32	s13, s15
 8004532:	4b7d      	ldr	r3, [pc, #500]	@ (8004728 <MadgwickAHRSupdate+0xf00>)
 8004534:	edd3 7a00 	vldr	s15, [r3]
 8004538:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800453c:	4b78      	ldr	r3, [pc, #480]	@ (8004720 <MadgwickAHRSupdate+0xef8>)
 800453e:	ed93 6a00 	vldr	s12, [r3]
 8004542:	4b78      	ldr	r3, [pc, #480]	@ (8004724 <MadgwickAHRSupdate+0xefc>)
 8004544:	edd3 7a00 	vldr	s15, [r3]
 8004548:	ee66 7a27 	vmul.f32	s15, s12, s15
 800454c:	ee76 6aa7 	vadd.f32	s13, s13, s15
						* (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2)
 8004550:	4b7e      	ldr	r3, [pc, #504]	@ (800474c <MadgwickAHRSupdate+0xf24>)
 8004552:	edd3 7a00 	vldr	s15, [r3]
 8004556:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 800455a:	ee36 6a67 	vsub.f32	s12, s12, s15
 800455e:	4b6c      	ldr	r3, [pc, #432]	@ (8004710 <MadgwickAHRSupdate+0xee8>)
 8004560:	edd3 7a00 	vldr	s15, [r3]
 8004564:	ee36 6a67 	vsub.f32	s12, s12, s15
 8004568:	4b6a      	ldr	r3, [pc, #424]	@ (8004714 <MadgwickAHRSupdate+0xeec>)
 800456a:	edd3 7a00 	vldr	s15, [r3]
 800456e:	ee26 6a27 	vmul.f32	s12, s12, s15
 8004572:	4b69      	ldr	r3, [pc, #420]	@ (8004718 <MadgwickAHRSupdate+0xef0>)
 8004574:	edd3 5a00 	vldr	s11, [r3]
 8004578:	4b68      	ldr	r3, [pc, #416]	@ (800471c <MadgwickAHRSupdate+0xef4>)
 800457a:	edd3 7a00 	vldr	s15, [r3]
 800457e:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8004582:	4b67      	ldr	r3, [pc, #412]	@ (8004720 <MadgwickAHRSupdate+0xef8>)
 8004584:	edd3 7a00 	vldr	s15, [r3]
 8004588:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800458c:	ee36 6a27 	vadd.f32	s12, s12, s15
								- mx)
 8004590:	edd7 7a03 	vldr	s15, [r7, #12]
 8004594:	ee76 7a67 	vsub.f32	s15, s12, s15
						* (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2)
 8004598:	ee66 7aa7 	vmul.f32	s15, s13, s15
				+ (-_4bx * q3 + _2bz * q1)
 800459c:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ (-_2bx * q0 + _2bz * q2)
 80045a0:	4b5c      	ldr	r3, [pc, #368]	@ (8004714 <MadgwickAHRSupdate+0xeec>)
 80045a2:	edd3 7a00 	vldr	s15, [r3]
 80045a6:	eef1 6a67 	vneg.f32	s13, s15
 80045aa:	4b64      	ldr	r3, [pc, #400]	@ (800473c <MadgwickAHRSupdate+0xf14>)
 80045ac:	edd3 7a00 	vldr	s15, [r3]
 80045b0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80045b4:	4b5a      	ldr	r3, [pc, #360]	@ (8004720 <MadgwickAHRSupdate+0xef8>)
 80045b6:	ed93 6a00 	vldr	s12, [r3]
 80045ba:	4b62      	ldr	r3, [pc, #392]	@ (8004744 <MadgwickAHRSupdate+0xf1c>)
 80045bc:	edd3 7a00 	vldr	s15, [r3]
 80045c0:	ee66 7a27 	vmul.f32	s15, s12, s15
 80045c4:	ee76 6aa7 	vadd.f32	s13, s13, s15
						* (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my)
 80045c8:	4b58      	ldr	r3, [pc, #352]	@ (800472c <MadgwickAHRSupdate+0xf04>)
 80045ca:	ed93 6a00 	vldr	s12, [r3]
 80045ce:	4b58      	ldr	r3, [pc, #352]	@ (8004730 <MadgwickAHRSupdate+0xf08>)
 80045d0:	edd3 7a00 	vldr	s15, [r3]
 80045d4:	ee36 6a67 	vsub.f32	s12, s12, s15
 80045d8:	4b4e      	ldr	r3, [pc, #312]	@ (8004714 <MadgwickAHRSupdate+0xeec>)
 80045da:	edd3 7a00 	vldr	s15, [r3]
 80045de:	ee26 6a27 	vmul.f32	s12, s12, s15
 80045e2:	4b54      	ldr	r3, [pc, #336]	@ (8004734 <MadgwickAHRSupdate+0xf0c>)
 80045e4:	edd3 5a00 	vldr	s11, [r3]
 80045e8:	4b53      	ldr	r3, [pc, #332]	@ (8004738 <MadgwickAHRSupdate+0xf10>)
 80045ea:	edd3 7a00 	vldr	s15, [r3]
 80045ee:	ee75 5aa7 	vadd.f32	s11, s11, s15
 80045f2:	4b4b      	ldr	r3, [pc, #300]	@ (8004720 <MadgwickAHRSupdate+0xef8>)
 80045f4:	edd3 7a00 	vldr	s15, [r3]
 80045f8:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80045fc:	ee36 6a27 	vadd.f32	s12, s12, s15
 8004600:	edd7 7a02 	vldr	s15, [r7, #8]
 8004604:	ee76 7a67 	vsub.f32	s15, s12, s15
 8004608:	ee66 7aa7 	vmul.f32	s15, s13, s15
				+ (-_2bx * q0 + _2bz * q2)
 800460c:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ _2bx * q1
 8004610:	4b40      	ldr	r3, [pc, #256]	@ (8004714 <MadgwickAHRSupdate+0xeec>)
 8004612:	edd3 6a00 	vldr	s13, [r3]
 8004616:	4b43      	ldr	r3, [pc, #268]	@ (8004724 <MadgwickAHRSupdate+0xefc>)
 8004618:	edd3 7a00 	vldr	s15, [r3]
 800461c:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2)
 8004620:	4b3e      	ldr	r3, [pc, #248]	@ (800471c <MadgwickAHRSupdate+0xef4>)
 8004622:	ed93 6a00 	vldr	s12, [r3]
 8004626:	4b3c      	ldr	r3, [pc, #240]	@ (8004718 <MadgwickAHRSupdate+0xef0>)
 8004628:	edd3 7a00 	vldr	s15, [r3]
 800462c:	ee36 6a27 	vadd.f32	s12, s12, s15
 8004630:	4b38      	ldr	r3, [pc, #224]	@ (8004714 <MadgwickAHRSupdate+0xeec>)
 8004632:	edd3 7a00 	vldr	s15, [r3]
 8004636:	ee26 6a27 	vmul.f32	s12, s12, s15
 800463a:	4b43      	ldr	r3, [pc, #268]	@ (8004748 <MadgwickAHRSupdate+0xf20>)
 800463c:	edd3 7a00 	vldr	s15, [r3]
 8004640:	eef6 5a00 	vmov.f32	s11, #96	@ 0x3f000000  0.5
 8004644:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8004648:	4b40      	ldr	r3, [pc, #256]	@ (800474c <MadgwickAHRSupdate+0xf24>)
 800464a:	edd3 7a00 	vldr	s15, [r3]
 800464e:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8004652:	4b33      	ldr	r3, [pc, #204]	@ (8004720 <MadgwickAHRSupdate+0xef8>)
 8004654:	edd3 7a00 	vldr	s15, [r3]
 8004658:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800465c:	ee36 6a27 	vadd.f32	s12, s12, s15
								- mz);
 8004660:	edd7 7a01 	vldr	s15, [r7, #4]
 8004664:	ee76 7a67 	vsub.f32	s15, s12, s15
						* (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2)
 8004668:	ee66 7aa7 	vmul.f32	s15, s13, s15
				+ _2bx * q1
 800466c:	ee77 7a27 	vadd.f32	s15, s14, s15
		s3 = _2q1 * (2.0f * q1q3 - _2q0q2 - ax)
 8004670:	4b3d      	ldr	r3, [pc, #244]	@ (8004768 <MadgwickAHRSupdate+0xf40>)
 8004672:	edc3 7a00 	vstr	s15, [r3]
		recipNorm = invSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3); // normalise step magnitude
 8004676:	4b3d      	ldr	r3, [pc, #244]	@ (800476c <MadgwickAHRSupdate+0xf44>)
 8004678:	ed93 7a00 	vldr	s14, [r3]
 800467c:	4b3b      	ldr	r3, [pc, #236]	@ (800476c <MadgwickAHRSupdate+0xf44>)
 800467e:	edd3 7a00 	vldr	s15, [r3]
 8004682:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004686:	4b3a      	ldr	r3, [pc, #232]	@ (8004770 <MadgwickAHRSupdate+0xf48>)
 8004688:	edd3 6a00 	vldr	s13, [r3]
 800468c:	4b38      	ldr	r3, [pc, #224]	@ (8004770 <MadgwickAHRSupdate+0xf48>)
 800468e:	edd3 7a00 	vldr	s15, [r3]
 8004692:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004696:	ee37 7a27 	vadd.f32	s14, s14, s15
 800469a:	4b2d      	ldr	r3, [pc, #180]	@ (8004750 <MadgwickAHRSupdate+0xf28>)
 800469c:	edd3 6a00 	vldr	s13, [r3]
 80046a0:	4b2b      	ldr	r3, [pc, #172]	@ (8004750 <MadgwickAHRSupdate+0xf28>)
 80046a2:	edd3 7a00 	vldr	s15, [r3]
 80046a6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80046aa:	ee37 7a27 	vadd.f32	s14, s14, s15
 80046ae:	4b2e      	ldr	r3, [pc, #184]	@ (8004768 <MadgwickAHRSupdate+0xf40>)
 80046b0:	edd3 6a00 	vldr	s13, [r3]
 80046b4:	4b2c      	ldr	r3, [pc, #176]	@ (8004768 <MadgwickAHRSupdate+0xf40>)
 80046b6:	edd3 7a00 	vldr	s15, [r3]
 80046ba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80046be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80046c2:	eeb0 0a67 	vmov.f32	s0, s15
 80046c6:	f7ff f805 	bl	80036d4 <invSqrt>
 80046ca:	eef0 7a40 	vmov.f32	s15, s0
 80046ce:	4b29      	ldr	r3, [pc, #164]	@ (8004774 <MadgwickAHRSupdate+0xf4c>)
 80046d0:	edc3 7a00 	vstr	s15, [r3]
		s0 *= recipNorm;
 80046d4:	4b25      	ldr	r3, [pc, #148]	@ (800476c <MadgwickAHRSupdate+0xf44>)
 80046d6:	ed93 7a00 	vldr	s14, [r3]
 80046da:	4b26      	ldr	r3, [pc, #152]	@ (8004774 <MadgwickAHRSupdate+0xf4c>)
 80046dc:	edd3 7a00 	vldr	s15, [r3]
 80046e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046e4:	4b21      	ldr	r3, [pc, #132]	@ (800476c <MadgwickAHRSupdate+0xf44>)
 80046e6:	edc3 7a00 	vstr	s15, [r3]
		s1 *= recipNorm;
 80046ea:	4b21      	ldr	r3, [pc, #132]	@ (8004770 <MadgwickAHRSupdate+0xf48>)
 80046ec:	ed93 7a00 	vldr	s14, [r3]
 80046f0:	4b20      	ldr	r3, [pc, #128]	@ (8004774 <MadgwickAHRSupdate+0xf4c>)
 80046f2:	edd3 7a00 	vldr	s15, [r3]
 80046f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046fa:	4b1d      	ldr	r3, [pc, #116]	@ (8004770 <MadgwickAHRSupdate+0xf48>)
 80046fc:	edc3 7a00 	vstr	s15, [r3]
		s2 *= recipNorm;
 8004700:	4b13      	ldr	r3, [pc, #76]	@ (8004750 <MadgwickAHRSupdate+0xf28>)
 8004702:	ed93 7a00 	vldr	s14, [r3]
 8004706:	4b1b      	ldr	r3, [pc, #108]	@ (8004774 <MadgwickAHRSupdate+0xf4c>)
 8004708:	edd3 7a00 	vldr	s15, [r3]
 800470c:	e034      	b.n	8004778 <MadgwickAHRSupdate+0xf50>
 800470e:	bf00      	nop
 8004710:	20000454 	.word	0x20000454
 8004714:	20000408 	.word	0x20000408
 8004718:	20000448 	.word	0x20000448
 800471c:	20000438 	.word	0x20000438
 8004720:	2000040c 	.word	0x2000040c
 8004724:	20000470 	.word	0x20000470
 8004728:	20000478 	.word	0x20000478
 800472c:	20000444 	.word	0x20000444
 8004730:	2000043c 	.word	0x2000043c
 8004734:	20000434 	.word	0x20000434
 8004738:	20000450 	.word	0x20000450
 800473c:	20000008 	.word	0x20000008
 8004740:	20000414 	.word	0x20000414
 8004744:	20000474 	.word	0x20000474
 8004748:	20000440 	.word	0x20000440
 800474c:	2000044c 	.word	0x2000044c
 8004750:	200003d8 	.word	0x200003d8
 8004754:	20000428 	.word	0x20000428
 8004758:	2000041c 	.word	0x2000041c
 800475c:	2000042c 	.word	0x2000042c
 8004760:	20000420 	.word	0x20000420
 8004764:	20000410 	.word	0x20000410
 8004768:	200003dc 	.word	0x200003dc
 800476c:	200003d0 	.word	0x200003d0
 8004770:	200003d4 	.word	0x200003d4
 8004774:	200003cc 	.word	0x200003cc
 8004778:	ee67 7a27 	vmul.f32	s15, s14, s15
 800477c:	4b76      	ldr	r3, [pc, #472]	@ (8004958 <MadgwickAHRSupdate+0x1130>)
 800477e:	edc3 7a00 	vstr	s15, [r3]
		s3 *= recipNorm;
 8004782:	4b76      	ldr	r3, [pc, #472]	@ (800495c <MadgwickAHRSupdate+0x1134>)
 8004784:	ed93 7a00 	vldr	s14, [r3]
 8004788:	4b75      	ldr	r3, [pc, #468]	@ (8004960 <MadgwickAHRSupdate+0x1138>)
 800478a:	edd3 7a00 	vldr	s15, [r3]
 800478e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004792:	4b72      	ldr	r3, [pc, #456]	@ (800495c <MadgwickAHRSupdate+0x1134>)
 8004794:	edc3 7a00 	vstr	s15, [r3]

		qDot1 -= beta * s0;
 8004798:	4b72      	ldr	r3, [pc, #456]	@ (8004964 <MadgwickAHRSupdate+0x113c>)
 800479a:	ed93 7a00 	vldr	s14, [r3]
 800479e:	4b72      	ldr	r3, [pc, #456]	@ (8004968 <MadgwickAHRSupdate+0x1140>)
 80047a0:	edd3 7a00 	vldr	s15, [r3]
 80047a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047a8:	4b70      	ldr	r3, [pc, #448]	@ (800496c <MadgwickAHRSupdate+0x1144>)
 80047aa:	ed93 7a00 	vldr	s14, [r3]
 80047ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80047b2:	4b6e      	ldr	r3, [pc, #440]	@ (800496c <MadgwickAHRSupdate+0x1144>)
 80047b4:	edc3 7a00 	vstr	s15, [r3]
		qDot2 -= beta * s1;
 80047b8:	4b6a      	ldr	r3, [pc, #424]	@ (8004964 <MadgwickAHRSupdate+0x113c>)
 80047ba:	ed93 7a00 	vldr	s14, [r3]
 80047be:	4b6c      	ldr	r3, [pc, #432]	@ (8004970 <MadgwickAHRSupdate+0x1148>)
 80047c0:	edd3 7a00 	vldr	s15, [r3]
 80047c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047c8:	4b6a      	ldr	r3, [pc, #424]	@ (8004974 <MadgwickAHRSupdate+0x114c>)
 80047ca:	ed93 7a00 	vldr	s14, [r3]
 80047ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80047d2:	4b68      	ldr	r3, [pc, #416]	@ (8004974 <MadgwickAHRSupdate+0x114c>)
 80047d4:	edc3 7a00 	vstr	s15, [r3]
		qDot3 -= beta * s2;
 80047d8:	4b62      	ldr	r3, [pc, #392]	@ (8004964 <MadgwickAHRSupdate+0x113c>)
 80047da:	ed93 7a00 	vldr	s14, [r3]
 80047de:	4b5e      	ldr	r3, [pc, #376]	@ (8004958 <MadgwickAHRSupdate+0x1130>)
 80047e0:	edd3 7a00 	vldr	s15, [r3]
 80047e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047e8:	4b63      	ldr	r3, [pc, #396]	@ (8004978 <MadgwickAHRSupdate+0x1150>)
 80047ea:	ed93 7a00 	vldr	s14, [r3]
 80047ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80047f2:	4b61      	ldr	r3, [pc, #388]	@ (8004978 <MadgwickAHRSupdate+0x1150>)
 80047f4:	edc3 7a00 	vstr	s15, [r3]
		qDot4 -= beta * s3;
 80047f8:	4b5a      	ldr	r3, [pc, #360]	@ (8004964 <MadgwickAHRSupdate+0x113c>)
 80047fa:	ed93 7a00 	vldr	s14, [r3]
 80047fe:	4b57      	ldr	r3, [pc, #348]	@ (800495c <MadgwickAHRSupdate+0x1134>)
 8004800:	edd3 7a00 	vldr	s15, [r3]
 8004804:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004808:	4b5c      	ldr	r3, [pc, #368]	@ (800497c <MadgwickAHRSupdate+0x1154>)
 800480a:	ed93 7a00 	vldr	s14, [r3]
 800480e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004812:	4b5a      	ldr	r3, [pc, #360]	@ (800497c <MadgwickAHRSupdate+0x1154>)
 8004814:	edc3 7a00 	vstr	s15, [r3]
	}

	q0 += qDot1 * (deltat);
 8004818:	4b54      	ldr	r3, [pc, #336]	@ (800496c <MadgwickAHRSupdate+0x1144>)
 800481a:	ed93 7a00 	vldr	s14, [r3]
 800481e:	4b58      	ldr	r3, [pc, #352]	@ (8004980 <MadgwickAHRSupdate+0x1158>)
 8004820:	edd3 7a00 	vldr	s15, [r3]
 8004824:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004828:	4b56      	ldr	r3, [pc, #344]	@ (8004984 <MadgwickAHRSupdate+0x115c>)
 800482a:	edd3 7a00 	vldr	s15, [r3]
 800482e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004832:	4b54      	ldr	r3, [pc, #336]	@ (8004984 <MadgwickAHRSupdate+0x115c>)
 8004834:	edc3 7a00 	vstr	s15, [r3]
	q1 += qDot2 * (deltat);
 8004838:	4b4e      	ldr	r3, [pc, #312]	@ (8004974 <MadgwickAHRSupdate+0x114c>)
 800483a:	ed93 7a00 	vldr	s14, [r3]
 800483e:	4b50      	ldr	r3, [pc, #320]	@ (8004980 <MadgwickAHRSupdate+0x1158>)
 8004840:	edd3 7a00 	vldr	s15, [r3]
 8004844:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004848:	4b4f      	ldr	r3, [pc, #316]	@ (8004988 <MadgwickAHRSupdate+0x1160>)
 800484a:	edd3 7a00 	vldr	s15, [r3]
 800484e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004852:	4b4d      	ldr	r3, [pc, #308]	@ (8004988 <MadgwickAHRSupdate+0x1160>)
 8004854:	edc3 7a00 	vstr	s15, [r3]
	q2 += qDot3 * (deltat);
 8004858:	4b47      	ldr	r3, [pc, #284]	@ (8004978 <MadgwickAHRSupdate+0x1150>)
 800485a:	ed93 7a00 	vldr	s14, [r3]
 800485e:	4b48      	ldr	r3, [pc, #288]	@ (8004980 <MadgwickAHRSupdate+0x1158>)
 8004860:	edd3 7a00 	vldr	s15, [r3]
 8004864:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004868:	4b48      	ldr	r3, [pc, #288]	@ (800498c <MadgwickAHRSupdate+0x1164>)
 800486a:	edd3 7a00 	vldr	s15, [r3]
 800486e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004872:	4b46      	ldr	r3, [pc, #280]	@ (800498c <MadgwickAHRSupdate+0x1164>)
 8004874:	edc3 7a00 	vstr	s15, [r3]
	q3 += qDot4 * (deltat);
 8004878:	4b40      	ldr	r3, [pc, #256]	@ (800497c <MadgwickAHRSupdate+0x1154>)
 800487a:	ed93 7a00 	vldr	s14, [r3]
 800487e:	4b40      	ldr	r3, [pc, #256]	@ (8004980 <MadgwickAHRSupdate+0x1158>)
 8004880:	edd3 7a00 	vldr	s15, [r3]
 8004884:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004888:	4b41      	ldr	r3, [pc, #260]	@ (8004990 <MadgwickAHRSupdate+0x1168>)
 800488a:	edd3 7a00 	vldr	s15, [r3]
 800488e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004892:	4b3f      	ldr	r3, [pc, #252]	@ (8004990 <MadgwickAHRSupdate+0x1168>)
 8004894:	edc3 7a00 	vstr	s15, [r3]

	recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 8004898:	4b3a      	ldr	r3, [pc, #232]	@ (8004984 <MadgwickAHRSupdate+0x115c>)
 800489a:	ed93 7a00 	vldr	s14, [r3]
 800489e:	4b39      	ldr	r3, [pc, #228]	@ (8004984 <MadgwickAHRSupdate+0x115c>)
 80048a0:	edd3 7a00 	vldr	s15, [r3]
 80048a4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80048a8:	4b37      	ldr	r3, [pc, #220]	@ (8004988 <MadgwickAHRSupdate+0x1160>)
 80048aa:	edd3 6a00 	vldr	s13, [r3]
 80048ae:	4b36      	ldr	r3, [pc, #216]	@ (8004988 <MadgwickAHRSupdate+0x1160>)
 80048b0:	edd3 7a00 	vldr	s15, [r3]
 80048b4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80048b8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80048bc:	4b33      	ldr	r3, [pc, #204]	@ (800498c <MadgwickAHRSupdate+0x1164>)
 80048be:	edd3 6a00 	vldr	s13, [r3]
 80048c2:	4b32      	ldr	r3, [pc, #200]	@ (800498c <MadgwickAHRSupdate+0x1164>)
 80048c4:	edd3 7a00 	vldr	s15, [r3]
 80048c8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80048cc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80048d0:	4b2f      	ldr	r3, [pc, #188]	@ (8004990 <MadgwickAHRSupdate+0x1168>)
 80048d2:	edd3 6a00 	vldr	s13, [r3]
 80048d6:	4b2e      	ldr	r3, [pc, #184]	@ (8004990 <MadgwickAHRSupdate+0x1168>)
 80048d8:	edd3 7a00 	vldr	s15, [r3]
 80048dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80048e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80048e4:	eeb0 0a67 	vmov.f32	s0, s15
 80048e8:	f7fe fef4 	bl	80036d4 <invSqrt>
 80048ec:	eef0 7a40 	vmov.f32	s15, s0
 80048f0:	4b1b      	ldr	r3, [pc, #108]	@ (8004960 <MadgwickAHRSupdate+0x1138>)
 80048f2:	edc3 7a00 	vstr	s15, [r3]
	q0 *= recipNorm;
 80048f6:	4b23      	ldr	r3, [pc, #140]	@ (8004984 <MadgwickAHRSupdate+0x115c>)
 80048f8:	ed93 7a00 	vldr	s14, [r3]
 80048fc:	4b18      	ldr	r3, [pc, #96]	@ (8004960 <MadgwickAHRSupdate+0x1138>)
 80048fe:	edd3 7a00 	vldr	s15, [r3]
 8004902:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004906:	4b1f      	ldr	r3, [pc, #124]	@ (8004984 <MadgwickAHRSupdate+0x115c>)
 8004908:	edc3 7a00 	vstr	s15, [r3]
	q1 *= recipNorm;
 800490c:	4b1e      	ldr	r3, [pc, #120]	@ (8004988 <MadgwickAHRSupdate+0x1160>)
 800490e:	ed93 7a00 	vldr	s14, [r3]
 8004912:	4b13      	ldr	r3, [pc, #76]	@ (8004960 <MadgwickAHRSupdate+0x1138>)
 8004914:	edd3 7a00 	vldr	s15, [r3]
 8004918:	ee67 7a27 	vmul.f32	s15, s14, s15
 800491c:	4b1a      	ldr	r3, [pc, #104]	@ (8004988 <MadgwickAHRSupdate+0x1160>)
 800491e:	edc3 7a00 	vstr	s15, [r3]
	q2 *= recipNorm;
 8004922:	4b1a      	ldr	r3, [pc, #104]	@ (800498c <MadgwickAHRSupdate+0x1164>)
 8004924:	ed93 7a00 	vldr	s14, [r3]
 8004928:	4b0d      	ldr	r3, [pc, #52]	@ (8004960 <MadgwickAHRSupdate+0x1138>)
 800492a:	edd3 7a00 	vldr	s15, [r3]
 800492e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004932:	4b16      	ldr	r3, [pc, #88]	@ (800498c <MadgwickAHRSupdate+0x1164>)
 8004934:	edc3 7a00 	vstr	s15, [r3]
	q3 *= recipNorm;
 8004938:	4b15      	ldr	r3, [pc, #84]	@ (8004990 <MadgwickAHRSupdate+0x1168>)
 800493a:	ed93 7a00 	vldr	s14, [r3]
 800493e:	4b08      	ldr	r3, [pc, #32]	@ (8004960 <MadgwickAHRSupdate+0x1138>)
 8004940:	edd3 7a00 	vldr	s15, [r3]
 8004944:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004948:	4b11      	ldr	r3, [pc, #68]	@ (8004990 <MadgwickAHRSupdate+0x1168>)
 800494a:	edc3 7a00 	vstr	s15, [r3]
}
 800494e:	bf00      	nop
 8004950:	3728      	adds	r7, #40	@ 0x28
 8004952:	46bd      	mov	sp, r7
 8004954:	bd80      	pop	{r7, pc}
 8004956:	bf00      	nop
 8004958:	200003d8 	.word	0x200003d8
 800495c:	200003dc 	.word	0x200003dc
 8004960:	200003cc 	.word	0x200003cc
 8004964:	2000000c 	.word	0x2000000c
 8004968:	200003d0 	.word	0x200003d0
 800496c:	200003e0 	.word	0x200003e0
 8004970:	200003d4 	.word	0x200003d4
 8004974:	200003e4 	.word	0x200003e4
 8004978:	200003e8 	.word	0x200003e8
 800497c:	200003ec 	.word	0x200003ec
 8004980:	2000047c 	.word	0x2000047c
 8004984:	20000008 	.word	0x20000008
 8004988:	20000470 	.word	0x20000470
 800498c:	20000474 	.word	0x20000474
 8004990:	20000478 	.word	0x20000478

08004994 <LSM9DS1_ReadGyro_DMA>:

//low_power_code
void LSM9DS1_ReadGyro_DMA(void) {
 8004994:	b580      	push	{r7, lr}
 8004996:	b082      	sub	sp, #8
 8004998:	af02      	add	r7, sp, #8
	HAL_I2C_Mem_Read_DMA(&hi2c1, LSM9DS1_ADDR, OUT_X_G | 0x80,
 800499a:	2306      	movs	r3, #6
 800499c:	9301      	str	r3, [sp, #4]
 800499e:	4b05      	ldr	r3, [pc, #20]	@ (80049b4 <LSM9DS1_ReadGyro_DMA+0x20>)
 80049a0:	9300      	str	r3, [sp, #0]
 80049a2:	2301      	movs	r3, #1
 80049a4:	2298      	movs	r2, #152	@ 0x98
 80049a6:	21d4      	movs	r1, #212	@ 0xd4
 80049a8:	4803      	ldr	r0, [pc, #12]	@ (80049b8 <LSM9DS1_ReadGyro_DMA+0x24>)
 80049aa:	f004 f8c1 	bl	8008b30 <HAL_I2C_Mem_Read_DMA>
	I2C_MEMADD_SIZE_8BIT, gyro_buffer, 6);
}
 80049ae:	bf00      	nop
 80049b0:	46bd      	mov	sp, r7
 80049b2:	bd80      	pop	{r7, pc}
 80049b4:	20000354 	.word	0x20000354
 80049b8:	200001f4 	.word	0x200001f4

080049bc <LSM9DS1_ReadAccel_DMA>:

void LSM9DS1_ReadAccel_DMA(void) {
 80049bc:	b580      	push	{r7, lr}
 80049be:	b082      	sub	sp, #8
 80049c0:	af02      	add	r7, sp, #8
	HAL_I2C_Mem_Read_DMA(&hi2c1, LSM9DS1_ADDR, OUT_X_XL | 0x80,
 80049c2:	2306      	movs	r3, #6
 80049c4:	9301      	str	r3, [sp, #4]
 80049c6:	4b05      	ldr	r3, [pc, #20]	@ (80049dc <LSM9DS1_ReadAccel_DMA+0x20>)
 80049c8:	9300      	str	r3, [sp, #0]
 80049ca:	2301      	movs	r3, #1
 80049cc:	22a8      	movs	r2, #168	@ 0xa8
 80049ce:	21d4      	movs	r1, #212	@ 0xd4
 80049d0:	4803      	ldr	r0, [pc, #12]	@ (80049e0 <LSM9DS1_ReadAccel_DMA+0x24>)
 80049d2:	f004 f8ad 	bl	8008b30 <HAL_I2C_Mem_Read_DMA>
	I2C_MEMADD_SIZE_8BIT, accel_buffer, 6);
}
 80049d6:	bf00      	nop
 80049d8:	46bd      	mov	sp, r7
 80049da:	bd80      	pop	{r7, pc}
 80049dc:	2000035c 	.word	0x2000035c
 80049e0:	200001f4 	.word	0x200001f4

080049e4 <LSM9DS1_ReadMag_DMA>:

void LSM9DS1_ReadMag_DMA(void) {
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b082      	sub	sp, #8
 80049e8:	af02      	add	r7, sp, #8
	HAL_I2C_Mem_Read_DMA(&hi2c1, MAG_ADDR, OUT_X_M | 0x80, I2C_MEMADD_SIZE_8BIT,
 80049ea:	2306      	movs	r3, #6
 80049ec:	9301      	str	r3, [sp, #4]
 80049ee:	4b05      	ldr	r3, [pc, #20]	@ (8004a04 <LSM9DS1_ReadMag_DMA+0x20>)
 80049f0:	9300      	str	r3, [sp, #0]
 80049f2:	2301      	movs	r3, #1
 80049f4:	22a8      	movs	r2, #168	@ 0xa8
 80049f6:	213c      	movs	r1, #60	@ 0x3c
 80049f8:	4803      	ldr	r0, [pc, #12]	@ (8004a08 <LSM9DS1_ReadMag_DMA+0x24>)
 80049fa:	f004 f899 	bl	8008b30 <HAL_I2C_Mem_Read_DMA>
			mag_buffer, 6);
}
 80049fe:	bf00      	nop
 8004a00:	46bd      	mov	sp, r7
 8004a02:	bd80      	pop	{r7, pc}
 8004a04:	20000364 	.word	0x20000364
 8004a08:	200001f4 	.word	0x200001f4

08004a0c <magcal_Init>:

void magcal_Init(void) {
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	af00      	add	r7, sp, #0
	memset(&magcal, 0, sizeof(magcal));
 8004a10:	f241 4284 	movw	r2, #5252	@ 0x1484
 8004a14:	2100      	movs	r1, #0
 8004a16:	480e      	ldr	r0, [pc, #56]	@ (8004a50 <magcal_Init+0x44>)
 8004a18:	f00b ffa1 	bl	801095e <memset>
	magcal.V[2] = 80.0f;
 8004a1c:	4b0c      	ldr	r3, [pc, #48]	@ (8004a50 <magcal_Init+0x44>)
 8004a1e:	4a0d      	ldr	r2, [pc, #52]	@ (8004a54 <magcal_Init+0x48>)
 8004a20:	609a      	str	r2, [r3, #8]
	magcal.invW[0][0] = 1.0f;
 8004a22:	4b0b      	ldr	r3, [pc, #44]	@ (8004a50 <magcal_Init+0x44>)
 8004a24:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8004a28:	60da      	str	r2, [r3, #12]
	magcal.invW[1][1] = 1.0f;
 8004a2a:	4b09      	ldr	r3, [pc, #36]	@ (8004a50 <magcal_Init+0x44>)
 8004a2c:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8004a30:	61da      	str	r2, [r3, #28]
	magcal.invW[2][2] = 1.0f;
 8004a32:	4b07      	ldr	r3, [pc, #28]	@ (8004a50 <magcal_Init+0x44>)
 8004a34:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8004a38:	62da      	str	r2, [r3, #44]	@ 0x2c
	magcal.FitError = 100.0f;
 8004a3a:	4b05      	ldr	r3, [pc, #20]	@ (8004a50 <magcal_Init+0x44>)
 8004a3c:	4a06      	ldr	r2, [pc, #24]	@ (8004a58 <magcal_Init+0x4c>)
 8004a3e:	639a      	str	r2, [r3, #56]	@ 0x38
	magcal.FitErrorAge = 100.0f;
 8004a40:	4b03      	ldr	r3, [pc, #12]	@ (8004a50 <magcal_Init+0x44>)
 8004a42:	4a05      	ldr	r2, [pc, #20]	@ (8004a58 <magcal_Init+0x4c>)
 8004a44:	63da      	str	r2, [r3, #60]	@ 0x3c
	magcal.B = 50.0f;
 8004a46:	4b02      	ldr	r3, [pc, #8]	@ (8004a50 <magcal_Init+0x44>)
 8004a48:	4a04      	ldr	r2, [pc, #16]	@ (8004a5c <magcal_Init+0x50>)
 8004a4a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004a4c:	bf00      	nop
 8004a4e:	bd80      	pop	{r7, pc}
 8004a50:	200004d8 	.word	0x200004d8
 8004a54:	42a00000 	.word	0x42a00000
 8004a58:	42c80000 	.word	0x42c80000
 8004a5c:	42480000 	.word	0x42480000

08004a60 <apply_calibration>:

static int chunk_i = 0;
static int chunk_j = 0;

void apply_calibration(int16_t rawx, int16_t rawy, int16_t rawz, Point_t *out) {
 8004a60:	b480      	push	{r7}
 8004a62:	b089      	sub	sp, #36	@ 0x24
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	607b      	str	r3, [r7, #4]
 8004a68:	4603      	mov	r3, r0
 8004a6a:	81fb      	strh	r3, [r7, #14]
 8004a6c:	460b      	mov	r3, r1
 8004a6e:	81bb      	strh	r3, [r7, #12]
 8004a70:	4613      	mov	r3, r2
 8004a72:	817b      	strh	r3, [r7, #10]
	float x, y, z;

	x = ((float) rawx * UT_PER_COUNT) - magcal.V[0];
 8004a74:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004a78:	ee07 3a90 	vmov	s15, r3
 8004a7c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004a80:	ed9f 7a43 	vldr	s14, [pc, #268]	@ 8004b90 <apply_calibration+0x130>
 8004a84:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004a88:	4b42      	ldr	r3, [pc, #264]	@ (8004b94 <apply_calibration+0x134>)
 8004a8a:	edd3 7a00 	vldr	s15, [r3]
 8004a8e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004a92:	edc7 7a07 	vstr	s15, [r7, #28]
	y = ((float) rawy * UT_PER_COUNT) - magcal.V[1];
 8004a96:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004a9a:	ee07 3a90 	vmov	s15, r3
 8004a9e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004aa2:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 8004b90 <apply_calibration+0x130>
 8004aa6:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004aaa:	4b3a      	ldr	r3, [pc, #232]	@ (8004b94 <apply_calibration+0x134>)
 8004aac:	edd3 7a01 	vldr	s15, [r3, #4]
 8004ab0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004ab4:	edc7 7a06 	vstr	s15, [r7, #24]
	z = ((float) rawz * UT_PER_COUNT) - magcal.V[2];
 8004ab8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8004abc:	ee07 3a90 	vmov	s15, r3
 8004ac0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004ac4:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8004b90 <apply_calibration+0x130>
 8004ac8:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004acc:	4b31      	ldr	r3, [pc, #196]	@ (8004b94 <apply_calibration+0x134>)
 8004ace:	edd3 7a02 	vldr	s15, [r3, #8]
 8004ad2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004ad6:	edc7 7a05 	vstr	s15, [r7, #20]
	out->x = x * magcal.invW[0][0] + y * magcal.invW[0][1]
 8004ada:	4b2e      	ldr	r3, [pc, #184]	@ (8004b94 <apply_calibration+0x134>)
 8004adc:	ed93 7a03 	vldr	s14, [r3, #12]
 8004ae0:	edd7 7a07 	vldr	s15, [r7, #28]
 8004ae4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004ae8:	4b2a      	ldr	r3, [pc, #168]	@ (8004b94 <apply_calibration+0x134>)
 8004aea:	edd3 6a04 	vldr	s13, [r3, #16]
 8004aee:	edd7 7a06 	vldr	s15, [r7, #24]
 8004af2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004af6:	ee37 7a27 	vadd.f32	s14, s14, s15
			+ z * magcal.invW[0][2];
 8004afa:	4b26      	ldr	r3, [pc, #152]	@ (8004b94 <apply_calibration+0x134>)
 8004afc:	edd3 6a05 	vldr	s13, [r3, #20]
 8004b00:	edd7 7a05 	vldr	s15, [r7, #20]
 8004b04:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004b08:	ee77 7a27 	vadd.f32	s15, s14, s15
	out->x = x * magcal.invW[0][0] + y * magcal.invW[0][1]
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	edc3 7a00 	vstr	s15, [r3]
	out->y = x * magcal.invW[1][0] + y * magcal.invW[1][1]
 8004b12:	4b20      	ldr	r3, [pc, #128]	@ (8004b94 <apply_calibration+0x134>)
 8004b14:	ed93 7a06 	vldr	s14, [r3, #24]
 8004b18:	edd7 7a07 	vldr	s15, [r7, #28]
 8004b1c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004b20:	4b1c      	ldr	r3, [pc, #112]	@ (8004b94 <apply_calibration+0x134>)
 8004b22:	edd3 6a07 	vldr	s13, [r3, #28]
 8004b26:	edd7 7a06 	vldr	s15, [r7, #24]
 8004b2a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004b2e:	ee37 7a27 	vadd.f32	s14, s14, s15
			+ z * magcal.invW[1][2];
 8004b32:	4b18      	ldr	r3, [pc, #96]	@ (8004b94 <apply_calibration+0x134>)
 8004b34:	edd3 6a08 	vldr	s13, [r3, #32]
 8004b38:	edd7 7a05 	vldr	s15, [r7, #20]
 8004b3c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004b40:	ee77 7a27 	vadd.f32	s15, s14, s15
	out->y = x * magcal.invW[1][0] + y * magcal.invW[1][1]
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	edc3 7a01 	vstr	s15, [r3, #4]
	out->z = x * magcal.invW[2][0] + y * magcal.invW[2][1]
 8004b4a:	4b12      	ldr	r3, [pc, #72]	@ (8004b94 <apply_calibration+0x134>)
 8004b4c:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8004b50:	edd7 7a07 	vldr	s15, [r7, #28]
 8004b54:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004b58:	4b0e      	ldr	r3, [pc, #56]	@ (8004b94 <apply_calibration+0x134>)
 8004b5a:	edd3 6a0a 	vldr	s13, [r3, #40]	@ 0x28
 8004b5e:	edd7 7a06 	vldr	s15, [r7, #24]
 8004b62:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004b66:	ee37 7a27 	vadd.f32	s14, s14, s15
			+ z * magcal.invW[2][2];
 8004b6a:	4b0a      	ldr	r3, [pc, #40]	@ (8004b94 <apply_calibration+0x134>)
 8004b6c:	edd3 6a0b 	vldr	s13, [r3, #44]	@ 0x2c
 8004b70:	edd7 7a05 	vldr	s15, [r7, #20]
 8004b74:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004b78:	ee77 7a27 	vadd.f32	s15, s14, s15
	out->z = x * magcal.invW[2][0] + y * magcal.invW[2][1]
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8004b82:	bf00      	nop
 8004b84:	3724      	adds	r7, #36	@ 0x24
 8004b86:	46bd      	mov	sp, r7
 8004b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8c:	4770      	bx	lr
 8004b8e:	bf00      	nop
 8004b90:	3dcccccd 	.word	0x3dcccccd
 8004b94:	200004d8 	.word	0x200004d8

08004b98 <choose_discard_magcal>:

static int choose_discard_magcal(void) {
 8004b98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b9c:	b092      	sub	sp, #72	@ 0x48
 8004b9e:	af00      	add	r7, sp, #0
	choose_flag = 1;
 8004ba0:	4a77      	ldr	r2, [pc, #476]	@ (8004d80 <choose_discard_magcal+0x1e8>)
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	6013      	str	r3, [r2, #0]
	// When enough data is collected (gaps error is low), assume we
	// have a pretty good coverage and the field stregth is known.
	gaps = quality_surface_gap_error();
 8004ba6:	f002 fbcf 	bl	8007348 <quality_surface_gap_error>
 8004baa:	eef0 7a40 	vmov.f32	s15, s0
 8004bae:	4b75      	ldr	r3, [pc, #468]	@ (8004d84 <choose_discard_magcal+0x1ec>)
 8004bb0:	edc3 7a00 	vstr	s15, [r3]
	if (gaps < 25.0f) {
 8004bb4:	4b73      	ldr	r3, [pc, #460]	@ (8004d84 <choose_discard_magcal+0x1ec>)
 8004bb6:	edd3 7a00 	vldr	s15, [r3]
 8004bba:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 8004bbe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004bc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bc6:	f140 80b9 	bpl.w	8004d3c <choose_discard_magcal+0x1a4>
		// occasionally look for points farthest from average field strength
		// always rate limit assumption-based data purging, but allow the
		// rate to increase as the angular coverage improves.
		if (gaps < 1.0f)
 8004bca:	4b6e      	ldr	r3, [pc, #440]	@ (8004d84 <choose_discard_magcal+0x1ec>)
 8004bcc:	edd3 7a00 	vldr	s15, [r3]
 8004bd0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004bd4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004bd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bdc:	d503      	bpl.n	8004be6 <choose_discard_magcal+0x4e>
			gaps = 1.0f;
 8004bde:	4a69      	ldr	r2, [pc, #420]	@ (8004d84 <choose_discard_magcal+0x1ec>)
 8004be0:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8004be4:	6013      	str	r3, [r2, #0]
		if (++runcount > (int) (gaps * 10.0f)) {
 8004be6:	4b68      	ldr	r3, [pc, #416]	@ (8004d88 <choose_discard_magcal+0x1f0>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	1c5a      	adds	r2, r3, #1
 8004bec:	4b66      	ldr	r3, [pc, #408]	@ (8004d88 <choose_discard_magcal+0x1f0>)
 8004bee:	601a      	str	r2, [r3, #0]
 8004bf0:	4b65      	ldr	r3, [pc, #404]	@ (8004d88 <choose_discard_magcal+0x1f0>)
 8004bf2:	681a      	ldr	r2, [r3, #0]
 8004bf4:	4b63      	ldr	r3, [pc, #396]	@ (8004d84 <choose_discard_magcal+0x1ec>)
 8004bf6:	edd3 7a00 	vldr	s15, [r3]
 8004bfa:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8004bfe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004c02:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004c06:	ee17 3a90 	vmov	r3, s15
 8004c0a:	429a      	cmp	r2, r3
 8004c0c:	f340 8099 	ble.w	8004d42 <choose_discard_magcal+0x1aa>
			j = MAGBUFFSIZE;
 8004c10:	4a5e      	ldr	r2, [pc, #376]	@ (8004d8c <choose_discard_magcal+0x1f4>)
 8004c12:	f44f 7316 	mov.w	r3, #600	@ 0x258
 8004c16:	6013      	str	r3, [r2, #0]
			errormax = 0.0f;
 8004c18:	4a5d      	ldr	r2, [pc, #372]	@ (8004d90 <choose_discard_magcal+0x1f8>)
 8004c1a:	f04f 0300 	mov.w	r3, #0
 8004c1e:	6013      	str	r3, [r2, #0]
			for (i = 0; i < MAGBUFFSIZE; i++) {
 8004c20:	4a5c      	ldr	r2, [pc, #368]	@ (8004d94 <choose_discard_magcal+0x1fc>)
 8004c22:	2300      	movs	r3, #0
 8004c24:	6013      	str	r3, [r2, #0]
 8004c26:	e079      	b.n	8004d1c <choose_discard_magcal+0x184>
				rawx = magcal.BpFast[0][i];
 8004c28:	4b5a      	ldr	r3, [pc, #360]	@ (8004d94 <choose_discard_magcal+0x1fc>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	4a5a      	ldr	r2, [pc, #360]	@ (8004d98 <choose_discard_magcal+0x200>)
 8004c2e:	f503 7303 	add.w	r3, r3, #524	@ 0x20c
 8004c32:	005b      	lsls	r3, r3, #1
 8004c34:	4413      	add	r3, r2
 8004c36:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004c3a:	461a      	mov	r2, r3
 8004c3c:	4b57      	ldr	r3, [pc, #348]	@ (8004d9c <choose_discard_magcal+0x204>)
 8004c3e:	601a      	str	r2, [r3, #0]
				rawy = magcal.BpFast[1][i];
 8004c40:	4b54      	ldr	r3, [pc, #336]	@ (8004d94 <choose_discard_magcal+0x1fc>)
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	4a54      	ldr	r2, [pc, #336]	@ (8004d98 <choose_discard_magcal+0x200>)
 8004c46:	f203 4364 	addw	r3, r3, #1124	@ 0x464
 8004c4a:	005b      	lsls	r3, r3, #1
 8004c4c:	4413      	add	r3, r2
 8004c4e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004c52:	461a      	mov	r2, r3
 8004c54:	4b52      	ldr	r3, [pc, #328]	@ (8004da0 <choose_discard_magcal+0x208>)
 8004c56:	601a      	str	r2, [r3, #0]
				rawz = magcal.BpFast[2][i];
 8004c58:	4b4e      	ldr	r3, [pc, #312]	@ (8004d94 <choose_discard_magcal+0x1fc>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4a4e      	ldr	r2, [pc, #312]	@ (8004d98 <choose_discard_magcal+0x200>)
 8004c5e:	f203 63bc 	addw	r3, r3, #1724	@ 0x6bc
 8004c62:	005b      	lsls	r3, r3, #1
 8004c64:	4413      	add	r3, r2
 8004c66:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004c6a:	461a      	mov	r2, r3
 8004c6c:	4b4d      	ldr	r3, [pc, #308]	@ (8004da4 <choose_discard_magcal+0x20c>)
 8004c6e:	601a      	str	r2, [r3, #0]
//				apply_calibration(rawx, rawy, rawz, &point);
				x = point.x;
 8004c70:	4b4d      	ldr	r3, [pc, #308]	@ (8004da8 <choose_discard_magcal+0x210>)
 8004c72:	681a      	ldr	r2, [r3, #0]
 8004c74:	4b4d      	ldr	r3, [pc, #308]	@ (8004dac <choose_discard_magcal+0x214>)
 8004c76:	601a      	str	r2, [r3, #0]
				y = point.y;
 8004c78:	4b4b      	ldr	r3, [pc, #300]	@ (8004da8 <choose_discard_magcal+0x210>)
 8004c7a:	685a      	ldr	r2, [r3, #4]
 8004c7c:	4b4c      	ldr	r3, [pc, #304]	@ (8004db0 <choose_discard_magcal+0x218>)
 8004c7e:	601a      	str	r2, [r3, #0]
				z = point.z;
 8004c80:	4b49      	ldr	r3, [pc, #292]	@ (8004da8 <choose_discard_magcal+0x210>)
 8004c82:	689a      	ldr	r2, [r3, #8]
 8004c84:	4b4b      	ldr	r3, [pc, #300]	@ (8004db4 <choose_discard_magcal+0x21c>)
 8004c86:	601a      	str	r2, [r3, #0]
				field = sqrtf(x * x + y * y + z * z);
 8004c88:	4b48      	ldr	r3, [pc, #288]	@ (8004dac <choose_discard_magcal+0x214>)
 8004c8a:	ed93 7a00 	vldr	s14, [r3]
 8004c8e:	4b47      	ldr	r3, [pc, #284]	@ (8004dac <choose_discard_magcal+0x214>)
 8004c90:	edd3 7a00 	vldr	s15, [r3]
 8004c94:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004c98:	4b45      	ldr	r3, [pc, #276]	@ (8004db0 <choose_discard_magcal+0x218>)
 8004c9a:	edd3 6a00 	vldr	s13, [r3]
 8004c9e:	4b44      	ldr	r3, [pc, #272]	@ (8004db0 <choose_discard_magcal+0x218>)
 8004ca0:	edd3 7a00 	vldr	s15, [r3]
 8004ca4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004ca8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004cac:	4b41      	ldr	r3, [pc, #260]	@ (8004db4 <choose_discard_magcal+0x21c>)
 8004cae:	edd3 6a00 	vldr	s13, [r3]
 8004cb2:	4b40      	ldr	r3, [pc, #256]	@ (8004db4 <choose_discard_magcal+0x21c>)
 8004cb4:	edd3 7a00 	vldr	s15, [r3]
 8004cb8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004cbc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004cc0:	eeb0 0a67 	vmov.f32	s0, s15
 8004cc4:	f00c fd7c 	bl	80117c0 <sqrtf>
 8004cc8:	eef0 7a40 	vmov.f32	s15, s0
 8004ccc:	4b3a      	ldr	r3, [pc, #232]	@ (8004db8 <choose_discard_magcal+0x220>)
 8004cce:	edc3 7a00 	vstr	s15, [r3]
				// if magcal.B is bad, things could go horribly wrong
				error = fabsf(field - magcal.B);
 8004cd2:	4b39      	ldr	r3, [pc, #228]	@ (8004db8 <choose_discard_magcal+0x220>)
 8004cd4:	ed93 7a00 	vldr	s14, [r3]
 8004cd8:	4b2f      	ldr	r3, [pc, #188]	@ (8004d98 <choose_discard_magcal+0x200>)
 8004cda:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8004cde:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004ce2:	eef0 7ae7 	vabs.f32	s15, s15
 8004ce6:	4b35      	ldr	r3, [pc, #212]	@ (8004dbc <choose_discard_magcal+0x224>)
 8004ce8:	edc3 7a00 	vstr	s15, [r3]
				if (error > errormax) {
 8004cec:	4b33      	ldr	r3, [pc, #204]	@ (8004dbc <choose_discard_magcal+0x224>)
 8004cee:	ed93 7a00 	vldr	s14, [r3]
 8004cf2:	4b27      	ldr	r3, [pc, #156]	@ (8004d90 <choose_discard_magcal+0x1f8>)
 8004cf4:	edd3 7a00 	vldr	s15, [r3]
 8004cf8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004cfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d00:	dd07      	ble.n	8004d12 <choose_discard_magcal+0x17a>
					errormax = error;
 8004d02:	4b2e      	ldr	r3, [pc, #184]	@ (8004dbc <choose_discard_magcal+0x224>)
 8004d04:	681a      	ldr	r2, [r3, #0]
 8004d06:	4b22      	ldr	r3, [pc, #136]	@ (8004d90 <choose_discard_magcal+0x1f8>)
 8004d08:	601a      	str	r2, [r3, #0]
					j = i;
 8004d0a:	4b22      	ldr	r3, [pc, #136]	@ (8004d94 <choose_discard_magcal+0x1fc>)
 8004d0c:	681a      	ldr	r2, [r3, #0]
 8004d0e:	4b1f      	ldr	r3, [pc, #124]	@ (8004d8c <choose_discard_magcal+0x1f4>)
 8004d10:	601a      	str	r2, [r3, #0]
			for (i = 0; i < MAGBUFFSIZE; i++) {
 8004d12:	4b20      	ldr	r3, [pc, #128]	@ (8004d94 <choose_discard_magcal+0x1fc>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	1c5a      	adds	r2, r3, #1
 8004d18:	4b1e      	ldr	r3, [pc, #120]	@ (8004d94 <choose_discard_magcal+0x1fc>)
 8004d1a:	601a      	str	r2, [r3, #0]
 8004d1c:	4b1d      	ldr	r3, [pc, #116]	@ (8004d94 <choose_discard_magcal+0x1fc>)
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f5b3 7f16 	cmp.w	r3, #600	@ 0x258
 8004d24:	db80      	blt.n	8004c28 <choose_discard_magcal+0x90>
				}
			}
			runcount = 0;
 8004d26:	4a18      	ldr	r2, [pc, #96]	@ (8004d88 <choose_discard_magcal+0x1f0>)
 8004d28:	2300      	movs	r3, #0
 8004d2a:	6013      	str	r3, [r2, #0]
			if (j < MAGBUFFSIZE) {
 8004d2c:	4b17      	ldr	r3, [pc, #92]	@ (8004d8c <choose_discard_magcal+0x1f4>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f5b3 7f16 	cmp.w	r3, #600	@ 0x258
 8004d34:	da05      	bge.n	8004d42 <choose_discard_magcal+0x1aa>
				//printf("worst error at %d\n", j);
				return j;
 8004d36:	4b15      	ldr	r3, [pc, #84]	@ (8004d8c <choose_discard_magcal+0x1f4>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	e11f      	b.n	8004f7c <choose_discard_magcal+0x3e4>
			}
		}
	} else {
		runcount = 0;
 8004d3c:	4a12      	ldr	r2, [pc, #72]	@ (8004d88 <choose_discard_magcal+0x1f0>)
 8004d3e:	2300      	movs	r3, #0
 8004d40:	6013      	str	r3, [r2, #0]
//				minindex = (random() & 1) ? i : j;
//			}
//		}
//	}

	for (int cnt = 0; cnt < 10; cnt++) {
 8004d42:	2300      	movs	r3, #0
 8004d44:	647b      	str	r3, [r7, #68]	@ 0x44
 8004d46:	e113      	b.n	8004f70 <choose_discard_magcal+0x3d8>
		if (chunk_i >= MAGBUFFSIZE) {
 8004d48:	4b1d      	ldr	r3, [pc, #116]	@ (8004dc0 <choose_discard_magcal+0x228>)
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f5b3 7f16 	cmp.w	r3, #600	@ 0x258
 8004d50:	db06      	blt.n	8004d60 <choose_discard_magcal+0x1c8>
			chunk_i = 0;
 8004d52:	4b1b      	ldr	r3, [pc, #108]	@ (8004dc0 <choose_discard_magcal+0x228>)
 8004d54:	2200      	movs	r2, #0
 8004d56:	601a      	str	r2, [r3, #0]
			chunk_j = 0;
 8004d58:	4b1a      	ldr	r3, [pc, #104]	@ (8004dc4 <choose_discard_magcal+0x22c>)
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	601a      	str	r2, [r3, #0]
			break;
 8004d5e:	e10b      	b.n	8004f78 <choose_discard_magcal+0x3e0>
		}

		if (chunk_j >= MAGBUFFSIZE) {
 8004d60:	4b18      	ldr	r3, [pc, #96]	@ (8004dc4 <choose_discard_magcal+0x22c>)
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f5b3 7f16 	cmp.w	r3, #600	@ 0x258
 8004d68:	db2e      	blt.n	8004dc8 <choose_discard_magcal+0x230>
			chunk_i++;
 8004d6a:	4b15      	ldr	r3, [pc, #84]	@ (8004dc0 <choose_discard_magcal+0x228>)
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	1c5a      	adds	r2, r3, #1
 8004d70:	4b13      	ldr	r3, [pc, #76]	@ (8004dc0 <choose_discard_magcal+0x228>)
 8004d72:	601a      	str	r2, [r3, #0]
			chunk_j = chunk_i + 1;
 8004d74:	4b12      	ldr	r3, [pc, #72]	@ (8004dc0 <choose_discard_magcal+0x228>)
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	1c5a      	adds	r2, r3, #1
 8004d7a:	4b12      	ldr	r3, [pc, #72]	@ (8004dc4 <choose_discard_magcal+0x22c>)
 8004d7c:	601a      	str	r2, [r3, #0]
			continue;
 8004d7e:	e0f4      	b.n	8004f6a <choose_discard_magcal+0x3d2>
 8004d80:	200019b8 	.word	0x200019b8
 8004d84:	20000048 	.word	0x20000048
 8004d88:	20001990 	.word	0x20001990
 8004d8c:	20001998 	.word	0x20001998
 8004d90:	200019b4 	.word	0x200019b4
 8004d94:	20001994 	.word	0x20001994
 8004d98:	200004d8 	.word	0x200004d8
 8004d9c:	20001964 	.word	0x20001964
 8004da0:	20001968 	.word	0x20001968
 8004da4:	2000196c 	.word	0x2000196c
 8004da8:	200019a0 	.word	0x200019a0
 8004dac:	2000197c 	.word	0x2000197c
 8004db0:	20001980 	.word	0x20001980
 8004db4:	20001984 	.word	0x20001984
 8004db8:	200019ac 	.word	0x200019ac
 8004dbc:	200019b0 	.word	0x200019b0
 8004dc0:	200019bc 	.word	0x200019bc
 8004dc4:	200019c0 	.word	0x200019c0
		}

		dx = magcal.BpFast[0][chunk_i] - magcal.BpFast[0][chunk_j];
 8004dc8:	4b6f      	ldr	r3, [pc, #444]	@ (8004f88 <choose_discard_magcal+0x3f0>)
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	4a6f      	ldr	r2, [pc, #444]	@ (8004f8c <choose_discard_magcal+0x3f4>)
 8004dce:	f503 7303 	add.w	r3, r3, #524	@ 0x20c
 8004dd2:	005b      	lsls	r3, r3, #1
 8004dd4:	4413      	add	r3, r2
 8004dd6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004dda:	4619      	mov	r1, r3
 8004ddc:	4b6c      	ldr	r3, [pc, #432]	@ (8004f90 <choose_discard_magcal+0x3f8>)
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	4a6a      	ldr	r2, [pc, #424]	@ (8004f8c <choose_discard_magcal+0x3f4>)
 8004de2:	f503 7303 	add.w	r3, r3, #524	@ 0x20c
 8004de6:	005b      	lsls	r3, r3, #1
 8004de8:	4413      	add	r3, r2
 8004dea:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004dee:	1aca      	subs	r2, r1, r3
 8004df0:	4b68      	ldr	r3, [pc, #416]	@ (8004f94 <choose_discard_magcal+0x3fc>)
 8004df2:	601a      	str	r2, [r3, #0]
		dy = magcal.BpFast[1][chunk_i] - magcal.BpFast[1][chunk_j];
 8004df4:	4b64      	ldr	r3, [pc, #400]	@ (8004f88 <choose_discard_magcal+0x3f0>)
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	4a64      	ldr	r2, [pc, #400]	@ (8004f8c <choose_discard_magcal+0x3f4>)
 8004dfa:	f203 4364 	addw	r3, r3, #1124	@ 0x464
 8004dfe:	005b      	lsls	r3, r3, #1
 8004e00:	4413      	add	r3, r2
 8004e02:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004e06:	4619      	mov	r1, r3
 8004e08:	4b61      	ldr	r3, [pc, #388]	@ (8004f90 <choose_discard_magcal+0x3f8>)
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	4a5f      	ldr	r2, [pc, #380]	@ (8004f8c <choose_discard_magcal+0x3f4>)
 8004e0e:	f203 4364 	addw	r3, r3, #1124	@ 0x464
 8004e12:	005b      	lsls	r3, r3, #1
 8004e14:	4413      	add	r3, r2
 8004e16:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004e1a:	1aca      	subs	r2, r1, r3
 8004e1c:	4b5e      	ldr	r3, [pc, #376]	@ (8004f98 <choose_discard_magcal+0x400>)
 8004e1e:	601a      	str	r2, [r3, #0]
		dz = magcal.BpFast[2][chunk_i] - magcal.BpFast[2][chunk_j];
 8004e20:	4b59      	ldr	r3, [pc, #356]	@ (8004f88 <choose_discard_magcal+0x3f0>)
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4a59      	ldr	r2, [pc, #356]	@ (8004f8c <choose_discard_magcal+0x3f4>)
 8004e26:	f203 63bc 	addw	r3, r3, #1724	@ 0x6bc
 8004e2a:	005b      	lsls	r3, r3, #1
 8004e2c:	4413      	add	r3, r2
 8004e2e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004e32:	4619      	mov	r1, r3
 8004e34:	4b56      	ldr	r3, [pc, #344]	@ (8004f90 <choose_discard_magcal+0x3f8>)
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	4a54      	ldr	r2, [pc, #336]	@ (8004f8c <choose_discard_magcal+0x3f4>)
 8004e3a:	f203 63bc 	addw	r3, r3, #1724	@ 0x6bc
 8004e3e:	005b      	lsls	r3, r3, #1
 8004e40:	4413      	add	r3, r2
 8004e42:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004e46:	1aca      	subs	r2, r1, r3
 8004e48:	4b54      	ldr	r3, [pc, #336]	@ (8004f9c <choose_discard_magcal+0x404>)
 8004e4a:	601a      	str	r2, [r3, #0]
		distsq = (int64_t) dx * (int64_t) dx + (int64_t) dy * (int64_t) dy
 8004e4c:	4b51      	ldr	r3, [pc, #324]	@ (8004f94 <choose_discard_magcal+0x3fc>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	17da      	asrs	r2, r3, #31
 8004e52:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004e54:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004e56:	4b4f      	ldr	r3, [pc, #316]	@ (8004f94 <choose_discard_magcal+0x3fc>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	17da      	asrs	r2, r3, #31
 8004e5c:	633b      	str	r3, [r7, #48]	@ 0x30
 8004e5e:	637a      	str	r2, [r7, #52]	@ 0x34
 8004e60:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8004e64:	460b      	mov	r3, r1
 8004e66:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004e68:	fb02 f203 	mul.w	r2, r2, r3
 8004e6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e6e:	e9c7 010e 	strd	r0, r1, [r7, #56]	@ 0x38
 8004e72:	4601      	mov	r1, r0
 8004e74:	fb01 f303 	mul.w	r3, r1, r3
 8004e78:	4413      	add	r3, r2
 8004e7a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004e7c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004e7e:	fba2 4501 	umull	r4, r5, r2, r1
 8004e82:	442b      	add	r3, r5
 8004e84:	461d      	mov	r5, r3
 8004e86:	4b44      	ldr	r3, [pc, #272]	@ (8004f98 <choose_discard_magcal+0x400>)
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	17da      	asrs	r2, r3, #31
 8004e8c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004e8e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004e90:	4b41      	ldr	r3, [pc, #260]	@ (8004f98 <choose_discard_magcal+0x400>)
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	17da      	asrs	r2, r3, #31
 8004e96:	623b      	str	r3, [r7, #32]
 8004e98:	627a      	str	r2, [r7, #36]	@ 0x24
 8004e9a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8004e9e:	460b      	mov	r3, r1
 8004ea0:	6a3a      	ldr	r2, [r7, #32]
 8004ea2:	fb02 f203 	mul.w	r2, r2, r3
 8004ea6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ea8:	e9c7 010a 	strd	r0, r1, [r7, #40]	@ 0x28
 8004eac:	4601      	mov	r1, r0
 8004eae:	fb01 f303 	mul.w	r3, r1, r3
 8004eb2:	4413      	add	r3, r2
 8004eb4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004eb6:	6a39      	ldr	r1, [r7, #32]
 8004eb8:	fba2 ab01 	umull	sl, fp, r2, r1
 8004ebc:	445b      	add	r3, fp
 8004ebe:	469b      	mov	fp, r3
 8004ec0:	eb14 030a 	adds.w	r3, r4, sl
 8004ec4:	60bb      	str	r3, [r7, #8]
 8004ec6:	eb45 030b 	adc.w	r3, r5, fp
 8004eca:	60fb      	str	r3, [r7, #12]
				+ (int64_t) dz * (int64_t) dz;
 8004ecc:	4b33      	ldr	r3, [pc, #204]	@ (8004f9c <choose_discard_magcal+0x404>)
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	17da      	asrs	r2, r3, #31
 8004ed2:	61bb      	str	r3, [r7, #24]
 8004ed4:	61fa      	str	r2, [r7, #28]
 8004ed6:	4b31      	ldr	r3, [pc, #196]	@ (8004f9c <choose_discard_magcal+0x404>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	17da      	asrs	r2, r3, #31
 8004edc:	613b      	str	r3, [r7, #16]
 8004ede:	617a      	str	r2, [r7, #20]
 8004ee0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004ee4:	460b      	mov	r3, r1
 8004ee6:	693a      	ldr	r2, [r7, #16]
 8004ee8:	fb02 f203 	mul.w	r2, r2, r3
 8004eec:	697b      	ldr	r3, [r7, #20]
 8004eee:	e9c7 0106 	strd	r0, r1, [r7, #24]
 8004ef2:	4601      	mov	r1, r0
 8004ef4:	fb01 f303 	mul.w	r3, r1, r3
 8004ef8:	4413      	add	r3, r2
 8004efa:	69ba      	ldr	r2, [r7, #24]
 8004efc:	6939      	ldr	r1, [r7, #16]
 8004efe:	fba2 8901 	umull	r8, r9, r2, r1
 8004f02:	444b      	add	r3, r9
 8004f04:	4699      	mov	r9, r3
 8004f06:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004f0a:	460b      	mov	r3, r1
 8004f0c:	eb13 0308 	adds.w	r3, r3, r8
 8004f10:	603b      	str	r3, [r7, #0]
 8004f12:	4613      	mov	r3, r2
 8004f14:	eb43 0309 	adc.w	r3, r3, r9
 8004f18:	607b      	str	r3, [r7, #4]
 8004f1a:	e9d7 0100 	ldrd	r0, r1, [r7]
		distsq = (int64_t) dx * (int64_t) dx + (int64_t) dy * (int64_t) dy
 8004f1e:	4b20      	ldr	r3, [pc, #128]	@ (8004fa0 <choose_discard_magcal+0x408>)
 8004f20:	e9c3 0100 	strd	r0, r1, [r3]

		if (distsq < minsum) {
 8004f24:	4b1e      	ldr	r3, [pc, #120]	@ (8004fa0 <choose_discard_magcal+0x408>)
 8004f26:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004f2a:	4b1e      	ldr	r3, [pc, #120]	@ (8004fa4 <choose_discard_magcal+0x40c>)
 8004f2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f30:	4290      	cmp	r0, r2
 8004f32:	eb71 0303 	sbcs.w	r3, r1, r3
 8004f36:	d213      	bcs.n	8004f60 <choose_discard_magcal+0x3c8>
			minsum = distsq;
 8004f38:	4b19      	ldr	r3, [pc, #100]	@ (8004fa0 <choose_discard_magcal+0x408>)
 8004f3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f3e:	4919      	ldr	r1, [pc, #100]	@ (8004fa4 <choose_discard_magcal+0x40c>)
 8004f40:	e9c1 2300 	strd	r2, r3, [r1]
			minindex = (random() & 1) ? chunk_i : chunk_j;
 8004f44:	f00b fbc8 	bl	80106d8 <random>
 8004f48:	4603      	mov	r3, r0
 8004f4a:	f003 0301 	and.w	r3, r3, #1
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d002      	beq.n	8004f58 <choose_discard_magcal+0x3c0>
 8004f52:	4b0d      	ldr	r3, [pc, #52]	@ (8004f88 <choose_discard_magcal+0x3f0>)
 8004f54:	681a      	ldr	r2, [r3, #0]
 8004f56:	e001      	b.n	8004f5c <choose_discard_magcal+0x3c4>
 8004f58:	4b0d      	ldr	r3, [pc, #52]	@ (8004f90 <choose_discard_magcal+0x3f8>)
 8004f5a:	681a      	ldr	r2, [r3, #0]
 8004f5c:	4b12      	ldr	r3, [pc, #72]	@ (8004fa8 <choose_discard_magcal+0x410>)
 8004f5e:	601a      	str	r2, [r3, #0]
		}

		chunk_j++;
 8004f60:	4b0b      	ldr	r3, [pc, #44]	@ (8004f90 <choose_discard_magcal+0x3f8>)
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	1c5a      	adds	r2, r3, #1
 8004f66:	4b0a      	ldr	r3, [pc, #40]	@ (8004f90 <choose_discard_magcal+0x3f8>)
 8004f68:	601a      	str	r2, [r3, #0]
	for (int cnt = 0; cnt < 10; cnt++) {
 8004f6a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004f6c:	3301      	adds	r3, #1
 8004f6e:	647b      	str	r3, [r7, #68]	@ 0x44
 8004f70:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004f72:	2b09      	cmp	r3, #9
 8004f74:	f77f aee8 	ble.w	8004d48 <choose_discard_magcal+0x1b0>
	}

	return minindex;
 8004f78:	4b0b      	ldr	r3, [pc, #44]	@ (8004fa8 <choose_discard_magcal+0x410>)
 8004f7a:	681b      	ldr	r3, [r3, #0]
}
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	3748      	adds	r7, #72	@ 0x48
 8004f80:	46bd      	mov	sp, r7
 8004f82:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004f86:	bf00      	nop
 8004f88:	200019bc 	.word	0x200019bc
 8004f8c:	200004d8 	.word	0x200004d8
 8004f90:	200019c0 	.word	0x200019c0
 8004f94:	20001970 	.word	0x20001970
 8004f98:	20001974 	.word	0x20001974
 8004f9c:	20001978 	.word	0x20001978
 8004fa0:	20001988 	.word	0x20001988
 8004fa4:	20000040 	.word	0x20000040
 8004fa8:	2000199c 	.word	0x2000199c

08004fac <add_magcal_data>:

static void add_magcal_data(const int16_t *data) {
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b084      	sub	sp, #16
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]

	int i;

	// first look for an unused caldata slot
	for (i = 0; i < MAGBUFFSIZE; i++) {
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	60fb      	str	r3, [r7, #12]
 8004fb8:	e00c      	b.n	8004fd4 <add_magcal_data+0x28>
		if (!magcal.valid[i])
 8004fba:	4a2f      	ldr	r2, [pc, #188]	@ (8005078 <add_magcal_data+0xcc>)
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	4413      	add	r3, r2
 8004fc0:	f503 5391 	add.w	r3, r3, #4640	@ 0x1220
 8004fc4:	330a      	adds	r3, #10
 8004fc6:	f993 3000 	ldrsb.w	r3, [r3]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d007      	beq.n	8004fde <add_magcal_data+0x32>
	for (i = 0; i < MAGBUFFSIZE; i++) {
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	3301      	adds	r3, #1
 8004fd2:	60fb      	str	r3, [r7, #12]
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	f5b3 7f16 	cmp.w	r3, #600	@ 0x258
 8004fda:	dbee      	blt.n	8004fba <add_magcal_data+0xe>
 8004fdc:	e000      	b.n	8004fe0 <add_magcal_data+0x34>
			break;
 8004fde:	bf00      	nop
	}

	if (i >= MAGBUFFSIZE) {
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	f5b3 7f16 	cmp.w	r3, #600	@ 0x258
 8004fe6:	db18      	blt.n	800501a <add_magcal_data+0x6e>
		i = choose_discard_magcal();
 8004fe8:	f7ff fdd6 	bl	8004b98 <choose_discard_magcal>
 8004fec:	60f8      	str	r0, [r7, #12]
		if (i < 0 || i >= MAGBUFFSIZE) {
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	db03      	blt.n	8004ffc <add_magcal_data+0x50>
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	f5b3 7f16 	cmp.w	r3, #600	@ 0x258
 8004ffa:	db0e      	blt.n	800501a <add_magcal_data+0x6e>
			i = random() % MAGBUFFSIZE;
 8004ffc:	f00b fb6c 	bl	80106d8 <random>
 8005000:	4603      	mov	r3, r0
 8005002:	4a1e      	ldr	r2, [pc, #120]	@ (800507c <add_magcal_data+0xd0>)
 8005004:	fb82 1203 	smull	r1, r2, r2, r3
 8005008:	1191      	asrs	r1, r2, #6
 800500a:	17da      	asrs	r2, r3, #31
 800500c:	1a8a      	subs	r2, r1, r2
 800500e:	f44f 7116 	mov.w	r1, #600	@ 0x258
 8005012:	fb01 f202 	mul.w	r2, r1, r2
 8005016:	1a9b      	subs	r3, r3, r2
 8005018:	60fb      	str	r3, [r7, #12]
		}
	}

	// add it to the cal buffer
	magcal.BpFast[0][i] = data[0];
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	f9b3 1000 	ldrsh.w	r1, [r3]
 8005020:	4a15      	ldr	r2, [pc, #84]	@ (8005078 <add_magcal_data+0xcc>)
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	f503 7303 	add.w	r3, r3, #524	@ 0x20c
 8005028:	005b      	lsls	r3, r3, #1
 800502a:	4413      	add	r3, r2
 800502c:	460a      	mov	r2, r1
 800502e:	805a      	strh	r2, [r3, #2]
	magcal.BpFast[1][i] = data[1];
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	3302      	adds	r3, #2
 8005034:	f9b3 1000 	ldrsh.w	r1, [r3]
 8005038:	4a0f      	ldr	r2, [pc, #60]	@ (8005078 <add_magcal_data+0xcc>)
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	f203 4364 	addw	r3, r3, #1124	@ 0x464
 8005040:	005b      	lsls	r3, r3, #1
 8005042:	4413      	add	r3, r2
 8005044:	460a      	mov	r2, r1
 8005046:	805a      	strh	r2, [r3, #2]
	magcal.BpFast[2][i] = data[2];
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	3304      	adds	r3, #4
 800504c:	f9b3 1000 	ldrsh.w	r1, [r3]
 8005050:	4a09      	ldr	r2, [pc, #36]	@ (8005078 <add_magcal_data+0xcc>)
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	f203 63bc 	addw	r3, r3, #1724	@ 0x6bc
 8005058:	005b      	lsls	r3, r3, #1
 800505a:	4413      	add	r3, r2
 800505c:	460a      	mov	r2, r1
 800505e:	805a      	strh	r2, [r3, #2]
	magcal.valid[i] = 1;
 8005060:	4a05      	ldr	r2, [pc, #20]	@ (8005078 <add_magcal_data+0xcc>)
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	4413      	add	r3, r2
 8005066:	f503 5391 	add.w	r3, r3, #4640	@ 0x1220
 800506a:	330a      	adds	r3, #10
 800506c:	2201      	movs	r2, #1
 800506e:	701a      	strb	r2, [r3, #0]
}
 8005070:	bf00      	nop
 8005072:	3710      	adds	r7, #16
 8005074:	46bd      	mov	sp, r7
 8005076:	bd80      	pop	{r7, pc}
 8005078:	200004d8 	.word	0x200004d8
 800507c:	1b4e81b5 	.word	0x1b4e81b5

08005080 <process_imu_data>:

void process_imu_data(int16_t raw_magX, int16_t raw_magY, int16_t raw_magZ) {
 8005080:	b580      	push	{r7, lr}
 8005082:	b084      	sub	sp, #16
 8005084:	af00      	add	r7, sp, #0
 8005086:	4603      	mov	r3, r0
 8005088:	80fb      	strh	r3, [r7, #6]
 800508a:	460b      	mov	r3, r1
 800508c:	80bb      	strh	r3, [r7, #4]
 800508e:	4613      	mov	r3, r2
 8005090:	807b      	strh	r3, [r7, #2]
	mag_raw[0] = raw_magX;
 8005092:	88fa      	ldrh	r2, [r7, #6]
 8005094:	4b0f      	ldr	r3, [pc, #60]	@ (80050d4 <process_imu_data+0x54>)
 8005096:	801a      	strh	r2, [r3, #0]
	mag_raw[1] = raw_magY;
 8005098:	88ba      	ldrh	r2, [r7, #4]
 800509a:	4b0e      	ldr	r3, [pc, #56]	@ (80050d4 <process_imu_data+0x54>)
 800509c:	805a      	strh	r2, [r3, #2]
	mag_raw[2] = raw_magZ;
 800509e:	887a      	ldrh	r2, [r7, #2]
 80050a0:	4b0c      	ldr	r3, [pc, #48]	@ (80050d4 <process_imu_data+0x54>)
 80050a2:	809a      	strh	r2, [r3, #4]

	add_magcal_data(mag_raw);
 80050a4:	480b      	ldr	r0, [pc, #44]	@ (80050d4 <process_imu_data+0x54>)
 80050a6:	f7ff ff81 	bl	8004fac <add_magcal_data>

	// 즉시 calibration 시도
	static uint32_t last_cal_time = 0;
	uint32_t current_time = HAL_GetTick();
 80050aa:	f002 fd2b 	bl	8007b04 <HAL_GetTick>
 80050ae:	60f8      	str	r0, [r7, #12]

	if (current_time - last_cal_time >= 50) {
 80050b0:	4b09      	ldr	r3, [pc, #36]	@ (80050d8 <process_imu_data+0x58>)
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	68fa      	ldr	r2, [r7, #12]
 80050b6:	1ad3      	subs	r3, r2, r3
 80050b8:	2b31      	cmp	r3, #49	@ 0x31
 80050ba:	d907      	bls.n	80050cc <process_imu_data+0x4c>
		if (MagCal_Run()) {
 80050bc:	f7fc fdec 	bl	8001c98 <MagCal_Run>
 80050c0:	4603      	mov	r3, r0
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d002      	beq.n	80050cc <process_imu_data+0x4c>
			last_cal_time = current_time;
 80050c6:	4a04      	ldr	r2, [pc, #16]	@ (80050d8 <process_imu_data+0x58>)
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	6013      	str	r3, [r2, #0]
		}
	}
}
 80050cc:	bf00      	nop
 80050ce:	3710      	adds	r7, #16
 80050d0:	46bd      	mov	sp, r7
 80050d2:	bd80      	pop	{r7, pc}
 80050d4:	2000195c 	.word	0x2000195c
 80050d8:	200019c4 	.word	0x200019c4
 80050dc:	00000000 	.word	0x00000000

080050e0 <HAL_I2C_MemRxCpltCallback>:

void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c) {
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b08a      	sub	sp, #40	@ 0x28
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]

//	DAM_Callback_cnt++;

	if (hi2c->Instance == I2C1) {
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	4a82      	ldr	r2, [pc, #520]	@ (80052f8 <HAL_I2C_MemRxCpltCallback+0x218>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	f040 848d 	bne.w	8005a0e <HAL_I2C_MemRxCpltCallback+0x92e>
		if (CurrentSensor == GYRO_SENSOR) {
 80050f4:	4b81      	ldr	r3, [pc, #516]	@ (80052fc <HAL_I2C_MemRxCpltCallback+0x21c>)
 80050f6:	781b      	ldrb	r3, [r3, #0]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	f040 8129 	bne.w	8005350 <HAL_I2C_MemRxCpltCallback+0x270>
			gyroX = (int16_t) ((gyro_buffer[1] << 8) | gyro_buffer[0]);
 80050fe:	4b80      	ldr	r3, [pc, #512]	@ (8005300 <HAL_I2C_MemRxCpltCallback+0x220>)
 8005100:	785b      	ldrb	r3, [r3, #1]
 8005102:	021b      	lsls	r3, r3, #8
 8005104:	b21a      	sxth	r2, r3
 8005106:	4b7e      	ldr	r3, [pc, #504]	@ (8005300 <HAL_I2C_MemRxCpltCallback+0x220>)
 8005108:	781b      	ldrb	r3, [r3, #0]
 800510a:	b21b      	sxth	r3, r3
 800510c:	4313      	orrs	r3, r2
 800510e:	b21a      	sxth	r2, r3
 8005110:	4b7c      	ldr	r3, [pc, #496]	@ (8005304 <HAL_I2C_MemRxCpltCallback+0x224>)
 8005112:	801a      	strh	r2, [r3, #0]
			gyroY = (int16_t) ((gyro_buffer[3] << 8) | gyro_buffer[2]);
 8005114:	4b7a      	ldr	r3, [pc, #488]	@ (8005300 <HAL_I2C_MemRxCpltCallback+0x220>)
 8005116:	78db      	ldrb	r3, [r3, #3]
 8005118:	021b      	lsls	r3, r3, #8
 800511a:	b21a      	sxth	r2, r3
 800511c:	4b78      	ldr	r3, [pc, #480]	@ (8005300 <HAL_I2C_MemRxCpltCallback+0x220>)
 800511e:	789b      	ldrb	r3, [r3, #2]
 8005120:	b21b      	sxth	r3, r3
 8005122:	4313      	orrs	r3, r2
 8005124:	b21a      	sxth	r2, r3
 8005126:	4b78      	ldr	r3, [pc, #480]	@ (8005308 <HAL_I2C_MemRxCpltCallback+0x228>)
 8005128:	801a      	strh	r2, [r3, #0]
			gyroZ = (int16_t) ((gyro_buffer[5] << 8) | gyro_buffer[4]);
 800512a:	4b75      	ldr	r3, [pc, #468]	@ (8005300 <HAL_I2C_MemRxCpltCallback+0x220>)
 800512c:	795b      	ldrb	r3, [r3, #5]
 800512e:	021b      	lsls	r3, r3, #8
 8005130:	b21a      	sxth	r2, r3
 8005132:	4b73      	ldr	r3, [pc, #460]	@ (8005300 <HAL_I2C_MemRxCpltCallback+0x220>)
 8005134:	791b      	ldrb	r3, [r3, #4]
 8005136:	b21b      	sxth	r3, r3
 8005138:	4313      	orrs	r3, r2
 800513a:	b21a      	sxth	r2, r3
 800513c:	4b73      	ldr	r3, [pc, #460]	@ (800530c <HAL_I2C_MemRxCpltCallback+0x22c>)
 800513e:	801a      	strh	r2, [r3, #0]

			gyroX_current = gyroX * GYRO_SENSITIVITY_245DPS * DEG2RAD;
 8005140:	4b70      	ldr	r3, [pc, #448]	@ (8005304 <HAL_I2C_MemRxCpltCallback+0x224>)
 8005142:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005146:	ee07 3a90 	vmov	s15, r3
 800514a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800514e:	ed9f 7a70 	vldr	s14, [pc, #448]	@ 8005310 <HAL_I2C_MemRxCpltCallback+0x230>
 8005152:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005156:	ee17 0a90 	vmov	r0, s15
 800515a:	f7fb f9cd 	bl	80004f8 <__aeabi_f2d>
 800515e:	a364      	add	r3, pc, #400	@ (adr r3, 80052f0 <HAL_I2C_MemRxCpltCallback+0x210>)
 8005160:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005164:	f7fb fa20 	bl	80005a8 <__aeabi_dmul>
 8005168:	4602      	mov	r2, r0
 800516a:	460b      	mov	r3, r1
 800516c:	4610      	mov	r0, r2
 800516e:	4619      	mov	r1, r3
 8005170:	f7fb fcca 	bl	8000b08 <__aeabi_d2f>
 8005174:	4603      	mov	r3, r0
 8005176:	4a67      	ldr	r2, [pc, #412]	@ (8005314 <HAL_I2C_MemRxCpltCallback+0x234>)
 8005178:	6013      	str	r3, [r2, #0]
			gyroY_current = gyroY * GYRO_SENSITIVITY_245DPS * DEG2RAD;
 800517a:	4b63      	ldr	r3, [pc, #396]	@ (8005308 <HAL_I2C_MemRxCpltCallback+0x228>)
 800517c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005180:	ee07 3a90 	vmov	s15, r3
 8005184:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005188:	ed9f 7a61 	vldr	s14, [pc, #388]	@ 8005310 <HAL_I2C_MemRxCpltCallback+0x230>
 800518c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005190:	ee17 0a90 	vmov	r0, s15
 8005194:	f7fb f9b0 	bl	80004f8 <__aeabi_f2d>
 8005198:	a355      	add	r3, pc, #340	@ (adr r3, 80052f0 <HAL_I2C_MemRxCpltCallback+0x210>)
 800519a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800519e:	f7fb fa03 	bl	80005a8 <__aeabi_dmul>
 80051a2:	4602      	mov	r2, r0
 80051a4:	460b      	mov	r3, r1
 80051a6:	4610      	mov	r0, r2
 80051a8:	4619      	mov	r1, r3
 80051aa:	f7fb fcad 	bl	8000b08 <__aeabi_d2f>
 80051ae:	4603      	mov	r3, r0
 80051b0:	4a59      	ldr	r2, [pc, #356]	@ (8005318 <HAL_I2C_MemRxCpltCallback+0x238>)
 80051b2:	6013      	str	r3, [r2, #0]
			gyroZ_current = gyroZ * GYRO_SENSITIVITY_245DPS * DEG2RAD;
 80051b4:	4b55      	ldr	r3, [pc, #340]	@ (800530c <HAL_I2C_MemRxCpltCallback+0x22c>)
 80051b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80051ba:	ee07 3a90 	vmov	s15, r3
 80051be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80051c2:	ed9f 7a53 	vldr	s14, [pc, #332]	@ 8005310 <HAL_I2C_MemRxCpltCallback+0x230>
 80051c6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80051ca:	ee17 0a90 	vmov	r0, s15
 80051ce:	f7fb f993 	bl	80004f8 <__aeabi_f2d>
 80051d2:	a347      	add	r3, pc, #284	@ (adr r3, 80052f0 <HAL_I2C_MemRxCpltCallback+0x210>)
 80051d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051d8:	f7fb f9e6 	bl	80005a8 <__aeabi_dmul>
 80051dc:	4602      	mov	r2, r0
 80051de:	460b      	mov	r3, r1
 80051e0:	4610      	mov	r0, r2
 80051e2:	4619      	mov	r1, r3
 80051e4:	f7fb fc90 	bl	8000b08 <__aeabi_d2f>
 80051e8:	4603      	mov	r3, r0
 80051ea:	4a4c      	ldr	r2, [pc, #304]	@ (800531c <HAL_I2C_MemRxCpltCallback+0x23c>)
 80051ec:	6013      	str	r3, [r2, #0]

//			gyroX_current = gyroX * GYRO_SENSITIVITY_245DPS ;
//			gyroY_current = gyroY * GYRO_SENSITIVITY_245DPS ;
//			gyroZ_current = gyroZ * GYRO_SENSITIVITY_245DPS ;

			if (DAM_Callback_cnt < 1000) {
 80051ee:	4b4c      	ldr	r3, [pc, #304]	@ (8005320 <HAL_I2C_MemRxCpltCallback+0x240>)
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80051f6:	da26      	bge.n	8005246 <HAL_I2C_MemRxCpltCallback+0x166>

				gyroX_sum += gyroX_current;
 80051f8:	4b4a      	ldr	r3, [pc, #296]	@ (8005324 <HAL_I2C_MemRxCpltCallback+0x244>)
 80051fa:	ed93 7a00 	vldr	s14, [r3]
 80051fe:	4b45      	ldr	r3, [pc, #276]	@ (8005314 <HAL_I2C_MemRxCpltCallback+0x234>)
 8005200:	edd3 7a00 	vldr	s15, [r3]
 8005204:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005208:	4b46      	ldr	r3, [pc, #280]	@ (8005324 <HAL_I2C_MemRxCpltCallback+0x244>)
 800520a:	edc3 7a00 	vstr	s15, [r3]
				gyroY_sum += gyroY_current;
 800520e:	4b46      	ldr	r3, [pc, #280]	@ (8005328 <HAL_I2C_MemRxCpltCallback+0x248>)
 8005210:	ed93 7a00 	vldr	s14, [r3]
 8005214:	4b40      	ldr	r3, [pc, #256]	@ (8005318 <HAL_I2C_MemRxCpltCallback+0x238>)
 8005216:	edd3 7a00 	vldr	s15, [r3]
 800521a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800521e:	4b42      	ldr	r3, [pc, #264]	@ (8005328 <HAL_I2C_MemRxCpltCallback+0x248>)
 8005220:	edc3 7a00 	vstr	s15, [r3]
				gyroZ_sum += gyroZ_current;
 8005224:	4b41      	ldr	r3, [pc, #260]	@ (800532c <HAL_I2C_MemRxCpltCallback+0x24c>)
 8005226:	ed93 7a00 	vldr	s14, [r3]
 800522a:	4b3c      	ldr	r3, [pc, #240]	@ (800531c <HAL_I2C_MemRxCpltCallback+0x23c>)
 800522c:	edd3 7a00 	vldr	s15, [r3]
 8005230:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005234:	4b3d      	ldr	r3, [pc, #244]	@ (800532c <HAL_I2C_MemRxCpltCallback+0x24c>)
 8005236:	edc3 7a00 	vstr	s15, [r3]

				DAM_Callback_cnt++;
 800523a:	4b39      	ldr	r3, [pc, #228]	@ (8005320 <HAL_I2C_MemRxCpltCallback+0x240>)
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	3301      	adds	r3, #1
 8005240:	4a37      	ldr	r2, [pc, #220]	@ (8005320 <HAL_I2C_MemRxCpltCallback+0x240>)
 8005242:	6013      	str	r3, [r2, #0]
			} else {
				LSM9DS1_ReadMag_DMA();
			}
		}
	}
}
 8005244:	e3e3      	b.n	8005a0e <HAL_I2C_MemRxCpltCallback+0x92e>
				DAM_Callback_cnt = 10000;
 8005246:	4b36      	ldr	r3, [pc, #216]	@ (8005320 <HAL_I2C_MemRxCpltCallback+0x240>)
 8005248:	f242 7210 	movw	r2, #10000	@ 0x2710
 800524c:	601a      	str	r2, [r3, #0]
				gyroX_avg = gyroX_sum / 1000.0f;
 800524e:	4b35      	ldr	r3, [pc, #212]	@ (8005324 <HAL_I2C_MemRxCpltCallback+0x244>)
 8005250:	ed93 7a00 	vldr	s14, [r3]
 8005254:	eddf 6a36 	vldr	s13, [pc, #216]	@ 8005330 <HAL_I2C_MemRxCpltCallback+0x250>
 8005258:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800525c:	4b35      	ldr	r3, [pc, #212]	@ (8005334 <HAL_I2C_MemRxCpltCallback+0x254>)
 800525e:	edc3 7a00 	vstr	s15, [r3]
				gyroY_avg = gyroY_sum / 1000.0f;
 8005262:	4b31      	ldr	r3, [pc, #196]	@ (8005328 <HAL_I2C_MemRxCpltCallback+0x248>)
 8005264:	ed93 7a00 	vldr	s14, [r3]
 8005268:	eddf 6a31 	vldr	s13, [pc, #196]	@ 8005330 <HAL_I2C_MemRxCpltCallback+0x250>
 800526c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005270:	4b31      	ldr	r3, [pc, #196]	@ (8005338 <HAL_I2C_MemRxCpltCallback+0x258>)
 8005272:	edc3 7a00 	vstr	s15, [r3]
				gyroZ_avg = gyroZ_sum / 1000.0f;
 8005276:	4b2d      	ldr	r3, [pc, #180]	@ (800532c <HAL_I2C_MemRxCpltCallback+0x24c>)
 8005278:	ed93 7a00 	vldr	s14, [r3]
 800527c:	eddf 6a2c 	vldr	s13, [pc, #176]	@ 8005330 <HAL_I2C_MemRxCpltCallback+0x250>
 8005280:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005284:	4b2d      	ldr	r3, [pc, #180]	@ (800533c <HAL_I2C_MemRxCpltCallback+0x25c>)
 8005286:	edc3 7a00 	vstr	s15, [r3]
				gyro_x = gyroX_current - gyroX_avg;
 800528a:	4b22      	ldr	r3, [pc, #136]	@ (8005314 <HAL_I2C_MemRxCpltCallback+0x234>)
 800528c:	ed93 7a00 	vldr	s14, [r3]
 8005290:	4b28      	ldr	r3, [pc, #160]	@ (8005334 <HAL_I2C_MemRxCpltCallback+0x254>)
 8005292:	edd3 7a00 	vldr	s15, [r3]
 8005296:	ee77 7a67 	vsub.f32	s15, s14, s15
 800529a:	4b29      	ldr	r3, [pc, #164]	@ (8005340 <HAL_I2C_MemRxCpltCallback+0x260>)
 800529c:	edc3 7a00 	vstr	s15, [r3]
				gyro_y = gyroY_current - gyroY_avg;
 80052a0:	4b1d      	ldr	r3, [pc, #116]	@ (8005318 <HAL_I2C_MemRxCpltCallback+0x238>)
 80052a2:	ed93 7a00 	vldr	s14, [r3]
 80052a6:	4b24      	ldr	r3, [pc, #144]	@ (8005338 <HAL_I2C_MemRxCpltCallback+0x258>)
 80052a8:	edd3 7a00 	vldr	s15, [r3]
 80052ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80052b0:	4b24      	ldr	r3, [pc, #144]	@ (8005344 <HAL_I2C_MemRxCpltCallback+0x264>)
 80052b2:	edc3 7a00 	vstr	s15, [r3]
				gyro_z = gyroZ_current - gyroZ_avg;
 80052b6:	4b19      	ldr	r3, [pc, #100]	@ (800531c <HAL_I2C_MemRxCpltCallback+0x23c>)
 80052b8:	ed93 7a00 	vldr	s14, [r3]
 80052bc:	4b1f      	ldr	r3, [pc, #124]	@ (800533c <HAL_I2C_MemRxCpltCallback+0x25c>)
 80052be:	edd3 7a00 	vldr	s15, [r3]
 80052c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80052c6:	4b20      	ldr	r3, [pc, #128]	@ (8005348 <HAL_I2C_MemRxCpltCallback+0x268>)
 80052c8:	edc3 7a00 	vstr	s15, [r3]
				gxyz[0] = gyro_x;
 80052cc:	4b1c      	ldr	r3, [pc, #112]	@ (8005340 <HAL_I2C_MemRxCpltCallback+0x260>)
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	4a1e      	ldr	r2, [pc, #120]	@ (800534c <HAL_I2C_MemRxCpltCallback+0x26c>)
 80052d2:	6013      	str	r3, [r2, #0]
				gxyz[1] = gyro_y;
 80052d4:	4b1b      	ldr	r3, [pc, #108]	@ (8005344 <HAL_I2C_MemRxCpltCallback+0x264>)
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	4a1c      	ldr	r2, [pc, #112]	@ (800534c <HAL_I2C_MemRxCpltCallback+0x26c>)
 80052da:	6053      	str	r3, [r2, #4]
				gxyz[2] = gyro_z;
 80052dc:	4b1a      	ldr	r3, [pc, #104]	@ (8005348 <HAL_I2C_MemRxCpltCallback+0x268>)
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	4a1a      	ldr	r2, [pc, #104]	@ (800534c <HAL_I2C_MemRxCpltCallback+0x26c>)
 80052e2:	6093      	str	r3, [r2, #8]
				CurrentSensor = ACCEL_SENSOR;
 80052e4:	4b05      	ldr	r3, [pc, #20]	@ (80052fc <HAL_I2C_MemRxCpltCallback+0x21c>)
 80052e6:	2201      	movs	r2, #1
 80052e8:	701a      	strb	r2, [r3, #0]
				LSM9DS1_ReadAccel_DMA();
 80052ea:	f7ff fb67 	bl	80049bc <LSM9DS1_ReadAccel_DMA>
}
 80052ee:	e38e      	b.n	8005a0e <HAL_I2C_MemRxCpltCallback+0x92e>
 80052f0:	a2529d39 	.word	0xa2529d39
 80052f4:	3f91df46 	.word	0x3f91df46
 80052f8:	40005400 	.word	0x40005400
 80052fc:	200003c4 	.word	0x200003c4
 8005300:	20000354 	.word	0x20000354
 8005304:	2000036a 	.word	0x2000036a
 8005308:	2000036c 	.word	0x2000036c
 800530c:	2000036e 	.word	0x2000036e
 8005310:	3c0f5c29 	.word	0x3c0f5c29
 8005314:	200003ac 	.word	0x200003ac
 8005318:	200003b0 	.word	0x200003b0
 800531c:	200003b4 	.word	0x200003b4
 8005320:	200003c8 	.word	0x200003c8
 8005324:	20000394 	.word	0x20000394
 8005328:	20000398 	.word	0x20000398
 800532c:	2000039c 	.word	0x2000039c
 8005330:	447a0000 	.word	0x447a0000
 8005334:	200003a0 	.word	0x200003a0
 8005338:	200003a4 	.word	0x200003a4
 800533c:	200003a8 	.word	0x200003a8
 8005340:	20000388 	.word	0x20000388
 8005344:	2000038c 	.word	0x2000038c
 8005348:	20000390 	.word	0x20000390
 800534c:	2000048c 	.word	0x2000048c
		} else if (CurrentSensor == ACCEL_SENSOR) {
 8005350:	4b57      	ldr	r3, [pc, #348]	@ (80054b0 <HAL_I2C_MemRxCpltCallback+0x3d0>)
 8005352:	781b      	ldrb	r3, [r3, #0]
 8005354:	2b01      	cmp	r3, #1
 8005356:	f040 80c1 	bne.w	80054dc <HAL_I2C_MemRxCpltCallback+0x3fc>
			accelX = (int16_t) ((accel_buffer[1] << 8) | accel_buffer[0]);
 800535a:	4b56      	ldr	r3, [pc, #344]	@ (80054b4 <HAL_I2C_MemRxCpltCallback+0x3d4>)
 800535c:	785b      	ldrb	r3, [r3, #1]
 800535e:	021b      	lsls	r3, r3, #8
 8005360:	b21a      	sxth	r2, r3
 8005362:	4b54      	ldr	r3, [pc, #336]	@ (80054b4 <HAL_I2C_MemRxCpltCallback+0x3d4>)
 8005364:	781b      	ldrb	r3, [r3, #0]
 8005366:	b21b      	sxth	r3, r3
 8005368:	4313      	orrs	r3, r2
 800536a:	b21a      	sxth	r2, r3
 800536c:	4b52      	ldr	r3, [pc, #328]	@ (80054b8 <HAL_I2C_MemRxCpltCallback+0x3d8>)
 800536e:	801a      	strh	r2, [r3, #0]
			accelY = (int16_t) ((accel_buffer[3] << 8) | accel_buffer[2]);
 8005370:	4b50      	ldr	r3, [pc, #320]	@ (80054b4 <HAL_I2C_MemRxCpltCallback+0x3d4>)
 8005372:	78db      	ldrb	r3, [r3, #3]
 8005374:	021b      	lsls	r3, r3, #8
 8005376:	b21a      	sxth	r2, r3
 8005378:	4b4e      	ldr	r3, [pc, #312]	@ (80054b4 <HAL_I2C_MemRxCpltCallback+0x3d4>)
 800537a:	789b      	ldrb	r3, [r3, #2]
 800537c:	b21b      	sxth	r3, r3
 800537e:	4313      	orrs	r3, r2
 8005380:	b21a      	sxth	r2, r3
 8005382:	4b4e      	ldr	r3, [pc, #312]	@ (80054bc <HAL_I2C_MemRxCpltCallback+0x3dc>)
 8005384:	801a      	strh	r2, [r3, #0]
			accelZ = (int16_t) ((accel_buffer[5] << 8) | accel_buffer[4]);
 8005386:	4b4b      	ldr	r3, [pc, #300]	@ (80054b4 <HAL_I2C_MemRxCpltCallback+0x3d4>)
 8005388:	795b      	ldrb	r3, [r3, #5]
 800538a:	021b      	lsls	r3, r3, #8
 800538c:	b21a      	sxth	r2, r3
 800538e:	4b49      	ldr	r3, [pc, #292]	@ (80054b4 <HAL_I2C_MemRxCpltCallback+0x3d4>)
 8005390:	791b      	ldrb	r3, [r3, #4]
 8005392:	b21b      	sxth	r3, r3
 8005394:	4313      	orrs	r3, r2
 8005396:	b21a      	sxth	r2, r3
 8005398:	4b49      	ldr	r3, [pc, #292]	@ (80054c0 <HAL_I2C_MemRxCpltCallback+0x3e0>)
 800539a:	801a      	strh	r2, [r3, #0]
			accel_x = accelX * (2.0f * 9.81f / 32768.0f); // 2G = 2 * 9.81 m/s², 16비트 = 32768
 800539c:	4b46      	ldr	r3, [pc, #280]	@ (80054b8 <HAL_I2C_MemRxCpltCallback+0x3d8>)
 800539e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80053a2:	ee07 3a90 	vmov	s15, r3
 80053a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80053aa:	ed9f 7a46 	vldr	s14, [pc, #280]	@ 80054c4 <HAL_I2C_MemRxCpltCallback+0x3e4>
 80053ae:	ee67 7a87 	vmul.f32	s15, s15, s14
 80053b2:	4b45      	ldr	r3, [pc, #276]	@ (80054c8 <HAL_I2C_MemRxCpltCallback+0x3e8>)
 80053b4:	edc3 7a00 	vstr	s15, [r3]
			accel_y = accelY * (2.0f * 9.81f / 32768.0f);
 80053b8:	4b40      	ldr	r3, [pc, #256]	@ (80054bc <HAL_I2C_MemRxCpltCallback+0x3dc>)
 80053ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80053be:	ee07 3a90 	vmov	s15, r3
 80053c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80053c6:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 80054c4 <HAL_I2C_MemRxCpltCallback+0x3e4>
 80053ca:	ee67 7a87 	vmul.f32	s15, s15, s14
 80053ce:	4b3f      	ldr	r3, [pc, #252]	@ (80054cc <HAL_I2C_MemRxCpltCallback+0x3ec>)
 80053d0:	edc3 7a00 	vstr	s15, [r3]
			accel_z = accelZ * (2.0f * 9.81f / 32768.0f);
 80053d4:	4b3a      	ldr	r3, [pc, #232]	@ (80054c0 <HAL_I2C_MemRxCpltCallback+0x3e0>)
 80053d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80053da:	ee07 3a90 	vmov	s15, r3
 80053de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80053e2:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 80054c4 <HAL_I2C_MemRxCpltCallback+0x3e4>
 80053e6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80053ea:	4b39      	ldr	r3, [pc, #228]	@ (80054d0 <HAL_I2C_MemRxCpltCallback+0x3f0>)
 80053ec:	edc3 7a00 	vstr	s15, [r3]
			axyz[0] = accel_x;
 80053f0:	4b35      	ldr	r3, [pc, #212]	@ (80054c8 <HAL_I2C_MemRxCpltCallback+0x3e8>)
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	4a37      	ldr	r2, [pc, #220]	@ (80054d4 <HAL_I2C_MemRxCpltCallback+0x3f4>)
 80053f6:	6013      	str	r3, [r2, #0]
			axyz[1] = accel_y;
 80053f8:	4b34      	ldr	r3, [pc, #208]	@ (80054cc <HAL_I2C_MemRxCpltCallback+0x3ec>)
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	4a35      	ldr	r2, [pc, #212]	@ (80054d4 <HAL_I2C_MemRxCpltCallback+0x3f4>)
 80053fe:	6053      	str	r3, [r2, #4]
			axyz[2] = accel_z;
 8005400:	4b33      	ldr	r3, [pc, #204]	@ (80054d0 <HAL_I2C_MemRxCpltCallback+0x3f0>)
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	4a33      	ldr	r2, [pc, #204]	@ (80054d4 <HAL_I2C_MemRxCpltCallback+0x3f4>)
 8005406:	6093      	str	r3, [r2, #8]
			axyz2[0] = axyz[0];
 8005408:	4b32      	ldr	r3, [pc, #200]	@ (80054d4 <HAL_I2C_MemRxCpltCallback+0x3f4>)
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	4a32      	ldr	r2, [pc, #200]	@ (80054d8 <HAL_I2C_MemRxCpltCallback+0x3f8>)
 800540e:	6013      	str	r3, [r2, #0]
			axyz2[1] = axyz[1];
 8005410:	4b30      	ldr	r3, [pc, #192]	@ (80054d4 <HAL_I2C_MemRxCpltCallback+0x3f4>)
 8005412:	685b      	ldr	r3, [r3, #4]
 8005414:	4a30      	ldr	r2, [pc, #192]	@ (80054d8 <HAL_I2C_MemRxCpltCallback+0x3f8>)
 8005416:	6053      	str	r3, [r2, #4]
			axyz2[2] = axyz[2];
 8005418:	4b2e      	ldr	r3, [pc, #184]	@ (80054d4 <HAL_I2C_MemRxCpltCallback+0x3f4>)
 800541a:	689b      	ldr	r3, [r3, #8]
 800541c:	4a2e      	ldr	r2, [pc, #184]	@ (80054d8 <HAL_I2C_MemRxCpltCallback+0x3f8>)
 800541e:	6093      	str	r3, [r2, #8]
			axyz[0] = axyz[0] * 1 / 9.8;
 8005420:	4b2c      	ldr	r3, [pc, #176]	@ (80054d4 <HAL_I2C_MemRxCpltCallback+0x3f4>)
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	4618      	mov	r0, r3
 8005426:	f7fb f867 	bl	80004f8 <__aeabi_f2d>
 800542a:	a31f      	add	r3, pc, #124	@ (adr r3, 80054a8 <HAL_I2C_MemRxCpltCallback+0x3c8>)
 800542c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005430:	f7fb f9e4 	bl	80007fc <__aeabi_ddiv>
 8005434:	4602      	mov	r2, r0
 8005436:	460b      	mov	r3, r1
 8005438:	4610      	mov	r0, r2
 800543a:	4619      	mov	r1, r3
 800543c:	f7fb fb64 	bl	8000b08 <__aeabi_d2f>
 8005440:	4603      	mov	r3, r0
 8005442:	4a24      	ldr	r2, [pc, #144]	@ (80054d4 <HAL_I2C_MemRxCpltCallback+0x3f4>)
 8005444:	6013      	str	r3, [r2, #0]
			axyz[1] = axyz[1] * 1 / 9.8;
 8005446:	4b23      	ldr	r3, [pc, #140]	@ (80054d4 <HAL_I2C_MemRxCpltCallback+0x3f4>)
 8005448:	685b      	ldr	r3, [r3, #4]
 800544a:	4618      	mov	r0, r3
 800544c:	f7fb f854 	bl	80004f8 <__aeabi_f2d>
 8005450:	a315      	add	r3, pc, #84	@ (adr r3, 80054a8 <HAL_I2C_MemRxCpltCallback+0x3c8>)
 8005452:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005456:	f7fb f9d1 	bl	80007fc <__aeabi_ddiv>
 800545a:	4602      	mov	r2, r0
 800545c:	460b      	mov	r3, r1
 800545e:	4610      	mov	r0, r2
 8005460:	4619      	mov	r1, r3
 8005462:	f7fb fb51 	bl	8000b08 <__aeabi_d2f>
 8005466:	4603      	mov	r3, r0
 8005468:	4a1a      	ldr	r2, [pc, #104]	@ (80054d4 <HAL_I2C_MemRxCpltCallback+0x3f4>)
 800546a:	6053      	str	r3, [r2, #4]
			axyz[2] = axyz[2] * 1 / 9.8;
 800546c:	4b19      	ldr	r3, [pc, #100]	@ (80054d4 <HAL_I2C_MemRxCpltCallback+0x3f4>)
 800546e:	689b      	ldr	r3, [r3, #8]
 8005470:	4618      	mov	r0, r3
 8005472:	f7fb f841 	bl	80004f8 <__aeabi_f2d>
 8005476:	a30c      	add	r3, pc, #48	@ (adr r3, 80054a8 <HAL_I2C_MemRxCpltCallback+0x3c8>)
 8005478:	e9d3 2300 	ldrd	r2, r3, [r3]
 800547c:	f7fb f9be 	bl	80007fc <__aeabi_ddiv>
 8005480:	4602      	mov	r2, r0
 8005482:	460b      	mov	r3, r1
 8005484:	4610      	mov	r0, r2
 8005486:	4619      	mov	r1, r3
 8005488:	f7fb fb3e 	bl	8000b08 <__aeabi_d2f>
 800548c:	4603      	mov	r3, r0
 800548e:	4a11      	ldr	r2, [pc, #68]	@ (80054d4 <HAL_I2C_MemRxCpltCallback+0x3f4>)
 8005490:	6093      	str	r3, [r2, #8]
			vector_normalize(axyz);
 8005492:	4810      	ldr	r0, [pc, #64]	@ (80054d4 <HAL_I2C_MemRxCpltCallback+0x3f4>)
 8005494:	f7fe f986 	bl	80037a4 <vector_normalize>
			CurrentSensor = MAG_SENSOR;
 8005498:	4b05      	ldr	r3, [pc, #20]	@ (80054b0 <HAL_I2C_MemRxCpltCallback+0x3d0>)
 800549a:	2202      	movs	r2, #2
 800549c:	701a      	strb	r2, [r3, #0]
			LSM9DS1_ReadMag_DMA();
 800549e:	f7ff faa1 	bl	80049e4 <LSM9DS1_ReadMag_DMA>
}
 80054a2:	e2b4      	b.n	8005a0e <HAL_I2C_MemRxCpltCallback+0x92e>
 80054a4:	f3af 8000 	nop.w
 80054a8:	9999999a 	.word	0x9999999a
 80054ac:	40239999 	.word	0x40239999
 80054b0:	200003c4 	.word	0x200003c4
 80054b4:	2000035c 	.word	0x2000035c
 80054b8:	20000370 	.word	0x20000370
 80054bc:	20000372 	.word	0x20000372
 80054c0:	20000374 	.word	0x20000374
 80054c4:	3a1cf5c3 	.word	0x3a1cf5c3
 80054c8:	2000037c 	.word	0x2000037c
 80054cc:	20000380 	.word	0x20000380
 80054d0:	20000384 	.word	0x20000384
 80054d4:	200004a4 	.word	0x200004a4
 80054d8:	200004c8 	.word	0x200004c8
		} else if (CurrentSensor == MAG_SENSOR) {
 80054dc:	4bae      	ldr	r3, [pc, #696]	@ (8005798 <HAL_I2C_MemRxCpltCallback+0x6b8>)
 80054de:	781b      	ldrb	r3, [r3, #0]
 80054e0:	2b02      	cmp	r3, #2
 80054e2:	f040 8193 	bne.w	800580c <HAL_I2C_MemRxCpltCallback+0x72c>
			magX = (int16_t) ((mag_buffer[1] << 8) | mag_buffer[0]);
 80054e6:	4bad      	ldr	r3, [pc, #692]	@ (800579c <HAL_I2C_MemRxCpltCallback+0x6bc>)
 80054e8:	785b      	ldrb	r3, [r3, #1]
 80054ea:	021b      	lsls	r3, r3, #8
 80054ec:	b21a      	sxth	r2, r3
 80054ee:	4bab      	ldr	r3, [pc, #684]	@ (800579c <HAL_I2C_MemRxCpltCallback+0x6bc>)
 80054f0:	781b      	ldrb	r3, [r3, #0]
 80054f2:	b21b      	sxth	r3, r3
 80054f4:	4313      	orrs	r3, r2
 80054f6:	b21a      	sxth	r2, r3
 80054f8:	4ba9      	ldr	r3, [pc, #676]	@ (80057a0 <HAL_I2C_MemRxCpltCallback+0x6c0>)
 80054fa:	801a      	strh	r2, [r3, #0]
			magY = (int16_t) ((mag_buffer[3] << 8) | mag_buffer[2]);
 80054fc:	4ba7      	ldr	r3, [pc, #668]	@ (800579c <HAL_I2C_MemRxCpltCallback+0x6bc>)
 80054fe:	78db      	ldrb	r3, [r3, #3]
 8005500:	021b      	lsls	r3, r3, #8
 8005502:	b21a      	sxth	r2, r3
 8005504:	4ba5      	ldr	r3, [pc, #660]	@ (800579c <HAL_I2C_MemRxCpltCallback+0x6bc>)
 8005506:	789b      	ldrb	r3, [r3, #2]
 8005508:	b21b      	sxth	r3, r3
 800550a:	4313      	orrs	r3, r2
 800550c:	b21a      	sxth	r2, r3
 800550e:	4ba5      	ldr	r3, [pc, #660]	@ (80057a4 <HAL_I2C_MemRxCpltCallback+0x6c4>)
 8005510:	801a      	strh	r2, [r3, #0]
			magZ = (int16_t) ((mag_buffer[5] << 8) | mag_buffer[4]);
 8005512:	4ba2      	ldr	r3, [pc, #648]	@ (800579c <HAL_I2C_MemRxCpltCallback+0x6bc>)
 8005514:	795b      	ldrb	r3, [r3, #5]
 8005516:	021b      	lsls	r3, r3, #8
 8005518:	b21a      	sxth	r2, r3
 800551a:	4ba0      	ldr	r3, [pc, #640]	@ (800579c <HAL_I2C_MemRxCpltCallback+0x6bc>)
 800551c:	791b      	ldrb	r3, [r3, #4]
 800551e:	b21b      	sxth	r3, r3
 8005520:	4313      	orrs	r3, r2
 8005522:	b21a      	sxth	r2, r3
 8005524:	4ba0      	ldr	r3, [pc, #640]	@ (80057a8 <HAL_I2C_MemRxCpltCallback+0x6c8>)
 8005526:	801a      	strh	r2, [r3, #0]
			mag_x = magX * (4.0f / 32768.0f) * 100;  // uT
 8005528:	4b9d      	ldr	r3, [pc, #628]	@ (80057a0 <HAL_I2C_MemRxCpltCallback+0x6c0>)
 800552a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800552e:	ee07 3a90 	vmov	s15, r3
 8005532:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005536:	ed9f 7a9d 	vldr	s14, [pc, #628]	@ 80057ac <HAL_I2C_MemRxCpltCallback+0x6cc>
 800553a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800553e:	ed9f 7a9c 	vldr	s14, [pc, #624]	@ 80057b0 <HAL_I2C_MemRxCpltCallback+0x6d0>
 8005542:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005546:	4b9b      	ldr	r3, [pc, #620]	@ (80057b4 <HAL_I2C_MemRxCpltCallback+0x6d4>)
 8005548:	edc3 7a00 	vstr	s15, [r3]
			mag_y = magY * (4.0f / 32768.0f) * 100;  // uT
 800554c:	4b95      	ldr	r3, [pc, #596]	@ (80057a4 <HAL_I2C_MemRxCpltCallback+0x6c4>)
 800554e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005552:	ee07 3a90 	vmov	s15, r3
 8005556:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800555a:	ed9f 7a94 	vldr	s14, [pc, #592]	@ 80057ac <HAL_I2C_MemRxCpltCallback+0x6cc>
 800555e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005562:	ed9f 7a93 	vldr	s14, [pc, #588]	@ 80057b0 <HAL_I2C_MemRxCpltCallback+0x6d0>
 8005566:	ee67 7a87 	vmul.f32	s15, s15, s14
 800556a:	4b93      	ldr	r3, [pc, #588]	@ (80057b8 <HAL_I2C_MemRxCpltCallback+0x6d8>)
 800556c:	edc3 7a00 	vstr	s15, [r3]
			mag_z = magZ * (4.0f / 32768.0f) * 100;  // uT
 8005570:	4b8d      	ldr	r3, [pc, #564]	@ (80057a8 <HAL_I2C_MemRxCpltCallback+0x6c8>)
 8005572:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005576:	ee07 3a90 	vmov	s15, r3
 800557a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800557e:	ed9f 7a8b 	vldr	s14, [pc, #556]	@ 80057ac <HAL_I2C_MemRxCpltCallback+0x6cc>
 8005582:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005586:	ed9f 7a8a 	vldr	s14, [pc, #552]	@ 80057b0 <HAL_I2C_MemRxCpltCallback+0x6d0>
 800558a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800558e:	4b8b      	ldr	r3, [pc, #556]	@ (80057bc <HAL_I2C_MemRxCpltCallback+0x6dc>)
 8005590:	edc3 7a00 	vstr	s15, [r3]
			mx1 = mag_x - hardIron_x;
 8005594:	4b87      	ldr	r3, [pc, #540]	@ (80057b4 <HAL_I2C_MemRxCpltCallback+0x6d4>)
 8005596:	ed93 7a00 	vldr	s14, [r3]
 800559a:	4b89      	ldr	r3, [pc, #548]	@ (80057c0 <HAL_I2C_MemRxCpltCallback+0x6e0>)
 800559c:	edd3 7a00 	vldr	s15, [r3]
 80055a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80055a4:	4b87      	ldr	r3, [pc, #540]	@ (80057c4 <HAL_I2C_MemRxCpltCallback+0x6e4>)
 80055a6:	edc3 7a00 	vstr	s15, [r3]
			my1 = mag_y - hardIron_y;
 80055aa:	4b83      	ldr	r3, [pc, #524]	@ (80057b8 <HAL_I2C_MemRxCpltCallback+0x6d8>)
 80055ac:	ed93 7a00 	vldr	s14, [r3]
 80055b0:	4b85      	ldr	r3, [pc, #532]	@ (80057c8 <HAL_I2C_MemRxCpltCallback+0x6e8>)
 80055b2:	edd3 7a00 	vldr	s15, [r3]
 80055b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80055ba:	4b84      	ldr	r3, [pc, #528]	@ (80057cc <HAL_I2C_MemRxCpltCallback+0x6ec>)
 80055bc:	edc3 7a00 	vstr	s15, [r3]
			mz1 = mag_z - hardIron_z;
 80055c0:	4b7e      	ldr	r3, [pc, #504]	@ (80057bc <HAL_I2C_MemRxCpltCallback+0x6dc>)
 80055c2:	ed93 7a00 	vldr	s14, [r3]
 80055c6:	4b82      	ldr	r3, [pc, #520]	@ (80057d0 <HAL_I2C_MemRxCpltCallback+0x6f0>)
 80055c8:	edd3 7a00 	vldr	s15, [r3]
 80055cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80055d0:	4b80      	ldr	r3, [pc, #512]	@ (80057d4 <HAL_I2C_MemRxCpltCallback+0x6f4>)
 80055d2:	edc3 7a00 	vstr	s15, [r3]
			float corrected_V[] = { mx1, my1, mz1 };
 80055d6:	4b7b      	ldr	r3, [pc, #492]	@ (80057c4 <HAL_I2C_MemRxCpltCallback+0x6e4>)
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	617b      	str	r3, [r7, #20]
 80055dc:	4b7b      	ldr	r3, [pc, #492]	@ (80057cc <HAL_I2C_MemRxCpltCallback+0x6ec>)
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	61bb      	str	r3, [r7, #24]
 80055e2:	4b7c      	ldr	r3, [pc, #496]	@ (80057d4 <HAL_I2C_MemRxCpltCallback+0x6f4>)
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	61fb      	str	r3, [r7, #28]
			result_V[0] = corrected_V[0] * softIron_cali[0][0]
 80055e8:	ed97 7a05 	vldr	s14, [r7, #20]
 80055ec:	4b7a      	ldr	r3, [pc, #488]	@ (80057d8 <HAL_I2C_MemRxCpltCallback+0x6f8>)
 80055ee:	edd3 7a00 	vldr	s15, [r3]
 80055f2:	ee27 7a27 	vmul.f32	s14, s14, s15
					+ corrected_V[1] * softIron_cali[0][1]
 80055f6:	edd7 6a06 	vldr	s13, [r7, #24]
 80055fa:	4b77      	ldr	r3, [pc, #476]	@ (80057d8 <HAL_I2C_MemRxCpltCallback+0x6f8>)
 80055fc:	edd3 7a01 	vldr	s15, [r3, #4]
 8005600:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005604:	ee37 7a27 	vadd.f32	s14, s14, s15
					+ corrected_V[2] * softIron_cali[0][2];
 8005608:	edd7 6a07 	vldr	s13, [r7, #28]
 800560c:	4b72      	ldr	r3, [pc, #456]	@ (80057d8 <HAL_I2C_MemRxCpltCallback+0x6f8>)
 800560e:	edd3 7a02 	vldr	s15, [r3, #8]
 8005612:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005616:	ee77 7a27 	vadd.f32	s15, s14, s15
			result_V[0] = corrected_V[0] * softIron_cali[0][0]
 800561a:	edc7 7a02 	vstr	s15, [r7, #8]
			result_V[1] = corrected_V[0] * softIron_cali[1][0]
 800561e:	ed97 7a05 	vldr	s14, [r7, #20]
 8005622:	4b6d      	ldr	r3, [pc, #436]	@ (80057d8 <HAL_I2C_MemRxCpltCallback+0x6f8>)
 8005624:	edd3 7a03 	vldr	s15, [r3, #12]
 8005628:	ee27 7a27 	vmul.f32	s14, s14, s15
					+ corrected_V[1] * softIron_cali[1][1]
 800562c:	edd7 6a06 	vldr	s13, [r7, #24]
 8005630:	4b69      	ldr	r3, [pc, #420]	@ (80057d8 <HAL_I2C_MemRxCpltCallback+0x6f8>)
 8005632:	edd3 7a04 	vldr	s15, [r3, #16]
 8005636:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800563a:	ee37 7a27 	vadd.f32	s14, s14, s15
					+ corrected_V[2] * softIron_cali[1][2];
 800563e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005642:	4b65      	ldr	r3, [pc, #404]	@ (80057d8 <HAL_I2C_MemRxCpltCallback+0x6f8>)
 8005644:	edd3 7a05 	vldr	s15, [r3, #20]
 8005648:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800564c:	ee77 7a27 	vadd.f32	s15, s14, s15
			result_V[1] = corrected_V[0] * softIron_cali[1][0]
 8005650:	edc7 7a03 	vstr	s15, [r7, #12]
			result_V[2] = corrected_V[0] * softIron_cali[2][0]
 8005654:	ed97 7a05 	vldr	s14, [r7, #20]
 8005658:	4b5f      	ldr	r3, [pc, #380]	@ (80057d8 <HAL_I2C_MemRxCpltCallback+0x6f8>)
 800565a:	edd3 7a06 	vldr	s15, [r3, #24]
 800565e:	ee27 7a27 	vmul.f32	s14, s14, s15
					+ corrected_V[1] * softIron_cali[2][1]
 8005662:	edd7 6a06 	vldr	s13, [r7, #24]
 8005666:	4b5c      	ldr	r3, [pc, #368]	@ (80057d8 <HAL_I2C_MemRxCpltCallback+0x6f8>)
 8005668:	edd3 7a07 	vldr	s15, [r3, #28]
 800566c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005670:	ee37 7a27 	vadd.f32	s14, s14, s15
					+ corrected_V[2] * softIron_cali[2][2];
 8005674:	edd7 6a07 	vldr	s13, [r7, #28]
 8005678:	4b57      	ldr	r3, [pc, #348]	@ (80057d8 <HAL_I2C_MemRxCpltCallback+0x6f8>)
 800567a:	edd3 7a08 	vldr	s15, [r3, #32]
 800567e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005682:	ee77 7a27 	vadd.f32	s15, s14, s15
			result_V[2] = corrected_V[0] * softIron_cali[2][0]
 8005686:	edc7 7a04 	vstr	s15, [r7, #16]
			mx2 = result_V[0];
 800568a:	68bb      	ldr	r3, [r7, #8]
 800568c:	4a53      	ldr	r2, [pc, #332]	@ (80057dc <HAL_I2C_MemRxCpltCallback+0x6fc>)
 800568e:	6013      	str	r3, [r2, #0]
			my2 = result_V[1];
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	4a53      	ldr	r2, [pc, #332]	@ (80057e0 <HAL_I2C_MemRxCpltCallback+0x700>)
 8005694:	6013      	str	r3, [r2, #0]
			mz2 = result_V[2];
 8005696:	693b      	ldr	r3, [r7, #16]
 8005698:	4a52      	ldr	r2, [pc, #328]	@ (80057e4 <HAL_I2C_MemRxCpltCallback+0x704>)
 800569a:	6013      	str	r3, [r2, #0]
			mxyz[0] = mx2;
 800569c:	4b4f      	ldr	r3, [pc, #316]	@ (80057dc <HAL_I2C_MemRxCpltCallback+0x6fc>)
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	4a51      	ldr	r2, [pc, #324]	@ (80057e8 <HAL_I2C_MemRxCpltCallback+0x708>)
 80056a2:	6013      	str	r3, [r2, #0]
			mxyz[1] = my2;
 80056a4:	4b4e      	ldr	r3, [pc, #312]	@ (80057e0 <HAL_I2C_MemRxCpltCallback+0x700>)
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	4a4f      	ldr	r2, [pc, #316]	@ (80057e8 <HAL_I2C_MemRxCpltCallback+0x708>)
 80056aa:	6053      	str	r3, [r2, #4]
			mxyz[2] = mz2;
 80056ac:	4b4d      	ldr	r3, [pc, #308]	@ (80057e4 <HAL_I2C_MemRxCpltCallback+0x704>)
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	4a4d      	ldr	r2, [pc, #308]	@ (80057e8 <HAL_I2C_MemRxCpltCallback+0x708>)
 80056b2:	6093      	str	r3, [r2, #8]
			vector_normalize(mxyz);
 80056b4:	484c      	ldr	r0, [pc, #304]	@ (80057e8 <HAL_I2C_MemRxCpltCallback+0x708>)
 80056b6:	f7fe f875 	bl	80037a4 <vector_normalize>
			axyz1[0] = -axyz[0];
 80056ba:	4b4c      	ldr	r3, [pc, #304]	@ (80057ec <HAL_I2C_MemRxCpltCallback+0x70c>)
 80056bc:	edd3 7a00 	vldr	s15, [r3]
 80056c0:	eef1 7a67 	vneg.f32	s15, s15
 80056c4:	4b4a      	ldr	r3, [pc, #296]	@ (80057f0 <HAL_I2C_MemRxCpltCallback+0x710>)
 80056c6:	edc3 7a00 	vstr	s15, [r3]
			gxyz1[0] = -gxyz[0];
 80056ca:	4b4a      	ldr	r3, [pc, #296]	@ (80057f4 <HAL_I2C_MemRxCpltCallback+0x714>)
 80056cc:	edd3 7a00 	vldr	s15, [r3]
 80056d0:	eef1 7a67 	vneg.f32	s15, s15
 80056d4:	4b48      	ldr	r3, [pc, #288]	@ (80057f8 <HAL_I2C_MemRxCpltCallback+0x718>)
 80056d6:	edc3 7a00 	vstr	s15, [r3]
			Now = micros();
 80056da:	f7fd ffe9 	bl	80036b0 <micros>
 80056de:	4603      	mov	r3, r0
 80056e0:	4a46      	ldr	r2, [pc, #280]	@ (80057fc <HAL_I2C_MemRxCpltCallback+0x71c>)
 80056e2:	6013      	str	r3, [r2, #0]
			deltat = (Now - lastUpdate) * 1.0e-6 * 5.0f;;
 80056e4:	4b45      	ldr	r3, [pc, #276]	@ (80057fc <HAL_I2C_MemRxCpltCallback+0x71c>)
 80056e6:	681a      	ldr	r2, [r3, #0]
 80056e8:	4b45      	ldr	r3, [pc, #276]	@ (8005800 <HAL_I2C_MemRxCpltCallback+0x720>)
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	1ad3      	subs	r3, r2, r3
 80056ee:	4618      	mov	r0, r3
 80056f0:	f7fa fee0 	bl	80004b4 <__aeabi_ui2d>
 80056f4:	a326      	add	r3, pc, #152	@ (adr r3, 8005790 <HAL_I2C_MemRxCpltCallback+0x6b0>)
 80056f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056fa:	f7fa ff55 	bl	80005a8 <__aeabi_dmul>
 80056fe:	4602      	mov	r2, r0
 8005700:	460b      	mov	r3, r1
 8005702:	4610      	mov	r0, r2
 8005704:	4619      	mov	r1, r3
 8005706:	f04f 0200 	mov.w	r2, #0
 800570a:	4b3e      	ldr	r3, [pc, #248]	@ (8005804 <HAL_I2C_MemRxCpltCallback+0x724>)
 800570c:	f7fa ff4c 	bl	80005a8 <__aeabi_dmul>
 8005710:	4602      	mov	r2, r0
 8005712:	460b      	mov	r3, r1
 8005714:	4610      	mov	r0, r2
 8005716:	4619      	mov	r1, r3
 8005718:	f7fb f9f6 	bl	8000b08 <__aeabi_d2f>
 800571c:	4603      	mov	r3, r0
 800571e:	4a3a      	ldr	r2, [pc, #232]	@ (8005808 <HAL_I2C_MemRxCpltCallback+0x728>)
 8005720:	6013      	str	r3, [r2, #0]
			lastUpdate = Now;
 8005722:	4b36      	ldr	r3, [pc, #216]	@ (80057fc <HAL_I2C_MemRxCpltCallback+0x71c>)
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	4a36      	ldr	r2, [pc, #216]	@ (8005800 <HAL_I2C_MemRxCpltCallback+0x720>)
 8005728:	6013      	str	r3, [r2, #0]
			MadgwickAHRSupdate(gxyz1[0], gxyz[1], gxyz[2], axyz1[0], axyz[1],
 800572a:	4b33      	ldr	r3, [pc, #204]	@ (80057f8 <HAL_I2C_MemRxCpltCallback+0x718>)
 800572c:	edd3 7a00 	vldr	s15, [r3]
 8005730:	4b30      	ldr	r3, [pc, #192]	@ (80057f4 <HAL_I2C_MemRxCpltCallback+0x714>)
 8005732:	ed93 7a01 	vldr	s14, [r3, #4]
 8005736:	4b2f      	ldr	r3, [pc, #188]	@ (80057f4 <HAL_I2C_MemRxCpltCallback+0x714>)
 8005738:	edd3 6a02 	vldr	s13, [r3, #8]
 800573c:	4b2c      	ldr	r3, [pc, #176]	@ (80057f0 <HAL_I2C_MemRxCpltCallback+0x710>)
 800573e:	ed93 6a00 	vldr	s12, [r3]
 8005742:	4b2a      	ldr	r3, [pc, #168]	@ (80057ec <HAL_I2C_MemRxCpltCallback+0x70c>)
 8005744:	edd3 5a01 	vldr	s11, [r3, #4]
 8005748:	4b28      	ldr	r3, [pc, #160]	@ (80057ec <HAL_I2C_MemRxCpltCallback+0x70c>)
 800574a:	ed93 5a02 	vldr	s10, [r3, #8]
 800574e:	4b26      	ldr	r3, [pc, #152]	@ (80057e8 <HAL_I2C_MemRxCpltCallback+0x708>)
 8005750:	edd3 4a00 	vldr	s9, [r3]
 8005754:	4b24      	ldr	r3, [pc, #144]	@ (80057e8 <HAL_I2C_MemRxCpltCallback+0x708>)
 8005756:	edd3 3a01 	vldr	s7, [r3, #4]
 800575a:	4b23      	ldr	r3, [pc, #140]	@ (80057e8 <HAL_I2C_MemRxCpltCallback+0x708>)
 800575c:	ed93 4a02 	vldr	s8, [r3, #8]
 8005760:	eeb0 3a64 	vmov.f32	s6, s9
 8005764:	eef0 2a45 	vmov.f32	s5, s10
 8005768:	eeb0 2a65 	vmov.f32	s4, s11
 800576c:	eef0 1a46 	vmov.f32	s3, s12
 8005770:	eeb0 1a66 	vmov.f32	s2, s13
 8005774:	eef0 0a47 	vmov.f32	s1, s14
 8005778:	eeb0 0a67 	vmov.f32	s0, s15
 800577c:	f7fe f854 	bl	8003828 <MadgwickAHRSupdate>
			UTIL_SEQ_SetTask(1 << CFG_TASK_MY_TASK_BLE, CFG_SCH_PRIO_0);
 8005780:	2100      	movs	r1, #0
 8005782:	2004      	movs	r0, #4
 8005784:	f00a fe8c 	bl	80104a0 <UTIL_SEQ_SetTask>
			CurrentSensor = GYRO_SENSOR;
 8005788:	4b03      	ldr	r3, [pc, #12]	@ (8005798 <HAL_I2C_MemRxCpltCallback+0x6b8>)
 800578a:	2200      	movs	r2, #0
 800578c:	701a      	strb	r2, [r3, #0]
}
 800578e:	e13e      	b.n	8005a0e <HAL_I2C_MemRxCpltCallback+0x92e>
 8005790:	a0b5ed8d 	.word	0xa0b5ed8d
 8005794:	3eb0c6f7 	.word	0x3eb0c6f7
 8005798:	200003c4 	.word	0x200003c4
 800579c:	20000364 	.word	0x20000364
 80057a0:	20000376 	.word	0x20000376
 80057a4:	20000378 	.word	0x20000378
 80057a8:	2000037a 	.word	0x2000037a
 80057ac:	39000000 	.word	0x39000000
 80057b0:	42c80000 	.word	0x42c80000
 80057b4:	200003b8 	.word	0x200003b8
 80057b8:	200003bc 	.word	0x200003bc
 80057bc:	200003c0 	.word	0x200003c0
 80057c0:	20000010 	.word	0x20000010
 80057c4:	20000458 	.word	0x20000458
 80057c8:	20000014 	.word	0x20000014
 80057cc:	2000045c 	.word	0x2000045c
 80057d0:	20000018 	.word	0x20000018
 80057d4:	20000460 	.word	0x20000460
 80057d8:	2000001c 	.word	0x2000001c
 80057dc:	20000464 	.word	0x20000464
 80057e0:	20000468 	.word	0x20000468
 80057e4:	2000046c 	.word	0x2000046c
 80057e8:	200004bc 	.word	0x200004bc
 80057ec:	200004a4 	.word	0x200004a4
 80057f0:	200004b0 	.word	0x200004b0
 80057f4:	2000048c 	.word	0x2000048c
 80057f8:	20000498 	.word	0x20000498
 80057fc:	20000488 	.word	0x20000488
 8005800:	20000480 	.word	0x20000480
 8005804:	40140000 	.word	0x40140000
 8005808:	2000047c 	.word	0x2000047c
		} else if (CurrentSensor = MAG_SENSOR_CAL) {
 800580c:	4b84      	ldr	r3, [pc, #528]	@ (8005a20 <HAL_I2C_MemRxCpltCallback+0x940>)
 800580e:	2203      	movs	r2, #3
 8005810:	701a      	strb	r2, [r3, #0]
			DAM_Callback_cnt = 0;
 8005812:	4b84      	ldr	r3, [pc, #528]	@ (8005a24 <HAL_I2C_MemRxCpltCallback+0x944>)
 8005814:	2200      	movs	r2, #0
 8005816:	601a      	str	r2, [r3, #0]
			magX = (int16_t) ((mag_buffer[1] << 8) | mag_buffer[0]);
 8005818:	4b83      	ldr	r3, [pc, #524]	@ (8005a28 <HAL_I2C_MemRxCpltCallback+0x948>)
 800581a:	785b      	ldrb	r3, [r3, #1]
 800581c:	021b      	lsls	r3, r3, #8
 800581e:	b21a      	sxth	r2, r3
 8005820:	4b81      	ldr	r3, [pc, #516]	@ (8005a28 <HAL_I2C_MemRxCpltCallback+0x948>)
 8005822:	781b      	ldrb	r3, [r3, #0]
 8005824:	b21b      	sxth	r3, r3
 8005826:	4313      	orrs	r3, r2
 8005828:	b21a      	sxth	r2, r3
 800582a:	4b80      	ldr	r3, [pc, #512]	@ (8005a2c <HAL_I2C_MemRxCpltCallback+0x94c>)
 800582c:	801a      	strh	r2, [r3, #0]
			magY = (int16_t) ((mag_buffer[3] << 8) | mag_buffer[2]);
 800582e:	4b7e      	ldr	r3, [pc, #504]	@ (8005a28 <HAL_I2C_MemRxCpltCallback+0x948>)
 8005830:	78db      	ldrb	r3, [r3, #3]
 8005832:	021b      	lsls	r3, r3, #8
 8005834:	b21a      	sxth	r2, r3
 8005836:	4b7c      	ldr	r3, [pc, #496]	@ (8005a28 <HAL_I2C_MemRxCpltCallback+0x948>)
 8005838:	789b      	ldrb	r3, [r3, #2]
 800583a:	b21b      	sxth	r3, r3
 800583c:	4313      	orrs	r3, r2
 800583e:	b21a      	sxth	r2, r3
 8005840:	4b7b      	ldr	r3, [pc, #492]	@ (8005a30 <HAL_I2C_MemRxCpltCallback+0x950>)
 8005842:	801a      	strh	r2, [r3, #0]
			magZ = (int16_t) ((mag_buffer[5] << 8) | mag_buffer[4]);
 8005844:	4b78      	ldr	r3, [pc, #480]	@ (8005a28 <HAL_I2C_MemRxCpltCallback+0x948>)
 8005846:	795b      	ldrb	r3, [r3, #5]
 8005848:	021b      	lsls	r3, r3, #8
 800584a:	b21a      	sxth	r2, r3
 800584c:	4b76      	ldr	r3, [pc, #472]	@ (8005a28 <HAL_I2C_MemRxCpltCallback+0x948>)
 800584e:	791b      	ldrb	r3, [r3, #4]
 8005850:	b21b      	sxth	r3, r3
 8005852:	4313      	orrs	r3, r2
 8005854:	b21a      	sxth	r2, r3
 8005856:	4b77      	ldr	r3, [pc, #476]	@ (8005a34 <HAL_I2C_MemRxCpltCallback+0x954>)
 8005858:	801a      	strh	r2, [r3, #0]
			mag_x = magX * MAG_SENSITIVITY_4GAUSS;
 800585a:	4b74      	ldr	r3, [pc, #464]	@ (8005a2c <HAL_I2C_MemRxCpltCallback+0x94c>)
 800585c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005860:	ee07 3a90 	vmov	s15, r3
 8005864:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005868:	ed9f 7a73 	vldr	s14, [pc, #460]	@ 8005a38 <HAL_I2C_MemRxCpltCallback+0x958>
 800586c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005870:	4b72      	ldr	r3, [pc, #456]	@ (8005a3c <HAL_I2C_MemRxCpltCallback+0x95c>)
 8005872:	edc3 7a00 	vstr	s15, [r3]
			mag_y = magY * MAG_SENSITIVITY_4GAUSS;
 8005876:	4b6e      	ldr	r3, [pc, #440]	@ (8005a30 <HAL_I2C_MemRxCpltCallback+0x950>)
 8005878:	f9b3 3000 	ldrsh.w	r3, [r3]
 800587c:	ee07 3a90 	vmov	s15, r3
 8005880:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005884:	ed9f 7a6c 	vldr	s14, [pc, #432]	@ 8005a38 <HAL_I2C_MemRxCpltCallback+0x958>
 8005888:	ee67 7a87 	vmul.f32	s15, s15, s14
 800588c:	4b6c      	ldr	r3, [pc, #432]	@ (8005a40 <HAL_I2C_MemRxCpltCallback+0x960>)
 800588e:	edc3 7a00 	vstr	s15, [r3]
			mag_z = magZ * MAG_SENSITIVITY_4GAUSS;
 8005892:	4b68      	ldr	r3, [pc, #416]	@ (8005a34 <HAL_I2C_MemRxCpltCallback+0x954>)
 8005894:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005898:	ee07 3a90 	vmov	s15, r3
 800589c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80058a0:	ed9f 7a65 	vldr	s14, [pc, #404]	@ 8005a38 <HAL_I2C_MemRxCpltCallback+0x958>
 80058a4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80058a8:	4b66      	ldr	r3, [pc, #408]	@ (8005a44 <HAL_I2C_MemRxCpltCallback+0x964>)
 80058aa:	edc3 7a00 	vstr	s15, [r3]
			process_imu_data(mag_x, mag_y, mag_z);
 80058ae:	4b63      	ldr	r3, [pc, #396]	@ (8005a3c <HAL_I2C_MemRxCpltCallback+0x95c>)
 80058b0:	edd3 7a00 	vldr	s15, [r3]
 80058b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80058b8:	ee17 3a90 	vmov	r3, s15
 80058bc:	b21b      	sxth	r3, r3
 80058be:	4a60      	ldr	r2, [pc, #384]	@ (8005a40 <HAL_I2C_MemRxCpltCallback+0x960>)
 80058c0:	edd2 7a00 	vldr	s15, [r2]
 80058c4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80058c8:	ee17 2a90 	vmov	r2, s15
 80058cc:	b211      	sxth	r1, r2
 80058ce:	4a5d      	ldr	r2, [pc, #372]	@ (8005a44 <HAL_I2C_MemRxCpltCallback+0x964>)
 80058d0:	edd2 7a00 	vldr	s15, [r2]
 80058d4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80058d8:	ee17 2a90 	vmov	r2, s15
 80058dc:	b212      	sxth	r2, r2
 80058de:	4618      	mov	r0, r3
 80058e0:	f7ff fbce 	bl	8005080 <process_imu_data>
			magcal_counter++;
 80058e4:	4b58      	ldr	r3, [pc, #352]	@ (8005a48 <HAL_I2C_MemRxCpltCallback+0x968>)
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	3301      	adds	r3, #1
 80058ea:	4a57      	ldr	r2, [pc, #348]	@ (8005a48 <HAL_I2C_MemRxCpltCallback+0x968>)
 80058ec:	6013      	str	r3, [r2, #0]
			for (i = 0; i < MAGBUFFSIZE; i++) {
 80058ee:	4b57      	ldr	r3, [pc, #348]	@ (8005a4c <HAL_I2C_MemRxCpltCallback+0x96c>)
 80058f0:	2200      	movs	r2, #0
 80058f2:	601a      	str	r2, [r3, #0]
 80058f4:	e030      	b.n	8005958 <HAL_I2C_MemRxCpltCallback+0x878>
				if (magcal.valid[i]) {
 80058f6:	4b55      	ldr	r3, [pc, #340]	@ (8005a4c <HAL_I2C_MemRxCpltCallback+0x96c>)
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	4a55      	ldr	r2, [pc, #340]	@ (8005a50 <HAL_I2C_MemRxCpltCallback+0x970>)
 80058fc:	4413      	add	r3, r2
 80058fe:	f503 5391 	add.w	r3, r3, #4640	@ 0x1220
 8005902:	330a      	adds	r3, #10
 8005904:	f993 3000 	ldrsb.w	r3, [r3]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d020      	beq.n	800594e <HAL_I2C_MemRxCpltCallback+0x86e>
					apply_calibration(magcal.BpFast[0][i], magcal.BpFast[1][i],
 800590c:	4b4f      	ldr	r3, [pc, #316]	@ (8005a4c <HAL_I2C_MemRxCpltCallback+0x96c>)
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	4a4f      	ldr	r2, [pc, #316]	@ (8005a50 <HAL_I2C_MemRxCpltCallback+0x970>)
 8005912:	f503 7303 	add.w	r3, r3, #524	@ 0x20c
 8005916:	005b      	lsls	r3, r3, #1
 8005918:	4413      	add	r3, r2
 800591a:	f9b3 0002 	ldrsh.w	r0, [r3, #2]
 800591e:	4b4b      	ldr	r3, [pc, #300]	@ (8005a4c <HAL_I2C_MemRxCpltCallback+0x96c>)
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	4a4b      	ldr	r2, [pc, #300]	@ (8005a50 <HAL_I2C_MemRxCpltCallback+0x970>)
 8005924:	f203 4364 	addw	r3, r3, #1124	@ 0x464
 8005928:	005b      	lsls	r3, r3, #1
 800592a:	4413      	add	r3, r2
 800592c:	f9b3 1002 	ldrsh.w	r1, [r3, #2]
 8005930:	4b46      	ldr	r3, [pc, #280]	@ (8005a4c <HAL_I2C_MemRxCpltCallback+0x96c>)
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	4a46      	ldr	r2, [pc, #280]	@ (8005a50 <HAL_I2C_MemRxCpltCallback+0x970>)
 8005936:	f203 63bc 	addw	r3, r3, #1724	@ 0x6bc
 800593a:	005b      	lsls	r3, r3, #1
 800593c:	4413      	add	r3, r2
 800593e:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8005942:	4b44      	ldr	r3, [pc, #272]	@ (8005a54 <HAL_I2C_MemRxCpltCallback+0x974>)
 8005944:	f7ff f88c 	bl	8004a60 <apply_calibration>
					quality_update(&point);
 8005948:	4842      	ldr	r0, [pc, #264]	@ (8005a54 <HAL_I2C_MemRxCpltCallback+0x974>)
 800594a:	f001 fc53 	bl	80071f4 <quality_update>
			for (i = 0; i < MAGBUFFSIZE; i++) {
 800594e:	4b3f      	ldr	r3, [pc, #252]	@ (8005a4c <HAL_I2C_MemRxCpltCallback+0x96c>)
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	3301      	adds	r3, #1
 8005954:	4a3d      	ldr	r2, [pc, #244]	@ (8005a4c <HAL_I2C_MemRxCpltCallback+0x96c>)
 8005956:	6013      	str	r3, [r2, #0]
 8005958:	4b3c      	ldr	r3, [pc, #240]	@ (8005a4c <HAL_I2C_MemRxCpltCallback+0x96c>)
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f5b3 7f16 	cmp.w	r3, #600	@ 0x258
 8005960:	dbc9      	blt.n	80058f6 <HAL_I2C_MemRxCpltCallback+0x816>
			if (gaps <= 1.2 && magcal.FitError < 2.1) {
 8005962:	4b3d      	ldr	r3, [pc, #244]	@ (8005a58 <HAL_I2C_MemRxCpltCallback+0x978>)
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	4618      	mov	r0, r3
 8005968:	f7fa fdc6 	bl	80004f8 <__aeabi_f2d>
 800596c:	f04f 3233 	mov.w	r2, #858993459	@ 0x33333333
 8005970:	4b3a      	ldr	r3, [pc, #232]	@ (8005a5c <HAL_I2C_MemRxCpltCallback+0x97c>)
 8005972:	f7fb f895 	bl	8000aa0 <__aeabi_dcmple>
 8005976:	4603      	mov	r3, r0
 8005978:	2b00      	cmp	r3, #0
 800597a:	d046      	beq.n	8005a0a <HAL_I2C_MemRxCpltCallback+0x92a>
 800597c:	4b34      	ldr	r3, [pc, #208]	@ (8005a50 <HAL_I2C_MemRxCpltCallback+0x970>)
 800597e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005980:	4618      	mov	r0, r3
 8005982:	f7fa fdb9 	bl	80004f8 <__aeabi_f2d>
 8005986:	a324      	add	r3, pc, #144	@ (adr r3, 8005a18 <HAL_I2C_MemRxCpltCallback+0x938>)
 8005988:	e9d3 2300 	ldrd	r2, r3, [r3]
 800598c:	f7fb f87e 	bl	8000a8c <__aeabi_dcmplt>
 8005990:	4603      	mov	r3, r0
 8005992:	2b00      	cmp	r3, #0
 8005994:	d039      	beq.n	8005a0a <HAL_I2C_MemRxCpltCallback+0x92a>
				hardIron_x = magcal.V[0];
 8005996:	4b2e      	ldr	r3, [pc, #184]	@ (8005a50 <HAL_I2C_MemRxCpltCallback+0x970>)
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	4a31      	ldr	r2, [pc, #196]	@ (8005a60 <HAL_I2C_MemRxCpltCallback+0x980>)
 800599c:	6013      	str	r3, [r2, #0]
				hardIron_y = magcal.V[1];
 800599e:	4b2c      	ldr	r3, [pc, #176]	@ (8005a50 <HAL_I2C_MemRxCpltCallback+0x970>)
 80059a0:	685b      	ldr	r3, [r3, #4]
 80059a2:	4a30      	ldr	r2, [pc, #192]	@ (8005a64 <HAL_I2C_MemRxCpltCallback+0x984>)
 80059a4:	6013      	str	r3, [r2, #0]
				hardIron_z = magcal.V[2];
 80059a6:	4b2a      	ldr	r3, [pc, #168]	@ (8005a50 <HAL_I2C_MemRxCpltCallback+0x970>)
 80059a8:	689b      	ldr	r3, [r3, #8]
 80059aa:	4a2f      	ldr	r2, [pc, #188]	@ (8005a68 <HAL_I2C_MemRxCpltCallback+0x988>)
 80059ac:	6013      	str	r3, [r2, #0]
				for (int i = 0; i < 3; i++) {
 80059ae:	2300      	movs	r3, #0
 80059b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80059b2:	e021      	b.n	80059f8 <HAL_I2C_MemRxCpltCallback+0x918>
					for (int j = 0; j < 3; j++) {
 80059b4:	2300      	movs	r3, #0
 80059b6:	623b      	str	r3, [r7, #32]
 80059b8:	e018      	b.n	80059ec <HAL_I2C_MemRxCpltCallback+0x90c>
						softIron_cali[i][j] = magcal.invW[i][j];
 80059ba:	4925      	ldr	r1, [pc, #148]	@ (8005a50 <HAL_I2C_MemRxCpltCallback+0x970>)
 80059bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80059be:	4613      	mov	r3, r2
 80059c0:	005b      	lsls	r3, r3, #1
 80059c2:	4413      	add	r3, r2
 80059c4:	6a3a      	ldr	r2, [r7, #32]
 80059c6:	4413      	add	r3, r2
 80059c8:	3302      	adds	r3, #2
 80059ca:	009b      	lsls	r3, r3, #2
 80059cc:	440b      	add	r3, r1
 80059ce:	3304      	adds	r3, #4
 80059d0:	6819      	ldr	r1, [r3, #0]
 80059d2:	4826      	ldr	r0, [pc, #152]	@ (8005a6c <HAL_I2C_MemRxCpltCallback+0x98c>)
 80059d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80059d6:	4613      	mov	r3, r2
 80059d8:	005b      	lsls	r3, r3, #1
 80059da:	4413      	add	r3, r2
 80059dc:	6a3a      	ldr	r2, [r7, #32]
 80059de:	4413      	add	r3, r2
 80059e0:	009b      	lsls	r3, r3, #2
 80059e2:	4403      	add	r3, r0
 80059e4:	6019      	str	r1, [r3, #0]
					for (int j = 0; j < 3; j++) {
 80059e6:	6a3b      	ldr	r3, [r7, #32]
 80059e8:	3301      	adds	r3, #1
 80059ea:	623b      	str	r3, [r7, #32]
 80059ec:	6a3b      	ldr	r3, [r7, #32]
 80059ee:	2b02      	cmp	r3, #2
 80059f0:	dde3      	ble.n	80059ba <HAL_I2C_MemRxCpltCallback+0x8da>
				for (int i = 0; i < 3; i++) {
 80059f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059f4:	3301      	adds	r3, #1
 80059f6:	627b      	str	r3, [r7, #36]	@ 0x24
 80059f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059fa:	2b02      	cmp	r3, #2
 80059fc:	ddda      	ble.n	80059b4 <HAL_I2C_MemRxCpltCallback+0x8d4>
				CurrentSensor = GYRO_SENSOR;
 80059fe:	4b08      	ldr	r3, [pc, #32]	@ (8005a20 <HAL_I2C_MemRxCpltCallback+0x940>)
 8005a00:	2200      	movs	r2, #0
 8005a02:	701a      	strb	r2, [r3, #0]
				LSM9DS1_ReadGyro_DMA();
 8005a04:	f7fe ffc6 	bl	8004994 <LSM9DS1_ReadGyro_DMA>
}
 8005a08:	e001      	b.n	8005a0e <HAL_I2C_MemRxCpltCallback+0x92e>
				LSM9DS1_ReadMag_DMA();
 8005a0a:	f7fe ffeb 	bl	80049e4 <LSM9DS1_ReadMag_DMA>
}
 8005a0e:	bf00      	nop
 8005a10:	3728      	adds	r7, #40	@ 0x28
 8005a12:	46bd      	mov	sp, r7
 8005a14:	bd80      	pop	{r7, pc}
 8005a16:	bf00      	nop
 8005a18:	cccccccd 	.word	0xcccccccd
 8005a1c:	4000cccc 	.word	0x4000cccc
 8005a20:	200003c4 	.word	0x200003c4
 8005a24:	200003c8 	.word	0x200003c8
 8005a28:	20000364 	.word	0x20000364
 8005a2c:	20000376 	.word	0x20000376
 8005a30:	20000378 	.word	0x20000378
 8005a34:	2000037a 	.word	0x2000037a
 8005a38:	3e0f5c29 	.word	0x3e0f5c29
 8005a3c:	200003b8 	.word	0x200003b8
 8005a40:	200003bc 	.word	0x200003bc
 8005a44:	200003c0 	.word	0x200003c0
 8005a48:	200004d4 	.word	0x200004d4
 8005a4c:	20001994 	.word	0x20001994
 8005a50:	200004d8 	.word	0x200004d8
 8005a54:	200019a0 	.word	0x200019a0
 8005a58:	20000048 	.word	0x20000048
 8005a5c:	3ff33333 	.word	0x3ff33333
 8005a60:	20000010 	.word	0x20000010
 8005a64:	20000014 	.word	0x20000014
 8005a68:	20000018 	.word	0x20000018
 8005a6c:	2000001c 	.word	0x2000001c

08005a70 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */

int main(void) {
 8005a70:	b580      	push	{r7, lr}
 8005a72:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8005a74:	f001 ffd8 	bl	8007a28 <HAL_Init>
	/* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
	MX_APPE_Config();
 8005a78:	f7fb f96a 	bl	8000d50 <MX_APPE_Config>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8005a7c:	f000 f82c 	bl	8005ad8 <SystemClock_Config>

	/* Configure the peripherals common clocks */
	PeriphCommonClock_Config();
 8005a80:	f000 f88c 	bl	8005b9c <PeriphCommonClock_Config>

	/* IPCC initialisation */
	MX_IPCC_Init();
 8005a84:	f000 f8ea 	bl	8005c5c <MX_IPCC_Init>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8005a88:	f000 f9a0 	bl	8005dcc <MX_GPIO_Init>
	MX_DMA_Init();
 8005a8c:	f000 f984 	bl	8005d98 <MX_DMA_Init>
	MX_I2C1_Init();
 8005a90:	f000 f8a4 	bl	8005bdc <MX_I2C1_Init>
	MX_RTC_Init();
 8005a94:	f000 f8fe 	bl	8005c94 <MX_RTC_Init>
	MX_TIM2_Init();
 8005a98:	f000 f930 	bl	8005cfc <MX_TIM2_Init>
	MX_RF_Init();
 8005a9c:	f000 f8f2 	bl	8005c84 <MX_RF_Init>
	/* USER CODE BEGIN 2 */

	/* USER CODE END 2 */

	/* Init code for STM32_WPAN */
	MX_APPE_Init();
 8005aa0:	f7fb f964 	bl	8000d6c <MX_APPE_Init>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	LSM9DS1_Init();
 8005aa4:	f7fd fdd0 	bl	8003648 <LSM9DS1_Init>
	HAL_Delay(10);
 8005aa8:	200a      	movs	r0, #10
 8005aaa:	f7fb fa8c 	bl	8000fc6 <HAL_Delay>

	HAL_TIM_Base_Start(&htim2);
 8005aae:	4808      	ldr	r0, [pc, #32]	@ (8005ad0 <main+0x60>)
 8005ab0:	f006 ff18 	bl	800c8e4 <HAL_TIM_Base_Start>

	magcal_Init();
 8005ab4:	f7fe ffaa 	bl	8004a0c <magcal_Init>

	while (1) {

		/* USER CODE END WHILE */
		MX_APPE_Process();
 8005ab8:	f7fb faaa 	bl	8001010 <MX_APPE_Process>

		/* USER CODE BEGIN 3 */

		//low_power_code
		if (CurrentSensor == MAG_SENSOR_CAL) {
 8005abc:	4b05      	ldr	r3, [pc, #20]	@ (8005ad4 <main+0x64>)
 8005abe:	781b      	ldrb	r3, [r3, #0]
 8005ac0:	2b03      	cmp	r3, #3
 8005ac2:	d102      	bne.n	8005aca <main+0x5a>
			LSM9DS1_ReadMag_DMA();
 8005ac4:	f7fe ff8e 	bl	80049e4 <LSM9DS1_ReadMag_DMA>
 8005ac8:	e7f6      	b.n	8005ab8 <main+0x48>
		} else {
			LSM9DS1_ReadGyro_DMA();
 8005aca:	f7fe ff63 	bl	8004994 <LSM9DS1_ReadGyro_DMA>
		MX_APPE_Process();
 8005ace:	e7f3      	b.n	8005ab8 <main+0x48>
 8005ad0:	20000308 	.word	0x20000308
 8005ad4:	200003c4 	.word	0x200003c4

08005ad8 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	b09a      	sub	sp, #104	@ 0x68
 8005adc:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8005ade:	f107 0320 	add.w	r3, r7, #32
 8005ae2:	2248      	movs	r2, #72	@ 0x48
 8005ae4:	2100      	movs	r1, #0
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	f00a ff39 	bl	801095e <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8005aec:	1d3b      	adds	r3, r7, #4
 8005aee:	2200      	movs	r2, #0
 8005af0:	601a      	str	r2, [r3, #0]
 8005af2:	605a      	str	r2, [r3, #4]
 8005af4:	609a      	str	r2, [r3, #8]
 8005af6:	60da      	str	r2, [r3, #12]
 8005af8:	611a      	str	r2, [r3, #16]
 8005afa:	615a      	str	r2, [r3, #20]
 8005afc:	619a      	str	r2, [r3, #24]

	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess();
 8005afe:	f004 ff55 	bl	800a9ac <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMHIGH);
 8005b02:	2010      	movs	r0, #16
 8005b04:	f7fd fd3a 	bl	800357c <LL_RCC_LSE_SetDriveCapability>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005b08:	4b23      	ldr	r3, [pc, #140]	@ (8005b98 <SystemClock_Config+0xc0>)
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005b10:	4a21      	ldr	r2, [pc, #132]	@ (8005b98 <SystemClock_Config+0xc0>)
 8005b12:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005b16:	6013      	str	r3, [r2, #0]
 8005b18:	4b1f      	ldr	r3, [pc, #124]	@ (8005b98 <SystemClock_Config+0xc0>)
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005b20:	603b      	str	r3, [r7, #0]
 8005b22:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI
 8005b24:	2327      	movs	r3, #39	@ 0x27
 8005b26:	623b      	str	r3, [r7, #32]
			| RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_LSE
			| RCC_OSCILLATORTYPE_MSI;
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005b28:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8005b2c:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8005b2e:	2301      	movs	r3, #1
 8005b30:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8005b32:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005b36:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8005b38:	2301      	movs	r3, #1
 8005b3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8005b3c:	2340      	movs	r3, #64	@ 0x40
 8005b3e:	633b      	str	r3, [r7, #48]	@ 0x30
	RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8005b40:	2300      	movs	r3, #0
 8005b42:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_10;
 8005b44:	23a0      	movs	r3, #160	@ 0xa0
 8005b46:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8005b48:	2300      	movs	r3, #0
 8005b4a:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8005b4c:	f107 0320 	add.w	r3, r7, #32
 8005b50:	4618      	mov	r0, r3
 8005b52:	f005 faa7 	bl	800b0a4 <HAL_RCC_OscConfig>
 8005b56:	4603      	mov	r3, r0
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d001      	beq.n	8005b60 <SystemClock_Config+0x88>
		Error_Handler();
 8005b5c:	f000 f9b2 	bl	8005ec4 <Error_Handler>
	}

	/** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4 | RCC_CLOCKTYPE_HCLK2
 8005b60:	236f      	movs	r3, #111	@ 0x6f
 8005b62:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1
			| RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8005b64:	2300      	movs	r3, #0
 8005b66:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005b68:	2300      	movs	r3, #0
 8005b6a:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8005b6c:	2300      	movs	r3, #0
 8005b6e:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005b70:	2300      	movs	r3, #0
 8005b72:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8005b74:	2300      	movs	r3, #0
 8005b76:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8005b78:	2300      	movs	r3, #0
 8005b7a:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 8005b7c:	1d3b      	adds	r3, r7, #4
 8005b7e:	2101      	movs	r1, #1
 8005b80:	4618      	mov	r0, r3
 8005b82:	f005 fe03 	bl	800b78c <HAL_RCC_ClockConfig>
 8005b86:	4603      	mov	r3, r0
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d001      	beq.n	8005b90 <SystemClock_Config+0xb8>
		Error_Handler();
 8005b8c:	f000 f99a 	bl	8005ec4 <Error_Handler>
	}
}
 8005b90:	bf00      	nop
 8005b92:	3768      	adds	r7, #104	@ 0x68
 8005b94:	46bd      	mov	sp, r7
 8005b96:	bd80      	pop	{r7, pc}
 8005b98:	58000400 	.word	0x58000400

08005b9c <PeriphCommonClock_Config>:

/**
 * @brief Peripherals Common Clock Configuration
 * @retval None
 */
void PeriphCommonClock_Config(void) {
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	b094      	sub	sp, #80	@ 0x50
 8005ba0:	af00      	add	r7, sp, #0
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 8005ba2:	463b      	mov	r3, r7
 8005ba4:	2250      	movs	r2, #80	@ 0x50
 8005ba6:	2100      	movs	r1, #0
 8005ba8:	4618      	mov	r0, r3
 8005baa:	f00a fed8 	bl	801095e <memset>

	/** Initializes the peripherals clock
	 */
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS
 8005bae:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8005bb2:	603b      	str	r3, [r7, #0]
			| RCC_PERIPHCLK_RFWAKEUP;
	PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 8005bb4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005bb8:	647b      	str	r3, [r7, #68]	@ 0x44
	PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8005bba:	2300      	movs	r3, #0
 8005bbc:	64bb      	str	r3, [r7, #72]	@ 0x48
	PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	64fb      	str	r3, [r7, #76]	@ 0x4c

	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 8005bc2:	463b      	mov	r3, r7
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	f006 f9f2 	bl	800bfae <HAL_RCCEx_PeriphCLKConfig>
 8005bca:	4603      	mov	r3, r0
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d001      	beq.n	8005bd4 <PeriphCommonClock_Config+0x38>
		Error_Handler();
 8005bd0:	f000 f978 	bl	8005ec4 <Error_Handler>
	}
	/* USER CODE BEGIN Smps */

	/* USER CODE END Smps */
}
 8005bd4:	bf00      	nop
 8005bd6:	3750      	adds	r7, #80	@ 0x50
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	bd80      	pop	{r7, pc}

08005bdc <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8005be0:	4b1b      	ldr	r3, [pc, #108]	@ (8005c50 <MX_I2C1_Init+0x74>)
 8005be2:	4a1c      	ldr	r2, [pc, #112]	@ (8005c54 <MX_I2C1_Init+0x78>)
 8005be4:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x00B07CB4;
 8005be6:	4b1a      	ldr	r3, [pc, #104]	@ (8005c50 <MX_I2C1_Init+0x74>)
 8005be8:	4a1b      	ldr	r2, [pc, #108]	@ (8005c58 <MX_I2C1_Init+0x7c>)
 8005bea:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0;
 8005bec:	4b18      	ldr	r3, [pc, #96]	@ (8005c50 <MX_I2C1_Init+0x74>)
 8005bee:	2200      	movs	r2, #0
 8005bf0:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005bf2:	4b17      	ldr	r3, [pc, #92]	@ (8005c50 <MX_I2C1_Init+0x74>)
 8005bf4:	2201      	movs	r2, #1
 8005bf6:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005bf8:	4b15      	ldr	r3, [pc, #84]	@ (8005c50 <MX_I2C1_Init+0x74>)
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 8005bfe:	4b14      	ldr	r3, [pc, #80]	@ (8005c50 <MX_I2C1_Init+0x74>)
 8005c00:	2200      	movs	r2, #0
 8005c02:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8005c04:	4b12      	ldr	r3, [pc, #72]	@ (8005c50 <MX_I2C1_Init+0x74>)
 8005c06:	2200      	movs	r2, #0
 8005c08:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005c0a:	4b11      	ldr	r3, [pc, #68]	@ (8005c50 <MX_I2C1_Init+0x74>)
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005c10:	4b0f      	ldr	r3, [pc, #60]	@ (8005c50 <MX_I2C1_Init+0x74>)
 8005c12:	2200      	movs	r2, #0
 8005c14:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8005c16:	480e      	ldr	r0, [pc, #56]	@ (8005c50 <MX_I2C1_Init+0x74>)
 8005c18:	f002 fdda 	bl	80087d0 <HAL_I2C_Init>
 8005c1c:	4603      	mov	r3, r0
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d001      	beq.n	8005c26 <MX_I2C1_Init+0x4a>
		Error_Handler();
 8005c22:	f000 f94f 	bl	8005ec4 <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE)
 8005c26:	2100      	movs	r1, #0
 8005c28:	4809      	ldr	r0, [pc, #36]	@ (8005c50 <MX_I2C1_Init+0x74>)
 8005c2a:	f004 fda1 	bl	800a770 <HAL_I2CEx_ConfigAnalogFilter>
 8005c2e:	4603      	mov	r3, r0
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d001      	beq.n	8005c38 <MX_I2C1_Init+0x5c>
			!= HAL_OK) {
		Error_Handler();
 8005c34:	f000 f946 	bl	8005ec4 <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK) {
 8005c38:	2100      	movs	r1, #0
 8005c3a:	4805      	ldr	r0, [pc, #20]	@ (8005c50 <MX_I2C1_Init+0x74>)
 8005c3c:	f004 fde3 	bl	800a806 <HAL_I2CEx_ConfigDigitalFilter>
 8005c40:	4603      	mov	r3, r0
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d001      	beq.n	8005c4a <MX_I2C1_Init+0x6e>
		Error_Handler();
 8005c46:	f000 f93d 	bl	8005ec4 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */
//	__HAL_LINKDMA(&hi2c1, hdmarx, hdma_i2c1_rx);
	/* USER CODE END I2C1_Init 2 */

}
 8005c4a:	bf00      	nop
 8005c4c:	bd80      	pop	{r7, pc}
 8005c4e:	bf00      	nop
 8005c50:	200001f4 	.word	0x200001f4
 8005c54:	40005400 	.word	0x40005400
 8005c58:	00b07cb4 	.word	0x00b07cb4

08005c5c <MX_IPCC_Init>:
/**
 * @brief IPCC Initialization Function
 * @param None
 * @retval None
 */
static void MX_IPCC_Init(void) {
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	af00      	add	r7, sp, #0
	/* USER CODE END IPCC_Init 0 */

	/* USER CODE BEGIN IPCC_Init 1 */

	/* USER CODE END IPCC_Init 1 */
	hipcc.Instance = IPCC;
 8005c60:	4b06      	ldr	r3, [pc, #24]	@ (8005c7c <MX_IPCC_Init+0x20>)
 8005c62:	4a07      	ldr	r2, [pc, #28]	@ (8005c80 <MX_IPCC_Init+0x24>)
 8005c64:	601a      	str	r2, [r3, #0]
	if (HAL_IPCC_Init(&hipcc) != HAL_OK) {
 8005c66:	4805      	ldr	r0, [pc, #20]	@ (8005c7c <MX_IPCC_Init+0x20>)
 8005c68:	f004 fe1a 	bl	800a8a0 <HAL_IPCC_Init>
 8005c6c:	4603      	mov	r3, r0
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d001      	beq.n	8005c76 <MX_IPCC_Init+0x1a>
		Error_Handler();
 8005c72:	f000 f927 	bl	8005ec4 <Error_Handler>
	}
	/* USER CODE BEGIN IPCC_Init 2 */

	/* USER CODE END IPCC_Init 2 */

}
 8005c76:	bf00      	nop
 8005c78:	bd80      	pop	{r7, pc}
 8005c7a:	bf00      	nop
 8005c7c:	200002a8 	.word	0x200002a8
 8005c80:	58000c00 	.word	0x58000c00

08005c84 <MX_RF_Init>:
/**
 * @brief RF Initialization Function
 * @param None
 * @retval None
 */
static void MX_RF_Init(void) {
 8005c84:	b480      	push	{r7}
 8005c86:	af00      	add	r7, sp, #0
	/* USER CODE END RF_Init 1 */
	/* USER CODE BEGIN RF_Init 2 */

	/* USER CODE END RF_Init 2 */

}
 8005c88:	bf00      	nop
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c90:	4770      	bx	lr
	...

08005c94 <MX_RTC_Init>:
/**
 * @brief RTC Initialization Function
 * @param None
 * @retval None
 */
static void MX_RTC_Init(void) {
 8005c94:	b580      	push	{r7, lr}
 8005c96:	af00      	add	r7, sp, #0

	/* USER CODE END RTC_Init 1 */

	/** Initialize RTC Only
	 */
	hrtc.Instance = RTC;
 8005c98:	4b16      	ldr	r3, [pc, #88]	@ (8005cf4 <MX_RTC_Init+0x60>)
 8005c9a:	4a17      	ldr	r2, [pc, #92]	@ (8005cf8 <MX_RTC_Init+0x64>)
 8005c9c:	601a      	str	r2, [r3, #0]
	hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8005c9e:	4b15      	ldr	r3, [pc, #84]	@ (8005cf4 <MX_RTC_Init+0x60>)
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	605a      	str	r2, [r3, #4]
	hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8005ca4:	4b13      	ldr	r3, [pc, #76]	@ (8005cf4 <MX_RTC_Init+0x60>)
 8005ca6:	220f      	movs	r2, #15
 8005ca8:	609a      	str	r2, [r3, #8]
	hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 8005caa:	4b12      	ldr	r3, [pc, #72]	@ (8005cf4 <MX_RTC_Init+0x60>)
 8005cac:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8005cb0:	60da      	str	r2, [r3, #12]
	hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8005cb2:	4b10      	ldr	r3, [pc, #64]	@ (8005cf4 <MX_RTC_Init+0x60>)
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	611a      	str	r2, [r3, #16]
	hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8005cb8:	4b0e      	ldr	r3, [pc, #56]	@ (8005cf4 <MX_RTC_Init+0x60>)
 8005cba:	2200      	movs	r2, #0
 8005cbc:	619a      	str	r2, [r3, #24]
	hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8005cbe:	4b0d      	ldr	r3, [pc, #52]	@ (8005cf4 <MX_RTC_Init+0x60>)
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	61da      	str	r2, [r3, #28]
	hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8005cc4:	4b0b      	ldr	r3, [pc, #44]	@ (8005cf4 <MX_RTC_Init+0x60>)
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	615a      	str	r2, [r3, #20]
	if (HAL_RTC_Init(&hrtc) != HAL_OK) {
 8005cca:	480a      	ldr	r0, [pc, #40]	@ (8005cf4 <MX_RTC_Init+0x60>)
 8005ccc:	f006 fbf6 	bl	800c4bc <HAL_RTC_Init>
 8005cd0:	4603      	mov	r3, r0
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d001      	beq.n	8005cda <MX_RTC_Init+0x46>
		Error_Handler();
 8005cd6:	f000 f8f5 	bl	8005ec4 <Error_Handler>
	}

	/** Enable the WakeUp
	 */
	if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16)
 8005cda:	2200      	movs	r2, #0
 8005cdc:	2100      	movs	r1, #0
 8005cde:	4805      	ldr	r0, [pc, #20]	@ (8005cf4 <MX_RTC_Init+0x60>)
 8005ce0:	f006 fcec 	bl	800c6bc <HAL_RTCEx_SetWakeUpTimer_IT>
 8005ce4:	4603      	mov	r3, r0
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d001      	beq.n	8005cee <MX_RTC_Init+0x5a>
			!= HAL_OK) {
		Error_Handler();
 8005cea:	f000 f8eb 	bl	8005ec4 <Error_Handler>
	}
	/* USER CODE BEGIN RTC_Init 2 */

	/* USER CODE END RTC_Init 2 */

}
 8005cee:	bf00      	nop
 8005cf0:	bd80      	pop	{r7, pc}
 8005cf2:	bf00      	nop
 8005cf4:	200002e4 	.word	0x200002e4
 8005cf8:	40002800 	.word	0x40002800

08005cfc <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b088      	sub	sp, #32
 8005d00:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8005d02:	f107 0310 	add.w	r3, r7, #16
 8005d06:	2200      	movs	r2, #0
 8005d08:	601a      	str	r2, [r3, #0]
 8005d0a:	605a      	str	r2, [r3, #4]
 8005d0c:	609a      	str	r2, [r3, #8]
 8005d0e:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8005d10:	1d3b      	adds	r3, r7, #4
 8005d12:	2200      	movs	r2, #0
 8005d14:	601a      	str	r2, [r3, #0]
 8005d16:	605a      	str	r2, [r3, #4]
 8005d18:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8005d1a:	4b1e      	ldr	r3, [pc, #120]	@ (8005d94 <MX_TIM2_Init+0x98>)
 8005d1c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8005d20:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 99;
 8005d22:	4b1c      	ldr	r3, [pc, #112]	@ (8005d94 <MX_TIM2_Init+0x98>)
 8005d24:	2263      	movs	r2, #99	@ 0x63
 8005d26:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005d28:	4b1a      	ldr	r3, [pc, #104]	@ (8005d94 <MX_TIM2_Init+0x98>)
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 0xffffffff;
 8005d2e:	4b19      	ldr	r3, [pc, #100]	@ (8005d94 <MX_TIM2_Init+0x98>)
 8005d30:	f04f 32ff 	mov.w	r2, #4294967295
 8005d34:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005d36:	4b17      	ldr	r3, [pc, #92]	@ (8005d94 <MX_TIM2_Init+0x98>)
 8005d38:	2200      	movs	r2, #0
 8005d3a:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005d3c:	4b15      	ldr	r3, [pc, #84]	@ (8005d94 <MX_TIM2_Init+0x98>)
 8005d3e:	2200      	movs	r2, #0
 8005d40:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8005d42:	4814      	ldr	r0, [pc, #80]	@ (8005d94 <MX_TIM2_Init+0x98>)
 8005d44:	f006 fd76 	bl	800c834 <HAL_TIM_Base_Init>
 8005d48:	4603      	mov	r3, r0
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d001      	beq.n	8005d52 <MX_TIM2_Init+0x56>
		Error_Handler();
 8005d4e:	f000 f8b9 	bl	8005ec4 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005d52:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005d56:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8005d58:	f107 0310 	add.w	r3, r7, #16
 8005d5c:	4619      	mov	r1, r3
 8005d5e:	480d      	ldr	r0, [pc, #52]	@ (8005d94 <MX_TIM2_Init+0x98>)
 8005d60:	f006 fe06 	bl	800c970 <HAL_TIM_ConfigClockSource>
 8005d64:	4603      	mov	r3, r0
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d001      	beq.n	8005d6e <MX_TIM2_Init+0x72>
		Error_Handler();
 8005d6a:	f000 f8ab 	bl	8005ec4 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005d6e:	2300      	movs	r3, #0
 8005d70:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005d72:	2300      	movs	r3, #0
 8005d74:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8005d76:	1d3b      	adds	r3, r7, #4
 8005d78:	4619      	mov	r1, r3
 8005d7a:	4806      	ldr	r0, [pc, #24]	@ (8005d94 <MX_TIM2_Init+0x98>)
 8005d7c:	f006 ffce 	bl	800cd1c <HAL_TIMEx_MasterConfigSynchronization>
 8005d80:	4603      	mov	r3, r0
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d001      	beq.n	8005d8a <MX_TIM2_Init+0x8e>
			!= HAL_OK) {
		Error_Handler();
 8005d86:	f000 f89d 	bl	8005ec4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8005d8a:	bf00      	nop
 8005d8c:	3720      	adds	r7, #32
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	bd80      	pop	{r7, pc}
 8005d92:	bf00      	nop
 8005d94:	20000308 	.word	0x20000308

08005d98 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMAMUX1_CLK_ENABLE();
 8005d9c:	2004      	movs	r0, #4
 8005d9e:	f7fd fc03 	bl	80035a8 <LL_AHB1_GRP1_EnableClock>
	__HAL_RCC_DMA1_CLK_ENABLE();
 8005da2:	2001      	movs	r0, #1
 8005da4:	f7fd fc00 	bl	80035a8 <LL_AHB1_GRP1_EnableClock>

	/* DMA interrupt init */
	/* DMA1_Channel7_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8005da8:	2200      	movs	r2, #0
 8005daa:	2100      	movs	r1, #0
 8005dac:	2011      	movs	r0, #17
 8005dae:	f002 f808 	bl	8007dc2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8005db2:	2011      	movs	r0, #17
 8005db4:	f002 f81f 	bl	8007df6 <HAL_NVIC_EnableIRQ>
	/* DMAMUX1_OVR_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMAMUX1_OVR_IRQn, 0, 0);
 8005db8:	2200      	movs	r2, #0
 8005dba:	2100      	movs	r1, #0
 8005dbc:	203e      	movs	r0, #62	@ 0x3e
 8005dbe:	f002 f800 	bl	8007dc2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMAMUX1_OVR_IRQn);
 8005dc2:	203e      	movs	r0, #62	@ 0x3e
 8005dc4:	f002 f817 	bl	8007df6 <HAL_NVIC_EnableIRQ>

}
 8005dc8:	bf00      	nop
 8005dca:	bd80      	pop	{r7, pc}

08005dcc <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	b086      	sub	sp, #24
 8005dd0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8005dd2:	1d3b      	adds	r3, r7, #4
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	601a      	str	r2, [r3, #0]
 8005dd8:	605a      	str	r2, [r3, #4]
 8005dda:	609a      	str	r2, [r3, #8]
 8005ddc:	60da      	str	r2, [r3, #12]
 8005dde:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8005de0:	2004      	movs	r0, #4
 8005de2:	f7fd fbfa 	bl	80035da <LL_AHB2_GRP1_EnableClock>
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8005de6:	2002      	movs	r0, #2
 8005de8:	f7fd fbf7 	bl	80035da <LL_AHB2_GRP1_EnableClock>
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8005dec:	2001      	movs	r0, #1
 8005dee:	f7fd fbf4 	bl	80035da <LL_AHB2_GRP1_EnableClock>
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8005df2:	2008      	movs	r0, #8
 8005df4:	f7fd fbf1 	bl	80035da <LL_AHB2_GRP1_EnableClock>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6 | GPIO_PIN_7, GPIO_PIN_RESET);
 8005df8:	2200      	movs	r2, #0
 8005dfa:	21c0      	movs	r1, #192	@ 0xc0
 8005dfc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8005e00:	f002 fc90 	bl	8008724 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LD2_Pin | LD3_Pin | LD1_Pin, GPIO_PIN_RESET);
 8005e04:	2200      	movs	r2, #0
 8005e06:	2123      	movs	r1, #35	@ 0x23
 8005e08:	482b      	ldr	r0, [pc, #172]	@ (8005eb8 <MX_GPIO_Init+0xec>)
 8005e0a:	f002 fc8b 	bl	8008724 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : PA6 PA7 */
	GPIO_InitStruct.Pin = GPIO_PIN_6 | GPIO_PIN_7;
 8005e0e:	23c0      	movs	r3, #192	@ 0xc0
 8005e10:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005e12:	2301      	movs	r3, #1
 8005e14:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e16:	2300      	movs	r3, #0
 8005e18:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005e1e:	1d3b      	adds	r3, r7, #4
 8005e20:	4619      	mov	r1, r3
 8005e22:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8005e26:	f002 fb0d 	bl	8008444 <HAL_GPIO_Init>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8005e2a:	2310      	movs	r3, #16
 8005e2c:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005e2e:	2300      	movs	r3, #0
 8005e30:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005e32:	2301      	movs	r3, #1
 8005e34:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8005e36:	1d3b      	adds	r3, r7, #4
 8005e38:	4619      	mov	r1, r3
 8005e3a:	4820      	ldr	r0, [pc, #128]	@ (8005ebc <MX_GPIO_Init+0xf0>)
 8005e3c:	f002 fb02 	bl	8008444 <HAL_GPIO_Init>

	/*Configure GPIO pins : LD2_Pin LD3_Pin LD1_Pin */
	GPIO_InitStruct.Pin = LD2_Pin | LD3_Pin | LD1_Pin;
 8005e40:	2323      	movs	r3, #35	@ 0x23
 8005e42:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005e44:	2301      	movs	r3, #1
 8005e46:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e48:	2300      	movs	r3, #0
 8005e4a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005e50:	1d3b      	adds	r3, r7, #4
 8005e52:	4619      	mov	r1, r3
 8005e54:	4818      	ldr	r0, [pc, #96]	@ (8005eb8 <MX_GPIO_Init+0xec>)
 8005e56:	f002 faf5 	bl	8008444 <HAL_GPIO_Init>

	/*Configure GPIO pins : USB_DM_Pin USB_DP_Pin */
	GPIO_InitStruct.Pin = USB_DM_Pin | USB_DP_Pin;
 8005e5a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8005e5e:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e60:	2302      	movs	r3, #2
 8005e62:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e64:	2300      	movs	r3, #0
 8005e66:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005e68:	2300      	movs	r3, #0
 8005e6a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8005e6c:	230a      	movs	r3, #10
 8005e6e:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005e70:	1d3b      	adds	r3, r7, #4
 8005e72:	4619      	mov	r1, r3
 8005e74:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8005e78:	f002 fae4 	bl	8008444 <HAL_GPIO_Init>

	/*Configure GPIO pins : B2_Pin B3_Pin */
	GPIO_InitStruct.Pin = B2_Pin | B3_Pin;
 8005e7c:	2303      	movs	r3, #3
 8005e7e:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005e80:	2300      	movs	r3, #0
 8005e82:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e84:	2300      	movs	r3, #0
 8005e86:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005e88:	1d3b      	adds	r3, r7, #4
 8005e8a:	4619      	mov	r1, r3
 8005e8c:	480c      	ldr	r0, [pc, #48]	@ (8005ec0 <MX_GPIO_Init+0xf4>)
 8005e8e:	f002 fad9 	bl	8008444 <HAL_GPIO_Init>

	/*Configure GPIO pins : STLINK_RX_Pin STLINK_TX_Pin */
	GPIO_InitStruct.Pin = STLINK_RX_Pin | STLINK_TX_Pin;
 8005e92:	23c0      	movs	r3, #192	@ 0xc0
 8005e94:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e96:	2302      	movs	r3, #2
 8005e98:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005ea2:	2307      	movs	r3, #7
 8005ea4:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005ea6:	1d3b      	adds	r3, r7, #4
 8005ea8:	4619      	mov	r1, r3
 8005eaa:	4803      	ldr	r0, [pc, #12]	@ (8005eb8 <MX_GPIO_Init+0xec>)
 8005eac:	f002 faca 	bl	8008444 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8005eb0:	bf00      	nop
 8005eb2:	3718      	adds	r7, #24
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	bd80      	pop	{r7, pc}
 8005eb8:	48000400 	.word	0x48000400
 8005ebc:	48000800 	.word	0x48000800
 8005ec0:	48000c00 	.word	0x48000c00

08005ec4 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8005ec4:	b480      	push	{r7}
 8005ec6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8005ec8:	b672      	cpsid	i
}
 8005eca:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8005ecc:	bf00      	nop
 8005ece:	e7fd      	b.n	8005ecc <Error_Handler+0x8>

08005ed0 <f3x3matrixAeqI>:
#define Y 1
#define Z 2

// function sets the 3x3 matrix A to the identity matrix
void f3x3matrixAeqI(float A[][3])
{
 8005ed0:	b480      	push	{r7}
 8005ed2:	b085      	sub	sp, #20
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
	float *pAij;	// pointer to A[i][j]
	int8_t i, j;	// loop counters

	for (i = 0; i < 3; i++) {
 8005ed8:	2300      	movs	r3, #0
 8005eda:	72fb      	strb	r3, [r7, #11]
 8005edc:	e032      	b.n	8005f44 <f3x3matrixAeqI+0x74>
		// set pAij to &A[i][j=0]
		pAij = A[i];
 8005ede:	f997 200b 	ldrsb.w	r2, [r7, #11]
 8005ee2:	4613      	mov	r3, r2
 8005ee4:	005b      	lsls	r3, r3, #1
 8005ee6:	4413      	add	r3, r2
 8005ee8:	009b      	lsls	r3, r3, #2
 8005eea:	461a      	mov	r2, r3
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	4413      	add	r3, r2
 8005ef0:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < 3; j++) {
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	72bb      	strb	r3, [r7, #10]
 8005ef6:	e00b      	b.n	8005f10 <f3x3matrixAeqI+0x40>
			*(pAij++) = 0.0F;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	1d1a      	adds	r2, r3, #4
 8005efc:	60fa      	str	r2, [r7, #12]
 8005efe:	f04f 0200 	mov.w	r2, #0
 8005f02:	601a      	str	r2, [r3, #0]
		for (j = 0; j < 3; j++) {
 8005f04:	f997 300a 	ldrsb.w	r3, [r7, #10]
 8005f08:	b2db      	uxtb	r3, r3
 8005f0a:	3301      	adds	r3, #1
 8005f0c:	b2db      	uxtb	r3, r3
 8005f0e:	72bb      	strb	r3, [r7, #10]
 8005f10:	f997 300a 	ldrsb.w	r3, [r7, #10]
 8005f14:	2b02      	cmp	r3, #2
 8005f16:	ddef      	ble.n	8005ef8 <f3x3matrixAeqI+0x28>
		}
		A[i][i] = 1.0F;
 8005f18:	f997 200b 	ldrsb.w	r2, [r7, #11]
 8005f1c:	4613      	mov	r3, r2
 8005f1e:	005b      	lsls	r3, r3, #1
 8005f20:	4413      	add	r3, r2
 8005f22:	009b      	lsls	r3, r3, #2
 8005f24:	461a      	mov	r2, r3
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	441a      	add	r2, r3
 8005f2a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8005f2e:	009b      	lsls	r3, r3, #2
 8005f30:	4413      	add	r3, r2
 8005f32:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8005f36:	601a      	str	r2, [r3, #0]
	for (i = 0; i < 3; i++) {
 8005f38:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8005f3c:	b2db      	uxtb	r3, r3
 8005f3e:	3301      	adds	r3, #1
 8005f40:	b2db      	uxtb	r3, r3
 8005f42:	72fb      	strb	r3, [r7, #11]
 8005f44:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8005f48:	2b02      	cmp	r3, #2
 8005f4a:	ddc8      	ble.n	8005ede <f3x3matrixAeqI+0xe>
	}
}
 8005f4c:	bf00      	nop
 8005f4e:	bf00      	nop
 8005f50:	3714      	adds	r7, #20
 8005f52:	46bd      	mov	sp, r7
 8005f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f58:	4770      	bx	lr

08005f5a <fmatrixAeqI>:

// function sets the matrix A to the identity matrix
void fmatrixAeqI(float *A[], int16_t rc)
{
 8005f5a:	b480      	push	{r7}
 8005f5c:	b085      	sub	sp, #20
 8005f5e:	af00      	add	r7, sp, #0
 8005f60:	6078      	str	r0, [r7, #4]
 8005f62:	460b      	mov	r3, r1
 8005f64:	807b      	strh	r3, [r7, #2]
	// rc = rows and columns in A

	float *pAij;	// pointer to A[i][j]
	int8_t i, j;	// loop counters

	for (i = 0; i < rc; i++) {
 8005f66:	2300      	movs	r3, #0
 8005f68:	72fb      	strb	r3, [r7, #11]
 8005f6a:	e02f      	b.n	8005fcc <fmatrixAeqI+0x72>
		// set pAij to &A[i][j=0]
		pAij = A[i];
 8005f6c:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8005f70:	009b      	lsls	r3, r3, #2
 8005f72:	687a      	ldr	r2, [r7, #4]
 8005f74:	4413      	add	r3, r2
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < rc; j++) {
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	72bb      	strb	r3, [r7, #10]
 8005f7e:	e00b      	b.n	8005f98 <fmatrixAeqI+0x3e>
			*(pAij++) = 0.0F;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	1d1a      	adds	r2, r3, #4
 8005f84:	60fa      	str	r2, [r7, #12]
 8005f86:	f04f 0200 	mov.w	r2, #0
 8005f8a:	601a      	str	r2, [r3, #0]
		for (j = 0; j < rc; j++) {
 8005f8c:	f997 300a 	ldrsb.w	r3, [r7, #10]
 8005f90:	b2db      	uxtb	r3, r3
 8005f92:	3301      	adds	r3, #1
 8005f94:	b2db      	uxtb	r3, r3
 8005f96:	72bb      	strb	r3, [r7, #10]
 8005f98:	f997 300a 	ldrsb.w	r3, [r7, #10]
 8005f9c:	b21b      	sxth	r3, r3
 8005f9e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8005fa2:	429a      	cmp	r2, r3
 8005fa4:	dcec      	bgt.n	8005f80 <fmatrixAeqI+0x26>
		}
		A[i][i] = 1.0F;
 8005fa6:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8005faa:	009b      	lsls	r3, r3, #2
 8005fac:	687a      	ldr	r2, [r7, #4]
 8005fae:	4413      	add	r3, r2
 8005fb0:	681a      	ldr	r2, [r3, #0]
 8005fb2:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8005fb6:	009b      	lsls	r3, r3, #2
 8005fb8:	4413      	add	r3, r2
 8005fba:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8005fbe:	601a      	str	r2, [r3, #0]
	for (i = 0; i < rc; i++) {
 8005fc0:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8005fc4:	b2db      	uxtb	r3, r3
 8005fc6:	3301      	adds	r3, #1
 8005fc8:	b2db      	uxtb	r3, r3
 8005fca:	72fb      	strb	r3, [r7, #11]
 8005fcc:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8005fd0:	b21b      	sxth	r3, r3
 8005fd2:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8005fd6:	429a      	cmp	r2, r3
 8005fd8:	dcc8      	bgt.n	8005f6c <fmatrixAeqI+0x12>
	}
}
 8005fda:	bf00      	nop
 8005fdc:	bf00      	nop
 8005fde:	3714      	adds	r7, #20
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe6:	4770      	bx	lr

08005fe8 <f3x3matrixAeqScalar>:

// function sets every entry in the 3x3 matrix A to a constant scalar
void f3x3matrixAeqScalar(float A[][3], float Scalar)
{
 8005fe8:	b480      	push	{r7}
 8005fea:	b085      	sub	sp, #20
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
 8005ff0:	ed87 0a00 	vstr	s0, [r7]
	float *pAij;	// pointer to A[i][j]
	int8_t i, j;	// counters

	for (i = 0; i < 3; i++) {
 8005ff4:	2300      	movs	r3, #0
 8005ff6:	72fb      	strb	r3, [r7, #11]
 8005ff8:	e021      	b.n	800603e <f3x3matrixAeqScalar+0x56>
		// set pAij to &A[i][j=0]
		pAij = A[i];
 8005ffa:	f997 200b 	ldrsb.w	r2, [r7, #11]
 8005ffe:	4613      	mov	r3, r2
 8006000:	005b      	lsls	r3, r3, #1
 8006002:	4413      	add	r3, r2
 8006004:	009b      	lsls	r3, r3, #2
 8006006:	461a      	mov	r2, r3
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	4413      	add	r3, r2
 800600c:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < 3; j++) {
 800600e:	2300      	movs	r3, #0
 8006010:	72bb      	strb	r3, [r7, #10]
 8006012:	e00a      	b.n	800602a <f3x3matrixAeqScalar+0x42>
			*(pAij++) = Scalar;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	1d1a      	adds	r2, r3, #4
 8006018:	60fa      	str	r2, [r7, #12]
 800601a:	683a      	ldr	r2, [r7, #0]
 800601c:	601a      	str	r2, [r3, #0]
		for (j = 0; j < 3; j++) {
 800601e:	f997 300a 	ldrsb.w	r3, [r7, #10]
 8006022:	b2db      	uxtb	r3, r3
 8006024:	3301      	adds	r3, #1
 8006026:	b2db      	uxtb	r3, r3
 8006028:	72bb      	strb	r3, [r7, #10]
 800602a:	f997 300a 	ldrsb.w	r3, [r7, #10]
 800602e:	2b02      	cmp	r3, #2
 8006030:	ddf0      	ble.n	8006014 <f3x3matrixAeqScalar+0x2c>
	for (i = 0; i < 3; i++) {
 8006032:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8006036:	b2db      	uxtb	r3, r3
 8006038:	3301      	adds	r3, #1
 800603a:	b2db      	uxtb	r3, r3
 800603c:	72fb      	strb	r3, [r7, #11]
 800603e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8006042:	2b02      	cmp	r3, #2
 8006044:	ddd9      	ble.n	8005ffa <f3x3matrixAeqScalar+0x12>
		}
	}
}
 8006046:	bf00      	nop
 8006048:	bf00      	nop
 800604a:	3714      	adds	r7, #20
 800604c:	46bd      	mov	sp, r7
 800604e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006052:	4770      	bx	lr

08006054 <f3x3matrixAeqAxScalar>:

// function multiplies all elements of 3x3 matrix A by the specified scalar
void f3x3matrixAeqAxScalar(float A[][3], float Scalar)
{
 8006054:	b480      	push	{r7}
 8006056:	b085      	sub	sp, #20
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
 800605c:	ed87 0a00 	vstr	s0, [r7]
	float *pAij;	// pointer to A[i][j]
	int8_t i, j;	// loop counters

	for (i = 0; i < 3; i++) {
 8006060:	2300      	movs	r3, #0
 8006062:	72fb      	strb	r3, [r7, #11]
 8006064:	e027      	b.n	80060b6 <f3x3matrixAeqAxScalar+0x62>
		// set pAij to &A[i][j=0]
		pAij = A[i];
 8006066:	f997 200b 	ldrsb.w	r2, [r7, #11]
 800606a:	4613      	mov	r3, r2
 800606c:	005b      	lsls	r3, r3, #1
 800606e:	4413      	add	r3, r2
 8006070:	009b      	lsls	r3, r3, #2
 8006072:	461a      	mov	r2, r3
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	4413      	add	r3, r2
 8006078:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < 3; j++) {
 800607a:	2300      	movs	r3, #0
 800607c:	72bb      	strb	r3, [r7, #10]
 800607e:	e010      	b.n	80060a2 <f3x3matrixAeqAxScalar+0x4e>
			*(pAij++) *= Scalar;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	1d1a      	adds	r2, r3, #4
 8006084:	60fa      	str	r2, [r7, #12]
 8006086:	ed93 7a00 	vldr	s14, [r3]
 800608a:	edd7 7a00 	vldr	s15, [r7]
 800608e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006092:	edc3 7a00 	vstr	s15, [r3]
		for (j = 0; j < 3; j++) {
 8006096:	f997 300a 	ldrsb.w	r3, [r7, #10]
 800609a:	b2db      	uxtb	r3, r3
 800609c:	3301      	adds	r3, #1
 800609e:	b2db      	uxtb	r3, r3
 80060a0:	72bb      	strb	r3, [r7, #10]
 80060a2:	f997 300a 	ldrsb.w	r3, [r7, #10]
 80060a6:	2b02      	cmp	r3, #2
 80060a8:	ddea      	ble.n	8006080 <f3x3matrixAeqAxScalar+0x2c>
	for (i = 0; i < 3; i++) {
 80060aa:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80060ae:	b2db      	uxtb	r3, r3
 80060b0:	3301      	adds	r3, #1
 80060b2:	b2db      	uxtb	r3, r3
 80060b4:	72fb      	strb	r3, [r7, #11]
 80060b6:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80060ba:	2b02      	cmp	r3, #2
 80060bc:	ddd3      	ble.n	8006066 <f3x3matrixAeqAxScalar+0x12>
		}
	}
}
 80060be:	bf00      	nop
 80060c0:	bf00      	nop
 80060c2:	3714      	adds	r7, #20
 80060c4:	46bd      	mov	sp, r7
 80060c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ca:	4770      	bx	lr

080060cc <f3x3matrixAeqMinusA>:

// function negates all elements of 3x3 matrix A
void f3x3matrixAeqMinusA(float A[][3])
{
 80060cc:	b480      	push	{r7}
 80060ce:	b085      	sub	sp, #20
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
	float *pAij;	// pointer to A[i][j]
	int8_t i, j;	// loop counters

	for (i = 0; i < 3; i++) {
 80060d4:	2300      	movs	r3, #0
 80060d6:	72fb      	strb	r3, [r7, #11]
 80060d8:	e027      	b.n	800612a <f3x3matrixAeqMinusA+0x5e>
		// set pAij to &A[i][j=0]
		pAij = A[i];
 80060da:	f997 200b 	ldrsb.w	r2, [r7, #11]
 80060de:	4613      	mov	r3, r2
 80060e0:	005b      	lsls	r3, r3, #1
 80060e2:	4413      	add	r3, r2
 80060e4:	009b      	lsls	r3, r3, #2
 80060e6:	461a      	mov	r2, r3
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	4413      	add	r3, r2
 80060ec:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < 3; j++) {
 80060ee:	2300      	movs	r3, #0
 80060f0:	72bb      	strb	r3, [r7, #10]
 80060f2:	e010      	b.n	8006116 <f3x3matrixAeqMinusA+0x4a>
			*pAij = -*pAij;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	edd3 7a00 	vldr	s15, [r3]
 80060fa:	eef1 7a67 	vneg.f32	s15, s15
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	edc3 7a00 	vstr	s15, [r3]
			pAij++;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	3304      	adds	r3, #4
 8006108:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < 3; j++) {
 800610a:	f997 300a 	ldrsb.w	r3, [r7, #10]
 800610e:	b2db      	uxtb	r3, r3
 8006110:	3301      	adds	r3, #1
 8006112:	b2db      	uxtb	r3, r3
 8006114:	72bb      	strb	r3, [r7, #10]
 8006116:	f997 300a 	ldrsb.w	r3, [r7, #10]
 800611a:	2b02      	cmp	r3, #2
 800611c:	ddea      	ble.n	80060f4 <f3x3matrixAeqMinusA+0x28>
	for (i = 0; i < 3; i++) {
 800611e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8006122:	b2db      	uxtb	r3, r3
 8006124:	3301      	adds	r3, #1
 8006126:	b2db      	uxtb	r3, r3
 8006128:	72fb      	strb	r3, [r7, #11]
 800612a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800612e:	2b02      	cmp	r3, #2
 8006130:	ddd3      	ble.n	80060da <f3x3matrixAeqMinusA+0xe>
		}
	}
}
 8006132:	bf00      	nop
 8006134:	bf00      	nop
 8006136:	3714      	adds	r7, #20
 8006138:	46bd      	mov	sp, r7
 800613a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613e:	4770      	bx	lr

08006140 <f3x3matrixAeqInvSymB>:

// function directly calculates the symmetric inverse of a symmetric 3x3 matrix
// only the on and above diagonal terms in B are used and need to be specified
void f3x3matrixAeqInvSymB(float A[][3], float B[][3])
{
 8006140:	b580      	push	{r7, lr}
 8006142:	b086      	sub	sp, #24
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
 8006148:	6039      	str	r1, [r7, #0]
	float fB12B02mB01B22;	// B[1][2] * B[0][2] - B[0][1] * B[2][2]
	float fB01B12mB11B02;	// B[0][1] * B[1][2] - B[1][1] * B[0][2]
	float ftmp;				// determinant and then reciprocal

	// calculate useful products
	fB11B22mB12B12 = B[1][1] * B[2][2] - B[1][2] * B[1][2];
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	330c      	adds	r3, #12
 800614e:	ed93 7a01 	vldr	s14, [r3, #4]
 8006152:	683b      	ldr	r3, [r7, #0]
 8006154:	3318      	adds	r3, #24
 8006156:	edd3 7a02 	vldr	s15, [r3, #8]
 800615a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800615e:	683b      	ldr	r3, [r7, #0]
 8006160:	330c      	adds	r3, #12
 8006162:	edd3 6a02 	vldr	s13, [r3, #8]
 8006166:	683b      	ldr	r3, [r7, #0]
 8006168:	330c      	adds	r3, #12
 800616a:	edd3 7a02 	vldr	s15, [r3, #8]
 800616e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006172:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006176:	edc7 7a05 	vstr	s15, [r7, #20]
	fB12B02mB01B22 = B[1][2] * B[0][2] - B[0][1] * B[2][2];
 800617a:	683b      	ldr	r3, [r7, #0]
 800617c:	330c      	adds	r3, #12
 800617e:	ed93 7a02 	vldr	s14, [r3, #8]
 8006182:	683b      	ldr	r3, [r7, #0]
 8006184:	edd3 7a02 	vldr	s15, [r3, #8]
 8006188:	ee27 7a27 	vmul.f32	s14, s14, s15
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	edd3 6a01 	vldr	s13, [r3, #4]
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	3318      	adds	r3, #24
 8006196:	edd3 7a02 	vldr	s15, [r3, #8]
 800619a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800619e:	ee77 7a67 	vsub.f32	s15, s14, s15
 80061a2:	edc7 7a04 	vstr	s15, [r7, #16]
	fB01B12mB11B02 = B[0][1] * B[1][2] - B[1][1] * B[0][2];
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	ed93 7a01 	vldr	s14, [r3, #4]
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	330c      	adds	r3, #12
 80061b0:	edd3 7a02 	vldr	s15, [r3, #8]
 80061b4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	330c      	adds	r3, #12
 80061bc:	edd3 6a01 	vldr	s13, [r3, #4]
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	edd3 7a02 	vldr	s15, [r3, #8]
 80061c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80061ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 80061ce:	edc7 7a03 	vstr	s15, [r7, #12]

	// set ftmp to the determinant of the input matrix B
	ftmp = B[0][0] * fB11B22mB12B12 + B[0][1] * fB12B02mB01B22 + B[0][2] * fB01B12mB11B02;
 80061d2:	683b      	ldr	r3, [r7, #0]
 80061d4:	ed93 7a00 	vldr	s14, [r3]
 80061d8:	edd7 7a05 	vldr	s15, [r7, #20]
 80061dc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	edd3 6a01 	vldr	s13, [r3, #4]
 80061e6:	edd7 7a04 	vldr	s15, [r7, #16]
 80061ea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80061ee:	ee37 7a27 	vadd.f32	s14, s14, s15
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	edd3 6a02 	vldr	s13, [r3, #8]
 80061f8:	edd7 7a03 	vldr	s15, [r7, #12]
 80061fc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006200:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006204:	edc7 7a02 	vstr	s15, [r7, #8]

	// set A to the inverse of B for any determinant except zero
	if (ftmp != 0.0F) {
 8006208:	edd7 7a02 	vldr	s15, [r7, #8]
 800620c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8006210:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006214:	f000 8083 	beq.w	800631e <f3x3matrixAeqInvSymB+0x1de>
		ftmp = 1.0F / ftmp;
 8006218:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800621c:	ed97 7a02 	vldr	s14, [r7, #8]
 8006220:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006224:	edc7 7a02 	vstr	s15, [r7, #8]
		A[0][0] = fB11B22mB12B12 * ftmp;
 8006228:	ed97 7a05 	vldr	s14, [r7, #20]
 800622c:	edd7 7a02 	vldr	s15, [r7, #8]
 8006230:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	edc3 7a00 	vstr	s15, [r3]
		A[1][0] = A[0][1] = fB12B02mB01B22 * ftmp;
 800623a:	ed97 7a04 	vldr	s14, [r7, #16]
 800623e:	edd7 7a02 	vldr	s15, [r7, #8]
 8006242:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	edc3 7a01 	vstr	s15, [r3, #4]
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	330c      	adds	r3, #12
 8006250:	687a      	ldr	r2, [r7, #4]
 8006252:	6852      	ldr	r2, [r2, #4]
 8006254:	601a      	str	r2, [r3, #0]
		A[2][0] = A[0][2] = fB01B12mB11B02 * ftmp;
 8006256:	ed97 7a03 	vldr	s14, [r7, #12]
 800625a:	edd7 7a02 	vldr	s15, [r7, #8]
 800625e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	edc3 7a02 	vstr	s15, [r3, #8]
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	3318      	adds	r3, #24
 800626c:	687a      	ldr	r2, [r7, #4]
 800626e:	6892      	ldr	r2, [r2, #8]
 8006270:	601a      	str	r2, [r3, #0]
		A[1][1] = (B[0][0] * B[2][2] - B[0][2] * B[0][2]) * ftmp;
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	ed93 7a00 	vldr	s14, [r3]
 8006278:	683b      	ldr	r3, [r7, #0]
 800627a:	3318      	adds	r3, #24
 800627c:	edd3 7a02 	vldr	s15, [r3, #8]
 8006280:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006284:	683b      	ldr	r3, [r7, #0]
 8006286:	edd3 6a02 	vldr	s13, [r3, #8]
 800628a:	683b      	ldr	r3, [r7, #0]
 800628c:	edd3 7a02 	vldr	s15, [r3, #8]
 8006290:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006294:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	330c      	adds	r3, #12
 800629c:	edd7 7a02 	vldr	s15, [r7, #8]
 80062a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062a4:	edc3 7a01 	vstr	s15, [r3, #4]
		A[2][1] = A[1][2] = (B[0][2] * B[0][1] - B[0][0] * B[1][2]) * ftmp;
 80062a8:	683b      	ldr	r3, [r7, #0]
 80062aa:	ed93 7a02 	vldr	s14, [r3, #8]
 80062ae:	683b      	ldr	r3, [r7, #0]
 80062b0:	edd3 7a01 	vldr	s15, [r3, #4]
 80062b4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	edd3 6a00 	vldr	s13, [r3]
 80062be:	683b      	ldr	r3, [r7, #0]
 80062c0:	330c      	adds	r3, #12
 80062c2:	edd3 7a02 	vldr	s15, [r3, #8]
 80062c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80062ca:	ee37 7a67 	vsub.f32	s14, s14, s15
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	330c      	adds	r3, #12
 80062d2:	edd7 7a02 	vldr	s15, [r7, #8]
 80062d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062da:	edc3 7a02 	vstr	s15, [r3, #8]
 80062de:	687a      	ldr	r2, [r7, #4]
 80062e0:	3218      	adds	r2, #24
 80062e2:	689b      	ldr	r3, [r3, #8]
 80062e4:	6053      	str	r3, [r2, #4]
		A[2][2] = (B[0][0] * B[1][1] - B[0][1] * B[0][1]) * ftmp;
 80062e6:	683b      	ldr	r3, [r7, #0]
 80062e8:	ed93 7a00 	vldr	s14, [r3]
 80062ec:	683b      	ldr	r3, [r7, #0]
 80062ee:	330c      	adds	r3, #12
 80062f0:	edd3 7a01 	vldr	s15, [r3, #4]
 80062f4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	edd3 6a01 	vldr	s13, [r3, #4]
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	edd3 7a01 	vldr	s15, [r3, #4]
 8006304:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006308:	ee37 7a67 	vsub.f32	s14, s14, s15
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	3318      	adds	r3, #24
 8006310:	edd7 7a02 	vldr	s15, [r7, #8]
 8006314:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006318:	edc3 7a02 	vstr	s15, [r3, #8]
	} else {
		// provide the identity matrix if the determinant is zero
		f3x3matrixAeqI(A);
	}
}
 800631c:	e002      	b.n	8006324 <f3x3matrixAeqInvSymB+0x1e4>
		f3x3matrixAeqI(A);
 800631e:	6878      	ldr	r0, [r7, #4]
 8006320:	f7ff fdd6 	bl	8005ed0 <f3x3matrixAeqI>
}
 8006324:	bf00      	nop
 8006326:	3718      	adds	r7, #24
 8006328:	46bd      	mov	sp, r7
 800632a:	bd80      	pop	{r7, pc}

0800632c <f3x3matrixDetA>:

// function calculates the determinant of a 3x3 matrix
float f3x3matrixDetA(float A[][3])
{
 800632c:	b480      	push	{r7}
 800632e:	b083      	sub	sp, #12
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]
	return (A[X][X] * (A[Y][Y] * A[Z][Z] - A[Y][Z] * A[Z][Y]) +
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	ed93 7a00 	vldr	s14, [r3]
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	330c      	adds	r3, #12
 800633e:	edd3 6a01 	vldr	s13, [r3, #4]
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	3318      	adds	r3, #24
 8006346:	edd3 7a02 	vldr	s15, [r3, #8]
 800634a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	330c      	adds	r3, #12
 8006352:	ed93 6a02 	vldr	s12, [r3, #8]
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	3318      	adds	r3, #24
 800635a:	edd3 7a01 	vldr	s15, [r3, #4]
 800635e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8006362:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8006366:	ee27 7a27 	vmul.f32	s14, s14, s15
			A[X][Y] * (A[Y][Z] * A[Z][X] - A[Y][X] * A[Z][Z]) +
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	edd3 6a01 	vldr	s13, [r3, #4]
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	330c      	adds	r3, #12
 8006374:	ed93 6a02 	vldr	s12, [r3, #8]
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	3318      	adds	r3, #24
 800637c:	edd3 7a00 	vldr	s15, [r3]
 8006380:	ee26 6a27 	vmul.f32	s12, s12, s15
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	330c      	adds	r3, #12
 8006388:	edd3 5a00 	vldr	s11, [r3]
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	3318      	adds	r3, #24
 8006390:	edd3 7a02 	vldr	s15, [r3, #8]
 8006394:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8006398:	ee76 7a67 	vsub.f32	s15, s12, s15
 800639c:	ee66 7aa7 	vmul.f32	s15, s13, s15
	return (A[X][X] * (A[Y][Y] * A[Z][Z] - A[Y][Z] * A[Z][Y]) +
 80063a0:	ee37 7a27 	vadd.f32	s14, s14, s15
			A[X][Z] * (A[Y][X] * A[Z][Y] - A[Y][Y] * A[Z][X]));
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	edd3 6a02 	vldr	s13, [r3, #8]
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	330c      	adds	r3, #12
 80063ae:	ed93 6a00 	vldr	s12, [r3]
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	3318      	adds	r3, #24
 80063b6:	edd3 7a01 	vldr	s15, [r3, #4]
 80063ba:	ee26 6a27 	vmul.f32	s12, s12, s15
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	330c      	adds	r3, #12
 80063c2:	edd3 5a01 	vldr	s11, [r3, #4]
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	3318      	adds	r3, #24
 80063ca:	edd3 7a00 	vldr	s15, [r3]
 80063ce:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80063d2:	ee76 7a67 	vsub.f32	s15, s12, s15
 80063d6:	ee66 7aa7 	vmul.f32	s15, s13, s15
			A[X][Y] * (A[Y][Z] * A[Z][X] - A[Y][X] * A[Z][Z]) +
 80063da:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 80063de:	eeb0 0a67 	vmov.f32	s0, s15
 80063e2:	370c      	adds	r7, #12
 80063e4:	46bd      	mov	sp, r7
 80063e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ea:	4770      	bx	lr

080063ec <eigencompute>:
// A[][] is changed on output.
// eigval[0..n-1] returns the eigenvalues of A[][].
// eigvec[0..n-1][0..n-1] returns the normalized eigenvectors of A[][]
// the eigenvectors are not sorted by value
void eigencompute(float A[][10], float eigval[], float eigvec[][10], int8_t n)
{
 80063ec:	b5b0      	push	{r4, r5, r7, lr}
 80063ee:	b08c      	sub	sp, #48	@ 0x30
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	60f8      	str	r0, [r7, #12]
 80063f4:	60b9      	str	r1, [r7, #8]
 80063f6:	607a      	str	r2, [r7, #4]
 80063f8:	70fb      	strb	r3, [r7, #3]
	int8_t j;
	// timeout ctr for number of passes of the algorithm
	int8_t ctr;

	// initialize eigenvectors matrix and eigenvalues array
	for (ir = 0; ir < n; ir++) {
 80063fa:	2300      	movs	r3, #0
 80063fc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8006400:	e04b      	b.n	800649a <eigencompute+0xae>
		// loop over all columns
		for (ic = 0; ic < n; ic++) {
 8006402:	2300      	movs	r3, #0
 8006404:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8006408:	e016      	b.n	8006438 <eigencompute+0x4c>
			// set on diagonal and off-diagonal elements to zero
			eigvec[ir][ic] = 0.0F;
 800640a:	f997 2027 	ldrsb.w	r2, [r7, #39]	@ 0x27
 800640e:	4613      	mov	r3, r2
 8006410:	009b      	lsls	r3, r3, #2
 8006412:	4413      	add	r3, r2
 8006414:	00db      	lsls	r3, r3, #3
 8006416:	461a      	mov	r2, r3
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	441a      	add	r2, r3
 800641c:	f997 3026 	ldrsb.w	r3, [r7, #38]	@ 0x26
 8006420:	009b      	lsls	r3, r3, #2
 8006422:	4413      	add	r3, r2
 8006424:	f04f 0200 	mov.w	r2, #0
 8006428:	601a      	str	r2, [r3, #0]
		for (ic = 0; ic < n; ic++) {
 800642a:	f997 3026 	ldrsb.w	r3, [r7, #38]	@ 0x26
 800642e:	b2db      	uxtb	r3, r3
 8006430:	3301      	adds	r3, #1
 8006432:	b2db      	uxtb	r3, r3
 8006434:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8006438:	f997 2026 	ldrsb.w	r2, [r7, #38]	@ 0x26
 800643c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006440:	429a      	cmp	r2, r3
 8006442:	dbe2      	blt.n	800640a <eigencompute+0x1e>
		}

		// correct the diagonal elements to 1.0
		eigvec[ir][ir] = 1.0F;
 8006444:	f997 2027 	ldrsb.w	r2, [r7, #39]	@ 0x27
 8006448:	4613      	mov	r3, r2
 800644a:	009b      	lsls	r3, r3, #2
 800644c:	4413      	add	r3, r2
 800644e:	00db      	lsls	r3, r3, #3
 8006450:	461a      	mov	r2, r3
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	441a      	add	r2, r3
 8006456:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800645a:	009b      	lsls	r3, r3, #2
 800645c:	4413      	add	r3, r2
 800645e:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8006462:	601a      	str	r2, [r3, #0]

		// initialize the array of eigenvalues to the diagonal elements of m
		eigval[ir] = A[ir][ir];
 8006464:	f997 2027 	ldrsb.w	r2, [r7, #39]	@ 0x27
 8006468:	4613      	mov	r3, r2
 800646a:	009b      	lsls	r3, r3, #2
 800646c:	4413      	add	r3, r2
 800646e:	00db      	lsls	r3, r3, #3
 8006470:	461a      	mov	r2, r3
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	1899      	adds	r1, r3, r2
 8006476:	f997 2027 	ldrsb.w	r2, [r7, #39]	@ 0x27
 800647a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800647e:	009b      	lsls	r3, r3, #2
 8006480:	68b8      	ldr	r0, [r7, #8]
 8006482:	4403      	add	r3, r0
 8006484:	0092      	lsls	r2, r2, #2
 8006486:	440a      	add	r2, r1
 8006488:	6812      	ldr	r2, [r2, #0]
 800648a:	601a      	str	r2, [r3, #0]
	for (ir = 0; ir < n; ir++) {
 800648c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006490:	b2db      	uxtb	r3, r3
 8006492:	3301      	adds	r3, #1
 8006494:	b2db      	uxtb	r3, r3
 8006496:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800649a:	f997 2027 	ldrsb.w	r2, [r7, #39]	@ 0x27
 800649e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80064a2:	429a      	cmp	r2, r3
 80064a4:	dbad      	blt.n	8006402 <eigencompute+0x16>
	}

	// initialize the counter and loop until converged or NITERATIONS reached
	ctr = 0;
 80064a6:	2300      	movs	r3, #0
 80064a8:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
	do {
		// compute the absolute value of the above diagonal elements as exit criterion
		residue = 0.0F;
 80064ac:	f04f 0300 	mov.w	r3, #0
 80064b0:	62bb      	str	r3, [r7, #40]	@ 0x28
		// loop over rows excluding last row
		for (ir = 0; ir < n - 1; ir++) {
 80064b2:	2300      	movs	r3, #0
 80064b4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80064b8:	e031      	b.n	800651e <eigencompute+0x132>
			// loop over above diagonal columns
			for (ic = ir + 1; ic < n; ic++) {
 80064ba:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80064be:	3301      	adds	r3, #1
 80064c0:	b2db      	uxtb	r3, r3
 80064c2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80064c6:	e01d      	b.n	8006504 <eigencompute+0x118>
				// accumulate the residual off diagonal terms which are being driven to zero
				residue += fabs(A[ir][ic]);
 80064c8:	f997 2027 	ldrsb.w	r2, [r7, #39]	@ 0x27
 80064cc:	4613      	mov	r3, r2
 80064ce:	009b      	lsls	r3, r3, #2
 80064d0:	4413      	add	r3, r2
 80064d2:	00db      	lsls	r3, r3, #3
 80064d4:	461a      	mov	r2, r3
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	441a      	add	r2, r3
 80064da:	f997 3026 	ldrsb.w	r3, [r7, #38]	@ 0x26
 80064de:	009b      	lsls	r3, r3, #2
 80064e0:	4413      	add	r3, r2
 80064e2:	edd3 7a00 	vldr	s15, [r3]
 80064e6:	eef0 7ae7 	vabs.f32	s15, s15
 80064ea:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 80064ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80064f2:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
			for (ic = ir + 1; ic < n; ic++) {
 80064f6:	f997 3026 	ldrsb.w	r3, [r7, #38]	@ 0x26
 80064fa:	b2db      	uxtb	r3, r3
 80064fc:	3301      	adds	r3, #1
 80064fe:	b2db      	uxtb	r3, r3
 8006500:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8006504:	f997 2026 	ldrsb.w	r2, [r7, #38]	@ 0x26
 8006508:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800650c:	429a      	cmp	r2, r3
 800650e:	dbdb      	blt.n	80064c8 <eigencompute+0xdc>
		for (ir = 0; ir < n - 1; ir++) {
 8006510:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006514:	b2db      	uxtb	r3, r3
 8006516:	3301      	adds	r3, #1
 8006518:	b2db      	uxtb	r3, r3
 800651a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800651e:	f997 2027 	ldrsb.w	r2, [r7, #39]	@ 0x27
 8006522:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006526:	3b01      	subs	r3, #1
 8006528:	429a      	cmp	r2, r3
 800652a:	dbc6      	blt.n	80064ba <eigencompute+0xce>
			}
		}

		// check if we still have work to do
		if (residue > 0.0F) {
 800652c:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8006530:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006534:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006538:	f340 8344 	ble.w	8006bc4 <eigencompute+0x7d8>
			// loop over all rows with the exception of the last row (since only rotating above diagonal elements)
			for (ir = 0; ir < n - 1; ir++) {
 800653c:	2300      	movs	r3, #0
 800653e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8006542:	e337      	b.n	8006bb4 <eigencompute+0x7c8>
				// loop over columns ic (where ic is always greater than ir since above diagonal)
				for (ic = ir + 1; ic < n; ic++) {
 8006544:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006548:	3301      	adds	r3, #1
 800654a:	b2db      	uxtb	r3, r3
 800654c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8006550:	e322      	b.n	8006b98 <eigencompute+0x7ac>
					// only continue with this element if the element is non-zero
					if (fabs(A[ir][ic]) > 0.0F) {
 8006552:	f997 2027 	ldrsb.w	r2, [r7, #39]	@ 0x27
 8006556:	4613      	mov	r3, r2
 8006558:	009b      	lsls	r3, r3, #2
 800655a:	4413      	add	r3, r2
 800655c:	00db      	lsls	r3, r3, #3
 800655e:	461a      	mov	r2, r3
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	441a      	add	r2, r3
 8006564:	f997 3026 	ldrsb.w	r3, [r7, #38]	@ 0x26
 8006568:	009b      	lsls	r3, r3, #2
 800656a:	4413      	add	r3, r2
 800656c:	edd3 7a00 	vldr	s15, [r3]
 8006570:	eef0 7ae7 	vabs.f32	s15, s15
 8006574:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006578:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800657c:	f340 8305 	ble.w	8006b8a <eigencompute+0x79e>
						// calculate cot(2*phi) where phi is the Jacobi rotation angle
						cot2phi = 0.5F * (eigval[ic] - eigval[ir]) / (A[ir][ic]);
 8006580:	f997 3026 	ldrsb.w	r3, [r7, #38]	@ 0x26
 8006584:	009b      	lsls	r3, r3, #2
 8006586:	68ba      	ldr	r2, [r7, #8]
 8006588:	4413      	add	r3, r2
 800658a:	ed93 7a00 	vldr	s14, [r3]
 800658e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006592:	009b      	lsls	r3, r3, #2
 8006594:	68ba      	ldr	r2, [r7, #8]
 8006596:	4413      	add	r3, r2
 8006598:	edd3 7a00 	vldr	s15, [r3]
 800659c:	ee77 7a67 	vsub.f32	s15, s14, s15
 80065a0:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80065a4:	ee67 6a87 	vmul.f32	s13, s15, s14
 80065a8:	f997 2027 	ldrsb.w	r2, [r7, #39]	@ 0x27
 80065ac:	4613      	mov	r3, r2
 80065ae:	009b      	lsls	r3, r3, #2
 80065b0:	4413      	add	r3, r2
 80065b2:	00db      	lsls	r3, r3, #3
 80065b4:	461a      	mov	r2, r3
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	441a      	add	r2, r3
 80065ba:	f997 3026 	ldrsb.w	r3, [r7, #38]	@ 0x26
 80065be:	009b      	lsls	r3, r3, #2
 80065c0:	4413      	add	r3, r2
 80065c2:	ed93 7a00 	vldr	s14, [r3]
 80065c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80065ca:	edc7 7a08 	vstr	s15, [r7, #32]

						// calculate tan(phi) correcting sign to ensure the smaller solution is used
						tanphi = 1.0F / (fabs(cot2phi) + sqrtf(1.0F + cot2phi * cot2phi));
 80065ce:	edd7 7a08 	vldr	s15, [r7, #32]
 80065d2:	eef0 7ae7 	vabs.f32	s15, s15
 80065d6:	ee17 0a90 	vmov	r0, s15
 80065da:	f7f9 ff8d 	bl	80004f8 <__aeabi_f2d>
 80065de:	4604      	mov	r4, r0
 80065e0:	460d      	mov	r5, r1
 80065e2:	edd7 7a08 	vldr	s15, [r7, #32]
 80065e6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80065ea:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80065ee:	ee77 7a87 	vadd.f32	s15, s15, s14
 80065f2:	eeb0 0a67 	vmov.f32	s0, s15
 80065f6:	f00b f8e3 	bl	80117c0 <sqrtf>
 80065fa:	ee10 3a10 	vmov	r3, s0
 80065fe:	4618      	mov	r0, r3
 8006600:	f7f9 ff7a 	bl	80004f8 <__aeabi_f2d>
 8006604:	4602      	mov	r2, r0
 8006606:	460b      	mov	r3, r1
 8006608:	4620      	mov	r0, r4
 800660a:	4629      	mov	r1, r5
 800660c:	f7f9 fe16 	bl	800023c <__adddf3>
 8006610:	4602      	mov	r2, r0
 8006612:	460b      	mov	r3, r1
 8006614:	f04f 0000 	mov.w	r0, #0
 8006618:	49d1      	ldr	r1, [pc, #836]	@ (8006960 <eigencompute+0x574>)
 800661a:	f7fa f8ef 	bl	80007fc <__aeabi_ddiv>
 800661e:	4602      	mov	r2, r0
 8006620:	460b      	mov	r3, r1
 8006622:	4610      	mov	r0, r2
 8006624:	4619      	mov	r1, r3
 8006626:	f7fa fa6f 	bl	8000b08 <__aeabi_d2f>
 800662a:	4603      	mov	r3, r0
 800662c:	62fb      	str	r3, [r7, #44]	@ 0x2c
						if (cot2phi < 0.0F) {
 800662e:	edd7 7a08 	vldr	s15, [r7, #32]
 8006632:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006636:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800663a:	d505      	bpl.n	8006648 <eigencompute+0x25c>
							tanphi = -tanphi;
 800663c:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8006640:	eef1 7a67 	vneg.f32	s15, s15
 8006644:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
						}

						// calculate the sine and cosine of the Jacobi rotation angle phi
						cosphi = 1.0F / sqrtf(1.0F + tanphi * tanphi);
 8006648:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800664c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8006650:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006654:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006658:	eeb0 0a67 	vmov.f32	s0, s15
 800665c:	f00b f8b0 	bl	80117c0 <sqrtf>
 8006660:	eeb0 7a40 	vmov.f32	s14, s0
 8006664:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006668:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800666c:	edc7 7a07 	vstr	s15, [r7, #28]
						sinphi = tanphi * cosphi;
 8006670:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8006674:	edd7 7a07 	vldr	s15, [r7, #28]
 8006678:	ee67 7a27 	vmul.f32	s15, s14, s15
 800667c:	edc7 7a06 	vstr	s15, [r7, #24]

						// calculate tan(phi/2)
						tanhalfphi = sinphi / (1.0F + cosphi);
 8006680:	edd7 7a07 	vldr	s15, [r7, #28]
 8006684:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006688:	ee37 7a87 	vadd.f32	s14, s15, s14
 800668c:	edd7 6a06 	vldr	s13, [r7, #24]
 8006690:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006694:	edc7 7a05 	vstr	s15, [r7, #20]

						// set tmp = tan(phi) times current matrix element used in update of leading diagonal elements
						ftmp = tanphi * A[ir][ic];
 8006698:	f997 2027 	ldrsb.w	r2, [r7, #39]	@ 0x27
 800669c:	4613      	mov	r3, r2
 800669e:	009b      	lsls	r3, r3, #2
 80066a0:	4413      	add	r3, r2
 80066a2:	00db      	lsls	r3, r3, #3
 80066a4:	461a      	mov	r2, r3
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	441a      	add	r2, r3
 80066aa:	f997 3026 	ldrsb.w	r3, [r7, #38]	@ 0x26
 80066ae:	009b      	lsls	r3, r3, #2
 80066b0:	4413      	add	r3, r2
 80066b2:	edd3 7a00 	vldr	s15, [r3]
 80066b6:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 80066ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80066be:	edc7 7a04 	vstr	s15, [r7, #16]

						// apply the jacobi rotation to diagonal elements [ir][ir] and [ic][ic] stored in the eigenvalue array
						// eigval[ir] = eigval[ir] - tan(phi) *  A[ir][ic]
						eigval[ir] -= ftmp;
 80066c2:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80066c6:	009b      	lsls	r3, r3, #2
 80066c8:	68ba      	ldr	r2, [r7, #8]
 80066ca:	4413      	add	r3, r2
 80066cc:	ed93 7a00 	vldr	s14, [r3]
 80066d0:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80066d4:	009b      	lsls	r3, r3, #2
 80066d6:	68ba      	ldr	r2, [r7, #8]
 80066d8:	4413      	add	r3, r2
 80066da:	edd7 7a04 	vldr	s15, [r7, #16]
 80066de:	ee77 7a67 	vsub.f32	s15, s14, s15
 80066e2:	edc3 7a00 	vstr	s15, [r3]
						// eigval[ic] = eigval[ic] + tan(phi) * A[ir][ic]
						eigval[ic] += ftmp;
 80066e6:	f997 3026 	ldrsb.w	r3, [r7, #38]	@ 0x26
 80066ea:	009b      	lsls	r3, r3, #2
 80066ec:	68ba      	ldr	r2, [r7, #8]
 80066ee:	4413      	add	r3, r2
 80066f0:	ed93 7a00 	vldr	s14, [r3]
 80066f4:	f997 3026 	ldrsb.w	r3, [r7, #38]	@ 0x26
 80066f8:	009b      	lsls	r3, r3, #2
 80066fa:	68ba      	ldr	r2, [r7, #8]
 80066fc:	4413      	add	r3, r2
 80066fe:	edd7 7a04 	vldr	s15, [r7, #16]
 8006702:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006706:	edc3 7a00 	vstr	s15, [r3]

						// by definition, applying the jacobi rotation on element ir, ic results in 0.0
						A[ir][ic] = 0.0F;
 800670a:	f997 2027 	ldrsb.w	r2, [r7, #39]	@ 0x27
 800670e:	4613      	mov	r3, r2
 8006710:	009b      	lsls	r3, r3, #2
 8006712:	4413      	add	r3, r2
 8006714:	00db      	lsls	r3, r3, #3
 8006716:	461a      	mov	r2, r3
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	441a      	add	r2, r3
 800671c:	f997 3026 	ldrsb.w	r3, [r7, #38]	@ 0x26
 8006720:	009b      	lsls	r3, r3, #2
 8006722:	4413      	add	r3, r2
 8006724:	f04f 0200 	mov.w	r2, #0
 8006728:	601a      	str	r2, [r3, #0]

						// apply the jacobi rotation to all elements of the eigenvector matrix
						for (j = 0; j < n; j++) {
 800672a:	2300      	movs	r3, #0
 800672c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8006730:	e07e      	b.n	8006830 <eigencompute+0x444>
							// store eigvec[j][ir]
							ftmp = eigvec[j][ir];
 8006732:	f997 2025 	ldrsb.w	r2, [r7, #37]	@ 0x25
 8006736:	4613      	mov	r3, r2
 8006738:	009b      	lsls	r3, r3, #2
 800673a:	4413      	add	r3, r2
 800673c:	00db      	lsls	r3, r3, #3
 800673e:	461a      	mov	r2, r3
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	441a      	add	r2, r3
 8006744:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006748:	009b      	lsls	r3, r3, #2
 800674a:	4413      	add	r3, r2
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	613b      	str	r3, [r7, #16]
							// eigvec[j][ir] = eigvec[j][ir] - sin(phi) * (eigvec[j][ic] + tan(phi/2) * eigvec[j][ir])
							eigvec[j][ir] = ftmp - sinphi * (eigvec[j][ic] + tanhalfphi * ftmp);
 8006750:	f997 2025 	ldrsb.w	r2, [r7, #37]	@ 0x25
 8006754:	4613      	mov	r3, r2
 8006756:	009b      	lsls	r3, r3, #2
 8006758:	4413      	add	r3, r2
 800675a:	00db      	lsls	r3, r3, #3
 800675c:	461a      	mov	r2, r3
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	441a      	add	r2, r3
 8006762:	f997 3026 	ldrsb.w	r3, [r7, #38]	@ 0x26
 8006766:	009b      	lsls	r3, r3, #2
 8006768:	4413      	add	r3, r2
 800676a:	ed93 7a00 	vldr	s14, [r3]
 800676e:	edd7 6a05 	vldr	s13, [r7, #20]
 8006772:	edd7 7a04 	vldr	s15, [r7, #16]
 8006776:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800677a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800677e:	edd7 7a06 	vldr	s15, [r7, #24]
 8006782:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006786:	f997 2025 	ldrsb.w	r2, [r7, #37]	@ 0x25
 800678a:	4613      	mov	r3, r2
 800678c:	009b      	lsls	r3, r3, #2
 800678e:	4413      	add	r3, r2
 8006790:	00db      	lsls	r3, r3, #3
 8006792:	461a      	mov	r2, r3
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	441a      	add	r2, r3
 8006798:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800679c:	ed97 7a04 	vldr	s14, [r7, #16]
 80067a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80067a4:	009b      	lsls	r3, r3, #2
 80067a6:	4413      	add	r3, r2
 80067a8:	edc3 7a00 	vstr	s15, [r3]
							// eigvec[j][ic] = eigvec[j][ic] + sin(phi) * (eigvec[j][ir] - tan(phi/2) * eigvec[j][ic])
							eigvec[j][ic] = eigvec[j][ic] + sinphi * (ftmp - tanhalfphi * eigvec[j][ic]);
 80067ac:	f997 2025 	ldrsb.w	r2, [r7, #37]	@ 0x25
 80067b0:	4613      	mov	r3, r2
 80067b2:	009b      	lsls	r3, r3, #2
 80067b4:	4413      	add	r3, r2
 80067b6:	00db      	lsls	r3, r3, #3
 80067b8:	461a      	mov	r2, r3
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	441a      	add	r2, r3
 80067be:	f997 3026 	ldrsb.w	r3, [r7, #38]	@ 0x26
 80067c2:	009b      	lsls	r3, r3, #2
 80067c4:	4413      	add	r3, r2
 80067c6:	ed93 7a00 	vldr	s14, [r3]
 80067ca:	f997 2025 	ldrsb.w	r2, [r7, #37]	@ 0x25
 80067ce:	4613      	mov	r3, r2
 80067d0:	009b      	lsls	r3, r3, #2
 80067d2:	4413      	add	r3, r2
 80067d4:	00db      	lsls	r3, r3, #3
 80067d6:	461a      	mov	r2, r3
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	441a      	add	r2, r3
 80067dc:	f997 3026 	ldrsb.w	r3, [r7, #38]	@ 0x26
 80067e0:	009b      	lsls	r3, r3, #2
 80067e2:	4413      	add	r3, r2
 80067e4:	edd3 6a00 	vldr	s13, [r3]
 80067e8:	edd7 7a05 	vldr	s15, [r7, #20]
 80067ec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80067f0:	edd7 6a04 	vldr	s13, [r7, #16]
 80067f4:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80067f8:	edd7 7a06 	vldr	s15, [r7, #24]
 80067fc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006800:	f997 2025 	ldrsb.w	r2, [r7, #37]	@ 0x25
 8006804:	4613      	mov	r3, r2
 8006806:	009b      	lsls	r3, r3, #2
 8006808:	4413      	add	r3, r2
 800680a:	00db      	lsls	r3, r3, #3
 800680c:	461a      	mov	r2, r3
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	441a      	add	r2, r3
 8006812:	f997 3026 	ldrsb.w	r3, [r7, #38]	@ 0x26
 8006816:	ee77 7a27 	vadd.f32	s15, s14, s15
 800681a:	009b      	lsls	r3, r3, #2
 800681c:	4413      	add	r3, r2
 800681e:	edc3 7a00 	vstr	s15, [r3]
						for (j = 0; j < n; j++) {
 8006822:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8006826:	b2db      	uxtb	r3, r3
 8006828:	3301      	adds	r3, #1
 800682a:	b2db      	uxtb	r3, r3
 800682c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8006830:	f997 2025 	ldrsb.w	r2, [r7, #37]	@ 0x25
 8006834:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006838:	429a      	cmp	r2, r3
 800683a:	f6ff af7a 	blt.w	8006732 <eigencompute+0x346>
						}

						// apply the jacobi rotation only to those elements of matrix m that can change
						for (j = 0; j <= ir - 1; j++) {
 800683e:	2300      	movs	r3, #0
 8006840:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8006844:	e07e      	b.n	8006944 <eigencompute+0x558>
							// store A[j][ir]
							ftmp = A[j][ir];
 8006846:	f997 2025 	ldrsb.w	r2, [r7, #37]	@ 0x25
 800684a:	4613      	mov	r3, r2
 800684c:	009b      	lsls	r3, r3, #2
 800684e:	4413      	add	r3, r2
 8006850:	00db      	lsls	r3, r3, #3
 8006852:	461a      	mov	r2, r3
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	441a      	add	r2, r3
 8006858:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800685c:	009b      	lsls	r3, r3, #2
 800685e:	4413      	add	r3, r2
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	613b      	str	r3, [r7, #16]
							// A[j][ir] = A[j][ir] - sin(phi) * (A[j][ic] + tan(phi/2) * A[j][ir])
							A[j][ir] = ftmp - sinphi * (A[j][ic] + tanhalfphi * ftmp);
 8006864:	f997 2025 	ldrsb.w	r2, [r7, #37]	@ 0x25
 8006868:	4613      	mov	r3, r2
 800686a:	009b      	lsls	r3, r3, #2
 800686c:	4413      	add	r3, r2
 800686e:	00db      	lsls	r3, r3, #3
 8006870:	461a      	mov	r2, r3
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	441a      	add	r2, r3
 8006876:	f997 3026 	ldrsb.w	r3, [r7, #38]	@ 0x26
 800687a:	009b      	lsls	r3, r3, #2
 800687c:	4413      	add	r3, r2
 800687e:	ed93 7a00 	vldr	s14, [r3]
 8006882:	edd7 6a05 	vldr	s13, [r7, #20]
 8006886:	edd7 7a04 	vldr	s15, [r7, #16]
 800688a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800688e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006892:	edd7 7a06 	vldr	s15, [r7, #24]
 8006896:	ee67 7a27 	vmul.f32	s15, s14, s15
 800689a:	f997 2025 	ldrsb.w	r2, [r7, #37]	@ 0x25
 800689e:	4613      	mov	r3, r2
 80068a0:	009b      	lsls	r3, r3, #2
 80068a2:	4413      	add	r3, r2
 80068a4:	00db      	lsls	r3, r3, #3
 80068a6:	461a      	mov	r2, r3
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	441a      	add	r2, r3
 80068ac:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80068b0:	ed97 7a04 	vldr	s14, [r7, #16]
 80068b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80068b8:	009b      	lsls	r3, r3, #2
 80068ba:	4413      	add	r3, r2
 80068bc:	edc3 7a00 	vstr	s15, [r3]
							// A[j][ic] = A[j][ic] + sin(phi) * (A[j][ir] - tan(phi/2) * A[j][ic])
							A[j][ic] = A[j][ic] + sinphi * (ftmp - tanhalfphi * A[j][ic]);
 80068c0:	f997 2025 	ldrsb.w	r2, [r7, #37]	@ 0x25
 80068c4:	4613      	mov	r3, r2
 80068c6:	009b      	lsls	r3, r3, #2
 80068c8:	4413      	add	r3, r2
 80068ca:	00db      	lsls	r3, r3, #3
 80068cc:	461a      	mov	r2, r3
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	441a      	add	r2, r3
 80068d2:	f997 3026 	ldrsb.w	r3, [r7, #38]	@ 0x26
 80068d6:	009b      	lsls	r3, r3, #2
 80068d8:	4413      	add	r3, r2
 80068da:	ed93 7a00 	vldr	s14, [r3]
 80068de:	f997 2025 	ldrsb.w	r2, [r7, #37]	@ 0x25
 80068e2:	4613      	mov	r3, r2
 80068e4:	009b      	lsls	r3, r3, #2
 80068e6:	4413      	add	r3, r2
 80068e8:	00db      	lsls	r3, r3, #3
 80068ea:	461a      	mov	r2, r3
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	441a      	add	r2, r3
 80068f0:	f997 3026 	ldrsb.w	r3, [r7, #38]	@ 0x26
 80068f4:	009b      	lsls	r3, r3, #2
 80068f6:	4413      	add	r3, r2
 80068f8:	edd3 6a00 	vldr	s13, [r3]
 80068fc:	edd7 7a05 	vldr	s15, [r7, #20]
 8006900:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006904:	edd7 6a04 	vldr	s13, [r7, #16]
 8006908:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800690c:	edd7 7a06 	vldr	s15, [r7, #24]
 8006910:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006914:	f997 2025 	ldrsb.w	r2, [r7, #37]	@ 0x25
 8006918:	4613      	mov	r3, r2
 800691a:	009b      	lsls	r3, r3, #2
 800691c:	4413      	add	r3, r2
 800691e:	00db      	lsls	r3, r3, #3
 8006920:	461a      	mov	r2, r3
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	441a      	add	r2, r3
 8006926:	f997 3026 	ldrsb.w	r3, [r7, #38]	@ 0x26
 800692a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800692e:	009b      	lsls	r3, r3, #2
 8006930:	4413      	add	r3, r2
 8006932:	edc3 7a00 	vstr	s15, [r3]
						for (j = 0; j <= ir - 1; j++) {
 8006936:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 800693a:	b2db      	uxtb	r3, r3
 800693c:	3301      	adds	r3, #1
 800693e:	b2db      	uxtb	r3, r3
 8006940:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8006944:	f997 2027 	ldrsb.w	r2, [r7, #39]	@ 0x27
 8006948:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 800694c:	429a      	cmp	r2, r3
 800694e:	f73f af7a 	bgt.w	8006846 <eigencompute+0x45a>
						}
						for (j = ir + 1; j <= ic - 1; j++) {
 8006952:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006956:	3301      	adds	r3, #1
 8006958:	b2db      	uxtb	r3, r3
 800695a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 800695e:	e080      	b.n	8006a62 <eigencompute+0x676>
 8006960:	3ff00000 	.word	0x3ff00000
							// store A[ir][j]
							ftmp = A[ir][j];
 8006964:	f997 2027 	ldrsb.w	r2, [r7, #39]	@ 0x27
 8006968:	4613      	mov	r3, r2
 800696a:	009b      	lsls	r3, r3, #2
 800696c:	4413      	add	r3, r2
 800696e:	00db      	lsls	r3, r3, #3
 8006970:	461a      	mov	r2, r3
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	441a      	add	r2, r3
 8006976:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 800697a:	009b      	lsls	r3, r3, #2
 800697c:	4413      	add	r3, r2
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	613b      	str	r3, [r7, #16]
							// A[ir][j] = A[ir][j] - sin(phi) * (A[j][ic] + tan(phi/2) * A[ir][j])
							A[ir][j] = ftmp - sinphi * (A[j][ic] + tanhalfphi * ftmp);
 8006982:	f997 2025 	ldrsb.w	r2, [r7, #37]	@ 0x25
 8006986:	4613      	mov	r3, r2
 8006988:	009b      	lsls	r3, r3, #2
 800698a:	4413      	add	r3, r2
 800698c:	00db      	lsls	r3, r3, #3
 800698e:	461a      	mov	r2, r3
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	441a      	add	r2, r3
 8006994:	f997 3026 	ldrsb.w	r3, [r7, #38]	@ 0x26
 8006998:	009b      	lsls	r3, r3, #2
 800699a:	4413      	add	r3, r2
 800699c:	ed93 7a00 	vldr	s14, [r3]
 80069a0:	edd7 6a05 	vldr	s13, [r7, #20]
 80069a4:	edd7 7a04 	vldr	s15, [r7, #16]
 80069a8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80069ac:	ee37 7a27 	vadd.f32	s14, s14, s15
 80069b0:	edd7 7a06 	vldr	s15, [r7, #24]
 80069b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80069b8:	f997 2027 	ldrsb.w	r2, [r7, #39]	@ 0x27
 80069bc:	4613      	mov	r3, r2
 80069be:	009b      	lsls	r3, r3, #2
 80069c0:	4413      	add	r3, r2
 80069c2:	00db      	lsls	r3, r3, #3
 80069c4:	461a      	mov	r2, r3
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	441a      	add	r2, r3
 80069ca:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 80069ce:	ed97 7a04 	vldr	s14, [r7, #16]
 80069d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80069d6:	009b      	lsls	r3, r3, #2
 80069d8:	4413      	add	r3, r2
 80069da:	edc3 7a00 	vstr	s15, [r3]
							// A[j][ic] = A[j][ic] + sin(phi) * (A[ir][j] - tan(phi/2) * A[j][ic])
							A[j][ic] = A[j][ic] + sinphi * (ftmp - tanhalfphi * A[j][ic]);
 80069de:	f997 2025 	ldrsb.w	r2, [r7, #37]	@ 0x25
 80069e2:	4613      	mov	r3, r2
 80069e4:	009b      	lsls	r3, r3, #2
 80069e6:	4413      	add	r3, r2
 80069e8:	00db      	lsls	r3, r3, #3
 80069ea:	461a      	mov	r2, r3
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	441a      	add	r2, r3
 80069f0:	f997 3026 	ldrsb.w	r3, [r7, #38]	@ 0x26
 80069f4:	009b      	lsls	r3, r3, #2
 80069f6:	4413      	add	r3, r2
 80069f8:	ed93 7a00 	vldr	s14, [r3]
 80069fc:	f997 2025 	ldrsb.w	r2, [r7, #37]	@ 0x25
 8006a00:	4613      	mov	r3, r2
 8006a02:	009b      	lsls	r3, r3, #2
 8006a04:	4413      	add	r3, r2
 8006a06:	00db      	lsls	r3, r3, #3
 8006a08:	461a      	mov	r2, r3
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	441a      	add	r2, r3
 8006a0e:	f997 3026 	ldrsb.w	r3, [r7, #38]	@ 0x26
 8006a12:	009b      	lsls	r3, r3, #2
 8006a14:	4413      	add	r3, r2
 8006a16:	edd3 6a00 	vldr	s13, [r3]
 8006a1a:	edd7 7a05 	vldr	s15, [r7, #20]
 8006a1e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006a22:	edd7 6a04 	vldr	s13, [r7, #16]
 8006a26:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8006a2a:	edd7 7a06 	vldr	s15, [r7, #24]
 8006a2e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006a32:	f997 2025 	ldrsb.w	r2, [r7, #37]	@ 0x25
 8006a36:	4613      	mov	r3, r2
 8006a38:	009b      	lsls	r3, r3, #2
 8006a3a:	4413      	add	r3, r2
 8006a3c:	00db      	lsls	r3, r3, #3
 8006a3e:	461a      	mov	r2, r3
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	441a      	add	r2, r3
 8006a44:	f997 3026 	ldrsb.w	r3, [r7, #38]	@ 0x26
 8006a48:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006a4c:	009b      	lsls	r3, r3, #2
 8006a4e:	4413      	add	r3, r2
 8006a50:	edc3 7a00 	vstr	s15, [r3]
						for (j = ir + 1; j <= ic - 1; j++) {
 8006a54:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8006a58:	b2db      	uxtb	r3, r3
 8006a5a:	3301      	adds	r3, #1
 8006a5c:	b2db      	uxtb	r3, r3
 8006a5e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8006a62:	f997 2026 	ldrsb.w	r2, [r7, #38]	@ 0x26
 8006a66:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8006a6a:	429a      	cmp	r2, r3
 8006a6c:	f73f af7a 	bgt.w	8006964 <eigencompute+0x578>
						}
						for (j = ic + 1; j < n; j++) {
 8006a70:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006a74:	3301      	adds	r3, #1
 8006a76:	b2db      	uxtb	r3, r3
 8006a78:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8006a7c:	e07e      	b.n	8006b7c <eigencompute+0x790>
							// store A[ir][j]
							ftmp = A[ir][j];
 8006a7e:	f997 2027 	ldrsb.w	r2, [r7, #39]	@ 0x27
 8006a82:	4613      	mov	r3, r2
 8006a84:	009b      	lsls	r3, r3, #2
 8006a86:	4413      	add	r3, r2
 8006a88:	00db      	lsls	r3, r3, #3
 8006a8a:	461a      	mov	r2, r3
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	441a      	add	r2, r3
 8006a90:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8006a94:	009b      	lsls	r3, r3, #2
 8006a96:	4413      	add	r3, r2
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	613b      	str	r3, [r7, #16]
							// A[ir][j] = A[ir][j] - sin(phi) * (A[ic][j] + tan(phi/2) * A[ir][j])
							A[ir][j] = ftmp - sinphi * (A[ic][j] + tanhalfphi * ftmp);
 8006a9c:	f997 2026 	ldrsb.w	r2, [r7, #38]	@ 0x26
 8006aa0:	4613      	mov	r3, r2
 8006aa2:	009b      	lsls	r3, r3, #2
 8006aa4:	4413      	add	r3, r2
 8006aa6:	00db      	lsls	r3, r3, #3
 8006aa8:	461a      	mov	r2, r3
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	441a      	add	r2, r3
 8006aae:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8006ab2:	009b      	lsls	r3, r3, #2
 8006ab4:	4413      	add	r3, r2
 8006ab6:	ed93 7a00 	vldr	s14, [r3]
 8006aba:	edd7 6a05 	vldr	s13, [r7, #20]
 8006abe:	edd7 7a04 	vldr	s15, [r7, #16]
 8006ac2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006ac6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006aca:	edd7 7a06 	vldr	s15, [r7, #24]
 8006ace:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ad2:	f997 2027 	ldrsb.w	r2, [r7, #39]	@ 0x27
 8006ad6:	4613      	mov	r3, r2
 8006ad8:	009b      	lsls	r3, r3, #2
 8006ada:	4413      	add	r3, r2
 8006adc:	00db      	lsls	r3, r3, #3
 8006ade:	461a      	mov	r2, r3
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	441a      	add	r2, r3
 8006ae4:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8006ae8:	ed97 7a04 	vldr	s14, [r7, #16]
 8006aec:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006af0:	009b      	lsls	r3, r3, #2
 8006af2:	4413      	add	r3, r2
 8006af4:	edc3 7a00 	vstr	s15, [r3]
							// A[ic][j] = A[ic][j] + sin(phi) * (A[ir][j] - tan(phi/2) * A[ic][j])
							A[ic][j] = A[ic][j] + sinphi * (ftmp - tanhalfphi * A[ic][j]);
 8006af8:	f997 2026 	ldrsb.w	r2, [r7, #38]	@ 0x26
 8006afc:	4613      	mov	r3, r2
 8006afe:	009b      	lsls	r3, r3, #2
 8006b00:	4413      	add	r3, r2
 8006b02:	00db      	lsls	r3, r3, #3
 8006b04:	461a      	mov	r2, r3
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	441a      	add	r2, r3
 8006b0a:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8006b0e:	009b      	lsls	r3, r3, #2
 8006b10:	4413      	add	r3, r2
 8006b12:	ed93 7a00 	vldr	s14, [r3]
 8006b16:	f997 2026 	ldrsb.w	r2, [r7, #38]	@ 0x26
 8006b1a:	4613      	mov	r3, r2
 8006b1c:	009b      	lsls	r3, r3, #2
 8006b1e:	4413      	add	r3, r2
 8006b20:	00db      	lsls	r3, r3, #3
 8006b22:	461a      	mov	r2, r3
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	441a      	add	r2, r3
 8006b28:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8006b2c:	009b      	lsls	r3, r3, #2
 8006b2e:	4413      	add	r3, r2
 8006b30:	edd3 6a00 	vldr	s13, [r3]
 8006b34:	edd7 7a05 	vldr	s15, [r7, #20]
 8006b38:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006b3c:	edd7 6a04 	vldr	s13, [r7, #16]
 8006b40:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8006b44:	edd7 7a06 	vldr	s15, [r7, #24]
 8006b48:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006b4c:	f997 2026 	ldrsb.w	r2, [r7, #38]	@ 0x26
 8006b50:	4613      	mov	r3, r2
 8006b52:	009b      	lsls	r3, r3, #2
 8006b54:	4413      	add	r3, r2
 8006b56:	00db      	lsls	r3, r3, #3
 8006b58:	461a      	mov	r2, r3
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	441a      	add	r2, r3
 8006b5e:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8006b62:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006b66:	009b      	lsls	r3, r3, #2
 8006b68:	4413      	add	r3, r2
 8006b6a:	edc3 7a00 	vstr	s15, [r3]
						for (j = ic + 1; j < n; j++) {
 8006b6e:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8006b72:	b2db      	uxtb	r3, r3
 8006b74:	3301      	adds	r3, #1
 8006b76:	b2db      	uxtb	r3, r3
 8006b78:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8006b7c:	f997 2025 	ldrsb.w	r2, [r7, #37]	@ 0x25
 8006b80:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006b84:	429a      	cmp	r2, r3
 8006b86:	f6ff af7a 	blt.w	8006a7e <eigencompute+0x692>
				for (ic = ir + 1; ic < n; ic++) {
 8006b8a:	f997 3026 	ldrsb.w	r3, [r7, #38]	@ 0x26
 8006b8e:	b2db      	uxtb	r3, r3
 8006b90:	3301      	adds	r3, #1
 8006b92:	b2db      	uxtb	r3, r3
 8006b94:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8006b98:	f997 2026 	ldrsb.w	r2, [r7, #38]	@ 0x26
 8006b9c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006ba0:	429a      	cmp	r2, r3
 8006ba2:	f6ff acd6 	blt.w	8006552 <eigencompute+0x166>
			for (ir = 0; ir < n - 1; ir++) {
 8006ba6:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006baa:	b2db      	uxtb	r3, r3
 8006bac:	3301      	adds	r3, #1
 8006bae:	b2db      	uxtb	r3, r3
 8006bb0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8006bb4:	f997 2027 	ldrsb.w	r2, [r7, #39]	@ 0x27
 8006bb8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006bbc:	3b01      	subs	r3, #1
 8006bbe:	429a      	cmp	r2, r3
 8006bc0:	f6ff acc0 	blt.w	8006544 <eigencompute+0x158>
						}
					}   // end of test for matrix element already zero
				}   // end of loop over columns
			}   // end of loop over rows
		}  // end of test for non-zero residue
	} while ((residue > 0.0F) && (ctr++ < NITERATIONS)); // end of main loop
 8006bc4:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8006bc8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006bcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006bd0:	dc00      	bgt.n	8006bd4 <eigencompute+0x7e8>
}
 8006bd2:	e009      	b.n	8006be8 <eigencompute+0x7fc>
	} while ((residue > 0.0F) && (ctr++ < NITERATIONS)); // end of main loop
 8006bd4:	f997 3024 	ldrsb.w	r3, [r7, #36]	@ 0x24
 8006bd8:	b2da      	uxtb	r2, r3
 8006bda:	3201      	adds	r2, #1
 8006bdc:	b2d2      	uxtb	r2, r2
 8006bde:	f887 2024 	strb.w	r2, [r7, #36]	@ 0x24
 8006be2:	2b0e      	cmp	r3, #14
 8006be4:	f77f ac62 	ble.w	80064ac <eigencompute+0xc0>
}
 8006be8:	bf00      	nop
 8006bea:	3730      	adds	r7, #48	@ 0x30
 8006bec:	46bd      	mov	sp, r7
 8006bee:	bdb0      	pop	{r4, r5, r7, pc}

08006bf0 <fmatrixAeqInvA>:

// function uses Gauss-Jordan elimination to compute the inverse of matrix A in situ
// on exit, A is replaced with its inverse
void fmatrixAeqInvA(float *A[], int8_t iColInd[], int8_t iRowInd[], int8_t iPivot[], int8_t isize)
{
 8006bf0:	b580      	push	{r7, lr}
 8006bf2:	b08a      	sub	sp, #40	@ 0x28
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	60f8      	str	r0, [r7, #12]
 8006bf8:	60b9      	str	r1, [r7, #8]
 8006bfa:	607a      	str	r2, [r7, #4]
 8006bfc:	603b      	str	r3, [r7, #0]
	float ftmp;						// temporary variable used in swaps
	int8_t i, j, k, l, m;			// index counters
	int8_t iPivotRow, iPivotCol;	// row and column of pivot element

	// to avoid compiler warnings
	iPivotRow = iPivotCol = 0;
 8006bfe:	2300      	movs	r3, #0
 8006c00:	777b      	strb	r3, [r7, #29]
 8006c02:	7f7b      	ldrb	r3, [r7, #29]
 8006c04:	77bb      	strb	r3, [r7, #30]

	// initialize the pivot array to 0
	for (j = 0; j < isize; j++) {
 8006c06:	2300      	movs	r3, #0
 8006c08:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006c0c:	e00c      	b.n	8006c28 <fmatrixAeqInvA+0x38>
		iPivot[j] = 0;
 8006c0e:	f997 3022 	ldrsb.w	r3, [r7, #34]	@ 0x22
 8006c12:	683a      	ldr	r2, [r7, #0]
 8006c14:	4413      	add	r3, r2
 8006c16:	2200      	movs	r2, #0
 8006c18:	701a      	strb	r2, [r3, #0]
	for (j = 0; j < isize; j++) {
 8006c1a:	f997 3022 	ldrsb.w	r3, [r7, #34]	@ 0x22
 8006c1e:	b2db      	uxtb	r3, r3
 8006c20:	3301      	adds	r3, #1
 8006c22:	b2db      	uxtb	r3, r3
 8006c24:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006c28:	f997 2022 	ldrsb.w	r2, [r7, #34]	@ 0x22
 8006c2c:	f997 3030 	ldrsb.w	r3, [r7, #48]	@ 0x30
 8006c30:	429a      	cmp	r2, r3
 8006c32:	dbec      	blt.n	8006c0e <fmatrixAeqInvA+0x1e>
	}

	// main loop i over the dimensions of the square matrix A
	for (i = 0; i < isize; i++) {
 8006c34:	2300      	movs	r3, #0
 8006c36:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006c3a:	e1a1      	b.n	8006f80 <fmatrixAeqInvA+0x390>
		// zero the largest element found for pivoting
		largest = 0.0F;
 8006c3c:	f04f 0300 	mov.w	r3, #0
 8006c40:	627b      	str	r3, [r7, #36]	@ 0x24
		// loop over candidate rows j
		for (j = 0; j < isize; j++) {
 8006c42:	2300      	movs	r3, #0
 8006c44:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006c48:	e063      	b.n	8006d12 <fmatrixAeqInvA+0x122>
			// check if row j has been previously pivoted
			if (iPivot[j] != 1) {
 8006c4a:	f997 3022 	ldrsb.w	r3, [r7, #34]	@ 0x22
 8006c4e:	683a      	ldr	r2, [r7, #0]
 8006c50:	4413      	add	r3, r2
 8006c52:	f993 3000 	ldrsb.w	r3, [r3]
 8006c56:	2b01      	cmp	r3, #1
 8006c58:	d054      	beq.n	8006d04 <fmatrixAeqInvA+0x114>
				// loop over candidate columns k
				for (k = 0; k < isize; k++) {
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
 8006c60:	e04a      	b.n	8006cf8 <fmatrixAeqInvA+0x108>
					// check if column k has previously been pivoted
					if (iPivot[k] == 0) {
 8006c62:	f997 3021 	ldrsb.w	r3, [r7, #33]	@ 0x21
 8006c66:	683a      	ldr	r2, [r7, #0]
 8006c68:	4413      	add	r3, r2
 8006c6a:	f993 3000 	ldrsb.w	r3, [r3]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d12b      	bne.n	8006cca <fmatrixAeqInvA+0xda>
						// check if the pivot element is the largest found so far
						if (fabs(A[j][k]) >= largest) {
 8006c72:	f997 3022 	ldrsb.w	r3, [r7, #34]	@ 0x22
 8006c76:	009b      	lsls	r3, r3, #2
 8006c78:	68fa      	ldr	r2, [r7, #12]
 8006c7a:	4413      	add	r3, r2
 8006c7c:	681a      	ldr	r2, [r3, #0]
 8006c7e:	f997 3021 	ldrsb.w	r3, [r7, #33]	@ 0x21
 8006c82:	009b      	lsls	r3, r3, #2
 8006c84:	4413      	add	r3, r2
 8006c86:	edd3 7a00 	vldr	s15, [r3]
 8006c8a:	eef0 7ae7 	vabs.f32	s15, s15
 8006c8e:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8006c92:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006c96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c9a:	d826      	bhi.n	8006cea <fmatrixAeqInvA+0xfa>
							// and store this location as the current best candidate for pivoting
							iPivotRow = j;
 8006c9c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8006ca0:	77bb      	strb	r3, [r7, #30]
							iPivotCol = k;
 8006ca2:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8006ca6:	777b      	strb	r3, [r7, #29]
							largest = (float) fabs(A[iPivotRow][iPivotCol]);
 8006ca8:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8006cac:	009b      	lsls	r3, r3, #2
 8006cae:	68fa      	ldr	r2, [r7, #12]
 8006cb0:	4413      	add	r3, r2
 8006cb2:	681a      	ldr	r2, [r3, #0]
 8006cb4:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8006cb8:	009b      	lsls	r3, r3, #2
 8006cba:	4413      	add	r3, r2
 8006cbc:	edd3 7a00 	vldr	s15, [r3]
 8006cc0:	eef0 7ae7 	vabs.f32	s15, s15
 8006cc4:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
 8006cc8:	e00f      	b.n	8006cea <fmatrixAeqInvA+0xfa>
						}
					} else if (iPivot[k] > 1) {
 8006cca:	f997 3021 	ldrsb.w	r3, [r7, #33]	@ 0x21
 8006cce:	683a      	ldr	r2, [r7, #0]
 8006cd0:	4413      	add	r3, r2
 8006cd2:	f993 3000 	ldrsb.w	r3, [r3]
 8006cd6:	2b01      	cmp	r3, #1
 8006cd8:	dd07      	ble.n	8006cea <fmatrixAeqInvA+0xfa>
						// zero determinant situation: exit with identity matrix
						fmatrixAeqI(A, isize);
 8006cda:	f997 3030 	ldrsb.w	r3, [r7, #48]	@ 0x30
 8006cde:	b21b      	sxth	r3, r3
 8006ce0:	4619      	mov	r1, r3
 8006ce2:	68f8      	ldr	r0, [r7, #12]
 8006ce4:	f7ff f939 	bl	8005f5a <fmatrixAeqI>
						return;
 8006ce8:	e1b6      	b.n	8007058 <fmatrixAeqInvA+0x468>
				for (k = 0; k < isize; k++) {
 8006cea:	f997 3021 	ldrsb.w	r3, [r7, #33]	@ 0x21
 8006cee:	b2db      	uxtb	r3, r3
 8006cf0:	3301      	adds	r3, #1
 8006cf2:	b2db      	uxtb	r3, r3
 8006cf4:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
 8006cf8:	f997 2021 	ldrsb.w	r2, [r7, #33]	@ 0x21
 8006cfc:	f997 3030 	ldrsb.w	r3, [r7, #48]	@ 0x30
 8006d00:	429a      	cmp	r2, r3
 8006d02:	dbae      	blt.n	8006c62 <fmatrixAeqInvA+0x72>
		for (j = 0; j < isize; j++) {
 8006d04:	f997 3022 	ldrsb.w	r3, [r7, #34]	@ 0x22
 8006d08:	b2db      	uxtb	r3, r3
 8006d0a:	3301      	adds	r3, #1
 8006d0c:	b2db      	uxtb	r3, r3
 8006d0e:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006d12:	f997 2022 	ldrsb.w	r2, [r7, #34]	@ 0x22
 8006d16:	f997 3030 	ldrsb.w	r3, [r7, #48]	@ 0x30
 8006d1a:	429a      	cmp	r2, r3
 8006d1c:	db95      	blt.n	8006c4a <fmatrixAeqInvA+0x5a>
					}
				}
			}
		}
		// increment the entry in iPivot to denote it has been selected for pivoting
		iPivot[iPivotCol]++;
 8006d1e:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8006d22:	683a      	ldr	r2, [r7, #0]
 8006d24:	4413      	add	r3, r2
 8006d26:	f993 2000 	ldrsb.w	r2, [r3]
 8006d2a:	b2d2      	uxtb	r2, r2
 8006d2c:	3201      	adds	r2, #1
 8006d2e:	b2d2      	uxtb	r2, r2
 8006d30:	b252      	sxtb	r2, r2
 8006d32:	701a      	strb	r2, [r3, #0]

		// check the pivot rows iPivotRow and iPivotCol are not the same before swapping
		if (iPivotRow != iPivotCol) {
 8006d34:	f997 201e 	ldrsb.w	r2, [r7, #30]
 8006d38:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8006d3c:	429a      	cmp	r2, r3
 8006d3e:	d03e      	beq.n	8006dbe <fmatrixAeqInvA+0x1ce>
			// loop over columns l
			for (l = 0; l < isize; l++) {
 8006d40:	2300      	movs	r3, #0
 8006d42:	f887 3020 	strb.w	r3, [r7, #32]
 8006d46:	e034      	b.n	8006db2 <fmatrixAeqInvA+0x1c2>
				// and swap all elements of rows iPivotRow and iPivotCol
				ftmp = A[iPivotRow][l];
 8006d48:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8006d4c:	009b      	lsls	r3, r3, #2
 8006d4e:	68fa      	ldr	r2, [r7, #12]
 8006d50:	4413      	add	r3, r2
 8006d52:	681a      	ldr	r2, [r3, #0]
 8006d54:	f997 3020 	ldrsb.w	r3, [r7, #32]
 8006d58:	009b      	lsls	r3, r3, #2
 8006d5a:	4413      	add	r3, r2
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	61bb      	str	r3, [r7, #24]
				A[iPivotRow][l] = A[iPivotCol][l];
 8006d60:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8006d64:	009b      	lsls	r3, r3, #2
 8006d66:	68fa      	ldr	r2, [r7, #12]
 8006d68:	4413      	add	r3, r2
 8006d6a:	681a      	ldr	r2, [r3, #0]
 8006d6c:	f997 3020 	ldrsb.w	r3, [r7, #32]
 8006d70:	009b      	lsls	r3, r3, #2
 8006d72:	441a      	add	r2, r3
 8006d74:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8006d78:	009b      	lsls	r3, r3, #2
 8006d7a:	68f9      	ldr	r1, [r7, #12]
 8006d7c:	440b      	add	r3, r1
 8006d7e:	6819      	ldr	r1, [r3, #0]
 8006d80:	f997 3020 	ldrsb.w	r3, [r7, #32]
 8006d84:	009b      	lsls	r3, r3, #2
 8006d86:	440b      	add	r3, r1
 8006d88:	6812      	ldr	r2, [r2, #0]
 8006d8a:	601a      	str	r2, [r3, #0]
				A[iPivotCol][l] = ftmp;
 8006d8c:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8006d90:	009b      	lsls	r3, r3, #2
 8006d92:	68fa      	ldr	r2, [r7, #12]
 8006d94:	4413      	add	r3, r2
 8006d96:	681a      	ldr	r2, [r3, #0]
 8006d98:	f997 3020 	ldrsb.w	r3, [r7, #32]
 8006d9c:	009b      	lsls	r3, r3, #2
 8006d9e:	4413      	add	r3, r2
 8006da0:	69ba      	ldr	r2, [r7, #24]
 8006da2:	601a      	str	r2, [r3, #0]
			for (l = 0; l < isize; l++) {
 8006da4:	f997 3020 	ldrsb.w	r3, [r7, #32]
 8006da8:	b2db      	uxtb	r3, r3
 8006daa:	3301      	adds	r3, #1
 8006dac:	b2db      	uxtb	r3, r3
 8006dae:	f887 3020 	strb.w	r3, [r7, #32]
 8006db2:	f997 2020 	ldrsb.w	r2, [r7, #32]
 8006db6:	f997 3030 	ldrsb.w	r3, [r7, #48]	@ 0x30
 8006dba:	429a      	cmp	r2, r3
 8006dbc:	dbc4      	blt.n	8006d48 <fmatrixAeqInvA+0x158>
			}
		}

		// record that on the i-th iteration rows iPivotRow and iPivotCol were swapped
		iRowInd[i] = iPivotRow;
 8006dbe:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8006dc2:	687a      	ldr	r2, [r7, #4]
 8006dc4:	4413      	add	r3, r2
 8006dc6:	7fba      	ldrb	r2, [r7, #30]
 8006dc8:	701a      	strb	r2, [r3, #0]
		iColInd[i] = iPivotCol;
 8006dca:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8006dce:	68ba      	ldr	r2, [r7, #8]
 8006dd0:	4413      	add	r3, r2
 8006dd2:	7f7a      	ldrb	r2, [r7, #29]
 8006dd4:	701a      	strb	r2, [r3, #0]

		// check for zero on-diagonal element (singular matrix) and return with identity matrix if detected
		if (A[iPivotCol][iPivotCol] == 0.0F) {
 8006dd6:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8006dda:	009b      	lsls	r3, r3, #2
 8006ddc:	68fa      	ldr	r2, [r7, #12]
 8006dde:	4413      	add	r3, r2
 8006de0:	681a      	ldr	r2, [r3, #0]
 8006de2:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8006de6:	009b      	lsls	r3, r3, #2
 8006de8:	4413      	add	r3, r2
 8006dea:	edd3 7a00 	vldr	s15, [r3]
 8006dee:	eef5 7a40 	vcmp.f32	s15, #0.0
 8006df2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006df6:	d107      	bne.n	8006e08 <fmatrixAeqInvA+0x218>
			// zero determinant situation: exit with identity matrix
			fmatrixAeqI(A, isize);
 8006df8:	f997 3030 	ldrsb.w	r3, [r7, #48]	@ 0x30
 8006dfc:	b21b      	sxth	r3, r3
 8006dfe:	4619      	mov	r1, r3
 8006e00:	68f8      	ldr	r0, [r7, #12]
 8006e02:	f7ff f8aa 	bl	8005f5a <fmatrixAeqI>
			return;
 8006e06:	e127      	b.n	8007058 <fmatrixAeqInvA+0x468>
		}

		// calculate the reciprocal of the pivot element knowing it's non-zero
		recippiv = 1.0F / A[iPivotCol][iPivotCol];
 8006e08:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8006e0c:	009b      	lsls	r3, r3, #2
 8006e0e:	68fa      	ldr	r2, [r7, #12]
 8006e10:	4413      	add	r3, r2
 8006e12:	681a      	ldr	r2, [r3, #0]
 8006e14:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8006e18:	009b      	lsls	r3, r3, #2
 8006e1a:	4413      	add	r3, r2
 8006e1c:	ed93 7a00 	vldr	s14, [r3]
 8006e20:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006e24:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006e28:	edc7 7a05 	vstr	s15, [r7, #20]
		// by definition, the diagonal element normalizes to 1
		A[iPivotCol][iPivotCol] = 1.0F;
 8006e2c:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8006e30:	009b      	lsls	r3, r3, #2
 8006e32:	68fa      	ldr	r2, [r7, #12]
 8006e34:	4413      	add	r3, r2
 8006e36:	681a      	ldr	r2, [r3, #0]
 8006e38:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8006e3c:	009b      	lsls	r3, r3, #2
 8006e3e:	4413      	add	r3, r2
 8006e40:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8006e44:	601a      	str	r2, [r3, #0]
		// multiply all of row iPivotCol by the reciprocal of the pivot element including the diagonal element
		// the diagonal element A[iPivotCol][iPivotCol] now has value equal to the reciprocal of its previous value
		for (l = 0; l < isize; l++) {
 8006e46:	2300      	movs	r3, #0
 8006e48:	f887 3020 	strb.w	r3, [r7, #32]
 8006e4c:	e022      	b.n	8006e94 <fmatrixAeqInvA+0x2a4>
			A[iPivotCol][l] *= recippiv;
 8006e4e:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8006e52:	009b      	lsls	r3, r3, #2
 8006e54:	68fa      	ldr	r2, [r7, #12]
 8006e56:	4413      	add	r3, r2
 8006e58:	681a      	ldr	r2, [r3, #0]
 8006e5a:	f997 3020 	ldrsb.w	r3, [r7, #32]
 8006e5e:	009b      	lsls	r3, r3, #2
 8006e60:	4413      	add	r3, r2
 8006e62:	ed93 7a00 	vldr	s14, [r3]
 8006e66:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8006e6a:	009b      	lsls	r3, r3, #2
 8006e6c:	68fa      	ldr	r2, [r7, #12]
 8006e6e:	4413      	add	r3, r2
 8006e70:	681a      	ldr	r2, [r3, #0]
 8006e72:	f997 3020 	ldrsb.w	r3, [r7, #32]
 8006e76:	009b      	lsls	r3, r3, #2
 8006e78:	4413      	add	r3, r2
 8006e7a:	edd7 7a05 	vldr	s15, [r7, #20]
 8006e7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e82:	edc3 7a00 	vstr	s15, [r3]
		for (l = 0; l < isize; l++) {
 8006e86:	f997 3020 	ldrsb.w	r3, [r7, #32]
 8006e8a:	b2db      	uxtb	r3, r3
 8006e8c:	3301      	adds	r3, #1
 8006e8e:	b2db      	uxtb	r3, r3
 8006e90:	f887 3020 	strb.w	r3, [r7, #32]
 8006e94:	f997 2020 	ldrsb.w	r2, [r7, #32]
 8006e98:	f997 3030 	ldrsb.w	r3, [r7, #48]	@ 0x30
 8006e9c:	429a      	cmp	r2, r3
 8006e9e:	dbd6      	blt.n	8006e4e <fmatrixAeqInvA+0x25e>
		}
		// loop over all rows m of A
		for (m = 0; m < isize; m++) {
 8006ea0:	2300      	movs	r3, #0
 8006ea2:	77fb      	strb	r3, [r7, #31]
 8006ea4:	e05f      	b.n	8006f66 <fmatrixAeqInvA+0x376>
			if (m != iPivotCol) {
 8006ea6:	f997 201f 	ldrsb.w	r2, [r7, #31]
 8006eaa:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8006eae:	429a      	cmp	r2, r3
 8006eb0:	d053      	beq.n	8006f5a <fmatrixAeqInvA+0x36a>
				// scaling factor for this row m is in column iPivotCol
				scaling = A[m][iPivotCol];
 8006eb2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006eb6:	009b      	lsls	r3, r3, #2
 8006eb8:	68fa      	ldr	r2, [r7, #12]
 8006eba:	4413      	add	r3, r2
 8006ebc:	681a      	ldr	r2, [r3, #0]
 8006ebe:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8006ec2:	009b      	lsls	r3, r3, #2
 8006ec4:	4413      	add	r3, r2
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	613b      	str	r3, [r7, #16]
				// zero this element
				A[m][iPivotCol] = 0.0F;
 8006eca:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006ece:	009b      	lsls	r3, r3, #2
 8006ed0:	68fa      	ldr	r2, [r7, #12]
 8006ed2:	4413      	add	r3, r2
 8006ed4:	681a      	ldr	r2, [r3, #0]
 8006ed6:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8006eda:	009b      	lsls	r3, r3, #2
 8006edc:	4413      	add	r3, r2
 8006ede:	f04f 0200 	mov.w	r2, #0
 8006ee2:	601a      	str	r2, [r3, #0]
				// loop over all columns l of A and perform elimination
				for (l = 0; l < isize; l++) {
 8006ee4:	2300      	movs	r3, #0
 8006ee6:	f887 3020 	strb.w	r3, [r7, #32]
 8006eea:	e030      	b.n	8006f4e <fmatrixAeqInvA+0x35e>
					A[m][l] -= A[iPivotCol][l] * scaling;
 8006eec:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006ef0:	009b      	lsls	r3, r3, #2
 8006ef2:	68fa      	ldr	r2, [r7, #12]
 8006ef4:	4413      	add	r3, r2
 8006ef6:	681a      	ldr	r2, [r3, #0]
 8006ef8:	f997 3020 	ldrsb.w	r3, [r7, #32]
 8006efc:	009b      	lsls	r3, r3, #2
 8006efe:	4413      	add	r3, r2
 8006f00:	ed93 7a00 	vldr	s14, [r3]
 8006f04:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8006f08:	009b      	lsls	r3, r3, #2
 8006f0a:	68fa      	ldr	r2, [r7, #12]
 8006f0c:	4413      	add	r3, r2
 8006f0e:	681a      	ldr	r2, [r3, #0]
 8006f10:	f997 3020 	ldrsb.w	r3, [r7, #32]
 8006f14:	009b      	lsls	r3, r3, #2
 8006f16:	4413      	add	r3, r2
 8006f18:	edd3 6a00 	vldr	s13, [r3]
 8006f1c:	edd7 7a04 	vldr	s15, [r7, #16]
 8006f20:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006f24:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006f28:	009b      	lsls	r3, r3, #2
 8006f2a:	68fa      	ldr	r2, [r7, #12]
 8006f2c:	4413      	add	r3, r2
 8006f2e:	681a      	ldr	r2, [r3, #0]
 8006f30:	f997 3020 	ldrsb.w	r3, [r7, #32]
 8006f34:	009b      	lsls	r3, r3, #2
 8006f36:	4413      	add	r3, r2
 8006f38:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006f3c:	edc3 7a00 	vstr	s15, [r3]
				for (l = 0; l < isize; l++) {
 8006f40:	f997 3020 	ldrsb.w	r3, [r7, #32]
 8006f44:	b2db      	uxtb	r3, r3
 8006f46:	3301      	adds	r3, #1
 8006f48:	b2db      	uxtb	r3, r3
 8006f4a:	f887 3020 	strb.w	r3, [r7, #32]
 8006f4e:	f997 2020 	ldrsb.w	r2, [r7, #32]
 8006f52:	f997 3030 	ldrsb.w	r3, [r7, #48]	@ 0x30
 8006f56:	429a      	cmp	r2, r3
 8006f58:	dbc8      	blt.n	8006eec <fmatrixAeqInvA+0x2fc>
		for (m = 0; m < isize; m++) {
 8006f5a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006f5e:	b2db      	uxtb	r3, r3
 8006f60:	3301      	adds	r3, #1
 8006f62:	b2db      	uxtb	r3, r3
 8006f64:	77fb      	strb	r3, [r7, #31]
 8006f66:	f997 201f 	ldrsb.w	r2, [r7, #31]
 8006f6a:	f997 3030 	ldrsb.w	r3, [r7, #48]	@ 0x30
 8006f6e:	429a      	cmp	r2, r3
 8006f70:	db99      	blt.n	8006ea6 <fmatrixAeqInvA+0x2b6>
	for (i = 0; i < isize; i++) {
 8006f72:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8006f76:	b2db      	uxtb	r3, r3
 8006f78:	3301      	adds	r3, #1
 8006f7a:	b2db      	uxtb	r3, r3
 8006f7c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006f80:	f997 2023 	ldrsb.w	r2, [r7, #35]	@ 0x23
 8006f84:	f997 3030 	ldrsb.w	r3, [r7, #48]	@ 0x30
 8006f88:	429a      	cmp	r2, r3
 8006f8a:	f6ff ae57 	blt.w	8006c3c <fmatrixAeqInvA+0x4c>
			}
		}
	} // end of loop i over the matrix dimensions

	// finally, loop in inverse order to apply the missing column swaps
	for (l = isize - 1; l >= 0; l--) {
 8006f8e:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8006f92:	3b01      	subs	r3, #1
 8006f94:	b2db      	uxtb	r3, r3
 8006f96:	f887 3020 	strb.w	r3, [r7, #32]
 8006f9a:	e059      	b.n	8007050 <fmatrixAeqInvA+0x460>
		// set i and j to the two columns to be swapped
		i = iRowInd[l];
 8006f9c:	f997 3020 	ldrsb.w	r3, [r7, #32]
 8006fa0:	687a      	ldr	r2, [r7, #4]
 8006fa2:	4413      	add	r3, r2
 8006fa4:	781b      	ldrb	r3, [r3, #0]
 8006fa6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
		j = iColInd[l];
 8006faa:	f997 3020 	ldrsb.w	r3, [r7, #32]
 8006fae:	68ba      	ldr	r2, [r7, #8]
 8006fb0:	4413      	add	r3, r2
 8006fb2:	781b      	ldrb	r3, [r3, #0]
 8006fb4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22

		// check that the two columns i and j to be swapped are not the same
		if (i != j) {
 8006fb8:	f997 2023 	ldrsb.w	r2, [r7, #35]	@ 0x23
 8006fbc:	f997 3022 	ldrsb.w	r3, [r7, #34]	@ 0x22
 8006fc0:	429a      	cmp	r2, r3
 8006fc2:	d03e      	beq.n	8007042 <fmatrixAeqInvA+0x452>
			// loop over all rows k to swap columns i and j of A
			for (k = 0; k < isize; k++) {
 8006fc4:	2300      	movs	r3, #0
 8006fc6:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
 8006fca:	e034      	b.n	8007036 <fmatrixAeqInvA+0x446>
				ftmp = A[k][i];
 8006fcc:	f997 3021 	ldrsb.w	r3, [r7, #33]	@ 0x21
 8006fd0:	009b      	lsls	r3, r3, #2
 8006fd2:	68fa      	ldr	r2, [r7, #12]
 8006fd4:	4413      	add	r3, r2
 8006fd6:	681a      	ldr	r2, [r3, #0]
 8006fd8:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8006fdc:	009b      	lsls	r3, r3, #2
 8006fde:	4413      	add	r3, r2
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	61bb      	str	r3, [r7, #24]
				A[k][i] = A[k][j];
 8006fe4:	f997 3021 	ldrsb.w	r3, [r7, #33]	@ 0x21
 8006fe8:	009b      	lsls	r3, r3, #2
 8006fea:	68fa      	ldr	r2, [r7, #12]
 8006fec:	4413      	add	r3, r2
 8006fee:	681a      	ldr	r2, [r3, #0]
 8006ff0:	f997 3022 	ldrsb.w	r3, [r7, #34]	@ 0x22
 8006ff4:	009b      	lsls	r3, r3, #2
 8006ff6:	441a      	add	r2, r3
 8006ff8:	f997 3021 	ldrsb.w	r3, [r7, #33]	@ 0x21
 8006ffc:	009b      	lsls	r3, r3, #2
 8006ffe:	68f9      	ldr	r1, [r7, #12]
 8007000:	440b      	add	r3, r1
 8007002:	6819      	ldr	r1, [r3, #0]
 8007004:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8007008:	009b      	lsls	r3, r3, #2
 800700a:	440b      	add	r3, r1
 800700c:	6812      	ldr	r2, [r2, #0]
 800700e:	601a      	str	r2, [r3, #0]
				A[k][j] = ftmp;
 8007010:	f997 3021 	ldrsb.w	r3, [r7, #33]	@ 0x21
 8007014:	009b      	lsls	r3, r3, #2
 8007016:	68fa      	ldr	r2, [r7, #12]
 8007018:	4413      	add	r3, r2
 800701a:	681a      	ldr	r2, [r3, #0]
 800701c:	f997 3022 	ldrsb.w	r3, [r7, #34]	@ 0x22
 8007020:	009b      	lsls	r3, r3, #2
 8007022:	4413      	add	r3, r2
 8007024:	69ba      	ldr	r2, [r7, #24]
 8007026:	601a      	str	r2, [r3, #0]
			for (k = 0; k < isize; k++) {
 8007028:	f997 3021 	ldrsb.w	r3, [r7, #33]	@ 0x21
 800702c:	b2db      	uxtb	r3, r3
 800702e:	3301      	adds	r3, #1
 8007030:	b2db      	uxtb	r3, r3
 8007032:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
 8007036:	f997 2021 	ldrsb.w	r2, [r7, #33]	@ 0x21
 800703a:	f997 3030 	ldrsb.w	r3, [r7, #48]	@ 0x30
 800703e:	429a      	cmp	r2, r3
 8007040:	dbc4      	blt.n	8006fcc <fmatrixAeqInvA+0x3dc>
	for (l = isize - 1; l >= 0; l--) {
 8007042:	f997 3020 	ldrsb.w	r3, [r7, #32]
 8007046:	b2db      	uxtb	r3, r3
 8007048:	3b01      	subs	r3, #1
 800704a:	b2db      	uxtb	r3, r3
 800704c:	f887 3020 	strb.w	r3, [r7, #32]
 8007050:	f997 3020 	ldrsb.w	r3, [r7, #32]
 8007054:	2b00      	cmp	r3, #0
 8007056:	daa1      	bge.n	8006f9c <fmatrixAeqInvA+0x3ac>
			}
		}
	}
}
 8007058:	3728      	adds	r7, #40	@ 0x28
 800705a:	46bd      	mov	sp, r7
 800705c:	bd80      	pop	{r7, pc}
	...

08007060 <sphere_region>:

//int gap_fuc_flag;
//int gap_fuc_spheredist;

static int sphere_region(float x, float y, float z)
{
 8007060:	b580      	push	{r7, lr}
 8007062:	b088      	sub	sp, #32
 8007064:	af00      	add	r7, sp, #0
 8007066:	ed87 0a03 	vstr	s0, [r7, #12]
 800706a:	edc7 0a02 	vstr	s1, [r7, #8]
 800706e:	ed87 1a01 	vstr	s2, [r7, #4]
	int region;

	//if (pr) printf("  region %.1f,%.1f,%.1f  ", x, y, z);

	// longitude = 0 to 2pi  (meaning 0 to 360 degrees)
	longitude = atan2f(y, x) + (float)M_PI;
 8007072:	edd7 0a03 	vldr	s1, [r7, #12]
 8007076:	ed97 0a02 	vldr	s0, [r7, #8]
 800707a:	f00a fb47 	bl	801170c <atan2f>
 800707e:	eef0 7a40 	vmov.f32	s15, s0
 8007082:	ed9f 7a54 	vldr	s14, [pc, #336]	@ 80071d4 <sphere_region+0x174>
 8007086:	ee77 7a87 	vadd.f32	s15, s15, s14
 800708a:	edc7 7a06 	vstr	s15, [r7, #24]
	// latitude = -pi/2 to +pi/2  (meaning -90 to +90 degrees)
	latitude = (float)(M_PI / 2.0) - atan2f(sqrtf(x * x + y * y), z);
 800708e:	edd7 7a03 	vldr	s15, [r7, #12]
 8007092:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8007096:	edd7 7a02 	vldr	s15, [r7, #8]
 800709a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800709e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80070a2:	eeb0 0a67 	vmov.f32	s0, s15
 80070a6:	f00a fb8b 	bl	80117c0 <sqrtf>
 80070aa:	eef0 7a40 	vmov.f32	s15, s0
 80070ae:	edd7 0a01 	vldr	s1, [r7, #4]
 80070b2:	eeb0 0a67 	vmov.f32	s0, s15
 80070b6:	f00a fb29 	bl	801170c <atan2f>
 80070ba:	eef0 7a40 	vmov.f32	s15, s0
 80070be:	ed9f 7a46 	vldr	s14, [pc, #280]	@ 80071d8 <sphere_region+0x178>
 80070c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80070c6:	edc7 7a05 	vstr	s15, [r7, #20]
	// https://etna.mcs.kent.edu/vol.25.2006/pp309-327.dir/pp309-327.html
	// sphere equations....
	//  area of unit sphere = 4*pi
	//  area of unit sphere cap = 2*pi*h  h = cap height
	//  lattitude of unit sphere cap = arcsin(1 - h)
	if (latitude > 1.37046f /* 78.52 deg */) {
 80070ca:	edd7 7a05 	vldr	s15, [r7, #20]
 80070ce:	ed9f 7a43 	vldr	s14, [pc, #268]	@ 80071dc <sphere_region+0x17c>
 80070d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80070d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80070da:	dd02      	ble.n	80070e2 <sphere_region+0x82>
		// arctic cap, 1 region
		region = 0;
 80070dc:	2300      	movs	r3, #0
 80070de:	61fb      	str	r3, [r7, #28]
 80070e0:	e072      	b.n	80071c8 <sphere_region+0x168>
	} else if (latitude < -1.37046f /* -78.52 deg */) {
 80070e2:	edd7 7a05 	vldr	s15, [r7, #20]
 80070e6:	ed9f 7a3e 	vldr	s14, [pc, #248]	@ 80071e0 <sphere_region+0x180>
 80070ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80070ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80070f2:	d502      	bpl.n	80070fa <sphere_region+0x9a>
		// antarctic cap, 1 region
		region = 99;
 80070f4:	2363      	movs	r3, #99	@ 0x63
 80070f6:	61fb      	str	r3, [r7, #28]
 80070f8:	e066      	b.n	80071c8 <sphere_region+0x168>
	} else if (latitude > 0.74776f /* 42.84 deg */ || latitude < -0.74776f ) {
 80070fa:	edd7 7a05 	vldr	s15, [r7, #20]
 80070fe:	ed9f 7a39 	vldr	s14, [pc, #228]	@ 80071e4 <sphere_region+0x184>
 8007102:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007106:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800710a:	dc08      	bgt.n	800711e <sphere_region+0xbe>
 800710c:	edd7 7a05 	vldr	s15, [r7, #20]
 8007110:	ed9f 7a35 	vldr	s14, [pc, #212]	@ 80071e8 <sphere_region+0x188>
 8007114:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007118:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800711c:	d52a      	bpl.n	8007174 <sphere_region+0x114>
		// temperate zones, 15 regions each
		region = floorf(longitude * (float)(15.0 / (M_PI * 2.0)));
 800711e:	edd7 7a06 	vldr	s15, [r7, #24]
 8007122:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 80071ec <sphere_region+0x18c>
 8007126:	ee67 7a87 	vmul.f32	s15, s15, s14
 800712a:	eeb0 0a67 	vmov.f32	s0, s15
 800712e:	f00a fc4d 	bl	80119cc <floorf>
 8007132:	eef0 7a40 	vmov.f32	s15, s0
 8007136:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800713a:	ee17 3a90 	vmov	r3, s15
 800713e:	61fb      	str	r3, [r7, #28]
		if (region < 0) region = 0;
 8007140:	69fb      	ldr	r3, [r7, #28]
 8007142:	2b00      	cmp	r3, #0
 8007144:	da02      	bge.n	800714c <sphere_region+0xec>
 8007146:	2300      	movs	r3, #0
 8007148:	61fb      	str	r3, [r7, #28]
 800714a:	e004      	b.n	8007156 <sphere_region+0xf6>
		else if (region > 14) region = 14;
 800714c:	69fb      	ldr	r3, [r7, #28]
 800714e:	2b0e      	cmp	r3, #14
 8007150:	dd01      	ble.n	8007156 <sphere_region+0xf6>
 8007152:	230e      	movs	r3, #14
 8007154:	61fb      	str	r3, [r7, #28]
		if (latitude > 0.0) {
 8007156:	edd7 7a05 	vldr	s15, [r7, #20]
 800715a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800715e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007162:	dd03      	ble.n	800716c <sphere_region+0x10c>
			region += 1; // 1 to 15
 8007164:	69fb      	ldr	r3, [r7, #28]
 8007166:	3301      	adds	r3, #1
 8007168:	61fb      	str	r3, [r7, #28]
		if (latitude > 0.0) {
 800716a:	e02d      	b.n	80071c8 <sphere_region+0x168>
		} else {
			region += 84; // 84 to 98
 800716c:	69fb      	ldr	r3, [r7, #28]
 800716e:	3354      	adds	r3, #84	@ 0x54
 8007170:	61fb      	str	r3, [r7, #28]
		if (latitude > 0.0) {
 8007172:	e029      	b.n	80071c8 <sphere_region+0x168>
		}
	} else {
		// tropic zones, 34 regions each
		region = floorf(longitude * (float)(34.0 / (M_PI * 2.0)));
 8007174:	edd7 7a06 	vldr	s15, [r7, #24]
 8007178:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 80071f0 <sphere_region+0x190>
 800717c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007180:	eeb0 0a67 	vmov.f32	s0, s15
 8007184:	f00a fc22 	bl	80119cc <floorf>
 8007188:	eef0 7a40 	vmov.f32	s15, s0
 800718c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007190:	ee17 3a90 	vmov	r3, s15
 8007194:	61fb      	str	r3, [r7, #28]
		if (region < 0) region = 0;
 8007196:	69fb      	ldr	r3, [r7, #28]
 8007198:	2b00      	cmp	r3, #0
 800719a:	da02      	bge.n	80071a2 <sphere_region+0x142>
 800719c:	2300      	movs	r3, #0
 800719e:	61fb      	str	r3, [r7, #28]
 80071a0:	e004      	b.n	80071ac <sphere_region+0x14c>
		else if (region > 33) region = 33;
 80071a2:	69fb      	ldr	r3, [r7, #28]
 80071a4:	2b21      	cmp	r3, #33	@ 0x21
 80071a6:	dd01      	ble.n	80071ac <sphere_region+0x14c>
 80071a8:	2321      	movs	r3, #33	@ 0x21
 80071aa:	61fb      	str	r3, [r7, #28]
		if (latitude >= 0.0) {
 80071ac:	edd7 7a05 	vldr	s15, [r7, #20]
 80071b0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80071b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80071b8:	db03      	blt.n	80071c2 <sphere_region+0x162>
			region += 16; // 16 to 49
 80071ba:	69fb      	ldr	r3, [r7, #28]
 80071bc:	3310      	adds	r3, #16
 80071be:	61fb      	str	r3, [r7, #28]
 80071c0:	e002      	b.n	80071c8 <sphere_region+0x168>
		} else {
			region += 50; // 50 to 83
 80071c2:	69fb      	ldr	r3, [r7, #28]
 80071c4:	3332      	adds	r3, #50	@ 0x32
 80071c6:	61fb      	str	r3, [r7, #28]
		}
	}
	//if (pr) printf("  %d\n", region);
	return region;
 80071c8:	69fb      	ldr	r3, [r7, #28]
}
 80071ca:	4618      	mov	r0, r3
 80071cc:	3720      	adds	r7, #32
 80071ce:	46bd      	mov	sp, r7
 80071d0:	bd80      	pop	{r7, pc}
 80071d2:	bf00      	nop
 80071d4:	40490fdb 	.word	0x40490fdb
 80071d8:	3fc90fdb 	.word	0x3fc90fdb
 80071dc:	3faf6b3c 	.word	0x3faf6b3c
 80071e0:	bfaf6b3c 	.word	0xbfaf6b3c
 80071e4:	3f3f6d33 	.word	0x3f3f6d33
 80071e8:	bf3f6d33 	.word	0xbf3f6d33
 80071ec:	4018c9eb 	.word	0x4018c9eb
 80071f0:	40ad291c 	.word	0x40ad291c

080071f4 <quality_update>:
	quality_wobble_computed = 0;
}

// How many surface gaps
void quality_update(const Point_t *point)
{
 80071f4:	b590      	push	{r4, r7, lr}
 80071f6:	b087      	sub	sp, #28
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	6078      	str	r0, [r7, #4]
	if (count >= MAGBUFFSIZE)
 80071fc:	4b4b      	ldr	r3, [pc, #300]	@ (800732c <quality_update+0x138>)
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	f5b3 7f16 	cmp.w	r3, #600	@ 0x258
 8007204:	db02      	blt.n	800720c <quality_update+0x18>
		count = 0;
 8007206:	4b49      	ldr	r3, [pc, #292]	@ (800732c <quality_update+0x138>)
 8007208:	2200      	movs	r2, #0
 800720a:	601a      	str	r2, [r3, #0]

	float x, y, z;
	int region;

	x = point->x;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	617b      	str	r3, [r7, #20]
	y = point->y;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	685b      	ldr	r3, [r3, #4]
 8007216:	613b      	str	r3, [r7, #16]
	z = point->z;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	689b      	ldr	r3, [r3, #8]
 800721c:	60fb      	str	r3, [r7, #12]
	magnitude[count] = sqrtf(x * x + y * y + z * z);
 800721e:	edd7 7a05 	vldr	s15, [r7, #20]
 8007222:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8007226:	edd7 7a04 	vldr	s15, [r7, #16]
 800722a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800722e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007232:	edd7 7a03 	vldr	s15, [r7, #12]
 8007236:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800723a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800723e:	4b3b      	ldr	r3, [pc, #236]	@ (800732c <quality_update+0x138>)
 8007240:	681c      	ldr	r4, [r3, #0]
 8007242:	eeb0 0a67 	vmov.f32	s0, s15
 8007246:	f00a fabb 	bl	80117c0 <sqrtf>
 800724a:	eef0 7a40 	vmov.f32	s15, s0
 800724e:	4a38      	ldr	r2, [pc, #224]	@ (8007330 <quality_update+0x13c>)
 8007250:	00a3      	lsls	r3, r4, #2
 8007252:	4413      	add	r3, r2
 8007254:	edc3 7a00 	vstr	s15, [r3]
	region = sphere_region(x, y, z);
 8007258:	ed97 1a03 	vldr	s2, [r7, #12]
 800725c:	edd7 0a04 	vldr	s1, [r7, #16]
 8007260:	ed97 0a05 	vldr	s0, [r7, #20]
 8007264:	f7ff fefc 	bl	8007060 <sphere_region>
 8007268:	60b8      	str	r0, [r7, #8]
	spheredist[region]++;
 800726a:	4a32      	ldr	r2, [pc, #200]	@ (8007334 <quality_update+0x140>)
 800726c:	68bb      	ldr	r3, [r7, #8]
 800726e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007272:	1c5a      	adds	r2, r3, #1
 8007274:	492f      	ldr	r1, [pc, #188]	@ (8007334 <quality_update+0x140>)
 8007276:	68bb      	ldr	r3, [r7, #8]
 8007278:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	spheredata[region].x += x;
 800727c:	492e      	ldr	r1, [pc, #184]	@ (8007338 <quality_update+0x144>)
 800727e:	68ba      	ldr	r2, [r7, #8]
 8007280:	4613      	mov	r3, r2
 8007282:	005b      	lsls	r3, r3, #1
 8007284:	4413      	add	r3, r2
 8007286:	009b      	lsls	r3, r3, #2
 8007288:	440b      	add	r3, r1
 800728a:	ed93 7a00 	vldr	s14, [r3]
 800728e:	edd7 7a05 	vldr	s15, [r7, #20]
 8007292:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007296:	4928      	ldr	r1, [pc, #160]	@ (8007338 <quality_update+0x144>)
 8007298:	68ba      	ldr	r2, [r7, #8]
 800729a:	4613      	mov	r3, r2
 800729c:	005b      	lsls	r3, r3, #1
 800729e:	4413      	add	r3, r2
 80072a0:	009b      	lsls	r3, r3, #2
 80072a2:	440b      	add	r3, r1
 80072a4:	edc3 7a00 	vstr	s15, [r3]
	spheredata[region].y += y;
 80072a8:	4923      	ldr	r1, [pc, #140]	@ (8007338 <quality_update+0x144>)
 80072aa:	68ba      	ldr	r2, [r7, #8]
 80072ac:	4613      	mov	r3, r2
 80072ae:	005b      	lsls	r3, r3, #1
 80072b0:	4413      	add	r3, r2
 80072b2:	009b      	lsls	r3, r3, #2
 80072b4:	440b      	add	r3, r1
 80072b6:	3304      	adds	r3, #4
 80072b8:	ed93 7a00 	vldr	s14, [r3]
 80072bc:	edd7 7a04 	vldr	s15, [r7, #16]
 80072c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80072c4:	491c      	ldr	r1, [pc, #112]	@ (8007338 <quality_update+0x144>)
 80072c6:	68ba      	ldr	r2, [r7, #8]
 80072c8:	4613      	mov	r3, r2
 80072ca:	005b      	lsls	r3, r3, #1
 80072cc:	4413      	add	r3, r2
 80072ce:	009b      	lsls	r3, r3, #2
 80072d0:	440b      	add	r3, r1
 80072d2:	3304      	adds	r3, #4
 80072d4:	edc3 7a00 	vstr	s15, [r3]
	spheredata[region].z += z;
 80072d8:	4917      	ldr	r1, [pc, #92]	@ (8007338 <quality_update+0x144>)
 80072da:	68ba      	ldr	r2, [r7, #8]
 80072dc:	4613      	mov	r3, r2
 80072de:	005b      	lsls	r3, r3, #1
 80072e0:	4413      	add	r3, r2
 80072e2:	009b      	lsls	r3, r3, #2
 80072e4:	440b      	add	r3, r1
 80072e6:	3308      	adds	r3, #8
 80072e8:	ed93 7a00 	vldr	s14, [r3]
 80072ec:	edd7 7a03 	vldr	s15, [r7, #12]
 80072f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80072f4:	4910      	ldr	r1, [pc, #64]	@ (8007338 <quality_update+0x144>)
 80072f6:	68ba      	ldr	r2, [r7, #8]
 80072f8:	4613      	mov	r3, r2
 80072fa:	005b      	lsls	r3, r3, #1
 80072fc:	4413      	add	r3, r2
 80072fe:	009b      	lsls	r3, r3, #2
 8007300:	440b      	add	r3, r1
 8007302:	3308      	adds	r3, #8
 8007304:	edc3 7a00 	vstr	s15, [r3]
	count++;
 8007308:	4b08      	ldr	r3, [pc, #32]	@ (800732c <quality_update+0x138>)
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	3301      	adds	r3, #1
 800730e:	4a07      	ldr	r2, [pc, #28]	@ (800732c <quality_update+0x138>)
 8007310:	6013      	str	r3, [r2, #0]
	quality_gaps_computed = 0;
 8007312:	4b0a      	ldr	r3, [pc, #40]	@ (800733c <quality_update+0x148>)
 8007314:	2200      	movs	r2, #0
 8007316:	601a      	str	r2, [r3, #0]
	quality_variance_computed = 0;
 8007318:	4b09      	ldr	r3, [pc, #36]	@ (8007340 <quality_update+0x14c>)
 800731a:	2200      	movs	r2, #0
 800731c:	601a      	str	r2, [r3, #0]
	quality_wobble_computed = 0;
 800731e:	4b09      	ldr	r3, [pc, #36]	@ (8007344 <quality_update+0x150>)
 8007320:	2200      	movs	r2, #0
 8007322:	601a      	str	r2, [r3, #0]
}
 8007324:	bf00      	nop
 8007326:	371c      	adds	r7, #28
 8007328:	46bd      	mov	sp, r7
 800732a:	bd90      	pop	{r4, r7, pc}
 800732c:	200019c8 	.word	0x200019c8
 8007330:	2000200c 	.word	0x2000200c
 8007334:	200019cc 	.word	0x200019cc
 8007338:	20001b5c 	.word	0x20001b5c
 800733c:	20002970 	.word	0x20002970
 8007340:	20002974 	.word	0x20002974
 8007344:	20002978 	.word	0x20002978

08007348 <quality_surface_gap_error>:


float quality_surface_gap_error(void)
{
 8007348:	b480      	push	{r7}
 800734a:	b085      	sub	sp, #20
 800734c:	af00      	add	r7, sp, #0
	float error=0.0f;
 800734e:	f04f 0300 	mov.w	r3, #0
 8007352:	60fb      	str	r3, [r7, #12]
	int i, num;

//	gap_fuc_flag = 1;
	if (quality_gaps_computed) return quality_gaps_buffer;
 8007354:	4b22      	ldr	r3, [pc, #136]	@ (80073e0 <quality_surface_gap_error+0x98>)
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	2b00      	cmp	r3, #0
 800735a:	d002      	beq.n	8007362 <quality_surface_gap_error+0x1a>
 800735c:	4b21      	ldr	r3, [pc, #132]	@ (80073e4 <quality_surface_gap_error+0x9c>)
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	e035      	b.n	80073ce <quality_surface_gap_error+0x86>
	for (i=0; i < 100; i++) {
 8007362:	2300      	movs	r3, #0
 8007364:	60bb      	str	r3, [r7, #8]
 8007366:	e02a      	b.n	80073be <quality_surface_gap_error+0x76>
		num = spheredist[i];
 8007368:	4a1f      	ldr	r2, [pc, #124]	@ (80073e8 <quality_surface_gap_error+0xa0>)
 800736a:	68bb      	ldr	r3, [r7, #8]
 800736c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007370:	607b      	str	r3, [r7, #4]
//		gap_fuc_spheredist = num;
		if (num == 0) {
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	2b00      	cmp	r3, #0
 8007376:	d108      	bne.n	800738a <quality_surface_gap_error+0x42>
			error += 1.0f;
 8007378:	edd7 7a03 	vldr	s15, [r7, #12]
 800737c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007380:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007384:	edc7 7a03 	vstr	s15, [r7, #12]
 8007388:	e016      	b.n	80073b8 <quality_surface_gap_error+0x70>
		} else if (num == 1) {
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	2b01      	cmp	r3, #1
 800738e:	d108      	bne.n	80073a2 <quality_surface_gap_error+0x5a>
			error += 0.2f;
 8007390:	edd7 7a03 	vldr	s15, [r7, #12]
 8007394:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 80073ec <quality_surface_gap_error+0xa4>
 8007398:	ee77 7a87 	vadd.f32	s15, s15, s14
 800739c:	edc7 7a03 	vstr	s15, [r7, #12]
 80073a0:	e00a      	b.n	80073b8 <quality_surface_gap_error+0x70>
		} else if (num == 2) {
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	2b02      	cmp	r3, #2
 80073a6:	d107      	bne.n	80073b8 <quality_surface_gap_error+0x70>
			error += 0.01f;
 80073a8:	edd7 7a03 	vldr	s15, [r7, #12]
 80073ac:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 80073f0 <quality_surface_gap_error+0xa8>
 80073b0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80073b4:	edc7 7a03 	vstr	s15, [r7, #12]
	for (i=0; i < 100; i++) {
 80073b8:	68bb      	ldr	r3, [r7, #8]
 80073ba:	3301      	adds	r3, #1
 80073bc:	60bb      	str	r3, [r7, #8]
 80073be:	68bb      	ldr	r3, [r7, #8]
 80073c0:	2b63      	cmp	r3, #99	@ 0x63
 80073c2:	ddd1      	ble.n	8007368 <quality_surface_gap_error+0x20>
		}
	}
	quality_gaps_buffer = error;
 80073c4:	4a07      	ldr	r2, [pc, #28]	@ (80073e4 <quality_surface_gap_error+0x9c>)
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	6013      	str	r3, [r2, #0]
//	quality_gaps_computed = 1;
	return quality_gaps_buffer;
 80073ca:	4b06      	ldr	r3, [pc, #24]	@ (80073e4 <quality_surface_gap_error+0x9c>)
 80073cc:	681b      	ldr	r3, [r3, #0]
}
 80073ce:	ee07 3a90 	vmov	s15, r3
 80073d2:	eeb0 0a67 	vmov.f32	s0, s15
 80073d6:	3714      	adds	r7, #20
 80073d8:	46bd      	mov	sp, r7
 80073da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073de:	4770      	bx	lr
 80073e0:	20002970 	.word	0x20002970
 80073e4:	2000296c 	.word	0x2000296c
 80073e8:	200019cc 	.word	0x200019cc
 80073ec:	3e4ccccd 	.word	0x3e4ccccd
 80073f0:	3c23d70a 	.word	0x3c23d70a

080073f4 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 80073f4:	b480      	push	{r7}
 80073f6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 80073f8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80073fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007400:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007404:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007408:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800740c:	bf00      	nop
 800740e:	46bd      	mov	sp, r7
 8007410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007414:	4770      	bx	lr

08007416 <LL_AHB2_GRP1_EnableClock>:
{
 8007416:	b480      	push	{r7}
 8007418:	b085      	sub	sp, #20
 800741a:	af00      	add	r7, sp, #0
 800741c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800741e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007422:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007424:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	4313      	orrs	r3, r2
 800742c:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800742e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007432:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	4013      	ands	r3, r2
 8007438:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800743a:	68fb      	ldr	r3, [r7, #12]
}
 800743c:	bf00      	nop
 800743e:	3714      	adds	r7, #20
 8007440:	46bd      	mov	sp, r7
 8007442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007446:	4770      	bx	lr

08007448 <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8007448:	b480      	push	{r7}
 800744a:	b085      	sub	sp, #20
 800744c:	af00      	add	r7, sp, #0
 800744e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 8007450:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007454:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007456:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	4313      	orrs	r3, r2
 800745e:	650b      	str	r3, [r1, #80]	@ 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8007460:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007464:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	4013      	ands	r3, r2
 800746a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800746c:	68fb      	ldr	r3, [r7, #12]
}
 800746e:	bf00      	nop
 8007470:	3714      	adds	r7, #20
 8007472:	46bd      	mov	sp, r7
 8007474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007478:	4770      	bx	lr

0800747a <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 800747a:	b480      	push	{r7}
 800747c:	b085      	sub	sp, #20
 800747e:	af00      	add	r7, sp, #0
 8007480:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8007482:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007486:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8007488:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	4313      	orrs	r3, r2
 8007490:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8007492:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007496:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	4013      	ands	r3, r2
 800749c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800749e:	68fb      	ldr	r3, [r7, #12]
}
 80074a0:	bf00      	nop
 80074a2:	3714      	adds	r7, #20
 80074a4:	46bd      	mov	sp, r7
 80074a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074aa:	4770      	bx	lr

080074ac <HAL_MspInit>:

/* USER CODE END 0 */
/**
 * Initializes the Global MSP.
 */
void HAL_MspInit(void) {
 80074ac:	b580      	push	{r7, lr}
 80074ae:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN MspInit 0 */

	/* USER CODE END MspInit 0 */

	__HAL_RCC_HSEM_CLK_ENABLE();
 80074b0:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80074b4:	f7ff ffc8 	bl	8007448 <LL_AHB3_GRP1_EnableClock>

	/* System interrupt init*/

	/* Peripheral interrupt init */
	/* HSEM_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 80074b8:	2200      	movs	r2, #0
 80074ba:	2100      	movs	r1, #0
 80074bc:	202e      	movs	r0, #46	@ 0x2e
 80074be:	f000 fc80 	bl	8007dc2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(HSEM_IRQn);
 80074c2:	202e      	movs	r0, #46	@ 0x2e
 80074c4:	f000 fc97 	bl	8007df6 <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MspInit 1 */

	/* USER CODE END MspInit 1 */
}
 80074c8:	bf00      	nop
 80074ca:	bd80      	pop	{r7, pc}

080074cc <HAL_I2C_MspInit>:
 * @brief I2C MSP Initialization
 * This function configures the hardware resources used in this example
 * @param hi2c: I2C handle pointer
 * @retval None
 */
void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c) {
 80074cc:	b580      	push	{r7, lr}
 80074ce:	b09c      	sub	sp, #112	@ 0x70
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80074d4:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80074d8:	2200      	movs	r2, #0
 80074da:	601a      	str	r2, [r3, #0]
 80074dc:	605a      	str	r2, [r3, #4]
 80074de:	609a      	str	r2, [r3, #8]
 80074e0:	60da      	str	r2, [r3, #12]
 80074e2:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 80074e4:	f107 030c 	add.w	r3, r7, #12
 80074e8:	2250      	movs	r2, #80	@ 0x50
 80074ea:	2100      	movs	r1, #0
 80074ec:	4618      	mov	r0, r3
 80074ee:	f009 fa36 	bl	801095e <memset>
	if (hi2c->Instance == I2C1) {
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	4a34      	ldr	r2, [pc, #208]	@ (80075c8 <HAL_I2C_MspInit+0xfc>)
 80074f8:	4293      	cmp	r3, r2
 80074fa:	d160      	bne.n	80075be <HAL_I2C_MspInit+0xf2>

		/* USER CODE END I2C1_MspInit 0 */

		/** Initializes the peripherals clock
		 */
		PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80074fc:	2304      	movs	r3, #4
 80074fe:	60fb      	str	r3, [r7, #12]
		PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8007500:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 8007504:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 8007506:	f107 030c 	add.w	r3, r7, #12
 800750a:	4618      	mov	r0, r3
 800750c:	f004 fd4f 	bl	800bfae <HAL_RCCEx_PeriphCLKConfig>
 8007510:	4603      	mov	r3, r0
 8007512:	2b00      	cmp	r3, #0
 8007514:	d001      	beq.n	800751a <HAL_I2C_MspInit+0x4e>
			Error_Handler();
 8007516:	f7fe fcd5 	bl	8005ec4 <Error_Handler>
		}

		__HAL_RCC_GPIOB_CLK_ENABLE();
 800751a:	2002      	movs	r0, #2
 800751c:	f7ff ff7b 	bl	8007416 <LL_AHB2_GRP1_EnableClock>
		/**I2C1 GPIO Configuration
		 PB8     ------> I2C1_SCL
		 PB9     ------> I2C1_SDA
		 */
		GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9;
 8007520:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8007524:	65fb      	str	r3, [r7, #92]	@ 0x5c
		GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007526:	2312      	movs	r3, #18
 8007528:	663b      	str	r3, [r7, #96]	@ 0x60
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 800752a:	2300      	movs	r3, #0
 800752c:	667b      	str	r3, [r7, #100]	@ 0x64
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800752e:	2300      	movs	r3, #0
 8007530:	66bb      	str	r3, [r7, #104]	@ 0x68
		GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8007532:	2304      	movs	r3, #4
 8007534:	66fb      	str	r3, [r7, #108]	@ 0x6c
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007536:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800753a:	4619      	mov	r1, r3
 800753c:	4823      	ldr	r0, [pc, #140]	@ (80075cc <HAL_I2C_MspInit+0x100>)
 800753e:	f000 ff81 	bl	8008444 <HAL_GPIO_Init>

		/* Peripheral clock enable */
		__HAL_RCC_I2C1_CLK_ENABLE();
 8007542:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8007546:	f7ff ff98 	bl	800747a <LL_APB1_GRP1_EnableClock>

		/* I2C1 DMA Init */
		/* I2C1_RX Init */
		hdma_i2c1_rx.Instance = DMA1_Channel7;
 800754a:	4b21      	ldr	r3, [pc, #132]	@ (80075d0 <HAL_I2C_MspInit+0x104>)
 800754c:	4a21      	ldr	r2, [pc, #132]	@ (80075d4 <HAL_I2C_MspInit+0x108>)
 800754e:	601a      	str	r2, [r3, #0]
		hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
 8007550:	4b1f      	ldr	r3, [pc, #124]	@ (80075d0 <HAL_I2C_MspInit+0x104>)
 8007552:	220a      	movs	r2, #10
 8007554:	605a      	str	r2, [r3, #4]
		hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007556:	4b1e      	ldr	r3, [pc, #120]	@ (80075d0 <HAL_I2C_MspInit+0x104>)
 8007558:	2200      	movs	r2, #0
 800755a:	609a      	str	r2, [r3, #8]
		hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800755c:	4b1c      	ldr	r3, [pc, #112]	@ (80075d0 <HAL_I2C_MspInit+0x104>)
 800755e:	2200      	movs	r2, #0
 8007560:	60da      	str	r2, [r3, #12]
		hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8007562:	4b1b      	ldr	r3, [pc, #108]	@ (80075d0 <HAL_I2C_MspInit+0x104>)
 8007564:	2280      	movs	r2, #128	@ 0x80
 8007566:	611a      	str	r2, [r3, #16]
		hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007568:	4b19      	ldr	r3, [pc, #100]	@ (80075d0 <HAL_I2C_MspInit+0x104>)
 800756a:	2200      	movs	r2, #0
 800756c:	615a      	str	r2, [r3, #20]
		hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800756e:	4b18      	ldr	r3, [pc, #96]	@ (80075d0 <HAL_I2C_MspInit+0x104>)
 8007570:	2200      	movs	r2, #0
 8007572:	619a      	str	r2, [r3, #24]
		hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8007574:	4b16      	ldr	r3, [pc, #88]	@ (80075d0 <HAL_I2C_MspInit+0x104>)
 8007576:	2200      	movs	r2, #0
 8007578:	61da      	str	r2, [r3, #28]
		hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800757a:	4b15      	ldr	r3, [pc, #84]	@ (80075d0 <HAL_I2C_MspInit+0x104>)
 800757c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8007580:	621a      	str	r2, [r3, #32]
		if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK) {
 8007582:	4813      	ldr	r0, [pc, #76]	@ (80075d0 <HAL_I2C_MspInit+0x104>)
 8007584:	f000 fc7c 	bl	8007e80 <HAL_DMA_Init>
 8007588:	4603      	mov	r3, r0
 800758a:	2b00      	cmp	r3, #0
 800758c:	d001      	beq.n	8007592 <HAL_I2C_MspInit+0xc6>
			Error_Handler();
 800758e:	f7fe fc99 	bl	8005ec4 <Error_Handler>
		}

		__HAL_LINKDMA(hi2c, hdmarx, hdma_i2c1_rx);
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	4a0e      	ldr	r2, [pc, #56]	@ (80075d0 <HAL_I2C_MspInit+0x104>)
 8007596:	63da      	str	r2, [r3, #60]	@ 0x3c
 8007598:	4a0d      	ldr	r2, [pc, #52]	@ (80075d0 <HAL_I2C_MspInit+0x104>)
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	6293      	str	r3, [r2, #40]	@ 0x28

		/* I2C1 interrupt Init */
		HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800759e:	2200      	movs	r2, #0
 80075a0:	2100      	movs	r1, #0
 80075a2:	201e      	movs	r0, #30
 80075a4:	f000 fc0d 	bl	8007dc2 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80075a8:	201e      	movs	r0, #30
 80075aa:	f000 fc24 	bl	8007df6 <HAL_NVIC_EnableIRQ>
		HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80075ae:	2200      	movs	r2, #0
 80075b0:	2100      	movs	r1, #0
 80075b2:	201f      	movs	r0, #31
 80075b4:	f000 fc05 	bl	8007dc2 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80075b8:	201f      	movs	r0, #31
 80075ba:	f000 fc1c 	bl	8007df6 <HAL_NVIC_EnableIRQ>

		/* USER CODE END I2C1_MspInit 1 */

	}

}
 80075be:	bf00      	nop
 80075c0:	3770      	adds	r7, #112	@ 0x70
 80075c2:	46bd      	mov	sp, r7
 80075c4:	bd80      	pop	{r7, pc}
 80075c6:	bf00      	nop
 80075c8:	40005400 	.word	0x40005400
 80075cc:	48000400 	.word	0x48000400
 80075d0:	20000248 	.word	0x20000248
 80075d4:	40020080 	.word	0x40020080

080075d8 <HAL_IPCC_MspInit>:
 * @brief IPCC MSP Initialization
 * This function configures the hardware resources used in this example
 * @param hipcc: IPCC handle pointer
 * @retval None
 */
void HAL_IPCC_MspInit(IPCC_HandleTypeDef *hipcc) {
 80075d8:	b580      	push	{r7, lr}
 80075da:	b082      	sub	sp, #8
 80075dc:	af00      	add	r7, sp, #0
 80075de:	6078      	str	r0, [r7, #4]
	if (hipcc->Instance == IPCC) {
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	4a0d      	ldr	r2, [pc, #52]	@ (800761c <HAL_IPCC_MspInit+0x44>)
 80075e6:	4293      	cmp	r3, r2
 80075e8:	d113      	bne.n	8007612 <HAL_IPCC_MspInit+0x3a>
		/* USER CODE BEGIN IPCC_MspInit 0 */

		/* USER CODE END IPCC_MspInit 0 */
		/* Peripheral clock enable */
		__HAL_RCC_IPCC_CLK_ENABLE();
 80075ea:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80075ee:	f7ff ff2b 	bl	8007448 <LL_AHB3_GRP1_EnableClock>
		/* IPCC interrupt Init */
		HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 80075f2:	2200      	movs	r2, #0
 80075f4:	2100      	movs	r1, #0
 80075f6:	202c      	movs	r0, #44	@ 0x2c
 80075f8:	f000 fbe3 	bl	8007dc2 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 80075fc:	202c      	movs	r0, #44	@ 0x2c
 80075fe:	f000 fbfa 	bl	8007df6 <HAL_NVIC_EnableIRQ>
		HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 8007602:	2200      	movs	r2, #0
 8007604:	2100      	movs	r1, #0
 8007606:	202d      	movs	r0, #45	@ 0x2d
 8007608:	f000 fbdb 	bl	8007dc2 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 800760c:	202d      	movs	r0, #45	@ 0x2d
 800760e:	f000 fbf2 	bl	8007df6 <HAL_NVIC_EnableIRQ>

		/* USER CODE END IPCC_MspInit 1 */

	}

}
 8007612:	bf00      	nop
 8007614:	3708      	adds	r7, #8
 8007616:	46bd      	mov	sp, r7
 8007618:	bd80      	pop	{r7, pc}
 800761a:	bf00      	nop
 800761c:	58000c00 	.word	0x58000c00

08007620 <HAL_RTC_MspInit>:
 * @brief RTC MSP Initialization
 * This function configures the hardware resources used in this example
 * @param hrtc: RTC handle pointer
 * @retval None
 */
void HAL_RTC_MspInit(RTC_HandleTypeDef *hrtc) {
 8007620:	b580      	push	{r7, lr}
 8007622:	b096      	sub	sp, #88	@ 0x58
 8007624:	af00      	add	r7, sp, #0
 8007626:	6078      	str	r0, [r7, #4]
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 8007628:	f107 0308 	add.w	r3, r7, #8
 800762c:	2250      	movs	r2, #80	@ 0x50
 800762e:	2100      	movs	r1, #0
 8007630:	4618      	mov	r0, r3
 8007632:	f009 f994 	bl	801095e <memset>
	if (hrtc->Instance == RTC) {
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	4a12      	ldr	r2, [pc, #72]	@ (8007684 <HAL_RTC_MspInit+0x64>)
 800763c:	4293      	cmp	r3, r2
 800763e:	d11d      	bne.n	800767c <HAL_RTC_MspInit+0x5c>

		/* USER CODE END RTC_MspInit 0 */

		/** Initializes the peripherals clock
		 */
		PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8007640:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8007644:	60bb      	str	r3, [r7, #8]
		PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8007646:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800764a:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 800764c:	f107 0308 	add.w	r3, r7, #8
 8007650:	4618      	mov	r0, r3
 8007652:	f004 fcac 	bl	800bfae <HAL_RCCEx_PeriphCLKConfig>
 8007656:	4603      	mov	r3, r0
 8007658:	2b00      	cmp	r3, #0
 800765a:	d001      	beq.n	8007660 <HAL_RTC_MspInit+0x40>
			Error_Handler();
 800765c:	f7fe fc32 	bl	8005ec4 <Error_Handler>
		}

		/* Peripheral clock enable */
		__HAL_RCC_RTC_ENABLE();
 8007660:	f7ff fec8 	bl	80073f4 <LL_RCC_EnableRTC>
		__HAL_RCC_RTCAPB_CLK_ENABLE();
 8007664:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8007668:	f7ff ff07 	bl	800747a <LL_APB1_GRP1_EnableClock>
		/* RTC interrupt Init */
		HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 800766c:	2200      	movs	r2, #0
 800766e:	2100      	movs	r1, #0
 8007670:	2003      	movs	r0, #3
 8007672:	f000 fba6 	bl	8007dc2 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8007676:	2003      	movs	r0, #3
 8007678:	f000 fbbd 	bl	8007df6 <HAL_NVIC_EnableIRQ>

		/* USER CODE END RTC_MspInit 1 */

	}

}
 800767c:	bf00      	nop
 800767e:	3758      	adds	r7, #88	@ 0x58
 8007680:	46bd      	mov	sp, r7
 8007682:	bd80      	pop	{r7, pc}
 8007684:	40002800 	.word	0x40002800

08007688 <HAL_TIM_Base_MspInit>:
 * @brief TIM_Base MSP Initialization
 * This function configures the hardware resources used in this example
 * @param htim_base: TIM_Base handle pointer
 * @retval None
 */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim_base) {
 8007688:	b580      	push	{r7, lr}
 800768a:	b082      	sub	sp, #8
 800768c:	af00      	add	r7, sp, #0
 800768e:	6078      	str	r0, [r7, #4]
	if (htim_base->Instance == TIM2) {
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007698:	d102      	bne.n	80076a0 <HAL_TIM_Base_MspInit+0x18>
		/* USER CODE BEGIN TIM2_MspInit 0 */

		/* USER CODE END TIM2_MspInit 0 */
		/* Peripheral clock enable */
		__HAL_RCC_TIM2_CLK_ENABLE();
 800769a:	2001      	movs	r0, #1
 800769c:	f7ff feed 	bl	800747a <LL_APB1_GRP1_EnableClock>

		/* USER CODE END TIM2_MspInit 1 */

	}

}
 80076a0:	bf00      	nop
 80076a2:	3708      	adds	r7, #8
 80076a4:	46bd      	mov	sp, r7
 80076a6:	bd80      	pop	{r7, pc}

080076a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80076a8:	b480      	push	{r7}
 80076aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 80076ac:	bf00      	nop
 80076ae:	e7fd      	b.n	80076ac <NMI_Handler+0x4>

080076b0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80076b0:	b480      	push	{r7}
 80076b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80076b4:	bf00      	nop
 80076b6:	e7fd      	b.n	80076b4 <HardFault_Handler+0x4>

080076b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80076b8:	b480      	push	{r7}
 80076ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80076bc:	bf00      	nop
 80076be:	e7fd      	b.n	80076bc <MemManage_Handler+0x4>

080076c0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80076c0:	b480      	push	{r7}
 80076c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80076c4:	bf00      	nop
 80076c6:	e7fd      	b.n	80076c4 <BusFault_Handler+0x4>

080076c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80076c8:	b480      	push	{r7}
 80076ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80076cc:	bf00      	nop
 80076ce:	e7fd      	b.n	80076cc <UsageFault_Handler+0x4>

080076d0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80076d0:	b480      	push	{r7}
 80076d2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80076d4:	bf00      	nop
 80076d6:	46bd      	mov	sp, r7
 80076d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076dc:	4770      	bx	lr

080076de <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80076de:	b480      	push	{r7}
 80076e0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80076e2:	bf00      	nop
 80076e4:	46bd      	mov	sp, r7
 80076e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ea:	4770      	bx	lr

080076ec <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80076ec:	b480      	push	{r7}
 80076ee:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80076f0:	bf00      	nop
 80076f2:	46bd      	mov	sp, r7
 80076f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f8:	4770      	bx	lr

080076fa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80076fa:	b580      	push	{r7, lr}
 80076fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80076fe:	f000 f9ed 	bl	8007adc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8007702:	bf00      	nop
 8007704:	bd80      	pop	{r7, pc}

08007706 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 8007706:	b580      	push	{r7, lr}
 8007708:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 800770a:	f7fa f80b 	bl	8001724 <HW_TS_RTC_Wakeup_Handler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 800770e:	bf00      	nop
 8007710:	bd80      	pop	{r7, pc}
	...

08007714 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8007714:	b580      	push	{r7, lr}
 8007716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */
  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8007718:	4802      	ldr	r0, [pc, #8]	@ (8007724 <DMA1_Channel7_IRQHandler+0x10>)
 800771a:	f000 fd33 	bl	8008184 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 800771e:	bf00      	nop
 8007720:	bd80      	pop	{r7, pc}
 8007722:	bf00      	nop
 8007724:	20000248 	.word	0x20000248

08007728 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8007728:	b580      	push	{r7, lr}
 800772a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800772c:	4802      	ldr	r0, [pc, #8]	@ (8007738 <I2C1_EV_IRQHandler+0x10>)
 800772e:	f001 fae5 	bl	8008cfc <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8007732:	bf00      	nop
 8007734:	bd80      	pop	{r7, pc}
 8007736:	bf00      	nop
 8007738:	200001f4 	.word	0x200001f4

0800773c <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 800773c:	b580      	push	{r7, lr}
 800773e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8007740:	4802      	ldr	r0, [pc, #8]	@ (800774c <I2C1_ER_IRQHandler+0x10>)
 8007742:	f001 faf5 	bl	8008d30 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8007746:	bf00      	nop
 8007748:	bd80      	pop	{r7, pc}
 800774a:	bf00      	nop
 800774c:	200001f4 	.word	0x200001f4

08007750 <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 8007750:	b580      	push	{r7, lr}
 8007752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 8007754:	f008 fc06 	bl	800ff64 <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 8007758:	bf00      	nop
 800775a:	bd80      	pop	{r7, pc}

0800775c <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 800775c:	b580      	push	{r7, lr}
 800775e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 8007760:	f008 fc36 	bl	800ffd0 <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 8007764:	bf00      	nop
 8007766:	bd80      	pop	{r7, pc}

08007768 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8007768:	b580      	push	{r7, lr}
 800776a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 800776c:	f001 f80c 	bl	8008788 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 8007770:	bf00      	nop
 8007772:	bd80      	pop	{r7, pc}

08007774 <DMAMUX1_OVR_IRQHandler>:

/**
  * @brief This function handles DMAMUX1 overrun interrupt.
  */
void DMAMUX1_OVR_IRQHandler(void)
{
 8007774:	b480      	push	{r7}
 8007776:	af00      	add	r7, sp, #0
  /* USER CODE END DMAMUX1_OVR_IRQn 0 */

  /* USER CODE BEGIN DMAMUX1_OVR_IRQn 1 */

  /* USER CODE END DMAMUX1_OVR_IRQn 1 */
}
 8007778:	bf00      	nop
 800777a:	46bd      	mov	sp, r7
 800777c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007780:	4770      	bx	lr

08007782 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8007782:	b480      	push	{r7}
 8007784:	af00      	add	r7, sp, #0
  return 1;
 8007786:	2301      	movs	r3, #1
}
 8007788:	4618      	mov	r0, r3
 800778a:	46bd      	mov	sp, r7
 800778c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007790:	4770      	bx	lr

08007792 <_kill>:

int _kill(int pid, int sig)
{
 8007792:	b580      	push	{r7, lr}
 8007794:	b082      	sub	sp, #8
 8007796:	af00      	add	r7, sp, #0
 8007798:	6078      	str	r0, [r7, #4]
 800779a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800779c:	f009 f92e 	bl	80109fc <__errno>
 80077a0:	4603      	mov	r3, r0
 80077a2:	2216      	movs	r2, #22
 80077a4:	601a      	str	r2, [r3, #0]
  return -1;
 80077a6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80077aa:	4618      	mov	r0, r3
 80077ac:	3708      	adds	r7, #8
 80077ae:	46bd      	mov	sp, r7
 80077b0:	bd80      	pop	{r7, pc}

080077b2 <_exit>:

void _exit (int status)
{
 80077b2:	b580      	push	{r7, lr}
 80077b4:	b082      	sub	sp, #8
 80077b6:	af00      	add	r7, sp, #0
 80077b8:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80077ba:	f04f 31ff 	mov.w	r1, #4294967295
 80077be:	6878      	ldr	r0, [r7, #4]
 80077c0:	f7ff ffe7 	bl	8007792 <_kill>
  while (1) {}    /* Make sure we hang here */
 80077c4:	bf00      	nop
 80077c6:	e7fd      	b.n	80077c4 <_exit+0x12>

080077c8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80077c8:	b580      	push	{r7, lr}
 80077ca:	b086      	sub	sp, #24
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	60f8      	str	r0, [r7, #12]
 80077d0:	60b9      	str	r1, [r7, #8]
 80077d2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80077d4:	2300      	movs	r3, #0
 80077d6:	617b      	str	r3, [r7, #20]
 80077d8:	e00a      	b.n	80077f0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80077da:	f3af 8000 	nop.w
 80077de:	4601      	mov	r1, r0
 80077e0:	68bb      	ldr	r3, [r7, #8]
 80077e2:	1c5a      	adds	r2, r3, #1
 80077e4:	60ba      	str	r2, [r7, #8]
 80077e6:	b2ca      	uxtb	r2, r1
 80077e8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80077ea:	697b      	ldr	r3, [r7, #20]
 80077ec:	3301      	adds	r3, #1
 80077ee:	617b      	str	r3, [r7, #20]
 80077f0:	697a      	ldr	r2, [r7, #20]
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	429a      	cmp	r2, r3
 80077f6:	dbf0      	blt.n	80077da <_read+0x12>
  }

  return len;
 80077f8:	687b      	ldr	r3, [r7, #4]
}
 80077fa:	4618      	mov	r0, r3
 80077fc:	3718      	adds	r7, #24
 80077fe:	46bd      	mov	sp, r7
 8007800:	bd80      	pop	{r7, pc}

08007802 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8007802:	b580      	push	{r7, lr}
 8007804:	b086      	sub	sp, #24
 8007806:	af00      	add	r7, sp, #0
 8007808:	60f8      	str	r0, [r7, #12]
 800780a:	60b9      	str	r1, [r7, #8]
 800780c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800780e:	2300      	movs	r3, #0
 8007810:	617b      	str	r3, [r7, #20]
 8007812:	e009      	b.n	8007828 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8007814:	68bb      	ldr	r3, [r7, #8]
 8007816:	1c5a      	adds	r2, r3, #1
 8007818:	60ba      	str	r2, [r7, #8]
 800781a:	781b      	ldrb	r3, [r3, #0]
 800781c:	4618      	mov	r0, r3
 800781e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007822:	697b      	ldr	r3, [r7, #20]
 8007824:	3301      	adds	r3, #1
 8007826:	617b      	str	r3, [r7, #20]
 8007828:	697a      	ldr	r2, [r7, #20]
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	429a      	cmp	r2, r3
 800782e:	dbf1      	blt.n	8007814 <_write+0x12>
  }
  return len;
 8007830:	687b      	ldr	r3, [r7, #4]
}
 8007832:	4618      	mov	r0, r3
 8007834:	3718      	adds	r7, #24
 8007836:	46bd      	mov	sp, r7
 8007838:	bd80      	pop	{r7, pc}

0800783a <_close>:

int _close(int file)
{
 800783a:	b480      	push	{r7}
 800783c:	b083      	sub	sp, #12
 800783e:	af00      	add	r7, sp, #0
 8007840:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8007842:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007846:	4618      	mov	r0, r3
 8007848:	370c      	adds	r7, #12
 800784a:	46bd      	mov	sp, r7
 800784c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007850:	4770      	bx	lr

08007852 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8007852:	b480      	push	{r7}
 8007854:	b083      	sub	sp, #12
 8007856:	af00      	add	r7, sp, #0
 8007858:	6078      	str	r0, [r7, #4]
 800785a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800785c:	683b      	ldr	r3, [r7, #0]
 800785e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8007862:	605a      	str	r2, [r3, #4]
  return 0;
 8007864:	2300      	movs	r3, #0
}
 8007866:	4618      	mov	r0, r3
 8007868:	370c      	adds	r7, #12
 800786a:	46bd      	mov	sp, r7
 800786c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007870:	4770      	bx	lr

08007872 <_isatty>:

int _isatty(int file)
{
 8007872:	b480      	push	{r7}
 8007874:	b083      	sub	sp, #12
 8007876:	af00      	add	r7, sp, #0
 8007878:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800787a:	2301      	movs	r3, #1
}
 800787c:	4618      	mov	r0, r3
 800787e:	370c      	adds	r7, #12
 8007880:	46bd      	mov	sp, r7
 8007882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007886:	4770      	bx	lr

08007888 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8007888:	b480      	push	{r7}
 800788a:	b085      	sub	sp, #20
 800788c:	af00      	add	r7, sp, #0
 800788e:	60f8      	str	r0, [r7, #12]
 8007890:	60b9      	str	r1, [r7, #8]
 8007892:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8007894:	2300      	movs	r3, #0
}
 8007896:	4618      	mov	r0, r3
 8007898:	3714      	adds	r7, #20
 800789a:	46bd      	mov	sp, r7
 800789c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a0:	4770      	bx	lr
	...

080078a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80078a4:	b580      	push	{r7, lr}
 80078a6:	b086      	sub	sp, #24
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80078ac:	4a14      	ldr	r2, [pc, #80]	@ (8007900 <_sbrk+0x5c>)
 80078ae:	4b15      	ldr	r3, [pc, #84]	@ (8007904 <_sbrk+0x60>)
 80078b0:	1ad3      	subs	r3, r2, r3
 80078b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80078b4:	697b      	ldr	r3, [r7, #20]
 80078b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80078b8:	4b13      	ldr	r3, [pc, #76]	@ (8007908 <_sbrk+0x64>)
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d102      	bne.n	80078c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80078c0:	4b11      	ldr	r3, [pc, #68]	@ (8007908 <_sbrk+0x64>)
 80078c2:	4a12      	ldr	r2, [pc, #72]	@ (800790c <_sbrk+0x68>)
 80078c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80078c6:	4b10      	ldr	r3, [pc, #64]	@ (8007908 <_sbrk+0x64>)
 80078c8:	681a      	ldr	r2, [r3, #0]
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	4413      	add	r3, r2
 80078ce:	693a      	ldr	r2, [r7, #16]
 80078d0:	429a      	cmp	r2, r3
 80078d2:	d207      	bcs.n	80078e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80078d4:	f009 f892 	bl	80109fc <__errno>
 80078d8:	4603      	mov	r3, r0
 80078da:	220c      	movs	r2, #12
 80078dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80078de:	f04f 33ff 	mov.w	r3, #4294967295
 80078e2:	e009      	b.n	80078f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80078e4:	4b08      	ldr	r3, [pc, #32]	@ (8007908 <_sbrk+0x64>)
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80078ea:	4b07      	ldr	r3, [pc, #28]	@ (8007908 <_sbrk+0x64>)
 80078ec:	681a      	ldr	r2, [r3, #0]
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	4413      	add	r3, r2
 80078f2:	4a05      	ldr	r2, [pc, #20]	@ (8007908 <_sbrk+0x64>)
 80078f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80078f6:	68fb      	ldr	r3, [r7, #12]
}
 80078f8:	4618      	mov	r0, r3
 80078fa:	3718      	adds	r7, #24
 80078fc:	46bd      	mov	sp, r7
 80078fe:	bd80      	pop	{r7, pc}
 8007900:	20030000 	.word	0x20030000
 8007904:	00000400 	.word	0x00000400
 8007908:	2000297c 	.word	0x2000297c
 800790c:	20002e90 	.word	0x20002e90

08007910 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8007910:	b480      	push	{r7}
 8007912:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8007914:	4b24      	ldr	r3, [pc, #144]	@ (80079a8 <SystemInit+0x98>)
 8007916:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800791a:	4a23      	ldr	r2, [pc, #140]	@ (80079a8 <SystemInit+0x98>)
 800791c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007920:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8007924:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800792e:	f043 0301 	orr.w	r3, r3, #1
 8007932:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8007934:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007938:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 800793c:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 800793e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007942:	681a      	ldr	r2, [r3, #0]
 8007944:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007948:	4b18      	ldr	r3, [pc, #96]	@ (80079ac <SystemInit+0x9c>)
 800794a:	4013      	ands	r3, r2
 800794c:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 800794e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007952:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007956:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800795a:	f023 0305 	bic.w	r3, r3, #5
 800795e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8007962:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007966:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800796a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800796e:	f023 0301 	bic.w	r3, r3, #1
 8007972:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8007976:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800797a:	4a0d      	ldr	r2, [pc, #52]	@ (80079b0 <SystemInit+0xa0>)
 800797c:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 800797e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007982:	4a0b      	ldr	r2, [pc, #44]	@ (80079b0 <SystemInit+0xa0>)
 8007984:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8007986:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007990:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007994:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8007996:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800799a:	2200      	movs	r2, #0
 800799c:	619a      	str	r2, [r3, #24]
}
 800799e:	bf00      	nop
 80079a0:	46bd      	mov	sp, r7
 80079a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a6:	4770      	bx	lr
 80079a8:	e000ed00 	.word	0xe000ed00
 80079ac:	faf6fefb 	.word	0xfaf6fefb
 80079b0:	22041000 	.word	0x22041000

080079b4 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 80079b4:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80079b6:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80079b8:	3304      	adds	r3, #4

080079ba <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80079ba:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80079bc:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 80079be:	d3f9      	bcc.n	80079b4 <CopyDataInit>
  bx lr
 80079c0:	4770      	bx	lr

080079c2 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 80079c2:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 80079c4:	3004      	adds	r0, #4

080079c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 80079c6:	4288      	cmp	r0, r1
  bcc FillZerobss
 80079c8:	d3fb      	bcc.n	80079c2 <FillZerobss>
  bx lr
 80079ca:	4770      	bx	lr

080079cc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80079cc:	480c      	ldr	r0, [pc, #48]	@ (8007a00 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80079ce:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80079d0:	f7ff ff9e 	bl	8007910 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 80079d4:	480b      	ldr	r0, [pc, #44]	@ (8007a04 <LoopForever+0x6>)
 80079d6:	490c      	ldr	r1, [pc, #48]	@ (8007a08 <LoopForever+0xa>)
 80079d8:	4a0c      	ldr	r2, [pc, #48]	@ (8007a0c <LoopForever+0xe>)
 80079da:	2300      	movs	r3, #0
 80079dc:	f7ff ffed 	bl	80079ba <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 80079e0:	480b      	ldr	r0, [pc, #44]	@ (8007a10 <LoopForever+0x12>)
 80079e2:	490c      	ldr	r1, [pc, #48]	@ (8007a14 <LoopForever+0x16>)
 80079e4:	4a0c      	ldr	r2, [pc, #48]	@ (8007a18 <LoopForever+0x1a>)
 80079e6:	2300      	movs	r3, #0
 80079e8:	f7ff ffe7 	bl	80079ba <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 80079ec:	480b      	ldr	r0, [pc, #44]	@ (8007a1c <LoopForever+0x1e>)
 80079ee:	490c      	ldr	r1, [pc, #48]	@ (8007a20 <LoopForever+0x22>)
 80079f0:	2300      	movs	r3, #0
 80079f2:	f7ff ffe8 	bl	80079c6 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80079f6:	f009 f807 	bl	8010a08 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80079fa:	f7fe f839 	bl	8005a70 <main>

080079fe <LoopForever>:

LoopForever:
  b LoopForever
 80079fe:	e7fe      	b.n	80079fe <LoopForever>
  ldr   r0, =_estack
 8007a00:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8007a04:	20000008 	.word	0x20000008
 8007a08:	200000e0 	.word	0x200000e0
 8007a0c:	080127d4 	.word	0x080127d4
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8007a10:	200301e4 	.word	0x200301e4
 8007a14:	20030a67 	.word	0x20030a67
 8007a18:	080128f2 	.word	0x080128f2
  INIT_BSS _sbss, _ebss
 8007a1c:	20000130 	.word	0x20000130
 8007a20:	20002e8c 	.word	0x20002e8c

08007a24 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8007a24:	e7fe      	b.n	8007a24 <ADC1_IRQHandler>
	...

08007a28 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007a28:	b580      	push	{r7, lr}
 8007a2a:	b082      	sub	sp, #8
 8007a2c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8007a2e:	2300      	movs	r3, #0
 8007a30:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007a32:	4b0c      	ldr	r3, [pc, #48]	@ (8007a64 <HAL_Init+0x3c>)
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	4a0b      	ldr	r2, [pc, #44]	@ (8007a64 <HAL_Init+0x3c>)
 8007a38:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007a3c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007a3e:	2003      	movs	r0, #3
 8007a40:	f000 f9b4 	bl	8007dac <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8007a44:	2000      	movs	r0, #0
 8007a46:	f000 f80f 	bl	8007a68 <HAL_InitTick>
 8007a4a:	4603      	mov	r3, r0
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d002      	beq.n	8007a56 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8007a50:	2301      	movs	r3, #1
 8007a52:	71fb      	strb	r3, [r7, #7]
 8007a54:	e001      	b.n	8007a5a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8007a56:	f7ff fd29 	bl	80074ac <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8007a5a:	79fb      	ldrb	r3, [r7, #7]
}
 8007a5c:	4618      	mov	r0, r3
 8007a5e:	3708      	adds	r7, #8
 8007a60:	46bd      	mov	sp, r7
 8007a62:	bd80      	pop	{r7, pc}
 8007a64:	58004000 	.word	0x58004000

08007a68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007a68:	b580      	push	{r7, lr}
 8007a6a:	b084      	sub	sp, #16
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8007a70:	2300      	movs	r3, #0
 8007a72:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8007a74:	4b17      	ldr	r3, [pc, #92]	@ (8007ad4 <HAL_InitTick+0x6c>)
 8007a76:	781b      	ldrb	r3, [r3, #0]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d024      	beq.n	8007ac6 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8007a7c:	f004 f832 	bl	800bae4 <HAL_RCC_GetHCLKFreq>
 8007a80:	4602      	mov	r2, r0
 8007a82:	4b14      	ldr	r3, [pc, #80]	@ (8007ad4 <HAL_InitTick+0x6c>)
 8007a84:	781b      	ldrb	r3, [r3, #0]
 8007a86:	4619      	mov	r1, r3
 8007a88:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8007a8c:	fbb3 f3f1 	udiv	r3, r3, r1
 8007a90:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a94:	4618      	mov	r0, r3
 8007a96:	f000 f9ca 	bl	8007e2e <HAL_SYSTICK_Config>
 8007a9a:	4603      	mov	r3, r0
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d10f      	bne.n	8007ac0 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	2b0f      	cmp	r3, #15
 8007aa4:	d809      	bhi.n	8007aba <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8007aa6:	2200      	movs	r2, #0
 8007aa8:	6879      	ldr	r1, [r7, #4]
 8007aaa:	f04f 30ff 	mov.w	r0, #4294967295
 8007aae:	f000 f988 	bl	8007dc2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8007ab2:	4a09      	ldr	r2, [pc, #36]	@ (8007ad8 <HAL_InitTick+0x70>)
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	6013      	str	r3, [r2, #0]
 8007ab8:	e007      	b.n	8007aca <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8007aba:	2301      	movs	r3, #1
 8007abc:	73fb      	strb	r3, [r7, #15]
 8007abe:	e004      	b.n	8007aca <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8007ac0:	2301      	movs	r3, #1
 8007ac2:	73fb      	strb	r3, [r7, #15]
 8007ac4:	e001      	b.n	8007aca <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8007ac6:	2301      	movs	r3, #1
 8007ac8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8007aca:	7bfb      	ldrb	r3, [r7, #15]
}
 8007acc:	4618      	mov	r0, r3
 8007ace:	3710      	adds	r7, #16
 8007ad0:	46bd      	mov	sp, r7
 8007ad2:	bd80      	pop	{r7, pc}
 8007ad4:	20000054 	.word	0x20000054
 8007ad8:	20000050 	.word	0x20000050

08007adc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007adc:	b480      	push	{r7}
 8007ade:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8007ae0:	4b06      	ldr	r3, [pc, #24]	@ (8007afc <HAL_IncTick+0x20>)
 8007ae2:	781b      	ldrb	r3, [r3, #0]
 8007ae4:	461a      	mov	r2, r3
 8007ae6:	4b06      	ldr	r3, [pc, #24]	@ (8007b00 <HAL_IncTick+0x24>)
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	4413      	add	r3, r2
 8007aec:	4a04      	ldr	r2, [pc, #16]	@ (8007b00 <HAL_IncTick+0x24>)
 8007aee:	6013      	str	r3, [r2, #0]
}
 8007af0:	bf00      	nop
 8007af2:	46bd      	mov	sp, r7
 8007af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af8:	4770      	bx	lr
 8007afa:	bf00      	nop
 8007afc:	20000054 	.word	0x20000054
 8007b00:	20002980 	.word	0x20002980

08007b04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007b04:	b480      	push	{r7}
 8007b06:	af00      	add	r7, sp, #0
  return uwTick;
 8007b08:	4b03      	ldr	r3, [pc, #12]	@ (8007b18 <HAL_GetTick+0x14>)
 8007b0a:	681b      	ldr	r3, [r3, #0]
}
 8007b0c:	4618      	mov	r0, r3
 8007b0e:	46bd      	mov	sp, r7
 8007b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b14:	4770      	bx	lr
 8007b16:	bf00      	nop
 8007b18:	20002980 	.word	0x20002980

08007b1c <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8007b1c:	b480      	push	{r7}
 8007b1e:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8007b20:	4b03      	ldr	r3, [pc, #12]	@ (8007b30 <HAL_GetTickPrio+0x14>)
 8007b22:	681b      	ldr	r3, [r3, #0]
}
 8007b24:	4618      	mov	r0, r3
 8007b26:	46bd      	mov	sp, r7
 8007b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2c:	4770      	bx	lr
 8007b2e:	bf00      	nop
 8007b30:	20000050 	.word	0x20000050

08007b34 <HAL_GetTickFreq>:
  * @brief Return tick frequency.
  * @retval Tick frequency.
  *         Value of @ref HAL_TickFreqTypeDef.
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
 8007b34:	b480      	push	{r7}
 8007b36:	af00      	add	r7, sp, #0
  return uwTickFreq;
 8007b38:	4b03      	ldr	r3, [pc, #12]	@ (8007b48 <HAL_GetTickFreq+0x14>)
 8007b3a:	781b      	ldrb	r3, [r3, #0]
}
 8007b3c:	4618      	mov	r0, r3
 8007b3e:	46bd      	mov	sp, r7
 8007b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b44:	4770      	bx	lr
 8007b46:	bf00      	nop
 8007b48:	20000054 	.word	0x20000054

08007b4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007b4c:	b480      	push	{r7}
 8007b4e:	b085      	sub	sp, #20
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	f003 0307 	and.w	r3, r3, #7
 8007b5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007b5c:	4b0c      	ldr	r3, [pc, #48]	@ (8007b90 <__NVIC_SetPriorityGrouping+0x44>)
 8007b5e:	68db      	ldr	r3, [r3, #12]
 8007b60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007b62:	68ba      	ldr	r2, [r7, #8]
 8007b64:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8007b68:	4013      	ands	r3, r2
 8007b6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007b70:	68bb      	ldr	r3, [r7, #8]
 8007b72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007b74:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8007b78:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007b7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007b7e:	4a04      	ldr	r2, [pc, #16]	@ (8007b90 <__NVIC_SetPriorityGrouping+0x44>)
 8007b80:	68bb      	ldr	r3, [r7, #8]
 8007b82:	60d3      	str	r3, [r2, #12]
}
 8007b84:	bf00      	nop
 8007b86:	3714      	adds	r7, #20
 8007b88:	46bd      	mov	sp, r7
 8007b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b8e:	4770      	bx	lr
 8007b90:	e000ed00 	.word	0xe000ed00

08007b94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007b94:	b480      	push	{r7}
 8007b96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007b98:	4b04      	ldr	r3, [pc, #16]	@ (8007bac <__NVIC_GetPriorityGrouping+0x18>)
 8007b9a:	68db      	ldr	r3, [r3, #12]
 8007b9c:	0a1b      	lsrs	r3, r3, #8
 8007b9e:	f003 0307 	and.w	r3, r3, #7
}
 8007ba2:	4618      	mov	r0, r3
 8007ba4:	46bd      	mov	sp, r7
 8007ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007baa:	4770      	bx	lr
 8007bac:	e000ed00 	.word	0xe000ed00

08007bb0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007bb0:	b480      	push	{r7}
 8007bb2:	b083      	sub	sp, #12
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	4603      	mov	r3, r0
 8007bb8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007bba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	db0b      	blt.n	8007bda <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007bc2:	79fb      	ldrb	r3, [r7, #7]
 8007bc4:	f003 021f 	and.w	r2, r3, #31
 8007bc8:	4907      	ldr	r1, [pc, #28]	@ (8007be8 <__NVIC_EnableIRQ+0x38>)
 8007bca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007bce:	095b      	lsrs	r3, r3, #5
 8007bd0:	2001      	movs	r0, #1
 8007bd2:	fa00 f202 	lsl.w	r2, r0, r2
 8007bd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8007bda:	bf00      	nop
 8007bdc:	370c      	adds	r7, #12
 8007bde:	46bd      	mov	sp, r7
 8007be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be4:	4770      	bx	lr
 8007be6:	bf00      	nop
 8007be8:	e000e100 	.word	0xe000e100

08007bec <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8007bec:	b480      	push	{r7}
 8007bee:	b083      	sub	sp, #12
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	4603      	mov	r3, r0
 8007bf4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007bf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	db12      	blt.n	8007c24 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007bfe:	79fb      	ldrb	r3, [r7, #7]
 8007c00:	f003 021f 	and.w	r2, r3, #31
 8007c04:	490a      	ldr	r1, [pc, #40]	@ (8007c30 <__NVIC_DisableIRQ+0x44>)
 8007c06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007c0a:	095b      	lsrs	r3, r3, #5
 8007c0c:	2001      	movs	r0, #1
 8007c0e:	fa00 f202 	lsl.w	r2, r0, r2
 8007c12:	3320      	adds	r3, #32
 8007c14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8007c18:	f3bf 8f4f 	dsb	sy
}
 8007c1c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8007c1e:	f3bf 8f6f 	isb	sy
}
 8007c22:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8007c24:	bf00      	nop
 8007c26:	370c      	adds	r7, #12
 8007c28:	46bd      	mov	sp, r7
 8007c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2e:	4770      	bx	lr
 8007c30:	e000e100 	.word	0xe000e100

08007c34 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8007c34:	b480      	push	{r7}
 8007c36:	b083      	sub	sp, #12
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	4603      	mov	r3, r0
 8007c3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007c3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	db0c      	blt.n	8007c60 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007c46:	79fb      	ldrb	r3, [r7, #7]
 8007c48:	f003 021f 	and.w	r2, r3, #31
 8007c4c:	4907      	ldr	r1, [pc, #28]	@ (8007c6c <__NVIC_SetPendingIRQ+0x38>)
 8007c4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007c52:	095b      	lsrs	r3, r3, #5
 8007c54:	2001      	movs	r0, #1
 8007c56:	fa00 f202 	lsl.w	r2, r0, r2
 8007c5a:	3340      	adds	r3, #64	@ 0x40
 8007c5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8007c60:	bf00      	nop
 8007c62:	370c      	adds	r7, #12
 8007c64:	46bd      	mov	sp, r7
 8007c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c6a:	4770      	bx	lr
 8007c6c:	e000e100 	.word	0xe000e100

08007c70 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8007c70:	b480      	push	{r7}
 8007c72:	b083      	sub	sp, #12
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	4603      	mov	r3, r0
 8007c78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007c7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	db0c      	blt.n	8007c9c <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007c82:	79fb      	ldrb	r3, [r7, #7]
 8007c84:	f003 021f 	and.w	r2, r3, #31
 8007c88:	4907      	ldr	r1, [pc, #28]	@ (8007ca8 <__NVIC_ClearPendingIRQ+0x38>)
 8007c8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007c8e:	095b      	lsrs	r3, r3, #5
 8007c90:	2001      	movs	r0, #1
 8007c92:	fa00 f202 	lsl.w	r2, r0, r2
 8007c96:	3360      	adds	r3, #96	@ 0x60
 8007c98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8007c9c:	bf00      	nop
 8007c9e:	370c      	adds	r7, #12
 8007ca0:	46bd      	mov	sp, r7
 8007ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca6:	4770      	bx	lr
 8007ca8:	e000e100 	.word	0xe000e100

08007cac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007cac:	b480      	push	{r7}
 8007cae:	b083      	sub	sp, #12
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	4603      	mov	r3, r0
 8007cb4:	6039      	str	r1, [r7, #0]
 8007cb6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007cb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	db0a      	blt.n	8007cd6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007cc0:	683b      	ldr	r3, [r7, #0]
 8007cc2:	b2da      	uxtb	r2, r3
 8007cc4:	490c      	ldr	r1, [pc, #48]	@ (8007cf8 <__NVIC_SetPriority+0x4c>)
 8007cc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007cca:	0112      	lsls	r2, r2, #4
 8007ccc:	b2d2      	uxtb	r2, r2
 8007cce:	440b      	add	r3, r1
 8007cd0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007cd4:	e00a      	b.n	8007cec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007cd6:	683b      	ldr	r3, [r7, #0]
 8007cd8:	b2da      	uxtb	r2, r3
 8007cda:	4908      	ldr	r1, [pc, #32]	@ (8007cfc <__NVIC_SetPriority+0x50>)
 8007cdc:	79fb      	ldrb	r3, [r7, #7]
 8007cde:	f003 030f 	and.w	r3, r3, #15
 8007ce2:	3b04      	subs	r3, #4
 8007ce4:	0112      	lsls	r2, r2, #4
 8007ce6:	b2d2      	uxtb	r2, r2
 8007ce8:	440b      	add	r3, r1
 8007cea:	761a      	strb	r2, [r3, #24]
}
 8007cec:	bf00      	nop
 8007cee:	370c      	adds	r7, #12
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf6:	4770      	bx	lr
 8007cf8:	e000e100 	.word	0xe000e100
 8007cfc:	e000ed00 	.word	0xe000ed00

08007d00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007d00:	b480      	push	{r7}
 8007d02:	b089      	sub	sp, #36	@ 0x24
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	60f8      	str	r0, [r7, #12]
 8007d08:	60b9      	str	r1, [r7, #8]
 8007d0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	f003 0307 	and.w	r3, r3, #7
 8007d12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007d14:	69fb      	ldr	r3, [r7, #28]
 8007d16:	f1c3 0307 	rsb	r3, r3, #7
 8007d1a:	2b04      	cmp	r3, #4
 8007d1c:	bf28      	it	cs
 8007d1e:	2304      	movcs	r3, #4
 8007d20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007d22:	69fb      	ldr	r3, [r7, #28]
 8007d24:	3304      	adds	r3, #4
 8007d26:	2b06      	cmp	r3, #6
 8007d28:	d902      	bls.n	8007d30 <NVIC_EncodePriority+0x30>
 8007d2a:	69fb      	ldr	r3, [r7, #28]
 8007d2c:	3b03      	subs	r3, #3
 8007d2e:	e000      	b.n	8007d32 <NVIC_EncodePriority+0x32>
 8007d30:	2300      	movs	r3, #0
 8007d32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007d34:	f04f 32ff 	mov.w	r2, #4294967295
 8007d38:	69bb      	ldr	r3, [r7, #24]
 8007d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8007d3e:	43da      	mvns	r2, r3
 8007d40:	68bb      	ldr	r3, [r7, #8]
 8007d42:	401a      	ands	r2, r3
 8007d44:	697b      	ldr	r3, [r7, #20]
 8007d46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007d48:	f04f 31ff 	mov.w	r1, #4294967295
 8007d4c:	697b      	ldr	r3, [r7, #20]
 8007d4e:	fa01 f303 	lsl.w	r3, r1, r3
 8007d52:	43d9      	mvns	r1, r3
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007d58:	4313      	orrs	r3, r2
         );
}
 8007d5a:	4618      	mov	r0, r3
 8007d5c:	3724      	adds	r7, #36	@ 0x24
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d64:	4770      	bx	lr
	...

08007d68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007d68:	b580      	push	{r7, lr}
 8007d6a:	b082      	sub	sp, #8
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	3b01      	subs	r3, #1
 8007d74:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007d78:	d301      	bcc.n	8007d7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007d7a:	2301      	movs	r3, #1
 8007d7c:	e00f      	b.n	8007d9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007d7e:	4a0a      	ldr	r2, [pc, #40]	@ (8007da8 <SysTick_Config+0x40>)
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	3b01      	subs	r3, #1
 8007d84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007d86:	210f      	movs	r1, #15
 8007d88:	f04f 30ff 	mov.w	r0, #4294967295
 8007d8c:	f7ff ff8e 	bl	8007cac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007d90:	4b05      	ldr	r3, [pc, #20]	@ (8007da8 <SysTick_Config+0x40>)
 8007d92:	2200      	movs	r2, #0
 8007d94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007d96:	4b04      	ldr	r3, [pc, #16]	@ (8007da8 <SysTick_Config+0x40>)
 8007d98:	2207      	movs	r2, #7
 8007d9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007d9c:	2300      	movs	r3, #0
}
 8007d9e:	4618      	mov	r0, r3
 8007da0:	3708      	adds	r7, #8
 8007da2:	46bd      	mov	sp, r7
 8007da4:	bd80      	pop	{r7, pc}
 8007da6:	bf00      	nop
 8007da8:	e000e010 	.word	0xe000e010

08007dac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007dac:	b580      	push	{r7, lr}
 8007dae:	b082      	sub	sp, #8
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007db4:	6878      	ldr	r0, [r7, #4]
 8007db6:	f7ff fec9 	bl	8007b4c <__NVIC_SetPriorityGrouping>
}
 8007dba:	bf00      	nop
 8007dbc:	3708      	adds	r7, #8
 8007dbe:	46bd      	mov	sp, r7
 8007dc0:	bd80      	pop	{r7, pc}

08007dc2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007dc2:	b580      	push	{r7, lr}
 8007dc4:	b086      	sub	sp, #24
 8007dc6:	af00      	add	r7, sp, #0
 8007dc8:	4603      	mov	r3, r0
 8007dca:	60b9      	str	r1, [r7, #8]
 8007dcc:	607a      	str	r2, [r7, #4]
 8007dce:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8007dd0:	f7ff fee0 	bl	8007b94 <__NVIC_GetPriorityGrouping>
 8007dd4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007dd6:	687a      	ldr	r2, [r7, #4]
 8007dd8:	68b9      	ldr	r1, [r7, #8]
 8007dda:	6978      	ldr	r0, [r7, #20]
 8007ddc:	f7ff ff90 	bl	8007d00 <NVIC_EncodePriority>
 8007de0:	4602      	mov	r2, r0
 8007de2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007de6:	4611      	mov	r1, r2
 8007de8:	4618      	mov	r0, r3
 8007dea:	f7ff ff5f 	bl	8007cac <__NVIC_SetPriority>
}
 8007dee:	bf00      	nop
 8007df0:	3718      	adds	r7, #24
 8007df2:	46bd      	mov	sp, r7
 8007df4:	bd80      	pop	{r7, pc}

08007df6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007df6:	b580      	push	{r7, lr}
 8007df8:	b082      	sub	sp, #8
 8007dfa:	af00      	add	r7, sp, #0
 8007dfc:	4603      	mov	r3, r0
 8007dfe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007e00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007e04:	4618      	mov	r0, r3
 8007e06:	f7ff fed3 	bl	8007bb0 <__NVIC_EnableIRQ>
}
 8007e0a:	bf00      	nop
 8007e0c:	3708      	adds	r7, #8
 8007e0e:	46bd      	mov	sp, r7
 8007e10:	bd80      	pop	{r7, pc}

08007e12 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8007e12:	b580      	push	{r7, lr}
 8007e14:	b082      	sub	sp, #8
 8007e16:	af00      	add	r7, sp, #0
 8007e18:	4603      	mov	r3, r0
 8007e1a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8007e1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007e20:	4618      	mov	r0, r3
 8007e22:	f7ff fee3 	bl	8007bec <__NVIC_DisableIRQ>
}
 8007e26:	bf00      	nop
 8007e28:	3708      	adds	r7, #8
 8007e2a:	46bd      	mov	sp, r7
 8007e2c:	bd80      	pop	{r7, pc}

08007e2e <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007e2e:	b580      	push	{r7, lr}
 8007e30:	b082      	sub	sp, #8
 8007e32:	af00      	add	r7, sp, #0
 8007e34:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8007e36:	6878      	ldr	r0, [r7, #4]
 8007e38:	f7ff ff96 	bl	8007d68 <SysTick_Config>
 8007e3c:	4603      	mov	r3, r0
}
 8007e3e:	4618      	mov	r0, r3
 8007e40:	3708      	adds	r7, #8
 8007e42:	46bd      	mov	sp, r7
 8007e44:	bd80      	pop	{r7, pc}

08007e46 <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8007e46:	b580      	push	{r7, lr}
 8007e48:	b082      	sub	sp, #8
 8007e4a:	af00      	add	r7, sp, #0
 8007e4c:	4603      	mov	r3, r0
 8007e4e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8007e50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007e54:	4618      	mov	r0, r3
 8007e56:	f7ff feed 	bl	8007c34 <__NVIC_SetPendingIRQ>
}
 8007e5a:	bf00      	nop
 8007e5c:	3708      	adds	r7, #8
 8007e5e:	46bd      	mov	sp, r7
 8007e60:	bd80      	pop	{r7, pc}

08007e62 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8007e62:	b580      	push	{r7, lr}
 8007e64:	b082      	sub	sp, #8
 8007e66:	af00      	add	r7, sp, #0
 8007e68:	4603      	mov	r3, r0
 8007e6a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8007e6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007e70:	4618      	mov	r0, r3
 8007e72:	f7ff fefd 	bl	8007c70 <__NVIC_ClearPendingIRQ>
}
 8007e76:	bf00      	nop
 8007e78:	3708      	adds	r7, #8
 8007e7a:	46bd      	mov	sp, r7
 8007e7c:	bd80      	pop	{r7, pc}
	...

08007e80 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007e80:	b580      	push	{r7, lr}
 8007e82:	b084      	sub	sp, #16
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d101      	bne.n	8007e92 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8007e8e:	2301      	movs	r3, #1
 8007e90:	e08e      	b.n	8007fb0 <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	461a      	mov	r2, r3
 8007e98:	4b47      	ldr	r3, [pc, #284]	@ (8007fb8 <HAL_DMA_Init+0x138>)
 8007e9a:	429a      	cmp	r2, r3
 8007e9c:	d80f      	bhi.n	8007ebe <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	461a      	mov	r2, r3
 8007ea4:	4b45      	ldr	r3, [pc, #276]	@ (8007fbc <HAL_DMA_Init+0x13c>)
 8007ea6:	4413      	add	r3, r2
 8007ea8:	4a45      	ldr	r2, [pc, #276]	@ (8007fc0 <HAL_DMA_Init+0x140>)
 8007eaa:	fba2 2303 	umull	r2, r3, r2, r3
 8007eae:	091b      	lsrs	r3, r3, #4
 8007eb0:	009a      	lsls	r2, r3, #2
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	4a42      	ldr	r2, [pc, #264]	@ (8007fc4 <HAL_DMA_Init+0x144>)
 8007eba:	641a      	str	r2, [r3, #64]	@ 0x40
 8007ebc:	e00e      	b.n	8007edc <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	461a      	mov	r2, r3
 8007ec4:	4b40      	ldr	r3, [pc, #256]	@ (8007fc8 <HAL_DMA_Init+0x148>)
 8007ec6:	4413      	add	r3, r2
 8007ec8:	4a3d      	ldr	r2, [pc, #244]	@ (8007fc0 <HAL_DMA_Init+0x140>)
 8007eca:	fba2 2303 	umull	r2, r3, r2, r3
 8007ece:	091b      	lsrs	r3, r3, #4
 8007ed0:	009a      	lsls	r2, r3, #2
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	4a3c      	ldr	r2, [pc, #240]	@ (8007fcc <HAL_DMA_Init+0x14c>)
 8007eda:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	2202      	movs	r2, #2
 8007ee0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8007ef2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007ef6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8007f00:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	691b      	ldr	r3, [r3, #16]
 8007f06:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007f0c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	699b      	ldr	r3, [r3, #24]
 8007f12:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007f18:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	6a1b      	ldr	r3, [r3, #32]
 8007f1e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8007f20:	68fa      	ldr	r2, [r7, #12]
 8007f22:	4313      	orrs	r3, r2
 8007f24:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	68fa      	ldr	r2, [r7, #12]
 8007f2c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8007f2e:	6878      	ldr	r0, [r7, #4]
 8007f30:	f000 fa24 	bl	800837c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	689b      	ldr	r3, [r3, #8]
 8007f38:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007f3c:	d102      	bne.n	8007f44 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	2200      	movs	r2, #0
 8007f42:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	685a      	ldr	r2, [r3, #4]
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007f4c:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8007f50:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007f56:	687a      	ldr	r2, [r7, #4]
 8007f58:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8007f5a:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	685b      	ldr	r3, [r3, #4]
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d010      	beq.n	8007f86 <HAL_DMA_Init+0x106>
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	685b      	ldr	r3, [r3, #4]
 8007f68:	2b04      	cmp	r3, #4
 8007f6a:	d80c      	bhi.n	8007f86 <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8007f6c:	6878      	ldr	r0, [r7, #4]
 8007f6e:	f000 fa43 	bl	80083f8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f76:	2200      	movs	r2, #0
 8007f78:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007f7e:	687a      	ldr	r2, [r7, #4]
 8007f80:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8007f82:	605a      	str	r2, [r3, #4]
 8007f84:	e008      	b.n	8007f98 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	2200      	movs	r2, #0
 8007f8a:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	2200      	movs	r2, #0
 8007f90:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	2200      	movs	r2, #0
 8007f96:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	2200      	movs	r2, #0
 8007f9c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	2201      	movs	r2, #1
 8007fa2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	2200      	movs	r2, #0
 8007faa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8007fae:	2300      	movs	r3, #0
}
 8007fb0:	4618      	mov	r0, r3
 8007fb2:	3710      	adds	r7, #16
 8007fb4:	46bd      	mov	sp, r7
 8007fb6:	bd80      	pop	{r7, pc}
 8007fb8:	40020407 	.word	0x40020407
 8007fbc:	bffdfff8 	.word	0xbffdfff8
 8007fc0:	cccccccd 	.word	0xcccccccd
 8007fc4:	40020000 	.word	0x40020000
 8007fc8:	bffdfbf8 	.word	0xbffdfbf8
 8007fcc:	40020400 	.word	0x40020400

08007fd0 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8007fd0:	b580      	push	{r7, lr}
 8007fd2:	b086      	sub	sp, #24
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	60f8      	str	r0, [r7, #12]
 8007fd8:	60b9      	str	r1, [r7, #8]
 8007fda:	607a      	str	r2, [r7, #4]
 8007fdc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007fde:	2300      	movs	r3, #0
 8007fe0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8007fe8:	2b01      	cmp	r3, #1
 8007fea:	d101      	bne.n	8007ff0 <HAL_DMA_Start_IT+0x20>
 8007fec:	2302      	movs	r3, #2
 8007fee:	e066      	b.n	80080be <HAL_DMA_Start_IT+0xee>
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	2201      	movs	r2, #1
 8007ff4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8007ffe:	b2db      	uxtb	r3, r3
 8008000:	2b01      	cmp	r3, #1
 8008002:	d155      	bne.n	80080b0 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	2202      	movs	r2, #2
 8008008:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	2200      	movs	r2, #0
 8008010:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	681a      	ldr	r2, [r3, #0]
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	f022 0201 	bic.w	r2, r2, #1
 8008020:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8008022:	683b      	ldr	r3, [r7, #0]
 8008024:	687a      	ldr	r2, [r7, #4]
 8008026:	68b9      	ldr	r1, [r7, #8]
 8008028:	68f8      	ldr	r0, [r7, #12]
 800802a:	f000 f968 	bl	80082fe <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008032:	2b00      	cmp	r3, #0
 8008034:	d008      	beq.n	8008048 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	681a      	ldr	r2, [r3, #0]
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	f042 020e 	orr.w	r2, r2, #14
 8008044:	601a      	str	r2, [r3, #0]
 8008046:	e00f      	b.n	8008068 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	681a      	ldr	r2, [r3, #0]
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	f022 0204 	bic.w	r2, r2, #4
 8008056:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	681a      	ldr	r2, [r3, #0]
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	f042 020a 	orr.w	r2, r2, #10
 8008066:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008072:	2b00      	cmp	r3, #0
 8008074:	d007      	beq.n	8008086 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800807a:	681a      	ldr	r2, [r3, #0]
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008080:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008084:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800808a:	2b00      	cmp	r3, #0
 800808c:	d007      	beq.n	800809e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008092:	681a      	ldr	r2, [r3, #0]
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008098:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800809c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	681a      	ldr	r2, [r3, #0]
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	f042 0201 	orr.w	r2, r2, #1
 80080ac:	601a      	str	r2, [r3, #0]
 80080ae:	e005      	b.n	80080bc <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	2200      	movs	r2, #0
 80080b4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80080b8:	2302      	movs	r3, #2
 80080ba:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80080bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80080be:	4618      	mov	r0, r3
 80080c0:	3718      	adds	r7, #24
 80080c2:	46bd      	mov	sp, r7
 80080c4:	bd80      	pop	{r7, pc}

080080c6 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80080c6:	b580      	push	{r7, lr}
 80080c8:	b084      	sub	sp, #16
 80080ca:	af00      	add	r7, sp, #0
 80080cc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80080ce:	2300      	movs	r3, #0
 80080d0:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80080d8:	b2db      	uxtb	r3, r3
 80080da:	2b02      	cmp	r3, #2
 80080dc:	d005      	beq.n	80080ea <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	2204      	movs	r2, #4
 80080e2:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80080e4:	2301      	movs	r3, #1
 80080e6:	73fb      	strb	r3, [r7, #15]
 80080e8:	e047      	b.n	800817a <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	681a      	ldr	r2, [r3, #0]
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	f022 020e 	bic.w	r2, r2, #14
 80080f8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	681a      	ldr	r2, [r3, #0]
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	f022 0201 	bic.w	r2, r2, #1
 8008108:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800810e:	681a      	ldr	r2, [r3, #0]
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008114:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008118:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800811e:	f003 021c 	and.w	r2, r3, #28
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008126:	2101      	movs	r1, #1
 8008128:	fa01 f202 	lsl.w	r2, r1, r2
 800812c:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008132:	687a      	ldr	r2, [r7, #4]
 8008134:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8008136:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800813c:	2b00      	cmp	r3, #0
 800813e:	d00c      	beq.n	800815a <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008144:	681a      	ldr	r2, [r3, #0]
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800814a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800814e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008154:	687a      	ldr	r2, [r7, #4]
 8008156:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8008158:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	2201      	movs	r2, #1
 800815e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	2200      	movs	r2, #0
 8008166:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800816e:	2b00      	cmp	r3, #0
 8008170:	d003      	beq.n	800817a <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008176:	6878      	ldr	r0, [r7, #4]
 8008178:	4798      	blx	r3
    }
  }
  return status;
 800817a:	7bfb      	ldrb	r3, [r7, #15]
}
 800817c:	4618      	mov	r0, r3
 800817e:	3710      	adds	r7, #16
 8008180:	46bd      	mov	sp, r7
 8008182:	bd80      	pop	{r7, pc}

08008184 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8008184:	b580      	push	{r7, lr}
 8008186:	b084      	sub	sp, #16
 8008188:	af00      	add	r7, sp, #0
 800818a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80081a0:	f003 031c 	and.w	r3, r3, #28
 80081a4:	2204      	movs	r2, #4
 80081a6:	409a      	lsls	r2, r3
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	4013      	ands	r3, r2
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d026      	beq.n	80081fe <HAL_DMA_IRQHandler+0x7a>
 80081b0:	68bb      	ldr	r3, [r7, #8]
 80081b2:	f003 0304 	and.w	r3, r3, #4
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d021      	beq.n	80081fe <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	f003 0320 	and.w	r3, r3, #32
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d107      	bne.n	80081d8 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	681a      	ldr	r2, [r3, #0]
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	f022 0204 	bic.w	r2, r2, #4
 80081d6:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80081dc:	f003 021c 	and.w	r2, r3, #28
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80081e4:	2104      	movs	r1, #4
 80081e6:	fa01 f202 	lsl.w	r2, r1, r2
 80081ea:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d071      	beq.n	80082d8 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80081f8:	6878      	ldr	r0, [r7, #4]
 80081fa:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80081fc:	e06c      	b.n	80082d8 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008202:	f003 031c 	and.w	r3, r3, #28
 8008206:	2202      	movs	r2, #2
 8008208:	409a      	lsls	r2, r3
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	4013      	ands	r3, r2
 800820e:	2b00      	cmp	r3, #0
 8008210:	d02e      	beq.n	8008270 <HAL_DMA_IRQHandler+0xec>
 8008212:	68bb      	ldr	r3, [r7, #8]
 8008214:	f003 0302 	and.w	r3, r3, #2
 8008218:	2b00      	cmp	r3, #0
 800821a:	d029      	beq.n	8008270 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	f003 0320 	and.w	r3, r3, #32
 8008226:	2b00      	cmp	r3, #0
 8008228:	d10b      	bne.n	8008242 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	681a      	ldr	r2, [r3, #0]
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	f022 020a 	bic.w	r2, r2, #10
 8008238:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	2201      	movs	r2, #1
 800823e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008246:	f003 021c 	and.w	r2, r3, #28
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800824e:	2102      	movs	r1, #2
 8008250:	fa01 f202 	lsl.w	r2, r1, r2
 8008254:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	2200      	movs	r2, #0
 800825a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008262:	2b00      	cmp	r3, #0
 8008264:	d038      	beq.n	80082d8 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800826a:	6878      	ldr	r0, [r7, #4]
 800826c:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800826e:	e033      	b.n	80082d8 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008274:	f003 031c 	and.w	r3, r3, #28
 8008278:	2208      	movs	r2, #8
 800827a:	409a      	lsls	r2, r3
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	4013      	ands	r3, r2
 8008280:	2b00      	cmp	r3, #0
 8008282:	d02a      	beq.n	80082da <HAL_DMA_IRQHandler+0x156>
 8008284:	68bb      	ldr	r3, [r7, #8]
 8008286:	f003 0308 	and.w	r3, r3, #8
 800828a:	2b00      	cmp	r3, #0
 800828c:	d025      	beq.n	80082da <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	681a      	ldr	r2, [r3, #0]
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	f022 020e 	bic.w	r2, r2, #14
 800829c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80082a2:	f003 021c 	and.w	r2, r3, #28
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80082aa:	2101      	movs	r1, #1
 80082ac:	fa01 f202 	lsl.w	r2, r1, r2
 80082b0:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	2201      	movs	r2, #1
 80082b6:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	2201      	movs	r2, #1
 80082bc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	2200      	movs	r2, #0
 80082c4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d004      	beq.n	80082da <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80082d4:	6878      	ldr	r0, [r7, #4]
 80082d6:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80082d8:	bf00      	nop
 80082da:	bf00      	nop
}
 80082dc:	3710      	adds	r7, #16
 80082de:	46bd      	mov	sp, r7
 80082e0:	bd80      	pop	{r7, pc}

080082e2 <HAL_DMA_GetState>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80082e2:	b480      	push	{r7}
 80082e4:	b083      	sub	sp, #12
 80082e6:	af00      	add	r7, sp, #0
 80082e8:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80082f0:	b2db      	uxtb	r3, r3
}
 80082f2:	4618      	mov	r0, r3
 80082f4:	370c      	adds	r7, #12
 80082f6:	46bd      	mov	sp, r7
 80082f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082fc:	4770      	bx	lr

080082fe <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80082fe:	b480      	push	{r7}
 8008300:	b085      	sub	sp, #20
 8008302:	af00      	add	r7, sp, #0
 8008304:	60f8      	str	r0, [r7, #12]
 8008306:	60b9      	str	r1, [r7, #8]
 8008308:	607a      	str	r2, [r7, #4]
 800830a:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008310:	68fa      	ldr	r2, [r7, #12]
 8008312:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8008314:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800831a:	2b00      	cmp	r3, #0
 800831c:	d004      	beq.n	8008328 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008322:	68fa      	ldr	r2, [r7, #12]
 8008324:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8008326:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800832c:	f003 021c 	and.w	r2, r3, #28
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008334:	2101      	movs	r1, #1
 8008336:	fa01 f202 	lsl.w	r2, r1, r2
 800833a:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	683a      	ldr	r2, [r7, #0]
 8008342:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	689b      	ldr	r3, [r3, #8]
 8008348:	2b10      	cmp	r3, #16
 800834a:	d108      	bne.n	800835e <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	687a      	ldr	r2, [r7, #4]
 8008352:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	68ba      	ldr	r2, [r7, #8]
 800835a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800835c:	e007      	b.n	800836e <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	68ba      	ldr	r2, [r7, #8]
 8008364:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	687a      	ldr	r2, [r7, #4]
 800836c:	60da      	str	r2, [r3, #12]
}
 800836e:	bf00      	nop
 8008370:	3714      	adds	r7, #20
 8008372:	46bd      	mov	sp, r7
 8008374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008378:	4770      	bx	lr
	...

0800837c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800837c:	b480      	push	{r7}
 800837e:	b085      	sub	sp, #20
 8008380:	af00      	add	r7, sp, #0
 8008382:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	461a      	mov	r2, r3
 800838a:	4b17      	ldr	r3, [pc, #92]	@ (80083e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800838c:	429a      	cmp	r2, r3
 800838e:	d80a      	bhi.n	80083a6 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008394:	089b      	lsrs	r3, r3, #2
 8008396:	009b      	lsls	r3, r3, #2
 8008398:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800839c:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 80083a0:	687a      	ldr	r2, [r7, #4]
 80083a2:	6493      	str	r3, [r2, #72]	@ 0x48
 80083a4:	e007      	b.n	80083b6 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80083aa:	089b      	lsrs	r3, r3, #2
 80083ac:	009a      	lsls	r2, r3, #2
 80083ae:	4b0f      	ldr	r3, [pc, #60]	@ (80083ec <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80083b0:	4413      	add	r3, r2
 80083b2:	687a      	ldr	r2, [r7, #4]
 80083b4:	6493      	str	r3, [r2, #72]	@ 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif /* DMA2 */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	b2db      	uxtb	r3, r3
 80083bc:	3b08      	subs	r3, #8
 80083be:	4a0c      	ldr	r2, [pc, #48]	@ (80083f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80083c0:	fba2 2303 	umull	r2, r3, r2, r3
 80083c4:	091b      	lsrs	r3, r3, #4
 80083c6:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	4a0a      	ldr	r2, [pc, #40]	@ (80083f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80083cc:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	f003 031f 	and.w	r3, r3, #31
 80083d4:	2201      	movs	r2, #1
 80083d6:	409a      	lsls	r2, r3
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80083dc:	bf00      	nop
 80083de:	3714      	adds	r7, #20
 80083e0:	46bd      	mov	sp, r7
 80083e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e6:	4770      	bx	lr
 80083e8:	40020407 	.word	0x40020407
 80083ec:	4002081c 	.word	0x4002081c
 80083f0:	cccccccd 	.word	0xcccccccd
 80083f4:	40020880 	.word	0x40020880

080083f8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80083f8:	b480      	push	{r7}
 80083fa:	b085      	sub	sp, #20
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	685b      	ldr	r3, [r3, #4]
 8008404:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008408:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800840a:	68fa      	ldr	r2, [r7, #12]
 800840c:	4b0b      	ldr	r3, [pc, #44]	@ (800843c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800840e:	4413      	add	r3, r2
 8008410:	009b      	lsls	r3, r3, #2
 8008412:	461a      	mov	r2, r3
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	4a09      	ldr	r2, [pc, #36]	@ (8008440 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 800841c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	3b01      	subs	r3, #1
 8008422:	f003 0303 	and.w	r3, r3, #3
 8008426:	2201      	movs	r2, #1
 8008428:	409a      	lsls	r2, r3
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 800842e:	bf00      	nop
 8008430:	3714      	adds	r7, #20
 8008432:	46bd      	mov	sp, r7
 8008434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008438:	4770      	bx	lr
 800843a:	bf00      	nop
 800843c:	1000823f 	.word	0x1000823f
 8008440:	40020940 	.word	0x40020940

08008444 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008444:	b480      	push	{r7}
 8008446:	b087      	sub	sp, #28
 8008448:	af00      	add	r7, sp, #0
 800844a:	6078      	str	r0, [r7, #4]
 800844c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800844e:	2300      	movs	r3, #0
 8008450:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008452:	e14c      	b.n	80086ee <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8008454:	683b      	ldr	r3, [r7, #0]
 8008456:	681a      	ldr	r2, [r3, #0]
 8008458:	2101      	movs	r1, #1
 800845a:	697b      	ldr	r3, [r7, #20]
 800845c:	fa01 f303 	lsl.w	r3, r1, r3
 8008460:	4013      	ands	r3, r2
 8008462:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	2b00      	cmp	r3, #0
 8008468:	f000 813e 	beq.w	80086e8 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800846c:	683b      	ldr	r3, [r7, #0]
 800846e:	685b      	ldr	r3, [r3, #4]
 8008470:	f003 0303 	and.w	r3, r3, #3
 8008474:	2b01      	cmp	r3, #1
 8008476:	d005      	beq.n	8008484 <HAL_GPIO_Init+0x40>
 8008478:	683b      	ldr	r3, [r7, #0]
 800847a:	685b      	ldr	r3, [r3, #4]
 800847c:	f003 0303 	and.w	r3, r3, #3
 8008480:	2b02      	cmp	r3, #2
 8008482:	d130      	bne.n	80084e6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	689b      	ldr	r3, [r3, #8]
 8008488:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800848a:	697b      	ldr	r3, [r7, #20]
 800848c:	005b      	lsls	r3, r3, #1
 800848e:	2203      	movs	r2, #3
 8008490:	fa02 f303 	lsl.w	r3, r2, r3
 8008494:	43db      	mvns	r3, r3
 8008496:	693a      	ldr	r2, [r7, #16]
 8008498:	4013      	ands	r3, r2
 800849a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800849c:	683b      	ldr	r3, [r7, #0]
 800849e:	68da      	ldr	r2, [r3, #12]
 80084a0:	697b      	ldr	r3, [r7, #20]
 80084a2:	005b      	lsls	r3, r3, #1
 80084a4:	fa02 f303 	lsl.w	r3, r2, r3
 80084a8:	693a      	ldr	r2, [r7, #16]
 80084aa:	4313      	orrs	r3, r2
 80084ac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	693a      	ldr	r2, [r7, #16]
 80084b2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	685b      	ldr	r3, [r3, #4]
 80084b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80084ba:	2201      	movs	r2, #1
 80084bc:	697b      	ldr	r3, [r7, #20]
 80084be:	fa02 f303 	lsl.w	r3, r2, r3
 80084c2:	43db      	mvns	r3, r3
 80084c4:	693a      	ldr	r2, [r7, #16]
 80084c6:	4013      	ands	r3, r2
 80084c8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80084ca:	683b      	ldr	r3, [r7, #0]
 80084cc:	685b      	ldr	r3, [r3, #4]
 80084ce:	091b      	lsrs	r3, r3, #4
 80084d0:	f003 0201 	and.w	r2, r3, #1
 80084d4:	697b      	ldr	r3, [r7, #20]
 80084d6:	fa02 f303 	lsl.w	r3, r2, r3
 80084da:	693a      	ldr	r2, [r7, #16]
 80084dc:	4313      	orrs	r3, r2
 80084de:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	693a      	ldr	r2, [r7, #16]
 80084e4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80084e6:	683b      	ldr	r3, [r7, #0]
 80084e8:	685b      	ldr	r3, [r3, #4]
 80084ea:	f003 0303 	and.w	r3, r3, #3
 80084ee:	2b03      	cmp	r3, #3
 80084f0:	d017      	beq.n	8008522 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	68db      	ldr	r3, [r3, #12]
 80084f6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80084f8:	697b      	ldr	r3, [r7, #20]
 80084fa:	005b      	lsls	r3, r3, #1
 80084fc:	2203      	movs	r2, #3
 80084fe:	fa02 f303 	lsl.w	r3, r2, r3
 8008502:	43db      	mvns	r3, r3
 8008504:	693a      	ldr	r2, [r7, #16]
 8008506:	4013      	ands	r3, r2
 8008508:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800850a:	683b      	ldr	r3, [r7, #0]
 800850c:	689a      	ldr	r2, [r3, #8]
 800850e:	697b      	ldr	r3, [r7, #20]
 8008510:	005b      	lsls	r3, r3, #1
 8008512:	fa02 f303 	lsl.w	r3, r2, r3
 8008516:	693a      	ldr	r2, [r7, #16]
 8008518:	4313      	orrs	r3, r2
 800851a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	693a      	ldr	r2, [r7, #16]
 8008520:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008522:	683b      	ldr	r3, [r7, #0]
 8008524:	685b      	ldr	r3, [r3, #4]
 8008526:	f003 0303 	and.w	r3, r3, #3
 800852a:	2b02      	cmp	r3, #2
 800852c:	d123      	bne.n	8008576 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800852e:	697b      	ldr	r3, [r7, #20]
 8008530:	08da      	lsrs	r2, r3, #3
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	3208      	adds	r2, #8
 8008536:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800853a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800853c:	697b      	ldr	r3, [r7, #20]
 800853e:	f003 0307 	and.w	r3, r3, #7
 8008542:	009b      	lsls	r3, r3, #2
 8008544:	220f      	movs	r2, #15
 8008546:	fa02 f303 	lsl.w	r3, r2, r3
 800854a:	43db      	mvns	r3, r3
 800854c:	693a      	ldr	r2, [r7, #16]
 800854e:	4013      	ands	r3, r2
 8008550:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8008552:	683b      	ldr	r3, [r7, #0]
 8008554:	691a      	ldr	r2, [r3, #16]
 8008556:	697b      	ldr	r3, [r7, #20]
 8008558:	f003 0307 	and.w	r3, r3, #7
 800855c:	009b      	lsls	r3, r3, #2
 800855e:	fa02 f303 	lsl.w	r3, r2, r3
 8008562:	693a      	ldr	r2, [r7, #16]
 8008564:	4313      	orrs	r3, r2
 8008566:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8008568:	697b      	ldr	r3, [r7, #20]
 800856a:	08da      	lsrs	r2, r3, #3
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	3208      	adds	r2, #8
 8008570:	6939      	ldr	r1, [r7, #16]
 8008572:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800857c:	697b      	ldr	r3, [r7, #20]
 800857e:	005b      	lsls	r3, r3, #1
 8008580:	2203      	movs	r2, #3
 8008582:	fa02 f303 	lsl.w	r3, r2, r3
 8008586:	43db      	mvns	r3, r3
 8008588:	693a      	ldr	r2, [r7, #16]
 800858a:	4013      	ands	r3, r2
 800858c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800858e:	683b      	ldr	r3, [r7, #0]
 8008590:	685b      	ldr	r3, [r3, #4]
 8008592:	f003 0203 	and.w	r2, r3, #3
 8008596:	697b      	ldr	r3, [r7, #20]
 8008598:	005b      	lsls	r3, r3, #1
 800859a:	fa02 f303 	lsl.w	r3, r2, r3
 800859e:	693a      	ldr	r2, [r7, #16]
 80085a0:	4313      	orrs	r3, r2
 80085a2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	693a      	ldr	r2, [r7, #16]
 80085a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80085aa:	683b      	ldr	r3, [r7, #0]
 80085ac:	685b      	ldr	r3, [r3, #4]
 80085ae:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	f000 8098 	beq.w	80086e8 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80085b8:	4a54      	ldr	r2, [pc, #336]	@ (800870c <HAL_GPIO_Init+0x2c8>)
 80085ba:	697b      	ldr	r3, [r7, #20]
 80085bc:	089b      	lsrs	r3, r3, #2
 80085be:	3302      	adds	r3, #2
 80085c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80085c4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80085c6:	697b      	ldr	r3, [r7, #20]
 80085c8:	f003 0303 	and.w	r3, r3, #3
 80085cc:	009b      	lsls	r3, r3, #2
 80085ce:	220f      	movs	r2, #15
 80085d0:	fa02 f303 	lsl.w	r3, r2, r3
 80085d4:	43db      	mvns	r3, r3
 80085d6:	693a      	ldr	r2, [r7, #16]
 80085d8:	4013      	ands	r3, r2
 80085da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80085e2:	d019      	beq.n	8008618 <HAL_GPIO_Init+0x1d4>
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	4a4a      	ldr	r2, [pc, #296]	@ (8008710 <HAL_GPIO_Init+0x2cc>)
 80085e8:	4293      	cmp	r3, r2
 80085ea:	d013      	beq.n	8008614 <HAL_GPIO_Init+0x1d0>
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	4a49      	ldr	r2, [pc, #292]	@ (8008714 <HAL_GPIO_Init+0x2d0>)
 80085f0:	4293      	cmp	r3, r2
 80085f2:	d00d      	beq.n	8008610 <HAL_GPIO_Init+0x1cc>
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	4a48      	ldr	r2, [pc, #288]	@ (8008718 <HAL_GPIO_Init+0x2d4>)
 80085f8:	4293      	cmp	r3, r2
 80085fa:	d007      	beq.n	800860c <HAL_GPIO_Init+0x1c8>
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	4a47      	ldr	r2, [pc, #284]	@ (800871c <HAL_GPIO_Init+0x2d8>)
 8008600:	4293      	cmp	r3, r2
 8008602:	d101      	bne.n	8008608 <HAL_GPIO_Init+0x1c4>
 8008604:	2304      	movs	r3, #4
 8008606:	e008      	b.n	800861a <HAL_GPIO_Init+0x1d6>
 8008608:	2307      	movs	r3, #7
 800860a:	e006      	b.n	800861a <HAL_GPIO_Init+0x1d6>
 800860c:	2303      	movs	r3, #3
 800860e:	e004      	b.n	800861a <HAL_GPIO_Init+0x1d6>
 8008610:	2302      	movs	r3, #2
 8008612:	e002      	b.n	800861a <HAL_GPIO_Init+0x1d6>
 8008614:	2301      	movs	r3, #1
 8008616:	e000      	b.n	800861a <HAL_GPIO_Init+0x1d6>
 8008618:	2300      	movs	r3, #0
 800861a:	697a      	ldr	r2, [r7, #20]
 800861c:	f002 0203 	and.w	r2, r2, #3
 8008620:	0092      	lsls	r2, r2, #2
 8008622:	4093      	lsls	r3, r2
 8008624:	693a      	ldr	r2, [r7, #16]
 8008626:	4313      	orrs	r3, r2
 8008628:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800862a:	4938      	ldr	r1, [pc, #224]	@ (800870c <HAL_GPIO_Init+0x2c8>)
 800862c:	697b      	ldr	r3, [r7, #20]
 800862e:	089b      	lsrs	r3, r3, #2
 8008630:	3302      	adds	r3, #2
 8008632:	693a      	ldr	r2, [r7, #16]
 8008634:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008638:	4b39      	ldr	r3, [pc, #228]	@ (8008720 <HAL_GPIO_Init+0x2dc>)
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	43db      	mvns	r3, r3
 8008642:	693a      	ldr	r2, [r7, #16]
 8008644:	4013      	ands	r3, r2
 8008646:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8008648:	683b      	ldr	r3, [r7, #0]
 800864a:	685b      	ldr	r3, [r3, #4]
 800864c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008650:	2b00      	cmp	r3, #0
 8008652:	d003      	beq.n	800865c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8008654:	693a      	ldr	r2, [r7, #16]
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	4313      	orrs	r3, r2
 800865a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800865c:	4a30      	ldr	r2, [pc, #192]	@ (8008720 <HAL_GPIO_Init+0x2dc>)
 800865e:	693b      	ldr	r3, [r7, #16]
 8008660:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8008662:	4b2f      	ldr	r3, [pc, #188]	@ (8008720 <HAL_GPIO_Init+0x2dc>)
 8008664:	685b      	ldr	r3, [r3, #4]
 8008666:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	43db      	mvns	r3, r3
 800866c:	693a      	ldr	r2, [r7, #16]
 800866e:	4013      	ands	r3, r2
 8008670:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8008672:	683b      	ldr	r3, [r7, #0]
 8008674:	685b      	ldr	r3, [r3, #4]
 8008676:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800867a:	2b00      	cmp	r3, #0
 800867c:	d003      	beq.n	8008686 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800867e:	693a      	ldr	r2, [r7, #16]
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	4313      	orrs	r3, r2
 8008684:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8008686:	4a26      	ldr	r2, [pc, #152]	@ (8008720 <HAL_GPIO_Init+0x2dc>)
 8008688:	693b      	ldr	r3, [r7, #16]
 800868a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800868c:	4b24      	ldr	r3, [pc, #144]	@ (8008720 <HAL_GPIO_Init+0x2dc>)
 800868e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008692:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	43db      	mvns	r3, r3
 8008698:	693a      	ldr	r2, [r7, #16]
 800869a:	4013      	ands	r3, r2
 800869c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800869e:	683b      	ldr	r3, [r7, #0]
 80086a0:	685b      	ldr	r3, [r3, #4]
 80086a2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d003      	beq.n	80086b2 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 80086aa:	693a      	ldr	r2, [r7, #16]
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	4313      	orrs	r3, r2
 80086b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80086b2:	4a1b      	ldr	r2, [pc, #108]	@ (8008720 <HAL_GPIO_Init+0x2dc>)
 80086b4:	693b      	ldr	r3, [r7, #16]
 80086b6:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 80086ba:	4b19      	ldr	r3, [pc, #100]	@ (8008720 <HAL_GPIO_Init+0x2dc>)
 80086bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80086c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	43db      	mvns	r3, r3
 80086c6:	693a      	ldr	r2, [r7, #16]
 80086c8:	4013      	ands	r3, r2
 80086ca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80086cc:	683b      	ldr	r3, [r7, #0]
 80086ce:	685b      	ldr	r3, [r3, #4]
 80086d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d003      	beq.n	80086e0 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80086d8:	693a      	ldr	r2, [r7, #16]
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	4313      	orrs	r3, r2
 80086de:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80086e0:	4a0f      	ldr	r2, [pc, #60]	@ (8008720 <HAL_GPIO_Init+0x2dc>)
 80086e2:	693b      	ldr	r3, [r7, #16]
 80086e4:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      }
    }

    position++;
 80086e8:	697b      	ldr	r3, [r7, #20]
 80086ea:	3301      	adds	r3, #1
 80086ec:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80086ee:	683b      	ldr	r3, [r7, #0]
 80086f0:	681a      	ldr	r2, [r3, #0]
 80086f2:	697b      	ldr	r3, [r7, #20]
 80086f4:	fa22 f303 	lsr.w	r3, r2, r3
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	f47f aeab 	bne.w	8008454 <HAL_GPIO_Init+0x10>
  }
}
 80086fe:	bf00      	nop
 8008700:	bf00      	nop
 8008702:	371c      	adds	r7, #28
 8008704:	46bd      	mov	sp, r7
 8008706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800870a:	4770      	bx	lr
 800870c:	40010000 	.word	0x40010000
 8008710:	48000400 	.word	0x48000400
 8008714:	48000800 	.word	0x48000800
 8008718:	48000c00 	.word	0x48000c00
 800871c:	48001000 	.word	0x48001000
 8008720:	58000800 	.word	0x58000800

08008724 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008724:	b480      	push	{r7}
 8008726:	b083      	sub	sp, #12
 8008728:	af00      	add	r7, sp, #0
 800872a:	6078      	str	r0, [r7, #4]
 800872c:	460b      	mov	r3, r1
 800872e:	807b      	strh	r3, [r7, #2]
 8008730:	4613      	mov	r3, r2
 8008732:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008734:	787b      	ldrb	r3, [r7, #1]
 8008736:	2b00      	cmp	r3, #0
 8008738:	d003      	beq.n	8008742 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800873a:	887a      	ldrh	r2, [r7, #2]
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8008740:	e002      	b.n	8008748 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8008742:	887a      	ldrh	r2, [r7, #2]
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8008748:	bf00      	nop
 800874a:	370c      	adds	r7, #12
 800874c:	46bd      	mov	sp, r7
 800874e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008752:	4770      	bx	lr

08008754 <HAL_GPIO_TogglePin>:
  * @param GPIOx where x can be (A..H) to select the GPIO peripheral for STM32WBxx family
  * @param GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8008754:	b480      	push	{r7}
 8008756:	b085      	sub	sp, #20
 8008758:	af00      	add	r7, sp, #0
 800875a:	6078      	str	r0, [r7, #4]
 800875c:	460b      	mov	r3, r1
 800875e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	695b      	ldr	r3, [r3, #20]
 8008764:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8008766:	887a      	ldrh	r2, [r7, #2]
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	4013      	ands	r3, r2
 800876c:	041a      	lsls	r2, r3, #16
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	43d9      	mvns	r1, r3
 8008772:	887b      	ldrh	r3, [r7, #2]
 8008774:	400b      	ands	r3, r1
 8008776:	431a      	orrs	r2, r3
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	619a      	str	r2, [r3, #24]
}
 800877c:	bf00      	nop
 800877e:	3714      	adds	r7, #20
 8008780:	46bd      	mov	sp, r7
 8008782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008786:	4770      	bx	lr

08008788 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8008788:	b580      	push	{r7, lr}
 800878a:	b082      	sub	sp, #8
 800878c:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 800878e:	4b0a      	ldr	r3, [pc, #40]	@ (80087b8 <HAL_HSEM_IRQHandler+0x30>)
 8008790:	68db      	ldr	r3, [r3, #12]
 8008792:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8008794:	4b08      	ldr	r3, [pc, #32]	@ (80087b8 <HAL_HSEM_IRQHandler+0x30>)
 8008796:	681a      	ldr	r2, [r3, #0]
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	43db      	mvns	r3, r3
 800879c:	4906      	ldr	r1, [pc, #24]	@ (80087b8 <HAL_HSEM_IRQHandler+0x30>)
 800879e:	4013      	ands	r3, r2
 80087a0:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 80087a2:	4a05      	ldr	r2, [pc, #20]	@ (80087b8 <HAL_HSEM_IRQHandler+0x30>)
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 80087a8:	6878      	ldr	r0, [r7, #4]
 80087aa:	f000 f807 	bl	80087bc <HAL_HSEM_FreeCallback>
}
 80087ae:	bf00      	nop
 80087b0:	3708      	adds	r7, #8
 80087b2:	46bd      	mov	sp, r7
 80087b4:	bd80      	pop	{r7, pc}
 80087b6:	bf00      	nop
 80087b8:	58001500 	.word	0x58001500

080087bc <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 80087bc:	b480      	push	{r7}
 80087be:	b083      	sub	sp, #12
 80087c0:	af00      	add	r7, sp, #0
 80087c2:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 80087c4:	bf00      	nop
 80087c6:	370c      	adds	r7, #12
 80087c8:	46bd      	mov	sp, r7
 80087ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ce:	4770      	bx	lr

080087d0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80087d0:	b580      	push	{r7, lr}
 80087d2:	b082      	sub	sp, #8
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d101      	bne.n	80087e2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80087de:	2301      	movs	r3, #1
 80087e0:	e08d      	b.n	80088fe <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80087e8:	b2db      	uxtb	r3, r3
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d106      	bne.n	80087fc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	2200      	movs	r2, #0
 80087f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80087f6:	6878      	ldr	r0, [r7, #4]
 80087f8:	f7fe fe68 	bl	80074cc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	2224      	movs	r2, #36	@ 0x24
 8008800:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	681a      	ldr	r2, [r3, #0]
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	f022 0201 	bic.w	r2, r2, #1
 8008812:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	685a      	ldr	r2, [r3, #4]
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8008820:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	689a      	ldr	r2, [r3, #8]
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008830:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	68db      	ldr	r3, [r3, #12]
 8008836:	2b01      	cmp	r3, #1
 8008838:	d107      	bne.n	800884a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	689a      	ldr	r2, [r3, #8]
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008846:	609a      	str	r2, [r3, #8]
 8008848:	e006      	b.n	8008858 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	689a      	ldr	r2, [r3, #8]
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8008856:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	68db      	ldr	r3, [r3, #12]
 800885c:	2b02      	cmp	r3, #2
 800885e:	d108      	bne.n	8008872 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	685a      	ldr	r2, [r3, #4]
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800886e:	605a      	str	r2, [r3, #4]
 8008870:	e007      	b.n	8008882 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	685a      	ldr	r2, [r3, #4]
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008880:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	685b      	ldr	r3, [r3, #4]
 8008888:	687a      	ldr	r2, [r7, #4]
 800888a:	6812      	ldr	r2, [r2, #0]
 800888c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8008890:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008894:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	68da      	ldr	r2, [r3, #12]
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80088a4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	691a      	ldr	r2, [r3, #16]
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	695b      	ldr	r3, [r3, #20]
 80088ae:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	699b      	ldr	r3, [r3, #24]
 80088b6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	430a      	orrs	r2, r1
 80088be:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	69d9      	ldr	r1, [r3, #28]
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	6a1a      	ldr	r2, [r3, #32]
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	430a      	orrs	r2, r1
 80088ce:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	681a      	ldr	r2, [r3, #0]
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	f042 0201 	orr.w	r2, r2, #1
 80088de:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	2200      	movs	r2, #0
 80088e4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	2220      	movs	r2, #32
 80088ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	2200      	movs	r2, #0
 80088f2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	2200      	movs	r2, #0
 80088f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80088fc:	2300      	movs	r3, #0
}
 80088fe:	4618      	mov	r0, r3
 8008900:	3708      	adds	r7, #8
 8008902:	46bd      	mov	sp, r7
 8008904:	bd80      	pop	{r7, pc}
	...

08008908 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008908:	b580      	push	{r7, lr}
 800890a:	b088      	sub	sp, #32
 800890c:	af02      	add	r7, sp, #8
 800890e:	60f8      	str	r0, [r7, #12]
 8008910:	4608      	mov	r0, r1
 8008912:	4611      	mov	r1, r2
 8008914:	461a      	mov	r2, r3
 8008916:	4603      	mov	r3, r0
 8008918:	817b      	strh	r3, [r7, #10]
 800891a:	460b      	mov	r3, r1
 800891c:	813b      	strh	r3, [r7, #8]
 800891e:	4613      	mov	r3, r2
 8008920:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008928:	b2db      	uxtb	r3, r3
 800892a:	2b20      	cmp	r3, #32
 800892c:	f040 80f9 	bne.w	8008b22 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008930:	6a3b      	ldr	r3, [r7, #32]
 8008932:	2b00      	cmp	r3, #0
 8008934:	d002      	beq.n	800893c <HAL_I2C_Mem_Write+0x34>
 8008936:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008938:	2b00      	cmp	r3, #0
 800893a:	d105      	bne.n	8008948 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008942:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8008944:	2301      	movs	r3, #1
 8008946:	e0ed      	b.n	8008b24 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800894e:	2b01      	cmp	r3, #1
 8008950:	d101      	bne.n	8008956 <HAL_I2C_Mem_Write+0x4e>
 8008952:	2302      	movs	r3, #2
 8008954:	e0e6      	b.n	8008b24 <HAL_I2C_Mem_Write+0x21c>
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	2201      	movs	r2, #1
 800895a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800895e:	f7ff f8d1 	bl	8007b04 <HAL_GetTick>
 8008962:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008964:	697b      	ldr	r3, [r7, #20]
 8008966:	9300      	str	r3, [sp, #0]
 8008968:	2319      	movs	r3, #25
 800896a:	2201      	movs	r2, #1
 800896c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8008970:	68f8      	ldr	r0, [r7, #12]
 8008972:	f001 fc26 	bl	800a1c2 <I2C_WaitOnFlagUntilTimeout>
 8008976:	4603      	mov	r3, r0
 8008978:	2b00      	cmp	r3, #0
 800897a:	d001      	beq.n	8008980 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800897c:	2301      	movs	r3, #1
 800897e:	e0d1      	b.n	8008b24 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	2221      	movs	r2, #33	@ 0x21
 8008984:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	2240      	movs	r2, #64	@ 0x40
 800898c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	2200      	movs	r2, #0
 8008994:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	6a3a      	ldr	r2, [r7, #32]
 800899a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80089a0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	2200      	movs	r2, #0
 80089a6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80089a8:	88f8      	ldrh	r0, [r7, #6]
 80089aa:	893a      	ldrh	r2, [r7, #8]
 80089ac:	8979      	ldrh	r1, [r7, #10]
 80089ae:	697b      	ldr	r3, [r7, #20]
 80089b0:	9301      	str	r3, [sp, #4]
 80089b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089b4:	9300      	str	r3, [sp, #0]
 80089b6:	4603      	mov	r3, r0
 80089b8:	68f8      	ldr	r0, [r7, #12]
 80089ba:	f000 fe55 	bl	8009668 <I2C_RequestMemoryWrite>
 80089be:	4603      	mov	r3, r0
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d005      	beq.n	80089d0 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	2200      	movs	r2, #0
 80089c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80089cc:	2301      	movs	r3, #1
 80089ce:	e0a9      	b.n	8008b24 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80089d4:	b29b      	uxth	r3, r3
 80089d6:	2bff      	cmp	r3, #255	@ 0xff
 80089d8:	d90e      	bls.n	80089f8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	22ff      	movs	r2, #255	@ 0xff
 80089de:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80089e4:	b2da      	uxtb	r2, r3
 80089e6:	8979      	ldrh	r1, [r7, #10]
 80089e8:	2300      	movs	r3, #0
 80089ea:	9300      	str	r3, [sp, #0]
 80089ec:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80089f0:	68f8      	ldr	r0, [r7, #12]
 80089f2:	f001 fda9 	bl	800a548 <I2C_TransferConfig>
 80089f6:	e00f      	b.n	8008a18 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80089fc:	b29a      	uxth	r2, r3
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008a06:	b2da      	uxtb	r2, r3
 8008a08:	8979      	ldrh	r1, [r7, #10]
 8008a0a:	2300      	movs	r3, #0
 8008a0c:	9300      	str	r3, [sp, #0]
 8008a0e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8008a12:	68f8      	ldr	r0, [r7, #12]
 8008a14:	f001 fd98 	bl	800a548 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008a18:	697a      	ldr	r2, [r7, #20]
 8008a1a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008a1c:	68f8      	ldr	r0, [r7, #12]
 8008a1e:	f001 fc29 	bl	800a274 <I2C_WaitOnTXISFlagUntilTimeout>
 8008a22:	4603      	mov	r3, r0
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d001      	beq.n	8008a2c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8008a28:	2301      	movs	r3, #1
 8008a2a:	e07b      	b.n	8008b24 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a30:	781a      	ldrb	r2, [r3, #0]
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a3c:	1c5a      	adds	r2, r3, #1
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008a46:	b29b      	uxth	r3, r3
 8008a48:	3b01      	subs	r3, #1
 8008a4a:	b29a      	uxth	r2, r3
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008a54:	3b01      	subs	r3, #1
 8008a56:	b29a      	uxth	r2, r3
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008a60:	b29b      	uxth	r3, r3
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d034      	beq.n	8008ad0 <HAL_I2C_Mem_Write+0x1c8>
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d130      	bne.n	8008ad0 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008a6e:	697b      	ldr	r3, [r7, #20]
 8008a70:	9300      	str	r3, [sp, #0]
 8008a72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a74:	2200      	movs	r2, #0
 8008a76:	2180      	movs	r1, #128	@ 0x80
 8008a78:	68f8      	ldr	r0, [r7, #12]
 8008a7a:	f001 fba2 	bl	800a1c2 <I2C_WaitOnFlagUntilTimeout>
 8008a7e:	4603      	mov	r3, r0
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d001      	beq.n	8008a88 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8008a84:	2301      	movs	r3, #1
 8008a86:	e04d      	b.n	8008b24 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008a8c:	b29b      	uxth	r3, r3
 8008a8e:	2bff      	cmp	r3, #255	@ 0xff
 8008a90:	d90e      	bls.n	8008ab0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	22ff      	movs	r2, #255	@ 0xff
 8008a96:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008a9c:	b2da      	uxtb	r2, r3
 8008a9e:	8979      	ldrh	r1, [r7, #10]
 8008aa0:	2300      	movs	r3, #0
 8008aa2:	9300      	str	r3, [sp, #0]
 8008aa4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8008aa8:	68f8      	ldr	r0, [r7, #12]
 8008aaa:	f001 fd4d 	bl	800a548 <I2C_TransferConfig>
 8008aae:	e00f      	b.n	8008ad0 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008ab4:	b29a      	uxth	r2, r3
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008abe:	b2da      	uxtb	r2, r3
 8008ac0:	8979      	ldrh	r1, [r7, #10]
 8008ac2:	2300      	movs	r3, #0
 8008ac4:	9300      	str	r3, [sp, #0]
 8008ac6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8008aca:	68f8      	ldr	r0, [r7, #12]
 8008acc:	f001 fd3c 	bl	800a548 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008ad4:	b29b      	uxth	r3, r3
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d19e      	bne.n	8008a18 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008ada:	697a      	ldr	r2, [r7, #20]
 8008adc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008ade:	68f8      	ldr	r0, [r7, #12]
 8008ae0:	f001 fc0f 	bl	800a302 <I2C_WaitOnSTOPFlagUntilTimeout>
 8008ae4:	4603      	mov	r3, r0
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d001      	beq.n	8008aee <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8008aea:	2301      	movs	r3, #1
 8008aec:	e01a      	b.n	8008b24 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	2220      	movs	r2, #32
 8008af4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	6859      	ldr	r1, [r3, #4]
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	681a      	ldr	r2, [r3, #0]
 8008b00:	4b0a      	ldr	r3, [pc, #40]	@ (8008b2c <HAL_I2C_Mem_Write+0x224>)
 8008b02:	400b      	ands	r3, r1
 8008b04:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	2220      	movs	r2, #32
 8008b0a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	2200      	movs	r2, #0
 8008b12:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	2200      	movs	r2, #0
 8008b1a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8008b1e:	2300      	movs	r3, #0
 8008b20:	e000      	b.n	8008b24 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8008b22:	2302      	movs	r3, #2
  }
}
 8008b24:	4618      	mov	r0, r3
 8008b26:	3718      	adds	r7, #24
 8008b28:	46bd      	mov	sp, r7
 8008b2a:	bd80      	pop	{r7, pc}
 8008b2c:	fe00e800 	.word	0xfe00e800

08008b30 <HAL_I2C_Mem_Read_DMA>:
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                       uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8008b30:	b580      	push	{r7, lr}
 8008b32:	b088      	sub	sp, #32
 8008b34:	af02      	add	r7, sp, #8
 8008b36:	60f8      	str	r0, [r7, #12]
 8008b38:	4608      	mov	r0, r1
 8008b3a:	4611      	mov	r1, r2
 8008b3c:	461a      	mov	r2, r3
 8008b3e:	4603      	mov	r3, r0
 8008b40:	817b      	strh	r3, [r7, #10]
 8008b42:	460b      	mov	r3, r1
 8008b44:	813b      	strh	r3, [r7, #8]
 8008b46:	4613      	mov	r3, r2
 8008b48:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008b50:	b2db      	uxtb	r3, r3
 8008b52:	2b20      	cmp	r3, #32
 8008b54:	f040 80c2 	bne.w	8008cdc <HAL_I2C_Mem_Read_DMA+0x1ac>
  {
    if ((pData == NULL) || (Size == 0U))
 8008b58:	6a3b      	ldr	r3, [r7, #32]
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d002      	beq.n	8008b64 <HAL_I2C_Mem_Read_DMA+0x34>
 8008b5e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d105      	bne.n	8008b70 <HAL_I2C_Mem_Read_DMA+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008b6a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8008b6c:	2301      	movs	r3, #1
 8008b6e:	e0b6      	b.n	8008cde <HAL_I2C_Mem_Read_DMA+0x1ae>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	699b      	ldr	r3, [r3, #24]
 8008b76:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008b7a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008b7e:	d101      	bne.n	8008b84 <HAL_I2C_Mem_Read_DMA+0x54>
    {
      return HAL_BUSY;
 8008b80:	2302      	movs	r3, #2
 8008b82:	e0ac      	b.n	8008cde <HAL_I2C_Mem_Read_DMA+0x1ae>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008b8a:	2b01      	cmp	r3, #1
 8008b8c:	d101      	bne.n	8008b92 <HAL_I2C_Mem_Read_DMA+0x62>
 8008b8e:	2302      	movs	r3, #2
 8008b90:	e0a5      	b.n	8008cde <HAL_I2C_Mem_Read_DMA+0x1ae>
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	2201      	movs	r2, #1
 8008b96:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	2222      	movs	r2, #34	@ 0x22
 8008b9e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	2240      	movs	r2, #64	@ 0x40
 8008ba6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	2200      	movs	r2, #0
 8008bae:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	6a3a      	ldr	r2, [r7, #32]
 8008bb4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8008bba:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	4a4a      	ldr	r2, [pc, #296]	@ (8008ce8 <HAL_I2C_Mem_Read_DMA+0x1b8>)
 8008bc0:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Mem_ISR_DMA;
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	4a49      	ldr	r2, [pc, #292]	@ (8008cec <HAL_I2C_Mem_Read_DMA+0x1bc>)
 8008bc6:	635a      	str	r2, [r3, #52]	@ 0x34
    hi2c->Devaddress  = DevAddress;
 8008bc8:	897a      	ldrh	r2, [r7, #10]
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	64da      	str	r2, [r3, #76]	@ 0x4c

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008bd2:	b29b      	uxth	r3, r3
 8008bd4:	2bff      	cmp	r3, #255	@ 0xff
 8008bd6:	d903      	bls.n	8008be0 <HAL_I2C_Mem_Read_DMA+0xb0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	22ff      	movs	r2, #255	@ 0xff
 8008bdc:	851a      	strh	r2, [r3, #40]	@ 0x28
 8008bde:	e004      	b.n	8008bea <HAL_I2C_Mem_Read_DMA+0xba>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008be4:	b29a      	uxth	r2, r3
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	851a      	strh	r2, [r3, #40]	@ 0x28
    }

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008bea:	88fb      	ldrh	r3, [r7, #6]
 8008bec:	2b01      	cmp	r3, #1
 8008bee:	d109      	bne.n	8008c04 <HAL_I2C_Mem_Read_DMA+0xd4>
    {
      /* Prefetch Memory Address */
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008bf0:	893b      	ldrh	r3, [r7, #8]
 8008bf2:	b2da      	uxtb	r2, r3
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	f04f 32ff 	mov.w	r2, #4294967295
 8008c00:	651a      	str	r2, [r3, #80]	@ 0x50
 8008c02:	e00b      	b.n	8008c1c <HAL_I2C_Mem_Read_DMA+0xec>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Prefetch Memory Address (MSB part, LSB will be manage through interrupt) */
      hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8008c04:	893b      	ldrh	r3, [r7, #8]
 8008c06:	0a1b      	lsrs	r3, r3, #8
 8008c08:	b29b      	uxth	r3, r3
 8008c0a:	b2da      	uxtb	r2, r3
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Prepare Memaddress buffer for LSB part */
      hi2c->Memaddress = I2C_MEM_ADD_LSB(MemAddress);
 8008c12:	893b      	ldrh	r3, [r7, #8]
 8008c14:	b2db      	uxtb	r3, r3
 8008c16:	461a      	mov	r2, r3
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    if (hi2c->hdmarx != NULL)
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d020      	beq.n	8008c66 <HAL_I2C_Mem_Read_DMA+0x136>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008c28:	4a31      	ldr	r2, [pc, #196]	@ (8008cf0 <HAL_I2C_Mem_Read_DMA+0x1c0>)
 8008c2a:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008c30:	4a30      	ldr	r2, [pc, #192]	@ (8008cf4 <HAL_I2C_Mem_Read_DMA+0x1c4>)
 8008c32:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008c38:	2200      	movs	r2, #0
 8008c3a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->hdmarx->XferAbortCallback = NULL;
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008c40:	2200      	movs	r2, #0
 8008c42:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the DMA channel */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	3324      	adds	r3, #36	@ 0x24
 8008c4e:	4619      	mov	r1, r3
 8008c50:	6a3a      	ldr	r2, [r7, #32]
                                       hi2c->XferSize);
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8008c56:	f7ff f9bb 	bl	8007fd0 <HAL_DMA_Start_IT>
 8008c5a:	4603      	mov	r3, r0
 8008c5c:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 8008c5e:	7dfb      	ldrb	r3, [r7, #23]
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d127      	bne.n	8008cb4 <HAL_I2C_Mem_Read_DMA+0x184>
 8008c64:	e013      	b.n	8008c8e <HAL_I2C_Mem_Read_DMA+0x15e>
      hi2c->State     = HAL_I2C_STATE_READY;
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	2220      	movs	r2, #32
 8008c6a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	2200      	movs	r2, #0
 8008c72:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008c7a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	645a      	str	r2, [r3, #68]	@ 0x44
      __HAL_UNLOCK(hi2c);
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	2200      	movs	r2, #0
 8008c86:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8008c8a:	2301      	movs	r3, #1
 8008c8c:	e027      	b.n	8008cde <HAL_I2C_Mem_Read_DMA+0x1ae>
    {
      /* Send Slave Address and Memory Address */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8008c8e:	88fb      	ldrh	r3, [r7, #6]
 8008c90:	b2da      	uxtb	r2, r3
 8008c92:	8979      	ldrh	r1, [r7, #10]
 8008c94:	4b18      	ldr	r3, [pc, #96]	@ (8008cf8 <HAL_I2C_Mem_Read_DMA+0x1c8>)
 8008c96:	9300      	str	r3, [sp, #0]
 8008c98:	2300      	movs	r3, #0
 8008c9a:	68f8      	ldr	r0, [r7, #12]
 8008c9c:	f001 fc54 	bl	800a548 <I2C_TransferConfig>

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	2200      	movs	r2, #0
 8008ca4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8008ca8:	2101      	movs	r1, #1
 8008caa:	68f8      	ldr	r0, [r7, #12]
 8008cac:	f001 fc7e 	bl	800a5ac <I2C_Enable_IRQ>
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
 8008cb0:	2300      	movs	r3, #0
 8008cb2:	e014      	b.n	8008cde <HAL_I2C_Mem_Read_DMA+0x1ae>
      hi2c->State     = HAL_I2C_STATE_READY;
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	2220      	movs	r2, #32
 8008cb8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	2200      	movs	r2, #0
 8008cc0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008cc8:	f043 0210 	orr.w	r2, r3, #16
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	645a      	str	r2, [r3, #68]	@ 0x44
      __HAL_UNLOCK(hi2c);
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	2200      	movs	r2, #0
 8008cd4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8008cd8:	2301      	movs	r3, #1
 8008cda:	e000      	b.n	8008cde <HAL_I2C_Mem_Read_DMA+0x1ae>
  }
  else
  {
    return HAL_BUSY;
 8008cdc:	2302      	movs	r3, #2
  }
}
 8008cde:	4618      	mov	r0, r3
 8008ce0:	3718      	adds	r7, #24
 8008ce2:	46bd      	mov	sp, r7
 8008ce4:	bd80      	pop	{r7, pc}
 8008ce6:	bf00      	nop
 8008ce8:	ffff0000 	.word	0xffff0000
 8008cec:	0800926d 	.word	0x0800926d
 8008cf0:	0800a0c3 	.word	0x0800a0c3
 8008cf4:	0800a159 	.word	0x0800a159
 8008cf8:	80002000 	.word	0x80002000

08008cfc <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8008cfc:	b580      	push	{r7, lr}
 8008cfe:	b084      	sub	sp, #16
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	699b      	ldr	r3, [r3, #24]
 8008d0a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d005      	beq.n	8008d28 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008d20:	68ba      	ldr	r2, [r7, #8]
 8008d22:	68f9      	ldr	r1, [r7, #12]
 8008d24:	6878      	ldr	r0, [r7, #4]
 8008d26:	4798      	blx	r3
  }
}
 8008d28:	bf00      	nop
 8008d2a:	3710      	adds	r7, #16
 8008d2c:	46bd      	mov	sp, r7
 8008d2e:	bd80      	pop	{r7, pc}

08008d30 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8008d30:	b580      	push	{r7, lr}
 8008d32:	b086      	sub	sp, #24
 8008d34:	af00      	add	r7, sp, #0
 8008d36:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	699b      	ldr	r3, [r3, #24]
 8008d3e:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8008d48:	697b      	ldr	r3, [r7, #20]
 8008d4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d00f      	beq.n	8008d72 <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8008d52:	693b      	ldr	r3, [r7, #16]
 8008d54:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d00a      	beq.n	8008d72 <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008d60:	f043 0201 	orr.w	r2, r3, #1
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008d70:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8008d72:	697b      	ldr	r3, [r7, #20]
 8008d74:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d00f      	beq.n	8008d9c <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8008d7c:	693b      	ldr	r3, [r7, #16]
 8008d7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d00a      	beq.n	8008d9c <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008d8a:	f043 0208 	orr.w	r2, r3, #8
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8008d9a:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8008d9c:	697b      	ldr	r3, [r7, #20]
 8008d9e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d00f      	beq.n	8008dc6 <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8008da6:	693b      	ldr	r3, [r7, #16]
 8008da8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d00a      	beq.n	8008dc6 <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008db4:	f043 0202 	orr.w	r2, r3, #2
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008dc4:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008dca:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	f003 030b 	and.w	r3, r3, #11
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d003      	beq.n	8008dde <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 8008dd6:	68f9      	ldr	r1, [r7, #12]
 8008dd8:	6878      	ldr	r0, [r7, #4]
 8008dda:	f001 f837 	bl	8009e4c <I2C_ITError>
  }
}
 8008dde:	bf00      	nop
 8008de0:	3718      	adds	r7, #24
 8008de2:	46bd      	mov	sp, r7
 8008de4:	bd80      	pop	{r7, pc}

08008de6 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008de6:	b480      	push	{r7}
 8008de8:	b083      	sub	sp, #12
 8008dea:	af00      	add	r7, sp, #0
 8008dec:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8008dee:	bf00      	nop
 8008df0:	370c      	adds	r7, #12
 8008df2:	46bd      	mov	sp, r7
 8008df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df8:	4770      	bx	lr

08008dfa <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008dfa:	b480      	push	{r7}
 8008dfc:	b083      	sub	sp, #12
 8008dfe:	af00      	add	r7, sp, #0
 8008e00:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8008e02:	bf00      	nop
 8008e04:	370c      	adds	r7, #12
 8008e06:	46bd      	mov	sp, r7
 8008e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e0c:	4770      	bx	lr

08008e0e <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008e0e:	b480      	push	{r7}
 8008e10:	b083      	sub	sp, #12
 8008e12:	af00      	add	r7, sp, #0
 8008e14:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8008e16:	bf00      	nop
 8008e18:	370c      	adds	r7, #12
 8008e1a:	46bd      	mov	sp, r7
 8008e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e20:	4770      	bx	lr

08008e22 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008e22:	b480      	push	{r7}
 8008e24:	b083      	sub	sp, #12
 8008e26:	af00      	add	r7, sp, #0
 8008e28:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8008e2a:	bf00      	nop
 8008e2c:	370c      	adds	r7, #12
 8008e2e:	46bd      	mov	sp, r7
 8008e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e34:	4770      	bx	lr

08008e36 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8008e36:	b480      	push	{r7}
 8008e38:	b083      	sub	sp, #12
 8008e3a:	af00      	add	r7, sp, #0
 8008e3c:	6078      	str	r0, [r7, #4]
 8008e3e:	460b      	mov	r3, r1
 8008e40:	70fb      	strb	r3, [r7, #3]
 8008e42:	4613      	mov	r3, r2
 8008e44:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8008e46:	bf00      	nop
 8008e48:	370c      	adds	r7, #12
 8008e4a:	46bd      	mov	sp, r7
 8008e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e50:	4770      	bx	lr

08008e52 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008e52:	b480      	push	{r7}
 8008e54:	b083      	sub	sp, #12
 8008e56:	af00      	add	r7, sp, #0
 8008e58:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8008e5a:	bf00      	nop
 8008e5c:	370c      	adds	r7, #12
 8008e5e:	46bd      	mov	sp, r7
 8008e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e64:	4770      	bx	lr

08008e66 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008e66:	b480      	push	{r7}
 8008e68:	b083      	sub	sp, #12
 8008e6a:	af00      	add	r7, sp, #0
 8008e6c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8008e6e:	bf00      	nop
 8008e70:	370c      	adds	r7, #12
 8008e72:	46bd      	mov	sp, r7
 8008e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e78:	4770      	bx	lr

08008e7a <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8008e7a:	b480      	push	{r7}
 8008e7c:	b083      	sub	sp, #12
 8008e7e:	af00      	add	r7, sp, #0
 8008e80:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8008e82:	bf00      	nop
 8008e84:	370c      	adds	r7, #12
 8008e86:	46bd      	mov	sp, r7
 8008e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e8c:	4770      	bx	lr

08008e8e <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008e8e:	b480      	push	{r7}
 8008e90:	b083      	sub	sp, #12
 8008e92:	af00      	add	r7, sp, #0
 8008e94:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8008e96:	bf00      	nop
 8008e98:	370c      	adds	r7, #12
 8008e9a:	46bd      	mov	sp, r7
 8008e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea0:	4770      	bx	lr

08008ea2 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8008ea2:	b580      	push	{r7, lr}
 8008ea4:	b086      	sub	sp, #24
 8008ea6:	af00      	add	r7, sp, #0
 8008ea8:	60f8      	str	r0, [r7, #12]
 8008eaa:	60b9      	str	r1, [r7, #8]
 8008eac:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008eb2:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8008eb4:	68bb      	ldr	r3, [r7, #8]
 8008eb6:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008ebe:	2b01      	cmp	r3, #1
 8008ec0:	d101      	bne.n	8008ec6 <I2C_Slave_ISR_IT+0x24>
 8008ec2:	2302      	movs	r3, #2
 8008ec4:	e0e2      	b.n	800908c <I2C_Slave_ISR_IT+0x1ea>
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	2201      	movs	r2, #1
 8008eca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8008ece:	693b      	ldr	r3, [r7, #16]
 8008ed0:	f003 0320 	and.w	r3, r3, #32
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d009      	beq.n	8008eec <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d004      	beq.n	8008eec <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8008ee2:	6939      	ldr	r1, [r7, #16]
 8008ee4:	68f8      	ldr	r0, [r7, #12]
 8008ee6:	f000 fdf9 	bl	8009adc <I2C_ITSlaveCplt>
 8008eea:	e0ca      	b.n	8009082 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8008eec:	693b      	ldr	r3, [r7, #16]
 8008eee:	f003 0310 	and.w	r3, r3, #16
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d04b      	beq.n	8008f8e <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d046      	beq.n	8008f8e <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008f04:	b29b      	uxth	r3, r3
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d128      	bne.n	8008f5c <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008f10:	b2db      	uxtb	r3, r3
 8008f12:	2b28      	cmp	r3, #40	@ 0x28
 8008f14:	d108      	bne.n	8008f28 <I2C_Slave_ISR_IT+0x86>
 8008f16:	697b      	ldr	r3, [r7, #20]
 8008f18:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008f1c:	d104      	bne.n	8008f28 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8008f1e:	6939      	ldr	r1, [r7, #16]
 8008f20:	68f8      	ldr	r0, [r7, #12]
 8008f22:	f000 ff3f 	bl	8009da4 <I2C_ITListenCplt>
 8008f26:	e031      	b.n	8008f8c <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008f2e:	b2db      	uxtb	r3, r3
 8008f30:	2b29      	cmp	r3, #41	@ 0x29
 8008f32:	d10e      	bne.n	8008f52 <I2C_Slave_ISR_IT+0xb0>
 8008f34:	697b      	ldr	r3, [r7, #20]
 8008f36:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8008f3a:	d00a      	beq.n	8008f52 <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	2210      	movs	r2, #16
 8008f42:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8008f44:	68f8      	ldr	r0, [r7, #12]
 8008f46:	f001 f898 	bl	800a07a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8008f4a:	68f8      	ldr	r0, [r7, #12]
 8008f4c:	f000 fca1 	bl	8009892 <I2C_ITSlaveSeqCplt>
 8008f50:	e01c      	b.n	8008f8c <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	2210      	movs	r2, #16
 8008f58:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8008f5a:	e08f      	b.n	800907c <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	2210      	movs	r2, #16
 8008f62:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008f68:	f043 0204 	orr.w	r2, r3, #4
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8008f70:	697b      	ldr	r3, [r7, #20]
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d003      	beq.n	8008f7e <I2C_Slave_ISR_IT+0xdc>
 8008f76:	697b      	ldr	r3, [r7, #20]
 8008f78:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008f7c:	d17e      	bne.n	800907c <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008f82:	4619      	mov	r1, r3
 8008f84:	68f8      	ldr	r0, [r7, #12]
 8008f86:	f000 ff61 	bl	8009e4c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8008f8a:	e077      	b.n	800907c <I2C_Slave_ISR_IT+0x1da>
 8008f8c:	e076      	b.n	800907c <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8008f8e:	693b      	ldr	r3, [r7, #16]
 8008f90:	f003 0304 	and.w	r3, r3, #4
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d02f      	beq.n	8008ff8 <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d02a      	beq.n	8008ff8 <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008fa6:	b29b      	uxth	r3, r3
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d018      	beq.n	8008fde <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008fb6:	b2d2      	uxtb	r2, r2
 8008fb8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008fbe:	1c5a      	adds	r2, r3, #1
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008fc8:	3b01      	subs	r3, #1
 8008fca:	b29a      	uxth	r2, r3
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008fd4:	b29b      	uxth	r3, r3
 8008fd6:	3b01      	subs	r3, #1
 8008fd8:	b29a      	uxth	r2, r3
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008fe2:	b29b      	uxth	r3, r3
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d14b      	bne.n	8009080 <I2C_Slave_ISR_IT+0x1de>
 8008fe8:	697b      	ldr	r3, [r7, #20]
 8008fea:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8008fee:	d047      	beq.n	8009080 <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8008ff0:	68f8      	ldr	r0, [r7, #12]
 8008ff2:	f000 fc4e 	bl	8009892 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8008ff6:	e043      	b.n	8009080 <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8008ff8:	693b      	ldr	r3, [r7, #16]
 8008ffa:	f003 0308 	and.w	r3, r3, #8
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d009      	beq.n	8009016 <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8009008:	2b00      	cmp	r3, #0
 800900a:	d004      	beq.n	8009016 <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800900c:	6939      	ldr	r1, [r7, #16]
 800900e:	68f8      	ldr	r0, [r7, #12]
 8009010:	f000 fb7e 	bl	8009710 <I2C_ITAddrCplt>
 8009014:	e035      	b.n	8009082 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8009016:	693b      	ldr	r3, [r7, #16]
 8009018:	f003 0302 	and.w	r3, r3, #2
 800901c:	2b00      	cmp	r3, #0
 800901e:	d030      	beq.n	8009082 <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8009026:	2b00      	cmp	r3, #0
 8009028:	d02b      	beq.n	8009082 <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800902e:	b29b      	uxth	r3, r3
 8009030:	2b00      	cmp	r3, #0
 8009032:	d018      	beq.n	8009066 <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009038:	781a      	ldrb	r2, [r3, #0]
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009044:	1c5a      	adds	r2, r3, #1
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800904e:	b29b      	uxth	r3, r3
 8009050:	3b01      	subs	r3, #1
 8009052:	b29a      	uxth	r2, r3
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800905c:	3b01      	subs	r3, #1
 800905e:	b29a      	uxth	r2, r3
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	851a      	strh	r2, [r3, #40]	@ 0x28
 8009064:	e00d      	b.n	8009082 <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8009066:	697b      	ldr	r3, [r7, #20]
 8009068:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800906c:	d002      	beq.n	8009074 <I2C_Slave_ISR_IT+0x1d2>
 800906e:	697b      	ldr	r3, [r7, #20]
 8009070:	2b00      	cmp	r3, #0
 8009072:	d106      	bne.n	8009082 <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8009074:	68f8      	ldr	r0, [r7, #12]
 8009076:	f000 fc0c 	bl	8009892 <I2C_ITSlaveSeqCplt>
 800907a:	e002      	b.n	8009082 <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 800907c:	bf00      	nop
 800907e:	e000      	b.n	8009082 <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 8009080:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	2200      	movs	r2, #0
 8009086:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800908a:	2300      	movs	r3, #0
}
 800908c:	4618      	mov	r0, r3
 800908e:	3718      	adds	r7, #24
 8009090:	46bd      	mov	sp, r7
 8009092:	bd80      	pop	{r7, pc}

08009094 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8009094:	b580      	push	{r7, lr}
 8009096:	b088      	sub	sp, #32
 8009098:	af02      	add	r7, sp, #8
 800909a:	60f8      	str	r0, [r7, #12]
 800909c:	60b9      	str	r1, [r7, #8]
 800909e:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80090a6:	2b01      	cmp	r3, #1
 80090a8:	d101      	bne.n	80090ae <I2C_Master_ISR_DMA+0x1a>
 80090aa:	2302      	movs	r3, #2
 80090ac:	e0d9      	b.n	8009262 <I2C_Master_ISR_DMA+0x1ce>
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	2201      	movs	r2, #1
 80090b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80090b6:	68bb      	ldr	r3, [r7, #8]
 80090b8:	f003 0310 	and.w	r3, r3, #16
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d016      	beq.n	80090ee <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d011      	beq.n	80090ee <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	2210      	movs	r2, #16
 80090d0:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80090d6:	f043 0204 	orr.w	r2, r3, #4
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80090de:	2120      	movs	r1, #32
 80090e0:	68f8      	ldr	r0, [r7, #12]
 80090e2:	f001 fa63 	bl	800a5ac <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80090e6:	68f8      	ldr	r0, [r7, #12]
 80090e8:	f000 ffc7 	bl	800a07a <I2C_Flush_TXDR>
 80090ec:	e0b4      	b.n	8009258 <I2C_Master_ISR_DMA+0x1c4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80090ee:	68bb      	ldr	r3, [r7, #8]
 80090f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d071      	beq.n	80091dc <I2C_Master_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d06c      	beq.n	80091dc <I2C_Master_ISR_DMA+0x148>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	681a      	ldr	r2, [r3, #0]
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009110:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009116:	b29b      	uxth	r3, r3
 8009118:	2b00      	cmp	r3, #0
 800911a:	d04e      	beq.n	80091ba <I2C_Master_ISR_DMA+0x126>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	685b      	ldr	r3, [r3, #4]
 8009122:	b29b      	uxth	r3, r3
 8009124:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009128:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800912e:	b29b      	uxth	r3, r3
 8009130:	2bff      	cmp	r3, #255	@ 0xff
 8009132:	d906      	bls.n	8009142 <I2C_Master_ISR_DMA+0xae>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	22ff      	movs	r2, #255	@ 0xff
 8009138:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 800913a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800913e:	617b      	str	r3, [r7, #20]
 8009140:	e010      	b.n	8009164 <I2C_Master_ISR_DMA+0xd0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009146:	b29a      	uxth	r2, r3
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009150:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8009154:	d003      	beq.n	800915e <I2C_Master_ISR_DMA+0xca>
        {
          xfermode = hi2c->XferOptions;
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800915a:	617b      	str	r3, [r7, #20]
 800915c:	e002      	b.n	8009164 <I2C_Master_ISR_DMA+0xd0>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 800915e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8009162:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009168:	b2da      	uxtb	r2, r3
 800916a:	8a79      	ldrh	r1, [r7, #18]
 800916c:	2300      	movs	r3, #0
 800916e:	9300      	str	r3, [sp, #0]
 8009170:	697b      	ldr	r3, [r7, #20]
 8009172:	68f8      	ldr	r0, [r7, #12]
 8009174:	f001 f9e8 	bl	800a548 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800917c:	b29a      	uxth	r2, r3
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009182:	1ad3      	subs	r3, r2, r3
 8009184:	b29a      	uxth	r2, r3
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009190:	b2db      	uxtb	r3, r3
 8009192:	2b22      	cmp	r3, #34	@ 0x22
 8009194:	d108      	bne.n	80091a8 <I2C_Master_ISR_DMA+0x114>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	681a      	ldr	r2, [r3, #0]
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80091a4:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80091a6:	e057      	b.n	8009258 <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	681a      	ldr	r2, [r3, #0]
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80091b6:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80091b8:	e04e      	b.n	8009258 <I2C_Master_ISR_DMA+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	685b      	ldr	r3, [r3, #4]
 80091c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80091c4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80091c8:	d003      	beq.n	80091d2 <I2C_Master_ISR_DMA+0x13e>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 80091ca:	68f8      	ldr	r0, [r7, #12]
 80091cc:	f000 fb24 	bl	8009818 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 80091d0:	e042      	b.n	8009258 <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80091d2:	2140      	movs	r1, #64	@ 0x40
 80091d4:	68f8      	ldr	r0, [r7, #12]
 80091d6:	f000 fe39 	bl	8009e4c <I2C_ITError>
    if (hi2c->XferCount != 0U)
 80091da:	e03d      	b.n	8009258 <I2C_Master_ISR_DMA+0x1c4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80091dc:	68bb      	ldr	r3, [r7, #8]
 80091de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d028      	beq.n	8009238 <I2C_Master_ISR_DMA+0x1a4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d023      	beq.n	8009238 <I2C_Master_ISR_DMA+0x1a4>
  {
    if (hi2c->XferCount == 0U)
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80091f4:	b29b      	uxth	r3, r3
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d119      	bne.n	800922e <I2C_Master_ISR_DMA+0x19a>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	685b      	ldr	r3, [r3, #4]
 8009200:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009204:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009208:	d025      	beq.n	8009256 <I2C_Master_ISR_DMA+0x1c2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800920e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8009212:	d108      	bne.n	8009226 <I2C_Master_ISR_DMA+0x192>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	685a      	ldr	r2, [r3, #4]
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009222:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8009224:	e017      	b.n	8009256 <I2C_Master_ISR_DMA+0x1c2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8009226:	68f8      	ldr	r0, [r7, #12]
 8009228:	f000 faf6 	bl	8009818 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 800922c:	e013      	b.n	8009256 <I2C_Master_ISR_DMA+0x1c2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800922e:	2140      	movs	r1, #64	@ 0x40
 8009230:	68f8      	ldr	r0, [r7, #12]
 8009232:	f000 fe0b 	bl	8009e4c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8009236:	e00e      	b.n	8009256 <I2C_Master_ISR_DMA+0x1c2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8009238:	68bb      	ldr	r3, [r7, #8]
 800923a:	f003 0320 	and.w	r3, r3, #32
 800923e:	2b00      	cmp	r3, #0
 8009240:	d00a      	beq.n	8009258 <I2C_Master_ISR_DMA+0x1c4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8009248:	2b00      	cmp	r3, #0
 800924a:	d005      	beq.n	8009258 <I2C_Master_ISR_DMA+0x1c4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800924c:	68b9      	ldr	r1, [r7, #8]
 800924e:	68f8      	ldr	r0, [r7, #12]
 8009250:	f000 fb7c 	bl	800994c <I2C_ITMasterCplt>
 8009254:	e000      	b.n	8009258 <I2C_Master_ISR_DMA+0x1c4>
    if (hi2c->XferCount == 0U)
 8009256:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	2200      	movs	r2, #0
 800925c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8009260:	2300      	movs	r3, #0
}
 8009262:	4618      	mov	r0, r3
 8009264:	3718      	adds	r7, #24
 8009266:	46bd      	mov	sp, r7
 8009268:	bd80      	pop	{r7, pc}
	...

0800926c <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 800926c:	b580      	push	{r7, lr}
 800926e:	b088      	sub	sp, #32
 8009270:	af02      	add	r7, sp, #8
 8009272:	60f8      	str	r0, [r7, #12]
 8009274:	60b9      	str	r1, [r7, #8]
 8009276:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8009278:	4b8d      	ldr	r3, [pc, #564]	@ (80094b0 <I2C_Mem_ISR_DMA+0x244>)
 800927a:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009282:	2b01      	cmp	r3, #1
 8009284:	d101      	bne.n	800928a <I2C_Mem_ISR_DMA+0x1e>
 8009286:	2302      	movs	r3, #2
 8009288:	e10e      	b.n	80094a8 <I2C_Mem_ISR_DMA+0x23c>
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	2201      	movs	r2, #1
 800928e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8009292:	68bb      	ldr	r3, [r7, #8]
 8009294:	f003 0310 	and.w	r3, r3, #16
 8009298:	2b00      	cmp	r3, #0
 800929a:	d016      	beq.n	80092ca <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d011      	beq.n	80092ca <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	2210      	movs	r2, #16
 80092ac:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80092b2:	f043 0204 	orr.w	r2, r3, #4
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80092ba:	2120      	movs	r1, #32
 80092bc:	68f8      	ldr	r0, [r7, #12]
 80092be:	f001 f975 	bl	800a5ac <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80092c2:	68f8      	ldr	r0, [r7, #12]
 80092c4:	f000 fed9 	bl	800a07a <I2C_Flush_TXDR>
 80092c8:	e0e9      	b.n	800949e <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 80092ca:	68bb      	ldr	r3, [r7, #8]
 80092cc:	f003 0302 	and.w	r3, r3, #2
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d00e      	beq.n	80092f2 <I2C_Mem_ISR_DMA+0x86>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d009      	beq.n	80092f2 <I2C_Mem_ISR_DMA+0x86>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	68fa      	ldr	r2, [r7, #12]
 80092e4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80092e6:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	f04f 32ff 	mov.w	r2, #4294967295
 80092ee:	651a      	str	r2, [r3, #80]	@ 0x50
 80092f0:	e0d5      	b.n	800949e <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80092f2:	68bb      	ldr	r3, [r7, #8]
 80092f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d05f      	beq.n	80093bc <I2C_Mem_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8009302:	2b00      	cmp	r3, #0
 8009304:	d05a      	beq.n	80093bc <I2C_Mem_ISR_DMA+0x150>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8009306:	2101      	movs	r1, #1
 8009308:	68f8      	ldr	r0, [r7, #12]
 800930a:	f001 f9d3 	bl	800a6b4 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800930e:	2110      	movs	r1, #16
 8009310:	68f8      	ldr	r0, [r7, #12]
 8009312:	f001 f94b 	bl	800a5ac <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800931a:	b29b      	uxth	r3, r3
 800931c:	2b00      	cmp	r3, #0
 800931e:	d048      	beq.n	80093b2 <I2C_Mem_ISR_DMA+0x146>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009324:	b29b      	uxth	r3, r3
 8009326:	2bff      	cmp	r3, #255	@ 0xff
 8009328:	d910      	bls.n	800934c <I2C_Mem_ISR_DMA+0xe0>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	22ff      	movs	r2, #255	@ 0xff
 800932e:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009334:	b299      	uxth	r1, r3
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800933a:	b2da      	uxtb	r2, r3
 800933c:	2300      	movs	r3, #0
 800933e:	9300      	str	r3, [sp, #0]
 8009340:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8009344:	68f8      	ldr	r0, [r7, #12]
 8009346:	f001 f8ff 	bl	800a548 <I2C_TransferConfig>
 800934a:	e011      	b.n	8009370 <I2C_Mem_ISR_DMA+0x104>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009350:	b29a      	uxth	r2, r3
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800935a:	b299      	uxth	r1, r3
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009360:	b2da      	uxtb	r2, r3
 8009362:	2300      	movs	r3, #0
 8009364:	9300      	str	r3, [sp, #0]
 8009366:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800936a:	68f8      	ldr	r0, [r7, #12]
 800936c:	f001 f8ec 	bl	800a548 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009374:	b29a      	uxth	r2, r3
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800937a:	1ad3      	subs	r3, r2, r3
 800937c:	b29a      	uxth	r2, r3
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009388:	b2db      	uxtb	r3, r3
 800938a:	2b22      	cmp	r3, #34	@ 0x22
 800938c:	d108      	bne.n	80093a0 <I2C_Mem_ISR_DMA+0x134>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	681a      	ldr	r2, [r3, #0]
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800939c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800939e:	e07e      	b.n	800949e <I2C_Mem_ISR_DMA+0x232>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	681a      	ldr	r2, [r3, #0]
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80093ae:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80093b0:	e075      	b.n	800949e <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80093b2:	2140      	movs	r1, #64	@ 0x40
 80093b4:	68f8      	ldr	r0, [r7, #12]
 80093b6:	f000 fd49 	bl	8009e4c <I2C_ITError>
    if (hi2c->XferCount != 0U)
 80093ba:	e070      	b.n	800949e <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80093bc:	68bb      	ldr	r3, [r7, #8]
 80093be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d05d      	beq.n	8009482 <I2C_Mem_ISR_DMA+0x216>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d058      	beq.n	8009482 <I2C_Mem_ISR_DMA+0x216>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80093d0:	2101      	movs	r1, #1
 80093d2:	68f8      	ldr	r0, [r7, #12]
 80093d4:	f001 f96e 	bl	800a6b4 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80093d8:	2110      	movs	r1, #16
 80093da:	68f8      	ldr	r0, [r7, #12]
 80093dc:	f001 f8e6 	bl	800a5ac <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80093e6:	b2db      	uxtb	r3, r3
 80093e8:	2b22      	cmp	r3, #34	@ 0x22
 80093ea:	d101      	bne.n	80093f0 <I2C_Mem_ISR_DMA+0x184>
    {
      direction = I2C_GENERATE_START_READ;
 80093ec:	4b31      	ldr	r3, [pc, #196]	@ (80094b4 <I2C_Mem_ISR_DMA+0x248>)
 80093ee:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80093f4:	b29b      	uxth	r3, r3
 80093f6:	2bff      	cmp	r3, #255	@ 0xff
 80093f8:	d910      	bls.n	800941c <I2C_Mem_ISR_DMA+0x1b0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	22ff      	movs	r2, #255	@ 0xff
 80093fe:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009404:	b299      	uxth	r1, r3
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800940a:	b2da      	uxtb	r2, r3
 800940c:	697b      	ldr	r3, [r7, #20]
 800940e:	9300      	str	r3, [sp, #0]
 8009410:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8009414:	68f8      	ldr	r0, [r7, #12]
 8009416:	f001 f897 	bl	800a548 <I2C_TransferConfig>
 800941a:	e011      	b.n	8009440 <I2C_Mem_ISR_DMA+0x1d4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009420:	b29a      	uxth	r2, r3
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800942a:	b299      	uxth	r1, r3
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009430:	b2da      	uxtb	r2, r3
 8009432:	697b      	ldr	r3, [r7, #20]
 8009434:	9300      	str	r3, [sp, #0]
 8009436:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800943a:	68f8      	ldr	r0, [r7, #12]
 800943c:	f001 f884 	bl	800a548 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009444:	b29a      	uxth	r2, r3
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800944a:	1ad3      	subs	r3, r2, r3
 800944c:	b29a      	uxth	r2, r3
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009458:	b2db      	uxtb	r3, r3
 800945a:	2b22      	cmp	r3, #34	@ 0x22
 800945c:	d108      	bne.n	8009470 <I2C_Mem_ISR_DMA+0x204>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	681a      	ldr	r2, [r3, #0]
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800946c:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800946e:	e016      	b.n	800949e <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	681a      	ldr	r2, [r3, #0]
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800947e:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8009480:	e00d      	b.n	800949e <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8009482:	68bb      	ldr	r3, [r7, #8]
 8009484:	f003 0320 	and.w	r3, r3, #32
 8009488:	2b00      	cmp	r3, #0
 800948a:	d008      	beq.n	800949e <I2C_Mem_ISR_DMA+0x232>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8009492:	2b00      	cmp	r3, #0
 8009494:	d003      	beq.n	800949e <I2C_Mem_ISR_DMA+0x232>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8009496:	68b9      	ldr	r1, [r7, #8]
 8009498:	68f8      	ldr	r0, [r7, #12]
 800949a:	f000 fa57 	bl	800994c <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	2200      	movs	r2, #0
 80094a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80094a6:	2300      	movs	r3, #0
}
 80094a8:	4618      	mov	r0, r3
 80094aa:	3718      	adds	r7, #24
 80094ac:	46bd      	mov	sp, r7
 80094ae:	bd80      	pop	{r7, pc}
 80094b0:	80002000 	.word	0x80002000
 80094b4:	80002400 	.word	0x80002400

080094b8 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 80094b8:	b580      	push	{r7, lr}
 80094ba:	b088      	sub	sp, #32
 80094bc:	af00      	add	r7, sp, #0
 80094be:	60f8      	str	r0, [r7, #12]
 80094c0:	60b9      	str	r1, [r7, #8]
 80094c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094c8:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 80094ca:	2300      	movs	r3, #0
 80094cc:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80094d4:	2b01      	cmp	r3, #1
 80094d6:	d101      	bne.n	80094dc <I2C_Slave_ISR_DMA+0x24>
 80094d8:	2302      	movs	r3, #2
 80094da:	e0c0      	b.n	800965e <I2C_Slave_ISR_DMA+0x1a6>
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	2201      	movs	r2, #1
 80094e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80094e4:	68bb      	ldr	r3, [r7, #8]
 80094e6:	f003 0320 	and.w	r3, r3, #32
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d009      	beq.n	8009502 <I2C_Slave_ISR_DMA+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d004      	beq.n	8009502 <I2C_Slave_ISR_DMA+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 80094f8:	68b9      	ldr	r1, [r7, #8]
 80094fa:	68f8      	ldr	r0, [r7, #12]
 80094fc:	f000 faee 	bl	8009adc <I2C_ITSlaveCplt>
 8009500:	e0a8      	b.n	8009654 <I2C_Slave_ISR_DMA+0x19c>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8009502:	68bb      	ldr	r3, [r7, #8]
 8009504:	f003 0310 	and.w	r3, r3, #16
 8009508:	2b00      	cmp	r3, #0
 800950a:	f000 8095 	beq.w	8009638 <I2C_Slave_ISR_DMA+0x180>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8009514:	2b00      	cmp	r3, #0
 8009516:	f000 808f 	beq.w	8009638 <I2C_Slave_ISR_DMA+0x180>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009520:	2b00      	cmp	r3, #0
 8009522:	d104      	bne.n	800952e <I2C_Slave_ISR_DMA+0x76>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800952a:	2b00      	cmp	r3, #0
 800952c:	d07d      	beq.n	800962a <I2C_Slave_ISR_DMA+0x172>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009532:	2b00      	cmp	r3, #0
 8009534:	d00c      	beq.n	8009550 <I2C_Slave_ISR_DMA+0x98>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800953c:	2b00      	cmp	r3, #0
 800953e:	d007      	beq.n	8009550 <I2C_Slave_ISR_DMA+0x98>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	685b      	ldr	r3, [r3, #4]
 8009548:	2b00      	cmp	r3, #0
 800954a:	d101      	bne.n	8009550 <I2C_Slave_ISR_DMA+0x98>
          {
            treatdmanack = 1U;
 800954c:	2301      	movs	r3, #1
 800954e:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009554:	2b00      	cmp	r3, #0
 8009556:	d00c      	beq.n	8009572 <I2C_Slave_ISR_DMA+0xba>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800955e:	2b00      	cmp	r3, #0
 8009560:	d007      	beq.n	8009572 <I2C_Slave_ISR_DMA+0xba>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	685b      	ldr	r3, [r3, #4]
 800956a:	2b00      	cmp	r3, #0
 800956c:	d101      	bne.n	8009572 <I2C_Slave_ISR_DMA+0xba>
          {
            treatdmanack = 1U;
 800956e:	2301      	movs	r3, #1
 8009570:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8009572:	69fb      	ldr	r3, [r7, #28]
 8009574:	2b01      	cmp	r3, #1
 8009576:	d128      	bne.n	80095ca <I2C_Slave_ISR_DMA+0x112>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800957e:	b2db      	uxtb	r3, r3
 8009580:	2b28      	cmp	r3, #40	@ 0x28
 8009582:	d108      	bne.n	8009596 <I2C_Slave_ISR_DMA+0xde>
 8009584:	69bb      	ldr	r3, [r7, #24]
 8009586:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800958a:	d104      	bne.n	8009596 <I2C_Slave_ISR_DMA+0xde>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 800958c:	68b9      	ldr	r1, [r7, #8]
 800958e:	68f8      	ldr	r0, [r7, #12]
 8009590:	f000 fc08 	bl	8009da4 <I2C_ITListenCplt>
 8009594:	e048      	b.n	8009628 <I2C_Slave_ISR_DMA+0x170>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800959c:	b2db      	uxtb	r3, r3
 800959e:	2b29      	cmp	r3, #41	@ 0x29
 80095a0:	d10e      	bne.n	80095c0 <I2C_Slave_ISR_DMA+0x108>
 80095a2:	69bb      	ldr	r3, [r7, #24]
 80095a4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80095a8:	d00a      	beq.n	80095c0 <I2C_Slave_ISR_DMA+0x108>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	2210      	movs	r2, #16
 80095b0:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 80095b2:	68f8      	ldr	r0, [r7, #12]
 80095b4:	f000 fd61 	bl	800a07a <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 80095b8:	68f8      	ldr	r0, [r7, #12]
 80095ba:	f000 f96a 	bl	8009892 <I2C_ITSlaveSeqCplt>
 80095be:	e033      	b.n	8009628 <I2C_Slave_ISR_DMA+0x170>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	2210      	movs	r2, #16
 80095c6:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 80095c8:	e034      	b.n	8009634 <I2C_Slave_ISR_DMA+0x17c>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	2210      	movs	r2, #16
 80095d0:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80095d6:	f043 0204 	orr.w	r2, r3, #4
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80095e4:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80095e6:	69bb      	ldr	r3, [r7, #24]
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d003      	beq.n	80095f4 <I2C_Slave_ISR_DMA+0x13c>
 80095ec:	69bb      	ldr	r3, [r7, #24]
 80095ee:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80095f2:	d11f      	bne.n	8009634 <I2C_Slave_ISR_DMA+0x17c>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80095f4:	7dfb      	ldrb	r3, [r7, #23]
 80095f6:	2b21      	cmp	r3, #33	@ 0x21
 80095f8:	d002      	beq.n	8009600 <I2C_Slave_ISR_DMA+0x148>
 80095fa:	7dfb      	ldrb	r3, [r7, #23]
 80095fc:	2b29      	cmp	r3, #41	@ 0x29
 80095fe:	d103      	bne.n	8009608 <I2C_Slave_ISR_DMA+0x150>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	2221      	movs	r2, #33	@ 0x21
 8009604:	631a      	str	r2, [r3, #48]	@ 0x30
 8009606:	e008      	b.n	800961a <I2C_Slave_ISR_DMA+0x162>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8009608:	7dfb      	ldrb	r3, [r7, #23]
 800960a:	2b22      	cmp	r3, #34	@ 0x22
 800960c:	d002      	beq.n	8009614 <I2C_Slave_ISR_DMA+0x15c>
 800960e:	7dfb      	ldrb	r3, [r7, #23]
 8009610:	2b2a      	cmp	r3, #42	@ 0x2a
 8009612:	d102      	bne.n	800961a <I2C_Slave_ISR_DMA+0x162>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	2222      	movs	r2, #34	@ 0x22
 8009618:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800961e:	4619      	mov	r1, r3
 8009620:	68f8      	ldr	r0, [r7, #12]
 8009622:	f000 fc13 	bl	8009e4c <I2C_ITError>
      if (treatdmanack == 1U)
 8009626:	e005      	b.n	8009634 <I2C_Slave_ISR_DMA+0x17c>
 8009628:	e004      	b.n	8009634 <I2C_Slave_ISR_DMA+0x17c>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	2210      	movs	r2, #16
 8009630:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8009632:	e00f      	b.n	8009654 <I2C_Slave_ISR_DMA+0x19c>
      if (treatdmanack == 1U)
 8009634:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8009636:	e00d      	b.n	8009654 <I2C_Slave_ISR_DMA+0x19c>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8009638:	68bb      	ldr	r3, [r7, #8]
 800963a:	f003 0308 	and.w	r3, r3, #8
 800963e:	2b00      	cmp	r3, #0
 8009640:	d008      	beq.n	8009654 <I2C_Slave_ISR_DMA+0x19c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8009648:	2b00      	cmp	r3, #0
 800964a:	d003      	beq.n	8009654 <I2C_Slave_ISR_DMA+0x19c>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 800964c:	68b9      	ldr	r1, [r7, #8]
 800964e:	68f8      	ldr	r0, [r7, #12]
 8009650:	f000 f85e 	bl	8009710 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	2200      	movs	r2, #0
 8009658:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800965c:	2300      	movs	r3, #0
}
 800965e:	4618      	mov	r0, r3
 8009660:	3720      	adds	r7, #32
 8009662:	46bd      	mov	sp, r7
 8009664:	bd80      	pop	{r7, pc}
	...

08009668 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8009668:	b580      	push	{r7, lr}
 800966a:	b086      	sub	sp, #24
 800966c:	af02      	add	r7, sp, #8
 800966e:	60f8      	str	r0, [r7, #12]
 8009670:	4608      	mov	r0, r1
 8009672:	4611      	mov	r1, r2
 8009674:	461a      	mov	r2, r3
 8009676:	4603      	mov	r3, r0
 8009678:	817b      	strh	r3, [r7, #10]
 800967a:	460b      	mov	r3, r1
 800967c:	813b      	strh	r3, [r7, #8]
 800967e:	4613      	mov	r3, r2
 8009680:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8009682:	88fb      	ldrh	r3, [r7, #6]
 8009684:	b2da      	uxtb	r2, r3
 8009686:	8979      	ldrh	r1, [r7, #10]
 8009688:	4b20      	ldr	r3, [pc, #128]	@ (800970c <I2C_RequestMemoryWrite+0xa4>)
 800968a:	9300      	str	r3, [sp, #0]
 800968c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8009690:	68f8      	ldr	r0, [r7, #12]
 8009692:	f000 ff59 	bl	800a548 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009696:	69fa      	ldr	r2, [r7, #28]
 8009698:	69b9      	ldr	r1, [r7, #24]
 800969a:	68f8      	ldr	r0, [r7, #12]
 800969c:	f000 fdea 	bl	800a274 <I2C_WaitOnTXISFlagUntilTimeout>
 80096a0:	4603      	mov	r3, r0
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d001      	beq.n	80096aa <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80096a6:	2301      	movs	r3, #1
 80096a8:	e02c      	b.n	8009704 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80096aa:	88fb      	ldrh	r3, [r7, #6]
 80096ac:	2b01      	cmp	r3, #1
 80096ae:	d105      	bne.n	80096bc <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80096b0:	893b      	ldrh	r3, [r7, #8]
 80096b2:	b2da      	uxtb	r2, r3
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	629a      	str	r2, [r3, #40]	@ 0x28
 80096ba:	e015      	b.n	80096e8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80096bc:	893b      	ldrh	r3, [r7, #8]
 80096be:	0a1b      	lsrs	r3, r3, #8
 80096c0:	b29b      	uxth	r3, r3
 80096c2:	b2da      	uxtb	r2, r3
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80096ca:	69fa      	ldr	r2, [r7, #28]
 80096cc:	69b9      	ldr	r1, [r7, #24]
 80096ce:	68f8      	ldr	r0, [r7, #12]
 80096d0:	f000 fdd0 	bl	800a274 <I2C_WaitOnTXISFlagUntilTimeout>
 80096d4:	4603      	mov	r3, r0
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d001      	beq.n	80096de <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80096da:	2301      	movs	r3, #1
 80096dc:	e012      	b.n	8009704 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80096de:	893b      	ldrh	r3, [r7, #8]
 80096e0:	b2da      	uxtb	r2, r3
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80096e8:	69fb      	ldr	r3, [r7, #28]
 80096ea:	9300      	str	r3, [sp, #0]
 80096ec:	69bb      	ldr	r3, [r7, #24]
 80096ee:	2200      	movs	r2, #0
 80096f0:	2180      	movs	r1, #128	@ 0x80
 80096f2:	68f8      	ldr	r0, [r7, #12]
 80096f4:	f000 fd65 	bl	800a1c2 <I2C_WaitOnFlagUntilTimeout>
 80096f8:	4603      	mov	r3, r0
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d001      	beq.n	8009702 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80096fe:	2301      	movs	r3, #1
 8009700:	e000      	b.n	8009704 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8009702:	2300      	movs	r3, #0
}
 8009704:	4618      	mov	r0, r3
 8009706:	3710      	adds	r7, #16
 8009708:	46bd      	mov	sp, r7
 800970a:	bd80      	pop	{r7, pc}
 800970c:	80002000 	.word	0x80002000

08009710 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8009710:	b580      	push	{r7, lr}
 8009712:	b084      	sub	sp, #16
 8009714:	af00      	add	r7, sp, #0
 8009716:	6078      	str	r0, [r7, #4]
 8009718:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009720:	b2db      	uxtb	r3, r3
 8009722:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8009726:	2b28      	cmp	r3, #40	@ 0x28
 8009728:	d16a      	bne.n	8009800 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	699b      	ldr	r3, [r3, #24]
 8009730:	0c1b      	lsrs	r3, r3, #16
 8009732:	b2db      	uxtb	r3, r3
 8009734:	f003 0301 	and.w	r3, r3, #1
 8009738:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	699b      	ldr	r3, [r3, #24]
 8009740:	0c1b      	lsrs	r3, r3, #16
 8009742:	b29b      	uxth	r3, r3
 8009744:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8009748:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	689b      	ldr	r3, [r3, #8]
 8009750:	b29b      	uxth	r3, r3
 8009752:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009756:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	68db      	ldr	r3, [r3, #12]
 800975e:	b29b      	uxth	r3, r3
 8009760:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8009764:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	68db      	ldr	r3, [r3, #12]
 800976a:	2b02      	cmp	r3, #2
 800976c:	d138      	bne.n	80097e0 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800976e:	897b      	ldrh	r3, [r7, #10]
 8009770:	09db      	lsrs	r3, r3, #7
 8009772:	b29a      	uxth	r2, r3
 8009774:	89bb      	ldrh	r3, [r7, #12]
 8009776:	4053      	eors	r3, r2
 8009778:	b29b      	uxth	r3, r3
 800977a:	f003 0306 	and.w	r3, r3, #6
 800977e:	2b00      	cmp	r3, #0
 8009780:	d11c      	bne.n	80097bc <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8009782:	897b      	ldrh	r3, [r7, #10]
 8009784:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800978a:	1c5a      	adds	r2, r3, #1
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009794:	2b02      	cmp	r3, #2
 8009796:	d13b      	bne.n	8009810 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	2200      	movs	r2, #0
 800979c:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	2208      	movs	r2, #8
 80097a4:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	2200      	movs	r2, #0
 80097aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80097ae:	89ba      	ldrh	r2, [r7, #12]
 80097b0:	7bfb      	ldrb	r3, [r7, #15]
 80097b2:	4619      	mov	r1, r3
 80097b4:	6878      	ldr	r0, [r7, #4]
 80097b6:	f7ff fb3e 	bl	8008e36 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80097ba:	e029      	b.n	8009810 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 80097bc:	893b      	ldrh	r3, [r7, #8]
 80097be:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80097c0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80097c4:	6878      	ldr	r0, [r7, #4]
 80097c6:	f000 ff75 	bl	800a6b4 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	2200      	movs	r2, #0
 80097ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80097d2:	89ba      	ldrh	r2, [r7, #12]
 80097d4:	7bfb      	ldrb	r3, [r7, #15]
 80097d6:	4619      	mov	r1, r3
 80097d8:	6878      	ldr	r0, [r7, #4]
 80097da:	f7ff fb2c 	bl	8008e36 <HAL_I2C_AddrCallback>
}
 80097de:	e017      	b.n	8009810 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80097e0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80097e4:	6878      	ldr	r0, [r7, #4]
 80097e6:	f000 ff65 	bl	800a6b4 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	2200      	movs	r2, #0
 80097ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80097f2:	89ba      	ldrh	r2, [r7, #12]
 80097f4:	7bfb      	ldrb	r3, [r7, #15]
 80097f6:	4619      	mov	r1, r3
 80097f8:	6878      	ldr	r0, [r7, #4]
 80097fa:	f7ff fb1c 	bl	8008e36 <HAL_I2C_AddrCallback>
}
 80097fe:	e007      	b.n	8009810 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	2208      	movs	r2, #8
 8009806:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	2200      	movs	r2, #0
 800980c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8009810:	bf00      	nop
 8009812:	3710      	adds	r7, #16
 8009814:	46bd      	mov	sp, r7
 8009816:	bd80      	pop	{r7, pc}

08009818 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8009818:	b580      	push	{r7, lr}
 800981a:	b082      	sub	sp, #8
 800981c:	af00      	add	r7, sp, #0
 800981e:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	2200      	movs	r2, #0
 8009824:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800982e:	b2db      	uxtb	r3, r3
 8009830:	2b21      	cmp	r3, #33	@ 0x21
 8009832:	d115      	bne.n	8009860 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	2220      	movs	r2, #32
 8009838:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	2211      	movs	r2, #17
 8009840:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	2200      	movs	r2, #0
 8009846:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8009848:	2101      	movs	r1, #1
 800984a:	6878      	ldr	r0, [r7, #4]
 800984c:	f000 ff32 	bl	800a6b4 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	2200      	movs	r2, #0
 8009854:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8009858:	6878      	ldr	r0, [r7, #4]
 800985a:	f7ff fac4 	bl	8008de6 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800985e:	e014      	b.n	800988a <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	2220      	movs	r2, #32
 8009864:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	2212      	movs	r2, #18
 800986c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	2200      	movs	r2, #0
 8009872:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8009874:	2102      	movs	r1, #2
 8009876:	6878      	ldr	r0, [r7, #4]
 8009878:	f000 ff1c 	bl	800a6b4 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	2200      	movs	r2, #0
 8009880:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8009884:	6878      	ldr	r0, [r7, #4]
 8009886:	f7ff fab8 	bl	8008dfa <HAL_I2C_MasterRxCpltCallback>
}
 800988a:	bf00      	nop
 800988c:	3708      	adds	r7, #8
 800988e:	46bd      	mov	sp, r7
 8009890:	bd80      	pop	{r7, pc}

08009892 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8009892:	b580      	push	{r7, lr}
 8009894:	b084      	sub	sp, #16
 8009896:	af00      	add	r7, sp, #0
 8009898:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	2200      	movs	r2, #0
 80098a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d008      	beq.n	80098c6 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	681a      	ldr	r2, [r3, #0]
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80098c2:	601a      	str	r2, [r3, #0]
 80098c4:	e00c      	b.n	80098e0 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d007      	beq.n	80098e0 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	681a      	ldr	r2, [r3, #0]
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80098de:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80098e6:	b2db      	uxtb	r3, r3
 80098e8:	2b29      	cmp	r3, #41	@ 0x29
 80098ea:	d112      	bne.n	8009912 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	2228      	movs	r2, #40	@ 0x28
 80098f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	2221      	movs	r2, #33	@ 0x21
 80098f8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80098fa:	2101      	movs	r1, #1
 80098fc:	6878      	ldr	r0, [r7, #4]
 80098fe:	f000 fed9 	bl	800a6b4 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	2200      	movs	r2, #0
 8009906:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800990a:	6878      	ldr	r0, [r7, #4]
 800990c:	f7ff fa7f 	bl	8008e0e <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8009910:	e017      	b.n	8009942 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009918:	b2db      	uxtb	r3, r3
 800991a:	2b2a      	cmp	r3, #42	@ 0x2a
 800991c:	d111      	bne.n	8009942 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	2228      	movs	r2, #40	@ 0x28
 8009922:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	2222      	movs	r2, #34	@ 0x22
 800992a:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800992c:	2102      	movs	r1, #2
 800992e:	6878      	ldr	r0, [r7, #4]
 8009930:	f000 fec0 	bl	800a6b4 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	2200      	movs	r2, #0
 8009938:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800993c:	6878      	ldr	r0, [r7, #4]
 800993e:	f7ff fa70 	bl	8008e22 <HAL_I2C_SlaveRxCpltCallback>
}
 8009942:	bf00      	nop
 8009944:	3710      	adds	r7, #16
 8009946:	46bd      	mov	sp, r7
 8009948:	bd80      	pop	{r7, pc}
	...

0800994c <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800994c:	b580      	push	{r7, lr}
 800994e:	b086      	sub	sp, #24
 8009950:	af00      	add	r7, sp, #0
 8009952:	6078      	str	r0, [r7, #4]
 8009954:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8009956:	683b      	ldr	r3, [r7, #0]
 8009958:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	2220      	movs	r2, #32
 8009960:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009968:	b2db      	uxtb	r3, r3
 800996a:	2b21      	cmp	r3, #33	@ 0x21
 800996c:	d107      	bne.n	800997e <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800996e:	2101      	movs	r1, #1
 8009970:	6878      	ldr	r0, [r7, #4]
 8009972:	f000 fe9f 	bl	800a6b4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	2211      	movs	r2, #17
 800997a:	631a      	str	r2, [r3, #48]	@ 0x30
 800997c:	e00c      	b.n	8009998 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009984:	b2db      	uxtb	r3, r3
 8009986:	2b22      	cmp	r3, #34	@ 0x22
 8009988:	d106      	bne.n	8009998 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800998a:	2102      	movs	r1, #2
 800998c:	6878      	ldr	r0, [r7, #4]
 800998e:	f000 fe91 	bl	800a6b4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	2212      	movs	r2, #18
 8009996:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	6859      	ldr	r1, [r3, #4]
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	681a      	ldr	r2, [r3, #0]
 80099a2:	4b4c      	ldr	r3, [pc, #304]	@ (8009ad4 <I2C_ITMasterCplt+0x188>)
 80099a4:	400b      	ands	r3, r1
 80099a6:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	2200      	movs	r2, #0
 80099ac:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	4a49      	ldr	r2, [pc, #292]	@ (8009ad8 <I2C_ITMasterCplt+0x18c>)
 80099b2:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 80099b4:	697b      	ldr	r3, [r7, #20]
 80099b6:	f003 0310 	and.w	r3, r3, #16
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d009      	beq.n	80099d2 <I2C_ITMasterCplt+0x86>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	2210      	movs	r2, #16
 80099c4:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80099ca:	f043 0204 	orr.w	r2, r3, #4
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80099d8:	b2db      	uxtb	r3, r3
 80099da:	2b60      	cmp	r3, #96	@ 0x60
 80099dc:	d10a      	bne.n	80099f4 <I2C_ITMasterCplt+0xa8>
 80099de:	697b      	ldr	r3, [r7, #20]
 80099e0:	f003 0304 	and.w	r3, r3, #4
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d005      	beq.n	80099f4 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80099ee:	b2db      	uxtb	r3, r3
 80099f0:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 80099f2:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80099f4:	6878      	ldr	r0, [r7, #4]
 80099f6:	f000 fb40 	bl	800a07a <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80099fe:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009a06:	b2db      	uxtb	r3, r3
 8009a08:	2b60      	cmp	r3, #96	@ 0x60
 8009a0a:	d002      	beq.n	8009a12 <I2C_ITMasterCplt+0xc6>
 8009a0c:	693b      	ldr	r3, [r7, #16]
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d006      	beq.n	8009a20 <I2C_ITMasterCplt+0xd4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009a16:	4619      	mov	r1, r3
 8009a18:	6878      	ldr	r0, [r7, #4]
 8009a1a:	f000 fa17 	bl	8009e4c <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8009a1e:	e054      	b.n	8009aca <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009a26:	b2db      	uxtb	r3, r3
 8009a28:	2b21      	cmp	r3, #33	@ 0x21
 8009a2a:	d124      	bne.n	8009a76 <I2C_ITMasterCplt+0x12a>
    hi2c->State = HAL_I2C_STATE_READY;
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	2220      	movs	r2, #32
 8009a30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	2200      	movs	r2, #0
 8009a38:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009a40:	b2db      	uxtb	r3, r3
 8009a42:	2b40      	cmp	r3, #64	@ 0x40
 8009a44:	d10b      	bne.n	8009a5e <I2C_ITMasterCplt+0x112>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	2200      	movs	r2, #0
 8009a4a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	2200      	movs	r2, #0
 8009a52:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8009a56:	6878      	ldr	r0, [r7, #4]
 8009a58:	f7ff fa05 	bl	8008e66 <HAL_I2C_MemTxCpltCallback>
}
 8009a5c:	e035      	b.n	8009aca <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	2200      	movs	r2, #0
 8009a62:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	2200      	movs	r2, #0
 8009a6a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8009a6e:	6878      	ldr	r0, [r7, #4]
 8009a70:	f7ff f9b9 	bl	8008de6 <HAL_I2C_MasterTxCpltCallback>
}
 8009a74:	e029      	b.n	8009aca <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009a7c:	b2db      	uxtb	r3, r3
 8009a7e:	2b22      	cmp	r3, #34	@ 0x22
 8009a80:	d123      	bne.n	8009aca <I2C_ITMasterCplt+0x17e>
    hi2c->State = HAL_I2C_STATE_READY;
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	2220      	movs	r2, #32
 8009a86:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	2200      	movs	r2, #0
 8009a8e:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009a96:	b2db      	uxtb	r3, r3
 8009a98:	2b40      	cmp	r3, #64	@ 0x40
 8009a9a:	d10b      	bne.n	8009ab4 <I2C_ITMasterCplt+0x168>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	2200      	movs	r2, #0
 8009aa0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	2200      	movs	r2, #0
 8009aa8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8009aac:	6878      	ldr	r0, [r7, #4]
 8009aae:	f7fb fb17 	bl	80050e0 <HAL_I2C_MemRxCpltCallback>
}
 8009ab2:	e00a      	b.n	8009aca <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	2200      	movs	r2, #0
 8009ab8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	2200      	movs	r2, #0
 8009ac0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8009ac4:	6878      	ldr	r0, [r7, #4]
 8009ac6:	f7ff f998 	bl	8008dfa <HAL_I2C_MasterRxCpltCallback>
}
 8009aca:	bf00      	nop
 8009acc:	3718      	adds	r7, #24
 8009ace:	46bd      	mov	sp, r7
 8009ad0:	bd80      	pop	{r7, pc}
 8009ad2:	bf00      	nop
 8009ad4:	fe00e800 	.word	0xfe00e800
 8009ad8:	ffff0000 	.word	0xffff0000

08009adc <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8009adc:	b580      	push	{r7, lr}
 8009ade:	b086      	sub	sp, #24
 8009ae0:	af00      	add	r7, sp, #0
 8009ae2:	6078      	str	r0, [r7, #4]
 8009ae4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8009aee:	683b      	ldr	r3, [r7, #0]
 8009af0:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009af6:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009afe:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	2220      	movs	r2, #32
 8009b06:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8009b08:	7afb      	ldrb	r3, [r7, #11]
 8009b0a:	2b21      	cmp	r3, #33	@ 0x21
 8009b0c:	d002      	beq.n	8009b14 <I2C_ITSlaveCplt+0x38>
 8009b0e:	7afb      	ldrb	r3, [r7, #11]
 8009b10:	2b29      	cmp	r3, #41	@ 0x29
 8009b12:	d108      	bne.n	8009b26 <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8009b14:	f248 0101 	movw	r1, #32769	@ 0x8001
 8009b18:	6878      	ldr	r0, [r7, #4]
 8009b1a:	f000 fdcb 	bl	800a6b4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	2221      	movs	r2, #33	@ 0x21
 8009b22:	631a      	str	r2, [r3, #48]	@ 0x30
 8009b24:	e019      	b.n	8009b5a <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8009b26:	7afb      	ldrb	r3, [r7, #11]
 8009b28:	2b22      	cmp	r3, #34	@ 0x22
 8009b2a:	d002      	beq.n	8009b32 <I2C_ITSlaveCplt+0x56>
 8009b2c:	7afb      	ldrb	r3, [r7, #11]
 8009b2e:	2b2a      	cmp	r3, #42	@ 0x2a
 8009b30:	d108      	bne.n	8009b44 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8009b32:	f248 0102 	movw	r1, #32770	@ 0x8002
 8009b36:	6878      	ldr	r0, [r7, #4]
 8009b38:	f000 fdbc 	bl	800a6b4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	2222      	movs	r2, #34	@ 0x22
 8009b40:	631a      	str	r2, [r3, #48]	@ 0x30
 8009b42:	e00a      	b.n	8009b5a <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8009b44:	7afb      	ldrb	r3, [r7, #11]
 8009b46:	2b28      	cmp	r3, #40	@ 0x28
 8009b48:	d107      	bne.n	8009b5a <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8009b4a:	f248 0103 	movw	r1, #32771	@ 0x8003
 8009b4e:	6878      	ldr	r0, [r7, #4]
 8009b50:	f000 fdb0 	bl	800a6b4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	2200      	movs	r2, #0
 8009b58:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	685a      	ldr	r2, [r3, #4]
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009b68:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	6859      	ldr	r1, [r3, #4]
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	681a      	ldr	r2, [r3, #0]
 8009b74:	4b89      	ldr	r3, [pc, #548]	@ (8009d9c <I2C_ITSlaveCplt+0x2c0>)
 8009b76:	400b      	ands	r3, r1
 8009b78:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8009b7a:	6878      	ldr	r0, [r7, #4]
 8009b7c:	f000 fa7d 	bl	800a07a <I2C_Flush_TXDR>

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8009b80:	693b      	ldr	r3, [r7, #16]
 8009b82:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d013      	beq.n	8009bb2 <I2C_ITSlaveCplt+0xd6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	681a      	ldr	r2, [r3, #0]
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8009b98:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d01f      	beq.n	8009be2 <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	685b      	ldr	r3, [r3, #4]
 8009baa:	b29a      	uxth	r2, r3
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8009bb0:	e017      	b.n	8009be2 <I2C_ITSlaveCplt+0x106>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8009bb2:	693b      	ldr	r3, [r7, #16]
 8009bb4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d012      	beq.n	8009be2 <I2C_ITSlaveCplt+0x106>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	681a      	ldr	r2, [r3, #0]
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8009bca:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d006      	beq.n	8009be2 <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	685b      	ldr	r3, [r3, #4]
 8009bdc:	b29a      	uxth	r2, r3
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8009be2:	697b      	ldr	r3, [r7, #20]
 8009be4:	f003 0304 	and.w	r3, r3, #4
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d020      	beq.n	8009c2e <I2C_ITSlaveCplt+0x152>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8009bec:	697b      	ldr	r3, [r7, #20]
 8009bee:	f023 0304 	bic.w	r3, r3, #4
 8009bf2:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009bfe:	b2d2      	uxtb	r2, r2
 8009c00:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c06:	1c5a      	adds	r2, r3, #1
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d00c      	beq.n	8009c2e <I2C_ITSlaveCplt+0x152>
    {
      hi2c->XferSize--;
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009c18:	3b01      	subs	r3, #1
 8009c1a:	b29a      	uxth	r2, r3
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009c24:	b29b      	uxth	r3, r3
 8009c26:	3b01      	subs	r3, #1
 8009c28:	b29a      	uxth	r2, r3
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009c32:	b29b      	uxth	r3, r3
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d005      	beq.n	8009c44 <I2C_ITSlaveCplt+0x168>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009c3c:	f043 0204 	orr.w	r2, r3, #4
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8009c44:	697b      	ldr	r3, [r7, #20]
 8009c46:	f003 0310 	and.w	r3, r3, #16
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d049      	beq.n	8009ce2 <I2C_ITSlaveCplt+0x206>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8009c4e:	693b      	ldr	r3, [r7, #16]
 8009c50:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d044      	beq.n	8009ce2 <I2C_ITSlaveCplt+0x206>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009c5c:	b29b      	uxth	r3, r3
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d128      	bne.n	8009cb4 <I2C_ITSlaveCplt+0x1d8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009c68:	b2db      	uxtb	r3, r3
 8009c6a:	2b28      	cmp	r3, #40	@ 0x28
 8009c6c:	d108      	bne.n	8009c80 <I2C_ITSlaveCplt+0x1a4>
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009c74:	d104      	bne.n	8009c80 <I2C_ITSlaveCplt+0x1a4>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8009c76:	6979      	ldr	r1, [r7, #20]
 8009c78:	6878      	ldr	r0, [r7, #4]
 8009c7a:	f000 f893 	bl	8009da4 <I2C_ITListenCplt>
 8009c7e:	e030      	b.n	8009ce2 <I2C_ITSlaveCplt+0x206>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009c86:	b2db      	uxtb	r3, r3
 8009c88:	2b29      	cmp	r3, #41	@ 0x29
 8009c8a:	d10e      	bne.n	8009caa <I2C_ITSlaveCplt+0x1ce>
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8009c92:	d00a      	beq.n	8009caa <I2C_ITSlaveCplt+0x1ce>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	2210      	movs	r2, #16
 8009c9a:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8009c9c:	6878      	ldr	r0, [r7, #4]
 8009c9e:	f000 f9ec 	bl	800a07a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8009ca2:	6878      	ldr	r0, [r7, #4]
 8009ca4:	f7ff fdf5 	bl	8009892 <I2C_ITSlaveSeqCplt>
 8009ca8:	e01b      	b.n	8009ce2 <I2C_ITSlaveCplt+0x206>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	2210      	movs	r2, #16
 8009cb0:	61da      	str	r2, [r3, #28]
 8009cb2:	e016      	b.n	8009ce2 <I2C_ITSlaveCplt+0x206>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	2210      	movs	r2, #16
 8009cba:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009cc0:	f043 0204 	orr.w	r2, r3, #4
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d003      	beq.n	8009cd6 <I2C_ITSlaveCplt+0x1fa>
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009cd4:	d105      	bne.n	8009ce2 <I2C_ITSlaveCplt+0x206>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009cda:	4619      	mov	r1, r3
 8009cdc:	6878      	ldr	r0, [r7, #4]
 8009cde:	f000 f8b5 	bl	8009e4c <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	2200      	movs	r2, #0
 8009ce6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	2200      	movs	r2, #0
 8009cee:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d010      	beq.n	8009d1a <I2C_ITSlaveCplt+0x23e>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009cfc:	4619      	mov	r1, r3
 8009cfe:	6878      	ldr	r0, [r7, #4]
 8009d00:	f000 f8a4 	bl	8009e4c <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009d0a:	b2db      	uxtb	r3, r3
 8009d0c:	2b28      	cmp	r3, #40	@ 0x28
 8009d0e:	d141      	bne.n	8009d94 <I2C_ITSlaveCplt+0x2b8>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8009d10:	6979      	ldr	r1, [r7, #20]
 8009d12:	6878      	ldr	r0, [r7, #4]
 8009d14:	f000 f846 	bl	8009da4 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8009d18:	e03c      	b.n	8009d94 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d1e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8009d22:	d014      	beq.n	8009d4e <I2C_ITSlaveCplt+0x272>
    I2C_ITSlaveSeqCplt(hi2c);
 8009d24:	6878      	ldr	r0, [r7, #4]
 8009d26:	f7ff fdb4 	bl	8009892 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	4a1c      	ldr	r2, [pc, #112]	@ (8009da0 <I2C_ITSlaveCplt+0x2c4>)
 8009d2e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	2220      	movs	r2, #32
 8009d34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	2200      	movs	r2, #0
 8009d3c:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	2200      	movs	r2, #0
 8009d42:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8009d46:	6878      	ldr	r0, [r7, #4]
 8009d48:	f7ff f883 	bl	8008e52 <HAL_I2C_ListenCpltCallback>
}
 8009d4c:	e022      	b.n	8009d94 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009d54:	b2db      	uxtb	r3, r3
 8009d56:	2b22      	cmp	r3, #34	@ 0x22
 8009d58:	d10e      	bne.n	8009d78 <I2C_ITSlaveCplt+0x29c>
    hi2c->State = HAL_I2C_STATE_READY;
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	2220      	movs	r2, #32
 8009d5e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	2200      	movs	r2, #0
 8009d66:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	2200      	movs	r2, #0
 8009d6c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8009d70:	6878      	ldr	r0, [r7, #4]
 8009d72:	f7ff f856 	bl	8008e22 <HAL_I2C_SlaveRxCpltCallback>
}
 8009d76:	e00d      	b.n	8009d94 <I2C_ITSlaveCplt+0x2b8>
    hi2c->State = HAL_I2C_STATE_READY;
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	2220      	movs	r2, #32
 8009d7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	2200      	movs	r2, #0
 8009d84:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	2200      	movs	r2, #0
 8009d8a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8009d8e:	6878      	ldr	r0, [r7, #4]
 8009d90:	f7ff f83d 	bl	8008e0e <HAL_I2C_SlaveTxCpltCallback>
}
 8009d94:	bf00      	nop
 8009d96:	3718      	adds	r7, #24
 8009d98:	46bd      	mov	sp, r7
 8009d9a:	bd80      	pop	{r7, pc}
 8009d9c:	fe00e800 	.word	0xfe00e800
 8009da0:	ffff0000 	.word	0xffff0000

08009da4 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8009da4:	b580      	push	{r7, lr}
 8009da6:	b082      	sub	sp, #8
 8009da8:	af00      	add	r7, sp, #0
 8009daa:	6078      	str	r0, [r7, #4]
 8009dac:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	4a25      	ldr	r2, [pc, #148]	@ (8009e48 <I2C_ITListenCplt+0xa4>)
 8009db2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	2200      	movs	r2, #0
 8009db8:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	2220      	movs	r2, #32
 8009dbe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	2200      	movs	r2, #0
 8009dc6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	2200      	movs	r2, #0
 8009dce:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8009dd0:	683b      	ldr	r3, [r7, #0]
 8009dd2:	f003 0304 	and.w	r3, r3, #4
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d022      	beq.n	8009e20 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009de4:	b2d2      	uxtb	r2, r2
 8009de6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009dec:	1c5a      	adds	r2, r3, #1
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d012      	beq.n	8009e20 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009dfe:	3b01      	subs	r3, #1
 8009e00:	b29a      	uxth	r2, r3
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009e0a:	b29b      	uxth	r3, r3
 8009e0c:	3b01      	subs	r3, #1
 8009e0e:	b29a      	uxth	r2, r3
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009e18:	f043 0204 	orr.w	r2, r3, #4
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8009e20:	f248 0103 	movw	r1, #32771	@ 0x8003
 8009e24:	6878      	ldr	r0, [r7, #4]
 8009e26:	f000 fc45 	bl	800a6b4 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	2210      	movs	r2, #16
 8009e30:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	2200      	movs	r2, #0
 8009e36:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8009e3a:	6878      	ldr	r0, [r7, #4]
 8009e3c:	f7ff f809 	bl	8008e52 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8009e40:	bf00      	nop
 8009e42:	3708      	adds	r7, #8
 8009e44:	46bd      	mov	sp, r7
 8009e46:	bd80      	pop	{r7, pc}
 8009e48:	ffff0000 	.word	0xffff0000

08009e4c <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8009e4c:	b580      	push	{r7, lr}
 8009e4e:	b084      	sub	sp, #16
 8009e50:	af00      	add	r7, sp, #0
 8009e52:	6078      	str	r0, [r7, #4]
 8009e54:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009e5c:	73fb      	strb	r3, [r7, #15]
#if defined(HAL_DMA_MODULE_ENABLED)
  uint32_t tmppreviousstate;
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	2200      	movs	r2, #0
 8009e62:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	4a6d      	ldr	r2, [pc, #436]	@ (800a020 <I2C_ITError+0x1d4>)
 8009e6a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	2200      	movs	r2, #0
 8009e70:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009e76:	683b      	ldr	r3, [r7, #0]
 8009e78:	431a      	orrs	r2, r3
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8009e7e:	7bfb      	ldrb	r3, [r7, #15]
 8009e80:	2b28      	cmp	r3, #40	@ 0x28
 8009e82:	d005      	beq.n	8009e90 <I2C_ITError+0x44>
 8009e84:	7bfb      	ldrb	r3, [r7, #15]
 8009e86:	2b29      	cmp	r3, #41	@ 0x29
 8009e88:	d002      	beq.n	8009e90 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8009e8a:	7bfb      	ldrb	r3, [r7, #15]
 8009e8c:	2b2a      	cmp	r3, #42	@ 0x2a
 8009e8e:	d10b      	bne.n	8009ea8 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8009e90:	2103      	movs	r1, #3
 8009e92:	6878      	ldr	r0, [r7, #4]
 8009e94:	f000 fc0e 	bl	800a6b4 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	2228      	movs	r2, #40	@ 0x28
 8009e9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	4a60      	ldr	r2, [pc, #384]	@ (800a024 <I2C_ITError+0x1d8>)
 8009ea4:	635a      	str	r2, [r3, #52]	@ 0x34
 8009ea6:	e030      	b.n	8009f0a <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8009ea8:	f248 0103 	movw	r1, #32771	@ 0x8003
 8009eac:	6878      	ldr	r0, [r7, #4]
 8009eae:	f000 fc01 	bl	800a6b4 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8009eb2:	6878      	ldr	r0, [r7, #4]
 8009eb4:	f000 f8e1 	bl	800a07a <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009ebe:	b2db      	uxtb	r3, r3
 8009ec0:	2b60      	cmp	r3, #96	@ 0x60
 8009ec2:	d01f      	beq.n	8009f04 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	2220      	movs	r2, #32
 8009ec8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	699b      	ldr	r3, [r3, #24]
 8009ed2:	f003 0320 	and.w	r3, r3, #32
 8009ed6:	2b20      	cmp	r3, #32
 8009ed8:	d114      	bne.n	8009f04 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	699b      	ldr	r3, [r3, #24]
 8009ee0:	f003 0310 	and.w	r3, r3, #16
 8009ee4:	2b10      	cmp	r3, #16
 8009ee6:	d109      	bne.n	8009efc <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	2210      	movs	r2, #16
 8009eee:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009ef4:	f043 0204 	orr.w	r2, r3, #4
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	2220      	movs	r2, #32
 8009f02:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	2200      	movs	r2, #0
 8009f08:	635a      	str	r2, [r3, #52]	@ 0x34
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009f0e:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d039      	beq.n	8009f8c <I2C_ITError+0x140>
 8009f18:	68bb      	ldr	r3, [r7, #8]
 8009f1a:	2b11      	cmp	r3, #17
 8009f1c:	d002      	beq.n	8009f24 <I2C_ITError+0xd8>
 8009f1e:	68bb      	ldr	r3, [r7, #8]
 8009f20:	2b21      	cmp	r3, #33	@ 0x21
 8009f22:	d133      	bne.n	8009f8c <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009f2e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009f32:	d107      	bne.n	8009f44 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	681a      	ldr	r2, [r3, #0]
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8009f42:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f48:	4618      	mov	r0, r3
 8009f4a:	f7fe f9ca 	bl	80082e2 <HAL_DMA_GetState>
 8009f4e:	4603      	mov	r3, r0
 8009f50:	2b01      	cmp	r3, #1
 8009f52:	d017      	beq.n	8009f84 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f58:	4a33      	ldr	r2, [pc, #204]	@ (800a028 <I2C_ITError+0x1dc>)
 8009f5a:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	2200      	movs	r2, #0
 8009f60:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f68:	4618      	mov	r0, r3
 8009f6a:	f7fe f8ac 	bl	80080c6 <HAL_DMA_Abort_IT>
 8009f6e:	4603      	mov	r3, r0
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d04d      	beq.n	800a010 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f7a:	687a      	ldr	r2, [r7, #4]
 8009f7c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8009f7e:	4610      	mov	r0, r2
 8009f80:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8009f82:	e045      	b.n	800a010 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8009f84:	6878      	ldr	r0, [r7, #4]
 8009f86:	f000 f851 	bl	800a02c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8009f8a:	e041      	b.n	800a010 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d039      	beq.n	800a008 <I2C_ITError+0x1bc>
 8009f94:	68bb      	ldr	r3, [r7, #8]
 8009f96:	2b12      	cmp	r3, #18
 8009f98:	d002      	beq.n	8009fa0 <I2C_ITError+0x154>
 8009f9a:	68bb      	ldr	r3, [r7, #8]
 8009f9c:	2b22      	cmp	r3, #34	@ 0x22
 8009f9e:	d133      	bne.n	800a008 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009faa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009fae:	d107      	bne.n	8009fc0 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	681a      	ldr	r2, [r3, #0]
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8009fbe:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009fc4:	4618      	mov	r0, r3
 8009fc6:	f7fe f98c 	bl	80082e2 <HAL_DMA_GetState>
 8009fca:	4603      	mov	r3, r0
 8009fcc:	2b01      	cmp	r3, #1
 8009fce:	d017      	beq.n	800a000 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009fd4:	4a14      	ldr	r2, [pc, #80]	@ (800a028 <I2C_ITError+0x1dc>)
 8009fd6:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	2200      	movs	r2, #0
 8009fdc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009fe4:	4618      	mov	r0, r3
 8009fe6:	f7fe f86e 	bl	80080c6 <HAL_DMA_Abort_IT>
 8009fea:	4603      	mov	r3, r0
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d011      	beq.n	800a014 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009ff4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ff6:	687a      	ldr	r2, [r7, #4]
 8009ff8:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8009ffa:	4610      	mov	r0, r2
 8009ffc:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8009ffe:	e009      	b.n	800a014 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800a000:	6878      	ldr	r0, [r7, #4]
 800a002:	f000 f813 	bl	800a02c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800a006:	e005      	b.n	800a014 <I2C_ITError+0x1c8>
    }
  }
  else
#endif /* HAL_DMA_MODULE_ENABLED */
  {
    I2C_TreatErrorCallback(hi2c);
 800a008:	6878      	ldr	r0, [r7, #4]
 800a00a:	f000 f80f 	bl	800a02c <I2C_TreatErrorCallback>
  }
}
 800a00e:	e002      	b.n	800a016 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800a010:	bf00      	nop
 800a012:	e000      	b.n	800a016 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800a014:	bf00      	nop
}
 800a016:	bf00      	nop
 800a018:	3710      	adds	r7, #16
 800a01a:	46bd      	mov	sp, r7
 800a01c:	bd80      	pop	{r7, pc}
 800a01e:	bf00      	nop
 800a020:	ffff0000 	.word	0xffff0000
 800a024:	08008ea3 	.word	0x08008ea3
 800a028:	0800a187 	.word	0x0800a187

0800a02c <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800a02c:	b580      	push	{r7, lr}
 800a02e:	b082      	sub	sp, #8
 800a030:	af00      	add	r7, sp, #0
 800a032:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a03a:	b2db      	uxtb	r3, r3
 800a03c:	2b60      	cmp	r3, #96	@ 0x60
 800a03e:	d10e      	bne.n	800a05e <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	2220      	movs	r2, #32
 800a044:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	2200      	movs	r2, #0
 800a04c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	2200      	movs	r2, #0
 800a052:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800a056:	6878      	ldr	r0, [r7, #4]
 800a058:	f7fe ff19 	bl	8008e8e <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800a05c:	e009      	b.n	800a072 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	2200      	movs	r2, #0
 800a062:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	2200      	movs	r2, #0
 800a068:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 800a06c:	6878      	ldr	r0, [r7, #4]
 800a06e:	f7fe ff04 	bl	8008e7a <HAL_I2C_ErrorCallback>
}
 800a072:	bf00      	nop
 800a074:	3708      	adds	r7, #8
 800a076:	46bd      	mov	sp, r7
 800a078:	bd80      	pop	{r7, pc}

0800a07a <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800a07a:	b480      	push	{r7}
 800a07c:	b083      	sub	sp, #12
 800a07e:	af00      	add	r7, sp, #0
 800a080:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	699b      	ldr	r3, [r3, #24]
 800a088:	f003 0302 	and.w	r3, r3, #2
 800a08c:	2b02      	cmp	r3, #2
 800a08e:	d103      	bne.n	800a098 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	2200      	movs	r2, #0
 800a096:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	699b      	ldr	r3, [r3, #24]
 800a09e:	f003 0301 	and.w	r3, r3, #1
 800a0a2:	2b01      	cmp	r3, #1
 800a0a4:	d007      	beq.n	800a0b6 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	699a      	ldr	r2, [r3, #24]
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	f042 0201 	orr.w	r2, r2, #1
 800a0b4:	619a      	str	r2, [r3, #24]
  }
}
 800a0b6:	bf00      	nop
 800a0b8:	370c      	adds	r7, #12
 800a0ba:	46bd      	mov	sp, r7
 800a0bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0c0:	4770      	bx	lr

0800a0c2 <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a0c2:	b580      	push	{r7, lr}
 800a0c4:	b084      	sub	sp, #16
 800a0c6:	af00      	add	r7, sp, #0
 800a0c8:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a0ce:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	681a      	ldr	r2, [r3, #0]
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800a0de:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a0e4:	b29b      	uxth	r3, r3
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d104      	bne.n	800a0f4 <I2C_DMAMasterReceiveCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800a0ea:	2120      	movs	r1, #32
 800a0ec:	68f8      	ldr	r0, [r7, #12]
 800a0ee:	f000 fa5d 	bl	800a5ac <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 800a0f2:	e02d      	b.n	800a150 <I2C_DMAMasterReceiveCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a0f8:	68fa      	ldr	r2, [r7, #12]
 800a0fa:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 800a0fc:	441a      	add	r2, r3
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a106:	b29b      	uxth	r3, r3
 800a108:	2bff      	cmp	r3, #255	@ 0xff
 800a10a:	d903      	bls.n	800a114 <I2C_DMAMasterReceiveCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	22ff      	movs	r2, #255	@ 0xff
 800a110:	851a      	strh	r2, [r3, #40]	@ 0x28
 800a112:	e004      	b.n	800a11e <I2C_DMAMasterReceiveCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a118:	b29a      	uxth	r2, r3
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	3324      	adds	r3, #36	@ 0x24
 800a128:	4619      	mov	r1, r3
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a12e:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 800a134:	f7fd ff4c 	bl	8007fd0 <HAL_DMA_Start_IT>
 800a138:	4603      	mov	r3, r0
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d004      	beq.n	800a148 <I2C_DMAMasterReceiveCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800a13e:	2110      	movs	r1, #16
 800a140:	68f8      	ldr	r0, [r7, #12]
 800a142:	f7ff fe83 	bl	8009e4c <I2C_ITError>
}
 800a146:	e003      	b.n	800a150 <I2C_DMAMasterReceiveCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 800a148:	2140      	movs	r1, #64	@ 0x40
 800a14a:	68f8      	ldr	r0, [r7, #12]
 800a14c:	f000 fa2e 	bl	800a5ac <I2C_Enable_IRQ>
}
 800a150:	bf00      	nop
 800a152:	3710      	adds	r7, #16
 800a154:	46bd      	mov	sp, r7
 800a156:	bd80      	pop	{r7, pc}

0800a158 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 800a158:	b580      	push	{r7, lr}
 800a15a:	b084      	sub	sp, #16
 800a15c:	af00      	add	r7, sp, #0
 800a15e:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a164:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	685a      	ldr	r2, [r3, #4]
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a174:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800a176:	2110      	movs	r1, #16
 800a178:	68f8      	ldr	r0, [r7, #12]
 800a17a:	f7ff fe67 	bl	8009e4c <I2C_ITError>
}
 800a17e:	bf00      	nop
 800a180:	3710      	adds	r7, #16
 800a182:	46bd      	mov	sp, r7
 800a184:	bd80      	pop	{r7, pc}

0800a186 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800a186:	b580      	push	{r7, lr}
 800a188:	b084      	sub	sp, #16
 800a18a:	af00      	add	r7, sp, #0
 800a18c:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a192:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d003      	beq.n	800a1a4 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a1a0:	2200      	movs	r2, #0
 800a1a2:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d003      	beq.n	800a1b4 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a1b0:	2200      	movs	r2, #0
 800a1b2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 800a1b4:	68f8      	ldr	r0, [r7, #12]
 800a1b6:	f7ff ff39 	bl	800a02c <I2C_TreatErrorCallback>
}
 800a1ba:	bf00      	nop
 800a1bc:	3710      	adds	r7, #16
 800a1be:	46bd      	mov	sp, r7
 800a1c0:	bd80      	pop	{r7, pc}

0800a1c2 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800a1c2:	b580      	push	{r7, lr}
 800a1c4:	b084      	sub	sp, #16
 800a1c6:	af00      	add	r7, sp, #0
 800a1c8:	60f8      	str	r0, [r7, #12]
 800a1ca:	60b9      	str	r1, [r7, #8]
 800a1cc:	603b      	str	r3, [r7, #0]
 800a1ce:	4613      	mov	r3, r2
 800a1d0:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a1d2:	e03b      	b.n	800a24c <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800a1d4:	69ba      	ldr	r2, [r7, #24]
 800a1d6:	6839      	ldr	r1, [r7, #0]
 800a1d8:	68f8      	ldr	r0, [r7, #12]
 800a1da:	f000 f8d5 	bl	800a388 <I2C_IsErrorOccurred>
 800a1de:	4603      	mov	r3, r0
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d001      	beq.n	800a1e8 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800a1e4:	2301      	movs	r3, #1
 800a1e6:	e041      	b.n	800a26c <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a1e8:	683b      	ldr	r3, [r7, #0]
 800a1ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1ee:	d02d      	beq.n	800a24c <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a1f0:	f7fd fc88 	bl	8007b04 <HAL_GetTick>
 800a1f4:	4602      	mov	r2, r0
 800a1f6:	69bb      	ldr	r3, [r7, #24]
 800a1f8:	1ad3      	subs	r3, r2, r3
 800a1fa:	683a      	ldr	r2, [r7, #0]
 800a1fc:	429a      	cmp	r2, r3
 800a1fe:	d302      	bcc.n	800a206 <I2C_WaitOnFlagUntilTimeout+0x44>
 800a200:	683b      	ldr	r3, [r7, #0]
 800a202:	2b00      	cmp	r3, #0
 800a204:	d122      	bne.n	800a24c <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	699a      	ldr	r2, [r3, #24]
 800a20c:	68bb      	ldr	r3, [r7, #8]
 800a20e:	4013      	ands	r3, r2
 800a210:	68ba      	ldr	r2, [r7, #8]
 800a212:	429a      	cmp	r2, r3
 800a214:	bf0c      	ite	eq
 800a216:	2301      	moveq	r3, #1
 800a218:	2300      	movne	r3, #0
 800a21a:	b2db      	uxtb	r3, r3
 800a21c:	461a      	mov	r2, r3
 800a21e:	79fb      	ldrb	r3, [r7, #7]
 800a220:	429a      	cmp	r2, r3
 800a222:	d113      	bne.n	800a24c <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a228:	f043 0220 	orr.w	r2, r3, #32
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	2220      	movs	r2, #32
 800a234:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	2200      	movs	r2, #0
 800a23c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	2200      	movs	r2, #0
 800a244:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800a248:	2301      	movs	r3, #1
 800a24a:	e00f      	b.n	800a26c <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	699a      	ldr	r2, [r3, #24]
 800a252:	68bb      	ldr	r3, [r7, #8]
 800a254:	4013      	ands	r3, r2
 800a256:	68ba      	ldr	r2, [r7, #8]
 800a258:	429a      	cmp	r2, r3
 800a25a:	bf0c      	ite	eq
 800a25c:	2301      	moveq	r3, #1
 800a25e:	2300      	movne	r3, #0
 800a260:	b2db      	uxtb	r3, r3
 800a262:	461a      	mov	r2, r3
 800a264:	79fb      	ldrb	r3, [r7, #7]
 800a266:	429a      	cmp	r2, r3
 800a268:	d0b4      	beq.n	800a1d4 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a26a:	2300      	movs	r3, #0
}
 800a26c:	4618      	mov	r0, r3
 800a26e:	3710      	adds	r7, #16
 800a270:	46bd      	mov	sp, r7
 800a272:	bd80      	pop	{r7, pc}

0800a274 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800a274:	b580      	push	{r7, lr}
 800a276:	b084      	sub	sp, #16
 800a278:	af00      	add	r7, sp, #0
 800a27a:	60f8      	str	r0, [r7, #12]
 800a27c:	60b9      	str	r1, [r7, #8]
 800a27e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800a280:	e033      	b.n	800a2ea <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800a282:	687a      	ldr	r2, [r7, #4]
 800a284:	68b9      	ldr	r1, [r7, #8]
 800a286:	68f8      	ldr	r0, [r7, #12]
 800a288:	f000 f87e 	bl	800a388 <I2C_IsErrorOccurred>
 800a28c:	4603      	mov	r3, r0
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d001      	beq.n	800a296 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800a292:	2301      	movs	r3, #1
 800a294:	e031      	b.n	800a2fa <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a296:	68bb      	ldr	r3, [r7, #8]
 800a298:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a29c:	d025      	beq.n	800a2ea <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a29e:	f7fd fc31 	bl	8007b04 <HAL_GetTick>
 800a2a2:	4602      	mov	r2, r0
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	1ad3      	subs	r3, r2, r3
 800a2a8:	68ba      	ldr	r2, [r7, #8]
 800a2aa:	429a      	cmp	r2, r3
 800a2ac:	d302      	bcc.n	800a2b4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800a2ae:	68bb      	ldr	r3, [r7, #8]
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d11a      	bne.n	800a2ea <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	699b      	ldr	r3, [r3, #24]
 800a2ba:	f003 0302 	and.w	r3, r3, #2
 800a2be:	2b02      	cmp	r3, #2
 800a2c0:	d013      	beq.n	800a2ea <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a2c6:	f043 0220 	orr.w	r2, r3, #32
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	2220      	movs	r2, #32
 800a2d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	2200      	movs	r2, #0
 800a2da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	2200      	movs	r2, #0
 800a2e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800a2e6:	2301      	movs	r3, #1
 800a2e8:	e007      	b.n	800a2fa <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	699b      	ldr	r3, [r3, #24]
 800a2f0:	f003 0302 	and.w	r3, r3, #2
 800a2f4:	2b02      	cmp	r3, #2
 800a2f6:	d1c4      	bne.n	800a282 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800a2f8:	2300      	movs	r3, #0
}
 800a2fa:	4618      	mov	r0, r3
 800a2fc:	3710      	adds	r7, #16
 800a2fe:	46bd      	mov	sp, r7
 800a300:	bd80      	pop	{r7, pc}

0800a302 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800a302:	b580      	push	{r7, lr}
 800a304:	b084      	sub	sp, #16
 800a306:	af00      	add	r7, sp, #0
 800a308:	60f8      	str	r0, [r7, #12]
 800a30a:	60b9      	str	r1, [r7, #8]
 800a30c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a30e:	e02f      	b.n	800a370 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800a310:	687a      	ldr	r2, [r7, #4]
 800a312:	68b9      	ldr	r1, [r7, #8]
 800a314:	68f8      	ldr	r0, [r7, #12]
 800a316:	f000 f837 	bl	800a388 <I2C_IsErrorOccurred>
 800a31a:	4603      	mov	r3, r0
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d001      	beq.n	800a324 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800a320:	2301      	movs	r3, #1
 800a322:	e02d      	b.n	800a380 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a324:	f7fd fbee 	bl	8007b04 <HAL_GetTick>
 800a328:	4602      	mov	r2, r0
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	1ad3      	subs	r3, r2, r3
 800a32e:	68ba      	ldr	r2, [r7, #8]
 800a330:	429a      	cmp	r2, r3
 800a332:	d302      	bcc.n	800a33a <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800a334:	68bb      	ldr	r3, [r7, #8]
 800a336:	2b00      	cmp	r3, #0
 800a338:	d11a      	bne.n	800a370 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	699b      	ldr	r3, [r3, #24]
 800a340:	f003 0320 	and.w	r3, r3, #32
 800a344:	2b20      	cmp	r3, #32
 800a346:	d013      	beq.n	800a370 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a34c:	f043 0220 	orr.w	r2, r3, #32
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	2220      	movs	r2, #32
 800a358:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	2200      	movs	r2, #0
 800a360:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	2200      	movs	r2, #0
 800a368:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800a36c:	2301      	movs	r3, #1
 800a36e:	e007      	b.n	800a380 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	699b      	ldr	r3, [r3, #24]
 800a376:	f003 0320 	and.w	r3, r3, #32
 800a37a:	2b20      	cmp	r3, #32
 800a37c:	d1c8      	bne.n	800a310 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a37e:	2300      	movs	r3, #0
}
 800a380:	4618      	mov	r0, r3
 800a382:	3710      	adds	r7, #16
 800a384:	46bd      	mov	sp, r7
 800a386:	bd80      	pop	{r7, pc}

0800a388 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a388:	b580      	push	{r7, lr}
 800a38a:	b08a      	sub	sp, #40	@ 0x28
 800a38c:	af00      	add	r7, sp, #0
 800a38e:	60f8      	str	r0, [r7, #12]
 800a390:	60b9      	str	r1, [r7, #8]
 800a392:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a394:	2300      	movs	r3, #0
 800a396:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	699b      	ldr	r3, [r3, #24]
 800a3a0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800a3a2:	2300      	movs	r3, #0
 800a3a4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800a3aa:	69bb      	ldr	r3, [r7, #24]
 800a3ac:	f003 0310 	and.w	r3, r3, #16
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d068      	beq.n	800a486 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	2210      	movs	r2, #16
 800a3ba:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800a3bc:	e049      	b.n	800a452 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800a3be:	68bb      	ldr	r3, [r7, #8]
 800a3c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3c4:	d045      	beq.n	800a452 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800a3c6:	f7fd fb9d 	bl	8007b04 <HAL_GetTick>
 800a3ca:	4602      	mov	r2, r0
 800a3cc:	69fb      	ldr	r3, [r7, #28]
 800a3ce:	1ad3      	subs	r3, r2, r3
 800a3d0:	68ba      	ldr	r2, [r7, #8]
 800a3d2:	429a      	cmp	r2, r3
 800a3d4:	d302      	bcc.n	800a3dc <I2C_IsErrorOccurred+0x54>
 800a3d6:	68bb      	ldr	r3, [r7, #8]
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d13a      	bne.n	800a452 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	685b      	ldr	r3, [r3, #4]
 800a3e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a3e6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a3ee:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	699b      	ldr	r3, [r3, #24]
 800a3f6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a3fa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a3fe:	d121      	bne.n	800a444 <I2C_IsErrorOccurred+0xbc>
 800a400:	697b      	ldr	r3, [r7, #20]
 800a402:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a406:	d01d      	beq.n	800a444 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800a408:	7cfb      	ldrb	r3, [r7, #19]
 800a40a:	2b20      	cmp	r3, #32
 800a40c:	d01a      	beq.n	800a444 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	685a      	ldr	r2, [r3, #4]
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800a41c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800a41e:	f7fd fb71 	bl	8007b04 <HAL_GetTick>
 800a422:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a424:	e00e      	b.n	800a444 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800a426:	f7fd fb6d 	bl	8007b04 <HAL_GetTick>
 800a42a:	4602      	mov	r2, r0
 800a42c:	69fb      	ldr	r3, [r7, #28]
 800a42e:	1ad3      	subs	r3, r2, r3
 800a430:	2b19      	cmp	r3, #25
 800a432:	d907      	bls.n	800a444 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800a434:	6a3b      	ldr	r3, [r7, #32]
 800a436:	f043 0320 	orr.w	r3, r3, #32
 800a43a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800a43c:	2301      	movs	r3, #1
 800a43e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800a442:	e006      	b.n	800a452 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	699b      	ldr	r3, [r3, #24]
 800a44a:	f003 0320 	and.w	r3, r3, #32
 800a44e:	2b20      	cmp	r3, #32
 800a450:	d1e9      	bne.n	800a426 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	699b      	ldr	r3, [r3, #24]
 800a458:	f003 0320 	and.w	r3, r3, #32
 800a45c:	2b20      	cmp	r3, #32
 800a45e:	d003      	beq.n	800a468 <I2C_IsErrorOccurred+0xe0>
 800a460:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a464:	2b00      	cmp	r3, #0
 800a466:	d0aa      	beq.n	800a3be <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800a468:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d103      	bne.n	800a478 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	2220      	movs	r2, #32
 800a476:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800a478:	6a3b      	ldr	r3, [r7, #32]
 800a47a:	f043 0304 	orr.w	r3, r3, #4
 800a47e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800a480:	2301      	movs	r3, #1
 800a482:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	699b      	ldr	r3, [r3, #24]
 800a48c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800a48e:	69bb      	ldr	r3, [r7, #24]
 800a490:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a494:	2b00      	cmp	r3, #0
 800a496:	d00b      	beq.n	800a4b0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800a498:	6a3b      	ldr	r3, [r7, #32]
 800a49a:	f043 0301 	orr.w	r3, r3, #1
 800a49e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a4a8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800a4aa:	2301      	movs	r3, #1
 800a4ac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800a4b0:	69bb      	ldr	r3, [r7, #24]
 800a4b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d00b      	beq.n	800a4d2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800a4ba:	6a3b      	ldr	r3, [r7, #32]
 800a4bc:	f043 0308 	orr.w	r3, r3, #8
 800a4c0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800a4ca:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800a4cc:	2301      	movs	r3, #1
 800a4ce:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800a4d2:	69bb      	ldr	r3, [r7, #24]
 800a4d4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d00b      	beq.n	800a4f4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800a4dc:	6a3b      	ldr	r3, [r7, #32]
 800a4de:	f043 0302 	orr.w	r3, r3, #2
 800a4e2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a4ec:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800a4ee:	2301      	movs	r3, #1
 800a4f0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800a4f4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d01c      	beq.n	800a536 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800a4fc:	68f8      	ldr	r0, [r7, #12]
 800a4fe:	f7ff fdbc 	bl	800a07a <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	6859      	ldr	r1, [r3, #4]
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	681a      	ldr	r2, [r3, #0]
 800a50c:	4b0d      	ldr	r3, [pc, #52]	@ (800a544 <I2C_IsErrorOccurred+0x1bc>)
 800a50e:	400b      	ands	r3, r1
 800a510:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a516:	6a3b      	ldr	r3, [r7, #32]
 800a518:	431a      	orrs	r2, r3
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	2220      	movs	r2, #32
 800a522:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	2200      	movs	r2, #0
 800a52a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	2200      	movs	r2, #0
 800a532:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800a536:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800a53a:	4618      	mov	r0, r3
 800a53c:	3728      	adds	r7, #40	@ 0x28
 800a53e:	46bd      	mov	sp, r7
 800a540:	bd80      	pop	{r7, pc}
 800a542:	bf00      	nop
 800a544:	fe00e800 	.word	0xfe00e800

0800a548 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800a548:	b480      	push	{r7}
 800a54a:	b087      	sub	sp, #28
 800a54c:	af00      	add	r7, sp, #0
 800a54e:	60f8      	str	r0, [r7, #12]
 800a550:	607b      	str	r3, [r7, #4]
 800a552:	460b      	mov	r3, r1
 800a554:	817b      	strh	r3, [r7, #10]
 800a556:	4613      	mov	r3, r2
 800a558:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800a55a:	897b      	ldrh	r3, [r7, #10]
 800a55c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800a560:	7a7b      	ldrb	r3, [r7, #9]
 800a562:	041b      	lsls	r3, r3, #16
 800a564:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800a568:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800a56e:	6a3b      	ldr	r3, [r7, #32]
 800a570:	4313      	orrs	r3, r2
 800a572:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a576:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	685a      	ldr	r2, [r3, #4]
 800a57e:	6a3b      	ldr	r3, [r7, #32]
 800a580:	0d5b      	lsrs	r3, r3, #21
 800a582:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800a586:	4b08      	ldr	r3, [pc, #32]	@ (800a5a8 <I2C_TransferConfig+0x60>)
 800a588:	430b      	orrs	r3, r1
 800a58a:	43db      	mvns	r3, r3
 800a58c:	ea02 0103 	and.w	r1, r2, r3
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	697a      	ldr	r2, [r7, #20]
 800a596:	430a      	orrs	r2, r1
 800a598:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800a59a:	bf00      	nop
 800a59c:	371c      	adds	r7, #28
 800a59e:	46bd      	mov	sp, r7
 800a5a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5a4:	4770      	bx	lr
 800a5a6:	bf00      	nop
 800a5a8:	03ff63ff 	.word	0x03ff63ff

0800a5ac <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800a5ac:	b480      	push	{r7}
 800a5ae:	b085      	sub	sp, #20
 800a5b0:	af00      	add	r7, sp, #0
 800a5b2:	6078      	str	r0, [r7, #4]
 800a5b4:	460b      	mov	r3, r1
 800a5b6:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800a5b8:	2300      	movs	r3, #0
 800a5ba:	60fb      	str	r3, [r7, #12]

#if defined(HAL_DMA_MODULE_ENABLED)
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a5c0:	4a39      	ldr	r2, [pc, #228]	@ (800a6a8 <I2C_Enable_IRQ+0xfc>)
 800a5c2:	4293      	cmp	r3, r2
 800a5c4:	d032      	beq.n	800a62c <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 800a5ca:	4a38      	ldr	r2, [pc, #224]	@ (800a6ac <I2C_Enable_IRQ+0x100>)
 800a5cc:	4293      	cmp	r3, r2
 800a5ce:	d02d      	beq.n	800a62c <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 800a5d4:	4a36      	ldr	r2, [pc, #216]	@ (800a6b0 <I2C_Enable_IRQ+0x104>)
 800a5d6:	4293      	cmp	r3, r2
 800a5d8:	d028      	beq.n	800a62c <I2C_Enable_IRQ+0x80>
#endif /* HAL_DMA_MODULE_ENABLED */
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800a5da:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	da03      	bge.n	800a5ea <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 800a5e8:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800a5ea:	887b      	ldrh	r3, [r7, #2]
 800a5ec:	f003 0301 	and.w	r3, r3, #1
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d003      	beq.n	800a5fc <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 800a5fa:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800a5fc:	887b      	ldrh	r3, [r7, #2]
 800a5fe:	f003 0302 	and.w	r3, r3, #2
 800a602:	2b00      	cmp	r3, #0
 800a604:	d003      	beq.n	800a60e <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 800a60c:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800a60e:	887b      	ldrh	r3, [r7, #2]
 800a610:	2b10      	cmp	r3, #16
 800a612:	d103      	bne.n	800a61c <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 800a61a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800a61c:	887b      	ldrh	r3, [r7, #2]
 800a61e:	2b20      	cmp	r3, #32
 800a620:	d133      	bne.n	800a68a <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	f043 0320 	orr.w	r3, r3, #32
 800a628:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800a62a:	e02e      	b.n	800a68a <I2C_Enable_IRQ+0xde>
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800a62c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a630:	2b00      	cmp	r3, #0
 800a632:	da03      	bge.n	800a63c <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 800a63a:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800a63c:	887b      	ldrh	r3, [r7, #2]
 800a63e:	f003 0301 	and.w	r3, r3, #1
 800a642:	2b00      	cmp	r3, #0
 800a644:	d003      	beq.n	800a64e <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 800a64c:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800a64e:	887b      	ldrh	r3, [r7, #2]
 800a650:	f003 0302 	and.w	r3, r3, #2
 800a654:	2b00      	cmp	r3, #0
 800a656:	d003      	beq.n	800a660 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 800a65e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800a660:	887b      	ldrh	r3, [r7, #2]
 800a662:	2b10      	cmp	r3, #16
 800a664:	d103      	bne.n	800a66e <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 800a66c:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800a66e:	887b      	ldrh	r3, [r7, #2]
 800a670:	2b20      	cmp	r3, #32
 800a672:	d103      	bne.n	800a67c <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800a67a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800a67c:	887b      	ldrh	r3, [r7, #2]
 800a67e:	2b40      	cmp	r3, #64	@ 0x40
 800a680:	d103      	bne.n	800a68a <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a688:	60fb      	str	r3, [r7, #12]
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	6819      	ldr	r1, [r3, #0]
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	68fa      	ldr	r2, [r7, #12]
 800a696:	430a      	orrs	r2, r1
 800a698:	601a      	str	r2, [r3, #0]
}
 800a69a:	bf00      	nop
 800a69c:	3714      	adds	r7, #20
 800a69e:	46bd      	mov	sp, r7
 800a6a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6a4:	4770      	bx	lr
 800a6a6:	bf00      	nop
 800a6a8:	08009095 	.word	0x08009095
 800a6ac:	080094b9 	.word	0x080094b9
 800a6b0:	0800926d 	.word	0x0800926d

0800a6b4 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800a6b4:	b480      	push	{r7}
 800a6b6:	b085      	sub	sp, #20
 800a6b8:	af00      	add	r7, sp, #0
 800a6ba:	6078      	str	r0, [r7, #4]
 800a6bc:	460b      	mov	r3, r1
 800a6be:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800a6c0:	2300      	movs	r3, #0
 800a6c2:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800a6c4:	887b      	ldrh	r3, [r7, #2]
 800a6c6:	f003 0301 	and.w	r3, r3, #1
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d00f      	beq.n	800a6ee <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 800a6d4:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a6dc:	b2db      	uxtb	r3, r3
 800a6de:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800a6e2:	2b28      	cmp	r3, #40	@ 0x28
 800a6e4:	d003      	beq.n	800a6ee <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 800a6ec:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800a6ee:	887b      	ldrh	r3, [r7, #2]
 800a6f0:	f003 0302 	and.w	r3, r3, #2
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d00f      	beq.n	800a718 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 800a6fe:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a706:	b2db      	uxtb	r3, r3
 800a708:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800a70c:	2b28      	cmp	r3, #40	@ 0x28
 800a70e:	d003      	beq.n	800a718 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 800a716:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800a718:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	da03      	bge.n	800a728 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 800a726:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800a728:	887b      	ldrh	r3, [r7, #2]
 800a72a:	2b10      	cmp	r3, #16
 800a72c:	d103      	bne.n	800a736 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 800a734:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800a736:	887b      	ldrh	r3, [r7, #2]
 800a738:	2b20      	cmp	r3, #32
 800a73a:	d103      	bne.n	800a744 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	f043 0320 	orr.w	r3, r3, #32
 800a742:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800a744:	887b      	ldrh	r3, [r7, #2]
 800a746:	2b40      	cmp	r3, #64	@ 0x40
 800a748:	d103      	bne.n	800a752 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a750:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	6819      	ldr	r1, [r3, #0]
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	43da      	mvns	r2, r3
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	400a      	ands	r2, r1
 800a762:	601a      	str	r2, [r3, #0]
}
 800a764:	bf00      	nop
 800a766:	3714      	adds	r7, #20
 800a768:	46bd      	mov	sp, r7
 800a76a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a76e:	4770      	bx	lr

0800a770 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800a770:	b480      	push	{r7}
 800a772:	b083      	sub	sp, #12
 800a774:	af00      	add	r7, sp, #0
 800a776:	6078      	str	r0, [r7, #4]
 800a778:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a780:	b2db      	uxtb	r3, r3
 800a782:	2b20      	cmp	r3, #32
 800a784:	d138      	bne.n	800a7f8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a78c:	2b01      	cmp	r3, #1
 800a78e:	d101      	bne.n	800a794 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800a790:	2302      	movs	r3, #2
 800a792:	e032      	b.n	800a7fa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	2201      	movs	r2, #1
 800a798:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	2224      	movs	r2, #36	@ 0x24
 800a7a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	681a      	ldr	r2, [r3, #0]
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	f022 0201 	bic.w	r2, r2, #1
 800a7b2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	681a      	ldr	r2, [r3, #0]
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800a7c2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	6819      	ldr	r1, [r3, #0]
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	683a      	ldr	r2, [r7, #0]
 800a7d0:	430a      	orrs	r2, r1
 800a7d2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	681a      	ldr	r2, [r3, #0]
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	f042 0201 	orr.w	r2, r2, #1
 800a7e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	2220      	movs	r2, #32
 800a7e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	2200      	movs	r2, #0
 800a7f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800a7f4:	2300      	movs	r3, #0
 800a7f6:	e000      	b.n	800a7fa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800a7f8:	2302      	movs	r3, #2
  }
}
 800a7fa:	4618      	mov	r0, r3
 800a7fc:	370c      	adds	r7, #12
 800a7fe:	46bd      	mov	sp, r7
 800a800:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a804:	4770      	bx	lr

0800a806 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800a806:	b480      	push	{r7}
 800a808:	b085      	sub	sp, #20
 800a80a:	af00      	add	r7, sp, #0
 800a80c:	6078      	str	r0, [r7, #4]
 800a80e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a816:	b2db      	uxtb	r3, r3
 800a818:	2b20      	cmp	r3, #32
 800a81a:	d139      	bne.n	800a890 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a822:	2b01      	cmp	r3, #1
 800a824:	d101      	bne.n	800a82a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800a826:	2302      	movs	r3, #2
 800a828:	e033      	b.n	800a892 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	2201      	movs	r2, #1
 800a82e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	2224      	movs	r2, #36	@ 0x24
 800a836:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	681a      	ldr	r2, [r3, #0]
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	f022 0201 	bic.w	r2, r2, #1
 800a848:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800a858:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800a85a:	683b      	ldr	r3, [r7, #0]
 800a85c:	021b      	lsls	r3, r3, #8
 800a85e:	68fa      	ldr	r2, [r7, #12]
 800a860:	4313      	orrs	r3, r2
 800a862:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	68fa      	ldr	r2, [r7, #12]
 800a86a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	681a      	ldr	r2, [r3, #0]
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	f042 0201 	orr.w	r2, r2, #1
 800a87a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	2220      	movs	r2, #32
 800a880:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	2200      	movs	r2, #0
 800a888:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800a88c:	2300      	movs	r3, #0
 800a88e:	e000      	b.n	800a892 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800a890:	2302      	movs	r3, #2
  }
}
 800a892:	4618      	mov	r0, r3
 800a894:	3714      	adds	r7, #20
 800a896:	46bd      	mov	sp, r7
 800a898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a89c:	4770      	bx	lr
	...

0800a8a0 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 800a8a0:	b580      	push	{r7, lr}
 800a8a2:	b084      	sub	sp, #16
 800a8a4:	af00      	add	r7, sp, #0
 800a8a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 800a8a8:	2300      	movs	r3, #0
 800a8aa:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d01e      	beq.n	800a8f0 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 800a8b2:	4b13      	ldr	r3, [pc, #76]	@ (800a900 <HAL_IPCC_Init+0x60>)
 800a8b4:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800a8bc:	b2db      	uxtb	r3, r3
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d102      	bne.n	800a8c8 <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 800a8c2:	6878      	ldr	r0, [r7, #4]
 800a8c4:	f7fc fe88 	bl	80075d8 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 800a8c8:	68b8      	ldr	r0, [r7, #8]
 800a8ca:	f000 f85b 	bl	800a984 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 800a8ce:	68bb      	ldr	r3, [r7, #8]
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	f043 1201 	orr.w	r2, r3, #65537	@ 0x10001
 800a8d6:	68bb      	ldr	r3, [r7, #8]
 800a8d8:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 800a8da:	6878      	ldr	r0, [r7, #4]
 800a8dc:	f000 f82c 	bl	800a938 <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	2200      	movs	r2, #0
 800a8e4:	635a      	str	r2, [r3, #52]	@ 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	2201      	movs	r2, #1
 800a8ea:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
 800a8ee:	e001      	b.n	800a8f4 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 800a8f0:	2301      	movs	r3, #1
 800a8f2:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 800a8f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8f6:	4618      	mov	r0, r3
 800a8f8:	3710      	adds	r7, #16
 800a8fa:	46bd      	mov	sp, r7
 800a8fc:	bd80      	pop	{r7, pc}
 800a8fe:	bf00      	nop
 800a900:	58000c00 	.word	0x58000c00

0800a904 <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 800a904:	b480      	push	{r7}
 800a906:	b085      	sub	sp, #20
 800a908:	af00      	add	r7, sp, #0
 800a90a:	60f8      	str	r0, [r7, #12]
 800a90c:	60b9      	str	r1, [r7, #8]
 800a90e:	4613      	mov	r3, r2
 800a910:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 800a912:	bf00      	nop
 800a914:	3714      	adds	r7, #20
 800a916:	46bd      	mov	sp, r7
 800a918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a91c:	4770      	bx	lr

0800a91e <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 800a91e:	b480      	push	{r7}
 800a920:	b085      	sub	sp, #20
 800a922:	af00      	add	r7, sp, #0
 800a924:	60f8      	str	r0, [r7, #12]
 800a926:	60b9      	str	r1, [r7, #8]
 800a928:	4613      	mov	r3, r2
 800a92a:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 800a92c:	bf00      	nop
 800a92e:	3714      	adds	r7, #20
 800a930:	46bd      	mov	sp, r7
 800a932:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a936:	4770      	bx	lr

0800a938 <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 800a938:	b480      	push	{r7}
 800a93a:	b085      	sub	sp, #20
 800a93c:	af00      	add	r7, sp, #0
 800a93e:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 800a940:	2300      	movs	r3, #0
 800a942:	60fb      	str	r3, [r7, #12]
 800a944:	e00f      	b.n	800a966 <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 800a946:	687a      	ldr	r2, [r7, #4]
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	009b      	lsls	r3, r3, #2
 800a94c:	4413      	add	r3, r2
 800a94e:	4a0b      	ldr	r2, [pc, #44]	@ (800a97c <IPCC_SetDefaultCallbacks+0x44>)
 800a950:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 800a952:	687a      	ldr	r2, [r7, #4]
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	3306      	adds	r3, #6
 800a958:	009b      	lsls	r3, r3, #2
 800a95a:	4413      	add	r3, r2
 800a95c:	4a08      	ldr	r2, [pc, #32]	@ (800a980 <IPCC_SetDefaultCallbacks+0x48>)
 800a95e:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	3301      	adds	r3, #1
 800a964:	60fb      	str	r3, [r7, #12]
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	2b05      	cmp	r3, #5
 800a96a:	d9ec      	bls.n	800a946 <IPCC_SetDefaultCallbacks+0xe>
  }
}
 800a96c:	bf00      	nop
 800a96e:	bf00      	nop
 800a970:	3714      	adds	r7, #20
 800a972:	46bd      	mov	sp, r7
 800a974:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a978:	4770      	bx	lr
 800a97a:	bf00      	nop
 800a97c:	0800a905 	.word	0x0800a905
 800a980:	0800a91f 	.word	0x0800a91f

0800a984 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 800a984:	b480      	push	{r7}
 800a986:	b083      	sub	sp, #12
 800a988:	af00      	add	r7, sp, #0
 800a98a:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	2200      	movs	r2, #0
 800a990:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	f04f 123f 	mov.w	r2, #4128831	@ 0x3f003f
 800a998:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	223f      	movs	r2, #63	@ 0x3f
 800a99e:	609a      	str	r2, [r3, #8]
}
 800a9a0:	bf00      	nop
 800a9a2:	370c      	adds	r7, #12
 800a9a4:	46bd      	mov	sp, r7
 800a9a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9aa:	4770      	bx	lr

0800a9ac <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800a9ac:	b480      	push	{r7}
 800a9ae:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a9b0:	4b05      	ldr	r3, [pc, #20]	@ (800a9c8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	4a04      	ldr	r2, [pc, #16]	@ (800a9c8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800a9b6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a9ba:	6013      	str	r3, [r2, #0]
}
 800a9bc:	bf00      	nop
 800a9be:	46bd      	mov	sp, r7
 800a9c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9c4:	4770      	bx	lr
 800a9c6:	bf00      	nop
 800a9c8:	58000400 	.word	0x58000400

0800a9cc <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800a9cc:	b480      	push	{r7}
 800a9ce:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 800a9d0:	4b04      	ldr	r3, [pc, #16]	@ (800a9e4 <HAL_PWREx_GetVoltageRange+0x18>)
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 800a9d8:	4618      	mov	r0, r3
 800a9da:	46bd      	mov	sp, r7
 800a9dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9e0:	4770      	bx	lr
 800a9e2:	bf00      	nop
 800a9e4:	58000400 	.word	0x58000400

0800a9e8 <LL_RCC_HSE_IsEnabledDiv2>:
{
 800a9e8:	b480      	push	{r7}
 800a9ea:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 800a9ec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a9f6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a9fa:	d101      	bne.n	800aa00 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 800a9fc:	2301      	movs	r3, #1
 800a9fe:	e000      	b.n	800aa02 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 800aa00:	2300      	movs	r3, #0
}
 800aa02:	4618      	mov	r0, r3
 800aa04:	46bd      	mov	sp, r7
 800aa06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa0a:	4770      	bx	lr

0800aa0c <LL_RCC_HSE_Enable>:
{
 800aa0c:	b480      	push	{r7}
 800aa0e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800aa10:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800aa1a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800aa1e:	6013      	str	r3, [r2, #0]
}
 800aa20:	bf00      	nop
 800aa22:	46bd      	mov	sp, r7
 800aa24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa28:	4770      	bx	lr

0800aa2a <LL_RCC_HSE_Disable>:
{
 800aa2a:	b480      	push	{r7}
 800aa2c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800aa2e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800aa38:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800aa3c:	6013      	str	r3, [r2, #0]
}
 800aa3e:	bf00      	nop
 800aa40:	46bd      	mov	sp, r7
 800aa42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa46:	4770      	bx	lr

0800aa48 <LL_RCC_HSE_IsReady>:
{
 800aa48:	b480      	push	{r7}
 800aa4a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800aa4c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800aa56:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800aa5a:	d101      	bne.n	800aa60 <LL_RCC_HSE_IsReady+0x18>
 800aa5c:	2301      	movs	r3, #1
 800aa5e:	e000      	b.n	800aa62 <LL_RCC_HSE_IsReady+0x1a>
 800aa60:	2300      	movs	r3, #0
}
 800aa62:	4618      	mov	r0, r3
 800aa64:	46bd      	mov	sp, r7
 800aa66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa6a:	4770      	bx	lr

0800aa6c <LL_RCC_HSI_Enable>:
{
 800aa6c:	b480      	push	{r7}
 800aa6e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800aa70:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800aa7a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800aa7e:	6013      	str	r3, [r2, #0]
}
 800aa80:	bf00      	nop
 800aa82:	46bd      	mov	sp, r7
 800aa84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa88:	4770      	bx	lr

0800aa8a <LL_RCC_HSI_Disable>:
{
 800aa8a:	b480      	push	{r7}
 800aa8c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800aa8e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800aa98:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800aa9c:	6013      	str	r3, [r2, #0]
}
 800aa9e:	bf00      	nop
 800aaa0:	46bd      	mov	sp, r7
 800aaa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaa6:	4770      	bx	lr

0800aaa8 <LL_RCC_HSI_IsReady>:
{
 800aaa8:	b480      	push	{r7}
 800aaaa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800aaac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800aab6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800aaba:	d101      	bne.n	800aac0 <LL_RCC_HSI_IsReady+0x18>
 800aabc:	2301      	movs	r3, #1
 800aabe:	e000      	b.n	800aac2 <LL_RCC_HSI_IsReady+0x1a>
 800aac0:	2300      	movs	r3, #0
}
 800aac2:	4618      	mov	r0, r3
 800aac4:	46bd      	mov	sp, r7
 800aac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaca:	4770      	bx	lr

0800aacc <LL_RCC_HSI_SetCalibTrimming>:
{
 800aacc:	b480      	push	{r7}
 800aace:	b083      	sub	sp, #12
 800aad0:	af00      	add	r7, sp, #0
 800aad2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800aad4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800aad8:	685b      	ldr	r3, [r3, #4]
 800aada:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	061b      	lsls	r3, r3, #24
 800aae2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800aae6:	4313      	orrs	r3, r2
 800aae8:	604b      	str	r3, [r1, #4]
}
 800aaea:	bf00      	nop
 800aaec:	370c      	adds	r7, #12
 800aaee:	46bd      	mov	sp, r7
 800aaf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaf4:	4770      	bx	lr

0800aaf6 <LL_RCC_HSI48_Enable>:
{
 800aaf6:	b480      	push	{r7}
 800aaf8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800aafa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800aafe:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800ab02:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800ab06:	f043 0301 	orr.w	r3, r3, #1
 800ab0a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 800ab0e:	bf00      	nop
 800ab10:	46bd      	mov	sp, r7
 800ab12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab16:	4770      	bx	lr

0800ab18 <LL_RCC_HSI48_Disable>:
{
 800ab18:	b480      	push	{r7}
 800ab1a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800ab1c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ab20:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800ab24:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800ab28:	f023 0301 	bic.w	r3, r3, #1
 800ab2c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 800ab30:	bf00      	nop
 800ab32:	46bd      	mov	sp, r7
 800ab34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab38:	4770      	bx	lr

0800ab3a <LL_RCC_HSI48_IsReady>:
{
 800ab3a:	b480      	push	{r7}
 800ab3c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 800ab3e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ab42:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800ab46:	f003 0302 	and.w	r3, r3, #2
 800ab4a:	2b02      	cmp	r3, #2
 800ab4c:	d101      	bne.n	800ab52 <LL_RCC_HSI48_IsReady+0x18>
 800ab4e:	2301      	movs	r3, #1
 800ab50:	e000      	b.n	800ab54 <LL_RCC_HSI48_IsReady+0x1a>
 800ab52:	2300      	movs	r3, #0
}
 800ab54:	4618      	mov	r0, r3
 800ab56:	46bd      	mov	sp, r7
 800ab58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab5c:	4770      	bx	lr

0800ab5e <LL_RCC_LSE_Enable>:
{
 800ab5e:	b480      	push	{r7}
 800ab60:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800ab62:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ab66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ab6a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800ab6e:	f043 0301 	orr.w	r3, r3, #1
 800ab72:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800ab76:	bf00      	nop
 800ab78:	46bd      	mov	sp, r7
 800ab7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab7e:	4770      	bx	lr

0800ab80 <LL_RCC_LSE_Disable>:
{
 800ab80:	b480      	push	{r7}
 800ab82:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800ab84:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ab88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ab8c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800ab90:	f023 0301 	bic.w	r3, r3, #1
 800ab94:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800ab98:	bf00      	nop
 800ab9a:	46bd      	mov	sp, r7
 800ab9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aba0:	4770      	bx	lr

0800aba2 <LL_RCC_LSE_EnableBypass>:
{
 800aba2:	b480      	push	{r7}
 800aba4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800aba6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800abaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800abae:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800abb2:	f043 0304 	orr.w	r3, r3, #4
 800abb6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800abba:	bf00      	nop
 800abbc:	46bd      	mov	sp, r7
 800abbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abc2:	4770      	bx	lr

0800abc4 <LL_RCC_LSE_DisableBypass>:
{
 800abc4:	b480      	push	{r7}
 800abc6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800abc8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800abcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800abd0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800abd4:	f023 0304 	bic.w	r3, r3, #4
 800abd8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800abdc:	bf00      	nop
 800abde:	46bd      	mov	sp, r7
 800abe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abe4:	4770      	bx	lr

0800abe6 <LL_RCC_LSE_IsReady>:
{
 800abe6:	b480      	push	{r7}
 800abe8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800abea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800abee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800abf2:	f003 0302 	and.w	r3, r3, #2
 800abf6:	2b02      	cmp	r3, #2
 800abf8:	d101      	bne.n	800abfe <LL_RCC_LSE_IsReady+0x18>
 800abfa:	2301      	movs	r3, #1
 800abfc:	e000      	b.n	800ac00 <LL_RCC_LSE_IsReady+0x1a>
 800abfe:	2300      	movs	r3, #0
}
 800ac00:	4618      	mov	r0, r3
 800ac02:	46bd      	mov	sp, r7
 800ac04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac08:	4770      	bx	lr

0800ac0a <LL_RCC_LSI1_Enable>:
{
 800ac0a:	b480      	push	{r7}
 800ac0c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800ac0e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ac12:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ac16:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800ac1a:	f043 0301 	orr.w	r3, r3, #1
 800ac1e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800ac22:	bf00      	nop
 800ac24:	46bd      	mov	sp, r7
 800ac26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac2a:	4770      	bx	lr

0800ac2c <LL_RCC_LSI1_Disable>:
{
 800ac2c:	b480      	push	{r7}
 800ac2e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800ac30:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ac34:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ac38:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800ac3c:	f023 0301 	bic.w	r3, r3, #1
 800ac40:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800ac44:	bf00      	nop
 800ac46:	46bd      	mov	sp, r7
 800ac48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac4c:	4770      	bx	lr

0800ac4e <LL_RCC_LSI1_IsReady>:
{
 800ac4e:	b480      	push	{r7}
 800ac50:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 800ac52:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ac56:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ac5a:	f003 0302 	and.w	r3, r3, #2
 800ac5e:	2b02      	cmp	r3, #2
 800ac60:	d101      	bne.n	800ac66 <LL_RCC_LSI1_IsReady+0x18>
 800ac62:	2301      	movs	r3, #1
 800ac64:	e000      	b.n	800ac68 <LL_RCC_LSI1_IsReady+0x1a>
 800ac66:	2300      	movs	r3, #0
}
 800ac68:	4618      	mov	r0, r3
 800ac6a:	46bd      	mov	sp, r7
 800ac6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac70:	4770      	bx	lr

0800ac72 <LL_RCC_LSI2_Enable>:
{
 800ac72:	b480      	push	{r7}
 800ac74:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800ac76:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ac7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ac7e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800ac82:	f043 0304 	orr.w	r3, r3, #4
 800ac86:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800ac8a:	bf00      	nop
 800ac8c:	46bd      	mov	sp, r7
 800ac8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac92:	4770      	bx	lr

0800ac94 <LL_RCC_LSI2_Disable>:
{
 800ac94:	b480      	push	{r7}
 800ac96:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800ac98:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ac9c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800aca0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800aca4:	f023 0304 	bic.w	r3, r3, #4
 800aca8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800acac:	bf00      	nop
 800acae:	46bd      	mov	sp, r7
 800acb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acb4:	4770      	bx	lr

0800acb6 <LL_RCC_LSI2_IsReady>:
{
 800acb6:	b480      	push	{r7}
 800acb8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 800acba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800acbe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800acc2:	f003 0308 	and.w	r3, r3, #8
 800acc6:	2b08      	cmp	r3, #8
 800acc8:	d101      	bne.n	800acce <LL_RCC_LSI2_IsReady+0x18>
 800acca:	2301      	movs	r3, #1
 800accc:	e000      	b.n	800acd0 <LL_RCC_LSI2_IsReady+0x1a>
 800acce:	2300      	movs	r3, #0
}
 800acd0:	4618      	mov	r0, r3
 800acd2:	46bd      	mov	sp, r7
 800acd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acd8:	4770      	bx	lr

0800acda <LL_RCC_LSI2_SetTrimming>:
{
 800acda:	b480      	push	{r7}
 800acdc:	b083      	sub	sp, #12
 800acde:	af00      	add	r7, sp, #0
 800ace0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 800ace2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ace6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800acea:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	021b      	lsls	r3, r3, #8
 800acf2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800acf6:	4313      	orrs	r3, r2
 800acf8:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 800acfc:	bf00      	nop
 800acfe:	370c      	adds	r7, #12
 800ad00:	46bd      	mov	sp, r7
 800ad02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad06:	4770      	bx	lr

0800ad08 <LL_RCC_MSI_Enable>:
{
 800ad08:	b480      	push	{r7}
 800ad0a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800ad0c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800ad16:	f043 0301 	orr.w	r3, r3, #1
 800ad1a:	6013      	str	r3, [r2, #0]
}
 800ad1c:	bf00      	nop
 800ad1e:	46bd      	mov	sp, r7
 800ad20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad24:	4770      	bx	lr

0800ad26 <LL_RCC_MSI_Disable>:
{
 800ad26:	b480      	push	{r7}
 800ad28:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800ad2a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800ad34:	f023 0301 	bic.w	r3, r3, #1
 800ad38:	6013      	str	r3, [r2, #0]
}
 800ad3a:	bf00      	nop
 800ad3c:	46bd      	mov	sp, r7
 800ad3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad42:	4770      	bx	lr

0800ad44 <LL_RCC_MSI_IsReady>:
{
 800ad44:	b480      	push	{r7}
 800ad46:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800ad48:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	f003 0302 	and.w	r3, r3, #2
 800ad52:	2b02      	cmp	r3, #2
 800ad54:	d101      	bne.n	800ad5a <LL_RCC_MSI_IsReady+0x16>
 800ad56:	2301      	movs	r3, #1
 800ad58:	e000      	b.n	800ad5c <LL_RCC_MSI_IsReady+0x18>
 800ad5a:	2300      	movs	r3, #0
}
 800ad5c:	4618      	mov	r0, r3
 800ad5e:	46bd      	mov	sp, r7
 800ad60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad64:	4770      	bx	lr

0800ad66 <LL_RCC_MSI_SetRange>:
{
 800ad66:	b480      	push	{r7}
 800ad68:	b083      	sub	sp, #12
 800ad6a:	af00      	add	r7, sp, #0
 800ad6c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 800ad6e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800ad78:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	4313      	orrs	r3, r2
 800ad80:	600b      	str	r3, [r1, #0]
}
 800ad82:	bf00      	nop
 800ad84:	370c      	adds	r7, #12
 800ad86:	46bd      	mov	sp, r7
 800ad88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad8c:	4770      	bx	lr

0800ad8e <LL_RCC_MSI_GetRange>:
{
 800ad8e:	b480      	push	{r7}
 800ad90:	b083      	sub	sp, #12
 800ad92:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 800ad94:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800ad9e:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	2bb0      	cmp	r3, #176	@ 0xb0
 800ada4:	d901      	bls.n	800adaa <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 800ada6:	23b0      	movs	r3, #176	@ 0xb0
 800ada8:	607b      	str	r3, [r7, #4]
  return msiRange;
 800adaa:	687b      	ldr	r3, [r7, #4]
}
 800adac:	4618      	mov	r0, r3
 800adae:	370c      	adds	r7, #12
 800adb0:	46bd      	mov	sp, r7
 800adb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adb6:	4770      	bx	lr

0800adb8 <LL_RCC_MSI_SetCalibTrimming>:
{
 800adb8:	b480      	push	{r7}
 800adba:	b083      	sub	sp, #12
 800adbc:	af00      	add	r7, sp, #0
 800adbe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 800adc0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800adc4:	685b      	ldr	r3, [r3, #4]
 800adc6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	021b      	lsls	r3, r3, #8
 800adce:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800add2:	4313      	orrs	r3, r2
 800add4:	604b      	str	r3, [r1, #4]
}
 800add6:	bf00      	nop
 800add8:	370c      	adds	r7, #12
 800adda:	46bd      	mov	sp, r7
 800addc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ade0:	4770      	bx	lr

0800ade2 <LL_RCC_SetSysClkSource>:
{
 800ade2:	b480      	push	{r7}
 800ade4:	b083      	sub	sp, #12
 800ade6:	af00      	add	r7, sp, #0
 800ade8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800adea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800adee:	689b      	ldr	r3, [r3, #8]
 800adf0:	f023 0203 	bic.w	r2, r3, #3
 800adf4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	4313      	orrs	r3, r2
 800adfc:	608b      	str	r3, [r1, #8]
}
 800adfe:	bf00      	nop
 800ae00:	370c      	adds	r7, #12
 800ae02:	46bd      	mov	sp, r7
 800ae04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae08:	4770      	bx	lr

0800ae0a <LL_RCC_GetSysClkSource>:
{
 800ae0a:	b480      	push	{r7}
 800ae0c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800ae0e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ae12:	689b      	ldr	r3, [r3, #8]
 800ae14:	f003 030c 	and.w	r3, r3, #12
}
 800ae18:	4618      	mov	r0, r3
 800ae1a:	46bd      	mov	sp, r7
 800ae1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae20:	4770      	bx	lr

0800ae22 <LL_RCC_SetAHBPrescaler>:
{
 800ae22:	b480      	push	{r7}
 800ae24:	b083      	sub	sp, #12
 800ae26:	af00      	add	r7, sp, #0
 800ae28:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800ae2a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ae2e:	689b      	ldr	r3, [r3, #8]
 800ae30:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800ae34:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	4313      	orrs	r3, r2
 800ae3c:	608b      	str	r3, [r1, #8]
}
 800ae3e:	bf00      	nop
 800ae40:	370c      	adds	r7, #12
 800ae42:	46bd      	mov	sp, r7
 800ae44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae48:	4770      	bx	lr

0800ae4a <LL_C2_RCC_SetAHBPrescaler>:
{
 800ae4a:	b480      	push	{r7}
 800ae4c:	b083      	sub	sp, #12
 800ae4e:	af00      	add	r7, sp, #0
 800ae50:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800ae52:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ae56:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800ae5a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800ae5e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	4313      	orrs	r3, r2
 800ae66:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 800ae6a:	bf00      	nop
 800ae6c:	370c      	adds	r7, #12
 800ae6e:	46bd      	mov	sp, r7
 800ae70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae74:	4770      	bx	lr

0800ae76 <LL_RCC_SetAHB4Prescaler>:
{
 800ae76:	b480      	push	{r7}
 800ae78:	b083      	sub	sp, #12
 800ae7a:	af00      	add	r7, sp, #0
 800ae7c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800ae7e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ae82:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800ae86:	f023 020f 	bic.w	r2, r3, #15
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	091b      	lsrs	r3, r3, #4
 800ae8e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800ae92:	4313      	orrs	r3, r2
 800ae94:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 800ae98:	bf00      	nop
 800ae9a:	370c      	adds	r7, #12
 800ae9c:	46bd      	mov	sp, r7
 800ae9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aea2:	4770      	bx	lr

0800aea4 <LL_RCC_SetAPB1Prescaler>:
{
 800aea4:	b480      	push	{r7}
 800aea6:	b083      	sub	sp, #12
 800aea8:	af00      	add	r7, sp, #0
 800aeaa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800aeac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800aeb0:	689b      	ldr	r3, [r3, #8]
 800aeb2:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800aeb6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	4313      	orrs	r3, r2
 800aebe:	608b      	str	r3, [r1, #8]
}
 800aec0:	bf00      	nop
 800aec2:	370c      	adds	r7, #12
 800aec4:	46bd      	mov	sp, r7
 800aec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeca:	4770      	bx	lr

0800aecc <LL_RCC_SetAPB2Prescaler>:
{
 800aecc:	b480      	push	{r7}
 800aece:	b083      	sub	sp, #12
 800aed0:	af00      	add	r7, sp, #0
 800aed2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800aed4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800aed8:	689b      	ldr	r3, [r3, #8]
 800aeda:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800aede:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	4313      	orrs	r3, r2
 800aee6:	608b      	str	r3, [r1, #8]
}
 800aee8:	bf00      	nop
 800aeea:	370c      	adds	r7, #12
 800aeec:	46bd      	mov	sp, r7
 800aeee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aef2:	4770      	bx	lr

0800aef4 <LL_RCC_GetAHBPrescaler>:
{
 800aef4:	b480      	push	{r7}
 800aef6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800aef8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800aefc:	689b      	ldr	r3, [r3, #8]
 800aefe:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800af02:	4618      	mov	r0, r3
 800af04:	46bd      	mov	sp, r7
 800af06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af0a:	4770      	bx	lr

0800af0c <LL_RCC_GetAHB4Prescaler>:
{
 800af0c:	b480      	push	{r7}
 800af0e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 800af10:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800af14:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800af18:	011b      	lsls	r3, r3, #4
 800af1a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800af1e:	4618      	mov	r0, r3
 800af20:	46bd      	mov	sp, r7
 800af22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af26:	4770      	bx	lr

0800af28 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 800af28:	b480      	push	{r7}
 800af2a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800af2c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800af36:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800af3a:	6013      	str	r3, [r2, #0]
}
 800af3c:	bf00      	nop
 800af3e:	46bd      	mov	sp, r7
 800af40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af44:	4770      	bx	lr

0800af46 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 800af46:	b480      	push	{r7}
 800af48:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800af4a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800af54:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800af58:	6013      	str	r3, [r2, #0]
}
 800af5a:	bf00      	nop
 800af5c:	46bd      	mov	sp, r7
 800af5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af62:	4770      	bx	lr

0800af64 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 800af64:	b480      	push	{r7}
 800af66:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800af68:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800af72:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800af76:	d101      	bne.n	800af7c <LL_RCC_PLL_IsReady+0x18>
 800af78:	2301      	movs	r3, #1
 800af7a:	e000      	b.n	800af7e <LL_RCC_PLL_IsReady+0x1a>
 800af7c:	2300      	movs	r3, #0
}
 800af7e:	4618      	mov	r0, r3
 800af80:	46bd      	mov	sp, r7
 800af82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af86:	4770      	bx	lr

0800af88 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800af88:	b480      	push	{r7}
 800af8a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800af8c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800af90:	68db      	ldr	r3, [r3, #12]
 800af92:	0a1b      	lsrs	r3, r3, #8
 800af94:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 800af98:	4618      	mov	r0, r3
 800af9a:	46bd      	mov	sp, r7
 800af9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afa0:	4770      	bx	lr

0800afa2 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800afa2:	b480      	push	{r7}
 800afa4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800afa6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800afaa:	68db      	ldr	r3, [r3, #12]
 800afac:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 800afb0:	4618      	mov	r0, r3
 800afb2:	46bd      	mov	sp, r7
 800afb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afb8:	4770      	bx	lr

0800afba <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800afba:	b480      	push	{r7}
 800afbc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800afbe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800afc2:	68db      	ldr	r3, [r3, #12]
 800afc4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 800afc8:	4618      	mov	r0, r3
 800afca:	46bd      	mov	sp, r7
 800afcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afd0:	4770      	bx	lr

0800afd2 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800afd2:	b480      	push	{r7}
 800afd4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800afd6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800afda:	68db      	ldr	r3, [r3, #12]
 800afdc:	f003 0303 	and.w	r3, r3, #3
}
 800afe0:	4618      	mov	r0, r3
 800afe2:	46bd      	mov	sp, r7
 800afe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afe8:	4770      	bx	lr

0800afea <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 800afea:	b480      	push	{r7}
 800afec:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800afee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800aff2:	689b      	ldr	r3, [r3, #8]
 800aff4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800aff8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800affc:	d101      	bne.n	800b002 <LL_RCC_IsActiveFlag_HPRE+0x18>
 800affe:	2301      	movs	r3, #1
 800b000:	e000      	b.n	800b004 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800b002:	2300      	movs	r3, #0
}
 800b004:	4618      	mov	r0, r3
 800b006:	46bd      	mov	sp, r7
 800b008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b00c:	4770      	bx	lr

0800b00e <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 800b00e:	b480      	push	{r7}
 800b010:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 800b012:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b016:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800b01a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b01e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b022:	d101      	bne.n	800b028 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 800b024:	2301      	movs	r3, #1
 800b026:	e000      	b.n	800b02a <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 800b028:	2300      	movs	r3, #0
}
 800b02a:	4618      	mov	r0, r3
 800b02c:	46bd      	mov	sp, r7
 800b02e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b032:	4770      	bx	lr

0800b034 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 800b034:	b480      	push	{r7}
 800b036:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 800b038:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b03c:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800b040:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b044:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b048:	d101      	bne.n	800b04e <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800b04a:	2301      	movs	r3, #1
 800b04c:	e000      	b.n	800b050 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800b04e:	2300      	movs	r3, #0
}
 800b050:	4618      	mov	r0, r3
 800b052:	46bd      	mov	sp, r7
 800b054:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b058:	4770      	bx	lr

0800b05a <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 800b05a:	b480      	push	{r7}
 800b05c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800b05e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b062:	689b      	ldr	r3, [r3, #8]
 800b064:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b068:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b06c:	d101      	bne.n	800b072 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800b06e:	2301      	movs	r3, #1
 800b070:	e000      	b.n	800b074 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800b072:	2300      	movs	r3, #0
}
 800b074:	4618      	mov	r0, r3
 800b076:	46bd      	mov	sp, r7
 800b078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b07c:	4770      	bx	lr

0800b07e <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 800b07e:	b480      	push	{r7}
 800b080:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800b082:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b086:	689b      	ldr	r3, [r3, #8]
 800b088:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800b08c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800b090:	d101      	bne.n	800b096 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800b092:	2301      	movs	r3, #1
 800b094:	e000      	b.n	800b098 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800b096:	2300      	movs	r3, #0
}
 800b098:	4618      	mov	r0, r3
 800b09a:	46bd      	mov	sp, r7
 800b09c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0a0:	4770      	bx	lr
	...

0800b0a4 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b0a4:	b590      	push	{r4, r7, lr}
 800b0a6:	b08d      	sub	sp, #52	@ 0x34
 800b0a8:	af00      	add	r7, sp, #0
 800b0aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d101      	bne.n	800b0b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800b0b2:	2301      	movs	r3, #1
 800b0b4:	e363      	b.n	800b77e <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	f003 0320 	and.w	r3, r3, #32
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	f000 808d 	beq.w	800b1de <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b0c4:	f7ff fea1 	bl	800ae0a <LL_RCC_GetSysClkSource>
 800b0c8:	62f8      	str	r0, [r7, #44]	@ 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800b0ca:	f7ff ff82 	bl	800afd2 <LL_RCC_PLL_GetMainSource>
 800b0ce:	62b8      	str	r0, [r7, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800b0d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d005      	beq.n	800b0e2 <HAL_RCC_OscConfig+0x3e>
 800b0d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b0d8:	2b0c      	cmp	r3, #12
 800b0da:	d147      	bne.n	800b16c <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 800b0dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b0de:	2b01      	cmp	r3, #1
 800b0e0:	d144      	bne.n	800b16c <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	69db      	ldr	r3, [r3, #28]
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d101      	bne.n	800b0ee <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 800b0ea:	2301      	movs	r3, #1
 800b0ec:	e347      	b.n	800b77e <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800b0f2:	f7ff fe4c 	bl	800ad8e <LL_RCC_MSI_GetRange>
 800b0f6:	4603      	mov	r3, r0
 800b0f8:	429c      	cmp	r4, r3
 800b0fa:	d914      	bls.n	800b126 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b100:	4618      	mov	r0, r3
 800b102:	f000 fd03 	bl	800bb0c <RCC_SetFlashLatencyFromMSIRange>
 800b106:	4603      	mov	r3, r0
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d001      	beq.n	800b110 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 800b10c:	2301      	movs	r3, #1
 800b10e:	e336      	b.n	800b77e <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b114:	4618      	mov	r0, r3
 800b116:	f7ff fe26 	bl	800ad66 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	6a1b      	ldr	r3, [r3, #32]
 800b11e:	4618      	mov	r0, r3
 800b120:	f7ff fe4a 	bl	800adb8 <LL_RCC_MSI_SetCalibTrimming>
 800b124:	e013      	b.n	800b14e <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b12a:	4618      	mov	r0, r3
 800b12c:	f7ff fe1b 	bl	800ad66 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	6a1b      	ldr	r3, [r3, #32]
 800b134:	4618      	mov	r0, r3
 800b136:	f7ff fe3f 	bl	800adb8 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b13e:	4618      	mov	r0, r3
 800b140:	f000 fce4 	bl	800bb0c <RCC_SetFlashLatencyFromMSIRange>
 800b144:	4603      	mov	r3, r0
 800b146:	2b00      	cmp	r3, #0
 800b148:	d001      	beq.n	800b14e <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 800b14a:	2301      	movs	r3, #1
 800b14c:	e317      	b.n	800b77e <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800b14e:	f000 fcc9 	bl	800bae4 <HAL_RCC_GetHCLKFreq>
 800b152:	4603      	mov	r3, r0
 800b154:	4aa4      	ldr	r2, [pc, #656]	@ (800b3e8 <HAL_RCC_OscConfig+0x344>)
 800b156:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800b158:	4ba4      	ldr	r3, [pc, #656]	@ (800b3ec <HAL_RCC_OscConfig+0x348>)
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	4618      	mov	r0, r3
 800b15e:	f7fc fc83 	bl	8007a68 <HAL_InitTick>
 800b162:	4603      	mov	r3, r0
 800b164:	2b00      	cmp	r3, #0
 800b166:	d039      	beq.n	800b1dc <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 800b168:	2301      	movs	r3, #1
 800b16a:	e308      	b.n	800b77e <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	69db      	ldr	r3, [r3, #28]
 800b170:	2b00      	cmp	r3, #0
 800b172:	d01e      	beq.n	800b1b2 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800b174:	f7ff fdc8 	bl	800ad08 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800b178:	f7fc fcc4 	bl	8007b04 <HAL_GetTick>
 800b17c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800b17e:	e008      	b.n	800b192 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800b180:	f7fc fcc0 	bl	8007b04 <HAL_GetTick>
 800b184:	4602      	mov	r2, r0
 800b186:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b188:	1ad3      	subs	r3, r2, r3
 800b18a:	2b02      	cmp	r3, #2
 800b18c:	d901      	bls.n	800b192 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800b18e:	2303      	movs	r3, #3
 800b190:	e2f5      	b.n	800b77e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 800b192:	f7ff fdd7 	bl	800ad44 <LL_RCC_MSI_IsReady>
 800b196:	4603      	mov	r3, r0
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d0f1      	beq.n	800b180 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b1a0:	4618      	mov	r0, r3
 800b1a2:	f7ff fde0 	bl	800ad66 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	6a1b      	ldr	r3, [r3, #32]
 800b1aa:	4618      	mov	r0, r3
 800b1ac:	f7ff fe04 	bl	800adb8 <LL_RCC_MSI_SetCalibTrimming>
 800b1b0:	e015      	b.n	800b1de <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800b1b2:	f7ff fdb8 	bl	800ad26 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800b1b6:	f7fc fca5 	bl	8007b04 <HAL_GetTick>
 800b1ba:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800b1bc:	e008      	b.n	800b1d0 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800b1be:	f7fc fca1 	bl	8007b04 <HAL_GetTick>
 800b1c2:	4602      	mov	r2, r0
 800b1c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1c6:	1ad3      	subs	r3, r2, r3
 800b1c8:	2b02      	cmp	r3, #2
 800b1ca:	d901      	bls.n	800b1d0 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800b1cc:	2303      	movs	r3, #3
 800b1ce:	e2d6      	b.n	800b77e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 800b1d0:	f7ff fdb8 	bl	800ad44 <LL_RCC_MSI_IsReady>
 800b1d4:	4603      	mov	r3, r0
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d1f1      	bne.n	800b1be <HAL_RCC_OscConfig+0x11a>
 800b1da:	e000      	b.n	800b1de <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800b1dc:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	f003 0301 	and.w	r3, r3, #1
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	d047      	beq.n	800b27a <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b1ea:	f7ff fe0e 	bl	800ae0a <LL_RCC_GetSysClkSource>
 800b1ee:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800b1f0:	f7ff feef 	bl	800afd2 <LL_RCC_PLL_GetMainSource>
 800b1f4:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800b1f6:	6a3b      	ldr	r3, [r7, #32]
 800b1f8:	2b08      	cmp	r3, #8
 800b1fa:	d005      	beq.n	800b208 <HAL_RCC_OscConfig+0x164>
 800b1fc:	6a3b      	ldr	r3, [r7, #32]
 800b1fe:	2b0c      	cmp	r3, #12
 800b200:	d108      	bne.n	800b214 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 800b202:	69fb      	ldr	r3, [r7, #28]
 800b204:	2b03      	cmp	r3, #3
 800b206:	d105      	bne.n	800b214 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	685b      	ldr	r3, [r3, #4]
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d134      	bne.n	800b27a <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 800b210:	2301      	movs	r3, #1
 800b212:	e2b4      	b.n	800b77e <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	685b      	ldr	r3, [r3, #4]
 800b218:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b21c:	d102      	bne.n	800b224 <HAL_RCC_OscConfig+0x180>
 800b21e:	f7ff fbf5 	bl	800aa0c <LL_RCC_HSE_Enable>
 800b222:	e001      	b.n	800b228 <HAL_RCC_OscConfig+0x184>
 800b224:	f7ff fc01 	bl	800aa2a <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	685b      	ldr	r3, [r3, #4]
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d012      	beq.n	800b256 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b230:	f7fc fc68 	bl	8007b04 <HAL_GetTick>
 800b234:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800b236:	e008      	b.n	800b24a <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b238:	f7fc fc64 	bl	8007b04 <HAL_GetTick>
 800b23c:	4602      	mov	r2, r0
 800b23e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b240:	1ad3      	subs	r3, r2, r3
 800b242:	2b64      	cmp	r3, #100	@ 0x64
 800b244:	d901      	bls.n	800b24a <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800b246:	2303      	movs	r3, #3
 800b248:	e299      	b.n	800b77e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 800b24a:	f7ff fbfd 	bl	800aa48 <LL_RCC_HSE_IsReady>
 800b24e:	4603      	mov	r3, r0
 800b250:	2b00      	cmp	r3, #0
 800b252:	d0f1      	beq.n	800b238 <HAL_RCC_OscConfig+0x194>
 800b254:	e011      	b.n	800b27a <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b256:	f7fc fc55 	bl	8007b04 <HAL_GetTick>
 800b25a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 800b25c:	e008      	b.n	800b270 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b25e:	f7fc fc51 	bl	8007b04 <HAL_GetTick>
 800b262:	4602      	mov	r2, r0
 800b264:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b266:	1ad3      	subs	r3, r2, r3
 800b268:	2b64      	cmp	r3, #100	@ 0x64
 800b26a:	d901      	bls.n	800b270 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800b26c:	2303      	movs	r3, #3
 800b26e:	e286      	b.n	800b77e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 800b270:	f7ff fbea 	bl	800aa48 <LL_RCC_HSE_IsReady>
 800b274:	4603      	mov	r3, r0
 800b276:	2b00      	cmp	r3, #0
 800b278:	d1f1      	bne.n	800b25e <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	f003 0302 	and.w	r3, r3, #2
 800b282:	2b00      	cmp	r3, #0
 800b284:	d04c      	beq.n	800b320 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b286:	f7ff fdc0 	bl	800ae0a <LL_RCC_GetSysClkSource>
 800b28a:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800b28c:	f7ff fea1 	bl	800afd2 <LL_RCC_PLL_GetMainSource>
 800b290:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800b292:	69bb      	ldr	r3, [r7, #24]
 800b294:	2b04      	cmp	r3, #4
 800b296:	d005      	beq.n	800b2a4 <HAL_RCC_OscConfig+0x200>
 800b298:	69bb      	ldr	r3, [r7, #24]
 800b29a:	2b0c      	cmp	r3, #12
 800b29c:	d10e      	bne.n	800b2bc <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800b29e:	697b      	ldr	r3, [r7, #20]
 800b2a0:	2b02      	cmp	r3, #2
 800b2a2:	d10b      	bne.n	800b2bc <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	68db      	ldr	r3, [r3, #12]
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d101      	bne.n	800b2b0 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 800b2ac:	2301      	movs	r3, #1
 800b2ae:	e266      	b.n	800b77e <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	691b      	ldr	r3, [r3, #16]
 800b2b4:	4618      	mov	r0, r3
 800b2b6:	f7ff fc09 	bl	800aacc <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800b2ba:	e031      	b.n	800b320 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	68db      	ldr	r3, [r3, #12]
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d019      	beq.n	800b2f8 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800b2c4:	f7ff fbd2 	bl	800aa6c <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b2c8:	f7fc fc1c 	bl	8007b04 <HAL_GetTick>
 800b2cc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800b2ce:	e008      	b.n	800b2e2 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b2d0:	f7fc fc18 	bl	8007b04 <HAL_GetTick>
 800b2d4:	4602      	mov	r2, r0
 800b2d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2d8:	1ad3      	subs	r3, r2, r3
 800b2da:	2b02      	cmp	r3, #2
 800b2dc:	d901      	bls.n	800b2e2 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800b2de:	2303      	movs	r3, #3
 800b2e0:	e24d      	b.n	800b77e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 800b2e2:	f7ff fbe1 	bl	800aaa8 <LL_RCC_HSI_IsReady>
 800b2e6:	4603      	mov	r3, r0
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	d0f1      	beq.n	800b2d0 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	691b      	ldr	r3, [r3, #16]
 800b2f0:	4618      	mov	r0, r3
 800b2f2:	f7ff fbeb 	bl	800aacc <LL_RCC_HSI_SetCalibTrimming>
 800b2f6:	e013      	b.n	800b320 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b2f8:	f7ff fbc7 	bl	800aa8a <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b2fc:	f7fc fc02 	bl	8007b04 <HAL_GetTick>
 800b300:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800b302:	e008      	b.n	800b316 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b304:	f7fc fbfe 	bl	8007b04 <HAL_GetTick>
 800b308:	4602      	mov	r2, r0
 800b30a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b30c:	1ad3      	subs	r3, r2, r3
 800b30e:	2b02      	cmp	r3, #2
 800b310:	d901      	bls.n	800b316 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 800b312:	2303      	movs	r3, #3
 800b314:	e233      	b.n	800b77e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 800b316:	f7ff fbc7 	bl	800aaa8 <LL_RCC_HSI_IsReady>
 800b31a:	4603      	mov	r3, r0
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d1f1      	bne.n	800b304 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	f003 0308 	and.w	r3, r3, #8
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d106      	bne.n	800b33a <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800b334:	2b00      	cmp	r3, #0
 800b336:	f000 80a3 	beq.w	800b480 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	695b      	ldr	r3, [r3, #20]
 800b33e:	2b00      	cmp	r3, #0
 800b340:	d076      	beq.n	800b430 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	f003 0310 	and.w	r3, r3, #16
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d046      	beq.n	800b3dc <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 800b34e:	f7ff fc7e 	bl	800ac4e <LL_RCC_LSI1_IsReady>
 800b352:	4603      	mov	r3, r0
 800b354:	2b00      	cmp	r3, #0
 800b356:	d113      	bne.n	800b380 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 800b358:	f7ff fc57 	bl	800ac0a <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800b35c:	f7fc fbd2 	bl	8007b04 <HAL_GetTick>
 800b360:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 800b362:	e008      	b.n	800b376 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800b364:	f7fc fbce 	bl	8007b04 <HAL_GetTick>
 800b368:	4602      	mov	r2, r0
 800b36a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b36c:	1ad3      	subs	r3, r2, r3
 800b36e:	2b02      	cmp	r3, #2
 800b370:	d901      	bls.n	800b376 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 800b372:	2303      	movs	r3, #3
 800b374:	e203      	b.n	800b77e <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 800b376:	f7ff fc6a 	bl	800ac4e <LL_RCC_LSI1_IsReady>
 800b37a:	4603      	mov	r3, r0
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	d0f1      	beq.n	800b364 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 800b380:	f7ff fc77 	bl	800ac72 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b384:	f7fc fbbe 	bl	8007b04 <HAL_GetTick>
 800b388:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 800b38a:	e008      	b.n	800b39e <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800b38c:	f7fc fbba 	bl	8007b04 <HAL_GetTick>
 800b390:	4602      	mov	r2, r0
 800b392:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b394:	1ad3      	subs	r3, r2, r3
 800b396:	2b03      	cmp	r3, #3
 800b398:	d901      	bls.n	800b39e <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 800b39a:	2303      	movs	r3, #3
 800b39c:	e1ef      	b.n	800b77e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 800b39e:	f7ff fc8a 	bl	800acb6 <LL_RCC_LSI2_IsReady>
 800b3a2:	4603      	mov	r3, r0
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	d0f1      	beq.n	800b38c <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	699b      	ldr	r3, [r3, #24]
 800b3ac:	4618      	mov	r0, r3
 800b3ae:	f7ff fc94 	bl	800acda <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 800b3b2:	f7ff fc3b 	bl	800ac2c <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b3b6:	f7fc fba5 	bl	8007b04 <HAL_GetTick>
 800b3ba:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 800b3bc:	e008      	b.n	800b3d0 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800b3be:	f7fc fba1 	bl	8007b04 <HAL_GetTick>
 800b3c2:	4602      	mov	r2, r0
 800b3c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3c6:	1ad3      	subs	r3, r2, r3
 800b3c8:	2b02      	cmp	r3, #2
 800b3ca:	d901      	bls.n	800b3d0 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 800b3cc:	2303      	movs	r3, #3
 800b3ce:	e1d6      	b.n	800b77e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 800b3d0:	f7ff fc3d 	bl	800ac4e <LL_RCC_LSI1_IsReady>
 800b3d4:	4603      	mov	r3, r0
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d1f1      	bne.n	800b3be <HAL_RCC_OscConfig+0x31a>
 800b3da:	e051      	b.n	800b480 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 800b3dc:	f7ff fc15 	bl	800ac0a <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b3e0:	f7fc fb90 	bl	8007b04 <HAL_GetTick>
 800b3e4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 800b3e6:	e00c      	b.n	800b402 <HAL_RCC_OscConfig+0x35e>
 800b3e8:	2000004c 	.word	0x2000004c
 800b3ec:	20000050 	.word	0x20000050
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800b3f0:	f7fc fb88 	bl	8007b04 <HAL_GetTick>
 800b3f4:	4602      	mov	r2, r0
 800b3f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3f8:	1ad3      	subs	r3, r2, r3
 800b3fa:	2b02      	cmp	r3, #2
 800b3fc:	d901      	bls.n	800b402 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800b3fe:	2303      	movs	r3, #3
 800b400:	e1bd      	b.n	800b77e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 800b402:	f7ff fc24 	bl	800ac4e <LL_RCC_LSI1_IsReady>
 800b406:	4603      	mov	r3, r0
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d0f1      	beq.n	800b3f0 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 800b40c:	f7ff fc42 	bl	800ac94 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 800b410:	e008      	b.n	800b424 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800b412:	f7fc fb77 	bl	8007b04 <HAL_GetTick>
 800b416:	4602      	mov	r2, r0
 800b418:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b41a:	1ad3      	subs	r3, r2, r3
 800b41c:	2b03      	cmp	r3, #3
 800b41e:	d901      	bls.n	800b424 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 800b420:	2303      	movs	r3, #3
 800b422:	e1ac      	b.n	800b77e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 800b424:	f7ff fc47 	bl	800acb6 <LL_RCC_LSI2_IsReady>
 800b428:	4603      	mov	r3, r0
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d1f1      	bne.n	800b412 <HAL_RCC_OscConfig+0x36e>
 800b42e:	e027      	b.n	800b480 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 800b430:	f7ff fc30 	bl	800ac94 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b434:	f7fc fb66 	bl	8007b04 <HAL_GetTick>
 800b438:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 800b43a:	e008      	b.n	800b44e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800b43c:	f7fc fb62 	bl	8007b04 <HAL_GetTick>
 800b440:	4602      	mov	r2, r0
 800b442:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b444:	1ad3      	subs	r3, r2, r3
 800b446:	2b03      	cmp	r3, #3
 800b448:	d901      	bls.n	800b44e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800b44a:	2303      	movs	r3, #3
 800b44c:	e197      	b.n	800b77e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 800b44e:	f7ff fc32 	bl	800acb6 <LL_RCC_LSI2_IsReady>
 800b452:	4603      	mov	r3, r0
 800b454:	2b00      	cmp	r3, #0
 800b456:	d1f1      	bne.n	800b43c <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 800b458:	f7ff fbe8 	bl	800ac2c <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b45c:	f7fc fb52 	bl	8007b04 <HAL_GetTick>
 800b460:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 800b462:	e008      	b.n	800b476 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800b464:	f7fc fb4e 	bl	8007b04 <HAL_GetTick>
 800b468:	4602      	mov	r2, r0
 800b46a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b46c:	1ad3      	subs	r3, r2, r3
 800b46e:	2b02      	cmp	r3, #2
 800b470:	d901      	bls.n	800b476 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 800b472:	2303      	movs	r3, #3
 800b474:	e183      	b.n	800b77e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 800b476:	f7ff fbea 	bl	800ac4e <LL_RCC_LSI1_IsReady>
 800b47a:	4603      	mov	r3, r0
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d1f1      	bne.n	800b464 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	f003 0304 	and.w	r3, r3, #4
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d05b      	beq.n	800b544 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b48c:	4ba7      	ldr	r3, [pc, #668]	@ (800b72c <HAL_RCC_OscConfig+0x688>)
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b494:	2b00      	cmp	r3, #0
 800b496:	d114      	bne.n	800b4c2 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800b498:	f7ff fa88 	bl	800a9ac <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800b49c:	f7fc fb32 	bl	8007b04 <HAL_GetTick>
 800b4a0:	6278      	str	r0, [r7, #36]	@ 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b4a2:	e008      	b.n	800b4b6 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b4a4:	f7fc fb2e 	bl	8007b04 <HAL_GetTick>
 800b4a8:	4602      	mov	r2, r0
 800b4aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4ac:	1ad3      	subs	r3, r2, r3
 800b4ae:	2b02      	cmp	r3, #2
 800b4b0:	d901      	bls.n	800b4b6 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 800b4b2:	2303      	movs	r3, #3
 800b4b4:	e163      	b.n	800b77e <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b4b6:	4b9d      	ldr	r3, [pc, #628]	@ (800b72c <HAL_RCC_OscConfig+0x688>)
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	d0f0      	beq.n	800b4a4 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	689b      	ldr	r3, [r3, #8]
 800b4c6:	2b01      	cmp	r3, #1
 800b4c8:	d102      	bne.n	800b4d0 <HAL_RCC_OscConfig+0x42c>
 800b4ca:	f7ff fb48 	bl	800ab5e <LL_RCC_LSE_Enable>
 800b4ce:	e00c      	b.n	800b4ea <HAL_RCC_OscConfig+0x446>
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	689b      	ldr	r3, [r3, #8]
 800b4d4:	2b05      	cmp	r3, #5
 800b4d6:	d104      	bne.n	800b4e2 <HAL_RCC_OscConfig+0x43e>
 800b4d8:	f7ff fb63 	bl	800aba2 <LL_RCC_LSE_EnableBypass>
 800b4dc:	f7ff fb3f 	bl	800ab5e <LL_RCC_LSE_Enable>
 800b4e0:	e003      	b.n	800b4ea <HAL_RCC_OscConfig+0x446>
 800b4e2:	f7ff fb4d 	bl	800ab80 <LL_RCC_LSE_Disable>
 800b4e6:	f7ff fb6d 	bl	800abc4 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	689b      	ldr	r3, [r3, #8]
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	d014      	beq.n	800b51c <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b4f2:	f7fc fb07 	bl	8007b04 <HAL_GetTick>
 800b4f6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 800b4f8:	e00a      	b.n	800b510 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b4fa:	f7fc fb03 	bl	8007b04 <HAL_GetTick>
 800b4fe:	4602      	mov	r2, r0
 800b500:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b502:	1ad3      	subs	r3, r2, r3
 800b504:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b508:	4293      	cmp	r3, r2
 800b50a:	d901      	bls.n	800b510 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 800b50c:	2303      	movs	r3, #3
 800b50e:	e136      	b.n	800b77e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 800b510:	f7ff fb69 	bl	800abe6 <LL_RCC_LSE_IsReady>
 800b514:	4603      	mov	r3, r0
 800b516:	2b00      	cmp	r3, #0
 800b518:	d0ef      	beq.n	800b4fa <HAL_RCC_OscConfig+0x456>
 800b51a:	e013      	b.n	800b544 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b51c:	f7fc faf2 	bl	8007b04 <HAL_GetTick>
 800b520:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800b522:	e00a      	b.n	800b53a <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b524:	f7fc faee 	bl	8007b04 <HAL_GetTick>
 800b528:	4602      	mov	r2, r0
 800b52a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b52c:	1ad3      	subs	r3, r2, r3
 800b52e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b532:	4293      	cmp	r3, r2
 800b534:	d901      	bls.n	800b53a <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 800b536:	2303      	movs	r3, #3
 800b538:	e121      	b.n	800b77e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 800b53a:	f7ff fb54 	bl	800abe6 <LL_RCC_LSE_IsReady>
 800b53e:	4603      	mov	r3, r0
 800b540:	2b00      	cmp	r3, #0
 800b542:	d1ef      	bne.n	800b524 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d02c      	beq.n	800b5aa <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b554:	2b00      	cmp	r3, #0
 800b556:	d014      	beq.n	800b582 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800b558:	f7ff facd 	bl	800aaf6 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b55c:	f7fc fad2 	bl	8007b04 <HAL_GetTick>
 800b560:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 800b562:	e008      	b.n	800b576 <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800b564:	f7fc face 	bl	8007b04 <HAL_GetTick>
 800b568:	4602      	mov	r2, r0
 800b56a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b56c:	1ad3      	subs	r3, r2, r3
 800b56e:	2b02      	cmp	r3, #2
 800b570:	d901      	bls.n	800b576 <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 800b572:	2303      	movs	r3, #3
 800b574:	e103      	b.n	800b77e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 800b576:	f7ff fae0 	bl	800ab3a <LL_RCC_HSI48_IsReady>
 800b57a:	4603      	mov	r3, r0
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	d0f1      	beq.n	800b564 <HAL_RCC_OscConfig+0x4c0>
 800b580:	e013      	b.n	800b5aa <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800b582:	f7ff fac9 	bl	800ab18 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b586:	f7fc fabd 	bl	8007b04 <HAL_GetTick>
 800b58a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 800b58c:	e008      	b.n	800b5a0 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800b58e:	f7fc fab9 	bl	8007b04 <HAL_GetTick>
 800b592:	4602      	mov	r2, r0
 800b594:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b596:	1ad3      	subs	r3, r2, r3
 800b598:	2b02      	cmp	r3, #2
 800b59a:	d901      	bls.n	800b5a0 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 800b59c:	2303      	movs	r3, #3
 800b59e:	e0ee      	b.n	800b77e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 800b5a0:	f7ff facb 	bl	800ab3a <LL_RCC_HSI48_IsReady>
 800b5a4:	4603      	mov	r3, r0
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d1f1      	bne.n	800b58e <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	f000 80e4 	beq.w	800b77c <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b5b4:	f7ff fc29 	bl	800ae0a <LL_RCC_GetSysClkSource>
 800b5b8:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 800b5ba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b5be:	68db      	ldr	r3, [r3, #12]
 800b5c0:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b5c6:	2b02      	cmp	r3, #2
 800b5c8:	f040 80b4 	bne.w	800b734 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b5cc:	68fb      	ldr	r3, [r7, #12]
 800b5ce:	f003 0203 	and.w	r2, r3, #3
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b5d6:	429a      	cmp	r2, r3
 800b5d8:	d123      	bne.n	800b622 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800b5da:	68fb      	ldr	r3, [r7, #12]
 800b5dc:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b5e4:	429a      	cmp	r2, r3
 800b5e6:	d11c      	bne.n	800b622 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800b5e8:	68fb      	ldr	r3, [r7, #12]
 800b5ea:	0a1b      	lsrs	r3, r3, #8
 800b5ec:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800b5f4:	429a      	cmp	r2, r3
 800b5f6:	d114      	bne.n	800b622 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800b5f8:	68fb      	ldr	r3, [r7, #12]
 800b5fa:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800b602:	429a      	cmp	r2, r3
 800b604:	d10d      	bne.n	800b622 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800b606:	68fb      	ldr	r3, [r7, #12]
 800b608:	f003 6260 	and.w	r2, r3, #234881024	@ 0xe000000
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800b610:	429a      	cmp	r2, r3
 800b612:	d106      	bne.n	800b622 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800b614:	68fb      	ldr	r3, [r7, #12]
 800b616:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800b61e:	429a      	cmp	r2, r3
 800b620:	d05d      	beq.n	800b6de <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800b622:	693b      	ldr	r3, [r7, #16]
 800b624:	2b0c      	cmp	r3, #12
 800b626:	d058      	beq.n	800b6da <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800b628:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800b632:	2b00      	cmp	r3, #0
 800b634:	d001      	beq.n	800b63a <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 800b636:	2301      	movs	r3, #1
 800b638:	e0a1      	b.n	800b77e <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800b63a:	f7ff fc84 	bl	800af46 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800b63e:	f7fc fa61 	bl	8007b04 <HAL_GetTick>
 800b642:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b644:	e008      	b.n	800b658 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b646:	f7fc fa5d 	bl	8007b04 <HAL_GetTick>
 800b64a:	4602      	mov	r2, r0
 800b64c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b64e:	1ad3      	subs	r3, r2, r3
 800b650:	2b02      	cmp	r3, #2
 800b652:	d901      	bls.n	800b658 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 800b654:	2303      	movs	r3, #3
 800b656:	e092      	b.n	800b77e <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b658:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b662:	2b00      	cmp	r3, #0
 800b664:	d1ef      	bne.n	800b646 <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800b666:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b66a:	68da      	ldr	r2, [r3, #12]
 800b66c:	4b30      	ldr	r3, [pc, #192]	@ (800b730 <HAL_RCC_OscConfig+0x68c>)
 800b66e:	4013      	ands	r3, r2
 800b670:	687a      	ldr	r2, [r7, #4]
 800b672:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 800b674:	687a      	ldr	r2, [r7, #4]
 800b676:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800b678:	4311      	orrs	r1, r2
 800b67a:	687a      	ldr	r2, [r7, #4]
 800b67c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800b67e:	0212      	lsls	r2, r2, #8
 800b680:	4311      	orrs	r1, r2
 800b682:	687a      	ldr	r2, [r7, #4]
 800b684:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800b686:	4311      	orrs	r1, r2
 800b688:	687a      	ldr	r2, [r7, #4]
 800b68a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800b68c:	4311      	orrs	r1, r2
 800b68e:	687a      	ldr	r2, [r7, #4]
 800b690:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800b692:	430a      	orrs	r2, r1
 800b694:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800b698:	4313      	orrs	r3, r2
 800b69a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800b69c:	f7ff fc44 	bl	800af28 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800b6a0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b6a4:	68db      	ldr	r3, [r3, #12]
 800b6a6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b6aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b6ae:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800b6b0:	f7fc fa28 	bl	8007b04 <HAL_GetTick>
 800b6b4:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b6b6:	e008      	b.n	800b6ca <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b6b8:	f7fc fa24 	bl	8007b04 <HAL_GetTick>
 800b6bc:	4602      	mov	r2, r0
 800b6be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6c0:	1ad3      	subs	r3, r2, r3
 800b6c2:	2b02      	cmp	r3, #2
 800b6c4:	d901      	bls.n	800b6ca <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 800b6c6:	2303      	movs	r3, #3
 800b6c8:	e059      	b.n	800b77e <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b6ca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	d0ef      	beq.n	800b6b8 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800b6d8:	e050      	b.n	800b77c <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800b6da:	2301      	movs	r3, #1
 800b6dc:	e04f      	b.n	800b77e <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b6de:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d147      	bne.n	800b77c <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800b6ec:	f7ff fc1c 	bl	800af28 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800b6f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b6f4:	68db      	ldr	r3, [r3, #12]
 800b6f6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b6fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b6fe:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800b700:	f7fc fa00 	bl	8007b04 <HAL_GetTick>
 800b704:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b706:	e008      	b.n	800b71a <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b708:	f7fc f9fc 	bl	8007b04 <HAL_GetTick>
 800b70c:	4602      	mov	r2, r0
 800b70e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b710:	1ad3      	subs	r3, r2, r3
 800b712:	2b02      	cmp	r3, #2
 800b714:	d901      	bls.n	800b71a <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 800b716:	2303      	movs	r3, #3
 800b718:	e031      	b.n	800b77e <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b71a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b724:	2b00      	cmp	r3, #0
 800b726:	d0ef      	beq.n	800b708 <HAL_RCC_OscConfig+0x664>
 800b728:	e028      	b.n	800b77c <HAL_RCC_OscConfig+0x6d8>
 800b72a:	bf00      	nop
 800b72c:	58000400 	.word	0x58000400
 800b730:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800b734:	693b      	ldr	r3, [r7, #16]
 800b736:	2b0c      	cmp	r3, #12
 800b738:	d01e      	beq.n	800b778 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b73a:	f7ff fc04 	bl	800af46 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b73e:	f7fc f9e1 	bl	8007b04 <HAL_GetTick>
 800b742:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b744:	e008      	b.n	800b758 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b746:	f7fc f9dd 	bl	8007b04 <HAL_GetTick>
 800b74a:	4602      	mov	r2, r0
 800b74c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b74e:	1ad3      	subs	r3, r2, r3
 800b750:	2b02      	cmp	r3, #2
 800b752:	d901      	bls.n	800b758 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 800b754:	2303      	movs	r3, #3
 800b756:	e012      	b.n	800b77e <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b758:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b762:	2b00      	cmp	r3, #0
 800b764:	d1ef      	bne.n	800b746 <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 800b766:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b76a:	68da      	ldr	r2, [r3, #12]
 800b76c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800b770:	4b05      	ldr	r3, [pc, #20]	@ (800b788 <HAL_RCC_OscConfig+0x6e4>)
 800b772:	4013      	ands	r3, r2
 800b774:	60cb      	str	r3, [r1, #12]
 800b776:	e001      	b.n	800b77c <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800b778:	2301      	movs	r3, #1
 800b77a:	e000      	b.n	800b77e <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 800b77c:	2300      	movs	r3, #0
}
 800b77e:	4618      	mov	r0, r3
 800b780:	3734      	adds	r7, #52	@ 0x34
 800b782:	46bd      	mov	sp, r7
 800b784:	bd90      	pop	{r4, r7, pc}
 800b786:	bf00      	nop
 800b788:	eefefffc 	.word	0xeefefffc

0800b78c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b78c:	b580      	push	{r7, lr}
 800b78e:	b084      	sub	sp, #16
 800b790:	af00      	add	r7, sp, #0
 800b792:	6078      	str	r0, [r7, #4]
 800b794:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d101      	bne.n	800b7a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800b79c:	2301      	movs	r3, #1
 800b79e:	e12d      	b.n	800b9fc <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800b7a0:	4b98      	ldr	r3, [pc, #608]	@ (800ba04 <HAL_RCC_ClockConfig+0x278>)
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	f003 0307 	and.w	r3, r3, #7
 800b7a8:	683a      	ldr	r2, [r7, #0]
 800b7aa:	429a      	cmp	r2, r3
 800b7ac:	d91b      	bls.n	800b7e6 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b7ae:	4b95      	ldr	r3, [pc, #596]	@ (800ba04 <HAL_RCC_ClockConfig+0x278>)
 800b7b0:	681b      	ldr	r3, [r3, #0]
 800b7b2:	f023 0207 	bic.w	r2, r3, #7
 800b7b6:	4993      	ldr	r1, [pc, #588]	@ (800ba04 <HAL_RCC_ClockConfig+0x278>)
 800b7b8:	683b      	ldr	r3, [r7, #0]
 800b7ba:	4313      	orrs	r3, r2
 800b7bc:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b7be:	f7fc f9a1 	bl	8007b04 <HAL_GetTick>
 800b7c2:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b7c4:	e008      	b.n	800b7d8 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800b7c6:	f7fc f99d 	bl	8007b04 <HAL_GetTick>
 800b7ca:	4602      	mov	r2, r0
 800b7cc:	68fb      	ldr	r3, [r7, #12]
 800b7ce:	1ad3      	subs	r3, r2, r3
 800b7d0:	2b02      	cmp	r3, #2
 800b7d2:	d901      	bls.n	800b7d8 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 800b7d4:	2303      	movs	r3, #3
 800b7d6:	e111      	b.n	800b9fc <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b7d8:	4b8a      	ldr	r3, [pc, #552]	@ (800ba04 <HAL_RCC_ClockConfig+0x278>)
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	f003 0307 	and.w	r3, r3, #7
 800b7e0:	683a      	ldr	r2, [r7, #0]
 800b7e2:	429a      	cmp	r2, r3
 800b7e4:	d1ef      	bne.n	800b7c6 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	f003 0302 	and.w	r3, r3, #2
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d016      	beq.n	800b820 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	689b      	ldr	r3, [r3, #8]
 800b7f6:	4618      	mov	r0, r3
 800b7f8:	f7ff fb13 	bl	800ae22 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800b7fc:	f7fc f982 	bl	8007b04 <HAL_GetTick>
 800b800:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800b802:	e008      	b.n	800b816 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800b804:	f7fc f97e 	bl	8007b04 <HAL_GetTick>
 800b808:	4602      	mov	r2, r0
 800b80a:	68fb      	ldr	r3, [r7, #12]
 800b80c:	1ad3      	subs	r3, r2, r3
 800b80e:	2b02      	cmp	r3, #2
 800b810:	d901      	bls.n	800b816 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800b812:	2303      	movs	r3, #3
 800b814:	e0f2      	b.n	800b9fc <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800b816:	f7ff fbe8 	bl	800afea <LL_RCC_IsActiveFlag_HPRE>
 800b81a:	4603      	mov	r3, r0
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d0f1      	beq.n	800b804 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	f003 0320 	and.w	r3, r3, #32
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d016      	beq.n	800b85a <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	695b      	ldr	r3, [r3, #20]
 800b830:	4618      	mov	r0, r3
 800b832:	f7ff fb0a 	bl	800ae4a <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800b836:	f7fc f965 	bl	8007b04 <HAL_GetTick>
 800b83a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800b83c:	e008      	b.n	800b850 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800b83e:	f7fc f961 	bl	8007b04 <HAL_GetTick>
 800b842:	4602      	mov	r2, r0
 800b844:	68fb      	ldr	r3, [r7, #12]
 800b846:	1ad3      	subs	r3, r2, r3
 800b848:	2b02      	cmp	r3, #2
 800b84a:	d901      	bls.n	800b850 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 800b84c:	2303      	movs	r3, #3
 800b84e:	e0d5      	b.n	800b9fc <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800b850:	f7ff fbdd 	bl	800b00e <LL_RCC_IsActiveFlag_C2HPRE>
 800b854:	4603      	mov	r3, r0
 800b856:	2b00      	cmp	r3, #0
 800b858:	d0f1      	beq.n	800b83e <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b862:	2b00      	cmp	r3, #0
 800b864:	d016      	beq.n	800b894 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	699b      	ldr	r3, [r3, #24]
 800b86a:	4618      	mov	r0, r3
 800b86c:	f7ff fb03 	bl	800ae76 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800b870:	f7fc f948 	bl	8007b04 <HAL_GetTick>
 800b874:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800b876:	e008      	b.n	800b88a <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800b878:	f7fc f944 	bl	8007b04 <HAL_GetTick>
 800b87c:	4602      	mov	r2, r0
 800b87e:	68fb      	ldr	r3, [r7, #12]
 800b880:	1ad3      	subs	r3, r2, r3
 800b882:	2b02      	cmp	r3, #2
 800b884:	d901      	bls.n	800b88a <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800b886:	2303      	movs	r3, #3
 800b888:	e0b8      	b.n	800b9fc <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800b88a:	f7ff fbd3 	bl	800b034 <LL_RCC_IsActiveFlag_SHDHPRE>
 800b88e:	4603      	mov	r3, r0
 800b890:	2b00      	cmp	r3, #0
 800b892:	d0f1      	beq.n	800b878 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	681b      	ldr	r3, [r3, #0]
 800b898:	f003 0304 	and.w	r3, r3, #4
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d016      	beq.n	800b8ce <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	68db      	ldr	r3, [r3, #12]
 800b8a4:	4618      	mov	r0, r3
 800b8a6:	f7ff fafd 	bl	800aea4 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800b8aa:	f7fc f92b 	bl	8007b04 <HAL_GetTick>
 800b8ae:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800b8b0:	e008      	b.n	800b8c4 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800b8b2:	f7fc f927 	bl	8007b04 <HAL_GetTick>
 800b8b6:	4602      	mov	r2, r0
 800b8b8:	68fb      	ldr	r3, [r7, #12]
 800b8ba:	1ad3      	subs	r3, r2, r3
 800b8bc:	2b02      	cmp	r3, #2
 800b8be:	d901      	bls.n	800b8c4 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 800b8c0:	2303      	movs	r3, #3
 800b8c2:	e09b      	b.n	800b9fc <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800b8c4:	f7ff fbc9 	bl	800b05a <LL_RCC_IsActiveFlag_PPRE1>
 800b8c8:	4603      	mov	r3, r0
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d0f1      	beq.n	800b8b2 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	f003 0308 	and.w	r3, r3, #8
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	d017      	beq.n	800b90a <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	691b      	ldr	r3, [r3, #16]
 800b8de:	00db      	lsls	r3, r3, #3
 800b8e0:	4618      	mov	r0, r3
 800b8e2:	f7ff faf3 	bl	800aecc <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800b8e6:	f7fc f90d 	bl	8007b04 <HAL_GetTick>
 800b8ea:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800b8ec:	e008      	b.n	800b900 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800b8ee:	f7fc f909 	bl	8007b04 <HAL_GetTick>
 800b8f2:	4602      	mov	r2, r0
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	1ad3      	subs	r3, r2, r3
 800b8f8:	2b02      	cmp	r3, #2
 800b8fa:	d901      	bls.n	800b900 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 800b8fc:	2303      	movs	r3, #3
 800b8fe:	e07d      	b.n	800b9fc <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800b900:	f7ff fbbd 	bl	800b07e <LL_RCC_IsActiveFlag_PPRE2>
 800b904:	4603      	mov	r3, r0
 800b906:	2b00      	cmp	r3, #0
 800b908:	d0f1      	beq.n	800b8ee <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	f003 0301 	and.w	r3, r3, #1
 800b912:	2b00      	cmp	r3, #0
 800b914:	d043      	beq.n	800b99e <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	685b      	ldr	r3, [r3, #4]
 800b91a:	2b02      	cmp	r3, #2
 800b91c:	d106      	bne.n	800b92c <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800b91e:	f7ff f893 	bl	800aa48 <LL_RCC_HSE_IsReady>
 800b922:	4603      	mov	r3, r0
 800b924:	2b00      	cmp	r3, #0
 800b926:	d11e      	bne.n	800b966 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800b928:	2301      	movs	r3, #1
 800b92a:	e067      	b.n	800b9fc <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	685b      	ldr	r3, [r3, #4]
 800b930:	2b03      	cmp	r3, #3
 800b932:	d106      	bne.n	800b942 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 800b934:	f7ff fb16 	bl	800af64 <LL_RCC_PLL_IsReady>
 800b938:	4603      	mov	r3, r0
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d113      	bne.n	800b966 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800b93e:	2301      	movs	r3, #1
 800b940:	e05c      	b.n	800b9fc <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	685b      	ldr	r3, [r3, #4]
 800b946:	2b00      	cmp	r3, #0
 800b948:	d106      	bne.n	800b958 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800b94a:	f7ff f9fb 	bl	800ad44 <LL_RCC_MSI_IsReady>
 800b94e:	4603      	mov	r3, r0
 800b950:	2b00      	cmp	r3, #0
 800b952:	d108      	bne.n	800b966 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800b954:	2301      	movs	r3, #1
 800b956:	e051      	b.n	800b9fc <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 800b958:	f7ff f8a6 	bl	800aaa8 <LL_RCC_HSI_IsReady>
 800b95c:	4603      	mov	r3, r0
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d101      	bne.n	800b966 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800b962:	2301      	movs	r3, #1
 800b964:	e04a      	b.n	800b9fc <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	685b      	ldr	r3, [r3, #4]
 800b96a:	4618      	mov	r0, r3
 800b96c:	f7ff fa39 	bl	800ade2 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b970:	f7fc f8c8 	bl	8007b04 <HAL_GetTick>
 800b974:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b976:	e00a      	b.n	800b98e <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b978:	f7fc f8c4 	bl	8007b04 <HAL_GetTick>
 800b97c:	4602      	mov	r2, r0
 800b97e:	68fb      	ldr	r3, [r7, #12]
 800b980:	1ad3      	subs	r3, r2, r3
 800b982:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b986:	4293      	cmp	r3, r2
 800b988:	d901      	bls.n	800b98e <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 800b98a:	2303      	movs	r3, #3
 800b98c:	e036      	b.n	800b9fc <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b98e:	f7ff fa3c 	bl	800ae0a <LL_RCC_GetSysClkSource>
 800b992:	4602      	mov	r2, r0
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	685b      	ldr	r3, [r3, #4]
 800b998:	009b      	lsls	r3, r3, #2
 800b99a:	429a      	cmp	r2, r3
 800b99c:	d1ec      	bne.n	800b978 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800b99e:	4b19      	ldr	r3, [pc, #100]	@ (800ba04 <HAL_RCC_ClockConfig+0x278>)
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	f003 0307 	and.w	r3, r3, #7
 800b9a6:	683a      	ldr	r2, [r7, #0]
 800b9a8:	429a      	cmp	r2, r3
 800b9aa:	d21b      	bcs.n	800b9e4 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b9ac:	4b15      	ldr	r3, [pc, #84]	@ (800ba04 <HAL_RCC_ClockConfig+0x278>)
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	f023 0207 	bic.w	r2, r3, #7
 800b9b4:	4913      	ldr	r1, [pc, #76]	@ (800ba04 <HAL_RCC_ClockConfig+0x278>)
 800b9b6:	683b      	ldr	r3, [r7, #0]
 800b9b8:	4313      	orrs	r3, r2
 800b9ba:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b9bc:	f7fc f8a2 	bl	8007b04 <HAL_GetTick>
 800b9c0:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b9c2:	e008      	b.n	800b9d6 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800b9c4:	f7fc f89e 	bl	8007b04 <HAL_GetTick>
 800b9c8:	4602      	mov	r2, r0
 800b9ca:	68fb      	ldr	r3, [r7, #12]
 800b9cc:	1ad3      	subs	r3, r2, r3
 800b9ce:	2b02      	cmp	r3, #2
 800b9d0:	d901      	bls.n	800b9d6 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 800b9d2:	2303      	movs	r3, #3
 800b9d4:	e012      	b.n	800b9fc <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b9d6:	4b0b      	ldr	r3, [pc, #44]	@ (800ba04 <HAL_RCC_ClockConfig+0x278>)
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	f003 0307 	and.w	r3, r3, #7
 800b9de:	683a      	ldr	r2, [r7, #0]
 800b9e0:	429a      	cmp	r2, r3
 800b9e2:	d1ef      	bne.n	800b9c4 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800b9e4:	f000 f87e 	bl	800bae4 <HAL_RCC_GetHCLKFreq>
 800b9e8:	4603      	mov	r3, r0
 800b9ea:	4a07      	ldr	r2, [pc, #28]	@ (800ba08 <HAL_RCC_ClockConfig+0x27c>)
 800b9ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 800b9ee:	f7fc f895 	bl	8007b1c <HAL_GetTickPrio>
 800b9f2:	4603      	mov	r3, r0
 800b9f4:	4618      	mov	r0, r3
 800b9f6:	f7fc f837 	bl	8007a68 <HAL_InitTick>
 800b9fa:	4603      	mov	r3, r0
}
 800b9fc:	4618      	mov	r0, r3
 800b9fe:	3710      	adds	r7, #16
 800ba00:	46bd      	mov	sp, r7
 800ba02:	bd80      	pop	{r7, pc}
 800ba04:	58004000 	.word	0x58004000
 800ba08:	2000004c 	.word	0x2000004c

0800ba0c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800ba0c:	b590      	push	{r4, r7, lr}
 800ba0e:	b085      	sub	sp, #20
 800ba10:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800ba12:	f7ff f9fa 	bl	800ae0a <LL_RCC_GetSysClkSource>
 800ba16:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d10a      	bne.n	800ba34 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800ba1e:	f7ff f9b6 	bl	800ad8e <LL_RCC_MSI_GetRange>
 800ba22:	4603      	mov	r3, r0
 800ba24:	091b      	lsrs	r3, r3, #4
 800ba26:	f003 030f 	and.w	r3, r3, #15
 800ba2a:	4a2b      	ldr	r2, [pc, #172]	@ (800bad8 <HAL_RCC_GetSysClockFreq+0xcc>)
 800ba2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ba30:	60fb      	str	r3, [r7, #12]
 800ba32:	e04b      	b.n	800bacc <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	2b04      	cmp	r3, #4
 800ba38:	d102      	bne.n	800ba40 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800ba3a:	4b28      	ldr	r3, [pc, #160]	@ (800badc <HAL_RCC_GetSysClockFreq+0xd0>)
 800ba3c:	60fb      	str	r3, [r7, #12]
 800ba3e:	e045      	b.n	800bacc <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	2b08      	cmp	r3, #8
 800ba44:	d10a      	bne.n	800ba5c <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800ba46:	f7fe ffcf 	bl	800a9e8 <LL_RCC_HSE_IsEnabledDiv2>
 800ba4a:	4603      	mov	r3, r0
 800ba4c:	2b01      	cmp	r3, #1
 800ba4e:	d102      	bne.n	800ba56 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 800ba50:	4b22      	ldr	r3, [pc, #136]	@ (800badc <HAL_RCC_GetSysClockFreq+0xd0>)
 800ba52:	60fb      	str	r3, [r7, #12]
 800ba54:	e03a      	b.n	800bacc <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800ba56:	4b22      	ldr	r3, [pc, #136]	@ (800bae0 <HAL_RCC_GetSysClockFreq+0xd4>)
 800ba58:	60fb      	str	r3, [r7, #12]
 800ba5a:	e037      	b.n	800bacc <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 800ba5c:	f7ff fab9 	bl	800afd2 <LL_RCC_PLL_GetMainSource>
 800ba60:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 800ba62:	683b      	ldr	r3, [r7, #0]
 800ba64:	2b02      	cmp	r3, #2
 800ba66:	d003      	beq.n	800ba70 <HAL_RCC_GetSysClockFreq+0x64>
 800ba68:	683b      	ldr	r3, [r7, #0]
 800ba6a:	2b03      	cmp	r3, #3
 800ba6c:	d003      	beq.n	800ba76 <HAL_RCC_GetSysClockFreq+0x6a>
 800ba6e:	e00d      	b.n	800ba8c <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 800ba70:	4b1a      	ldr	r3, [pc, #104]	@ (800badc <HAL_RCC_GetSysClockFreq+0xd0>)
 800ba72:	60bb      	str	r3, [r7, #8]
        break;
 800ba74:	e015      	b.n	800baa2 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800ba76:	f7fe ffb7 	bl	800a9e8 <LL_RCC_HSE_IsEnabledDiv2>
 800ba7a:	4603      	mov	r3, r0
 800ba7c:	2b01      	cmp	r3, #1
 800ba7e:	d102      	bne.n	800ba86 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 800ba80:	4b16      	ldr	r3, [pc, #88]	@ (800badc <HAL_RCC_GetSysClockFreq+0xd0>)
 800ba82:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800ba84:	e00d      	b.n	800baa2 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 800ba86:	4b16      	ldr	r3, [pc, #88]	@ (800bae0 <HAL_RCC_GetSysClockFreq+0xd4>)
 800ba88:	60bb      	str	r3, [r7, #8]
        break;
 800ba8a:	e00a      	b.n	800baa2 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800ba8c:	f7ff f97f 	bl	800ad8e <LL_RCC_MSI_GetRange>
 800ba90:	4603      	mov	r3, r0
 800ba92:	091b      	lsrs	r3, r3, #4
 800ba94:	f003 030f 	and.w	r3, r3, #15
 800ba98:	4a0f      	ldr	r2, [pc, #60]	@ (800bad8 <HAL_RCC_GetSysClockFreq+0xcc>)
 800ba9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ba9e:	60bb      	str	r3, [r7, #8]
        break;
 800baa0:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 800baa2:	f7ff fa71 	bl	800af88 <LL_RCC_PLL_GetN>
 800baa6:	4602      	mov	r2, r0
 800baa8:	68bb      	ldr	r3, [r7, #8]
 800baaa:	fb03 f402 	mul.w	r4, r3, r2
 800baae:	f7ff fa84 	bl	800afba <LL_RCC_PLL_GetDivider>
 800bab2:	4603      	mov	r3, r0
 800bab4:	091b      	lsrs	r3, r3, #4
 800bab6:	3301      	adds	r3, #1
 800bab8:	fbb4 f4f3 	udiv	r4, r4, r3
 800babc:	f7ff fa71 	bl	800afa2 <LL_RCC_PLL_GetR>
 800bac0:	4603      	mov	r3, r0
 800bac2:	0f5b      	lsrs	r3, r3, #29
 800bac4:	3301      	adds	r3, #1
 800bac6:	fbb4 f3f3 	udiv	r3, r4, r3
 800baca:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 800bacc:	68fb      	ldr	r3, [r7, #12]
}
 800bace:	4618      	mov	r0, r3
 800bad0:	3714      	adds	r7, #20
 800bad2:	46bd      	mov	sp, r7
 800bad4:	bd90      	pop	{r4, r7, pc}
 800bad6:	bf00      	nop
 800bad8:	0801261c 	.word	0x0801261c
 800badc:	00f42400 	.word	0x00f42400
 800bae0:	01e84800 	.word	0x01e84800

0800bae4 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800bae4:	b598      	push	{r3, r4, r7, lr}
 800bae6:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800bae8:	f7ff ff90 	bl	800ba0c <HAL_RCC_GetSysClockFreq>
 800baec:	4604      	mov	r4, r0
 800baee:	f7ff fa01 	bl	800aef4 <LL_RCC_GetAHBPrescaler>
 800baf2:	4603      	mov	r3, r0
 800baf4:	091b      	lsrs	r3, r3, #4
 800baf6:	f003 030f 	and.w	r3, r3, #15
 800bafa:	4a03      	ldr	r2, [pc, #12]	@ (800bb08 <HAL_RCC_GetHCLKFreq+0x24>)
 800bafc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bb00:	fbb4 f3f3 	udiv	r3, r4, r3
}
 800bb04:	4618      	mov	r0, r3
 800bb06:	bd98      	pop	{r3, r4, r7, pc}
 800bb08:	080125dc 	.word	0x080125dc

0800bb0c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 800bb0c:	b590      	push	{r4, r7, lr}
 800bb0e:	b085      	sub	sp, #20
 800bb10:	af00      	add	r7, sp, #0
 800bb12:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	2bb0      	cmp	r3, #176	@ 0xb0
 800bb18:	d903      	bls.n	800bb22 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 800bb1a:	4b15      	ldr	r3, [pc, #84]	@ (800bb70 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800bb1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bb1e:	60fb      	str	r3, [r7, #12]
 800bb20:	e007      	b.n	800bb32 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	091b      	lsrs	r3, r3, #4
 800bb26:	f003 030f 	and.w	r3, r3, #15
 800bb2a:	4a11      	ldr	r2, [pc, #68]	@ (800bb70 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800bb2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bb30:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 800bb32:	f7ff f9eb 	bl	800af0c <LL_RCC_GetAHB4Prescaler>
 800bb36:	4603      	mov	r3, r0
 800bb38:	091b      	lsrs	r3, r3, #4
 800bb3a:	f003 030f 	and.w	r3, r3, #15
 800bb3e:	4a0d      	ldr	r2, [pc, #52]	@ (800bb74 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 800bb40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bb44:	68fa      	ldr	r2, [r7, #12]
 800bb46:	fbb2 f3f3 	udiv	r3, r2, r3
 800bb4a:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800bb4c:	68bb      	ldr	r3, [r7, #8]
 800bb4e:	4a0a      	ldr	r2, [pc, #40]	@ (800bb78 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 800bb50:	fba2 2303 	umull	r2, r3, r2, r3
 800bb54:	0c9c      	lsrs	r4, r3, #18
 800bb56:	f7fe ff39 	bl	800a9cc <HAL_PWREx_GetVoltageRange>
 800bb5a:	4603      	mov	r3, r0
 800bb5c:	4619      	mov	r1, r3
 800bb5e:	4620      	mov	r0, r4
 800bb60:	f000 f80c 	bl	800bb7c <RCC_SetFlashLatency>
 800bb64:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 800bb66:	4618      	mov	r0, r3
 800bb68:	3714      	adds	r7, #20
 800bb6a:	46bd      	mov	sp, r7
 800bb6c:	bd90      	pop	{r4, r7, pc}
 800bb6e:	bf00      	nop
 800bb70:	0801261c 	.word	0x0801261c
 800bb74:	080125dc 	.word	0x080125dc
 800bb78:	431bde83 	.word	0x431bde83

0800bb7c <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 800bb7c:	b590      	push	{r4, r7, lr}
 800bb7e:	b093      	sub	sp, #76	@ 0x4c
 800bb80:	af00      	add	r7, sp, #0
 800bb82:	6078      	str	r0, [r7, #4]
 800bb84:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 800bb86:	4b37      	ldr	r3, [pc, #220]	@ (800bc64 <RCC_SetFlashLatency+0xe8>)
 800bb88:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 800bb8c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800bb8e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 800bb92:	4a35      	ldr	r2, [pc, #212]	@ (800bc68 <RCC_SetFlashLatency+0xec>)
 800bb94:	f107 031c 	add.w	r3, r7, #28
 800bb98:	ca07      	ldmia	r2, {r0, r1, r2}
 800bb9a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 800bb9e:	4b33      	ldr	r3, [pc, #204]	@ (800bc6c <RCC_SetFlashLatency+0xf0>)
 800bba0:	f107 040c 	add.w	r4, r7, #12
 800bba4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800bba6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800bbaa:	2300      	movs	r3, #0
 800bbac:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800bbae:	683b      	ldr	r3, [r7, #0]
 800bbb0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bbb4:	d11a      	bne.n	800bbec <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800bbb6:	2300      	movs	r3, #0
 800bbb8:	643b      	str	r3, [r7, #64]	@ 0x40
 800bbba:	e013      	b.n	800bbe4 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 800bbbc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bbbe:	009b      	lsls	r3, r3, #2
 800bbc0:	3348      	adds	r3, #72	@ 0x48
 800bbc2:	443b      	add	r3, r7
 800bbc4:	f853 3c20 	ldr.w	r3, [r3, #-32]
 800bbc8:	687a      	ldr	r2, [r7, #4]
 800bbca:	429a      	cmp	r2, r3
 800bbcc:	d807      	bhi.n	800bbde <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800bbce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bbd0:	009b      	lsls	r3, r3, #2
 800bbd2:	3348      	adds	r3, #72	@ 0x48
 800bbd4:	443b      	add	r3, r7
 800bbd6:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800bbda:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 800bbdc:	e020      	b.n	800bc20 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800bbde:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bbe0:	3301      	adds	r3, #1
 800bbe2:	643b      	str	r3, [r7, #64]	@ 0x40
 800bbe4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bbe6:	2b03      	cmp	r3, #3
 800bbe8:	d9e8      	bls.n	800bbbc <RCC_SetFlashLatency+0x40>
 800bbea:	e019      	b.n	800bc20 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800bbec:	2300      	movs	r3, #0
 800bbee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bbf0:	e013      	b.n	800bc1a <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800bbf2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bbf4:	009b      	lsls	r3, r3, #2
 800bbf6:	3348      	adds	r3, #72	@ 0x48
 800bbf8:	443b      	add	r3, r7
 800bbfa:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800bbfe:	687a      	ldr	r2, [r7, #4]
 800bc00:	429a      	cmp	r2, r3
 800bc02:	d807      	bhi.n	800bc14 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800bc04:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bc06:	009b      	lsls	r3, r3, #2
 800bc08:	3348      	adds	r3, #72	@ 0x48
 800bc0a:	443b      	add	r3, r7
 800bc0c:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800bc10:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 800bc12:	e005      	b.n	800bc20 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800bc14:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bc16:	3301      	adds	r3, #1
 800bc18:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bc1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bc1c:	2b02      	cmp	r3, #2
 800bc1e:	d9e8      	bls.n	800bbf2 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 800bc20:	4b13      	ldr	r3, [pc, #76]	@ (800bc70 <RCC_SetFlashLatency+0xf4>)
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	f023 0207 	bic.w	r2, r3, #7
 800bc28:	4911      	ldr	r1, [pc, #68]	@ (800bc70 <RCC_SetFlashLatency+0xf4>)
 800bc2a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bc2c:	4313      	orrs	r3, r2
 800bc2e:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800bc30:	f7fb ff68 	bl	8007b04 <HAL_GetTick>
 800bc34:	63b8      	str	r0, [r7, #56]	@ 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800bc36:	e008      	b.n	800bc4a <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800bc38:	f7fb ff64 	bl	8007b04 <HAL_GetTick>
 800bc3c:	4602      	mov	r2, r0
 800bc3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc40:	1ad3      	subs	r3, r2, r3
 800bc42:	2b02      	cmp	r3, #2
 800bc44:	d901      	bls.n	800bc4a <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 800bc46:	2303      	movs	r3, #3
 800bc48:	e007      	b.n	800bc5a <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800bc4a:	4b09      	ldr	r3, [pc, #36]	@ (800bc70 <RCC_SetFlashLatency+0xf4>)
 800bc4c:	681b      	ldr	r3, [r3, #0]
 800bc4e:	f003 0307 	and.w	r3, r3, #7
 800bc52:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800bc54:	429a      	cmp	r2, r3
 800bc56:	d1ef      	bne.n	800bc38 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 800bc58:	2300      	movs	r3, #0
}
 800bc5a:	4618      	mov	r0, r3
 800bc5c:	374c      	adds	r7, #76	@ 0x4c
 800bc5e:	46bd      	mov	sp, r7
 800bc60:	bd90      	pop	{r4, r7, pc}
 800bc62:	bf00      	nop
 800bc64:	08012438 	.word	0x08012438
 800bc68:	08012448 	.word	0x08012448
 800bc6c:	08012454 	.word	0x08012454
 800bc70:	58004000 	.word	0x58004000

0800bc74 <LL_RCC_LSE_IsEnabled>:
{
 800bc74:	b480      	push	{r7}
 800bc76:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 800bc78:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bc7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bc80:	f003 0301 	and.w	r3, r3, #1
 800bc84:	2b01      	cmp	r3, #1
 800bc86:	d101      	bne.n	800bc8c <LL_RCC_LSE_IsEnabled+0x18>
 800bc88:	2301      	movs	r3, #1
 800bc8a:	e000      	b.n	800bc8e <LL_RCC_LSE_IsEnabled+0x1a>
 800bc8c:	2300      	movs	r3, #0
}
 800bc8e:	4618      	mov	r0, r3
 800bc90:	46bd      	mov	sp, r7
 800bc92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc96:	4770      	bx	lr

0800bc98 <LL_RCC_LSE_IsReady>:
{
 800bc98:	b480      	push	{r7}
 800bc9a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800bc9c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bca0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bca4:	f003 0302 	and.w	r3, r3, #2
 800bca8:	2b02      	cmp	r3, #2
 800bcaa:	d101      	bne.n	800bcb0 <LL_RCC_LSE_IsReady+0x18>
 800bcac:	2301      	movs	r3, #1
 800bcae:	e000      	b.n	800bcb2 <LL_RCC_LSE_IsReady+0x1a>
 800bcb0:	2300      	movs	r3, #0
}
 800bcb2:	4618      	mov	r0, r3
 800bcb4:	46bd      	mov	sp, r7
 800bcb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcba:	4770      	bx	lr

0800bcbc <LL_RCC_SetRFWKPClockSource>:
{
 800bcbc:	b480      	push	{r7}
 800bcbe:	b083      	sub	sp, #12
 800bcc0:	af00      	add	r7, sp, #0
 800bcc2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 800bcc4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bcc8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800bccc:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800bcd0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	4313      	orrs	r3, r2
 800bcd8:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 800bcdc:	bf00      	nop
 800bcde:	370c      	adds	r7, #12
 800bce0:	46bd      	mov	sp, r7
 800bce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bce6:	4770      	bx	lr

0800bce8 <LL_RCC_SetSMPSClockSource>:
{
 800bce8:	b480      	push	{r7}
 800bcea:	b083      	sub	sp, #12
 800bcec:	af00      	add	r7, sp, #0
 800bcee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 800bcf0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bcf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bcf6:	f023 0203 	bic.w	r2, r3, #3
 800bcfa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	4313      	orrs	r3, r2
 800bd02:	624b      	str	r3, [r1, #36]	@ 0x24
}
 800bd04:	bf00      	nop
 800bd06:	370c      	adds	r7, #12
 800bd08:	46bd      	mov	sp, r7
 800bd0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd0e:	4770      	bx	lr

0800bd10 <LL_RCC_SetSMPSPrescaler>:
{
 800bd10:	b480      	push	{r7}
 800bd12:	b083      	sub	sp, #12
 800bd14:	af00      	add	r7, sp, #0
 800bd16:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 800bd18:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bd1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bd1e:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800bd22:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	4313      	orrs	r3, r2
 800bd2a:	624b      	str	r3, [r1, #36]	@ 0x24
}
 800bd2c:	bf00      	nop
 800bd2e:	370c      	adds	r7, #12
 800bd30:	46bd      	mov	sp, r7
 800bd32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd36:	4770      	bx	lr

0800bd38 <LL_RCC_SetUSARTClockSource>:
{
 800bd38:	b480      	push	{r7}
 800bd3a:	b083      	sub	sp, #12
 800bd3c:	af00      	add	r7, sp, #0
 800bd3e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 800bd40:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bd44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bd48:	f023 0203 	bic.w	r2, r3, #3
 800bd4c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	4313      	orrs	r3, r2
 800bd54:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800bd58:	bf00      	nop
 800bd5a:	370c      	adds	r7, #12
 800bd5c:	46bd      	mov	sp, r7
 800bd5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd62:	4770      	bx	lr

0800bd64 <LL_RCC_SetLPUARTClockSource>:
{
 800bd64:	b480      	push	{r7}
 800bd66:	b083      	sub	sp, #12
 800bd68:	af00      	add	r7, sp, #0
 800bd6a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 800bd6c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bd70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bd74:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800bd78:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	4313      	orrs	r3, r2
 800bd80:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800bd84:	bf00      	nop
 800bd86:	370c      	adds	r7, #12
 800bd88:	46bd      	mov	sp, r7
 800bd8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd8e:	4770      	bx	lr

0800bd90 <LL_RCC_SetI2CClockSource>:
{
 800bd90:	b480      	push	{r7}
 800bd92:	b083      	sub	sp, #12
 800bd94:	af00      	add	r7, sp, #0
 800bd96:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800bd98:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bd9c:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	091b      	lsrs	r3, r3, #4
 800bda4:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 800bda8:	43db      	mvns	r3, r3
 800bdaa:	401a      	ands	r2, r3
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	011b      	lsls	r3, r3, #4
 800bdb0:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 800bdb4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800bdb8:	4313      	orrs	r3, r2
 800bdba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800bdbe:	bf00      	nop
 800bdc0:	370c      	adds	r7, #12
 800bdc2:	46bd      	mov	sp, r7
 800bdc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdc8:	4770      	bx	lr

0800bdca <LL_RCC_SetLPTIMClockSource>:
{
 800bdca:	b480      	push	{r7}
 800bdcc:	b083      	sub	sp, #12
 800bdce:	af00      	add	r7, sp, #0
 800bdd0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800bdd2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bdd6:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	0c1b      	lsrs	r3, r3, #16
 800bdde:	041b      	lsls	r3, r3, #16
 800bde0:	43db      	mvns	r3, r3
 800bde2:	401a      	ands	r2, r3
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	041b      	lsls	r3, r3, #16
 800bde8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800bdec:	4313      	orrs	r3, r2
 800bdee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800bdf2:	bf00      	nop
 800bdf4:	370c      	adds	r7, #12
 800bdf6:	46bd      	mov	sp, r7
 800bdf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdfc:	4770      	bx	lr

0800bdfe <LL_RCC_SetSAIClockSource>:
{
 800bdfe:	b480      	push	{r7}
 800be00:	b083      	sub	sp, #12
 800be02:	af00      	add	r7, sp, #0
 800be04:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 800be06:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800be0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800be0e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800be12:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	4313      	orrs	r3, r2
 800be1a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800be1e:	bf00      	nop
 800be20:	370c      	adds	r7, #12
 800be22:	46bd      	mov	sp, r7
 800be24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be28:	4770      	bx	lr

0800be2a <LL_RCC_SetRNGClockSource>:
{
 800be2a:	b480      	push	{r7}
 800be2c:	b083      	sub	sp, #12
 800be2e:	af00      	add	r7, sp, #0
 800be30:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800be32:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800be36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800be3a:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800be3e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	4313      	orrs	r3, r2
 800be46:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800be4a:	bf00      	nop
 800be4c:	370c      	adds	r7, #12
 800be4e:	46bd      	mov	sp, r7
 800be50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be54:	4770      	bx	lr

0800be56 <LL_RCC_SetCLK48ClockSource>:
{
 800be56:	b480      	push	{r7}
 800be58:	b083      	sub	sp, #12
 800be5a:	af00      	add	r7, sp, #0
 800be5c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 800be5e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800be62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800be66:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800be6a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	4313      	orrs	r3, r2
 800be72:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800be76:	bf00      	nop
 800be78:	370c      	adds	r7, #12
 800be7a:	46bd      	mov	sp, r7
 800be7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be80:	4770      	bx	lr

0800be82 <LL_RCC_SetUSBClockSource>:
{
 800be82:	b580      	push	{r7, lr}
 800be84:	b082      	sub	sp, #8
 800be86:	af00      	add	r7, sp, #0
 800be88:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 800be8a:	6878      	ldr	r0, [r7, #4]
 800be8c:	f7ff ffe3 	bl	800be56 <LL_RCC_SetCLK48ClockSource>
}
 800be90:	bf00      	nop
 800be92:	3708      	adds	r7, #8
 800be94:	46bd      	mov	sp, r7
 800be96:	bd80      	pop	{r7, pc}

0800be98 <LL_RCC_SetADCClockSource>:
{
 800be98:	b480      	push	{r7}
 800be9a:	b083      	sub	sp, #12
 800be9c:	af00      	add	r7, sp, #0
 800be9e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800bea0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bea4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bea8:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800beac:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	4313      	orrs	r3, r2
 800beb4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800beb8:	bf00      	nop
 800beba:	370c      	adds	r7, #12
 800bebc:	46bd      	mov	sp, r7
 800bebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bec2:	4770      	bx	lr

0800bec4 <LL_RCC_SetRTCClockSource>:
{
 800bec4:	b480      	push	{r7}
 800bec6:	b083      	sub	sp, #12
 800bec8:	af00      	add	r7, sp, #0
 800beca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800becc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bed0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bed4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800bed8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	4313      	orrs	r3, r2
 800bee0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 800bee4:	bf00      	nop
 800bee6:	370c      	adds	r7, #12
 800bee8:	46bd      	mov	sp, r7
 800beea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beee:	4770      	bx	lr

0800bef0 <LL_RCC_GetRTCClockSource>:
{
 800bef0:	b480      	push	{r7}
 800bef2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800bef4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bef8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800befc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 800bf00:	4618      	mov	r0, r3
 800bf02:	46bd      	mov	sp, r7
 800bf04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf08:	4770      	bx	lr

0800bf0a <LL_RCC_ForceBackupDomainReset>:
{
 800bf0a:	b480      	push	{r7}
 800bf0c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800bf0e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bf12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bf16:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800bf1a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800bf1e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800bf22:	bf00      	nop
 800bf24:	46bd      	mov	sp, r7
 800bf26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf2a:	4770      	bx	lr

0800bf2c <LL_RCC_ReleaseBackupDomainReset>:
{
 800bf2c:	b480      	push	{r7}
 800bf2e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800bf30:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bf34:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bf38:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800bf3c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800bf40:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800bf44:	bf00      	nop
 800bf46:	46bd      	mov	sp, r7
 800bf48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf4c:	4770      	bx	lr

0800bf4e <LL_RCC_PLLSAI1_Enable>:
{
 800bf4e:	b480      	push	{r7}
 800bf50:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800bf52:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800bf5c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800bf60:	6013      	str	r3, [r2, #0]
}
 800bf62:	bf00      	nop
 800bf64:	46bd      	mov	sp, r7
 800bf66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf6a:	4770      	bx	lr

0800bf6c <LL_RCC_PLLSAI1_Disable>:
{
 800bf6c:	b480      	push	{r7}
 800bf6e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800bf70:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bf74:	681b      	ldr	r3, [r3, #0]
 800bf76:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800bf7a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800bf7e:	6013      	str	r3, [r2, #0]
}
 800bf80:	bf00      	nop
 800bf82:	46bd      	mov	sp, r7
 800bf84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf88:	4770      	bx	lr

0800bf8a <LL_RCC_PLLSAI1_IsReady>:
{
 800bf8a:	b480      	push	{r7}
 800bf8c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 800bf8e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bf92:	681b      	ldr	r3, [r3, #0]
 800bf94:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800bf98:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800bf9c:	d101      	bne.n	800bfa2 <LL_RCC_PLLSAI1_IsReady+0x18>
 800bf9e:	2301      	movs	r3, #1
 800bfa0:	e000      	b.n	800bfa4 <LL_RCC_PLLSAI1_IsReady+0x1a>
 800bfa2:	2300      	movs	r3, #0
}
 800bfa4:	4618      	mov	r0, r3
 800bfa6:	46bd      	mov	sp, r7
 800bfa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfac:	4770      	bx	lr

0800bfae <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800bfae:	b580      	push	{r7, lr}
 800bfb0:	b088      	sub	sp, #32
 800bfb2:	af00      	add	r7, sp, #0
 800bfb4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 800bfb6:	2300      	movs	r3, #0
 800bfb8:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 800bfba:	2300      	movs	r3, #0
 800bfbc:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	681b      	ldr	r3, [r3, #0]
 800bfc2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bfc6:	2b00      	cmp	r3, #0
 800bfc8:	d034      	beq.n	800c034 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bfce:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800bfd2:	d021      	beq.n	800c018 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 800bfd4:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800bfd8:	d81b      	bhi.n	800c012 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800bfda:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800bfde:	d01d      	beq.n	800c01c <HAL_RCCEx_PeriphCLKConfig+0x6e>
 800bfe0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800bfe4:	d815      	bhi.n	800c012 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800bfe6:	2b00      	cmp	r3, #0
 800bfe8:	d00b      	beq.n	800c002 <HAL_RCCEx_PeriphCLKConfig+0x54>
 800bfea:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800bfee:	d110      	bne.n	800c012 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 800bff0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bff4:	68db      	ldr	r3, [r3, #12]
 800bff6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800bffa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800bffe:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 800c000:	e00d      	b.n	800c01e <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	3304      	adds	r3, #4
 800c006:	4618      	mov	r0, r3
 800c008:	f000 f947 	bl	800c29a <RCCEx_PLLSAI1_ConfigNP>
 800c00c:	4603      	mov	r3, r0
 800c00e:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 800c010:	e005      	b.n	800c01e <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 800c012:	2301      	movs	r3, #1
 800c014:	77fb      	strb	r3, [r7, #31]
        break;
 800c016:	e002      	b.n	800c01e <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800c018:	bf00      	nop
 800c01a:	e000      	b.n	800c01e <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800c01c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c01e:	7ffb      	ldrb	r3, [r7, #31]
 800c020:	2b00      	cmp	r3, #0
 800c022:	d105      	bne.n	800c030 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c028:	4618      	mov	r0, r3
 800c02a:	f7ff fee8 	bl	800bdfe <LL_RCC_SetSAIClockSource>
 800c02e:	e001      	b.n	800c034 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c030:	7ffb      	ldrb	r3, [r7, #31]
 800c032:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	681b      	ldr	r3, [r3, #0]
 800c038:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c03c:	2b00      	cmp	r3, #0
 800c03e:	d046      	beq.n	800c0ce <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 800c040:	f7ff ff56 	bl	800bef0 <LL_RCC_GetRTCClockSource>
 800c044:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c04a:	69ba      	ldr	r2, [r7, #24]
 800c04c:	429a      	cmp	r2, r3
 800c04e:	d03c      	beq.n	800c0ca <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800c050:	f7fe fcac 	bl	800a9ac <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 800c054:	69bb      	ldr	r3, [r7, #24]
 800c056:	2b00      	cmp	r3, #0
 800c058:	d105      	bne.n	800c066 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c05e:	4618      	mov	r0, r3
 800c060:	f7ff ff30 	bl	800bec4 <LL_RCC_SetRTCClockSource>
 800c064:	e02e      	b.n	800c0c4 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 800c066:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c06a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c06e:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 800c070:	f7ff ff4b 	bl	800bf0a <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 800c074:	f7ff ff5a 	bl	800bf2c <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 800c078:	697b      	ldr	r3, [r7, #20]
 800c07a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c082:	4313      	orrs	r3, r2
 800c084:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 800c086:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800c08a:	697b      	ldr	r3, [r7, #20]
 800c08c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 800c090:	f7ff fdf0 	bl	800bc74 <LL_RCC_LSE_IsEnabled>
 800c094:	4603      	mov	r3, r0
 800c096:	2b01      	cmp	r3, #1
 800c098:	d114      	bne.n	800c0c4 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800c09a:	f7fb fd33 	bl	8007b04 <HAL_GetTick>
 800c09e:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 800c0a0:	e00b      	b.n	800c0ba <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c0a2:	f7fb fd2f 	bl	8007b04 <HAL_GetTick>
 800c0a6:	4602      	mov	r2, r0
 800c0a8:	693b      	ldr	r3, [r7, #16]
 800c0aa:	1ad3      	subs	r3, r2, r3
 800c0ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c0b0:	4293      	cmp	r3, r2
 800c0b2:	d902      	bls.n	800c0ba <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 800c0b4:	2303      	movs	r3, #3
 800c0b6:	77fb      	strb	r3, [r7, #31]
              break;
 800c0b8:	e004      	b.n	800c0c4 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 800c0ba:	f7ff fded 	bl	800bc98 <LL_RCC_LSE_IsReady>
 800c0be:	4603      	mov	r3, r0
 800c0c0:	2b01      	cmp	r3, #1
 800c0c2:	d1ee      	bne.n	800c0a2 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 800c0c4:	7ffb      	ldrb	r3, [r7, #31]
 800c0c6:	77bb      	strb	r3, [r7, #30]
 800c0c8:	e001      	b.n	800c0ce <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c0ca:	7ffb      	ldrb	r3, [r7, #31]
 800c0cc:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	681b      	ldr	r3, [r3, #0]
 800c0d2:	f003 0301 	and.w	r3, r3, #1
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d004      	beq.n	800c0e4 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	699b      	ldr	r3, [r3, #24]
 800c0de:	4618      	mov	r0, r3
 800c0e0:	f7ff fe2a 	bl	800bd38 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	681b      	ldr	r3, [r3, #0]
 800c0e8:	f003 0302 	and.w	r3, r3, #2
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	d004      	beq.n	800c0fa <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	69db      	ldr	r3, [r3, #28]
 800c0f4:	4618      	mov	r0, r3
 800c0f6:	f7ff fe35 	bl	800bd64 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	681b      	ldr	r3, [r3, #0]
 800c0fe:	f003 0310 	and.w	r3, r3, #16
 800c102:	2b00      	cmp	r3, #0
 800c104:	d004      	beq.n	800c110 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c10a:	4618      	mov	r0, r3
 800c10c:	f7ff fe5d 	bl	800bdca <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	681b      	ldr	r3, [r3, #0]
 800c114:	f003 0320 	and.w	r3, r3, #32
 800c118:	2b00      	cmp	r3, #0
 800c11a:	d004      	beq.n	800c126 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c120:	4618      	mov	r0, r3
 800c122:	f7ff fe52 	bl	800bdca <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	681b      	ldr	r3, [r3, #0]
 800c12a:	f003 0304 	and.w	r3, r3, #4
 800c12e:	2b00      	cmp	r3, #0
 800c130:	d004      	beq.n	800c13c <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	6a1b      	ldr	r3, [r3, #32]
 800c136:	4618      	mov	r0, r3
 800c138:	f7ff fe2a 	bl	800bd90 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	681b      	ldr	r3, [r3, #0]
 800c140:	f003 0308 	and.w	r3, r3, #8
 800c144:	2b00      	cmp	r3, #0
 800c146:	d004      	beq.n	800c152 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c14c:	4618      	mov	r0, r3
 800c14e:	f7ff fe1f 	bl	800bd90 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	681b      	ldr	r3, [r3, #0]
 800c156:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	d022      	beq.n	800c1a4 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c162:	4618      	mov	r0, r3
 800c164:	f7ff fe8d 	bl	800be82 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c16c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c170:	d107      	bne.n	800c182 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 800c172:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c176:	68db      	ldr	r3, [r3, #12]
 800c178:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800c17c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800c180:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c186:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800c18a:	d10b      	bne.n	800c1a4 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	3304      	adds	r3, #4
 800c190:	4618      	mov	r0, r3
 800c192:	f000 f8dd 	bl	800c350 <RCCEx_PLLSAI1_ConfigNQ>
 800c196:	4603      	mov	r3, r0
 800c198:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800c19a:	7ffb      	ldrb	r3, [r7, #31]
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	d001      	beq.n	800c1a4 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 800c1a0:	7ffb      	ldrb	r3, [r7, #31]
 800c1a2:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	681b      	ldr	r3, [r3, #0]
 800c1a8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	d02b      	beq.n	800c208 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c1b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c1b8:	d008      	beq.n	800c1cc <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c1be:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c1c2:	d003      	beq.n	800c1cc <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	d105      	bne.n	800c1d8 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c1d0:	4618      	mov	r0, r3
 800c1d2:	f7ff fe2a 	bl	800be2a <LL_RCC_SetRNGClockSource>
 800c1d6:	e00a      	b.n	800c1ee <HAL_RCCEx_PeriphCLKConfig+0x240>
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c1dc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c1e0:	60fb      	str	r3, [r7, #12]
 800c1e2:	2000      	movs	r0, #0
 800c1e4:	f7ff fe21 	bl	800be2a <LL_RCC_SetRNGClockSource>
 800c1e8:	68f8      	ldr	r0, [r7, #12]
 800c1ea:	f7ff fe34 	bl	800be56 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c1f2:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 800c1f6:	d107      	bne.n	800c208 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800c1f8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c1fc:	68db      	ldr	r3, [r3, #12]
 800c1fe:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800c202:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800c206:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	681b      	ldr	r3, [r3, #0]
 800c20c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c210:	2b00      	cmp	r3, #0
 800c212:	d022      	beq.n	800c25a <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c218:	4618      	mov	r0, r3
 800c21a:	f7ff fe3d 	bl	800be98 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c222:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c226:	d107      	bne.n	800c238 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800c228:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c22c:	68db      	ldr	r3, [r3, #12]
 800c22e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800c232:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c236:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c23c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c240:	d10b      	bne.n	800c25a <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	3304      	adds	r3, #4
 800c246:	4618      	mov	r0, r3
 800c248:	f000 f8dd 	bl	800c406 <RCCEx_PLLSAI1_ConfigNR>
 800c24c:	4603      	mov	r3, r0
 800c24e:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800c250:	7ffb      	ldrb	r3, [r7, #31]
 800c252:	2b00      	cmp	r3, #0
 800c254:	d001      	beq.n	800c25a <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 800c256:	7ffb      	ldrb	r3, [r7, #31]
 800c258:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	681b      	ldr	r3, [r3, #0]
 800c25e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800c262:	2b00      	cmp	r3, #0
 800c264:	d004      	beq.n	800c270 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c26a:	4618      	mov	r0, r3
 800c26c:	f7ff fd26 	bl	800bcbc <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	681b      	ldr	r3, [r3, #0]
 800c274:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800c278:	2b00      	cmp	r3, #0
 800c27a:	d009      	beq.n	800c290 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c280:	4618      	mov	r0, r3
 800c282:	f7ff fd45 	bl	800bd10 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c28a:	4618      	mov	r0, r3
 800c28c:	f7ff fd2c 	bl	800bce8 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 800c290:	7fbb      	ldrb	r3, [r7, #30]
}
 800c292:	4618      	mov	r0, r3
 800c294:	3720      	adds	r7, #32
 800c296:	46bd      	mov	sp, r7
 800c298:	bd80      	pop	{r7, pc}

0800c29a <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800c29a:	b580      	push	{r7, lr}
 800c29c:	b084      	sub	sp, #16
 800c29e:	af00      	add	r7, sp, #0
 800c2a0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c2a2:	2300      	movs	r3, #0
 800c2a4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800c2a6:	f7ff fe61 	bl	800bf6c <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800c2aa:	f7fb fc2b 	bl	8007b04 <HAL_GetTick>
 800c2ae:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800c2b0:	e009      	b.n	800c2c6 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800c2b2:	f7fb fc27 	bl	8007b04 <HAL_GetTick>
 800c2b6:	4602      	mov	r2, r0
 800c2b8:	68bb      	ldr	r3, [r7, #8]
 800c2ba:	1ad3      	subs	r3, r2, r3
 800c2bc:	2b02      	cmp	r3, #2
 800c2be:	d902      	bls.n	800c2c6 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 800c2c0:	2303      	movs	r3, #3
 800c2c2:	73fb      	strb	r3, [r7, #15]
      break;
 800c2c4:	e004      	b.n	800c2d0 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800c2c6:	f7ff fe60 	bl	800bf8a <LL_RCC_PLLSAI1_IsReady>
 800c2ca:	4603      	mov	r3, r0
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	d1f0      	bne.n	800c2b2 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 800c2d0:	7bfb      	ldrb	r3, [r7, #15]
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	d137      	bne.n	800c346 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800c2d6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c2da:	691b      	ldr	r3, [r3, #16]
 800c2dc:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	681b      	ldr	r3, [r3, #0]
 800c2e4:	021b      	lsls	r3, r3, #8
 800c2e6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c2ea:	4313      	orrs	r3, r2
 800c2ec:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 800c2ee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c2f2:	691b      	ldr	r3, [r3, #16]
 800c2f4:	f423 1278 	bic.w	r2, r3, #4063232	@ 0x3e0000
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	685b      	ldr	r3, [r3, #4]
 800c2fc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c300:	4313      	orrs	r3, r2
 800c302:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800c304:	f7ff fe23 	bl	800bf4e <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c308:	f7fb fbfc 	bl	8007b04 <HAL_GetTick>
 800c30c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800c30e:	e009      	b.n	800c324 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800c310:	f7fb fbf8 	bl	8007b04 <HAL_GetTick>
 800c314:	4602      	mov	r2, r0
 800c316:	68bb      	ldr	r3, [r7, #8]
 800c318:	1ad3      	subs	r3, r2, r3
 800c31a:	2b02      	cmp	r3, #2
 800c31c:	d902      	bls.n	800c324 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 800c31e:	2303      	movs	r3, #3
 800c320:	73fb      	strb	r3, [r7, #15]
        break;
 800c322:	e004      	b.n	800c32e <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800c324:	f7ff fe31 	bl	800bf8a <LL_RCC_PLLSAI1_IsReady>
 800c328:	4603      	mov	r3, r0
 800c32a:	2b01      	cmp	r3, #1
 800c32c:	d1f0      	bne.n	800c310 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 800c32e:	7bfb      	ldrb	r3, [r7, #15]
 800c330:	2b00      	cmp	r3, #0
 800c332:	d108      	bne.n	800c346 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800c334:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c338:	691a      	ldr	r2, [r3, #16]
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	691b      	ldr	r3, [r3, #16]
 800c33e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c342:	4313      	orrs	r3, r2
 800c344:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800c346:	7bfb      	ldrb	r3, [r7, #15]
}
 800c348:	4618      	mov	r0, r3
 800c34a:	3710      	adds	r7, #16
 800c34c:	46bd      	mov	sp, r7
 800c34e:	bd80      	pop	{r7, pc}

0800c350 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800c350:	b580      	push	{r7, lr}
 800c352:	b084      	sub	sp, #16
 800c354:	af00      	add	r7, sp, #0
 800c356:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c358:	2300      	movs	r3, #0
 800c35a:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800c35c:	f7ff fe06 	bl	800bf6c <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800c360:	f7fb fbd0 	bl	8007b04 <HAL_GetTick>
 800c364:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800c366:	e009      	b.n	800c37c <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800c368:	f7fb fbcc 	bl	8007b04 <HAL_GetTick>
 800c36c:	4602      	mov	r2, r0
 800c36e:	68bb      	ldr	r3, [r7, #8]
 800c370:	1ad3      	subs	r3, r2, r3
 800c372:	2b02      	cmp	r3, #2
 800c374:	d902      	bls.n	800c37c <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 800c376:	2303      	movs	r3, #3
 800c378:	73fb      	strb	r3, [r7, #15]
      break;
 800c37a:	e004      	b.n	800c386 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800c37c:	f7ff fe05 	bl	800bf8a <LL_RCC_PLLSAI1_IsReady>
 800c380:	4603      	mov	r3, r0
 800c382:	2b00      	cmp	r3, #0
 800c384:	d1f0      	bne.n	800c368 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 800c386:	7bfb      	ldrb	r3, [r7, #15]
 800c388:	2b00      	cmp	r3, #0
 800c38a:	d137      	bne.n	800c3fc <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800c38c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c390:	691b      	ldr	r3, [r3, #16]
 800c392:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	681b      	ldr	r3, [r3, #0]
 800c39a:	021b      	lsls	r3, r3, #8
 800c39c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c3a0:	4313      	orrs	r3, r2
 800c3a2:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 800c3a4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c3a8:	691b      	ldr	r3, [r3, #16]
 800c3aa:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	689b      	ldr	r3, [r3, #8]
 800c3b2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c3b6:	4313      	orrs	r3, r2
 800c3b8:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800c3ba:	f7ff fdc8 	bl	800bf4e <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c3be:	f7fb fba1 	bl	8007b04 <HAL_GetTick>
 800c3c2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800c3c4:	e009      	b.n	800c3da <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800c3c6:	f7fb fb9d 	bl	8007b04 <HAL_GetTick>
 800c3ca:	4602      	mov	r2, r0
 800c3cc:	68bb      	ldr	r3, [r7, #8]
 800c3ce:	1ad3      	subs	r3, r2, r3
 800c3d0:	2b02      	cmp	r3, #2
 800c3d2:	d902      	bls.n	800c3da <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 800c3d4:	2303      	movs	r3, #3
 800c3d6:	73fb      	strb	r3, [r7, #15]
        break;
 800c3d8:	e004      	b.n	800c3e4 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800c3da:	f7ff fdd6 	bl	800bf8a <LL_RCC_PLLSAI1_IsReady>
 800c3de:	4603      	mov	r3, r0
 800c3e0:	2b01      	cmp	r3, #1
 800c3e2:	d1f0      	bne.n	800c3c6 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 800c3e4:	7bfb      	ldrb	r3, [r7, #15]
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	d108      	bne.n	800c3fc <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800c3ea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c3ee:	691a      	ldr	r2, [r3, #16]
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	691b      	ldr	r3, [r3, #16]
 800c3f4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c3f8:	4313      	orrs	r3, r2
 800c3fa:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800c3fc:	7bfb      	ldrb	r3, [r7, #15]
}
 800c3fe:	4618      	mov	r0, r3
 800c400:	3710      	adds	r7, #16
 800c402:	46bd      	mov	sp, r7
 800c404:	bd80      	pop	{r7, pc}

0800c406 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800c406:	b580      	push	{r7, lr}
 800c408:	b084      	sub	sp, #16
 800c40a:	af00      	add	r7, sp, #0
 800c40c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c40e:	2300      	movs	r3, #0
 800c410:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800c412:	f7ff fdab 	bl	800bf6c <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800c416:	f7fb fb75 	bl	8007b04 <HAL_GetTick>
 800c41a:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800c41c:	e009      	b.n	800c432 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800c41e:	f7fb fb71 	bl	8007b04 <HAL_GetTick>
 800c422:	4602      	mov	r2, r0
 800c424:	68bb      	ldr	r3, [r7, #8]
 800c426:	1ad3      	subs	r3, r2, r3
 800c428:	2b02      	cmp	r3, #2
 800c42a:	d902      	bls.n	800c432 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 800c42c:	2303      	movs	r3, #3
 800c42e:	73fb      	strb	r3, [r7, #15]
      break;
 800c430:	e004      	b.n	800c43c <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800c432:	f7ff fdaa 	bl	800bf8a <LL_RCC_PLLSAI1_IsReady>
 800c436:	4603      	mov	r3, r0
 800c438:	2b00      	cmp	r3, #0
 800c43a:	d1f0      	bne.n	800c41e <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 800c43c:	7bfb      	ldrb	r3, [r7, #15]
 800c43e:	2b00      	cmp	r3, #0
 800c440:	d137      	bne.n	800c4b2 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800c442:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c446:	691b      	ldr	r3, [r3, #16]
 800c448:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	681b      	ldr	r3, [r3, #0]
 800c450:	021b      	lsls	r3, r3, #8
 800c452:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c456:	4313      	orrs	r3, r2
 800c458:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 800c45a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c45e:	691b      	ldr	r3, [r3, #16]
 800c460:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	68db      	ldr	r3, [r3, #12]
 800c468:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c46c:	4313      	orrs	r3, r2
 800c46e:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800c470:	f7ff fd6d 	bl	800bf4e <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c474:	f7fb fb46 	bl	8007b04 <HAL_GetTick>
 800c478:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800c47a:	e009      	b.n	800c490 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800c47c:	f7fb fb42 	bl	8007b04 <HAL_GetTick>
 800c480:	4602      	mov	r2, r0
 800c482:	68bb      	ldr	r3, [r7, #8]
 800c484:	1ad3      	subs	r3, r2, r3
 800c486:	2b02      	cmp	r3, #2
 800c488:	d902      	bls.n	800c490 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 800c48a:	2303      	movs	r3, #3
 800c48c:	73fb      	strb	r3, [r7, #15]
        break;
 800c48e:	e004      	b.n	800c49a <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800c490:	f7ff fd7b 	bl	800bf8a <LL_RCC_PLLSAI1_IsReady>
 800c494:	4603      	mov	r3, r0
 800c496:	2b01      	cmp	r3, #1
 800c498:	d1f0      	bne.n	800c47c <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 800c49a:	7bfb      	ldrb	r3, [r7, #15]
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	d108      	bne.n	800c4b2 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800c4a0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c4a4:	691a      	ldr	r2, [r3, #16]
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	691b      	ldr	r3, [r3, #16]
 800c4aa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c4ae:	4313      	orrs	r3, r2
 800c4b0:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800c4b2:	7bfb      	ldrb	r3, [r7, #15]
}
 800c4b4:	4618      	mov	r0, r3
 800c4b6:	3710      	adds	r7, #16
 800c4b8:	46bd      	mov	sp, r7
 800c4ba:	bd80      	pop	{r7, pc}

0800c4bc <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800c4bc:	b580      	push	{r7, lr}
 800c4be:	b084      	sub	sp, #16
 800c4c0:	af00      	add	r7, sp, #0
 800c4c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	2b00      	cmp	r3, #0
 800c4c8:	d101      	bne.n	800c4ce <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 800c4ca:	2301      	movs	r3, #1
 800c4cc:	e09f      	b.n	800c60e <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800c4d4:	b2db      	uxtb	r3, r3
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	d106      	bne.n	800c4e8 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	2200      	movs	r2, #0
 800c4de:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800c4e2:	6878      	ldr	r0, [r7, #4]
 800c4e4:	f7fb f89c 	bl	8007620 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	2202      	movs	r2, #2
 800c4ec:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800c4f0:	4b49      	ldr	r3, [pc, #292]	@ (800c618 <HAL_RTC_Init+0x15c>)
 800c4f2:	68db      	ldr	r3, [r3, #12]
 800c4f4:	f003 0310 	and.w	r3, r3, #16
 800c4f8:	2b10      	cmp	r3, #16
 800c4fa:	d07e      	beq.n	800c5fa <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	22ca      	movs	r2, #202	@ 0xca
 800c502:	625a      	str	r2, [r3, #36]	@ 0x24
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	681b      	ldr	r3, [r3, #0]
 800c508:	2253      	movs	r2, #83	@ 0x53
 800c50a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800c50c:	6878      	ldr	r0, [r7, #4]
 800c50e:	f000 f8ab 	bl	800c668 <RTC_EnterInitMode>
 800c512:	4603      	mov	r3, r0
 800c514:	2b00      	cmp	r3, #0
 800c516:	d00a      	beq.n	800c52e <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	22ff      	movs	r2, #255	@ 0xff
 800c51e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	2204      	movs	r2, #4
 800c524:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

      status = HAL_ERROR;
 800c528:	2301      	movs	r3, #1
 800c52a:	73fb      	strb	r3, [r7, #15]
 800c52c:	e067      	b.n	800c5fe <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	681b      	ldr	r3, [r3, #0]
 800c532:	689b      	ldr	r3, [r3, #8]
 800c534:	687a      	ldr	r2, [r7, #4]
 800c536:	6812      	ldr	r2, [r2, #0]
 800c538:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800c53c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c540:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	681b      	ldr	r3, [r3, #0]
 800c546:	6899      	ldr	r1, [r3, #8]
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	685a      	ldr	r2, [r3, #4]
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	691b      	ldr	r3, [r3, #16]
 800c550:	431a      	orrs	r2, r3
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	699b      	ldr	r3, [r3, #24]
 800c556:	431a      	orrs	r2, r3
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	681b      	ldr	r3, [r3, #0]
 800c55c:	430a      	orrs	r2, r1
 800c55e:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	687a      	ldr	r2, [r7, #4]
 800c566:	68d2      	ldr	r2, [r2, #12]
 800c568:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	681b      	ldr	r3, [r3, #0]
 800c56e:	6919      	ldr	r1, [r3, #16]
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	689b      	ldr	r3, [r3, #8]
 800c574:	041a      	lsls	r2, r3, #16
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	681b      	ldr	r3, [r3, #0]
 800c57a:	430a      	orrs	r2, r1
 800c57c:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	681b      	ldr	r3, [r3, #0]
 800c582:	68da      	ldr	r2, [r3, #12]
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	681b      	ldr	r3, [r3, #0]
 800c588:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800c58c:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	681b      	ldr	r3, [r3, #0]
 800c592:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	681b      	ldr	r3, [r3, #0]
 800c598:	f022 0203 	bic.w	r2, r2, #3
 800c59c:	64da      	str	r2, [r3, #76]	@ 0x4c
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	681b      	ldr	r3, [r3, #0]
 800c5a2:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	69da      	ldr	r2, [r3, #28]
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	695b      	ldr	r3, [r3, #20]
 800c5ac:	431a      	orrs	r2, r3
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	681b      	ldr	r3, [r3, #0]
 800c5b2:	430a      	orrs	r2, r1
 800c5b4:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	681b      	ldr	r3, [r3, #0]
 800c5ba:	689b      	ldr	r3, [r3, #8]
 800c5bc:	f003 0320 	and.w	r3, r3, #32
 800c5c0:	2b00      	cmp	r3, #0
 800c5c2:	d113      	bne.n	800c5ec <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800c5c4:	6878      	ldr	r0, [r7, #4]
 800c5c6:	f000 f829 	bl	800c61c <HAL_RTC_WaitForSynchro>
 800c5ca:	4603      	mov	r3, r0
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	d00d      	beq.n	800c5ec <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	681b      	ldr	r3, [r3, #0]
 800c5d4:	22ff      	movs	r2, #255	@ 0xff
 800c5d6:	625a      	str	r2, [r3, #36]	@ 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	2204      	movs	r2, #4
 800c5dc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	2200      	movs	r2, #0
 800c5e4:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 800c5e8:	2301      	movs	r3, #1
 800c5ea:	e010      	b.n	800c60e <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	681b      	ldr	r3, [r3, #0]
 800c5f0:	22ff      	movs	r2, #255	@ 0xff
 800c5f2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Set RTC state */
      status = HAL_OK;
 800c5f4:	2300      	movs	r3, #0
 800c5f6:	73fb      	strb	r3, [r7, #15]
 800c5f8:	e001      	b.n	800c5fe <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 800c5fa:	2300      	movs	r3, #0
 800c5fc:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800c5fe:	7bfb      	ldrb	r3, [r7, #15]
 800c600:	2b00      	cmp	r3, #0
 800c602:	d103      	bne.n	800c60c <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	2201      	movs	r2, #1
 800c608:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  return status;
 800c60c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c60e:	4618      	mov	r0, r3
 800c610:	3710      	adds	r7, #16
 800c612:	46bd      	mov	sp, r7
 800c614:	bd80      	pop	{r7, pc}
 800c616:	bf00      	nop
 800c618:	40002800 	.word	0x40002800

0800c61c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800c61c:	b580      	push	{r7, lr}
 800c61e:	b084      	sub	sp, #16
 800c620:	af00      	add	r7, sp, #0
 800c622:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	68da      	ldr	r2, [r3, #12]
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	681b      	ldr	r3, [r3, #0]
 800c62e:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800c632:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800c634:	f7fb fa66 	bl	8007b04 <HAL_GetTick>
 800c638:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800c63a:	e009      	b.n	800c650 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800c63c:	f7fb fa62 	bl	8007b04 <HAL_GetTick>
 800c640:	4602      	mov	r2, r0
 800c642:	68fb      	ldr	r3, [r7, #12]
 800c644:	1ad3      	subs	r3, r2, r3
 800c646:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800c64a:	d901      	bls.n	800c650 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 800c64c:	2303      	movs	r3, #3
 800c64e:	e007      	b.n	800c660 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	681b      	ldr	r3, [r3, #0]
 800c654:	68db      	ldr	r3, [r3, #12]
 800c656:	f003 0320 	and.w	r3, r3, #32
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	d0ee      	beq.n	800c63c <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 800c65e:	2300      	movs	r3, #0
}
 800c660:	4618      	mov	r0, r3
 800c662:	3710      	adds	r7, #16
 800c664:	46bd      	mov	sp, r7
 800c666:	bd80      	pop	{r7, pc}

0800c668 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800c668:	b580      	push	{r7, lr}
 800c66a:	b084      	sub	sp, #16
 800c66c:	af00      	add	r7, sp, #0
 800c66e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	681b      	ldr	r3, [r3, #0]
 800c674:	68db      	ldr	r3, [r3, #12]
 800c676:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	d119      	bne.n	800c6b2 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	681b      	ldr	r3, [r3, #0]
 800c682:	f04f 32ff 	mov.w	r2, #4294967295
 800c686:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800c688:	f7fb fa3c 	bl	8007b04 <HAL_GetTick>
 800c68c:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800c68e:	e009      	b.n	800c6a4 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800c690:	f7fb fa38 	bl	8007b04 <HAL_GetTick>
 800c694:	4602      	mov	r2, r0
 800c696:	68fb      	ldr	r3, [r7, #12]
 800c698:	1ad3      	subs	r3, r2, r3
 800c69a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800c69e:	d901      	bls.n	800c6a4 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 800c6a0:	2303      	movs	r3, #3
 800c6a2:	e007      	b.n	800c6b4 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	681b      	ldr	r3, [r3, #0]
 800c6a8:	68db      	ldr	r3, [r3, #12]
 800c6aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c6ae:	2b00      	cmp	r3, #0
 800c6b0:	d0ee      	beq.n	800c690 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 800c6b2:	2300      	movs	r3, #0
}
 800c6b4:	4618      	mov	r0, r3
 800c6b6:	3710      	adds	r7, #16
 800c6b8:	46bd      	mov	sp, r7
 800c6ba:	bd80      	pop	{r7, pc}

0800c6bc <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 800c6bc:	b580      	push	{r7, lr}
 800c6be:	b086      	sub	sp, #24
 800c6c0:	af00      	add	r7, sp, #0
 800c6c2:	60f8      	str	r0, [r7, #12]
 800c6c4:	60b9      	str	r1, [r7, #8]
 800c6c6:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800c6c8:	68fb      	ldr	r3, [r7, #12]
 800c6ca:	f893 3020 	ldrb.w	r3, [r3, #32]
 800c6ce:	2b01      	cmp	r3, #1
 800c6d0:	d101      	bne.n	800c6d6 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 800c6d2:	2302      	movs	r3, #2
 800c6d4:	e0a8      	b.n	800c828 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
 800c6d6:	68fb      	ldr	r3, [r7, #12]
 800c6d8:	2201      	movs	r2, #1
 800c6da:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800c6de:	68fb      	ldr	r3, [r7, #12]
 800c6e0:	2202      	movs	r2, #2
 800c6e2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c6e6:	68fb      	ldr	r3, [r7, #12]
 800c6e8:	681b      	ldr	r3, [r3, #0]
 800c6ea:	22ca      	movs	r2, #202	@ 0xca
 800c6ec:	625a      	str	r2, [r3, #36]	@ 0x24
 800c6ee:	68fb      	ldr	r3, [r7, #12]
 800c6f0:	681b      	ldr	r3, [r3, #0]
 800c6f2:	2253      	movs	r2, #83	@ 0x53
 800c6f4:	625a      	str	r2, [r3, #36]	@ 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 800c6f6:	68fb      	ldr	r3, [r7, #12]
 800c6f8:	681b      	ldr	r3, [r3, #0]
 800c6fa:	689b      	ldr	r3, [r3, #8]
 800c6fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c700:	2b00      	cmp	r3, #0
 800c702:	d020      	beq.n	800c746 <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
  {
    tickstart = HAL_GetTick();
 800c704:	f7fb f9fe 	bl	8007b04 <HAL_GetTick>
 800c708:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 800c70a:	e015      	b.n	800c738 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800c70c:	f7fb f9fa 	bl	8007b04 <HAL_GetTick>
 800c710:	4602      	mov	r2, r0
 800c712:	697b      	ldr	r3, [r7, #20]
 800c714:	1ad3      	subs	r3, r2, r3
 800c716:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800c71a:	d90d      	bls.n	800c738 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c71c:	68fb      	ldr	r3, [r7, #12]
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	22ff      	movs	r2, #255	@ 0xff
 800c722:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800c724:	68fb      	ldr	r3, [r7, #12]
 800c726:	2203      	movs	r2, #3
 800c728:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800c72c:	68fb      	ldr	r3, [r7, #12]
 800c72e:	2200      	movs	r2, #0
 800c730:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 800c734:	2303      	movs	r3, #3
 800c736:	e077      	b.n	800c828 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 800c738:	68fb      	ldr	r3, [r7, #12]
 800c73a:	681b      	ldr	r3, [r3, #0]
 800c73c:	68db      	ldr	r3, [r3, #12]
 800c73e:	f003 0304 	and.w	r3, r3, #4
 800c742:	2b00      	cmp	r3, #0
 800c744:	d1e2      	bne.n	800c70c <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800c746:	68fb      	ldr	r3, [r7, #12]
 800c748:	681b      	ldr	r3, [r3, #0]
 800c74a:	689a      	ldr	r2, [r3, #8]
 800c74c:	68fb      	ldr	r3, [r7, #12]
 800c74e:	681b      	ldr	r3, [r3, #0]
 800c750:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800c754:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800c756:	68fb      	ldr	r3, [r7, #12]
 800c758:	681b      	ldr	r3, [r3, #0]
 800c75a:	68db      	ldr	r3, [r3, #12]
 800c75c:	b2da      	uxtb	r2, r3
 800c75e:	68fb      	ldr	r3, [r7, #12]
 800c760:	681b      	ldr	r3, [r3, #0]
 800c762:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 800c766:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800c768:	f7fb f9cc 	bl	8007b04 <HAL_GetTick>
 800c76c:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800c76e:	e015      	b.n	800c79c <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800c770:	f7fb f9c8 	bl	8007b04 <HAL_GetTick>
 800c774:	4602      	mov	r2, r0
 800c776:	697b      	ldr	r3, [r7, #20]
 800c778:	1ad3      	subs	r3, r2, r3
 800c77a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800c77e:	d90d      	bls.n	800c79c <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c780:	68fb      	ldr	r3, [r7, #12]
 800c782:	681b      	ldr	r3, [r3, #0]
 800c784:	22ff      	movs	r2, #255	@ 0xff
 800c786:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800c788:	68fb      	ldr	r3, [r7, #12]
 800c78a:	2203      	movs	r2, #3
 800c78c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800c790:	68fb      	ldr	r3, [r7, #12]
 800c792:	2200      	movs	r2, #0
 800c794:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 800c798:	2303      	movs	r3, #3
 800c79a:	e045      	b.n	800c828 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800c79c:	68fb      	ldr	r3, [r7, #12]
 800c79e:	681b      	ldr	r3, [r3, #0]
 800c7a0:	68db      	ldr	r3, [r3, #12]
 800c7a2:	f003 0304 	and.w	r3, r3, #4
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	d0e2      	beq.n	800c770 <HAL_RTCEx_SetWakeUpTimer_IT+0xb4>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 800c7aa:	68fb      	ldr	r3, [r7, #12]
 800c7ac:	681b      	ldr	r3, [r3, #0]
 800c7ae:	68ba      	ldr	r2, [r7, #8]
 800c7b0:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 800c7b2:	68fb      	ldr	r3, [r7, #12]
 800c7b4:	681b      	ldr	r3, [r3, #0]
 800c7b6:	689a      	ldr	r2, [r3, #8]
 800c7b8:	68fb      	ldr	r3, [r7, #12]
 800c7ba:	681b      	ldr	r3, [r3, #0]
 800c7bc:	f022 0207 	bic.w	r2, r2, #7
 800c7c0:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 800c7c2:	68fb      	ldr	r3, [r7, #12]
 800c7c4:	681b      	ldr	r3, [r3, #0]
 800c7c6:	6899      	ldr	r1, [r3, #8]
 800c7c8:	68fb      	ldr	r3, [r7, #12]
 800c7ca:	681b      	ldr	r3, [r3, #0]
 800c7cc:	687a      	ldr	r2, [r7, #4]
 800c7ce:	430a      	orrs	r2, r1
 800c7d0:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 800c7d2:	4b17      	ldr	r3, [pc, #92]	@ (800c830 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800c7d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c7d8:	4a15      	ldr	r2, [pc, #84]	@ (800c830 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800c7da:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800c7de:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 800c7e2:	4b13      	ldr	r3, [pc, #76]	@ (800c830 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800c7e4:	681b      	ldr	r3, [r3, #0]
 800c7e6:	4a12      	ldr	r2, [pc, #72]	@ (800c830 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800c7e8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800c7ec:	6013      	str	r3, [r2, #0]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 800c7ee:	68fb      	ldr	r3, [r7, #12]
 800c7f0:	681b      	ldr	r3, [r3, #0]
 800c7f2:	689a      	ldr	r2, [r3, #8]
 800c7f4:	68fb      	ldr	r3, [r7, #12]
 800c7f6:	681b      	ldr	r3, [r3, #0]
 800c7f8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800c7fc:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 800c7fe:	68fb      	ldr	r3, [r7, #12]
 800c800:	681b      	ldr	r3, [r3, #0]
 800c802:	689a      	ldr	r2, [r3, #8]
 800c804:	68fb      	ldr	r3, [r7, #12]
 800c806:	681b      	ldr	r3, [r3, #0]
 800c808:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800c80c:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c80e:	68fb      	ldr	r3, [r7, #12]
 800c810:	681b      	ldr	r3, [r3, #0]
 800c812:	22ff      	movs	r2, #255	@ 0xff
 800c814:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800c816:	68fb      	ldr	r3, [r7, #12]
 800c818:	2201      	movs	r2, #1
 800c81a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800c81e:	68fb      	ldr	r3, [r7, #12]
 800c820:	2200      	movs	r2, #0
 800c822:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800c826:	2300      	movs	r3, #0
}
 800c828:	4618      	mov	r0, r3
 800c82a:	3718      	adds	r7, #24
 800c82c:	46bd      	mov	sp, r7
 800c82e:	bd80      	pop	{r7, pc}
 800c830:	58000800 	.word	0x58000800

0800c834 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c834:	b580      	push	{r7, lr}
 800c836:	b082      	sub	sp, #8
 800c838:	af00      	add	r7, sp, #0
 800c83a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	2b00      	cmp	r3, #0
 800c840:	d101      	bne.n	800c846 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c842:	2301      	movs	r3, #1
 800c844:	e049      	b.n	800c8da <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c84c:	b2db      	uxtb	r3, r3
 800c84e:	2b00      	cmp	r3, #0
 800c850:	d106      	bne.n	800c860 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	2200      	movs	r2, #0
 800c856:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c85a:	6878      	ldr	r0, [r7, #4]
 800c85c:	f7fa ff14 	bl	8007688 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	2202      	movs	r2, #2
 800c864:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	681a      	ldr	r2, [r3, #0]
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	3304      	adds	r3, #4
 800c870:	4619      	mov	r1, r3
 800c872:	4610      	mov	r0, r2
 800c874:	f000 f946 	bl	800cb04 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	2201      	movs	r2, #1
 800c87c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	2201      	movs	r2, #1
 800c884:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	2201      	movs	r2, #1
 800c88c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	2201      	movs	r2, #1
 800c894:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	2201      	movs	r2, #1
 800c89c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	2201      	movs	r2, #1
 800c8a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	2201      	movs	r2, #1
 800c8ac:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	2201      	movs	r2, #1
 800c8b4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	2201      	movs	r2, #1
 800c8bc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	2201      	movs	r2, #1
 800c8c4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	2201      	movs	r2, #1
 800c8cc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	2201      	movs	r2, #1
 800c8d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800c8d8:	2300      	movs	r3, #0
}
 800c8da:	4618      	mov	r0, r3
 800c8dc:	3708      	adds	r7, #8
 800c8de:	46bd      	mov	sp, r7
 800c8e0:	bd80      	pop	{r7, pc}
	...

0800c8e4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800c8e4:	b480      	push	{r7}
 800c8e6:	b085      	sub	sp, #20
 800c8e8:	af00      	add	r7, sp, #0
 800c8ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c8f2:	b2db      	uxtb	r3, r3
 800c8f4:	2b01      	cmp	r3, #1
 800c8f6:	d001      	beq.n	800c8fc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800c8f8:	2301      	movs	r3, #1
 800c8fa:	e02e      	b.n	800c95a <HAL_TIM_Base_Start+0x76>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	2202      	movs	r2, #2
 800c900:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	681b      	ldr	r3, [r3, #0]
 800c908:	4a17      	ldr	r2, [pc, #92]	@ (800c968 <HAL_TIM_Base_Start+0x84>)
 800c90a:	4293      	cmp	r3, r2
 800c90c:	d004      	beq.n	800c918 <HAL_TIM_Base_Start+0x34>
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	681b      	ldr	r3, [r3, #0]
 800c912:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c916:	d115      	bne.n	800c944 <HAL_TIM_Base_Start+0x60>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	681b      	ldr	r3, [r3, #0]
 800c91c:	689a      	ldr	r2, [r3, #8]
 800c91e:	4b13      	ldr	r3, [pc, #76]	@ (800c96c <HAL_TIM_Base_Start+0x88>)
 800c920:	4013      	ands	r3, r2
 800c922:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c924:	68fb      	ldr	r3, [r7, #12]
 800c926:	2b06      	cmp	r3, #6
 800c928:	d015      	beq.n	800c956 <HAL_TIM_Base_Start+0x72>
 800c92a:	68fb      	ldr	r3, [r7, #12]
 800c92c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c930:	d011      	beq.n	800c956 <HAL_TIM_Base_Start+0x72>
    {
      __HAL_TIM_ENABLE(htim);
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	681b      	ldr	r3, [r3, #0]
 800c936:	681a      	ldr	r2, [r3, #0]
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	681b      	ldr	r3, [r3, #0]
 800c93c:	f042 0201 	orr.w	r2, r2, #1
 800c940:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c942:	e008      	b.n	800c956 <HAL_TIM_Base_Start+0x72>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	681b      	ldr	r3, [r3, #0]
 800c948:	681a      	ldr	r2, [r3, #0]
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	681b      	ldr	r3, [r3, #0]
 800c94e:	f042 0201 	orr.w	r2, r2, #1
 800c952:	601a      	str	r2, [r3, #0]
 800c954:	e000      	b.n	800c958 <HAL_TIM_Base_Start+0x74>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c956:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c958:	2300      	movs	r3, #0
}
 800c95a:	4618      	mov	r0, r3
 800c95c:	3714      	adds	r7, #20
 800c95e:	46bd      	mov	sp, r7
 800c960:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c964:	4770      	bx	lr
 800c966:	bf00      	nop
 800c968:	40012c00 	.word	0x40012c00
 800c96c:	00010007 	.word	0x00010007

0800c970 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c970:	b580      	push	{r7, lr}
 800c972:	b084      	sub	sp, #16
 800c974:	af00      	add	r7, sp, #0
 800c976:	6078      	str	r0, [r7, #4]
 800c978:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c97a:	2300      	movs	r3, #0
 800c97c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c984:	2b01      	cmp	r3, #1
 800c986:	d101      	bne.n	800c98c <HAL_TIM_ConfigClockSource+0x1c>
 800c988:	2302      	movs	r3, #2
 800c98a:	e0b6      	b.n	800cafa <HAL_TIM_ConfigClockSource+0x18a>
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	2201      	movs	r2, #1
 800c990:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	2202      	movs	r2, #2
 800c998:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	681b      	ldr	r3, [r3, #0]
 800c9a0:	689b      	ldr	r3, [r3, #8]
 800c9a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c9a4:	68bb      	ldr	r3, [r7, #8]
 800c9a6:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800c9aa:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800c9ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c9b0:	68bb      	ldr	r3, [r7, #8]
 800c9b2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800c9b6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	681b      	ldr	r3, [r3, #0]
 800c9bc:	68ba      	ldr	r2, [r7, #8]
 800c9be:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c9c0:	683b      	ldr	r3, [r7, #0]
 800c9c2:	681b      	ldr	r3, [r3, #0]
 800c9c4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c9c8:	d03e      	beq.n	800ca48 <HAL_TIM_ConfigClockSource+0xd8>
 800c9ca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c9ce:	f200 8087 	bhi.w	800cae0 <HAL_TIM_ConfigClockSource+0x170>
 800c9d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c9d6:	f000 8086 	beq.w	800cae6 <HAL_TIM_ConfigClockSource+0x176>
 800c9da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c9de:	d87f      	bhi.n	800cae0 <HAL_TIM_ConfigClockSource+0x170>
 800c9e0:	2b70      	cmp	r3, #112	@ 0x70
 800c9e2:	d01a      	beq.n	800ca1a <HAL_TIM_ConfigClockSource+0xaa>
 800c9e4:	2b70      	cmp	r3, #112	@ 0x70
 800c9e6:	d87b      	bhi.n	800cae0 <HAL_TIM_ConfigClockSource+0x170>
 800c9e8:	2b60      	cmp	r3, #96	@ 0x60
 800c9ea:	d050      	beq.n	800ca8e <HAL_TIM_ConfigClockSource+0x11e>
 800c9ec:	2b60      	cmp	r3, #96	@ 0x60
 800c9ee:	d877      	bhi.n	800cae0 <HAL_TIM_ConfigClockSource+0x170>
 800c9f0:	2b50      	cmp	r3, #80	@ 0x50
 800c9f2:	d03c      	beq.n	800ca6e <HAL_TIM_ConfigClockSource+0xfe>
 800c9f4:	2b50      	cmp	r3, #80	@ 0x50
 800c9f6:	d873      	bhi.n	800cae0 <HAL_TIM_ConfigClockSource+0x170>
 800c9f8:	2b40      	cmp	r3, #64	@ 0x40
 800c9fa:	d058      	beq.n	800caae <HAL_TIM_ConfigClockSource+0x13e>
 800c9fc:	2b40      	cmp	r3, #64	@ 0x40
 800c9fe:	d86f      	bhi.n	800cae0 <HAL_TIM_ConfigClockSource+0x170>
 800ca00:	2b30      	cmp	r3, #48	@ 0x30
 800ca02:	d064      	beq.n	800cace <HAL_TIM_ConfigClockSource+0x15e>
 800ca04:	2b30      	cmp	r3, #48	@ 0x30
 800ca06:	d86b      	bhi.n	800cae0 <HAL_TIM_ConfigClockSource+0x170>
 800ca08:	2b20      	cmp	r3, #32
 800ca0a:	d060      	beq.n	800cace <HAL_TIM_ConfigClockSource+0x15e>
 800ca0c:	2b20      	cmp	r3, #32
 800ca0e:	d867      	bhi.n	800cae0 <HAL_TIM_ConfigClockSource+0x170>
 800ca10:	2b00      	cmp	r3, #0
 800ca12:	d05c      	beq.n	800cace <HAL_TIM_ConfigClockSource+0x15e>
 800ca14:	2b10      	cmp	r3, #16
 800ca16:	d05a      	beq.n	800cace <HAL_TIM_ConfigClockSource+0x15e>
 800ca18:	e062      	b.n	800cae0 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800ca1e:	683b      	ldr	r3, [r7, #0]
 800ca20:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800ca22:	683b      	ldr	r3, [r7, #0]
 800ca24:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800ca26:	683b      	ldr	r3, [r7, #0]
 800ca28:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800ca2a:	f000 f957 	bl	800ccdc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	681b      	ldr	r3, [r3, #0]
 800ca32:	689b      	ldr	r3, [r3, #8]
 800ca34:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800ca36:	68bb      	ldr	r3, [r7, #8]
 800ca38:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800ca3c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	681b      	ldr	r3, [r3, #0]
 800ca42:	68ba      	ldr	r2, [r7, #8]
 800ca44:	609a      	str	r2, [r3, #8]
      break;
 800ca46:	e04f      	b.n	800cae8 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800ca4c:	683b      	ldr	r3, [r7, #0]
 800ca4e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800ca50:	683b      	ldr	r3, [r7, #0]
 800ca52:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800ca54:	683b      	ldr	r3, [r7, #0]
 800ca56:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800ca58:	f000 f940 	bl	800ccdc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	681b      	ldr	r3, [r3, #0]
 800ca60:	689a      	ldr	r2, [r3, #8]
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	681b      	ldr	r3, [r3, #0]
 800ca66:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800ca6a:	609a      	str	r2, [r3, #8]
      break;
 800ca6c:	e03c      	b.n	800cae8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ca72:	683b      	ldr	r3, [r7, #0]
 800ca74:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ca76:	683b      	ldr	r3, [r7, #0]
 800ca78:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ca7a:	461a      	mov	r2, r3
 800ca7c:	f000 f8b2 	bl	800cbe4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	681b      	ldr	r3, [r3, #0]
 800ca84:	2150      	movs	r1, #80	@ 0x50
 800ca86:	4618      	mov	r0, r3
 800ca88:	f000 f90b 	bl	800cca2 <TIM_ITRx_SetConfig>
      break;
 800ca8c:	e02c      	b.n	800cae8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ca92:	683b      	ldr	r3, [r7, #0]
 800ca94:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ca96:	683b      	ldr	r3, [r7, #0]
 800ca98:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800ca9a:	461a      	mov	r2, r3
 800ca9c:	f000 f8d1 	bl	800cc42 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	681b      	ldr	r3, [r3, #0]
 800caa4:	2160      	movs	r1, #96	@ 0x60
 800caa6:	4618      	mov	r0, r3
 800caa8:	f000 f8fb 	bl	800cca2 <TIM_ITRx_SetConfig>
      break;
 800caac:	e01c      	b.n	800cae8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800cab2:	683b      	ldr	r3, [r7, #0]
 800cab4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800cab6:	683b      	ldr	r3, [r7, #0]
 800cab8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800caba:	461a      	mov	r2, r3
 800cabc:	f000 f892 	bl	800cbe4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	681b      	ldr	r3, [r3, #0]
 800cac4:	2140      	movs	r1, #64	@ 0x40
 800cac6:	4618      	mov	r0, r3
 800cac8:	f000 f8eb 	bl	800cca2 <TIM_ITRx_SetConfig>
      break;
 800cacc:	e00c      	b.n	800cae8 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	681a      	ldr	r2, [r3, #0]
 800cad2:	683b      	ldr	r3, [r7, #0]
 800cad4:	681b      	ldr	r3, [r3, #0]
 800cad6:	4619      	mov	r1, r3
 800cad8:	4610      	mov	r0, r2
 800cada:	f000 f8e2 	bl	800cca2 <TIM_ITRx_SetConfig>
      break;
 800cade:	e003      	b.n	800cae8 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800cae0:	2301      	movs	r3, #1
 800cae2:	73fb      	strb	r3, [r7, #15]
      break;
 800cae4:	e000      	b.n	800cae8 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800cae6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	2201      	movs	r2, #1
 800caec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	2200      	movs	r2, #0
 800caf4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800caf8:	7bfb      	ldrb	r3, [r7, #15]
}
 800cafa:	4618      	mov	r0, r3
 800cafc:	3710      	adds	r7, #16
 800cafe:	46bd      	mov	sp, r7
 800cb00:	bd80      	pop	{r7, pc}
	...

0800cb04 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800cb04:	b480      	push	{r7}
 800cb06:	b085      	sub	sp, #20
 800cb08:	af00      	add	r7, sp, #0
 800cb0a:	6078      	str	r0, [r7, #4]
 800cb0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	681b      	ldr	r3, [r3, #0]
 800cb12:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	4a30      	ldr	r2, [pc, #192]	@ (800cbd8 <TIM_Base_SetConfig+0xd4>)
 800cb18:	4293      	cmp	r3, r2
 800cb1a:	d003      	beq.n	800cb24 <TIM_Base_SetConfig+0x20>
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cb22:	d108      	bne.n	800cb36 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800cb24:	68fb      	ldr	r3, [r7, #12]
 800cb26:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cb2a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800cb2c:	683b      	ldr	r3, [r7, #0]
 800cb2e:	685b      	ldr	r3, [r3, #4]
 800cb30:	68fa      	ldr	r2, [r7, #12]
 800cb32:	4313      	orrs	r3, r2
 800cb34:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	4a27      	ldr	r2, [pc, #156]	@ (800cbd8 <TIM_Base_SetConfig+0xd4>)
 800cb3a:	4293      	cmp	r3, r2
 800cb3c:	d00b      	beq.n	800cb56 <TIM_Base_SetConfig+0x52>
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cb44:	d007      	beq.n	800cb56 <TIM_Base_SetConfig+0x52>
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	4a24      	ldr	r2, [pc, #144]	@ (800cbdc <TIM_Base_SetConfig+0xd8>)
 800cb4a:	4293      	cmp	r3, r2
 800cb4c:	d003      	beq.n	800cb56 <TIM_Base_SetConfig+0x52>
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	4a23      	ldr	r2, [pc, #140]	@ (800cbe0 <TIM_Base_SetConfig+0xdc>)
 800cb52:	4293      	cmp	r3, r2
 800cb54:	d108      	bne.n	800cb68 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800cb56:	68fb      	ldr	r3, [r7, #12]
 800cb58:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800cb5c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800cb5e:	683b      	ldr	r3, [r7, #0]
 800cb60:	68db      	ldr	r3, [r3, #12]
 800cb62:	68fa      	ldr	r2, [r7, #12]
 800cb64:	4313      	orrs	r3, r2
 800cb66:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800cb68:	68fb      	ldr	r3, [r7, #12]
 800cb6a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800cb6e:	683b      	ldr	r3, [r7, #0]
 800cb70:	695b      	ldr	r3, [r3, #20]
 800cb72:	4313      	orrs	r3, r2
 800cb74:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	68fa      	ldr	r2, [r7, #12]
 800cb7a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800cb7c:	683b      	ldr	r3, [r7, #0]
 800cb7e:	689a      	ldr	r2, [r3, #8]
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800cb84:	683b      	ldr	r3, [r7, #0]
 800cb86:	681a      	ldr	r2, [r3, #0]
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	4a12      	ldr	r2, [pc, #72]	@ (800cbd8 <TIM_Base_SetConfig+0xd4>)
 800cb90:	4293      	cmp	r3, r2
 800cb92:	d007      	beq.n	800cba4 <TIM_Base_SetConfig+0xa0>
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	4a11      	ldr	r2, [pc, #68]	@ (800cbdc <TIM_Base_SetConfig+0xd8>)
 800cb98:	4293      	cmp	r3, r2
 800cb9a:	d003      	beq.n	800cba4 <TIM_Base_SetConfig+0xa0>
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	4a10      	ldr	r2, [pc, #64]	@ (800cbe0 <TIM_Base_SetConfig+0xdc>)
 800cba0:	4293      	cmp	r3, r2
 800cba2:	d103      	bne.n	800cbac <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800cba4:	683b      	ldr	r3, [r7, #0]
 800cba6:	691a      	ldr	r2, [r3, #16]
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	2201      	movs	r2, #1
 800cbb0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	691b      	ldr	r3, [r3, #16]
 800cbb6:	f003 0301 	and.w	r3, r3, #1
 800cbba:	2b01      	cmp	r3, #1
 800cbbc:	d105      	bne.n	800cbca <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	691b      	ldr	r3, [r3, #16]
 800cbc2:	f023 0201 	bic.w	r2, r3, #1
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	611a      	str	r2, [r3, #16]
  }
}
 800cbca:	bf00      	nop
 800cbcc:	3714      	adds	r7, #20
 800cbce:	46bd      	mov	sp, r7
 800cbd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbd4:	4770      	bx	lr
 800cbd6:	bf00      	nop
 800cbd8:	40012c00 	.word	0x40012c00
 800cbdc:	40014400 	.word	0x40014400
 800cbe0:	40014800 	.word	0x40014800

0800cbe4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800cbe4:	b480      	push	{r7}
 800cbe6:	b087      	sub	sp, #28
 800cbe8:	af00      	add	r7, sp, #0
 800cbea:	60f8      	str	r0, [r7, #12]
 800cbec:	60b9      	str	r1, [r7, #8]
 800cbee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800cbf0:	68fb      	ldr	r3, [r7, #12]
 800cbf2:	6a1b      	ldr	r3, [r3, #32]
 800cbf4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800cbf6:	68fb      	ldr	r3, [r7, #12]
 800cbf8:	6a1b      	ldr	r3, [r3, #32]
 800cbfa:	f023 0201 	bic.w	r2, r3, #1
 800cbfe:	68fb      	ldr	r3, [r7, #12]
 800cc00:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cc02:	68fb      	ldr	r3, [r7, #12]
 800cc04:	699b      	ldr	r3, [r3, #24]
 800cc06:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800cc08:	693b      	ldr	r3, [r7, #16]
 800cc0a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800cc0e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	011b      	lsls	r3, r3, #4
 800cc14:	693a      	ldr	r2, [r7, #16]
 800cc16:	4313      	orrs	r3, r2
 800cc18:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800cc1a:	697b      	ldr	r3, [r7, #20]
 800cc1c:	f023 030a 	bic.w	r3, r3, #10
 800cc20:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800cc22:	697a      	ldr	r2, [r7, #20]
 800cc24:	68bb      	ldr	r3, [r7, #8]
 800cc26:	4313      	orrs	r3, r2
 800cc28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800cc2a:	68fb      	ldr	r3, [r7, #12]
 800cc2c:	693a      	ldr	r2, [r7, #16]
 800cc2e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cc30:	68fb      	ldr	r3, [r7, #12]
 800cc32:	697a      	ldr	r2, [r7, #20]
 800cc34:	621a      	str	r2, [r3, #32]
}
 800cc36:	bf00      	nop
 800cc38:	371c      	adds	r7, #28
 800cc3a:	46bd      	mov	sp, r7
 800cc3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc40:	4770      	bx	lr

0800cc42 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800cc42:	b480      	push	{r7}
 800cc44:	b087      	sub	sp, #28
 800cc46:	af00      	add	r7, sp, #0
 800cc48:	60f8      	str	r0, [r7, #12]
 800cc4a:	60b9      	str	r1, [r7, #8]
 800cc4c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800cc4e:	68fb      	ldr	r3, [r7, #12]
 800cc50:	6a1b      	ldr	r3, [r3, #32]
 800cc52:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800cc54:	68fb      	ldr	r3, [r7, #12]
 800cc56:	6a1b      	ldr	r3, [r3, #32]
 800cc58:	f023 0210 	bic.w	r2, r3, #16
 800cc5c:	68fb      	ldr	r3, [r7, #12]
 800cc5e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cc60:	68fb      	ldr	r3, [r7, #12]
 800cc62:	699b      	ldr	r3, [r3, #24]
 800cc64:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800cc66:	693b      	ldr	r3, [r7, #16]
 800cc68:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800cc6c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	031b      	lsls	r3, r3, #12
 800cc72:	693a      	ldr	r2, [r7, #16]
 800cc74:	4313      	orrs	r3, r2
 800cc76:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800cc78:	697b      	ldr	r3, [r7, #20]
 800cc7a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800cc7e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800cc80:	68bb      	ldr	r3, [r7, #8]
 800cc82:	011b      	lsls	r3, r3, #4
 800cc84:	697a      	ldr	r2, [r7, #20]
 800cc86:	4313      	orrs	r3, r2
 800cc88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800cc8a:	68fb      	ldr	r3, [r7, #12]
 800cc8c:	693a      	ldr	r2, [r7, #16]
 800cc8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cc90:	68fb      	ldr	r3, [r7, #12]
 800cc92:	697a      	ldr	r2, [r7, #20]
 800cc94:	621a      	str	r2, [r3, #32]
}
 800cc96:	bf00      	nop
 800cc98:	371c      	adds	r7, #28
 800cc9a:	46bd      	mov	sp, r7
 800cc9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cca0:	4770      	bx	lr

0800cca2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800cca2:	b480      	push	{r7}
 800cca4:	b085      	sub	sp, #20
 800cca6:	af00      	add	r7, sp, #0
 800cca8:	6078      	str	r0, [r7, #4]
 800ccaa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	689b      	ldr	r3, [r3, #8]
 800ccb0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ccb2:	68fb      	ldr	r3, [r7, #12]
 800ccb4:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800ccb8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ccbc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ccbe:	683a      	ldr	r2, [r7, #0]
 800ccc0:	68fb      	ldr	r3, [r7, #12]
 800ccc2:	4313      	orrs	r3, r2
 800ccc4:	f043 0307 	orr.w	r3, r3, #7
 800ccc8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	68fa      	ldr	r2, [r7, #12]
 800ccce:	609a      	str	r2, [r3, #8]
}
 800ccd0:	bf00      	nop
 800ccd2:	3714      	adds	r7, #20
 800ccd4:	46bd      	mov	sp, r7
 800ccd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccda:	4770      	bx	lr

0800ccdc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ccdc:	b480      	push	{r7}
 800ccde:	b087      	sub	sp, #28
 800cce0:	af00      	add	r7, sp, #0
 800cce2:	60f8      	str	r0, [r7, #12]
 800cce4:	60b9      	str	r1, [r7, #8]
 800cce6:	607a      	str	r2, [r7, #4]
 800cce8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ccea:	68fb      	ldr	r3, [r7, #12]
 800ccec:	689b      	ldr	r3, [r3, #8]
 800ccee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ccf0:	697b      	ldr	r3, [r7, #20]
 800ccf2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800ccf6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ccf8:	683b      	ldr	r3, [r7, #0]
 800ccfa:	021a      	lsls	r2, r3, #8
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	431a      	orrs	r2, r3
 800cd00:	68bb      	ldr	r3, [r7, #8]
 800cd02:	4313      	orrs	r3, r2
 800cd04:	697a      	ldr	r2, [r7, #20]
 800cd06:	4313      	orrs	r3, r2
 800cd08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800cd0a:	68fb      	ldr	r3, [r7, #12]
 800cd0c:	697a      	ldr	r2, [r7, #20]
 800cd0e:	609a      	str	r2, [r3, #8]
}
 800cd10:	bf00      	nop
 800cd12:	371c      	adds	r7, #28
 800cd14:	46bd      	mov	sp, r7
 800cd16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd1a:	4770      	bx	lr

0800cd1c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800cd1c:	b480      	push	{r7}
 800cd1e:	b085      	sub	sp, #20
 800cd20:	af00      	add	r7, sp, #0
 800cd22:	6078      	str	r0, [r7, #4]
 800cd24:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800cd2c:	2b01      	cmp	r3, #1
 800cd2e:	d101      	bne.n	800cd34 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800cd30:	2302      	movs	r3, #2
 800cd32:	e04a      	b.n	800cdca <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	2201      	movs	r2, #1
 800cd38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	2202      	movs	r2, #2
 800cd40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	681b      	ldr	r3, [r3, #0]
 800cd48:	685b      	ldr	r3, [r3, #4]
 800cd4a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	681b      	ldr	r3, [r3, #0]
 800cd50:	689b      	ldr	r3, [r3, #8]
 800cd52:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	681b      	ldr	r3, [r3, #0]
 800cd58:	4a1f      	ldr	r2, [pc, #124]	@ (800cdd8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 800cd5a:	4293      	cmp	r3, r2
 800cd5c:	d108      	bne.n	800cd70 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800cd5e:	68fb      	ldr	r3, [r7, #12]
 800cd60:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800cd64:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800cd66:	683b      	ldr	r3, [r7, #0]
 800cd68:	685b      	ldr	r3, [r3, #4]
 800cd6a:	68fa      	ldr	r2, [r7, #12]
 800cd6c:	4313      	orrs	r3, r2
 800cd6e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800cd70:	68fb      	ldr	r3, [r7, #12]
 800cd72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cd76:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800cd78:	683b      	ldr	r3, [r7, #0]
 800cd7a:	681b      	ldr	r3, [r3, #0]
 800cd7c:	68fa      	ldr	r2, [r7, #12]
 800cd7e:	4313      	orrs	r3, r2
 800cd80:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	681b      	ldr	r3, [r3, #0]
 800cd86:	68fa      	ldr	r2, [r7, #12]
 800cd88:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	681b      	ldr	r3, [r3, #0]
 800cd8e:	4a12      	ldr	r2, [pc, #72]	@ (800cdd8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 800cd90:	4293      	cmp	r3, r2
 800cd92:	d004      	beq.n	800cd9e <HAL_TIMEx_MasterConfigSynchronization+0x82>
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	681b      	ldr	r3, [r3, #0]
 800cd98:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cd9c:	d10c      	bne.n	800cdb8 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800cd9e:	68bb      	ldr	r3, [r7, #8]
 800cda0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800cda4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800cda6:	683b      	ldr	r3, [r7, #0]
 800cda8:	689b      	ldr	r3, [r3, #8]
 800cdaa:	68ba      	ldr	r2, [r7, #8]
 800cdac:	4313      	orrs	r3, r2
 800cdae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	681b      	ldr	r3, [r3, #0]
 800cdb4:	68ba      	ldr	r2, [r7, #8]
 800cdb6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	2201      	movs	r2, #1
 800cdbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	2200      	movs	r2, #0
 800cdc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800cdc8:	2300      	movs	r3, #0
}
 800cdca:	4618      	mov	r0, r3
 800cdcc:	3714      	adds	r7, #20
 800cdce:	46bd      	mov	sp, r7
 800cdd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdd4:	4770      	bx	lr
 800cdd6:	bf00      	nop
 800cdd8:	40012c00 	.word	0x40012c00

0800cddc <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 800cddc:	b580      	push	{r7, lr}
 800cdde:	b088      	sub	sp, #32
 800cde0:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800cde2:	2300      	movs	r3, #0
 800cde4:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800cde6:	f107 0308 	add.w	r3, r7, #8
 800cdea:	2218      	movs	r2, #24
 800cdec:	2100      	movs	r1, #0
 800cdee:	4618      	mov	r0, r3
 800cdf0:	f001 f92d 	bl	800e04e <Osal_MemSet>
  rq.ogf = 0x3f;
 800cdf4:	233f      	movs	r3, #63	@ 0x3f
 800cdf6:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 800cdf8:	2381      	movs	r3, #129	@ 0x81
 800cdfa:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800cdfc:	1dfb      	adds	r3, r7, #7
 800cdfe:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800ce00:	2301      	movs	r3, #1
 800ce02:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800ce04:	f107 0308 	add.w	r3, r7, #8
 800ce08:	2100      	movs	r1, #0
 800ce0a:	4618      	mov	r0, r3
 800ce0c:	f001 fba8 	bl	800e560 <hci_send_req>
 800ce10:	4603      	mov	r3, r0
 800ce12:	2b00      	cmp	r3, #0
 800ce14:	da01      	bge.n	800ce1a <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 800ce16:	23ff      	movs	r3, #255	@ 0xff
 800ce18:	e000      	b.n	800ce1c <aci_gap_set_non_discoverable+0x40>
  return status;
 800ce1a:	79fb      	ldrb	r3, [r7, #7]
}
 800ce1c:	4618      	mov	r0, r3
 800ce1e:	3720      	adds	r7, #32
 800ce20:	46bd      	mov	sp, r7
 800ce22:	bd80      	pop	{r7, pc}

0800ce24 <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Conn_Interval_Min,
                                     uint16_t Conn_Interval_Max )
{
 800ce24:	b5b0      	push	{r4, r5, r7, lr}
 800ce26:	b0ce      	sub	sp, #312	@ 0x138
 800ce28:	af00      	add	r7, sp, #0
 800ce2a:	4605      	mov	r5, r0
 800ce2c:	460c      	mov	r4, r1
 800ce2e:	4610      	mov	r0, r2
 800ce30:	4619      	mov	r1, r3
 800ce32:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800ce36:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 800ce3a:	462a      	mov	r2, r5
 800ce3c:	701a      	strb	r2, [r3, #0]
 800ce3e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800ce42:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800ce46:	4622      	mov	r2, r4
 800ce48:	801a      	strh	r2, [r3, #0]
 800ce4a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800ce4e:	f5a3 739b 	sub.w	r3, r3, #310	@ 0x136
 800ce52:	4602      	mov	r2, r0
 800ce54:	801a      	strh	r2, [r3, #0]
 800ce56:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800ce5a:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 800ce5e:	460a      	mov	r2, r1
 800ce60:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 800ce62:	f107 0310 	add.w	r3, r7, #16
 800ce66:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 800ce6a:	f897 314c 	ldrb.w	r3, [r7, #332]	@ 0x14c
 800ce6e:	3308      	adds	r3, #8
 800ce70:	f107 0210 	add.w	r2, r7, #16
 800ce74:	4413      	add	r3, r2
 800ce76:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 800ce7a:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 800ce7e:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 800ce82:	4413      	add	r3, r2
 800ce84:	3309      	adds	r3, #9
 800ce86:	f107 0210 	add.w	r2, r7, #16
 800ce8a:	4413      	add	r3, r2
 800ce8c:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800ce90:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800ce94:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800ce98:	2200      	movs	r2, #0
 800ce9a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800ce9c:	2300      	movs	r3, #0
 800ce9e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Type = Advertising_Type;
 800cea2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800cea6:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800ceaa:	f2a2 1231 	subw	r2, r2, #305	@ 0x131
 800ceae:	7812      	ldrb	r2, [r2, #0]
 800ceb0:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800ceb2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800ceb6:	3301      	adds	r3, #1
 800ceb8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 800cebc:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800cec0:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800cec4:	f5a2 729a 	sub.w	r2, r2, #308	@ 0x134
 800cec8:	8812      	ldrh	r2, [r2, #0]
 800ceca:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 800cece:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800ced2:	3302      	adds	r3, #2
 800ced4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 800ced8:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800cedc:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800cee0:	f5a2 729b 	sub.w	r2, r2, #310	@ 0x136
 800cee4:	8812      	ldrh	r2, [r2, #0]
 800cee6:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 800ceea:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800ceee:	3302      	adds	r3, #2
 800cef0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 800cef4:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800cef8:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800cefc:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 800cf00:	7812      	ldrb	r2, [r2, #0]
 800cf02:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800cf04:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800cf08:	3301      	adds	r3, #1
 800cf0a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 800cf0e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800cf12:	f897 2148 	ldrb.w	r2, [r7, #328]	@ 0x148
 800cf16:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 800cf18:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800cf1c:	3301      	adds	r3, #1
 800cf1e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 800cf22:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800cf26:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 800cf2a:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 800cf2c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800cf30:	3301      	adds	r3, #1
 800cf32:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 800cf36:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800cf3a:	3308      	adds	r3, #8
 800cf3c:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 800cf40:	f8d7 1150 	ldr.w	r1, [r7, #336]	@ 0x150
 800cf44:	4618      	mov	r0, r3
 800cf46:	f001 f872 	bl	800e02e <Osal_MemCpy>
    index_input += Local_Name_Length;
 800cf4a:	f897 314c 	ldrb.w	r3, [r7, #332]	@ 0x14c
 800cf4e:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800cf52:	4413      	add	r3, r2
 800cf54:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 800cf58:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800cf5c:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 800cf60:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 800cf62:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800cf66:	3301      	adds	r3, #1
 800cf68:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 800cf6c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800cf70:	3301      	adds	r3, #1
 800cf72:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 800cf76:	f8d7 1158 	ldr.w	r1, [r7, #344]	@ 0x158
 800cf7a:	4618      	mov	r0, r3
 800cf7c:	f001 f857 	bl	800e02e <Osal_MemCpy>
    index_input += Service_Uuid_length;
 800cf80:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 800cf84:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800cf88:	4413      	add	r3, r2
 800cf8a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp2->Conn_Interval_Min = Conn_Interval_Min;
 800cf8e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800cf92:	f8b7 215c 	ldrh.w	r2, [r7, #348]	@ 0x15c
 800cf96:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 800cf98:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800cf9c:	3302      	adds	r3, #2
 800cf9e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp2->Conn_Interval_Max = Conn_Interval_Max;
 800cfa2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800cfa6:	f8b7 2160 	ldrh.w	r2, [r7, #352]	@ 0x160
 800cfaa:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 800cfac:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800cfb0:	3302      	adds	r3, #2
 800cfb2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800cfb6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800cfba:	2218      	movs	r2, #24
 800cfbc:	2100      	movs	r1, #0
 800cfbe:	4618      	mov	r0, r3
 800cfc0:	f001 f845 	bl	800e04e <Osal_MemSet>
  rq.ogf = 0x3f;
 800cfc4:	233f      	movs	r3, #63	@ 0x3f
 800cfc6:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x083;
 800cfca:	2383      	movs	r3, #131	@ 0x83
 800cfcc:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800cfd0:	f107 0310 	add.w	r3, r7, #16
 800cfd4:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800cfd8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800cfdc:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800cfe0:	f107 030f 	add.w	r3, r7, #15
 800cfe4:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800cfe8:	2301      	movs	r3, #1
 800cfea:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800cfee:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800cff2:	2100      	movs	r1, #0
 800cff4:	4618      	mov	r0, r3
 800cff6:	f001 fab3 	bl	800e560 <hci_send_req>
 800cffa:	4603      	mov	r3, r0
 800cffc:	2b00      	cmp	r3, #0
 800cffe:	da01      	bge.n	800d004 <aci_gap_set_discoverable+0x1e0>
    return BLE_STATUS_TIMEOUT;
 800d000:	23ff      	movs	r3, #255	@ 0xff
 800d002:	e004      	b.n	800d00e <aci_gap_set_discoverable+0x1ea>
  return status;
 800d004:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800d008:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800d00c:	781b      	ldrb	r3, [r3, #0]
}
 800d00e:	4618      	mov	r0, r3
 800d010:	f507 779c 	add.w	r7, r7, #312	@ 0x138
 800d014:	46bd      	mov	sp, r7
 800d016:	bdb0      	pop	{r4, r5, r7, pc}

0800d018 <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 800d018:	b580      	push	{r7, lr}
 800d01a:	b0cc      	sub	sp, #304	@ 0x130
 800d01c:	af00      	add	r7, sp, #0
 800d01e:	4602      	mov	r2, r0
 800d020:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d024:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800d028:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 800d02a:	f107 0310 	add.w	r3, r7, #16
 800d02e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800d032:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d036:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800d03a:	2200      	movs	r2, #0
 800d03c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800d03e:	2300      	movs	r3, #0
 800d040:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->IO_Capability = IO_Capability;
 800d044:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800d048:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800d04c:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800d050:	7812      	ldrb	r2, [r2, #0]
 800d052:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800d054:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d058:	3301      	adds	r3, #1
 800d05a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800d05e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d062:	2218      	movs	r2, #24
 800d064:	2100      	movs	r1, #0
 800d066:	4618      	mov	r0, r3
 800d068:	f000 fff1 	bl	800e04e <Osal_MemSet>
  rq.ogf = 0x3f;
 800d06c:	233f      	movs	r3, #63	@ 0x3f
 800d06e:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x085;
 800d072:	2385      	movs	r3, #133	@ 0x85
 800d074:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800d078:	f107 0310 	add.w	r3, r7, #16
 800d07c:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800d080:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d084:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800d088:	f107 030f 	add.w	r3, r7, #15
 800d08c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800d090:	2301      	movs	r3, #1
 800d092:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800d096:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d09a:	2100      	movs	r1, #0
 800d09c:	4618      	mov	r0, r3
 800d09e:	f001 fa5f 	bl	800e560 <hci_send_req>
 800d0a2:	4603      	mov	r3, r0
 800d0a4:	2b00      	cmp	r3, #0
 800d0a6:	da01      	bge.n	800d0ac <aci_gap_set_io_capability+0x94>
    return BLE_STATUS_TIMEOUT;
 800d0a8:	23ff      	movs	r3, #255	@ 0xff
 800d0aa:	e004      	b.n	800d0b6 <aci_gap_set_io_capability+0x9e>
  return status;
 800d0ac:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d0b0:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800d0b4:	781b      	ldrb	r3, [r3, #0]
}
 800d0b6:	4618      	mov	r0, r3
 800d0b8:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800d0bc:	46bd      	mov	sp, r7
 800d0be:	bd80      	pop	{r7, pc}

0800d0c0 <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 800d0c0:	b5b0      	push	{r4, r5, r7, lr}
 800d0c2:	b0cc      	sub	sp, #304	@ 0x130
 800d0c4:	af00      	add	r7, sp, #0
 800d0c6:	4605      	mov	r5, r0
 800d0c8:	460c      	mov	r4, r1
 800d0ca:	4610      	mov	r0, r2
 800d0cc:	4619      	mov	r1, r3
 800d0ce:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d0d2:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800d0d6:	462a      	mov	r2, r5
 800d0d8:	701a      	strb	r2, [r3, #0]
 800d0da:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d0de:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800d0e2:	4622      	mov	r2, r4
 800d0e4:	701a      	strb	r2, [r3, #0]
 800d0e6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d0ea:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 800d0ee:	4602      	mov	r2, r0
 800d0f0:	701a      	strb	r2, [r3, #0]
 800d0f2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d0f6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800d0fa:	460a      	mov	r2, r1
 800d0fc:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 800d0fe:	f107 0310 	add.w	r3, r7, #16
 800d102:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800d106:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d10a:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800d10e:	2200      	movs	r2, #0
 800d110:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800d112:	2300      	movs	r3, #0
 800d114:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 800d118:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800d11c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800d120:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800d124:	7812      	ldrb	r2, [r2, #0]
 800d126:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800d128:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d12c:	3301      	adds	r3, #1
 800d12e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->MITM_Mode = MITM_Mode;
 800d132:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800d136:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800d13a:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800d13e:	7812      	ldrb	r2, [r2, #0]
 800d140:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800d142:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d146:	3301      	adds	r3, #1
 800d148:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->SC_Support = SC_Support;
 800d14c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800d150:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800d154:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 800d158:	7812      	ldrb	r2, [r2, #0]
 800d15a:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800d15c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d160:	3301      	adds	r3, #1
 800d162:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 800d166:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800d16a:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800d16e:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 800d172:	7812      	ldrb	r2, [r2, #0]
 800d174:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 800d176:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d17a:	3301      	adds	r3, #1
 800d17c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 800d180:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800d184:	f897 2140 	ldrb.w	r2, [r7, #320]	@ 0x140
 800d188:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800d18a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d18e:	3301      	adds	r3, #1
 800d190:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 800d194:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800d198:	f897 2144 	ldrb.w	r2, [r7, #324]	@ 0x144
 800d19c:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800d19e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d1a2:	3301      	adds	r3, #1
 800d1a4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 800d1a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800d1ac:	f897 2148 	ldrb.w	r2, [r7, #328]	@ 0x148
 800d1b0:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 800d1b2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d1b6:	3301      	adds	r3, #1
 800d1b8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 800d1bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800d1c0:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 800d1c4:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 800d1c8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d1cc:	3304      	adds	r3, #4
 800d1ce:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 800d1d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800d1d6:	f897 2150 	ldrb.w	r2, [r7, #336]	@ 0x150
 800d1da:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 800d1dc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d1e0:	3301      	adds	r3, #1
 800d1e2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800d1e6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d1ea:	2218      	movs	r2, #24
 800d1ec:	2100      	movs	r1, #0
 800d1ee:	4618      	mov	r0, r3
 800d1f0:	f000 ff2d 	bl	800e04e <Osal_MemSet>
  rq.ogf = 0x3f;
 800d1f4:	233f      	movs	r3, #63	@ 0x3f
 800d1f6:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x086;
 800d1fa:	2386      	movs	r3, #134	@ 0x86
 800d1fc:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800d200:	f107 0310 	add.w	r3, r7, #16
 800d204:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800d208:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d20c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800d210:	f107 030f 	add.w	r3, r7, #15
 800d214:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800d218:	2301      	movs	r3, #1
 800d21a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800d21e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d222:	2100      	movs	r1, #0
 800d224:	4618      	mov	r0, r3
 800d226:	f001 f99b 	bl	800e560 <hci_send_req>
 800d22a:	4603      	mov	r3, r0
 800d22c:	2b00      	cmp	r3, #0
 800d22e:	da01      	bge.n	800d234 <aci_gap_set_authentication_requirement+0x174>
    return BLE_STATUS_TIMEOUT;
 800d230:	23ff      	movs	r3, #255	@ 0xff
 800d232:	e004      	b.n	800d23e <aci_gap_set_authentication_requirement+0x17e>
  return status;
 800d234:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d238:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800d23c:	781b      	ldrb	r3, [r3, #0]
}
 800d23e:	4618      	mov	r0, r3
 800d240:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800d244:	46bd      	mov	sp, r7
 800d246:	bdb0      	pop	{r4, r5, r7, pc}

0800d248 <aci_gap_pass_key_resp>:
  return status;
}

tBleStatus aci_gap_pass_key_resp( uint16_t Connection_Handle,
                                  uint32_t Pass_Key )
{
 800d248:	b580      	push	{r7, lr}
 800d24a:	b0cc      	sub	sp, #304	@ 0x130
 800d24c:	af00      	add	r7, sp, #0
 800d24e:	4602      	mov	r2, r0
 800d250:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d254:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800d258:	6019      	str	r1, [r3, #0]
 800d25a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d25e:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800d262:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_pass_key_resp_cp0 *cp0 = (aci_gap_pass_key_resp_cp0*)(cmd_buffer);
 800d264:	f107 0310 	add.w	r3, r7, #16
 800d268:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800d26c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d270:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800d274:	2200      	movs	r2, #0
 800d276:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800d278:	2300      	movs	r3, #0
 800d27a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 800d27e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800d282:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800d286:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800d28a:	8812      	ldrh	r2, [r2, #0]
 800d28c:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800d28e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d292:	3302      	adds	r3, #2
 800d294:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Pass_Key = Pass_Key;
 800d298:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800d29c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800d2a0:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 800d2a4:	6812      	ldr	r2, [r2, #0]
 800d2a6:	f8c3 2002 	str.w	r2, [r3, #2]
  index_input += 4;
 800d2aa:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d2ae:	3304      	adds	r3, #4
 800d2b0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800d2b4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d2b8:	2218      	movs	r2, #24
 800d2ba:	2100      	movs	r1, #0
 800d2bc:	4618      	mov	r0, r3
 800d2be:	f000 fec6 	bl	800e04e <Osal_MemSet>
  rq.ogf = 0x3f;
 800d2c2:	233f      	movs	r3, #63	@ 0x3f
 800d2c4:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x088;
 800d2c8:	2388      	movs	r3, #136	@ 0x88
 800d2ca:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800d2ce:	f107 0310 	add.w	r3, r7, #16
 800d2d2:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800d2d6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d2da:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800d2de:	f107 030f 	add.w	r3, r7, #15
 800d2e2:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800d2e6:	2301      	movs	r3, #1
 800d2e8:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800d2ec:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d2f0:	2100      	movs	r1, #0
 800d2f2:	4618      	mov	r0, r3
 800d2f4:	f001 f934 	bl	800e560 <hci_send_req>
 800d2f8:	4603      	mov	r3, r0
 800d2fa:	2b00      	cmp	r3, #0
 800d2fc:	da01      	bge.n	800d302 <aci_gap_pass_key_resp+0xba>
    return BLE_STATUS_TIMEOUT;
 800d2fe:	23ff      	movs	r3, #255	@ 0xff
 800d300:	e004      	b.n	800d30c <aci_gap_pass_key_resp+0xc4>
  return status;
 800d302:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d306:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800d30a:	781b      	ldrb	r3, [r3, #0]
}
 800d30c:	4618      	mov	r0, r3
 800d30e:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800d312:	46bd      	mov	sp, r7
 800d314:	bd80      	pop	{r7, pc}

0800d316 <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 800d316:	b590      	push	{r4, r7, lr}
 800d318:	b0cd      	sub	sp, #308	@ 0x134
 800d31a:	af00      	add	r7, sp, #0
 800d31c:	4604      	mov	r4, r0
 800d31e:	4608      	mov	r0, r1
 800d320:	4611      	mov	r1, r2
 800d322:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800d326:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 800d32a:	6013      	str	r3, [r2, #0]
 800d32c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d330:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800d334:	4622      	mov	r2, r4
 800d336:	701a      	strb	r2, [r3, #0]
 800d338:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d33c:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800d340:	4602      	mov	r2, r0
 800d342:	701a      	strb	r2, [r3, #0]
 800d344:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d348:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 800d34c:	460a      	mov	r2, r1
 800d34e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 800d350:	f107 0310 	add.w	r3, r7, #16
 800d354:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800d358:	f107 0308 	add.w	r3, r7, #8
 800d35c:	2207      	movs	r2, #7
 800d35e:	2100      	movs	r1, #0
 800d360:	4618      	mov	r0, r3
 800d362:	f000 fe74 	bl	800e04e <Osal_MemSet>
  int index_input = 0;
 800d366:	2300      	movs	r3, #0
 800d368:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Role = Role;
 800d36c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800d370:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800d374:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800d378:	7812      	ldrb	r2, [r2, #0]
 800d37a:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800d37c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d380:	3301      	adds	r3, #1
 800d382:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->privacy_enabled = privacy_enabled;
 800d386:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800d38a:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800d38e:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800d392:	7812      	ldrb	r2, [r2, #0]
 800d394:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800d396:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d39a:	3301      	adds	r3, #1
 800d39c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->device_name_char_len = device_name_char_len;
 800d3a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800d3a4:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800d3a8:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 800d3ac:	7812      	ldrb	r2, [r2, #0]
 800d3ae:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800d3b0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d3b4:	3301      	adds	r3, #1
 800d3b6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800d3ba:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d3be:	2218      	movs	r2, #24
 800d3c0:	2100      	movs	r1, #0
 800d3c2:	4618      	mov	r0, r3
 800d3c4:	f000 fe43 	bl	800e04e <Osal_MemSet>
  rq.ogf = 0x3f;
 800d3c8:	233f      	movs	r3, #63	@ 0x3f
 800d3ca:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x08a;
 800d3ce:	238a      	movs	r3, #138	@ 0x8a
 800d3d0:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800d3d4:	f107 0310 	add.w	r3, r7, #16
 800d3d8:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800d3dc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d3e0:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &resp;
 800d3e4:	f107 0308 	add.w	r3, r7, #8
 800d3e8:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = sizeof(resp);
 800d3ec:	2307      	movs	r3, #7
 800d3ee:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800d3f2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d3f6:	2100      	movs	r1, #0
 800d3f8:	4618      	mov	r0, r3
 800d3fa:	f001 f8b1 	bl	800e560 <hci_send_req>
 800d3fe:	4603      	mov	r3, r0
 800d400:	2b00      	cmp	r3, #0
 800d402:	da01      	bge.n	800d408 <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 800d404:	23ff      	movs	r3, #255	@ 0xff
 800d406:	e02e      	b.n	800d466 <aci_gap_init+0x150>
  if ( resp.Status )
 800d408:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d40c:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800d410:	781b      	ldrb	r3, [r3, #0]
 800d412:	2b00      	cmp	r3, #0
 800d414:	d005      	beq.n	800d422 <aci_gap_init+0x10c>
    return resp.Status;
 800d416:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d41a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800d41e:	781b      	ldrb	r3, [r3, #0]
 800d420:	e021      	b.n	800d466 <aci_gap_init+0x150>
  *Service_Handle = resp.Service_Handle;
 800d422:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d426:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800d42a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800d42e:	b29a      	uxth	r2, r3
 800d430:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d434:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800d438:	681b      	ldr	r3, [r3, #0]
 800d43a:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 800d43c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d440:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800d444:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800d448:	b29a      	uxth	r2, r3
 800d44a:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800d44e:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 800d450:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d454:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800d458:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800d45c:	b29a      	uxth	r2, r3
 800d45e:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800d462:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800d464:	2300      	movs	r3, #0
}
 800d466:	4618      	mov	r0, r3
 800d468:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 800d46c:	46bd      	mov	sp, r7
 800d46e:	bd90      	pop	{r4, r7, pc}

0800d470 <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 800d470:	b580      	push	{r7, lr}
 800d472:	b0cc      	sub	sp, #304	@ 0x130
 800d474:	af00      	add	r7, sp, #0
 800d476:	4602      	mov	r2, r0
 800d478:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d47c:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800d480:	6019      	str	r1, [r3, #0]
 800d482:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d486:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800d48a:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 800d48c:	f107 0310 	add.w	r3, r7, #16
 800d490:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800d494:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d498:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800d49c:	2200      	movs	r2, #0
 800d49e:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800d4a0:	2300      	movs	r3, #0
 800d4a2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->AdvDataLen = AdvDataLen;
 800d4a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800d4aa:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800d4ae:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800d4b2:	7812      	ldrb	r2, [r2, #0]
 800d4b4:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800d4b6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d4ba:	3301      	adds	r3, #1
 800d4bc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 800d4c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800d4c4:	1c58      	adds	r0, r3, #1
 800d4c6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d4ca:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800d4ce:	781a      	ldrb	r2, [r3, #0]
 800d4d0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d4d4:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800d4d8:	6819      	ldr	r1, [r3, #0]
 800d4da:	f000 fda8 	bl	800e02e <Osal_MemCpy>
  index_input += AdvDataLen;
 800d4de:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d4e2:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800d4e6:	781b      	ldrb	r3, [r3, #0]
 800d4e8:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800d4ec:	4413      	add	r3, r2
 800d4ee:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800d4f2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d4f6:	2218      	movs	r2, #24
 800d4f8:	2100      	movs	r1, #0
 800d4fa:	4618      	mov	r0, r3
 800d4fc:	f000 fda7 	bl	800e04e <Osal_MemSet>
  rq.ogf = 0x3f;
 800d500:	233f      	movs	r3, #63	@ 0x3f
 800d502:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x08e;
 800d506:	238e      	movs	r3, #142	@ 0x8e
 800d508:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800d50c:	f107 0310 	add.w	r3, r7, #16
 800d510:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800d514:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d518:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800d51c:	f107 030f 	add.w	r3, r7, #15
 800d520:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800d524:	2301      	movs	r3, #1
 800d526:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800d52a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d52e:	2100      	movs	r1, #0
 800d530:	4618      	mov	r0, r3
 800d532:	f001 f815 	bl	800e560 <hci_send_req>
 800d536:	4603      	mov	r3, r0
 800d538:	2b00      	cmp	r3, #0
 800d53a:	da01      	bge.n	800d540 <aci_gap_update_adv_data+0xd0>
    return BLE_STATUS_TIMEOUT;
 800d53c:	23ff      	movs	r3, #255	@ 0xff
 800d53e:	e004      	b.n	800d54a <aci_gap_update_adv_data+0xda>
  return status;
 800d540:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d544:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800d548:	781b      	ldrb	r3, [r3, #0]
}
 800d54a:	4618      	mov	r0, r3
 800d54c:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800d550:	46bd      	mov	sp, r7
 800d552:	bd80      	pop	{r7, pc}

0800d554 <aci_gap_configure_filter_accept_list>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_filter_accept_list( void )
{
 800d554:	b580      	push	{r7, lr}
 800d556:	b088      	sub	sp, #32
 800d558:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800d55a:	2300      	movs	r3, #0
 800d55c:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800d55e:	f107 0308 	add.w	r3, r7, #8
 800d562:	2218      	movs	r2, #24
 800d564:	2100      	movs	r1, #0
 800d566:	4618      	mov	r0, r3
 800d568:	f000 fd71 	bl	800e04e <Osal_MemSet>
  rq.ogf = 0x3f;
 800d56c:	233f      	movs	r3, #63	@ 0x3f
 800d56e:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 800d570:	2392      	movs	r3, #146	@ 0x92
 800d572:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800d574:	1dfb      	adds	r3, r7, #7
 800d576:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800d578:	2301      	movs	r3, #1
 800d57a:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800d57c:	f107 0308 	add.w	r3, r7, #8
 800d580:	2100      	movs	r1, #0
 800d582:	4618      	mov	r0, r3
 800d584:	f000 ffec 	bl	800e560 <hci_send_req>
 800d588:	4603      	mov	r3, r0
 800d58a:	2b00      	cmp	r3, #0
 800d58c:	da01      	bge.n	800d592 <aci_gap_configure_filter_accept_list+0x3e>
    return BLE_STATUS_TIMEOUT;
 800d58e:	23ff      	movs	r3, #255	@ 0xff
 800d590:	e000      	b.n	800d594 <aci_gap_configure_filter_accept_list+0x40>
  return status;
 800d592:	79fb      	ldrb	r3, [r7, #7]
}
 800d594:	4618      	mov	r0, r3
 800d596:	3720      	adds	r7, #32
 800d598:	46bd      	mov	sp, r7
 800d59a:	bd80      	pop	{r7, pc}

0800d59c <aci_gap_numeric_comparison_value_confirm_yesno>:
  return status;
}

tBleStatus aci_gap_numeric_comparison_value_confirm_yesno( uint16_t Connection_Handle,
                                                           uint8_t Confirm_Yes_No )
{
 800d59c:	b580      	push	{r7, lr}
 800d59e:	b0cc      	sub	sp, #304	@ 0x130
 800d5a0:	af00      	add	r7, sp, #0
 800d5a2:	4602      	mov	r2, r0
 800d5a4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d5a8:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800d5ac:	801a      	strh	r2, [r3, #0]
 800d5ae:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d5b2:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 800d5b6:	460a      	mov	r2, r1
 800d5b8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_numeric_comparison_value_confirm_yesno_cp0 *cp0 = (aci_gap_numeric_comparison_value_confirm_yesno_cp0*)(cmd_buffer);
 800d5ba:	f107 0310 	add.w	r3, r7, #16
 800d5be:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800d5c2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d5c6:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800d5ca:	2200      	movs	r2, #0
 800d5cc:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800d5ce:	2300      	movs	r3, #0
 800d5d0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 800d5d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800d5d8:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800d5dc:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800d5e0:	8812      	ldrh	r2, [r2, #0]
 800d5e2:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800d5e4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d5e8:	3302      	adds	r3, #2
 800d5ea:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Confirm_Yes_No = Confirm_Yes_No;
 800d5ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800d5f2:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800d5f6:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 800d5fa:	7812      	ldrb	r2, [r2, #0]
 800d5fc:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800d5fe:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d602:	3301      	adds	r3, #1
 800d604:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800d608:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d60c:	2218      	movs	r2, #24
 800d60e:	2100      	movs	r1, #0
 800d610:	4618      	mov	r0, r3
 800d612:	f000 fd1c 	bl	800e04e <Osal_MemSet>
  rq.ogf = 0x3f;
 800d616:	233f      	movs	r3, #63	@ 0x3f
 800d618:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x0a5;
 800d61c:	23a5      	movs	r3, #165	@ 0xa5
 800d61e:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800d622:	f107 0310 	add.w	r3, r7, #16
 800d626:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800d62a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d62e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800d632:	f107 030f 	add.w	r3, r7, #15
 800d636:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800d63a:	2301      	movs	r3, #1
 800d63c:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800d640:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d644:	2100      	movs	r1, #0
 800d646:	4618      	mov	r0, r3
 800d648:	f000 ff8a 	bl	800e560 <hci_send_req>
 800d64c:	4603      	mov	r3, r0
 800d64e:	2b00      	cmp	r3, #0
 800d650:	da01      	bge.n	800d656 <aci_gap_numeric_comparison_value_confirm_yesno+0xba>
    return BLE_STATUS_TIMEOUT;
 800d652:	23ff      	movs	r3, #255	@ 0xff
 800d654:	e004      	b.n	800d660 <aci_gap_numeric_comparison_value_confirm_yesno+0xc4>
  return status;
 800d656:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d65a:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800d65e:	781b      	ldrb	r3, [r3, #0]
}
 800d660:	4618      	mov	r0, r3
 800d662:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800d666:	46bd      	mov	sp, r7
 800d668:	bd80      	pop	{r7, pc}

0800d66a <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 800d66a:	b580      	push	{r7, lr}
 800d66c:	b088      	sub	sp, #32
 800d66e:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800d670:	2300      	movs	r3, #0
 800d672:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800d674:	f107 0308 	add.w	r3, r7, #8
 800d678:	2218      	movs	r2, #24
 800d67a:	2100      	movs	r1, #0
 800d67c:	4618      	mov	r0, r3
 800d67e:	f000 fce6 	bl	800e04e <Osal_MemSet>
  rq.ogf = 0x3f;
 800d682:	233f      	movs	r3, #63	@ 0x3f
 800d684:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 800d686:	f240 1301 	movw	r3, #257	@ 0x101
 800d68a:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800d68c:	1dfb      	adds	r3, r7, #7
 800d68e:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800d690:	2301      	movs	r3, #1
 800d692:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800d694:	f107 0308 	add.w	r3, r7, #8
 800d698:	2100      	movs	r1, #0
 800d69a:	4618      	mov	r0, r3
 800d69c:	f000 ff60 	bl	800e560 <hci_send_req>
 800d6a0:	4603      	mov	r3, r0
 800d6a2:	2b00      	cmp	r3, #0
 800d6a4:	da01      	bge.n	800d6aa <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 800d6a6:	23ff      	movs	r3, #255	@ 0xff
 800d6a8:	e000      	b.n	800d6ac <aci_gatt_init+0x42>
  return status;
 800d6aa:	79fb      	ldrb	r3, [r7, #7]
}
 800d6ac:	4618      	mov	r0, r3
 800d6ae:	3720      	adds	r7, #32
 800d6b0:	46bd      	mov	sp, r7
 800d6b2:	bd80      	pop	{r7, pc}

0800d6b4 <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 800d6b4:	b590      	push	{r4, r7, lr}
 800d6b6:	b0cf      	sub	sp, #316	@ 0x13c
 800d6b8:	af00      	add	r7, sp, #0
 800d6ba:	4604      	mov	r4, r0
 800d6bc:	f507 709c 	add.w	r0, r7, #312	@ 0x138
 800d6c0:	f5a0 709c 	sub.w	r0, r0, #312	@ 0x138
 800d6c4:	6001      	str	r1, [r0, #0]
 800d6c6:	4610      	mov	r0, r2
 800d6c8:	4619      	mov	r1, r3
 800d6ca:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800d6ce:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 800d6d2:	4622      	mov	r2, r4
 800d6d4:	701a      	strb	r2, [r3, #0]
 800d6d6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800d6da:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 800d6de:	4602      	mov	r2, r0
 800d6e0:	701a      	strb	r2, [r3, #0]
 800d6e2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800d6e6:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 800d6ea:	460a      	mov	r2, r1
 800d6ec:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 800d6ee:	f107 0310 	add.w	r3, r7, #16
 800d6f2:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 800d6f6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800d6fa:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 800d6fe:	781b      	ldrb	r3, [r3, #0]
 800d700:	2b01      	cmp	r3, #1
 800d702:	d00a      	beq.n	800d71a <aci_gatt_add_service+0x66>
 800d704:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800d708:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 800d70c:	781b      	ldrb	r3, [r3, #0]
 800d70e:	2b02      	cmp	r3, #2
 800d710:	d101      	bne.n	800d716 <aci_gatt_add_service+0x62>
 800d712:	2311      	movs	r3, #17
 800d714:	e002      	b.n	800d71c <aci_gatt_add_service+0x68>
 800d716:	2301      	movs	r3, #1
 800d718:	e000      	b.n	800d71c <aci_gatt_add_service+0x68>
 800d71a:	2303      	movs	r3, #3
 800d71c:	f107 0210 	add.w	r2, r7, #16
 800d720:	4413      	add	r3, r2
 800d722:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800d726:	f107 030c 	add.w	r3, r7, #12
 800d72a:	2203      	movs	r2, #3
 800d72c:	2100      	movs	r1, #0
 800d72e:	4618      	mov	r0, r3
 800d730:	f000 fc8d 	bl	800e04e <Osal_MemSet>
  int index_input = 0;
 800d734:	2300      	movs	r3, #0
 800d736:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 800d73a:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800d73e:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800d742:	f2a2 1231 	subw	r2, r2, #305	@ 0x131
 800d746:	7812      	ldrb	r2, [r2, #0]
 800d748:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800d74a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d74e:	3301      	adds	r3, #1
 800d750:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 800d754:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800d758:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 800d75c:	781b      	ldrb	r3, [r3, #0]
 800d75e:	2b01      	cmp	r3, #1
 800d760:	d002      	beq.n	800d768 <aci_gatt_add_service+0xb4>
 800d762:	2b02      	cmp	r3, #2
 800d764:	d004      	beq.n	800d770 <aci_gatt_add_service+0xbc>
 800d766:	e007      	b.n	800d778 <aci_gatt_add_service+0xc4>
    {
      case 1: size = 2; break;
 800d768:	2302      	movs	r3, #2
 800d76a:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
 800d76e:	e005      	b.n	800d77c <aci_gatt_add_service+0xc8>
      case 2: size = 16; break;
 800d770:	2310      	movs	r3, #16
 800d772:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
 800d776:	e001      	b.n	800d77c <aci_gatt_add_service+0xc8>
      default: return BLE_STATUS_ERROR;
 800d778:	2397      	movs	r3, #151	@ 0x97
 800d77a:	e06c      	b.n	800d856 <aci_gatt_add_service+0x1a2>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 800d77c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800d780:	1c58      	adds	r0, r3, #1
 800d782:	f897 2137 	ldrb.w	r2, [r7, #311]	@ 0x137
 800d786:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800d78a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800d78e:	6819      	ldr	r1, [r3, #0]
 800d790:	f000 fc4d 	bl	800e02e <Osal_MemCpy>
    index_input += size;
 800d794:	f897 3137 	ldrb.w	r3, [r7, #311]	@ 0x137
 800d798:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800d79c:	4413      	add	r3, r2
 800d79e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Service_Type = Service_Type;
 800d7a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800d7a6:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800d7aa:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 800d7ae:	7812      	ldrb	r2, [r2, #0]
 800d7b0:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 800d7b2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d7b6:	3301      	adds	r3, #1
 800d7b8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 800d7bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800d7c0:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800d7c4:	f2a2 1233 	subw	r2, r2, #307	@ 0x133
 800d7c8:	7812      	ldrb	r2, [r2, #0]
 800d7ca:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 800d7cc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d7d0:	3301      	adds	r3, #1
 800d7d2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800d7d6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d7da:	2218      	movs	r2, #24
 800d7dc:	2100      	movs	r1, #0
 800d7de:	4618      	mov	r0, r3
 800d7e0:	f000 fc35 	bl	800e04e <Osal_MemSet>
  rq.ogf = 0x3f;
 800d7e4:	233f      	movs	r3, #63	@ 0x3f
 800d7e6:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x102;
 800d7ea:	f44f 7381 	mov.w	r3, #258	@ 0x102
 800d7ee:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800d7f2:	f107 0310 	add.w	r3, r7, #16
 800d7f6:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800d7fa:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d7fe:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &resp;
 800d802:	f107 030c 	add.w	r3, r7, #12
 800d806:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = sizeof(resp);
 800d80a:	2303      	movs	r3, #3
 800d80c:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800d810:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d814:	2100      	movs	r1, #0
 800d816:	4618      	mov	r0, r3
 800d818:	f000 fea2 	bl	800e560 <hci_send_req>
 800d81c:	4603      	mov	r3, r0
 800d81e:	2b00      	cmp	r3, #0
 800d820:	da01      	bge.n	800d826 <aci_gatt_add_service+0x172>
    return BLE_STATUS_TIMEOUT;
 800d822:	23ff      	movs	r3, #255	@ 0xff
 800d824:	e017      	b.n	800d856 <aci_gatt_add_service+0x1a2>
  if ( resp.Status )
 800d826:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800d82a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800d82e:	781b      	ldrb	r3, [r3, #0]
 800d830:	2b00      	cmp	r3, #0
 800d832:	d005      	beq.n	800d840 <aci_gatt_add_service+0x18c>
    return resp.Status;
 800d834:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800d838:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800d83c:	781b      	ldrb	r3, [r3, #0]
 800d83e:	e00a      	b.n	800d856 <aci_gatt_add_service+0x1a2>
  *Service_Handle = resp.Service_Handle;
 800d840:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800d844:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800d848:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800d84c:	b29a      	uxth	r2, r3
 800d84e:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800d852:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800d854:	2300      	movs	r3, #0
}
 800d856:	4618      	mov	r0, r3
 800d858:	f507 779e 	add.w	r7, r7, #316	@ 0x13c
 800d85c:	46bd      	mov	sp, r7
 800d85e:	bd90      	pop	{r4, r7, pc}

0800d860 <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 800d860:	b590      	push	{r4, r7, lr}
 800d862:	b0d1      	sub	sp, #324	@ 0x144
 800d864:	af00      	add	r7, sp, #0
 800d866:	4604      	mov	r4, r0
 800d868:	4608      	mov	r0, r1
 800d86a:	f507 71a0 	add.w	r1, r7, #320	@ 0x140
 800d86e:	f5a1 719c 	sub.w	r1, r1, #312	@ 0x138
 800d872:	600a      	str	r2, [r1, #0]
 800d874:	4619      	mov	r1, r3
 800d876:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800d87a:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 800d87e:	4622      	mov	r2, r4
 800d880:	801a      	strh	r2, [r3, #0]
 800d882:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800d886:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 800d88a:	4602      	mov	r2, r0
 800d88c:	701a      	strb	r2, [r3, #0]
 800d88e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800d892:	f5a3 739d 	sub.w	r3, r3, #314	@ 0x13a
 800d896:	460a      	mov	r2, r1
 800d898:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 800d89a:	f107 0318 	add.w	r3, r7, #24
 800d89e:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 800d8a2:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800d8a6:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 800d8aa:	781b      	ldrb	r3, [r3, #0]
 800d8ac:	2b01      	cmp	r3, #1
 800d8ae:	d00a      	beq.n	800d8c6 <aci_gatt_add_char+0x66>
 800d8b0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800d8b4:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 800d8b8:	781b      	ldrb	r3, [r3, #0]
 800d8ba:	2b02      	cmp	r3, #2
 800d8bc:	d101      	bne.n	800d8c2 <aci_gatt_add_char+0x62>
 800d8be:	2313      	movs	r3, #19
 800d8c0:	e002      	b.n	800d8c8 <aci_gatt_add_char+0x68>
 800d8c2:	2303      	movs	r3, #3
 800d8c4:	e000      	b.n	800d8c8 <aci_gatt_add_char+0x68>
 800d8c6:	2305      	movs	r3, #5
 800d8c8:	f107 0218 	add.w	r2, r7, #24
 800d8cc:	4413      	add	r3, r2
 800d8ce:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800d8d2:	f107 0314 	add.w	r3, r7, #20
 800d8d6:	2203      	movs	r2, #3
 800d8d8:	2100      	movs	r1, #0
 800d8da:	4618      	mov	r0, r3
 800d8dc:	f000 fbb7 	bl	800e04e <Osal_MemSet>
  int index_input = 0;
 800d8e0:	2300      	movs	r3, #0
 800d8e2:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Service_Handle = Service_Handle;
 800d8e6:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800d8ea:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 800d8ee:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 800d8f2:	8812      	ldrh	r2, [r2, #0]
 800d8f4:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800d8f6:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800d8fa:	3302      	adds	r3, #2
 800d8fc:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 800d900:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800d904:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 800d908:	f2a2 1233 	subw	r2, r2, #307	@ 0x133
 800d90c:	7812      	ldrb	r2, [r2, #0]
 800d90e:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800d910:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800d914:	3301      	adds	r3, #1
 800d916:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 800d91a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800d91e:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 800d922:	781b      	ldrb	r3, [r3, #0]
 800d924:	2b01      	cmp	r3, #1
 800d926:	d002      	beq.n	800d92e <aci_gatt_add_char+0xce>
 800d928:	2b02      	cmp	r3, #2
 800d92a:	d004      	beq.n	800d936 <aci_gatt_add_char+0xd6>
 800d92c:	e007      	b.n	800d93e <aci_gatt_add_char+0xde>
    {
      case 1: size = 2; break;
 800d92e:	2302      	movs	r3, #2
 800d930:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
 800d934:	e005      	b.n	800d942 <aci_gatt_add_char+0xe2>
      case 2: size = 16; break;
 800d936:	2310      	movs	r3, #16
 800d938:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
 800d93c:	e001      	b.n	800d942 <aci_gatt_add_char+0xe2>
      default: return BLE_STATUS_ERROR;
 800d93e:	2397      	movs	r3, #151	@ 0x97
 800d940:	e091      	b.n	800da66 <aci_gatt_add_char+0x206>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 800d942:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800d946:	1cd8      	adds	r0, r3, #3
 800d948:	f897 213f 	ldrb.w	r2, [r7, #319]	@ 0x13f
 800d94c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800d950:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800d954:	6819      	ldr	r1, [r3, #0]
 800d956:	f000 fb6a 	bl	800e02e <Osal_MemCpy>
    index_input += size;
 800d95a:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 800d95e:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 800d962:	4413      	add	r3, r2
 800d964:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 800d968:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800d96c:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 800d970:	f5a2 729d 	sub.w	r2, r2, #314	@ 0x13a
 800d974:	8812      	ldrh	r2, [r2, #0]
 800d976:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 800d978:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800d97c:	3302      	adds	r3, #2
 800d97e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Char_Properties = Char_Properties;
 800d982:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800d986:	f897 2150 	ldrb.w	r2, [r7, #336]	@ 0x150
 800d98a:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 800d98c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800d990:	3301      	adds	r3, #1
 800d992:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 800d996:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800d99a:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 800d99e:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 800d9a0:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800d9a4:	3301      	adds	r3, #1
 800d9a6:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 800d9aa:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800d9ae:	f897 2158 	ldrb.w	r2, [r7, #344]	@ 0x158
 800d9b2:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 800d9b4:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800d9b8:	3301      	adds	r3, #1
 800d9ba:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 800d9be:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800d9c2:	f897 215c 	ldrb.w	r2, [r7, #348]	@ 0x15c
 800d9c6:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 800d9c8:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800d9cc:	3301      	adds	r3, #1
 800d9ce:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Is_Variable = Is_Variable;
 800d9d2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800d9d6:	f897 2160 	ldrb.w	r2, [r7, #352]	@ 0x160
 800d9da:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 800d9dc:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800d9e0:	3301      	adds	r3, #1
 800d9e2:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800d9e6:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800d9ea:	2218      	movs	r2, #24
 800d9ec:	2100      	movs	r1, #0
 800d9ee:	4618      	mov	r0, r3
 800d9f0:	f000 fb2d 	bl	800e04e <Osal_MemSet>
  rq.ogf = 0x3f;
 800d9f4:	233f      	movs	r3, #63	@ 0x3f
 800d9f6:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
  rq.ocf = 0x104;
 800d9fa:	f44f 7382 	mov.w	r3, #260	@ 0x104
 800d9fe:	f8a7 311a 	strh.w	r3, [r7, #282]	@ 0x11a
  rq.cparam = cmd_buffer;
 800da02:	f107 0318 	add.w	r3, r7, #24
 800da06:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.clen = index_input;
 800da0a:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800da0e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  rq.rparam = &resp;
 800da12:	f107 0314 	add.w	r3, r7, #20
 800da16:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  rq.rlen = sizeof(resp);
 800da1a:	2303      	movs	r3, #3
 800da1c:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 800da20:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800da24:	2100      	movs	r1, #0
 800da26:	4618      	mov	r0, r3
 800da28:	f000 fd9a 	bl	800e560 <hci_send_req>
 800da2c:	4603      	mov	r3, r0
 800da2e:	2b00      	cmp	r3, #0
 800da30:	da01      	bge.n	800da36 <aci_gatt_add_char+0x1d6>
    return BLE_STATUS_TIMEOUT;
 800da32:	23ff      	movs	r3, #255	@ 0xff
 800da34:	e017      	b.n	800da66 <aci_gatt_add_char+0x206>
  if ( resp.Status )
 800da36:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800da3a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800da3e:	781b      	ldrb	r3, [r3, #0]
 800da40:	2b00      	cmp	r3, #0
 800da42:	d005      	beq.n	800da50 <aci_gatt_add_char+0x1f0>
    return resp.Status;
 800da44:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800da48:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800da4c:	781b      	ldrb	r3, [r3, #0]
 800da4e:	e00a      	b.n	800da66 <aci_gatt_add_char+0x206>
  *Char_Handle = resp.Char_Handle;
 800da50:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800da54:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800da58:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800da5c:	b29a      	uxth	r2, r3
 800da5e:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 800da62:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800da64:	2300      	movs	r3, #0
}
 800da66:	4618      	mov	r0, r3
 800da68:	f507 77a2 	add.w	r7, r7, #324	@ 0x144
 800da6c:	46bd      	mov	sp, r7
 800da6e:	bd90      	pop	{r4, r7, pc}

0800da70 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 800da70:	b5b0      	push	{r4, r5, r7, lr}
 800da72:	b0cc      	sub	sp, #304	@ 0x130
 800da74:	af00      	add	r7, sp, #0
 800da76:	4605      	mov	r5, r0
 800da78:	460c      	mov	r4, r1
 800da7a:	4610      	mov	r0, r2
 800da7c:	4619      	mov	r1, r3
 800da7e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800da82:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800da86:	462a      	mov	r2, r5
 800da88:	801a      	strh	r2, [r3, #0]
 800da8a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800da8e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800da92:	4622      	mov	r2, r4
 800da94:	801a      	strh	r2, [r3, #0]
 800da96:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800da9a:	f2a3 132d 	subw	r3, r3, #301	@ 0x12d
 800da9e:	4602      	mov	r2, r0
 800daa0:	701a      	strb	r2, [r3, #0]
 800daa2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800daa6:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 800daaa:	460a      	mov	r2, r1
 800daac:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 800daae:	f107 0310 	add.w	r3, r7, #16
 800dab2:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800dab6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800daba:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800dabe:	2200      	movs	r2, #0
 800dac0:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800dac2:	2300      	movs	r3, #0
 800dac4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Service_Handle = Service_Handle;
 800dac8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800dacc:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800dad0:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800dad4:	8812      	ldrh	r2, [r2, #0]
 800dad6:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800dad8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800dadc:	3302      	adds	r3, #2
 800dade:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Char_Handle = Char_Handle;
 800dae2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800dae6:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800daea:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 800daee:	8812      	ldrh	r2, [r2, #0]
 800daf0:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 800daf2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800daf6:	3302      	adds	r3, #2
 800daf8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Val_Offset = Val_Offset;
 800dafc:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800db00:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800db04:	f2a2 122d 	subw	r2, r2, #301	@ 0x12d
 800db08:	7812      	ldrb	r2, [r2, #0]
 800db0a:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800db0c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800db10:	3301      	adds	r3, #1
 800db12:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 800db16:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800db1a:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800db1e:	f5a2 7297 	sub.w	r2, r2, #302	@ 0x12e
 800db22:	7812      	ldrb	r2, [r2, #0]
 800db24:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800db26:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800db2a:	3301      	adds	r3, #1
 800db2c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 800db30:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800db34:	1d98      	adds	r0, r3, #6
 800db36:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800db3a:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 800db3e:	781b      	ldrb	r3, [r3, #0]
 800db40:	461a      	mov	r2, r3
 800db42:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 800db46:	f000 fa72 	bl	800e02e <Osal_MemCpy>
  index_input += Char_Value_Length;
 800db4a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800db4e:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 800db52:	781b      	ldrb	r3, [r3, #0]
 800db54:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800db58:	4413      	add	r3, r2
 800db5a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800db5e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800db62:	2218      	movs	r2, #24
 800db64:	2100      	movs	r1, #0
 800db66:	4618      	mov	r0, r3
 800db68:	f000 fa71 	bl	800e04e <Osal_MemSet>
  rq.ogf = 0x3f;
 800db6c:	233f      	movs	r3, #63	@ 0x3f
 800db6e:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x106;
 800db72:	f44f 7383 	mov.w	r3, #262	@ 0x106
 800db76:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800db7a:	f107 0310 	add.w	r3, r7, #16
 800db7e:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800db82:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800db86:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800db8a:	f107 030f 	add.w	r3, r7, #15
 800db8e:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800db92:	2301      	movs	r3, #1
 800db94:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800db98:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800db9c:	2100      	movs	r1, #0
 800db9e:	4618      	mov	r0, r3
 800dba0:	f000 fcde 	bl	800e560 <hci_send_req>
 800dba4:	4603      	mov	r3, r0
 800dba6:	2b00      	cmp	r3, #0
 800dba8:	da01      	bge.n	800dbae <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 800dbaa:	23ff      	movs	r3, #255	@ 0xff
 800dbac:	e004      	b.n	800dbb8 <aci_gatt_update_char_value+0x148>
  return status;
 800dbae:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800dbb2:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800dbb6:	781b      	ldrb	r3, [r3, #0]
}
 800dbb8:	4618      	mov	r0, r3
 800dbba:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800dbbe:	46bd      	mov	sp, r7
 800dbc0:	bdb0      	pop	{r4, r5, r7, pc}

0800dbc2 <aci_gatt_confirm_indication>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gatt_confirm_indication( uint16_t Connection_Handle )
{
 800dbc2:	b580      	push	{r7, lr}
 800dbc4:	b0cc      	sub	sp, #304	@ 0x130
 800dbc6:	af00      	add	r7, sp, #0
 800dbc8:	4602      	mov	r2, r0
 800dbca:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800dbce:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800dbd2:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_confirm_indication_cp0 *cp0 = (aci_gatt_confirm_indication_cp0*)(cmd_buffer);
 800dbd4:	f107 0310 	add.w	r3, r7, #16
 800dbd8:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800dbdc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800dbe0:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800dbe4:	2200      	movs	r2, #0
 800dbe6:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800dbe8:	2300      	movs	r3, #0
 800dbea:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 800dbee:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800dbf2:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800dbf6:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800dbfa:	8812      	ldrh	r2, [r2, #0]
 800dbfc:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800dbfe:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800dc02:	3302      	adds	r3, #2
 800dc04:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800dc08:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800dc0c:	2218      	movs	r2, #24
 800dc0e:	2100      	movs	r1, #0
 800dc10:	4618      	mov	r0, r3
 800dc12:	f000 fa1c 	bl	800e04e <Osal_MemSet>
  rq.ogf = 0x3f;
 800dc16:	233f      	movs	r3, #63	@ 0x3f
 800dc18:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x125;
 800dc1c:	f240 1325 	movw	r3, #293	@ 0x125
 800dc20:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800dc24:	f107 0310 	add.w	r3, r7, #16
 800dc28:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800dc2c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800dc30:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800dc34:	f107 030f 	add.w	r3, r7, #15
 800dc38:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800dc3c:	2301      	movs	r3, #1
 800dc3e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800dc42:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800dc46:	2100      	movs	r1, #0
 800dc48:	4618      	mov	r0, r3
 800dc4a:	f000 fc89 	bl	800e560 <hci_send_req>
 800dc4e:	4603      	mov	r3, r0
 800dc50:	2b00      	cmp	r3, #0
 800dc52:	da01      	bge.n	800dc58 <aci_gatt_confirm_indication+0x96>
    return BLE_STATUS_TIMEOUT;
 800dc54:	23ff      	movs	r3, #255	@ 0xff
 800dc56:	e004      	b.n	800dc62 <aci_gatt_confirm_indication+0xa0>
  return status;
 800dc58:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800dc5c:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800dc60:	781b      	ldrb	r3, [r3, #0]
}
 800dc62:	4618      	mov	r0, r3
 800dc64:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800dc68:	46bd      	mov	sp, r7
 800dc6a:	bd80      	pop	{r7, pc}

0800dc6c <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 800dc6c:	b580      	push	{r7, lr}
 800dc6e:	b0cc      	sub	sp, #304	@ 0x130
 800dc70:	af00      	add	r7, sp, #0
 800dc72:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800dc76:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800dc7a:	601a      	str	r2, [r3, #0]
 800dc7c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800dc80:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800dc84:	4602      	mov	r2, r0
 800dc86:	701a      	strb	r2, [r3, #0]
 800dc88:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800dc8c:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800dc90:	460a      	mov	r2, r1
 800dc92:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 800dc94:	f107 0310 	add.w	r3, r7, #16
 800dc98:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800dc9c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800dca0:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800dca4:	2200      	movs	r2, #0
 800dca6:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800dca8:	2300      	movs	r3, #0
 800dcaa:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Offset = Offset;
 800dcae:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800dcb2:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800dcb6:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800dcba:	7812      	ldrb	r2, [r2, #0]
 800dcbc:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800dcbe:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800dcc2:	3301      	adds	r3, #1
 800dcc4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Length = Length;
 800dcc8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800dccc:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800dcd0:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800dcd4:	7812      	ldrb	r2, [r2, #0]
 800dcd6:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800dcd8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800dcdc:	3301      	adds	r3, #1
 800dcde:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 800dce2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800dce6:	1c98      	adds	r0, r3, #2
 800dce8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800dcec:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800dcf0:	781a      	ldrb	r2, [r3, #0]
 800dcf2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800dcf6:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800dcfa:	6819      	ldr	r1, [r3, #0]
 800dcfc:	f000 f997 	bl	800e02e <Osal_MemCpy>
  index_input += Length;
 800dd00:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800dd04:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800dd08:	781b      	ldrb	r3, [r3, #0]
 800dd0a:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800dd0e:	4413      	add	r3, r2
 800dd10:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800dd14:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800dd18:	2218      	movs	r2, #24
 800dd1a:	2100      	movs	r1, #0
 800dd1c:	4618      	mov	r0, r3
 800dd1e:	f000 f996 	bl	800e04e <Osal_MemSet>
  rq.ogf = 0x3f;
 800dd22:	233f      	movs	r3, #63	@ 0x3f
 800dd24:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x00c;
 800dd28:	230c      	movs	r3, #12
 800dd2a:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800dd2e:	f107 0310 	add.w	r3, r7, #16
 800dd32:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800dd36:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800dd3a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800dd3e:	f107 030f 	add.w	r3, r7, #15
 800dd42:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800dd46:	2301      	movs	r3, #1
 800dd48:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800dd4c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800dd50:	2100      	movs	r1, #0
 800dd52:	4618      	mov	r0, r3
 800dd54:	f000 fc04 	bl	800e560 <hci_send_req>
 800dd58:	4603      	mov	r3, r0
 800dd5a:	2b00      	cmp	r3, #0
 800dd5c:	da01      	bge.n	800dd62 <aci_hal_write_config_data+0xf6>
    return BLE_STATUS_TIMEOUT;
 800dd5e:	23ff      	movs	r3, #255	@ 0xff
 800dd60:	e004      	b.n	800dd6c <aci_hal_write_config_data+0x100>
  return status;
 800dd62:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800dd66:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800dd6a:	781b      	ldrb	r3, [r3, #0]
}
 800dd6c:	4618      	mov	r0, r3
 800dd6e:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800dd72:	46bd      	mov	sp, r7
 800dd74:	bd80      	pop	{r7, pc}

0800dd76 <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 800dd76:	b580      	push	{r7, lr}
 800dd78:	b0cc      	sub	sp, #304	@ 0x130
 800dd7a:	af00      	add	r7, sp, #0
 800dd7c:	4602      	mov	r2, r0
 800dd7e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800dd82:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800dd86:	701a      	strb	r2, [r3, #0]
 800dd88:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800dd8c:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800dd90:	460a      	mov	r2, r1
 800dd92:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 800dd94:	f107 0310 	add.w	r3, r7, #16
 800dd98:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800dd9c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800dda0:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800dda4:	2200      	movs	r2, #0
 800dda6:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800dda8:	2300      	movs	r3, #0
 800ddaa:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->En_High_Power = En_High_Power;
 800ddae:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800ddb2:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800ddb6:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800ddba:	7812      	ldrb	r2, [r2, #0]
 800ddbc:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800ddbe:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800ddc2:	3301      	adds	r3, #1
 800ddc4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->PA_Level = PA_Level;
 800ddc8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800ddcc:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800ddd0:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800ddd4:	7812      	ldrb	r2, [r2, #0]
 800ddd6:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800ddd8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800dddc:	3301      	adds	r3, #1
 800ddde:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800dde2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800dde6:	2218      	movs	r2, #24
 800dde8:	2100      	movs	r1, #0
 800ddea:	4618      	mov	r0, r3
 800ddec:	f000 f92f 	bl	800e04e <Osal_MemSet>
  rq.ogf = 0x3f;
 800ddf0:	233f      	movs	r3, #63	@ 0x3f
 800ddf2:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x00f;
 800ddf6:	230f      	movs	r3, #15
 800ddf8:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800ddfc:	f107 0310 	add.w	r3, r7, #16
 800de00:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800de04:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800de08:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800de0c:	f107 030f 	add.w	r3, r7, #15
 800de10:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800de14:	2301      	movs	r3, #1
 800de16:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800de1a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800de1e:	2100      	movs	r1, #0
 800de20:	4618      	mov	r0, r3
 800de22:	f000 fb9d 	bl	800e560 <hci_send_req>
 800de26:	4603      	mov	r3, r0
 800de28:	2b00      	cmp	r3, #0
 800de2a:	da01      	bge.n	800de30 <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 800de2c:	23ff      	movs	r3, #255	@ 0xff
 800de2e:	e004      	b.n	800de3a <aci_hal_set_tx_power_level+0xc4>
  return status;
 800de30:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800de34:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800de38:	781b      	ldrb	r3, [r3, #0]
}
 800de3a:	4618      	mov	r0, r3
 800de3c:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800de40:	46bd      	mov	sp, r7
 800de42:	bd80      	pop	{r7, pc}

0800de44 <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy( (void*)Link_Connection_Handle, (const void*)resp.Link_Connection_Handle, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
 800de44:	b580      	push	{r7, lr}
 800de46:	b0cc      	sub	sp, #304	@ 0x130
 800de48:	af00      	add	r7, sp, #0
 800de4a:	4602      	mov	r2, r0
 800de4c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800de50:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800de54:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 800de56:	f107 0310 	add.w	r3, r7, #16
 800de5a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800de5e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800de62:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800de66:	2200      	movs	r2, #0
 800de68:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800de6a:	2300      	movs	r3, #0
 800de6c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 800de70:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800de74:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800de78:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800de7c:	8812      	ldrh	r2, [r2, #0]
 800de7e:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800de80:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800de84:	3302      	adds	r3, #2
 800de86:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800de8a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800de8e:	2218      	movs	r2, #24
 800de90:	2100      	movs	r1, #0
 800de92:	4618      	mov	r0, r3
 800de94:	f000 f8db 	bl	800e04e <Osal_MemSet>
  rq.ogf = 0x3f;
 800de98:	233f      	movs	r3, #63	@ 0x3f
 800de9a:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x018;
 800de9e:	2318      	movs	r3, #24
 800dea0:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800dea4:	f107 0310 	add.w	r3, r7, #16
 800dea8:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800deac:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800deb0:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800deb4:	f107 030f 	add.w	r3, r7, #15
 800deb8:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800debc:	2301      	movs	r3, #1
 800debe:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800dec2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800dec6:	2100      	movs	r1, #0
 800dec8:	4618      	mov	r0, r3
 800deca:	f000 fb49 	bl	800e560 <hci_send_req>
 800dece:	4603      	mov	r3, r0
 800ded0:	2b00      	cmp	r3, #0
 800ded2:	da01      	bge.n	800ded8 <aci_hal_set_radio_activity_mask+0x94>
    return BLE_STATUS_TIMEOUT;
 800ded4:	23ff      	movs	r3, #255	@ 0xff
 800ded6:	e004      	b.n	800dee2 <aci_hal_set_radio_activity_mask+0x9e>
  return status;
 800ded8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800dedc:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800dee0:	781b      	ldrb	r3, [r3, #0]
}
 800dee2:	4618      	mov	r0, r3
 800dee4:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800dee8:	46bd      	mov	sp, r7
 800deea:	bd80      	pop	{r7, pc}

0800deec <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 800deec:	b580      	push	{r7, lr}
 800deee:	b088      	sub	sp, #32
 800def0:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800def2:	2300      	movs	r3, #0
 800def4:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800def6:	f107 0308 	add.w	r3, r7, #8
 800defa:	2218      	movs	r2, #24
 800defc:	2100      	movs	r1, #0
 800defe:	4618      	mov	r0, r3
 800df00:	f000 f8a5 	bl	800e04e <Osal_MemSet>
  rq.ogf = 0x03;
 800df04:	2303      	movs	r3, #3
 800df06:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 800df08:	2303      	movs	r3, #3
 800df0a:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800df0c:	1dfb      	adds	r3, r7, #7
 800df0e:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800df10:	2301      	movs	r3, #1
 800df12:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800df14:	f107 0308 	add.w	r3, r7, #8
 800df18:	2100      	movs	r1, #0
 800df1a:	4618      	mov	r0, r3
 800df1c:	f000 fb20 	bl	800e560 <hci_send_req>
 800df20:	4603      	mov	r3, r0
 800df22:	2b00      	cmp	r3, #0
 800df24:	da01      	bge.n	800df2a <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 800df26:	23ff      	movs	r3, #255	@ 0xff
 800df28:	e000      	b.n	800df2c <hci_reset+0x40>
  return status;
 800df2a:	79fb      	ldrb	r3, [r7, #7]
}
 800df2c:	4618      	mov	r0, r3
 800df2e:	3720      	adds	r7, #32
 800df30:	46bd      	mov	sp, r7
 800df32:	bd80      	pop	{r7, pc}

0800df34 <hci_le_set_default_phy>:
}

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 800df34:	b590      	push	{r4, r7, lr}
 800df36:	b0cd      	sub	sp, #308	@ 0x134
 800df38:	af00      	add	r7, sp, #0
 800df3a:	4604      	mov	r4, r0
 800df3c:	4608      	mov	r0, r1
 800df3e:	4611      	mov	r1, r2
 800df40:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800df44:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800df48:	4622      	mov	r2, r4
 800df4a:	701a      	strb	r2, [r3, #0]
 800df4c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800df50:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800df54:	4602      	mov	r2, r0
 800df56:	701a      	strb	r2, [r3, #0]
 800df58:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800df5c:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 800df60:	460a      	mov	r2, r1
 800df62:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 800df64:	f107 0310 	add.w	r3, r7, #16
 800df68:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800df6c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800df70:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800df74:	2200      	movs	r2, #0
 800df76:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800df78:	2300      	movs	r3, #0
 800df7a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 800df7e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800df82:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800df86:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800df8a:	7812      	ldrb	r2, [r2, #0]
 800df8c:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800df8e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800df92:	3301      	adds	r3, #1
 800df94:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->TX_PHYS = TX_PHYS;
 800df98:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800df9c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800dfa0:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800dfa4:	7812      	ldrb	r2, [r2, #0]
 800dfa6:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800dfa8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800dfac:	3301      	adds	r3, #1
 800dfae:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->RX_PHYS = RX_PHYS;
 800dfb2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800dfb6:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800dfba:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 800dfbe:	7812      	ldrb	r2, [r2, #0]
 800dfc0:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800dfc2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800dfc6:	3301      	adds	r3, #1
 800dfc8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800dfcc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800dfd0:	2218      	movs	r2, #24
 800dfd2:	2100      	movs	r1, #0
 800dfd4:	4618      	mov	r0, r3
 800dfd6:	f000 f83a 	bl	800e04e <Osal_MemSet>
  rq.ogf = 0x08;
 800dfda:	2308      	movs	r3, #8
 800dfdc:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x031;
 800dfe0:	2331      	movs	r3, #49	@ 0x31
 800dfe2:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800dfe6:	f107 0310 	add.w	r3, r7, #16
 800dfea:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800dfee:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800dff2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800dff6:	f107 030f 	add.w	r3, r7, #15
 800dffa:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800dffe:	2301      	movs	r3, #1
 800e000:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800e004:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800e008:	2100      	movs	r1, #0
 800e00a:	4618      	mov	r0, r3
 800e00c:	f000 faa8 	bl	800e560 <hci_send_req>
 800e010:	4603      	mov	r3, r0
 800e012:	2b00      	cmp	r3, #0
 800e014:	da01      	bge.n	800e01a <hci_le_set_default_phy+0xe6>
    return BLE_STATUS_TIMEOUT;
 800e016:	23ff      	movs	r3, #255	@ 0xff
 800e018:	e004      	b.n	800e024 <hci_le_set_default_phy+0xf0>
  return status;
 800e01a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800e01e:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800e022:	781b      	ldrb	r3, [r3, #0]
}
 800e024:	4618      	mov	r0, r3
 800e026:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 800e02a:	46bd      	mov	sp, r7
 800e02c:	bd90      	pop	{r4, r7, pc}

0800e02e <Osal_MemCpy>:
 * Osal_MemCpy
 *
 */

void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 800e02e:	b580      	push	{r7, lr}
 800e030:	b084      	sub	sp, #16
 800e032:	af00      	add	r7, sp, #0
 800e034:	60f8      	str	r0, [r7, #12]
 800e036:	60b9      	str	r1, [r7, #8]
 800e038:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size );
 800e03a:	687a      	ldr	r2, [r7, #4]
 800e03c:	68b9      	ldr	r1, [r7, #8]
 800e03e:	68f8      	ldr	r0, [r7, #12]
 800e040:	f002 fd09 	bl	8010a56 <memcpy>
 800e044:	4603      	mov	r3, r0
}
 800e046:	4618      	mov	r0, r3
 800e048:	3710      	adds	r7, #16
 800e04a:	46bd      	mov	sp, r7
 800e04c:	bd80      	pop	{r7, pc}

0800e04e <Osal_MemSet>:
 * Osal_MemSet
 *
 */

void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 800e04e:	b580      	push	{r7, lr}
 800e050:	b084      	sub	sp, #16
 800e052:	af00      	add	r7, sp, #0
 800e054:	60f8      	str	r0, [r7, #12]
 800e056:	60b9      	str	r1, [r7, #8]
 800e058:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 800e05a:	687a      	ldr	r2, [r7, #4]
 800e05c:	68b9      	ldr	r1, [r7, #8]
 800e05e:	68f8      	ldr	r0, [r7, #12]
 800e060:	f002 fc7d 	bl	801095e <memset>
 800e064:	4603      	mov	r3, r0
}
 800e066:	4618      	mov	r0, r3
 800e068:	3710      	adds	r7, #16
 800e06a:	46bd      	mov	sp, r7
 800e06c:	bd80      	pop	{r7, pc}

0800e06e <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__WEAK void BAS_Init( void )
{
 800e06e:	b480      	push	{r7}
 800e070:	af00      	add	r7, sp, #0
  return;
 800e072:	bf00      	nop
}
 800e074:	46bd      	mov	sp, r7
 800e076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e07a:	4770      	bx	lr

0800e07c <BLS_Init>:

__WEAK void BLS_Init( void )
{
 800e07c:	b480      	push	{r7}
 800e07e:	af00      	add	r7, sp, #0
  return;
 800e080:	bf00      	nop
}
 800e082:	46bd      	mov	sp, r7
 800e084:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e088:	4770      	bx	lr

0800e08a <CRS_STM_Init>:
__WEAK void CRS_STM_Init( void )
{
 800e08a:	b480      	push	{r7}
 800e08c:	af00      	add	r7, sp, #0
  return;
 800e08e:	bf00      	nop
}
 800e090:	46bd      	mov	sp, r7
 800e092:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e096:	4770      	bx	lr

0800e098 <DIS_Init>:
__WEAK void DIS_Init( void )
{
 800e098:	b480      	push	{r7}
 800e09a:	af00      	add	r7, sp, #0
  return;
 800e09c:	bf00      	nop
}
 800e09e:	46bd      	mov	sp, r7
 800e0a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0a4:	4770      	bx	lr

0800e0a6 <EDS_STM_Init>:
__WEAK void EDS_STM_Init( void )
{
 800e0a6:	b480      	push	{r7}
 800e0a8:	af00      	add	r7, sp, #0
  return;
 800e0aa:	bf00      	nop
}
 800e0ac:	46bd      	mov	sp, r7
 800e0ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0b2:	4770      	bx	lr

0800e0b4 <HIDS_Init>:
__WEAK void HIDS_Init( void )
{
 800e0b4:	b480      	push	{r7}
 800e0b6:	af00      	add	r7, sp, #0
  return;
 800e0b8:	bf00      	nop
}
 800e0ba:	46bd      	mov	sp, r7
 800e0bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0c0:	4770      	bx	lr

0800e0c2 <HRS_Init>:
__WEAK void HRS_Init( void )
{
 800e0c2:	b480      	push	{r7}
 800e0c4:	af00      	add	r7, sp, #0
  return;
 800e0c6:	bf00      	nop
}
 800e0c8:	46bd      	mov	sp, r7
 800e0ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0ce:	4770      	bx	lr

0800e0d0 <HTS_Init>:
__WEAK void HTS_Init( void )
{
 800e0d0:	b480      	push	{r7}
 800e0d2:	af00      	add	r7, sp, #0
  return;
 800e0d4:	bf00      	nop
}
 800e0d6:	46bd      	mov	sp, r7
 800e0d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0dc:	4770      	bx	lr

0800e0de <IAS_Init>:
__WEAK void IAS_Init( void )
{
 800e0de:	b480      	push	{r7}
 800e0e0:	af00      	add	r7, sp, #0
  return;
 800e0e2:	bf00      	nop
}
 800e0e4:	46bd      	mov	sp, r7
 800e0e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0ea:	4770      	bx	lr

0800e0ec <LLS_Init>:
__WEAK void LLS_Init( void )
{
 800e0ec:	b480      	push	{r7}
 800e0ee:	af00      	add	r7, sp, #0
  return;
 800e0f0:	bf00      	nop
}
 800e0f2:	46bd      	mov	sp, r7
 800e0f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0f8:	4770      	bx	lr

0800e0fa <TPS_Init>:
__WEAK void TPS_Init( void )
{
 800e0fa:	b480      	push	{r7}
 800e0fc:	af00      	add	r7, sp, #0
  return;
 800e0fe:	bf00      	nop
}
 800e100:	46bd      	mov	sp, r7
 800e102:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e106:	4770      	bx	lr

0800e108 <MOTENV_STM_Init>:
__WEAK void MOTENV_STM_Init( void )
{
 800e108:	b480      	push	{r7}
 800e10a:	af00      	add	r7, sp, #0
  return;
 800e10c:	bf00      	nop
}
 800e10e:	46bd      	mov	sp, r7
 800e110:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e114:	4770      	bx	lr

0800e116 <P2PS_STM_Init>:
__WEAK void P2PS_STM_Init( void )
{
 800e116:	b480      	push	{r7}
 800e118:	af00      	add	r7, sp, #0
  return;
 800e11a:	bf00      	nop
}
 800e11c:	46bd      	mov	sp, r7
 800e11e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e122:	4770      	bx	lr

0800e124 <ZDD_STM_Init>:
__WEAK void ZDD_STM_Init( void )
{
 800e124:	b480      	push	{r7}
 800e126:	af00      	add	r7, sp, #0
  return;
 800e128:	bf00      	nop
}
 800e12a:	46bd      	mov	sp, r7
 800e12c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e130:	4770      	bx	lr

0800e132 <OTAS_STM_Init>:
__WEAK void OTAS_STM_Init( void )
{
 800e132:	b480      	push	{r7}
 800e134:	af00      	add	r7, sp, #0
  return;
 800e136:	bf00      	nop
}
 800e138:	46bd      	mov	sp, r7
 800e13a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e13e:	4770      	bx	lr

0800e140 <MESH_Init>:
__WEAK void MESH_Init( void )
{
 800e140:	b480      	push	{r7}
 800e142:	af00      	add	r7, sp, #0
  return;
 800e144:	bf00      	nop
}
 800e146:	46bd      	mov	sp, r7
 800e148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e14c:	4770      	bx	lr

0800e14e <BVOPUS_STM_Init>:
__WEAK void BVOPUS_STM_Init( void )
{
 800e14e:	b480      	push	{r7}
 800e150:	af00      	add	r7, sp, #0
  return;
 800e152:	bf00      	nop
}
 800e154:	46bd      	mov	sp, r7
 800e156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e15a:	4770      	bx	lr

0800e15c <SVCCTL_Init>:
}

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 800e15c:	b580      	push	{r7, lr}
 800e15e:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 800e160:	4b04      	ldr	r3, [pc, #16]	@ (800e174 <SVCCTL_Init+0x18>)
 800e162:	2200      	movs	r2, #0
 800e164:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 800e166:	4b04      	ldr	r3, [pc, #16]	@ (800e178 <SVCCTL_Init+0x1c>)
 800e168:	2200      	movs	r2, #0
 800e16a:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 800e16c:	f000 f806 	bl	800e17c <SVCCTL_SvcInit>

  return;
 800e170:	bf00      	nop
}
 800e172:	bd80      	pop	{r7, pc}
 800e174:	200000e0 	.word	0x200000e0
 800e178:	20000100 	.word	0x20000100

0800e17c <SVCCTL_SvcInit>:

__WEAK void SVCCTL_SvcInit(void)
{
 800e17c:	b580      	push	{r7, lr}
 800e17e:	af00      	add	r7, sp, #0
  BAS_Init();
 800e180:	f7ff ff75 	bl	800e06e <BAS_Init>

  BLS_Init();
 800e184:	f7ff ff7a 	bl	800e07c <BLS_Init>

  CRS_STM_Init();
 800e188:	f7ff ff7f 	bl	800e08a <CRS_STM_Init>

  DIS_Init();
 800e18c:	f7ff ff84 	bl	800e098 <DIS_Init>

  EDS_STM_Init();
 800e190:	f7ff ff89 	bl	800e0a6 <EDS_STM_Init>

  HIDS_Init();
 800e194:	f7ff ff8e 	bl	800e0b4 <HIDS_Init>

  HRS_Init();
 800e198:	f7ff ff93 	bl	800e0c2 <HRS_Init>

  HTS_Init();
 800e19c:	f7ff ff98 	bl	800e0d0 <HTS_Init>

  IAS_Init();
 800e1a0:	f7ff ff9d 	bl	800e0de <IAS_Init>

  LLS_Init();
 800e1a4:	f7ff ffa2 	bl	800e0ec <LLS_Init>

  TPS_Init();
 800e1a8:	f7ff ffa7 	bl	800e0fa <TPS_Init>

  MOTENV_STM_Init();
 800e1ac:	f7ff ffac 	bl	800e108 <MOTENV_STM_Init>

  P2PS_STM_Init();
 800e1b0:	f7ff ffb1 	bl	800e116 <P2PS_STM_Init>

  ZDD_STM_Init();
 800e1b4:	f7ff ffb6 	bl	800e124 <ZDD_STM_Init>

  OTAS_STM_Init();
 800e1b8:	f7ff ffbb 	bl	800e132 <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 800e1bc:	f7ff ffc7 	bl	800e14e <BVOPUS_STM_Init>

  MESH_Init();
 800e1c0:	f7ff ffbe 	bl	800e140 <MESH_Init>

  SVCCTL_InitCustomSvc();
 800e1c4:	f001 fcce 	bl	800fb64 <SVCCTL_InitCustomSvc>
  
  return;
 800e1c8:	bf00      	nop
}
 800e1ca:	bd80      	pop	{r7, pc}

0800e1cc <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 800e1cc:	b480      	push	{r7}
 800e1ce:	b083      	sub	sp, #12
 800e1d0:	af00      	add	r7, sp, #0
 800e1d2:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 800e1d4:	4b09      	ldr	r3, [pc, #36]	@ (800e1fc <SVCCTL_RegisterSvcHandler+0x30>)
 800e1d6:	7f1b      	ldrb	r3, [r3, #28]
 800e1d8:	4619      	mov	r1, r3
 800e1da:	4a08      	ldr	r2, [pc, #32]	@ (800e1fc <SVCCTL_RegisterSvcHandler+0x30>)
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 800e1e2:	4b06      	ldr	r3, [pc, #24]	@ (800e1fc <SVCCTL_RegisterSvcHandler+0x30>)
 800e1e4:	7f1b      	ldrb	r3, [r3, #28]
 800e1e6:	3301      	adds	r3, #1
 800e1e8:	b2da      	uxtb	r2, r3
 800e1ea:	4b04      	ldr	r3, [pc, #16]	@ (800e1fc <SVCCTL_RegisterSvcHandler+0x30>)
 800e1ec:	771a      	strb	r2, [r3, #28]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 800e1ee:	bf00      	nop
}
 800e1f0:	370c      	adds	r7, #12
 800e1f2:	46bd      	mov	sp, r7
 800e1f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1f8:	4770      	bx	lr
 800e1fa:	bf00      	nop
 800e1fc:	200000e0 	.word	0x200000e0

0800e200 <SVCCTL_UserEvtRx>:

  return;
}

__WEAK SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 800e200:	b580      	push	{r7, lr}
 800e202:	b086      	sub	sp, #24
 800e204:	af00      	add	r7, sp, #0
 800e206:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	3301      	adds	r3, #1
 800e20c:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 800e20e:	2300      	movs	r3, #0
 800e210:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 800e212:	693b      	ldr	r3, [r7, #16]
 800e214:	781b      	ldrb	r3, [r3, #0]
 800e216:	2bff      	cmp	r3, #255	@ 0xff
 800e218:	d125      	bne.n	800e266 <SVCCTL_UserEvtRx+0x66>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 800e21a:	693b      	ldr	r3, [r7, #16]
 800e21c:	3302      	adds	r3, #2
 800e21e:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 800e220:	68fb      	ldr	r3, [r7, #12]
 800e222:	881b      	ldrh	r3, [r3, #0]
 800e224:	b29b      	uxth	r3, r3
 800e226:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800e22a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800e22e:	d118      	bne.n	800e262 <SVCCTL_UserEvtRx+0x62>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800e230:	2300      	movs	r3, #0
 800e232:	757b      	strb	r3, [r7, #21]
 800e234:	e00d      	b.n	800e252 <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 800e236:	7d7b      	ldrb	r3, [r7, #21]
 800e238:	4a1a      	ldr	r2, [pc, #104]	@ (800e2a4 <SVCCTL_UserEvtRx+0xa4>)
 800e23a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e23e:	6878      	ldr	r0, [r7, #4]
 800e240:	4798      	blx	r3
 800e242:	4603      	mov	r3, r0
 800e244:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 800e246:	7dfb      	ldrb	r3, [r7, #23]
 800e248:	2b00      	cmp	r3, #0
 800e24a:	d108      	bne.n	800e25e <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800e24c:	7d7b      	ldrb	r3, [r7, #21]
 800e24e:	3301      	adds	r3, #1
 800e250:	757b      	strb	r3, [r7, #21]
 800e252:	4b14      	ldr	r3, [pc, #80]	@ (800e2a4 <SVCCTL_UserEvtRx+0xa4>)
 800e254:	7f1b      	ldrb	r3, [r3, #28]
 800e256:	7d7a      	ldrb	r2, [r7, #21]
 800e258:	429a      	cmp	r2, r3
 800e25a:	d3ec      	bcc.n	800e236 <SVCCTL_UserEvtRx+0x36>
               */
              break;
            }
          }
#endif
          break;
 800e25c:	e002      	b.n	800e264 <SVCCTL_UserEvtRx+0x64>
              break;
 800e25e:	bf00      	nop
          break;
 800e260:	e000      	b.n	800e264 <SVCCTL_UserEvtRx+0x64>

        default:
          break;
 800e262:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 800e264:	e000      	b.n	800e268 <SVCCTL_UserEvtRx+0x68>

    default:
      break;
 800e266:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the application.
   */
  switch (event_notification_status)
 800e268:	7dfb      	ldrb	r3, [r7, #23]
 800e26a:	2b02      	cmp	r3, #2
 800e26c:	d00f      	beq.n	800e28e <SVCCTL_UserEvtRx+0x8e>
 800e26e:	2b02      	cmp	r3, #2
 800e270:	dc10      	bgt.n	800e294 <SVCCTL_UserEvtRx+0x94>
 800e272:	2b00      	cmp	r3, #0
 800e274:	d002      	beq.n	800e27c <SVCCTL_UserEvtRx+0x7c>
 800e276:	2b01      	cmp	r3, #1
 800e278:	d006      	beq.n	800e288 <SVCCTL_UserEvtRx+0x88>
 800e27a:	e00b      	b.n	800e294 <SVCCTL_UserEvtRx+0x94>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 800e27c:	6878      	ldr	r0, [r7, #4]
 800e27e:	f000 ff9b 	bl	800f1b8 <SVCCTL_App_Notification>
 800e282:	4603      	mov	r3, r0
 800e284:	75bb      	strb	r3, [r7, #22]
      break;
 800e286:	e008      	b.n	800e29a <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 800e288:	2301      	movs	r3, #1
 800e28a:	75bb      	strb	r3, [r7, #22]
      break;
 800e28c:	e005      	b.n	800e29a <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 800e28e:	2300      	movs	r3, #0
 800e290:	75bb      	strb	r3, [r7, #22]
      break;
 800e292:	e002      	b.n	800e29a <SVCCTL_UserEvtRx+0x9a>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 800e294:	2301      	movs	r3, #1
 800e296:	75bb      	strb	r3, [r7, #22]
      break;
 800e298:	bf00      	nop
  }

  return (return_status);
 800e29a:	7dbb      	ldrb	r3, [r7, #22]
}
 800e29c:	4618      	mov	r0, r3
 800e29e:	3718      	adds	r7, #24
 800e2a0:	46bd      	mov	sp, r7
 800e2a2:	bd80      	pop	{r7, pc}
 800e2a4:	200000e0 	.word	0x200000e0

0800e2a8 <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 800e2a8:	b580      	push	{r7, lr}
 800e2aa:	b088      	sub	sp, #32
 800e2ac:	af00      	add	r7, sp, #0
 800e2ae:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800e2b0:	f107 030c 	add.w	r3, r7, #12
 800e2b4:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 800e2bc:	69fb      	ldr	r3, [r7, #28]
 800e2be:	212e      	movs	r1, #46	@ 0x2e
 800e2c0:	f64f 4066 	movw	r0, #64614	@ 0xfc66
 800e2c4:	f000 fae8 	bl	800e898 <shci_send>
            p_rsp );
 
  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800e2c8:	69fb      	ldr	r3, [r7, #28]
 800e2ca:	330b      	adds	r3, #11
 800e2cc:	78db      	ldrb	r3, [r3, #3]
}
 800e2ce:	4618      	mov	r0, r3
 800e2d0:	3720      	adds	r7, #32
 800e2d2:	46bd      	mov	sp, r7
 800e2d4:	bd80      	pop	{r7, pc}

0800e2d6 <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 800e2d6:	b580      	push	{r7, lr}
 800e2d8:	b088      	sub	sp, #32
 800e2da:	af00      	add	r7, sp, #0
 800e2dc:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800e2de:	f107 030c 	add.w	r3, r7, #12
 800e2e2:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 800e2ea:	69fb      	ldr	r3, [r7, #28]
 800e2ec:	210f      	movs	r1, #15
 800e2ee:	f64f 4068 	movw	r0, #64616	@ 0xfc68
 800e2f2:	f000 fad1 	bl	800e898 <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800e2f6:	69fb      	ldr	r3, [r7, #28]
 800e2f8:	330b      	adds	r3, #11
 800e2fa:	78db      	ldrb	r3, [r3, #3]
}
 800e2fc:	4618      	mov	r0, r3
 800e2fe:	3720      	adds	r7, #32
 800e300:	46bd      	mov	sp, r7
 800e302:	bd80      	pop	{r7, pc}

0800e304 <SHCI_C2_Config>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_Config(SHCI_C2_CONFIG_Cmd_Param_t *pCmdPacket)
{
 800e304:	b580      	push	{r7, lr}
 800e306:	b088      	sub	sp, #32
 800e308:	af00      	add	r7, sp, #0
 800e30a:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800e30c:	f107 030c 	add.w	r3, r7, #12
 800e310:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_CONFIG,
 800e312:	69fb      	ldr	r3, [r7, #28]
 800e314:	687a      	ldr	r2, [r7, #4]
 800e316:	2110      	movs	r1, #16
 800e318:	f64f 4075 	movw	r0, #64629	@ 0xfc75
 800e31c:	f000 fabc 	bl	800e898 <shci_send>
             sizeof(SHCI_C2_CONFIG_Cmd_Param_t),
             (uint8_t*)pCmdPacket,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800e320:	69fb      	ldr	r3, [r7, #28]
 800e322:	330b      	adds	r3, #11
 800e324:	78db      	ldrb	r3, [r3, #3]
}
 800e326:	4618      	mov	r0, r3
 800e328:	3720      	adds	r7, #32
 800e32a:	46bd      	mov	sp, r7
 800e32c:	bd80      	pop	{r7, pc}
	...

0800e330 <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 800e330:	b480      	push	{r7}
 800e332:	b08b      	sub	sp, #44	@ 0x2c
 800e334:	af00      	add	r7, sp, #0
 800e336:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 800e338:	2300      	movs	r3, #0
 800e33a:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 800e33c:	2300      	movs	r3, #0
 800e33e:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 800e340:	2300      	movs	r3, #0
 800e342:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t wireless_firmware_memorySize = 0;
 800e344:	2300      	movs	r3, #0
 800e346:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 800e348:	2300      	movs	r3, #0
 800e34a:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 800e34c:	2300      	movs	r3, #0
 800e34e:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 800e350:	2300      	movs	r3, #0
 800e352:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 800e354:	2300      	movs	r3, #0
 800e356:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 800e358:	4b4a      	ldr	r3, [pc, #296]	@ (800e484 <SHCI_GetWirelessFwInfo+0x154>)
 800e35a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e35c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800e360:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 800e362:	693b      	ldr	r3, [r7, #16]
 800e364:	009b      	lsls	r3, r3, #2
 800e366:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 800e36a:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 800e36e:	681b      	ldr	r3, [r3, #0]
 800e370:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 800e372:	68bb      	ldr	r3, [r7, #8]
 800e374:	681b      	ldr	r3, [r3, #0]
 800e376:	4a44      	ldr	r2, [pc, #272]	@ (800e488 <SHCI_GetWirelessFwInfo+0x158>)
 800e378:	4293      	cmp	r3, r2
 800e37a:	d10f      	bne.n	800e39c <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 800e37c:	68bb      	ldr	r3, [r7, #8]
 800e37e:	695b      	ldr	r3, [r3, #20]
 800e380:	627b      	str	r3, [r7, #36]	@ 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 800e382:	68bb      	ldr	r3, [r7, #8]
 800e384:	699b      	ldr	r3, [r3, #24]
 800e386:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 800e388:	68bb      	ldr	r3, [r7, #8]
 800e38a:	69db      	ldr	r3, [r3, #28]
 800e38c:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 800e38e:	68bb      	ldr	r3, [r7, #8]
 800e390:	68db      	ldr	r3, [r3, #12]
 800e392:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 800e394:	68bb      	ldr	r3, [r7, #8]
 800e396:	691b      	ldr	r3, [r3, #16]
 800e398:	617b      	str	r3, [r7, #20]
 800e39a:	e01a      	b.n	800e3d2 <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 800e39c:	693b      	ldr	r3, [r7, #16]
 800e39e:	009b      	lsls	r3, r3, #2
 800e3a0:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 800e3a4:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 800e3a8:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 800e3aa:	68fb      	ldr	r3, [r7, #12]
 800e3ac:	681b      	ldr	r3, [r3, #0]
 800e3ae:	691b      	ldr	r3, [r3, #16]
 800e3b0:	627b      	str	r3, [r7, #36]	@ 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 800e3b2:	68fb      	ldr	r3, [r7, #12]
 800e3b4:	681b      	ldr	r3, [r3, #0]
 800e3b6:	695b      	ldr	r3, [r3, #20]
 800e3b8:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 800e3ba:	68fb      	ldr	r3, [r7, #12]
 800e3bc:	681b      	ldr	r3, [r3, #0]
 800e3be:	699b      	ldr	r3, [r3, #24]
 800e3c0:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 800e3c2:	68fb      	ldr	r3, [r7, #12]
 800e3c4:	681b      	ldr	r3, [r3, #0]
 800e3c6:	685b      	ldr	r3, [r3, #4]
 800e3c8:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 800e3ca:	68fb      	ldr	r3, [r7, #12]
 800e3cc:	681b      	ldr	r3, [r3, #0]
 800e3ce:	689b      	ldr	r3, [r3, #8]
 800e3d0:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 800e3d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e3d4:	0e1b      	lsrs	r3, r3, #24
 800e3d6:	b2da      	uxtb	r2, r3
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 800e3dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e3de:	0c1b      	lsrs	r3, r3, #16
 800e3e0:	b2da      	uxtb	r2, r3
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 800e3e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e3e8:	0a1b      	lsrs	r3, r3, #8
 800e3ea:	b2da      	uxtb	r2, r3
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 800e3f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e3f2:	091b      	lsrs	r3, r3, #4
 800e3f4:	b2db      	uxtb	r3, r3
 800e3f6:	f003 030f 	and.w	r3, r3, #15
 800e3fa:	b2da      	uxtb	r2, r3
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 800e400:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e402:	b2db      	uxtb	r3, r3
 800e404:	f003 030f 	and.w	r3, r3, #15
 800e408:	b2da      	uxtb	r2, r3
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800e40e:	6a3b      	ldr	r3, [r7, #32]
 800e410:	0e1b      	lsrs	r3, r3, #24
 800e412:	b2da      	uxtb	r2, r3
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 800e418:	6a3b      	ldr	r3, [r7, #32]
 800e41a:	0c1b      	lsrs	r3, r3, #16
 800e41c:	b2da      	uxtb	r2, r3
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 800e422:	6a3b      	ldr	r3, [r7, #32]
 800e424:	0a1b      	lsrs	r3, r3, #8
 800e426:	b2da      	uxtb	r2, r3
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 800e42c:	6a3b      	ldr	r3, [r7, #32]
 800e42e:	b2da      	uxtb	r2, r3
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 800e434:	69fb      	ldr	r3, [r7, #28]
 800e436:	b2da      	uxtb	r2, r3
 800e438:	687b      	ldr	r3, [r7, #4]
 800e43a:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 800e43c:	69bb      	ldr	r3, [r7, #24]
 800e43e:	0e1b      	lsrs	r3, r3, #24
 800e440:	b2da      	uxtb	r2, r3
 800e442:	687b      	ldr	r3, [r7, #4]
 800e444:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 800e446:	69bb      	ldr	r3, [r7, #24]
 800e448:	0c1b      	lsrs	r3, r3, #16
 800e44a:	b2da      	uxtb	r2, r3
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 800e450:	69bb      	ldr	r3, [r7, #24]
 800e452:	0a1b      	lsrs	r3, r3, #8
 800e454:	b2da      	uxtb	r2, r3
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800e45a:	697b      	ldr	r3, [r7, #20]
 800e45c:	0e1b      	lsrs	r3, r3, #24
 800e45e:	b2da      	uxtb	r2, r3
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 800e464:	697b      	ldr	r3, [r7, #20]
 800e466:	0c1b      	lsrs	r3, r3, #16
 800e468:	b2da      	uxtb	r2, r3
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 800e46e:	697b      	ldr	r3, [r7, #20]
 800e470:	b2da      	uxtb	r2, r3
 800e472:	687b      	ldr	r3, [r7, #4]
 800e474:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 800e476:	2300      	movs	r3, #0
}
 800e478:	4618      	mov	r0, r3
 800e47a:	372c      	adds	r7, #44	@ 0x2c
 800e47c:	46bd      	mov	sp, r7
 800e47e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e482:	4770      	bx	lr
 800e484:	58004000 	.word	0x58004000
 800e488:	a94656b9 	.word	0xa94656b9

0800e48c <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800e48c:	b580      	push	{r7, lr}
 800e48e:	b082      	sub	sp, #8
 800e490:	af00      	add	r7, sp, #0
 800e492:	6078      	str	r0, [r7, #4]
 800e494:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800e496:	683b      	ldr	r3, [r7, #0]
 800e498:	685b      	ldr	r3, [r3, #4]
 800e49a:	4a08      	ldr	r2, [pc, #32]	@ (800e4bc <hci_init+0x30>)
 800e49c:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 800e49e:	4a08      	ldr	r2, [pc, #32]	@ (800e4c0 <hci_init+0x34>)
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 800e4a4:	4806      	ldr	r0, [pc, #24]	@ (800e4c0 <hci_init+0x34>)
 800e4a6:	f000 f979 	bl	800e79c <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800e4aa:	683b      	ldr	r3, [r7, #0]
 800e4ac:	681b      	ldr	r3, [r3, #0]
 800e4ae:	4618      	mov	r0, r3
 800e4b0:	f000 f8da 	bl	800e668 <TlInit>

  return;
 800e4b4:	bf00      	nop
}
 800e4b6:	3708      	adds	r7, #8
 800e4b8:	46bd      	mov	sp, r7
 800e4ba:	bd80      	pop	{r7, pc}
 800e4bc:	200029ac 	.word	0x200029ac
 800e4c0:	20002984 	.word	0x20002984

0800e4c4 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 800e4c4:	b580      	push	{r7, lr}
 800e4c6:	b084      	sub	sp, #16
 800e4c8:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800e4ca:	4822      	ldr	r0, [pc, #136]	@ (800e554 <hci_user_evt_proc+0x90>)
 800e4cc:	f000 fd32 	bl	800ef34 <LST_is_empty>
 800e4d0:	4603      	mov	r3, r0
 800e4d2:	2b00      	cmp	r3, #0
 800e4d4:	d12b      	bne.n	800e52e <hci_user_evt_proc+0x6a>
 800e4d6:	4b20      	ldr	r3, [pc, #128]	@ (800e558 <hci_user_evt_proc+0x94>)
 800e4d8:	781b      	ldrb	r3, [r3, #0]
 800e4da:	2b00      	cmp	r3, #0
 800e4dc:	d027      	beq.n	800e52e <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800e4de:	f107 030c 	add.w	r3, r7, #12
 800e4e2:	4619      	mov	r1, r3
 800e4e4:	481b      	ldr	r0, [pc, #108]	@ (800e554 <hci_user_evt_proc+0x90>)
 800e4e6:	f000 fdb4 	bl	800f052 <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 800e4ea:	4b1c      	ldr	r3, [pc, #112]	@ (800e55c <hci_user_evt_proc+0x98>)
 800e4ec:	69db      	ldr	r3, [r3, #28]
 800e4ee:	2b00      	cmp	r3, #0
 800e4f0:	d00c      	beq.n	800e50c <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800e4f2:	68fb      	ldr	r3, [r7, #12]
 800e4f4:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 800e4f6:	2301      	movs	r3, #1
 800e4f8:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 800e4fa:	4b18      	ldr	r3, [pc, #96]	@ (800e55c <hci_user_evt_proc+0x98>)
 800e4fc:	69db      	ldr	r3, [r3, #28]
 800e4fe:	1d3a      	adds	r2, r7, #4
 800e500:	4610      	mov	r0, r2
 800e502:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 800e504:	793a      	ldrb	r2, [r7, #4]
 800e506:	4b14      	ldr	r3, [pc, #80]	@ (800e558 <hci_user_evt_proc+0x94>)
 800e508:	701a      	strb	r2, [r3, #0]
 800e50a:	e002      	b.n	800e512 <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800e50c:	4b12      	ldr	r3, [pc, #72]	@ (800e558 <hci_user_evt_proc+0x94>)
 800e50e:	2201      	movs	r2, #1
 800e510:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 800e512:	4b11      	ldr	r3, [pc, #68]	@ (800e558 <hci_user_evt_proc+0x94>)
 800e514:	781b      	ldrb	r3, [r3, #0]
 800e516:	2b00      	cmp	r3, #0
 800e518:	d004      	beq.n	800e524 <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800e51a:	68fb      	ldr	r3, [r7, #12]
 800e51c:	4618      	mov	r0, r3
 800e51e:	f000 fc0d 	bl	800ed3c <TL_MM_EvtDone>
 800e522:	e004      	b.n	800e52e <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800e524:	68fb      	ldr	r3, [r7, #12]
 800e526:	4619      	mov	r1, r3
 800e528:	480a      	ldr	r0, [pc, #40]	@ (800e554 <hci_user_evt_proc+0x90>)
 800e52a:	f000 fd25 	bl	800ef78 <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800e52e:	4809      	ldr	r0, [pc, #36]	@ (800e554 <hci_user_evt_proc+0x90>)
 800e530:	f000 fd00 	bl	800ef34 <LST_is_empty>
 800e534:	4603      	mov	r3, r0
 800e536:	2b00      	cmp	r3, #0
 800e538:	d107      	bne.n	800e54a <hci_user_evt_proc+0x86>
 800e53a:	4b07      	ldr	r3, [pc, #28]	@ (800e558 <hci_user_evt_proc+0x94>)
 800e53c:	781b      	ldrb	r3, [r3, #0]
 800e53e:	2b00      	cmp	r3, #0
 800e540:	d003      	beq.n	800e54a <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 800e542:	4804      	ldr	r0, [pc, #16]	@ (800e554 <hci_user_evt_proc+0x90>)
 800e544:	f001 f85e 	bl	800f604 <hci_notify_asynch_evt>
  }


  return;
 800e548:	bf00      	nop
 800e54a:	bf00      	nop
}
 800e54c:	3710      	adds	r7, #16
 800e54e:	46bd      	mov	sp, r7
 800e550:	bd80      	pop	{r7, pc}
 800e552:	bf00      	nop
 800e554:	20000108 	.word	0x20000108
 800e558:	20000114 	.word	0x20000114
 800e55c:	20002984 	.word	0x20002984

0800e560 <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 800e560:	b580      	push	{r7, lr}
 800e562:	b088      	sub	sp, #32
 800e564:	af00      	add	r7, sp, #0
 800e566:	6078      	str	r0, [r7, #4]
 800e568:	460b      	mov	r3, r1
 800e56a:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 800e56c:	2000      	movs	r0, #0
 800e56e:	f000 f8d1 	bl	800e714 <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 800e572:	2300      	movs	r3, #0
 800e574:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	885b      	ldrh	r3, [r3, #2]
 800e57a:	b21b      	sxth	r3, r3
 800e57c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e580:	b21a      	sxth	r2, r3
 800e582:	687b      	ldr	r3, [r7, #4]
 800e584:	881b      	ldrh	r3, [r3, #0]
 800e586:	029b      	lsls	r3, r3, #10
 800e588:	b21b      	sxth	r3, r3
 800e58a:	4313      	orrs	r3, r2
 800e58c:	b21b      	sxth	r3, r3
 800e58e:	83bb      	strh	r3, [r7, #28]
  
  CmdRspStatusFlag = HCI_TL_CMD_RESP_WAIT;
 800e590:	4b33      	ldr	r3, [pc, #204]	@ (800e660 <hci_send_req+0x100>)
 800e592:	2201      	movs	r2, #1
 800e594:	701a      	strb	r2, [r3, #0]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	68db      	ldr	r3, [r3, #12]
 800e59a:	b2d9      	uxtb	r1, r3
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	689a      	ldr	r2, [r3, #8]
 800e5a0:	8bbb      	ldrh	r3, [r7, #28]
 800e5a2:	4618      	mov	r0, r3
 800e5a4:	f000 f890 	bl	800e6c8 <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 800e5a8:	e04e      	b.n	800e648 <hci_send_req+0xe8>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 800e5aa:	f248 00e8 	movw	r0, #33000	@ 0x80e8
 800e5ae:	f001 f840 	bl	800f632 <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800e5b2:	e043      	b.n	800e63c <hci_send_req+0xdc>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 800e5b4:	f107 030c 	add.w	r3, r7, #12
 800e5b8:	4619      	mov	r1, r3
 800e5ba:	482a      	ldr	r0, [pc, #168]	@ (800e664 <hci_send_req+0x104>)
 800e5bc:	f000 fd49 	bl	800f052 <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 800e5c0:	68fb      	ldr	r3, [r7, #12]
 800e5c2:	7a5b      	ldrb	r3, [r3, #9]
 800e5c4:	2b0f      	cmp	r3, #15
 800e5c6:	d114      	bne.n	800e5f2 <hci_send_req+0x92>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 800e5c8:	68fb      	ldr	r3, [r7, #12]
 800e5ca:	330b      	adds	r3, #11
 800e5cc:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 800e5ce:	693b      	ldr	r3, [r7, #16]
 800e5d0:	885b      	ldrh	r3, [r3, #2]
 800e5d2:	b29b      	uxth	r3, r3
 800e5d4:	8bba      	ldrh	r2, [r7, #28]
 800e5d6:	429a      	cmp	r2, r3
 800e5d8:	d104      	bne.n	800e5e4 <hci_send_req+0x84>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	691b      	ldr	r3, [r3, #16]
 800e5de:	693a      	ldr	r2, [r7, #16]
 800e5e0:	7812      	ldrb	r2, [r2, #0]
 800e5e2:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 800e5e4:	693b      	ldr	r3, [r7, #16]
 800e5e6:	785b      	ldrb	r3, [r3, #1]
 800e5e8:	2b00      	cmp	r3, #0
 800e5ea:	d027      	beq.n	800e63c <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800e5ec:	2301      	movs	r3, #1
 800e5ee:	77fb      	strb	r3, [r7, #31]
 800e5f0:	e024      	b.n	800e63c <hci_send_req+0xdc>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 800e5f2:	68fb      	ldr	r3, [r7, #12]
 800e5f4:	330b      	adds	r3, #11
 800e5f6:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 800e5f8:	69bb      	ldr	r3, [r7, #24]
 800e5fa:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800e5fe:	b29b      	uxth	r3, r3
 800e600:	8bba      	ldrh	r2, [r7, #28]
 800e602:	429a      	cmp	r2, r3
 800e604:	d114      	bne.n	800e630 <hci_send_req+0xd0>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 800e606:	68fb      	ldr	r3, [r7, #12]
 800e608:	7a9b      	ldrb	r3, [r3, #10]
 800e60a:	3b03      	subs	r3, #3
 800e60c:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	695a      	ldr	r2, [r3, #20]
 800e612:	7dfb      	ldrb	r3, [r7, #23]
 800e614:	429a      	cmp	r2, r3
 800e616:	bfa8      	it	ge
 800e618:	461a      	movge	r2, r3
 800e61a:	687b      	ldr	r3, [r7, #4]
 800e61c:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	6918      	ldr	r0, [r3, #16]
 800e622:	69bb      	ldr	r3, [r7, #24]
 800e624:	1cd9      	adds	r1, r3, #3
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	695b      	ldr	r3, [r3, #20]
 800e62a:	461a      	mov	r2, r3
 800e62c:	f002 fa13 	bl	8010a56 <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 800e630:	69bb      	ldr	r3, [r7, #24]
 800e632:	781b      	ldrb	r3, [r3, #0]
 800e634:	2b00      	cmp	r3, #0
 800e636:	d001      	beq.n	800e63c <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800e638:	2301      	movs	r3, #1
 800e63a:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800e63c:	4809      	ldr	r0, [pc, #36]	@ (800e664 <hci_send_req+0x104>)
 800e63e:	f000 fc79 	bl	800ef34 <LST_is_empty>
 800e642:	4603      	mov	r3, r0
 800e644:	2b00      	cmp	r3, #0
 800e646:	d0b5      	beq.n	800e5b4 <hci_send_req+0x54>
  while(local_cmd_status == HCI_TL_CmdBusy)
 800e648:	7ffb      	ldrb	r3, [r7, #31]
 800e64a:	2b00      	cmp	r3, #0
 800e64c:	d0ad      	beq.n	800e5aa <hci_send_req+0x4a>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 800e64e:	2001      	movs	r0, #1
 800e650:	f000 f860 	bl	800e714 <NotifyCmdStatus>

  return 0;
 800e654:	2300      	movs	r3, #0
}
 800e656:	4618      	mov	r0, r3
 800e658:	3720      	adds	r7, #32
 800e65a:	46bd      	mov	sp, r7
 800e65c:	bd80      	pop	{r7, pc}
 800e65e:	bf00      	nop
 800e660:	200029b0 	.word	0x200029b0
 800e664:	200029a4 	.word	0x200029a4

0800e668 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800e668:	b580      	push	{r7, lr}
 800e66a:	b086      	sub	sp, #24
 800e66c:	af00      	add	r7, sp, #0
 800e66e:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 800e670:	480f      	ldr	r0, [pc, #60]	@ (800e6b0 <TlInit+0x48>)
 800e672:	f000 fc4f 	bl	800ef14 <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 800e676:	4a0f      	ldr	r2, [pc, #60]	@ (800e6b4 <TlInit+0x4c>)
 800e678:	687b      	ldr	r3, [r7, #4]
 800e67a:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 800e67c:	480e      	ldr	r0, [pc, #56]	@ (800e6b8 <TlInit+0x50>)
 800e67e:	f000 fc49 	bl	800ef14 <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800e682:	4b0e      	ldr	r3, [pc, #56]	@ (800e6bc <TlInit+0x54>)
 800e684:	2201      	movs	r2, #1
 800e686:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 800e688:	4b0d      	ldr	r3, [pc, #52]	@ (800e6c0 <TlInit+0x58>)
 800e68a:	681b      	ldr	r3, [r3, #0]
 800e68c:	2b00      	cmp	r3, #0
 800e68e:	d00a      	beq.n	800e6a6 <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 800e694:	4b0b      	ldr	r3, [pc, #44]	@ (800e6c4 <TlInit+0x5c>)
 800e696:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 800e698:	4b09      	ldr	r3, [pc, #36]	@ (800e6c0 <TlInit+0x58>)
 800e69a:	681b      	ldr	r3, [r3, #0]
 800e69c:	f107 0208 	add.w	r2, r7, #8
 800e6a0:	4610      	mov	r0, r2
 800e6a2:	4798      	blx	r3
  }

  return;
 800e6a4:	bf00      	nop
 800e6a6:	bf00      	nop
}
 800e6a8:	3718      	adds	r7, #24
 800e6aa:	46bd      	mov	sp, r7
 800e6ac:	bd80      	pop	{r7, pc}
 800e6ae:	bf00      	nop
 800e6b0:	200029a4 	.word	0x200029a4
 800e6b4:	20000110 	.word	0x20000110
 800e6b8:	20000108 	.word	0x20000108
 800e6bc:	20000114 	.word	0x20000114
 800e6c0:	20002984 	.word	0x20002984
 800e6c4:	0800e755 	.word	0x0800e755

0800e6c8 <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 800e6c8:	b580      	push	{r7, lr}
 800e6ca:	b082      	sub	sp, #8
 800e6cc:	af00      	add	r7, sp, #0
 800e6ce:	4603      	mov	r3, r0
 800e6d0:	603a      	str	r2, [r7, #0]
 800e6d2:	80fb      	strh	r3, [r7, #6]
 800e6d4:	460b      	mov	r3, r1
 800e6d6:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 800e6d8:	4b0c      	ldr	r3, [pc, #48]	@ (800e70c <SendCmd+0x44>)
 800e6da:	681b      	ldr	r3, [r3, #0]
 800e6dc:	88fa      	ldrh	r2, [r7, #6]
 800e6de:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 800e6e2:	4b0a      	ldr	r3, [pc, #40]	@ (800e70c <SendCmd+0x44>)
 800e6e4:	681b      	ldr	r3, [r3, #0]
 800e6e6:	797a      	ldrb	r2, [r7, #5]
 800e6e8:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 800e6ea:	4b08      	ldr	r3, [pc, #32]	@ (800e70c <SendCmd+0x44>)
 800e6ec:	681b      	ldr	r3, [r3, #0]
 800e6ee:	330c      	adds	r3, #12
 800e6f0:	797a      	ldrb	r2, [r7, #5]
 800e6f2:	6839      	ldr	r1, [r7, #0]
 800e6f4:	4618      	mov	r0, r3
 800e6f6:	f002 f9ae 	bl	8010a56 <memcpy>

  hciContext.io.Send(0,0);
 800e6fa:	4b05      	ldr	r3, [pc, #20]	@ (800e710 <SendCmd+0x48>)
 800e6fc:	691b      	ldr	r3, [r3, #16]
 800e6fe:	2100      	movs	r1, #0
 800e700:	2000      	movs	r0, #0
 800e702:	4798      	blx	r3

  return;
 800e704:	bf00      	nop
}
 800e706:	3708      	adds	r7, #8
 800e708:	46bd      	mov	sp, r7
 800e70a:	bd80      	pop	{r7, pc}
 800e70c:	20000110 	.word	0x20000110
 800e710:	20002984 	.word	0x20002984

0800e714 <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 800e714:	b580      	push	{r7, lr}
 800e716:	b082      	sub	sp, #8
 800e718:	af00      	add	r7, sp, #0
 800e71a:	4603      	mov	r3, r0
 800e71c:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 800e71e:	79fb      	ldrb	r3, [r7, #7]
 800e720:	2b00      	cmp	r3, #0
 800e722:	d108      	bne.n	800e736 <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 800e724:	4b0a      	ldr	r3, [pc, #40]	@ (800e750 <NotifyCmdStatus+0x3c>)
 800e726:	681b      	ldr	r3, [r3, #0]
 800e728:	2b00      	cmp	r3, #0
 800e72a:	d00d      	beq.n	800e748 <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 800e72c:	4b08      	ldr	r3, [pc, #32]	@ (800e750 <NotifyCmdStatus+0x3c>)
 800e72e:	681b      	ldr	r3, [r3, #0]
 800e730:	2000      	movs	r0, #0
 800e732:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 800e734:	e008      	b.n	800e748 <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 800e736:	4b06      	ldr	r3, [pc, #24]	@ (800e750 <NotifyCmdStatus+0x3c>)
 800e738:	681b      	ldr	r3, [r3, #0]
 800e73a:	2b00      	cmp	r3, #0
 800e73c:	d004      	beq.n	800e748 <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 800e73e:	4b04      	ldr	r3, [pc, #16]	@ (800e750 <NotifyCmdStatus+0x3c>)
 800e740:	681b      	ldr	r3, [r3, #0]
 800e742:	2001      	movs	r0, #1
 800e744:	4798      	blx	r3
  return;
 800e746:	bf00      	nop
 800e748:	bf00      	nop
}
 800e74a:	3708      	adds	r7, #8
 800e74c:	46bd      	mov	sp, r7
 800e74e:	bd80      	pop	{r7, pc}
 800e750:	200029ac 	.word	0x200029ac

0800e754 <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 800e754:	b580      	push	{r7, lr}
 800e756:	b082      	sub	sp, #8
 800e758:	af00      	add	r7, sp, #0
 800e75a:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	7a5b      	ldrb	r3, [r3, #9]
 800e760:	2b0f      	cmp	r3, #15
 800e762:	d003      	beq.n	800e76c <TlEvtReceived+0x18>
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	7a5b      	ldrb	r3, [r3, #9]
 800e768:	2b0e      	cmp	r3, #14
 800e76a:	d107      	bne.n	800e77c <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 800e76c:	6879      	ldr	r1, [r7, #4]
 800e76e:	4809      	ldr	r0, [pc, #36]	@ (800e794 <TlEvtReceived+0x40>)
 800e770:	f000 fc28 	bl	800efc4 <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 800e774:	2000      	movs	r0, #0
 800e776:	f000 ff51 	bl	800f61c <hci_cmd_resp_release>
 800e77a:	e006      	b.n	800e78a <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 800e77c:	6879      	ldr	r1, [r7, #4]
 800e77e:	4806      	ldr	r0, [pc, #24]	@ (800e798 <TlEvtReceived+0x44>)
 800e780:	f000 fc20 	bl	800efc4 <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800e784:	4804      	ldr	r0, [pc, #16]	@ (800e798 <TlEvtReceived+0x44>)
 800e786:	f000 ff3d 	bl	800f604 <hci_notify_asynch_evt>
  }

  return;
 800e78a:	bf00      	nop
}
 800e78c:	3708      	adds	r7, #8
 800e78e:	46bd      	mov	sp, r7
 800e790:	bd80      	pop	{r7, pc}
 800e792:	bf00      	nop
 800e794:	200029a4 	.word	0x200029a4
 800e798:	20000108 	.word	0x20000108

0800e79c <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 800e79c:	b480      	push	{r7}
 800e79e:	b083      	sub	sp, #12
 800e7a0:	af00      	add	r7, sp, #0
 800e7a2:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	4a05      	ldr	r2, [pc, #20]	@ (800e7bc <hci_register_io_bus+0x20>)
 800e7a8:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	4a04      	ldr	r2, [pc, #16]	@ (800e7c0 <hci_register_io_bus+0x24>)
 800e7ae:	611a      	str	r2, [r3, #16]

  return;
 800e7b0:	bf00      	nop
}
 800e7b2:	370c      	adds	r7, #12
 800e7b4:	46bd      	mov	sp, r7
 800e7b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7ba:	4770      	bx	lr
 800e7bc:	0800eab5 	.word	0x0800eab5
 800e7c0:	0800eb1d 	.word	0x0800eb1d

0800e7c4 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800e7c4:	b580      	push	{r7, lr}
 800e7c6:	b082      	sub	sp, #8
 800e7c8:	af00      	add	r7, sp, #0
 800e7ca:	6078      	str	r0, [r7, #4]
 800e7cc:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800e7ce:	683b      	ldr	r3, [r7, #0]
 800e7d0:	685b      	ldr	r3, [r3, #4]
 800e7d2:	4a08      	ldr	r2, [pc, #32]	@ (800e7f4 <shci_init+0x30>)
 800e7d4:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 800e7d6:	4a08      	ldr	r2, [pc, #32]	@ (800e7f8 <shci_init+0x34>)
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 800e7dc:	4806      	ldr	r0, [pc, #24]	@ (800e7f8 <shci_init+0x34>)
 800e7de:	f000 f915 	bl	800ea0c <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800e7e2:	683b      	ldr	r3, [r7, #0]
 800e7e4:	681b      	ldr	r3, [r3, #0]
 800e7e6:	4618      	mov	r0, r3
 800e7e8:	f000 f898 	bl	800e91c <TlInit>

  return;
 800e7ec:	bf00      	nop
}
 800e7ee:	3708      	adds	r7, #8
 800e7f0:	46bd      	mov	sp, r7
 800e7f2:	bd80      	pop	{r7, pc}
 800e7f4:	200029d4 	.word	0x200029d4
 800e7f8:	200029b4 	.word	0x200029b4

0800e7fc <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 800e7fc:	b580      	push	{r7, lr}
 800e7fe:	b084      	sub	sp, #16
 800e800:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800e802:	4822      	ldr	r0, [pc, #136]	@ (800e88c <shci_user_evt_proc+0x90>)
 800e804:	f000 fb96 	bl	800ef34 <LST_is_empty>
 800e808:	4603      	mov	r3, r0
 800e80a:	2b00      	cmp	r3, #0
 800e80c:	d12b      	bne.n	800e866 <shci_user_evt_proc+0x6a>
 800e80e:	4b20      	ldr	r3, [pc, #128]	@ (800e890 <shci_user_evt_proc+0x94>)
 800e810:	781b      	ldrb	r3, [r3, #0]
 800e812:	2b00      	cmp	r3, #0
 800e814:	d027      	beq.n	800e866 <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800e816:	f107 030c 	add.w	r3, r7, #12
 800e81a:	4619      	mov	r1, r3
 800e81c:	481b      	ldr	r0, [pc, #108]	@ (800e88c <shci_user_evt_proc+0x90>)
 800e81e:	f000 fc18 	bl	800f052 <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 800e822:	4b1c      	ldr	r3, [pc, #112]	@ (800e894 <shci_user_evt_proc+0x98>)
 800e824:	69db      	ldr	r3, [r3, #28]
 800e826:	2b00      	cmp	r3, #0
 800e828:	d00c      	beq.n	800e844 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800e82a:	68fb      	ldr	r3, [r7, #12]
 800e82c:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 800e82e:	2301      	movs	r3, #1
 800e830:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 800e832:	4b18      	ldr	r3, [pc, #96]	@ (800e894 <shci_user_evt_proc+0x98>)
 800e834:	69db      	ldr	r3, [r3, #28]
 800e836:	1d3a      	adds	r2, r7, #4
 800e838:	4610      	mov	r0, r2
 800e83a:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 800e83c:	793a      	ldrb	r2, [r7, #4]
 800e83e:	4b14      	ldr	r3, [pc, #80]	@ (800e890 <shci_user_evt_proc+0x94>)
 800e840:	701a      	strb	r2, [r3, #0]
 800e842:	e002      	b.n	800e84a <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800e844:	4b12      	ldr	r3, [pc, #72]	@ (800e890 <shci_user_evt_proc+0x94>)
 800e846:	2201      	movs	r2, #1
 800e848:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 800e84a:	4b11      	ldr	r3, [pc, #68]	@ (800e890 <shci_user_evt_proc+0x94>)
 800e84c:	781b      	ldrb	r3, [r3, #0]
 800e84e:	2b00      	cmp	r3, #0
 800e850:	d004      	beq.n	800e85c <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800e852:	68fb      	ldr	r3, [r7, #12]
 800e854:	4618      	mov	r0, r3
 800e856:	f000 fa71 	bl	800ed3c <TL_MM_EvtDone>
 800e85a:	e004      	b.n	800e866 <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800e85c:	68fb      	ldr	r3, [r7, #12]
 800e85e:	4619      	mov	r1, r3
 800e860:	480a      	ldr	r0, [pc, #40]	@ (800e88c <shci_user_evt_proc+0x90>)
 800e862:	f000 fb89 	bl	800ef78 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800e866:	4809      	ldr	r0, [pc, #36]	@ (800e88c <shci_user_evt_proc+0x90>)
 800e868:	f000 fb64 	bl	800ef34 <LST_is_empty>
 800e86c:	4603      	mov	r3, r0
 800e86e:	2b00      	cmp	r3, #0
 800e870:	d107      	bne.n	800e882 <shci_user_evt_proc+0x86>
 800e872:	4b07      	ldr	r3, [pc, #28]	@ (800e890 <shci_user_evt_proc+0x94>)
 800e874:	781b      	ldrb	r3, [r3, #0]
 800e876:	2b00      	cmp	r3, #0
 800e878:	d003      	beq.n	800e882 <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 800e87a:	4804      	ldr	r0, [pc, #16]	@ (800e88c <shci_user_evt_proc+0x90>)
 800e87c:	f7f2 fbe4 	bl	8001048 <shci_notify_asynch_evt>
  }


  return;
 800e880:	bf00      	nop
 800e882:	bf00      	nop
}
 800e884:	3710      	adds	r7, #16
 800e886:	46bd      	mov	sp, r7
 800e888:	bd80      	pop	{r7, pc}
 800e88a:	bf00      	nop
 800e88c:	20000118 	.word	0x20000118
 800e890:	20000128 	.word	0x20000128
 800e894:	200029b4 	.word	0x200029b4

0800e898 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 800e898:	b580      	push	{r7, lr}
 800e89a:	b084      	sub	sp, #16
 800e89c:	af00      	add	r7, sp, #0
 800e89e:	60ba      	str	r2, [r7, #8]
 800e8a0:	607b      	str	r3, [r7, #4]
 800e8a2:	4603      	mov	r3, r0
 800e8a4:	81fb      	strh	r3, [r7, #14]
 800e8a6:	460b      	mov	r3, r1
 800e8a8:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 800e8aa:	2000      	movs	r0, #0
 800e8ac:	f000 f868 	bl	800e980 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 800e8b0:	4b17      	ldr	r3, [pc, #92]	@ (800e910 <shci_send+0x78>)
 800e8b2:	681b      	ldr	r3, [r3, #0]
 800e8b4:	89fa      	ldrh	r2, [r7, #14]
 800e8b6:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 800e8ba:	4b15      	ldr	r3, [pc, #84]	@ (800e910 <shci_send+0x78>)
 800e8bc:	681b      	ldr	r3, [r3, #0]
 800e8be:	7b7a      	ldrb	r2, [r7, #13]
 800e8c0:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 800e8c2:	4b13      	ldr	r3, [pc, #76]	@ (800e910 <shci_send+0x78>)
 800e8c4:	681b      	ldr	r3, [r3, #0]
 800e8c6:	330c      	adds	r3, #12
 800e8c8:	7b7a      	ldrb	r2, [r7, #13]
 800e8ca:	68b9      	ldr	r1, [r7, #8]
 800e8cc:	4618      	mov	r0, r3
 800e8ce:	f002 f8c2 	bl	8010a56 <memcpy>
  CmdRspStatusFlag = SHCI_TL_CMD_RESP_WAIT;
 800e8d2:	4b10      	ldr	r3, [pc, #64]	@ (800e914 <shci_send+0x7c>)
 800e8d4:	2201      	movs	r2, #1
 800e8d6:	701a      	strb	r2, [r3, #0]
  shciContext.io.Send(0,0);
 800e8d8:	4b0f      	ldr	r3, [pc, #60]	@ (800e918 <shci_send+0x80>)
 800e8da:	691b      	ldr	r3, [r3, #16]
 800e8dc:	2100      	movs	r1, #0
 800e8de:	2000      	movs	r0, #0
 800e8e0:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 800e8e2:	f248 00e8 	movw	r0, #33000	@ 0x80e8
 800e8e6:	f7f2 fbc6 	bl	8001076 <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 800e8ea:	687b      	ldr	r3, [r7, #4]
 800e8ec:	f103 0008 	add.w	r0, r3, #8
 800e8f0:	4b07      	ldr	r3, [pc, #28]	@ (800e910 <shci_send+0x78>)
 800e8f2:	6819      	ldr	r1, [r3, #0]
 800e8f4:	4b06      	ldr	r3, [pc, #24]	@ (800e910 <shci_send+0x78>)
 800e8f6:	681b      	ldr	r3, [r3, #0]
 800e8f8:	789b      	ldrb	r3, [r3, #2]
 800e8fa:	3303      	adds	r3, #3
 800e8fc:	461a      	mov	r2, r3
 800e8fe:	f002 f8aa 	bl	8010a56 <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800e902:	2001      	movs	r0, #1
 800e904:	f000 f83c 	bl	800e980 <Cmd_SetStatus>

  return;
 800e908:	bf00      	nop
}
 800e90a:	3710      	adds	r7, #16
 800e90c:	46bd      	mov	sp, r7
 800e90e:	bd80      	pop	{r7, pc}
 800e910:	20000124 	.word	0x20000124
 800e914:	200029d8 	.word	0x200029d8
 800e918:	200029b4 	.word	0x200029b4

0800e91c <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800e91c:	b580      	push	{r7, lr}
 800e91e:	b086      	sub	sp, #24
 800e920:	af00      	add	r7, sp, #0
 800e922:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 800e924:	4a10      	ldr	r2, [pc, #64]	@ (800e968 <TlInit+0x4c>)
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 800e92a:	4810      	ldr	r0, [pc, #64]	@ (800e96c <TlInit+0x50>)
 800e92c:	f000 faf2 	bl	800ef14 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800e930:	2001      	movs	r0, #1
 800e932:	f000 f825 	bl	800e980 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800e936:	4b0e      	ldr	r3, [pc, #56]	@ (800e970 <TlInit+0x54>)
 800e938:	2201      	movs	r2, #1
 800e93a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 800e93c:	4b0d      	ldr	r3, [pc, #52]	@ (800e974 <TlInit+0x58>)
 800e93e:	681b      	ldr	r3, [r3, #0]
 800e940:	2b00      	cmp	r3, #0
 800e942:	d00c      	beq.n	800e95e <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 800e948:	4b0b      	ldr	r3, [pc, #44]	@ (800e978 <TlInit+0x5c>)
 800e94a:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 800e94c:	4b0b      	ldr	r3, [pc, #44]	@ (800e97c <TlInit+0x60>)
 800e94e:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 800e950:	4b08      	ldr	r3, [pc, #32]	@ (800e974 <TlInit+0x58>)
 800e952:	681b      	ldr	r3, [r3, #0]
 800e954:	f107 020c 	add.w	r2, r7, #12
 800e958:	4610      	mov	r0, r2
 800e95a:	4798      	blx	r3
  }

  return;
 800e95c:	bf00      	nop
 800e95e:	bf00      	nop
}
 800e960:	3718      	adds	r7, #24
 800e962:	46bd      	mov	sp, r7
 800e964:	bd80      	pop	{r7, pc}
 800e966:	bf00      	nop
 800e968:	20000124 	.word	0x20000124
 800e96c:	20000118 	.word	0x20000118
 800e970:	20000128 	.word	0x20000128
 800e974:	200029b4 	.word	0x200029b4
 800e978:	0800e9d1 	.word	0x0800e9d1
 800e97c:	0800e9e9 	.word	0x0800e9e9

0800e980 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 800e980:	b580      	push	{r7, lr}
 800e982:	b082      	sub	sp, #8
 800e984:	af00      	add	r7, sp, #0
 800e986:	4603      	mov	r3, r0
 800e988:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 800e98a:	79fb      	ldrb	r3, [r7, #7]
 800e98c:	2b00      	cmp	r3, #0
 800e98e:	d10b      	bne.n	800e9a8 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 800e990:	4b0d      	ldr	r3, [pc, #52]	@ (800e9c8 <Cmd_SetStatus+0x48>)
 800e992:	681b      	ldr	r3, [r3, #0]
 800e994:	2b00      	cmp	r3, #0
 800e996:	d003      	beq.n	800e9a0 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 800e998:	4b0b      	ldr	r3, [pc, #44]	@ (800e9c8 <Cmd_SetStatus+0x48>)
 800e99a:	681b      	ldr	r3, [r3, #0]
 800e99c:	2000      	movs	r0, #0
 800e99e:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 800e9a0:	4b0a      	ldr	r3, [pc, #40]	@ (800e9cc <Cmd_SetStatus+0x4c>)
 800e9a2:	2200      	movs	r2, #0
 800e9a4:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 800e9a6:	e00b      	b.n	800e9c0 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 800e9a8:	4b08      	ldr	r3, [pc, #32]	@ (800e9cc <Cmd_SetStatus+0x4c>)
 800e9aa:	2201      	movs	r2, #1
 800e9ac:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 800e9ae:	4b06      	ldr	r3, [pc, #24]	@ (800e9c8 <Cmd_SetStatus+0x48>)
 800e9b0:	681b      	ldr	r3, [r3, #0]
 800e9b2:	2b00      	cmp	r3, #0
 800e9b4:	d004      	beq.n	800e9c0 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 800e9b6:	4b04      	ldr	r3, [pc, #16]	@ (800e9c8 <Cmd_SetStatus+0x48>)
 800e9b8:	681b      	ldr	r3, [r3, #0]
 800e9ba:	2001      	movs	r0, #1
 800e9bc:	4798      	blx	r3
  return;
 800e9be:	bf00      	nop
 800e9c0:	bf00      	nop
}
 800e9c2:	3708      	adds	r7, #8
 800e9c4:	46bd      	mov	sp, r7
 800e9c6:	bd80      	pop	{r7, pc}
 800e9c8:	200029d4 	.word	0x200029d4
 800e9cc:	20000120 	.word	0x20000120

0800e9d0 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 800e9d0:	b580      	push	{r7, lr}
 800e9d2:	b082      	sub	sp, #8
 800e9d4:	af00      	add	r7, sp, #0
 800e9d6:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 800e9d8:	2000      	movs	r0, #0
 800e9da:	f7f2 fb41 	bl	8001060 <shci_cmd_resp_release>

  return;
 800e9de:	bf00      	nop
}
 800e9e0:	3708      	adds	r7, #8
 800e9e2:	46bd      	mov	sp, r7
 800e9e4:	bd80      	pop	{r7, pc}
	...

0800e9e8 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 800e9e8:	b580      	push	{r7, lr}
 800e9ea:	b082      	sub	sp, #8
 800e9ec:	af00      	add	r7, sp, #0
 800e9ee:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 800e9f0:	6879      	ldr	r1, [r7, #4]
 800e9f2:	4805      	ldr	r0, [pc, #20]	@ (800ea08 <TlUserEvtReceived+0x20>)
 800e9f4:	f000 fae6 	bl	800efc4 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800e9f8:	4803      	ldr	r0, [pc, #12]	@ (800ea08 <TlUserEvtReceived+0x20>)
 800e9fa:	f7f2 fb25 	bl	8001048 <shci_notify_asynch_evt>

  return;
 800e9fe:	bf00      	nop
}
 800ea00:	3708      	adds	r7, #8
 800ea02:	46bd      	mov	sp, r7
 800ea04:	bd80      	pop	{r7, pc}
 800ea06:	bf00      	nop
 800ea08:	20000118 	.word	0x20000118

0800ea0c <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 800ea0c:	b480      	push	{r7}
 800ea0e:	b083      	sub	sp, #12
 800ea10:	af00      	add	r7, sp, #0
 800ea12:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	4a05      	ldr	r2, [pc, #20]	@ (800ea2c <shci_register_io_bus+0x20>)
 800ea18:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	4a04      	ldr	r2, [pc, #16]	@ (800ea30 <shci_register_io_bus+0x24>)
 800ea1e:	611a      	str	r2, [r3, #16]

  return;
 800ea20:	bf00      	nop
}
 800ea22:	370c      	adds	r7, #12
 800ea24:	46bd      	mov	sp, r7
 800ea26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea2a:	4770      	bx	lr
 800ea2c:	0800ebc9 	.word	0x0800ebc9
 800ea30:	0800ec1d 	.word	0x0800ec1d

0800ea34 <TL_Enable>:

/******************************************************************************
 * GENERAL - refer to AN5289 for functions description.
 ******************************************************************************/
void TL_Enable( void )
{
 800ea34:	b580      	push	{r7, lr}
 800ea36:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 800ea38:	f001 fb00 	bl	801003c <HW_IPCC_Enable>

  return;
 800ea3c:	bf00      	nop
}
 800ea3e:	bd80      	pop	{r7, pc}

0800ea40 <TL_Init>:


void TL_Init( void )
{
 800ea40:	b580      	push	{r7, lr}
 800ea42:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 800ea44:	4b10      	ldr	r3, [pc, #64]	@ (800ea88 <TL_Init+0x48>)
 800ea46:	4a11      	ldr	r2, [pc, #68]	@ (800ea8c <TL_Init+0x4c>)
 800ea48:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 800ea4a:	4b0f      	ldr	r3, [pc, #60]	@ (800ea88 <TL_Init+0x48>)
 800ea4c:	4a10      	ldr	r2, [pc, #64]	@ (800ea90 <TL_Init+0x50>)
 800ea4e:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 800ea50:	4b0d      	ldr	r3, [pc, #52]	@ (800ea88 <TL_Init+0x48>)
 800ea52:	4a10      	ldr	r2, [pc, #64]	@ (800ea94 <TL_Init+0x54>)
 800ea54:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 800ea56:	4b0c      	ldr	r3, [pc, #48]	@ (800ea88 <TL_Init+0x48>)
 800ea58:	4a0f      	ldr	r2, [pc, #60]	@ (800ea98 <TL_Init+0x58>)
 800ea5a:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 800ea5c:	4b0a      	ldr	r3, [pc, #40]	@ (800ea88 <TL_Init+0x48>)
 800ea5e:	4a0f      	ldr	r2, [pc, #60]	@ (800ea9c <TL_Init+0x5c>)
 800ea60:	625a      	str	r2, [r3, #36]	@ 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 800ea62:	4b09      	ldr	r3, [pc, #36]	@ (800ea88 <TL_Init+0x48>)
 800ea64:	4a0e      	ldr	r2, [pc, #56]	@ (800eaa0 <TL_Init+0x60>)
 800ea66:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 800ea68:	4b07      	ldr	r3, [pc, #28]	@ (800ea88 <TL_Init+0x48>)
 800ea6a:	4a0e      	ldr	r2, [pc, #56]	@ (800eaa4 <TL_Init+0x64>)
 800ea6c:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 800ea6e:	4b06      	ldr	r3, [pc, #24]	@ (800ea88 <TL_Init+0x48>)
 800ea70:	4a0d      	ldr	r2, [pc, #52]	@ (800eaa8 <TL_Init+0x68>)
 800ea72:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 800ea74:	4b04      	ldr	r3, [pc, #16]	@ (800ea88 <TL_Init+0x48>)
 800ea76:	4a0d      	ldr	r2, [pc, #52]	@ (800eaac <TL_Init+0x6c>)
 800ea78:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 800ea7a:	4b03      	ldr	r3, [pc, #12]	@ (800ea88 <TL_Init+0x48>)
 800ea7c:	4a0c      	ldr	r2, [pc, #48]	@ (800eab0 <TL_Init+0x70>)
 800ea7e:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 800ea80:	f001 faf0 	bl	8010064 <HW_IPCC_Init>

  return;
 800ea84:	bf00      	nop
}
 800ea86:	bd80      	pop	{r7, pc}
 800ea88:	20030000 	.word	0x20030000
 800ea8c:	20030028 	.word	0x20030028
 800ea90:	20030048 	.word	0x20030048
 800ea94:	20030058 	.word	0x20030058
 800ea98:	20030068 	.word	0x20030068
 800ea9c:	20030070 	.word	0x20030070
 800eaa0:	20030078 	.word	0x20030078
 800eaa4:	20030080 	.word	0x20030080
 800eaa8:	2003009c 	.word	0x2003009c
 800eaac:	200300a0 	.word	0x200300a0
 800eab0:	200300ac 	.word	0x200300ac

0800eab4 <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 800eab4:	b580      	push	{r7, lr}
 800eab6:	b084      	sub	sp, #16
 800eab8:	af00      	add	r7, sp, #0
 800eaba:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 800eabc:	687b      	ldr	r3, [r7, #4]
 800eabe:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 800eac0:	4811      	ldr	r0, [pc, #68]	@ (800eb08 <TL_BLE_Init+0x54>)
 800eac2:	f000 fa27 	bl	800ef14 <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 800eac6:	4b11      	ldr	r3, [pc, #68]	@ (800eb0c <TL_BLE_Init+0x58>)
 800eac8:	685b      	ldr	r3, [r3, #4]
 800eaca:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800eacc:	68fb      	ldr	r3, [r7, #12]
 800eace:	689a      	ldr	r2, [r3, #8]
 800ead0:	68bb      	ldr	r3, [r7, #8]
 800ead2:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 800ead4:	68fb      	ldr	r3, [r7, #12]
 800ead6:	68da      	ldr	r2, [r3, #12]
 800ead8:	68bb      	ldr	r3, [r7, #8]
 800eada:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 800eadc:	68bb      	ldr	r3, [r7, #8]
 800eade:	4a0c      	ldr	r2, [pc, #48]	@ (800eb10 <TL_BLE_Init+0x5c>)
 800eae0:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 800eae2:	68bb      	ldr	r3, [r7, #8]
 800eae4:	4a08      	ldr	r2, [pc, #32]	@ (800eb08 <TL_BLE_Init+0x54>)
 800eae6:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 800eae8:	f001 fad2 	bl	8010090 <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 800eaec:	68fb      	ldr	r3, [r7, #12]
 800eaee:	681b      	ldr	r3, [r3, #0]
 800eaf0:	4a08      	ldr	r2, [pc, #32]	@ (800eb14 <TL_BLE_Init+0x60>)
 800eaf2:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 800eaf4:	68fb      	ldr	r3, [r7, #12]
 800eaf6:	685b      	ldr	r3, [r3, #4]
 800eaf8:	4a07      	ldr	r2, [pc, #28]	@ (800eb18 <TL_BLE_Init+0x64>)
 800eafa:	6013      	str	r3, [r2, #0]

  return 0;
 800eafc:	2300      	movs	r3, #0
}
 800eafe:	4618      	mov	r0, r3
 800eb00:	3710      	adds	r7, #16
 800eb02:	46bd      	mov	sp, r7
 800eb04:	bd80      	pop	{r7, pc}
 800eb06:	bf00      	nop
 800eb08:	200300c8 	.word	0x200300c8
 800eb0c:	20030000 	.word	0x20030000
 800eb10:	20030a58 	.word	0x20030a58
 800eb14:	200029e4 	.word	0x200029e4
 800eb18:	200029e8 	.word	0x200029e8

0800eb1c <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 800eb1c:	b580      	push	{r7, lr}
 800eb1e:	b082      	sub	sp, #8
 800eb20:	af00      	add	r7, sp, #0
 800eb22:	6078      	str	r0, [r7, #4]
 800eb24:	460b      	mov	r3, r1
 800eb26:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 800eb28:	4b09      	ldr	r3, [pc, #36]	@ (800eb50 <TL_BLE_SendCmd+0x34>)
 800eb2a:	685b      	ldr	r3, [r3, #4]
 800eb2c:	681b      	ldr	r3, [r3, #0]
 800eb2e:	2201      	movs	r2, #1
 800eb30:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 800eb32:	4b07      	ldr	r3, [pc, #28]	@ (800eb50 <TL_BLE_SendCmd+0x34>)
 800eb34:	685b      	ldr	r3, [r3, #4]
 800eb36:	681b      	ldr	r3, [r3, #0]
 800eb38:	4619      	mov	r1, r3
 800eb3a:	2001      	movs	r0, #1
 800eb3c:	f000 f96c 	bl	800ee18 <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 800eb40:	f001 fab0 	bl	80100a4 <HW_IPCC_BLE_SendCmd>

  return 0;
 800eb44:	2300      	movs	r3, #0
}
 800eb46:	4618      	mov	r0, r3
 800eb48:	3708      	adds	r7, #8
 800eb4a:	46bd      	mov	sp, r7
 800eb4c:	bd80      	pop	{r7, pc}
 800eb4e:	bf00      	nop
 800eb50:	20030000 	.word	0x20030000

0800eb54 <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 800eb54:	b580      	push	{r7, lr}
 800eb56:	b082      	sub	sp, #8
 800eb58:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 800eb5a:	e01c      	b.n	800eb96 <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 800eb5c:	1d3b      	adds	r3, r7, #4
 800eb5e:	4619      	mov	r1, r3
 800eb60:	4812      	ldr	r0, [pc, #72]	@ (800ebac <HW_IPCC_BLE_RxEvtNot+0x58>)
 800eb62:	f000 fa76 	bl	800f052 <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800eb66:	687b      	ldr	r3, [r7, #4]
 800eb68:	7a5b      	ldrb	r3, [r3, #9]
 800eb6a:	2b0f      	cmp	r3, #15
 800eb6c:	d003      	beq.n	800eb76 <HW_IPCC_BLE_RxEvtNot+0x22>
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	7a5b      	ldrb	r3, [r3, #9]
 800eb72:	2b0e      	cmp	r3, #14
 800eb74:	d105      	bne.n	800eb82 <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 800eb76:	687b      	ldr	r3, [r7, #4]
 800eb78:	4619      	mov	r1, r3
 800eb7a:	2002      	movs	r0, #2
 800eb7c:	f000 f94c 	bl	800ee18 <OutputDbgTrace>
 800eb80:	e004      	b.n	800eb8c <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	4619      	mov	r1, r3
 800eb86:	2003      	movs	r0, #3
 800eb88:	f000 f946 	bl	800ee18 <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 800eb8c:	4b08      	ldr	r3, [pc, #32]	@ (800ebb0 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 800eb8e:	681b      	ldr	r3, [r3, #0]
 800eb90:	687a      	ldr	r2, [r7, #4]
 800eb92:	4610      	mov	r0, r2
 800eb94:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 800eb96:	4805      	ldr	r0, [pc, #20]	@ (800ebac <HW_IPCC_BLE_RxEvtNot+0x58>)
 800eb98:	f000 f9cc 	bl	800ef34 <LST_is_empty>
 800eb9c:	4603      	mov	r3, r0
 800eb9e:	2b00      	cmp	r3, #0
 800eba0:	d0dc      	beq.n	800eb5c <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 800eba2:	bf00      	nop
}
 800eba4:	3708      	adds	r7, #8
 800eba6:	46bd      	mov	sp, r7
 800eba8:	bd80      	pop	{r7, pc}
 800ebaa:	bf00      	nop
 800ebac:	200300c8 	.word	0x200300c8
 800ebb0:	200029e4 	.word	0x200029e4

0800ebb4 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 800ebb4:	b580      	push	{r7, lr}
 800ebb6:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 800ebb8:	4b02      	ldr	r3, [pc, #8]	@ (800ebc4 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 800ebba:	681b      	ldr	r3, [r3, #0]
 800ebbc:	4798      	blx	r3

  return;
 800ebbe:	bf00      	nop
}
 800ebc0:	bd80      	pop	{r7, pc}
 800ebc2:	bf00      	nop
 800ebc4:	200029e8 	.word	0x200029e8

0800ebc8 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 800ebc8:	b580      	push	{r7, lr}
 800ebca:	b084      	sub	sp, #16
 800ebcc:	af00      	add	r7, sp, #0
 800ebce:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 800ebd4:	480d      	ldr	r0, [pc, #52]	@ (800ec0c <TL_SYS_Init+0x44>)
 800ebd6:	f000 f99d 	bl	800ef14 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 800ebda:	4b0d      	ldr	r3, [pc, #52]	@ (800ec10 <TL_SYS_Init+0x48>)
 800ebdc:	68db      	ldr	r3, [r3, #12]
 800ebde:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800ebe0:	68fb      	ldr	r3, [r7, #12]
 800ebe2:	689a      	ldr	r2, [r3, #8]
 800ebe4:	68bb      	ldr	r3, [r7, #8]
 800ebe6:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 800ebe8:	68bb      	ldr	r3, [r7, #8]
 800ebea:	4a08      	ldr	r2, [pc, #32]	@ (800ec0c <TL_SYS_Init+0x44>)
 800ebec:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 800ebee:	f001 fa7b 	bl	80100e8 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 800ebf2:	68fb      	ldr	r3, [r7, #12]
 800ebf4:	681b      	ldr	r3, [r3, #0]
 800ebf6:	4a07      	ldr	r2, [pc, #28]	@ (800ec14 <TL_SYS_Init+0x4c>)
 800ebf8:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 800ebfa:	68fb      	ldr	r3, [r7, #12]
 800ebfc:	685b      	ldr	r3, [r3, #4]
 800ebfe:	4a06      	ldr	r2, [pc, #24]	@ (800ec18 <TL_SYS_Init+0x50>)
 800ec00:	6013      	str	r3, [r2, #0]

  return 0;
 800ec02:	2300      	movs	r3, #0
}
 800ec04:	4618      	mov	r0, r3
 800ec06:	3710      	adds	r7, #16
 800ec08:	46bd      	mov	sp, r7
 800ec0a:	bd80      	pop	{r7, pc}
 800ec0c:	200300d0 	.word	0x200300d0
 800ec10:	20030000 	.word	0x20030000
 800ec14:	200029ec 	.word	0x200029ec
 800ec18:	200029f0 	.word	0x200029f0

0800ec1c <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 800ec1c:	b580      	push	{r7, lr}
 800ec1e:	b082      	sub	sp, #8
 800ec20:	af00      	add	r7, sp, #0
 800ec22:	6078      	str	r0, [r7, #4]
 800ec24:	460b      	mov	r3, r1
 800ec26:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 800ec28:	4b09      	ldr	r3, [pc, #36]	@ (800ec50 <TL_SYS_SendCmd+0x34>)
 800ec2a:	68db      	ldr	r3, [r3, #12]
 800ec2c:	681b      	ldr	r3, [r3, #0]
 800ec2e:	2210      	movs	r2, #16
 800ec30:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 800ec32:	4b07      	ldr	r3, [pc, #28]	@ (800ec50 <TL_SYS_SendCmd+0x34>)
 800ec34:	68db      	ldr	r3, [r3, #12]
 800ec36:	681b      	ldr	r3, [r3, #0]
 800ec38:	4619      	mov	r1, r3
 800ec3a:	2004      	movs	r0, #4
 800ec3c:	f000 f8ec 	bl	800ee18 <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 800ec40:	f001 fa5c 	bl	80100fc <HW_IPCC_SYS_SendCmd>

  return 0;
 800ec44:	2300      	movs	r3, #0
}
 800ec46:	4618      	mov	r0, r3
 800ec48:	3708      	adds	r7, #8
 800ec4a:	46bd      	mov	sp, r7
 800ec4c:	bd80      	pop	{r7, pc}
 800ec4e:	bf00      	nop
 800ec50:	20030000 	.word	0x20030000

0800ec54 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 800ec54:	b580      	push	{r7, lr}
 800ec56:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800ec58:	4b07      	ldr	r3, [pc, #28]	@ (800ec78 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800ec5a:	68db      	ldr	r3, [r3, #12]
 800ec5c:	681b      	ldr	r3, [r3, #0]
 800ec5e:	4619      	mov	r1, r3
 800ec60:	2005      	movs	r0, #5
 800ec62:	f000 f8d9 	bl	800ee18 <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800ec66:	4b05      	ldr	r3, [pc, #20]	@ (800ec7c <HW_IPCC_SYS_CmdEvtNot+0x28>)
 800ec68:	681b      	ldr	r3, [r3, #0]
 800ec6a:	4a03      	ldr	r2, [pc, #12]	@ (800ec78 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800ec6c:	68d2      	ldr	r2, [r2, #12]
 800ec6e:	6812      	ldr	r2, [r2, #0]
 800ec70:	4610      	mov	r0, r2
 800ec72:	4798      	blx	r3

  return;
 800ec74:	bf00      	nop
}
 800ec76:	bd80      	pop	{r7, pc}
 800ec78:	20030000 	.word	0x20030000
 800ec7c:	200029ec 	.word	0x200029ec

0800ec80 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 800ec80:	b580      	push	{r7, lr}
 800ec82:	b082      	sub	sp, #8
 800ec84:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800ec86:	e00e      	b.n	800eca6 <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 800ec88:	1d3b      	adds	r3, r7, #4
 800ec8a:	4619      	mov	r1, r3
 800ec8c:	480b      	ldr	r0, [pc, #44]	@ (800ecbc <HW_IPCC_SYS_EvtNot+0x3c>)
 800ec8e:	f000 f9e0 	bl	800f052 <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 800ec92:	687b      	ldr	r3, [r7, #4]
 800ec94:	4619      	mov	r1, r3
 800ec96:	2006      	movs	r0, #6
 800ec98:	f000 f8be 	bl	800ee18 <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 800ec9c:	4b08      	ldr	r3, [pc, #32]	@ (800ecc0 <HW_IPCC_SYS_EvtNot+0x40>)
 800ec9e:	681b      	ldr	r3, [r3, #0]
 800eca0:	687a      	ldr	r2, [r7, #4]
 800eca2:	4610      	mov	r0, r2
 800eca4:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800eca6:	4805      	ldr	r0, [pc, #20]	@ (800ecbc <HW_IPCC_SYS_EvtNot+0x3c>)
 800eca8:	f000 f944 	bl	800ef34 <LST_is_empty>
 800ecac:	4603      	mov	r3, r0
 800ecae:	2b00      	cmp	r3, #0
 800ecb0:	d0ea      	beq.n	800ec88 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 800ecb2:	bf00      	nop
}
 800ecb4:	3708      	adds	r7, #8
 800ecb6:	46bd      	mov	sp, r7
 800ecb8:	bd80      	pop	{r7, pc}
 800ecba:	bf00      	nop
 800ecbc:	200300d0 	.word	0x200300d0
 800ecc0:	200029f0 	.word	0x200029f0

0800ecc4 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 800ecc4:	b580      	push	{r7, lr}
 800ecc6:	b082      	sub	sp, #8
 800ecc8:	af00      	add	r7, sp, #0
 800ecca:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 800eccc:	4817      	ldr	r0, [pc, #92]	@ (800ed2c <TL_MM_Init+0x68>)
 800ecce:	f000 f921 	bl	800ef14 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 800ecd2:	4817      	ldr	r0, [pc, #92]	@ (800ed30 <TL_MM_Init+0x6c>)
 800ecd4:	f000 f91e 	bl	800ef14 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 800ecd8:	4b16      	ldr	r3, [pc, #88]	@ (800ed34 <TL_MM_Init+0x70>)
 800ecda:	691b      	ldr	r3, [r3, #16]
 800ecdc:	4a16      	ldr	r2, [pc, #88]	@ (800ed38 <TL_MM_Init+0x74>)
 800ecde:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 800ece0:	4b15      	ldr	r3, [pc, #84]	@ (800ed38 <TL_MM_Init+0x74>)
 800ece2:	681b      	ldr	r3, [r3, #0]
 800ece4:	687a      	ldr	r2, [r7, #4]
 800ece6:	6892      	ldr	r2, [r2, #8]
 800ece8:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 800ecea:	4b13      	ldr	r3, [pc, #76]	@ (800ed38 <TL_MM_Init+0x74>)
 800ecec:	681b      	ldr	r3, [r3, #0]
 800ecee:	687a      	ldr	r2, [r7, #4]
 800ecf0:	68d2      	ldr	r2, [r2, #12]
 800ecf2:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 800ecf4:	4b10      	ldr	r3, [pc, #64]	@ (800ed38 <TL_MM_Init+0x74>)
 800ecf6:	681b      	ldr	r3, [r3, #0]
 800ecf8:	4a0c      	ldr	r2, [pc, #48]	@ (800ed2c <TL_MM_Init+0x68>)
 800ecfa:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 800ecfc:	4b0e      	ldr	r3, [pc, #56]	@ (800ed38 <TL_MM_Init+0x74>)
 800ecfe:	681b      	ldr	r3, [r3, #0]
 800ed00:	687a      	ldr	r2, [r7, #4]
 800ed02:	6812      	ldr	r2, [r2, #0]
 800ed04:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 800ed06:	4b0c      	ldr	r3, [pc, #48]	@ (800ed38 <TL_MM_Init+0x74>)
 800ed08:	681b      	ldr	r3, [r3, #0]
 800ed0a:	687a      	ldr	r2, [r7, #4]
 800ed0c:	6852      	ldr	r2, [r2, #4]
 800ed0e:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 800ed10:	4b09      	ldr	r3, [pc, #36]	@ (800ed38 <TL_MM_Init+0x74>)
 800ed12:	681b      	ldr	r3, [r3, #0]
 800ed14:	687a      	ldr	r2, [r7, #4]
 800ed16:	6912      	ldr	r2, [r2, #16]
 800ed18:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 800ed1a:	4b07      	ldr	r3, [pc, #28]	@ (800ed38 <TL_MM_Init+0x74>)
 800ed1c:	681b      	ldr	r3, [r3, #0]
 800ed1e:	687a      	ldr	r2, [r7, #4]
 800ed20:	6952      	ldr	r2, [r2, #20]
 800ed22:	619a      	str	r2, [r3, #24]

  return;
 800ed24:	bf00      	nop
}
 800ed26:	3708      	adds	r7, #8
 800ed28:	46bd      	mov	sp, r7
 800ed2a:	bd80      	pop	{r7, pc}
 800ed2c:	200300b8 	.word	0x200300b8
 800ed30:	200029dc 	.word	0x200029dc
 800ed34:	20030000 	.word	0x20030000
 800ed38:	200029f4 	.word	0x200029f4

0800ed3c <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 800ed3c:	b580      	push	{r7, lr}
 800ed3e:	b082      	sub	sp, #8
 800ed40:	af00      	add	r7, sp, #0
 800ed42:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 800ed44:	6879      	ldr	r1, [r7, #4]
 800ed46:	4807      	ldr	r0, [pc, #28]	@ (800ed64 <TL_MM_EvtDone+0x28>)
 800ed48:	f000 f93c 	bl	800efc4 <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 800ed4c:	6879      	ldr	r1, [r7, #4]
 800ed4e:	2000      	movs	r0, #0
 800ed50:	f000 f862 	bl	800ee18 <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 800ed54:	4804      	ldr	r0, [pc, #16]	@ (800ed68 <TL_MM_EvtDone+0x2c>)
 800ed56:	f001 f9f7 	bl	8010148 <HW_IPCC_MM_SendFreeBuf>

  return;
 800ed5a:	bf00      	nop
}
 800ed5c:	3708      	adds	r7, #8
 800ed5e:	46bd      	mov	sp, r7
 800ed60:	bd80      	pop	{r7, pc}
 800ed62:	bf00      	nop
 800ed64:	200029dc 	.word	0x200029dc
 800ed68:	0800ed6d 	.word	0x0800ed6d

0800ed6c <SendFreeBuf>:

static void SendFreeBuf( void )
{
 800ed6c:	b580      	push	{r7, lr}
 800ed6e:	b082      	sub	sp, #8
 800ed70:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800ed72:	e00c      	b.n	800ed8e <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 800ed74:	1d3b      	adds	r3, r7, #4
 800ed76:	4619      	mov	r1, r3
 800ed78:	480a      	ldr	r0, [pc, #40]	@ (800eda4 <SendFreeBuf+0x38>)
 800ed7a:	f000 f96a 	bl	800f052 <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 800ed7e:	4b0a      	ldr	r3, [pc, #40]	@ (800eda8 <SendFreeBuf+0x3c>)
 800ed80:	691b      	ldr	r3, [r3, #16]
 800ed82:	691b      	ldr	r3, [r3, #16]
 800ed84:	687a      	ldr	r2, [r7, #4]
 800ed86:	4611      	mov	r1, r2
 800ed88:	4618      	mov	r0, r3
 800ed8a:	f000 f91b 	bl	800efc4 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800ed8e:	4805      	ldr	r0, [pc, #20]	@ (800eda4 <SendFreeBuf+0x38>)
 800ed90:	f000 f8d0 	bl	800ef34 <LST_is_empty>
 800ed94:	4603      	mov	r3, r0
 800ed96:	2b00      	cmp	r3, #0
 800ed98:	d0ec      	beq.n	800ed74 <SendFreeBuf+0x8>
  }

  return;
 800ed9a:	bf00      	nop
}
 800ed9c:	3708      	adds	r7, #8
 800ed9e:	46bd      	mov	sp, r7
 800eda0:	bd80      	pop	{r7, pc}
 800eda2:	bf00      	nop
 800eda4:	200029dc 	.word	0x200029dc
 800eda8:	20030000 	.word	0x20030000

0800edac <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 800edac:	b580      	push	{r7, lr}
 800edae:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 800edb0:	4805      	ldr	r0, [pc, #20]	@ (800edc8 <TL_TRACES_Init+0x1c>)
 800edb2:	f000 f8af 	bl	800ef14 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 800edb6:	4b05      	ldr	r3, [pc, #20]	@ (800edcc <TL_TRACES_Init+0x20>)
 800edb8:	695b      	ldr	r3, [r3, #20]
 800edba:	4a03      	ldr	r2, [pc, #12]	@ (800edc8 <TL_TRACES_Init+0x1c>)
 800edbc:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 800edbe:	f001 f9f9 	bl	80101b4 <HW_IPCC_TRACES_Init>

  return;
 800edc2:	bf00      	nop
}
 800edc4:	bd80      	pop	{r7, pc}
 800edc6:	bf00      	nop
 800edc8:	200300c0 	.word	0x200300c0
 800edcc:	20030000 	.word	0x20030000

0800edd0 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 800edd0:	b580      	push	{r7, lr}
 800edd2:	b082      	sub	sp, #8
 800edd4:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800edd6:	e008      	b.n	800edea <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 800edd8:	1d3b      	adds	r3, r7, #4
 800edda:	4619      	mov	r1, r3
 800eddc:	4808      	ldr	r0, [pc, #32]	@ (800ee00 <HW_IPCC_TRACES_EvtNot+0x30>)
 800edde:	f000 f938 	bl	800f052 <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 800ede2:	687b      	ldr	r3, [r7, #4]
 800ede4:	4618      	mov	r0, r3
 800ede6:	f000 f80d 	bl	800ee04 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800edea:	4805      	ldr	r0, [pc, #20]	@ (800ee00 <HW_IPCC_TRACES_EvtNot+0x30>)
 800edec:	f000 f8a2 	bl	800ef34 <LST_is_empty>
 800edf0:	4603      	mov	r3, r0
 800edf2:	2b00      	cmp	r3, #0
 800edf4:	d0f0      	beq.n	800edd8 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 800edf6:	bf00      	nop
}
 800edf8:	3708      	adds	r7, #8
 800edfa:	46bd      	mov	sp, r7
 800edfc:	bd80      	pop	{r7, pc}
 800edfe:	bf00      	nop
 800ee00:	200300c0 	.word	0x200300c0

0800ee04 <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 800ee04:	b480      	push	{r7}
 800ee06:	b083      	sub	sp, #12
 800ee08:	af00      	add	r7, sp, #0
 800ee0a:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 800ee0c:	bf00      	nop
 800ee0e:	370c      	adds	r7, #12
 800ee10:	46bd      	mov	sp, r7
 800ee12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee16:	4770      	bx	lr

0800ee18 <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 800ee18:	b480      	push	{r7}
 800ee1a:	b085      	sub	sp, #20
 800ee1c:	af00      	add	r7, sp, #0
 800ee1e:	4603      	mov	r3, r0
 800ee20:	6039      	str	r1, [r7, #0]
 800ee22:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 800ee24:	79fb      	ldrb	r3, [r7, #7]
 800ee26:	2b06      	cmp	r3, #6
 800ee28:	d845      	bhi.n	800eeb6 <OutputDbgTrace+0x9e>
 800ee2a:	a201      	add	r2, pc, #4	@ (adr r2, 800ee30 <OutputDbgTrace+0x18>)
 800ee2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee30:	0800ee4d 	.word	0x0800ee4d
 800ee34:	0800ee71 	.word	0x0800ee71
 800ee38:	0800ee77 	.word	0x0800ee77
 800ee3c:	0800ee8b 	.word	0x0800ee8b
 800ee40:	0800ee97 	.word	0x0800ee97
 800ee44:	0800ee9d 	.word	0x0800ee9d
 800ee48:	0800eeab 	.word	0x0800eeab
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800ee4c:	683b      	ldr	r3, [r7, #0]
 800ee4e:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800ee50:	68fb      	ldr	r3, [r7, #12]
 800ee52:	7a5b      	ldrb	r3, [r3, #9]
 800ee54:	2bff      	cmp	r3, #255	@ 0xff
 800ee56:	d005      	beq.n	800ee64 <OutputDbgTrace+0x4c>
 800ee58:	2bff      	cmp	r3, #255	@ 0xff
 800ee5a:	dc05      	bgt.n	800ee68 <OutputDbgTrace+0x50>
 800ee5c:	2b0e      	cmp	r3, #14
 800ee5e:	d005      	beq.n	800ee6c <OutputDbgTrace+0x54>
 800ee60:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 800ee62:	e001      	b.n	800ee68 <OutputDbgTrace+0x50>
          break;
 800ee64:	bf00      	nop
 800ee66:	e027      	b.n	800eeb8 <OutputDbgTrace+0xa0>
          break;
 800ee68:	bf00      	nop
 800ee6a:	e025      	b.n	800eeb8 <OutputDbgTrace+0xa0>
          break;
 800ee6c:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 800ee6e:	e023      	b.n	800eeb8 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800ee70:	683b      	ldr	r3, [r7, #0]
 800ee72:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800ee74:	e020      	b.n	800eeb8 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800ee76:	683b      	ldr	r3, [r7, #0]
 800ee78:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800ee7a:	68fb      	ldr	r3, [r7, #12]
 800ee7c:	7a5b      	ldrb	r3, [r3, #9]
 800ee7e:	2b0e      	cmp	r3, #14
 800ee80:	d001      	beq.n	800ee86 <OutputDbgTrace+0x6e>
 800ee82:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800ee84:	e000      	b.n	800ee88 <OutputDbgTrace+0x70>
          break;
 800ee86:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800ee88:	e016      	b.n	800eeb8 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800ee8a:	683b      	ldr	r3, [r7, #0]
 800ee8c:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800ee8e:	68fb      	ldr	r3, [r7, #12]
 800ee90:	7a5b      	ldrb	r3, [r3, #9]
 800ee92:	2bff      	cmp	r3, #255	@ 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800ee94:	e010      	b.n	800eeb8 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800ee96:	683b      	ldr	r3, [r7, #0]
 800ee98:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800ee9a:	e00d      	b.n	800eeb8 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800ee9c:	683b      	ldr	r3, [r7, #0]
 800ee9e:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800eea0:	68fb      	ldr	r3, [r7, #12]
 800eea2:	7a5b      	ldrb	r3, [r3, #9]
 800eea4:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800eea6:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800eea8:	e006      	b.n	800eeb8 <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800eeaa:	683b      	ldr	r3, [r7, #0]
 800eeac:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800eeae:	68fb      	ldr	r3, [r7, #12]
 800eeb0:	7a5b      	ldrb	r3, [r3, #9]
 800eeb2:	2bff      	cmp	r3, #255	@ 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800eeb4:	e000      	b.n	800eeb8 <OutputDbgTrace+0xa0>

    default:
      break;
 800eeb6:	bf00      	nop
  }

  return;
 800eeb8:	bf00      	nop
}
 800eeba:	3714      	adds	r7, #20
 800eebc:	46bd      	mov	sp, r7
 800eebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eec2:	4770      	bx	lr

0800eec4 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 800eec4:	b480      	push	{r7}
 800eec6:	b085      	sub	sp, #20
 800eec8:	af00      	add	r7, sp, #0
 800eeca:	4603      	mov	r3, r0
 800eecc:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 800eece:	4b0f      	ldr	r3, [pc, #60]	@ (800ef0c <OTP_Read+0x48>)
 800eed0:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800eed2:	e002      	b.n	800eeda <OTP_Read+0x16>
  {
    p_id -= 8 ;
 800eed4:	68fb      	ldr	r3, [r7, #12]
 800eed6:	3b08      	subs	r3, #8
 800eed8:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800eeda:	68fb      	ldr	r3, [r7, #12]
 800eedc:	3307      	adds	r3, #7
 800eede:	781b      	ldrb	r3, [r3, #0]
 800eee0:	79fa      	ldrb	r2, [r7, #7]
 800eee2:	429a      	cmp	r2, r3
 800eee4:	d003      	beq.n	800eeee <OTP_Read+0x2a>
 800eee6:	68fb      	ldr	r3, [r7, #12]
 800eee8:	4a09      	ldr	r2, [pc, #36]	@ (800ef10 <OTP_Read+0x4c>)
 800eeea:	4293      	cmp	r3, r2
 800eeec:	d1f2      	bne.n	800eed4 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 800eeee:	68fb      	ldr	r3, [r7, #12]
 800eef0:	3307      	adds	r3, #7
 800eef2:	781b      	ldrb	r3, [r3, #0]
 800eef4:	79fa      	ldrb	r2, [r7, #7]
 800eef6:	429a      	cmp	r2, r3
 800eef8:	d001      	beq.n	800eefe <OTP_Read+0x3a>
  {
    p_id = 0 ;
 800eefa:	2300      	movs	r3, #0
 800eefc:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 800eefe:	68fb      	ldr	r3, [r7, #12]
}
 800ef00:	4618      	mov	r0, r3
 800ef02:	3714      	adds	r7, #20
 800ef04:	46bd      	mov	sp, r7
 800ef06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef0a:	4770      	bx	lr
 800ef0c:	1fff73f8 	.word	0x1fff73f8
 800ef10:	1fff7000 	.word	0x1fff7000

0800ef14 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 800ef14:	b480      	push	{r7}
 800ef16:	b083      	sub	sp, #12
 800ef18:	af00      	add	r7, sp, #0
 800ef1a:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	687a      	ldr	r2, [r7, #4]
 800ef20:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 800ef22:	687b      	ldr	r3, [r7, #4]
 800ef24:	687a      	ldr	r2, [r7, #4]
 800ef26:	605a      	str	r2, [r3, #4]
}
 800ef28:	bf00      	nop
 800ef2a:	370c      	adds	r7, #12
 800ef2c:	46bd      	mov	sp, r7
 800ef2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef32:	4770      	bx	lr

0800ef34 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 800ef34:	b480      	push	{r7}
 800ef36:	b087      	sub	sp, #28
 800ef38:	af00      	add	r7, sp, #0
 800ef3a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ef3c:	f3ef 8310 	mrs	r3, PRIMASK
 800ef40:	60fb      	str	r3, [r7, #12]
  return(result);
 800ef42:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800ef44:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800ef46:	b672      	cpsid	i
}
 800ef48:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	681b      	ldr	r3, [r3, #0]
 800ef4e:	687a      	ldr	r2, [r7, #4]
 800ef50:	429a      	cmp	r2, r3
 800ef52:	d102      	bne.n	800ef5a <LST_is_empty+0x26>
  {
    return_value = TRUE;
 800ef54:	2301      	movs	r3, #1
 800ef56:	75fb      	strb	r3, [r7, #23]
 800ef58:	e001      	b.n	800ef5e <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 800ef5a:	2300      	movs	r3, #0
 800ef5c:	75fb      	strb	r3, [r7, #23]
 800ef5e:	693b      	ldr	r3, [r7, #16]
 800ef60:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ef62:	68bb      	ldr	r3, [r7, #8]
 800ef64:	f383 8810 	msr	PRIMASK, r3
}
 800ef68:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 800ef6a:	7dfb      	ldrb	r3, [r7, #23]
}
 800ef6c:	4618      	mov	r0, r3
 800ef6e:	371c      	adds	r7, #28
 800ef70:	46bd      	mov	sp, r7
 800ef72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef76:	4770      	bx	lr

0800ef78 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 800ef78:	b480      	push	{r7}
 800ef7a:	b087      	sub	sp, #28
 800ef7c:	af00      	add	r7, sp, #0
 800ef7e:	6078      	str	r0, [r7, #4]
 800ef80:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ef82:	f3ef 8310 	mrs	r3, PRIMASK
 800ef86:	60fb      	str	r3, [r7, #12]
  return(result);
 800ef88:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800ef8a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800ef8c:	b672      	cpsid	i
}
 800ef8e:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 800ef90:	687b      	ldr	r3, [r7, #4]
 800ef92:	681a      	ldr	r2, [r3, #0]
 800ef94:	683b      	ldr	r3, [r7, #0]
 800ef96:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 800ef98:	683b      	ldr	r3, [r7, #0]
 800ef9a:	687a      	ldr	r2, [r7, #4]
 800ef9c:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 800ef9e:	687b      	ldr	r3, [r7, #4]
 800efa0:	683a      	ldr	r2, [r7, #0]
 800efa2:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 800efa4:	683b      	ldr	r3, [r7, #0]
 800efa6:	681b      	ldr	r3, [r3, #0]
 800efa8:	683a      	ldr	r2, [r7, #0]
 800efaa:	605a      	str	r2, [r3, #4]
 800efac:	697b      	ldr	r3, [r7, #20]
 800efae:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800efb0:	693b      	ldr	r3, [r7, #16]
 800efb2:	f383 8810 	msr	PRIMASK, r3
}
 800efb6:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800efb8:	bf00      	nop
 800efba:	371c      	adds	r7, #28
 800efbc:	46bd      	mov	sp, r7
 800efbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efc2:	4770      	bx	lr

0800efc4 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 800efc4:	b480      	push	{r7}
 800efc6:	b087      	sub	sp, #28
 800efc8:	af00      	add	r7, sp, #0
 800efca:	6078      	str	r0, [r7, #4]
 800efcc:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800efce:	f3ef 8310 	mrs	r3, PRIMASK
 800efd2:	60fb      	str	r3, [r7, #12]
  return(result);
 800efd4:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800efd6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800efd8:	b672      	cpsid	i
}
 800efda:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 800efdc:	683b      	ldr	r3, [r7, #0]
 800efde:	687a      	ldr	r2, [r7, #4]
 800efe0:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 800efe2:	687b      	ldr	r3, [r7, #4]
 800efe4:	685a      	ldr	r2, [r3, #4]
 800efe6:	683b      	ldr	r3, [r7, #0]
 800efe8:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 800efea:	687b      	ldr	r3, [r7, #4]
 800efec:	683a      	ldr	r2, [r7, #0]
 800efee:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 800eff0:	683b      	ldr	r3, [r7, #0]
 800eff2:	685b      	ldr	r3, [r3, #4]
 800eff4:	683a      	ldr	r2, [r7, #0]
 800eff6:	601a      	str	r2, [r3, #0]
 800eff8:	697b      	ldr	r3, [r7, #20]
 800effa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800effc:	693b      	ldr	r3, [r7, #16]
 800effe:	f383 8810 	msr	PRIMASK, r3
}
 800f002:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800f004:	bf00      	nop
 800f006:	371c      	adds	r7, #28
 800f008:	46bd      	mov	sp, r7
 800f00a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f00e:	4770      	bx	lr

0800f010 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 800f010:	b480      	push	{r7}
 800f012:	b087      	sub	sp, #28
 800f014:	af00      	add	r7, sp, #0
 800f016:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f018:	f3ef 8310 	mrs	r3, PRIMASK
 800f01c:	60fb      	str	r3, [r7, #12]
  return(result);
 800f01e:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800f020:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800f022:	b672      	cpsid	i
}
 800f024:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 800f026:	687b      	ldr	r3, [r7, #4]
 800f028:	685b      	ldr	r3, [r3, #4]
 800f02a:	687a      	ldr	r2, [r7, #4]
 800f02c:	6812      	ldr	r2, [r2, #0]
 800f02e:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 800f030:	687b      	ldr	r3, [r7, #4]
 800f032:	681b      	ldr	r3, [r3, #0]
 800f034:	687a      	ldr	r2, [r7, #4]
 800f036:	6852      	ldr	r2, [r2, #4]
 800f038:	605a      	str	r2, [r3, #4]
 800f03a:	697b      	ldr	r3, [r7, #20]
 800f03c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f03e:	693b      	ldr	r3, [r7, #16]
 800f040:	f383 8810 	msr	PRIMASK, r3
}
 800f044:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800f046:	bf00      	nop
 800f048:	371c      	adds	r7, #28
 800f04a:	46bd      	mov	sp, r7
 800f04c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f050:	4770      	bx	lr

0800f052 <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 800f052:	b580      	push	{r7, lr}
 800f054:	b086      	sub	sp, #24
 800f056:	af00      	add	r7, sp, #0
 800f058:	6078      	str	r0, [r7, #4]
 800f05a:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f05c:	f3ef 8310 	mrs	r3, PRIMASK
 800f060:	60fb      	str	r3, [r7, #12]
  return(result);
 800f062:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800f064:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800f066:	b672      	cpsid	i
}
 800f068:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	681a      	ldr	r2, [r3, #0]
 800f06e:	683b      	ldr	r3, [r7, #0]
 800f070:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 800f072:	687b      	ldr	r3, [r7, #4]
 800f074:	681b      	ldr	r3, [r3, #0]
 800f076:	4618      	mov	r0, r3
 800f078:	f7ff ffca 	bl	800f010 <LST_remove_node>
 800f07c:	697b      	ldr	r3, [r7, #20]
 800f07e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f080:	693b      	ldr	r3, [r7, #16]
 800f082:	f383 8810 	msr	PRIMASK, r3
}
 800f086:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800f088:	bf00      	nop
 800f08a:	3718      	adds	r7, #24
 800f08c:	46bd      	mov	sp, r7
 800f08e:	bd80      	pop	{r7, pc}

0800f090 <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 800f090:	b480      	push	{r7}
 800f092:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 800f094:	4b03      	ldr	r3, [pc, #12]	@ (800f0a4 <LL_FLASH_GetUDN+0x14>)
 800f096:	681b      	ldr	r3, [r3, #0]
}
 800f098:	4618      	mov	r0, r3
 800f09a:	46bd      	mov	sp, r7
 800f09c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0a0:	4770      	bx	lr
 800f0a2:	bf00      	nop
 800f0a4:	1fff7580 	.word	0x1fff7580

0800f0a8 <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 for STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 800f0a8:	b480      	push	{r7}
 800f0aa:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 800f0ac:	4b03      	ldr	r3, [pc, #12]	@ (800f0bc <LL_FLASH_GetDeviceID+0x14>)
 800f0ae:	681b      	ldr	r3, [r3, #0]
 800f0b0:	b2db      	uxtb	r3, r3
}
 800f0b2:	4618      	mov	r0, r3
 800f0b4:	46bd      	mov	sp, r7
 800f0b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0ba:	4770      	bx	lr
 800f0bc:	1fff7584 	.word	0x1fff7584

0800f0c0 <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 800f0c0:	b480      	push	{r7}
 800f0c2:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 800f0c4:	4b03      	ldr	r3, [pc, #12]	@ (800f0d4 <LL_FLASH_GetSTCompanyID+0x14>)
 800f0c6:	681b      	ldr	r3, [r3, #0]
 800f0c8:	0a1b      	lsrs	r3, r3, #8
}
 800f0ca:	4618      	mov	r0, r3
 800f0cc:	46bd      	mov	sp, r7
 800f0ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0d2:	4770      	bx	lr
 800f0d4:	1fff7584 	.word	0x1fff7584

0800f0d8 <APP_BLE_Init>:

/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init(void)
{
 800f0d8:	b5b0      	push	{r4, r5, r7, lr}
 800f0da:	b090      	sub	sp, #64	@ 0x40
 800f0dc:	af00      	add	r7, sp, #0
  SHCI_CmdStatus_t status;
#if (RADIO_ACTIVITY_EVENT != 0)
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800f0de:	2392      	movs	r3, #146	@ 0x92
 800f0e0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#endif /* RADIO_ACTIVITY_EVENT != 0 */
  /* USER CODE BEGIN APP_BLE_Init_1 */

  UTIL_SEQ_RegTask( 1<<CFG_TASK_MY_TASK_BLE, UTIL_SEQ_RFU, myTask_BLE);
 800f0e4:	4a2e      	ldr	r2, [pc, #184]	@ (800f1a0 <APP_BLE_Init+0xc8>)
 800f0e6:	2100      	movs	r1, #0
 800f0e8:	2004      	movs	r0, #4
 800f0ea:	f001 f9b7 	bl	801045c <UTIL_SEQ_RegTask>
  UTIL_SEQ_SetTask(1 << CFG_TASK_MY_TASK_BLE, CFG_SCH_PRIO_0);
 800f0ee:	2100      	movs	r1, #0
 800f0f0:	2004      	movs	r0, #4
 800f0f2:	f001 f9d5 	bl	80104a0 <UTIL_SEQ_SetTask>

  UTIL_SEQ_RegTask( 1<<CFG_TASK_MY_TASK_IMU, UTIL_SEQ_RFU, myTask_IMU);
 800f0f6:	4a2b      	ldr	r2, [pc, #172]	@ (800f1a4 <APP_BLE_Init+0xcc>)
 800f0f8:	2100      	movs	r1, #0
 800f0fa:	2008      	movs	r0, #8
 800f0fc:	f001 f9ae 	bl	801045c <UTIL_SEQ_RegTask>
  UTIL_SEQ_SetTask(1 << CFG_TASK_MY_TASK_IMU, CFG_SCH_PRIO_0);
 800f100:	2100      	movs	r1, #0
 800f102:	2008      	movs	r0, #8
 800f104:	f001 f9cc 	bl	80104a0 <UTIL_SEQ_SetTask>

  /* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 800f108:	4b27      	ldr	r3, [pc, #156]	@ (800f1a8 <APP_BLE_Init+0xd0>)
 800f10a:	1d3c      	adds	r4, r7, #4
 800f10c:	461d      	mov	r5, r3
 800f10e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f110:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f112:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f114:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f116:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f118:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f11a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800f11e:	c403      	stmia	r4!, {r0, r1}
 800f120:	8022      	strh	r2, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init();
 800f122:	f000 f917 	bl	800f354 <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 800f126:	2101      	movs	r1, #1
 800f128:	2002      	movs	r0, #2
 800f12a:	f001 f86b 	bl	8010204 <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 800f12e:	4a1f      	ldr	r2, [pc, #124]	@ (800f1ac <APP_BLE_Init+0xd4>)
 800f130:	2100      	movs	r1, #0
 800f132:	2002      	movs	r0, #2
 800f134:	f001 f992 	bl	801045c <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  status = SHCI_C2_BLE_Init(&ble_init_cmd_packet);
 800f138:	1d3b      	adds	r3, r7, #4
 800f13a:	4618      	mov	r0, r3
 800f13c:	f7ff f8b4 	bl	800e2a8 <SHCI_C2_BLE_Init>
 800f140:	4603      	mov	r3, r0
 800f142:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  if (status != SHCI_Success)
 800f146:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800f14a:	2b00      	cmp	r3, #0
 800f14c:	d001      	beq.n	800f152 <APP_BLE_Init+0x7a>
  {
    APP_DBG_MSG("  Fail   : SHCI_C2_BLE_Init command, result: 0x%02x\n\r", status);
    /* if you are here, maybe CPU2 doesn't contain STM32WB_Copro_Wireless_Binaries, see Release_Notes.html */
    Error_Handler();
 800f14e:	f7f6 feb9 	bl	8005ec4 <Error_Handler>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 800f152:	f000 f915 	bl	800f380 <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 800f156:	f7ff f801 	bl	800e15c <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800f15a:	4b15      	ldr	r3, [pc, #84]	@ (800f1b0 <APP_BLE_Init+0xd8>)
 800f15c:	2200      	movs	r2, #0
 800f15e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 800f162:	4b13      	ldr	r3, [pc, #76]	@ (800f1b0 <APP_BLE_Init+0xd8>)
 800f164:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800f168:	82da      	strh	r2, [r3, #22]

  /**
   * From here, all initialization are BLE application specific
   */

  UTIL_SEQ_RegTask(1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 800f16a:	4a12      	ldr	r2, [pc, #72]	@ (800f1b4 <APP_BLE_Init+0xdc>)
 800f16c:	2100      	movs	r1, #0
 800f16e:	2001      	movs	r0, #1
 800f170:	f001 f974 	bl	801045c <UTIL_SEQ_RegTask>

  /**
   * Initialization of ADV - Ad Manufacturer Element - Support OTA Bit Mask
   */
#if (RADIO_ACTIVITY_EVENT != 0)
  ret = aci_hal_set_radio_activity_mask(0x0006);
 800f174:	2006      	movs	r0, #6
 800f176:	f7fe fe65 	bl	800de44 <aci_hal_set_radio_activity_mask>
 800f17a:	4603      	mov	r3, r0
 800f17c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#endif /* L2CAP_REQUEST_NEW_CONN_PARAM != 0 */

  /**
   * Initialize Custom Template Application
   */
  Custom_APP_Init();
 800f180:	f000 fc2a 	bl	800f9d8 <Custom_APP_Init>
  /* USER CODE END APP_BLE_Init_3 */

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 800f184:	4b0a      	ldr	r3, [pc, #40]	@ (800f1b0 <APP_BLE_Init+0xd8>)
 800f186:	2200      	movs	r2, #0
 800f188:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 800f18a:	4b09      	ldr	r3, [pc, #36]	@ (800f1b0 <APP_BLE_Init+0xd8>)
 800f18c:	2200      	movs	r2, #0
 800f18e:	761a      	strb	r2, [r3, #24]

  /**
   * Start to Advertise to be connected by a Client
   */
  Adv_Request(APP_BLE_FAST_ADV);
 800f190:	2001      	movs	r0, #1
 800f192:	f000 f9a9 	bl	800f4e8 <Adv_Request>

  /* USER CODE BEGIN APP_BLE_Init_2 */

  /* USER CODE END APP_BLE_Init_2 */

  return;
 800f196:	bf00      	nop
}
 800f198:	3740      	adds	r7, #64	@ 0x40
 800f19a:	46bd      	mov	sp, r7
 800f19c:	bdb0      	pop	{r4, r5, r7, pc}
 800f19e:	bf00      	nop
 800f1a0:	0800f6c5 	.word	0x0800f6c5
 800f1a4:	0800f6b7 	.word	0x0800f6b7
 800f1a8:	08012464 	.word	0x08012464
 800f1ac:	0800e4c5 	.word	0x0800e4c5
 800f1b0:	20002a00 	.word	0x20002a00
 800f1b4:	0800f5d1 	.word	0x0800f5d1

0800f1b8 <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification(void *p_Pckt)
{
 800f1b8:	b580      	push	{r7, lr}
 800f1ba:	b08a      	sub	sp, #40	@ 0x28
 800f1bc:	af00      	add	r7, sp, #0
 800f1be:	6078      	str	r0, [r7, #4]
  hci_event_pckt    *p_event_pckt;
  evt_le_meta_event *p_meta_evt;
  evt_blecore_aci   *p_blecore_evt;
  tBleStatus        ret = BLE_STATUS_INVALID_PARAMS;
 800f1c0:	2392      	movs	r3, #146	@ 0x92
 800f1c2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  p_event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) p_Pckt)->data;
 800f1c6:	687b      	ldr	r3, [r7, #4]
 800f1c8:	3301      	adds	r3, #1
 800f1ca:	623b      	str	r3, [r7, #32]

  switch (p_event_pckt->evt)
 800f1cc:	6a3b      	ldr	r3, [r7, #32]
 800f1ce:	781b      	ldrb	r3, [r3, #0]
 800f1d0:	2bff      	cmp	r3, #255	@ 0xff
 800f1d2:	d053      	beq.n	800f27c <SVCCTL_App_Notification+0xc4>
 800f1d4:	2bff      	cmp	r3, #255	@ 0xff
 800f1d6:	f300 80af 	bgt.w	800f338 <SVCCTL_App_Notification+0x180>
 800f1da:	2b05      	cmp	r3, #5
 800f1dc:	d002      	beq.n	800f1e4 <SVCCTL_App_Notification+0x2c>
 800f1de:	2b3e      	cmp	r3, #62	@ 0x3e
 800f1e0:	d020      	beq.n	800f224 <SVCCTL_App_Notification+0x6c>

    default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
      break;
 800f1e2:	e0a9      	b.n	800f338 <SVCCTL_App_Notification+0x180>
      p_disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) p_event_pckt->data;
 800f1e4:	6a3b      	ldr	r3, [r7, #32]
 800f1e6:	3302      	adds	r3, #2
 800f1e8:	60fb      	str	r3, [r7, #12]
      if (p_disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 800f1ea:	68fb      	ldr	r3, [r7, #12]
 800f1ec:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800f1f0:	b29a      	uxth	r2, r3
 800f1f2:	4b55      	ldr	r3, [pc, #340]	@ (800f348 <SVCCTL_App_Notification+0x190>)
 800f1f4:	8adb      	ldrh	r3, [r3, #22]
 800f1f6:	429a      	cmp	r2, r3
 800f1f8:	d106      	bne.n	800f208 <SVCCTL_App_Notification+0x50>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 800f1fa:	4b53      	ldr	r3, [pc, #332]	@ (800f348 <SVCCTL_App_Notification+0x190>)
 800f1fc:	2200      	movs	r2, #0
 800f1fe:	82da      	strh	r2, [r3, #22]
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800f200:	4b51      	ldr	r3, [pc, #324]	@ (800f348 <SVCCTL_App_Notification+0x190>)
 800f202:	2200      	movs	r2, #0
 800f204:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
      Adv_Request(APP_BLE_FAST_ADV);
 800f208:	2001      	movs	r0, #1
 800f20a:	f000 f96d 	bl	800f4e8 <Adv_Request>
      HandleNotification.Custom_Evt_Opcode = CUSTOM_DISCON_HANDLE_EVT;
 800f20e:	4b4f      	ldr	r3, [pc, #316]	@ (800f34c <SVCCTL_App_Notification+0x194>)
 800f210:	2201      	movs	r2, #1
 800f212:	701a      	strb	r2, [r3, #0]
      HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 800f214:	4b4c      	ldr	r3, [pc, #304]	@ (800f348 <SVCCTL_App_Notification+0x190>)
 800f216:	8ada      	ldrh	r2, [r3, #22]
 800f218:	4b4c      	ldr	r3, [pc, #304]	@ (800f34c <SVCCTL_App_Notification+0x194>)
 800f21a:	805a      	strh	r2, [r3, #2]
      Custom_APP_Notification(&HandleNotification);
 800f21c:	484b      	ldr	r0, [pc, #300]	@ (800f34c <SVCCTL_App_Notification+0x194>)
 800f21e:	f000 fbc7 	bl	800f9b0 <Custom_APP_Notification>
      break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 800f222:	e08c      	b.n	800f33e <SVCCTL_App_Notification+0x186>
      p_meta_evt = (evt_le_meta_event*) p_event_pckt->data;
 800f224:	6a3b      	ldr	r3, [r7, #32]
 800f226:	3302      	adds	r3, #2
 800f228:	617b      	str	r3, [r7, #20]
      switch (p_meta_evt->subevent)
 800f22a:	697b      	ldr	r3, [r7, #20]
 800f22c:	781b      	ldrb	r3, [r3, #0]
 800f22e:	2b01      	cmp	r3, #1
 800f230:	d001      	beq.n	800f236 <SVCCTL_App_Notification+0x7e>
 800f232:	2b03      	cmp	r3, #3
          break;
 800f234:	e021      	b.n	800f27a <SVCCTL_App_Notification+0xc2>
          p_connection_complete_event = (hci_le_connection_complete_event_rp0 *) p_meta_evt->data;
 800f236:	697b      	ldr	r3, [r7, #20]
 800f238:	3301      	adds	r3, #1
 800f23a:	613b      	str	r3, [r7, #16]
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 800f23c:	4b42      	ldr	r3, [pc, #264]	@ (800f348 <SVCCTL_App_Notification+0x190>)
 800f23e:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800f242:	2b04      	cmp	r3, #4
 800f244:	d104      	bne.n	800f250 <SVCCTL_App_Notification+0x98>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 800f246:	4b40      	ldr	r3, [pc, #256]	@ (800f348 <SVCCTL_App_Notification+0x190>)
 800f248:	2206      	movs	r2, #6
 800f24a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
 800f24e:	e003      	b.n	800f258 <SVCCTL_App_Notification+0xa0>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 800f250:	4b3d      	ldr	r3, [pc, #244]	@ (800f348 <SVCCTL_App_Notification+0x190>)
 800f252:	2205      	movs	r2, #5
 800f254:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = p_connection_complete_event->Connection_Handle;
 800f258:	693b      	ldr	r3, [r7, #16]
 800f25a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800f25e:	b29a      	uxth	r2, r3
 800f260:	4b39      	ldr	r3, [pc, #228]	@ (800f348 <SVCCTL_App_Notification+0x190>)
 800f262:	82da      	strh	r2, [r3, #22]
          HandleNotification.Custom_Evt_Opcode = CUSTOM_CONN_HANDLE_EVT;
 800f264:	4b39      	ldr	r3, [pc, #228]	@ (800f34c <SVCCTL_App_Notification+0x194>)
 800f266:	2200      	movs	r2, #0
 800f268:	701a      	strb	r2, [r3, #0]
          HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 800f26a:	4b37      	ldr	r3, [pc, #220]	@ (800f348 <SVCCTL_App_Notification+0x190>)
 800f26c:	8ada      	ldrh	r2, [r3, #22]
 800f26e:	4b37      	ldr	r3, [pc, #220]	@ (800f34c <SVCCTL_App_Notification+0x194>)
 800f270:	805a      	strh	r2, [r3, #2]
          Custom_APP_Notification(&HandleNotification);
 800f272:	4836      	ldr	r0, [pc, #216]	@ (800f34c <SVCCTL_App_Notification+0x194>)
 800f274:	f000 fb9c 	bl	800f9b0 <Custom_APP_Notification>
          break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 800f278:	bf00      	nop
      break; /* HCI_LE_META_EVT_CODE */
 800f27a:	e060      	b.n	800f33e <SVCCTL_App_Notification+0x186>
      p_blecore_evt = (evt_blecore_aci*) p_event_pckt->data;
 800f27c:	6a3b      	ldr	r3, [r7, #32]
 800f27e:	3302      	adds	r3, #2
 800f280:	61fb      	str	r3, [r7, #28]
      switch (p_blecore_evt->ecode)
 800f282:	69fb      	ldr	r3, [r7, #28]
 800f284:	881b      	ldrh	r3, [r3, #0]
 800f286:	b29b      	uxth	r3, r3
 800f288:	f640 420e 	movw	r2, #3086	@ 0xc0e
 800f28c:	4293      	cmp	r3, r2
 800f28e:	d047      	beq.n	800f320 <SVCCTL_App_Notification+0x168>
 800f290:	f640 420e 	movw	r2, #3086	@ 0xc0e
 800f294:	4293      	cmp	r3, r2
 800f296:	dc51      	bgt.n	800f33c <SVCCTL_App_Notification+0x184>
 800f298:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800f29c:	d046      	beq.n	800f32c <SVCCTL_App_Notification+0x174>
 800f29e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800f2a2:	dc4b      	bgt.n	800f33c <SVCCTL_App_Notification+0x184>
 800f2a4:	2b04      	cmp	r3, #4
 800f2a6:	d043      	beq.n	800f330 <SVCCTL_App_Notification+0x178>
 800f2a8:	2b04      	cmp	r3, #4
 800f2aa:	db47      	blt.n	800f33c <SVCCTL_App_Notification+0x184>
 800f2ac:	f240 420a 	movw	r2, #1034	@ 0x40a
 800f2b0:	4293      	cmp	r3, r2
 800f2b2:	dc43      	bgt.n	800f33c <SVCCTL_App_Notification+0x184>
 800f2b4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f2b8:	dd40      	ble.n	800f33c <SVCCTL_App_Notification+0x184>
 800f2ba:	f2a3 4301 	subw	r3, r3, #1025	@ 0x401
 800f2be:	2b09      	cmp	r3, #9
 800f2c0:	d83c      	bhi.n	800f33c <SVCCTL_App_Notification+0x184>
 800f2c2:	a201      	add	r2, pc, #4	@ (adr r2, 800f2c8 <SVCCTL_App_Notification+0x110>)
 800f2c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f2c8:	0800f319 	.word	0x0800f319
 800f2cc:	0800f2f1 	.word	0x0800f2f1
 800f2d0:	0800f33d 	.word	0x0800f33d
 800f2d4:	0800f33d 	.word	0x0800f33d
 800f2d8:	0800f33d 	.word	0x0800f33d
 800f2dc:	0800f33d 	.word	0x0800f33d
 800f2e0:	0800f335 	.word	0x0800f335
 800f2e4:	0800f33d 	.word	0x0800f33d
 800f2e8:	0800f305 	.word	0x0800f305
 800f2ec:	0800f335 	.word	0x0800f335
          ret = aci_gap_pass_key_resp(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, CFG_FIXED_PIN);
 800f2f0:	4b15      	ldr	r3, [pc, #84]	@ (800f348 <SVCCTL_App_Notification+0x190>)
 800f2f2:	8adb      	ldrh	r3, [r3, #22]
 800f2f4:	4916      	ldr	r1, [pc, #88]	@ (800f350 <SVCCTL_App_Notification+0x198>)
 800f2f6:	4618      	mov	r0, r3
 800f2f8:	f7fd ffa6 	bl	800d248 <aci_gap_pass_key_resp>
 800f2fc:	4603      	mov	r3, r0
 800f2fe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
          break;
 800f302:	e018      	b.n	800f336 <SVCCTL_App_Notification+0x17e>
          ret = aci_gap_numeric_comparison_value_confirm_yesno(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, YES);
 800f304:	4b10      	ldr	r3, [pc, #64]	@ (800f348 <SVCCTL_App_Notification+0x190>)
 800f306:	8adb      	ldrh	r3, [r3, #22]
 800f308:	2101      	movs	r1, #1
 800f30a:	4618      	mov	r0, r3
 800f30c:	f7fe f946 	bl	800d59c <aci_gap_numeric_comparison_value_confirm_yesno>
 800f310:	4603      	mov	r3, r0
 800f312:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
          break;
 800f316:	e00e      	b.n	800f336 <SVCCTL_App_Notification+0x17e>
          p_pairing_complete = (aci_gap_pairing_complete_event_rp0*)p_blecore_evt->data;
 800f318:	69fb      	ldr	r3, [r7, #28]
 800f31a:	3302      	adds	r3, #2
 800f31c:	61bb      	str	r3, [r7, #24]
          break;
 800f31e:	e00a      	b.n	800f336 <SVCCTL_App_Notification+0x17e>
          aci_gatt_confirm_indication(BleApplicationContext.BleApplicationContext_legacy.connectionHandle);
 800f320:	4b09      	ldr	r3, [pc, #36]	@ (800f348 <SVCCTL_App_Notification+0x190>)
 800f322:	8adb      	ldrh	r3, [r3, #22]
 800f324:	4618      	mov	r0, r3
 800f326:	f7fe fc4c 	bl	800dbc2 <aci_gatt_confirm_indication>
        break;
 800f32a:	e004      	b.n	800f336 <SVCCTL_App_Notification+0x17e>
          break;
 800f32c:	bf00      	nop
 800f32e:	e005      	b.n	800f33c <SVCCTL_App_Notification+0x184>
          break; /* ACI_HAL_END_OF_RADIO_ACTIVITY_VSEVT_CODE */
 800f330:	bf00      	nop
 800f332:	e003      	b.n	800f33c <SVCCTL_App_Notification+0x184>
          break; /* ACI_GAP_PROC_COMPLETE_VSEVT_CODE */
 800f334:	bf00      	nop
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800f336:	e001      	b.n	800f33c <SVCCTL_App_Notification+0x184>
      break;
 800f338:	bf00      	nop
 800f33a:	e000      	b.n	800f33e <SVCCTL_App_Notification+0x186>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800f33c:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 800f33e:	2301      	movs	r3, #1
}
 800f340:	4618      	mov	r0, r3
 800f342:	3728      	adds	r7, #40	@ 0x28
 800f344:	46bd      	mov	sp, r7
 800f346:	bd80      	pop	{r7, pc}
 800f348:	20002a00 	.word	0x20002a00
 800f34c:	20002a84 	.word	0x20002a84
 800f350:	0001b207 	.word	0x0001b207

0800f354 <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init(void)
{
 800f354:	b580      	push	{r7, lr}
 800f356:	b082      	sub	sp, #8
 800f358:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 800f35a:	4b06      	ldr	r3, [pc, #24]	@ (800f374 <Ble_Tl_Init+0x20>)
 800f35c:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 800f35e:	4b06      	ldr	r3, [pc, #24]	@ (800f378 <Ble_Tl_Init+0x24>)
 800f360:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 800f362:	463b      	mov	r3, r7
 800f364:	4619      	mov	r1, r3
 800f366:	4805      	ldr	r0, [pc, #20]	@ (800f37c <Ble_Tl_Init+0x28>)
 800f368:	f7ff f890 	bl	800e48c <hci_init>

  return;
 800f36c:	bf00      	nop
}
 800f36e:	3708      	adds	r7, #8
 800f370:	46bd      	mov	sp, r7
 800f372:	bd80      	pop	{r7, pc}
 800f374:	200300d8 	.word	0x200300d8
 800f378:	0800f681 	.word	0x0800f681
 800f37c:	0800f649 	.word	0x0800f649

0800f380 <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void)
{
 800f380:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f382:	b08d      	sub	sp, #52	@ 0x34
 800f384:	af06      	add	r7, sp, #24
  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *p_bd_addr;
  uint16_t a_appearance[1] = {BLE_CFG_GAP_APPEARANCE};
 800f386:	2300      	movs	r3, #0
 800f388:	803b      	strh	r3, [r7, #0]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800f38a:	2392      	movs	r3, #146	@ 0x92
 800f38c:	75fb      	strb	r3, [r7, #23]

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  ret = hci_reset();
 800f38e:	f7fe fdad 	bl	800deec <hci_reset>
 800f392:	4603      	mov	r3, r0
 800f394:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write the BD Address
   */
  p_bd_addr = BleGetBdAddress();
 800f396:	f000 f8d7 	bl	800f548 <BleGetBdAddress>
 800f39a:	6138      	str	r0, [r7, #16]
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET, CONFIG_DATA_PUBADDR_LEN, (uint8_t*) p_bd_addr);
 800f39c:	693a      	ldr	r2, [r7, #16]
 800f39e:	2106      	movs	r1, #6
 800f3a0:	2000      	movs	r0, #0
 800f3a2:	f7fe fc63 	bl	800dc6c <aci_hal_write_config_data>
 800f3a6:	4603      	mov	r3, r0
 800f3a8:	75fb      	strb	r3, [r7, #23]
#endif /* CFG_BLE_ADDRESS_TYPE != GAP_PUBLIC_ADDR */

  /**
   * Write Identity root key used to derive IRK and DHK(Legacy)
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)a_BLE_CfgIrValue);
 800f3aa:	4a4a      	ldr	r2, [pc, #296]	@ (800f4d4 <Ble_Hci_Gap_Gatt_Init+0x154>)
 800f3ac:	2110      	movs	r1, #16
 800f3ae:	2018      	movs	r0, #24
 800f3b0:	f7fe fc5c 	bl	800dc6c <aci_hal_write_config_data>
 800f3b4:	4603      	mov	r3, r0
 800f3b6:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write Encryption root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)a_BLE_CfgErValue);
 800f3b8:	4a47      	ldr	r2, [pc, #284]	@ (800f4d8 <Ble_Hci_Gap_Gatt_Init+0x158>)
 800f3ba:	2110      	movs	r1, #16
 800f3bc:	2008      	movs	r0, #8
 800f3be:	f7fe fc55 	bl	800dc6c <aci_hal_write_config_data>
 800f3c2:	4603      	mov	r3, r0
 800f3c4:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Set TX Power.
   */
  ret = aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 800f3c6:	2118      	movs	r1, #24
 800f3c8:	2001      	movs	r0, #1
 800f3ca:	f7fe fcd4 	bl	800dd76 <aci_hal_set_tx_power_level>
 800f3ce:	4603      	mov	r3, r0
 800f3d0:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GATT interface
   */
  ret = aci_gatt_init();
 800f3d2:	f7fe f94a 	bl	800d66a <aci_gatt_init>
 800f3d6:	4603      	mov	r3, r0
 800f3d8:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GAP interface
   */
  role = 0;
 800f3da:	2300      	movs	r3, #0
 800f3dc:	73fb      	strb	r3, [r7, #15]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 800f3de:	7bfb      	ldrb	r3, [r7, #15]
 800f3e0:	f043 0301 	orr.w	r3, r3, #1
 800f3e4:	73fb      	strb	r3, [r7, #15]

/* USER CODE BEGIN Role_Mngt*/

/* USER CODE END Role_Mngt */

  if (role > 0)
 800f3e6:	7bfb      	ldrb	r3, [r7, #15]
 800f3e8:	2b00      	cmp	r3, #0
 800f3ea:	d01f      	beq.n	800f42c <Ble_Hci_Gap_Gatt_Init+0xac>
  {
    const char *name = CFG_GAP_DEVICE_NAME;
 800f3ec:	4b3b      	ldr	r3, [pc, #236]	@ (800f4dc <Ble_Hci_Gap_Gatt_Init+0x15c>)
 800f3ee:	60bb      	str	r3, [r7, #8]
    ret = aci_gap_init(role,
 800f3f0:	1dba      	adds	r2, r7, #6
 800f3f2:	7bf8      	ldrb	r0, [r7, #15]
 800f3f4:	1cbb      	adds	r3, r7, #2
 800f3f6:	9301      	str	r3, [sp, #4]
 800f3f8:	1d3b      	adds	r3, r7, #4
 800f3fa:	9300      	str	r3, [sp, #0]
 800f3fc:	4613      	mov	r3, r2
 800f3fe:	2208      	movs	r2, #8
 800f400:	2100      	movs	r1, #0
 800f402:	f7fd ff88 	bl	800d316 <aci_gap_init>
 800f406:	4603      	mov	r3, r0
 800f408:	75fb      	strb	r3, [r7, #23]
    else
    {
      APP_DBG_MSG("  Success: aci_gap_init command\n");
    }

    ret = aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name);
 800f40a:	88fc      	ldrh	r4, [r7, #6]
 800f40c:	88bd      	ldrh	r5, [r7, #4]
 800f40e:	68b8      	ldr	r0, [r7, #8]
 800f410:	f7f0 feb6 	bl	8000180 <strlen>
 800f414:	4603      	mov	r3, r0
 800f416:	b2da      	uxtb	r2, r3
 800f418:	68bb      	ldr	r3, [r7, #8]
 800f41a:	9300      	str	r3, [sp, #0]
 800f41c:	4613      	mov	r3, r2
 800f41e:	2200      	movs	r2, #0
 800f420:	4629      	mov	r1, r5
 800f422:	4620      	mov	r0, r4
 800f424:	f7fe fb24 	bl	800da70 <aci_gatt_update_char_value>
 800f428:	4603      	mov	r3, r0
 800f42a:	75fb      	strb	r3, [r7, #23]
    {
      BLE_DBG_SVCCTL_MSG("  Success: aci_gatt_update_char_value - Device Name\n");
    }
  }

  ret = aci_gatt_update_char_value(gap_service_handle,
 800f42c:	88f8      	ldrh	r0, [r7, #6]
 800f42e:	8879      	ldrh	r1, [r7, #2]
 800f430:	463b      	mov	r3, r7
 800f432:	9300      	str	r3, [sp, #0]
 800f434:	2302      	movs	r3, #2
 800f436:	2200      	movs	r2, #0
 800f438:	f7fe fb1a 	bl	800da70 <aci_gatt_update_char_value>
 800f43c:	4603      	mov	r3, r0
 800f43e:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize Default PHY
   */
  ret = hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 800f440:	2202      	movs	r2, #2
 800f442:	2102      	movs	r1, #2
 800f444:	2000      	movs	r0, #0
 800f446:	f7fe fd75 	bl	800df34 <hci_le_set_default_phy>
 800f44a:	4603      	mov	r3, r0
 800f44c:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 800f44e:	4b24      	ldr	r3, [pc, #144]	@ (800f4e0 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800f450:	2201      	movs	r2, #1
 800f452:	701a      	strb	r2, [r3, #0]
  ret = aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 800f454:	4b22      	ldr	r3, [pc, #136]	@ (800f4e0 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800f456:	781b      	ldrb	r3, [r3, #0]
 800f458:	4618      	mov	r0, r3
 800f45a:	f7fd fddd 	bl	800d018 <aci_gap_set_io_capability>
 800f45e:	4603      	mov	r3, r0
 800f460:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 800f462:	4b1f      	ldr	r3, [pc, #124]	@ (800f4e0 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800f464:	2201      	movs	r2, #1
 800f466:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 800f468:	4b1d      	ldr	r3, [pc, #116]	@ (800f4e0 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800f46a:	2208      	movs	r2, #8
 800f46c:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 800f46e:	4b1c      	ldr	r3, [pc, #112]	@ (800f4e0 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800f470:	2210      	movs	r2, #16
 800f472:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 800f474:	4b1a      	ldr	r3, [pc, #104]	@ (800f4e0 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800f476:	2200      	movs	r2, #0
 800f478:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 800f47a:	4b19      	ldr	r3, [pc, #100]	@ (800f4e0 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800f47c:	4a19      	ldr	r2, [pc, #100]	@ (800f4e4 <Ble_Hci_Gap_Gatt_Init+0x164>)
 800f47e:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 800f480:	4b17      	ldr	r3, [pc, #92]	@ (800f4e0 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800f482:	2200      	movs	r2, #0
 800f484:	709a      	strb	r2, [r3, #2]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init_1*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init_1*/

  ret = aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 800f486:	4b16      	ldr	r3, [pc, #88]	@ (800f4e0 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800f488:	789c      	ldrb	r4, [r3, #2]
 800f48a:	4b15      	ldr	r3, [pc, #84]	@ (800f4e0 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800f48c:	785d      	ldrb	r5, [r3, #1]
 800f48e:	4b14      	ldr	r3, [pc, #80]	@ (800f4e0 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800f490:	791b      	ldrb	r3, [r3, #4]
 800f492:	4a13      	ldr	r2, [pc, #76]	@ (800f4e0 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800f494:	7952      	ldrb	r2, [r2, #5]
 800f496:	4912      	ldr	r1, [pc, #72]	@ (800f4e0 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800f498:	78c9      	ldrb	r1, [r1, #3]
 800f49a:	4811      	ldr	r0, [pc, #68]	@ (800f4e0 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800f49c:	6880      	ldr	r0, [r0, #8]
 800f49e:	2600      	movs	r6, #0
 800f4a0:	9604      	str	r6, [sp, #16]
 800f4a2:	9003      	str	r0, [sp, #12]
 800f4a4:	9102      	str	r1, [sp, #8]
 800f4a6:	9201      	str	r2, [sp, #4]
 800f4a8:	9300      	str	r3, [sp, #0]
 800f4aa:	2300      	movs	r3, #0
 800f4ac:	2201      	movs	r2, #1
 800f4ae:	4629      	mov	r1, r5
 800f4b0:	4620      	mov	r0, r4
 800f4b2:	f7fd fe05 	bl	800d0c0 <aci_gap_set_authentication_requirement>
 800f4b6:	4603      	mov	r3, r0
 800f4b8:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize whitelist
   */
  if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 800f4ba:	4b09      	ldr	r3, [pc, #36]	@ (800f4e0 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800f4bc:	789b      	ldrb	r3, [r3, #2]
 800f4be:	2b00      	cmp	r3, #0
 800f4c0:	d003      	beq.n	800f4ca <Ble_Hci_Gap_Gatt_Init+0x14a>
  {
    ret = aci_gap_configure_whitelist();
 800f4c2:	f7fe f847 	bl	800d554 <aci_gap_configure_filter_accept_list>
 800f4c6:	4603      	mov	r3, r0
 800f4c8:	75fb      	strb	r3, [r7, #23]
    {
      APP_DBG_MSG("  Success: aci_gap_configure_whitelist command\n");
    }
  }
  APP_DBG_MSG("==>> End Ble_Hci_Gap_Gatt_Init function\n\r");
}
 800f4ca:	bf00      	nop
 800f4cc:	371c      	adds	r7, #28
 800f4ce:	46bd      	mov	sp, r7
 800f4d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f4d2:	bf00      	nop
 800f4d4:	08012664 	.word	0x08012664
 800f4d8:	08012674 	.word	0x08012674
 800f4dc:	080124a0 	.word	0x080124a0
 800f4e0:	20002a00 	.word	0x20002a00
 800f4e4:	0001b207 	.word	0x0001b207

0800f4e8 <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t NewStatus)
{
 800f4e8:	b580      	push	{r7, lr}
 800f4ea:	b08c      	sub	sp, #48	@ 0x30
 800f4ec:	af08      	add	r7, sp, #32
 800f4ee:	4603      	mov	r3, r0
 800f4f0:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800f4f2:	2392      	movs	r3, #146	@ 0x92
 800f4f4:	73fb      	strb	r3, [r7, #15]

  BleApplicationContext.Device_Connection_Status = NewStatus;
 800f4f6:	4a12      	ldr	r2, [pc, #72]	@ (800f540 <Adv_Request+0x58>)
 800f4f8:	79fb      	ldrb	r3, [r7, #7]
 800f4fa:	f882 3080 	strb.w	r3, [r2, #128]	@ 0x80
  /* Start Fast or Low Power Advertising */
  ret = aci_gap_set_discoverable(ADV_TYPE,
 800f4fe:	2300      	movs	r3, #0
 800f500:	9306      	str	r3, [sp, #24]
 800f502:	2300      	movs	r3, #0
 800f504:	9305      	str	r3, [sp, #20]
 800f506:	2300      	movs	r3, #0
 800f508:	9304      	str	r3, [sp, #16]
 800f50a:	2300      	movs	r3, #0
 800f50c:	9303      	str	r3, [sp, #12]
 800f50e:	2300      	movs	r3, #0
 800f510:	9302      	str	r3, [sp, #8]
 800f512:	2300      	movs	r3, #0
 800f514:	9301      	str	r3, [sp, #4]
 800f516:	2300      	movs	r3, #0
 800f518:	9300      	str	r3, [sp, #0]
 800f51a:	2300      	movs	r3, #0
 800f51c:	22a0      	movs	r2, #160	@ 0xa0
 800f51e:	2180      	movs	r1, #128	@ 0x80
 800f520:	2000      	movs	r0, #0
 800f522:	f7fd fc7f 	bl	800ce24 <aci_gap_set_discoverable>
 800f526:	4603      	mov	r3, r0
 800f528:	73fb      	strb	r3, [r7, #15]
/* USER CODE BEGIN Adv_Request_1*/

/* USER CODE END Adv_Request_1*/

  /* Update Advertising data */
  ret = aci_gap_update_adv_data(sizeof(a_AdvData), (uint8_t*) a_AdvData);
 800f52a:	4906      	ldr	r1, [pc, #24]	@ (800f544 <Adv_Request+0x5c>)
 800f52c:	200a      	movs	r0, #10
 800f52e:	f7fd ff9f 	bl	800d470 <aci_gap_update_adv_data>
 800f532:	4603      	mov	r3, r0
 800f534:	73fb      	strb	r3, [r7, #15]
  else
  {
      APP_DBG_MSG("==>> Success: Start Fast Advertising \n\r");
  }

  return;
 800f536:	bf00      	nop
}
 800f538:	3710      	adds	r7, #16
 800f53a:	46bd      	mov	sp, r7
 800f53c:	bd80      	pop	{r7, pc}
 800f53e:	bf00      	nop
 800f540:	20002a00 	.word	0x20002a00
 800f544:	20000058 	.word	0x20000058

0800f548 <BleGetBdAddress>:

const uint8_t* BleGetBdAddress(void)
{
 800f548:	b580      	push	{r7, lr}
 800f54a:	b086      	sub	sp, #24
 800f54c:	af00      	add	r7, sp, #0
  const uint8_t *p_bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 800f54e:	f7ff fd9f 	bl	800f090 <LL_FLASH_GetUDN>
 800f552:	6138      	str	r0, [r7, #16]

  if (udn != 0xFFFFFFFF)
 800f554:	693b      	ldr	r3, [r7, #16]
 800f556:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f55a:	d023      	beq.n	800f5a4 <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 800f55c:	f7ff fdb0 	bl	800f0c0 <LL_FLASH_GetSTCompanyID>
 800f560:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 800f562:	f7ff fda1 	bl	800f0a8 <LL_FLASH_GetDeviceID>
 800f566:	6078      	str	r0, [r7, #4]
     * bit[23:16] : Device ID.
     * bit[15:0] : The last 16bits from the UDN
     * Note: In order to use the Public Address in a final product, a dedicated
     * 24bits company ID (OUI) shall be bought.
     */
    a_BdAddrUdn[0] = (uint8_t)(udn & 0x000000FF);
 800f568:	693b      	ldr	r3, [r7, #16]
 800f56a:	b2da      	uxtb	r2, r3
 800f56c:	4b16      	ldr	r3, [pc, #88]	@ (800f5c8 <BleGetBdAddress+0x80>)
 800f56e:	701a      	strb	r2, [r3, #0]
    a_BdAddrUdn[1] = (uint8_t)((udn & 0x0000FF00) >> 8);
 800f570:	693b      	ldr	r3, [r7, #16]
 800f572:	0a1b      	lsrs	r3, r3, #8
 800f574:	b2da      	uxtb	r2, r3
 800f576:	4b14      	ldr	r3, [pc, #80]	@ (800f5c8 <BleGetBdAddress+0x80>)
 800f578:	705a      	strb	r2, [r3, #1]
    a_BdAddrUdn[2] = (uint8_t)device_id;
 800f57a:	687b      	ldr	r3, [r7, #4]
 800f57c:	b2da      	uxtb	r2, r3
 800f57e:	4b12      	ldr	r3, [pc, #72]	@ (800f5c8 <BleGetBdAddress+0x80>)
 800f580:	709a      	strb	r2, [r3, #2]
    a_BdAddrUdn[3] = (uint8_t)(company_id & 0x000000FF);
 800f582:	68bb      	ldr	r3, [r7, #8]
 800f584:	b2da      	uxtb	r2, r3
 800f586:	4b10      	ldr	r3, [pc, #64]	@ (800f5c8 <BleGetBdAddress+0x80>)
 800f588:	70da      	strb	r2, [r3, #3]
    a_BdAddrUdn[4] = (uint8_t)((company_id & 0x0000FF00) >> 8);
 800f58a:	68bb      	ldr	r3, [r7, #8]
 800f58c:	0a1b      	lsrs	r3, r3, #8
 800f58e:	b2da      	uxtb	r2, r3
 800f590:	4b0d      	ldr	r3, [pc, #52]	@ (800f5c8 <BleGetBdAddress+0x80>)
 800f592:	711a      	strb	r2, [r3, #4]
    a_BdAddrUdn[5] = (uint8_t)((company_id & 0x00FF0000) >> 16);
 800f594:	68bb      	ldr	r3, [r7, #8]
 800f596:	0c1b      	lsrs	r3, r3, #16
 800f598:	b2da      	uxtb	r2, r3
 800f59a:	4b0b      	ldr	r3, [pc, #44]	@ (800f5c8 <BleGetBdAddress+0x80>)
 800f59c:	715a      	strb	r2, [r3, #5]

    p_bd_addr = (const uint8_t *)a_BdAddrUdn;
 800f59e:	4b0a      	ldr	r3, [pc, #40]	@ (800f5c8 <BleGetBdAddress+0x80>)
 800f5a0:	617b      	str	r3, [r7, #20]
 800f5a2:	e00b      	b.n	800f5bc <BleGetBdAddress+0x74>
  }
  else
  {
    p_otp_addr = OTP_Read(0);
 800f5a4:	2000      	movs	r0, #0
 800f5a6:	f7ff fc8d 	bl	800eec4 <OTP_Read>
 800f5aa:	60f8      	str	r0, [r7, #12]
    if (p_otp_addr)
 800f5ac:	68fb      	ldr	r3, [r7, #12]
 800f5ae:	2b00      	cmp	r3, #0
 800f5b0:	d002      	beq.n	800f5b8 <BleGetBdAddress+0x70>
    {
      p_bd_addr = ((OTP_ID0_t*)p_otp_addr)->bd_address;
 800f5b2:	68fb      	ldr	r3, [r7, #12]
 800f5b4:	617b      	str	r3, [r7, #20]
 800f5b6:	e001      	b.n	800f5bc <BleGetBdAddress+0x74>
    }
    else
    {
      p_bd_addr = a_MBdAddr;
 800f5b8:	4b04      	ldr	r3, [pc, #16]	@ (800f5cc <BleGetBdAddress+0x84>)
 800f5ba:	617b      	str	r3, [r7, #20]
    }
  }

  return p_bd_addr;
 800f5bc:	697b      	ldr	r3, [r7, #20]
}
 800f5be:	4618      	mov	r0, r3
 800f5c0:	3718      	adds	r7, #24
 800f5c2:	46bd      	mov	sp, r7
 800f5c4:	bd80      	pop	{r7, pc}
 800f5c6:	bf00      	nop
 800f5c8:	200029f8 	.word	0x200029f8
 800f5cc:	0801265c 	.word	0x0801265c

0800f5d0 <Adv_Cancel>:
 *
 * SPECIFIC FUNCTIONS FOR CUSTOM
 *
 *************************************************************/
static void Adv_Cancel(void)
{
 800f5d0:	b580      	push	{r7, lr}
 800f5d2:	b082      	sub	sp, #8
 800f5d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Adv_Cancel_1 */

  /* USER CODE END Adv_Cancel_1 */

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 800f5d6:	4b0a      	ldr	r3, [pc, #40]	@ (800f600 <Adv_Cancel+0x30>)
 800f5d8:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800f5dc:	2b05      	cmp	r3, #5
 800f5de:	d00a      	beq.n	800f5f6 <Adv_Cancel+0x26>
  {
    tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800f5e0:	2392      	movs	r3, #146	@ 0x92
 800f5e2:	71fb      	strb	r3, [r7, #7]

    ret = aci_gap_set_non_discoverable();
 800f5e4:	f7fd fbfa 	bl	800cddc <aci_gap_set_non_discoverable>
 800f5e8:	4603      	mov	r3, r0
 800f5ea:	71fb      	strb	r3, [r7, #7]

    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800f5ec:	4b04      	ldr	r3, [pc, #16]	@ (800f600 <Adv_Cancel+0x30>)
 800f5ee:	2200      	movs	r2, #0
 800f5f0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* USER CODE BEGIN Adv_Cancel_2 */

  /* USER CODE END Adv_Cancel_2 */

  return;
 800f5f4:	bf00      	nop
 800f5f6:	bf00      	nop
}
 800f5f8:	3708      	adds	r7, #8
 800f5fa:	46bd      	mov	sp, r7
 800f5fc:	bd80      	pop	{r7, pc}
 800f5fe:	bf00      	nop
 800f600:	20002a00 	.word	0x20002a00

0800f604 <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* p_Data)
{
 800f604:	b580      	push	{r7, lr}
 800f606:	b082      	sub	sp, #8
 800f608:	af00      	add	r7, sp, #0
 800f60a:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 800f60c:	2100      	movs	r1, #0
 800f60e:	2002      	movs	r0, #2
 800f610:	f000 ff46 	bl	80104a0 <UTIL_SEQ_SetTask>

  return;
 800f614:	bf00      	nop
}
 800f616:	3708      	adds	r7, #8
 800f618:	46bd      	mov	sp, r7
 800f61a:	bd80      	pop	{r7, pc}

0800f61c <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t Flag)
{
 800f61c:	b580      	push	{r7, lr}
 800f61e:	b082      	sub	sp, #8
 800f620:	af00      	add	r7, sp, #0
 800f622:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800f624:	2001      	movs	r0, #1
 800f626:	f000 ffa7 	bl	8010578 <UTIL_SEQ_SetEvt>

  return;
 800f62a:	bf00      	nop
}
 800f62c:	3708      	adds	r7, #8
 800f62e:	46bd      	mov	sp, r7
 800f630:	bd80      	pop	{r7, pc}

0800f632 <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t Timeout)
{
 800f632:	b580      	push	{r7, lr}
 800f634:	b082      	sub	sp, #8
 800f636:	af00      	add	r7, sp, #0
 800f638:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800f63a:	2001      	movs	r0, #1
 800f63c:	f000 ffbc 	bl	80105b8 <UTIL_SEQ_WaitEvt>

  return;
 800f640:	bf00      	nop
}
 800f642:	3708      	adds	r7, #8
 800f644:	46bd      	mov	sp, r7
 800f646:	bd80      	pop	{r7, pc}

0800f648 <BLE_UserEvtRx>:

static void BLE_UserEvtRx(void *p_Payload)
{
 800f648:	b580      	push	{r7, lr}
 800f64a:	b084      	sub	sp, #16
 800f64c:	af00      	add	r7, sp, #0
 800f64e:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *p_param;

  p_param = (tHCI_UserEvtRxParam *)p_Payload;
 800f650:	687b      	ldr	r3, [r7, #4]
 800f652:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(p_param->pckt->evtserial));
 800f654:	68fb      	ldr	r3, [r7, #12]
 800f656:	685b      	ldr	r3, [r3, #4]
 800f658:	3308      	adds	r3, #8
 800f65a:	4618      	mov	r0, r3
 800f65c:	f7fe fdd0 	bl	800e200 <SVCCTL_UserEvtRx>
 800f660:	4603      	mov	r3, r0
 800f662:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 800f664:	7afb      	ldrb	r3, [r7, #11]
 800f666:	2b00      	cmp	r3, #0
 800f668:	d003      	beq.n	800f672 <BLE_UserEvtRx+0x2a>
  {
    p_param->status = HCI_TL_UserEventFlow_Enable;
 800f66a:	68fb      	ldr	r3, [r7, #12]
 800f66c:	2201      	movs	r2, #1
 800f66e:	701a      	strb	r2, [r3, #0]
  else
  {
    p_param->status = HCI_TL_UserEventFlow_Disable;
  }

  return;
 800f670:	e003      	b.n	800f67a <BLE_UserEvtRx+0x32>
    p_param->status = HCI_TL_UserEventFlow_Disable;
 800f672:	68fb      	ldr	r3, [r7, #12]
 800f674:	2200      	movs	r2, #0
 800f676:	701a      	strb	r2, [r3, #0]
  return;
 800f678:	bf00      	nop
}
 800f67a:	3710      	adds	r7, #16
 800f67c:	46bd      	mov	sp, r7
 800f67e:	bd80      	pop	{r7, pc}

0800f680 <BLE_StatusNot>:

static void BLE_StatusNot(HCI_TL_CmdStatus_t Status)
{
 800f680:	b580      	push	{r7, lr}
 800f682:	b084      	sub	sp, #16
 800f684:	af00      	add	r7, sp, #0
 800f686:	4603      	mov	r3, r0
 800f688:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (Status)
 800f68a:	79fb      	ldrb	r3, [r7, #7]
 800f68c:	2b00      	cmp	r3, #0
 800f68e:	d002      	beq.n	800f696 <BLE_StatusNot+0x16>
 800f690:	2b01      	cmp	r3, #1
 800f692:	d006      	beq.n	800f6a2 <BLE_StatusNot+0x22>

    default:
      /* USER CODE BEGIN Status */

      /* USER CODE END Status */
      break;
 800f694:	e00b      	b.n	800f6ae <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800f696:	230f      	movs	r3, #15
 800f698:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 800f69a:	68f8      	ldr	r0, [r7, #12]
 800f69c:	f000 ff2c 	bl	80104f8 <UTIL_SEQ_PauseTask>
      break;
 800f6a0:	e005      	b.n	800f6ae <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800f6a2:	230f      	movs	r3, #15
 800f6a4:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 800f6a6:	68f8      	ldr	r0, [r7, #12]
 800f6a8:	f000 ff46 	bl	8010538 <UTIL_SEQ_ResumeTask>
      break;
 800f6ac:	bf00      	nop
  }

  return;
 800f6ae:	bf00      	nop
}
 800f6b0:	3710      	adds	r7, #16
 800f6b2:	46bd      	mov	sp, r7
 800f6b4:	bd80      	pop	{r7, pc}

0800f6b6 <myTask_IMU>:
/* mySVC */
static void Custom_Mycharnotify_Update_Char(void);
static void Custom_Mycharnotify_Send_Notification(void);

/* USER CODE BEGIN PFP */
void myTask_IMU(void) {
 800f6b6:	b480      	push	{r7}
 800f6b8:	af00      	add	r7, sp, #0

	//nomal_power_code
//	LSM9DS1_ReadGyro();
//	LSM9DS1_ReadAccel();
//	LSM9DS1_ReadMag();
}
 800f6ba:	bf00      	nop
 800f6bc:	46bd      	mov	sp, r7
 800f6be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6c2:	4770      	bx	lr

0800f6c4 <myTask_BLE>:

void myTask_BLE(void) {
 800f6c4:	b580      	push	{r7, lr}
 800f6c6:	b088      	sub	sp, #32
 800f6c8:	af00      	add	r7, sp, #0

	int16_t accel_x_int = (int16_t) (accel_x * 1000);
 800f6ca:	4b9a      	ldr	r3, [pc, #616]	@ (800f934 <myTask_BLE+0x270>)
 800f6cc:	edd3 7a00 	vldr	s15, [r3]
 800f6d0:	ed9f 7a99 	vldr	s14, [pc, #612]	@ 800f938 <myTask_BLE+0x274>
 800f6d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f6d8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f6dc:	ee17 3a90 	vmov	r3, s15
 800f6e0:	83fb      	strh	r3, [r7, #30]
	int16_t accel_y_int = (int16_t) (accel_y * 1000);
 800f6e2:	4b96      	ldr	r3, [pc, #600]	@ (800f93c <myTask_BLE+0x278>)
 800f6e4:	edd3 7a00 	vldr	s15, [r3]
 800f6e8:	ed9f 7a93 	vldr	s14, [pc, #588]	@ 800f938 <myTask_BLE+0x274>
 800f6ec:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f6f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f6f4:	ee17 3a90 	vmov	r3, s15
 800f6f8:	83bb      	strh	r3, [r7, #28]
	int16_t accel_z_int = (int16_t) (accel_z * 1000);
 800f6fa:	4b91      	ldr	r3, [pc, #580]	@ (800f940 <myTask_BLE+0x27c>)
 800f6fc:	edd3 7a00 	vldr	s15, [r3]
 800f700:	ed9f 7a8d 	vldr	s14, [pc, #564]	@ 800f938 <myTask_BLE+0x274>
 800f704:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f708:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f70c:	ee17 3a90 	vmov	r3, s15
 800f710:	837b      	strh	r3, [r7, #26]

	int16_t gyro_x_int = (int16_t) (gyro_x * 1000);
 800f712:	4b8c      	ldr	r3, [pc, #560]	@ (800f944 <myTask_BLE+0x280>)
 800f714:	edd3 7a00 	vldr	s15, [r3]
 800f718:	ed9f 7a87 	vldr	s14, [pc, #540]	@ 800f938 <myTask_BLE+0x274>
 800f71c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f720:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f724:	ee17 3a90 	vmov	r3, s15
 800f728:	833b      	strh	r3, [r7, #24]
	int16_t gyro_y_int = (int16_t) (gyro_y * 1000);
 800f72a:	4b87      	ldr	r3, [pc, #540]	@ (800f948 <myTask_BLE+0x284>)
 800f72c:	edd3 7a00 	vldr	s15, [r3]
 800f730:	ed9f 7a81 	vldr	s14, [pc, #516]	@ 800f938 <myTask_BLE+0x274>
 800f734:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f738:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f73c:	ee17 3a90 	vmov	r3, s15
 800f740:	82fb      	strh	r3, [r7, #22]
	int16_t gyro_z_int = (int16_t) (gyro_z * 1000);
 800f742:	4b82      	ldr	r3, [pc, #520]	@ (800f94c <myTask_BLE+0x288>)
 800f744:	edd3 7a00 	vldr	s15, [r3]
 800f748:	ed9f 7a7b 	vldr	s14, [pc, #492]	@ 800f938 <myTask_BLE+0x274>
 800f74c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f750:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f754:	ee17 3a90 	vmov	r3, s15
 800f758:	82bb      	strh	r3, [r7, #20]

	int16_t mag_x_int = (int16_t) (mag_x * 100);
 800f75a:	4b7d      	ldr	r3, [pc, #500]	@ (800f950 <myTask_BLE+0x28c>)
 800f75c:	edd3 7a00 	vldr	s15, [r3]
 800f760:	ed9f 7a7c 	vldr	s14, [pc, #496]	@ 800f954 <myTask_BLE+0x290>
 800f764:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f768:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f76c:	ee17 3a90 	vmov	r3, s15
 800f770:	827b      	strh	r3, [r7, #18]
	int16_t mag_y_int = (int16_t) (mag_y * 100);
 800f772:	4b79      	ldr	r3, [pc, #484]	@ (800f958 <myTask_BLE+0x294>)
 800f774:	edd3 7a00 	vldr	s15, [r3]
 800f778:	ed9f 7a76 	vldr	s14, [pc, #472]	@ 800f954 <myTask_BLE+0x290>
 800f77c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f780:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f784:	ee17 3a90 	vmov	r3, s15
 800f788:	823b      	strh	r3, [r7, #16]
	int16_t mag_z_int = (int16_t) (mag_z * 100);
 800f78a:	4b74      	ldr	r3, [pc, #464]	@ (800f95c <myTask_BLE+0x298>)
 800f78c:	edd3 7a00 	vldr	s15, [r3]
 800f790:	ed9f 7a70 	vldr	s14, [pc, #448]	@ 800f954 <myTask_BLE+0x290>
 800f794:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f798:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f79c:	ee17 3a90 	vmov	r3, s15
 800f7a0:	81fb      	strh	r3, [r7, #14]

//	int16_t mag_x_int = (int16_t) (mx2 * 100);
//	int16_t mag_y_int = (int16_t) (my2 * 100);
//	int16_t mag_z_int = (int16_t) (mz2 * 100);

	int16_t q0_int = (int16_t) (q0 * 10000);
 800f7a2:	4b6f      	ldr	r3, [pc, #444]	@ (800f960 <myTask_BLE+0x29c>)
 800f7a4:	edd3 7a00 	vldr	s15, [r3]
 800f7a8:	ed9f 7a6e 	vldr	s14, [pc, #440]	@ 800f964 <myTask_BLE+0x2a0>
 800f7ac:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f7b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f7b4:	ee17 3a90 	vmov	r3, s15
 800f7b8:	81bb      	strh	r3, [r7, #12]
	int16_t q1_int = (int16_t) (q1 * 10000);
 800f7ba:	4b6b      	ldr	r3, [pc, #428]	@ (800f968 <myTask_BLE+0x2a4>)
 800f7bc:	edd3 7a00 	vldr	s15, [r3]
 800f7c0:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 800f964 <myTask_BLE+0x2a0>
 800f7c4:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f7c8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f7cc:	ee17 3a90 	vmov	r3, s15
 800f7d0:	817b      	strh	r3, [r7, #10]
	int16_t q2_int = (int16_t) (q2 * 10000);
 800f7d2:	4b66      	ldr	r3, [pc, #408]	@ (800f96c <myTask_BLE+0x2a8>)
 800f7d4:	edd3 7a00 	vldr	s15, [r3]
 800f7d8:	ed9f 7a62 	vldr	s14, [pc, #392]	@ 800f964 <myTask_BLE+0x2a0>
 800f7dc:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f7e0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f7e4:	ee17 3a90 	vmov	r3, s15
 800f7e8:	813b      	strh	r3, [r7, #8]
	int16_t q3_int = (int16_t) (q3 * 10000);
 800f7ea:	4b61      	ldr	r3, [pc, #388]	@ (800f970 <myTask_BLE+0x2ac>)
 800f7ec:	edd3 7a00 	vldr	s15, [r3]
 800f7f0:	ed9f 7a5c 	vldr	s14, [pc, #368]	@ 800f964 <myTask_BLE+0x2a0>
 800f7f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f7f8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f7fc:	ee17 3a90 	vmov	r3, s15
 800f800:	80fb      	strh	r3, [r7, #6]

	UpdateCharData[0] = (uint8_t) (accel_x_int >> 8);
 800f802:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800f806:	121b      	asrs	r3, r3, #8
 800f808:	b21b      	sxth	r3, r3
 800f80a:	b2da      	uxtb	r2, r3
 800f80c:	4b59      	ldr	r3, [pc, #356]	@ (800f974 <myTask_BLE+0x2b0>)
 800f80e:	701a      	strb	r2, [r3, #0]
	UpdateCharData[1] = (uint8_t) (accel_x_int & 0xFF);
 800f810:	8bfb      	ldrh	r3, [r7, #30]
 800f812:	b2da      	uxtb	r2, r3
 800f814:	4b57      	ldr	r3, [pc, #348]	@ (800f974 <myTask_BLE+0x2b0>)
 800f816:	705a      	strb	r2, [r3, #1]
	UpdateCharData[2] = (uint8_t) (accel_y_int >> 8);
 800f818:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800f81c:	121b      	asrs	r3, r3, #8
 800f81e:	b21b      	sxth	r3, r3
 800f820:	b2da      	uxtb	r2, r3
 800f822:	4b54      	ldr	r3, [pc, #336]	@ (800f974 <myTask_BLE+0x2b0>)
 800f824:	709a      	strb	r2, [r3, #2]
	UpdateCharData[3] = (uint8_t) (accel_y_int & 0xFF);
 800f826:	8bbb      	ldrh	r3, [r7, #28]
 800f828:	b2da      	uxtb	r2, r3
 800f82a:	4b52      	ldr	r3, [pc, #328]	@ (800f974 <myTask_BLE+0x2b0>)
 800f82c:	70da      	strb	r2, [r3, #3]
	UpdateCharData[4] = (uint8_t) (accel_z_int >> 8);
 800f82e:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800f832:	121b      	asrs	r3, r3, #8
 800f834:	b21b      	sxth	r3, r3
 800f836:	b2da      	uxtb	r2, r3
 800f838:	4b4e      	ldr	r3, [pc, #312]	@ (800f974 <myTask_BLE+0x2b0>)
 800f83a:	711a      	strb	r2, [r3, #4]
	UpdateCharData[5] = (uint8_t) (accel_z_int & 0xFF);
 800f83c:	8b7b      	ldrh	r3, [r7, #26]
 800f83e:	b2da      	uxtb	r2, r3
 800f840:	4b4c      	ldr	r3, [pc, #304]	@ (800f974 <myTask_BLE+0x2b0>)
 800f842:	715a      	strb	r2, [r3, #5]

	UpdateCharData[6] = (uint8_t) (gyro_x_int >> 8);
 800f844:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800f848:	121b      	asrs	r3, r3, #8
 800f84a:	b21b      	sxth	r3, r3
 800f84c:	b2da      	uxtb	r2, r3
 800f84e:	4b49      	ldr	r3, [pc, #292]	@ (800f974 <myTask_BLE+0x2b0>)
 800f850:	719a      	strb	r2, [r3, #6]
	UpdateCharData[7] = (uint8_t) (gyro_x_int & 0xFF);
 800f852:	8b3b      	ldrh	r3, [r7, #24]
 800f854:	b2da      	uxtb	r2, r3
 800f856:	4b47      	ldr	r3, [pc, #284]	@ (800f974 <myTask_BLE+0x2b0>)
 800f858:	71da      	strb	r2, [r3, #7]
	UpdateCharData[8] = (uint8_t) (gyro_y_int >> 8);
 800f85a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800f85e:	121b      	asrs	r3, r3, #8
 800f860:	b21b      	sxth	r3, r3
 800f862:	b2da      	uxtb	r2, r3
 800f864:	4b43      	ldr	r3, [pc, #268]	@ (800f974 <myTask_BLE+0x2b0>)
 800f866:	721a      	strb	r2, [r3, #8]
	UpdateCharData[9] = (uint8_t) (gyro_y_int & 0xFF);
 800f868:	8afb      	ldrh	r3, [r7, #22]
 800f86a:	b2da      	uxtb	r2, r3
 800f86c:	4b41      	ldr	r3, [pc, #260]	@ (800f974 <myTask_BLE+0x2b0>)
 800f86e:	725a      	strb	r2, [r3, #9]
	UpdateCharData[10] = (uint8_t) (gyro_z_int >> 8);
 800f870:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800f874:	121b      	asrs	r3, r3, #8
 800f876:	b21b      	sxth	r3, r3
 800f878:	b2da      	uxtb	r2, r3
 800f87a:	4b3e      	ldr	r3, [pc, #248]	@ (800f974 <myTask_BLE+0x2b0>)
 800f87c:	729a      	strb	r2, [r3, #10]
	UpdateCharData[11] = (uint8_t) (gyro_z_int & 0xFF);
 800f87e:	8abb      	ldrh	r3, [r7, #20]
 800f880:	b2da      	uxtb	r2, r3
 800f882:	4b3c      	ldr	r3, [pc, #240]	@ (800f974 <myTask_BLE+0x2b0>)
 800f884:	72da      	strb	r2, [r3, #11]

	UpdateCharData[12] = (uint8_t) (q0_int >> 8);
 800f886:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800f88a:	121b      	asrs	r3, r3, #8
 800f88c:	b21b      	sxth	r3, r3
 800f88e:	b2da      	uxtb	r2, r3
 800f890:	4b38      	ldr	r3, [pc, #224]	@ (800f974 <myTask_BLE+0x2b0>)
 800f892:	731a      	strb	r2, [r3, #12]
	UpdateCharData[13] = (uint8_t) (q0_int & 0xFF);
 800f894:	89bb      	ldrh	r3, [r7, #12]
 800f896:	b2da      	uxtb	r2, r3
 800f898:	4b36      	ldr	r3, [pc, #216]	@ (800f974 <myTask_BLE+0x2b0>)
 800f89a:	735a      	strb	r2, [r3, #13]
	UpdateCharData[14] = (uint8_t) (q1_int >> 8);
 800f89c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800f8a0:	121b      	asrs	r3, r3, #8
 800f8a2:	b21b      	sxth	r3, r3
 800f8a4:	b2da      	uxtb	r2, r3
 800f8a6:	4b33      	ldr	r3, [pc, #204]	@ (800f974 <myTask_BLE+0x2b0>)
 800f8a8:	739a      	strb	r2, [r3, #14]
	UpdateCharData[15] = (uint8_t) (q1_int & 0xFF);
 800f8aa:	897b      	ldrh	r3, [r7, #10]
 800f8ac:	b2da      	uxtb	r2, r3
 800f8ae:	4b31      	ldr	r3, [pc, #196]	@ (800f974 <myTask_BLE+0x2b0>)
 800f8b0:	73da      	strb	r2, [r3, #15]
	UpdateCharData[16] = (uint8_t) (q2_int >> 8);
 800f8b2:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800f8b6:	121b      	asrs	r3, r3, #8
 800f8b8:	b21b      	sxth	r3, r3
 800f8ba:	b2da      	uxtb	r2, r3
 800f8bc:	4b2d      	ldr	r3, [pc, #180]	@ (800f974 <myTask_BLE+0x2b0>)
 800f8be:	741a      	strb	r2, [r3, #16]
	UpdateCharData[17] = (uint8_t) (q2_int & 0xFF);
 800f8c0:	893b      	ldrh	r3, [r7, #8]
 800f8c2:	b2da      	uxtb	r2, r3
 800f8c4:	4b2b      	ldr	r3, [pc, #172]	@ (800f974 <myTask_BLE+0x2b0>)
 800f8c6:	745a      	strb	r2, [r3, #17]
	UpdateCharData[18] = (uint8_t) (q3_int >> 8);
 800f8c8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800f8cc:	121b      	asrs	r3, r3, #8
 800f8ce:	b21b      	sxth	r3, r3
 800f8d0:	b2da      	uxtb	r2, r3
 800f8d2:	4b28      	ldr	r3, [pc, #160]	@ (800f974 <myTask_BLE+0x2b0>)
 800f8d4:	749a      	strb	r2, [r3, #18]
	UpdateCharData[19] = (uint8_t) (q3_int & 0xFF);
 800f8d6:	88fb      	ldrh	r3, [r7, #6]
 800f8d8:	b2da      	uxtb	r2, r3
 800f8da:	4b26      	ldr	r3, [pc, #152]	@ (800f974 <myTask_BLE+0x2b0>)
 800f8dc:	74da      	strb	r2, [r3, #19]

	UpdateCharData[20] = (uint8_t) (mag_x_int >> 8);
 800f8de:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f8e2:	121b      	asrs	r3, r3, #8
 800f8e4:	b21b      	sxth	r3, r3
 800f8e6:	b2da      	uxtb	r2, r3
 800f8e8:	4b22      	ldr	r3, [pc, #136]	@ (800f974 <myTask_BLE+0x2b0>)
 800f8ea:	751a      	strb	r2, [r3, #20]
	UpdateCharData[21] = (uint8_t) (mag_x_int & 0xFF);
 800f8ec:	8a7b      	ldrh	r3, [r7, #18]
 800f8ee:	b2da      	uxtb	r2, r3
 800f8f0:	4b20      	ldr	r3, [pc, #128]	@ (800f974 <myTask_BLE+0x2b0>)
 800f8f2:	755a      	strb	r2, [r3, #21]
	UpdateCharData[22] = (uint8_t) (mag_y_int >> 8);
 800f8f4:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800f8f8:	121b      	asrs	r3, r3, #8
 800f8fa:	b21b      	sxth	r3, r3
 800f8fc:	b2da      	uxtb	r2, r3
 800f8fe:	4b1d      	ldr	r3, [pc, #116]	@ (800f974 <myTask_BLE+0x2b0>)
 800f900:	759a      	strb	r2, [r3, #22]
	UpdateCharData[23] = (uint8_t) (mag_y_int & 0xFF);
 800f902:	8a3b      	ldrh	r3, [r7, #16]
 800f904:	b2da      	uxtb	r2, r3
 800f906:	4b1b      	ldr	r3, [pc, #108]	@ (800f974 <myTask_BLE+0x2b0>)
 800f908:	75da      	strb	r2, [r3, #23]
	UpdateCharData[24] = (uint8_t) (mag_z_int >> 8);
 800f90a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800f90e:	121b      	asrs	r3, r3, #8
 800f910:	b21b      	sxth	r3, r3
 800f912:	b2da      	uxtb	r2, r3
 800f914:	4b17      	ldr	r3, [pc, #92]	@ (800f974 <myTask_BLE+0x2b0>)
 800f916:	761a      	strb	r2, [r3, #24]
	UpdateCharData[25] = (uint8_t) (mag_z_int & 0xFF);
 800f918:	89fb      	ldrh	r3, [r7, #14]
 800f91a:	b2da      	uxtb	r2, r3
 800f91c:	4b15      	ldr	r3, [pc, #84]	@ (800f974 <myTask_BLE+0x2b0>)
 800f91e:	765a      	strb	r2, [r3, #25]

	Custom_Mycharnotify_Update_Char();
 800f920:	f000 f862 	bl	800f9e8 <Custom_Mycharnotify_Update_Char>

	UTIL_SEQ_SetTask(1 << CFG_TASK_MY_TASK_IMU, CFG_SCH_PRIO_0);
 800f924:	2100      	movs	r1, #0
 800f926:	2008      	movs	r0, #8
 800f928:	f000 fdba 	bl	80104a0 <UTIL_SEQ_SetTask>
//	UTIL_SEQ_SetTask(1 << CFG_TASK_MY_TASK_BLE, CFG_SCH_PRIO_0);
}
 800f92c:	bf00      	nop
 800f92e:	3720      	adds	r7, #32
 800f930:	46bd      	mov	sp, r7
 800f932:	bd80      	pop	{r7, pc}
 800f934:	2000037c 	.word	0x2000037c
 800f938:	447a0000 	.word	0x447a0000
 800f93c:	20000380 	.word	0x20000380
 800f940:	20000384 	.word	0x20000384
 800f944:	20000388 	.word	0x20000388
 800f948:	2000038c 	.word	0x2000038c
 800f94c:	20000390 	.word	0x20000390
 800f950:	200003b8 	.word	0x200003b8
 800f954:	42c80000 	.word	0x42c80000
 800f958:	200003bc 	.word	0x200003bc
 800f95c:	200003c0 	.word	0x200003c0
 800f960:	20000008 	.word	0x20000008
 800f964:	461c4000 	.word	0x461c4000
 800f968:	20000470 	.word	0x20000470
 800f96c:	20000474 	.word	0x20000474
 800f970:	20000478 	.word	0x20000478
 800f974:	20002a88 	.word	0x20002a88

0800f978 <Custom_STM_App_Notification>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void Custom_STM_App_Notification(
		Custom_STM_App_Notification_evt_t *pNotification) {
 800f978:	b480      	push	{r7}
 800f97a:	b083      	sub	sp, #12
 800f97c:	af00      	add	r7, sp, #0
 800f97e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN CUSTOM_STM_App_Notification_1 */

	/* USER CODE END CUSTOM_STM_App_Notification_1 */
	switch (pNotification->Custom_Evt_Opcode) {
 800f980:	687b      	ldr	r3, [r7, #4]
 800f982:	781b      	ldrb	r3, [r3, #0]
 800f984:	2b03      	cmp	r3, #3
 800f986:	d80b      	bhi.n	800f9a0 <Custom_STM_App_Notification+0x28>
 800f988:	a201      	add	r2, pc, #4	@ (adr r2, 800f990 <Custom_STM_App_Notification+0x18>)
 800f98a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f98e:	bf00      	nop
 800f990:	0800f9a1 	.word	0x0800f9a1
 800f994:	0800f9a1 	.word	0x0800f9a1
 800f998:	0800f9a1 	.word	0x0800f9a1
 800f99c:	0800f9a1 	.word	0x0800f9a1

	default:
		/* USER CODE BEGIN CUSTOM_STM_App_Notification_default */

		/* USER CODE END CUSTOM_STM_App_Notification_default */
		break;
 800f9a0:	bf00      	nop
	}
	/* USER CODE BEGIN CUSTOM_STM_App_Notification_2 */

	/* USER CODE END CUSTOM_STM_App_Notification_2 */
	return;
 800f9a2:	bf00      	nop
}
 800f9a4:	370c      	adds	r7, #12
 800f9a6:	46bd      	mov	sp, r7
 800f9a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9ac:	4770      	bx	lr
 800f9ae:	bf00      	nop

0800f9b0 <Custom_APP_Notification>:

void Custom_APP_Notification(Custom_App_ConnHandle_Not_evt_t *pNotification) {
 800f9b0:	b480      	push	{r7}
 800f9b2:	b083      	sub	sp, #12
 800f9b4:	af00      	add	r7, sp, #0
 800f9b6:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN CUSTOM_APP_Notification_1 */

	/* USER CODE END CUSTOM_APP_Notification_1 */

	switch (pNotification->Custom_Evt_Opcode) {
 800f9b8:	687b      	ldr	r3, [r7, #4]
 800f9ba:	781b      	ldrb	r3, [r3, #0]
 800f9bc:	2b00      	cmp	r3, #0
 800f9be:	d002      	beq.n	800f9c6 <Custom_APP_Notification+0x16>
 800f9c0:	2b01      	cmp	r3, #1
 800f9c2:	d002      	beq.n	800f9ca <Custom_APP_Notification+0x1a>

	default:
		/* USER CODE BEGIN CUSTOM_APP_Notification_default */

		/* USER CODE END CUSTOM_APP_Notification_default */
		break;
 800f9c4:	e002      	b.n	800f9cc <Custom_APP_Notification+0x1c>
		break;
 800f9c6:	bf00      	nop
 800f9c8:	e000      	b.n	800f9cc <Custom_APP_Notification+0x1c>
		break;
 800f9ca:	bf00      	nop

	/* USER CODE BEGIN CUSTOM_APP_Notification_2 */

	/* USER CODE END CUSTOM_APP_Notification_2 */

	return;
 800f9cc:	bf00      	nop
}
 800f9ce:	370c      	adds	r7, #12
 800f9d0:	46bd      	mov	sp, r7
 800f9d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9d6:	4770      	bx	lr

0800f9d8 <Custom_APP_Init>:

void Custom_APP_Init(void) {
 800f9d8:	b480      	push	{r7}
 800f9da:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN CUSTOM_APP_Init */

	/* USER CODE END CUSTOM_APP_Init */
	return;
 800f9dc:	bf00      	nop
}
 800f9de:	46bd      	mov	sp, r7
 800f9e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9e4:	4770      	bx	lr
	...

0800f9e8 <Custom_Mycharnotify_Update_Char>:
 *
 *************************************************************/

/* mySVC */
__USED void Custom_Mycharnotify_Update_Char(void) /* Property Read */
{
 800f9e8:	b580      	push	{r7, lr}
 800f9ea:	b082      	sub	sp, #8
 800f9ec:	af00      	add	r7, sp, #0
	uint8_t updateflag = 0;
 800f9ee:	2300      	movs	r3, #0
 800f9f0:	71fb      	strb	r3, [r7, #7]

	/* USER CODE BEGIN Mycharnotify_UC_1*/
	updateflag = 1;
 800f9f2:	2301      	movs	r3, #1
 800f9f4:	71fb      	strb	r3, [r7, #7]
	/* USER CODE END Mycharnotify_UC_1*/

	if (updateflag != 0) {
 800f9f6:	79fb      	ldrb	r3, [r7, #7]
 800f9f8:	2b00      	cmp	r3, #0
 800f9fa:	d004      	beq.n	800fa06 <Custom_Mycharnotify_Update_Char+0x1e>
		Custom_STM_App_Update_Char(CUSTOM_STM_MYCHARNOTIFY,
 800f9fc:	4904      	ldr	r1, [pc, #16]	@ (800fa10 <Custom_Mycharnotify_Update_Char+0x28>)
 800f9fe:	2001      	movs	r0, #1
 800fa00:	f000 f960 	bl	800fcc4 <Custom_STM_App_Update_Char>
	}

	/* USER CODE BEGIN Mycharnotify_UC_Last*/

	/* USER CODE END Mycharnotify_UC_Last*/
	return;
 800fa04:	bf00      	nop
 800fa06:	bf00      	nop
}
 800fa08:	3708      	adds	r7, #8
 800fa0a:	46bd      	mov	sp, r7
 800fa0c:	bd80      	pop	{r7, pc}
 800fa0e:	bf00      	nop
 800fa10:	20002a88 	.word	0x20002a88

0800fa14 <Custom_STM_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t Custom_STM_Event_Handler(void *Event)
{
 800fa14:	b580      	push	{r7, lr}
 800fa16:	b08c      	sub	sp, #48	@ 0x30
 800fa18:	af00      	add	r7, sp, #0
 800fa1a:	6078      	str	r0, [r7, #4]
  Custom_STM_App_Notification_evt_t     Notification;
  /* USER CODE BEGIN Custom_STM_Event_Handler_1 */

  /* USER CODE END Custom_STM_Event_Handler_1 */

  return_value = SVCCTL_EvtNotAck;
 800fa1c:	2300      	movs	r3, #0
 800fa1e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 800fa22:	687b      	ldr	r3, [r7, #4]
 800fa24:	3301      	adds	r3, #1
 800fa26:	62bb      	str	r3, [r7, #40]	@ 0x28

  switch (event_pckt->evt)
 800fa28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fa2a:	781b      	ldrb	r3, [r3, #0]
 800fa2c:	2bff      	cmp	r3, #255	@ 0xff
 800fa2e:	f040 808e 	bne.w	800fb4e <Custom_STM_Event_Handler+0x13a>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
      blecore_evt = (evt_blecore_aci*)event_pckt->data;
 800fa32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fa34:	3302      	adds	r3, #2
 800fa36:	627b      	str	r3, [r7, #36]	@ 0x24
      switch (blecore_evt->ecode)
 800fa38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fa3a:	881b      	ldrh	r3, [r3, #0]
 800fa3c:	b29b      	uxth	r3, r3
 800fa3e:	f6a3 4301 	subw	r3, r3, #3073	@ 0xc01
 800fa42:	2b1a      	cmp	r3, #26
 800fa44:	d87f      	bhi.n	800fb46 <Custom_STM_Event_Handler+0x132>
 800fa46:	a201      	add	r2, pc, #4	@ (adr r2, 800fa4c <Custom_STM_Event_Handler+0x38>)
 800fa48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fa4c:	0800fab9 	.word	0x0800fab9
 800fa50:	0800fb47 	.word	0x0800fb47
 800fa54:	0800fb47 	.word	0x0800fb47
 800fa58:	0800fb47 	.word	0x0800fb47
 800fa5c:	0800fb47 	.word	0x0800fb47
 800fa60:	0800fb47 	.word	0x0800fb47
 800fa64:	0800fb47 	.word	0x0800fb47
 800fa68:	0800fb47 	.word	0x0800fb47
 800fa6c:	0800fb47 	.word	0x0800fb47
 800fa70:	0800fb47 	.word	0x0800fb47
 800fa74:	0800fb47 	.word	0x0800fb47
 800fa78:	0800fb47 	.word	0x0800fb47
 800fa7c:	0800fb47 	.word	0x0800fb47
 800fa80:	0800fb47 	.word	0x0800fb47
 800fa84:	0800fb47 	.word	0x0800fb47
 800fa88:	0800fb47 	.word	0x0800fb47
 800fa8c:	0800fb47 	.word	0x0800fb47
 800fa90:	0800fb47 	.word	0x0800fb47
 800fa94:	0800fb47 	.word	0x0800fb47
 800fa98:	0800fb47 	.word	0x0800fb47
 800fa9c:	0800fb47 	.word	0x0800fb47
 800faa0:	0800fb47 	.word	0x0800fb47
 800faa4:	0800fb47 	.word	0x0800fb47
 800faa8:	0800fb47 	.word	0x0800fb47
 800faac:	0800fb47 	.word	0x0800fb47
 800fab0:	0800fb47 	.word	0x0800fb47
 800fab4:	0800fb29 	.word	0x0800fb29
      {
        case ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE:
          /* USER CODE BEGIN EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_BEGIN */

          /* USER CODE END EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_BEGIN */
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blecore_evt->data;
 800fab8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800faba:	3302      	adds	r3, #2
 800fabc:	61fb      	str	r3, [r7, #28]
          if (attribute_modified->Attr_Handle == (CustomContext.CustomMycharnotifyHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))
 800fabe:	69fb      	ldr	r3, [r7, #28]
 800fac0:	885b      	ldrh	r3, [r3, #2]
 800fac2:	b29b      	uxth	r3, r3
 800fac4:	461a      	mov	r2, r3
 800fac6:	4b25      	ldr	r3, [pc, #148]	@ (800fb5c <Custom_STM_Event_Handler+0x148>)
 800fac8:	889b      	ldrh	r3, [r3, #4]
 800faca:	3302      	adds	r3, #2
 800facc:	429a      	cmp	r2, r3
 800face:	d119      	bne.n	800fb04 <Custom_STM_Event_Handler+0xf0>
          {
            return_value = SVCCTL_EvtAckFlowEnable;
 800fad0:	2301      	movs	r3, #1
 800fad2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            /* USER CODE BEGIN CUSTOM_STM_Service_1_Char_2 */
            /* USER CODE END CUSTOM_STM_Service_1_Char_2 */
            switch (attribute_modified->Attr_Data[0])
 800fad6:	69fb      	ldr	r3, [r7, #28]
 800fad8:	7a1b      	ldrb	r3, [r3, #8]
 800fada:	2b00      	cmp	r3, #0
 800fadc:	d002      	beq.n	800fae4 <Custom_STM_Event_Handler+0xd0>
 800fade:	2b01      	cmp	r3, #1
 800fae0:	d008      	beq.n	800faf4 <Custom_STM_Event_Handler+0xe0>

              default:
                /* USER CODE BEGIN CUSTOM_STM_Service_1_Char_2_default */

                /* USER CODE END CUSTOM_STM_Service_1_Char_2_default */
              break;
 800fae2:	e020      	b.n	800fb26 <Custom_STM_Event_Handler+0x112>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_MYCHARNOTIFY_NOTIFY_DISABLED_EVT;
 800fae4:	2302      	movs	r3, #2
 800fae6:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 800fae8:	f107 0308 	add.w	r3, r7, #8
 800faec:	4618      	mov	r0, r3
 800faee:	f7ff ff43 	bl	800f978 <Custom_STM_App_Notification>
                break;
 800faf2:	e018      	b.n	800fb26 <Custom_STM_Event_Handler+0x112>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_MYCHARNOTIFY_NOTIFY_ENABLED_EVT;
 800faf4:	2301      	movs	r3, #1
 800faf6:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 800faf8:	f107 0308 	add.w	r3, r7, #8
 800fafc:	4618      	mov	r0, r3
 800fafe:	f7ff ff3b 	bl	800f978 <Custom_STM_App_Notification>
                break;
 800fb02:	e010      	b.n	800fb26 <Custom_STM_Event_Handler+0x112>
            }
          }  /* if (attribute_modified->Attr_Handle == (CustomContext.CustomMycharnotifyHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))*/

          else if (attribute_modified->Attr_Handle == (CustomContext.CustomMycharwriteHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 800fb04:	69fb      	ldr	r3, [r7, #28]
 800fb06:	885b      	ldrh	r3, [r3, #2]
 800fb08:	b29b      	uxth	r3, r3
 800fb0a:	461a      	mov	r2, r3
 800fb0c:	4b13      	ldr	r3, [pc, #76]	@ (800fb5c <Custom_STM_Event_Handler+0x148>)
 800fb0e:	885b      	ldrh	r3, [r3, #2]
 800fb10:	3301      	adds	r3, #1
 800fb12:	429a      	cmp	r2, r3
 800fb14:	d119      	bne.n	800fb4a <Custom_STM_Event_Handler+0x136>
          {
            return_value = SVCCTL_EvtAckFlowEnable;
 800fb16:	2301      	movs	r3, #1
 800fb18:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            /* USER CODE BEGIN CUSTOM_STM_Service_1_Char_1_ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE */
            HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800fb1c:	2101      	movs	r1, #1
 800fb1e:	4810      	ldr	r0, [pc, #64]	@ (800fb60 <Custom_STM_Event_Handler+0x14c>)
 800fb20:	f7f8 fe18 	bl	8008754 <HAL_GPIO_TogglePin>
            /* USER CODE END CUSTOM_STM_Service_1_Char_1_ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE */
          } /* if (attribute_modified->Attr_Handle == (CustomContext.CustomMycharwriteHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))*/
          /* USER CODE BEGIN EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_END */

          /* USER CODE END EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_END */
          break;
 800fb24:	e011      	b.n	800fb4a <Custom_STM_Event_Handler+0x136>
 800fb26:	e010      	b.n	800fb4a <Custom_STM_Event_Handler+0x136>
		case ACI_GATT_NOTIFICATION_COMPLETE_VSEVT_CODE:
        {
          /* USER CODE BEGIN EVT_BLUE_GATT_NOTIFICATION_COMPLETE_BEGIN */

          /* USER CODE END EVT_BLUE_GATT_NOTIFICATION_COMPLETE_BEGIN */
          notification_complete = (aci_gatt_notification_complete_event_rp0*)blecore_evt->data;
 800fb28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fb2a:	3302      	adds	r3, #2
 800fb2c:	623b      	str	r3, [r7, #32]
          Notification.Custom_Evt_Opcode = CUSTOM_STM_NOTIFICATION_COMPLETE_EVT;
 800fb2e:	2303      	movs	r3, #3
 800fb30:	723b      	strb	r3, [r7, #8]
          Notification.AttrHandle = notification_complete->Attr_Handle;
 800fb32:	6a3b      	ldr	r3, [r7, #32]
 800fb34:	881b      	ldrh	r3, [r3, #0]
 800fb36:	b29b      	uxth	r3, r3
 800fb38:	833b      	strh	r3, [r7, #24]
          Custom_STM_App_Notification(&Notification);
 800fb3a:	f107 0308 	add.w	r3, r7, #8
 800fb3e:	4618      	mov	r0, r3
 800fb40:	f7ff ff1a 	bl	800f978 <Custom_STM_App_Notification>
          /* USER CODE BEGIN EVT_BLUE_GATT_NOTIFICATION_COMPLETE_END */

          /* USER CODE END EVT_BLUE_GATT_NOTIFICATION_COMPLETE_END */
          break;
 800fb44:	e002      	b.n	800fb4c <Custom_STM_Event_Handler+0x138>
        /* USER CODE END BLECORE_EVT */
        default:
          /* USER CODE BEGIN EVT_DEFAULT */

          /* USER CODE END EVT_DEFAULT */
          break;
 800fb46:	bf00      	nop
 800fb48:	e002      	b.n	800fb50 <Custom_STM_Event_Handler+0x13c>
          break;
 800fb4a:	bf00      	nop
      }
      /* USER CODE BEGIN EVT_VENDOR*/

      /* USER CODE END EVT_VENDOR*/
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800fb4c:	e000      	b.n	800fb50 <Custom_STM_Event_Handler+0x13c>

    default:
      /* USER CODE BEGIN EVENT_PCKT*/

      /* USER CODE END EVENT_PCKT*/
      break;
 800fb4e:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_Event_Handler_2 */

  /* USER CODE END Custom_STM_Event_Handler_2 */

  return(return_value);
 800fb50:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}/* end Custom_STM_Event_Handler */
 800fb54:	4618      	mov	r0, r3
 800fb56:	3730      	adds	r7, #48	@ 0x30
 800fb58:	46bd      	mov	sp, r7
 800fb5a:	bd80      	pop	{r7, pc}
 800fb5c:	20002c88 	.word	0x20002c88
 800fb60:	48000400 	.word	0x48000400

0800fb64 <SVCCTL_InitCustomSvc>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void SVCCTL_InitCustomSvc(void)
{
 800fb64:	b580      	push	{r7, lr}
 800fb66:	b08c      	sub	sp, #48	@ 0x30
 800fb68:	af06      	add	r7, sp, #24

  Char_UUID_t  uuid;
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800fb6a:	2392      	movs	r3, #146	@ 0x92
 800fb6c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE END SVCCTL_InitCustomSvc_1 */

  /**
   *  Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(Custom_STM_Event_Handler);
 800fb6e:	484f      	ldr	r0, [pc, #316]	@ (800fcac <SVCCTL_InitCustomSvc+0x148>)
 800fb70:	f7fe fb2c 	bl	800e1cc <SVCCTL_RegisterSvcHandler>
   *                              = 6
   *
   * This value doesn't take into account number of descriptors manually added
   * In case of descriptors added, please update the max_attr_record value accordingly in the next SVCCTL_InitService User Section
   */
  max_attr_record = 6;
 800fb74:	2306      	movs	r3, #6
 800fb76:	75bb      	strb	r3, [r7, #22]
  /* USER CODE BEGIN SVCCTL_InitService */
  /* max_attr_record to be updated if descriptors have been added */

  /* USER CODE END SVCCTL_InitService */

  COPY_MYSVC_UUID(uuid.Char_UUID_128);
 800fb78:	238f      	movs	r3, #143	@ 0x8f
 800fb7a:	713b      	strb	r3, [r7, #4]
 800fb7c:	23e5      	movs	r3, #229	@ 0xe5
 800fb7e:	717b      	strb	r3, [r7, #5]
 800fb80:	23b3      	movs	r3, #179	@ 0xb3
 800fb82:	71bb      	strb	r3, [r7, #6]
 800fb84:	23d5      	movs	r3, #213	@ 0xd5
 800fb86:	71fb      	strb	r3, [r7, #7]
 800fb88:	232e      	movs	r3, #46	@ 0x2e
 800fb8a:	723b      	strb	r3, [r7, #8]
 800fb8c:	237f      	movs	r3, #127	@ 0x7f
 800fb8e:	727b      	strb	r3, [r7, #9]
 800fb90:	234a      	movs	r3, #74	@ 0x4a
 800fb92:	72bb      	strb	r3, [r7, #10]
 800fb94:	2398      	movs	r3, #152	@ 0x98
 800fb96:	72fb      	strb	r3, [r7, #11]
 800fb98:	232a      	movs	r3, #42	@ 0x2a
 800fb9a:	733b      	strb	r3, [r7, #12]
 800fb9c:	2348      	movs	r3, #72	@ 0x48
 800fb9e:	737b      	strb	r3, [r7, #13]
 800fba0:	237a      	movs	r3, #122	@ 0x7a
 800fba2:	73bb      	strb	r3, [r7, #14]
 800fba4:	23cc      	movs	r3, #204	@ 0xcc
 800fba6:	73fb      	strb	r3, [r7, #15]
 800fba8:	2300      	movs	r3, #0
 800fbaa:	743b      	strb	r3, [r7, #16]
 800fbac:	2300      	movs	r3, #0
 800fbae:	747b      	strb	r3, [r7, #17]
 800fbb0:	2300      	movs	r3, #0
 800fbb2:	74bb      	strb	r3, [r7, #18]
 800fbb4:	2300      	movs	r3, #0
 800fbb6:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_service(UUID_TYPE_128,
 800fbb8:	7dbb      	ldrb	r3, [r7, #22]
 800fbba:	1d39      	adds	r1, r7, #4
 800fbbc:	4a3c      	ldr	r2, [pc, #240]	@ (800fcb0 <SVCCTL_InitCustomSvc+0x14c>)
 800fbbe:	9200      	str	r2, [sp, #0]
 800fbc0:	2201      	movs	r2, #1
 800fbc2:	2002      	movs	r0, #2
 800fbc4:	f7fd fd76 	bl	800d6b4 <aci_gatt_add_service>
 800fbc8:	4603      	mov	r3, r0
 800fbca:	75fb      	strb	r3, [r7, #23]
  }

  /**
   *  myCharWrite
   */
  COPY_MYCHARWRITE_UUID(uuid.Char_UUID_128);
 800fbcc:	2319      	movs	r3, #25
 800fbce:	713b      	strb	r3, [r7, #4]
 800fbd0:	23ed      	movs	r3, #237	@ 0xed
 800fbd2:	717b      	strb	r3, [r7, #5]
 800fbd4:	2382      	movs	r3, #130	@ 0x82
 800fbd6:	71bb      	strb	r3, [r7, #6]
 800fbd8:	23ae      	movs	r3, #174	@ 0xae
 800fbda:	71fb      	strb	r3, [r7, #7]
 800fbdc:	23ed      	movs	r3, #237	@ 0xed
 800fbde:	723b      	strb	r3, [r7, #8]
 800fbe0:	2321      	movs	r3, #33	@ 0x21
 800fbe2:	727b      	strb	r3, [r7, #9]
 800fbe4:	234c      	movs	r3, #76	@ 0x4c
 800fbe6:	72bb      	strb	r3, [r7, #10]
 800fbe8:	239d      	movs	r3, #157	@ 0x9d
 800fbea:	72fb      	strb	r3, [r7, #11]
 800fbec:	2341      	movs	r3, #65	@ 0x41
 800fbee:	733b      	strb	r3, [r7, #12]
 800fbf0:	2345      	movs	r3, #69	@ 0x45
 800fbf2:	737b      	strb	r3, [r7, #13]
 800fbf4:	2322      	movs	r3, #34	@ 0x22
 800fbf6:	73bb      	strb	r3, [r7, #14]
 800fbf8:	238e      	movs	r3, #142	@ 0x8e
 800fbfa:	73fb      	strb	r3, [r7, #15]
 800fbfc:	2300      	movs	r3, #0
 800fbfe:	743b      	strb	r3, [r7, #16]
 800fc00:	2300      	movs	r3, #0
 800fc02:	747b      	strb	r3, [r7, #17]
 800fc04:	2300      	movs	r3, #0
 800fc06:	74bb      	strb	r3, [r7, #18]
 800fc08:	2300      	movs	r3, #0
 800fc0a:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomMysvcHdle,
 800fc0c:	4b28      	ldr	r3, [pc, #160]	@ (800fcb0 <SVCCTL_InitCustomSvc+0x14c>)
 800fc0e:	8818      	ldrh	r0, [r3, #0]
 800fc10:	4b28      	ldr	r3, [pc, #160]	@ (800fcb4 <SVCCTL_InitCustomSvc+0x150>)
 800fc12:	881b      	ldrh	r3, [r3, #0]
 800fc14:	1d3a      	adds	r2, r7, #4
 800fc16:	4928      	ldr	r1, [pc, #160]	@ (800fcb8 <SVCCTL_InitCustomSvc+0x154>)
 800fc18:	9105      	str	r1, [sp, #20]
 800fc1a:	2100      	movs	r1, #0
 800fc1c:	9104      	str	r1, [sp, #16]
 800fc1e:	2110      	movs	r1, #16
 800fc20:	9103      	str	r1, [sp, #12]
 800fc22:	2101      	movs	r1, #1
 800fc24:	9102      	str	r1, [sp, #8]
 800fc26:	2100      	movs	r1, #0
 800fc28:	9101      	str	r1, [sp, #4]
 800fc2a:	2108      	movs	r1, #8
 800fc2c:	9100      	str	r1, [sp, #0]
 800fc2e:	2102      	movs	r1, #2
 800fc30:	f7fd fe16 	bl	800d860 <aci_gatt_add_char>
 800fc34:	4603      	mov	r3, r0
 800fc36:	75fb      	strb	r3, [r7, #23]

  /* USER CODE END SVCCTL_Init_Service1_Char1 */
  /**
   *  myCharNotify
   */
  COPY_MYCHARNOTIFY_UUID(uuid.Char_UUID_128);
 800fc38:	2300      	movs	r3, #0
 800fc3a:	713b      	strb	r3, [r7, #4]
 800fc3c:	2300      	movs	r3, #0
 800fc3e:	717b      	strb	r3, [r7, #5]
 800fc40:	2300      	movs	r3, #0
 800fc42:	71bb      	strb	r3, [r7, #6]
 800fc44:	2300      	movs	r3, #0
 800fc46:	71fb      	strb	r3, [r7, #7]
 800fc48:	2300      	movs	r3, #0
 800fc4a:	723b      	strb	r3, [r7, #8]
 800fc4c:	2300      	movs	r3, #0
 800fc4e:	727b      	strb	r3, [r7, #9]
 800fc50:	2300      	movs	r3, #0
 800fc52:	72bb      	strb	r3, [r7, #10]
 800fc54:	2300      	movs	r3, #0
 800fc56:	72fb      	strb	r3, [r7, #11]
 800fc58:	2300      	movs	r3, #0
 800fc5a:	733b      	strb	r3, [r7, #12]
 800fc5c:	2300      	movs	r3, #0
 800fc5e:	737b      	strb	r3, [r7, #13]
 800fc60:	2300      	movs	r3, #0
 800fc62:	73bb      	strb	r3, [r7, #14]
 800fc64:	2300      	movs	r3, #0
 800fc66:	73fb      	strb	r3, [r7, #15]
 800fc68:	2300      	movs	r3, #0
 800fc6a:	743b      	strb	r3, [r7, #16]
 800fc6c:	2300      	movs	r3, #0
 800fc6e:	747b      	strb	r3, [r7, #17]
 800fc70:	2301      	movs	r3, #1
 800fc72:	74bb      	strb	r3, [r7, #18]
 800fc74:	2300      	movs	r3, #0
 800fc76:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomMysvcHdle,
 800fc78:	4b0d      	ldr	r3, [pc, #52]	@ (800fcb0 <SVCCTL_InitCustomSvc+0x14c>)
 800fc7a:	8818      	ldrh	r0, [r3, #0]
 800fc7c:	4b0f      	ldr	r3, [pc, #60]	@ (800fcbc <SVCCTL_InitCustomSvc+0x158>)
 800fc7e:	881b      	ldrh	r3, [r3, #0]
 800fc80:	1d3a      	adds	r2, r7, #4
 800fc82:	490f      	ldr	r1, [pc, #60]	@ (800fcc0 <SVCCTL_InitCustomSvc+0x15c>)
 800fc84:	9105      	str	r1, [sp, #20]
 800fc86:	2100      	movs	r1, #0
 800fc88:	9104      	str	r1, [sp, #16]
 800fc8a:	2110      	movs	r1, #16
 800fc8c:	9103      	str	r1, [sp, #12]
 800fc8e:	2107      	movs	r1, #7
 800fc90:	9102      	str	r1, [sp, #8]
 800fc92:	2100      	movs	r1, #0
 800fc94:	9101      	str	r1, [sp, #4]
 800fc96:	2110      	movs	r1, #16
 800fc98:	9100      	str	r1, [sp, #0]
 800fc9a:	2102      	movs	r1, #2
 800fc9c:	f7fd fde0 	bl	800d860 <aci_gatt_add_char>
 800fca0:	4603      	mov	r3, r0
 800fca2:	75fb      	strb	r3, [r7, #23]

  /* USER CODE BEGIN SVCCTL_InitCustomSvc_2 */

  /* USER CODE END SVCCTL_InitCustomSvc_2 */

  return;
 800fca4:	bf00      	nop
}
 800fca6:	3718      	adds	r7, #24
 800fca8:	46bd      	mov	sp, r7
 800fcaa:	bd80      	pop	{r7, pc}
 800fcac:	0800fa15 	.word	0x0800fa15
 800fcb0:	20002c88 	.word	0x20002c88
 800fcb4:	20000062 	.word	0x20000062
 800fcb8:	20002c8a 	.word	0x20002c8a
 800fcbc:	20000064 	.word	0x20000064
 800fcc0:	20002c8c 	.word	0x20002c8c

0800fcc4 <Custom_STM_App_Update_Char>:
 * @param  CharOpcode: Characteristic identifier
 * @param  Service_Instance: Instance of the service to which the characteristic belongs
 *
 */
tBleStatus Custom_STM_App_Update_Char(Custom_STM_Char_Opcode_t CharOpcode, uint8_t *pPayload)
{
 800fcc4:	b580      	push	{r7, lr}
 800fcc6:	b086      	sub	sp, #24
 800fcc8:	af02      	add	r7, sp, #8
 800fcca:	4603      	mov	r3, r0
 800fccc:	6039      	str	r1, [r7, #0]
 800fcce:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800fcd0:	2392      	movs	r3, #146	@ 0x92
 800fcd2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN Custom_STM_App_Update_Char_1 */

  /* USER CODE END Custom_STM_App_Update_Char_1 */

  switch (CharOpcode)
 800fcd4:	79fb      	ldrb	r3, [r7, #7]
 800fcd6:	2b00      	cmp	r3, #0
 800fcd8:	d002      	beq.n	800fce0 <Custom_STM_App_Update_Char+0x1c>
 800fcda:	2b01      	cmp	r3, #1
 800fcdc:	d01a      	beq.n	800fd14 <Custom_STM_App_Update_Char+0x50>

      /* USER CODE END CUSTOM_STM_App_Update_Service_1_Char_2*/
      break;

    default:
      break;
 800fcde:	e029      	b.n	800fd34 <Custom_STM_App_Update_Char+0x70>
      ret = aci_gatt_update_char_value(CustomContext.CustomMysvcHdle,
 800fce0:	4b17      	ldr	r3, [pc, #92]	@ (800fd40 <Custom_STM_App_Update_Char+0x7c>)
 800fce2:	8818      	ldrh	r0, [r3, #0]
 800fce4:	4b16      	ldr	r3, [pc, #88]	@ (800fd40 <Custom_STM_App_Update_Char+0x7c>)
 800fce6:	8859      	ldrh	r1, [r3, #2]
 800fce8:	4b16      	ldr	r3, [pc, #88]	@ (800fd44 <Custom_STM_App_Update_Char+0x80>)
 800fcea:	881b      	ldrh	r3, [r3, #0]
 800fcec:	b2da      	uxtb	r2, r3
 800fcee:	683b      	ldr	r3, [r7, #0]
 800fcf0:	9300      	str	r3, [sp, #0]
 800fcf2:	4613      	mov	r3, r2
 800fcf4:	2200      	movs	r2, #0
 800fcf6:	f7fd febb 	bl	800da70 <aci_gatt_update_char_value>
 800fcfa:	4603      	mov	r3, r0
 800fcfc:	73fb      	strb	r3, [r7, #15]
      test4 = test4+1;
 800fcfe:	4b12      	ldr	r3, [pc, #72]	@ (800fd48 <Custom_STM_App_Update_Char+0x84>)
 800fd00:	edd3 7a00 	vldr	s15, [r3]
 800fd04:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800fd08:	ee77 7a87 	vadd.f32	s15, s15, s14
 800fd0c:	4b0e      	ldr	r3, [pc, #56]	@ (800fd48 <Custom_STM_App_Update_Char+0x84>)
 800fd0e:	edc3 7a00 	vstr	s15, [r3]
      break;
 800fd12:	e00f      	b.n	800fd34 <Custom_STM_App_Update_Char+0x70>
      ret = aci_gatt_update_char_value(CustomContext.CustomMysvcHdle,
 800fd14:	4b0a      	ldr	r3, [pc, #40]	@ (800fd40 <Custom_STM_App_Update_Char+0x7c>)
 800fd16:	8818      	ldrh	r0, [r3, #0]
 800fd18:	4b09      	ldr	r3, [pc, #36]	@ (800fd40 <Custom_STM_App_Update_Char+0x7c>)
 800fd1a:	8899      	ldrh	r1, [r3, #4]
 800fd1c:	4b0b      	ldr	r3, [pc, #44]	@ (800fd4c <Custom_STM_App_Update_Char+0x88>)
 800fd1e:	881b      	ldrh	r3, [r3, #0]
 800fd20:	b2da      	uxtb	r2, r3
 800fd22:	683b      	ldr	r3, [r7, #0]
 800fd24:	9300      	str	r3, [sp, #0]
 800fd26:	4613      	mov	r3, r2
 800fd28:	2200      	movs	r2, #0
 800fd2a:	f7fd fea1 	bl	800da70 <aci_gatt_update_char_value>
 800fd2e:	4603      	mov	r3, r0
 800fd30:	73fb      	strb	r3, [r7, #15]
      break;
 800fd32:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_App_Update_Char_2 */

  /* USER CODE END Custom_STM_App_Update_Char_2 */

  return ret;
 800fd34:	7bfb      	ldrb	r3, [r7, #15]
}
 800fd36:	4618      	mov	r0, r3
 800fd38:	3710      	adds	r7, #16
 800fd3a:	46bd      	mov	sp, r7
 800fd3c:	bd80      	pop	{r7, pc}
 800fd3e:	bf00      	nop
 800fd40:	20002c88 	.word	0x20002c88
 800fd44:	20000062 	.word	0x20000062
 800fd48:	20002c90 	.word	0x20002c90
 800fd4c:	20000064 	.word	0x20000064

0800fd50 <LL_PWR_EnableBootC2>:
{
 800fd50:	b480      	push	{r7}
 800fd52:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 800fd54:	4b05      	ldr	r3, [pc, #20]	@ (800fd6c <LL_PWR_EnableBootC2+0x1c>)
 800fd56:	68db      	ldr	r3, [r3, #12]
 800fd58:	4a04      	ldr	r2, [pc, #16]	@ (800fd6c <LL_PWR_EnableBootC2+0x1c>)
 800fd5a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800fd5e:	60d3      	str	r3, [r2, #12]
}
 800fd60:	bf00      	nop
 800fd62:	46bd      	mov	sp, r7
 800fd64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd68:	4770      	bx	lr
 800fd6a:	bf00      	nop
 800fd6c:	58000400 	.word	0x58000400

0800fd70 <LL_C2_EXTI_EnableEvent_32_63>:
{
 800fd70:	b480      	push	{r7}
 800fd72:	b083      	sub	sp, #12
 800fd74:	af00      	add	r7, sp, #0
 800fd76:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 800fd78:	4b06      	ldr	r3, [pc, #24]	@ (800fd94 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800fd7a:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 800fd7e:	4905      	ldr	r1, [pc, #20]	@ (800fd94 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800fd80:	687b      	ldr	r3, [r7, #4]
 800fd82:	4313      	orrs	r3, r2
 800fd84:	f8c1 30d4 	str.w	r3, [r1, #212]	@ 0xd4
}
 800fd88:	bf00      	nop
 800fd8a:	370c      	adds	r7, #12
 800fd8c:	46bd      	mov	sp, r7
 800fd8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd92:	4770      	bx	lr
 800fd94:	58000800 	.word	0x58000800

0800fd98 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 800fd98:	b480      	push	{r7}
 800fd9a:	b083      	sub	sp, #12
 800fd9c:	af00      	add	r7, sp, #0
 800fd9e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 800fda0:	4b05      	ldr	r3, [pc, #20]	@ (800fdb8 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800fda2:	6a1a      	ldr	r2, [r3, #32]
 800fda4:	4904      	ldr	r1, [pc, #16]	@ (800fdb8 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800fda6:	687b      	ldr	r3, [r7, #4]
 800fda8:	4313      	orrs	r3, r2
 800fdaa:	620b      	str	r3, [r1, #32]
}
 800fdac:	bf00      	nop
 800fdae:	370c      	adds	r7, #12
 800fdb0:	46bd      	mov	sp, r7
 800fdb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdb6:	4770      	bx	lr
 800fdb8:	58000800 	.word	0x58000800

0800fdbc <LL_AHB3_GRP1_EnableClock>:
{
 800fdbc:	b480      	push	{r7}
 800fdbe:	b085      	sub	sp, #20
 800fdc0:	af00      	add	r7, sp, #0
 800fdc2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 800fdc4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800fdc8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800fdca:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800fdce:	687b      	ldr	r3, [r7, #4]
 800fdd0:	4313      	orrs	r3, r2
 800fdd2:	650b      	str	r3, [r1, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800fdd4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800fdd8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800fdda:	687b      	ldr	r3, [r7, #4]
 800fddc:	4013      	ands	r3, r2
 800fdde:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800fde0:	68fb      	ldr	r3, [r7, #12]
}
 800fde2:	bf00      	nop
 800fde4:	3714      	adds	r7, #20
 800fde6:	46bd      	mov	sp, r7
 800fde8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdec:	4770      	bx	lr

0800fdee <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 800fdee:	b480      	push	{r7}
 800fdf0:	b085      	sub	sp, #20
 800fdf2:	af00      	add	r7, sp, #0
 800fdf4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 800fdf6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800fdfa:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 800fdfe:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800fe02:	687b      	ldr	r3, [r7, #4]
 800fe04:	4313      	orrs	r3, r2
 800fe06:	f8c1 3150 	str.w	r3, [r1, #336]	@ 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 800fe0a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800fe0e:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 800fe12:	687b      	ldr	r3, [r7, #4]
 800fe14:	4013      	ands	r3, r2
 800fe16:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800fe18:	68fb      	ldr	r3, [r7, #12]
}
 800fe1a:	bf00      	nop
 800fe1c:	3714      	adds	r7, #20
 800fe1e:	46bd      	mov	sp, r7
 800fe20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe24:	4770      	bx	lr

0800fe26 <LL_C1_IPCC_EnableIT_TXF>:
  * @rmtoll C1CR          TXFIE         LL_C1_IPCC_EnableIT_TXF
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_TXF(IPCC_TypeDef *IPCCx)
{
 800fe26:	b480      	push	{r7}
 800fe28:	b083      	sub	sp, #12
 800fe2a:	af00      	add	r7, sp, #0
 800fe2c:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 800fe2e:	687b      	ldr	r3, [r7, #4]
 800fe30:	681b      	ldr	r3, [r3, #0]
 800fe32:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800fe36:	687b      	ldr	r3, [r7, #4]
 800fe38:	601a      	str	r2, [r3, #0]
}
 800fe3a:	bf00      	nop
 800fe3c:	370c      	adds	r7, #12
 800fe3e:	46bd      	mov	sp, r7
 800fe40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe44:	4770      	bx	lr

0800fe46 <LL_C1_IPCC_EnableIT_RXO>:
  * @rmtoll C1CR          RXOIE         LL_C1_IPCC_EnableIT_RXO
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_RXO(IPCC_TypeDef *IPCCx)
{
 800fe46:	b480      	push	{r7}
 800fe48:	b083      	sub	sp, #12
 800fe4a:	af00      	add	r7, sp, #0
 800fe4c:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 800fe4e:	687b      	ldr	r3, [r7, #4]
 800fe50:	681b      	ldr	r3, [r3, #0]
 800fe52:	f043 0201 	orr.w	r2, r3, #1
 800fe56:	687b      	ldr	r3, [r7, #4]
 800fe58:	601a      	str	r2, [r3, #0]
}
 800fe5a:	bf00      	nop
 800fe5c:	370c      	adds	r7, #12
 800fe5e:	46bd      	mov	sp, r7
 800fe60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe64:	4770      	bx	lr

0800fe66 <LL_C1_IPCC_EnableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800fe66:	b480      	push	{r7}
 800fe68:	b083      	sub	sp, #12
 800fe6a:	af00      	add	r7, sp, #0
 800fe6c:	6078      	str	r0, [r7, #4]
 800fe6e:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800fe70:	687b      	ldr	r3, [r7, #4]
 800fe72:	685a      	ldr	r2, [r3, #4]
 800fe74:	683b      	ldr	r3, [r7, #0]
 800fe76:	041b      	lsls	r3, r3, #16
 800fe78:	43db      	mvns	r3, r3
 800fe7a:	401a      	ands	r2, r3
 800fe7c:	687b      	ldr	r3, [r7, #4]
 800fe7e:	605a      	str	r2, [r3, #4]
}
 800fe80:	bf00      	nop
 800fe82:	370c      	adds	r7, #12
 800fe84:	46bd      	mov	sp, r7
 800fe86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe8a:	4770      	bx	lr

0800fe8c <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800fe8c:	b480      	push	{r7}
 800fe8e:	b083      	sub	sp, #12
 800fe90:	af00      	add	r7, sp, #0
 800fe92:	6078      	str	r0, [r7, #4]
 800fe94:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800fe96:	687b      	ldr	r3, [r7, #4]
 800fe98:	685a      	ldr	r2, [r3, #4]
 800fe9a:	683b      	ldr	r3, [r7, #0]
 800fe9c:	041b      	lsls	r3, r3, #16
 800fe9e:	431a      	orrs	r2, r3
 800fea0:	687b      	ldr	r3, [r7, #4]
 800fea2:	605a      	str	r2, [r3, #4]
}
 800fea4:	bf00      	nop
 800fea6:	370c      	adds	r7, #12
 800fea8:	46bd      	mov	sp, r7
 800feaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feae:	4770      	bx	lr

0800feb0 <LL_C1_IPCC_EnableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800feb0:	b480      	push	{r7}
 800feb2:	b083      	sub	sp, #12
 800feb4:	af00      	add	r7, sp, #0
 800feb6:	6078      	str	r0, [r7, #4]
 800feb8:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 800feba:	687b      	ldr	r3, [r7, #4]
 800febc:	685a      	ldr	r2, [r3, #4]
 800febe:	683b      	ldr	r3, [r7, #0]
 800fec0:	43db      	mvns	r3, r3
 800fec2:	401a      	ands	r2, r3
 800fec4:	687b      	ldr	r3, [r7, #4]
 800fec6:	605a      	str	r2, [r3, #4]
}
 800fec8:	bf00      	nop
 800feca:	370c      	adds	r7, #12
 800fecc:	46bd      	mov	sp, r7
 800fece:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fed2:	4770      	bx	lr

0800fed4 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800fed4:	b480      	push	{r7}
 800fed6:	b083      	sub	sp, #12
 800fed8:	af00      	add	r7, sp, #0
 800feda:	6078      	str	r0, [r7, #4]
 800fedc:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 800fede:	687b      	ldr	r3, [r7, #4]
 800fee0:	683a      	ldr	r2, [r7, #0]
 800fee2:	609a      	str	r2, [r3, #8]
}
 800fee4:	bf00      	nop
 800fee6:	370c      	adds	r7, #12
 800fee8:	46bd      	mov	sp, r7
 800feea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feee:	4770      	bx	lr

0800fef0 <LL_C1_IPCC_SetFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_SetFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800fef0:	b480      	push	{r7}
 800fef2:	b083      	sub	sp, #12
 800fef4:	af00      	add	r7, sp, #0
 800fef6:	6078      	str	r0, [r7, #4]
 800fef8:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 800fefa:	683b      	ldr	r3, [r7, #0]
 800fefc:	041a      	lsls	r2, r3, #16
 800fefe:	687b      	ldr	r3, [r7, #4]
 800ff00:	609a      	str	r2, [r3, #8]
}
 800ff02:	bf00      	nop
 800ff04:	370c      	adds	r7, #12
 800ff06:	46bd      	mov	sp, r7
 800ff08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff0c:	4770      	bx	lr

0800ff0e <LL_C1_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C1_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 800ff0e:	b480      	push	{r7}
 800ff10:	b083      	sub	sp, #12
 800ff12:	af00      	add	r7, sp, #0
 800ff14:	6078      	str	r0, [r7, #4]
 800ff16:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 800ff18:	687b      	ldr	r3, [r7, #4]
 800ff1a:	68da      	ldr	r2, [r3, #12]
 800ff1c:	683b      	ldr	r3, [r7, #0]
 800ff1e:	4013      	ands	r3, r2
 800ff20:	683a      	ldr	r2, [r7, #0]
 800ff22:	429a      	cmp	r2, r3
 800ff24:	d101      	bne.n	800ff2a <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 800ff26:	2301      	movs	r3, #1
 800ff28:	e000      	b.n	800ff2c <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 800ff2a:	2300      	movs	r3, #0
}
 800ff2c:	4618      	mov	r0, r3
 800ff2e:	370c      	adds	r7, #12
 800ff30:	46bd      	mov	sp, r7
 800ff32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff36:	4770      	bx	lr

0800ff38 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 800ff38:	b480      	push	{r7}
 800ff3a:	b083      	sub	sp, #12
 800ff3c:	af00      	add	r7, sp, #0
 800ff3e:	6078      	str	r0, [r7, #4]
 800ff40:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 800ff42:	687b      	ldr	r3, [r7, #4]
 800ff44:	69da      	ldr	r2, [r3, #28]
 800ff46:	683b      	ldr	r3, [r7, #0]
 800ff48:	4013      	ands	r3, r2
 800ff4a:	683a      	ldr	r2, [r7, #0]
 800ff4c:	429a      	cmp	r2, r3
 800ff4e:	d101      	bne.n	800ff54 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 800ff50:	2301      	movs	r3, #1
 800ff52:	e000      	b.n	800ff56 <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 800ff54:	2300      	movs	r3, #0
}
 800ff56:	4618      	mov	r0, r3
 800ff58:	370c      	adds	r7, #12
 800ff5a:	46bd      	mov	sp, r7
 800ff5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff60:	4770      	bx	lr
	...

0800ff64 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 800ff64:	b580      	push	{r7, lr}
 800ff66:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 800ff68:	2102      	movs	r1, #2
 800ff6a:	4818      	ldr	r0, [pc, #96]	@ (800ffcc <HW_IPCC_Rx_Handler+0x68>)
 800ff6c:	f7ff ffe4 	bl	800ff38 <LL_C2_IPCC_IsActiveFlag_CHx>
 800ff70:	4603      	mov	r3, r0
 800ff72:	2b00      	cmp	r3, #0
 800ff74:	d008      	beq.n	800ff88 <HW_IPCC_Rx_Handler+0x24>
 800ff76:	4b15      	ldr	r3, [pc, #84]	@ (800ffcc <HW_IPCC_Rx_Handler+0x68>)
 800ff78:	685b      	ldr	r3, [r3, #4]
 800ff7a:	f003 0302 	and.w	r3, r3, #2
 800ff7e:	2b00      	cmp	r3, #0
 800ff80:	d102      	bne.n	800ff88 <HW_IPCC_Rx_Handler+0x24>
  {
      HW_IPCC_SYS_EvtHandler();
 800ff82:	f000 f8d5 	bl	8010130 <HW_IPCC_SYS_EvtHandler>
 800ff86:	e01e      	b.n	800ffc6 <HW_IPCC_Rx_Handler+0x62>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 800ff88:	2101      	movs	r1, #1
 800ff8a:	4810      	ldr	r0, [pc, #64]	@ (800ffcc <HW_IPCC_Rx_Handler+0x68>)
 800ff8c:	f7ff ffd4 	bl	800ff38 <LL_C2_IPCC_IsActiveFlag_CHx>
 800ff90:	4603      	mov	r3, r0
 800ff92:	2b00      	cmp	r3, #0
 800ff94:	d008      	beq.n	800ffa8 <HW_IPCC_Rx_Handler+0x44>
 800ff96:	4b0d      	ldr	r3, [pc, #52]	@ (800ffcc <HW_IPCC_Rx_Handler+0x68>)
 800ff98:	685b      	ldr	r3, [r3, #4]
 800ff9a:	f003 0301 	and.w	r3, r3, #1
 800ff9e:	2b00      	cmp	r3, #0
 800ffa0:	d102      	bne.n	800ffa8 <HW_IPCC_Rx_Handler+0x44>
  {
    HW_IPCC_BLE_EvtHandler();
 800ffa2:	f000 f889 	bl	80100b8 <HW_IPCC_BLE_EvtHandler>
 800ffa6:	e00e      	b.n	800ffc6 <HW_IPCC_Rx_Handler+0x62>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 800ffa8:	2108      	movs	r1, #8
 800ffaa:	4808      	ldr	r0, [pc, #32]	@ (800ffcc <HW_IPCC_Rx_Handler+0x68>)
 800ffac:	f7ff ffc4 	bl	800ff38 <LL_C2_IPCC_IsActiveFlag_CHx>
 800ffb0:	4603      	mov	r3, r0
 800ffb2:	2b00      	cmp	r3, #0
 800ffb4:	d008      	beq.n	800ffc8 <HW_IPCC_Rx_Handler+0x64>
 800ffb6:	4b05      	ldr	r3, [pc, #20]	@ (800ffcc <HW_IPCC_Rx_Handler+0x68>)
 800ffb8:	685b      	ldr	r3, [r3, #4]
 800ffba:	f003 0308 	and.w	r3, r3, #8
 800ffbe:	2b00      	cmp	r3, #0
 800ffc0:	d102      	bne.n	800ffc8 <HW_IPCC_Rx_Handler+0x64>
  {
    HW_IPCC_TRACES_EvtHandler();
 800ffc2:	f000 f901 	bl	80101c8 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 800ffc6:	bf00      	nop
 800ffc8:	bf00      	nop
}
 800ffca:	bd80      	pop	{r7, pc}
 800ffcc:	58000c00 	.word	0x58000c00

0800ffd0 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 800ffd0:	b580      	push	{r7, lr}
 800ffd2:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 800ffd4:	2102      	movs	r1, #2
 800ffd6:	4818      	ldr	r0, [pc, #96]	@ (8010038 <HW_IPCC_Tx_Handler+0x68>)
 800ffd8:	f7ff ff99 	bl	800ff0e <LL_C1_IPCC_IsActiveFlag_CHx>
 800ffdc:	4603      	mov	r3, r0
 800ffde:	2b00      	cmp	r3, #0
 800ffe0:	d108      	bne.n	800fff4 <HW_IPCC_Tx_Handler+0x24>
 800ffe2:	4b15      	ldr	r3, [pc, #84]	@ (8010038 <HW_IPCC_Tx_Handler+0x68>)
 800ffe4:	685b      	ldr	r3, [r3, #4]
 800ffe6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ffea:	2b00      	cmp	r3, #0
 800ffec:	d102      	bne.n	800fff4 <HW_IPCC_Tx_Handler+0x24>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 800ffee:	f000 f893 	bl	8010118 <HW_IPCC_SYS_CmdEvtHandler>
 800fff2:	e01e      	b.n	8010032 <HW_IPCC_Tx_Handler+0x62>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 800fff4:	2108      	movs	r1, #8
 800fff6:	4810      	ldr	r0, [pc, #64]	@ (8010038 <HW_IPCC_Tx_Handler+0x68>)
 800fff8:	f7ff ff89 	bl	800ff0e <LL_C1_IPCC_IsActiveFlag_CHx>
 800fffc:	4603      	mov	r3, r0
 800fffe:	2b00      	cmp	r3, #0
 8010000:	d108      	bne.n	8010014 <HW_IPCC_Tx_Handler+0x44>
 8010002:	4b0d      	ldr	r3, [pc, #52]	@ (8010038 <HW_IPCC_Tx_Handler+0x68>)
 8010004:	685b      	ldr	r3, [r3, #4]
 8010006:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 801000a:	2b00      	cmp	r3, #0
 801000c:	d102      	bne.n	8010014 <HW_IPCC_Tx_Handler+0x44>
  {
    HW_IPCC_MM_FreeBufHandler();
 801000e:	f000 f8bd 	bl	801018c <HW_IPCC_MM_FreeBufHandler>
 8010012:	e00e      	b.n	8010032 <HW_IPCC_Tx_Handler+0x62>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 8010014:	2120      	movs	r1, #32
 8010016:	4808      	ldr	r0, [pc, #32]	@ (8010038 <HW_IPCC_Tx_Handler+0x68>)
 8010018:	f7ff ff79 	bl	800ff0e <LL_C1_IPCC_IsActiveFlag_CHx>
 801001c:	4603      	mov	r3, r0
 801001e:	2b00      	cmp	r3, #0
 8010020:	d108      	bne.n	8010034 <HW_IPCC_Tx_Handler+0x64>
 8010022:	4b05      	ldr	r3, [pc, #20]	@ (8010038 <HW_IPCC_Tx_Handler+0x68>)
 8010024:	685b      	ldr	r3, [r3, #4]
 8010026:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 801002a:	2b00      	cmp	r3, #0
 801002c:	d102      	bne.n	8010034 <HW_IPCC_Tx_Handler+0x64>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 801002e:	f000 f84f 	bl	80100d0 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 8010032:	bf00      	nop
 8010034:	bf00      	nop
}
 8010036:	bd80      	pop	{r7, pc}
 8010038:	58000c00 	.word	0x58000c00

0801003c <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 801003c:	b580      	push	{r7, lr}
 801003e:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
  * when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 8010040:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8010044:	f7ff fed3 	bl	800fdee <LL_C2_AHB3_GRP1_EnableClock>

  /**
  * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
  */
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 8010048:	f44f 7000 	mov.w	r0, #512	@ 0x200
 801004c:	f7ff fea4 	bl	800fd98 <LL_EXTI_EnableRisingTrig_32_63>
  /* It is required to have at least a system clock cycle before a SEV after LL_EXTI_EnableRisingTrig_32_63() */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 8010050:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8010054:	f7ff fe8c 	bl	800fd70 <LL_C2_EXTI_EnableEvent_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 8010058:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 801005a:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 801005c:	f7ff fe78 	bl	800fd50 <LL_PWR_EnableBootC2>

  return;
 8010060:	bf00      	nop
}
 8010062:	bd80      	pop	{r7, pc}

08010064 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 8010064:	b580      	push	{r7, lr}
 8010066:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 8010068:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 801006c:	f7ff fea6 	bl	800fdbc <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 8010070:	4806      	ldr	r0, [pc, #24]	@ (801008c <HW_IPCC_Init+0x28>)
 8010072:	f7ff fee8 	bl	800fe46 <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 8010076:	4805      	ldr	r0, [pc, #20]	@ (801008c <HW_IPCC_Init+0x28>)
 8010078:	f7ff fed5 	bl	800fe26 <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 801007c:	202c      	movs	r0, #44	@ 0x2c
 801007e:	f7f7 feba 	bl	8007df6 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8010082:	202d      	movs	r0, #45	@ 0x2d
 8010084:	f7f7 feb7 	bl	8007df6 <HAL_NVIC_EnableIRQ>

  return;
 8010088:	bf00      	nop
}
 801008a:	bd80      	pop	{r7, pc}
 801008c:	58000c00 	.word	0x58000c00

08010090 <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 8010090:	b580      	push	{r7, lr}
 8010092:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8010094:	2101      	movs	r1, #1
 8010096:	4802      	ldr	r0, [pc, #8]	@ (80100a0 <HW_IPCC_BLE_Init+0x10>)
 8010098:	f7ff ff0a 	bl	800feb0 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 801009c:	bf00      	nop
}
 801009e:	bd80      	pop	{r7, pc}
 80100a0:	58000c00 	.word	0x58000c00

080100a4 <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 80100a4:	b580      	push	{r7, lr}
 80100a6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 80100a8:	2101      	movs	r1, #1
 80100aa:	4802      	ldr	r0, [pc, #8]	@ (80100b4 <HW_IPCC_BLE_SendCmd+0x10>)
 80100ac:	f7ff ff20 	bl	800fef0 <LL_C1_IPCC_SetFlag_CHx>

  return;
 80100b0:	bf00      	nop
}
 80100b2:	bd80      	pop	{r7, pc}
 80100b4:	58000c00 	.word	0x58000c00

080100b8 <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 80100b8:	b580      	push	{r7, lr}
 80100ba:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 80100bc:	f7fe fd4a 	bl	800eb54 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 80100c0:	2101      	movs	r1, #1
 80100c2:	4802      	ldr	r0, [pc, #8]	@ (80100cc <HW_IPCC_BLE_EvtHandler+0x14>)
 80100c4:	f7ff ff06 	bl	800fed4 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 80100c8:	bf00      	nop
}
 80100ca:	bd80      	pop	{r7, pc}
 80100cc:	58000c00 	.word	0x58000c00

080100d0 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 80100d0:	b580      	push	{r7, lr}
 80100d2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 80100d4:	2120      	movs	r1, #32
 80100d6:	4803      	ldr	r0, [pc, #12]	@ (80100e4 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 80100d8:	f7ff fed8 	bl	800fe8c <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 80100dc:	f7fe fd6a 	bl	800ebb4 <HW_IPCC_BLE_AclDataAckNot>

  return;
 80100e0:	bf00      	nop
}
 80100e2:	bd80      	pop	{r7, pc}
 80100e4:	58000c00 	.word	0x58000c00

080100e8 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 80100e8:	b580      	push	{r7, lr}
 80100ea:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 80100ec:	2102      	movs	r1, #2
 80100ee:	4802      	ldr	r0, [pc, #8]	@ (80100f8 <HW_IPCC_SYS_Init+0x10>)
 80100f0:	f7ff fede 	bl	800feb0 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 80100f4:	bf00      	nop
}
 80100f6:	bd80      	pop	{r7, pc}
 80100f8:	58000c00 	.word	0x58000c00

080100fc <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 80100fc:	b580      	push	{r7, lr}
 80100fe:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8010100:	2102      	movs	r1, #2
 8010102:	4804      	ldr	r0, [pc, #16]	@ (8010114 <HW_IPCC_SYS_SendCmd+0x18>)
 8010104:	f7ff fef4 	bl	800fef0 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8010108:	2102      	movs	r1, #2
 801010a:	4802      	ldr	r0, [pc, #8]	@ (8010114 <HW_IPCC_SYS_SendCmd+0x18>)
 801010c:	f7ff feab 	bl	800fe66 <LL_C1_IPCC_EnableTransmitChannel>

  return;
 8010110:	bf00      	nop
}
 8010112:	bd80      	pop	{r7, pc}
 8010114:	58000c00 	.word	0x58000c00

08010118 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 8010118:	b580      	push	{r7, lr}
 801011a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 801011c:	2102      	movs	r1, #2
 801011e:	4803      	ldr	r0, [pc, #12]	@ (801012c <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 8010120:	f7ff feb4 	bl	800fe8c <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 8010124:	f7fe fd96 	bl	800ec54 <HW_IPCC_SYS_CmdEvtNot>

  return;
 8010128:	bf00      	nop
}
 801012a:	bd80      	pop	{r7, pc}
 801012c:	58000c00 	.word	0x58000c00

08010130 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 8010130:	b580      	push	{r7, lr}
 8010132:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 8010134:	f7fe fda4 	bl	800ec80 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8010138:	2102      	movs	r1, #2
 801013a:	4802      	ldr	r0, [pc, #8]	@ (8010144 <HW_IPCC_SYS_EvtHandler+0x14>)
 801013c:	f7ff feca 	bl	800fed4 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8010140:	bf00      	nop
}
 8010142:	bd80      	pop	{r7, pc}
 8010144:	58000c00 	.word	0x58000c00

08010148 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 8010148:	b580      	push	{r7, lr}
 801014a:	b082      	sub	sp, #8
 801014c:	af00      	add	r7, sp, #0
 801014e:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 8010150:	2108      	movs	r1, #8
 8010152:	480c      	ldr	r0, [pc, #48]	@ (8010184 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8010154:	f7ff fedb 	bl	800ff0e <LL_C1_IPCC_IsActiveFlag_CHx>
 8010158:	4603      	mov	r3, r0
 801015a:	2b00      	cmp	r3, #0
 801015c:	d007      	beq.n	801016e <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 801015e:	4a0a      	ldr	r2, [pc, #40]	@ (8010188 <HW_IPCC_MM_SendFreeBuf+0x40>)
 8010160:	687b      	ldr	r3, [r7, #4]
 8010162:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8010164:	2108      	movs	r1, #8
 8010166:	4807      	ldr	r0, [pc, #28]	@ (8010184 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8010168:	f7ff fe7d 	bl	800fe66 <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 801016c:	e006      	b.n	801017c <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 801016e:	687b      	ldr	r3, [r7, #4]
 8010170:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8010172:	2108      	movs	r1, #8
 8010174:	4803      	ldr	r0, [pc, #12]	@ (8010184 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8010176:	f7ff febb 	bl	800fef0 <LL_C1_IPCC_SetFlag_CHx>
  return;
 801017a:	bf00      	nop
}
 801017c:	3708      	adds	r7, #8
 801017e:	46bd      	mov	sp, r7
 8010180:	bd80      	pop	{r7, pc}
 8010182:	bf00      	nop
 8010184:	58000c00 	.word	0x58000c00
 8010188:	20002c94 	.word	0x20002c94

0801018c <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 801018c:	b580      	push	{r7, lr}
 801018e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8010190:	2108      	movs	r1, #8
 8010192:	4806      	ldr	r0, [pc, #24]	@ (80101ac <HW_IPCC_MM_FreeBufHandler+0x20>)
 8010194:	f7ff fe7a 	bl	800fe8c <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 8010198:	4b05      	ldr	r3, [pc, #20]	@ (80101b0 <HW_IPCC_MM_FreeBufHandler+0x24>)
 801019a:	681b      	ldr	r3, [r3, #0]
 801019c:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 801019e:	2108      	movs	r1, #8
 80101a0:	4802      	ldr	r0, [pc, #8]	@ (80101ac <HW_IPCC_MM_FreeBufHandler+0x20>)
 80101a2:	f7ff fea5 	bl	800fef0 <LL_C1_IPCC_SetFlag_CHx>

  return;
 80101a6:	bf00      	nop
}
 80101a8:	bd80      	pop	{r7, pc}
 80101aa:	bf00      	nop
 80101ac:	58000c00 	.word	0x58000c00
 80101b0:	20002c94 	.word	0x20002c94

080101b4 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 80101b4:	b580      	push	{r7, lr}
 80101b6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 80101b8:	2108      	movs	r1, #8
 80101ba:	4802      	ldr	r0, [pc, #8]	@ (80101c4 <HW_IPCC_TRACES_Init+0x10>)
 80101bc:	f7ff fe78 	bl	800feb0 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 80101c0:	bf00      	nop
}
 80101c2:	bd80      	pop	{r7, pc}
 80101c4:	58000c00 	.word	0x58000c00

080101c8 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 80101c8:	b580      	push	{r7, lr}
 80101ca:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 80101cc:	f7fe fe00 	bl	800edd0 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 80101d0:	2108      	movs	r1, #8
 80101d2:	4802      	ldr	r0, [pc, #8]	@ (80101dc <HW_IPCC_TRACES_EvtHandler+0x14>)
 80101d4:	f7ff fe7e 	bl	800fed4 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 80101d8:	bf00      	nop
}
 80101da:	bd80      	pop	{r7, pc}
 80101dc:	58000c00 	.word	0x58000c00

080101e0 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 80101e0:	b480      	push	{r7}
 80101e2:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 80101e4:	4b05      	ldr	r3, [pc, #20]	@ (80101fc <UTIL_LPM_Init+0x1c>)
 80101e6:	2200      	movs	r2, #0
 80101e8:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 80101ea:	4b05      	ldr	r3, [pc, #20]	@ (8010200 <UTIL_LPM_Init+0x20>)
 80101ec:	2200      	movs	r2, #0
 80101ee:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 80101f0:	bf00      	nop
 80101f2:	46bd      	mov	sp, r7
 80101f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101f8:	4770      	bx	lr
 80101fa:	bf00      	nop
 80101fc:	20002c98 	.word	0x20002c98
 8010200:	20002c9c 	.word	0x20002c9c

08010204 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 8010204:	b480      	push	{r7}
 8010206:	b087      	sub	sp, #28
 8010208:	af00      	add	r7, sp, #0
 801020a:	6078      	str	r0, [r7, #4]
 801020c:	460b      	mov	r3, r1
 801020e:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010210:	f3ef 8310 	mrs	r3, PRIMASK
 8010214:	613b      	str	r3, [r7, #16]
  return(result);
 8010216:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 8010218:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801021a:	b672      	cpsid	i
}
 801021c:	bf00      	nop
  
  switch(state)
 801021e:	78fb      	ldrb	r3, [r7, #3]
 8010220:	2b00      	cmp	r3, #0
 8010222:	d008      	beq.n	8010236 <UTIL_LPM_SetOffMode+0x32>
 8010224:	2b01      	cmp	r3, #1
 8010226:	d10e      	bne.n	8010246 <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 8010228:	4b0d      	ldr	r3, [pc, #52]	@ (8010260 <UTIL_LPM_SetOffMode+0x5c>)
 801022a:	681a      	ldr	r2, [r3, #0]
 801022c:	687b      	ldr	r3, [r7, #4]
 801022e:	4313      	orrs	r3, r2
 8010230:	4a0b      	ldr	r2, [pc, #44]	@ (8010260 <UTIL_LPM_SetOffMode+0x5c>)
 8010232:	6013      	str	r3, [r2, #0]
      break;
 8010234:	e008      	b.n	8010248 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 8010236:	687b      	ldr	r3, [r7, #4]
 8010238:	43da      	mvns	r2, r3
 801023a:	4b09      	ldr	r3, [pc, #36]	@ (8010260 <UTIL_LPM_SetOffMode+0x5c>)
 801023c:	681b      	ldr	r3, [r3, #0]
 801023e:	4013      	ands	r3, r2
 8010240:	4a07      	ldr	r2, [pc, #28]	@ (8010260 <UTIL_LPM_SetOffMode+0x5c>)
 8010242:	6013      	str	r3, [r2, #0]
      break;
 8010244:	e000      	b.n	8010248 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 8010246:	bf00      	nop
 8010248:	697b      	ldr	r3, [r7, #20]
 801024a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801024c:	68fb      	ldr	r3, [r7, #12]
 801024e:	f383 8810 	msr	PRIMASK, r3
}
 8010252:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8010254:	bf00      	nop
 8010256:	371c      	adds	r7, #28
 8010258:	46bd      	mov	sp, r7
 801025a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801025e:	4770      	bx	lr
 8010260:	20002c9c 	.word	0x20002c9c

08010264 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 8010264:	b580      	push	{r7, lr}
 8010266:	b090      	sub	sp, #64	@ 0x40
 8010268:	af00      	add	r7, sp, #0
 801026a:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 801026c:	4b73      	ldr	r3, [pc, #460]	@ (801043c <UTIL_SEQ_Run+0x1d8>)
 801026e:	681b      	ldr	r3, [r3, #0]
 8010270:	62bb      	str	r3, [r7, #40]	@ 0x28
  SuperMask &= Mask_bm;
 8010272:	4b72      	ldr	r3, [pc, #456]	@ (801043c <UTIL_SEQ_Run+0x1d8>)
 8010274:	681a      	ldr	r2, [r3, #0]
 8010276:	687b      	ldr	r3, [r7, #4]
 8010278:	4013      	ands	r3, r2
 801027a:	4a70      	ldr	r2, [pc, #448]	@ (801043c <UTIL_SEQ_Run+0x1d8>)
 801027c:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 801027e:	4b70      	ldr	r3, [pc, #448]	@ (8010440 <UTIL_SEQ_Run+0x1dc>)
 8010280:	681b      	ldr	r3, [r3, #0]
 8010282:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 8010284:	4b6f      	ldr	r3, [pc, #444]	@ (8010444 <UTIL_SEQ_Run+0x1e0>)
 8010286:	681b      	ldr	r3, [r3, #0]
 8010288:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 801028a:	4b6f      	ldr	r3, [pc, #444]	@ (8010448 <UTIL_SEQ_Run+0x1e4>)
 801028c:	681b      	ldr	r3, [r3, #0]
 801028e:	633b      	str	r3, [r7, #48]	@ 0x30
  local_evtwaited =  EvtWaited;
 8010290:	4b6e      	ldr	r3, [pc, #440]	@ (801044c <UTIL_SEQ_Run+0x1e8>)
 8010292:	681b      	ldr	r3, [r3, #0]
 8010294:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 8010296:	e08d      	b.n	80103b4 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 8010298:	2300      	movs	r3, #0
 801029a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 801029c:	e002      	b.n	80102a4 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 801029e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80102a0:	3301      	adds	r3, #1
 80102a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 80102a4:	4a6a      	ldr	r2, [pc, #424]	@ (8010450 <UTIL_SEQ_Run+0x1ec>)
 80102a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80102a8:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80102ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80102ae:	401a      	ands	r2, r3
 80102b0:	4b62      	ldr	r3, [pc, #392]	@ (801043c <UTIL_SEQ_Run+0x1d8>)
 80102b2:	681b      	ldr	r3, [r3, #0]
 80102b4:	4013      	ands	r3, r2
 80102b6:	2b00      	cmp	r3, #0
 80102b8:	d0f1      	beq.n	801029e <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 80102ba:	4a65      	ldr	r2, [pc, #404]	@ (8010450 <UTIL_SEQ_Run+0x1ec>)
 80102bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80102be:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80102c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80102c4:	401a      	ands	r2, r3
 80102c6:	4b5d      	ldr	r3, [pc, #372]	@ (801043c <UTIL_SEQ_Run+0x1d8>)
 80102c8:	681b      	ldr	r3, [r3, #0]
 80102ca:	4013      	ands	r3, r2
 80102cc:	627b      	str	r3, [r7, #36]	@ 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 80102ce:	4a60      	ldr	r2, [pc, #384]	@ (8010450 <UTIL_SEQ_Run+0x1ec>)
 80102d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80102d2:	00db      	lsls	r3, r3, #3
 80102d4:	4413      	add	r3, r2
 80102d6:	685a      	ldr	r2, [r3, #4]
 80102d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80102da:	4013      	ands	r3, r2
 80102dc:	2b00      	cmp	r3, #0
 80102de:	d106      	bne.n	80102ee <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 80102e0:	4a5b      	ldr	r2, [pc, #364]	@ (8010450 <UTIL_SEQ_Run+0x1ec>)
 80102e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80102e4:	00db      	lsls	r3, r3, #3
 80102e6:	4413      	add	r3, r2
 80102e8:	f04f 32ff 	mov.w	r2, #4294967295
 80102ec:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 80102ee:	4a58      	ldr	r2, [pc, #352]	@ (8010450 <UTIL_SEQ_Run+0x1ec>)
 80102f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80102f2:	00db      	lsls	r3, r3, #3
 80102f4:	4413      	add	r3, r2
 80102f6:	685a      	ldr	r2, [r3, #4]
 80102f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80102fa:	4013      	ands	r3, r2
 80102fc:	4618      	mov	r0, r3
 80102fe:	f000 f9b3 	bl	8010668 <SEQ_BitPosition>
 8010302:	4603      	mov	r3, r0
 8010304:	461a      	mov	r2, r3
 8010306:	4b53      	ldr	r3, [pc, #332]	@ (8010454 <UTIL_SEQ_Run+0x1f0>)
 8010308:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 801030a:	4a51      	ldr	r2, [pc, #324]	@ (8010450 <UTIL_SEQ_Run+0x1ec>)
 801030c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801030e:	00db      	lsls	r3, r3, #3
 8010310:	4413      	add	r3, r2
 8010312:	685a      	ldr	r2, [r3, #4]
 8010314:	4b4f      	ldr	r3, [pc, #316]	@ (8010454 <UTIL_SEQ_Run+0x1f0>)
 8010316:	681b      	ldr	r3, [r3, #0]
 8010318:	2101      	movs	r1, #1
 801031a:	fa01 f303 	lsl.w	r3, r1, r3
 801031e:	43db      	mvns	r3, r3
 8010320:	401a      	ands	r2, r3
 8010322:	494b      	ldr	r1, [pc, #300]	@ (8010450 <UTIL_SEQ_Run+0x1ec>)
 8010324:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010326:	00db      	lsls	r3, r3, #3
 8010328:	440b      	add	r3, r1
 801032a:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801032c:	f3ef 8310 	mrs	r3, PRIMASK
 8010330:	61bb      	str	r3, [r7, #24]
  return(result);
 8010332:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8010334:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8010336:	b672      	cpsid	i
}
 8010338:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 801033a:	4b46      	ldr	r3, [pc, #280]	@ (8010454 <UTIL_SEQ_Run+0x1f0>)
 801033c:	681b      	ldr	r3, [r3, #0]
 801033e:	2201      	movs	r2, #1
 8010340:	fa02 f303 	lsl.w	r3, r2, r3
 8010344:	43da      	mvns	r2, r3
 8010346:	4b3e      	ldr	r3, [pc, #248]	@ (8010440 <UTIL_SEQ_Run+0x1dc>)
 8010348:	681b      	ldr	r3, [r3, #0]
 801034a:	4013      	ands	r3, r2
 801034c:	4a3c      	ldr	r2, [pc, #240]	@ (8010440 <UTIL_SEQ_Run+0x1dc>)
 801034e:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8010350:	2302      	movs	r3, #2
 8010352:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8010354:	e013      	b.n	801037e <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 8010356:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010358:	3b01      	subs	r3, #1
 801035a:	4a3d      	ldr	r2, [pc, #244]	@ (8010450 <UTIL_SEQ_Run+0x1ec>)
 801035c:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 8010360:	4b3c      	ldr	r3, [pc, #240]	@ (8010454 <UTIL_SEQ_Run+0x1f0>)
 8010362:	681b      	ldr	r3, [r3, #0]
 8010364:	2201      	movs	r2, #1
 8010366:	fa02 f303 	lsl.w	r3, r2, r3
 801036a:	43da      	mvns	r2, r3
 801036c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801036e:	3b01      	subs	r3, #1
 8010370:	400a      	ands	r2, r1
 8010372:	4937      	ldr	r1, [pc, #220]	@ (8010450 <UTIL_SEQ_Run+0x1ec>)
 8010374:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8010378:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801037a:	3b01      	subs	r3, #1
 801037c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801037e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010380:	2b00      	cmp	r3, #0
 8010382:	d1e8      	bne.n	8010356 <UTIL_SEQ_Run+0xf2>
 8010384:	6a3b      	ldr	r3, [r7, #32]
 8010386:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010388:	697b      	ldr	r3, [r7, #20]
 801038a:	f383 8810 	msr	PRIMASK, r3
}
 801038e:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 8010390:	4b30      	ldr	r3, [pc, #192]	@ (8010454 <UTIL_SEQ_Run+0x1f0>)
 8010392:	681b      	ldr	r3, [r3, #0]
 8010394:	4a30      	ldr	r2, [pc, #192]	@ (8010458 <UTIL_SEQ_Run+0x1f4>)
 8010396:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801039a:	4798      	blx	r3

    local_taskset = TaskSet;
 801039c:	4b28      	ldr	r3, [pc, #160]	@ (8010440 <UTIL_SEQ_Run+0x1dc>)
 801039e:	681b      	ldr	r3, [r3, #0]
 80103a0:	63bb      	str	r3, [r7, #56]	@ 0x38
    local_evtset = EvtSet;
 80103a2:	4b28      	ldr	r3, [pc, #160]	@ (8010444 <UTIL_SEQ_Run+0x1e0>)
 80103a4:	681b      	ldr	r3, [r3, #0]
 80103a6:	637b      	str	r3, [r7, #52]	@ 0x34
    local_taskmask = TaskMask;
 80103a8:	4b27      	ldr	r3, [pc, #156]	@ (8010448 <UTIL_SEQ_Run+0x1e4>)
 80103aa:	681b      	ldr	r3, [r3, #0]
 80103ac:	633b      	str	r3, [r7, #48]	@ 0x30
    local_evtwaited = EvtWaited;
 80103ae:	4b27      	ldr	r3, [pc, #156]	@ (801044c <UTIL_SEQ_Run+0x1e8>)
 80103b0:	681b      	ldr	r3, [r3, #0]
 80103b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 80103b4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80103b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80103b8:	401a      	ands	r2, r3
 80103ba:	4b20      	ldr	r3, [pc, #128]	@ (801043c <UTIL_SEQ_Run+0x1d8>)
 80103bc:	681b      	ldr	r3, [r3, #0]
 80103be:	4013      	ands	r3, r2
 80103c0:	2b00      	cmp	r3, #0
 80103c2:	d005      	beq.n	80103d0 <UTIL_SEQ_Run+0x16c>
 80103c4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80103c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80103c8:	4013      	ands	r3, r2
 80103ca:	2b00      	cmp	r3, #0
 80103cc:	f43f af64 	beq.w	8010298 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 80103d0:	4b20      	ldr	r3, [pc, #128]	@ (8010454 <UTIL_SEQ_Run+0x1f0>)
 80103d2:	f04f 32ff 	mov.w	r2, #4294967295
 80103d6:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 80103d8:	f000 f938 	bl	801064c <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80103dc:	f3ef 8310 	mrs	r3, PRIMASK
 80103e0:	613b      	str	r3, [r7, #16]
  return(result);
 80103e2:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 80103e4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 80103e6:	b672      	cpsid	i
}
 80103e8:	bf00      	nop
  local_taskset = TaskSet;
 80103ea:	4b15      	ldr	r3, [pc, #84]	@ (8010440 <UTIL_SEQ_Run+0x1dc>)
 80103ec:	681b      	ldr	r3, [r3, #0]
 80103ee:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 80103f0:	4b14      	ldr	r3, [pc, #80]	@ (8010444 <UTIL_SEQ_Run+0x1e0>)
 80103f2:	681b      	ldr	r3, [r3, #0]
 80103f4:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 80103f6:	4b14      	ldr	r3, [pc, #80]	@ (8010448 <UTIL_SEQ_Run+0x1e4>)
 80103f8:	681b      	ldr	r3, [r3, #0]
 80103fa:	633b      	str	r3, [r7, #48]	@ 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 80103fc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80103fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010400:	401a      	ands	r2, r3
 8010402:	4b0e      	ldr	r3, [pc, #56]	@ (801043c <UTIL_SEQ_Run+0x1d8>)
 8010404:	681b      	ldr	r3, [r3, #0]
 8010406:	4013      	ands	r3, r2
 8010408:	2b00      	cmp	r3, #0
 801040a:	d107      	bne.n	801041c <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 801040c:	4b0f      	ldr	r3, [pc, #60]	@ (801044c <UTIL_SEQ_Run+0x1e8>)
 801040e:	681a      	ldr	r2, [r3, #0]
 8010410:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010412:	4013      	ands	r3, r2
 8010414:	2b00      	cmp	r3, #0
 8010416:	d101      	bne.n	801041c <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 8010418:	f7f0 fe02 	bl	8001020 <UTIL_SEQ_Idle>
 801041c:	69fb      	ldr	r3, [r7, #28]
 801041e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010420:	68fb      	ldr	r3, [r7, #12]
 8010422:	f383 8810 	msr	PRIMASK, r3
}
 8010426:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 8010428:	f000 f917 	bl	801065a <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 801042c:	4a03      	ldr	r2, [pc, #12]	@ (801043c <UTIL_SEQ_Run+0x1d8>)
 801042e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010430:	6013      	str	r3, [r2, #0]

  return;
 8010432:	bf00      	nop
}
 8010434:	3740      	adds	r7, #64	@ 0x40
 8010436:	46bd      	mov	sp, r7
 8010438:	bd80      	pop	{r7, pc}
 801043a:	bf00      	nop
 801043c:	2000006c 	.word	0x2000006c
 8010440:	20002ca0 	.word	0x20002ca0
 8010444:	20002ca4 	.word	0x20002ca4
 8010448:	20000068 	.word	0x20000068
 801044c:	20002ca8 	.word	0x20002ca8
 8010450:	20002d30 	.word	0x20002d30
 8010454:	20002cac 	.word	0x20002cac
 8010458:	20002cb0 	.word	0x20002cb0

0801045c <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 801045c:	b580      	push	{r7, lr}
 801045e:	b088      	sub	sp, #32
 8010460:	af00      	add	r7, sp, #0
 8010462:	60f8      	str	r0, [r7, #12]
 8010464:	60b9      	str	r1, [r7, #8]
 8010466:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010468:	f3ef 8310 	mrs	r3, PRIMASK
 801046c:	617b      	str	r3, [r7, #20]
  return(result);
 801046e:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 8010470:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8010472:	b672      	cpsid	i
}
 8010474:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 8010476:	68f8      	ldr	r0, [r7, #12]
 8010478:	f000 f8f6 	bl	8010668 <SEQ_BitPosition>
 801047c:	4603      	mov	r3, r0
 801047e:	4619      	mov	r1, r3
 8010480:	4a06      	ldr	r2, [pc, #24]	@ (801049c <UTIL_SEQ_RegTask+0x40>)
 8010482:	687b      	ldr	r3, [r7, #4]
 8010484:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8010488:	69fb      	ldr	r3, [r7, #28]
 801048a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801048c:	69bb      	ldr	r3, [r7, #24]
 801048e:	f383 8810 	msr	PRIMASK, r3
}
 8010492:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 8010494:	bf00      	nop
}
 8010496:	3720      	adds	r7, #32
 8010498:	46bd      	mov	sp, r7
 801049a:	bd80      	pop	{r7, pc}
 801049c:	20002cb0 	.word	0x20002cb0

080104a0 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 80104a0:	b480      	push	{r7}
 80104a2:	b087      	sub	sp, #28
 80104a4:	af00      	add	r7, sp, #0
 80104a6:	6078      	str	r0, [r7, #4]
 80104a8:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80104aa:	f3ef 8310 	mrs	r3, PRIMASK
 80104ae:	60fb      	str	r3, [r7, #12]
  return(result);
 80104b0:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80104b2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80104b4:	b672      	cpsid	i
}
 80104b6:	bf00      	nop

  TaskSet |= TaskId_bm;
 80104b8:	4b0d      	ldr	r3, [pc, #52]	@ (80104f0 <UTIL_SEQ_SetTask+0x50>)
 80104ba:	681a      	ldr	r2, [r3, #0]
 80104bc:	687b      	ldr	r3, [r7, #4]
 80104be:	4313      	orrs	r3, r2
 80104c0:	4a0b      	ldr	r2, [pc, #44]	@ (80104f0 <UTIL_SEQ_SetTask+0x50>)
 80104c2:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 80104c4:	4a0b      	ldr	r2, [pc, #44]	@ (80104f4 <UTIL_SEQ_SetTask+0x54>)
 80104c6:	683b      	ldr	r3, [r7, #0]
 80104c8:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80104cc:	687b      	ldr	r3, [r7, #4]
 80104ce:	431a      	orrs	r2, r3
 80104d0:	4908      	ldr	r1, [pc, #32]	@ (80104f4 <UTIL_SEQ_SetTask+0x54>)
 80104d2:	683b      	ldr	r3, [r7, #0]
 80104d4:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 80104d8:	697b      	ldr	r3, [r7, #20]
 80104da:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80104dc:	693b      	ldr	r3, [r7, #16]
 80104de:	f383 8810 	msr	PRIMASK, r3
}
 80104e2:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 80104e4:	bf00      	nop
}
 80104e6:	371c      	adds	r7, #28
 80104e8:	46bd      	mov	sp, r7
 80104ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104ee:	4770      	bx	lr
 80104f0:	20002ca0 	.word	0x20002ca0
 80104f4:	20002d30 	.word	0x20002d30

080104f8 <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 80104f8:	b480      	push	{r7}
 80104fa:	b087      	sub	sp, #28
 80104fc:	af00      	add	r7, sp, #0
 80104fe:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010500:	f3ef 8310 	mrs	r3, PRIMASK
 8010504:	60fb      	str	r3, [r7, #12]
  return(result);
 8010506:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8010508:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801050a:	b672      	cpsid	i
}
 801050c:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 801050e:	687b      	ldr	r3, [r7, #4]
 8010510:	43da      	mvns	r2, r3
 8010512:	4b08      	ldr	r3, [pc, #32]	@ (8010534 <UTIL_SEQ_PauseTask+0x3c>)
 8010514:	681b      	ldr	r3, [r3, #0]
 8010516:	4013      	ands	r3, r2
 8010518:	4a06      	ldr	r2, [pc, #24]	@ (8010534 <UTIL_SEQ_PauseTask+0x3c>)
 801051a:	6013      	str	r3, [r2, #0]
 801051c:	697b      	ldr	r3, [r7, #20]
 801051e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010520:	693b      	ldr	r3, [r7, #16]
 8010522:	f383 8810 	msr	PRIMASK, r3
}
 8010526:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8010528:	bf00      	nop
}
 801052a:	371c      	adds	r7, #28
 801052c:	46bd      	mov	sp, r7
 801052e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010532:	4770      	bx	lr
 8010534:	20000068 	.word	0x20000068

08010538 <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 8010538:	b480      	push	{r7}
 801053a:	b087      	sub	sp, #28
 801053c:	af00      	add	r7, sp, #0
 801053e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010540:	f3ef 8310 	mrs	r3, PRIMASK
 8010544:	60fb      	str	r3, [r7, #12]
  return(result);
 8010546:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8010548:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801054a:	b672      	cpsid	i
}
 801054c:	bf00      	nop

  TaskMask |= TaskId_bm;
 801054e:	4b09      	ldr	r3, [pc, #36]	@ (8010574 <UTIL_SEQ_ResumeTask+0x3c>)
 8010550:	681a      	ldr	r2, [r3, #0]
 8010552:	687b      	ldr	r3, [r7, #4]
 8010554:	4313      	orrs	r3, r2
 8010556:	4a07      	ldr	r2, [pc, #28]	@ (8010574 <UTIL_SEQ_ResumeTask+0x3c>)
 8010558:	6013      	str	r3, [r2, #0]
 801055a:	697b      	ldr	r3, [r7, #20]
 801055c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801055e:	693b      	ldr	r3, [r7, #16]
 8010560:	f383 8810 	msr	PRIMASK, r3
}
 8010564:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8010566:	bf00      	nop
}
 8010568:	371c      	adds	r7, #28
 801056a:	46bd      	mov	sp, r7
 801056c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010570:	4770      	bx	lr
 8010572:	bf00      	nop
 8010574:	20000068 	.word	0x20000068

08010578 <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 8010578:	b480      	push	{r7}
 801057a:	b087      	sub	sp, #28
 801057c:	af00      	add	r7, sp, #0
 801057e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010580:	f3ef 8310 	mrs	r3, PRIMASK
 8010584:	60fb      	str	r3, [r7, #12]
  return(result);
 8010586:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8010588:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801058a:	b672      	cpsid	i
}
 801058c:	bf00      	nop

  EvtSet |= EvtId_bm;
 801058e:	4b09      	ldr	r3, [pc, #36]	@ (80105b4 <UTIL_SEQ_SetEvt+0x3c>)
 8010590:	681a      	ldr	r2, [r3, #0]
 8010592:	687b      	ldr	r3, [r7, #4]
 8010594:	4313      	orrs	r3, r2
 8010596:	4a07      	ldr	r2, [pc, #28]	@ (80105b4 <UTIL_SEQ_SetEvt+0x3c>)
 8010598:	6013      	str	r3, [r2, #0]
 801059a:	697b      	ldr	r3, [r7, #20]
 801059c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801059e:	693b      	ldr	r3, [r7, #16]
 80105a0:	f383 8810 	msr	PRIMASK, r3
}
 80105a4:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 80105a6:	bf00      	nop
}
 80105a8:	371c      	adds	r7, #28
 80105aa:	46bd      	mov	sp, r7
 80105ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105b0:	4770      	bx	lr
 80105b2:	bf00      	nop
 80105b4:	20002ca4 	.word	0x20002ca4

080105b8 <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 80105b8:	b580      	push	{r7, lr}
 80105ba:	b088      	sub	sp, #32
 80105bc:	af00      	add	r7, sp, #0
 80105be:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 80105c0:	4b1f      	ldr	r3, [pc, #124]	@ (8010640 <UTIL_SEQ_WaitEvt+0x88>)
 80105c2:	681b      	ldr	r3, [r3, #0]
 80105c4:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 80105c6:	4b1e      	ldr	r3, [pc, #120]	@ (8010640 <UTIL_SEQ_WaitEvt+0x88>)
 80105c8:	681b      	ldr	r3, [r3, #0]
 80105ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80105ce:	d102      	bne.n	80105d6 <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0u;
 80105d0:	2300      	movs	r3, #0
 80105d2:	61fb      	str	r3, [r7, #28]
 80105d4:	e005      	b.n	80105e2 <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
 80105d6:	4b1a      	ldr	r3, [pc, #104]	@ (8010640 <UTIL_SEQ_WaitEvt+0x88>)
 80105d8:	681b      	ldr	r3, [r3, #0]
 80105da:	2201      	movs	r2, #1
 80105dc:	fa02 f303 	lsl.w	r3, r2, r3
 80105e0:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 80105e2:	4b18      	ldr	r3, [pc, #96]	@ (8010644 <UTIL_SEQ_WaitEvt+0x8c>)
 80105e4:	681b      	ldr	r3, [r3, #0]
 80105e6:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 80105e8:	4a16      	ldr	r2, [pc, #88]	@ (8010644 <UTIL_SEQ_WaitEvt+0x8c>)
 80105ea:	687b      	ldr	r3, [r7, #4]
 80105ec:	6013      	str	r3, [r2, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
 80105ee:	e003      	b.n	80105f8 <UTIL_SEQ_WaitEvt+0x40>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
 80105f0:	6879      	ldr	r1, [r7, #4]
 80105f2:	69f8      	ldr	r0, [r7, #28]
 80105f4:	f7f0 fd1b 	bl	800102e <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
 80105f8:	4b13      	ldr	r3, [pc, #76]	@ (8010648 <UTIL_SEQ_WaitEvt+0x90>)
 80105fa:	681a      	ldr	r2, [r3, #0]
 80105fc:	687b      	ldr	r3, [r7, #4]
 80105fe:	4013      	ands	r3, r2
 8010600:	2b00      	cmp	r3, #0
 8010602:	d0f5      	beq.n	80105f0 <UTIL_SEQ_WaitEvt+0x38>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 8010604:	4a0e      	ldr	r2, [pc, #56]	@ (8010640 <UTIL_SEQ_WaitEvt+0x88>)
 8010606:	69bb      	ldr	r3, [r7, #24]
 8010608:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801060a:	f3ef 8310 	mrs	r3, PRIMASK
 801060e:	60bb      	str	r3, [r7, #8]
  return(result);
 8010610:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8010612:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8010614:	b672      	cpsid	i
}
 8010616:	bf00      	nop

  EvtSet &= (~EvtId_bm);
 8010618:	687b      	ldr	r3, [r7, #4]
 801061a:	43da      	mvns	r2, r3
 801061c:	4b0a      	ldr	r3, [pc, #40]	@ (8010648 <UTIL_SEQ_WaitEvt+0x90>)
 801061e:	681b      	ldr	r3, [r3, #0]
 8010620:	4013      	ands	r3, r2
 8010622:	4a09      	ldr	r2, [pc, #36]	@ (8010648 <UTIL_SEQ_WaitEvt+0x90>)
 8010624:	6013      	str	r3, [r2, #0]
 8010626:	693b      	ldr	r3, [r7, #16]
 8010628:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801062a:	68fb      	ldr	r3, [r7, #12]
 801062c:	f383 8810 	msr	PRIMASK, r3
}
 8010630:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 8010632:	4a04      	ldr	r2, [pc, #16]	@ (8010644 <UTIL_SEQ_WaitEvt+0x8c>)
 8010634:	697b      	ldr	r3, [r7, #20]
 8010636:	6013      	str	r3, [r2, #0]
  return;
 8010638:	bf00      	nop
}
 801063a:	3720      	adds	r7, #32
 801063c:	46bd      	mov	sp, r7
 801063e:	bd80      	pop	{r7, pc}
 8010640:	20002cac 	.word	0x20002cac
 8010644:	20002ca8 	.word	0x20002ca8
 8010648:	20002ca4 	.word	0x20002ca4

0801064c <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 801064c:	b480      	push	{r7}
 801064e:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 8010650:	bf00      	nop
}
 8010652:	46bd      	mov	sp, r7
 8010654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010658:	4770      	bx	lr

0801065a <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 801065a:	b480      	push	{r7}
 801065c:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 801065e:	bf00      	nop
}
 8010660:	46bd      	mov	sp, r7
 8010662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010666:	4770      	bx	lr

08010668 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 8010668:	b480      	push	{r7}
 801066a:	b085      	sub	sp, #20
 801066c:	af00      	add	r7, sp, #0
 801066e:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 8010670:	2300      	movs	r3, #0
 8010672:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 8010674:	687b      	ldr	r3, [r7, #4]
 8010676:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 8010678:	68bb      	ldr	r3, [r7, #8]
 801067a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801067e:	d204      	bcs.n	801068a <SEQ_BitPosition+0x22>
 8010680:	2310      	movs	r3, #16
 8010682:	73fb      	strb	r3, [r7, #15]
 8010684:	68bb      	ldr	r3, [r7, #8]
 8010686:	041b      	lsls	r3, r3, #16
 8010688:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 801068a:	68bb      	ldr	r3, [r7, #8]
 801068c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8010690:	d205      	bcs.n	801069e <SEQ_BitPosition+0x36>
 8010692:	7bfb      	ldrb	r3, [r7, #15]
 8010694:	3308      	adds	r3, #8
 8010696:	73fb      	strb	r3, [r7, #15]
 8010698:	68bb      	ldr	r3, [r7, #8]
 801069a:	021b      	lsls	r3, r3, #8
 801069c:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 801069e:	68bb      	ldr	r3, [r7, #8]
 80106a0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80106a4:	d205      	bcs.n	80106b2 <SEQ_BitPosition+0x4a>
 80106a6:	7bfb      	ldrb	r3, [r7, #15]
 80106a8:	3304      	adds	r3, #4
 80106aa:	73fb      	strb	r3, [r7, #15]
 80106ac:	68bb      	ldr	r3, [r7, #8]
 80106ae:	011b      	lsls	r3, r3, #4
 80106b0:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 80106b2:	68bb      	ldr	r3, [r7, #8]
 80106b4:	0f1b      	lsrs	r3, r3, #28
 80106b6:	4a07      	ldr	r2, [pc, #28]	@ (80106d4 <SEQ_BitPosition+0x6c>)
 80106b8:	5cd2      	ldrb	r2, [r2, r3]
 80106ba:	7bfb      	ldrb	r3, [r7, #15]
 80106bc:	4413      	add	r3, r2
 80106be:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 80106c0:	7bfb      	ldrb	r3, [r7, #15]
 80106c2:	f1c3 031f 	rsb	r3, r3, #31
 80106c6:	b2db      	uxtb	r3, r3
}
 80106c8:	4618      	mov	r0, r3
 80106ca:	3714      	adds	r7, #20
 80106cc:	46bd      	mov	sp, r7
 80106ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106d2:	4770      	bx	lr
 80106d4:	08012684 	.word	0x08012684

080106d8 <random>:
 80106d8:	4b16      	ldr	r3, [pc, #88]	@ (8010734 <random+0x5c>)
 80106da:	b510      	push	{r4, lr}
 80106dc:	681c      	ldr	r4, [r3, #0]
 80106de:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80106e0:	b9b3      	cbnz	r3, 8010710 <random+0x38>
 80106e2:	2018      	movs	r0, #24
 80106e4:	f000 fa2e 	bl	8010b44 <malloc>
 80106e8:	4602      	mov	r2, r0
 80106ea:	6320      	str	r0, [r4, #48]	@ 0x30
 80106ec:	b920      	cbnz	r0, 80106f8 <random+0x20>
 80106ee:	4b12      	ldr	r3, [pc, #72]	@ (8010738 <random+0x60>)
 80106f0:	4812      	ldr	r0, [pc, #72]	@ (801073c <random+0x64>)
 80106f2:	214c      	movs	r1, #76	@ 0x4c
 80106f4:	f000 f9be 	bl	8010a74 <__assert_func>
 80106f8:	4911      	ldr	r1, [pc, #68]	@ (8010740 <random+0x68>)
 80106fa:	4b12      	ldr	r3, [pc, #72]	@ (8010744 <random+0x6c>)
 80106fc:	e9c0 1300 	strd	r1, r3, [r0]
 8010700:	4b11      	ldr	r3, [pc, #68]	@ (8010748 <random+0x70>)
 8010702:	6083      	str	r3, [r0, #8]
 8010704:	230b      	movs	r3, #11
 8010706:	8183      	strh	r3, [r0, #12]
 8010708:	2100      	movs	r1, #0
 801070a:	2001      	movs	r0, #1
 801070c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8010710:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8010712:	480e      	ldr	r0, [pc, #56]	@ (801074c <random+0x74>)
 8010714:	690b      	ldr	r3, [r1, #16]
 8010716:	694c      	ldr	r4, [r1, #20]
 8010718:	4a0d      	ldr	r2, [pc, #52]	@ (8010750 <random+0x78>)
 801071a:	4358      	muls	r0, r3
 801071c:	fb02 0004 	mla	r0, r2, r4, r0
 8010720:	fba3 3202 	umull	r3, r2, r3, r2
 8010724:	3301      	adds	r3, #1
 8010726:	eb40 0002 	adc.w	r0, r0, r2
 801072a:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801072e:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8010732:	bd10      	pop	{r4, pc}
 8010734:	2000007c 	.word	0x2000007c
 8010738:	08012694 	.word	0x08012694
 801073c:	080126ab 	.word	0x080126ab
 8010740:	abcd330e 	.word	0xabcd330e
 8010744:	e66d1234 	.word	0xe66d1234
 8010748:	0005deec 	.word	0x0005deec
 801074c:	5851f42d 	.word	0x5851f42d
 8010750:	4c957f2d 	.word	0x4c957f2d

08010754 <std>:
 8010754:	2300      	movs	r3, #0
 8010756:	b510      	push	{r4, lr}
 8010758:	4604      	mov	r4, r0
 801075a:	e9c0 3300 	strd	r3, r3, [r0]
 801075e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010762:	6083      	str	r3, [r0, #8]
 8010764:	8181      	strh	r1, [r0, #12]
 8010766:	6643      	str	r3, [r0, #100]	@ 0x64
 8010768:	81c2      	strh	r2, [r0, #14]
 801076a:	6183      	str	r3, [r0, #24]
 801076c:	4619      	mov	r1, r3
 801076e:	2208      	movs	r2, #8
 8010770:	305c      	adds	r0, #92	@ 0x5c
 8010772:	f000 f8f4 	bl	801095e <memset>
 8010776:	4b0d      	ldr	r3, [pc, #52]	@ (80107ac <std+0x58>)
 8010778:	6263      	str	r3, [r4, #36]	@ 0x24
 801077a:	4b0d      	ldr	r3, [pc, #52]	@ (80107b0 <std+0x5c>)
 801077c:	62a3      	str	r3, [r4, #40]	@ 0x28
 801077e:	4b0d      	ldr	r3, [pc, #52]	@ (80107b4 <std+0x60>)
 8010780:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8010782:	4b0d      	ldr	r3, [pc, #52]	@ (80107b8 <std+0x64>)
 8010784:	6323      	str	r3, [r4, #48]	@ 0x30
 8010786:	4b0d      	ldr	r3, [pc, #52]	@ (80107bc <std+0x68>)
 8010788:	6224      	str	r4, [r4, #32]
 801078a:	429c      	cmp	r4, r3
 801078c:	d006      	beq.n	801079c <std+0x48>
 801078e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8010792:	4294      	cmp	r4, r2
 8010794:	d002      	beq.n	801079c <std+0x48>
 8010796:	33d0      	adds	r3, #208	@ 0xd0
 8010798:	429c      	cmp	r4, r3
 801079a:	d105      	bne.n	80107a8 <std+0x54>
 801079c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80107a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80107a4:	f000 b954 	b.w	8010a50 <__retarget_lock_init_recursive>
 80107a8:	bd10      	pop	{r4, pc}
 80107aa:	bf00      	nop
 80107ac:	080108d9 	.word	0x080108d9
 80107b0:	080108fb 	.word	0x080108fb
 80107b4:	08010933 	.word	0x08010933
 80107b8:	08010957 	.word	0x08010957
 80107bc:	20002d40 	.word	0x20002d40

080107c0 <stdio_exit_handler>:
 80107c0:	4a02      	ldr	r2, [pc, #8]	@ (80107cc <stdio_exit_handler+0xc>)
 80107c2:	4903      	ldr	r1, [pc, #12]	@ (80107d0 <stdio_exit_handler+0x10>)
 80107c4:	4803      	ldr	r0, [pc, #12]	@ (80107d4 <stdio_exit_handler+0x14>)
 80107c6:	f000 b869 	b.w	801089c <_fwalk_sglue>
 80107ca:	bf00      	nop
 80107cc:	20000070 	.word	0x20000070
 80107d0:	08011359 	.word	0x08011359
 80107d4:	20000080 	.word	0x20000080

080107d8 <cleanup_stdio>:
 80107d8:	6841      	ldr	r1, [r0, #4]
 80107da:	4b0c      	ldr	r3, [pc, #48]	@ (801080c <cleanup_stdio+0x34>)
 80107dc:	4299      	cmp	r1, r3
 80107de:	b510      	push	{r4, lr}
 80107e0:	4604      	mov	r4, r0
 80107e2:	d001      	beq.n	80107e8 <cleanup_stdio+0x10>
 80107e4:	f000 fdb8 	bl	8011358 <_fflush_r>
 80107e8:	68a1      	ldr	r1, [r4, #8]
 80107ea:	4b09      	ldr	r3, [pc, #36]	@ (8010810 <cleanup_stdio+0x38>)
 80107ec:	4299      	cmp	r1, r3
 80107ee:	d002      	beq.n	80107f6 <cleanup_stdio+0x1e>
 80107f0:	4620      	mov	r0, r4
 80107f2:	f000 fdb1 	bl	8011358 <_fflush_r>
 80107f6:	68e1      	ldr	r1, [r4, #12]
 80107f8:	4b06      	ldr	r3, [pc, #24]	@ (8010814 <cleanup_stdio+0x3c>)
 80107fa:	4299      	cmp	r1, r3
 80107fc:	d004      	beq.n	8010808 <cleanup_stdio+0x30>
 80107fe:	4620      	mov	r0, r4
 8010800:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010804:	f000 bda8 	b.w	8011358 <_fflush_r>
 8010808:	bd10      	pop	{r4, pc}
 801080a:	bf00      	nop
 801080c:	20002d40 	.word	0x20002d40
 8010810:	20002da8 	.word	0x20002da8
 8010814:	20002e10 	.word	0x20002e10

08010818 <global_stdio_init.part.0>:
 8010818:	b510      	push	{r4, lr}
 801081a:	4b0b      	ldr	r3, [pc, #44]	@ (8010848 <global_stdio_init.part.0+0x30>)
 801081c:	4c0b      	ldr	r4, [pc, #44]	@ (801084c <global_stdio_init.part.0+0x34>)
 801081e:	4a0c      	ldr	r2, [pc, #48]	@ (8010850 <global_stdio_init.part.0+0x38>)
 8010820:	601a      	str	r2, [r3, #0]
 8010822:	4620      	mov	r0, r4
 8010824:	2200      	movs	r2, #0
 8010826:	2104      	movs	r1, #4
 8010828:	f7ff ff94 	bl	8010754 <std>
 801082c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8010830:	2201      	movs	r2, #1
 8010832:	2109      	movs	r1, #9
 8010834:	f7ff ff8e 	bl	8010754 <std>
 8010838:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801083c:	2202      	movs	r2, #2
 801083e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010842:	2112      	movs	r1, #18
 8010844:	f7ff bf86 	b.w	8010754 <std>
 8010848:	20002e78 	.word	0x20002e78
 801084c:	20002d40 	.word	0x20002d40
 8010850:	080107c1 	.word	0x080107c1

08010854 <__sfp_lock_acquire>:
 8010854:	4801      	ldr	r0, [pc, #4]	@ (801085c <__sfp_lock_acquire+0x8>)
 8010856:	f000 b8fc 	b.w	8010a52 <__retarget_lock_acquire_recursive>
 801085a:	bf00      	nop
 801085c:	20002e81 	.word	0x20002e81

08010860 <__sfp_lock_release>:
 8010860:	4801      	ldr	r0, [pc, #4]	@ (8010868 <__sfp_lock_release+0x8>)
 8010862:	f000 b8f7 	b.w	8010a54 <__retarget_lock_release_recursive>
 8010866:	bf00      	nop
 8010868:	20002e81 	.word	0x20002e81

0801086c <__sinit>:
 801086c:	b510      	push	{r4, lr}
 801086e:	4604      	mov	r4, r0
 8010870:	f7ff fff0 	bl	8010854 <__sfp_lock_acquire>
 8010874:	6a23      	ldr	r3, [r4, #32]
 8010876:	b11b      	cbz	r3, 8010880 <__sinit+0x14>
 8010878:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801087c:	f7ff bff0 	b.w	8010860 <__sfp_lock_release>
 8010880:	4b04      	ldr	r3, [pc, #16]	@ (8010894 <__sinit+0x28>)
 8010882:	6223      	str	r3, [r4, #32]
 8010884:	4b04      	ldr	r3, [pc, #16]	@ (8010898 <__sinit+0x2c>)
 8010886:	681b      	ldr	r3, [r3, #0]
 8010888:	2b00      	cmp	r3, #0
 801088a:	d1f5      	bne.n	8010878 <__sinit+0xc>
 801088c:	f7ff ffc4 	bl	8010818 <global_stdio_init.part.0>
 8010890:	e7f2      	b.n	8010878 <__sinit+0xc>
 8010892:	bf00      	nop
 8010894:	080107d9 	.word	0x080107d9
 8010898:	20002e78 	.word	0x20002e78

0801089c <_fwalk_sglue>:
 801089c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80108a0:	4607      	mov	r7, r0
 80108a2:	4688      	mov	r8, r1
 80108a4:	4614      	mov	r4, r2
 80108a6:	2600      	movs	r6, #0
 80108a8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80108ac:	f1b9 0901 	subs.w	r9, r9, #1
 80108b0:	d505      	bpl.n	80108be <_fwalk_sglue+0x22>
 80108b2:	6824      	ldr	r4, [r4, #0]
 80108b4:	2c00      	cmp	r4, #0
 80108b6:	d1f7      	bne.n	80108a8 <_fwalk_sglue+0xc>
 80108b8:	4630      	mov	r0, r6
 80108ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80108be:	89ab      	ldrh	r3, [r5, #12]
 80108c0:	2b01      	cmp	r3, #1
 80108c2:	d907      	bls.n	80108d4 <_fwalk_sglue+0x38>
 80108c4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80108c8:	3301      	adds	r3, #1
 80108ca:	d003      	beq.n	80108d4 <_fwalk_sglue+0x38>
 80108cc:	4629      	mov	r1, r5
 80108ce:	4638      	mov	r0, r7
 80108d0:	47c0      	blx	r8
 80108d2:	4306      	orrs	r6, r0
 80108d4:	3568      	adds	r5, #104	@ 0x68
 80108d6:	e7e9      	b.n	80108ac <_fwalk_sglue+0x10>

080108d8 <__sread>:
 80108d8:	b510      	push	{r4, lr}
 80108da:	460c      	mov	r4, r1
 80108dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80108e0:	f000 f868 	bl	80109b4 <_read_r>
 80108e4:	2800      	cmp	r0, #0
 80108e6:	bfab      	itete	ge
 80108e8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80108ea:	89a3      	ldrhlt	r3, [r4, #12]
 80108ec:	181b      	addge	r3, r3, r0
 80108ee:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80108f2:	bfac      	ite	ge
 80108f4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80108f6:	81a3      	strhlt	r3, [r4, #12]
 80108f8:	bd10      	pop	{r4, pc}

080108fa <__swrite>:
 80108fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80108fe:	461f      	mov	r7, r3
 8010900:	898b      	ldrh	r3, [r1, #12]
 8010902:	05db      	lsls	r3, r3, #23
 8010904:	4605      	mov	r5, r0
 8010906:	460c      	mov	r4, r1
 8010908:	4616      	mov	r6, r2
 801090a:	d505      	bpl.n	8010918 <__swrite+0x1e>
 801090c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010910:	2302      	movs	r3, #2
 8010912:	2200      	movs	r2, #0
 8010914:	f000 f83c 	bl	8010990 <_lseek_r>
 8010918:	89a3      	ldrh	r3, [r4, #12]
 801091a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801091e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8010922:	81a3      	strh	r3, [r4, #12]
 8010924:	4632      	mov	r2, r6
 8010926:	463b      	mov	r3, r7
 8010928:	4628      	mov	r0, r5
 801092a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801092e:	f000 b853 	b.w	80109d8 <_write_r>

08010932 <__sseek>:
 8010932:	b510      	push	{r4, lr}
 8010934:	460c      	mov	r4, r1
 8010936:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801093a:	f000 f829 	bl	8010990 <_lseek_r>
 801093e:	1c43      	adds	r3, r0, #1
 8010940:	89a3      	ldrh	r3, [r4, #12]
 8010942:	bf15      	itete	ne
 8010944:	6560      	strne	r0, [r4, #84]	@ 0x54
 8010946:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801094a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801094e:	81a3      	strheq	r3, [r4, #12]
 8010950:	bf18      	it	ne
 8010952:	81a3      	strhne	r3, [r4, #12]
 8010954:	bd10      	pop	{r4, pc}

08010956 <__sclose>:
 8010956:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801095a:	f000 b809 	b.w	8010970 <_close_r>

0801095e <memset>:
 801095e:	4402      	add	r2, r0
 8010960:	4603      	mov	r3, r0
 8010962:	4293      	cmp	r3, r2
 8010964:	d100      	bne.n	8010968 <memset+0xa>
 8010966:	4770      	bx	lr
 8010968:	f803 1b01 	strb.w	r1, [r3], #1
 801096c:	e7f9      	b.n	8010962 <memset+0x4>
	...

08010970 <_close_r>:
 8010970:	b538      	push	{r3, r4, r5, lr}
 8010972:	4d06      	ldr	r5, [pc, #24]	@ (801098c <_close_r+0x1c>)
 8010974:	2300      	movs	r3, #0
 8010976:	4604      	mov	r4, r0
 8010978:	4608      	mov	r0, r1
 801097a:	602b      	str	r3, [r5, #0]
 801097c:	f7f6 ff5d 	bl	800783a <_close>
 8010980:	1c43      	adds	r3, r0, #1
 8010982:	d102      	bne.n	801098a <_close_r+0x1a>
 8010984:	682b      	ldr	r3, [r5, #0]
 8010986:	b103      	cbz	r3, 801098a <_close_r+0x1a>
 8010988:	6023      	str	r3, [r4, #0]
 801098a:	bd38      	pop	{r3, r4, r5, pc}
 801098c:	20002e7c 	.word	0x20002e7c

08010990 <_lseek_r>:
 8010990:	b538      	push	{r3, r4, r5, lr}
 8010992:	4d07      	ldr	r5, [pc, #28]	@ (80109b0 <_lseek_r+0x20>)
 8010994:	4604      	mov	r4, r0
 8010996:	4608      	mov	r0, r1
 8010998:	4611      	mov	r1, r2
 801099a:	2200      	movs	r2, #0
 801099c:	602a      	str	r2, [r5, #0]
 801099e:	461a      	mov	r2, r3
 80109a0:	f7f6 ff72 	bl	8007888 <_lseek>
 80109a4:	1c43      	adds	r3, r0, #1
 80109a6:	d102      	bne.n	80109ae <_lseek_r+0x1e>
 80109a8:	682b      	ldr	r3, [r5, #0]
 80109aa:	b103      	cbz	r3, 80109ae <_lseek_r+0x1e>
 80109ac:	6023      	str	r3, [r4, #0]
 80109ae:	bd38      	pop	{r3, r4, r5, pc}
 80109b0:	20002e7c 	.word	0x20002e7c

080109b4 <_read_r>:
 80109b4:	b538      	push	{r3, r4, r5, lr}
 80109b6:	4d07      	ldr	r5, [pc, #28]	@ (80109d4 <_read_r+0x20>)
 80109b8:	4604      	mov	r4, r0
 80109ba:	4608      	mov	r0, r1
 80109bc:	4611      	mov	r1, r2
 80109be:	2200      	movs	r2, #0
 80109c0:	602a      	str	r2, [r5, #0]
 80109c2:	461a      	mov	r2, r3
 80109c4:	f7f6 ff00 	bl	80077c8 <_read>
 80109c8:	1c43      	adds	r3, r0, #1
 80109ca:	d102      	bne.n	80109d2 <_read_r+0x1e>
 80109cc:	682b      	ldr	r3, [r5, #0]
 80109ce:	b103      	cbz	r3, 80109d2 <_read_r+0x1e>
 80109d0:	6023      	str	r3, [r4, #0]
 80109d2:	bd38      	pop	{r3, r4, r5, pc}
 80109d4:	20002e7c 	.word	0x20002e7c

080109d8 <_write_r>:
 80109d8:	b538      	push	{r3, r4, r5, lr}
 80109da:	4d07      	ldr	r5, [pc, #28]	@ (80109f8 <_write_r+0x20>)
 80109dc:	4604      	mov	r4, r0
 80109de:	4608      	mov	r0, r1
 80109e0:	4611      	mov	r1, r2
 80109e2:	2200      	movs	r2, #0
 80109e4:	602a      	str	r2, [r5, #0]
 80109e6:	461a      	mov	r2, r3
 80109e8:	f7f6 ff0b 	bl	8007802 <_write>
 80109ec:	1c43      	adds	r3, r0, #1
 80109ee:	d102      	bne.n	80109f6 <_write_r+0x1e>
 80109f0:	682b      	ldr	r3, [r5, #0]
 80109f2:	b103      	cbz	r3, 80109f6 <_write_r+0x1e>
 80109f4:	6023      	str	r3, [r4, #0]
 80109f6:	bd38      	pop	{r3, r4, r5, pc}
 80109f8:	20002e7c 	.word	0x20002e7c

080109fc <__errno>:
 80109fc:	4b01      	ldr	r3, [pc, #4]	@ (8010a04 <__errno+0x8>)
 80109fe:	6818      	ldr	r0, [r3, #0]
 8010a00:	4770      	bx	lr
 8010a02:	bf00      	nop
 8010a04:	2000007c 	.word	0x2000007c

08010a08 <__libc_init_array>:
 8010a08:	b570      	push	{r4, r5, r6, lr}
 8010a0a:	4d0d      	ldr	r5, [pc, #52]	@ (8010a40 <__libc_init_array+0x38>)
 8010a0c:	4c0d      	ldr	r4, [pc, #52]	@ (8010a44 <__libc_init_array+0x3c>)
 8010a0e:	1b64      	subs	r4, r4, r5
 8010a10:	10a4      	asrs	r4, r4, #2
 8010a12:	2600      	movs	r6, #0
 8010a14:	42a6      	cmp	r6, r4
 8010a16:	d109      	bne.n	8010a2c <__libc_init_array+0x24>
 8010a18:	4d0b      	ldr	r5, [pc, #44]	@ (8010a48 <__libc_init_array+0x40>)
 8010a1a:	4c0c      	ldr	r4, [pc, #48]	@ (8010a4c <__libc_init_array+0x44>)
 8010a1c:	f001 fcf2 	bl	8012404 <_init>
 8010a20:	1b64      	subs	r4, r4, r5
 8010a22:	10a4      	asrs	r4, r4, #2
 8010a24:	2600      	movs	r6, #0
 8010a26:	42a6      	cmp	r6, r4
 8010a28:	d105      	bne.n	8010a36 <__libc_init_array+0x2e>
 8010a2a:	bd70      	pop	{r4, r5, r6, pc}
 8010a2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8010a30:	4798      	blx	r3
 8010a32:	3601      	adds	r6, #1
 8010a34:	e7ee      	b.n	8010a14 <__libc_init_array+0xc>
 8010a36:	f855 3b04 	ldr.w	r3, [r5], #4
 8010a3a:	4798      	blx	r3
 8010a3c:	3601      	adds	r6, #1
 8010a3e:	e7f2      	b.n	8010a26 <__libc_init_array+0x1e>
 8010a40:	080127cc 	.word	0x080127cc
 8010a44:	080127cc 	.word	0x080127cc
 8010a48:	080127cc 	.word	0x080127cc
 8010a4c:	080127d0 	.word	0x080127d0

08010a50 <__retarget_lock_init_recursive>:
 8010a50:	4770      	bx	lr

08010a52 <__retarget_lock_acquire_recursive>:
 8010a52:	4770      	bx	lr

08010a54 <__retarget_lock_release_recursive>:
 8010a54:	4770      	bx	lr

08010a56 <memcpy>:
 8010a56:	440a      	add	r2, r1
 8010a58:	4291      	cmp	r1, r2
 8010a5a:	f100 33ff 	add.w	r3, r0, #4294967295
 8010a5e:	d100      	bne.n	8010a62 <memcpy+0xc>
 8010a60:	4770      	bx	lr
 8010a62:	b510      	push	{r4, lr}
 8010a64:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010a68:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010a6c:	4291      	cmp	r1, r2
 8010a6e:	d1f9      	bne.n	8010a64 <memcpy+0xe>
 8010a70:	bd10      	pop	{r4, pc}
	...

08010a74 <__assert_func>:
 8010a74:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010a76:	4614      	mov	r4, r2
 8010a78:	461a      	mov	r2, r3
 8010a7a:	4b09      	ldr	r3, [pc, #36]	@ (8010aa0 <__assert_func+0x2c>)
 8010a7c:	681b      	ldr	r3, [r3, #0]
 8010a7e:	4605      	mov	r5, r0
 8010a80:	68d8      	ldr	r0, [r3, #12]
 8010a82:	b954      	cbnz	r4, 8010a9a <__assert_func+0x26>
 8010a84:	4b07      	ldr	r3, [pc, #28]	@ (8010aa4 <__assert_func+0x30>)
 8010a86:	461c      	mov	r4, r3
 8010a88:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010a8c:	9100      	str	r1, [sp, #0]
 8010a8e:	462b      	mov	r3, r5
 8010a90:	4905      	ldr	r1, [pc, #20]	@ (8010aa8 <__assert_func+0x34>)
 8010a92:	f000 fc89 	bl	80113a8 <fiprintf>
 8010a96:	f000 fd3d 	bl	8011514 <abort>
 8010a9a:	4b04      	ldr	r3, [pc, #16]	@ (8010aac <__assert_func+0x38>)
 8010a9c:	e7f4      	b.n	8010a88 <__assert_func+0x14>
 8010a9e:	bf00      	nop
 8010aa0:	2000007c 	.word	0x2000007c
 8010aa4:	08012740 	.word	0x08012740
 8010aa8:	08012712 	.word	0x08012712
 8010aac:	08012705 	.word	0x08012705

08010ab0 <_free_r>:
 8010ab0:	b538      	push	{r3, r4, r5, lr}
 8010ab2:	4605      	mov	r5, r0
 8010ab4:	2900      	cmp	r1, #0
 8010ab6:	d041      	beq.n	8010b3c <_free_r+0x8c>
 8010ab8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010abc:	1f0c      	subs	r4, r1, #4
 8010abe:	2b00      	cmp	r3, #0
 8010ac0:	bfb8      	it	lt
 8010ac2:	18e4      	addlt	r4, r4, r3
 8010ac4:	f000 f8e8 	bl	8010c98 <__malloc_lock>
 8010ac8:	4a1d      	ldr	r2, [pc, #116]	@ (8010b40 <_free_r+0x90>)
 8010aca:	6813      	ldr	r3, [r2, #0]
 8010acc:	b933      	cbnz	r3, 8010adc <_free_r+0x2c>
 8010ace:	6063      	str	r3, [r4, #4]
 8010ad0:	6014      	str	r4, [r2, #0]
 8010ad2:	4628      	mov	r0, r5
 8010ad4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010ad8:	f000 b8e4 	b.w	8010ca4 <__malloc_unlock>
 8010adc:	42a3      	cmp	r3, r4
 8010ade:	d908      	bls.n	8010af2 <_free_r+0x42>
 8010ae0:	6820      	ldr	r0, [r4, #0]
 8010ae2:	1821      	adds	r1, r4, r0
 8010ae4:	428b      	cmp	r3, r1
 8010ae6:	bf01      	itttt	eq
 8010ae8:	6819      	ldreq	r1, [r3, #0]
 8010aea:	685b      	ldreq	r3, [r3, #4]
 8010aec:	1809      	addeq	r1, r1, r0
 8010aee:	6021      	streq	r1, [r4, #0]
 8010af0:	e7ed      	b.n	8010ace <_free_r+0x1e>
 8010af2:	461a      	mov	r2, r3
 8010af4:	685b      	ldr	r3, [r3, #4]
 8010af6:	b10b      	cbz	r3, 8010afc <_free_r+0x4c>
 8010af8:	42a3      	cmp	r3, r4
 8010afa:	d9fa      	bls.n	8010af2 <_free_r+0x42>
 8010afc:	6811      	ldr	r1, [r2, #0]
 8010afe:	1850      	adds	r0, r2, r1
 8010b00:	42a0      	cmp	r0, r4
 8010b02:	d10b      	bne.n	8010b1c <_free_r+0x6c>
 8010b04:	6820      	ldr	r0, [r4, #0]
 8010b06:	4401      	add	r1, r0
 8010b08:	1850      	adds	r0, r2, r1
 8010b0a:	4283      	cmp	r3, r0
 8010b0c:	6011      	str	r1, [r2, #0]
 8010b0e:	d1e0      	bne.n	8010ad2 <_free_r+0x22>
 8010b10:	6818      	ldr	r0, [r3, #0]
 8010b12:	685b      	ldr	r3, [r3, #4]
 8010b14:	6053      	str	r3, [r2, #4]
 8010b16:	4408      	add	r0, r1
 8010b18:	6010      	str	r0, [r2, #0]
 8010b1a:	e7da      	b.n	8010ad2 <_free_r+0x22>
 8010b1c:	d902      	bls.n	8010b24 <_free_r+0x74>
 8010b1e:	230c      	movs	r3, #12
 8010b20:	602b      	str	r3, [r5, #0]
 8010b22:	e7d6      	b.n	8010ad2 <_free_r+0x22>
 8010b24:	6820      	ldr	r0, [r4, #0]
 8010b26:	1821      	adds	r1, r4, r0
 8010b28:	428b      	cmp	r3, r1
 8010b2a:	bf04      	itt	eq
 8010b2c:	6819      	ldreq	r1, [r3, #0]
 8010b2e:	685b      	ldreq	r3, [r3, #4]
 8010b30:	6063      	str	r3, [r4, #4]
 8010b32:	bf04      	itt	eq
 8010b34:	1809      	addeq	r1, r1, r0
 8010b36:	6021      	streq	r1, [r4, #0]
 8010b38:	6054      	str	r4, [r2, #4]
 8010b3a:	e7ca      	b.n	8010ad2 <_free_r+0x22>
 8010b3c:	bd38      	pop	{r3, r4, r5, pc}
 8010b3e:	bf00      	nop
 8010b40:	20002e88 	.word	0x20002e88

08010b44 <malloc>:
 8010b44:	4b02      	ldr	r3, [pc, #8]	@ (8010b50 <malloc+0xc>)
 8010b46:	4601      	mov	r1, r0
 8010b48:	6818      	ldr	r0, [r3, #0]
 8010b4a:	f000 b825 	b.w	8010b98 <_malloc_r>
 8010b4e:	bf00      	nop
 8010b50:	2000007c 	.word	0x2000007c

08010b54 <sbrk_aligned>:
 8010b54:	b570      	push	{r4, r5, r6, lr}
 8010b56:	4e0f      	ldr	r6, [pc, #60]	@ (8010b94 <sbrk_aligned+0x40>)
 8010b58:	460c      	mov	r4, r1
 8010b5a:	6831      	ldr	r1, [r6, #0]
 8010b5c:	4605      	mov	r5, r0
 8010b5e:	b911      	cbnz	r1, 8010b66 <sbrk_aligned+0x12>
 8010b60:	f000 fcc8 	bl	80114f4 <_sbrk_r>
 8010b64:	6030      	str	r0, [r6, #0]
 8010b66:	4621      	mov	r1, r4
 8010b68:	4628      	mov	r0, r5
 8010b6a:	f000 fcc3 	bl	80114f4 <_sbrk_r>
 8010b6e:	1c43      	adds	r3, r0, #1
 8010b70:	d103      	bne.n	8010b7a <sbrk_aligned+0x26>
 8010b72:	f04f 34ff 	mov.w	r4, #4294967295
 8010b76:	4620      	mov	r0, r4
 8010b78:	bd70      	pop	{r4, r5, r6, pc}
 8010b7a:	1cc4      	adds	r4, r0, #3
 8010b7c:	f024 0403 	bic.w	r4, r4, #3
 8010b80:	42a0      	cmp	r0, r4
 8010b82:	d0f8      	beq.n	8010b76 <sbrk_aligned+0x22>
 8010b84:	1a21      	subs	r1, r4, r0
 8010b86:	4628      	mov	r0, r5
 8010b88:	f000 fcb4 	bl	80114f4 <_sbrk_r>
 8010b8c:	3001      	adds	r0, #1
 8010b8e:	d1f2      	bne.n	8010b76 <sbrk_aligned+0x22>
 8010b90:	e7ef      	b.n	8010b72 <sbrk_aligned+0x1e>
 8010b92:	bf00      	nop
 8010b94:	20002e84 	.word	0x20002e84

08010b98 <_malloc_r>:
 8010b98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010b9c:	1ccd      	adds	r5, r1, #3
 8010b9e:	f025 0503 	bic.w	r5, r5, #3
 8010ba2:	3508      	adds	r5, #8
 8010ba4:	2d0c      	cmp	r5, #12
 8010ba6:	bf38      	it	cc
 8010ba8:	250c      	movcc	r5, #12
 8010baa:	2d00      	cmp	r5, #0
 8010bac:	4606      	mov	r6, r0
 8010bae:	db01      	blt.n	8010bb4 <_malloc_r+0x1c>
 8010bb0:	42a9      	cmp	r1, r5
 8010bb2:	d904      	bls.n	8010bbe <_malloc_r+0x26>
 8010bb4:	230c      	movs	r3, #12
 8010bb6:	6033      	str	r3, [r6, #0]
 8010bb8:	2000      	movs	r0, #0
 8010bba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010bbe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8010c94 <_malloc_r+0xfc>
 8010bc2:	f000 f869 	bl	8010c98 <__malloc_lock>
 8010bc6:	f8d8 3000 	ldr.w	r3, [r8]
 8010bca:	461c      	mov	r4, r3
 8010bcc:	bb44      	cbnz	r4, 8010c20 <_malloc_r+0x88>
 8010bce:	4629      	mov	r1, r5
 8010bd0:	4630      	mov	r0, r6
 8010bd2:	f7ff ffbf 	bl	8010b54 <sbrk_aligned>
 8010bd6:	1c43      	adds	r3, r0, #1
 8010bd8:	4604      	mov	r4, r0
 8010bda:	d158      	bne.n	8010c8e <_malloc_r+0xf6>
 8010bdc:	f8d8 4000 	ldr.w	r4, [r8]
 8010be0:	4627      	mov	r7, r4
 8010be2:	2f00      	cmp	r7, #0
 8010be4:	d143      	bne.n	8010c6e <_malloc_r+0xd6>
 8010be6:	2c00      	cmp	r4, #0
 8010be8:	d04b      	beq.n	8010c82 <_malloc_r+0xea>
 8010bea:	6823      	ldr	r3, [r4, #0]
 8010bec:	4639      	mov	r1, r7
 8010bee:	4630      	mov	r0, r6
 8010bf0:	eb04 0903 	add.w	r9, r4, r3
 8010bf4:	f000 fc7e 	bl	80114f4 <_sbrk_r>
 8010bf8:	4581      	cmp	r9, r0
 8010bfa:	d142      	bne.n	8010c82 <_malloc_r+0xea>
 8010bfc:	6821      	ldr	r1, [r4, #0]
 8010bfe:	1a6d      	subs	r5, r5, r1
 8010c00:	4629      	mov	r1, r5
 8010c02:	4630      	mov	r0, r6
 8010c04:	f7ff ffa6 	bl	8010b54 <sbrk_aligned>
 8010c08:	3001      	adds	r0, #1
 8010c0a:	d03a      	beq.n	8010c82 <_malloc_r+0xea>
 8010c0c:	6823      	ldr	r3, [r4, #0]
 8010c0e:	442b      	add	r3, r5
 8010c10:	6023      	str	r3, [r4, #0]
 8010c12:	f8d8 3000 	ldr.w	r3, [r8]
 8010c16:	685a      	ldr	r2, [r3, #4]
 8010c18:	bb62      	cbnz	r2, 8010c74 <_malloc_r+0xdc>
 8010c1a:	f8c8 7000 	str.w	r7, [r8]
 8010c1e:	e00f      	b.n	8010c40 <_malloc_r+0xa8>
 8010c20:	6822      	ldr	r2, [r4, #0]
 8010c22:	1b52      	subs	r2, r2, r5
 8010c24:	d420      	bmi.n	8010c68 <_malloc_r+0xd0>
 8010c26:	2a0b      	cmp	r2, #11
 8010c28:	d917      	bls.n	8010c5a <_malloc_r+0xc2>
 8010c2a:	1961      	adds	r1, r4, r5
 8010c2c:	42a3      	cmp	r3, r4
 8010c2e:	6025      	str	r5, [r4, #0]
 8010c30:	bf18      	it	ne
 8010c32:	6059      	strne	r1, [r3, #4]
 8010c34:	6863      	ldr	r3, [r4, #4]
 8010c36:	bf08      	it	eq
 8010c38:	f8c8 1000 	streq.w	r1, [r8]
 8010c3c:	5162      	str	r2, [r4, r5]
 8010c3e:	604b      	str	r3, [r1, #4]
 8010c40:	4630      	mov	r0, r6
 8010c42:	f000 f82f 	bl	8010ca4 <__malloc_unlock>
 8010c46:	f104 000b 	add.w	r0, r4, #11
 8010c4a:	1d23      	adds	r3, r4, #4
 8010c4c:	f020 0007 	bic.w	r0, r0, #7
 8010c50:	1ac2      	subs	r2, r0, r3
 8010c52:	bf1c      	itt	ne
 8010c54:	1a1b      	subne	r3, r3, r0
 8010c56:	50a3      	strne	r3, [r4, r2]
 8010c58:	e7af      	b.n	8010bba <_malloc_r+0x22>
 8010c5a:	6862      	ldr	r2, [r4, #4]
 8010c5c:	42a3      	cmp	r3, r4
 8010c5e:	bf0c      	ite	eq
 8010c60:	f8c8 2000 	streq.w	r2, [r8]
 8010c64:	605a      	strne	r2, [r3, #4]
 8010c66:	e7eb      	b.n	8010c40 <_malloc_r+0xa8>
 8010c68:	4623      	mov	r3, r4
 8010c6a:	6864      	ldr	r4, [r4, #4]
 8010c6c:	e7ae      	b.n	8010bcc <_malloc_r+0x34>
 8010c6e:	463c      	mov	r4, r7
 8010c70:	687f      	ldr	r7, [r7, #4]
 8010c72:	e7b6      	b.n	8010be2 <_malloc_r+0x4a>
 8010c74:	461a      	mov	r2, r3
 8010c76:	685b      	ldr	r3, [r3, #4]
 8010c78:	42a3      	cmp	r3, r4
 8010c7a:	d1fb      	bne.n	8010c74 <_malloc_r+0xdc>
 8010c7c:	2300      	movs	r3, #0
 8010c7e:	6053      	str	r3, [r2, #4]
 8010c80:	e7de      	b.n	8010c40 <_malloc_r+0xa8>
 8010c82:	230c      	movs	r3, #12
 8010c84:	6033      	str	r3, [r6, #0]
 8010c86:	4630      	mov	r0, r6
 8010c88:	f000 f80c 	bl	8010ca4 <__malloc_unlock>
 8010c8c:	e794      	b.n	8010bb8 <_malloc_r+0x20>
 8010c8e:	6005      	str	r5, [r0, #0]
 8010c90:	e7d6      	b.n	8010c40 <_malloc_r+0xa8>
 8010c92:	bf00      	nop
 8010c94:	20002e88 	.word	0x20002e88

08010c98 <__malloc_lock>:
 8010c98:	4801      	ldr	r0, [pc, #4]	@ (8010ca0 <__malloc_lock+0x8>)
 8010c9a:	f7ff beda 	b.w	8010a52 <__retarget_lock_acquire_recursive>
 8010c9e:	bf00      	nop
 8010ca0:	20002e80 	.word	0x20002e80

08010ca4 <__malloc_unlock>:
 8010ca4:	4801      	ldr	r0, [pc, #4]	@ (8010cac <__malloc_unlock+0x8>)
 8010ca6:	f7ff bed5 	b.w	8010a54 <__retarget_lock_release_recursive>
 8010caa:	bf00      	nop
 8010cac:	20002e80 	.word	0x20002e80

08010cb0 <__sfputc_r>:
 8010cb0:	6893      	ldr	r3, [r2, #8]
 8010cb2:	3b01      	subs	r3, #1
 8010cb4:	2b00      	cmp	r3, #0
 8010cb6:	b410      	push	{r4}
 8010cb8:	6093      	str	r3, [r2, #8]
 8010cba:	da08      	bge.n	8010cce <__sfputc_r+0x1e>
 8010cbc:	6994      	ldr	r4, [r2, #24]
 8010cbe:	42a3      	cmp	r3, r4
 8010cc0:	db01      	blt.n	8010cc6 <__sfputc_r+0x16>
 8010cc2:	290a      	cmp	r1, #10
 8010cc4:	d103      	bne.n	8010cce <__sfputc_r+0x1e>
 8010cc6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010cca:	f000 bb7f 	b.w	80113cc <__swbuf_r>
 8010cce:	6813      	ldr	r3, [r2, #0]
 8010cd0:	1c58      	adds	r0, r3, #1
 8010cd2:	6010      	str	r0, [r2, #0]
 8010cd4:	7019      	strb	r1, [r3, #0]
 8010cd6:	4608      	mov	r0, r1
 8010cd8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010cdc:	4770      	bx	lr

08010cde <__sfputs_r>:
 8010cde:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010ce0:	4606      	mov	r6, r0
 8010ce2:	460f      	mov	r7, r1
 8010ce4:	4614      	mov	r4, r2
 8010ce6:	18d5      	adds	r5, r2, r3
 8010ce8:	42ac      	cmp	r4, r5
 8010cea:	d101      	bne.n	8010cf0 <__sfputs_r+0x12>
 8010cec:	2000      	movs	r0, #0
 8010cee:	e007      	b.n	8010d00 <__sfputs_r+0x22>
 8010cf0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010cf4:	463a      	mov	r2, r7
 8010cf6:	4630      	mov	r0, r6
 8010cf8:	f7ff ffda 	bl	8010cb0 <__sfputc_r>
 8010cfc:	1c43      	adds	r3, r0, #1
 8010cfe:	d1f3      	bne.n	8010ce8 <__sfputs_r+0xa>
 8010d00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010d04 <_vfiprintf_r>:
 8010d04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d08:	460d      	mov	r5, r1
 8010d0a:	b09d      	sub	sp, #116	@ 0x74
 8010d0c:	4614      	mov	r4, r2
 8010d0e:	4698      	mov	r8, r3
 8010d10:	4606      	mov	r6, r0
 8010d12:	b118      	cbz	r0, 8010d1c <_vfiprintf_r+0x18>
 8010d14:	6a03      	ldr	r3, [r0, #32]
 8010d16:	b90b      	cbnz	r3, 8010d1c <_vfiprintf_r+0x18>
 8010d18:	f7ff fda8 	bl	801086c <__sinit>
 8010d1c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010d1e:	07d9      	lsls	r1, r3, #31
 8010d20:	d405      	bmi.n	8010d2e <_vfiprintf_r+0x2a>
 8010d22:	89ab      	ldrh	r3, [r5, #12]
 8010d24:	059a      	lsls	r2, r3, #22
 8010d26:	d402      	bmi.n	8010d2e <_vfiprintf_r+0x2a>
 8010d28:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010d2a:	f7ff fe92 	bl	8010a52 <__retarget_lock_acquire_recursive>
 8010d2e:	89ab      	ldrh	r3, [r5, #12]
 8010d30:	071b      	lsls	r3, r3, #28
 8010d32:	d501      	bpl.n	8010d38 <_vfiprintf_r+0x34>
 8010d34:	692b      	ldr	r3, [r5, #16]
 8010d36:	b99b      	cbnz	r3, 8010d60 <_vfiprintf_r+0x5c>
 8010d38:	4629      	mov	r1, r5
 8010d3a:	4630      	mov	r0, r6
 8010d3c:	f000 fb84 	bl	8011448 <__swsetup_r>
 8010d40:	b170      	cbz	r0, 8010d60 <_vfiprintf_r+0x5c>
 8010d42:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010d44:	07dc      	lsls	r4, r3, #31
 8010d46:	d504      	bpl.n	8010d52 <_vfiprintf_r+0x4e>
 8010d48:	f04f 30ff 	mov.w	r0, #4294967295
 8010d4c:	b01d      	add	sp, #116	@ 0x74
 8010d4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010d52:	89ab      	ldrh	r3, [r5, #12]
 8010d54:	0598      	lsls	r0, r3, #22
 8010d56:	d4f7      	bmi.n	8010d48 <_vfiprintf_r+0x44>
 8010d58:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010d5a:	f7ff fe7b 	bl	8010a54 <__retarget_lock_release_recursive>
 8010d5e:	e7f3      	b.n	8010d48 <_vfiprintf_r+0x44>
 8010d60:	2300      	movs	r3, #0
 8010d62:	9309      	str	r3, [sp, #36]	@ 0x24
 8010d64:	2320      	movs	r3, #32
 8010d66:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8010d6a:	f8cd 800c 	str.w	r8, [sp, #12]
 8010d6e:	2330      	movs	r3, #48	@ 0x30
 8010d70:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8010f20 <_vfiprintf_r+0x21c>
 8010d74:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8010d78:	f04f 0901 	mov.w	r9, #1
 8010d7c:	4623      	mov	r3, r4
 8010d7e:	469a      	mov	sl, r3
 8010d80:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010d84:	b10a      	cbz	r2, 8010d8a <_vfiprintf_r+0x86>
 8010d86:	2a25      	cmp	r2, #37	@ 0x25
 8010d88:	d1f9      	bne.n	8010d7e <_vfiprintf_r+0x7a>
 8010d8a:	ebba 0b04 	subs.w	fp, sl, r4
 8010d8e:	d00b      	beq.n	8010da8 <_vfiprintf_r+0xa4>
 8010d90:	465b      	mov	r3, fp
 8010d92:	4622      	mov	r2, r4
 8010d94:	4629      	mov	r1, r5
 8010d96:	4630      	mov	r0, r6
 8010d98:	f7ff ffa1 	bl	8010cde <__sfputs_r>
 8010d9c:	3001      	adds	r0, #1
 8010d9e:	f000 80a7 	beq.w	8010ef0 <_vfiprintf_r+0x1ec>
 8010da2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010da4:	445a      	add	r2, fp
 8010da6:	9209      	str	r2, [sp, #36]	@ 0x24
 8010da8:	f89a 3000 	ldrb.w	r3, [sl]
 8010dac:	2b00      	cmp	r3, #0
 8010dae:	f000 809f 	beq.w	8010ef0 <_vfiprintf_r+0x1ec>
 8010db2:	2300      	movs	r3, #0
 8010db4:	f04f 32ff 	mov.w	r2, #4294967295
 8010db8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010dbc:	f10a 0a01 	add.w	sl, sl, #1
 8010dc0:	9304      	str	r3, [sp, #16]
 8010dc2:	9307      	str	r3, [sp, #28]
 8010dc4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8010dc8:	931a      	str	r3, [sp, #104]	@ 0x68
 8010dca:	4654      	mov	r4, sl
 8010dcc:	2205      	movs	r2, #5
 8010dce:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010dd2:	4853      	ldr	r0, [pc, #332]	@ (8010f20 <_vfiprintf_r+0x21c>)
 8010dd4:	f7ef f9dc 	bl	8000190 <memchr>
 8010dd8:	9a04      	ldr	r2, [sp, #16]
 8010dda:	b9d8      	cbnz	r0, 8010e14 <_vfiprintf_r+0x110>
 8010ddc:	06d1      	lsls	r1, r2, #27
 8010dde:	bf44      	itt	mi
 8010de0:	2320      	movmi	r3, #32
 8010de2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010de6:	0713      	lsls	r3, r2, #28
 8010de8:	bf44      	itt	mi
 8010dea:	232b      	movmi	r3, #43	@ 0x2b
 8010dec:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010df0:	f89a 3000 	ldrb.w	r3, [sl]
 8010df4:	2b2a      	cmp	r3, #42	@ 0x2a
 8010df6:	d015      	beq.n	8010e24 <_vfiprintf_r+0x120>
 8010df8:	9a07      	ldr	r2, [sp, #28]
 8010dfa:	4654      	mov	r4, sl
 8010dfc:	2000      	movs	r0, #0
 8010dfe:	f04f 0c0a 	mov.w	ip, #10
 8010e02:	4621      	mov	r1, r4
 8010e04:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010e08:	3b30      	subs	r3, #48	@ 0x30
 8010e0a:	2b09      	cmp	r3, #9
 8010e0c:	d94b      	bls.n	8010ea6 <_vfiprintf_r+0x1a2>
 8010e0e:	b1b0      	cbz	r0, 8010e3e <_vfiprintf_r+0x13a>
 8010e10:	9207      	str	r2, [sp, #28]
 8010e12:	e014      	b.n	8010e3e <_vfiprintf_r+0x13a>
 8010e14:	eba0 0308 	sub.w	r3, r0, r8
 8010e18:	fa09 f303 	lsl.w	r3, r9, r3
 8010e1c:	4313      	orrs	r3, r2
 8010e1e:	9304      	str	r3, [sp, #16]
 8010e20:	46a2      	mov	sl, r4
 8010e22:	e7d2      	b.n	8010dca <_vfiprintf_r+0xc6>
 8010e24:	9b03      	ldr	r3, [sp, #12]
 8010e26:	1d19      	adds	r1, r3, #4
 8010e28:	681b      	ldr	r3, [r3, #0]
 8010e2a:	9103      	str	r1, [sp, #12]
 8010e2c:	2b00      	cmp	r3, #0
 8010e2e:	bfbb      	ittet	lt
 8010e30:	425b      	neglt	r3, r3
 8010e32:	f042 0202 	orrlt.w	r2, r2, #2
 8010e36:	9307      	strge	r3, [sp, #28]
 8010e38:	9307      	strlt	r3, [sp, #28]
 8010e3a:	bfb8      	it	lt
 8010e3c:	9204      	strlt	r2, [sp, #16]
 8010e3e:	7823      	ldrb	r3, [r4, #0]
 8010e40:	2b2e      	cmp	r3, #46	@ 0x2e
 8010e42:	d10a      	bne.n	8010e5a <_vfiprintf_r+0x156>
 8010e44:	7863      	ldrb	r3, [r4, #1]
 8010e46:	2b2a      	cmp	r3, #42	@ 0x2a
 8010e48:	d132      	bne.n	8010eb0 <_vfiprintf_r+0x1ac>
 8010e4a:	9b03      	ldr	r3, [sp, #12]
 8010e4c:	1d1a      	adds	r2, r3, #4
 8010e4e:	681b      	ldr	r3, [r3, #0]
 8010e50:	9203      	str	r2, [sp, #12]
 8010e52:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010e56:	3402      	adds	r4, #2
 8010e58:	9305      	str	r3, [sp, #20]
 8010e5a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8010f30 <_vfiprintf_r+0x22c>
 8010e5e:	7821      	ldrb	r1, [r4, #0]
 8010e60:	2203      	movs	r2, #3
 8010e62:	4650      	mov	r0, sl
 8010e64:	f7ef f994 	bl	8000190 <memchr>
 8010e68:	b138      	cbz	r0, 8010e7a <_vfiprintf_r+0x176>
 8010e6a:	9b04      	ldr	r3, [sp, #16]
 8010e6c:	eba0 000a 	sub.w	r0, r0, sl
 8010e70:	2240      	movs	r2, #64	@ 0x40
 8010e72:	4082      	lsls	r2, r0
 8010e74:	4313      	orrs	r3, r2
 8010e76:	3401      	adds	r4, #1
 8010e78:	9304      	str	r3, [sp, #16]
 8010e7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010e7e:	4829      	ldr	r0, [pc, #164]	@ (8010f24 <_vfiprintf_r+0x220>)
 8010e80:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8010e84:	2206      	movs	r2, #6
 8010e86:	f7ef f983 	bl	8000190 <memchr>
 8010e8a:	2800      	cmp	r0, #0
 8010e8c:	d03f      	beq.n	8010f0e <_vfiprintf_r+0x20a>
 8010e8e:	4b26      	ldr	r3, [pc, #152]	@ (8010f28 <_vfiprintf_r+0x224>)
 8010e90:	bb1b      	cbnz	r3, 8010eda <_vfiprintf_r+0x1d6>
 8010e92:	9b03      	ldr	r3, [sp, #12]
 8010e94:	3307      	adds	r3, #7
 8010e96:	f023 0307 	bic.w	r3, r3, #7
 8010e9a:	3308      	adds	r3, #8
 8010e9c:	9303      	str	r3, [sp, #12]
 8010e9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010ea0:	443b      	add	r3, r7
 8010ea2:	9309      	str	r3, [sp, #36]	@ 0x24
 8010ea4:	e76a      	b.n	8010d7c <_vfiprintf_r+0x78>
 8010ea6:	fb0c 3202 	mla	r2, ip, r2, r3
 8010eaa:	460c      	mov	r4, r1
 8010eac:	2001      	movs	r0, #1
 8010eae:	e7a8      	b.n	8010e02 <_vfiprintf_r+0xfe>
 8010eb0:	2300      	movs	r3, #0
 8010eb2:	3401      	adds	r4, #1
 8010eb4:	9305      	str	r3, [sp, #20]
 8010eb6:	4619      	mov	r1, r3
 8010eb8:	f04f 0c0a 	mov.w	ip, #10
 8010ebc:	4620      	mov	r0, r4
 8010ebe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010ec2:	3a30      	subs	r2, #48	@ 0x30
 8010ec4:	2a09      	cmp	r2, #9
 8010ec6:	d903      	bls.n	8010ed0 <_vfiprintf_r+0x1cc>
 8010ec8:	2b00      	cmp	r3, #0
 8010eca:	d0c6      	beq.n	8010e5a <_vfiprintf_r+0x156>
 8010ecc:	9105      	str	r1, [sp, #20]
 8010ece:	e7c4      	b.n	8010e5a <_vfiprintf_r+0x156>
 8010ed0:	fb0c 2101 	mla	r1, ip, r1, r2
 8010ed4:	4604      	mov	r4, r0
 8010ed6:	2301      	movs	r3, #1
 8010ed8:	e7f0      	b.n	8010ebc <_vfiprintf_r+0x1b8>
 8010eda:	ab03      	add	r3, sp, #12
 8010edc:	9300      	str	r3, [sp, #0]
 8010ede:	462a      	mov	r2, r5
 8010ee0:	4b12      	ldr	r3, [pc, #72]	@ (8010f2c <_vfiprintf_r+0x228>)
 8010ee2:	a904      	add	r1, sp, #16
 8010ee4:	4630      	mov	r0, r6
 8010ee6:	f3af 8000 	nop.w
 8010eea:	4607      	mov	r7, r0
 8010eec:	1c78      	adds	r0, r7, #1
 8010eee:	d1d6      	bne.n	8010e9e <_vfiprintf_r+0x19a>
 8010ef0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010ef2:	07d9      	lsls	r1, r3, #31
 8010ef4:	d405      	bmi.n	8010f02 <_vfiprintf_r+0x1fe>
 8010ef6:	89ab      	ldrh	r3, [r5, #12]
 8010ef8:	059a      	lsls	r2, r3, #22
 8010efa:	d402      	bmi.n	8010f02 <_vfiprintf_r+0x1fe>
 8010efc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010efe:	f7ff fda9 	bl	8010a54 <__retarget_lock_release_recursive>
 8010f02:	89ab      	ldrh	r3, [r5, #12]
 8010f04:	065b      	lsls	r3, r3, #25
 8010f06:	f53f af1f 	bmi.w	8010d48 <_vfiprintf_r+0x44>
 8010f0a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010f0c:	e71e      	b.n	8010d4c <_vfiprintf_r+0x48>
 8010f0e:	ab03      	add	r3, sp, #12
 8010f10:	9300      	str	r3, [sp, #0]
 8010f12:	462a      	mov	r2, r5
 8010f14:	4b05      	ldr	r3, [pc, #20]	@ (8010f2c <_vfiprintf_r+0x228>)
 8010f16:	a904      	add	r1, sp, #16
 8010f18:	4630      	mov	r0, r6
 8010f1a:	f000 f879 	bl	8011010 <_printf_i>
 8010f1e:	e7e4      	b.n	8010eea <_vfiprintf_r+0x1e6>
 8010f20:	08012741 	.word	0x08012741
 8010f24:	0801274b 	.word	0x0801274b
 8010f28:	00000000 	.word	0x00000000
 8010f2c:	08010cdf 	.word	0x08010cdf
 8010f30:	08012747 	.word	0x08012747

08010f34 <_printf_common>:
 8010f34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010f38:	4616      	mov	r6, r2
 8010f3a:	4698      	mov	r8, r3
 8010f3c:	688a      	ldr	r2, [r1, #8]
 8010f3e:	690b      	ldr	r3, [r1, #16]
 8010f40:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8010f44:	4293      	cmp	r3, r2
 8010f46:	bfb8      	it	lt
 8010f48:	4613      	movlt	r3, r2
 8010f4a:	6033      	str	r3, [r6, #0]
 8010f4c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8010f50:	4607      	mov	r7, r0
 8010f52:	460c      	mov	r4, r1
 8010f54:	b10a      	cbz	r2, 8010f5a <_printf_common+0x26>
 8010f56:	3301      	adds	r3, #1
 8010f58:	6033      	str	r3, [r6, #0]
 8010f5a:	6823      	ldr	r3, [r4, #0]
 8010f5c:	0699      	lsls	r1, r3, #26
 8010f5e:	bf42      	ittt	mi
 8010f60:	6833      	ldrmi	r3, [r6, #0]
 8010f62:	3302      	addmi	r3, #2
 8010f64:	6033      	strmi	r3, [r6, #0]
 8010f66:	6825      	ldr	r5, [r4, #0]
 8010f68:	f015 0506 	ands.w	r5, r5, #6
 8010f6c:	d106      	bne.n	8010f7c <_printf_common+0x48>
 8010f6e:	f104 0a19 	add.w	sl, r4, #25
 8010f72:	68e3      	ldr	r3, [r4, #12]
 8010f74:	6832      	ldr	r2, [r6, #0]
 8010f76:	1a9b      	subs	r3, r3, r2
 8010f78:	42ab      	cmp	r3, r5
 8010f7a:	dc26      	bgt.n	8010fca <_printf_common+0x96>
 8010f7c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8010f80:	6822      	ldr	r2, [r4, #0]
 8010f82:	3b00      	subs	r3, #0
 8010f84:	bf18      	it	ne
 8010f86:	2301      	movne	r3, #1
 8010f88:	0692      	lsls	r2, r2, #26
 8010f8a:	d42b      	bmi.n	8010fe4 <_printf_common+0xb0>
 8010f8c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8010f90:	4641      	mov	r1, r8
 8010f92:	4638      	mov	r0, r7
 8010f94:	47c8      	blx	r9
 8010f96:	3001      	adds	r0, #1
 8010f98:	d01e      	beq.n	8010fd8 <_printf_common+0xa4>
 8010f9a:	6823      	ldr	r3, [r4, #0]
 8010f9c:	6922      	ldr	r2, [r4, #16]
 8010f9e:	f003 0306 	and.w	r3, r3, #6
 8010fa2:	2b04      	cmp	r3, #4
 8010fa4:	bf02      	ittt	eq
 8010fa6:	68e5      	ldreq	r5, [r4, #12]
 8010fa8:	6833      	ldreq	r3, [r6, #0]
 8010faa:	1aed      	subeq	r5, r5, r3
 8010fac:	68a3      	ldr	r3, [r4, #8]
 8010fae:	bf0c      	ite	eq
 8010fb0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010fb4:	2500      	movne	r5, #0
 8010fb6:	4293      	cmp	r3, r2
 8010fb8:	bfc4      	itt	gt
 8010fba:	1a9b      	subgt	r3, r3, r2
 8010fbc:	18ed      	addgt	r5, r5, r3
 8010fbe:	2600      	movs	r6, #0
 8010fc0:	341a      	adds	r4, #26
 8010fc2:	42b5      	cmp	r5, r6
 8010fc4:	d11a      	bne.n	8010ffc <_printf_common+0xc8>
 8010fc6:	2000      	movs	r0, #0
 8010fc8:	e008      	b.n	8010fdc <_printf_common+0xa8>
 8010fca:	2301      	movs	r3, #1
 8010fcc:	4652      	mov	r2, sl
 8010fce:	4641      	mov	r1, r8
 8010fd0:	4638      	mov	r0, r7
 8010fd2:	47c8      	blx	r9
 8010fd4:	3001      	adds	r0, #1
 8010fd6:	d103      	bne.n	8010fe0 <_printf_common+0xac>
 8010fd8:	f04f 30ff 	mov.w	r0, #4294967295
 8010fdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010fe0:	3501      	adds	r5, #1
 8010fe2:	e7c6      	b.n	8010f72 <_printf_common+0x3e>
 8010fe4:	18e1      	adds	r1, r4, r3
 8010fe6:	1c5a      	adds	r2, r3, #1
 8010fe8:	2030      	movs	r0, #48	@ 0x30
 8010fea:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8010fee:	4422      	add	r2, r4
 8010ff0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8010ff4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8010ff8:	3302      	adds	r3, #2
 8010ffa:	e7c7      	b.n	8010f8c <_printf_common+0x58>
 8010ffc:	2301      	movs	r3, #1
 8010ffe:	4622      	mov	r2, r4
 8011000:	4641      	mov	r1, r8
 8011002:	4638      	mov	r0, r7
 8011004:	47c8      	blx	r9
 8011006:	3001      	adds	r0, #1
 8011008:	d0e6      	beq.n	8010fd8 <_printf_common+0xa4>
 801100a:	3601      	adds	r6, #1
 801100c:	e7d9      	b.n	8010fc2 <_printf_common+0x8e>
	...

08011010 <_printf_i>:
 8011010:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011014:	7e0f      	ldrb	r7, [r1, #24]
 8011016:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8011018:	2f78      	cmp	r7, #120	@ 0x78
 801101a:	4691      	mov	r9, r2
 801101c:	4680      	mov	r8, r0
 801101e:	460c      	mov	r4, r1
 8011020:	469a      	mov	sl, r3
 8011022:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8011026:	d807      	bhi.n	8011038 <_printf_i+0x28>
 8011028:	2f62      	cmp	r7, #98	@ 0x62
 801102a:	d80a      	bhi.n	8011042 <_printf_i+0x32>
 801102c:	2f00      	cmp	r7, #0
 801102e:	f000 80d2 	beq.w	80111d6 <_printf_i+0x1c6>
 8011032:	2f58      	cmp	r7, #88	@ 0x58
 8011034:	f000 80b9 	beq.w	80111aa <_printf_i+0x19a>
 8011038:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801103c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8011040:	e03a      	b.n	80110b8 <_printf_i+0xa8>
 8011042:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8011046:	2b15      	cmp	r3, #21
 8011048:	d8f6      	bhi.n	8011038 <_printf_i+0x28>
 801104a:	a101      	add	r1, pc, #4	@ (adr r1, 8011050 <_printf_i+0x40>)
 801104c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011050:	080110a9 	.word	0x080110a9
 8011054:	080110bd 	.word	0x080110bd
 8011058:	08011039 	.word	0x08011039
 801105c:	08011039 	.word	0x08011039
 8011060:	08011039 	.word	0x08011039
 8011064:	08011039 	.word	0x08011039
 8011068:	080110bd 	.word	0x080110bd
 801106c:	08011039 	.word	0x08011039
 8011070:	08011039 	.word	0x08011039
 8011074:	08011039 	.word	0x08011039
 8011078:	08011039 	.word	0x08011039
 801107c:	080111bd 	.word	0x080111bd
 8011080:	080110e7 	.word	0x080110e7
 8011084:	08011177 	.word	0x08011177
 8011088:	08011039 	.word	0x08011039
 801108c:	08011039 	.word	0x08011039
 8011090:	080111df 	.word	0x080111df
 8011094:	08011039 	.word	0x08011039
 8011098:	080110e7 	.word	0x080110e7
 801109c:	08011039 	.word	0x08011039
 80110a0:	08011039 	.word	0x08011039
 80110a4:	0801117f 	.word	0x0801117f
 80110a8:	6833      	ldr	r3, [r6, #0]
 80110aa:	1d1a      	adds	r2, r3, #4
 80110ac:	681b      	ldr	r3, [r3, #0]
 80110ae:	6032      	str	r2, [r6, #0]
 80110b0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80110b4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80110b8:	2301      	movs	r3, #1
 80110ba:	e09d      	b.n	80111f8 <_printf_i+0x1e8>
 80110bc:	6833      	ldr	r3, [r6, #0]
 80110be:	6820      	ldr	r0, [r4, #0]
 80110c0:	1d19      	adds	r1, r3, #4
 80110c2:	6031      	str	r1, [r6, #0]
 80110c4:	0606      	lsls	r6, r0, #24
 80110c6:	d501      	bpl.n	80110cc <_printf_i+0xbc>
 80110c8:	681d      	ldr	r5, [r3, #0]
 80110ca:	e003      	b.n	80110d4 <_printf_i+0xc4>
 80110cc:	0645      	lsls	r5, r0, #25
 80110ce:	d5fb      	bpl.n	80110c8 <_printf_i+0xb8>
 80110d0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80110d4:	2d00      	cmp	r5, #0
 80110d6:	da03      	bge.n	80110e0 <_printf_i+0xd0>
 80110d8:	232d      	movs	r3, #45	@ 0x2d
 80110da:	426d      	negs	r5, r5
 80110dc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80110e0:	4859      	ldr	r0, [pc, #356]	@ (8011248 <_printf_i+0x238>)
 80110e2:	230a      	movs	r3, #10
 80110e4:	e011      	b.n	801110a <_printf_i+0xfa>
 80110e6:	6821      	ldr	r1, [r4, #0]
 80110e8:	6833      	ldr	r3, [r6, #0]
 80110ea:	0608      	lsls	r0, r1, #24
 80110ec:	f853 5b04 	ldr.w	r5, [r3], #4
 80110f0:	d402      	bmi.n	80110f8 <_printf_i+0xe8>
 80110f2:	0649      	lsls	r1, r1, #25
 80110f4:	bf48      	it	mi
 80110f6:	b2ad      	uxthmi	r5, r5
 80110f8:	2f6f      	cmp	r7, #111	@ 0x6f
 80110fa:	4853      	ldr	r0, [pc, #332]	@ (8011248 <_printf_i+0x238>)
 80110fc:	6033      	str	r3, [r6, #0]
 80110fe:	bf14      	ite	ne
 8011100:	230a      	movne	r3, #10
 8011102:	2308      	moveq	r3, #8
 8011104:	2100      	movs	r1, #0
 8011106:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801110a:	6866      	ldr	r6, [r4, #4]
 801110c:	60a6      	str	r6, [r4, #8]
 801110e:	2e00      	cmp	r6, #0
 8011110:	bfa2      	ittt	ge
 8011112:	6821      	ldrge	r1, [r4, #0]
 8011114:	f021 0104 	bicge.w	r1, r1, #4
 8011118:	6021      	strge	r1, [r4, #0]
 801111a:	b90d      	cbnz	r5, 8011120 <_printf_i+0x110>
 801111c:	2e00      	cmp	r6, #0
 801111e:	d04b      	beq.n	80111b8 <_printf_i+0x1a8>
 8011120:	4616      	mov	r6, r2
 8011122:	fbb5 f1f3 	udiv	r1, r5, r3
 8011126:	fb03 5711 	mls	r7, r3, r1, r5
 801112a:	5dc7      	ldrb	r7, [r0, r7]
 801112c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8011130:	462f      	mov	r7, r5
 8011132:	42bb      	cmp	r3, r7
 8011134:	460d      	mov	r5, r1
 8011136:	d9f4      	bls.n	8011122 <_printf_i+0x112>
 8011138:	2b08      	cmp	r3, #8
 801113a:	d10b      	bne.n	8011154 <_printf_i+0x144>
 801113c:	6823      	ldr	r3, [r4, #0]
 801113e:	07df      	lsls	r7, r3, #31
 8011140:	d508      	bpl.n	8011154 <_printf_i+0x144>
 8011142:	6923      	ldr	r3, [r4, #16]
 8011144:	6861      	ldr	r1, [r4, #4]
 8011146:	4299      	cmp	r1, r3
 8011148:	bfde      	ittt	le
 801114a:	2330      	movle	r3, #48	@ 0x30
 801114c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8011150:	f106 36ff 	addle.w	r6, r6, #4294967295
 8011154:	1b92      	subs	r2, r2, r6
 8011156:	6122      	str	r2, [r4, #16]
 8011158:	f8cd a000 	str.w	sl, [sp]
 801115c:	464b      	mov	r3, r9
 801115e:	aa03      	add	r2, sp, #12
 8011160:	4621      	mov	r1, r4
 8011162:	4640      	mov	r0, r8
 8011164:	f7ff fee6 	bl	8010f34 <_printf_common>
 8011168:	3001      	adds	r0, #1
 801116a:	d14a      	bne.n	8011202 <_printf_i+0x1f2>
 801116c:	f04f 30ff 	mov.w	r0, #4294967295
 8011170:	b004      	add	sp, #16
 8011172:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011176:	6823      	ldr	r3, [r4, #0]
 8011178:	f043 0320 	orr.w	r3, r3, #32
 801117c:	6023      	str	r3, [r4, #0]
 801117e:	4833      	ldr	r0, [pc, #204]	@ (801124c <_printf_i+0x23c>)
 8011180:	2778      	movs	r7, #120	@ 0x78
 8011182:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8011186:	6823      	ldr	r3, [r4, #0]
 8011188:	6831      	ldr	r1, [r6, #0]
 801118a:	061f      	lsls	r7, r3, #24
 801118c:	f851 5b04 	ldr.w	r5, [r1], #4
 8011190:	d402      	bmi.n	8011198 <_printf_i+0x188>
 8011192:	065f      	lsls	r7, r3, #25
 8011194:	bf48      	it	mi
 8011196:	b2ad      	uxthmi	r5, r5
 8011198:	6031      	str	r1, [r6, #0]
 801119a:	07d9      	lsls	r1, r3, #31
 801119c:	bf44      	itt	mi
 801119e:	f043 0320 	orrmi.w	r3, r3, #32
 80111a2:	6023      	strmi	r3, [r4, #0]
 80111a4:	b11d      	cbz	r5, 80111ae <_printf_i+0x19e>
 80111a6:	2310      	movs	r3, #16
 80111a8:	e7ac      	b.n	8011104 <_printf_i+0xf4>
 80111aa:	4827      	ldr	r0, [pc, #156]	@ (8011248 <_printf_i+0x238>)
 80111ac:	e7e9      	b.n	8011182 <_printf_i+0x172>
 80111ae:	6823      	ldr	r3, [r4, #0]
 80111b0:	f023 0320 	bic.w	r3, r3, #32
 80111b4:	6023      	str	r3, [r4, #0]
 80111b6:	e7f6      	b.n	80111a6 <_printf_i+0x196>
 80111b8:	4616      	mov	r6, r2
 80111ba:	e7bd      	b.n	8011138 <_printf_i+0x128>
 80111bc:	6833      	ldr	r3, [r6, #0]
 80111be:	6825      	ldr	r5, [r4, #0]
 80111c0:	6961      	ldr	r1, [r4, #20]
 80111c2:	1d18      	adds	r0, r3, #4
 80111c4:	6030      	str	r0, [r6, #0]
 80111c6:	062e      	lsls	r6, r5, #24
 80111c8:	681b      	ldr	r3, [r3, #0]
 80111ca:	d501      	bpl.n	80111d0 <_printf_i+0x1c0>
 80111cc:	6019      	str	r1, [r3, #0]
 80111ce:	e002      	b.n	80111d6 <_printf_i+0x1c6>
 80111d0:	0668      	lsls	r0, r5, #25
 80111d2:	d5fb      	bpl.n	80111cc <_printf_i+0x1bc>
 80111d4:	8019      	strh	r1, [r3, #0]
 80111d6:	2300      	movs	r3, #0
 80111d8:	6123      	str	r3, [r4, #16]
 80111da:	4616      	mov	r6, r2
 80111dc:	e7bc      	b.n	8011158 <_printf_i+0x148>
 80111de:	6833      	ldr	r3, [r6, #0]
 80111e0:	1d1a      	adds	r2, r3, #4
 80111e2:	6032      	str	r2, [r6, #0]
 80111e4:	681e      	ldr	r6, [r3, #0]
 80111e6:	6862      	ldr	r2, [r4, #4]
 80111e8:	2100      	movs	r1, #0
 80111ea:	4630      	mov	r0, r6
 80111ec:	f7ee ffd0 	bl	8000190 <memchr>
 80111f0:	b108      	cbz	r0, 80111f6 <_printf_i+0x1e6>
 80111f2:	1b80      	subs	r0, r0, r6
 80111f4:	6060      	str	r0, [r4, #4]
 80111f6:	6863      	ldr	r3, [r4, #4]
 80111f8:	6123      	str	r3, [r4, #16]
 80111fa:	2300      	movs	r3, #0
 80111fc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011200:	e7aa      	b.n	8011158 <_printf_i+0x148>
 8011202:	6923      	ldr	r3, [r4, #16]
 8011204:	4632      	mov	r2, r6
 8011206:	4649      	mov	r1, r9
 8011208:	4640      	mov	r0, r8
 801120a:	47d0      	blx	sl
 801120c:	3001      	adds	r0, #1
 801120e:	d0ad      	beq.n	801116c <_printf_i+0x15c>
 8011210:	6823      	ldr	r3, [r4, #0]
 8011212:	079b      	lsls	r3, r3, #30
 8011214:	d413      	bmi.n	801123e <_printf_i+0x22e>
 8011216:	68e0      	ldr	r0, [r4, #12]
 8011218:	9b03      	ldr	r3, [sp, #12]
 801121a:	4298      	cmp	r0, r3
 801121c:	bfb8      	it	lt
 801121e:	4618      	movlt	r0, r3
 8011220:	e7a6      	b.n	8011170 <_printf_i+0x160>
 8011222:	2301      	movs	r3, #1
 8011224:	4632      	mov	r2, r6
 8011226:	4649      	mov	r1, r9
 8011228:	4640      	mov	r0, r8
 801122a:	47d0      	blx	sl
 801122c:	3001      	adds	r0, #1
 801122e:	d09d      	beq.n	801116c <_printf_i+0x15c>
 8011230:	3501      	adds	r5, #1
 8011232:	68e3      	ldr	r3, [r4, #12]
 8011234:	9903      	ldr	r1, [sp, #12]
 8011236:	1a5b      	subs	r3, r3, r1
 8011238:	42ab      	cmp	r3, r5
 801123a:	dcf2      	bgt.n	8011222 <_printf_i+0x212>
 801123c:	e7eb      	b.n	8011216 <_printf_i+0x206>
 801123e:	2500      	movs	r5, #0
 8011240:	f104 0619 	add.w	r6, r4, #25
 8011244:	e7f5      	b.n	8011232 <_printf_i+0x222>
 8011246:	bf00      	nop
 8011248:	08012752 	.word	0x08012752
 801124c:	08012763 	.word	0x08012763

08011250 <__sflush_r>:
 8011250:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8011254:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011258:	0716      	lsls	r6, r2, #28
 801125a:	4605      	mov	r5, r0
 801125c:	460c      	mov	r4, r1
 801125e:	d454      	bmi.n	801130a <__sflush_r+0xba>
 8011260:	684b      	ldr	r3, [r1, #4]
 8011262:	2b00      	cmp	r3, #0
 8011264:	dc02      	bgt.n	801126c <__sflush_r+0x1c>
 8011266:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8011268:	2b00      	cmp	r3, #0
 801126a:	dd48      	ble.n	80112fe <__sflush_r+0xae>
 801126c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801126e:	2e00      	cmp	r6, #0
 8011270:	d045      	beq.n	80112fe <__sflush_r+0xae>
 8011272:	2300      	movs	r3, #0
 8011274:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8011278:	682f      	ldr	r7, [r5, #0]
 801127a:	6a21      	ldr	r1, [r4, #32]
 801127c:	602b      	str	r3, [r5, #0]
 801127e:	d030      	beq.n	80112e2 <__sflush_r+0x92>
 8011280:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8011282:	89a3      	ldrh	r3, [r4, #12]
 8011284:	0759      	lsls	r1, r3, #29
 8011286:	d505      	bpl.n	8011294 <__sflush_r+0x44>
 8011288:	6863      	ldr	r3, [r4, #4]
 801128a:	1ad2      	subs	r2, r2, r3
 801128c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801128e:	b10b      	cbz	r3, 8011294 <__sflush_r+0x44>
 8011290:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8011292:	1ad2      	subs	r2, r2, r3
 8011294:	2300      	movs	r3, #0
 8011296:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8011298:	6a21      	ldr	r1, [r4, #32]
 801129a:	4628      	mov	r0, r5
 801129c:	47b0      	blx	r6
 801129e:	1c43      	adds	r3, r0, #1
 80112a0:	89a3      	ldrh	r3, [r4, #12]
 80112a2:	d106      	bne.n	80112b2 <__sflush_r+0x62>
 80112a4:	6829      	ldr	r1, [r5, #0]
 80112a6:	291d      	cmp	r1, #29
 80112a8:	d82b      	bhi.n	8011302 <__sflush_r+0xb2>
 80112aa:	4a2a      	ldr	r2, [pc, #168]	@ (8011354 <__sflush_r+0x104>)
 80112ac:	410a      	asrs	r2, r1
 80112ae:	07d6      	lsls	r6, r2, #31
 80112b0:	d427      	bmi.n	8011302 <__sflush_r+0xb2>
 80112b2:	2200      	movs	r2, #0
 80112b4:	6062      	str	r2, [r4, #4]
 80112b6:	04d9      	lsls	r1, r3, #19
 80112b8:	6922      	ldr	r2, [r4, #16]
 80112ba:	6022      	str	r2, [r4, #0]
 80112bc:	d504      	bpl.n	80112c8 <__sflush_r+0x78>
 80112be:	1c42      	adds	r2, r0, #1
 80112c0:	d101      	bne.n	80112c6 <__sflush_r+0x76>
 80112c2:	682b      	ldr	r3, [r5, #0]
 80112c4:	b903      	cbnz	r3, 80112c8 <__sflush_r+0x78>
 80112c6:	6560      	str	r0, [r4, #84]	@ 0x54
 80112c8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80112ca:	602f      	str	r7, [r5, #0]
 80112cc:	b1b9      	cbz	r1, 80112fe <__sflush_r+0xae>
 80112ce:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80112d2:	4299      	cmp	r1, r3
 80112d4:	d002      	beq.n	80112dc <__sflush_r+0x8c>
 80112d6:	4628      	mov	r0, r5
 80112d8:	f7ff fbea 	bl	8010ab0 <_free_r>
 80112dc:	2300      	movs	r3, #0
 80112de:	6363      	str	r3, [r4, #52]	@ 0x34
 80112e0:	e00d      	b.n	80112fe <__sflush_r+0xae>
 80112e2:	2301      	movs	r3, #1
 80112e4:	4628      	mov	r0, r5
 80112e6:	47b0      	blx	r6
 80112e8:	4602      	mov	r2, r0
 80112ea:	1c50      	adds	r0, r2, #1
 80112ec:	d1c9      	bne.n	8011282 <__sflush_r+0x32>
 80112ee:	682b      	ldr	r3, [r5, #0]
 80112f0:	2b00      	cmp	r3, #0
 80112f2:	d0c6      	beq.n	8011282 <__sflush_r+0x32>
 80112f4:	2b1d      	cmp	r3, #29
 80112f6:	d001      	beq.n	80112fc <__sflush_r+0xac>
 80112f8:	2b16      	cmp	r3, #22
 80112fa:	d11e      	bne.n	801133a <__sflush_r+0xea>
 80112fc:	602f      	str	r7, [r5, #0]
 80112fe:	2000      	movs	r0, #0
 8011300:	e022      	b.n	8011348 <__sflush_r+0xf8>
 8011302:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011306:	b21b      	sxth	r3, r3
 8011308:	e01b      	b.n	8011342 <__sflush_r+0xf2>
 801130a:	690f      	ldr	r7, [r1, #16]
 801130c:	2f00      	cmp	r7, #0
 801130e:	d0f6      	beq.n	80112fe <__sflush_r+0xae>
 8011310:	0793      	lsls	r3, r2, #30
 8011312:	680e      	ldr	r6, [r1, #0]
 8011314:	bf08      	it	eq
 8011316:	694b      	ldreq	r3, [r1, #20]
 8011318:	600f      	str	r7, [r1, #0]
 801131a:	bf18      	it	ne
 801131c:	2300      	movne	r3, #0
 801131e:	eba6 0807 	sub.w	r8, r6, r7
 8011322:	608b      	str	r3, [r1, #8]
 8011324:	f1b8 0f00 	cmp.w	r8, #0
 8011328:	dde9      	ble.n	80112fe <__sflush_r+0xae>
 801132a:	6a21      	ldr	r1, [r4, #32]
 801132c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801132e:	4643      	mov	r3, r8
 8011330:	463a      	mov	r2, r7
 8011332:	4628      	mov	r0, r5
 8011334:	47b0      	blx	r6
 8011336:	2800      	cmp	r0, #0
 8011338:	dc08      	bgt.n	801134c <__sflush_r+0xfc>
 801133a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801133e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011342:	81a3      	strh	r3, [r4, #12]
 8011344:	f04f 30ff 	mov.w	r0, #4294967295
 8011348:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801134c:	4407      	add	r7, r0
 801134e:	eba8 0800 	sub.w	r8, r8, r0
 8011352:	e7e7      	b.n	8011324 <__sflush_r+0xd4>
 8011354:	dfbffffe 	.word	0xdfbffffe

08011358 <_fflush_r>:
 8011358:	b538      	push	{r3, r4, r5, lr}
 801135a:	690b      	ldr	r3, [r1, #16]
 801135c:	4605      	mov	r5, r0
 801135e:	460c      	mov	r4, r1
 8011360:	b913      	cbnz	r3, 8011368 <_fflush_r+0x10>
 8011362:	2500      	movs	r5, #0
 8011364:	4628      	mov	r0, r5
 8011366:	bd38      	pop	{r3, r4, r5, pc}
 8011368:	b118      	cbz	r0, 8011372 <_fflush_r+0x1a>
 801136a:	6a03      	ldr	r3, [r0, #32]
 801136c:	b90b      	cbnz	r3, 8011372 <_fflush_r+0x1a>
 801136e:	f7ff fa7d 	bl	801086c <__sinit>
 8011372:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011376:	2b00      	cmp	r3, #0
 8011378:	d0f3      	beq.n	8011362 <_fflush_r+0xa>
 801137a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801137c:	07d0      	lsls	r0, r2, #31
 801137e:	d404      	bmi.n	801138a <_fflush_r+0x32>
 8011380:	0599      	lsls	r1, r3, #22
 8011382:	d402      	bmi.n	801138a <_fflush_r+0x32>
 8011384:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011386:	f7ff fb64 	bl	8010a52 <__retarget_lock_acquire_recursive>
 801138a:	4628      	mov	r0, r5
 801138c:	4621      	mov	r1, r4
 801138e:	f7ff ff5f 	bl	8011250 <__sflush_r>
 8011392:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011394:	07da      	lsls	r2, r3, #31
 8011396:	4605      	mov	r5, r0
 8011398:	d4e4      	bmi.n	8011364 <_fflush_r+0xc>
 801139a:	89a3      	ldrh	r3, [r4, #12]
 801139c:	059b      	lsls	r3, r3, #22
 801139e:	d4e1      	bmi.n	8011364 <_fflush_r+0xc>
 80113a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80113a2:	f7ff fb57 	bl	8010a54 <__retarget_lock_release_recursive>
 80113a6:	e7dd      	b.n	8011364 <_fflush_r+0xc>

080113a8 <fiprintf>:
 80113a8:	b40e      	push	{r1, r2, r3}
 80113aa:	b503      	push	{r0, r1, lr}
 80113ac:	4601      	mov	r1, r0
 80113ae:	ab03      	add	r3, sp, #12
 80113b0:	4805      	ldr	r0, [pc, #20]	@ (80113c8 <fiprintf+0x20>)
 80113b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80113b6:	6800      	ldr	r0, [r0, #0]
 80113b8:	9301      	str	r3, [sp, #4]
 80113ba:	f7ff fca3 	bl	8010d04 <_vfiprintf_r>
 80113be:	b002      	add	sp, #8
 80113c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80113c4:	b003      	add	sp, #12
 80113c6:	4770      	bx	lr
 80113c8:	2000007c 	.word	0x2000007c

080113cc <__swbuf_r>:
 80113cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80113ce:	460e      	mov	r6, r1
 80113d0:	4614      	mov	r4, r2
 80113d2:	4605      	mov	r5, r0
 80113d4:	b118      	cbz	r0, 80113de <__swbuf_r+0x12>
 80113d6:	6a03      	ldr	r3, [r0, #32]
 80113d8:	b90b      	cbnz	r3, 80113de <__swbuf_r+0x12>
 80113da:	f7ff fa47 	bl	801086c <__sinit>
 80113de:	69a3      	ldr	r3, [r4, #24]
 80113e0:	60a3      	str	r3, [r4, #8]
 80113e2:	89a3      	ldrh	r3, [r4, #12]
 80113e4:	071a      	lsls	r2, r3, #28
 80113e6:	d501      	bpl.n	80113ec <__swbuf_r+0x20>
 80113e8:	6923      	ldr	r3, [r4, #16]
 80113ea:	b943      	cbnz	r3, 80113fe <__swbuf_r+0x32>
 80113ec:	4621      	mov	r1, r4
 80113ee:	4628      	mov	r0, r5
 80113f0:	f000 f82a 	bl	8011448 <__swsetup_r>
 80113f4:	b118      	cbz	r0, 80113fe <__swbuf_r+0x32>
 80113f6:	f04f 37ff 	mov.w	r7, #4294967295
 80113fa:	4638      	mov	r0, r7
 80113fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80113fe:	6823      	ldr	r3, [r4, #0]
 8011400:	6922      	ldr	r2, [r4, #16]
 8011402:	1a98      	subs	r0, r3, r2
 8011404:	6963      	ldr	r3, [r4, #20]
 8011406:	b2f6      	uxtb	r6, r6
 8011408:	4283      	cmp	r3, r0
 801140a:	4637      	mov	r7, r6
 801140c:	dc05      	bgt.n	801141a <__swbuf_r+0x4e>
 801140e:	4621      	mov	r1, r4
 8011410:	4628      	mov	r0, r5
 8011412:	f7ff ffa1 	bl	8011358 <_fflush_r>
 8011416:	2800      	cmp	r0, #0
 8011418:	d1ed      	bne.n	80113f6 <__swbuf_r+0x2a>
 801141a:	68a3      	ldr	r3, [r4, #8]
 801141c:	3b01      	subs	r3, #1
 801141e:	60a3      	str	r3, [r4, #8]
 8011420:	6823      	ldr	r3, [r4, #0]
 8011422:	1c5a      	adds	r2, r3, #1
 8011424:	6022      	str	r2, [r4, #0]
 8011426:	701e      	strb	r6, [r3, #0]
 8011428:	6962      	ldr	r2, [r4, #20]
 801142a:	1c43      	adds	r3, r0, #1
 801142c:	429a      	cmp	r2, r3
 801142e:	d004      	beq.n	801143a <__swbuf_r+0x6e>
 8011430:	89a3      	ldrh	r3, [r4, #12]
 8011432:	07db      	lsls	r3, r3, #31
 8011434:	d5e1      	bpl.n	80113fa <__swbuf_r+0x2e>
 8011436:	2e0a      	cmp	r6, #10
 8011438:	d1df      	bne.n	80113fa <__swbuf_r+0x2e>
 801143a:	4621      	mov	r1, r4
 801143c:	4628      	mov	r0, r5
 801143e:	f7ff ff8b 	bl	8011358 <_fflush_r>
 8011442:	2800      	cmp	r0, #0
 8011444:	d0d9      	beq.n	80113fa <__swbuf_r+0x2e>
 8011446:	e7d6      	b.n	80113f6 <__swbuf_r+0x2a>

08011448 <__swsetup_r>:
 8011448:	b538      	push	{r3, r4, r5, lr}
 801144a:	4b29      	ldr	r3, [pc, #164]	@ (80114f0 <__swsetup_r+0xa8>)
 801144c:	4605      	mov	r5, r0
 801144e:	6818      	ldr	r0, [r3, #0]
 8011450:	460c      	mov	r4, r1
 8011452:	b118      	cbz	r0, 801145c <__swsetup_r+0x14>
 8011454:	6a03      	ldr	r3, [r0, #32]
 8011456:	b90b      	cbnz	r3, 801145c <__swsetup_r+0x14>
 8011458:	f7ff fa08 	bl	801086c <__sinit>
 801145c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011460:	0719      	lsls	r1, r3, #28
 8011462:	d422      	bmi.n	80114aa <__swsetup_r+0x62>
 8011464:	06da      	lsls	r2, r3, #27
 8011466:	d407      	bmi.n	8011478 <__swsetup_r+0x30>
 8011468:	2209      	movs	r2, #9
 801146a:	602a      	str	r2, [r5, #0]
 801146c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011470:	81a3      	strh	r3, [r4, #12]
 8011472:	f04f 30ff 	mov.w	r0, #4294967295
 8011476:	e033      	b.n	80114e0 <__swsetup_r+0x98>
 8011478:	0758      	lsls	r0, r3, #29
 801147a:	d512      	bpl.n	80114a2 <__swsetup_r+0x5a>
 801147c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801147e:	b141      	cbz	r1, 8011492 <__swsetup_r+0x4a>
 8011480:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011484:	4299      	cmp	r1, r3
 8011486:	d002      	beq.n	801148e <__swsetup_r+0x46>
 8011488:	4628      	mov	r0, r5
 801148a:	f7ff fb11 	bl	8010ab0 <_free_r>
 801148e:	2300      	movs	r3, #0
 8011490:	6363      	str	r3, [r4, #52]	@ 0x34
 8011492:	89a3      	ldrh	r3, [r4, #12]
 8011494:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8011498:	81a3      	strh	r3, [r4, #12]
 801149a:	2300      	movs	r3, #0
 801149c:	6063      	str	r3, [r4, #4]
 801149e:	6923      	ldr	r3, [r4, #16]
 80114a0:	6023      	str	r3, [r4, #0]
 80114a2:	89a3      	ldrh	r3, [r4, #12]
 80114a4:	f043 0308 	orr.w	r3, r3, #8
 80114a8:	81a3      	strh	r3, [r4, #12]
 80114aa:	6923      	ldr	r3, [r4, #16]
 80114ac:	b94b      	cbnz	r3, 80114c2 <__swsetup_r+0x7a>
 80114ae:	89a3      	ldrh	r3, [r4, #12]
 80114b0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80114b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80114b8:	d003      	beq.n	80114c2 <__swsetup_r+0x7a>
 80114ba:	4621      	mov	r1, r4
 80114bc:	4628      	mov	r0, r5
 80114be:	f000 f856 	bl	801156e <__smakebuf_r>
 80114c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80114c6:	f013 0201 	ands.w	r2, r3, #1
 80114ca:	d00a      	beq.n	80114e2 <__swsetup_r+0x9a>
 80114cc:	2200      	movs	r2, #0
 80114ce:	60a2      	str	r2, [r4, #8]
 80114d0:	6962      	ldr	r2, [r4, #20]
 80114d2:	4252      	negs	r2, r2
 80114d4:	61a2      	str	r2, [r4, #24]
 80114d6:	6922      	ldr	r2, [r4, #16]
 80114d8:	b942      	cbnz	r2, 80114ec <__swsetup_r+0xa4>
 80114da:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80114de:	d1c5      	bne.n	801146c <__swsetup_r+0x24>
 80114e0:	bd38      	pop	{r3, r4, r5, pc}
 80114e2:	0799      	lsls	r1, r3, #30
 80114e4:	bf58      	it	pl
 80114e6:	6962      	ldrpl	r2, [r4, #20]
 80114e8:	60a2      	str	r2, [r4, #8]
 80114ea:	e7f4      	b.n	80114d6 <__swsetup_r+0x8e>
 80114ec:	2000      	movs	r0, #0
 80114ee:	e7f7      	b.n	80114e0 <__swsetup_r+0x98>
 80114f0:	2000007c 	.word	0x2000007c

080114f4 <_sbrk_r>:
 80114f4:	b538      	push	{r3, r4, r5, lr}
 80114f6:	4d06      	ldr	r5, [pc, #24]	@ (8011510 <_sbrk_r+0x1c>)
 80114f8:	2300      	movs	r3, #0
 80114fa:	4604      	mov	r4, r0
 80114fc:	4608      	mov	r0, r1
 80114fe:	602b      	str	r3, [r5, #0]
 8011500:	f7f6 f9d0 	bl	80078a4 <_sbrk>
 8011504:	1c43      	adds	r3, r0, #1
 8011506:	d102      	bne.n	801150e <_sbrk_r+0x1a>
 8011508:	682b      	ldr	r3, [r5, #0]
 801150a:	b103      	cbz	r3, 801150e <_sbrk_r+0x1a>
 801150c:	6023      	str	r3, [r4, #0]
 801150e:	bd38      	pop	{r3, r4, r5, pc}
 8011510:	20002e7c 	.word	0x20002e7c

08011514 <abort>:
 8011514:	b508      	push	{r3, lr}
 8011516:	2006      	movs	r0, #6
 8011518:	f000 f88e 	bl	8011638 <raise>
 801151c:	2001      	movs	r0, #1
 801151e:	f7f6 f948 	bl	80077b2 <_exit>

08011522 <__swhatbuf_r>:
 8011522:	b570      	push	{r4, r5, r6, lr}
 8011524:	460c      	mov	r4, r1
 8011526:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801152a:	2900      	cmp	r1, #0
 801152c:	b096      	sub	sp, #88	@ 0x58
 801152e:	4615      	mov	r5, r2
 8011530:	461e      	mov	r6, r3
 8011532:	da0d      	bge.n	8011550 <__swhatbuf_r+0x2e>
 8011534:	89a3      	ldrh	r3, [r4, #12]
 8011536:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801153a:	f04f 0100 	mov.w	r1, #0
 801153e:	bf14      	ite	ne
 8011540:	2340      	movne	r3, #64	@ 0x40
 8011542:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8011546:	2000      	movs	r0, #0
 8011548:	6031      	str	r1, [r6, #0]
 801154a:	602b      	str	r3, [r5, #0]
 801154c:	b016      	add	sp, #88	@ 0x58
 801154e:	bd70      	pop	{r4, r5, r6, pc}
 8011550:	466a      	mov	r2, sp
 8011552:	f000 f879 	bl	8011648 <_fstat_r>
 8011556:	2800      	cmp	r0, #0
 8011558:	dbec      	blt.n	8011534 <__swhatbuf_r+0x12>
 801155a:	9901      	ldr	r1, [sp, #4]
 801155c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8011560:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8011564:	4259      	negs	r1, r3
 8011566:	4159      	adcs	r1, r3
 8011568:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801156c:	e7eb      	b.n	8011546 <__swhatbuf_r+0x24>

0801156e <__smakebuf_r>:
 801156e:	898b      	ldrh	r3, [r1, #12]
 8011570:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011572:	079d      	lsls	r5, r3, #30
 8011574:	4606      	mov	r6, r0
 8011576:	460c      	mov	r4, r1
 8011578:	d507      	bpl.n	801158a <__smakebuf_r+0x1c>
 801157a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801157e:	6023      	str	r3, [r4, #0]
 8011580:	6123      	str	r3, [r4, #16]
 8011582:	2301      	movs	r3, #1
 8011584:	6163      	str	r3, [r4, #20]
 8011586:	b003      	add	sp, #12
 8011588:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801158a:	ab01      	add	r3, sp, #4
 801158c:	466a      	mov	r2, sp
 801158e:	f7ff ffc8 	bl	8011522 <__swhatbuf_r>
 8011592:	9f00      	ldr	r7, [sp, #0]
 8011594:	4605      	mov	r5, r0
 8011596:	4639      	mov	r1, r7
 8011598:	4630      	mov	r0, r6
 801159a:	f7ff fafd 	bl	8010b98 <_malloc_r>
 801159e:	b948      	cbnz	r0, 80115b4 <__smakebuf_r+0x46>
 80115a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80115a4:	059a      	lsls	r2, r3, #22
 80115a6:	d4ee      	bmi.n	8011586 <__smakebuf_r+0x18>
 80115a8:	f023 0303 	bic.w	r3, r3, #3
 80115ac:	f043 0302 	orr.w	r3, r3, #2
 80115b0:	81a3      	strh	r3, [r4, #12]
 80115b2:	e7e2      	b.n	801157a <__smakebuf_r+0xc>
 80115b4:	89a3      	ldrh	r3, [r4, #12]
 80115b6:	6020      	str	r0, [r4, #0]
 80115b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80115bc:	81a3      	strh	r3, [r4, #12]
 80115be:	9b01      	ldr	r3, [sp, #4]
 80115c0:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80115c4:	b15b      	cbz	r3, 80115de <__smakebuf_r+0x70>
 80115c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80115ca:	4630      	mov	r0, r6
 80115cc:	f000 f84e 	bl	801166c <_isatty_r>
 80115d0:	b128      	cbz	r0, 80115de <__smakebuf_r+0x70>
 80115d2:	89a3      	ldrh	r3, [r4, #12]
 80115d4:	f023 0303 	bic.w	r3, r3, #3
 80115d8:	f043 0301 	orr.w	r3, r3, #1
 80115dc:	81a3      	strh	r3, [r4, #12]
 80115de:	89a3      	ldrh	r3, [r4, #12]
 80115e0:	431d      	orrs	r5, r3
 80115e2:	81a5      	strh	r5, [r4, #12]
 80115e4:	e7cf      	b.n	8011586 <__smakebuf_r+0x18>

080115e6 <_raise_r>:
 80115e6:	291f      	cmp	r1, #31
 80115e8:	b538      	push	{r3, r4, r5, lr}
 80115ea:	4605      	mov	r5, r0
 80115ec:	460c      	mov	r4, r1
 80115ee:	d904      	bls.n	80115fa <_raise_r+0x14>
 80115f0:	2316      	movs	r3, #22
 80115f2:	6003      	str	r3, [r0, #0]
 80115f4:	f04f 30ff 	mov.w	r0, #4294967295
 80115f8:	bd38      	pop	{r3, r4, r5, pc}
 80115fa:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80115fc:	b112      	cbz	r2, 8011604 <_raise_r+0x1e>
 80115fe:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011602:	b94b      	cbnz	r3, 8011618 <_raise_r+0x32>
 8011604:	4628      	mov	r0, r5
 8011606:	f000 f853 	bl	80116b0 <_getpid_r>
 801160a:	4622      	mov	r2, r4
 801160c:	4601      	mov	r1, r0
 801160e:	4628      	mov	r0, r5
 8011610:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011614:	f000 b83a 	b.w	801168c <_kill_r>
 8011618:	2b01      	cmp	r3, #1
 801161a:	d00a      	beq.n	8011632 <_raise_r+0x4c>
 801161c:	1c59      	adds	r1, r3, #1
 801161e:	d103      	bne.n	8011628 <_raise_r+0x42>
 8011620:	2316      	movs	r3, #22
 8011622:	6003      	str	r3, [r0, #0]
 8011624:	2001      	movs	r0, #1
 8011626:	e7e7      	b.n	80115f8 <_raise_r+0x12>
 8011628:	2100      	movs	r1, #0
 801162a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801162e:	4620      	mov	r0, r4
 8011630:	4798      	blx	r3
 8011632:	2000      	movs	r0, #0
 8011634:	e7e0      	b.n	80115f8 <_raise_r+0x12>
	...

08011638 <raise>:
 8011638:	4b02      	ldr	r3, [pc, #8]	@ (8011644 <raise+0xc>)
 801163a:	4601      	mov	r1, r0
 801163c:	6818      	ldr	r0, [r3, #0]
 801163e:	f7ff bfd2 	b.w	80115e6 <_raise_r>
 8011642:	bf00      	nop
 8011644:	2000007c 	.word	0x2000007c

08011648 <_fstat_r>:
 8011648:	b538      	push	{r3, r4, r5, lr}
 801164a:	4d07      	ldr	r5, [pc, #28]	@ (8011668 <_fstat_r+0x20>)
 801164c:	2300      	movs	r3, #0
 801164e:	4604      	mov	r4, r0
 8011650:	4608      	mov	r0, r1
 8011652:	4611      	mov	r1, r2
 8011654:	602b      	str	r3, [r5, #0]
 8011656:	f7f6 f8fc 	bl	8007852 <_fstat>
 801165a:	1c43      	adds	r3, r0, #1
 801165c:	d102      	bne.n	8011664 <_fstat_r+0x1c>
 801165e:	682b      	ldr	r3, [r5, #0]
 8011660:	b103      	cbz	r3, 8011664 <_fstat_r+0x1c>
 8011662:	6023      	str	r3, [r4, #0]
 8011664:	bd38      	pop	{r3, r4, r5, pc}
 8011666:	bf00      	nop
 8011668:	20002e7c 	.word	0x20002e7c

0801166c <_isatty_r>:
 801166c:	b538      	push	{r3, r4, r5, lr}
 801166e:	4d06      	ldr	r5, [pc, #24]	@ (8011688 <_isatty_r+0x1c>)
 8011670:	2300      	movs	r3, #0
 8011672:	4604      	mov	r4, r0
 8011674:	4608      	mov	r0, r1
 8011676:	602b      	str	r3, [r5, #0]
 8011678:	f7f6 f8fb 	bl	8007872 <_isatty>
 801167c:	1c43      	adds	r3, r0, #1
 801167e:	d102      	bne.n	8011686 <_isatty_r+0x1a>
 8011680:	682b      	ldr	r3, [r5, #0]
 8011682:	b103      	cbz	r3, 8011686 <_isatty_r+0x1a>
 8011684:	6023      	str	r3, [r4, #0]
 8011686:	bd38      	pop	{r3, r4, r5, pc}
 8011688:	20002e7c 	.word	0x20002e7c

0801168c <_kill_r>:
 801168c:	b538      	push	{r3, r4, r5, lr}
 801168e:	4d07      	ldr	r5, [pc, #28]	@ (80116ac <_kill_r+0x20>)
 8011690:	2300      	movs	r3, #0
 8011692:	4604      	mov	r4, r0
 8011694:	4608      	mov	r0, r1
 8011696:	4611      	mov	r1, r2
 8011698:	602b      	str	r3, [r5, #0]
 801169a:	f7f6 f87a 	bl	8007792 <_kill>
 801169e:	1c43      	adds	r3, r0, #1
 80116a0:	d102      	bne.n	80116a8 <_kill_r+0x1c>
 80116a2:	682b      	ldr	r3, [r5, #0]
 80116a4:	b103      	cbz	r3, 80116a8 <_kill_r+0x1c>
 80116a6:	6023      	str	r3, [r4, #0]
 80116a8:	bd38      	pop	{r3, r4, r5, pc}
 80116aa:	bf00      	nop
 80116ac:	20002e7c 	.word	0x20002e7c

080116b0 <_getpid_r>:
 80116b0:	f7f6 b867 	b.w	8007782 <_getpid>

080116b4 <sqrt>:
 80116b4:	b538      	push	{r3, r4, r5, lr}
 80116b6:	ed2d 8b02 	vpush	{d8}
 80116ba:	ec55 4b10 	vmov	r4, r5, d0
 80116be:	f000 f8a7 	bl	8011810 <__ieee754_sqrt>
 80116c2:	4622      	mov	r2, r4
 80116c4:	462b      	mov	r3, r5
 80116c6:	4620      	mov	r0, r4
 80116c8:	4629      	mov	r1, r5
 80116ca:	eeb0 8a40 	vmov.f32	s16, s0
 80116ce:	eef0 8a60 	vmov.f32	s17, s1
 80116d2:	f7ef fa03 	bl	8000adc <__aeabi_dcmpun>
 80116d6:	b990      	cbnz	r0, 80116fe <sqrt+0x4a>
 80116d8:	2200      	movs	r2, #0
 80116da:	2300      	movs	r3, #0
 80116dc:	4620      	mov	r0, r4
 80116de:	4629      	mov	r1, r5
 80116e0:	f7ef f9d4 	bl	8000a8c <__aeabi_dcmplt>
 80116e4:	b158      	cbz	r0, 80116fe <sqrt+0x4a>
 80116e6:	f7ff f989 	bl	80109fc <__errno>
 80116ea:	2321      	movs	r3, #33	@ 0x21
 80116ec:	6003      	str	r3, [r0, #0]
 80116ee:	2200      	movs	r2, #0
 80116f0:	2300      	movs	r3, #0
 80116f2:	4610      	mov	r0, r2
 80116f4:	4619      	mov	r1, r3
 80116f6:	f7ef f881 	bl	80007fc <__aeabi_ddiv>
 80116fa:	ec41 0b18 	vmov	d8, r0, r1
 80116fe:	eeb0 0a48 	vmov.f32	s0, s16
 8011702:	eef0 0a68 	vmov.f32	s1, s17
 8011706:	ecbd 8b02 	vpop	{d8}
 801170a:	bd38      	pop	{r3, r4, r5, pc}

0801170c <atan2f>:
 801170c:	f000 b9a2 	b.w	8011a54 <__ieee754_atan2f>

08011710 <powf>:
 8011710:	b508      	push	{r3, lr}
 8011712:	ed2d 8b04 	vpush	{d8-d9}
 8011716:	eeb0 8a60 	vmov.f32	s16, s1
 801171a:	eeb0 9a40 	vmov.f32	s18, s0
 801171e:	f000 fa39 	bl	8011b94 <__ieee754_powf>
 8011722:	eeb4 8a48 	vcmp.f32	s16, s16
 8011726:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801172a:	eef0 8a40 	vmov.f32	s17, s0
 801172e:	d63e      	bvs.n	80117ae <powf+0x9e>
 8011730:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8011734:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011738:	d112      	bne.n	8011760 <powf+0x50>
 801173a:	eeb5 8a40 	vcmp.f32	s16, #0.0
 801173e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011742:	d039      	beq.n	80117b8 <powf+0xa8>
 8011744:	eeb0 0a48 	vmov.f32	s0, s16
 8011748:	f000 f858 	bl	80117fc <finitef>
 801174c:	b378      	cbz	r0, 80117ae <powf+0x9e>
 801174e:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8011752:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011756:	d52a      	bpl.n	80117ae <powf+0x9e>
 8011758:	f7ff f950 	bl	80109fc <__errno>
 801175c:	2322      	movs	r3, #34	@ 0x22
 801175e:	e014      	b.n	801178a <powf+0x7a>
 8011760:	f000 f84c 	bl	80117fc <finitef>
 8011764:	b998      	cbnz	r0, 801178e <powf+0x7e>
 8011766:	eeb0 0a49 	vmov.f32	s0, s18
 801176a:	f000 f847 	bl	80117fc <finitef>
 801176e:	b170      	cbz	r0, 801178e <powf+0x7e>
 8011770:	eeb0 0a48 	vmov.f32	s0, s16
 8011774:	f000 f842 	bl	80117fc <finitef>
 8011778:	b148      	cbz	r0, 801178e <powf+0x7e>
 801177a:	eef4 8a68 	vcmp.f32	s17, s17
 801177e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011782:	d7e9      	bvc.n	8011758 <powf+0x48>
 8011784:	f7ff f93a 	bl	80109fc <__errno>
 8011788:	2321      	movs	r3, #33	@ 0x21
 801178a:	6003      	str	r3, [r0, #0]
 801178c:	e00f      	b.n	80117ae <powf+0x9e>
 801178e:	eef5 8a40 	vcmp.f32	s17, #0.0
 8011792:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011796:	d10a      	bne.n	80117ae <powf+0x9e>
 8011798:	eeb0 0a49 	vmov.f32	s0, s18
 801179c:	f000 f82e 	bl	80117fc <finitef>
 80117a0:	b128      	cbz	r0, 80117ae <powf+0x9e>
 80117a2:	eeb0 0a48 	vmov.f32	s0, s16
 80117a6:	f000 f829 	bl	80117fc <finitef>
 80117aa:	2800      	cmp	r0, #0
 80117ac:	d1d4      	bne.n	8011758 <powf+0x48>
 80117ae:	eeb0 0a68 	vmov.f32	s0, s17
 80117b2:	ecbd 8b04 	vpop	{d8-d9}
 80117b6:	bd08      	pop	{r3, pc}
 80117b8:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 80117bc:	e7f7      	b.n	80117ae <powf+0x9e>
	...

080117c0 <sqrtf>:
 80117c0:	b508      	push	{r3, lr}
 80117c2:	ed2d 8b02 	vpush	{d8}
 80117c6:	eeb0 8a40 	vmov.f32	s16, s0
 80117ca:	f000 f8fb 	bl	80119c4 <__ieee754_sqrtf>
 80117ce:	eeb4 8a48 	vcmp.f32	s16, s16
 80117d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80117d6:	d60c      	bvs.n	80117f2 <sqrtf+0x32>
 80117d8:	eddf 8a07 	vldr	s17, [pc, #28]	@ 80117f8 <sqrtf+0x38>
 80117dc:	eeb4 8ae8 	vcmpe.f32	s16, s17
 80117e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80117e4:	d505      	bpl.n	80117f2 <sqrtf+0x32>
 80117e6:	f7ff f909 	bl	80109fc <__errno>
 80117ea:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 80117ee:	2321      	movs	r3, #33	@ 0x21
 80117f0:	6003      	str	r3, [r0, #0]
 80117f2:	ecbd 8b02 	vpop	{d8}
 80117f6:	bd08      	pop	{r3, pc}
 80117f8:	00000000 	.word	0x00000000

080117fc <finitef>:
 80117fc:	ee10 3a10 	vmov	r3, s0
 8011800:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 8011804:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 8011808:	bfac      	ite	ge
 801180a:	2000      	movge	r0, #0
 801180c:	2001      	movlt	r0, #1
 801180e:	4770      	bx	lr

08011810 <__ieee754_sqrt>:
 8011810:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011814:	4a68      	ldr	r2, [pc, #416]	@ (80119b8 <__ieee754_sqrt+0x1a8>)
 8011816:	ec55 4b10 	vmov	r4, r5, d0
 801181a:	43aa      	bics	r2, r5
 801181c:	462b      	mov	r3, r5
 801181e:	4621      	mov	r1, r4
 8011820:	d110      	bne.n	8011844 <__ieee754_sqrt+0x34>
 8011822:	4622      	mov	r2, r4
 8011824:	4620      	mov	r0, r4
 8011826:	4629      	mov	r1, r5
 8011828:	f7ee febe 	bl	80005a8 <__aeabi_dmul>
 801182c:	4602      	mov	r2, r0
 801182e:	460b      	mov	r3, r1
 8011830:	4620      	mov	r0, r4
 8011832:	4629      	mov	r1, r5
 8011834:	f7ee fd02 	bl	800023c <__adddf3>
 8011838:	4604      	mov	r4, r0
 801183a:	460d      	mov	r5, r1
 801183c:	ec45 4b10 	vmov	d0, r4, r5
 8011840:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011844:	2d00      	cmp	r5, #0
 8011846:	dc0e      	bgt.n	8011866 <__ieee754_sqrt+0x56>
 8011848:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 801184c:	4322      	orrs	r2, r4
 801184e:	d0f5      	beq.n	801183c <__ieee754_sqrt+0x2c>
 8011850:	b19d      	cbz	r5, 801187a <__ieee754_sqrt+0x6a>
 8011852:	4622      	mov	r2, r4
 8011854:	4620      	mov	r0, r4
 8011856:	4629      	mov	r1, r5
 8011858:	f7ee fcee 	bl	8000238 <__aeabi_dsub>
 801185c:	4602      	mov	r2, r0
 801185e:	460b      	mov	r3, r1
 8011860:	f7ee ffcc 	bl	80007fc <__aeabi_ddiv>
 8011864:	e7e8      	b.n	8011838 <__ieee754_sqrt+0x28>
 8011866:	152a      	asrs	r2, r5, #20
 8011868:	d115      	bne.n	8011896 <__ieee754_sqrt+0x86>
 801186a:	2000      	movs	r0, #0
 801186c:	e009      	b.n	8011882 <__ieee754_sqrt+0x72>
 801186e:	0acb      	lsrs	r3, r1, #11
 8011870:	3a15      	subs	r2, #21
 8011872:	0549      	lsls	r1, r1, #21
 8011874:	2b00      	cmp	r3, #0
 8011876:	d0fa      	beq.n	801186e <__ieee754_sqrt+0x5e>
 8011878:	e7f7      	b.n	801186a <__ieee754_sqrt+0x5a>
 801187a:	462a      	mov	r2, r5
 801187c:	e7fa      	b.n	8011874 <__ieee754_sqrt+0x64>
 801187e:	005b      	lsls	r3, r3, #1
 8011880:	3001      	adds	r0, #1
 8011882:	02dc      	lsls	r4, r3, #11
 8011884:	d5fb      	bpl.n	801187e <__ieee754_sqrt+0x6e>
 8011886:	1e44      	subs	r4, r0, #1
 8011888:	1b12      	subs	r2, r2, r4
 801188a:	f1c0 0420 	rsb	r4, r0, #32
 801188e:	fa21 f404 	lsr.w	r4, r1, r4
 8011892:	4323      	orrs	r3, r4
 8011894:	4081      	lsls	r1, r0
 8011896:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801189a:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 801189e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80118a2:	07d2      	lsls	r2, r2, #31
 80118a4:	bf5c      	itt	pl
 80118a6:	005b      	lslpl	r3, r3, #1
 80118a8:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 80118ac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80118b0:	bf58      	it	pl
 80118b2:	0049      	lslpl	r1, r1, #1
 80118b4:	2600      	movs	r6, #0
 80118b6:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 80118ba:	106d      	asrs	r5, r5, #1
 80118bc:	0049      	lsls	r1, r1, #1
 80118be:	2016      	movs	r0, #22
 80118c0:	4632      	mov	r2, r6
 80118c2:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 80118c6:	1917      	adds	r7, r2, r4
 80118c8:	429f      	cmp	r7, r3
 80118ca:	bfde      	ittt	le
 80118cc:	193a      	addle	r2, r7, r4
 80118ce:	1bdb      	suble	r3, r3, r7
 80118d0:	1936      	addle	r6, r6, r4
 80118d2:	0fcf      	lsrs	r7, r1, #31
 80118d4:	3801      	subs	r0, #1
 80118d6:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 80118da:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80118de:	ea4f 0454 	mov.w	r4, r4, lsr #1
 80118e2:	d1f0      	bne.n	80118c6 <__ieee754_sqrt+0xb6>
 80118e4:	4604      	mov	r4, r0
 80118e6:	2720      	movs	r7, #32
 80118e8:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80118ec:	429a      	cmp	r2, r3
 80118ee:	eb00 0e0c 	add.w	lr, r0, ip
 80118f2:	db02      	blt.n	80118fa <__ieee754_sqrt+0xea>
 80118f4:	d113      	bne.n	801191e <__ieee754_sqrt+0x10e>
 80118f6:	458e      	cmp	lr, r1
 80118f8:	d811      	bhi.n	801191e <__ieee754_sqrt+0x10e>
 80118fa:	f1be 0f00 	cmp.w	lr, #0
 80118fe:	eb0e 000c 	add.w	r0, lr, ip
 8011902:	da42      	bge.n	801198a <__ieee754_sqrt+0x17a>
 8011904:	2800      	cmp	r0, #0
 8011906:	db40      	blt.n	801198a <__ieee754_sqrt+0x17a>
 8011908:	f102 0801 	add.w	r8, r2, #1
 801190c:	1a9b      	subs	r3, r3, r2
 801190e:	458e      	cmp	lr, r1
 8011910:	bf88      	it	hi
 8011912:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8011916:	eba1 010e 	sub.w	r1, r1, lr
 801191a:	4464      	add	r4, ip
 801191c:	4642      	mov	r2, r8
 801191e:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8011922:	3f01      	subs	r7, #1
 8011924:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8011928:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801192c:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8011930:	d1dc      	bne.n	80118ec <__ieee754_sqrt+0xdc>
 8011932:	4319      	orrs	r1, r3
 8011934:	d01b      	beq.n	801196e <__ieee754_sqrt+0x15e>
 8011936:	f8df a084 	ldr.w	sl, [pc, #132]	@ 80119bc <__ieee754_sqrt+0x1ac>
 801193a:	f8df b084 	ldr.w	fp, [pc, #132]	@ 80119c0 <__ieee754_sqrt+0x1b0>
 801193e:	e9da 0100 	ldrd	r0, r1, [sl]
 8011942:	e9db 2300 	ldrd	r2, r3, [fp]
 8011946:	f7ee fc77 	bl	8000238 <__aeabi_dsub>
 801194a:	e9da 8900 	ldrd	r8, r9, [sl]
 801194e:	4602      	mov	r2, r0
 8011950:	460b      	mov	r3, r1
 8011952:	4640      	mov	r0, r8
 8011954:	4649      	mov	r1, r9
 8011956:	f7ef f8a3 	bl	8000aa0 <__aeabi_dcmple>
 801195a:	b140      	cbz	r0, 801196e <__ieee754_sqrt+0x15e>
 801195c:	f1b4 3fff 	cmp.w	r4, #4294967295
 8011960:	e9da 0100 	ldrd	r0, r1, [sl]
 8011964:	e9db 2300 	ldrd	r2, r3, [fp]
 8011968:	d111      	bne.n	801198e <__ieee754_sqrt+0x17e>
 801196a:	3601      	adds	r6, #1
 801196c:	463c      	mov	r4, r7
 801196e:	1072      	asrs	r2, r6, #1
 8011970:	0863      	lsrs	r3, r4, #1
 8011972:	07f1      	lsls	r1, r6, #31
 8011974:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8011978:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 801197c:	bf48      	it	mi
 801197e:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8011982:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 8011986:	4618      	mov	r0, r3
 8011988:	e756      	b.n	8011838 <__ieee754_sqrt+0x28>
 801198a:	4690      	mov	r8, r2
 801198c:	e7be      	b.n	801190c <__ieee754_sqrt+0xfc>
 801198e:	f7ee fc55 	bl	800023c <__adddf3>
 8011992:	e9da 8900 	ldrd	r8, r9, [sl]
 8011996:	4602      	mov	r2, r0
 8011998:	460b      	mov	r3, r1
 801199a:	4640      	mov	r0, r8
 801199c:	4649      	mov	r1, r9
 801199e:	f7ef f875 	bl	8000a8c <__aeabi_dcmplt>
 80119a2:	b120      	cbz	r0, 80119ae <__ieee754_sqrt+0x19e>
 80119a4:	1ca0      	adds	r0, r4, #2
 80119a6:	bf08      	it	eq
 80119a8:	3601      	addeq	r6, #1
 80119aa:	3402      	adds	r4, #2
 80119ac:	e7df      	b.n	801196e <__ieee754_sqrt+0x15e>
 80119ae:	1c63      	adds	r3, r4, #1
 80119b0:	f023 0401 	bic.w	r4, r3, #1
 80119b4:	e7db      	b.n	801196e <__ieee754_sqrt+0x15e>
 80119b6:	bf00      	nop
 80119b8:	7ff00000 	.word	0x7ff00000
 80119bc:	200000d8 	.word	0x200000d8
 80119c0:	200000d0 	.word	0x200000d0

080119c4 <__ieee754_sqrtf>:
 80119c4:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80119c8:	4770      	bx	lr
	...

080119cc <floorf>:
 80119cc:	ee10 3a10 	vmov	r3, s0
 80119d0:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80119d4:	3a7f      	subs	r2, #127	@ 0x7f
 80119d6:	2a16      	cmp	r2, #22
 80119d8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80119dc:	dc2b      	bgt.n	8011a36 <floorf+0x6a>
 80119de:	2a00      	cmp	r2, #0
 80119e0:	da12      	bge.n	8011a08 <floorf+0x3c>
 80119e2:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8011a48 <floorf+0x7c>
 80119e6:	ee30 0a27 	vadd.f32	s0, s0, s15
 80119ea:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80119ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80119f2:	dd06      	ble.n	8011a02 <floorf+0x36>
 80119f4:	2b00      	cmp	r3, #0
 80119f6:	da24      	bge.n	8011a42 <floorf+0x76>
 80119f8:	2900      	cmp	r1, #0
 80119fa:	4b14      	ldr	r3, [pc, #80]	@ (8011a4c <floorf+0x80>)
 80119fc:	bf08      	it	eq
 80119fe:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 8011a02:	ee00 3a10 	vmov	s0, r3
 8011a06:	4770      	bx	lr
 8011a08:	4911      	ldr	r1, [pc, #68]	@ (8011a50 <floorf+0x84>)
 8011a0a:	4111      	asrs	r1, r2
 8011a0c:	420b      	tst	r3, r1
 8011a0e:	d0fa      	beq.n	8011a06 <floorf+0x3a>
 8011a10:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 8011a48 <floorf+0x7c>
 8011a14:	ee30 0a27 	vadd.f32	s0, s0, s15
 8011a18:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8011a1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a20:	ddef      	ble.n	8011a02 <floorf+0x36>
 8011a22:	2b00      	cmp	r3, #0
 8011a24:	bfbe      	ittt	lt
 8011a26:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 8011a2a:	fa40 f202 	asrlt.w	r2, r0, r2
 8011a2e:	189b      	addlt	r3, r3, r2
 8011a30:	ea23 0301 	bic.w	r3, r3, r1
 8011a34:	e7e5      	b.n	8011a02 <floorf+0x36>
 8011a36:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8011a3a:	d3e4      	bcc.n	8011a06 <floorf+0x3a>
 8011a3c:	ee30 0a00 	vadd.f32	s0, s0, s0
 8011a40:	4770      	bx	lr
 8011a42:	2300      	movs	r3, #0
 8011a44:	e7dd      	b.n	8011a02 <floorf+0x36>
 8011a46:	bf00      	nop
 8011a48:	7149f2ca 	.word	0x7149f2ca
 8011a4c:	bf800000 	.word	0xbf800000
 8011a50:	007fffff 	.word	0x007fffff

08011a54 <__ieee754_atan2f>:
 8011a54:	ee10 2a90 	vmov	r2, s1
 8011a58:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 8011a5c:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8011a60:	b510      	push	{r4, lr}
 8011a62:	eef0 7a40 	vmov.f32	s15, s0
 8011a66:	d806      	bhi.n	8011a76 <__ieee754_atan2f+0x22>
 8011a68:	ee10 0a10 	vmov	r0, s0
 8011a6c:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 8011a70:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8011a74:	d904      	bls.n	8011a80 <__ieee754_atan2f+0x2c>
 8011a76:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8011a7a:	eeb0 0a67 	vmov.f32	s0, s15
 8011a7e:	bd10      	pop	{r4, pc}
 8011a80:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 8011a84:	d103      	bne.n	8011a8e <__ieee754_atan2f+0x3a>
 8011a86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011a8a:	f000 bb53 	b.w	8012134 <atanf>
 8011a8e:	1794      	asrs	r4, r2, #30
 8011a90:	f004 0402 	and.w	r4, r4, #2
 8011a94:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8011a98:	b943      	cbnz	r3, 8011aac <__ieee754_atan2f+0x58>
 8011a9a:	2c02      	cmp	r4, #2
 8011a9c:	d05e      	beq.n	8011b5c <__ieee754_atan2f+0x108>
 8011a9e:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8011b70 <__ieee754_atan2f+0x11c>
 8011aa2:	2c03      	cmp	r4, #3
 8011aa4:	bf08      	it	eq
 8011aa6:	eef0 7a47 	vmoveq.f32	s15, s14
 8011aaa:	e7e6      	b.n	8011a7a <__ieee754_atan2f+0x26>
 8011aac:	b941      	cbnz	r1, 8011ac0 <__ieee754_atan2f+0x6c>
 8011aae:	eddf 7a31 	vldr	s15, [pc, #196]	@ 8011b74 <__ieee754_atan2f+0x120>
 8011ab2:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8011b78 <__ieee754_atan2f+0x124>
 8011ab6:	2800      	cmp	r0, #0
 8011ab8:	bfb8      	it	lt
 8011aba:	eef0 7a47 	vmovlt.f32	s15, s14
 8011abe:	e7dc      	b.n	8011a7a <__ieee754_atan2f+0x26>
 8011ac0:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8011ac4:	d110      	bne.n	8011ae8 <__ieee754_atan2f+0x94>
 8011ac6:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8011aca:	f104 34ff 	add.w	r4, r4, #4294967295
 8011ace:	d107      	bne.n	8011ae0 <__ieee754_atan2f+0x8c>
 8011ad0:	2c02      	cmp	r4, #2
 8011ad2:	d846      	bhi.n	8011b62 <__ieee754_atan2f+0x10e>
 8011ad4:	4b29      	ldr	r3, [pc, #164]	@ (8011b7c <__ieee754_atan2f+0x128>)
 8011ad6:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8011ada:	edd3 7a00 	vldr	s15, [r3]
 8011ade:	e7cc      	b.n	8011a7a <__ieee754_atan2f+0x26>
 8011ae0:	2c02      	cmp	r4, #2
 8011ae2:	d841      	bhi.n	8011b68 <__ieee754_atan2f+0x114>
 8011ae4:	4b26      	ldr	r3, [pc, #152]	@ (8011b80 <__ieee754_atan2f+0x12c>)
 8011ae6:	e7f6      	b.n	8011ad6 <__ieee754_atan2f+0x82>
 8011ae8:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8011aec:	d0df      	beq.n	8011aae <__ieee754_atan2f+0x5a>
 8011aee:	1a5b      	subs	r3, r3, r1
 8011af0:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 8011af4:	ea4f 51e3 	mov.w	r1, r3, asr #23
 8011af8:	da1a      	bge.n	8011b30 <__ieee754_atan2f+0xdc>
 8011afa:	2a00      	cmp	r2, #0
 8011afc:	da01      	bge.n	8011b02 <__ieee754_atan2f+0xae>
 8011afe:	313c      	adds	r1, #60	@ 0x3c
 8011b00:	db19      	blt.n	8011b36 <__ieee754_atan2f+0xe2>
 8011b02:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 8011b06:	f000 fbe9 	bl	80122dc <fabsf>
 8011b0a:	f000 fb13 	bl	8012134 <atanf>
 8011b0e:	eef0 7a40 	vmov.f32	s15, s0
 8011b12:	2c01      	cmp	r4, #1
 8011b14:	d012      	beq.n	8011b3c <__ieee754_atan2f+0xe8>
 8011b16:	2c02      	cmp	r4, #2
 8011b18:	d017      	beq.n	8011b4a <__ieee754_atan2f+0xf6>
 8011b1a:	2c00      	cmp	r4, #0
 8011b1c:	d0ad      	beq.n	8011a7a <__ieee754_atan2f+0x26>
 8011b1e:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8011b84 <__ieee754_atan2f+0x130>
 8011b22:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011b26:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8011b88 <__ieee754_atan2f+0x134>
 8011b2a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011b2e:	e7a4      	b.n	8011a7a <__ieee754_atan2f+0x26>
 8011b30:	eddf 7a10 	vldr	s15, [pc, #64]	@ 8011b74 <__ieee754_atan2f+0x120>
 8011b34:	e7ed      	b.n	8011b12 <__ieee754_atan2f+0xbe>
 8011b36:	eddf 7a15 	vldr	s15, [pc, #84]	@ 8011b8c <__ieee754_atan2f+0x138>
 8011b3a:	e7ea      	b.n	8011b12 <__ieee754_atan2f+0xbe>
 8011b3c:	ee17 3a90 	vmov	r3, s15
 8011b40:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8011b44:	ee07 3a90 	vmov	s15, r3
 8011b48:	e797      	b.n	8011a7a <__ieee754_atan2f+0x26>
 8011b4a:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8011b84 <__ieee754_atan2f+0x130>
 8011b4e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011b52:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8011b88 <__ieee754_atan2f+0x134>
 8011b56:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011b5a:	e78e      	b.n	8011a7a <__ieee754_atan2f+0x26>
 8011b5c:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 8011b88 <__ieee754_atan2f+0x134>
 8011b60:	e78b      	b.n	8011a7a <__ieee754_atan2f+0x26>
 8011b62:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 8011b90 <__ieee754_atan2f+0x13c>
 8011b66:	e788      	b.n	8011a7a <__ieee754_atan2f+0x26>
 8011b68:	eddf 7a08 	vldr	s15, [pc, #32]	@ 8011b8c <__ieee754_atan2f+0x138>
 8011b6c:	e785      	b.n	8011a7a <__ieee754_atan2f+0x26>
 8011b6e:	bf00      	nop
 8011b70:	c0490fdb 	.word	0xc0490fdb
 8011b74:	3fc90fdb 	.word	0x3fc90fdb
 8011b78:	bfc90fdb 	.word	0xbfc90fdb
 8011b7c:	08012780 	.word	0x08012780
 8011b80:	08012774 	.word	0x08012774
 8011b84:	33bbbd2e 	.word	0x33bbbd2e
 8011b88:	40490fdb 	.word	0x40490fdb
 8011b8c:	00000000 	.word	0x00000000
 8011b90:	3f490fdb 	.word	0x3f490fdb

08011b94 <__ieee754_powf>:
 8011b94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011b98:	ee10 4a90 	vmov	r4, s1
 8011b9c:	f034 4900 	bics.w	r9, r4, #2147483648	@ 0x80000000
 8011ba0:	ed2d 8b02 	vpush	{d8}
 8011ba4:	ee10 6a10 	vmov	r6, s0
 8011ba8:	eeb0 8a40 	vmov.f32	s16, s0
 8011bac:	eef0 8a60 	vmov.f32	s17, s1
 8011bb0:	d10c      	bne.n	8011bcc <__ieee754_powf+0x38>
 8011bb2:	f486 0680 	eor.w	r6, r6, #4194304	@ 0x400000
 8011bb6:	0076      	lsls	r6, r6, #1
 8011bb8:	f516 0f00 	cmn.w	r6, #8388608	@ 0x800000
 8011bbc:	f240 829c 	bls.w	80120f8 <__ieee754_powf+0x564>
 8011bc0:	ee38 0a28 	vadd.f32	s0, s16, s17
 8011bc4:	ecbd 8b02 	vpop	{d8}
 8011bc8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011bcc:	f026 4800 	bic.w	r8, r6, #2147483648	@ 0x80000000
 8011bd0:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 8011bd4:	d802      	bhi.n	8011bdc <__ieee754_powf+0x48>
 8011bd6:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 8011bda:	d908      	bls.n	8011bee <__ieee754_powf+0x5a>
 8011bdc:	f1b6 5f7e 	cmp.w	r6, #1065353216	@ 0x3f800000
 8011be0:	d1ee      	bne.n	8011bc0 <__ieee754_powf+0x2c>
 8011be2:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 8011be6:	0064      	lsls	r4, r4, #1
 8011be8:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 8011bec:	e7e6      	b.n	8011bbc <__ieee754_powf+0x28>
 8011bee:	2e00      	cmp	r6, #0
 8011bf0:	da1e      	bge.n	8011c30 <__ieee754_powf+0x9c>
 8011bf2:	f1b9 4f97 	cmp.w	r9, #1266679808	@ 0x4b800000
 8011bf6:	d22b      	bcs.n	8011c50 <__ieee754_powf+0xbc>
 8011bf8:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 8011bfc:	d332      	bcc.n	8011c64 <__ieee754_powf+0xd0>
 8011bfe:	ea4f 53e9 	mov.w	r3, r9, asr #23
 8011c02:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 8011c06:	fa49 f503 	asr.w	r5, r9, r3
 8011c0a:	fa05 f303 	lsl.w	r3, r5, r3
 8011c0e:	454b      	cmp	r3, r9
 8011c10:	d126      	bne.n	8011c60 <__ieee754_powf+0xcc>
 8011c12:	f005 0501 	and.w	r5, r5, #1
 8011c16:	f1c5 0502 	rsb	r5, r5, #2
 8011c1a:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 8011c1e:	d122      	bne.n	8011c66 <__ieee754_powf+0xd2>
 8011c20:	2c00      	cmp	r4, #0
 8011c22:	f280 826f 	bge.w	8012104 <__ieee754_powf+0x570>
 8011c26:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8011c2a:	ee87 0a88 	vdiv.f32	s0, s15, s16
 8011c2e:	e7c9      	b.n	8011bc4 <__ieee754_powf+0x30>
 8011c30:	2500      	movs	r5, #0
 8011c32:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 8011c36:	d1f0      	bne.n	8011c1a <__ieee754_powf+0x86>
 8011c38:	f1b8 5f7e 	cmp.w	r8, #1065353216	@ 0x3f800000
 8011c3c:	f000 825c 	beq.w	80120f8 <__ieee754_powf+0x564>
 8011c40:	d908      	bls.n	8011c54 <__ieee754_powf+0xc0>
 8011c42:	ed9f 0ad8 	vldr	s0, [pc, #864]	@ 8011fa4 <__ieee754_powf+0x410>
 8011c46:	2c00      	cmp	r4, #0
 8011c48:	bfa8      	it	ge
 8011c4a:	eeb0 0a68 	vmovge.f32	s0, s17
 8011c4e:	e7b9      	b.n	8011bc4 <__ieee754_powf+0x30>
 8011c50:	2502      	movs	r5, #2
 8011c52:	e7ee      	b.n	8011c32 <__ieee754_powf+0x9e>
 8011c54:	2c00      	cmp	r4, #0
 8011c56:	f280 8252 	bge.w	80120fe <__ieee754_powf+0x56a>
 8011c5a:	eeb1 0a68 	vneg.f32	s0, s17
 8011c5e:	e7b1      	b.n	8011bc4 <__ieee754_powf+0x30>
 8011c60:	2500      	movs	r5, #0
 8011c62:	e7da      	b.n	8011c1a <__ieee754_powf+0x86>
 8011c64:	2500      	movs	r5, #0
 8011c66:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 8011c6a:	d102      	bne.n	8011c72 <__ieee754_powf+0xde>
 8011c6c:	ee28 0a08 	vmul.f32	s0, s16, s16
 8011c70:	e7a8      	b.n	8011bc4 <__ieee754_powf+0x30>
 8011c72:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 8011c76:	d109      	bne.n	8011c8c <__ieee754_powf+0xf8>
 8011c78:	2e00      	cmp	r6, #0
 8011c7a:	db07      	blt.n	8011c8c <__ieee754_powf+0xf8>
 8011c7c:	eeb0 0a48 	vmov.f32	s0, s16
 8011c80:	ecbd 8b02 	vpop	{d8}
 8011c84:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011c88:	f7ff be9c 	b.w	80119c4 <__ieee754_sqrtf>
 8011c8c:	eeb0 0a48 	vmov.f32	s0, s16
 8011c90:	f000 fb24 	bl	80122dc <fabsf>
 8011c94:	f026 4340 	bic.w	r3, r6, #3221225472	@ 0xc0000000
 8011c98:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 8011c9c:	4647      	mov	r7, r8
 8011c9e:	d002      	beq.n	8011ca6 <__ieee754_powf+0x112>
 8011ca0:	f1b8 0f00 	cmp.w	r8, #0
 8011ca4:	d117      	bne.n	8011cd6 <__ieee754_powf+0x142>
 8011ca6:	2c00      	cmp	r4, #0
 8011ca8:	bfbc      	itt	lt
 8011caa:	eef7 7a00 	vmovlt.f32	s15, #112	@ 0x3f800000  1.0
 8011cae:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 8011cb2:	2e00      	cmp	r6, #0
 8011cb4:	da86      	bge.n	8011bc4 <__ieee754_powf+0x30>
 8011cb6:	f1a8 587e 	sub.w	r8, r8, #1065353216	@ 0x3f800000
 8011cba:	ea58 0805 	orrs.w	r8, r8, r5
 8011cbe:	d104      	bne.n	8011cca <__ieee754_powf+0x136>
 8011cc0:	ee70 7a40 	vsub.f32	s15, s0, s0
 8011cc4:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8011cc8:	e77c      	b.n	8011bc4 <__ieee754_powf+0x30>
 8011cca:	2d01      	cmp	r5, #1
 8011ccc:	f47f af7a 	bne.w	8011bc4 <__ieee754_powf+0x30>
 8011cd0:	eeb1 0a40 	vneg.f32	s0, s0
 8011cd4:	e776      	b.n	8011bc4 <__ieee754_powf+0x30>
 8011cd6:	0ff0      	lsrs	r0, r6, #31
 8011cd8:	3801      	subs	r0, #1
 8011cda:	ea55 0300 	orrs.w	r3, r5, r0
 8011cde:	d104      	bne.n	8011cea <__ieee754_powf+0x156>
 8011ce0:	ee38 8a48 	vsub.f32	s16, s16, s16
 8011ce4:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8011ce8:	e76c      	b.n	8011bc4 <__ieee754_powf+0x30>
 8011cea:	f1b9 4f9a 	cmp.w	r9, #1291845632	@ 0x4d000000
 8011cee:	d973      	bls.n	8011dd8 <__ieee754_powf+0x244>
 8011cf0:	4bad      	ldr	r3, [pc, #692]	@ (8011fa8 <__ieee754_powf+0x414>)
 8011cf2:	4598      	cmp	r8, r3
 8011cf4:	d808      	bhi.n	8011d08 <__ieee754_powf+0x174>
 8011cf6:	2c00      	cmp	r4, #0
 8011cf8:	da0b      	bge.n	8011d12 <__ieee754_powf+0x17e>
 8011cfa:	2000      	movs	r0, #0
 8011cfc:	ecbd 8b02 	vpop	{d8}
 8011d00:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011d04:	f000 bb78 	b.w	80123f8 <__math_oflowf>
 8011d08:	4ba8      	ldr	r3, [pc, #672]	@ (8011fac <__ieee754_powf+0x418>)
 8011d0a:	4598      	cmp	r8, r3
 8011d0c:	d908      	bls.n	8011d20 <__ieee754_powf+0x18c>
 8011d0e:	2c00      	cmp	r4, #0
 8011d10:	dcf3      	bgt.n	8011cfa <__ieee754_powf+0x166>
 8011d12:	2000      	movs	r0, #0
 8011d14:	ecbd 8b02 	vpop	{d8}
 8011d18:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011d1c:	f000 bb66 	b.w	80123ec <__math_uflowf>
 8011d20:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8011d24:	ee30 0a67 	vsub.f32	s0, s0, s15
 8011d28:	eddf 6aa1 	vldr	s13, [pc, #644]	@ 8011fb0 <__ieee754_powf+0x41c>
 8011d2c:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 8011d30:	eee0 6a67 	vfms.f32	s13, s0, s15
 8011d34:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8011d38:	eee6 7ac0 	vfms.f32	s15, s13, s0
 8011d3c:	ee20 7a00 	vmul.f32	s14, s0, s0
 8011d40:	ee27 7a27 	vmul.f32	s14, s14, s15
 8011d44:	eddf 7a9b 	vldr	s15, [pc, #620]	@ 8011fb4 <__ieee754_powf+0x420>
 8011d48:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 8011d4c:	ed9f 7a9a 	vldr	s14, [pc, #616]	@ 8011fb8 <__ieee754_powf+0x424>
 8011d50:	eee0 7a07 	vfma.f32	s15, s0, s14
 8011d54:	ed9f 7a99 	vldr	s14, [pc, #612]	@ 8011fbc <__ieee754_powf+0x428>
 8011d58:	eef0 6a67 	vmov.f32	s13, s15
 8011d5c:	eee0 6a07 	vfma.f32	s13, s0, s14
 8011d60:	ee16 3a90 	vmov	r3, s13
 8011d64:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8011d68:	f023 030f 	bic.w	r3, r3, #15
 8011d6c:	ee06 3a90 	vmov	s13, r3
 8011d70:	eee0 6a47 	vfms.f32	s13, s0, s14
 8011d74:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8011d78:	3d01      	subs	r5, #1
 8011d7a:	f424 647f 	bic.w	r4, r4, #4080	@ 0xff0
 8011d7e:	4305      	orrs	r5, r0
 8011d80:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8011d84:	f024 040f 	bic.w	r4, r4, #15
 8011d88:	eebf 8a00 	vmov.f32	s16, #240	@ 0xbf800000 -1.0
 8011d8c:	bf18      	it	ne
 8011d8e:	eeb0 8a47 	vmovne.f32	s16, s14
 8011d92:	ee07 4a10 	vmov	s14, r4
 8011d96:	ee67 0aa8 	vmul.f32	s1, s15, s17
 8011d9a:	ee38 7ac7 	vsub.f32	s14, s17, s14
 8011d9e:	ee07 3a90 	vmov	s15, r3
 8011da2:	eee7 0a27 	vfma.f32	s1, s14, s15
 8011da6:	ee07 4a10 	vmov	s14, r4
 8011daa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8011dae:	ee30 7aa7 	vadd.f32	s14, s1, s15
 8011db2:	ee17 1a10 	vmov	r1, s14
 8011db6:	2900      	cmp	r1, #0
 8011db8:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8011dbc:	f340 80dd 	ble.w	8011f7a <__ieee754_powf+0x3e6>
 8011dc0:	f1b3 4f86 	cmp.w	r3, #1124073472	@ 0x43000000
 8011dc4:	f240 80ca 	bls.w	8011f5c <__ieee754_powf+0x3c8>
 8011dc8:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8011dcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011dd0:	bf4c      	ite	mi
 8011dd2:	2001      	movmi	r0, #1
 8011dd4:	2000      	movpl	r0, #0
 8011dd6:	e791      	b.n	8011cfc <__ieee754_powf+0x168>
 8011dd8:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 8011ddc:	bf01      	itttt	eq
 8011dde:	eddf 7a78 	vldreq	s15, [pc, #480]	@ 8011fc0 <__ieee754_powf+0x42c>
 8011de2:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 8011de6:	f06f 0317 	mvneq.w	r3, #23
 8011dea:	ee17 7a90 	vmoveq	r7, s15
 8011dee:	ea4f 52e7 	mov.w	r2, r7, asr #23
 8011df2:	bf18      	it	ne
 8011df4:	2300      	movne	r3, #0
 8011df6:	3a7f      	subs	r2, #127	@ 0x7f
 8011df8:	441a      	add	r2, r3
 8011dfa:	4b72      	ldr	r3, [pc, #456]	@ (8011fc4 <__ieee754_powf+0x430>)
 8011dfc:	f3c7 0716 	ubfx	r7, r7, #0, #23
 8011e00:	429f      	cmp	r7, r3
 8011e02:	f047 517e 	orr.w	r1, r7, #1065353216	@ 0x3f800000
 8011e06:	dd06      	ble.n	8011e16 <__ieee754_powf+0x282>
 8011e08:	4b6f      	ldr	r3, [pc, #444]	@ (8011fc8 <__ieee754_powf+0x434>)
 8011e0a:	429f      	cmp	r7, r3
 8011e0c:	f340 80a4 	ble.w	8011f58 <__ieee754_powf+0x3c4>
 8011e10:	3201      	adds	r2, #1
 8011e12:	f5a1 0100 	sub.w	r1, r1, #8388608	@ 0x800000
 8011e16:	2600      	movs	r6, #0
 8011e18:	4b6c      	ldr	r3, [pc, #432]	@ (8011fcc <__ieee754_powf+0x438>)
 8011e1a:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 8011e1e:	ee07 1a10 	vmov	s14, r1
 8011e22:	edd3 5a00 	vldr	s11, [r3]
 8011e26:	4b6a      	ldr	r3, [pc, #424]	@ (8011fd0 <__ieee754_powf+0x43c>)
 8011e28:	ee75 7a87 	vadd.f32	s15, s11, s14
 8011e2c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8011e30:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 8011e34:	1049      	asrs	r1, r1, #1
 8011e36:	f041 5100 	orr.w	r1, r1, #536870912	@ 0x20000000
 8011e3a:	f501 2180 	add.w	r1, r1, #262144	@ 0x40000
 8011e3e:	eb01 5146 	add.w	r1, r1, r6, lsl #21
 8011e42:	ee37 6a65 	vsub.f32	s12, s14, s11
 8011e46:	ee07 1a90 	vmov	s15, r1
 8011e4a:	ee26 5a24 	vmul.f32	s10, s12, s9
 8011e4e:	ee77 5ae5 	vsub.f32	s11, s15, s11
 8011e52:	ee15 7a10 	vmov	r7, s10
 8011e56:	401f      	ands	r7, r3
 8011e58:	ee06 7a90 	vmov	s13, r7
 8011e5c:	eea6 6ae7 	vfms.f32	s12, s13, s15
 8011e60:	ee37 7a65 	vsub.f32	s14, s14, s11
 8011e64:	ee65 7a05 	vmul.f32	s15, s10, s10
 8011e68:	eea6 6ac7 	vfms.f32	s12, s13, s14
 8011e6c:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8011fd4 <__ieee754_powf+0x440>
 8011e70:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 8011fd8 <__ieee754_powf+0x444>
 8011e74:	eee7 5a87 	vfma.f32	s11, s15, s14
 8011e78:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 8011fdc <__ieee754_powf+0x448>
 8011e7c:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8011e80:	eddf 5a4b 	vldr	s11, [pc, #300]	@ 8011fb0 <__ieee754_powf+0x41c>
 8011e84:	eee7 5a27 	vfma.f32	s11, s14, s15
 8011e88:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 8011fe0 <__ieee754_powf+0x44c>
 8011e8c:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8011e90:	eddf 5a54 	vldr	s11, [pc, #336]	@ 8011fe4 <__ieee754_powf+0x450>
 8011e94:	ee26 6a24 	vmul.f32	s12, s12, s9
 8011e98:	eee7 5a27 	vfma.f32	s11, s14, s15
 8011e9c:	ee35 7a26 	vadd.f32	s14, s10, s13
 8011ea0:	ee67 4aa7 	vmul.f32	s9, s15, s15
 8011ea4:	ee27 7a06 	vmul.f32	s14, s14, s12
 8011ea8:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 8011eac:	eea4 7aa5 	vfma.f32	s14, s9, s11
 8011eb0:	eef0 5a67 	vmov.f32	s11, s15
 8011eb4:	eee6 5aa6 	vfma.f32	s11, s13, s13
 8011eb8:	ee75 5a87 	vadd.f32	s11, s11, s14
 8011ebc:	ee15 1a90 	vmov	r1, s11
 8011ec0:	4019      	ands	r1, r3
 8011ec2:	ee05 1a90 	vmov	s11, r1
 8011ec6:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8011eca:	eee6 7ae6 	vfms.f32	s15, s13, s13
 8011ece:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011ed2:	ee67 7a85 	vmul.f32	s15, s15, s10
 8011ed6:	eee6 7a25 	vfma.f32	s15, s12, s11
 8011eda:	eeb0 6a67 	vmov.f32	s12, s15
 8011ede:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8011ee2:	ee16 1a10 	vmov	r1, s12
 8011ee6:	4019      	ands	r1, r3
 8011ee8:	ee06 1a10 	vmov	s12, r1
 8011eec:	eeb0 7a46 	vmov.f32	s14, s12
 8011ef0:	eea6 7ae5 	vfms.f32	s14, s13, s11
 8011ef4:	493c      	ldr	r1, [pc, #240]	@ (8011fe8 <__ieee754_powf+0x454>)
 8011ef6:	eb01 0186 	add.w	r1, r1, r6, lsl #2
 8011efa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011efe:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 8011fec <__ieee754_powf+0x458>
 8011f02:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 8011ff0 <__ieee754_powf+0x45c>
 8011f06:	ee67 7a87 	vmul.f32	s15, s15, s14
 8011f0a:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 8011ff4 <__ieee754_powf+0x460>
 8011f0e:	eee6 7a07 	vfma.f32	s15, s12, s14
 8011f12:	ed91 7a00 	vldr	s14, [r1]
 8011f16:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011f1a:	ee07 2a10 	vmov	s14, r2
 8011f1e:	eef0 6a67 	vmov.f32	s13, s15
 8011f22:	4a35      	ldr	r2, [pc, #212]	@ (8011ff8 <__ieee754_powf+0x464>)
 8011f24:	eee6 6a25 	vfma.f32	s13, s12, s11
 8011f28:	eb02 0286 	add.w	r2, r2, r6, lsl #2
 8011f2c:	ed92 5a00 	vldr	s10, [r2]
 8011f30:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8011f34:	ee76 6a85 	vadd.f32	s13, s13, s10
 8011f38:	ee76 6a87 	vadd.f32	s13, s13, s14
 8011f3c:	ee16 2a90 	vmov	r2, s13
 8011f40:	4013      	ands	r3, r2
 8011f42:	ee06 3a90 	vmov	s13, r3
 8011f46:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8011f4a:	ee37 7a45 	vsub.f32	s14, s14, s10
 8011f4e:	eea6 7a65 	vfms.f32	s14, s12, s11
 8011f52:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011f56:	e70f      	b.n	8011d78 <__ieee754_powf+0x1e4>
 8011f58:	2601      	movs	r6, #1
 8011f5a:	e75d      	b.n	8011e18 <__ieee754_powf+0x284>
 8011f5c:	d152      	bne.n	8012004 <__ieee754_powf+0x470>
 8011f5e:	eddf 6a27 	vldr	s13, [pc, #156]	@ 8011ffc <__ieee754_powf+0x468>
 8011f62:	ee37 7a67 	vsub.f32	s14, s14, s15
 8011f66:	ee70 6aa6 	vadd.f32	s13, s1, s13
 8011f6a:	eef4 6ac7 	vcmpe.f32	s13, s14
 8011f6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011f72:	f73f af29 	bgt.w	8011dc8 <__ieee754_powf+0x234>
 8011f76:	2386      	movs	r3, #134	@ 0x86
 8011f78:	e048      	b.n	801200c <__ieee754_powf+0x478>
 8011f7a:	4a21      	ldr	r2, [pc, #132]	@ (8012000 <__ieee754_powf+0x46c>)
 8011f7c:	4293      	cmp	r3, r2
 8011f7e:	d907      	bls.n	8011f90 <__ieee754_powf+0x3fc>
 8011f80:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8011f84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011f88:	bf4c      	ite	mi
 8011f8a:	2001      	movmi	r0, #1
 8011f8c:	2000      	movpl	r0, #0
 8011f8e:	e6c1      	b.n	8011d14 <__ieee754_powf+0x180>
 8011f90:	d138      	bne.n	8012004 <__ieee754_powf+0x470>
 8011f92:	ee37 7a67 	vsub.f32	s14, s14, s15
 8011f96:	eeb4 7ae0 	vcmpe.f32	s14, s1
 8011f9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011f9e:	dbea      	blt.n	8011f76 <__ieee754_powf+0x3e2>
 8011fa0:	e7ee      	b.n	8011f80 <__ieee754_powf+0x3ec>
 8011fa2:	bf00      	nop
 8011fa4:	00000000 	.word	0x00000000
 8011fa8:	3f7ffff3 	.word	0x3f7ffff3
 8011fac:	3f800007 	.word	0x3f800007
 8011fb0:	3eaaaaab 	.word	0x3eaaaaab
 8011fb4:	3fb8aa3b 	.word	0x3fb8aa3b
 8011fb8:	36eca570 	.word	0x36eca570
 8011fbc:	3fb8aa00 	.word	0x3fb8aa00
 8011fc0:	4b800000 	.word	0x4b800000
 8011fc4:	001cc471 	.word	0x001cc471
 8011fc8:	005db3d6 	.word	0x005db3d6
 8011fcc:	0801279c 	.word	0x0801279c
 8011fd0:	fffff000 	.word	0xfffff000
 8011fd4:	3e6c3255 	.word	0x3e6c3255
 8011fd8:	3e53f142 	.word	0x3e53f142
 8011fdc:	3e8ba305 	.word	0x3e8ba305
 8011fe0:	3edb6db7 	.word	0x3edb6db7
 8011fe4:	3f19999a 	.word	0x3f19999a
 8011fe8:	0801278c 	.word	0x0801278c
 8011fec:	3f76384f 	.word	0x3f76384f
 8011ff0:	3f763800 	.word	0x3f763800
 8011ff4:	369dc3a0 	.word	0x369dc3a0
 8011ff8:	08012794 	.word	0x08012794
 8011ffc:	3338aa3c 	.word	0x3338aa3c
 8012000:	43160000 	.word	0x43160000
 8012004:	f1b3 5f7c 	cmp.w	r3, #1056964608	@ 0x3f000000
 8012008:	d971      	bls.n	80120ee <__ieee754_powf+0x55a>
 801200a:	15db      	asrs	r3, r3, #23
 801200c:	3b7e      	subs	r3, #126	@ 0x7e
 801200e:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8012012:	4118      	asrs	r0, r3
 8012014:	4408      	add	r0, r1
 8012016:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 801201a:	4a3c      	ldr	r2, [pc, #240]	@ (801210c <__ieee754_powf+0x578>)
 801201c:	3b7f      	subs	r3, #127	@ 0x7f
 801201e:	411a      	asrs	r2, r3
 8012020:	4002      	ands	r2, r0
 8012022:	ee07 2a10 	vmov	s14, r2
 8012026:	f3c0 0016 	ubfx	r0, r0, #0, #23
 801202a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 801202e:	f1c3 0317 	rsb	r3, r3, #23
 8012032:	4118      	asrs	r0, r3
 8012034:	2900      	cmp	r1, #0
 8012036:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801203a:	bfb8      	it	lt
 801203c:	4240      	neglt	r0, r0
 801203e:	ee37 7aa0 	vadd.f32	s14, s15, s1
 8012042:	eddf 6a33 	vldr	s13, [pc, #204]	@ 8012110 <__ieee754_powf+0x57c>
 8012046:	ed9f 6a33 	vldr	s12, [pc, #204]	@ 8012114 <__ieee754_powf+0x580>
 801204a:	ee17 3a10 	vmov	r3, s14
 801204e:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8012052:	f023 030f 	bic.w	r3, r3, #15
 8012056:	ee07 3a10 	vmov	s14, r3
 801205a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801205e:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8012062:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8012066:	eddf 7a2c 	vldr	s15, [pc, #176]	@ 8012118 <__ieee754_powf+0x584>
 801206a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801206e:	eee0 7aa6 	vfma.f32	s15, s1, s13
 8012072:	eef0 6a67 	vmov.f32	s13, s15
 8012076:	eee7 6a06 	vfma.f32	s13, s14, s12
 801207a:	eef0 5a66 	vmov.f32	s11, s13
 801207e:	eee7 5a46 	vfms.f32	s11, s14, s12
 8012082:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8012086:	ee77 7ae5 	vsub.f32	s15, s15, s11
 801208a:	ed9f 6a24 	vldr	s12, [pc, #144]	@ 801211c <__ieee754_powf+0x588>
 801208e:	eddf 5a24 	vldr	s11, [pc, #144]	@ 8012120 <__ieee754_powf+0x58c>
 8012092:	eea7 6a25 	vfma.f32	s12, s14, s11
 8012096:	eddf 5a23 	vldr	s11, [pc, #140]	@ 8012124 <__ieee754_powf+0x590>
 801209a:	eee6 5a07 	vfma.f32	s11, s12, s14
 801209e:	ed9f 6a22 	vldr	s12, [pc, #136]	@ 8012128 <__ieee754_powf+0x594>
 80120a2:	eea5 6a87 	vfma.f32	s12, s11, s14
 80120a6:	eddf 5a21 	vldr	s11, [pc, #132]	@ 801212c <__ieee754_powf+0x598>
 80120aa:	eee6 5a07 	vfma.f32	s11, s12, s14
 80120ae:	eeb0 6a66 	vmov.f32	s12, s13
 80120b2:	eea5 6ac7 	vfms.f32	s12, s11, s14
 80120b6:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 80120ba:	ee66 5a86 	vmul.f32	s11, s13, s12
 80120be:	ee36 6a47 	vsub.f32	s12, s12, s14
 80120c2:	eee6 7aa7 	vfma.f32	s15, s13, s15
 80120c6:	ee85 7a86 	vdiv.f32	s14, s11, s12
 80120ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 80120ce:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80120d2:	ee30 0a67 	vsub.f32	s0, s0, s15
 80120d6:	ee10 3a10 	vmov	r3, s0
 80120da:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 80120de:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80120e2:	da06      	bge.n	80120f2 <__ieee754_powf+0x55e>
 80120e4:	f000 f902 	bl	80122ec <scalbnf>
 80120e8:	ee20 0a08 	vmul.f32	s0, s0, s16
 80120ec:	e56a      	b.n	8011bc4 <__ieee754_powf+0x30>
 80120ee:	2000      	movs	r0, #0
 80120f0:	e7a5      	b.n	801203e <__ieee754_powf+0x4aa>
 80120f2:	ee00 3a10 	vmov	s0, r3
 80120f6:	e7f7      	b.n	80120e8 <__ieee754_powf+0x554>
 80120f8:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80120fc:	e562      	b.n	8011bc4 <__ieee754_powf+0x30>
 80120fe:	ed9f 0a0c 	vldr	s0, [pc, #48]	@ 8012130 <__ieee754_powf+0x59c>
 8012102:	e55f      	b.n	8011bc4 <__ieee754_powf+0x30>
 8012104:	eeb0 0a48 	vmov.f32	s0, s16
 8012108:	e55c      	b.n	8011bc4 <__ieee754_powf+0x30>
 801210a:	bf00      	nop
 801210c:	ff800000 	.word	0xff800000
 8012110:	3f317218 	.word	0x3f317218
 8012114:	3f317200 	.word	0x3f317200
 8012118:	35bfbe8c 	.word	0x35bfbe8c
 801211c:	b5ddea0e 	.word	0xb5ddea0e
 8012120:	3331bb4c 	.word	0x3331bb4c
 8012124:	388ab355 	.word	0x388ab355
 8012128:	bb360b61 	.word	0xbb360b61
 801212c:	3e2aaaab 	.word	0x3e2aaaab
 8012130:	00000000 	.word	0x00000000

08012134 <atanf>:
 8012134:	b538      	push	{r3, r4, r5, lr}
 8012136:	ee10 5a10 	vmov	r5, s0
 801213a:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 801213e:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 8012142:	eef0 7a40 	vmov.f32	s15, s0
 8012146:	d310      	bcc.n	801216a <atanf+0x36>
 8012148:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 801214c:	d904      	bls.n	8012158 <atanf+0x24>
 801214e:	ee70 7a00 	vadd.f32	s15, s0, s0
 8012152:	eeb0 0a67 	vmov.f32	s0, s15
 8012156:	bd38      	pop	{r3, r4, r5, pc}
 8012158:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 8012290 <atanf+0x15c>
 801215c:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 8012294 <atanf+0x160>
 8012160:	2d00      	cmp	r5, #0
 8012162:	bfc8      	it	gt
 8012164:	eef0 7a47 	vmovgt.f32	s15, s14
 8012168:	e7f3      	b.n	8012152 <atanf+0x1e>
 801216a:	4b4b      	ldr	r3, [pc, #300]	@ (8012298 <atanf+0x164>)
 801216c:	429c      	cmp	r4, r3
 801216e:	d810      	bhi.n	8012192 <atanf+0x5e>
 8012170:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 8012174:	d20a      	bcs.n	801218c <atanf+0x58>
 8012176:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 801229c <atanf+0x168>
 801217a:	ee30 7a07 	vadd.f32	s14, s0, s14
 801217e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8012182:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8012186:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801218a:	dce2      	bgt.n	8012152 <atanf+0x1e>
 801218c:	f04f 33ff 	mov.w	r3, #4294967295
 8012190:	e013      	b.n	80121ba <atanf+0x86>
 8012192:	f000 f8a3 	bl	80122dc <fabsf>
 8012196:	4b42      	ldr	r3, [pc, #264]	@ (80122a0 <atanf+0x16c>)
 8012198:	429c      	cmp	r4, r3
 801219a:	d84f      	bhi.n	801223c <atanf+0x108>
 801219c:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 80121a0:	429c      	cmp	r4, r3
 80121a2:	d841      	bhi.n	8012228 <atanf+0xf4>
 80121a4:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 80121a8:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 80121ac:	eea0 7a27 	vfma.f32	s14, s0, s15
 80121b0:	2300      	movs	r3, #0
 80121b2:	ee30 0a27 	vadd.f32	s0, s0, s15
 80121b6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80121ba:	1c5a      	adds	r2, r3, #1
 80121bc:	ee27 6aa7 	vmul.f32	s12, s15, s15
 80121c0:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 80122a4 <atanf+0x170>
 80121c4:	eddf 5a38 	vldr	s11, [pc, #224]	@ 80122a8 <atanf+0x174>
 80121c8:	ed9f 5a38 	vldr	s10, [pc, #224]	@ 80122ac <atanf+0x178>
 80121cc:	ee66 6a06 	vmul.f32	s13, s12, s12
 80121d0:	eee6 5a87 	vfma.f32	s11, s13, s14
 80121d4:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 80122b0 <atanf+0x17c>
 80121d8:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80121dc:	eddf 5a35 	vldr	s11, [pc, #212]	@ 80122b4 <atanf+0x180>
 80121e0:	eee7 5a26 	vfma.f32	s11, s14, s13
 80121e4:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 80122b8 <atanf+0x184>
 80121e8:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80121ec:	eddf 5a33 	vldr	s11, [pc, #204]	@ 80122bc <atanf+0x188>
 80121f0:	eee7 5a26 	vfma.f32	s11, s14, s13
 80121f4:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 80122c0 <atanf+0x18c>
 80121f8:	eea6 5a87 	vfma.f32	s10, s13, s14
 80121fc:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 80122c4 <atanf+0x190>
 8012200:	eea5 7a26 	vfma.f32	s14, s10, s13
 8012204:	ed9f 5a30 	vldr	s10, [pc, #192]	@ 80122c8 <atanf+0x194>
 8012208:	eea7 5a26 	vfma.f32	s10, s14, s13
 801220c:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 80122cc <atanf+0x198>
 8012210:	eea5 7a26 	vfma.f32	s14, s10, s13
 8012214:	ee27 7a26 	vmul.f32	s14, s14, s13
 8012218:	eea5 7a86 	vfma.f32	s14, s11, s12
 801221c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8012220:	d121      	bne.n	8012266 <atanf+0x132>
 8012222:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012226:	e794      	b.n	8012152 <atanf+0x1e>
 8012228:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 801222c:	ee30 7a67 	vsub.f32	s14, s0, s15
 8012230:	ee30 0a27 	vadd.f32	s0, s0, s15
 8012234:	2301      	movs	r3, #1
 8012236:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801223a:	e7be      	b.n	80121ba <atanf+0x86>
 801223c:	4b24      	ldr	r3, [pc, #144]	@ (80122d0 <atanf+0x19c>)
 801223e:	429c      	cmp	r4, r3
 8012240:	d80b      	bhi.n	801225a <atanf+0x126>
 8012242:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 8012246:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801224a:	eea0 7a27 	vfma.f32	s14, s0, s15
 801224e:	2302      	movs	r3, #2
 8012250:	ee70 6a67 	vsub.f32	s13, s0, s15
 8012254:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8012258:	e7af      	b.n	80121ba <atanf+0x86>
 801225a:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 801225e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8012262:	2303      	movs	r3, #3
 8012264:	e7a9      	b.n	80121ba <atanf+0x86>
 8012266:	4a1b      	ldr	r2, [pc, #108]	@ (80122d4 <atanf+0x1a0>)
 8012268:	491b      	ldr	r1, [pc, #108]	@ (80122d8 <atanf+0x1a4>)
 801226a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 801226e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8012272:	edd3 6a00 	vldr	s13, [r3]
 8012276:	ee37 7a66 	vsub.f32	s14, s14, s13
 801227a:	2d00      	cmp	r5, #0
 801227c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8012280:	edd2 7a00 	vldr	s15, [r2]
 8012284:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012288:	bfb8      	it	lt
 801228a:	eef1 7a67 	vneglt.f32	s15, s15
 801228e:	e760      	b.n	8012152 <atanf+0x1e>
 8012290:	bfc90fdb 	.word	0xbfc90fdb
 8012294:	3fc90fdb 	.word	0x3fc90fdb
 8012298:	3edfffff 	.word	0x3edfffff
 801229c:	7149f2ca 	.word	0x7149f2ca
 80122a0:	3f97ffff 	.word	0x3f97ffff
 80122a4:	3c8569d7 	.word	0x3c8569d7
 80122a8:	3d4bda59 	.word	0x3d4bda59
 80122ac:	bd6ef16b 	.word	0xbd6ef16b
 80122b0:	3d886b35 	.word	0x3d886b35
 80122b4:	3dba2e6e 	.word	0x3dba2e6e
 80122b8:	3e124925 	.word	0x3e124925
 80122bc:	3eaaaaab 	.word	0x3eaaaaab
 80122c0:	bd15a221 	.word	0xbd15a221
 80122c4:	bd9d8795 	.word	0xbd9d8795
 80122c8:	bde38e38 	.word	0xbde38e38
 80122cc:	be4ccccd 	.word	0xbe4ccccd
 80122d0:	401bffff 	.word	0x401bffff
 80122d4:	080127b4 	.word	0x080127b4
 80122d8:	080127a4 	.word	0x080127a4

080122dc <fabsf>:
 80122dc:	ee10 3a10 	vmov	r3, s0
 80122e0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80122e4:	ee00 3a10 	vmov	s0, r3
 80122e8:	4770      	bx	lr
	...

080122ec <scalbnf>:
 80122ec:	ee10 3a10 	vmov	r3, s0
 80122f0:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 80122f4:	d02b      	beq.n	801234e <scalbnf+0x62>
 80122f6:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 80122fa:	d302      	bcc.n	8012302 <scalbnf+0x16>
 80122fc:	ee30 0a00 	vadd.f32	s0, s0, s0
 8012300:	4770      	bx	lr
 8012302:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 8012306:	d123      	bne.n	8012350 <scalbnf+0x64>
 8012308:	4b24      	ldr	r3, [pc, #144]	@ (801239c <scalbnf+0xb0>)
 801230a:	eddf 7a25 	vldr	s15, [pc, #148]	@ 80123a0 <scalbnf+0xb4>
 801230e:	4298      	cmp	r0, r3
 8012310:	ee20 0a27 	vmul.f32	s0, s0, s15
 8012314:	db17      	blt.n	8012346 <scalbnf+0x5a>
 8012316:	ee10 3a10 	vmov	r3, s0
 801231a:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801231e:	3a19      	subs	r2, #25
 8012320:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8012324:	4288      	cmp	r0, r1
 8012326:	dd15      	ble.n	8012354 <scalbnf+0x68>
 8012328:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 80123a4 <scalbnf+0xb8>
 801232c:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 80123a8 <scalbnf+0xbc>
 8012330:	ee10 3a10 	vmov	r3, s0
 8012334:	eeb0 7a67 	vmov.f32	s14, s15
 8012338:	2b00      	cmp	r3, #0
 801233a:	bfb8      	it	lt
 801233c:	eef0 7a66 	vmovlt.f32	s15, s13
 8012340:	ee27 0a87 	vmul.f32	s0, s15, s14
 8012344:	4770      	bx	lr
 8012346:	eddf 7a19 	vldr	s15, [pc, #100]	@ 80123ac <scalbnf+0xc0>
 801234a:	ee27 0a80 	vmul.f32	s0, s15, s0
 801234e:	4770      	bx	lr
 8012350:	0dd2      	lsrs	r2, r2, #23
 8012352:	e7e5      	b.n	8012320 <scalbnf+0x34>
 8012354:	4410      	add	r0, r2
 8012356:	28fe      	cmp	r0, #254	@ 0xfe
 8012358:	dce6      	bgt.n	8012328 <scalbnf+0x3c>
 801235a:	2800      	cmp	r0, #0
 801235c:	dd06      	ble.n	801236c <scalbnf+0x80>
 801235e:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8012362:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8012366:	ee00 3a10 	vmov	s0, r3
 801236a:	4770      	bx	lr
 801236c:	f110 0f16 	cmn.w	r0, #22
 8012370:	da09      	bge.n	8012386 <scalbnf+0x9a>
 8012372:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 80123ac <scalbnf+0xc0>
 8012376:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 80123b0 <scalbnf+0xc4>
 801237a:	ee10 3a10 	vmov	r3, s0
 801237e:	eeb0 7a67 	vmov.f32	s14, s15
 8012382:	2b00      	cmp	r3, #0
 8012384:	e7d9      	b.n	801233a <scalbnf+0x4e>
 8012386:	3019      	adds	r0, #25
 8012388:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 801238c:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8012390:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 80123b4 <scalbnf+0xc8>
 8012394:	ee07 3a90 	vmov	s15, r3
 8012398:	e7d7      	b.n	801234a <scalbnf+0x5e>
 801239a:	bf00      	nop
 801239c:	ffff3cb0 	.word	0xffff3cb0
 80123a0:	4c000000 	.word	0x4c000000
 80123a4:	7149f2ca 	.word	0x7149f2ca
 80123a8:	f149f2ca 	.word	0xf149f2ca
 80123ac:	0da24260 	.word	0x0da24260
 80123b0:	8da24260 	.word	0x8da24260
 80123b4:	33000000 	.word	0x33000000

080123b8 <with_errnof>:
 80123b8:	b510      	push	{r4, lr}
 80123ba:	ed2d 8b02 	vpush	{d8}
 80123be:	eeb0 8a40 	vmov.f32	s16, s0
 80123c2:	4604      	mov	r4, r0
 80123c4:	f7fe fb1a 	bl	80109fc <__errno>
 80123c8:	eeb0 0a48 	vmov.f32	s0, s16
 80123cc:	ecbd 8b02 	vpop	{d8}
 80123d0:	6004      	str	r4, [r0, #0]
 80123d2:	bd10      	pop	{r4, pc}

080123d4 <xflowf>:
 80123d4:	b130      	cbz	r0, 80123e4 <xflowf+0x10>
 80123d6:	eef1 7a40 	vneg.f32	s15, s0
 80123da:	ee27 0a80 	vmul.f32	s0, s15, s0
 80123de:	2022      	movs	r0, #34	@ 0x22
 80123e0:	f7ff bfea 	b.w	80123b8 <with_errnof>
 80123e4:	eef0 7a40 	vmov.f32	s15, s0
 80123e8:	e7f7      	b.n	80123da <xflowf+0x6>
	...

080123ec <__math_uflowf>:
 80123ec:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80123f4 <__math_uflowf+0x8>
 80123f0:	f7ff bff0 	b.w	80123d4 <xflowf>
 80123f4:	10000000 	.word	0x10000000

080123f8 <__math_oflowf>:
 80123f8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8012400 <__math_oflowf+0x8>
 80123fc:	f7ff bfea 	b.w	80123d4 <xflowf>
 8012400:	70000000 	.word	0x70000000

08012404 <_init>:
 8012404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012406:	bf00      	nop
 8012408:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801240a:	bc08      	pop	{r3}
 801240c:	469e      	mov	lr, r3
 801240e:	4770      	bx	lr

08012410 <_fini>:
 8012410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012412:	bf00      	nop
 8012414:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012416:	bc08      	pop	{r3}
 8012418:	469e      	mov	lr, r3
 801241a:	4770      	bx	lr
