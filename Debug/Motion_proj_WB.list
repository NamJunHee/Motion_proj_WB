
Motion_proj_WB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011804  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000370  08011944  08011944  00012944  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08011cb4  08011cb4  00012cb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08011cbc  08011cbc  00012cbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08011cc0  08011cc0  00012cc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000000d8  20000008  08011cc4  00013008  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 BLE_DRIVER_CONTEXT 00000035  200000e0  08011d9c  000130e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 SYSTEM_DRIVER_CONTEXT 00000011  20000118  08011dd1  00013118  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000020a4  20000130  08011de2  00013130  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200021d4  08011de2  000131d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00013a67  2**0
                  CONTENTS, READONLY
 12 MAPPING_TABLE 00000028  20030000  20030000  00014000  2**2
                  ALLOC
 13 MB_MEM1       000001bb  20030028  20030028  00014000  2**2
                  ALLOC
 14 .MB_MEM2      00000883  200301e4  08011de2  000131e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 15 .debug_info   0002f7ab  00000000  00000000  00013a97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00006844  00000000  00000000  00043242  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00002e28  00000000  00000000  00049a88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00002375  00000000  00000000  0004c8b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0002ed9e  00000000  00000000  0004ec25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   00035e89  00000000  00000000  0007d9c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    00102bcf  00000000  00000000  000b384c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      00000043  00000000  00000000  001b641b  2**0
                  CONTENTS, READONLY
 23 .debug_frame  0000cfe8  00000000  00000000  001b6460  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 0000006e  00000000  00000000  001c3448  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000130 	.word	0x20000130
 800015c:	00000000 	.word	0x00000000
 8000160:	0801192c 	.word	0x0801192c

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000134 	.word	0x20000134
 800017c:	0801192c 	.word	0x0801192c

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	@ 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2f>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b10:	bf24      	itt	cs
 8000b12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b1a:	d90d      	bls.n	8000b38 <__aeabi_d2f+0x30>
 8000b1c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b28:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b30:	bf08      	it	eq
 8000b32:	f020 0001 	biceq.w	r0, r0, #1
 8000b36:	4770      	bx	lr
 8000b38:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b3c:	d121      	bne.n	8000b82 <__aeabi_d2f+0x7a>
 8000b3e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b42:	bfbc      	itt	lt
 8000b44:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b48:	4770      	bxlt	lr
 8000b4a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b52:	f1c2 0218 	rsb	r2, r2, #24
 8000b56:	f1c2 0c20 	rsb	ip, r2, #32
 8000b5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b62:	bf18      	it	ne
 8000b64:	f040 0001 	orrne.w	r0, r0, #1
 8000b68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b74:	ea40 000c 	orr.w	r0, r0, ip
 8000b78:	fa23 f302 	lsr.w	r3, r3, r2
 8000b7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b80:	e7cc      	b.n	8000b1c <__aeabi_d2f+0x14>
 8000b82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b86:	d107      	bne.n	8000b98 <__aeabi_d2f+0x90>
 8000b88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b8c:	bf1e      	ittt	ne
 8000b8e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b92:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b96:	4770      	bxne	lr
 8000b98:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b9c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ba0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <APPD_EnableCPU2>:
/* USER CODE END APPD_Init */
  return;
}

void APPD_EnableCPU2( void )
{
 8000ba8:	b5b0      	push	{r4, r5, r7, lr}
 8000baa:	b088      	sub	sp, #32
 8000bac:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 8000bae:	4b0b      	ldr	r3, [pc, #44]	@ (8000bdc <APPD_EnableCPU2+0x34>)
 8000bb0:	1d3c      	adds	r4, r7, #4
 8000bb2:	461d      	mov	r5, r3
 8000bb4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bb6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bb8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000bbc:	c403      	stmia	r4!, {r0, r1}
 8000bbe:	8022      	strh	r2, [r4, #0]
 8000bc0:	3402      	adds	r4, #2
 8000bc2:	0c13      	lsrs	r3, r2, #16
 8000bc4:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 8000bc6:	f00d fd8d 	bl	800e6e4 <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 8000bca:	1d3b      	adds	r3, r7, #4
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f00d f81e 	bl	800dc0e <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 8000bd2:	bf00      	nop
}
 8000bd4:	3720      	adds	r7, #32
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bdb0      	pop	{r4, r5, r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	08011944 	.word	0x08011944

08000be0 <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 8000be0:	b480      	push	{r7}
 8000be2:	b083      	sub	sp, #12
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 8000be8:	4b07      	ldr	r3, [pc, #28]	@ (8000c08 <LL_C2_PWR_SetPowerMode+0x28>)
 8000bea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000bee:	f023 0207 	bic.w	r2, r3, #7
 8000bf2:	4905      	ldr	r1, [pc, #20]	@ (8000c08 <LL_C2_PWR_SetPowerMode+0x28>)
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	4313      	orrs	r3, r2
 8000bf8:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 8000bfc:	bf00      	nop
 8000bfe:	370c      	adds	r7, #12
 8000c00:	46bd      	mov	sp, r7
 8000c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c06:	4770      	bx	lr
 8000c08:	58000400 	.word	0x58000400

08000c0c <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	b083      	sub	sp, #12
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8000c14:	4b06      	ldr	r3, [pc, #24]	@ (8000c30 <LL_EXTI_EnableIT_32_63+0x24>)
 8000c16:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8000c1a:	4905      	ldr	r1, [pc, #20]	@ (8000c30 <LL_EXTI_EnableIT_32_63+0x24>)
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	4313      	orrs	r3, r2
 8000c20:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8000c24:	bf00      	nop
 8000c26:	370c      	adds	r7, #12
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2e:	4770      	bx	lr
 8000c30:	58000800 	.word	0x58000800

08000c34 <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 8000c34:	b480      	push	{r7}
 8000c36:	b083      	sub	sp, #12
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 8000c3c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000c40:	4a0a      	ldr	r2, [pc, #40]	@ (8000c6c <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 8000c42:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 8000c46:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000c4a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000c4e:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	021b      	lsls	r3, r3, #8
 8000c56:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000c5a:	4313      	orrs	r3, r2
 8000c5c:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
}
 8000c60:	bf00      	nop
 8000c62:	370c      	adds	r7, #12
 8000c64:	46bd      	mov	sp, r7
 8000c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6a:	4770      	bx	lr
 8000c6c:	cafecafe 	.word	0xcafecafe

08000c70 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8000c70:	b480      	push	{r7}
 8000c72:	b083      	sub	sp, #12
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8000c78:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000c7c:	689b      	ldr	r3, [r3, #8]
 8000c7e:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8000c82:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	4313      	orrs	r3, r2
 8000c8a:	608b      	str	r3, [r1, #8]
}
 8000c8c:	bf00      	nop
 8000c8e:	370c      	adds	r7, #12
 8000c90:	46bd      	mov	sp, r7
 8000c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c96:	4770      	bx	lr

08000c98 <LL_DBGMCU_GetDeviceID>:
  * @note   For STM32WBxxxx devices, the device ID is 0x495
  * @rmtoll DBGMCU_IDCODE DEV_ID        LL_DBGMCU_GetDeviceID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFF (ex: device ID is 0x495)
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetDeviceID(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_DEV_ID));
 8000c9c:	4b04      	ldr	r3, [pc, #16]	@ (8000cb0 <LL_DBGMCU_GetDeviceID+0x18>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop
 8000cb0:	e0042000 	.word	0xe0042000

08000cb4 <LL_DBGMCU_GetRevisionID>:
  * @note   This field indicates the revision of the device.
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 8000cb8:	4b04      	ldr	r3, [pc, #16]	@ (8000ccc <LL_DBGMCU_GetRevisionID+0x18>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	0c1b      	lsrs	r3, r3, #16
 8000cbe:	b29b      	uxth	r3, r3
}
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc8:	4770      	bx	lr
 8000cca:	bf00      	nop
 8000ccc:	e0042000 	.word	0xe0042000

08000cd0 <LL_LPM_EnableSleep>:
  * @brief  Processor uses sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8000cd4:	4b05      	ldr	r3, [pc, #20]	@ (8000cec <LL_LPM_EnableSleep+0x1c>)
 8000cd6:	691b      	ldr	r3, [r3, #16]
 8000cd8:	4a04      	ldr	r2, [pc, #16]	@ (8000cec <LL_LPM_EnableSleep+0x1c>)
 8000cda:	f023 0304 	bic.w	r3, r3, #4
 8000cde:	6113      	str	r3, [r2, #16]
}
 8000ce0:	bf00      	nop
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce8:	4770      	bx	lr
 8000cea:	bf00      	nop
 8000cec:	e000ed00 	.word	0xe000ed00

08000cf0 <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	b083      	sub	sp, #12
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	22ff      	movs	r2, #255	@ 0xff
 8000cfc:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8000cfe:	bf00      	nop
 8000d00:	370c      	adds	r7, #12
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr

08000d0a <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 8000d0a:	b480      	push	{r7}
 8000d0c:	b083      	sub	sp, #12
 8000d0e:	af00      	add	r7, sp, #0
 8000d10:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	22ca      	movs	r2, #202	@ 0xca
 8000d16:	625a      	str	r2, [r3, #36]	@ 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	2253      	movs	r2, #83	@ 0x53
 8000d1c:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8000d1e:	bf00      	nop
 8000d20:	370c      	adds	r7, #12
 8000d22:	46bd      	mov	sp, r7
 8000d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d28:	4770      	bx	lr

08000d2a <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 8000d2a:	b480      	push	{r7}
 8000d2c:	b083      	sub	sp, #12
 8000d2e:	af00      	add	r7, sp, #0
 8000d30:	6078      	str	r0, [r7, #4]
 8000d32:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	689b      	ldr	r3, [r3, #8]
 8000d38:	f023 0207 	bic.w	r2, r3, #7
 8000d3c:	683b      	ldr	r3, [r7, #0]
 8000d3e:	431a      	orrs	r2, r3
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	609a      	str	r2, [r3, #8]
}
 8000d44:	bf00      	nop
 8000d46:	370c      	adds	r7, #12
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4e:	4770      	bx	lr

08000d50 <MX_APPE_Config>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8000d54:	4b04      	ldr	r3, [pc, #16]	@ (8000d68 <MX_APPE_Config+0x18>)
 8000d56:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000d5a:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device();
 8000d5c:	f000 f824 	bl	8000da8 <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 8000d60:	f000 f829 	bl	8000db6 <Config_HSE>

  return;
 8000d64:	bf00      	nop
}
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	58004000 	.word	0x58004000

08000d6c <MX_APPE_Init>:

void MX_APPE_Init(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	af00      	add	r7, sp, #0
  System_Init();       /**< System initialization */
 8000d70:	f000 f835 	bl	8000dde <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 8000d74:	f000 f84e 	bl	8000e14 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 8000d78:	4903      	ldr	r1, [pc, #12]	@ (8000d88 <MX_APPE_Init+0x1c>)
 8000d7a:	2000      	movs	r0, #0
 8000d7c:	f000 fd9a 	bl	80018b4 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 8000d80:	f000 f856 	bl	8000e30 <appe_Tl_Init>
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */

   return;
 8000d84:	bf00      	nop
}
 8000d86:	bd80      	pop	{r7, pc}
 8000d88:	200002e0 	.word	0x200002e0

08000d8c <Init_Smps>:

void Init_Smps(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif /* CFG_USE_SMPS != 0 */

  return;
 8000d90:	bf00      	nop
}
 8000d92:	46bd      	mov	sp, r7
 8000d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d98:	4770      	bx	lr

08000d9a <Init_Exti>:

void Init_Exti(void)
{
 8000d9a:	b580      	push	{r7, lr}
 8000d9c:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_36 | LL_EXTI_LINE_38);
 8000d9e:	2050      	movs	r0, #80	@ 0x50
 8000da0:	f7ff ff34 	bl	8000c0c <LL_EXTI_EnableIT_32_63>

  return;
 8000da4:	bf00      	nop
}
 8000da6:	bd80      	pop	{r7, pc}

08000da8 <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
  Reset_BackupDomain();

  Reset_IPCC();
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 8000dac:	bf00      	nop
}
 8000dae:	46bd      	mov	sp, r7
 8000db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db4:	4770      	bx	lr

08000db6 <Config_HSE>:
  return;
}
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 8000db6:	b580      	push	{r7, lr}
 8000db8:	b082      	sub	sp, #8
 8000dba:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 8000dbc:	2000      	movs	r0, #0
 8000dbe:	f00d fd1d 	bl	800e7fc <OTP_Read>
 8000dc2:	6078      	str	r0, [r7, #4]
  if (p_otp)
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d005      	beq.n	8000dd6 <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	799b      	ldrb	r3, [r3, #6]
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f7ff ff30 	bl	8000c34 <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 8000dd4:	bf00      	nop
 8000dd6:	bf00      	nop
}
 8000dd8:	3708      	adds	r7, #8
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}

08000dde <System_Init>:

static void System_Init(void)
{
 8000dde:	b580      	push	{r7, lr}
 8000de0:	af00      	add	r7, sp, #0
  Init_Smps();
 8000de2:	f7ff ffd3 	bl	8000d8c <Init_Smps>

  Init_Exti();
 8000de6:	f7ff ffd8 	bl	8000d9a <Init_Exti>

  Init_Rtc();
 8000dea:	f000 f803 	bl	8000df4 <Init_Rtc>

  return;
 8000dee:	bf00      	nop
}
 8000df0:	bd80      	pop	{r7, pc}
	...

08000df4 <Init_Rtc>:

static void Init_Rtc(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 8000df8:	4805      	ldr	r0, [pc, #20]	@ (8000e10 <Init_Rtc+0x1c>)
 8000dfa:	f7ff ff86 	bl	8000d0a <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 8000dfe:	2100      	movs	r1, #0
 8000e00:	4803      	ldr	r0, [pc, #12]	@ (8000e10 <Init_Rtc+0x1c>)
 8000e02:	f7ff ff92 	bl	8000d2a <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 8000e06:	4802      	ldr	r0, [pc, #8]	@ (8000e10 <Init_Rtc+0x1c>)
 8000e08:	f7ff ff72 	bl	8000cf0 <LL_RTC_EnableWriteProtection>

  return;
 8000e0c:	bf00      	nop
}
 8000e0e:	bd80      	pop	{r7, pc}
 8000e10:	40002800 	.word	0x40002800

08000e14 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8000e18:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8000e1c:	f7ff ff28 	bl	8000c70 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 8000e20:	f00e fe2c 	bl	800fa7c <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 8000e24:	2004      	movs	r0, #4
 8000e26:	f7ff fedb 	bl	8000be0 <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif /* CFG_USB_INTERFACE_ENABLE != 0 */

  return;
 8000e2a:	bf00      	nop
}
 8000e2c:	bd80      	pop	{r7, pc}
	...

08000e30 <appe_Tl_Init>:

static void appe_Tl_Init(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b088      	sub	sp, #32
 8000e34:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 8000e36:	f00d fa9f 	bl	800e378 <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask(1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc);
 8000e3a:	4a11      	ldr	r2, [pc, #68]	@ (8000e80 <appe_Tl_Init+0x50>)
 8000e3c:	2100      	movs	r1, #0
 8000e3e:	2010      	movs	r0, #16
 8000e40:	f00e ff5a 	bl	800fcf8 <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 8000e44:	4b0f      	ldr	r3, [pc, #60]	@ (8000e84 <appe_Tl_Init+0x54>)
 8000e46:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 8000e48:	4b0f      	ldr	r3, [pc, #60]	@ (8000e88 <appe_Tl_Init+0x58>)
 8000e4a:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 8000e4c:	463b      	mov	r3, r7
 8000e4e:	4619      	mov	r1, r3
 8000e50:	480e      	ldr	r0, [pc, #56]	@ (8000e8c <appe_Tl_Init+0x5c>)
 8000e52:	f00d f953 	bl	800e0fc <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 8000e56:	4b0e      	ldr	r3, [pc, #56]	@ (8000e90 <appe_Tl_Init+0x60>)
 8000e58:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 8000e5a:	4b0e      	ldr	r3, [pc, #56]	@ (8000e94 <appe_Tl_Init+0x64>)
 8000e5c:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 8000e5e:	4b0e      	ldr	r3, [pc, #56]	@ (8000e98 <appe_Tl_Init+0x68>)
 8000e60:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 8000e62:	f240 533c 	movw	r3, #1340	@ 0x53c
 8000e66:	617b      	str	r3, [r7, #20]
  TL_MM_Init(&tl_mm_config);
 8000e68:	f107 0308 	add.w	r3, r7, #8
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f00d fbc5 	bl	800e5fc <TL_MM_Init>

  TL_Enable();
 8000e72:	f00d fa7b 	bl	800e36c <TL_Enable>

  return;
 8000e76:	bf00      	nop
}
 8000e78:	3720      	adds	r7, #32
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	0800e135 	.word	0x0800e135
 8000e84:	20030734 	.word	0x20030734
 8000e88:	08000e9d 	.word	0x08000e9d
 8000e8c:	08000eb5 	.word	0x08000eb5
 8000e90:	2003094c 	.word	0x2003094c
 8000e94:	20030840 	.word	0x20030840
 8000e98:	200301f8 	.word	0x200301f8

08000e9c <APPE_SysStatusNot>:

static void APPE_SysStatusNot(SHCI_TL_CmdStatus_t status)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	b083      	sub	sp, #12
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 8000ea6:	bf00      	nop
}
 8000ea8:	370c      	adds	r7, #12
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb0:	4770      	bx	lr
	...

08000eb4 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * (eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable)
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx(void * pPayload)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b088      	sub	sp, #32
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  WirelessFwInfo_t WirelessInfo;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	685b      	ldr	r3, [r3, #4]
 8000ec0:	330b      	adds	r3, #11
 8000ec2:	61fb      	str	r3, [r7, #28]

  switch(p_sys_event->subevtcode)
 8000ec4:	69fb      	ldr	r3, [r7, #28]
 8000ec6:	881b      	ldrh	r3, [r3, #0]
 8000ec8:	b29b      	uxth	r3, r3
 8000eca:	f5a3 4312 	sub.w	r3, r3, #37376	@ 0x9200
 8000ece:	2b07      	cmp	r3, #7
 8000ed0:	d81f      	bhi.n	8000f12 <APPE_SysUserEvtRx+0x5e>
 8000ed2:	a201      	add	r2, pc, #4	@ (adr r2, 8000ed8 <APPE_SysUserEvtRx+0x24>)
 8000ed4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ed8:	08000ef9 	.word	0x08000ef9
 8000edc:	08000f0b 	.word	0x08000f0b
 8000ee0:	08000f13 	.word	0x08000f13
 8000ee4:	08000f13 	.word	0x08000f13
 8000ee8:	08000f13 	.word	0x08000f13
 8000eec:	08000f13 	.word	0x08000f13
 8000ef0:	08000f13 	.word	0x08000f13
 8000ef4:	08000f13 	.word	0x08000f13
  {
  case SHCI_SUB_EVT_CODE_READY:
    /* Read the firmware version of both the wireless firmware and the FUS */
    SHCI_GetWirelessFwInfo(&WirelessInfo);
 8000ef8:	f107 030c 	add.w	r3, r7, #12
 8000efc:	4618      	mov	r0, r3
 8000efe:	f00c feb3 	bl	800dc68 <SHCI_GetWirelessFwInfo>
    APP_DBG_MSG("Wireless Firmware version %d.%d.%d\n", WirelessInfo.VersionMajor, WirelessInfo.VersionMinor, WirelessInfo.VersionSub);
    APP_DBG_MSG("Wireless Firmware build %d\n", WirelessInfo.VersionReleaseType);
    APP_DBG_MSG("FUS version %d.%d.%d\n", WirelessInfo.FusVersionMajor, WirelessInfo.FusVersionMinor, WirelessInfo.FusVersionSub);

    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY\n\r");
    APPE_SysEvtReadyProcessing(pPayload);
 8000f02:	6878      	ldr	r0, [r7, #4]
 8000f04:	f000 f81b 	bl	8000f3e <APPE_SysEvtReadyProcessing>
    break;
 8000f08:	e004      	b.n	8000f14 <APPE_SysUserEvtRx+0x60>

  case SHCI_SUB_EVT_ERROR_NOTIF:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF \n\r");
    APPE_SysEvtError(pPayload);
 8000f0a:	6878      	ldr	r0, [r7, #4]
 8000f0c:	f000 f806 	bl	8000f1c <APPE_SysEvtError>
    break;
 8000f10:	e000      	b.n	8000f14 <APPE_SysUserEvtRx+0x60>
  case SHCI_SUB_EVT_NVM_END_ERASE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_ERASE\n\r");
    break;

  default:
    break;
 8000f12:	bf00      	nop
  }

  return;
 8000f14:	bf00      	nop
}
 8000f16:	3720      	adds	r7, #32
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}

08000f1c <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError(void * pPayload)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b085      	sub	sp, #20
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SCHI_SystemErrCode_t *p_sys_error_code;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	685b      	ldr	r3, [r3, #4]
 8000f28:	330b      	adds	r3, #11
 8000f2a:	60fb      	str	r3, [r7, #12]
  p_sys_error_code = (SCHI_SystemErrCode_t*) p_sys_event->payload;
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	3302      	adds	r3, #2
 8000f30:	60bb      	str	r3, [r7, #8]
  }
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
  }
  return;
 8000f32:	bf00      	nop
}
 8000f34:	3714      	adds	r7, #20
 8000f36:	46bd      	mov	sp, r7
 8000f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3c:	4770      	bx	lr

08000f3e <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing(void * pPayload)
{
 8000f3e:	b580      	push	{r7, lr}
 8000f40:	b08a      	sub	sp, #40	@ 0x28
 8000f42:	af00      	add	r7, sp, #0
 8000f44:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SHCI_C2_Ready_Evt_t *p_sys_ready_event;

  SHCI_C2_CONFIG_Cmd_Param_t config_param = {0};
 8000f46:	f107 0308 	add.w	r3, r7, #8
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	601a      	str	r2, [r3, #0]
 8000f4e:	605a      	str	r2, [r3, #4]
 8000f50:	609a      	str	r2, [r3, #8]
 8000f52:	60da      	str	r2, [r3, #12]
  uint32_t RevisionID=0;
 8000f54:	2300      	movs	r3, #0
 8000f56:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t DeviceID=0;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	623b      	str	r3, [r7, #32]

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	685b      	ldr	r3, [r3, #4]
 8000f60:	330b      	adds	r3, #11
 8000f62:	61fb      	str	r3, [r7, #28]
  p_sys_ready_event = (SHCI_C2_Ready_Evt_t*) p_sys_event->payload;
 8000f64:	69fb      	ldr	r3, [r7, #28]
 8000f66:	3302      	adds	r3, #2
 8000f68:	61bb      	str	r3, [r7, #24]

  if (p_sys_ready_event->sysevt_ready_rsp == WIRELESS_FW_RUNNING)
 8000f6a:	69bb      	ldr	r3, [r7, #24]
 8000f6c:	781b      	ldrb	r3, [r3, #0]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d11d      	bne.n	8000fae <APPE_SysEvtReadyProcessing+0x70>
    * The wireless firmware is running on the CPU2
    */
    APP_DBG_MSG(">>== WIRELESS_FW_RUNNING \n");

    /* Traces channel initialization */
    APPD_EnableCPU2();
 8000f72:	f7ff fe19 	bl	8000ba8 <APPD_EnableCPU2>

    /* Enable all events Notification */
    config_param.PayloadCmdSize = SHCI_C2_CONFIG_PAYLOAD_CMD_SIZE;
 8000f76:	230f      	movs	r3, #15
 8000f78:	723b      	strb	r3, [r7, #8]
    config_param.EvtMask1 = SHCI_C2_CONFIG_EVTMASK1_BIT0_ERROR_NOTIF_ENABLE
 8000f7a:	237f      	movs	r3, #127	@ 0x7f
 8000f7c:	72bb      	strb	r3, [r7, #10]
    * @brief  Return the device revision identifier
    * @note   This field indicates the revision of the device.
    * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
    * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
    */
    RevisionID = LL_DBGMCU_GetRevisionID();
 8000f7e:	f7ff fe99 	bl	8000cb4 <LL_DBGMCU_GetRevisionID>
 8000f82:	6278      	str	r0, [r7, #36]	@ 0x24

    APP_DBG_MSG(">>== DBGMCU_GetRevisionID= %lx \n\r", RevisionID);

    config_param.RevisionID = (uint16_t)RevisionID;
 8000f84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f86:	b29b      	uxth	r3, r3
 8000f88:	82bb      	strh	r3, [r7, #20]

    DeviceID = LL_DBGMCU_GetDeviceID();
 8000f8a:	f7ff fe85 	bl	8000c98 <LL_DBGMCU_GetDeviceID>
 8000f8e:	6238      	str	r0, [r7, #32]
    APP_DBG_MSG(">>== DBGMCU_GetDeviceID= %lx \n\r", DeviceID);
    config_param.DeviceID = (uint16_t)DeviceID;
 8000f90:	6a3b      	ldr	r3, [r7, #32]
 8000f92:	b29b      	uxth	r3, r3
 8000f94:	82fb      	strh	r3, [r7, #22]
    (void)SHCI_C2_Config(&config_param);
 8000f96:	f107 0308 	add.w	r3, r7, #8
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f00c fe4e 	bl	800dc3c <SHCI_C2_Config>

    APP_BLE_Init();
 8000fa0:	f00d fd36 	bl	800ea10 <APP_BLE_Init>
    UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 8000fa4:	2100      	movs	r1, #0
 8000fa6:	2001      	movs	r0, #1
 8000fa8:	f00e fd7a 	bl	800faa0 <UTIL_LPM_SetOffMode>
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
  }

  return;
 8000fac:	e007      	b.n	8000fbe <APPE_SysEvtReadyProcessing+0x80>
  else if (p_sys_ready_event->sysevt_ready_rsp == FUS_FW_RUNNING)
 8000fae:	69bb      	ldr	r3, [r7, #24]
 8000fb0:	781b      	ldrb	r3, [r3, #0]
 8000fb2:	2b01      	cmp	r3, #1
 8000fb4:	d103      	bne.n	8000fbe <APPE_SysEvtReadyProcessing+0x80>
    ((tSHCI_UserEvtRxParam*)pPayload)->status = SHCI_TL_UserEventFlow_Disable;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	2200      	movs	r2, #0
 8000fba:	701a      	strb	r2, [r3, #0]
  return;
 8000fbc:	bf00      	nop
 8000fbe:	bf00      	nop
}
 8000fc0:	3728      	adds	r7, #40	@ 0x28
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}

08000fc6 <HAL_Delay>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void HAL_Delay(uint32_t Delay)
{
 8000fc6:	b580      	push	{r7, lr}
 8000fc8:	b084      	sub	sp, #16
 8000fca:	af00      	add	r7, sp, #0
 8000fcc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fce:	f006 fa35 	bl	800743c <HAL_GetTick>
 8000fd2:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fde:	d00a      	beq.n	8000ff6 <HAL_Delay+0x30>
  {
    wait += HAL_GetTickFreq();
 8000fe0:	f006 fa44 	bl	800746c <HAL_GetTickFreq>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	461a      	mov	r2, r3
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	4413      	add	r3, r2
 8000fec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000fee:	e002      	b.n	8000ff6 <HAL_Delay+0x30>
  {
    /************************************************************************************
     * ENTER SLEEP MODE
     ***********************************************************************************/
    LL_LPM_EnableSleep(); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 8000ff0:	f7ff fe6e 	bl	8000cd0 <LL_LPM_EnableSleep>
     */
  #if defined (__CC_ARM) || defined (__ARMCC_VERSION)
    __force_stores();
  #endif /* __ARMCC_VERSION */

    __WFI();
 8000ff4:	bf30      	wfi
  while ((HAL_GetTick() - tickstart) < wait)
 8000ff6:	f006 fa21 	bl	800743c <HAL_GetTick>
 8000ffa:	4602      	mov	r2, r0
 8000ffc:	68bb      	ldr	r3, [r7, #8]
 8000ffe:	1ad3      	subs	r3, r2, r3
 8001000:	68fa      	ldr	r2, [r7, #12]
 8001002:	429a      	cmp	r2, r3
 8001004:	d8f4      	bhi.n	8000ff0 <HAL_Delay+0x2a>
  }
}
 8001006:	bf00      	nop
 8001008:	bf00      	nop
 800100a:	3710      	adds	r7, #16
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}

08001010 <MX_APPE_Process>:

void MX_APPE_Process(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8001014:	f04f 30ff 	mov.w	r0, #4294967295
 8001018:	f00e fd72 	bl	800fb00 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 800101c:	bf00      	nop
 800101e:	bd80      	pop	{r7, pc}

08001020 <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
#endif /* CFG_LPM_SUPPORTED == 1 */
  return;
 8001024:	bf00      	nop
}
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr

0800102e <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle(UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm)
{
 800102e:	b580      	push	{r7, lr}
 8001030:	b082      	sub	sp, #8
 8001032:	af00      	add	r7, sp, #0
 8001034:	6078      	str	r0, [r7, #4]
 8001036:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8001038:	f04f 30ff 	mov.w	r0, #4294967295
 800103c:	f00e fd60 	bl	800fb00 <UTIL_SEQ_Run>
  return;
 8001040:	bf00      	nop
}
 8001042:	3708      	adds	r7, #8
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}

08001048 <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8001050:	2100      	movs	r1, #0
 8001052:	2010      	movs	r0, #16
 8001054:	f00e fe72 	bl	800fd3c <UTIL_SEQ_SetTask>
  return;
 8001058:	bf00      	nop
}
 800105a:	3708      	adds	r7, #8
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}

08001060 <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b082      	sub	sp, #8
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 8001068:	2002      	movs	r0, #2
 800106a:	f00e fed3 	bl	800fe14 <UTIL_SEQ_SetEvt>
  return;
 800106e:	bf00      	nop
}
 8001070:	3708      	adds	r7, #8
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}

08001076 <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 8001076:	b580      	push	{r7, lr}
 8001078:	b082      	sub	sp, #8
 800107a:	af00      	add	r7, sp, #0
 800107c:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 800107e:	2002      	movs	r0, #2
 8001080:	f00e fee8 	bl	800fe54 <UTIL_SEQ_WaitEvt>
  return;
 8001084:	bf00      	nop
}
 8001086:	3708      	adds	r7, #8
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}

0800108c <LL_EXTI_EnableIT_0_31>:
{
 800108c:	b480      	push	{r7}
 800108e:	b083      	sub	sp, #12
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8001094:	4b06      	ldr	r3, [pc, #24]	@ (80010b0 <LL_EXTI_EnableIT_0_31+0x24>)
 8001096:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 800109a:	4905      	ldr	r1, [pc, #20]	@ (80010b0 <LL_EXTI_EnableIT_0_31+0x24>)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	4313      	orrs	r3, r2
 80010a0:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 80010a4:	bf00      	nop
 80010a6:	370c      	adds	r7, #12
 80010a8:	46bd      	mov	sp, r7
 80010aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ae:	4770      	bx	lr
 80010b0:	58000800 	.word	0x58000800

080010b4 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b083      	sub	sp, #12
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 80010bc:	4b05      	ldr	r3, [pc, #20]	@ (80010d4 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80010be:	681a      	ldr	r2, [r3, #0]
 80010c0:	4904      	ldr	r1, [pc, #16]	@ (80010d4 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	4313      	orrs	r3, r2
 80010c6:	600b      	str	r3, [r1, #0]

}
 80010c8:	bf00      	nop
 80010ca:	370c      	adds	r7, #12
 80010cc:	46bd      	mov	sp, r7
 80010ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d2:	4770      	bx	lr
 80010d4:	58000800 	.word	0x58000800

080010d8 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	b083      	sub	sp, #12
 80010dc:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80010de:	4b0d      	ldr	r3, [pc, #52]	@ (8001114 <ReadRtcSsrValue+0x3c>)
 80010e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80010e2:	b29b      	uxth	r3, r3
 80010e4:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80010e6:	4b0b      	ldr	r3, [pc, #44]	@ (8001114 <ReadRtcSsrValue+0x3c>)
 80010e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80010ea:	b29b      	uxth	r3, r3
 80010ec:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 80010ee:	e005      	b.n	80010fc <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80010f4:	4b07      	ldr	r3, [pc, #28]	@ (8001114 <ReadRtcSsrValue+0x3c>)
 80010f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80010f8:	b29b      	uxth	r3, r3
 80010fa:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 80010fc:	687a      	ldr	r2, [r7, #4]
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	429a      	cmp	r2, r3
 8001102:	d1f5      	bne.n	80010f0 <ReadRtcSsrValue+0x18>
  }

  return second_read;
 8001104:	683b      	ldr	r3, [r7, #0]
}
 8001106:	4618      	mov	r0, r3
 8001108:	370c      	adds	r7, #12
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr
 8001112:	bf00      	nop
 8001114:	40002800 	.word	0x40002800

08001118 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8001118:	b480      	push	{r7}
 800111a:	b085      	sub	sp, #20
 800111c:	af00      	add	r7, sp, #0
 800111e:	4603      	mov	r3, r0
 8001120:	460a      	mov	r2, r1
 8001122:	71fb      	strb	r3, [r7, #7]
 8001124:	4613      	mov	r3, r2
 8001126:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 8001128:	79ba      	ldrb	r2, [r7, #6]
 800112a:	491d      	ldr	r1, [pc, #116]	@ (80011a0 <LinkTimerAfter+0x88>)
 800112c:	4613      	mov	r3, r2
 800112e:	005b      	lsls	r3, r3, #1
 8001130:	4413      	add	r3, r2
 8001132:	00db      	lsls	r3, r3, #3
 8001134:	440b      	add	r3, r1
 8001136:	3315      	adds	r3, #21
 8001138:	781b      	ldrb	r3, [r3, #0]
 800113a:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800113c:	7bfb      	ldrb	r3, [r7, #15]
 800113e:	2b06      	cmp	r3, #6
 8001140:	d009      	beq.n	8001156 <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 8001142:	7bfa      	ldrb	r2, [r7, #15]
 8001144:	4916      	ldr	r1, [pc, #88]	@ (80011a0 <LinkTimerAfter+0x88>)
 8001146:	4613      	mov	r3, r2
 8001148:	005b      	lsls	r3, r3, #1
 800114a:	4413      	add	r3, r2
 800114c:	00db      	lsls	r3, r3, #3
 800114e:	440b      	add	r3, r1
 8001150:	3314      	adds	r3, #20
 8001152:	79fa      	ldrb	r2, [r7, #7]
 8001154:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 8001156:	79fa      	ldrb	r2, [r7, #7]
 8001158:	4911      	ldr	r1, [pc, #68]	@ (80011a0 <LinkTimerAfter+0x88>)
 800115a:	4613      	mov	r3, r2
 800115c:	005b      	lsls	r3, r3, #1
 800115e:	4413      	add	r3, r2
 8001160:	00db      	lsls	r3, r3, #3
 8001162:	440b      	add	r3, r1
 8001164:	3315      	adds	r3, #21
 8001166:	7bfa      	ldrb	r2, [r7, #15]
 8001168:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 800116a:	79fa      	ldrb	r2, [r7, #7]
 800116c:	490c      	ldr	r1, [pc, #48]	@ (80011a0 <LinkTimerAfter+0x88>)
 800116e:	4613      	mov	r3, r2
 8001170:	005b      	lsls	r3, r3, #1
 8001172:	4413      	add	r3, r2
 8001174:	00db      	lsls	r3, r3, #3
 8001176:	440b      	add	r3, r1
 8001178:	3314      	adds	r3, #20
 800117a:	79ba      	ldrb	r2, [r7, #6]
 800117c:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 800117e:	79ba      	ldrb	r2, [r7, #6]
 8001180:	4907      	ldr	r1, [pc, #28]	@ (80011a0 <LinkTimerAfter+0x88>)
 8001182:	4613      	mov	r3, r2
 8001184:	005b      	lsls	r3, r3, #1
 8001186:	4413      	add	r3, r2
 8001188:	00db      	lsls	r3, r3, #3
 800118a:	440b      	add	r3, r1
 800118c:	3315      	adds	r3, #21
 800118e:	79fa      	ldrb	r2, [r7, #7]
 8001190:	701a      	strb	r2, [r3, #0]

  return;
 8001192:	bf00      	nop
}
 8001194:	3714      	adds	r7, #20
 8001196:	46bd      	mov	sp, r7
 8001198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119c:	4770      	bx	lr
 800119e:	bf00      	nop
 80011a0:	2000014c 	.word	0x2000014c

080011a4 <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 80011a4:	b480      	push	{r7}
 80011a6:	b085      	sub	sp, #20
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	4603      	mov	r3, r0
 80011ac:	460a      	mov	r2, r1
 80011ae:	71fb      	strb	r3, [r7, #7]
 80011b0:	4613      	mov	r3, r2
 80011b2:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 80011b4:	4b29      	ldr	r3, [pc, #164]	@ (800125c <LinkTimerBefore+0xb8>)
 80011b6:	781b      	ldrb	r3, [r3, #0]
 80011b8:	b2db      	uxtb	r3, r3
 80011ba:	79ba      	ldrb	r2, [r7, #6]
 80011bc:	429a      	cmp	r2, r3
 80011be:	d032      	beq.n	8001226 <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 80011c0:	79ba      	ldrb	r2, [r7, #6]
 80011c2:	4927      	ldr	r1, [pc, #156]	@ (8001260 <LinkTimerBefore+0xbc>)
 80011c4:	4613      	mov	r3, r2
 80011c6:	005b      	lsls	r3, r3, #1
 80011c8:	4413      	add	r3, r2
 80011ca:	00db      	lsls	r3, r3, #3
 80011cc:	440b      	add	r3, r1
 80011ce:	3314      	adds	r3, #20
 80011d0:	781b      	ldrb	r3, [r3, #0]
 80011d2:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 80011d4:	7bfa      	ldrb	r2, [r7, #15]
 80011d6:	4922      	ldr	r1, [pc, #136]	@ (8001260 <LinkTimerBefore+0xbc>)
 80011d8:	4613      	mov	r3, r2
 80011da:	005b      	lsls	r3, r3, #1
 80011dc:	4413      	add	r3, r2
 80011de:	00db      	lsls	r3, r3, #3
 80011e0:	440b      	add	r3, r1
 80011e2:	3315      	adds	r3, #21
 80011e4:	79fa      	ldrb	r2, [r7, #7]
 80011e6:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 80011e8:	79fa      	ldrb	r2, [r7, #7]
 80011ea:	491d      	ldr	r1, [pc, #116]	@ (8001260 <LinkTimerBefore+0xbc>)
 80011ec:	4613      	mov	r3, r2
 80011ee:	005b      	lsls	r3, r3, #1
 80011f0:	4413      	add	r3, r2
 80011f2:	00db      	lsls	r3, r3, #3
 80011f4:	440b      	add	r3, r1
 80011f6:	3315      	adds	r3, #21
 80011f8:	79ba      	ldrb	r2, [r7, #6]
 80011fa:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 80011fc:	79fa      	ldrb	r2, [r7, #7]
 80011fe:	4918      	ldr	r1, [pc, #96]	@ (8001260 <LinkTimerBefore+0xbc>)
 8001200:	4613      	mov	r3, r2
 8001202:	005b      	lsls	r3, r3, #1
 8001204:	4413      	add	r3, r2
 8001206:	00db      	lsls	r3, r3, #3
 8001208:	440b      	add	r3, r1
 800120a:	3314      	adds	r3, #20
 800120c:	7bfa      	ldrb	r2, [r7, #15]
 800120e:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8001210:	79ba      	ldrb	r2, [r7, #6]
 8001212:	4913      	ldr	r1, [pc, #76]	@ (8001260 <LinkTimerBefore+0xbc>)
 8001214:	4613      	mov	r3, r2
 8001216:	005b      	lsls	r3, r3, #1
 8001218:	4413      	add	r3, r2
 800121a:	00db      	lsls	r3, r3, #3
 800121c:	440b      	add	r3, r1
 800121e:	3314      	adds	r3, #20
 8001220:	79fa      	ldrb	r2, [r7, #7]
 8001222:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 8001224:	e014      	b.n	8001250 <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 8001226:	79fa      	ldrb	r2, [r7, #7]
 8001228:	490d      	ldr	r1, [pc, #52]	@ (8001260 <LinkTimerBefore+0xbc>)
 800122a:	4613      	mov	r3, r2
 800122c:	005b      	lsls	r3, r3, #1
 800122e:	4413      	add	r3, r2
 8001230:	00db      	lsls	r3, r3, #3
 8001232:	440b      	add	r3, r1
 8001234:	3315      	adds	r3, #21
 8001236:	79ba      	ldrb	r2, [r7, #6]
 8001238:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 800123a:	79ba      	ldrb	r2, [r7, #6]
 800123c:	4908      	ldr	r1, [pc, #32]	@ (8001260 <LinkTimerBefore+0xbc>)
 800123e:	4613      	mov	r3, r2
 8001240:	005b      	lsls	r3, r3, #1
 8001242:	4413      	add	r3, r2
 8001244:	00db      	lsls	r3, r3, #3
 8001246:	440b      	add	r3, r1
 8001248:	3314      	adds	r3, #20
 800124a:	79fa      	ldrb	r2, [r7, #7]
 800124c:	701a      	strb	r2, [r3, #0]
  return;
 800124e:	bf00      	nop
}
 8001250:	3714      	adds	r7, #20
 8001252:	46bd      	mov	sp, r7
 8001254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001258:	4770      	bx	lr
 800125a:	bf00      	nop
 800125c:	200001dc 	.word	0x200001dc
 8001260:	2000014c 	.word	0x2000014c

08001264 <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b084      	sub	sp, #16
 8001268:	af00      	add	r7, sp, #0
 800126a:	4603      	mov	r3, r0
 800126c:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800126e:	4b4e      	ldr	r3, [pc, #312]	@ (80013a8 <linkTimer+0x144>)
 8001270:	781b      	ldrb	r3, [r3, #0]
 8001272:	b2db      	uxtb	r3, r3
 8001274:	2b06      	cmp	r3, #6
 8001276:	d118      	bne.n	80012aa <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8001278:	4b4b      	ldr	r3, [pc, #300]	@ (80013a8 <linkTimer+0x144>)
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	b2da      	uxtb	r2, r3
 800127e:	4b4b      	ldr	r3, [pc, #300]	@ (80013ac <linkTimer+0x148>)
 8001280:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 8001282:	4a49      	ldr	r2, [pc, #292]	@ (80013a8 <linkTimer+0x144>)
 8001284:	79fb      	ldrb	r3, [r7, #7]
 8001286:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8001288:	79fa      	ldrb	r2, [r7, #7]
 800128a:	4949      	ldr	r1, [pc, #292]	@ (80013b0 <linkTimer+0x14c>)
 800128c:	4613      	mov	r3, r2
 800128e:	005b      	lsls	r3, r3, #1
 8001290:	4413      	add	r3, r2
 8001292:	00db      	lsls	r3, r3, #3
 8001294:	440b      	add	r3, r1
 8001296:	3315      	adds	r3, #21
 8001298:	2206      	movs	r2, #6
 800129a:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 800129c:	4b45      	ldr	r3, [pc, #276]	@ (80013b4 <linkTimer+0x150>)
 800129e:	f04f 32ff 	mov.w	r2, #4294967295
 80012a2:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 80012a4:	2300      	movs	r3, #0
 80012a6:	81fb      	strh	r3, [r7, #14]
 80012a8:	e078      	b.n	800139c <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 80012aa:	f000 f909 	bl	80014c0 <ReturnTimeElapsed>
 80012ae:	4603      	mov	r3, r0
 80012b0:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 80012b2:	79fa      	ldrb	r2, [r7, #7]
 80012b4:	493e      	ldr	r1, [pc, #248]	@ (80013b0 <linkTimer+0x14c>)
 80012b6:	4613      	mov	r3, r2
 80012b8:	005b      	lsls	r3, r3, #1
 80012ba:	4413      	add	r3, r2
 80012bc:	00db      	lsls	r3, r3, #3
 80012be:	440b      	add	r3, r1
 80012c0:	3308      	adds	r3, #8
 80012c2:	6819      	ldr	r1, [r3, #0]
 80012c4:	89fb      	ldrh	r3, [r7, #14]
 80012c6:	79fa      	ldrb	r2, [r7, #7]
 80012c8:	4419      	add	r1, r3
 80012ca:	4839      	ldr	r0, [pc, #228]	@ (80013b0 <linkTimer+0x14c>)
 80012cc:	4613      	mov	r3, r2
 80012ce:	005b      	lsls	r3, r3, #1
 80012d0:	4413      	add	r3, r2
 80012d2:	00db      	lsls	r3, r3, #3
 80012d4:	4403      	add	r3, r0
 80012d6:	3308      	adds	r3, #8
 80012d8:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 80012da:	79fa      	ldrb	r2, [r7, #7]
 80012dc:	4934      	ldr	r1, [pc, #208]	@ (80013b0 <linkTimer+0x14c>)
 80012de:	4613      	mov	r3, r2
 80012e0:	005b      	lsls	r3, r3, #1
 80012e2:	4413      	add	r3, r2
 80012e4:	00db      	lsls	r3, r3, #3
 80012e6:	440b      	add	r3, r1
 80012e8:	3308      	adds	r3, #8
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 80012ee:	4b2e      	ldr	r3, [pc, #184]	@ (80013a8 <linkTimer+0x144>)
 80012f0:	781b      	ldrb	r3, [r3, #0]
 80012f2:	b2db      	uxtb	r3, r3
 80012f4:	4619      	mov	r1, r3
 80012f6:	4a2e      	ldr	r2, [pc, #184]	@ (80013b0 <linkTimer+0x14c>)
 80012f8:	460b      	mov	r3, r1
 80012fa:	005b      	lsls	r3, r3, #1
 80012fc:	440b      	add	r3, r1
 80012fe:	00db      	lsls	r3, r3, #3
 8001300:	4413      	add	r3, r2
 8001302:	3308      	adds	r3, #8
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	68ba      	ldr	r2, [r7, #8]
 8001308:	429a      	cmp	r2, r3
 800130a:	d337      	bcc.n	800137c <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 800130c:	4b26      	ldr	r3, [pc, #152]	@ (80013a8 <linkTimer+0x144>)
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 8001312:	7b7a      	ldrb	r2, [r7, #13]
 8001314:	4926      	ldr	r1, [pc, #152]	@ (80013b0 <linkTimer+0x14c>)
 8001316:	4613      	mov	r3, r2
 8001318:	005b      	lsls	r3, r3, #1
 800131a:	4413      	add	r3, r2
 800131c:	00db      	lsls	r3, r3, #3
 800131e:	440b      	add	r3, r1
 8001320:	3315      	adds	r3, #21
 8001322:	781b      	ldrb	r3, [r3, #0]
 8001324:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8001326:	e013      	b.n	8001350 <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8001328:	7b7a      	ldrb	r2, [r7, #13]
 800132a:	4921      	ldr	r1, [pc, #132]	@ (80013b0 <linkTimer+0x14c>)
 800132c:	4613      	mov	r3, r2
 800132e:	005b      	lsls	r3, r3, #1
 8001330:	4413      	add	r3, r2
 8001332:	00db      	lsls	r3, r3, #3
 8001334:	440b      	add	r3, r1
 8001336:	3315      	adds	r3, #21
 8001338:	781b      	ldrb	r3, [r3, #0]
 800133a:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 800133c:	7b7a      	ldrb	r2, [r7, #13]
 800133e:	491c      	ldr	r1, [pc, #112]	@ (80013b0 <linkTimer+0x14c>)
 8001340:	4613      	mov	r3, r2
 8001342:	005b      	lsls	r3, r3, #1
 8001344:	4413      	add	r3, r2
 8001346:	00db      	lsls	r3, r3, #3
 8001348:	440b      	add	r3, r1
 800134a:	3315      	adds	r3, #21
 800134c:	781b      	ldrb	r3, [r3, #0]
 800134e:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8001350:	7b3b      	ldrb	r3, [r7, #12]
 8001352:	2b06      	cmp	r3, #6
 8001354:	d00b      	beq.n	800136e <linkTimer+0x10a>
 8001356:	7b3a      	ldrb	r2, [r7, #12]
 8001358:	4915      	ldr	r1, [pc, #84]	@ (80013b0 <linkTimer+0x14c>)
 800135a:	4613      	mov	r3, r2
 800135c:	005b      	lsls	r3, r3, #1
 800135e:	4413      	add	r3, r2
 8001360:	00db      	lsls	r3, r3, #3
 8001362:	440b      	add	r3, r1
 8001364:	3308      	adds	r3, #8
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	68ba      	ldr	r2, [r7, #8]
 800136a:	429a      	cmp	r2, r3
 800136c:	d2dc      	bcs.n	8001328 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 800136e:	7b7a      	ldrb	r2, [r7, #13]
 8001370:	79fb      	ldrb	r3, [r7, #7]
 8001372:	4611      	mov	r1, r2
 8001374:	4618      	mov	r0, r3
 8001376:	f7ff fecf 	bl	8001118 <LinkTimerAfter>
 800137a:	e00f      	b.n	800139c <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 800137c:	4b0a      	ldr	r3, [pc, #40]	@ (80013a8 <linkTimer+0x144>)
 800137e:	781b      	ldrb	r3, [r3, #0]
 8001380:	b2da      	uxtb	r2, r3
 8001382:	79fb      	ldrb	r3, [r7, #7]
 8001384:	4611      	mov	r1, r2
 8001386:	4618      	mov	r0, r3
 8001388:	f7ff ff0c 	bl	80011a4 <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 800138c:	4b06      	ldr	r3, [pc, #24]	@ (80013a8 <linkTimer+0x144>)
 800138e:	781b      	ldrb	r3, [r3, #0]
 8001390:	b2da      	uxtb	r2, r3
 8001392:	4b06      	ldr	r3, [pc, #24]	@ (80013ac <linkTimer+0x148>)
 8001394:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 8001396:	4a04      	ldr	r2, [pc, #16]	@ (80013a8 <linkTimer+0x144>)
 8001398:	79fb      	ldrb	r3, [r7, #7]
 800139a:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 800139c:	89fb      	ldrh	r3, [r7, #14]
}
 800139e:	4618      	mov	r0, r3
 80013a0:	3710      	adds	r7, #16
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	200001dc 	.word	0x200001dc
 80013ac:	200001dd 	.word	0x200001dd
 80013b0:	2000014c 	.word	0x2000014c
 80013b4:	200001e0 	.word	0x200001e0

080013b8 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b085      	sub	sp, #20
 80013bc:	af00      	add	r7, sp, #0
 80013be:	4603      	mov	r3, r0
 80013c0:	460a      	mov	r2, r1
 80013c2:	71fb      	strb	r3, [r7, #7]
 80013c4:	4613      	mov	r3, r2
 80013c6:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 80013c8:	4b39      	ldr	r3, [pc, #228]	@ (80014b0 <UnlinkTimer+0xf8>)
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	b2db      	uxtb	r3, r3
 80013ce:	79fa      	ldrb	r2, [r7, #7]
 80013d0:	429a      	cmp	r2, r3
 80013d2:	d111      	bne.n	80013f8 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 80013d4:	4b36      	ldr	r3, [pc, #216]	@ (80014b0 <UnlinkTimer+0xf8>)
 80013d6:	781b      	ldrb	r3, [r3, #0]
 80013d8:	b2da      	uxtb	r2, r3
 80013da:	4b36      	ldr	r3, [pc, #216]	@ (80014b4 <UnlinkTimer+0xfc>)
 80013dc:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 80013de:	79fa      	ldrb	r2, [r7, #7]
 80013e0:	4935      	ldr	r1, [pc, #212]	@ (80014b8 <UnlinkTimer+0x100>)
 80013e2:	4613      	mov	r3, r2
 80013e4:	005b      	lsls	r3, r3, #1
 80013e6:	4413      	add	r3, r2
 80013e8:	00db      	lsls	r3, r3, #3
 80013ea:	440b      	add	r3, r1
 80013ec:	3315      	adds	r3, #21
 80013ee:	781b      	ldrb	r3, [r3, #0]
 80013f0:	b2da      	uxtb	r2, r3
 80013f2:	4b2f      	ldr	r3, [pc, #188]	@ (80014b0 <UnlinkTimer+0xf8>)
 80013f4:	701a      	strb	r2, [r3, #0]
 80013f6:	e03e      	b.n	8001476 <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 80013f8:	79fa      	ldrb	r2, [r7, #7]
 80013fa:	492f      	ldr	r1, [pc, #188]	@ (80014b8 <UnlinkTimer+0x100>)
 80013fc:	4613      	mov	r3, r2
 80013fe:	005b      	lsls	r3, r3, #1
 8001400:	4413      	add	r3, r2
 8001402:	00db      	lsls	r3, r3, #3
 8001404:	440b      	add	r3, r1
 8001406:	3314      	adds	r3, #20
 8001408:	781b      	ldrb	r3, [r3, #0]
 800140a:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 800140c:	79fa      	ldrb	r2, [r7, #7]
 800140e:	492a      	ldr	r1, [pc, #168]	@ (80014b8 <UnlinkTimer+0x100>)
 8001410:	4613      	mov	r3, r2
 8001412:	005b      	lsls	r3, r3, #1
 8001414:	4413      	add	r3, r2
 8001416:	00db      	lsls	r3, r3, #3
 8001418:	440b      	add	r3, r1
 800141a:	3315      	adds	r3, #21
 800141c:	781b      	ldrb	r3, [r3, #0]
 800141e:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8001420:	79f9      	ldrb	r1, [r7, #7]
 8001422:	7bfa      	ldrb	r2, [r7, #15]
 8001424:	4824      	ldr	r0, [pc, #144]	@ (80014b8 <UnlinkTimer+0x100>)
 8001426:	460b      	mov	r3, r1
 8001428:	005b      	lsls	r3, r3, #1
 800142a:	440b      	add	r3, r1
 800142c:	00db      	lsls	r3, r3, #3
 800142e:	4403      	add	r3, r0
 8001430:	3315      	adds	r3, #21
 8001432:	781b      	ldrb	r3, [r3, #0]
 8001434:	b2d8      	uxtb	r0, r3
 8001436:	4920      	ldr	r1, [pc, #128]	@ (80014b8 <UnlinkTimer+0x100>)
 8001438:	4613      	mov	r3, r2
 800143a:	005b      	lsls	r3, r3, #1
 800143c:	4413      	add	r3, r2
 800143e:	00db      	lsls	r3, r3, #3
 8001440:	440b      	add	r3, r1
 8001442:	3315      	adds	r3, #21
 8001444:	4602      	mov	r2, r0
 8001446:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001448:	7bbb      	ldrb	r3, [r7, #14]
 800144a:	2b06      	cmp	r3, #6
 800144c:	d013      	beq.n	8001476 <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 800144e:	79f9      	ldrb	r1, [r7, #7]
 8001450:	7bba      	ldrb	r2, [r7, #14]
 8001452:	4819      	ldr	r0, [pc, #100]	@ (80014b8 <UnlinkTimer+0x100>)
 8001454:	460b      	mov	r3, r1
 8001456:	005b      	lsls	r3, r3, #1
 8001458:	440b      	add	r3, r1
 800145a:	00db      	lsls	r3, r3, #3
 800145c:	4403      	add	r3, r0
 800145e:	3314      	adds	r3, #20
 8001460:	781b      	ldrb	r3, [r3, #0]
 8001462:	b2d8      	uxtb	r0, r3
 8001464:	4914      	ldr	r1, [pc, #80]	@ (80014b8 <UnlinkTimer+0x100>)
 8001466:	4613      	mov	r3, r2
 8001468:	005b      	lsls	r3, r3, #1
 800146a:	4413      	add	r3, r2
 800146c:	00db      	lsls	r3, r3, #3
 800146e:	440b      	add	r3, r1
 8001470:	3314      	adds	r3, #20
 8001472:	4602      	mov	r2, r0
 8001474:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 8001476:	79fa      	ldrb	r2, [r7, #7]
 8001478:	490f      	ldr	r1, [pc, #60]	@ (80014b8 <UnlinkTimer+0x100>)
 800147a:	4613      	mov	r3, r2
 800147c:	005b      	lsls	r3, r3, #1
 800147e:	4413      	add	r3, r2
 8001480:	00db      	lsls	r3, r3, #3
 8001482:	440b      	add	r3, r1
 8001484:	330c      	adds	r3, #12
 8001486:	2201      	movs	r2, #1
 8001488:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 800148a:	4b09      	ldr	r3, [pc, #36]	@ (80014b0 <UnlinkTimer+0xf8>)
 800148c:	781b      	ldrb	r3, [r3, #0]
 800148e:	b2db      	uxtb	r3, r3
 8001490:	2b06      	cmp	r3, #6
 8001492:	d107      	bne.n	80014a4 <UnlinkTimer+0xec>
 8001494:	79bb      	ldrb	r3, [r7, #6]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d104      	bne.n	80014a4 <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 800149a:	4b08      	ldr	r3, [pc, #32]	@ (80014bc <UnlinkTimer+0x104>)
 800149c:	f04f 32ff 	mov.w	r2, #4294967295
 80014a0:	601a      	str	r2, [r3, #0]
  }

  return;
 80014a2:	bf00      	nop
 80014a4:	bf00      	nop
}
 80014a6:	3714      	adds	r7, #20
 80014a8:	46bd      	mov	sp, r7
 80014aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ae:	4770      	bx	lr
 80014b0:	200001dc 	.word	0x200001dc
 80014b4:	200001dd 	.word	0x200001dd
 80014b8:	2000014c 	.word	0x2000014c
 80014bc:	200001e0 	.word	0x200001e0

080014c0 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b082      	sub	sp, #8
 80014c4:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 80014c6:	4b1a      	ldr	r3, [pc, #104]	@ (8001530 <ReturnTimeElapsed+0x70>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014ce:	d026      	beq.n	800151e <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 80014d0:	f7ff fe02 	bl	80010d8 <ReadRtcSsrValue>
 80014d4:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 80014d6:	4b16      	ldr	r3, [pc, #88]	@ (8001530 <ReturnTimeElapsed+0x70>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	687a      	ldr	r2, [r7, #4]
 80014dc:	429a      	cmp	r2, r3
 80014de:	d805      	bhi.n	80014ec <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 80014e0:	4b13      	ldr	r3, [pc, #76]	@ (8001530 <ReturnTimeElapsed+0x70>)
 80014e2:	681a      	ldr	r2, [r3, #0]
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	1ad3      	subs	r3, r2, r3
 80014e8:	607b      	str	r3, [r7, #4]
 80014ea:	e00a      	b.n	8001502 <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 80014ec:	4b11      	ldr	r3, [pc, #68]	@ (8001534 <ReturnTimeElapsed+0x74>)
 80014ee:	881b      	ldrh	r3, [r3, #0]
 80014f0:	461a      	mov	r2, r3
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	1ad3      	subs	r3, r2, r3
 80014f6:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 80014f8:	4b0d      	ldr	r3, [pc, #52]	@ (8001530 <ReturnTimeElapsed+0x70>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	683a      	ldr	r2, [r7, #0]
 80014fe:	4413      	add	r3, r2
 8001500:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 8001502:	4b0d      	ldr	r3, [pc, #52]	@ (8001538 <ReturnTimeElapsed+0x78>)
 8001504:	781b      	ldrb	r3, [r3, #0]
 8001506:	461a      	mov	r2, r3
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	fb02 f303 	mul.w	r3, r2, r3
 800150e:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8001510:	4b0a      	ldr	r3, [pc, #40]	@ (800153c <ReturnTimeElapsed+0x7c>)
 8001512:	781b      	ldrb	r3, [r3, #0]
 8001514:	461a      	mov	r2, r3
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	40d3      	lsrs	r3, r2
 800151a:	607b      	str	r3, [r7, #4]
 800151c:	e001      	b.n	8001522 <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 800151e:	2300      	movs	r3, #0
 8001520:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	b29b      	uxth	r3, r3
}
 8001526:	4618      	mov	r0, r3
 8001528:	3708      	adds	r7, #8
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	200001e0 	.word	0x200001e0
 8001534:	200001e8 	.word	0x200001e8
 8001538:	200001e6 	.word	0x200001e6
 800153c:	200001e5 	.word	0x200001e5

08001540 <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b082      	sub	sp, #8
 8001544:	af00      	add	r7, sp, #0
 8001546:	4603      	mov	r3, r0
 8001548:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
   */

  if(Value == 0)
 800154a:	88fb      	ldrh	r3, [r7, #6]
 800154c:	2b00      	cmp	r3, #0
 800154e:	d108      	bne.n	8001562 <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8001550:	f7ff fdc2 	bl	80010d8 <ReadRtcSsrValue>
 8001554:	4603      	mov	r3, r0
 8001556:	4a21      	ldr	r2, [pc, #132]	@ (80015dc <RestartWakeupCounter+0x9c>)
 8001558:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 800155a:	2003      	movs	r0, #3
 800155c:	f006 f90f 	bl	800777e <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8001560:	e039      	b.n	80015d6 <RestartWakeupCounter+0x96>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 8001562:	88fb      	ldrh	r3, [r7, #6]
 8001564:	2b01      	cmp	r3, #1
 8001566:	d803      	bhi.n	8001570 <RestartWakeupCounter+0x30>
 8001568:	4b1d      	ldr	r3, [pc, #116]	@ (80015e0 <RestartWakeupCounter+0xa0>)
 800156a:	781b      	ldrb	r3, [r3, #0]
 800156c:	2b01      	cmp	r3, #1
 800156e:	d002      	beq.n	8001576 <RestartWakeupCounter+0x36>
      Value -= 1;
 8001570:	88fb      	ldrh	r3, [r7, #6]
 8001572:	3b01      	subs	r3, #1
 8001574:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8001576:	bf00      	nop
 8001578:	4b1a      	ldr	r3, [pc, #104]	@ (80015e4 <RestartWakeupCounter+0xa4>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	68db      	ldr	r3, [r3, #12]
 800157e:	f003 0304 	and.w	r3, r3, #4
 8001582:	2b00      	cmp	r3, #0
 8001584:	d0f8      	beq.n	8001578 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001586:	4b17      	ldr	r3, [pc, #92]	@ (80015e4 <RestartWakeupCounter+0xa4>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	68db      	ldr	r3, [r3, #12]
 800158c:	b2da      	uxtb	r2, r3
 800158e:	4b15      	ldr	r3, [pc, #84]	@ (80015e4 <RestartWakeupCounter+0xa4>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8001596:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001598:	4b13      	ldr	r3, [pc, #76]	@ (80015e8 <RestartWakeupCounter+0xa8>)
 800159a:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800159e:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 80015a0:	2003      	movs	r0, #3
 80015a2:	f006 f8fa 	bl	800779a <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 80015a6:	4b11      	ldr	r3, [pc, #68]	@ (80015ec <RestartWakeupCounter+0xac>)
 80015a8:	695b      	ldr	r3, [r3, #20]
 80015aa:	0c1b      	lsrs	r3, r3, #16
 80015ac:	041b      	lsls	r3, r3, #16
 80015ae:	88fa      	ldrh	r2, [r7, #6]
 80015b0:	490e      	ldr	r1, [pc, #56]	@ (80015ec <RestartWakeupCounter+0xac>)
 80015b2:	4313      	orrs	r3, r2
 80015b4:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 80015b6:	f7ff fd8f 	bl	80010d8 <ReadRtcSsrValue>
 80015ba:	4603      	mov	r3, r0
 80015bc:	4a07      	ldr	r2, [pc, #28]	@ (80015dc <RestartWakeupCounter+0x9c>)
 80015be:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */
 80015c0:	4b08      	ldr	r3, [pc, #32]	@ (80015e4 <RestartWakeupCounter+0xa4>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	689a      	ldr	r2, [r3, #8]
 80015c6:	4b07      	ldr	r3, [pc, #28]	@ (80015e4 <RestartWakeupCounter+0xa4>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80015ce:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 80015d0:	f3af 8000 	nop.w
  return ;
 80015d4:	bf00      	nop
}
 80015d6:	3708      	adds	r7, #8
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	200001e0 	.word	0x200001e0
 80015e0:	200001e5 	.word	0x200001e5
 80015e4:	200002e0 	.word	0x200002e0
 80015e8:	58000800 	.word	0x58000800
 80015ec:	40002800 	.word	0x40002800

080015f0 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b084      	sub	sp, #16
 80015f4:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 80015f6:	4b45      	ldr	r3, [pc, #276]	@ (800170c <RescheduleTimerList+0x11c>)
 80015f8:	689b      	ldr	r3, [r3, #8]
 80015fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80015fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001602:	d107      	bne.n	8001614 <RescheduleTimerList+0x24>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8001604:	bf00      	nop
 8001606:	4b42      	ldr	r3, [pc, #264]	@ (8001710 <RescheduleTimerList+0x120>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	68db      	ldr	r3, [r3, #12]
 800160c:	f003 0304 	and.w	r3, r3, #4
 8001610:	2b00      	cmp	r3, #0
 8001612:	d1f8      	bne.n	8001606 <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8001614:	4b3e      	ldr	r3, [pc, #248]	@ (8001710 <RescheduleTimerList+0x120>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	689a      	ldr	r2, [r3, #8]
 800161a:	4b3d      	ldr	r3, [pc, #244]	@ (8001710 <RescheduleTimerList+0x120>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001622:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 8001624:	4b3b      	ldr	r3, [pc, #236]	@ (8001714 <RescheduleTimerList+0x124>)
 8001626:	781b      	ldrb	r3, [r3, #0]
 8001628:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 800162a:	7bfa      	ldrb	r2, [r7, #15]
 800162c:	493a      	ldr	r1, [pc, #232]	@ (8001718 <RescheduleTimerList+0x128>)
 800162e:	4613      	mov	r3, r2
 8001630:	005b      	lsls	r3, r3, #1
 8001632:	4413      	add	r3, r2
 8001634:	00db      	lsls	r3, r3, #3
 8001636:	440b      	add	r3, r1
 8001638:	3308      	adds	r3, #8
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 800163e:	f7ff ff3f 	bl	80014c0 <ReturnTimeElapsed>
 8001642:	4603      	mov	r3, r0
 8001644:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 8001646:	88fb      	ldrh	r3, [r7, #6]
 8001648:	68ba      	ldr	r2, [r7, #8]
 800164a:	429a      	cmp	r2, r3
 800164c:	d205      	bcs.n	800165a <RescheduleTimerList+0x6a>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 800164e:	2300      	movs	r3, #0
 8001650:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001652:	4b32      	ldr	r3, [pc, #200]	@ (800171c <RescheduleTimerList+0x12c>)
 8001654:	2201      	movs	r2, #1
 8001656:	701a      	strb	r2, [r3, #0]
 8001658:	e04d      	b.n	80016f6 <RescheduleTimerList+0x106>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 800165a:	88fb      	ldrh	r3, [r7, #6]
 800165c:	4a30      	ldr	r2, [pc, #192]	@ (8001720 <RescheduleTimerList+0x130>)
 800165e:	8812      	ldrh	r2, [r2, #0]
 8001660:	b292      	uxth	r2, r2
 8001662:	4413      	add	r3, r2
 8001664:	461a      	mov	r2, r3
 8001666:	68bb      	ldr	r3, [r7, #8]
 8001668:	4293      	cmp	r3, r2
 800166a:	d906      	bls.n	800167a <RescheduleTimerList+0x8a>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 800166c:	4b2c      	ldr	r3, [pc, #176]	@ (8001720 <RescheduleTimerList+0x130>)
 800166e:	881b      	ldrh	r3, [r3, #0]
 8001670:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 8001672:	4b2a      	ldr	r3, [pc, #168]	@ (800171c <RescheduleTimerList+0x12c>)
 8001674:	2200      	movs	r2, #0
 8001676:	701a      	strb	r2, [r3, #0]
 8001678:	e03d      	b.n	80016f6 <RescheduleTimerList+0x106>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 800167a:	68bb      	ldr	r3, [r7, #8]
 800167c:	b29a      	uxth	r2, r3
 800167e:	88fb      	ldrh	r3, [r7, #6]
 8001680:	1ad3      	subs	r3, r2, r3
 8001682:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001684:	4b25      	ldr	r3, [pc, #148]	@ (800171c <RescheduleTimerList+0x12c>)
 8001686:	2201      	movs	r2, #1
 8001688:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800168a:	e034      	b.n	80016f6 <RescheduleTimerList+0x106>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 800168c:	7bfa      	ldrb	r2, [r7, #15]
 800168e:	4922      	ldr	r1, [pc, #136]	@ (8001718 <RescheduleTimerList+0x128>)
 8001690:	4613      	mov	r3, r2
 8001692:	005b      	lsls	r3, r3, #1
 8001694:	4413      	add	r3, r2
 8001696:	00db      	lsls	r3, r3, #3
 8001698:	440b      	add	r3, r1
 800169a:	3308      	adds	r3, #8
 800169c:	681a      	ldr	r2, [r3, #0]
 800169e:	88fb      	ldrh	r3, [r7, #6]
 80016a0:	429a      	cmp	r2, r3
 80016a2:	d20a      	bcs.n	80016ba <RescheduleTimerList+0xca>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 80016a4:	7bfa      	ldrb	r2, [r7, #15]
 80016a6:	491c      	ldr	r1, [pc, #112]	@ (8001718 <RescheduleTimerList+0x128>)
 80016a8:	4613      	mov	r3, r2
 80016aa:	005b      	lsls	r3, r3, #1
 80016ac:	4413      	add	r3, r2
 80016ae:	00db      	lsls	r3, r3, #3
 80016b0:	440b      	add	r3, r1
 80016b2:	3308      	adds	r3, #8
 80016b4:	2200      	movs	r2, #0
 80016b6:	601a      	str	r2, [r3, #0]
 80016b8:	e013      	b.n	80016e2 <RescheduleTimerList+0xf2>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 80016ba:	7bfa      	ldrb	r2, [r7, #15]
 80016bc:	4916      	ldr	r1, [pc, #88]	@ (8001718 <RescheduleTimerList+0x128>)
 80016be:	4613      	mov	r3, r2
 80016c0:	005b      	lsls	r3, r3, #1
 80016c2:	4413      	add	r3, r2
 80016c4:	00db      	lsls	r3, r3, #3
 80016c6:	440b      	add	r3, r1
 80016c8:	3308      	adds	r3, #8
 80016ca:	6819      	ldr	r1, [r3, #0]
 80016cc:	88fb      	ldrh	r3, [r7, #6]
 80016ce:	7bfa      	ldrb	r2, [r7, #15]
 80016d0:	1ac9      	subs	r1, r1, r3
 80016d2:	4811      	ldr	r0, [pc, #68]	@ (8001718 <RescheduleTimerList+0x128>)
 80016d4:	4613      	mov	r3, r2
 80016d6:	005b      	lsls	r3, r3, #1
 80016d8:	4413      	add	r3, r2
 80016da:	00db      	lsls	r3, r3, #3
 80016dc:	4403      	add	r3, r0
 80016de:	3308      	adds	r3, #8
 80016e0:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 80016e2:	7bfa      	ldrb	r2, [r7, #15]
 80016e4:	490c      	ldr	r1, [pc, #48]	@ (8001718 <RescheduleTimerList+0x128>)
 80016e6:	4613      	mov	r3, r2
 80016e8:	005b      	lsls	r3, r3, #1
 80016ea:	4413      	add	r3, r2
 80016ec:	00db      	lsls	r3, r3, #3
 80016ee:	440b      	add	r3, r1
 80016f0:	3315      	adds	r3, #21
 80016f2:	781b      	ldrb	r3, [r3, #0]
 80016f4:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80016f6:	7bfb      	ldrb	r3, [r7, #15]
 80016f8:	2b06      	cmp	r3, #6
 80016fa:	d1c7      	bne.n	800168c <RescheduleTimerList+0x9c>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 80016fc:	89bb      	ldrh	r3, [r7, #12]
 80016fe:	4618      	mov	r0, r3
 8001700:	f7ff ff1e 	bl	8001540 <RestartWakeupCounter>

  return ;
 8001704:	bf00      	nop
}
 8001706:	3710      	adds	r7, #16
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}
 800170c:	40002800 	.word	0x40002800
 8001710:	200002e0 	.word	0x200002e0
 8001714:	200001dc 	.word	0x200001dc
 8001718:	2000014c 	.word	0x2000014c
 800171c:	200001e4 	.word	0x200001e4
 8001720:	200001ea 	.word	0x200001ea

08001724 <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b08a      	sub	sp, #40	@ 0x28
 8001728:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800172a:	f3ef 8310 	mrs	r3, PRIMASK
 800172e:	617b      	str	r3, [r7, #20]
  return(result);
 8001730:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001732:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8001734:	b672      	cpsid	i
}
 8001736:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001738:	4b59      	ldr	r3, [pc, #356]	@ (80018a0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	22ca      	movs	r2, #202	@ 0xca
 800173e:	625a      	str	r2, [r3, #36]	@ 0x24
 8001740:	4b57      	ldr	r3, [pc, #348]	@ (80018a0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	2253      	movs	r2, #83	@ 0x53
 8001746:	625a      	str	r2, [r3, #36]	@ 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
 8001748:	4b55      	ldr	r3, [pc, #340]	@ (80018a0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	689a      	ldr	r2, [r3, #8]
 800174e:	4b54      	ldr	r3, [pc, #336]	@ (80018a0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001756:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 8001758:	4b52      	ldr	r3, [pc, #328]	@ (80018a4 <HW_TS_RTC_Wakeup_Handler+0x180>)
 800175a:	781b      	ldrb	r3, [r3, #0]
 800175c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 8001760:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8001764:	4950      	ldr	r1, [pc, #320]	@ (80018a8 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001766:	4613      	mov	r3, r2
 8001768:	005b      	lsls	r3, r3, #1
 800176a:	4413      	add	r3, r2
 800176c:	00db      	lsls	r3, r3, #3
 800176e:	440b      	add	r3, r1
 8001770:	330c      	adds	r3, #12
 8001772:	781b      	ldrb	r3, [r3, #0]
 8001774:	b2db      	uxtb	r3, r3
 8001776:	2b02      	cmp	r3, #2
 8001778:	d16e      	bne.n	8001858 <HW_TS_RTC_Wakeup_Handler+0x134>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 800177a:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800177e:	494a      	ldr	r1, [pc, #296]	@ (80018a8 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001780:	4613      	mov	r3, r2
 8001782:	005b      	lsls	r3, r3, #1
 8001784:	4413      	add	r3, r2
 8001786:	00db      	lsls	r3, r3, #3
 8001788:	440b      	add	r3, r1
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 800178e:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8001792:	4945      	ldr	r1, [pc, #276]	@ (80018a8 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001794:	4613      	mov	r3, r2
 8001796:	005b      	lsls	r3, r3, #1
 8001798:	4413      	add	r3, r2
 800179a:	00db      	lsls	r3, r3, #3
 800179c:	440b      	add	r3, r1
 800179e:	3310      	adds	r3, #16
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 80017a4:	4b41      	ldr	r3, [pc, #260]	@ (80018ac <HW_TS_RTC_Wakeup_Handler+0x188>)
 80017a6:	781b      	ldrb	r3, [r3, #0]
 80017a8:	b2db      	uxtb	r3, r3
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d04c      	beq.n	8001848 <HW_TS_RTC_Wakeup_Handler+0x124>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 80017ae:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 80017b2:	493d      	ldr	r1, [pc, #244]	@ (80018a8 <HW_TS_RTC_Wakeup_Handler+0x184>)
 80017b4:	4613      	mov	r3, r2
 80017b6:	005b      	lsls	r3, r3, #1
 80017b8:	4413      	add	r3, r2
 80017ba:	00db      	lsls	r3, r3, #3
 80017bc:	440b      	add	r3, r1
 80017be:	330d      	adds	r3, #13
 80017c0:	781b      	ldrb	r3, [r3, #0]
 80017c2:	b2db      	uxtb	r3, r3
 80017c4:	2b01      	cmp	r3, #1
 80017c6:	d124      	bne.n	8001812 <HW_TS_RTC_Wakeup_Handler+0xee>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 80017c8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80017cc:	2101      	movs	r1, #1
 80017ce:	4618      	mov	r0, r3
 80017d0:	f7ff fdf2 	bl	80013b8 <UnlinkTimer>
 80017d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017d6:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80017d8:	693b      	ldr	r3, [r7, #16]
 80017da:	f383 8810 	msr	PRIMASK, r3
}
 80017de:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 80017e0:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 80017e4:	4930      	ldr	r1, [pc, #192]	@ (80018a8 <HW_TS_RTC_Wakeup_Handler+0x184>)
 80017e6:	4613      	mov	r3, r2
 80017e8:	005b      	lsls	r3, r3, #1
 80017ea:	4413      	add	r3, r2
 80017ec:	00db      	lsls	r3, r3, #3
 80017ee:	440b      	add	r3, r1
 80017f0:	3304      	adds	r3, #4
 80017f2:	681a      	ldr	r2, [r3, #0]
 80017f4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80017f8:	4611      	mov	r1, r2
 80017fa:	4618      	mov	r0, r3
 80017fc:	f000 f9b8 	bl	8001b70 <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001800:	4b27      	ldr	r3, [pc, #156]	@ (80018a0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	22ca      	movs	r2, #202	@ 0xca
 8001806:	625a      	str	r2, [r3, #36]	@ 0x24
 8001808:	4b25      	ldr	r3, [pc, #148]	@ (80018a0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	2253      	movs	r2, #83	@ 0x53
 800180e:	625a      	str	r2, [r3, #36]	@ 0x24
 8001810:	e012      	b.n	8001838 <HW_TS_RTC_Wakeup_Handler+0x114>
 8001812:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001814:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	f383 8810 	msr	PRIMASK, r3
}
 800181c:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 800181e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001822:	4618      	mov	r0, r3
 8001824:	f000 f920 	bl	8001a68 <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001828:	4b1d      	ldr	r3, [pc, #116]	@ (80018a0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	22ca      	movs	r2, #202	@ 0xca
 800182e:	625a      	str	r2, [r3, #36]	@ 0x24
 8001830:	4b1b      	ldr	r3, [pc, #108]	@ (80018a0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	2253      	movs	r2, #83	@ 0x53
 8001836:	625a      	str	r2, [r3, #36]	@ 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 8001838:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800183c:	69fa      	ldr	r2, [r7, #28]
 800183e:	4619      	mov	r1, r3
 8001840:	69b8      	ldr	r0, [r7, #24]
 8001842:	f000 fa1b 	bl	8001c7c <HW_TS_RTC_Int_AppNot>
 8001846:	e022      	b.n	800188e <HW_TS_RTC_Wakeup_Handler+0x16a>
    }
    else
    {
      RescheduleTimerList();
 8001848:	f7ff fed2 	bl	80015f0 <RescheduleTimerList>
 800184c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800184e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001850:	68bb      	ldr	r3, [r7, #8]
 8001852:	f383 8810 	msr	PRIMASK, r3
}
 8001856:	e01a      	b.n	800188e <HW_TS_RTC_Wakeup_Handler+0x16a>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8001858:	bf00      	nop
 800185a:	4b11      	ldr	r3, [pc, #68]	@ (80018a0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	68db      	ldr	r3, [r3, #12]
 8001860:	f003 0304 	and.w	r3, r3, #4
 8001864:	2b00      	cmp	r3, #0
 8001866:	d0f8      	beq.n	800185a <HW_TS_RTC_Wakeup_Handler+0x136>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001868:	4b0d      	ldr	r3, [pc, #52]	@ (80018a0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	68db      	ldr	r3, [r3, #12]
 800186e:	b2da      	uxtb	r2, r3
 8001870:	4b0b      	ldr	r3, [pc, #44]	@ (80018a0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8001878:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 800187a:	4b0d      	ldr	r3, [pc, #52]	@ (80018b0 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 800187c:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001880:	60da      	str	r2, [r3, #12]
 8001882:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001884:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	f383 8810 	msr	PRIMASK, r3
}
 800188c:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 800188e:	4b04      	ldr	r3, [pc, #16]	@ (80018a0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	22ff      	movs	r2, #255	@ 0xff
 8001894:	625a      	str	r2, [r3, #36]	@ 0x24

  return;
 8001896:	bf00      	nop
}
 8001898:	3728      	adds	r7, #40	@ 0x28
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	200002e0 	.word	0x200002e0
 80018a4:	200001dc 	.word	0x200001dc
 80018a8:	2000014c 	.word	0x2000014c
 80018ac:	200001e4 	.word	0x200001e4
 80018b0:	58000800 	.word	0x58000800

080018b4 <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *phrtc)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b088      	sub	sp, #32
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	4603      	mov	r3, r0
 80018bc:	6039      	str	r1, [r7, #0]
 80018be:	71fb      	strb	r3, [r7, #7]
  uint8_t loop;
  uint32_t localmaxwakeuptimersetup;

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80018c0:	4b5e      	ldr	r3, [pc, #376]	@ (8001a3c <HW_TS_Init+0x188>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	22ca      	movs	r2, #202	@ 0xca
 80018c6:	625a      	str	r2, [r3, #36]	@ 0x24
 80018c8:	4b5c      	ldr	r3, [pc, #368]	@ (8001a3c <HW_TS_Init+0x188>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	2253      	movs	r2, #83	@ 0x53
 80018ce:	625a      	str	r2, [r3, #36]	@ 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80018d0:	4b5b      	ldr	r3, [pc, #364]	@ (8001a40 <HW_TS_Init+0x18c>)
 80018d2:	689b      	ldr	r3, [r3, #8]
 80018d4:	4a5a      	ldr	r2, [pc, #360]	@ (8001a40 <HW_TS_Init+0x18c>)
 80018d6:	f043 0320 	orr.w	r3, r3, #32
 80018da:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 80018dc:	4b58      	ldr	r3, [pc, #352]	@ (8001a40 <HW_TS_Init+0x18c>)
 80018de:	689b      	ldr	r3, [r3, #8]
 80018e0:	b2db      	uxtb	r3, r3
 80018e2:	f003 0307 	and.w	r3, r3, #7
 80018e6:	b2db      	uxtb	r3, r3
 80018e8:	f1c3 0304 	rsb	r3, r3, #4
 80018ec:	b2da      	uxtb	r2, r3
 80018ee:	4b55      	ldr	r3, [pc, #340]	@ (8001a44 <HW_TS_Init+0x190>)
 80018f0:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 80018f2:	4b53      	ldr	r3, [pc, #332]	@ (8001a40 <HW_TS_Init+0x18c>)
 80018f4:	691b      	ldr	r3, [r3, #16]
 80018f6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80018fa:	f44f 02fe 	mov.w	r2, #8323072	@ 0x7f0000
 80018fe:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001900:	693a      	ldr	r2, [r7, #16]
 8001902:	fa92 f2a2 	rbit	r2, r2
 8001906:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001908:	68fa      	ldr	r2, [r7, #12]
 800190a:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800190c:	697a      	ldr	r2, [r7, #20]
 800190e:	2a00      	cmp	r2, #0
 8001910:	d101      	bne.n	8001916 <HW_TS_Init+0x62>
  {
    return 32U;
 8001912:	2220      	movs	r2, #32
 8001914:	e003      	b.n	800191e <HW_TS_Init+0x6a>
  }
  return __builtin_clz(value);
 8001916:	697a      	ldr	r2, [r7, #20]
 8001918:	fab2 f282 	clz	r2, r2
 800191c:	b2d2      	uxtb	r2, r2
 800191e:	40d3      	lsrs	r3, r2
 8001920:	b2db      	uxtb	r3, r3
 8001922:	3301      	adds	r3, #1
 8001924:	b2da      	uxtb	r2, r3
 8001926:	4b48      	ldr	r3, [pc, #288]	@ (8001a48 <HW_TS_Init+0x194>)
 8001928:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 800192a:	4b45      	ldr	r3, [pc, #276]	@ (8001a40 <HW_TS_Init+0x18c>)
 800192c:	691b      	ldr	r3, [r3, #16]
 800192e:	b29b      	uxth	r3, r3
 8001930:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001934:	b29b      	uxth	r3, r3
 8001936:	3301      	adds	r3, #1
 8001938:	b29a      	uxth	r2, r3
 800193a:	4b44      	ldr	r3, [pc, #272]	@ (8001a4c <HW_TS_Init+0x198>)
 800193c:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 800193e:	4b43      	ldr	r3, [pc, #268]	@ (8001a4c <HW_TS_Init+0x198>)
 8001940:	881b      	ldrh	r3, [r3, #0]
 8001942:	3b01      	subs	r3, #1
 8001944:	4a40      	ldr	r2, [pc, #256]	@ (8001a48 <HW_TS_Init+0x194>)
 8001946:	7812      	ldrb	r2, [r2, #0]
 8001948:	fb02 f303 	mul.w	r3, r2, r3
 800194c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001950:	4a3c      	ldr	r2, [pc, #240]	@ (8001a44 <HW_TS_Init+0x190>)
 8001952:	7812      	ldrb	r2, [r2, #0]
 8001954:	40d3      	lsrs	r3, r2
 8001956:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 8001958:	69bb      	ldr	r3, [r7, #24]
 800195a:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800195e:	4293      	cmp	r3, r2
 8001960:	d904      	bls.n	800196c <HW_TS_Init+0xb8>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 8001962:	4b3b      	ldr	r3, [pc, #236]	@ (8001a50 <HW_TS_Init+0x19c>)
 8001964:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001968:	801a      	strh	r2, [r3, #0]
 800196a:	e003      	b.n	8001974 <HW_TS_Init+0xc0>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 800196c:	69bb      	ldr	r3, [r7, #24]
 800196e:	b29a      	uxth	r2, r3
 8001970:	4b37      	ldr	r3, [pc, #220]	@ (8001a50 <HW_TS_Init+0x19c>)
 8001972:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8001974:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8001978:	f7ff fb9c 	bl	80010b4 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 800197c:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8001980:	f7ff fb84 	bl	800108c <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 8001984:	79fb      	ldrb	r3, [r7, #7]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d13d      	bne.n	8001a06 <HW_TS_Init+0x152>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 800198a:	4b32      	ldr	r3, [pc, #200]	@ (8001a54 <HW_TS_Init+0x1a0>)
 800198c:	2201      	movs	r2, #1
 800198e:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001990:	4b31      	ldr	r3, [pc, #196]	@ (8001a58 <HW_TS_Init+0x1a4>)
 8001992:	f04f 32ff 	mov.w	r2, #4294967295
 8001996:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8001998:	2300      	movs	r3, #0
 800199a:	77fb      	strb	r3, [r7, #31]
 800199c:	e00c      	b.n	80019b8 <HW_TS_Init+0x104>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 800199e:	7ffa      	ldrb	r2, [r7, #31]
 80019a0:	492e      	ldr	r1, [pc, #184]	@ (8001a5c <HW_TS_Init+0x1a8>)
 80019a2:	4613      	mov	r3, r2
 80019a4:	005b      	lsls	r3, r3, #1
 80019a6:	4413      	add	r3, r2
 80019a8:	00db      	lsls	r3, r3, #3
 80019aa:	440b      	add	r3, r1
 80019ac:	330c      	adds	r3, #12
 80019ae:	2200      	movs	r2, #0
 80019b0:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 80019b2:	7ffb      	ldrb	r3, [r7, #31]
 80019b4:	3301      	adds	r3, #1
 80019b6:	77fb      	strb	r3, [r7, #31]
 80019b8:	7ffb      	ldrb	r3, [r7, #31]
 80019ba:	2b05      	cmp	r3, #5
 80019bc:	d9ef      	bls.n	800199e <HW_TS_Init+0xea>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 80019be:	4b28      	ldr	r3, [pc, #160]	@ (8001a60 <HW_TS_Init+0x1ac>)
 80019c0:	2206      	movs	r2, #6
 80019c2:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);                       /**<  Disable the Wakeup Timer */
 80019c4:	4b1d      	ldr	r3, [pc, #116]	@ (8001a3c <HW_TS_Init+0x188>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	689a      	ldr	r2, [r3, #8]
 80019ca:	4b1c      	ldr	r3, [pc, #112]	@ (8001a3c <HW_TS_Init+0x188>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80019d2:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 80019d4:	4b19      	ldr	r3, [pc, #100]	@ (8001a3c <HW_TS_Init+0x188>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	68db      	ldr	r3, [r3, #12]
 80019da:	b2da      	uxtb	r2, r3
 80019dc:	4b17      	ldr	r3, [pc, #92]	@ (8001a3c <HW_TS_Init+0x188>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 80019e4:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 80019e6:	4b1f      	ldr	r3, [pc, #124]	@ (8001a64 <HW_TS_Init+0x1b0>)
 80019e8:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80019ec:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 80019ee:	2003      	movs	r0, #3
 80019f0:	f005 fed3 	bl	800779a <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(&hrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 80019f4:	4b11      	ldr	r3, [pc, #68]	@ (8001a3c <HW_TS_Init+0x188>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	689a      	ldr	r2, [r3, #8]
 80019fa:	4b10      	ldr	r3, [pc, #64]	@ (8001a3c <HW_TS_Init+0x188>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001a02:	609a      	str	r2, [r3, #8]
 8001a04:	e009      	b.n	8001a1a <HW_TS_Init+0x166>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTF) != RESET)
 8001a06:	4b0d      	ldr	r3, [pc, #52]	@ (8001a3c <HW_TS_Init+0x188>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	68db      	ldr	r3, [r3, #12]
 8001a0c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d002      	beq.n	8001a1a <HW_TS_Init+0x166>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8001a14:	2003      	movs	r0, #3
 8001a16:	f005 feb2 	bl	800777e <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8001a1a:	4b08      	ldr	r3, [pc, #32]	@ (8001a3c <HW_TS_Init+0x188>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	22ff      	movs	r2, #255	@ 0xff
 8001a20:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 8001a22:	2200      	movs	r2, #0
 8001a24:	2103      	movs	r1, #3
 8001a26:	2003      	movs	r0, #3
 8001a28:	f005 fe67 	bl	80076fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001a2c:	2003      	movs	r0, #3
 8001a2e:	f005 fe7e 	bl	800772e <HAL_NVIC_EnableIRQ>

  return;
 8001a32:	bf00      	nop
}
 8001a34:	3720      	adds	r7, #32
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	200002e0 	.word	0x200002e0
 8001a40:	40002800 	.word	0x40002800
 8001a44:	200001e5 	.word	0x200001e5
 8001a48:	200001e6 	.word	0x200001e6
 8001a4c:	200001e8 	.word	0x200001e8
 8001a50:	200001ea 	.word	0x200001ea
 8001a54:	200001e4 	.word	0x200001e4
 8001a58:	200001e0 	.word	0x200001e0
 8001a5c:	2000014c 	.word	0x2000014c
 8001a60:	200001dc 	.word	0x200001dc
 8001a64:	58000800 	.word	0x58000800

08001a68 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b086      	sub	sp, #24
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	4603      	mov	r3, r0
 8001a70:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001a72:	f3ef 8310 	mrs	r3, PRIMASK
 8001a76:	60fb      	str	r3, [r7, #12]
  return(result);
 8001a78:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001a7a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001a7c:	b672      	cpsid	i
}
 8001a7e:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8001a80:	2003      	movs	r0, #3
 8001a82:	f005 fe62 	bl	800774a <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001a86:	4b34      	ldr	r3, [pc, #208]	@ (8001b58 <HW_TS_Stop+0xf0>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	22ca      	movs	r2, #202	@ 0xca
 8001a8c:	625a      	str	r2, [r3, #36]	@ 0x24
 8001a8e:	4b32      	ldr	r3, [pc, #200]	@ (8001b58 <HW_TS_Stop+0xf0>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	2253      	movs	r2, #83	@ 0x53
 8001a94:	625a      	str	r2, [r3, #36]	@ 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8001a96:	79fa      	ldrb	r2, [r7, #7]
 8001a98:	4930      	ldr	r1, [pc, #192]	@ (8001b5c <HW_TS_Stop+0xf4>)
 8001a9a:	4613      	mov	r3, r2
 8001a9c:	005b      	lsls	r3, r3, #1
 8001a9e:	4413      	add	r3, r2
 8001aa0:	00db      	lsls	r3, r3, #3
 8001aa2:	440b      	add	r3, r1
 8001aa4:	330c      	adds	r3, #12
 8001aa6:	781b      	ldrb	r3, [r3, #0]
 8001aa8:	b2db      	uxtb	r3, r3
 8001aaa:	2b02      	cmp	r3, #2
 8001aac:	d142      	bne.n	8001b34 <HW_TS_Stop+0xcc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 8001aae:	79fb      	ldrb	r3, [r7, #7]
 8001ab0:	2100      	movs	r1, #0
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f7ff fc80 	bl	80013b8 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 8001ab8:	4b29      	ldr	r3, [pc, #164]	@ (8001b60 <HW_TS_Stop+0xf8>)
 8001aba:	781b      	ldrb	r3, [r3, #0]
 8001abc:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001abe:	7cfb      	ldrb	r3, [r7, #19]
 8001ac0:	2b06      	cmp	r3, #6
 8001ac2:	d12f      	bne.n	8001b24 <HW_TS_Stop+0xbc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8001ac4:	4b27      	ldr	r3, [pc, #156]	@ (8001b64 <HW_TS_Stop+0xfc>)
 8001ac6:	689b      	ldr	r3, [r3, #8]
 8001ac8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001acc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001ad0:	d107      	bne.n	8001ae2 <HW_TS_Stop+0x7a>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8001ad2:	bf00      	nop
 8001ad4:	4b20      	ldr	r3, [pc, #128]	@ (8001b58 <HW_TS_Stop+0xf0>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	68db      	ldr	r3, [r3, #12]
 8001ada:	f003 0304 	and.w	r3, r3, #4
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d1f8      	bne.n	8001ad4 <HW_TS_Stop+0x6c>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8001ae2:	4b1d      	ldr	r3, [pc, #116]	@ (8001b58 <HW_TS_Stop+0xf0>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	689a      	ldr	r2, [r3, #8]
 8001ae8:	4b1b      	ldr	r3, [pc, #108]	@ (8001b58 <HW_TS_Stop+0xf0>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001af0:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8001af2:	bf00      	nop
 8001af4:	4b18      	ldr	r3, [pc, #96]	@ (8001b58 <HW_TS_Stop+0xf0>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	68db      	ldr	r3, [r3, #12]
 8001afa:	f003 0304 	and.w	r3, r3, #4
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d0f8      	beq.n	8001af4 <HW_TS_Stop+0x8c>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001b02:	4b15      	ldr	r3, [pc, #84]	@ (8001b58 <HW_TS_Stop+0xf0>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	68db      	ldr	r3, [r3, #12]
 8001b08:	b2da      	uxtb	r2, r3
 8001b0a:	4b13      	ldr	r3, [pc, #76]	@ (8001b58 <HW_TS_Stop+0xf0>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8001b12:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001b14:	4b14      	ldr	r3, [pc, #80]	@ (8001b68 <HW_TS_Stop+0x100>)
 8001b16:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001b1a:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8001b1c:	2003      	movs	r0, #3
 8001b1e:	f005 fe3c 	bl	800779a <HAL_NVIC_ClearPendingIRQ>
 8001b22:	e007      	b.n	8001b34 <HW_TS_Stop+0xcc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8001b24:	4b11      	ldr	r3, [pc, #68]	@ (8001b6c <HW_TS_Stop+0x104>)
 8001b26:	781b      	ldrb	r3, [r3, #0]
 8001b28:	b2db      	uxtb	r3, r3
 8001b2a:	7cfa      	ldrb	r2, [r7, #19]
 8001b2c:	429a      	cmp	r2, r3
 8001b2e:	d001      	beq.n	8001b34 <HW_TS_Stop+0xcc>
    {
      RescheduleTimerList();
 8001b30:	f7ff fd5e 	bl	80015f0 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8001b34:	4b08      	ldr	r3, [pc, #32]	@ (8001b58 <HW_TS_Stop+0xf0>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	22ff      	movs	r2, #255	@ 0xff
 8001b3a:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001b3c:	2003      	movs	r0, #3
 8001b3e:	f005 fdf6 	bl	800772e <HAL_NVIC_EnableIRQ>
 8001b42:	697b      	ldr	r3, [r7, #20]
 8001b44:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001b46:	68bb      	ldr	r3, [r7, #8]
 8001b48:	f383 8810 	msr	PRIMASK, r3
}
 8001b4c:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8001b4e:	bf00      	nop
}
 8001b50:	3718      	adds	r7, #24
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	200002e0 	.word	0x200002e0
 8001b5c:	2000014c 	.word	0x2000014c
 8001b60:	200001dc 	.word	0x200001dc
 8001b64:	40002800 	.word	0x40002800
 8001b68:	58000800 	.word	0x58000800
 8001b6c:	200001dd 	.word	0x200001dd

08001b70 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b086      	sub	sp, #24
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	4603      	mov	r3, r0
 8001b78:	6039      	str	r1, [r7, #0]
 8001b7a:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8001b7c:	79fa      	ldrb	r2, [r7, #7]
 8001b7e:	493b      	ldr	r1, [pc, #236]	@ (8001c6c <HW_TS_Start+0xfc>)
 8001b80:	4613      	mov	r3, r2
 8001b82:	005b      	lsls	r3, r3, #1
 8001b84:	4413      	add	r3, r2
 8001b86:	00db      	lsls	r3, r3, #3
 8001b88:	440b      	add	r3, r1
 8001b8a:	330c      	adds	r3, #12
 8001b8c:	781b      	ldrb	r3, [r3, #0]
 8001b8e:	b2db      	uxtb	r3, r3
 8001b90:	2b02      	cmp	r3, #2
 8001b92:	d103      	bne.n	8001b9c <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 8001b94:	79fb      	ldrb	r3, [r7, #7]
 8001b96:	4618      	mov	r0, r3
 8001b98:	f7ff ff66 	bl	8001a68 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001b9c:	f3ef 8310 	mrs	r3, PRIMASK
 8001ba0:	60fb      	str	r3, [r7, #12]
  return(result);
 8001ba2:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001ba4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001ba6:	b672      	cpsid	i
}
 8001ba8:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8001baa:	2003      	movs	r0, #3
 8001bac:	f005 fdcd 	bl	800774a <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001bb0:	4b2f      	ldr	r3, [pc, #188]	@ (8001c70 <HW_TS_Start+0x100>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	22ca      	movs	r2, #202	@ 0xca
 8001bb6:	625a      	str	r2, [r3, #36]	@ 0x24
 8001bb8:	4b2d      	ldr	r3, [pc, #180]	@ (8001c70 <HW_TS_Start+0x100>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	2253      	movs	r2, #83	@ 0x53
 8001bbe:	625a      	str	r2, [r3, #36]	@ 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 8001bc0:	79fa      	ldrb	r2, [r7, #7]
 8001bc2:	492a      	ldr	r1, [pc, #168]	@ (8001c6c <HW_TS_Start+0xfc>)
 8001bc4:	4613      	mov	r3, r2
 8001bc6:	005b      	lsls	r3, r3, #1
 8001bc8:	4413      	add	r3, r2
 8001bca:	00db      	lsls	r3, r3, #3
 8001bcc:	440b      	add	r3, r1
 8001bce:	330c      	adds	r3, #12
 8001bd0:	2202      	movs	r2, #2
 8001bd2:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 8001bd4:	79fa      	ldrb	r2, [r7, #7]
 8001bd6:	4925      	ldr	r1, [pc, #148]	@ (8001c6c <HW_TS_Start+0xfc>)
 8001bd8:	4613      	mov	r3, r2
 8001bda:	005b      	lsls	r3, r3, #1
 8001bdc:	4413      	add	r3, r2
 8001bde:	00db      	lsls	r3, r3, #3
 8001be0:	440b      	add	r3, r1
 8001be2:	3308      	adds	r3, #8
 8001be4:	683a      	ldr	r2, [r7, #0]
 8001be6:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 8001be8:	79fa      	ldrb	r2, [r7, #7]
 8001bea:	4920      	ldr	r1, [pc, #128]	@ (8001c6c <HW_TS_Start+0xfc>)
 8001bec:	4613      	mov	r3, r2
 8001bee:	005b      	lsls	r3, r3, #1
 8001bf0:	4413      	add	r3, r2
 8001bf2:	00db      	lsls	r3, r3, #3
 8001bf4:	440b      	add	r3, r1
 8001bf6:	3304      	adds	r3, #4
 8001bf8:	683a      	ldr	r2, [r7, #0]
 8001bfa:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 8001bfc:	79fb      	ldrb	r3, [r7, #7]
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f7ff fb30 	bl	8001264 <linkTimer>
 8001c04:	4603      	mov	r3, r0
 8001c06:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 8001c08:	4b1a      	ldr	r3, [pc, #104]	@ (8001c74 <HW_TS_Start+0x104>)
 8001c0a:	781b      	ldrb	r3, [r3, #0]
 8001c0c:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8001c0e:	4b1a      	ldr	r3, [pc, #104]	@ (8001c78 <HW_TS_Start+0x108>)
 8001c10:	781b      	ldrb	r3, [r3, #0]
 8001c12:	b2db      	uxtb	r3, r3
 8001c14:	7c7a      	ldrb	r2, [r7, #17]
 8001c16:	429a      	cmp	r2, r3
 8001c18:	d002      	beq.n	8001c20 <HW_TS_Start+0xb0>
  {
    RescheduleTimerList();
 8001c1a:	f7ff fce9 	bl	80015f0 <RescheduleTimerList>
 8001c1e:	e013      	b.n	8001c48 <HW_TS_Start+0xd8>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 8001c20:	79fa      	ldrb	r2, [r7, #7]
 8001c22:	4912      	ldr	r1, [pc, #72]	@ (8001c6c <HW_TS_Start+0xfc>)
 8001c24:	4613      	mov	r3, r2
 8001c26:	005b      	lsls	r3, r3, #1
 8001c28:	4413      	add	r3, r2
 8001c2a:	00db      	lsls	r3, r3, #3
 8001c2c:	440b      	add	r3, r1
 8001c2e:	3308      	adds	r3, #8
 8001c30:	6819      	ldr	r1, [r3, #0]
 8001c32:	8a7b      	ldrh	r3, [r7, #18]
 8001c34:	79fa      	ldrb	r2, [r7, #7]
 8001c36:	1ac9      	subs	r1, r1, r3
 8001c38:	480c      	ldr	r0, [pc, #48]	@ (8001c6c <HW_TS_Start+0xfc>)
 8001c3a:	4613      	mov	r3, r2
 8001c3c:	005b      	lsls	r3, r3, #1
 8001c3e:	4413      	add	r3, r2
 8001c40:	00db      	lsls	r3, r3, #3
 8001c42:	4403      	add	r3, r0
 8001c44:	3308      	adds	r3, #8
 8001c46:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8001c48:	4b09      	ldr	r3, [pc, #36]	@ (8001c70 <HW_TS_Start+0x100>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	22ff      	movs	r2, #255	@ 0xff
 8001c4e:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001c50:	2003      	movs	r0, #3
 8001c52:	f005 fd6c 	bl	800772e <HAL_NVIC_EnableIRQ>
 8001c56:	697b      	ldr	r3, [r7, #20]
 8001c58:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001c5a:	68bb      	ldr	r3, [r7, #8]
 8001c5c:	f383 8810 	msr	PRIMASK, r3
}
 8001c60:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8001c62:	bf00      	nop
}
 8001c64:	3718      	adds	r7, #24
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}
 8001c6a:	bf00      	nop
 8001c6c:	2000014c 	.word	0x2000014c
 8001c70:	200002e0 	.word	0x200002e0
 8001c74:	200001dc 	.word	0x200001dc
 8001c78:	200001dd 	.word	0x200001dd

08001c7c <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b084      	sub	sp, #16
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	60f8      	str	r0, [r7, #12]
 8001c84:	460b      	mov	r3, r1
 8001c86:	607a      	str	r2, [r7, #4]
 8001c88:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	4798      	blx	r3

  return;
 8001c8e:	bf00      	nop
}
 8001c90:	3710      	adds	r7, #16
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}
	...

08001c98 <MagCal_Run>:
static void fUpdateCalibration4INV(MagCalibration_t *MagCal);
static void fUpdateCalibration7EIG(MagCalibration_t *MagCal);
static void fUpdateCalibration10EIG(MagCalibration_t *MagCal);

int MagCal_Run(void)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b084      	sub	sp, #16
 8001c9c:	af00      	add	r7, sp, #0
	int i, j;			// loop counters
	int isolver;		// magnetic solver used
	int count=0;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	603b      	str	r3, [r7, #0]
	static int waitcount=0;

	// only do the calibration occasionally
	if (++waitcount < 5) return 0;
 8001ca2:	4b86      	ldr	r3, [pc, #536]	@ (8001ebc <MagCal_Run+0x224>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	3301      	adds	r3, #1
 8001ca8:	4a84      	ldr	r2, [pc, #528]	@ (8001ebc <MagCal_Run+0x224>)
 8001caa:	6013      	str	r3, [r2, #0]
 8001cac:	4b83      	ldr	r3, [pc, #524]	@ (8001ebc <MagCal_Run+0x224>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	2b04      	cmp	r3, #4
 8001cb2:	dc01      	bgt.n	8001cb8 <MagCal_Run+0x20>
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	e0fd      	b.n	8001eb4 <MagCal_Run+0x21c>
	waitcount = 0;
 8001cb8:	4b80      	ldr	r3, [pc, #512]	@ (8001ebc <MagCal_Run+0x224>)
 8001cba:	2200      	movs	r2, #0
 8001cbc:	601a      	str	r2, [r3, #0]

	// count number of data points
	for (i=0; i < MAGBUFFSIZE; i++) {
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	60fb      	str	r3, [r7, #12]
 8001cc2:	e00f      	b.n	8001ce4 <MagCal_Run+0x4c>
		if (magcal.valid[i]) count++;
 8001cc4:	4a7e      	ldr	r2, [pc, #504]	@ (8001ec0 <MagCal_Run+0x228>)
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	4413      	add	r3, r2
 8001cca:	f503 539a 	add.w	r3, r3, #4928	@ 0x1340
 8001cce:	3316      	adds	r3, #22
 8001cd0:	f993 3000 	ldrsb.w	r3, [r3]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d002      	beq.n	8001cde <MagCal_Run+0x46>
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	3301      	adds	r3, #1
 8001cdc:	603b      	str	r3, [r7, #0]
	for (i=0; i < MAGBUFFSIZE; i++) {
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	3301      	adds	r3, #1
 8001ce2:	60fb      	str	r3, [r7, #12]
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	f240 2289 	movw	r2, #649	@ 0x289
 8001cea:	4293      	cmp	r3, r2
 8001cec:	ddea      	ble.n	8001cc4 <MagCal_Run+0x2c>
	}

	if (count < MINMEASUREMENTS4CAL) return 0;
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	2b27      	cmp	r3, #39	@ 0x27
 8001cf2:	dc01      	bgt.n	8001cf8 <MagCal_Run+0x60>
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	e0dd      	b.n	8001eb4 <MagCal_Run+0x21c>

	if (magcal.ValidMagCal) {
 8001cf8:	4b71      	ldr	r3, [pc, #452]	@ (8001ec0 <MagCal_Run+0x228>)
 8001cfa:	f993 3418 	ldrsb.w	r3, [r3, #1048]	@ 0x418
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d009      	beq.n	8001d16 <MagCal_Run+0x7e>
		// age the existing fit error to avoid one good calibration locking out future updates
		magcal.FitErrorAge *= 1.02f;
 8001d02:	4b6f      	ldr	r3, [pc, #444]	@ (8001ec0 <MagCal_Run+0x228>)
 8001d04:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 8001d08:	ed9f 7a6e 	vldr	s14, [pc, #440]	@ 8001ec4 <MagCal_Run+0x22c>
 8001d0c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d10:	4b6b      	ldr	r3, [pc, #428]	@ (8001ec0 <MagCal_Run+0x228>)
 8001d12:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
	}

	if (count < MINMEASUREMENTS7CAL)
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	2b63      	cmp	r3, #99	@ 0x63
 8001d1a:	dc12      	bgt.n	8001d42 <MagCal_Run+0xaa>
	{
		isolver = 4;
 8001d1c:	2304      	movs	r3, #4
 8001d1e:	607b      	str	r3, [r7, #4]
		fUpdateCalibration4INV(&magcal); // 4 element matrix inversion calibration
 8001d20:	4867      	ldr	r0, [pc, #412]	@ (8001ec0 <MagCal_Run+0x228>)
 8001d22:	f000 f8d7 	bl	8001ed4 <fUpdateCalibration4INV>
		if (magcal.trFitErrorpc < 12.0f) magcal.trFitErrorpc = 12.0f;
 8001d26:	4b66      	ldr	r3, [pc, #408]	@ (8001ec0 <MagCal_Run+0x228>)
 8001d28:	edd3 7a1d 	vldr	s15, [r3, #116]	@ 0x74
 8001d2c:	eeb2 7a08 	vmov.f32	s14, #40	@ 0x41400000  12.0
 8001d30:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d38:	d51e      	bpl.n	8001d78 <MagCal_Run+0xe0>
 8001d3a:	4b61      	ldr	r3, [pc, #388]	@ (8001ec0 <MagCal_Run+0x228>)
 8001d3c:	4a62      	ldr	r2, [pc, #392]	@ (8001ec8 <MagCal_Run+0x230>)
 8001d3e:	675a      	str	r2, [r3, #116]	@ 0x74
 8001d40:	e01a      	b.n	8001d78 <MagCal_Run+0xe0>
	}
	else if (count < MINMEASUREMENTS10CAL)
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	2b95      	cmp	r3, #149	@ 0x95
 8001d46:	dc12      	bgt.n	8001d6e <MagCal_Run+0xd6>
	{
		isolver = 7;
 8001d48:	2307      	movs	r3, #7
 8001d4a:	607b      	str	r3, [r7, #4]
		fUpdateCalibration7EIG(&magcal); // 7 element eigenpair calibration
 8001d4c:	485c      	ldr	r0, [pc, #368]	@ (8001ec0 <MagCal_Run+0x228>)
 8001d4e:	f000 fc55 	bl	80025fc <fUpdateCalibration7EIG>
		if (magcal.trFitErrorpc < 7.5f) magcal.trFitErrorpc = 7.5f;
 8001d52:	4b5b      	ldr	r3, [pc, #364]	@ (8001ec0 <MagCal_Run+0x228>)
 8001d54:	edd3 7a1d 	vldr	s15, [r3, #116]	@ 0x74
 8001d58:	eeb1 7a0e 	vmov.f32	s14, #30	@ 0x40f00000  7.5
 8001d5c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d64:	d508      	bpl.n	8001d78 <MagCal_Run+0xe0>
 8001d66:	4b56      	ldr	r3, [pc, #344]	@ (8001ec0 <MagCal_Run+0x228>)
 8001d68:	4a58      	ldr	r2, [pc, #352]	@ (8001ecc <MagCal_Run+0x234>)
 8001d6a:	675a      	str	r2, [r3, #116]	@ 0x74
 8001d6c:	e004      	b.n	8001d78 <MagCal_Run+0xe0>
	}
	else
	{
		isolver = 10;
 8001d6e:	230a      	movs	r3, #10
 8001d70:	607b      	str	r3, [r7, #4]
		fUpdateCalibration10EIG(&magcal); // 10 element eigenpair calibration
 8001d72:	4853      	ldr	r0, [pc, #332]	@ (8001ec0 <MagCal_Run+0x228>)
 8001d74:	f000 ff2e 	bl	8002bd4 <fUpdateCalibration10EIG>
	}

	// the trial geomagnetic field must be in range (earth is 22uT to 67uT)
	if ((magcal.trB >= MINBFITUT) && (magcal.trB <= MAXBFITUT))
 8001d78:	4b51      	ldr	r3, [pc, #324]	@ (8001ec0 <MagCal_Run+0x228>)
 8001d7a:	edd3 7a1c 	vldr	s15, [r3, #112]	@ 0x70
 8001d7e:	eeb3 7a06 	vmov.f32	s14, #54	@ 0x41b00000  22.0
 8001d82:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d8a:	f2c0 8092 	blt.w	8001eb2 <MagCal_Run+0x21a>
 8001d8e:	4b4c      	ldr	r3, [pc, #304]	@ (8001ec0 <MagCal_Run+0x228>)
 8001d90:	edd3 7a1c 	vldr	s15, [r3, #112]	@ 0x70
 8001d94:	ed9f 7a4e 	vldr	s14, [pc, #312]	@ 8001ed0 <MagCal_Run+0x238>
 8001d98:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001da0:	f200 8087 	bhi.w	8001eb2 <MagCal_Run+0x21a>
	{
			// always accept the calibration if
			//  1: no previous calibration exists
			//  2: the calibration fit is reduced or
			//  3: an improved solver was used giving a good trial calibration (4% or under)
		if ((magcal.ValidMagCal == 0) ||(magcal.trFitErrorpc <= magcal.FitErrorAge) ||((isolver > magcal.ValidMagCal) && (magcal.trFitErrorpc <= 4.0F)))
 8001da4:	4b46      	ldr	r3, [pc, #280]	@ (8001ec0 <MagCal_Run+0x228>)
 8001da6:	f993 3418 	ldrsb.w	r3, [r3, #1048]	@ 0x418
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d01b      	beq.n	8001de6 <MagCal_Run+0x14e>
 8001dae:	4b44      	ldr	r3, [pc, #272]	@ (8001ec0 <MagCal_Run+0x228>)
 8001db0:	ed93 7a1d 	vldr	s14, [r3, #116]	@ 0x74
 8001db4:	4b42      	ldr	r3, [pc, #264]	@ (8001ec0 <MagCal_Run+0x228>)
 8001db6:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 8001dba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001dbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dc2:	d910      	bls.n	8001de6 <MagCal_Run+0x14e>
 8001dc4:	4b3e      	ldr	r3, [pc, #248]	@ (8001ec0 <MagCal_Run+0x228>)
 8001dc6:	f993 3418 	ldrsb.w	r3, [r3, #1048]	@ 0x418
 8001dca:	461a      	mov	r2, r3
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	dd6f      	ble.n	8001eb2 <MagCal_Run+0x21a>
 8001dd2:	4b3b      	ldr	r3, [pc, #236]	@ (8001ec0 <MagCal_Run+0x228>)
 8001dd4:	edd3 7a1d 	vldr	s15, [r3, #116]	@ 0x74
 8001dd8:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8001ddc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001de0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001de4:	d865      	bhi.n	8001eb2 <MagCal_Run+0x21a>
		{
				// accept the new calibration solution
				//printf("new magnetic cal, B=%.2f uT\n", magcal.trB);
			magcal.ValidMagCal = isolver;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	b25a      	sxtb	r2, r3
 8001dea:	4b35      	ldr	r3, [pc, #212]	@ (8001ec0 <MagCal_Run+0x228>)
 8001dec:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
			magcal.FitError = magcal.trFitErrorpc;
 8001df0:	4b33      	ldr	r3, [pc, #204]	@ (8001ec0 <MagCal_Run+0x228>)
 8001df2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001df4:	4a32      	ldr	r2, [pc, #200]	@ (8001ec0 <MagCal_Run+0x228>)
 8001df6:	6393      	str	r3, [r2, #56]	@ 0x38
			if (magcal.trFitErrorpc > 2.0f)
 8001df8:	4b31      	ldr	r3, [pc, #196]	@ (8001ec0 <MagCal_Run+0x228>)
 8001dfa:	edd3 7a1d 	vldr	s15, [r3, #116]	@ 0x74
 8001dfe:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8001e02:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e0a:	dd04      	ble.n	8001e16 <MagCal_Run+0x17e>
			{
				magcal.FitErrorAge = magcal.trFitErrorpc;
 8001e0c:	4b2c      	ldr	r3, [pc, #176]	@ (8001ec0 <MagCal_Run+0x228>)
 8001e0e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001e10:	4a2b      	ldr	r2, [pc, #172]	@ (8001ec0 <MagCal_Run+0x228>)
 8001e12:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8001e14:	e003      	b.n	8001e1e <MagCal_Run+0x186>
			}
			else
			{
				magcal.FitErrorAge = 2.0f;
 8001e16:	4b2a      	ldr	r3, [pc, #168]	@ (8001ec0 <MagCal_Run+0x228>)
 8001e18:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001e1c:	63da      	str	r2, [r3, #60]	@ 0x3c
			}
			magcal.B = magcal.trB;
 8001e1e:	4b28      	ldr	r3, [pc, #160]	@ (8001ec0 <MagCal_Run+0x228>)
 8001e20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e22:	4a27      	ldr	r2, [pc, #156]	@ (8001ec0 <MagCal_Run+0x228>)
 8001e24:	6313      	str	r3, [r2, #48]	@ 0x30
			magcal.FourBsq = 4.0F * magcal.trB * magcal.trB;
 8001e26:	4b26      	ldr	r3, [pc, #152]	@ (8001ec0 <MagCal_Run+0x228>)
 8001e28:	edd3 7a1c 	vldr	s15, [r3, #112]	@ 0x70
 8001e2c:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8001e30:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001e34:	4b22      	ldr	r3, [pc, #136]	@ (8001ec0 <MagCal_Run+0x228>)
 8001e36:	edd3 7a1c 	vldr	s15, [r3, #112]	@ 0x70
 8001e3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e3e:	4b20      	ldr	r3, [pc, #128]	@ (8001ec0 <MagCal_Run+0x228>)
 8001e40:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
			for (i = X; i <= Z; i++) {
 8001e44:	2300      	movs	r3, #0
 8001e46:	60fb      	str	r3, [r7, #12]
 8001e48:	e02e      	b.n	8001ea8 <MagCal_Run+0x210>
				magcal.V[i] = magcal.trV[i];
 8001e4a:	4a1d      	ldr	r2, [pc, #116]	@ (8001ec0 <MagCal_Run+0x228>)
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	3310      	adds	r3, #16
 8001e50:	009b      	lsls	r3, r3, #2
 8001e52:	4413      	add	r3, r2
 8001e54:	681a      	ldr	r2, [r3, #0]
 8001e56:	491a      	ldr	r1, [pc, #104]	@ (8001ec0 <MagCal_Run+0x228>)
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	009b      	lsls	r3, r3, #2
 8001e5c:	440b      	add	r3, r1
 8001e5e:	601a      	str	r2, [r3, #0]
				for (j = X; j <= Z; j++) {
 8001e60:	2300      	movs	r3, #0
 8001e62:	60bb      	str	r3, [r7, #8]
 8001e64:	e01a      	b.n	8001e9c <MagCal_Run+0x204>
					magcal.invW[i][j] = magcal.trinvW[i][j];
 8001e66:	4916      	ldr	r1, [pc, #88]	@ (8001ec0 <MagCal_Run+0x228>)
 8001e68:	68fa      	ldr	r2, [r7, #12]
 8001e6a:	4613      	mov	r3, r2
 8001e6c:	005b      	lsls	r3, r3, #1
 8001e6e:	4413      	add	r3, r2
 8001e70:	68ba      	ldr	r2, [r7, #8]
 8001e72:	4413      	add	r3, r2
 8001e74:	3312      	adds	r3, #18
 8001e76:	009b      	lsls	r3, r3, #2
 8001e78:	440b      	add	r3, r1
 8001e7a:	3304      	adds	r3, #4
 8001e7c:	6819      	ldr	r1, [r3, #0]
 8001e7e:	4810      	ldr	r0, [pc, #64]	@ (8001ec0 <MagCal_Run+0x228>)
 8001e80:	68fa      	ldr	r2, [r7, #12]
 8001e82:	4613      	mov	r3, r2
 8001e84:	005b      	lsls	r3, r3, #1
 8001e86:	4413      	add	r3, r2
 8001e88:	68ba      	ldr	r2, [r7, #8]
 8001e8a:	4413      	add	r3, r2
 8001e8c:	3302      	adds	r3, #2
 8001e8e:	009b      	lsls	r3, r3, #2
 8001e90:	4403      	add	r3, r0
 8001e92:	3304      	adds	r3, #4
 8001e94:	6019      	str	r1, [r3, #0]
				for (j = X; j <= Z; j++) {
 8001e96:	68bb      	ldr	r3, [r7, #8]
 8001e98:	3301      	adds	r3, #1
 8001e9a:	60bb      	str	r3, [r7, #8]
 8001e9c:	68bb      	ldr	r3, [r7, #8]
 8001e9e:	2b02      	cmp	r3, #2
 8001ea0:	dde1      	ble.n	8001e66 <MagCal_Run+0x1ce>
			for (i = X; i <= Z; i++) {
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	3301      	adds	r3, #1
 8001ea6:	60fb      	str	r3, [r7, #12]
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	2b02      	cmp	r3, #2
 8001eac:	ddcd      	ble.n	8001e4a <MagCal_Run+0x1b2>
				}
			}
			return 1; // indicates new calibration applied
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e000      	b.n	8001eb4 <MagCal_Run+0x21c>
		}
	}

	return 0;
 8001eb2:	2300      	movs	r3, #0
}
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	3710      	adds	r7, #16
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bd80      	pop	{r7, pc}
 8001ebc:	200001ec 	.word	0x200001ec
 8001ec0:	200004e8 	.word	0x200004e8
 8001ec4:	3f828f5c 	.word	0x3f828f5c
 8001ec8:	41400000 	.word	0x41400000
 8001ecc:	40f00000 	.word	0x40f00000
 8001ed0:	42860000 	.word	0x42860000

08001ed4 <fUpdateCalibration4INV>:

static void fUpdateCalibration4INV(MagCalibration_t *MagCal)
{
 8001ed4:	b590      	push	{r4, r7, lr}
 8001ed6:	b097      	sub	sp, #92	@ 0x5c
 8001ed8:	af02      	add	r7, sp, #8
 8001eda:	6078      	str	r0, [r7, #4]
	int8_t iColInd[4];
	int8_t iRowInd[4];
	int8_t iPivot[4];

	// compute fscaling to reduce multiplications later
	fscaling = FXOS8700_UTPERCOUNT / DEFAULTB;
 8001edc:	4b67      	ldr	r3, [pc, #412]	@ (800207c <fUpdateCalibration4INV+0x1a8>)
 8001ede:	637b      	str	r3, [r7, #52]	@ 0x34

	// the trial inverse soft iron matrix invW always equals
	// the identity matrix for 4 element calibration
	f3x3matrixAeqI(MagCal->trinvW);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	334c      	adds	r3, #76	@ 0x4c
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f003 fe03 	bl	8005af0 <f3x3matrixAeqI>

	// zero fSumBp4=Y^T.Y, vecB=X^T.Y (4x1) and on and above
	// diagonal elements of matA=X^T*X (4x4)
	fSumBp4 = 0.0F;
 8001eea:	f04f 0300 	mov.w	r3, #0
 8001eee:	64fb      	str	r3, [r7, #76]	@ 0x4c
	for (i = 0; i < 4; i++) {
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	643b      	str	r3, [r7, #64]	@ 0x40
 8001ef4:	e022      	b.n	8001f3c <fUpdateCalibration4INV+0x68>
		MagCal->vecB[i] = 0.0F;
 8001ef6:	687a      	ldr	r2, [r7, #4]
 8001ef8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001efa:	f503 7381 	add.w	r3, r3, #258	@ 0x102
 8001efe:	009b      	lsls	r3, r3, #2
 8001f00:	4413      	add	r3, r2
 8001f02:	f04f 0200 	mov.w	r2, #0
 8001f06:	601a      	str	r2, [r3, #0]
		for (j = i; j < 4; j++) {
 8001f08:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001f0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001f0c:	e010      	b.n	8001f30 <fUpdateCalibration4INV+0x5c>
			MagCal->matA[i][j] = 0.0F;
 8001f0e:	6879      	ldr	r1, [r7, #4]
 8001f10:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001f12:	4613      	mov	r3, r2
 8001f14:	009b      	lsls	r3, r3, #2
 8001f16:	4413      	add	r3, r2
 8001f18:	005b      	lsls	r3, r3, #1
 8001f1a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001f1c:	4413      	add	r3, r2
 8001f1e:	3330      	adds	r3, #48	@ 0x30
 8001f20:	009b      	lsls	r3, r3, #2
 8001f22:	440b      	add	r3, r1
 8001f24:	f04f 0200 	mov.w	r2, #0
 8001f28:	601a      	str	r2, [r3, #0]
		for (j = i; j < 4; j++) {
 8001f2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001f2c:	3301      	adds	r3, #1
 8001f2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001f30:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001f32:	2b03      	cmp	r3, #3
 8001f34:	ddeb      	ble.n	8001f0e <fUpdateCalibration4INV+0x3a>
	for (i = 0; i < 4; i++) {
 8001f36:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001f38:	3301      	adds	r3, #1
 8001f3a:	643b      	str	r3, [r7, #64]	@ 0x40
 8001f3c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001f3e:	2b03      	cmp	r3, #3
 8001f40:	ddd9      	ble.n	8001ef6 <fUpdateCalibration4INV+0x22>
		}
	}

	// the offsets are guaranteed to be set from the first element but to avoid compiler error
	iOffset[X] = iOffset[Y] = iOffset[Z] = 0;
 8001f42:	2300      	movs	r3, #0
 8001f44:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8001f46:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 8001f4a:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8001f4c:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 8001f50:	853b      	strh	r3, [r7, #40]	@ 0x28

	// use from MINEQUATIONS up to MAXEQUATIONS entries from magnetic buffer to compute matrices
	iCount = 0;
 8001f52:	2300      	movs	r3, #0
 8001f54:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
	for (j = 0; j < MAGBUFFSIZE; j++) {
 8001f58:	2300      	movs	r3, #0
 8001f5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001f5c:	e13d      	b.n	80021da <fUpdateCalibration4INV+0x306>
		if (MagCal->valid[j]) {
 8001f5e:	687a      	ldr	r2, [r7, #4]
 8001f60:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001f62:	4413      	add	r3, r2
 8001f64:	f503 539a 	add.w	r3, r3, #4928	@ 0x1340
 8001f68:	3316      	adds	r3, #22
 8001f6a:	f993 3000 	ldrsb.w	r3, [r3]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	f000 8130 	beq.w	80021d4 <fUpdateCalibration4INV+0x300>
			// use first valid magnetic buffer entry as estimate (in counts) for offset
			if (iCount == 0) {
 8001f74:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	@ 0x46
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d11c      	bne.n	8001fb6 <fUpdateCalibration4INV+0xe2>
				for (k = X; k <= Z; k++) {
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001f80:	e016      	b.n	8001fb0 <fUpdateCalibration4INV+0xdc>
					iOffset[k] = MagCal->BpFast[k][j];
 8001f82:	687a      	ldr	r2, [r7, #4]
 8001f84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001f86:	f240 218a 	movw	r1, #650	@ 0x28a
 8001f8a:	fb03 f101 	mul.w	r1, r3, r1
 8001f8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001f90:	440b      	add	r3, r1
 8001f92:	f503 7303 	add.w	r3, r3, #524	@ 0x20c
 8001f96:	005b      	lsls	r3, r3, #1
 8001f98:	4413      	add	r3, r2
 8001f9a:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8001f9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001fa0:	005b      	lsls	r3, r3, #1
 8001fa2:	3350      	adds	r3, #80	@ 0x50
 8001fa4:	443b      	add	r3, r7
 8001fa6:	f823 2c28 	strh.w	r2, [r3, #-40]
				for (k = X; k <= Z; k++) {
 8001faa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001fac:	3301      	adds	r3, #1
 8001fae:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001fb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001fb2:	2b02      	cmp	r3, #2
 8001fb4:	dde5      	ble.n	8001f82 <fUpdateCalibration4INV+0xae>
				}
			}

			// store scaled and offset fBp[XYZ] in vecA[0-2] and fBp[XYZ]^2 in vecA[3-5]
			for (k = X; k <= Z; k++) {
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001fba:	e03f      	b.n	800203c <fUpdateCalibration4INV+0x168>
				MagCal->vecA[k] = (float)((int32_t)MagCal->BpFast[k][j]
 8001fbc:	687a      	ldr	r2, [r7, #4]
 8001fbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001fc0:	f240 218a 	movw	r1, #650	@ 0x28a
 8001fc4:	fb03 f101 	mul.w	r1, r3, r1
 8001fc8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001fca:	440b      	add	r3, r1
 8001fcc:	f503 7303 	add.w	r3, r3, #524	@ 0x20c
 8001fd0:	005b      	lsls	r3, r3, #1
 8001fd2:	4413      	add	r3, r2
 8001fd4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001fd8:	461a      	mov	r2, r3
					- (int32_t)iOffset[k]) * fscaling;
 8001fda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001fdc:	005b      	lsls	r3, r3, #1
 8001fde:	3350      	adds	r3, #80	@ 0x50
 8001fe0:	443b      	add	r3, r7
 8001fe2:	f933 3c28 	ldrsh.w	r3, [r3, #-40]
 8001fe6:	1ad3      	subs	r3, r2, r3
				MagCal->vecA[k] = (float)((int32_t)MagCal->BpFast[k][j]
 8001fe8:	ee07 3a90 	vmov	s15, r3
 8001fec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
					- (int32_t)iOffset[k]) * fscaling;
 8001ff0:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001ff4:	ee67 7a27 	vmul.f32	s15, s14, s15
				MagCal->vecA[k] = (float)((int32_t)MagCal->BpFast[k][j]
 8001ff8:	687a      	ldr	r2, [r7, #4]
 8001ffa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001ffc:	33f8      	adds	r3, #248	@ 0xf8
 8001ffe:	009b      	lsls	r3, r3, #2
 8002000:	4413      	add	r3, r2
 8002002:	edc3 7a00 	vstr	s15, [r3]
				MagCal->vecA[k + 3] = MagCal->vecA[k] * MagCal->vecA[k];
 8002006:	687a      	ldr	r2, [r7, #4]
 8002008:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800200a:	33f8      	adds	r3, #248	@ 0xf8
 800200c:	009b      	lsls	r3, r3, #2
 800200e:	4413      	add	r3, r2
 8002010:	ed93 7a00 	vldr	s14, [r3]
 8002014:	687a      	ldr	r2, [r7, #4]
 8002016:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002018:	33f8      	adds	r3, #248	@ 0xf8
 800201a:	009b      	lsls	r3, r3, #2
 800201c:	4413      	add	r3, r2
 800201e:	edd3 7a00 	vldr	s15, [r3]
 8002022:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002024:	3303      	adds	r3, #3
 8002026:	ee67 7a27 	vmul.f32	s15, s14, s15
 800202a:	687a      	ldr	r2, [r7, #4]
 800202c:	33f8      	adds	r3, #248	@ 0xf8
 800202e:	009b      	lsls	r3, r3, #2
 8002030:	4413      	add	r3, r2
 8002032:	edc3 7a00 	vstr	s15, [r3]
			for (k = X; k <= Z; k++) {
 8002036:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002038:	3301      	adds	r3, #1
 800203a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800203c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800203e:	2b02      	cmp	r3, #2
 8002040:	ddbc      	ble.n	8001fbc <fUpdateCalibration4INV+0xe8>
			}

			// calculate fBp2 = Bp[X]^2 + Bp[Y]^2 + Bp[Z]^2 (scaled uT^2)
			fBp2 = MagCal->vecA[3] + MagCal->vecA[4] + MagCal->vecA[5];
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	ed93 7afb 	vldr	s14, [r3, #1004]	@ 0x3ec
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	edd3 7afc 	vldr	s15, [r3, #1008]	@ 0x3f0
 800204e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	edd3 7afd 	vldr	s15, [r3, #1012]	@ 0x3f4
 8002058:	ee77 7a27 	vadd.f32	s15, s14, s15
 800205c:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30

			// accumulate fBp^4 over all measurements into fSumBp4=Y^T.Y
			fSumBp4 += fBp2 * fBp2;
 8002060:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8002064:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002068:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 800206c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002070:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c

			// now we have fBp2, accumulate vecB[0-2] = X^T.Y =sum(Bp2.Bp[XYZ])
			for (k = X; k <= Z; k++) {
 8002074:	2300      	movs	r3, #0
 8002076:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002078:	e022      	b.n	80020c0 <fUpdateCalibration4INV+0x1ec>
 800207a:	bf00      	nop
 800207c:	3b03126f 	.word	0x3b03126f
				MagCal->vecB[k] += MagCal->vecA[k] * fBp2;
 8002080:	687a      	ldr	r2, [r7, #4]
 8002082:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002084:	f503 7381 	add.w	r3, r3, #258	@ 0x102
 8002088:	009b      	lsls	r3, r3, #2
 800208a:	4413      	add	r3, r2
 800208c:	ed93 7a00 	vldr	s14, [r3]
 8002090:	687a      	ldr	r2, [r7, #4]
 8002092:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002094:	33f8      	adds	r3, #248	@ 0xf8
 8002096:	009b      	lsls	r3, r3, #2
 8002098:	4413      	add	r3, r2
 800209a:	edd3 6a00 	vldr	s13, [r3]
 800209e:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80020a2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80020a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020aa:	687a      	ldr	r2, [r7, #4]
 80020ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80020ae:	f503 7381 	add.w	r3, r3, #258	@ 0x102
 80020b2:	009b      	lsls	r3, r3, #2
 80020b4:	4413      	add	r3, r2
 80020b6:	edc3 7a00 	vstr	s15, [r3]
			for (k = X; k <= Z; k++) {
 80020ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80020bc:	3301      	adds	r3, #1
 80020be:	63bb      	str	r3, [r7, #56]	@ 0x38
 80020c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80020c2:	2b02      	cmp	r3, #2
 80020c4:	dddc      	ble.n	8002080 <fUpdateCalibration4INV+0x1ac>
			}

			//accumulate vecB[3] = X^T.Y =sum(fBp2)
			MagCal->vecB[3] += fBp2;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	f203 4314 	addw	r3, r3, #1044	@ 0x414
 80020cc:	ed93 7a00 	vldr	s14, [r3]
 80020d0:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80020d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	f203 4314 	addw	r3, r3, #1044	@ 0x414
 80020de:	edc3 7a00 	vstr	s15, [r3]

			// accumulate on and above-diagonal terms of matA = X^T.X ignoring matA[3][3]
			MagCal->matA[0][0] += MagCal->vecA[X + 3];
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	ed93 7a30 	vldr	s14, [r3, #192]	@ 0xc0
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	edd3 7afb 	vldr	s15, [r3, #1004]	@ 0x3ec
 80020ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	edc3 7a30 	vstr	s15, [r3, #192]	@ 0xc0
			MagCal->matA[0][1] += MagCal->vecA[X] * MagCal->vecA[Y];
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	ed93 7a31 	vldr	s14, [r3, #196]	@ 0xc4
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	edd3 6af8 	vldr	s13, [r3, #992]	@ 0x3e0
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	edd3 7af9 	vldr	s15, [r3, #996]	@ 0x3e4
 800210a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800210e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	edc3 7a31 	vstr	s15, [r3, #196]	@ 0xc4
			MagCal->matA[0][2] += MagCal->vecA[X] * MagCal->vecA[Z];
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	ed93 7a32 	vldr	s14, [r3, #200]	@ 0xc8
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	edd3 6af8 	vldr	s13, [r3, #992]	@ 0x3e0
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	edd3 7afa 	vldr	s15, [r3, #1000]	@ 0x3e8
 800212a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800212e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	edc3 7a32 	vstr	s15, [r3, #200]	@ 0xc8
			MagCal->matA[0][3] += MagCal->vecA[X];
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	ed93 7a33 	vldr	s14, [r3, #204]	@ 0xcc
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	edd3 7af8 	vldr	s15, [r3, #992]	@ 0x3e0
 8002144:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	edc3 7a33 	vstr	s15, [r3, #204]	@ 0xcc
			MagCal->matA[1][1] += MagCal->vecA[Y + 3];
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	ed93 7a3b 	vldr	s14, [r3, #236]	@ 0xec
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	edd3 7afc 	vldr	s15, [r3, #1008]	@ 0x3f0
 800215a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	edc3 7a3b 	vstr	s15, [r3, #236]	@ 0xec
			MagCal->matA[1][2] += MagCal->vecA[Y] * MagCal->vecA[Z];
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	ed93 7a3c 	vldr	s14, [r3, #240]	@ 0xf0
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	edd3 6af9 	vldr	s13, [r3, #996]	@ 0x3e4
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	edd3 7afa 	vldr	s15, [r3, #1000]	@ 0x3e8
 8002176:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800217a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	edc3 7a3c 	vstr	s15, [r3, #240]	@ 0xf0
			MagCal->matA[1][3] += MagCal->vecA[Y];
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	ed93 7a3d 	vldr	s14, [r3, #244]	@ 0xf4
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	edd3 7af9 	vldr	s15, [r3, #996]	@ 0x3e4
 8002190:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	edc3 7a3d 	vstr	s15, [r3, #244]	@ 0xf4
			MagCal->matA[2][2] += MagCal->vecA[Z + 3];
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	ed93 7a46 	vldr	s14, [r3, #280]	@ 0x118
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	edd3 7afd 	vldr	s15, [r3, #1012]	@ 0x3f4
 80021a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	edc3 7a46 	vstr	s15, [r3, #280]	@ 0x118
			MagCal->matA[2][3] += MagCal->vecA[Z];
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	ed93 7a47 	vldr	s14, [r3, #284]	@ 0x11c
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	edd3 7afa 	vldr	s15, [r3, #1000]	@ 0x3e8
 80021bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	edc3 7a47 	vstr	s15, [r3, #284]	@ 0x11c

			// increment the counter for next iteration
			iCount++;
 80021c6:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	@ 0x46
 80021ca:	b29b      	uxth	r3, r3
 80021cc:	3301      	adds	r3, #1
 80021ce:	b29b      	uxth	r3, r3
 80021d0:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
	for (j = 0; j < MAGBUFFSIZE; j++) {
 80021d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80021d6:	3301      	adds	r3, #1
 80021d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80021da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80021dc:	f240 2289 	movw	r2, #649	@ 0x289
 80021e0:	4293      	cmp	r3, r2
 80021e2:	f77f aebc 	ble.w	8001f5e <fUpdateCalibration4INV+0x8a>
		}
	}

	// set the last element of the measurement matrix to the number of buffer elements used
	MagCal->matA[3][3] = (float) iCount;
 80021e6:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	@ 0x46
 80021ea:	ee07 3a90 	vmov	s15, r3
 80021ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	edc3 7a51 	vstr	s15, [r3, #324]	@ 0x144

	// store the number of measurements accumulated
	MagCal->MagBufferCount = iCount;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80021fe:	461a      	mov	r2, r3
 8002200:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8002204:	f8a2 35e0 	strh.w	r3, [r2, #1504]	@ 0x5e0

	// use above diagonal elements of symmetric matA to set both matB and matA to X^T.X
	for (i = 0; i < 4; i++) {
 8002208:	2300      	movs	r3, #0
 800220a:	643b      	str	r3, [r7, #64]	@ 0x40
 800220c:	e053      	b.n	80022b6 <fUpdateCalibration4INV+0x3e2>
		for (j = i; j < 4; j++) {
 800220e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002210:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002212:	e04a      	b.n	80022aa <fUpdateCalibration4INV+0x3d6>
			MagCal->matB[i][j] = MagCal->matB[j][i]
				= MagCal->matA[j][i] = MagCal->matA[i][j];
 8002214:	6879      	ldr	r1, [r7, #4]
 8002216:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002218:	4613      	mov	r3, r2
 800221a:	009b      	lsls	r3, r3, #2
 800221c:	4413      	add	r3, r2
 800221e:	005b      	lsls	r3, r3, #1
 8002220:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002222:	4413      	add	r3, r2
 8002224:	3330      	adds	r3, #48	@ 0x30
 8002226:	009b      	lsls	r3, r3, #2
 8002228:	440b      	add	r3, r1
 800222a:	6819      	ldr	r1, [r3, #0]
 800222c:	6878      	ldr	r0, [r7, #4]
 800222e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002230:	4613      	mov	r3, r2
 8002232:	009b      	lsls	r3, r3, #2
 8002234:	4413      	add	r3, r2
 8002236:	005b      	lsls	r3, r3, #1
 8002238:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800223a:	4413      	add	r3, r2
 800223c:	3330      	adds	r3, #48	@ 0x30
 800223e:	009b      	lsls	r3, r3, #2
 8002240:	4403      	add	r3, r0
 8002242:	6019      	str	r1, [r3, #0]
 8002244:	6879      	ldr	r1, [r7, #4]
 8002246:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002248:	4613      	mov	r3, r2
 800224a:	009b      	lsls	r3, r3, #2
 800224c:	4413      	add	r3, r2
 800224e:	005b      	lsls	r3, r3, #1
 8002250:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002252:	4413      	add	r3, r2
 8002254:	3330      	adds	r3, #48	@ 0x30
 8002256:	009b      	lsls	r3, r3, #2
 8002258:	440b      	add	r3, r1
 800225a:	6819      	ldr	r1, [r3, #0]
 800225c:	6878      	ldr	r0, [r7, #4]
 800225e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002260:	4613      	mov	r3, r2
 8002262:	009b      	lsls	r3, r3, #2
 8002264:	4413      	add	r3, r2
 8002266:	005b      	lsls	r3, r3, #1
 8002268:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800226a:	4413      	add	r3, r2
 800226c:	3394      	adds	r3, #148	@ 0x94
 800226e:	009b      	lsls	r3, r3, #2
 8002270:	4403      	add	r3, r0
 8002272:	6019      	str	r1, [r3, #0]
			MagCal->matB[i][j] = MagCal->matB[j][i]
 8002274:	6879      	ldr	r1, [r7, #4]
 8002276:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002278:	4613      	mov	r3, r2
 800227a:	009b      	lsls	r3, r3, #2
 800227c:	4413      	add	r3, r2
 800227e:	005b      	lsls	r3, r3, #1
 8002280:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002282:	4413      	add	r3, r2
 8002284:	3394      	adds	r3, #148	@ 0x94
 8002286:	009b      	lsls	r3, r3, #2
 8002288:	440b      	add	r3, r1
 800228a:	6819      	ldr	r1, [r3, #0]
 800228c:	6878      	ldr	r0, [r7, #4]
 800228e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002290:	4613      	mov	r3, r2
 8002292:	009b      	lsls	r3, r3, #2
 8002294:	4413      	add	r3, r2
 8002296:	005b      	lsls	r3, r3, #1
 8002298:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800229a:	4413      	add	r3, r2
 800229c:	3394      	adds	r3, #148	@ 0x94
 800229e:	009b      	lsls	r3, r3, #2
 80022a0:	4403      	add	r3, r0
 80022a2:	6019      	str	r1, [r3, #0]
		for (j = i; j < 4; j++) {
 80022a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80022a6:	3301      	adds	r3, #1
 80022a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80022aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80022ac:	2b03      	cmp	r3, #3
 80022ae:	ddb1      	ble.n	8002214 <fUpdateCalibration4INV+0x340>
	for (i = 0; i < 4; i++) {
 80022b0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80022b2:	3301      	adds	r3, #1
 80022b4:	643b      	str	r3, [r7, #64]	@ 0x40
 80022b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80022b8:	2b03      	cmp	r3, #3
 80022ba:	dda8      	ble.n	800220e <fUpdateCalibration4INV+0x33a>
		}
	}

	// calculate in situ inverse of matB = inv(X^T.X) (4x4) while matA still holds X^T.X
	for (i = 0; i < 4; i++) {
 80022bc:	2300      	movs	r3, #0
 80022be:	643b      	str	r3, [r7, #64]	@ 0x40
 80022c0:	e011      	b.n	80022e6 <fUpdateCalibration4INV+0x412>
		pfRows[i] = MagCal->matB[i];
 80022c2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80022c4:	4613      	mov	r3, r2
 80022c6:	009b      	lsls	r3, r3, #2
 80022c8:	4413      	add	r3, r2
 80022ca:	00db      	lsls	r3, r3, #3
 80022cc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80022d0:	687a      	ldr	r2, [r7, #4]
 80022d2:	441a      	add	r2, r3
 80022d4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80022d6:	009b      	lsls	r3, r3, #2
 80022d8:	3350      	adds	r3, #80	@ 0x50
 80022da:	443b      	add	r3, r7
 80022dc:	f843 2c38 	str.w	r2, [r3, #-56]
	for (i = 0; i < 4; i++) {
 80022e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80022e2:	3301      	adds	r3, #1
 80022e4:	643b      	str	r3, [r7, #64]	@ 0x40
 80022e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80022e8:	2b03      	cmp	r3, #3
 80022ea:	ddea      	ble.n	80022c2 <fUpdateCalibration4INV+0x3ee>
	}
	fmatrixAeqInvA(pfRows, iColInd, iRowInd, iPivot, 4);
 80022ec:	f107 030c 	add.w	r3, r7, #12
 80022f0:	f107 0210 	add.w	r2, r7, #16
 80022f4:	f107 0114 	add.w	r1, r7, #20
 80022f8:	f107 0018 	add.w	r0, r7, #24
 80022fc:	2404      	movs	r4, #4
 80022fe:	9400      	str	r4, [sp, #0]
 8002300:	f004 fa86 	bl	8006810 <fmatrixAeqInvA>

	// calculate vecA = solution beta (4x1) = inv(X^T.X).X^T.Y = matB * vecB
	for (i = 0; i < 4; i++) {
 8002304:	2300      	movs	r3, #0
 8002306:	643b      	str	r3, [r7, #64]	@ 0x40
 8002308:	e03a      	b.n	8002380 <fUpdateCalibration4INV+0x4ac>
		MagCal->vecA[i] = 0.0F;
 800230a:	687a      	ldr	r2, [r7, #4]
 800230c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800230e:	33f8      	adds	r3, #248	@ 0xf8
 8002310:	009b      	lsls	r3, r3, #2
 8002312:	4413      	add	r3, r2
 8002314:	f04f 0200 	mov.w	r2, #0
 8002318:	601a      	str	r2, [r3, #0]
		for (k = 0; k < 4; k++) {
 800231a:	2300      	movs	r3, #0
 800231c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800231e:	e029      	b.n	8002374 <fUpdateCalibration4INV+0x4a0>
			MagCal->vecA[i] += MagCal->matB[i][k] * MagCal->vecB[k];
 8002320:	687a      	ldr	r2, [r7, #4]
 8002322:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002324:	33f8      	adds	r3, #248	@ 0xf8
 8002326:	009b      	lsls	r3, r3, #2
 8002328:	4413      	add	r3, r2
 800232a:	ed93 7a00 	vldr	s14, [r3]
 800232e:	6879      	ldr	r1, [r7, #4]
 8002330:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002332:	4613      	mov	r3, r2
 8002334:	009b      	lsls	r3, r3, #2
 8002336:	4413      	add	r3, r2
 8002338:	005b      	lsls	r3, r3, #1
 800233a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800233c:	4413      	add	r3, r2
 800233e:	3394      	adds	r3, #148	@ 0x94
 8002340:	009b      	lsls	r3, r3, #2
 8002342:	440b      	add	r3, r1
 8002344:	edd3 6a00 	vldr	s13, [r3]
 8002348:	687a      	ldr	r2, [r7, #4]
 800234a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800234c:	f503 7381 	add.w	r3, r3, #258	@ 0x102
 8002350:	009b      	lsls	r3, r3, #2
 8002352:	4413      	add	r3, r2
 8002354:	edd3 7a00 	vldr	s15, [r3]
 8002358:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800235c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002360:	687a      	ldr	r2, [r7, #4]
 8002362:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002364:	33f8      	adds	r3, #248	@ 0xf8
 8002366:	009b      	lsls	r3, r3, #2
 8002368:	4413      	add	r3, r2
 800236a:	edc3 7a00 	vstr	s15, [r3]
		for (k = 0; k < 4; k++) {
 800236e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002370:	3301      	adds	r3, #1
 8002372:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002374:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002376:	2b03      	cmp	r3, #3
 8002378:	ddd2      	ble.n	8002320 <fUpdateCalibration4INV+0x44c>
	for (i = 0; i < 4; i++) {
 800237a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800237c:	3301      	adds	r3, #1
 800237e:	643b      	str	r3, [r7, #64]	@ 0x40
 8002380:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002382:	2b03      	cmp	r3, #3
 8002384:	ddc1      	ble.n	800230a <fUpdateCalibration4INV+0x436>
	}

	// calculate P = r^T.r = Y^T.Y - 2 * beta^T.(X^T.Y) + beta^T.(X^T.X).beta
	// = fSumBp4 - 2 * vecA^T.vecB + vecA^T.matA.vecA
	// first set P = Y^T.Y - 2 * beta^T.(X^T.Y) = SumBp4 - 2 * vecA^T.vecB
	fE = 0.0F;
 8002386:	f04f 0300 	mov.w	r3, #0
 800238a:	64bb      	str	r3, [r7, #72]	@ 0x48
	for (i = 0; i < 4; i++) {
 800238c:	2300      	movs	r3, #0
 800238e:	643b      	str	r3, [r7, #64]	@ 0x40
 8002390:	e019      	b.n	80023c6 <fUpdateCalibration4INV+0x4f2>
		fE += MagCal->vecA[i] * MagCal->vecB[i];
 8002392:	687a      	ldr	r2, [r7, #4]
 8002394:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002396:	33f8      	adds	r3, #248	@ 0xf8
 8002398:	009b      	lsls	r3, r3, #2
 800239a:	4413      	add	r3, r2
 800239c:	ed93 7a00 	vldr	s14, [r3]
 80023a0:	687a      	ldr	r2, [r7, #4]
 80023a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80023a4:	f503 7381 	add.w	r3, r3, #258	@ 0x102
 80023a8:	009b      	lsls	r3, r3, #2
 80023aa:	4413      	add	r3, r2
 80023ac:	edd3 7a00 	vldr	s15, [r3]
 80023b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023b4:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 80023b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023bc:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
	for (i = 0; i < 4; i++) {
 80023c0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80023c2:	3301      	adds	r3, #1
 80023c4:	643b      	str	r3, [r7, #64]	@ 0x40
 80023c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80023c8:	2b03      	cmp	r3, #3
 80023ca:	dde2      	ble.n	8002392 <fUpdateCalibration4INV+0x4be>
	}
	fE = fSumBp4 - 2.0F * fE;
 80023cc:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 80023d0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80023d4:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 80023d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80023dc:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48

	// set vecB = (X^T.X).beta = matA.vecA
	for (i = 0; i < 4; i++) {
 80023e0:	2300      	movs	r3, #0
 80023e2:	643b      	str	r3, [r7, #64]	@ 0x40
 80023e4:	e03c      	b.n	8002460 <fUpdateCalibration4INV+0x58c>
		MagCal->vecB[i] = 0.0F;
 80023e6:	687a      	ldr	r2, [r7, #4]
 80023e8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80023ea:	f503 7381 	add.w	r3, r3, #258	@ 0x102
 80023ee:	009b      	lsls	r3, r3, #2
 80023f0:	4413      	add	r3, r2
 80023f2:	f04f 0200 	mov.w	r2, #0
 80023f6:	601a      	str	r2, [r3, #0]
		for (k = 0; k < 4; k++) {
 80023f8:	2300      	movs	r3, #0
 80023fa:	63bb      	str	r3, [r7, #56]	@ 0x38
 80023fc:	e02a      	b.n	8002454 <fUpdateCalibration4INV+0x580>
			MagCal->vecB[i] += MagCal->matA[i][k] * MagCal->vecA[k];
 80023fe:	687a      	ldr	r2, [r7, #4]
 8002400:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002402:	f503 7381 	add.w	r3, r3, #258	@ 0x102
 8002406:	009b      	lsls	r3, r3, #2
 8002408:	4413      	add	r3, r2
 800240a:	ed93 7a00 	vldr	s14, [r3]
 800240e:	6879      	ldr	r1, [r7, #4]
 8002410:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002412:	4613      	mov	r3, r2
 8002414:	009b      	lsls	r3, r3, #2
 8002416:	4413      	add	r3, r2
 8002418:	005b      	lsls	r3, r3, #1
 800241a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800241c:	4413      	add	r3, r2
 800241e:	3330      	adds	r3, #48	@ 0x30
 8002420:	009b      	lsls	r3, r3, #2
 8002422:	440b      	add	r3, r1
 8002424:	edd3 6a00 	vldr	s13, [r3]
 8002428:	687a      	ldr	r2, [r7, #4]
 800242a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800242c:	33f8      	adds	r3, #248	@ 0xf8
 800242e:	009b      	lsls	r3, r3, #2
 8002430:	4413      	add	r3, r2
 8002432:	edd3 7a00 	vldr	s15, [r3]
 8002436:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800243a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800243e:	687a      	ldr	r2, [r7, #4]
 8002440:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002442:	f503 7381 	add.w	r3, r3, #258	@ 0x102
 8002446:	009b      	lsls	r3, r3, #2
 8002448:	4413      	add	r3, r2
 800244a:	edc3 7a00 	vstr	s15, [r3]
		for (k = 0; k < 4; k++) {
 800244e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002450:	3301      	adds	r3, #1
 8002452:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002454:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002456:	2b03      	cmp	r3, #3
 8002458:	ddd1      	ble.n	80023fe <fUpdateCalibration4INV+0x52a>
	for (i = 0; i < 4; i++) {
 800245a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800245c:	3301      	adds	r3, #1
 800245e:	643b      	str	r3, [r7, #64]	@ 0x40
 8002460:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002462:	2b03      	cmp	r3, #3
 8002464:	ddbf      	ble.n	80023e6 <fUpdateCalibration4INV+0x512>
		}
	}

	// complete calculation of P by adding beta^T.(X^T.X).beta = vecA^T * vecB
	for (i = 0; i < 4; i++) {
 8002466:	2300      	movs	r3, #0
 8002468:	643b      	str	r3, [r7, #64]	@ 0x40
 800246a:	e019      	b.n	80024a0 <fUpdateCalibration4INV+0x5cc>
		fE += MagCal->vecB[i] * MagCal->vecA[i];
 800246c:	687a      	ldr	r2, [r7, #4]
 800246e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002470:	f503 7381 	add.w	r3, r3, #258	@ 0x102
 8002474:	009b      	lsls	r3, r3, #2
 8002476:	4413      	add	r3, r2
 8002478:	ed93 7a00 	vldr	s14, [r3]
 800247c:	687a      	ldr	r2, [r7, #4]
 800247e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002480:	33f8      	adds	r3, #248	@ 0xf8
 8002482:	009b      	lsls	r3, r3, #2
 8002484:	4413      	add	r3, r2
 8002486:	edd3 7a00 	vldr	s15, [r3]
 800248a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800248e:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 8002492:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002496:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
	for (i = 0; i < 4; i++) {
 800249a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800249c:	3301      	adds	r3, #1
 800249e:	643b      	str	r3, [r7, #64]	@ 0x40
 80024a0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80024a2:	2b03      	cmp	r3, #3
 80024a4:	dde2      	ble.n	800246c <fUpdateCalibration4INV+0x598>
	}

	// compute the hard iron vector (in uT but offset and scaled by FMATRIXSCALING)
	for (k = X; k <= Z; k++) {
 80024a6:	2300      	movs	r3, #0
 80024a8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80024aa:	e014      	b.n	80024d6 <fUpdateCalibration4INV+0x602>
		MagCal->trV[k] = 0.5F * MagCal->vecA[k];
 80024ac:	687a      	ldr	r2, [r7, #4]
 80024ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80024b0:	33f8      	adds	r3, #248	@ 0xf8
 80024b2:	009b      	lsls	r3, r3, #2
 80024b4:	4413      	add	r3, r2
 80024b6:	edd3 7a00 	vldr	s15, [r3]
 80024ba:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80024be:	ee67 7a87 	vmul.f32	s15, s15, s14
 80024c2:	687a      	ldr	r2, [r7, #4]
 80024c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80024c6:	3310      	adds	r3, #16
 80024c8:	009b      	lsls	r3, r3, #2
 80024ca:	4413      	add	r3, r2
 80024cc:	edc3 7a00 	vstr	s15, [r3]
	for (k = X; k <= Z; k++) {
 80024d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80024d2:	3301      	adds	r3, #1
 80024d4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80024d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80024d8:	2b02      	cmp	r3, #2
 80024da:	dde7      	ble.n	80024ac <fUpdateCalibration4INV+0x5d8>
	}

	// compute the scaled geomagnetic field strength B (in uT but scaled by FMATRIXSCALING)
	MagCal->trB = sqrtf(MagCal->vecA[3] + MagCal->trV[X] * MagCal->trV[X] +
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	ed93 7afb 	vldr	s14, [r3, #1004]	@ 0x3ec
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	edd3 6a10 	vldr	s13, [r3, #64]	@ 0x40
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 80024ee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80024f2:	ee37 7a27 	vadd.f32	s14, s14, s15
			MagCal->trV[Y] * MagCal->trV[Y] + MagCal->trV[Z] * MagCal->trV[Z]);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	edd3 6a11 	vldr	s13, [r3, #68]	@ 0x44
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 8002502:	ee66 7aa7 	vmul.f32	s15, s13, s15
	MagCal->trB = sqrtf(MagCal->vecA[3] + MagCal->trV[X] * MagCal->trV[X] +
 8002506:	ee37 7a27 	vadd.f32	s14, s14, s15
			MagCal->trV[Y] * MagCal->trV[Y] + MagCal->trV[Z] * MagCal->trV[Z]);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	edd3 6a12 	vldr	s13, [r3, #72]	@ 0x48
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 8002516:	ee66 7aa7 	vmul.f32	s15, s13, s15
	MagCal->trB = sqrtf(MagCal->vecA[3] + MagCal->trV[X] * MagCal->trV[X] +
 800251a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800251e:	eeb0 0a67 	vmov.f32	s0, s15
 8002522:	f00e fd99 	bl	8011058 <sqrtf>
 8002526:	eef0 7a40 	vmov.f32	s15, s0
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	edc3 7a1c 	vstr	s15, [r3, #112]	@ 0x70

	// calculate the trial fit error (percent) normalized to number of measurements
	// and scaled geomagnetic field strength
	MagCal->trFitErrorpc = sqrtf(fE / (float) MagCal->MagBufferCount) * 100.0F /
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002536:	f9b3 35e0 	ldrsh.w	r3, [r3, #1504]	@ 0x5e0
 800253a:	ee07 3a90 	vmov	s15, r3
 800253e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002542:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 8002546:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800254a:	eeb0 0a66 	vmov.f32	s0, s13
 800254e:	f00e fd83 	bl	8011058 <sqrtf>
 8002552:	eef0 7a40 	vmov.f32	s15, s0
 8002556:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 80025f0 <fUpdateCalibration4INV+0x71c>
 800255a:	ee67 6a87 	vmul.f32	s13, s15, s14
			(2.0F * MagCal->trB * MagCal->trB);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	edd3 7a1c 	vldr	s15, [r3, #112]	@ 0x70
 8002564:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	edd3 7a1c 	vldr	s15, [r3, #112]	@ 0x70
 800256e:	ee27 7a27 	vmul.f32	s14, s14, s15
	MagCal->trFitErrorpc = sqrtf(fE / (float) MagCal->MagBufferCount) * 100.0F /
 8002572:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	edc3 7a1d 	vstr	s15, [r3, #116]	@ 0x74

	// correct the hard iron estimate for FMATRIXSCALING and the offsets applied (result in uT)
	for (k = X; k <= Z; k++) {
 800257c:	2300      	movs	r3, #0
 800257e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002580:	e024      	b.n	80025cc <fUpdateCalibration4INV+0x6f8>
		MagCal->trV[k] = MagCal->trV[k] * DEFAULTB
 8002582:	687a      	ldr	r2, [r7, #4]
 8002584:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002586:	3310      	adds	r3, #16
 8002588:	009b      	lsls	r3, r3, #2
 800258a:	4413      	add	r3, r2
 800258c:	edd3 7a00 	vldr	s15, [r3]
 8002590:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 80025f4 <fUpdateCalibration4INV+0x720>
 8002594:	ee27 7a87 	vmul.f32	s14, s15, s14
			+ (float)iOffset[k] * FXOS8700_UTPERCOUNT;
 8002598:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800259a:	005b      	lsls	r3, r3, #1
 800259c:	3350      	adds	r3, #80	@ 0x50
 800259e:	443b      	add	r3, r7
 80025a0:	f933 3c28 	ldrsh.w	r3, [r3, #-40]
 80025a4:	ee07 3a90 	vmov	s15, r3
 80025a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80025ac:	eddf 6a12 	vldr	s13, [pc, #72]	@ 80025f8 <fUpdateCalibration4INV+0x724>
 80025b0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80025b4:	ee77 7a27 	vadd.f32	s15, s14, s15
		MagCal->trV[k] = MagCal->trV[k] * DEFAULTB
 80025b8:	687a      	ldr	r2, [r7, #4]
 80025ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025bc:	3310      	adds	r3, #16
 80025be:	009b      	lsls	r3, r3, #2
 80025c0:	4413      	add	r3, r2
 80025c2:	edc3 7a00 	vstr	s15, [r3]
	for (k = X; k <= Z; k++) {
 80025c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025c8:	3301      	adds	r3, #1
 80025ca:	63bb      	str	r3, [r7, #56]	@ 0x38
 80025cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025ce:	2b02      	cmp	r3, #2
 80025d0:	ddd7      	ble.n	8002582 <fUpdateCalibration4INV+0x6ae>
	}

	// correct the geomagnetic field strength B to correct scaling (result in uT)
	MagCal->trB *= DEFAULTB;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	edd3 7a1c 	vldr	s15, [r3, #112]	@ 0x70
 80025d8:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 80025f4 <fUpdateCalibration4INV+0x720>
 80025dc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	edc3 7a1c 	vstr	s15, [r3, #112]	@ 0x70

}
 80025e6:	bf00      	nop
 80025e8:	3754      	adds	r7, #84	@ 0x54
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd90      	pop	{r4, r7, pc}
 80025ee:	bf00      	nop
 80025f0:	42c80000 	.word	0x42c80000
 80025f4:	42480000 	.word	0x42480000
 80025f8:	3dcccccd 	.word	0x3dcccccd

080025fc <fUpdateCalibration7EIG>:

static void fUpdateCalibration7EIG(MagCalibration_t *MagCal)
{
 80025fc:	b5b0      	push	{r4, r5, r7, lr}
 80025fe:	ed2d 8b02 	vpush	{d8}
 8002602:	b08e      	sub	sp, #56	@ 0x38
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
	int16_t iOffset[3];			// offset to remove large DC hard iron bias
	int16_t iCount;				// number of measurements counted
	int i, j, k, m, n;			// loop counters

	// compute fscaling to reduce multiplications later
	fscaling = FXOS8700_UTPERCOUNT / DEFAULTB;
 8002608:	4bb0      	ldr	r3, [pc, #704]	@ (80028cc <fUpdateCalibration7EIG+0x2d0>)
 800260a:	617b      	str	r3, [r7, #20]

	// the offsets are guaranteed to be set from the first element but to avoid compiler error
	iOffset[X] = iOffset[Y] = iOffset[Z] = 0;
 800260c:	2300      	movs	r3, #0
 800260e:	823b      	strh	r3, [r7, #16]
 8002610:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002614:	81fb      	strh	r3, [r7, #14]
 8002616:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800261a:	81bb      	strh	r3, [r7, #12]

	// zero the on and above diagonal elements of the 7x7 symmetric measurement matrix matA
	for (m = 0; m < 7; m++) {
 800261c:	2300      	movs	r3, #0
 800261e:	61fb      	str	r3, [r7, #28]
 8002620:	e019      	b.n	8002656 <fUpdateCalibration7EIG+0x5a>
		for (n = m; n < 7; n++) {
 8002622:	69fb      	ldr	r3, [r7, #28]
 8002624:	61bb      	str	r3, [r7, #24]
 8002626:	e010      	b.n	800264a <fUpdateCalibration7EIG+0x4e>
			MagCal->matA[m][n] = 0.0F;
 8002628:	6879      	ldr	r1, [r7, #4]
 800262a:	69fa      	ldr	r2, [r7, #28]
 800262c:	4613      	mov	r3, r2
 800262e:	009b      	lsls	r3, r3, #2
 8002630:	4413      	add	r3, r2
 8002632:	005b      	lsls	r3, r3, #1
 8002634:	69ba      	ldr	r2, [r7, #24]
 8002636:	4413      	add	r3, r2
 8002638:	3330      	adds	r3, #48	@ 0x30
 800263a:	009b      	lsls	r3, r3, #2
 800263c:	440b      	add	r3, r1
 800263e:	f04f 0200 	mov.w	r2, #0
 8002642:	601a      	str	r2, [r3, #0]
		for (n = m; n < 7; n++) {
 8002644:	69bb      	ldr	r3, [r7, #24]
 8002646:	3301      	adds	r3, #1
 8002648:	61bb      	str	r3, [r7, #24]
 800264a:	69bb      	ldr	r3, [r7, #24]
 800264c:	2b06      	cmp	r3, #6
 800264e:	ddeb      	ble.n	8002628 <fUpdateCalibration7EIG+0x2c>
	for (m = 0; m < 7; m++) {
 8002650:	69fb      	ldr	r3, [r7, #28]
 8002652:	3301      	adds	r3, #1
 8002654:	61fb      	str	r3, [r7, #28]
 8002656:	69fb      	ldr	r3, [r7, #28]
 8002658:	2b06      	cmp	r3, #6
 800265a:	dde2      	ble.n	8002622 <fUpdateCalibration7EIG+0x26>
		}
	}

	// place from MINEQUATIONS to MAXEQUATIONS entries into product matrix matA
	iCount = 0;
 800265c:	2300      	movs	r3, #0
 800265e:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	for (j = 0; j < MAGBUFFSIZE; j++) {
 8002660:	2300      	movs	r3, #0
 8002662:	627b      	str	r3, [r7, #36]	@ 0x24
 8002664:	e0e0      	b.n	8002828 <fUpdateCalibration7EIG+0x22c>
		if (MagCal->valid[j]) {
 8002666:	687a      	ldr	r2, [r7, #4]
 8002668:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800266a:	4413      	add	r3, r2
 800266c:	f503 539a 	add.w	r3, r3, #4928	@ 0x1340
 8002670:	3316      	adds	r3, #22
 8002672:	f993 3000 	ldrsb.w	r3, [r3]
 8002676:	2b00      	cmp	r3, #0
 8002678:	f000 80d3 	beq.w	8002822 <fUpdateCalibration7EIG+0x226>
			// use first valid magnetic buffer entry as offset estimate (bit counts)
			if (iCount == 0) {
 800267c:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 8002680:	2b00      	cmp	r3, #0
 8002682:	d11c      	bne.n	80026be <fUpdateCalibration7EIG+0xc2>
				for (k = X; k <= Z; k++) {
 8002684:	2300      	movs	r3, #0
 8002686:	623b      	str	r3, [r7, #32]
 8002688:	e016      	b.n	80026b8 <fUpdateCalibration7EIG+0xbc>
					iOffset[k] = MagCal->BpFast[k][j];
 800268a:	687a      	ldr	r2, [r7, #4]
 800268c:	6a3b      	ldr	r3, [r7, #32]
 800268e:	f240 218a 	movw	r1, #650	@ 0x28a
 8002692:	fb03 f101 	mul.w	r1, r3, r1
 8002696:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002698:	440b      	add	r3, r1
 800269a:	f503 7303 	add.w	r3, r3, #524	@ 0x20c
 800269e:	005b      	lsls	r3, r3, #1
 80026a0:	4413      	add	r3, r2
 80026a2:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80026a6:	6a3b      	ldr	r3, [r7, #32]
 80026a8:	005b      	lsls	r3, r3, #1
 80026aa:	3338      	adds	r3, #56	@ 0x38
 80026ac:	443b      	add	r3, r7
 80026ae:	f823 2c2c 	strh.w	r2, [r3, #-44]
				for (k = X; k <= Z; k++) {
 80026b2:	6a3b      	ldr	r3, [r7, #32]
 80026b4:	3301      	adds	r3, #1
 80026b6:	623b      	str	r3, [r7, #32]
 80026b8:	6a3b      	ldr	r3, [r7, #32]
 80026ba:	2b02      	cmp	r3, #2
 80026bc:	dde5      	ble.n	800268a <fUpdateCalibration7EIG+0x8e>
				}
			}

			// apply the offset and scaling and store in vecA
			for (k = X; k <= Z; k++) {
 80026be:	2300      	movs	r3, #0
 80026c0:	623b      	str	r3, [r7, #32]
 80026c2:	e041      	b.n	8002748 <fUpdateCalibration7EIG+0x14c>
				MagCal->vecA[k + 3] = (float)((int32_t)MagCal->BpFast[k][j]
 80026c4:	687a      	ldr	r2, [r7, #4]
 80026c6:	6a3b      	ldr	r3, [r7, #32]
 80026c8:	f240 218a 	movw	r1, #650	@ 0x28a
 80026cc:	fb03 f101 	mul.w	r1, r3, r1
 80026d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026d2:	440b      	add	r3, r1
 80026d4:	f503 7303 	add.w	r3, r3, #524	@ 0x20c
 80026d8:	005b      	lsls	r3, r3, #1
 80026da:	4413      	add	r3, r2
 80026dc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80026e0:	461a      	mov	r2, r3
					- (int32_t)iOffset[k]) * fscaling;
 80026e2:	6a3b      	ldr	r3, [r7, #32]
 80026e4:	005b      	lsls	r3, r3, #1
 80026e6:	3338      	adds	r3, #56	@ 0x38
 80026e8:	443b      	add	r3, r7
 80026ea:	f933 3c2c 	ldrsh.w	r3, [r3, #-44]
 80026ee:	1ad3      	subs	r3, r2, r3
				MagCal->vecA[k + 3] = (float)((int32_t)MagCal->BpFast[k][j]
 80026f0:	ee07 3a90 	vmov	s15, r3
 80026f4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80026f8:	6a3b      	ldr	r3, [r7, #32]
 80026fa:	3303      	adds	r3, #3
					- (int32_t)iOffset[k]) * fscaling;
 80026fc:	edd7 7a05 	vldr	s15, [r7, #20]
 8002700:	ee67 7a27 	vmul.f32	s15, s14, s15
				MagCal->vecA[k + 3] = (float)((int32_t)MagCal->BpFast[k][j]
 8002704:	687a      	ldr	r2, [r7, #4]
 8002706:	33f8      	adds	r3, #248	@ 0xf8
 8002708:	009b      	lsls	r3, r3, #2
 800270a:	4413      	add	r3, r2
 800270c:	edc3 7a00 	vstr	s15, [r3]
				MagCal->vecA[k] = MagCal->vecA[k + 3] * MagCal->vecA[k + 3];
 8002710:	6a3b      	ldr	r3, [r7, #32]
 8002712:	3303      	adds	r3, #3
 8002714:	687a      	ldr	r2, [r7, #4]
 8002716:	33f8      	adds	r3, #248	@ 0xf8
 8002718:	009b      	lsls	r3, r3, #2
 800271a:	4413      	add	r3, r2
 800271c:	ed93 7a00 	vldr	s14, [r3]
 8002720:	6a3b      	ldr	r3, [r7, #32]
 8002722:	3303      	adds	r3, #3
 8002724:	687a      	ldr	r2, [r7, #4]
 8002726:	33f8      	adds	r3, #248	@ 0xf8
 8002728:	009b      	lsls	r3, r3, #2
 800272a:	4413      	add	r3, r2
 800272c:	edd3 7a00 	vldr	s15, [r3]
 8002730:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002734:	687a      	ldr	r2, [r7, #4]
 8002736:	6a3b      	ldr	r3, [r7, #32]
 8002738:	33f8      	adds	r3, #248	@ 0xf8
 800273a:	009b      	lsls	r3, r3, #2
 800273c:	4413      	add	r3, r2
 800273e:	edc3 7a00 	vstr	s15, [r3]
			for (k = X; k <= Z; k++) {
 8002742:	6a3b      	ldr	r3, [r7, #32]
 8002744:	3301      	adds	r3, #1
 8002746:	623b      	str	r3, [r7, #32]
 8002748:	6a3b      	ldr	r3, [r7, #32]
 800274a:	2b02      	cmp	r3, #2
 800274c:	ddba      	ble.n	80026c4 <fUpdateCalibration7EIG+0xc8>
			// accumulate the on-and above-diagonal terms of
			// MagCal->matA=Sigma{vecA^T * vecA}
			// with the exception of matA[6][6] which will sum to the number
			// of measurements and remembering that vecA[6] equals 1.0F
			// update the right hand column [6] of matA except for matA[6][6]
			for (m = 0; m < 6; m++) {
 800274e:	2300      	movs	r3, #0
 8002750:	61fb      	str	r3, [r7, #28]
 8002752:	e01f      	b.n	8002794 <fUpdateCalibration7EIG+0x198>
				MagCal->matA[m][6] += MagCal->vecA[m];
 8002754:	6879      	ldr	r1, [r7, #4]
 8002756:	69fa      	ldr	r2, [r7, #28]
 8002758:	4613      	mov	r3, r2
 800275a:	009b      	lsls	r3, r3, #2
 800275c:	4413      	add	r3, r2
 800275e:	00db      	lsls	r3, r3, #3
 8002760:	440b      	add	r3, r1
 8002762:	33d8      	adds	r3, #216	@ 0xd8
 8002764:	ed93 7a00 	vldr	s14, [r3]
 8002768:	687a      	ldr	r2, [r7, #4]
 800276a:	69fb      	ldr	r3, [r7, #28]
 800276c:	33f8      	adds	r3, #248	@ 0xf8
 800276e:	009b      	lsls	r3, r3, #2
 8002770:	4413      	add	r3, r2
 8002772:	edd3 7a00 	vldr	s15, [r3]
 8002776:	ee77 7a27 	vadd.f32	s15, s14, s15
 800277a:	6879      	ldr	r1, [r7, #4]
 800277c:	69fa      	ldr	r2, [r7, #28]
 800277e:	4613      	mov	r3, r2
 8002780:	009b      	lsls	r3, r3, #2
 8002782:	4413      	add	r3, r2
 8002784:	00db      	lsls	r3, r3, #3
 8002786:	440b      	add	r3, r1
 8002788:	33d8      	adds	r3, #216	@ 0xd8
 800278a:	edc3 7a00 	vstr	s15, [r3]
			for (m = 0; m < 6; m++) {
 800278e:	69fb      	ldr	r3, [r7, #28]
 8002790:	3301      	adds	r3, #1
 8002792:	61fb      	str	r3, [r7, #28]
 8002794:	69fb      	ldr	r3, [r7, #28]
 8002796:	2b05      	cmp	r3, #5
 8002798:	dddc      	ble.n	8002754 <fUpdateCalibration7EIG+0x158>
			}
			// update the on and above diagonal terms except for right hand column 6
			for (m = 0; m < 6; m++) {
 800279a:	2300      	movs	r3, #0
 800279c:	61fb      	str	r3, [r7, #28]
 800279e:	e037      	b.n	8002810 <fUpdateCalibration7EIG+0x214>
				for (n = m; n < 6; n++) {
 80027a0:	69fb      	ldr	r3, [r7, #28]
 80027a2:	61bb      	str	r3, [r7, #24]
 80027a4:	e02e      	b.n	8002804 <fUpdateCalibration7EIG+0x208>
					MagCal->matA[m][n] += MagCal->vecA[m] * MagCal->vecA[n];
 80027a6:	6879      	ldr	r1, [r7, #4]
 80027a8:	69fa      	ldr	r2, [r7, #28]
 80027aa:	4613      	mov	r3, r2
 80027ac:	009b      	lsls	r3, r3, #2
 80027ae:	4413      	add	r3, r2
 80027b0:	005b      	lsls	r3, r3, #1
 80027b2:	69ba      	ldr	r2, [r7, #24]
 80027b4:	4413      	add	r3, r2
 80027b6:	3330      	adds	r3, #48	@ 0x30
 80027b8:	009b      	lsls	r3, r3, #2
 80027ba:	440b      	add	r3, r1
 80027bc:	ed93 7a00 	vldr	s14, [r3]
 80027c0:	687a      	ldr	r2, [r7, #4]
 80027c2:	69fb      	ldr	r3, [r7, #28]
 80027c4:	33f8      	adds	r3, #248	@ 0xf8
 80027c6:	009b      	lsls	r3, r3, #2
 80027c8:	4413      	add	r3, r2
 80027ca:	edd3 6a00 	vldr	s13, [r3]
 80027ce:	687a      	ldr	r2, [r7, #4]
 80027d0:	69bb      	ldr	r3, [r7, #24]
 80027d2:	33f8      	adds	r3, #248	@ 0xf8
 80027d4:	009b      	lsls	r3, r3, #2
 80027d6:	4413      	add	r3, r2
 80027d8:	edd3 7a00 	vldr	s15, [r3]
 80027dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80027e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027e4:	6879      	ldr	r1, [r7, #4]
 80027e6:	69fa      	ldr	r2, [r7, #28]
 80027e8:	4613      	mov	r3, r2
 80027ea:	009b      	lsls	r3, r3, #2
 80027ec:	4413      	add	r3, r2
 80027ee:	005b      	lsls	r3, r3, #1
 80027f0:	69ba      	ldr	r2, [r7, #24]
 80027f2:	4413      	add	r3, r2
 80027f4:	3330      	adds	r3, #48	@ 0x30
 80027f6:	009b      	lsls	r3, r3, #2
 80027f8:	440b      	add	r3, r1
 80027fa:	edc3 7a00 	vstr	s15, [r3]
				for (n = m; n < 6; n++) {
 80027fe:	69bb      	ldr	r3, [r7, #24]
 8002800:	3301      	adds	r3, #1
 8002802:	61bb      	str	r3, [r7, #24]
 8002804:	69bb      	ldr	r3, [r7, #24]
 8002806:	2b05      	cmp	r3, #5
 8002808:	ddcd      	ble.n	80027a6 <fUpdateCalibration7EIG+0x1aa>
			for (m = 0; m < 6; m++) {
 800280a:	69fb      	ldr	r3, [r7, #28]
 800280c:	3301      	adds	r3, #1
 800280e:	61fb      	str	r3, [r7, #28]
 8002810:	69fb      	ldr	r3, [r7, #28]
 8002812:	2b05      	cmp	r3, #5
 8002814:	ddc4      	ble.n	80027a0 <fUpdateCalibration7EIG+0x1a4>
				}
			}

			// increment the measurement counter for the next iteration
			iCount++;
 8002816:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 800281a:	b29b      	uxth	r3, r3
 800281c:	3301      	adds	r3, #1
 800281e:	b29b      	uxth	r3, r3
 8002820:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	for (j = 0; j < MAGBUFFSIZE; j++) {
 8002822:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002824:	3301      	adds	r3, #1
 8002826:	627b      	str	r3, [r7, #36]	@ 0x24
 8002828:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800282a:	f240 2289 	movw	r2, #649	@ 0x289
 800282e:	4293      	cmp	r3, r2
 8002830:	f77f af19 	ble.w	8002666 <fUpdateCalibration7EIG+0x6a>
		}
	}

	// finally set the last element matA[6][6] to the number of measurements
	MagCal->matA[6][6] = (float) iCount;
 8002834:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 8002838:	ee07 3a90 	vmov	s15, r3
 800283c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	edc3 7a72 	vstr	s15, [r3, #456]	@ 0x1c8

	// store the number of measurements accumulated
	MagCal->MagBufferCount = iCount;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800284c:	461a      	mov	r2, r3
 800284e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8002850:	f8a2 35e0 	strh.w	r3, [r2, #1504]	@ 0x5e0

	// copy the above diagonal elements of matA to below the diagonal
	for (m = 1; m < 7; m++) {
 8002854:	2301      	movs	r3, #1
 8002856:	61fb      	str	r3, [r7, #28]
 8002858:	e024      	b.n	80028a4 <fUpdateCalibration7EIG+0x2a8>
		for (n = 0; n < m; n++) {
 800285a:	2300      	movs	r3, #0
 800285c:	61bb      	str	r3, [r7, #24]
 800285e:	e01a      	b.n	8002896 <fUpdateCalibration7EIG+0x29a>
			MagCal->matA[m][n] = MagCal->matA[n][m];
 8002860:	6879      	ldr	r1, [r7, #4]
 8002862:	69ba      	ldr	r2, [r7, #24]
 8002864:	4613      	mov	r3, r2
 8002866:	009b      	lsls	r3, r3, #2
 8002868:	4413      	add	r3, r2
 800286a:	005b      	lsls	r3, r3, #1
 800286c:	69fa      	ldr	r2, [r7, #28]
 800286e:	4413      	add	r3, r2
 8002870:	3330      	adds	r3, #48	@ 0x30
 8002872:	009b      	lsls	r3, r3, #2
 8002874:	440b      	add	r3, r1
 8002876:	6819      	ldr	r1, [r3, #0]
 8002878:	6878      	ldr	r0, [r7, #4]
 800287a:	69fa      	ldr	r2, [r7, #28]
 800287c:	4613      	mov	r3, r2
 800287e:	009b      	lsls	r3, r3, #2
 8002880:	4413      	add	r3, r2
 8002882:	005b      	lsls	r3, r3, #1
 8002884:	69ba      	ldr	r2, [r7, #24]
 8002886:	4413      	add	r3, r2
 8002888:	3330      	adds	r3, #48	@ 0x30
 800288a:	009b      	lsls	r3, r3, #2
 800288c:	4403      	add	r3, r0
 800288e:	6019      	str	r1, [r3, #0]
		for (n = 0; n < m; n++) {
 8002890:	69bb      	ldr	r3, [r7, #24]
 8002892:	3301      	adds	r3, #1
 8002894:	61bb      	str	r3, [r7, #24]
 8002896:	69ba      	ldr	r2, [r7, #24]
 8002898:	69fb      	ldr	r3, [r7, #28]
 800289a:	429a      	cmp	r2, r3
 800289c:	dbe0      	blt.n	8002860 <fUpdateCalibration7EIG+0x264>
	for (m = 1; m < 7; m++) {
 800289e:	69fb      	ldr	r3, [r7, #28]
 80028a0:	3301      	adds	r3, #1
 80028a2:	61fb      	str	r3, [r7, #28]
 80028a4:	69fb      	ldr	r3, [r7, #28]
 80028a6:	2b06      	cmp	r3, #6
 80028a8:	ddd7      	ble.n	800285a <fUpdateCalibration7EIG+0x25e>
		}
	}

	// set tmpA7x1 to the unsorted eigenvalues and matB to the unsorted eigenvectors of matA
	eigencompute(MagCal->matA, MagCal->vecA, MagCal->matB, 7);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	f103 00c0 	add.w	r0, r3, #192	@ 0xc0
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	f503 7214 	add.w	r2, r3, #592	@ 0x250
 80028bc:	2307      	movs	r3, #7
 80028be:	f003 fba5 	bl	800600c <eigencompute>

	// find the smallest eigenvalue
	j = 0;
 80028c2:	2300      	movs	r3, #0
 80028c4:	627b      	str	r3, [r7, #36]	@ 0x24
	for (i = 1; i < 7; i++) {
 80028c6:	2301      	movs	r3, #1
 80028c8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80028ca:	e023      	b.n	8002914 <fUpdateCalibration7EIG+0x318>
 80028cc:	3b03126f 	.word	0x3b03126f
 80028d0:	00000000 	.word	0x00000000
 80028d4:	beaaaaab 	.word	0xbeaaaaab
 80028d8:	be2aaaab 	.word	0xbe2aaaab
 80028dc:	42480000 	.word	0x42480000
 80028e0:	3dcccccd 	.word	0x3dcccccd
		if (MagCal->vecA[i] < MagCal->vecA[j]) {
 80028e4:	687a      	ldr	r2, [r7, #4]
 80028e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028e8:	33f8      	adds	r3, #248	@ 0xf8
 80028ea:	009b      	lsls	r3, r3, #2
 80028ec:	4413      	add	r3, r2
 80028ee:	ed93 7a00 	vldr	s14, [r3]
 80028f2:	687a      	ldr	r2, [r7, #4]
 80028f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028f6:	33f8      	adds	r3, #248	@ 0xf8
 80028f8:	009b      	lsls	r3, r3, #2
 80028fa:	4413      	add	r3, r2
 80028fc:	edd3 7a00 	vldr	s15, [r3]
 8002900:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002904:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002908:	d501      	bpl.n	800290e <fUpdateCalibration7EIG+0x312>
			j = i;
 800290a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800290c:	627b      	str	r3, [r7, #36]	@ 0x24
	for (i = 1; i < 7; i++) {
 800290e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002910:	3301      	adds	r3, #1
 8002912:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002914:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002916:	2b06      	cmp	r3, #6
 8002918:	dde4      	ble.n	80028e4 <fUpdateCalibration7EIG+0x2e8>
		}
	}

	// set ellipsoid matrix A to the solution vector with smallest eigenvalue,
	// compute its determinant and the hard iron offset (scaled and offset)
	f3x3matrixAeqScalar(MagCal->A, 0.0F);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	3378      	adds	r3, #120	@ 0x78
 800291e:	ed1f 0a14 	vldr	s0, [pc, #-80]	@ 80028d0 <fUpdateCalibration7EIG+0x2d4>
 8002922:	4618      	mov	r0, r3
 8002924:	f003 f970 	bl	8005c08 <f3x3matrixAeqScalar>
	det = 1.0F;
 8002928:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800292c:	637b      	str	r3, [r7, #52]	@ 0x34
	for (k = X; k <= Z; k++) {
 800292e:	2300      	movs	r3, #0
 8002930:	623b      	str	r3, [r7, #32]
 8002932:	e043      	b.n	80029bc <fUpdateCalibration7EIG+0x3c0>
		MagCal->A[k][k] = MagCal->matB[k][j];
 8002934:	6879      	ldr	r1, [r7, #4]
 8002936:	6a3a      	ldr	r2, [r7, #32]
 8002938:	4613      	mov	r3, r2
 800293a:	009b      	lsls	r3, r3, #2
 800293c:	4413      	add	r3, r2
 800293e:	005b      	lsls	r3, r3, #1
 8002940:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002942:	4413      	add	r3, r2
 8002944:	3394      	adds	r3, #148	@ 0x94
 8002946:	009b      	lsls	r3, r3, #2
 8002948:	440b      	add	r3, r1
 800294a:	681a      	ldr	r2, [r3, #0]
 800294c:	6879      	ldr	r1, [r7, #4]
 800294e:	6a3b      	ldr	r3, [r7, #32]
 8002950:	011b      	lsls	r3, r3, #4
 8002952:	440b      	add	r3, r1
 8002954:	3378      	adds	r3, #120	@ 0x78
 8002956:	601a      	str	r2, [r3, #0]
		det *= MagCal->A[k][k];
 8002958:	687a      	ldr	r2, [r7, #4]
 800295a:	6a3b      	ldr	r3, [r7, #32]
 800295c:	011b      	lsls	r3, r3, #4
 800295e:	4413      	add	r3, r2
 8002960:	3378      	adds	r3, #120	@ 0x78
 8002962:	edd3 7a00 	vldr	s15, [r3]
 8002966:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 800296a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800296e:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
		MagCal->trV[k] = -0.5F * MagCal->matB[k + 3][j] / MagCal->A[k][k];
 8002972:	6a3b      	ldr	r3, [r7, #32]
 8002974:	1cda      	adds	r2, r3, #3
 8002976:	6879      	ldr	r1, [r7, #4]
 8002978:	4613      	mov	r3, r2
 800297a:	009b      	lsls	r3, r3, #2
 800297c:	4413      	add	r3, r2
 800297e:	005b      	lsls	r3, r3, #1
 8002980:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002982:	4413      	add	r3, r2
 8002984:	3394      	adds	r3, #148	@ 0x94
 8002986:	009b      	lsls	r3, r3, #2
 8002988:	440b      	add	r3, r1
 800298a:	edd3 7a00 	vldr	s15, [r3]
 800298e:	eebe 7a00 	vmov.f32	s14, #224	@ 0xbf000000 -0.5
 8002992:	ee67 6a87 	vmul.f32	s13, s15, s14
 8002996:	687a      	ldr	r2, [r7, #4]
 8002998:	6a3b      	ldr	r3, [r7, #32]
 800299a:	011b      	lsls	r3, r3, #4
 800299c:	4413      	add	r3, r2
 800299e:	3378      	adds	r3, #120	@ 0x78
 80029a0:	ed93 7a00 	vldr	s14, [r3]
 80029a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80029a8:	687a      	ldr	r2, [r7, #4]
 80029aa:	6a3b      	ldr	r3, [r7, #32]
 80029ac:	3310      	adds	r3, #16
 80029ae:	009b      	lsls	r3, r3, #2
 80029b0:	4413      	add	r3, r2
 80029b2:	edc3 7a00 	vstr	s15, [r3]
	for (k = X; k <= Z; k++) {
 80029b6:	6a3b      	ldr	r3, [r7, #32]
 80029b8:	3301      	adds	r3, #1
 80029ba:	623b      	str	r3, [r7, #32]
 80029bc:	6a3b      	ldr	r3, [r7, #32]
 80029be:	2b02      	cmp	r3, #2
 80029c0:	ddb8      	ble.n	8002934 <fUpdateCalibration7EIG+0x338>
	}

	// negate A if it has negative determinant
	if (det < 0.0F) {
 80029c2:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80029c6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80029ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029ce:	d51a      	bpl.n	8002a06 <fUpdateCalibration7EIG+0x40a>
		f3x3matrixAeqMinusA(MagCal->A);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	3378      	adds	r3, #120	@ 0x78
 80029d4:	4618      	mov	r0, r3
 80029d6:	f003 f989 	bl	8005cec <f3x3matrixAeqMinusA>
		MagCal->matB[6][j] = -MagCal->matB[6][j];
 80029da:	687a      	ldr	r2, [r7, #4]
 80029dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029de:	33d0      	adds	r3, #208	@ 0xd0
 80029e0:	009b      	lsls	r3, r3, #2
 80029e2:	4413      	add	r3, r2
 80029e4:	edd3 7a00 	vldr	s15, [r3]
 80029e8:	eef1 7a67 	vneg.f32	s15, s15
 80029ec:	687a      	ldr	r2, [r7, #4]
 80029ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029f0:	33d0      	adds	r3, #208	@ 0xd0
 80029f2:	009b      	lsls	r3, r3, #2
 80029f4:	4413      	add	r3, r2
 80029f6:	edc3 7a00 	vstr	s15, [r3]
		det = -det;
 80029fa:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80029fe:	eef1 7a67 	vneg.f32	s15, s15
 8002a02:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
	}

	// set ftmp to the square of the trial geomagnetic field strength B
	// (counts times FMATRIXSCALING)
	ftmp = -MagCal->matB[6][j];
 8002a06:	687a      	ldr	r2, [r7, #4]
 8002a08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a0a:	33d0      	adds	r3, #208	@ 0xd0
 8002a0c:	009b      	lsls	r3, r3, #2
 8002a0e:	4413      	add	r3, r2
 8002a10:	edd3 7a00 	vldr	s15, [r3]
 8002a14:	eef1 7a67 	vneg.f32	s15, s15
 8002a18:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
	for (k = X; k <= Z; k++) {
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	623b      	str	r3, [r7, #32]
 8002a20:	e021      	b.n	8002a66 <fUpdateCalibration7EIG+0x46a>
		ftmp += MagCal->A[k][k] * MagCal->trV[k] * MagCal->trV[k];
 8002a22:	687a      	ldr	r2, [r7, #4]
 8002a24:	6a3b      	ldr	r3, [r7, #32]
 8002a26:	011b      	lsls	r3, r3, #4
 8002a28:	4413      	add	r3, r2
 8002a2a:	3378      	adds	r3, #120	@ 0x78
 8002a2c:	ed93 7a00 	vldr	s14, [r3]
 8002a30:	687a      	ldr	r2, [r7, #4]
 8002a32:	6a3b      	ldr	r3, [r7, #32]
 8002a34:	3310      	adds	r3, #16
 8002a36:	009b      	lsls	r3, r3, #2
 8002a38:	4413      	add	r3, r2
 8002a3a:	edd3 7a00 	vldr	s15, [r3]
 8002a3e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a42:	687a      	ldr	r2, [r7, #4]
 8002a44:	6a3b      	ldr	r3, [r7, #32]
 8002a46:	3310      	adds	r3, #16
 8002a48:	009b      	lsls	r3, r3, #2
 8002a4a:	4413      	add	r3, r2
 8002a4c:	edd3 7a00 	vldr	s15, [r3]
 8002a50:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a54:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8002a58:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a5c:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
	for (k = X; k <= Z; k++) {
 8002a60:	6a3b      	ldr	r3, [r7, #32]
 8002a62:	3301      	adds	r3, #1
 8002a64:	623b      	str	r3, [r7, #32]
 8002a66:	6a3b      	ldr	r3, [r7, #32]
 8002a68:	2b02      	cmp	r3, #2
 8002a6a:	ddda      	ble.n	8002a22 <fUpdateCalibration7EIG+0x426>
	}

	// calculate the trial normalized fit error as a percentage
	MagCal->trFitErrorpc = 50.0F *
		sqrtf(fabs(MagCal->vecA[j]) / (float) MagCal->MagBufferCount) / fabs(ftmp);
 8002a6c:	687a      	ldr	r2, [r7, #4]
 8002a6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a70:	33f8      	adds	r3, #248	@ 0xf8
 8002a72:	009b      	lsls	r3, r3, #2
 8002a74:	4413      	add	r3, r2
 8002a76:	edd3 7a00 	vldr	s15, [r3]
 8002a7a:	eeb0 7ae7 	vabs.f32	s14, s15
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002a84:	f9b3 35e0 	ldrsh.w	r3, [r3, #1504]	@ 0x5e0
 8002a88:	ee07 3a90 	vmov	s15, r3
 8002a8c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a90:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002a94:	eeb0 0a66 	vmov.f32	s0, s13
 8002a98:	f00e fade 	bl	8011058 <sqrtf>
 8002a9c:	eef0 7a40 	vmov.f32	s15, s0
	MagCal->trFitErrorpc = 50.0F *
 8002aa0:	ed1f 7a72 	vldr	s14, [pc, #-456]	@ 80028dc <fUpdateCalibration7EIG+0x2e0>
 8002aa4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002aa8:	ee17 0a90 	vmov	r0, s15
 8002aac:	f7fd fd24 	bl	80004f8 <__aeabi_f2d>
 8002ab0:	4604      	mov	r4, r0
 8002ab2:	460d      	mov	r5, r1
		sqrtf(fabs(MagCal->vecA[j]) / (float) MagCal->MagBufferCount) / fabs(ftmp);
 8002ab4:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8002ab8:	eef0 7ae7 	vabs.f32	s15, s15
 8002abc:	ee17 0a90 	vmov	r0, s15
 8002ac0:	f7fd fd1a 	bl	80004f8 <__aeabi_f2d>
 8002ac4:	4602      	mov	r2, r0
 8002ac6:	460b      	mov	r3, r1
 8002ac8:	4620      	mov	r0, r4
 8002aca:	4629      	mov	r1, r5
 8002acc:	f7fd fe96 	bl	80007fc <__aeabi_ddiv>
 8002ad0:	4602      	mov	r2, r0
 8002ad2:	460b      	mov	r3, r1
 8002ad4:	4610      	mov	r0, r2
 8002ad6:	4619      	mov	r1, r3
 8002ad8:	f7fe f816 	bl	8000b08 <__aeabi_d2f>
 8002adc:	4602      	mov	r2, r0
	MagCal->trFitErrorpc = 50.0F *
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	675a      	str	r2, [r3, #116]	@ 0x74

	// normalize the ellipsoid matrix A to unit determinant
	f3x3matrixAeqAxScalar(MagCal->A, powf(det, -(ONETHIRD)));
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	f103 0478 	add.w	r4, r3, #120	@ 0x78
 8002ae8:	ed5f 0a86 	vldr	s1, [pc, #-536]	@ 80028d4 <fUpdateCalibration7EIG+0x2d8>
 8002aec:	ed97 0a0d 	vldr	s0, [r7, #52]	@ 0x34
 8002af0:	f00e fa5a 	bl	8010fa8 <powf>
 8002af4:	eef0 7a40 	vmov.f32	s15, s0
 8002af8:	eeb0 0a67 	vmov.f32	s0, s15
 8002afc:	4620      	mov	r0, r4
 8002afe:	f003 f8b9 	bl	8005c74 <f3x3matrixAeqAxScalar>

	// convert the geomagnetic field strength B into uT for normalized
	// soft iron matrix A and normalize
	MagCal->trB = sqrtf(fabs(ftmp)) * DEFAULTB * powf(det, -(ONESIXTH));
 8002b02:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8002b06:	eef0 7ae7 	vabs.f32	s15, s15
 8002b0a:	eeb0 0a67 	vmov.f32	s0, s15
 8002b0e:	f00e faa3 	bl	8011058 <sqrtf>
 8002b12:	eef0 7a40 	vmov.f32	s15, s0
 8002b16:	ed1f 7a8f 	vldr	s14, [pc, #-572]	@ 80028dc <fUpdateCalibration7EIG+0x2e0>
 8002b1a:	ee27 8a87 	vmul.f32	s16, s15, s14
 8002b1e:	ed5f 0a92 	vldr	s1, [pc, #-584]	@ 80028d8 <fUpdateCalibration7EIG+0x2dc>
 8002b22:	ed97 0a0d 	vldr	s0, [r7, #52]	@ 0x34
 8002b26:	f00e fa3f 	bl	8010fa8 <powf>
 8002b2a:	eef0 7a40 	vmov.f32	s15, s0
 8002b2e:	ee68 7a27 	vmul.f32	s15, s16, s15
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	edc3 7a1c 	vstr	s15, [r3, #112]	@ 0x70

	// compute trial invW from the square root of A also with normalized
	// determinant and hard iron offset in uT
	f3x3matrixAeqI(MagCal->trinvW);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	334c      	adds	r3, #76	@ 0x4c
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	f002 ffd7 	bl	8005af0 <f3x3matrixAeqI>
	for (k = X; k <= Z; k++) {
 8002b42:	2300      	movs	r3, #0
 8002b44:	623b      	str	r3, [r7, #32]
 8002b46:	e03a      	b.n	8002bbe <fUpdateCalibration7EIG+0x5c2>
		MagCal->trinvW[k][k] = sqrtf(fabs(MagCal->A[k][k]));
 8002b48:	687a      	ldr	r2, [r7, #4]
 8002b4a:	6a3b      	ldr	r3, [r7, #32]
 8002b4c:	011b      	lsls	r3, r3, #4
 8002b4e:	4413      	add	r3, r2
 8002b50:	3378      	adds	r3, #120	@ 0x78
 8002b52:	edd3 7a00 	vldr	s15, [r3]
 8002b56:	eef0 7ae7 	vabs.f32	s15, s15
 8002b5a:	eeb0 0a67 	vmov.f32	s0, s15
 8002b5e:	f00e fa7b 	bl	8011058 <sqrtf>
 8002b62:	eef0 7a40 	vmov.f32	s15, s0
 8002b66:	687a      	ldr	r2, [r7, #4]
 8002b68:	6a3b      	ldr	r3, [r7, #32]
 8002b6a:	011b      	lsls	r3, r3, #4
 8002b6c:	4413      	add	r3, r2
 8002b6e:	334c      	adds	r3, #76	@ 0x4c
 8002b70:	edc3 7a00 	vstr	s15, [r3]
		MagCal->trV[k] = MagCal->trV[k] * DEFAULTB + (float)iOffset[k] * FXOS8700_UTPERCOUNT;
 8002b74:	687a      	ldr	r2, [r7, #4]
 8002b76:	6a3b      	ldr	r3, [r7, #32]
 8002b78:	3310      	adds	r3, #16
 8002b7a:	009b      	lsls	r3, r3, #2
 8002b7c:	4413      	add	r3, r2
 8002b7e:	edd3 7a00 	vldr	s15, [r3]
 8002b82:	ed1f 7aaa 	vldr	s14, [pc, #-680]	@ 80028dc <fUpdateCalibration7EIG+0x2e0>
 8002b86:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002b8a:	6a3b      	ldr	r3, [r7, #32]
 8002b8c:	005b      	lsls	r3, r3, #1
 8002b8e:	3338      	adds	r3, #56	@ 0x38
 8002b90:	443b      	add	r3, r7
 8002b92:	f933 3c2c 	ldrsh.w	r3, [r3, #-44]
 8002b96:	ee07 3a90 	vmov	s15, r3
 8002b9a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b9e:	ed5f 6ab0 	vldr	s13, [pc, #-704]	@ 80028e0 <fUpdateCalibration7EIG+0x2e4>
 8002ba2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002ba6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002baa:	687a      	ldr	r2, [r7, #4]
 8002bac:	6a3b      	ldr	r3, [r7, #32]
 8002bae:	3310      	adds	r3, #16
 8002bb0:	009b      	lsls	r3, r3, #2
 8002bb2:	4413      	add	r3, r2
 8002bb4:	edc3 7a00 	vstr	s15, [r3]
	for (k = X; k <= Z; k++) {
 8002bb8:	6a3b      	ldr	r3, [r7, #32]
 8002bba:	3301      	adds	r3, #1
 8002bbc:	623b      	str	r3, [r7, #32]
 8002bbe:	6a3b      	ldr	r3, [r7, #32]
 8002bc0:	2b02      	cmp	r3, #2
 8002bc2:	ddc1      	ble.n	8002b48 <fUpdateCalibration7EIG+0x54c>
	}
}
 8002bc4:	bf00      	nop
 8002bc6:	bf00      	nop
 8002bc8:	3738      	adds	r7, #56	@ 0x38
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	ecbd 8b02 	vpop	{d8}
 8002bd0:	bdb0      	pop	{r4, r5, r7, pc}
 8002bd2:	bf00      	nop

08002bd4 <fUpdateCalibration10EIG>:

static void fUpdateCalibration10EIG(MagCalibration_t *MagCal)
{
 8002bd4:	b590      	push	{r4, r7, lr}
 8002bd6:	b08f      	sub	sp, #60	@ 0x3c
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
	int16_t iOffset[3];			// offset to remove large DC hard iron bias in matrix
	int16_t iCount;				// number of measurements counted
	int i, j, k, m, n;			// loop counters

	// compute fscaling to reduce multiplications later
	fscaling = FXOS8700_UTPERCOUNT / DEFAULTB;
 8002bdc:	4bb1      	ldr	r3, [pc, #708]	@ (8002ea4 <fUpdateCalibration10EIG+0x2d0>)
 8002bde:	61bb      	str	r3, [r7, #24]

	// the offsets are guaranteed to be set from the first element but to avoid compiler error
	iOffset[X] = iOffset[Y] = iOffset[Z] = 0;
 8002be0:	2300      	movs	r3, #0
 8002be2:	823b      	strh	r3, [r7, #16]
 8002be4:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002be8:	81fb      	strh	r3, [r7, #14]
 8002bea:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002bee:	81bb      	strh	r3, [r7, #12]

	// zero the on and above diagonal elements of the 10x10 symmetric measurement matrix matA
	for (m = 0; m < 10; m++) {
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	623b      	str	r3, [r7, #32]
 8002bf4:	e019      	b.n	8002c2a <fUpdateCalibration10EIG+0x56>
		for (n = m; n < 10; n++) {
 8002bf6:	6a3b      	ldr	r3, [r7, #32]
 8002bf8:	61fb      	str	r3, [r7, #28]
 8002bfa:	e010      	b.n	8002c1e <fUpdateCalibration10EIG+0x4a>
			MagCal->matA[m][n] = 0.0F;
 8002bfc:	6879      	ldr	r1, [r7, #4]
 8002bfe:	6a3a      	ldr	r2, [r7, #32]
 8002c00:	4613      	mov	r3, r2
 8002c02:	009b      	lsls	r3, r3, #2
 8002c04:	4413      	add	r3, r2
 8002c06:	005b      	lsls	r3, r3, #1
 8002c08:	69fa      	ldr	r2, [r7, #28]
 8002c0a:	4413      	add	r3, r2
 8002c0c:	3330      	adds	r3, #48	@ 0x30
 8002c0e:	009b      	lsls	r3, r3, #2
 8002c10:	440b      	add	r3, r1
 8002c12:	f04f 0200 	mov.w	r2, #0
 8002c16:	601a      	str	r2, [r3, #0]
		for (n = m; n < 10; n++) {
 8002c18:	69fb      	ldr	r3, [r7, #28]
 8002c1a:	3301      	adds	r3, #1
 8002c1c:	61fb      	str	r3, [r7, #28]
 8002c1e:	69fb      	ldr	r3, [r7, #28]
 8002c20:	2b09      	cmp	r3, #9
 8002c22:	ddeb      	ble.n	8002bfc <fUpdateCalibration10EIG+0x28>
	for (m = 0; m < 10; m++) {
 8002c24:	6a3b      	ldr	r3, [r7, #32]
 8002c26:	3301      	adds	r3, #1
 8002c28:	623b      	str	r3, [r7, #32]
 8002c2a:	6a3b      	ldr	r3, [r7, #32]
 8002c2c:	2b09      	cmp	r3, #9
 8002c2e:	dde2      	ble.n	8002bf6 <fUpdateCalibration10EIG+0x22>
		}
	}

	// sum between MINEQUATIONS to MAXEQUATIONS entries into the 10x10 product matrix matA
	iCount = 0;
 8002c30:	2300      	movs	r3, #0
 8002c32:	867b      	strh	r3, [r7, #50]	@ 0x32
	for (j = 0; j < MAGBUFFSIZE; j++) {
 8002c34:	2300      	movs	r3, #0
 8002c36:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002c38:	e117      	b.n	8002e6a <fUpdateCalibration10EIG+0x296>
		if (MagCal->valid[j]) {
 8002c3a:	687a      	ldr	r2, [r7, #4]
 8002c3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c3e:	4413      	add	r3, r2
 8002c40:	f503 539a 	add.w	r3, r3, #4928	@ 0x1340
 8002c44:	3316      	adds	r3, #22
 8002c46:	f993 3000 	ldrsb.w	r3, [r3]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	f000 810a 	beq.w	8002e64 <fUpdateCalibration10EIG+0x290>
			// use first valid magnetic buffer entry as estimate for offset
			// to help solution (bit counts)
			if (iCount == 0) {
 8002c50:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d11c      	bne.n	8002c92 <fUpdateCalibration10EIG+0xbe>
				for (k = X; k <= Z; k++) {
 8002c58:	2300      	movs	r3, #0
 8002c5a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c5c:	e016      	b.n	8002c8c <fUpdateCalibration10EIG+0xb8>
					iOffset[k] = MagCal->BpFast[k][j];
 8002c5e:	687a      	ldr	r2, [r7, #4]
 8002c60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c62:	f240 218a 	movw	r1, #650	@ 0x28a
 8002c66:	fb03 f101 	mul.w	r1, r3, r1
 8002c6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c6c:	440b      	add	r3, r1
 8002c6e:	f503 7303 	add.w	r3, r3, #524	@ 0x20c
 8002c72:	005b      	lsls	r3, r3, #1
 8002c74:	4413      	add	r3, r2
 8002c76:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8002c7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c7c:	005b      	lsls	r3, r3, #1
 8002c7e:	3338      	adds	r3, #56	@ 0x38
 8002c80:	443b      	add	r3, r7
 8002c82:	f823 2c2c 	strh.w	r2, [r3, #-44]
				for (k = X; k <= Z; k++) {
 8002c86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c88:	3301      	adds	r3, #1
 8002c8a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c8e:	2b02      	cmp	r3, #2
 8002c90:	dde5      	ble.n	8002c5e <fUpdateCalibration10EIG+0x8a>
				}
			}

			// apply the fixed offset and scaling and enter into vecA[6-8]
			for (k = X; k <= Z; k++) {
 8002c92:	2300      	movs	r3, #0
 8002c94:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c96:	e028      	b.n	8002cea <fUpdateCalibration10EIG+0x116>
				MagCal->vecA[k + 6] = (float)((int32_t)MagCal->BpFast[k][j]
 8002c98:	687a      	ldr	r2, [r7, #4]
 8002c9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c9c:	f240 218a 	movw	r1, #650	@ 0x28a
 8002ca0:	fb03 f101 	mul.w	r1, r3, r1
 8002ca4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ca6:	440b      	add	r3, r1
 8002ca8:	f503 7303 	add.w	r3, r3, #524	@ 0x20c
 8002cac:	005b      	lsls	r3, r3, #1
 8002cae:	4413      	add	r3, r2
 8002cb0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002cb4:	461a      	mov	r2, r3
					- (int32_t)iOffset[k]) * fscaling;
 8002cb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cb8:	005b      	lsls	r3, r3, #1
 8002cba:	3338      	adds	r3, #56	@ 0x38
 8002cbc:	443b      	add	r3, r7
 8002cbe:	f933 3c2c 	ldrsh.w	r3, [r3, #-44]
 8002cc2:	1ad3      	subs	r3, r2, r3
				MagCal->vecA[k + 6] = (float)((int32_t)MagCal->BpFast[k][j]
 8002cc4:	ee07 3a90 	vmov	s15, r3
 8002cc8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002ccc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cce:	3306      	adds	r3, #6
					- (int32_t)iOffset[k]) * fscaling;
 8002cd0:	edd7 7a06 	vldr	s15, [r7, #24]
 8002cd4:	ee67 7a27 	vmul.f32	s15, s14, s15
				MagCal->vecA[k + 6] = (float)((int32_t)MagCal->BpFast[k][j]
 8002cd8:	687a      	ldr	r2, [r7, #4]
 8002cda:	33f8      	adds	r3, #248	@ 0xf8
 8002cdc:	009b      	lsls	r3, r3, #2
 8002cde:	4413      	add	r3, r2
 8002ce0:	edc3 7a00 	vstr	s15, [r3]
			for (k = X; k <= Z; k++) {
 8002ce4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ce6:	3301      	adds	r3, #1
 8002ce8:	627b      	str	r3, [r7, #36]	@ 0x24
 8002cea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cec:	2b02      	cmp	r3, #2
 8002cee:	ddd3      	ble.n	8002c98 <fUpdateCalibration10EIG+0xc4>
			}

			// compute measurement vector elements vecA[0-5] from vecA[6-8]
			MagCal->vecA[0] = MagCal->vecA[6] * MagCal->vecA[6];
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	ed93 7afe 	vldr	s14, [r3, #1016]	@ 0x3f8
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	edd3 7afe 	vldr	s15, [r3, #1016]	@ 0x3f8
 8002cfc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	edc3 7af8 	vstr	s15, [r3, #992]	@ 0x3e0
			MagCal->vecA[1] = 2.0F * MagCal->vecA[6] * MagCal->vecA[7];
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	edd3 7afe 	vldr	s15, [r3, #1016]	@ 0x3f8
 8002d0c:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	edd3 7aff 	vldr	s15, [r3, #1020]	@ 0x3fc
 8002d16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	edc3 7af9 	vstr	s15, [r3, #996]	@ 0x3e4
			MagCal->vecA[2] = 2.0F * MagCal->vecA[6] * MagCal->vecA[8];
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	edd3 7afe 	vldr	s15, [r3, #1016]	@ 0x3f8
 8002d26:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002d30:	edd3 7a00 	vldr	s15, [r3]
 8002d34:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	edc3 7afa 	vstr	s15, [r3, #1000]	@ 0x3e8
			MagCal->vecA[3] = MagCal->vecA[7] * MagCal->vecA[7];
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	ed93 7aff 	vldr	s14, [r3, #1020]	@ 0x3fc
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	edd3 7aff 	vldr	s15, [r3, #1020]	@ 0x3fc
 8002d4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	edc3 7afb 	vstr	s15, [r3, #1004]	@ 0x3ec
			MagCal->vecA[4] = 2.0F * MagCal->vecA[7] * MagCal->vecA[8];
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	edd3 7aff 	vldr	s15, [r3, #1020]	@ 0x3fc
 8002d5a:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002d64:	edd3 7a00 	vldr	s15, [r3]
 8002d68:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	edc3 7afc 	vstr	s15, [r3, #1008]	@ 0x3f0
			MagCal->vecA[5] = MagCal->vecA[8] * MagCal->vecA[8];
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002d78:	ed93 7a00 	vldr	s14, [r3]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002d82:	edd3 7a00 	vldr	s15, [r3]
 8002d86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	edc3 7afd 	vstr	s15, [r3, #1012]	@ 0x3f4

			// accumulate the on-and above-diagonal terms of matA=Sigma{vecA^T * vecA}
			// with the exception of matA[9][9] which equals the number of measurements
			// update the right hand column [9] of matA[0-8][9] ignoring matA[9][9]
			for (m = 0; m < 9; m++) {
 8002d90:	2300      	movs	r3, #0
 8002d92:	623b      	str	r3, [r7, #32]
 8002d94:	e01f      	b.n	8002dd6 <fUpdateCalibration10EIG+0x202>
				MagCal->matA[m][9] += MagCal->vecA[m];
 8002d96:	6879      	ldr	r1, [r7, #4]
 8002d98:	6a3a      	ldr	r2, [r7, #32]
 8002d9a:	4613      	mov	r3, r2
 8002d9c:	009b      	lsls	r3, r3, #2
 8002d9e:	4413      	add	r3, r2
 8002da0:	00db      	lsls	r3, r3, #3
 8002da2:	440b      	add	r3, r1
 8002da4:	33e4      	adds	r3, #228	@ 0xe4
 8002da6:	ed93 7a00 	vldr	s14, [r3]
 8002daa:	687a      	ldr	r2, [r7, #4]
 8002dac:	6a3b      	ldr	r3, [r7, #32]
 8002dae:	33f8      	adds	r3, #248	@ 0xf8
 8002db0:	009b      	lsls	r3, r3, #2
 8002db2:	4413      	add	r3, r2
 8002db4:	edd3 7a00 	vldr	s15, [r3]
 8002db8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002dbc:	6879      	ldr	r1, [r7, #4]
 8002dbe:	6a3a      	ldr	r2, [r7, #32]
 8002dc0:	4613      	mov	r3, r2
 8002dc2:	009b      	lsls	r3, r3, #2
 8002dc4:	4413      	add	r3, r2
 8002dc6:	00db      	lsls	r3, r3, #3
 8002dc8:	440b      	add	r3, r1
 8002dca:	33e4      	adds	r3, #228	@ 0xe4
 8002dcc:	edc3 7a00 	vstr	s15, [r3]
			for (m = 0; m < 9; m++) {
 8002dd0:	6a3b      	ldr	r3, [r7, #32]
 8002dd2:	3301      	adds	r3, #1
 8002dd4:	623b      	str	r3, [r7, #32]
 8002dd6:	6a3b      	ldr	r3, [r7, #32]
 8002dd8:	2b08      	cmp	r3, #8
 8002dda:	dddc      	ble.n	8002d96 <fUpdateCalibration10EIG+0x1c2>
			}
			// update the on and above diagonal terms of matA ignoring right hand column 9
			for (m = 0; m < 9; m++) {
 8002ddc:	2300      	movs	r3, #0
 8002dde:	623b      	str	r3, [r7, #32]
 8002de0:	e037      	b.n	8002e52 <fUpdateCalibration10EIG+0x27e>
				for (n = m; n < 9; n++) {
 8002de2:	6a3b      	ldr	r3, [r7, #32]
 8002de4:	61fb      	str	r3, [r7, #28]
 8002de6:	e02e      	b.n	8002e46 <fUpdateCalibration10EIG+0x272>
					MagCal->matA[m][n] += MagCal->vecA[m] * MagCal->vecA[n];
 8002de8:	6879      	ldr	r1, [r7, #4]
 8002dea:	6a3a      	ldr	r2, [r7, #32]
 8002dec:	4613      	mov	r3, r2
 8002dee:	009b      	lsls	r3, r3, #2
 8002df0:	4413      	add	r3, r2
 8002df2:	005b      	lsls	r3, r3, #1
 8002df4:	69fa      	ldr	r2, [r7, #28]
 8002df6:	4413      	add	r3, r2
 8002df8:	3330      	adds	r3, #48	@ 0x30
 8002dfa:	009b      	lsls	r3, r3, #2
 8002dfc:	440b      	add	r3, r1
 8002dfe:	ed93 7a00 	vldr	s14, [r3]
 8002e02:	687a      	ldr	r2, [r7, #4]
 8002e04:	6a3b      	ldr	r3, [r7, #32]
 8002e06:	33f8      	adds	r3, #248	@ 0xf8
 8002e08:	009b      	lsls	r3, r3, #2
 8002e0a:	4413      	add	r3, r2
 8002e0c:	edd3 6a00 	vldr	s13, [r3]
 8002e10:	687a      	ldr	r2, [r7, #4]
 8002e12:	69fb      	ldr	r3, [r7, #28]
 8002e14:	33f8      	adds	r3, #248	@ 0xf8
 8002e16:	009b      	lsls	r3, r3, #2
 8002e18:	4413      	add	r3, r2
 8002e1a:	edd3 7a00 	vldr	s15, [r3]
 8002e1e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e22:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e26:	6879      	ldr	r1, [r7, #4]
 8002e28:	6a3a      	ldr	r2, [r7, #32]
 8002e2a:	4613      	mov	r3, r2
 8002e2c:	009b      	lsls	r3, r3, #2
 8002e2e:	4413      	add	r3, r2
 8002e30:	005b      	lsls	r3, r3, #1
 8002e32:	69fa      	ldr	r2, [r7, #28]
 8002e34:	4413      	add	r3, r2
 8002e36:	3330      	adds	r3, #48	@ 0x30
 8002e38:	009b      	lsls	r3, r3, #2
 8002e3a:	440b      	add	r3, r1
 8002e3c:	edc3 7a00 	vstr	s15, [r3]
				for (n = m; n < 9; n++) {
 8002e40:	69fb      	ldr	r3, [r7, #28]
 8002e42:	3301      	adds	r3, #1
 8002e44:	61fb      	str	r3, [r7, #28]
 8002e46:	69fb      	ldr	r3, [r7, #28]
 8002e48:	2b08      	cmp	r3, #8
 8002e4a:	ddcd      	ble.n	8002de8 <fUpdateCalibration10EIG+0x214>
			for (m = 0; m < 9; m++) {
 8002e4c:	6a3b      	ldr	r3, [r7, #32]
 8002e4e:	3301      	adds	r3, #1
 8002e50:	623b      	str	r3, [r7, #32]
 8002e52:	6a3b      	ldr	r3, [r7, #32]
 8002e54:	2b08      	cmp	r3, #8
 8002e56:	ddc4      	ble.n	8002de2 <fUpdateCalibration10EIG+0x20e>
				}
			}

			// increment the measurement counter for the next iteration
			iCount++;
 8002e58:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 8002e5c:	b29b      	uxth	r3, r3
 8002e5e:	3301      	adds	r3, #1
 8002e60:	b29b      	uxth	r3, r3
 8002e62:	867b      	strh	r3, [r7, #50]	@ 0x32
	for (j = 0; j < MAGBUFFSIZE; j++) {
 8002e64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e66:	3301      	adds	r3, #1
 8002e68:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002e6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e6c:	f240 2289 	movw	r2, #649	@ 0x289
 8002e70:	4293      	cmp	r3, r2
 8002e72:	f77f aee2 	ble.w	8002c3a <fUpdateCalibration10EIG+0x66>
		}
	}

	// set the last element matA[9][9] to the number of measurements
	MagCal->matA[9][9] = (float) iCount;
 8002e76:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 8002e7a:	ee07 3a90 	vmov	s15, r3
 8002e7e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	edc3 7a93 	vstr	s15, [r3, #588]	@ 0x24c

	// store the number of measurements accumulated
	MagCal->MagBufferCount = iCount;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002e8e:	461a      	mov	r2, r3
 8002e90:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8002e92:	f8a2 35e0 	strh.w	r3, [r2, #1504]	@ 0x5e0

	// copy the above diagonal elements of symmetric product matrix matA to below the diagonal
	for (m = 1; m < 10; m++) {
 8002e96:	2301      	movs	r3, #1
 8002e98:	623b      	str	r3, [r7, #32]
 8002e9a:	e027      	b.n	8002eec <fUpdateCalibration10EIG+0x318>
		for (n = 0; n < m; n++) {
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	61fb      	str	r3, [r7, #28]
 8002ea0:	e01d      	b.n	8002ede <fUpdateCalibration10EIG+0x30a>
 8002ea2:	bf00      	nop
 8002ea4:	3b03126f 	.word	0x3b03126f
			MagCal->matA[m][n] = MagCal->matA[n][m];
 8002ea8:	6879      	ldr	r1, [r7, #4]
 8002eaa:	69fa      	ldr	r2, [r7, #28]
 8002eac:	4613      	mov	r3, r2
 8002eae:	009b      	lsls	r3, r3, #2
 8002eb0:	4413      	add	r3, r2
 8002eb2:	005b      	lsls	r3, r3, #1
 8002eb4:	6a3a      	ldr	r2, [r7, #32]
 8002eb6:	4413      	add	r3, r2
 8002eb8:	3330      	adds	r3, #48	@ 0x30
 8002eba:	009b      	lsls	r3, r3, #2
 8002ebc:	440b      	add	r3, r1
 8002ebe:	6819      	ldr	r1, [r3, #0]
 8002ec0:	6878      	ldr	r0, [r7, #4]
 8002ec2:	6a3a      	ldr	r2, [r7, #32]
 8002ec4:	4613      	mov	r3, r2
 8002ec6:	009b      	lsls	r3, r3, #2
 8002ec8:	4413      	add	r3, r2
 8002eca:	005b      	lsls	r3, r3, #1
 8002ecc:	69fa      	ldr	r2, [r7, #28]
 8002ece:	4413      	add	r3, r2
 8002ed0:	3330      	adds	r3, #48	@ 0x30
 8002ed2:	009b      	lsls	r3, r3, #2
 8002ed4:	4403      	add	r3, r0
 8002ed6:	6019      	str	r1, [r3, #0]
		for (n = 0; n < m; n++) {
 8002ed8:	69fb      	ldr	r3, [r7, #28]
 8002eda:	3301      	adds	r3, #1
 8002edc:	61fb      	str	r3, [r7, #28]
 8002ede:	69fa      	ldr	r2, [r7, #28]
 8002ee0:	6a3b      	ldr	r3, [r7, #32]
 8002ee2:	429a      	cmp	r2, r3
 8002ee4:	dbe0      	blt.n	8002ea8 <fUpdateCalibration10EIG+0x2d4>
	for (m = 1; m < 10; m++) {
 8002ee6:	6a3b      	ldr	r3, [r7, #32]
 8002ee8:	3301      	adds	r3, #1
 8002eea:	623b      	str	r3, [r7, #32]
 8002eec:	6a3b      	ldr	r3, [r7, #32]
 8002eee:	2b09      	cmp	r3, #9
 8002ef0:	ddd4      	ble.n	8002e9c <fUpdateCalibration10EIG+0x2c8>
		}
	}

	// set MagCal->vecA to the unsorted eigenvalues and matB to the unsorted
	// normalized eigenvectors of matA
	eigencompute(MagCal->matA, MagCal->vecA, MagCal->matB, 10);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	f103 00c0 	add.w	r0, r3, #192	@ 0xc0
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	f503 7214 	add.w	r2, r3, #592	@ 0x250
 8002f04:	230a      	movs	r3, #10
 8002f06:	f003 f881 	bl	800600c <eigencompute>

	// set ellipsoid matrix A from elements of the solution vector column j with
	// smallest eigenvalue
	j = 0;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	62bb      	str	r3, [r7, #40]	@ 0x28
	for (i = 1; i < 10; i++) {
 8002f0e:	2301      	movs	r3, #1
 8002f10:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002f12:	e017      	b.n	8002f44 <fUpdateCalibration10EIG+0x370>
		if (MagCal->vecA[i] < MagCal->vecA[j]) {
 8002f14:	687a      	ldr	r2, [r7, #4]
 8002f16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f18:	33f8      	adds	r3, #248	@ 0xf8
 8002f1a:	009b      	lsls	r3, r3, #2
 8002f1c:	4413      	add	r3, r2
 8002f1e:	ed93 7a00 	vldr	s14, [r3]
 8002f22:	687a      	ldr	r2, [r7, #4]
 8002f24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f26:	33f8      	adds	r3, #248	@ 0xf8
 8002f28:	009b      	lsls	r3, r3, #2
 8002f2a:	4413      	add	r3, r2
 8002f2c:	edd3 7a00 	vldr	s15, [r3]
 8002f30:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002f34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f38:	d501      	bpl.n	8002f3e <fUpdateCalibration10EIG+0x36a>
			j = i;
 8002f3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f3c:	62bb      	str	r3, [r7, #40]	@ 0x28
	for (i = 1; i < 10; i++) {
 8002f3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f40:	3301      	adds	r3, #1
 8002f42:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002f44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f46:	2b09      	cmp	r3, #9
 8002f48:	dde4      	ble.n	8002f14 <fUpdateCalibration10EIG+0x340>
		}
	}
	MagCal->A[0][0] = MagCal->matB[0][j];
 8002f4a:	687a      	ldr	r2, [r7, #4]
 8002f4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f4e:	3394      	adds	r3, #148	@ 0x94
 8002f50:	009b      	lsls	r3, r3, #2
 8002f52:	4413      	add	r3, r2
 8002f54:	681a      	ldr	r2, [r3, #0]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	679a      	str	r2, [r3, #120]	@ 0x78
	MagCal->A[0][1] = MagCal->A[1][0] = MagCal->matB[1][j];
 8002f5a:	687a      	ldr	r2, [r7, #4]
 8002f5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f5e:	339e      	adds	r3, #158	@ 0x9e
 8002f60:	009b      	lsls	r3, r3, #2
 8002f62:	4413      	add	r3, r2
 8002f64:	681a      	ldr	r2, [r3, #0]
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	67da      	str	r2, [r3, #124]	@ 0x7c
	MagCal->A[0][2] = MagCal->A[2][0] = MagCal->matB[2][j];
 8002f76:	687a      	ldr	r2, [r7, #4]
 8002f78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f7a:	33a8      	adds	r3, #168	@ 0xa8
 8002f7c:	009b      	lsls	r3, r3, #2
 8002f7e:	4413      	add	r3, r2
 8002f80:	681a      	ldr	r2, [r3, #0]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
	MagCal->A[1][1] = MagCal->matB[3][j];
 8002f94:	687a      	ldr	r2, [r7, #4]
 8002f96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f98:	33b2      	adds	r3, #178	@ 0xb2
 8002f9a:	009b      	lsls	r3, r3, #2
 8002f9c:	4413      	add	r3, r2
 8002f9e:	681a      	ldr	r2, [r3, #0]
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
	MagCal->A[1][2] = MagCal->A[2][1] = MagCal->matB[4][j];
 8002fa6:	687a      	ldr	r2, [r7, #4]
 8002fa8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002faa:	33bc      	adds	r3, #188	@ 0xbc
 8002fac:	009b      	lsls	r3, r3, #2
 8002fae:	4413      	add	r3, r2
 8002fb0:	681a      	ldr	r2, [r3, #0]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
	MagCal->A[2][2] = MagCal->matB[5][j];
 8002fc4:	687a      	ldr	r2, [r7, #4]
 8002fc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fc8:	33c6      	adds	r3, #198	@ 0xc6
 8002fca:	009b      	lsls	r3, r3, #2
 8002fcc:	4413      	add	r3, r2
 8002fce:	681a      	ldr	r2, [r3, #0]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98

	// negate entire solution if A has negative determinant
	det = f3x3matrixDetA(MagCal->A);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	3378      	adds	r3, #120	@ 0x78
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f002 ffb6 	bl	8005f4c <f3x3matrixDetA>
 8002fe0:	ed87 0a0d 	vstr	s0, [r7, #52]	@ 0x34
	if (det < 0.0F) {
 8002fe4:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8002fe8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002fec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ff0:	d54a      	bpl.n	8003088 <fUpdateCalibration10EIG+0x4b4>
		f3x3matrixAeqMinusA(MagCal->A);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	3378      	adds	r3, #120	@ 0x78
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	f002 fe78 	bl	8005cec <f3x3matrixAeqMinusA>
		MagCal->matB[6][j] = -MagCal->matB[6][j];
 8002ffc:	687a      	ldr	r2, [r7, #4]
 8002ffe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003000:	33d0      	adds	r3, #208	@ 0xd0
 8003002:	009b      	lsls	r3, r3, #2
 8003004:	4413      	add	r3, r2
 8003006:	edd3 7a00 	vldr	s15, [r3]
 800300a:	eef1 7a67 	vneg.f32	s15, s15
 800300e:	687a      	ldr	r2, [r7, #4]
 8003010:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003012:	33d0      	adds	r3, #208	@ 0xd0
 8003014:	009b      	lsls	r3, r3, #2
 8003016:	4413      	add	r3, r2
 8003018:	edc3 7a00 	vstr	s15, [r3]
		MagCal->matB[7][j] = -MagCal->matB[7][j];
 800301c:	687a      	ldr	r2, [r7, #4]
 800301e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003020:	33da      	adds	r3, #218	@ 0xda
 8003022:	009b      	lsls	r3, r3, #2
 8003024:	4413      	add	r3, r2
 8003026:	edd3 7a00 	vldr	s15, [r3]
 800302a:	eef1 7a67 	vneg.f32	s15, s15
 800302e:	687a      	ldr	r2, [r7, #4]
 8003030:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003032:	33da      	adds	r3, #218	@ 0xda
 8003034:	009b      	lsls	r3, r3, #2
 8003036:	4413      	add	r3, r2
 8003038:	edc3 7a00 	vstr	s15, [r3]
		MagCal->matB[8][j] = -MagCal->matB[8][j];
 800303c:	687a      	ldr	r2, [r7, #4]
 800303e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003040:	33e4      	adds	r3, #228	@ 0xe4
 8003042:	009b      	lsls	r3, r3, #2
 8003044:	4413      	add	r3, r2
 8003046:	edd3 7a00 	vldr	s15, [r3]
 800304a:	eef1 7a67 	vneg.f32	s15, s15
 800304e:	687a      	ldr	r2, [r7, #4]
 8003050:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003052:	33e4      	adds	r3, #228	@ 0xe4
 8003054:	009b      	lsls	r3, r3, #2
 8003056:	4413      	add	r3, r2
 8003058:	edc3 7a00 	vstr	s15, [r3]
		MagCal->matB[9][j] = -MagCal->matB[9][j];
 800305c:	687a      	ldr	r2, [r7, #4]
 800305e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003060:	33ee      	adds	r3, #238	@ 0xee
 8003062:	009b      	lsls	r3, r3, #2
 8003064:	4413      	add	r3, r2
 8003066:	edd3 7a00 	vldr	s15, [r3]
 800306a:	eef1 7a67 	vneg.f32	s15, s15
 800306e:	687a      	ldr	r2, [r7, #4]
 8003070:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003072:	33ee      	adds	r3, #238	@ 0xee
 8003074:	009b      	lsls	r3, r3, #2
 8003076:	4413      	add	r3, r2
 8003078:	edc3 7a00 	vstr	s15, [r3]
		det = -det;
 800307c:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8003080:	eef1 7a67 	vneg.f32	s15, s15
 8003084:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
	}

	// compute the inverse of the ellipsoid matrix
	f3x3matrixAeqInvSymB(MagCal->invA, MagCal->A);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	f103 029c 	add.w	r2, r3, #156	@ 0x9c
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	3378      	adds	r3, #120	@ 0x78
 8003092:	4619      	mov	r1, r3
 8003094:	4610      	mov	r0, r2
 8003096:	f002 fe63 	bl	8005d60 <f3x3matrixAeqInvSymB>

	// compute the trial hard iron vector in offset bit counts times FMATRIXSCALING
	for (k = X; k <= Z; k++) {
 800309a:	2300      	movs	r3, #0
 800309c:	627b      	str	r3, [r7, #36]	@ 0x24
 800309e:	e052      	b.n	8003146 <fUpdateCalibration10EIG+0x572>
		MagCal->trV[k] = 0.0F;
 80030a0:	687a      	ldr	r2, [r7, #4]
 80030a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030a4:	3310      	adds	r3, #16
 80030a6:	009b      	lsls	r3, r3, #2
 80030a8:	4413      	add	r3, r2
 80030aa:	f04f 0200 	mov.w	r2, #0
 80030ae:	601a      	str	r2, [r3, #0]
		for (m = X; m <= Z; m++) {
 80030b0:	2300      	movs	r3, #0
 80030b2:	623b      	str	r3, [r7, #32]
 80030b4:	e02f      	b.n	8003116 <fUpdateCalibration10EIG+0x542>
			MagCal->trV[k] += MagCal->invA[k][m] * MagCal->matB[m + 6][j];
 80030b6:	687a      	ldr	r2, [r7, #4]
 80030b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030ba:	3310      	adds	r3, #16
 80030bc:	009b      	lsls	r3, r3, #2
 80030be:	4413      	add	r3, r2
 80030c0:	ed93 7a00 	vldr	s14, [r3]
 80030c4:	6879      	ldr	r1, [r7, #4]
 80030c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80030c8:	4613      	mov	r3, r2
 80030ca:	005b      	lsls	r3, r3, #1
 80030cc:	4413      	add	r3, r2
 80030ce:	6a3a      	ldr	r2, [r7, #32]
 80030d0:	4413      	add	r3, r2
 80030d2:	3326      	adds	r3, #38	@ 0x26
 80030d4:	009b      	lsls	r3, r3, #2
 80030d6:	440b      	add	r3, r1
 80030d8:	3304      	adds	r3, #4
 80030da:	edd3 6a00 	vldr	s13, [r3]
 80030de:	6a3b      	ldr	r3, [r7, #32]
 80030e0:	1d9a      	adds	r2, r3, #6
 80030e2:	6879      	ldr	r1, [r7, #4]
 80030e4:	4613      	mov	r3, r2
 80030e6:	009b      	lsls	r3, r3, #2
 80030e8:	4413      	add	r3, r2
 80030ea:	005b      	lsls	r3, r3, #1
 80030ec:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80030ee:	4413      	add	r3, r2
 80030f0:	3394      	adds	r3, #148	@ 0x94
 80030f2:	009b      	lsls	r3, r3, #2
 80030f4:	440b      	add	r3, r1
 80030f6:	edd3 7a00 	vldr	s15, [r3]
 80030fa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80030fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003102:	687a      	ldr	r2, [r7, #4]
 8003104:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003106:	3310      	adds	r3, #16
 8003108:	009b      	lsls	r3, r3, #2
 800310a:	4413      	add	r3, r2
 800310c:	edc3 7a00 	vstr	s15, [r3]
		for (m = X; m <= Z; m++) {
 8003110:	6a3b      	ldr	r3, [r7, #32]
 8003112:	3301      	adds	r3, #1
 8003114:	623b      	str	r3, [r7, #32]
 8003116:	6a3b      	ldr	r3, [r7, #32]
 8003118:	2b02      	cmp	r3, #2
 800311a:	ddcc      	ble.n	80030b6 <fUpdateCalibration10EIG+0x4e2>
		}
		MagCal->trV[k] *= -0.5F;
 800311c:	687a      	ldr	r2, [r7, #4]
 800311e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003120:	3310      	adds	r3, #16
 8003122:	009b      	lsls	r3, r3, #2
 8003124:	4413      	add	r3, r2
 8003126:	edd3 7a00 	vldr	s15, [r3]
 800312a:	eebe 7a00 	vmov.f32	s14, #224	@ 0xbf000000 -0.5
 800312e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003132:	687a      	ldr	r2, [r7, #4]
 8003134:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003136:	3310      	adds	r3, #16
 8003138:	009b      	lsls	r3, r3, #2
 800313a:	4413      	add	r3, r2
 800313c:	edc3 7a00 	vstr	s15, [r3]
	for (k = X; k <= Z; k++) {
 8003140:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003142:	3301      	adds	r3, #1
 8003144:	627b      	str	r3, [r7, #36]	@ 0x24
 8003146:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003148:	2b02      	cmp	r3, #2
 800314a:	dda9      	ble.n	80030a0 <fUpdateCalibration10EIG+0x4cc>
	}

	// compute the trial geomagnetic field strength B in bit counts times FMATRIXSCALING
	MagCal->trB = sqrtf(fabs(MagCal->A[0][0] * MagCal->trV[X] * MagCal->trV[X] +
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	ed93 7a1e 	vldr	s14, [r3, #120]	@ 0x78
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8003158:	ee27 7a27 	vmul.f32	s14, s14, s15
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8003162:	ee27 7a27 	vmul.f32	s14, s14, s15
			2.0F * MagCal->A[0][1] * MagCal->trV[X] * MagCal->trV[Y] +
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	edd3 7a1f 	vldr	s15, [r3, #124]	@ 0x7c
 800316c:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8003176:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 8003180:	ee66 7aa7 	vmul.f32	s15, s13, s15
	MagCal->trB = sqrtf(fabs(MagCal->A[0][0] * MagCal->trV[X] * MagCal->trV[X] +
 8003184:	ee37 7a27 	vadd.f32	s14, s14, s15
			2.0F * MagCal->A[0][2] * MagCal->trV[X] * MagCal->trV[Z] +
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	edd3 7a20 	vldr	s15, [r3, #128]	@ 0x80
 800318e:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8003198:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 80031a2:	ee66 7aa7 	vmul.f32	s15, s13, s15
			2.0F * MagCal->A[0][1] * MagCal->trV[X] * MagCal->trV[Y] +
 80031a6:	ee37 7a27 	vadd.f32	s14, s14, s15
			MagCal->A[1][1] * MagCal->trV[Y] * MagCal->trV[Y] +
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	edd3 6a22 	vldr	s13, [r3, #136]	@ 0x88
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 80031b6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 80031c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
			2.0F * MagCal->A[0][2] * MagCal->trV[X] * MagCal->trV[Z] +
 80031c4:	ee37 7a27 	vadd.f32	s14, s14, s15
			2.0F * MagCal->A[1][2] * MagCal->trV[Y] * MagCal->trV[Z] +
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	edd3 7a23 	vldr	s15, [r3, #140]	@ 0x8c
 80031ce:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 80031d8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 80031e2:	ee66 7aa7 	vmul.f32	s15, s13, s15
			MagCal->A[1][1] * MagCal->trV[Y] * MagCal->trV[Y] +
 80031e6:	ee37 7a27 	vadd.f32	s14, s14, s15
			MagCal->A[2][2] * MagCal->trV[Z] * MagCal->trV[Z] - MagCal->matB[9][j]));
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	edd3 6a26 	vldr	s13, [r3, #152]	@ 0x98
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 80031f6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 8003200:	ee66 7aa7 	vmul.f32	s15, s13, s15
			2.0F * MagCal->A[1][2] * MagCal->trV[Y] * MagCal->trV[Z] +
 8003204:	ee37 7a27 	vadd.f32	s14, s14, s15
			MagCal->A[2][2] * MagCal->trV[Z] * MagCal->trV[Z] - MagCal->matB[9][j]));
 8003208:	687a      	ldr	r2, [r7, #4]
 800320a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800320c:	33ee      	adds	r3, #238	@ 0xee
 800320e:	009b      	lsls	r3, r3, #2
 8003210:	4413      	add	r3, r2
 8003212:	edd3 7a00 	vldr	s15, [r3]
 8003216:	ee77 7a67 	vsub.f32	s15, s14, s15
	MagCal->trB = sqrtf(fabs(MagCal->A[0][0] * MagCal->trV[X] * MagCal->trV[X] +
 800321a:	eef0 7ae7 	vabs.f32	s15, s15
 800321e:	eeb0 0a67 	vmov.f32	s0, s15
 8003222:	f00d ff19 	bl	8011058 <sqrtf>
 8003226:	eef0 7a40 	vmov.f32	s15, s0
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	edc3 7a1c 	vstr	s15, [r3, #112]	@ 0x70

	// calculate the trial normalized fit error as a percentage
	MagCal->trFitErrorpc = 50.0F * sqrtf(
		fabs(MagCal->vecA[j]) / (float) MagCal->MagBufferCount) /
 8003230:	687a      	ldr	r2, [r7, #4]
 8003232:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003234:	33f8      	adds	r3, #248	@ 0xf8
 8003236:	009b      	lsls	r3, r3, #2
 8003238:	4413      	add	r3, r2
 800323a:	edd3 7a00 	vldr	s15, [r3]
 800323e:	eeb0 7ae7 	vabs.f32	s14, s15
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003248:	f9b3 35e0 	ldrsh.w	r3, [r3, #1504]	@ 0x5e0
 800324c:	ee07 3a90 	vmov	s15, r3
 8003250:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	MagCal->trFitErrorpc = 50.0F * sqrtf(
 8003254:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003258:	eeb0 0a66 	vmov.f32	s0, s13
 800325c:	f00d fefc 	bl	8011058 <sqrtf>
 8003260:	eef0 7a40 	vmov.f32	s15, s0
 8003264:	ed9f 7aae 	vldr	s14, [pc, #696]	@ 8003520 <fUpdateCalibration10EIG+0x94c>
 8003268:	ee67 6a87 	vmul.f32	s13, s15, s14
		(MagCal->trB * MagCal->trB);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	ed93 7a1c 	vldr	s14, [r3, #112]	@ 0x70
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	edd3 7a1c 	vldr	s15, [r3, #112]	@ 0x70
 8003278:	ee27 7a27 	vmul.f32	s14, s14, s15
		fabs(MagCal->vecA[j]) / (float) MagCal->MagBufferCount) /
 800327c:	eec6 7a87 	vdiv.f32	s15, s13, s14
	MagCal->trFitErrorpc = 50.0F * sqrtf(
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	edc3 7a1d 	vstr	s15, [r3, #116]	@ 0x74

	// correct for the measurement matrix offset and scaling and
	// get the computed hard iron offset in uT
	for (k = X; k <= Z; k++) {
 8003286:	2300      	movs	r3, #0
 8003288:	627b      	str	r3, [r7, #36]	@ 0x24
 800328a:	e024      	b.n	80032d6 <fUpdateCalibration10EIG+0x702>
		MagCal->trV[k] = MagCal->trV[k] * DEFAULTB + (float)iOffset[k] * FXOS8700_UTPERCOUNT;
 800328c:	687a      	ldr	r2, [r7, #4]
 800328e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003290:	3310      	adds	r3, #16
 8003292:	009b      	lsls	r3, r3, #2
 8003294:	4413      	add	r3, r2
 8003296:	edd3 7a00 	vldr	s15, [r3]
 800329a:	ed9f 7aa1 	vldr	s14, [pc, #644]	@ 8003520 <fUpdateCalibration10EIG+0x94c>
 800329e:	ee27 7a87 	vmul.f32	s14, s15, s14
 80032a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032a4:	005b      	lsls	r3, r3, #1
 80032a6:	3338      	adds	r3, #56	@ 0x38
 80032a8:	443b      	add	r3, r7
 80032aa:	f933 3c2c 	ldrsh.w	r3, [r3, #-44]
 80032ae:	ee07 3a90 	vmov	s15, r3
 80032b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80032b6:	eddf 6a9b 	vldr	s13, [pc, #620]	@ 8003524 <fUpdateCalibration10EIG+0x950>
 80032ba:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80032be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032c2:	687a      	ldr	r2, [r7, #4]
 80032c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032c6:	3310      	adds	r3, #16
 80032c8:	009b      	lsls	r3, r3, #2
 80032ca:	4413      	add	r3, r2
 80032cc:	edc3 7a00 	vstr	s15, [r3]
	for (k = X; k <= Z; k++) {
 80032d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032d2:	3301      	adds	r3, #1
 80032d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80032d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032d8:	2b02      	cmp	r3, #2
 80032da:	ddd7      	ble.n	800328c <fUpdateCalibration10EIG+0x6b8>
	}

	// convert the trial geomagnetic field strength B into uT for
	// un-normalized soft iron matrix A
	MagCal->trB *= DEFAULTB;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	edd3 7a1c 	vldr	s15, [r3, #112]	@ 0x70
 80032e2:	ed9f 7a8f 	vldr	s14, [pc, #572]	@ 8003520 <fUpdateCalibration10EIG+0x94c>
 80032e6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	edc3 7a1c 	vstr	s15, [r3, #112]	@ 0x70

	// normalize the ellipsoid matrix A to unit determinant and
	// correct B by root of this multiplicative factor
	f3x3matrixAeqAxScalar(MagCal->A, powf(det, -(ONETHIRD)));
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	f103 0478 	add.w	r4, r3, #120	@ 0x78
 80032f6:	eddf 0a8c 	vldr	s1, [pc, #560]	@ 8003528 <fUpdateCalibration10EIG+0x954>
 80032fa:	ed97 0a0d 	vldr	s0, [r7, #52]	@ 0x34
 80032fe:	f00d fe53 	bl	8010fa8 <powf>
 8003302:	eef0 7a40 	vmov.f32	s15, s0
 8003306:	eeb0 0a67 	vmov.f32	s0, s15
 800330a:	4620      	mov	r0, r4
 800330c:	f002 fcb2 	bl	8005c74 <f3x3matrixAeqAxScalar>
	MagCal->trB *= powf(det, -(ONESIXTH));
 8003310:	eddf 0a86 	vldr	s1, [pc, #536]	@ 800352c <fUpdateCalibration10EIG+0x958>
 8003314:	ed97 0a0d 	vldr	s0, [r7, #52]	@ 0x34
 8003318:	f00d fe46 	bl	8010fa8 <powf>
 800331c:	eeb0 7a40 	vmov.f32	s14, s0
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	edd3 7a1c 	vldr	s15, [r3, #112]	@ 0x70
 8003326:	ee67 7a27 	vmul.f32	s15, s14, s15
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	edc3 7a1c 	vstr	s15, [r3, #112]	@ 0x70

	// compute trial invW from the square root of fA (both with normalized determinant)
	// set vecA to the unsorted eigenvalues and matB to the unsorted eigenvectors of matA
	// where matA holds the 3x3 matrix fA in its top left elements
	for (i = 0; i < 3; i++) {
 8003330:	2300      	movs	r3, #0
 8003332:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003334:	e022      	b.n	800337c <fUpdateCalibration10EIG+0x7a8>
		for (j = 0; j < 3; j++) {
 8003336:	2300      	movs	r3, #0
 8003338:	62bb      	str	r3, [r7, #40]	@ 0x28
 800333a:	e019      	b.n	8003370 <fUpdateCalibration10EIG+0x79c>
			MagCal->matA[i][j] = MagCal->A[i][j];
 800333c:	6879      	ldr	r1, [r7, #4]
 800333e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003340:	4613      	mov	r3, r2
 8003342:	005b      	lsls	r3, r3, #1
 8003344:	4413      	add	r3, r2
 8003346:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003348:	4413      	add	r3, r2
 800334a:	331e      	adds	r3, #30
 800334c:	009b      	lsls	r3, r3, #2
 800334e:	440b      	add	r3, r1
 8003350:	6819      	ldr	r1, [r3, #0]
 8003352:	6878      	ldr	r0, [r7, #4]
 8003354:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003356:	4613      	mov	r3, r2
 8003358:	009b      	lsls	r3, r3, #2
 800335a:	4413      	add	r3, r2
 800335c:	005b      	lsls	r3, r3, #1
 800335e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003360:	4413      	add	r3, r2
 8003362:	3330      	adds	r3, #48	@ 0x30
 8003364:	009b      	lsls	r3, r3, #2
 8003366:	4403      	add	r3, r0
 8003368:	6019      	str	r1, [r3, #0]
		for (j = 0; j < 3; j++) {
 800336a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800336c:	3301      	adds	r3, #1
 800336e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003370:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003372:	2b02      	cmp	r3, #2
 8003374:	dde2      	ble.n	800333c <fUpdateCalibration10EIG+0x768>
	for (i = 0; i < 3; i++) {
 8003376:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003378:	3301      	adds	r3, #1
 800337a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800337c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800337e:	2b02      	cmp	r3, #2
 8003380:	ddd9      	ble.n	8003336 <fUpdateCalibration10EIG+0x762>
		}
	}
	eigencompute(MagCal->matA, MagCal->vecA, MagCal->matB, 3);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	f103 00c0 	add.w	r0, r3, #192	@ 0xc0
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	f503 7214 	add.w	r2, r3, #592	@ 0x250
 8003394:	2303      	movs	r3, #3
 8003396:	f002 fe39 	bl	800600c <eigencompute>

	// set MagCal->matB to be eigenvectors . diag(sqrt(sqrt(eigenvalues))) =
	//   matB . diag(sqrt(sqrt(vecA))
	for (j = 0; j < 3; j++) { // loop over columns j
 800339a:	2300      	movs	r3, #0
 800339c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800339e:	e03e      	b.n	800341e <fUpdateCalibration10EIG+0x84a>
		ftmp = sqrtf(sqrtf(fabs(MagCal->vecA[j])));
 80033a0:	687a      	ldr	r2, [r7, #4]
 80033a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033a4:	33f8      	adds	r3, #248	@ 0xf8
 80033a6:	009b      	lsls	r3, r3, #2
 80033a8:	4413      	add	r3, r2
 80033aa:	edd3 7a00 	vldr	s15, [r3]
 80033ae:	eef0 7ae7 	vabs.f32	s15, s15
 80033b2:	eeb0 0a67 	vmov.f32	s0, s15
 80033b6:	f00d fe4f 	bl	8011058 <sqrtf>
 80033ba:	eef0 7a40 	vmov.f32	s15, s0
 80033be:	eeb0 0a67 	vmov.f32	s0, s15
 80033c2:	f00d fe49 	bl	8011058 <sqrtf>
 80033c6:	ed87 0a05 	vstr	s0, [r7, #20]
		for (i = 0; i < 3; i++) { // loop over rows i
 80033ca:	2300      	movs	r3, #0
 80033cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80033ce:	e020      	b.n	8003412 <fUpdateCalibration10EIG+0x83e>
			MagCal->matB[i][j] *= ftmp;
 80033d0:	6879      	ldr	r1, [r7, #4]
 80033d2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80033d4:	4613      	mov	r3, r2
 80033d6:	009b      	lsls	r3, r3, #2
 80033d8:	4413      	add	r3, r2
 80033da:	005b      	lsls	r3, r3, #1
 80033dc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80033de:	4413      	add	r3, r2
 80033e0:	3394      	adds	r3, #148	@ 0x94
 80033e2:	009b      	lsls	r3, r3, #2
 80033e4:	440b      	add	r3, r1
 80033e6:	ed93 7a00 	vldr	s14, [r3]
 80033ea:	edd7 7a05 	vldr	s15, [r7, #20]
 80033ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033f2:	6879      	ldr	r1, [r7, #4]
 80033f4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80033f6:	4613      	mov	r3, r2
 80033f8:	009b      	lsls	r3, r3, #2
 80033fa:	4413      	add	r3, r2
 80033fc:	005b      	lsls	r3, r3, #1
 80033fe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003400:	4413      	add	r3, r2
 8003402:	3394      	adds	r3, #148	@ 0x94
 8003404:	009b      	lsls	r3, r3, #2
 8003406:	440b      	add	r3, r1
 8003408:	edc3 7a00 	vstr	s15, [r3]
		for (i = 0; i < 3; i++) { // loop over rows i
 800340c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800340e:	3301      	adds	r3, #1
 8003410:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003412:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003414:	2b02      	cmp	r3, #2
 8003416:	dddb      	ble.n	80033d0 <fUpdateCalibration10EIG+0x7fc>
	for (j = 0; j < 3; j++) { // loop over columns j
 8003418:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800341a:	3301      	adds	r3, #1
 800341c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800341e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003420:	2b02      	cmp	r3, #2
 8003422:	ddbd      	ble.n	80033a0 <fUpdateCalibration10EIG+0x7cc>
	}

	// set trinvW to eigenvectors * diag(sqrt(eigenvalues)) * eigenvectors^T =
	//   matB * matB^T = sqrt(fA) (guaranteed symmetric)
	// loop over rows
	for (i = 0; i < 3; i++) {
 8003424:	2300      	movs	r3, #0
 8003426:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003428:	e072      	b.n	8003510 <fUpdateCalibration10EIG+0x93c>
		// loop over on and above diagonal columns
		for (j = i; j < 3; j++) {
 800342a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800342c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800342e:	e069      	b.n	8003504 <fUpdateCalibration10EIG+0x930>
			MagCal->trinvW[i][j] = 0.0F;
 8003430:	6879      	ldr	r1, [r7, #4]
 8003432:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003434:	4613      	mov	r3, r2
 8003436:	005b      	lsls	r3, r3, #1
 8003438:	4413      	add	r3, r2
 800343a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800343c:	4413      	add	r3, r2
 800343e:	3312      	adds	r3, #18
 8003440:	009b      	lsls	r3, r3, #2
 8003442:	440b      	add	r3, r1
 8003444:	3304      	adds	r3, #4
 8003446:	f04f 0200 	mov.w	r2, #0
 800344a:	601a      	str	r2, [r3, #0]
			// accumulate the matrix product
			for (k = 0; k < 3; k++) {
 800344c:	2300      	movs	r3, #0
 800344e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003450:	e03a      	b.n	80034c8 <fUpdateCalibration10EIG+0x8f4>
				MagCal->trinvW[i][j] += MagCal->matB[i][k] * MagCal->matB[j][k];
 8003452:	6879      	ldr	r1, [r7, #4]
 8003454:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003456:	4613      	mov	r3, r2
 8003458:	005b      	lsls	r3, r3, #1
 800345a:	4413      	add	r3, r2
 800345c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800345e:	4413      	add	r3, r2
 8003460:	3312      	adds	r3, #18
 8003462:	009b      	lsls	r3, r3, #2
 8003464:	440b      	add	r3, r1
 8003466:	3304      	adds	r3, #4
 8003468:	ed93 7a00 	vldr	s14, [r3]
 800346c:	6879      	ldr	r1, [r7, #4]
 800346e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003470:	4613      	mov	r3, r2
 8003472:	009b      	lsls	r3, r3, #2
 8003474:	4413      	add	r3, r2
 8003476:	005b      	lsls	r3, r3, #1
 8003478:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800347a:	4413      	add	r3, r2
 800347c:	3394      	adds	r3, #148	@ 0x94
 800347e:	009b      	lsls	r3, r3, #2
 8003480:	440b      	add	r3, r1
 8003482:	edd3 6a00 	vldr	s13, [r3]
 8003486:	6879      	ldr	r1, [r7, #4]
 8003488:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800348a:	4613      	mov	r3, r2
 800348c:	009b      	lsls	r3, r3, #2
 800348e:	4413      	add	r3, r2
 8003490:	005b      	lsls	r3, r3, #1
 8003492:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003494:	4413      	add	r3, r2
 8003496:	3394      	adds	r3, #148	@ 0x94
 8003498:	009b      	lsls	r3, r3, #2
 800349a:	440b      	add	r3, r1
 800349c:	edd3 7a00 	vldr	s15, [r3]
 80034a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80034a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034a8:	6879      	ldr	r1, [r7, #4]
 80034aa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80034ac:	4613      	mov	r3, r2
 80034ae:	005b      	lsls	r3, r3, #1
 80034b0:	4413      	add	r3, r2
 80034b2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80034b4:	4413      	add	r3, r2
 80034b6:	3312      	adds	r3, #18
 80034b8:	009b      	lsls	r3, r3, #2
 80034ba:	440b      	add	r3, r1
 80034bc:	3304      	adds	r3, #4
 80034be:	edc3 7a00 	vstr	s15, [r3]
			for (k = 0; k < 3; k++) {
 80034c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034c4:	3301      	adds	r3, #1
 80034c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80034c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034ca:	2b02      	cmp	r3, #2
 80034cc:	ddc1      	ble.n	8003452 <fUpdateCalibration10EIG+0x87e>
			}
			// copy to below diagonal element
			MagCal->trinvW[j][i] = MagCal->trinvW[i][j];
 80034ce:	6879      	ldr	r1, [r7, #4]
 80034d0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80034d2:	4613      	mov	r3, r2
 80034d4:	005b      	lsls	r3, r3, #1
 80034d6:	4413      	add	r3, r2
 80034d8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80034da:	4413      	add	r3, r2
 80034dc:	3312      	adds	r3, #18
 80034de:	009b      	lsls	r3, r3, #2
 80034e0:	440b      	add	r3, r1
 80034e2:	3304      	adds	r3, #4
 80034e4:	6819      	ldr	r1, [r3, #0]
 80034e6:	6878      	ldr	r0, [r7, #4]
 80034e8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80034ea:	4613      	mov	r3, r2
 80034ec:	005b      	lsls	r3, r3, #1
 80034ee:	4413      	add	r3, r2
 80034f0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80034f2:	4413      	add	r3, r2
 80034f4:	3312      	adds	r3, #18
 80034f6:	009b      	lsls	r3, r3, #2
 80034f8:	4403      	add	r3, r0
 80034fa:	3304      	adds	r3, #4
 80034fc:	6019      	str	r1, [r3, #0]
		for (j = i; j < 3; j++) {
 80034fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003500:	3301      	adds	r3, #1
 8003502:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003504:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003506:	2b02      	cmp	r3, #2
 8003508:	dd92      	ble.n	8003430 <fUpdateCalibration10EIG+0x85c>
	for (i = 0; i < 3; i++) {
 800350a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800350c:	3301      	adds	r3, #1
 800350e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003510:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003512:	2b02      	cmp	r3, #2
 8003514:	dd89      	ble.n	800342a <fUpdateCalibration10EIG+0x856>
		}
	}
}
 8003516:	bf00      	nop
 8003518:	bf00      	nop
 800351a:	373c      	adds	r7, #60	@ 0x3c
 800351c:	46bd      	mov	sp, r7
 800351e:	bd90      	pop	{r4, r7, pc}
 8003520:	42480000 	.word	0x42480000
 8003524:	3dcccccd 	.word	0x3dcccccd
 8003528:	beaaaaab 	.word	0xbeaaaaab
 800352c:	be2aaaab 	.word	0xbe2aaaab

08003530 <LL_RCC_LSE_SetDriveCapability>:
{
 8003530:	b480      	push	{r7}
 8003532:	b083      	sub	sp, #12
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8003538:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800353c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003540:	f023 0218 	bic.w	r2, r3, #24
 8003544:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	4313      	orrs	r3, r2
 800354c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8003550:	bf00      	nop
 8003552:	370c      	adds	r7, #12
 8003554:	46bd      	mov	sp, r7
 8003556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355a:	4770      	bx	lr

0800355c <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_TSC
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 800355c:	b480      	push	{r7}
 800355e:	b085      	sub	sp, #20
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8003564:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003568:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800356a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	4313      	orrs	r3, r2
 8003572:	648b      	str	r3, [r1, #72]	@ 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8003574:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003578:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	4013      	ands	r3, r2
 800357e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003580:	68fb      	ldr	r3, [r7, #12]
}
 8003582:	bf00      	nop
 8003584:	3714      	adds	r7, #20
 8003586:	46bd      	mov	sp, r7
 8003588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358c:	4770      	bx	lr

0800358e <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800358e:	b480      	push	{r7}
 8003590:	b085      	sub	sp, #20
 8003592:	af00      	add	r7, sp, #0
 8003594:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8003596:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800359a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800359c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	4313      	orrs	r3, r2
 80035a4:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80035a6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80035aa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	4013      	ands	r3, r2
 80035b0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80035b2:	68fb      	ldr	r3, [r7, #12]
}
 80035b4:	bf00      	nop
 80035b6:	3714      	adds	r7, #20
 80035b8:	46bd      	mov	sp, r7
 80035ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035be:	4770      	bx	lr

080035c0 <LSM9DS1_WriteRegister>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void LSM9DS1_WriteRegister(uint8_t addr, uint8_t reg, uint8_t value) {
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b086      	sub	sp, #24
 80035c4:	af04      	add	r7, sp, #16
 80035c6:	4603      	mov	r3, r0
 80035c8:	71fb      	strb	r3, [r7, #7]
 80035ca:	460b      	mov	r3, r1
 80035cc:	71bb      	strb	r3, [r7, #6]
 80035ce:	4613      	mov	r3, r2
 80035d0:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Write(&hi2c1, addr, reg, I2C_MEMADD_SIZE_8BIT, &value, 1,
 80035d2:	79fb      	ldrb	r3, [r7, #7]
 80035d4:	b299      	uxth	r1, r3
 80035d6:	79bb      	ldrb	r3, [r7, #6]
 80035d8:	b29a      	uxth	r2, r3
 80035da:	f04f 33ff 	mov.w	r3, #4294967295
 80035de:	9302      	str	r3, [sp, #8]
 80035e0:	2301      	movs	r3, #1
 80035e2:	9301      	str	r3, [sp, #4]
 80035e4:	1d7b      	adds	r3, r7, #5
 80035e6:	9300      	str	r3, [sp, #0]
 80035e8:	2301      	movs	r3, #1
 80035ea:	4803      	ldr	r0, [pc, #12]	@ (80035f8 <LSM9DS1_WriteRegister+0x38>)
 80035ec:	f004 fe28 	bl	8008240 <HAL_I2C_Mem_Write>
	HAL_MAX_DELAY);
}
 80035f0:	bf00      	nop
 80035f2:	3708      	adds	r7, #8
 80035f4:	46bd      	mov	sp, r7
 80035f6:	bd80      	pop	{r7, pc}
 80035f8:	200001f0 	.word	0x200001f0

080035fc <LSM9DS1_Init>:
	HAL_I2C_Mem_Read(&hi2c1, addr, reg, I2C_MEMADD_SIZE_8BIT, &value, 1,
	HAL_MAX_DELAY);
	return value;
}

void LSM9DS1_Init() {
 80035fc:	b580      	push	{r7, lr}
 80035fe:	af00      	add	r7, sp, #0
	//sensor reset
	LSM9DS1_WriteRegister(LSM9DS1_ADDR, CTRL_REG8, 0x05);
 8003600:	2205      	movs	r2, #5
 8003602:	2122      	movs	r1, #34	@ 0x22
 8003604:	20d4      	movs	r0, #212	@ 0xd4
 8003606:	f7ff ffdb 	bl	80035c0 <LSM9DS1_WriteRegister>
	HAL_Delay(10);
 800360a:	200a      	movs	r0, #10
 800360c:	f7fd fcdb 	bl	8000fc6 <HAL_Delay>

	//low-power setting
//	gyro setting
	LSM9DS1_WriteRegister(LSM9DS1_ADDR, CTRL_REG1_G, 0x40); //gyro ODR 59.5 Hz(low-power mode), full scale 245dps(basic)
 8003610:	2240      	movs	r2, #64	@ 0x40
 8003612:	2110      	movs	r1, #16
 8003614:	20d4      	movs	r0, #212	@ 0xd4
 8003616:	f7ff ffd3 	bl	80035c0 <LSM9DS1_WriteRegister>
	LSM9DS1_WriteRegister(LSM9DS1_ADDR, CTRL_REG3_G, 0x80); //gyro low-power mode activate
 800361a:	2280      	movs	r2, #128	@ 0x80
 800361c:	2112      	movs	r1, #18
 800361e:	20d4      	movs	r0, #212	@ 0xd4
 8003620:	f7ff ffce 	bl	80035c0 <LSM9DS1_WriteRegister>
	HAL_Delay(10);
 8003624:	200a      	movs	r0, #10
 8003626:	f7fd fcce 	bl	8000fc6 <HAL_Delay>

	//accel setting
	LSM9DS1_WriteRegister(LSM9DS1_ADDR, CTRL_REG6_XL, 0x20); //accel ODR 10Hz, full scale 2g(basic)
 800362a:	2220      	movs	r2, #32
 800362c:	2120      	movs	r1, #32
 800362e:	20d4      	movs	r0, #212	@ 0xd4
 8003630:	f7ff ffc6 	bl	80035c0 <LSM9DS1_WriteRegister>
	LSM9DS1_WriteRegister(LSM9DS1_ADDR, CTRL_REG7_XL, 0x00); //accel low-power mode activate
 8003634:	2200      	movs	r2, #0
 8003636:	2121      	movs	r1, #33	@ 0x21
 8003638:	20d4      	movs	r0, #212	@ 0xd4
 800363a:	f7ff ffc1 	bl	80035c0 <LSM9DS1_WriteRegister>
	HAL_Delay(10);
 800363e:	200a      	movs	r0, #10
 8003640:	f7fd fcc1 	bl	8000fc6 <HAL_Delay>

	//mag setting
	LSM9DS1_WriteRegister(MAG_ADDR, CTRL_REG1_M, 0x10); // mag ODR 10Hz, temp-comp activate
 8003644:	2210      	movs	r2, #16
 8003646:	2120      	movs	r1, #32
 8003648:	203c      	movs	r0, #60	@ 0x3c
 800364a:	f7ff ffb9 	bl	80035c0 <LSM9DS1_WriteRegister>
	LSM9DS1_WriteRegister(MAG_ADDR, CTRL_REG3_M, 0x00); // mag Continuous-conversion mode activate
 800364e:	2200      	movs	r2, #0
 8003650:	2122      	movs	r1, #34	@ 0x22
 8003652:	203c      	movs	r0, #60	@ 0x3c
 8003654:	f7ff ffb4 	bl	80035c0 <LSM9DS1_WriteRegister>
	HAL_Delay(10);
 8003658:	200a      	movs	r0, #10
 800365a:	f7fd fcb4 	bl	8000fc6 <HAL_Delay>
//
//	//mag setting
//	LSM9DS1_WriteRegister(MAG_ADDR, CTRL_REG1_M, 0x70); // mag ODR 80Hz, temp-comp activate
//	LSM9DS1_WriteRegister(MAG_ADDR, CTRL_REG3_M, 0x00); // mag Continuous-conversion mode activate
//	HAL_Delay(10);
}
 800365e:	bf00      	nop
 8003660:	bd80      	pop	{r7, pc}
	...

08003664 <micros>:

uint32_t micros(void) {
 8003664:	b480      	push	{r7}
 8003666:	af00      	add	r7, sp, #0
	return micro_time = __HAL_TIM_GET_COUNTER(&htim2);
 8003668:	4b05      	ldr	r3, [pc, #20]	@ (8003680 <micros+0x1c>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800366e:	4a05      	ldr	r2, [pc, #20]	@ (8003684 <micros+0x20>)
 8003670:	6013      	str	r3, [r2, #0]
 8003672:	4b04      	ldr	r3, [pc, #16]	@ (8003684 <micros+0x20>)
 8003674:	681b      	ldr	r3, [r3, #0]
}
 8003676:	4618      	mov	r0, r3
 8003678:	46bd      	mov	sp, r7
 800367a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367e:	4770      	bx	lr
 8003680:	20000304 	.word	0x20000304
 8003684:	2000048c 	.word	0x2000048c

08003688 <invSqrt>:

float invSqrt(float x) {
 8003688:	b480      	push	{r7}
 800368a:	b087      	sub	sp, #28
 800368c:	af00      	add	r7, sp, #0
 800368e:	ed87 0a01 	vstr	s0, [r7, #4]
	float halfx = 0.5f * x;
 8003692:	edd7 7a01 	vldr	s15, [r7, #4]
 8003696:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800369a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800369e:	edc7 7a05 	vstr	s15, [r7, #20]
	float y = x;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	613b      	str	r3, [r7, #16]
	long i = *(long*) &y;
 80036a6:	f107 0310 	add.w	r3, r7, #16
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	60fb      	str	r3, [r7, #12]
	i = 0x5f3759df - (i >> 1);
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	105a      	asrs	r2, r3, #1
 80036b2:	4b12      	ldr	r3, [pc, #72]	@ (80036fc <invSqrt+0x74>)
 80036b4:	1a9b      	subs	r3, r3, r2
 80036b6:	60fb      	str	r3, [r7, #12]
	y = *(float*) &i;
 80036b8:	f107 030c 	add.w	r3, r7, #12
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	613b      	str	r3, [r7, #16]
	y = y * (1.5f - (halfx * y * y));
 80036c0:	ed97 7a04 	vldr	s14, [r7, #16]
 80036c4:	edd7 7a05 	vldr	s15, [r7, #20]
 80036c8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80036cc:	edd7 7a04 	vldr	s15, [r7, #16]
 80036d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036d4:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 80036d8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80036dc:	edd7 7a04 	vldr	s15, [r7, #16]
 80036e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036e4:	edc7 7a04 	vstr	s15, [r7, #16]
	return y;
 80036e8:	693b      	ldr	r3, [r7, #16]
 80036ea:	ee07 3a90 	vmov	s15, r3
}
 80036ee:	eeb0 0a67 	vmov.f32	s0, s15
 80036f2:	371c      	adds	r7, #28
 80036f4:	46bd      	mov	sp, r7
 80036f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fa:	4770      	bx	lr
 80036fc:	5f3759df 	.word	0x5f3759df

08003700 <vector_dot>:

float vector_dot(float a[3], float b[3]) {
 8003700:	b480      	push	{r7}
 8003702:	b083      	sub	sp, #12
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
 8003708:	6039      	str	r1, [r7, #0]
	return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	ed93 7a00 	vldr	s14, [r3]
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	edd3 7a00 	vldr	s15, [r3]
 8003716:	ee27 7a27 	vmul.f32	s14, s14, s15
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	3304      	adds	r3, #4
 800371e:	edd3 6a00 	vldr	s13, [r3]
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	3304      	adds	r3, #4
 8003726:	edd3 7a00 	vldr	s15, [r3]
 800372a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800372e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	3308      	adds	r3, #8
 8003736:	edd3 6a00 	vldr	s13, [r3]
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	3308      	adds	r3, #8
 800373e:	edd3 7a00 	vldr	s15, [r3]
 8003742:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003746:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 800374a:	eeb0 0a67 	vmov.f32	s0, s15
 800374e:	370c      	adds	r7, #12
 8003750:	46bd      	mov	sp, r7
 8003752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003756:	4770      	bx	lr

08003758 <vector_normalize>:

void vector_normalize(float a[3]) {
 8003758:	b580      	push	{r7, lr}
 800375a:	b084      	sub	sp, #16
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
	float mag = sqrt(vector_dot(a, a));
 8003760:	6879      	ldr	r1, [r7, #4]
 8003762:	6878      	ldr	r0, [r7, #4]
 8003764:	f7ff ffcc 	bl	8003700 <vector_dot>
 8003768:	ee10 3a10 	vmov	r3, s0
 800376c:	4618      	mov	r0, r3
 800376e:	f7fc fec3 	bl	80004f8 <__aeabi_f2d>
 8003772:	4602      	mov	r2, r0
 8003774:	460b      	mov	r3, r1
 8003776:	ec43 2b10 	vmov	d0, r2, r3
 800377a:	f00d fbe9 	bl	8010f50 <sqrt>
 800377e:	ec53 2b10 	vmov	r2, r3, d0
 8003782:	4610      	mov	r0, r2
 8003784:	4619      	mov	r1, r3
 8003786:	f7fd f9bf 	bl	8000b08 <__aeabi_d2f>
 800378a:	4603      	mov	r3, r0
 800378c:	60fb      	str	r3, [r7, #12]
	a[0] /= mag;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	edd3 6a00 	vldr	s13, [r3]
 8003794:	ed97 7a03 	vldr	s14, [r7, #12]
 8003798:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	edc3 7a00 	vstr	s15, [r3]
	a[1] /= mag;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	3304      	adds	r3, #4
 80037a6:	edd3 6a00 	vldr	s13, [r3]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	3304      	adds	r3, #4
 80037ae:	ed97 7a03 	vldr	s14, [r7, #12]
 80037b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80037b6:	edc3 7a00 	vstr	s15, [r3]
	a[2] /= mag;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	3308      	adds	r3, #8
 80037be:	edd3 6a00 	vldr	s13, [r3]
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	3308      	adds	r3, #8
 80037c6:	ed97 7a03 	vldr	s14, [r7, #12]
 80037ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80037ce:	edc3 7a00 	vstr	s15, [r3]
}
 80037d2:	bf00      	nop
 80037d4:	3710      	adds	r7, #16
 80037d6:	46bd      	mov	sp, r7
 80037d8:	bd80      	pop	{r7, pc}
	...

080037dc <MadgwickAHRSupdate>:

void MadgwickAHRSupdate(float gx, float gy, float gz, float ax, float ay,
		float az, float mx, float my, float mz) {
 80037dc:	b580      	push	{r7, lr}
 80037de:	b08a      	sub	sp, #40	@ 0x28
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24
 80037e6:	edc7 0a08 	vstr	s1, [r7, #32]
 80037ea:	ed87 1a07 	vstr	s2, [r7, #28]
 80037ee:	edc7 1a06 	vstr	s3, [r7, #24]
 80037f2:	ed87 2a05 	vstr	s4, [r7, #20]
 80037f6:	edc7 2a04 	vstr	s5, [r7, #16]
 80037fa:	ed87 3a03 	vstr	s6, [r7, #12]
 80037fe:	edc7 3a02 	vstr	s7, [r7, #8]
 8003802:	ed87 4a01 	vstr	s8, [r7, #4]

	qDot1 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz);
 8003806:	4bda      	ldr	r3, [pc, #872]	@ (8003b70 <MadgwickAHRSupdate+0x394>)
 8003808:	edd3 7a00 	vldr	s15, [r3]
 800380c:	eeb1 7a67 	vneg.f32	s14, s15
 8003810:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8003814:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003818:	4bd6      	ldr	r3, [pc, #856]	@ (8003b74 <MadgwickAHRSupdate+0x398>)
 800381a:	edd3 6a00 	vldr	s13, [r3]
 800381e:	edd7 7a08 	vldr	s15, [r7, #32]
 8003822:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003826:	ee37 7a67 	vsub.f32	s14, s14, s15
 800382a:	4bd3      	ldr	r3, [pc, #844]	@ (8003b78 <MadgwickAHRSupdate+0x39c>)
 800382c:	edd3 6a00 	vldr	s13, [r3]
 8003830:	edd7 7a07 	vldr	s15, [r7, #28]
 8003834:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003838:	ee77 7a67 	vsub.f32	s15, s14, s15
 800383c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8003840:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003844:	4bcd      	ldr	r3, [pc, #820]	@ (8003b7c <MadgwickAHRSupdate+0x3a0>)
 8003846:	edc3 7a00 	vstr	s15, [r3]
	qDot2 = 0.5f * (q0 * gx + q2 * gz - q3 * gy);
 800384a:	4bcd      	ldr	r3, [pc, #820]	@ (8003b80 <MadgwickAHRSupdate+0x3a4>)
 800384c:	ed93 7a00 	vldr	s14, [r3]
 8003850:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8003854:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003858:	4bc6      	ldr	r3, [pc, #792]	@ (8003b74 <MadgwickAHRSupdate+0x398>)
 800385a:	edd3 6a00 	vldr	s13, [r3]
 800385e:	edd7 7a07 	vldr	s15, [r7, #28]
 8003862:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003866:	ee37 7a27 	vadd.f32	s14, s14, s15
 800386a:	4bc3      	ldr	r3, [pc, #780]	@ (8003b78 <MadgwickAHRSupdate+0x39c>)
 800386c:	edd3 6a00 	vldr	s13, [r3]
 8003870:	edd7 7a08 	vldr	s15, [r7, #32]
 8003874:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003878:	ee77 7a67 	vsub.f32	s15, s14, s15
 800387c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8003880:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003884:	4bbf      	ldr	r3, [pc, #764]	@ (8003b84 <MadgwickAHRSupdate+0x3a8>)
 8003886:	edc3 7a00 	vstr	s15, [r3]
	qDot3 = 0.5f * (q0 * gy - q1 * gz + q3 * gx);
 800388a:	4bbd      	ldr	r3, [pc, #756]	@ (8003b80 <MadgwickAHRSupdate+0x3a4>)
 800388c:	ed93 7a00 	vldr	s14, [r3]
 8003890:	edd7 7a08 	vldr	s15, [r7, #32]
 8003894:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003898:	4bb5      	ldr	r3, [pc, #724]	@ (8003b70 <MadgwickAHRSupdate+0x394>)
 800389a:	edd3 6a00 	vldr	s13, [r3]
 800389e:	edd7 7a07 	vldr	s15, [r7, #28]
 80038a2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80038a6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80038aa:	4bb3      	ldr	r3, [pc, #716]	@ (8003b78 <MadgwickAHRSupdate+0x39c>)
 80038ac:	edd3 6a00 	vldr	s13, [r3]
 80038b0:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80038b4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80038b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80038bc:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80038c0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80038c4:	4bb0      	ldr	r3, [pc, #704]	@ (8003b88 <MadgwickAHRSupdate+0x3ac>)
 80038c6:	edc3 7a00 	vstr	s15, [r3]
	qDot4 = 0.5f * (q0 * gz + q1 * gy - q2 * gx);
 80038ca:	4bad      	ldr	r3, [pc, #692]	@ (8003b80 <MadgwickAHRSupdate+0x3a4>)
 80038cc:	ed93 7a00 	vldr	s14, [r3]
 80038d0:	edd7 7a07 	vldr	s15, [r7, #28]
 80038d4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80038d8:	4ba5      	ldr	r3, [pc, #660]	@ (8003b70 <MadgwickAHRSupdate+0x394>)
 80038da:	edd3 6a00 	vldr	s13, [r3]
 80038de:	edd7 7a08 	vldr	s15, [r7, #32]
 80038e2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80038e6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80038ea:	4ba2      	ldr	r3, [pc, #648]	@ (8003b74 <MadgwickAHRSupdate+0x398>)
 80038ec:	edd3 6a00 	vldr	s13, [r3]
 80038f0:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80038f4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80038f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80038fc:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8003900:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003904:	4ba1      	ldr	r3, [pc, #644]	@ (8003b8c <MadgwickAHRSupdate+0x3b0>)
 8003906:	edc3 7a00 	vstr	s15, [r3]

	if (!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f))) {
 800390a:	edd7 7a06 	vldr	s15, [r7, #24]
 800390e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003912:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003916:	d10e      	bne.n	8003936 <MadgwickAHRSupdate+0x15a>
 8003918:	edd7 7a05 	vldr	s15, [r7, #20]
 800391c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003920:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003924:	d107      	bne.n	8003936 <MadgwickAHRSupdate+0x15a>
 8003926:	edd7 7a04 	vldr	s15, [r7, #16]
 800392a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800392e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003932:	f000 874b 	beq.w	80047cc <MadgwickAHRSupdate+0xff0>

		recipNorm = invSqrt(ax * ax + ay * ay + az * az);
 8003936:	edd7 7a06 	vldr	s15, [r7, #24]
 800393a:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800393e:	edd7 7a05 	vldr	s15, [r7, #20]
 8003942:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003946:	ee37 7a27 	vadd.f32	s14, s14, s15
 800394a:	edd7 7a04 	vldr	s15, [r7, #16]
 800394e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003952:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003956:	eeb0 0a67 	vmov.f32	s0, s15
 800395a:	f7ff fe95 	bl	8003688 <invSqrt>
 800395e:	eef0 7a40 	vmov.f32	s15, s0
 8003962:	4b8b      	ldr	r3, [pc, #556]	@ (8003b90 <MadgwickAHRSupdate+0x3b4>)
 8003964:	edc3 7a00 	vstr	s15, [r3]
		ax *= recipNorm;
 8003968:	4b89      	ldr	r3, [pc, #548]	@ (8003b90 <MadgwickAHRSupdate+0x3b4>)
 800396a:	edd3 7a00 	vldr	s15, [r3]
 800396e:	ed97 7a06 	vldr	s14, [r7, #24]
 8003972:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003976:	edc7 7a06 	vstr	s15, [r7, #24]
		ay *= recipNorm;
 800397a:	4b85      	ldr	r3, [pc, #532]	@ (8003b90 <MadgwickAHRSupdate+0x3b4>)
 800397c:	edd3 7a00 	vldr	s15, [r3]
 8003980:	ed97 7a05 	vldr	s14, [r7, #20]
 8003984:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003988:	edc7 7a05 	vstr	s15, [r7, #20]
		az *= recipNorm;
 800398c:	4b80      	ldr	r3, [pc, #512]	@ (8003b90 <MadgwickAHRSupdate+0x3b4>)
 800398e:	edd3 7a00 	vldr	s15, [r3]
 8003992:	ed97 7a04 	vldr	s14, [r7, #16]
 8003996:	ee67 7a27 	vmul.f32	s15, s14, s15
 800399a:	edc7 7a04 	vstr	s15, [r7, #16]

		recipNorm = invSqrt(mx * mx + my * my + mz * mz);
 800399e:	edd7 7a03 	vldr	s15, [r7, #12]
 80039a2:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80039a6:	edd7 7a02 	vldr	s15, [r7, #8]
 80039aa:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80039ae:	ee37 7a27 	vadd.f32	s14, s14, s15
 80039b2:	edd7 7a01 	vldr	s15, [r7, #4]
 80039b6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80039ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80039be:	eeb0 0a67 	vmov.f32	s0, s15
 80039c2:	f7ff fe61 	bl	8003688 <invSqrt>
 80039c6:	eef0 7a40 	vmov.f32	s15, s0
 80039ca:	4b71      	ldr	r3, [pc, #452]	@ (8003b90 <MadgwickAHRSupdate+0x3b4>)
 80039cc:	edc3 7a00 	vstr	s15, [r3]
		mx *= recipNorm;
 80039d0:	4b6f      	ldr	r3, [pc, #444]	@ (8003b90 <MadgwickAHRSupdate+0x3b4>)
 80039d2:	edd3 7a00 	vldr	s15, [r3]
 80039d6:	ed97 7a03 	vldr	s14, [r7, #12]
 80039da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039de:	edc7 7a03 	vstr	s15, [r7, #12]
		my *= recipNorm;
 80039e2:	4b6b      	ldr	r3, [pc, #428]	@ (8003b90 <MadgwickAHRSupdate+0x3b4>)
 80039e4:	edd3 7a00 	vldr	s15, [r3]
 80039e8:	ed97 7a02 	vldr	s14, [r7, #8]
 80039ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039f0:	edc7 7a02 	vstr	s15, [r7, #8]
		mz *= recipNorm;
 80039f4:	4b66      	ldr	r3, [pc, #408]	@ (8003b90 <MadgwickAHRSupdate+0x3b4>)
 80039f6:	edd3 7a00 	vldr	s15, [r3]
 80039fa:	ed97 7a01 	vldr	s14, [r7, #4]
 80039fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a02:	edc7 7a01 	vstr	s15, [r7, #4]

		_2q0mx = 2.0f * q0 * mx;
 8003a06:	4b5e      	ldr	r3, [pc, #376]	@ (8003b80 <MadgwickAHRSupdate+0x3a4>)
 8003a08:	edd3 7a00 	vldr	s15, [r3]
 8003a0c:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8003a10:	edd7 7a03 	vldr	s15, [r7, #12]
 8003a14:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a18:	4b5e      	ldr	r3, [pc, #376]	@ (8003b94 <MadgwickAHRSupdate+0x3b8>)
 8003a1a:	edc3 7a00 	vstr	s15, [r3]
		_2q0my = 2.0f * q0 * my;
 8003a1e:	4b58      	ldr	r3, [pc, #352]	@ (8003b80 <MadgwickAHRSupdate+0x3a4>)
 8003a20:	edd3 7a00 	vldr	s15, [r3]
 8003a24:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8003a28:	edd7 7a02 	vldr	s15, [r7, #8]
 8003a2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a30:	4b59      	ldr	r3, [pc, #356]	@ (8003b98 <MadgwickAHRSupdate+0x3bc>)
 8003a32:	edc3 7a00 	vstr	s15, [r3]
		_2q0mz = 2.0f * q0 * mz;
 8003a36:	4b52      	ldr	r3, [pc, #328]	@ (8003b80 <MadgwickAHRSupdate+0x3a4>)
 8003a38:	edd3 7a00 	vldr	s15, [r3]
 8003a3c:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8003a40:	edd7 7a01 	vldr	s15, [r7, #4]
 8003a44:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a48:	4b54      	ldr	r3, [pc, #336]	@ (8003b9c <MadgwickAHRSupdate+0x3c0>)
 8003a4a:	edc3 7a00 	vstr	s15, [r3]
		_2q1mx = 2.0f * q1 * mx;
 8003a4e:	4b48      	ldr	r3, [pc, #288]	@ (8003b70 <MadgwickAHRSupdate+0x394>)
 8003a50:	edd3 7a00 	vldr	s15, [r3]
 8003a54:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8003a58:	edd7 7a03 	vldr	s15, [r7, #12]
 8003a5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a60:	4b4f      	ldr	r3, [pc, #316]	@ (8003ba0 <MadgwickAHRSupdate+0x3c4>)
 8003a62:	edc3 7a00 	vstr	s15, [r3]
		_2q0 = 2.0f * q0;
 8003a66:	4b46      	ldr	r3, [pc, #280]	@ (8003b80 <MadgwickAHRSupdate+0x3a4>)
 8003a68:	edd3 7a00 	vldr	s15, [r3]
 8003a6c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003a70:	4b4c      	ldr	r3, [pc, #304]	@ (8003ba4 <MadgwickAHRSupdate+0x3c8>)
 8003a72:	edc3 7a00 	vstr	s15, [r3]
		_2q1 = 2.0f * q1;
 8003a76:	4b3e      	ldr	r3, [pc, #248]	@ (8003b70 <MadgwickAHRSupdate+0x394>)
 8003a78:	edd3 7a00 	vldr	s15, [r3]
 8003a7c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003a80:	4b49      	ldr	r3, [pc, #292]	@ (8003ba8 <MadgwickAHRSupdate+0x3cc>)
 8003a82:	edc3 7a00 	vstr	s15, [r3]
		_2q2 = 2.0f * q2;
 8003a86:	4b3b      	ldr	r3, [pc, #236]	@ (8003b74 <MadgwickAHRSupdate+0x398>)
 8003a88:	edd3 7a00 	vldr	s15, [r3]
 8003a8c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003a90:	4b46      	ldr	r3, [pc, #280]	@ (8003bac <MadgwickAHRSupdate+0x3d0>)
 8003a92:	edc3 7a00 	vstr	s15, [r3]
		_2q3 = 2.0f * q3;
 8003a96:	4b38      	ldr	r3, [pc, #224]	@ (8003b78 <MadgwickAHRSupdate+0x39c>)
 8003a98:	edd3 7a00 	vldr	s15, [r3]
 8003a9c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003aa0:	4b43      	ldr	r3, [pc, #268]	@ (8003bb0 <MadgwickAHRSupdate+0x3d4>)
 8003aa2:	edc3 7a00 	vstr	s15, [r3]
		_2q0q2 = 2.0f * q0 * q2;
 8003aa6:	4b36      	ldr	r3, [pc, #216]	@ (8003b80 <MadgwickAHRSupdate+0x3a4>)
 8003aa8:	edd3 7a00 	vldr	s15, [r3]
 8003aac:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8003ab0:	4b30      	ldr	r3, [pc, #192]	@ (8003b74 <MadgwickAHRSupdate+0x398>)
 8003ab2:	edd3 7a00 	vldr	s15, [r3]
 8003ab6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003aba:	4b3e      	ldr	r3, [pc, #248]	@ (8003bb4 <MadgwickAHRSupdate+0x3d8>)
 8003abc:	edc3 7a00 	vstr	s15, [r3]
		_2q2q3 = 2.0f * q2 * q3;
 8003ac0:	4b2c      	ldr	r3, [pc, #176]	@ (8003b74 <MadgwickAHRSupdate+0x398>)
 8003ac2:	edd3 7a00 	vldr	s15, [r3]
 8003ac6:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8003aca:	4b2b      	ldr	r3, [pc, #172]	@ (8003b78 <MadgwickAHRSupdate+0x39c>)
 8003acc:	edd3 7a00 	vldr	s15, [r3]
 8003ad0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ad4:	4b38      	ldr	r3, [pc, #224]	@ (8003bb8 <MadgwickAHRSupdate+0x3dc>)
 8003ad6:	edc3 7a00 	vstr	s15, [r3]
		q0q0 = q0 * q0;
 8003ada:	4b29      	ldr	r3, [pc, #164]	@ (8003b80 <MadgwickAHRSupdate+0x3a4>)
 8003adc:	ed93 7a00 	vldr	s14, [r3]
 8003ae0:	4b27      	ldr	r3, [pc, #156]	@ (8003b80 <MadgwickAHRSupdate+0x3a4>)
 8003ae2:	edd3 7a00 	vldr	s15, [r3]
 8003ae6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003aea:	4b34      	ldr	r3, [pc, #208]	@ (8003bbc <MadgwickAHRSupdate+0x3e0>)
 8003aec:	edc3 7a00 	vstr	s15, [r3]
		q0q1 = q0 * q1;
 8003af0:	4b23      	ldr	r3, [pc, #140]	@ (8003b80 <MadgwickAHRSupdate+0x3a4>)
 8003af2:	ed93 7a00 	vldr	s14, [r3]
 8003af6:	4b1e      	ldr	r3, [pc, #120]	@ (8003b70 <MadgwickAHRSupdate+0x394>)
 8003af8:	edd3 7a00 	vldr	s15, [r3]
 8003afc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b00:	4b2f      	ldr	r3, [pc, #188]	@ (8003bc0 <MadgwickAHRSupdate+0x3e4>)
 8003b02:	edc3 7a00 	vstr	s15, [r3]
		q0q2 = q0 * q2;
 8003b06:	4b1e      	ldr	r3, [pc, #120]	@ (8003b80 <MadgwickAHRSupdate+0x3a4>)
 8003b08:	ed93 7a00 	vldr	s14, [r3]
 8003b0c:	4b19      	ldr	r3, [pc, #100]	@ (8003b74 <MadgwickAHRSupdate+0x398>)
 8003b0e:	edd3 7a00 	vldr	s15, [r3]
 8003b12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b16:	4b2b      	ldr	r3, [pc, #172]	@ (8003bc4 <MadgwickAHRSupdate+0x3e8>)
 8003b18:	edc3 7a00 	vstr	s15, [r3]
		q0q3 = q0 * q3;
 8003b1c:	4b18      	ldr	r3, [pc, #96]	@ (8003b80 <MadgwickAHRSupdate+0x3a4>)
 8003b1e:	ed93 7a00 	vldr	s14, [r3]
 8003b22:	4b15      	ldr	r3, [pc, #84]	@ (8003b78 <MadgwickAHRSupdate+0x39c>)
 8003b24:	edd3 7a00 	vldr	s15, [r3]
 8003b28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b2c:	4b26      	ldr	r3, [pc, #152]	@ (8003bc8 <MadgwickAHRSupdate+0x3ec>)
 8003b2e:	edc3 7a00 	vstr	s15, [r3]
		q1q1 = q1 * q1;
 8003b32:	4b0f      	ldr	r3, [pc, #60]	@ (8003b70 <MadgwickAHRSupdate+0x394>)
 8003b34:	ed93 7a00 	vldr	s14, [r3]
 8003b38:	4b0d      	ldr	r3, [pc, #52]	@ (8003b70 <MadgwickAHRSupdate+0x394>)
 8003b3a:	edd3 7a00 	vldr	s15, [r3]
 8003b3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b42:	4b22      	ldr	r3, [pc, #136]	@ (8003bcc <MadgwickAHRSupdate+0x3f0>)
 8003b44:	edc3 7a00 	vstr	s15, [r3]
		q1q2 = q1 * q2;
 8003b48:	4b09      	ldr	r3, [pc, #36]	@ (8003b70 <MadgwickAHRSupdate+0x394>)
 8003b4a:	ed93 7a00 	vldr	s14, [r3]
 8003b4e:	4b09      	ldr	r3, [pc, #36]	@ (8003b74 <MadgwickAHRSupdate+0x398>)
 8003b50:	edd3 7a00 	vldr	s15, [r3]
 8003b54:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b58:	4b1d      	ldr	r3, [pc, #116]	@ (8003bd0 <MadgwickAHRSupdate+0x3f4>)
 8003b5a:	edc3 7a00 	vstr	s15, [r3]
		q1q3 = q1 * q3;
 8003b5e:	4b04      	ldr	r3, [pc, #16]	@ (8003b70 <MadgwickAHRSupdate+0x394>)
 8003b60:	ed93 7a00 	vldr	s14, [r3]
 8003b64:	4b04      	ldr	r3, [pc, #16]	@ (8003b78 <MadgwickAHRSupdate+0x39c>)
 8003b66:	edd3 7a00 	vldr	s15, [r3]
 8003b6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b6e:	e031      	b.n	8003bd4 <MadgwickAHRSupdate+0x3f8>
 8003b70:	20000478 	.word	0x20000478
 8003b74:	2000047c 	.word	0x2000047c
 8003b78:	20000480 	.word	0x20000480
 8003b7c:	200003dc 	.word	0x200003dc
 8003b80:	20000008 	.word	0x20000008
 8003b84:	200003e0 	.word	0x200003e0
 8003b88:	200003e4 	.word	0x200003e4
 8003b8c:	200003e8 	.word	0x200003e8
 8003b90:	200003c8 	.word	0x200003c8
 8003b94:	200003f4 	.word	0x200003f4
 8003b98:	200003f8 	.word	0x200003f8
 8003b9c:	200003fc 	.word	0x200003fc
 8003ba0:	20000400 	.word	0x20000400
 8003ba4:	20000414 	.word	0x20000414
 8003ba8:	20000418 	.word	0x20000418
 8003bac:	2000041c 	.word	0x2000041c
 8003bb0:	20000420 	.word	0x20000420
 8003bb4:	20000424 	.word	0x20000424
 8003bb8:	20000428 	.word	0x20000428
 8003bbc:	2000042c 	.word	0x2000042c
 8003bc0:	20000430 	.word	0x20000430
 8003bc4:	20000434 	.word	0x20000434
 8003bc8:	20000438 	.word	0x20000438
 8003bcc:	2000043c 	.word	0x2000043c
 8003bd0:	20000440 	.word	0x20000440
 8003bd4:	4bd8      	ldr	r3, [pc, #864]	@ (8003f38 <MadgwickAHRSupdate+0x75c>)
 8003bd6:	edc3 7a00 	vstr	s15, [r3]
		q2q2 = q2 * q2;
 8003bda:	4bd8      	ldr	r3, [pc, #864]	@ (8003f3c <MadgwickAHRSupdate+0x760>)
 8003bdc:	ed93 7a00 	vldr	s14, [r3]
 8003be0:	4bd6      	ldr	r3, [pc, #856]	@ (8003f3c <MadgwickAHRSupdate+0x760>)
 8003be2:	edd3 7a00 	vldr	s15, [r3]
 8003be6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bea:	4bd5      	ldr	r3, [pc, #852]	@ (8003f40 <MadgwickAHRSupdate+0x764>)
 8003bec:	edc3 7a00 	vstr	s15, [r3]
		q2q3 = q2 * q3;
 8003bf0:	4bd2      	ldr	r3, [pc, #840]	@ (8003f3c <MadgwickAHRSupdate+0x760>)
 8003bf2:	ed93 7a00 	vldr	s14, [r3]
 8003bf6:	4bd3      	ldr	r3, [pc, #844]	@ (8003f44 <MadgwickAHRSupdate+0x768>)
 8003bf8:	edd3 7a00 	vldr	s15, [r3]
 8003bfc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c00:	4bd1      	ldr	r3, [pc, #836]	@ (8003f48 <MadgwickAHRSupdate+0x76c>)
 8003c02:	edc3 7a00 	vstr	s15, [r3]
		q3q3 = q3 * q3;
 8003c06:	4bcf      	ldr	r3, [pc, #828]	@ (8003f44 <MadgwickAHRSupdate+0x768>)
 8003c08:	ed93 7a00 	vldr	s14, [r3]
 8003c0c:	4bcd      	ldr	r3, [pc, #820]	@ (8003f44 <MadgwickAHRSupdate+0x768>)
 8003c0e:	edd3 7a00 	vldr	s15, [r3]
 8003c12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c16:	4bcd      	ldr	r3, [pc, #820]	@ (8003f4c <MadgwickAHRSupdate+0x770>)
 8003c18:	edc3 7a00 	vstr	s15, [r3]

		hx = mx * q0q0 - _2q0my * q3 + _2q0mz * q2 + mx * q1q1 + _2q1 * my * q2
 8003c1c:	4bcc      	ldr	r3, [pc, #816]	@ (8003f50 <MadgwickAHRSupdate+0x774>)
 8003c1e:	ed93 7a00 	vldr	s14, [r3]
 8003c22:	edd7 7a03 	vldr	s15, [r7, #12]
 8003c26:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003c2a:	4bca      	ldr	r3, [pc, #808]	@ (8003f54 <MadgwickAHRSupdate+0x778>)
 8003c2c:	edd3 6a00 	vldr	s13, [r3]
 8003c30:	4bc4      	ldr	r3, [pc, #784]	@ (8003f44 <MadgwickAHRSupdate+0x768>)
 8003c32:	edd3 7a00 	vldr	s15, [r3]
 8003c36:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003c3a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003c3e:	4bc6      	ldr	r3, [pc, #792]	@ (8003f58 <MadgwickAHRSupdate+0x77c>)
 8003c40:	edd3 6a00 	vldr	s13, [r3]
 8003c44:	4bbd      	ldr	r3, [pc, #756]	@ (8003f3c <MadgwickAHRSupdate+0x760>)
 8003c46:	edd3 7a00 	vldr	s15, [r3]
 8003c4a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003c4e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003c52:	4bc2      	ldr	r3, [pc, #776]	@ (8003f5c <MadgwickAHRSupdate+0x780>)
 8003c54:	edd3 6a00 	vldr	s13, [r3]
 8003c58:	edd7 7a03 	vldr	s15, [r7, #12]
 8003c5c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003c60:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003c64:	4bbe      	ldr	r3, [pc, #760]	@ (8003f60 <MadgwickAHRSupdate+0x784>)
 8003c66:	edd3 6a00 	vldr	s13, [r3]
 8003c6a:	edd7 7a02 	vldr	s15, [r7, #8]
 8003c6e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003c72:	4bb2      	ldr	r3, [pc, #712]	@ (8003f3c <MadgwickAHRSupdate+0x760>)
 8003c74:	edd3 7a00 	vldr	s15, [r3]
 8003c78:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003c7c:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ _2q1 * mz * q3 - mx * q2q2 - mx * q3q3;
 8003c80:	4bb7      	ldr	r3, [pc, #732]	@ (8003f60 <MadgwickAHRSupdate+0x784>)
 8003c82:	edd3 6a00 	vldr	s13, [r3]
 8003c86:	edd7 7a01 	vldr	s15, [r7, #4]
 8003c8a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003c8e:	4bad      	ldr	r3, [pc, #692]	@ (8003f44 <MadgwickAHRSupdate+0x768>)
 8003c90:	edd3 7a00 	vldr	s15, [r3]
 8003c94:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003c98:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003c9c:	4ba8      	ldr	r3, [pc, #672]	@ (8003f40 <MadgwickAHRSupdate+0x764>)
 8003c9e:	edd3 6a00 	vldr	s13, [r3]
 8003ca2:	edd7 7a03 	vldr	s15, [r7, #12]
 8003ca6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003caa:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003cae:	4ba7      	ldr	r3, [pc, #668]	@ (8003f4c <MadgwickAHRSupdate+0x770>)
 8003cb0:	edd3 6a00 	vldr	s13, [r3]
 8003cb4:	edd7 7a03 	vldr	s15, [r7, #12]
 8003cb8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003cbc:	ee77 7a67 	vsub.f32	s15, s14, s15
		hx = mx * q0q0 - _2q0my * q3 + _2q0mz * q2 + mx * q1q1 + _2q1 * my * q2
 8003cc0:	4ba8      	ldr	r3, [pc, #672]	@ (8003f64 <MadgwickAHRSupdate+0x788>)
 8003cc2:	edc3 7a00 	vstr	s15, [r3]
		hy = _2q0mx * q3 + my * q0q0 - _2q0mz * q1 + _2q1mx * q2 - my * q1q1
 8003cc6:	4ba8      	ldr	r3, [pc, #672]	@ (8003f68 <MadgwickAHRSupdate+0x78c>)
 8003cc8:	ed93 7a00 	vldr	s14, [r3]
 8003ccc:	4b9d      	ldr	r3, [pc, #628]	@ (8003f44 <MadgwickAHRSupdate+0x768>)
 8003cce:	edd3 7a00 	vldr	s15, [r3]
 8003cd2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003cd6:	4b9e      	ldr	r3, [pc, #632]	@ (8003f50 <MadgwickAHRSupdate+0x774>)
 8003cd8:	edd3 6a00 	vldr	s13, [r3]
 8003cdc:	edd7 7a02 	vldr	s15, [r7, #8]
 8003ce0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003ce4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003ce8:	4b9b      	ldr	r3, [pc, #620]	@ (8003f58 <MadgwickAHRSupdate+0x77c>)
 8003cea:	edd3 6a00 	vldr	s13, [r3]
 8003cee:	4b9f      	ldr	r3, [pc, #636]	@ (8003f6c <MadgwickAHRSupdate+0x790>)
 8003cf0:	edd3 7a00 	vldr	s15, [r3]
 8003cf4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003cf8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003cfc:	4b9c      	ldr	r3, [pc, #624]	@ (8003f70 <MadgwickAHRSupdate+0x794>)
 8003cfe:	edd3 6a00 	vldr	s13, [r3]
 8003d02:	4b8e      	ldr	r3, [pc, #568]	@ (8003f3c <MadgwickAHRSupdate+0x760>)
 8003d04:	edd3 7a00 	vldr	s15, [r3]
 8003d08:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003d0c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003d10:	4b92      	ldr	r3, [pc, #584]	@ (8003f5c <MadgwickAHRSupdate+0x780>)
 8003d12:	edd3 6a00 	vldr	s13, [r3]
 8003d16:	edd7 7a02 	vldr	s15, [r7, #8]
 8003d1a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003d1e:	ee37 7a67 	vsub.f32	s14, s14, s15
				+ my * q2q2 + _2q2 * mz * q3 - my * q3q3;
 8003d22:	4b87      	ldr	r3, [pc, #540]	@ (8003f40 <MadgwickAHRSupdate+0x764>)
 8003d24:	edd3 6a00 	vldr	s13, [r3]
 8003d28:	edd7 7a02 	vldr	s15, [r7, #8]
 8003d2c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003d30:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003d34:	4b8f      	ldr	r3, [pc, #572]	@ (8003f74 <MadgwickAHRSupdate+0x798>)
 8003d36:	edd3 6a00 	vldr	s13, [r3]
 8003d3a:	edd7 7a01 	vldr	s15, [r7, #4]
 8003d3e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003d42:	4b80      	ldr	r3, [pc, #512]	@ (8003f44 <MadgwickAHRSupdate+0x768>)
 8003d44:	edd3 7a00 	vldr	s15, [r3]
 8003d48:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003d4c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003d50:	4b7e      	ldr	r3, [pc, #504]	@ (8003f4c <MadgwickAHRSupdate+0x770>)
 8003d52:	edd3 6a00 	vldr	s13, [r3]
 8003d56:	edd7 7a02 	vldr	s15, [r7, #8]
 8003d5a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003d5e:	ee77 7a67 	vsub.f32	s15, s14, s15
		hy = _2q0mx * q3 + my * q0q0 - _2q0mz * q1 + _2q1mx * q2 - my * q1q1
 8003d62:	4b85      	ldr	r3, [pc, #532]	@ (8003f78 <MadgwickAHRSupdate+0x79c>)
 8003d64:	edc3 7a00 	vstr	s15, [r3]
		_2bx = sqrt(hx * hx + hy * hy);
 8003d68:	4b7e      	ldr	r3, [pc, #504]	@ (8003f64 <MadgwickAHRSupdate+0x788>)
 8003d6a:	ed93 7a00 	vldr	s14, [r3]
 8003d6e:	4b7d      	ldr	r3, [pc, #500]	@ (8003f64 <MadgwickAHRSupdate+0x788>)
 8003d70:	edd3 7a00 	vldr	s15, [r3]
 8003d74:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003d78:	4b7f      	ldr	r3, [pc, #508]	@ (8003f78 <MadgwickAHRSupdate+0x79c>)
 8003d7a:	edd3 6a00 	vldr	s13, [r3]
 8003d7e:	4b7e      	ldr	r3, [pc, #504]	@ (8003f78 <MadgwickAHRSupdate+0x79c>)
 8003d80:	edd3 7a00 	vldr	s15, [r3]
 8003d84:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003d88:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003d8c:	ee17 0a90 	vmov	r0, s15
 8003d90:	f7fc fbb2 	bl	80004f8 <__aeabi_f2d>
 8003d94:	4602      	mov	r2, r0
 8003d96:	460b      	mov	r3, r1
 8003d98:	ec43 2b10 	vmov	d0, r2, r3
 8003d9c:	f00d f8d8 	bl	8010f50 <sqrt>
 8003da0:	ec53 2b10 	vmov	r2, r3, d0
 8003da4:	4610      	mov	r0, r2
 8003da6:	4619      	mov	r1, r3
 8003da8:	f7fc feae 	bl	8000b08 <__aeabi_d2f>
 8003dac:	4603      	mov	r3, r0
 8003dae:	4a73      	ldr	r2, [pc, #460]	@ (8003f7c <MadgwickAHRSupdate+0x7a0>)
 8003db0:	6013      	str	r3, [r2, #0]
		_2bz = -_2q0mx * q2 + _2q0my * q1 + mz * q0q0 + _2q1mx * q3 - mz * q1q1
 8003db2:	4b6d      	ldr	r3, [pc, #436]	@ (8003f68 <MadgwickAHRSupdate+0x78c>)
 8003db4:	edd3 7a00 	vldr	s15, [r3]
 8003db8:	eeb1 7a67 	vneg.f32	s14, s15
 8003dbc:	4b5f      	ldr	r3, [pc, #380]	@ (8003f3c <MadgwickAHRSupdate+0x760>)
 8003dbe:	edd3 7a00 	vldr	s15, [r3]
 8003dc2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003dc6:	4b63      	ldr	r3, [pc, #396]	@ (8003f54 <MadgwickAHRSupdate+0x778>)
 8003dc8:	edd3 6a00 	vldr	s13, [r3]
 8003dcc:	4b67      	ldr	r3, [pc, #412]	@ (8003f6c <MadgwickAHRSupdate+0x790>)
 8003dce:	edd3 7a00 	vldr	s15, [r3]
 8003dd2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003dd6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003dda:	4b5d      	ldr	r3, [pc, #372]	@ (8003f50 <MadgwickAHRSupdate+0x774>)
 8003ddc:	edd3 6a00 	vldr	s13, [r3]
 8003de0:	edd7 7a01 	vldr	s15, [r7, #4]
 8003de4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003de8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003dec:	4b60      	ldr	r3, [pc, #384]	@ (8003f70 <MadgwickAHRSupdate+0x794>)
 8003dee:	edd3 6a00 	vldr	s13, [r3]
 8003df2:	4b54      	ldr	r3, [pc, #336]	@ (8003f44 <MadgwickAHRSupdate+0x768>)
 8003df4:	edd3 7a00 	vldr	s15, [r3]
 8003df8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003dfc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003e00:	4b56      	ldr	r3, [pc, #344]	@ (8003f5c <MadgwickAHRSupdate+0x780>)
 8003e02:	edd3 6a00 	vldr	s13, [r3]
 8003e06:	edd7 7a01 	vldr	s15, [r7, #4]
 8003e0a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003e0e:	ee37 7a67 	vsub.f32	s14, s14, s15
				+ _2q2 * my * q3 - mz * q2q2 + mz * q3q3;
 8003e12:	4b58      	ldr	r3, [pc, #352]	@ (8003f74 <MadgwickAHRSupdate+0x798>)
 8003e14:	edd3 6a00 	vldr	s13, [r3]
 8003e18:	edd7 7a02 	vldr	s15, [r7, #8]
 8003e1c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003e20:	4b48      	ldr	r3, [pc, #288]	@ (8003f44 <MadgwickAHRSupdate+0x768>)
 8003e22:	edd3 7a00 	vldr	s15, [r3]
 8003e26:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003e2a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003e2e:	4b44      	ldr	r3, [pc, #272]	@ (8003f40 <MadgwickAHRSupdate+0x764>)
 8003e30:	edd3 6a00 	vldr	s13, [r3]
 8003e34:	edd7 7a01 	vldr	s15, [r7, #4]
 8003e38:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003e3c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003e40:	4b42      	ldr	r3, [pc, #264]	@ (8003f4c <MadgwickAHRSupdate+0x770>)
 8003e42:	edd3 6a00 	vldr	s13, [r3]
 8003e46:	edd7 7a01 	vldr	s15, [r7, #4]
 8003e4a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003e4e:	ee77 7a27 	vadd.f32	s15, s14, s15
		_2bz = -_2q0mx * q2 + _2q0my * q1 + mz * q0q0 + _2q1mx * q3 - mz * q1q1
 8003e52:	4b4b      	ldr	r3, [pc, #300]	@ (8003f80 <MadgwickAHRSupdate+0x7a4>)
 8003e54:	edc3 7a00 	vstr	s15, [r3]
		_4bx = 2.0f * _2bx;
 8003e58:	4b48      	ldr	r3, [pc, #288]	@ (8003f7c <MadgwickAHRSupdate+0x7a0>)
 8003e5a:	edd3 7a00 	vldr	s15, [r3]
 8003e5e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003e62:	4b48      	ldr	r3, [pc, #288]	@ (8003f84 <MadgwickAHRSupdate+0x7a8>)
 8003e64:	edc3 7a00 	vstr	s15, [r3]
		_4bz = 2.0f * _2bz;
 8003e68:	4b45      	ldr	r3, [pc, #276]	@ (8003f80 <MadgwickAHRSupdate+0x7a4>)
 8003e6a:	edd3 7a00 	vldr	s15, [r3]
 8003e6e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003e72:	4b45      	ldr	r3, [pc, #276]	@ (8003f88 <MadgwickAHRSupdate+0x7ac>)
 8003e74:	edc3 7a00 	vstr	s15, [r3]

		s0 = -_2q2 * (2.0f * q1q3 - _2q0q2 - ax)
 8003e78:	4b3e      	ldr	r3, [pc, #248]	@ (8003f74 <MadgwickAHRSupdate+0x798>)
 8003e7a:	edd3 7a00 	vldr	s15, [r3]
 8003e7e:	eeb1 7a67 	vneg.f32	s14, s15
 8003e82:	4b2d      	ldr	r3, [pc, #180]	@ (8003f38 <MadgwickAHRSupdate+0x75c>)
 8003e84:	edd3 7a00 	vldr	s15, [r3]
 8003e88:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8003e8c:	4b3f      	ldr	r3, [pc, #252]	@ (8003f8c <MadgwickAHRSupdate+0x7b0>)
 8003e8e:	edd3 7a00 	vldr	s15, [r3]
 8003e92:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003e96:	edd7 7a06 	vldr	s15, [r7, #24]
 8003e9a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003e9e:	ee27 7a27 	vmul.f32	s14, s14, s15
				+ _2q1 * (2.0f * q0q1 + _2q2q3 - ay)
 8003ea2:	4b3b      	ldr	r3, [pc, #236]	@ (8003f90 <MadgwickAHRSupdate+0x7b4>)
 8003ea4:	edd3 7a00 	vldr	s15, [r3]
 8003ea8:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8003eac:	4b39      	ldr	r3, [pc, #228]	@ (8003f94 <MadgwickAHRSupdate+0x7b8>)
 8003eae:	edd3 7a00 	vldr	s15, [r3]
 8003eb2:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8003eb6:	edd7 7a05 	vldr	s15, [r7, #20]
 8003eba:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003ebe:	4b28      	ldr	r3, [pc, #160]	@ (8003f60 <MadgwickAHRSupdate+0x784>)
 8003ec0:	edd3 7a00 	vldr	s15, [r3]
 8003ec4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003ec8:	ee37 7a27 	vadd.f32	s14, s14, s15
				- _2bz * q2
 8003ecc:	4b2c      	ldr	r3, [pc, #176]	@ (8003f80 <MadgwickAHRSupdate+0x7a4>)
 8003ece:	edd3 6a00 	vldr	s13, [r3]
 8003ed2:	4b1a      	ldr	r3, [pc, #104]	@ (8003f3c <MadgwickAHRSupdate+0x760>)
 8003ed4:	edd3 7a00 	vldr	s15, [r3]
 8003ed8:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2)
 8003edc:	4b18      	ldr	r3, [pc, #96]	@ (8003f40 <MadgwickAHRSupdate+0x764>)
 8003ede:	edd3 7a00 	vldr	s15, [r3]
 8003ee2:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 8003ee6:	ee36 6a67 	vsub.f32	s12, s12, s15
 8003eea:	4b18      	ldr	r3, [pc, #96]	@ (8003f4c <MadgwickAHRSupdate+0x770>)
 8003eec:	edd3 7a00 	vldr	s15, [r3]
 8003ef0:	ee36 6a67 	vsub.f32	s12, s12, s15
 8003ef4:	4b21      	ldr	r3, [pc, #132]	@ (8003f7c <MadgwickAHRSupdate+0x7a0>)
 8003ef6:	edd3 7a00 	vldr	s15, [r3]
 8003efa:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003efe:	4b0e      	ldr	r3, [pc, #56]	@ (8003f38 <MadgwickAHRSupdate+0x75c>)
 8003f00:	edd3 5a00 	vldr	s11, [r3]
 8003f04:	4b24      	ldr	r3, [pc, #144]	@ (8003f98 <MadgwickAHRSupdate+0x7bc>)
 8003f06:	edd3 7a00 	vldr	s15, [r3]
 8003f0a:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8003f0e:	4b1c      	ldr	r3, [pc, #112]	@ (8003f80 <MadgwickAHRSupdate+0x7a4>)
 8003f10:	edd3 7a00 	vldr	s15, [r3]
 8003f14:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8003f18:	ee36 6a27 	vadd.f32	s12, s12, s15
								- mx)
 8003f1c:	edd7 7a03 	vldr	s15, [r7, #12]
 8003f20:	ee76 7a67 	vsub.f32	s15, s12, s15
						* (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2)
 8003f24:	ee66 7aa7 	vmul.f32	s15, s13, s15
				- _2bz * q2
 8003f28:	ee37 7a67 	vsub.f32	s14, s14, s15
				+ (-_2bx * q3 + _2bz * q1)
 8003f2c:	4b13      	ldr	r3, [pc, #76]	@ (8003f7c <MadgwickAHRSupdate+0x7a0>)
 8003f2e:	edd3 7a00 	vldr	s15, [r3]
 8003f32:	eef1 6a67 	vneg.f32	s13, s15
 8003f36:	e031      	b.n	8003f9c <MadgwickAHRSupdate+0x7c0>
 8003f38:	20000444 	.word	0x20000444
 8003f3c:	2000047c 	.word	0x2000047c
 8003f40:	20000448 	.word	0x20000448
 8003f44:	20000480 	.word	0x20000480
 8003f48:	2000044c 	.word	0x2000044c
 8003f4c:	20000450 	.word	0x20000450
 8003f50:	2000042c 	.word	0x2000042c
 8003f54:	200003f8 	.word	0x200003f8
 8003f58:	200003fc 	.word	0x200003fc
 8003f5c:	2000043c 	.word	0x2000043c
 8003f60:	20000418 	.word	0x20000418
 8003f64:	200003ec 	.word	0x200003ec
 8003f68:	200003f4 	.word	0x200003f4
 8003f6c:	20000478 	.word	0x20000478
 8003f70:	20000400 	.word	0x20000400
 8003f74:	2000041c 	.word	0x2000041c
 8003f78:	200003f0 	.word	0x200003f0
 8003f7c:	20000404 	.word	0x20000404
 8003f80:	20000408 	.word	0x20000408
 8003f84:	2000040c 	.word	0x2000040c
 8003f88:	20000410 	.word	0x20000410
 8003f8c:	20000424 	.word	0x20000424
 8003f90:	20000430 	.word	0x20000430
 8003f94:	20000428 	.word	0x20000428
 8003f98:	20000434 	.word	0x20000434
 8003f9c:	4bda      	ldr	r3, [pc, #872]	@ (8004308 <MadgwickAHRSupdate+0xb2c>)
 8003f9e:	edd3 7a00 	vldr	s15, [r3]
 8003fa2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003fa6:	4bd9      	ldr	r3, [pc, #868]	@ (800430c <MadgwickAHRSupdate+0xb30>)
 8003fa8:	ed93 6a00 	vldr	s12, [r3]
 8003fac:	4bd8      	ldr	r3, [pc, #864]	@ (8004310 <MadgwickAHRSupdate+0xb34>)
 8003fae:	edd3 7a00 	vldr	s15, [r3]
 8003fb2:	ee66 7a27 	vmul.f32	s15, s12, s15
 8003fb6:	ee76 6aa7 	vadd.f32	s13, s13, s15
						* (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my)
 8003fba:	4bd6      	ldr	r3, [pc, #856]	@ (8004314 <MadgwickAHRSupdate+0xb38>)
 8003fbc:	ed93 6a00 	vldr	s12, [r3]
 8003fc0:	4bd5      	ldr	r3, [pc, #852]	@ (8004318 <MadgwickAHRSupdate+0xb3c>)
 8003fc2:	edd3 7a00 	vldr	s15, [r3]
 8003fc6:	ee36 6a67 	vsub.f32	s12, s12, s15
 8003fca:	4bd4      	ldr	r3, [pc, #848]	@ (800431c <MadgwickAHRSupdate+0xb40>)
 8003fcc:	edd3 7a00 	vldr	s15, [r3]
 8003fd0:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003fd4:	4bd2      	ldr	r3, [pc, #840]	@ (8004320 <MadgwickAHRSupdate+0xb44>)
 8003fd6:	edd3 5a00 	vldr	s11, [r3]
 8003fda:	4bd2      	ldr	r3, [pc, #840]	@ (8004324 <MadgwickAHRSupdate+0xb48>)
 8003fdc:	edd3 7a00 	vldr	s15, [r3]
 8003fe0:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8003fe4:	4bc9      	ldr	r3, [pc, #804]	@ (800430c <MadgwickAHRSupdate+0xb30>)
 8003fe6:	edd3 7a00 	vldr	s15, [r3]
 8003fea:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8003fee:	ee36 6a27 	vadd.f32	s12, s12, s15
 8003ff2:	edd7 7a02 	vldr	s15, [r7, #8]
 8003ff6:	ee76 7a67 	vsub.f32	s15, s12, s15
 8003ffa:	ee66 7aa7 	vmul.f32	s15, s13, s15
				+ (-_2bx * q3 + _2bz * q1)
 8003ffe:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ _2bx * q2
 8004002:	4bc6      	ldr	r3, [pc, #792]	@ (800431c <MadgwickAHRSupdate+0xb40>)
 8004004:	edd3 6a00 	vldr	s13, [r3]
 8004008:	4bc7      	ldr	r3, [pc, #796]	@ (8004328 <MadgwickAHRSupdate+0xb4c>)
 800400a:	edd3 7a00 	vldr	s15, [r3]
 800400e:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2)
 8004012:	4bc6      	ldr	r3, [pc, #792]	@ (800432c <MadgwickAHRSupdate+0xb50>)
 8004014:	ed93 6a00 	vldr	s12, [r3]
 8004018:	4bc5      	ldr	r3, [pc, #788]	@ (8004330 <MadgwickAHRSupdate+0xb54>)
 800401a:	edd3 7a00 	vldr	s15, [r3]
 800401e:	ee36 6a27 	vadd.f32	s12, s12, s15
 8004022:	4bbe      	ldr	r3, [pc, #760]	@ (800431c <MadgwickAHRSupdate+0xb40>)
 8004024:	edd3 7a00 	vldr	s15, [r3]
 8004028:	ee26 6a27 	vmul.f32	s12, s12, s15
 800402c:	4bc1      	ldr	r3, [pc, #772]	@ (8004334 <MadgwickAHRSupdate+0xb58>)
 800402e:	edd3 7a00 	vldr	s15, [r3]
 8004032:	eef6 5a00 	vmov.f32	s11, #96	@ 0x3f000000  0.5
 8004036:	ee75 5ae7 	vsub.f32	s11, s11, s15
 800403a:	4bbf      	ldr	r3, [pc, #764]	@ (8004338 <MadgwickAHRSupdate+0xb5c>)
 800403c:	edd3 7a00 	vldr	s15, [r3]
 8004040:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8004044:	4bb1      	ldr	r3, [pc, #708]	@ (800430c <MadgwickAHRSupdate+0xb30>)
 8004046:	edd3 7a00 	vldr	s15, [r3]
 800404a:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800404e:	ee36 6a27 	vadd.f32	s12, s12, s15
								- mz);
 8004052:	edd7 7a01 	vldr	s15, [r7, #4]
 8004056:	ee76 7a67 	vsub.f32	s15, s12, s15
						* (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2)
 800405a:	ee66 7aa7 	vmul.f32	s15, s13, s15
				+ _2bx * q2
 800405e:	ee77 7a27 	vadd.f32	s15, s14, s15
		s0 = -_2q2 * (2.0f * q1q3 - _2q0q2 - ax)
 8004062:	4bb6      	ldr	r3, [pc, #728]	@ (800433c <MadgwickAHRSupdate+0xb60>)
 8004064:	edc3 7a00 	vstr	s15, [r3]
		s1 = _2q3 * (2.0f * q1q3 - _2q0q2 - ax)
 8004068:	4bb1      	ldr	r3, [pc, #708]	@ (8004330 <MadgwickAHRSupdate+0xb54>)
 800406a:	edd3 7a00 	vldr	s15, [r3]
 800406e:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8004072:	4bb3      	ldr	r3, [pc, #716]	@ (8004340 <MadgwickAHRSupdate+0xb64>)
 8004074:	edd3 7a00 	vldr	s15, [r3]
 8004078:	ee37 7a67 	vsub.f32	s14, s14, s15
 800407c:	edd7 7a06 	vldr	s15, [r7, #24]
 8004080:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004084:	4baf      	ldr	r3, [pc, #700]	@ (8004344 <MadgwickAHRSupdate+0xb68>)
 8004086:	edd3 7a00 	vldr	s15, [r3]
 800408a:	ee27 7a27 	vmul.f32	s14, s14, s15
				+ _2q0 * (2.0f * q0q1 + _2q2q3 - ay)
 800408e:	4ba4      	ldr	r3, [pc, #656]	@ (8004320 <MadgwickAHRSupdate+0xb44>)
 8004090:	edd3 7a00 	vldr	s15, [r3]
 8004094:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8004098:	4bab      	ldr	r3, [pc, #684]	@ (8004348 <MadgwickAHRSupdate+0xb6c>)
 800409a:	edd3 7a00 	vldr	s15, [r3]
 800409e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80040a2:	edd7 7a05 	vldr	s15, [r7, #20]
 80040a6:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80040aa:	4ba8      	ldr	r3, [pc, #672]	@ (800434c <MadgwickAHRSupdate+0xb70>)
 80040ac:	edd3 7a00 	vldr	s15, [r3]
 80040b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80040b4:	ee37 7a27 	vadd.f32	s14, s14, s15
				- 4.0f * q1 * (1 - 2.0f * q1q1 - 2.0f * q2q2 - az)
 80040b8:	4b95      	ldr	r3, [pc, #596]	@ (8004310 <MadgwickAHRSupdate+0xb34>)
 80040ba:	edd3 7a00 	vldr	s15, [r3]
 80040be:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 80040c2:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80040c6:	4b9b      	ldr	r3, [pc, #620]	@ (8004334 <MadgwickAHRSupdate+0xb58>)
 80040c8:	edd3 7a00 	vldr	s15, [r3]
 80040cc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80040d0:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 80040d4:	ee36 6a67 	vsub.f32	s12, s12, s15
 80040d8:	4b97      	ldr	r3, [pc, #604]	@ (8004338 <MadgwickAHRSupdate+0xb5c>)
 80040da:	edd3 7a00 	vldr	s15, [r3]
 80040de:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80040e2:	ee36 6a67 	vsub.f32	s12, s12, s15
 80040e6:	edd7 7a04 	vldr	s15, [r7, #16]
 80040ea:	ee76 7a67 	vsub.f32	s15, s12, s15
 80040ee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80040f2:	ee37 7a67 	vsub.f32	s14, s14, s15
				+ _2bz * q3
 80040f6:	4b85      	ldr	r3, [pc, #532]	@ (800430c <MadgwickAHRSupdate+0xb30>)
 80040f8:	edd3 6a00 	vldr	s13, [r3]
 80040fc:	4b82      	ldr	r3, [pc, #520]	@ (8004308 <MadgwickAHRSupdate+0xb2c>)
 80040fe:	edd3 7a00 	vldr	s15, [r3]
 8004102:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2)
 8004106:	4b8c      	ldr	r3, [pc, #560]	@ (8004338 <MadgwickAHRSupdate+0xb5c>)
 8004108:	edd3 7a00 	vldr	s15, [r3]
 800410c:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 8004110:	ee36 6a67 	vsub.f32	s12, s12, s15
 8004114:	4b8e      	ldr	r3, [pc, #568]	@ (8004350 <MadgwickAHRSupdate+0xb74>)
 8004116:	edd3 7a00 	vldr	s15, [r3]
 800411a:	ee36 6a67 	vsub.f32	s12, s12, s15
 800411e:	4b7f      	ldr	r3, [pc, #508]	@ (800431c <MadgwickAHRSupdate+0xb40>)
 8004120:	edd3 7a00 	vldr	s15, [r3]
 8004124:	ee26 6a27 	vmul.f32	s12, s12, s15
 8004128:	4b81      	ldr	r3, [pc, #516]	@ (8004330 <MadgwickAHRSupdate+0xb54>)
 800412a:	edd3 5a00 	vldr	s11, [r3]
 800412e:	4b7f      	ldr	r3, [pc, #508]	@ (800432c <MadgwickAHRSupdate+0xb50>)
 8004130:	edd3 7a00 	vldr	s15, [r3]
 8004134:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8004138:	4b74      	ldr	r3, [pc, #464]	@ (800430c <MadgwickAHRSupdate+0xb30>)
 800413a:	edd3 7a00 	vldr	s15, [r3]
 800413e:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8004142:	ee36 6a27 	vadd.f32	s12, s12, s15
								- mx)
 8004146:	edd7 7a03 	vldr	s15, [r7, #12]
 800414a:	ee76 7a67 	vsub.f32	s15, s12, s15
						* (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2)
 800414e:	ee66 7aa7 	vmul.f32	s15, s13, s15
				+ _2bz * q3
 8004152:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ (_2bx * q2 + _2bz * q0)
 8004156:	4b71      	ldr	r3, [pc, #452]	@ (800431c <MadgwickAHRSupdate+0xb40>)
 8004158:	edd3 6a00 	vldr	s13, [r3]
 800415c:	4b72      	ldr	r3, [pc, #456]	@ (8004328 <MadgwickAHRSupdate+0xb4c>)
 800415e:	edd3 7a00 	vldr	s15, [r3]
 8004162:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004166:	4b69      	ldr	r3, [pc, #420]	@ (800430c <MadgwickAHRSupdate+0xb30>)
 8004168:	ed93 6a00 	vldr	s12, [r3]
 800416c:	4b79      	ldr	r3, [pc, #484]	@ (8004354 <MadgwickAHRSupdate+0xb78>)
 800416e:	edd3 7a00 	vldr	s15, [r3]
 8004172:	ee66 7a27 	vmul.f32	s15, s12, s15
 8004176:	ee76 6aa7 	vadd.f32	s13, s13, s15
						* (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my)
 800417a:	4b66      	ldr	r3, [pc, #408]	@ (8004314 <MadgwickAHRSupdate+0xb38>)
 800417c:	ed93 6a00 	vldr	s12, [r3]
 8004180:	4b65      	ldr	r3, [pc, #404]	@ (8004318 <MadgwickAHRSupdate+0xb3c>)
 8004182:	edd3 7a00 	vldr	s15, [r3]
 8004186:	ee36 6a67 	vsub.f32	s12, s12, s15
 800418a:	4b64      	ldr	r3, [pc, #400]	@ (800431c <MadgwickAHRSupdate+0xb40>)
 800418c:	edd3 7a00 	vldr	s15, [r3]
 8004190:	ee26 6a27 	vmul.f32	s12, s12, s15
 8004194:	4b62      	ldr	r3, [pc, #392]	@ (8004320 <MadgwickAHRSupdate+0xb44>)
 8004196:	edd3 5a00 	vldr	s11, [r3]
 800419a:	4b62      	ldr	r3, [pc, #392]	@ (8004324 <MadgwickAHRSupdate+0xb48>)
 800419c:	edd3 7a00 	vldr	s15, [r3]
 80041a0:	ee75 5aa7 	vadd.f32	s11, s11, s15
 80041a4:	4b59      	ldr	r3, [pc, #356]	@ (800430c <MadgwickAHRSupdate+0xb30>)
 80041a6:	edd3 7a00 	vldr	s15, [r3]
 80041aa:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80041ae:	ee36 6a27 	vadd.f32	s12, s12, s15
 80041b2:	edd7 7a02 	vldr	s15, [r7, #8]
 80041b6:	ee76 7a67 	vsub.f32	s15, s12, s15
 80041ba:	ee66 7aa7 	vmul.f32	s15, s13, s15
				+ (_2bx * q2 + _2bz * q0)
 80041be:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ (_2bx * q3 - _4bz * q1)
 80041c2:	4b56      	ldr	r3, [pc, #344]	@ (800431c <MadgwickAHRSupdate+0xb40>)
 80041c4:	edd3 6a00 	vldr	s13, [r3]
 80041c8:	4b4f      	ldr	r3, [pc, #316]	@ (8004308 <MadgwickAHRSupdate+0xb2c>)
 80041ca:	edd3 7a00 	vldr	s15, [r3]
 80041ce:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80041d2:	4b61      	ldr	r3, [pc, #388]	@ (8004358 <MadgwickAHRSupdate+0xb7c>)
 80041d4:	ed93 6a00 	vldr	s12, [r3]
 80041d8:	4b4d      	ldr	r3, [pc, #308]	@ (8004310 <MadgwickAHRSupdate+0xb34>)
 80041da:	edd3 7a00 	vldr	s15, [r3]
 80041de:	ee66 7a27 	vmul.f32	s15, s12, s15
 80041e2:	ee76 6ae7 	vsub.f32	s13, s13, s15
						* (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2)
 80041e6:	4b51      	ldr	r3, [pc, #324]	@ (800432c <MadgwickAHRSupdate+0xb50>)
 80041e8:	ed93 6a00 	vldr	s12, [r3]
 80041ec:	4b50      	ldr	r3, [pc, #320]	@ (8004330 <MadgwickAHRSupdate+0xb54>)
 80041ee:	edd3 7a00 	vldr	s15, [r3]
 80041f2:	ee36 6a27 	vadd.f32	s12, s12, s15
 80041f6:	4b49      	ldr	r3, [pc, #292]	@ (800431c <MadgwickAHRSupdate+0xb40>)
 80041f8:	edd3 7a00 	vldr	s15, [r3]
 80041fc:	ee26 6a27 	vmul.f32	s12, s12, s15
 8004200:	4b4c      	ldr	r3, [pc, #304]	@ (8004334 <MadgwickAHRSupdate+0xb58>)
 8004202:	edd3 7a00 	vldr	s15, [r3]
 8004206:	eef6 5a00 	vmov.f32	s11, #96	@ 0x3f000000  0.5
 800420a:	ee75 5ae7 	vsub.f32	s11, s11, s15
 800420e:	4b4a      	ldr	r3, [pc, #296]	@ (8004338 <MadgwickAHRSupdate+0xb5c>)
 8004210:	edd3 7a00 	vldr	s15, [r3]
 8004214:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8004218:	4b3c      	ldr	r3, [pc, #240]	@ (800430c <MadgwickAHRSupdate+0xb30>)
 800421a:	edd3 7a00 	vldr	s15, [r3]
 800421e:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8004222:	ee36 6a27 	vadd.f32	s12, s12, s15
								- mz);
 8004226:	edd7 7a01 	vldr	s15, [r7, #4]
 800422a:	ee76 7a67 	vsub.f32	s15, s12, s15
						* (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2)
 800422e:	ee66 7aa7 	vmul.f32	s15, s13, s15
				+ (_2bx * q3 - _4bz * q1)
 8004232:	ee77 7a27 	vadd.f32	s15, s14, s15
		s1 = _2q3 * (2.0f * q1q3 - _2q0q2 - ax)
 8004236:	4b49      	ldr	r3, [pc, #292]	@ (800435c <MadgwickAHRSupdate+0xb80>)
 8004238:	edc3 7a00 	vstr	s15, [r3]
		s2 = -_2q0 * (2.0f * q1q3 - _2q0q2 - ax)
 800423c:	4b43      	ldr	r3, [pc, #268]	@ (800434c <MadgwickAHRSupdate+0xb70>)
 800423e:	edd3 7a00 	vldr	s15, [r3]
 8004242:	eeb1 7a67 	vneg.f32	s14, s15
 8004246:	4b3a      	ldr	r3, [pc, #232]	@ (8004330 <MadgwickAHRSupdate+0xb54>)
 8004248:	edd3 7a00 	vldr	s15, [r3]
 800424c:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8004250:	4b3b      	ldr	r3, [pc, #236]	@ (8004340 <MadgwickAHRSupdate+0xb64>)
 8004252:	edd3 7a00 	vldr	s15, [r3]
 8004256:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800425a:	edd7 7a06 	vldr	s15, [r7, #24]
 800425e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8004262:	ee27 7a27 	vmul.f32	s14, s14, s15
				+ _2q3 * (2.0f * q0q1 + _2q2q3 - ay)
 8004266:	4b2e      	ldr	r3, [pc, #184]	@ (8004320 <MadgwickAHRSupdate+0xb44>)
 8004268:	edd3 7a00 	vldr	s15, [r3]
 800426c:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8004270:	4b35      	ldr	r3, [pc, #212]	@ (8004348 <MadgwickAHRSupdate+0xb6c>)
 8004272:	edd3 7a00 	vldr	s15, [r3]
 8004276:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800427a:	edd7 7a05 	vldr	s15, [r7, #20]
 800427e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8004282:	4b30      	ldr	r3, [pc, #192]	@ (8004344 <MadgwickAHRSupdate+0xb68>)
 8004284:	edd3 7a00 	vldr	s15, [r3]
 8004288:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800428c:	ee37 7a27 	vadd.f32	s14, s14, s15
				- 4.0f * q2 * (1 - 2.0f * q1q1 - 2.0f * q2q2 - az)
 8004290:	4b25      	ldr	r3, [pc, #148]	@ (8004328 <MadgwickAHRSupdate+0xb4c>)
 8004292:	edd3 7a00 	vldr	s15, [r3]
 8004296:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 800429a:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800429e:	4b25      	ldr	r3, [pc, #148]	@ (8004334 <MadgwickAHRSupdate+0xb58>)
 80042a0:	edd3 7a00 	vldr	s15, [r3]
 80042a4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80042a8:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 80042ac:	ee36 6a67 	vsub.f32	s12, s12, s15
 80042b0:	4b21      	ldr	r3, [pc, #132]	@ (8004338 <MadgwickAHRSupdate+0xb5c>)
 80042b2:	edd3 7a00 	vldr	s15, [r3]
 80042b6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80042ba:	ee36 6a67 	vsub.f32	s12, s12, s15
 80042be:	edd7 7a04 	vldr	s15, [r7, #16]
 80042c2:	ee76 7a67 	vsub.f32	s15, s12, s15
 80042c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80042ca:	ee37 7a67 	vsub.f32	s14, s14, s15
				+ (-_4bx * q2 - _2bz * q0)
 80042ce:	4b24      	ldr	r3, [pc, #144]	@ (8004360 <MadgwickAHRSupdate+0xb84>)
 80042d0:	edd3 7a00 	vldr	s15, [r3]
 80042d4:	eef1 6a67 	vneg.f32	s13, s15
 80042d8:	4b13      	ldr	r3, [pc, #76]	@ (8004328 <MadgwickAHRSupdate+0xb4c>)
 80042da:	edd3 7a00 	vldr	s15, [r3]
 80042de:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80042e2:	4b0a      	ldr	r3, [pc, #40]	@ (800430c <MadgwickAHRSupdate+0xb30>)
 80042e4:	ed93 6a00 	vldr	s12, [r3]
 80042e8:	4b1a      	ldr	r3, [pc, #104]	@ (8004354 <MadgwickAHRSupdate+0xb78>)
 80042ea:	edd3 7a00 	vldr	s15, [r3]
 80042ee:	ee66 7a27 	vmul.f32	s15, s12, s15
 80042f2:	ee76 6ae7 	vsub.f32	s13, s13, s15
						* (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2)
 80042f6:	4b10      	ldr	r3, [pc, #64]	@ (8004338 <MadgwickAHRSupdate+0xb5c>)
 80042f8:	edd3 7a00 	vldr	s15, [r3]
 80042fc:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 8004300:	ee36 6a67 	vsub.f32	s12, s12, s15
 8004304:	e02e      	b.n	8004364 <MadgwickAHRSupdate+0xb88>
 8004306:	bf00      	nop
 8004308:	20000480 	.word	0x20000480
 800430c:	20000408 	.word	0x20000408
 8004310:	20000478 	.word	0x20000478
 8004314:	20000440 	.word	0x20000440
 8004318:	20000438 	.word	0x20000438
 800431c:	20000404 	.word	0x20000404
 8004320:	20000430 	.word	0x20000430
 8004324:	2000044c 	.word	0x2000044c
 8004328:	2000047c 	.word	0x2000047c
 800432c:	20000434 	.word	0x20000434
 8004330:	20000444 	.word	0x20000444
 8004334:	2000043c 	.word	0x2000043c
 8004338:	20000448 	.word	0x20000448
 800433c:	200003cc 	.word	0x200003cc
 8004340:	20000424 	.word	0x20000424
 8004344:	20000420 	.word	0x20000420
 8004348:	20000428 	.word	0x20000428
 800434c:	20000414 	.word	0x20000414
 8004350:	20000450 	.word	0x20000450
 8004354:	20000008 	.word	0x20000008
 8004358:	20000410 	.word	0x20000410
 800435c:	200003d0 	.word	0x200003d0
 8004360:	2000040c 	.word	0x2000040c
 8004364:	4bd7      	ldr	r3, [pc, #860]	@ (80046c4 <MadgwickAHRSupdate+0xee8>)
 8004366:	edd3 7a00 	vldr	s15, [r3]
 800436a:	ee36 6a67 	vsub.f32	s12, s12, s15
 800436e:	4bd6      	ldr	r3, [pc, #856]	@ (80046c8 <MadgwickAHRSupdate+0xeec>)
 8004370:	edd3 7a00 	vldr	s15, [r3]
 8004374:	ee26 6a27 	vmul.f32	s12, s12, s15
 8004378:	4bd4      	ldr	r3, [pc, #848]	@ (80046cc <MadgwickAHRSupdate+0xef0>)
 800437a:	edd3 5a00 	vldr	s11, [r3]
 800437e:	4bd4      	ldr	r3, [pc, #848]	@ (80046d0 <MadgwickAHRSupdate+0xef4>)
 8004380:	edd3 7a00 	vldr	s15, [r3]
 8004384:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8004388:	4bd2      	ldr	r3, [pc, #840]	@ (80046d4 <MadgwickAHRSupdate+0xef8>)
 800438a:	edd3 7a00 	vldr	s15, [r3]
 800438e:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8004392:	ee36 6a27 	vadd.f32	s12, s12, s15
								- mx)
 8004396:	edd7 7a03 	vldr	s15, [r7, #12]
 800439a:	ee76 7a67 	vsub.f32	s15, s12, s15
						* (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2)
 800439e:	ee66 7aa7 	vmul.f32	s15, s13, s15
				+ (-_4bx * q2 - _2bz * q0)
 80043a2:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ (_2bx * q1 + _2bz * q3)
 80043a6:	4bc8      	ldr	r3, [pc, #800]	@ (80046c8 <MadgwickAHRSupdate+0xeec>)
 80043a8:	edd3 6a00 	vldr	s13, [r3]
 80043ac:	4bca      	ldr	r3, [pc, #808]	@ (80046d8 <MadgwickAHRSupdate+0xefc>)
 80043ae:	edd3 7a00 	vldr	s15, [r3]
 80043b2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80043b6:	4bc7      	ldr	r3, [pc, #796]	@ (80046d4 <MadgwickAHRSupdate+0xef8>)
 80043b8:	ed93 6a00 	vldr	s12, [r3]
 80043bc:	4bc7      	ldr	r3, [pc, #796]	@ (80046dc <MadgwickAHRSupdate+0xf00>)
 80043be:	edd3 7a00 	vldr	s15, [r3]
 80043c2:	ee66 7a27 	vmul.f32	s15, s12, s15
 80043c6:	ee76 6aa7 	vadd.f32	s13, s13, s15
						* (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my)
 80043ca:	4bc5      	ldr	r3, [pc, #788]	@ (80046e0 <MadgwickAHRSupdate+0xf04>)
 80043cc:	ed93 6a00 	vldr	s12, [r3]
 80043d0:	4bc4      	ldr	r3, [pc, #784]	@ (80046e4 <MadgwickAHRSupdate+0xf08>)
 80043d2:	edd3 7a00 	vldr	s15, [r3]
 80043d6:	ee36 6a67 	vsub.f32	s12, s12, s15
 80043da:	4bbb      	ldr	r3, [pc, #748]	@ (80046c8 <MadgwickAHRSupdate+0xeec>)
 80043dc:	edd3 7a00 	vldr	s15, [r3]
 80043e0:	ee26 6a27 	vmul.f32	s12, s12, s15
 80043e4:	4bc0      	ldr	r3, [pc, #768]	@ (80046e8 <MadgwickAHRSupdate+0xf0c>)
 80043e6:	edd3 5a00 	vldr	s11, [r3]
 80043ea:	4bc0      	ldr	r3, [pc, #768]	@ (80046ec <MadgwickAHRSupdate+0xf10>)
 80043ec:	edd3 7a00 	vldr	s15, [r3]
 80043f0:	ee75 5aa7 	vadd.f32	s11, s11, s15
 80043f4:	4bb7      	ldr	r3, [pc, #732]	@ (80046d4 <MadgwickAHRSupdate+0xef8>)
 80043f6:	edd3 7a00 	vldr	s15, [r3]
 80043fa:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80043fe:	ee36 6a27 	vadd.f32	s12, s12, s15
 8004402:	edd7 7a02 	vldr	s15, [r7, #8]
 8004406:	ee76 7a67 	vsub.f32	s15, s12, s15
 800440a:	ee66 7aa7 	vmul.f32	s15, s13, s15
				+ (_2bx * q1 + _2bz * q3)
 800440e:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ (_2bx * q0 - _4bz * q2)
 8004412:	4bad      	ldr	r3, [pc, #692]	@ (80046c8 <MadgwickAHRSupdate+0xeec>)
 8004414:	edd3 6a00 	vldr	s13, [r3]
 8004418:	4bb5      	ldr	r3, [pc, #724]	@ (80046f0 <MadgwickAHRSupdate+0xf14>)
 800441a:	edd3 7a00 	vldr	s15, [r3]
 800441e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004422:	4bb4      	ldr	r3, [pc, #720]	@ (80046f4 <MadgwickAHRSupdate+0xf18>)
 8004424:	ed93 6a00 	vldr	s12, [r3]
 8004428:	4bb3      	ldr	r3, [pc, #716]	@ (80046f8 <MadgwickAHRSupdate+0xf1c>)
 800442a:	edd3 7a00 	vldr	s15, [r3]
 800442e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8004432:	ee76 6ae7 	vsub.f32	s13, s13, s15
						* (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2)
 8004436:	4ba6      	ldr	r3, [pc, #664]	@ (80046d0 <MadgwickAHRSupdate+0xef4>)
 8004438:	ed93 6a00 	vldr	s12, [r3]
 800443c:	4ba3      	ldr	r3, [pc, #652]	@ (80046cc <MadgwickAHRSupdate+0xef0>)
 800443e:	edd3 7a00 	vldr	s15, [r3]
 8004442:	ee36 6a27 	vadd.f32	s12, s12, s15
 8004446:	4ba0      	ldr	r3, [pc, #640]	@ (80046c8 <MadgwickAHRSupdate+0xeec>)
 8004448:	edd3 7a00 	vldr	s15, [r3]
 800444c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8004450:	4baa      	ldr	r3, [pc, #680]	@ (80046fc <MadgwickAHRSupdate+0xf20>)
 8004452:	edd3 7a00 	vldr	s15, [r3]
 8004456:	eef6 5a00 	vmov.f32	s11, #96	@ 0x3f000000  0.5
 800445a:	ee75 5ae7 	vsub.f32	s11, s11, s15
 800445e:	4ba8      	ldr	r3, [pc, #672]	@ (8004700 <MadgwickAHRSupdate+0xf24>)
 8004460:	edd3 7a00 	vldr	s15, [r3]
 8004464:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8004468:	4b9a      	ldr	r3, [pc, #616]	@ (80046d4 <MadgwickAHRSupdate+0xef8>)
 800446a:	edd3 7a00 	vldr	s15, [r3]
 800446e:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8004472:	ee36 6a27 	vadd.f32	s12, s12, s15
								- mz);
 8004476:	edd7 7a01 	vldr	s15, [r7, #4]
 800447a:	ee76 7a67 	vsub.f32	s15, s12, s15
						* (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2)
 800447e:	ee66 7aa7 	vmul.f32	s15, s13, s15
				+ (_2bx * q0 - _4bz * q2)
 8004482:	ee77 7a27 	vadd.f32	s15, s14, s15
		s2 = -_2q0 * (2.0f * q1q3 - _2q0q2 - ax)
 8004486:	4b9f      	ldr	r3, [pc, #636]	@ (8004704 <MadgwickAHRSupdate+0xf28>)
 8004488:	edc3 7a00 	vstr	s15, [r3]
		s3 = _2q1 * (2.0f * q1q3 - _2q0q2 - ax)
 800448c:	4b8f      	ldr	r3, [pc, #572]	@ (80046cc <MadgwickAHRSupdate+0xef0>)
 800448e:	edd3 7a00 	vldr	s15, [r3]
 8004492:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8004496:	4b9c      	ldr	r3, [pc, #624]	@ (8004708 <MadgwickAHRSupdate+0xf2c>)
 8004498:	edd3 7a00 	vldr	s15, [r3]
 800449c:	ee37 7a67 	vsub.f32	s14, s14, s15
 80044a0:	edd7 7a06 	vldr	s15, [r7, #24]
 80044a4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80044a8:	4b98      	ldr	r3, [pc, #608]	@ (800470c <MadgwickAHRSupdate+0xf30>)
 80044aa:	edd3 7a00 	vldr	s15, [r3]
 80044ae:	ee27 7a27 	vmul.f32	s14, s14, s15
				+ _2q2 * (2.0f * q0q1 + _2q2q3 - ay)
 80044b2:	4b8d      	ldr	r3, [pc, #564]	@ (80046e8 <MadgwickAHRSupdate+0xf0c>)
 80044b4:	edd3 7a00 	vldr	s15, [r3]
 80044b8:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80044bc:	4b94      	ldr	r3, [pc, #592]	@ (8004710 <MadgwickAHRSupdate+0xf34>)
 80044be:	edd3 7a00 	vldr	s15, [r3]
 80044c2:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80044c6:	edd7 7a05 	vldr	s15, [r7, #20]
 80044ca:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80044ce:	4b91      	ldr	r3, [pc, #580]	@ (8004714 <MadgwickAHRSupdate+0xf38>)
 80044d0:	edd3 7a00 	vldr	s15, [r3]
 80044d4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80044d8:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ (-_4bx * q3 + _2bz * q1)
 80044dc:	4b8e      	ldr	r3, [pc, #568]	@ (8004718 <MadgwickAHRSupdate+0xf3c>)
 80044de:	edd3 7a00 	vldr	s15, [r3]
 80044e2:	eef1 6a67 	vneg.f32	s13, s15
 80044e6:	4b7d      	ldr	r3, [pc, #500]	@ (80046dc <MadgwickAHRSupdate+0xf00>)
 80044e8:	edd3 7a00 	vldr	s15, [r3]
 80044ec:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80044f0:	4b78      	ldr	r3, [pc, #480]	@ (80046d4 <MadgwickAHRSupdate+0xef8>)
 80044f2:	ed93 6a00 	vldr	s12, [r3]
 80044f6:	4b78      	ldr	r3, [pc, #480]	@ (80046d8 <MadgwickAHRSupdate+0xefc>)
 80044f8:	edd3 7a00 	vldr	s15, [r3]
 80044fc:	ee66 7a27 	vmul.f32	s15, s12, s15
 8004500:	ee76 6aa7 	vadd.f32	s13, s13, s15
						* (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2)
 8004504:	4b7e      	ldr	r3, [pc, #504]	@ (8004700 <MadgwickAHRSupdate+0xf24>)
 8004506:	edd3 7a00 	vldr	s15, [r3]
 800450a:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 800450e:	ee36 6a67 	vsub.f32	s12, s12, s15
 8004512:	4b6c      	ldr	r3, [pc, #432]	@ (80046c4 <MadgwickAHRSupdate+0xee8>)
 8004514:	edd3 7a00 	vldr	s15, [r3]
 8004518:	ee36 6a67 	vsub.f32	s12, s12, s15
 800451c:	4b6a      	ldr	r3, [pc, #424]	@ (80046c8 <MadgwickAHRSupdate+0xeec>)
 800451e:	edd3 7a00 	vldr	s15, [r3]
 8004522:	ee26 6a27 	vmul.f32	s12, s12, s15
 8004526:	4b69      	ldr	r3, [pc, #420]	@ (80046cc <MadgwickAHRSupdate+0xef0>)
 8004528:	edd3 5a00 	vldr	s11, [r3]
 800452c:	4b68      	ldr	r3, [pc, #416]	@ (80046d0 <MadgwickAHRSupdate+0xef4>)
 800452e:	edd3 7a00 	vldr	s15, [r3]
 8004532:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8004536:	4b67      	ldr	r3, [pc, #412]	@ (80046d4 <MadgwickAHRSupdate+0xef8>)
 8004538:	edd3 7a00 	vldr	s15, [r3]
 800453c:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8004540:	ee36 6a27 	vadd.f32	s12, s12, s15
								- mx)
 8004544:	edd7 7a03 	vldr	s15, [r7, #12]
 8004548:	ee76 7a67 	vsub.f32	s15, s12, s15
						* (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2)
 800454c:	ee66 7aa7 	vmul.f32	s15, s13, s15
				+ (-_4bx * q3 + _2bz * q1)
 8004550:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ (-_2bx * q0 + _2bz * q2)
 8004554:	4b5c      	ldr	r3, [pc, #368]	@ (80046c8 <MadgwickAHRSupdate+0xeec>)
 8004556:	edd3 7a00 	vldr	s15, [r3]
 800455a:	eef1 6a67 	vneg.f32	s13, s15
 800455e:	4b64      	ldr	r3, [pc, #400]	@ (80046f0 <MadgwickAHRSupdate+0xf14>)
 8004560:	edd3 7a00 	vldr	s15, [r3]
 8004564:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004568:	4b5a      	ldr	r3, [pc, #360]	@ (80046d4 <MadgwickAHRSupdate+0xef8>)
 800456a:	ed93 6a00 	vldr	s12, [r3]
 800456e:	4b62      	ldr	r3, [pc, #392]	@ (80046f8 <MadgwickAHRSupdate+0xf1c>)
 8004570:	edd3 7a00 	vldr	s15, [r3]
 8004574:	ee66 7a27 	vmul.f32	s15, s12, s15
 8004578:	ee76 6aa7 	vadd.f32	s13, s13, s15
						* (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my)
 800457c:	4b58      	ldr	r3, [pc, #352]	@ (80046e0 <MadgwickAHRSupdate+0xf04>)
 800457e:	ed93 6a00 	vldr	s12, [r3]
 8004582:	4b58      	ldr	r3, [pc, #352]	@ (80046e4 <MadgwickAHRSupdate+0xf08>)
 8004584:	edd3 7a00 	vldr	s15, [r3]
 8004588:	ee36 6a67 	vsub.f32	s12, s12, s15
 800458c:	4b4e      	ldr	r3, [pc, #312]	@ (80046c8 <MadgwickAHRSupdate+0xeec>)
 800458e:	edd3 7a00 	vldr	s15, [r3]
 8004592:	ee26 6a27 	vmul.f32	s12, s12, s15
 8004596:	4b54      	ldr	r3, [pc, #336]	@ (80046e8 <MadgwickAHRSupdate+0xf0c>)
 8004598:	edd3 5a00 	vldr	s11, [r3]
 800459c:	4b53      	ldr	r3, [pc, #332]	@ (80046ec <MadgwickAHRSupdate+0xf10>)
 800459e:	edd3 7a00 	vldr	s15, [r3]
 80045a2:	ee75 5aa7 	vadd.f32	s11, s11, s15
 80045a6:	4b4b      	ldr	r3, [pc, #300]	@ (80046d4 <MadgwickAHRSupdate+0xef8>)
 80045a8:	edd3 7a00 	vldr	s15, [r3]
 80045ac:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80045b0:	ee36 6a27 	vadd.f32	s12, s12, s15
 80045b4:	edd7 7a02 	vldr	s15, [r7, #8]
 80045b8:	ee76 7a67 	vsub.f32	s15, s12, s15
 80045bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
				+ (-_2bx * q0 + _2bz * q2)
 80045c0:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ _2bx * q1
 80045c4:	4b40      	ldr	r3, [pc, #256]	@ (80046c8 <MadgwickAHRSupdate+0xeec>)
 80045c6:	edd3 6a00 	vldr	s13, [r3]
 80045ca:	4b43      	ldr	r3, [pc, #268]	@ (80046d8 <MadgwickAHRSupdate+0xefc>)
 80045cc:	edd3 7a00 	vldr	s15, [r3]
 80045d0:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2)
 80045d4:	4b3e      	ldr	r3, [pc, #248]	@ (80046d0 <MadgwickAHRSupdate+0xef4>)
 80045d6:	ed93 6a00 	vldr	s12, [r3]
 80045da:	4b3c      	ldr	r3, [pc, #240]	@ (80046cc <MadgwickAHRSupdate+0xef0>)
 80045dc:	edd3 7a00 	vldr	s15, [r3]
 80045e0:	ee36 6a27 	vadd.f32	s12, s12, s15
 80045e4:	4b38      	ldr	r3, [pc, #224]	@ (80046c8 <MadgwickAHRSupdate+0xeec>)
 80045e6:	edd3 7a00 	vldr	s15, [r3]
 80045ea:	ee26 6a27 	vmul.f32	s12, s12, s15
 80045ee:	4b43      	ldr	r3, [pc, #268]	@ (80046fc <MadgwickAHRSupdate+0xf20>)
 80045f0:	edd3 7a00 	vldr	s15, [r3]
 80045f4:	eef6 5a00 	vmov.f32	s11, #96	@ 0x3f000000  0.5
 80045f8:	ee75 5ae7 	vsub.f32	s11, s11, s15
 80045fc:	4b40      	ldr	r3, [pc, #256]	@ (8004700 <MadgwickAHRSupdate+0xf24>)
 80045fe:	edd3 7a00 	vldr	s15, [r3]
 8004602:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8004606:	4b33      	ldr	r3, [pc, #204]	@ (80046d4 <MadgwickAHRSupdate+0xef8>)
 8004608:	edd3 7a00 	vldr	s15, [r3]
 800460c:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8004610:	ee36 6a27 	vadd.f32	s12, s12, s15
								- mz);
 8004614:	edd7 7a01 	vldr	s15, [r7, #4]
 8004618:	ee76 7a67 	vsub.f32	s15, s12, s15
						* (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2)
 800461c:	ee66 7aa7 	vmul.f32	s15, s13, s15
				+ _2bx * q1
 8004620:	ee77 7a27 	vadd.f32	s15, s14, s15
		s3 = _2q1 * (2.0f * q1q3 - _2q0q2 - ax)
 8004624:	4b3d      	ldr	r3, [pc, #244]	@ (800471c <MadgwickAHRSupdate+0xf40>)
 8004626:	edc3 7a00 	vstr	s15, [r3]
		recipNorm = invSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3); // normalise step magnitude
 800462a:	4b3d      	ldr	r3, [pc, #244]	@ (8004720 <MadgwickAHRSupdate+0xf44>)
 800462c:	ed93 7a00 	vldr	s14, [r3]
 8004630:	4b3b      	ldr	r3, [pc, #236]	@ (8004720 <MadgwickAHRSupdate+0xf44>)
 8004632:	edd3 7a00 	vldr	s15, [r3]
 8004636:	ee27 7a27 	vmul.f32	s14, s14, s15
 800463a:	4b3a      	ldr	r3, [pc, #232]	@ (8004724 <MadgwickAHRSupdate+0xf48>)
 800463c:	edd3 6a00 	vldr	s13, [r3]
 8004640:	4b38      	ldr	r3, [pc, #224]	@ (8004724 <MadgwickAHRSupdate+0xf48>)
 8004642:	edd3 7a00 	vldr	s15, [r3]
 8004646:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800464a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800464e:	4b2d      	ldr	r3, [pc, #180]	@ (8004704 <MadgwickAHRSupdate+0xf28>)
 8004650:	edd3 6a00 	vldr	s13, [r3]
 8004654:	4b2b      	ldr	r3, [pc, #172]	@ (8004704 <MadgwickAHRSupdate+0xf28>)
 8004656:	edd3 7a00 	vldr	s15, [r3]
 800465a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800465e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004662:	4b2e      	ldr	r3, [pc, #184]	@ (800471c <MadgwickAHRSupdate+0xf40>)
 8004664:	edd3 6a00 	vldr	s13, [r3]
 8004668:	4b2c      	ldr	r3, [pc, #176]	@ (800471c <MadgwickAHRSupdate+0xf40>)
 800466a:	edd3 7a00 	vldr	s15, [r3]
 800466e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004672:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004676:	eeb0 0a67 	vmov.f32	s0, s15
 800467a:	f7ff f805 	bl	8003688 <invSqrt>
 800467e:	eef0 7a40 	vmov.f32	s15, s0
 8004682:	4b29      	ldr	r3, [pc, #164]	@ (8004728 <MadgwickAHRSupdate+0xf4c>)
 8004684:	edc3 7a00 	vstr	s15, [r3]
		s0 *= recipNorm;
 8004688:	4b25      	ldr	r3, [pc, #148]	@ (8004720 <MadgwickAHRSupdate+0xf44>)
 800468a:	ed93 7a00 	vldr	s14, [r3]
 800468e:	4b26      	ldr	r3, [pc, #152]	@ (8004728 <MadgwickAHRSupdate+0xf4c>)
 8004690:	edd3 7a00 	vldr	s15, [r3]
 8004694:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004698:	4b21      	ldr	r3, [pc, #132]	@ (8004720 <MadgwickAHRSupdate+0xf44>)
 800469a:	edc3 7a00 	vstr	s15, [r3]
		s1 *= recipNorm;
 800469e:	4b21      	ldr	r3, [pc, #132]	@ (8004724 <MadgwickAHRSupdate+0xf48>)
 80046a0:	ed93 7a00 	vldr	s14, [r3]
 80046a4:	4b20      	ldr	r3, [pc, #128]	@ (8004728 <MadgwickAHRSupdate+0xf4c>)
 80046a6:	edd3 7a00 	vldr	s15, [r3]
 80046aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046ae:	4b1d      	ldr	r3, [pc, #116]	@ (8004724 <MadgwickAHRSupdate+0xf48>)
 80046b0:	edc3 7a00 	vstr	s15, [r3]
		s2 *= recipNorm;
 80046b4:	4b13      	ldr	r3, [pc, #76]	@ (8004704 <MadgwickAHRSupdate+0xf28>)
 80046b6:	ed93 7a00 	vldr	s14, [r3]
 80046ba:	4b1b      	ldr	r3, [pc, #108]	@ (8004728 <MadgwickAHRSupdate+0xf4c>)
 80046bc:	edd3 7a00 	vldr	s15, [r3]
 80046c0:	e034      	b.n	800472c <MadgwickAHRSupdate+0xf50>
 80046c2:	bf00      	nop
 80046c4:	20000450 	.word	0x20000450
 80046c8:	20000404 	.word	0x20000404
 80046cc:	20000444 	.word	0x20000444
 80046d0:	20000434 	.word	0x20000434
 80046d4:	20000408 	.word	0x20000408
 80046d8:	20000478 	.word	0x20000478
 80046dc:	20000480 	.word	0x20000480
 80046e0:	20000440 	.word	0x20000440
 80046e4:	20000438 	.word	0x20000438
 80046e8:	20000430 	.word	0x20000430
 80046ec:	2000044c 	.word	0x2000044c
 80046f0:	20000008 	.word	0x20000008
 80046f4:	20000410 	.word	0x20000410
 80046f8:	2000047c 	.word	0x2000047c
 80046fc:	2000043c 	.word	0x2000043c
 8004700:	20000448 	.word	0x20000448
 8004704:	200003d4 	.word	0x200003d4
 8004708:	20000424 	.word	0x20000424
 800470c:	20000418 	.word	0x20000418
 8004710:	20000428 	.word	0x20000428
 8004714:	2000041c 	.word	0x2000041c
 8004718:	2000040c 	.word	0x2000040c
 800471c:	200003d8 	.word	0x200003d8
 8004720:	200003cc 	.word	0x200003cc
 8004724:	200003d0 	.word	0x200003d0
 8004728:	200003c8 	.word	0x200003c8
 800472c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004730:	4b76      	ldr	r3, [pc, #472]	@ (800490c <MadgwickAHRSupdate+0x1130>)
 8004732:	edc3 7a00 	vstr	s15, [r3]
		s3 *= recipNorm;
 8004736:	4b76      	ldr	r3, [pc, #472]	@ (8004910 <MadgwickAHRSupdate+0x1134>)
 8004738:	ed93 7a00 	vldr	s14, [r3]
 800473c:	4b75      	ldr	r3, [pc, #468]	@ (8004914 <MadgwickAHRSupdate+0x1138>)
 800473e:	edd3 7a00 	vldr	s15, [r3]
 8004742:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004746:	4b72      	ldr	r3, [pc, #456]	@ (8004910 <MadgwickAHRSupdate+0x1134>)
 8004748:	edc3 7a00 	vstr	s15, [r3]

		qDot1 -= beta * s0;
 800474c:	4b72      	ldr	r3, [pc, #456]	@ (8004918 <MadgwickAHRSupdate+0x113c>)
 800474e:	ed93 7a00 	vldr	s14, [r3]
 8004752:	4b72      	ldr	r3, [pc, #456]	@ (800491c <MadgwickAHRSupdate+0x1140>)
 8004754:	edd3 7a00 	vldr	s15, [r3]
 8004758:	ee67 7a27 	vmul.f32	s15, s14, s15
 800475c:	4b70      	ldr	r3, [pc, #448]	@ (8004920 <MadgwickAHRSupdate+0x1144>)
 800475e:	ed93 7a00 	vldr	s14, [r3]
 8004762:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004766:	4b6e      	ldr	r3, [pc, #440]	@ (8004920 <MadgwickAHRSupdate+0x1144>)
 8004768:	edc3 7a00 	vstr	s15, [r3]
		qDot2 -= beta * s1;
 800476c:	4b6a      	ldr	r3, [pc, #424]	@ (8004918 <MadgwickAHRSupdate+0x113c>)
 800476e:	ed93 7a00 	vldr	s14, [r3]
 8004772:	4b6c      	ldr	r3, [pc, #432]	@ (8004924 <MadgwickAHRSupdate+0x1148>)
 8004774:	edd3 7a00 	vldr	s15, [r3]
 8004778:	ee67 7a27 	vmul.f32	s15, s14, s15
 800477c:	4b6a      	ldr	r3, [pc, #424]	@ (8004928 <MadgwickAHRSupdate+0x114c>)
 800477e:	ed93 7a00 	vldr	s14, [r3]
 8004782:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004786:	4b68      	ldr	r3, [pc, #416]	@ (8004928 <MadgwickAHRSupdate+0x114c>)
 8004788:	edc3 7a00 	vstr	s15, [r3]
		qDot3 -= beta * s2;
 800478c:	4b62      	ldr	r3, [pc, #392]	@ (8004918 <MadgwickAHRSupdate+0x113c>)
 800478e:	ed93 7a00 	vldr	s14, [r3]
 8004792:	4b5e      	ldr	r3, [pc, #376]	@ (800490c <MadgwickAHRSupdate+0x1130>)
 8004794:	edd3 7a00 	vldr	s15, [r3]
 8004798:	ee67 7a27 	vmul.f32	s15, s14, s15
 800479c:	4b63      	ldr	r3, [pc, #396]	@ (800492c <MadgwickAHRSupdate+0x1150>)
 800479e:	ed93 7a00 	vldr	s14, [r3]
 80047a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80047a6:	4b61      	ldr	r3, [pc, #388]	@ (800492c <MadgwickAHRSupdate+0x1150>)
 80047a8:	edc3 7a00 	vstr	s15, [r3]
		qDot4 -= beta * s3;
 80047ac:	4b5a      	ldr	r3, [pc, #360]	@ (8004918 <MadgwickAHRSupdate+0x113c>)
 80047ae:	ed93 7a00 	vldr	s14, [r3]
 80047b2:	4b57      	ldr	r3, [pc, #348]	@ (8004910 <MadgwickAHRSupdate+0x1134>)
 80047b4:	edd3 7a00 	vldr	s15, [r3]
 80047b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047bc:	4b5c      	ldr	r3, [pc, #368]	@ (8004930 <MadgwickAHRSupdate+0x1154>)
 80047be:	ed93 7a00 	vldr	s14, [r3]
 80047c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80047c6:	4b5a      	ldr	r3, [pc, #360]	@ (8004930 <MadgwickAHRSupdate+0x1154>)
 80047c8:	edc3 7a00 	vstr	s15, [r3]
	}

	q0 += qDot1 * (deltat);
 80047cc:	4b54      	ldr	r3, [pc, #336]	@ (8004920 <MadgwickAHRSupdate+0x1144>)
 80047ce:	ed93 7a00 	vldr	s14, [r3]
 80047d2:	4b58      	ldr	r3, [pc, #352]	@ (8004934 <MadgwickAHRSupdate+0x1158>)
 80047d4:	edd3 7a00 	vldr	s15, [r3]
 80047d8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80047dc:	4b56      	ldr	r3, [pc, #344]	@ (8004938 <MadgwickAHRSupdate+0x115c>)
 80047de:	edd3 7a00 	vldr	s15, [r3]
 80047e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80047e6:	4b54      	ldr	r3, [pc, #336]	@ (8004938 <MadgwickAHRSupdate+0x115c>)
 80047e8:	edc3 7a00 	vstr	s15, [r3]
	q1 += qDot2 * (deltat);
 80047ec:	4b4e      	ldr	r3, [pc, #312]	@ (8004928 <MadgwickAHRSupdate+0x114c>)
 80047ee:	ed93 7a00 	vldr	s14, [r3]
 80047f2:	4b50      	ldr	r3, [pc, #320]	@ (8004934 <MadgwickAHRSupdate+0x1158>)
 80047f4:	edd3 7a00 	vldr	s15, [r3]
 80047f8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80047fc:	4b4f      	ldr	r3, [pc, #316]	@ (800493c <MadgwickAHRSupdate+0x1160>)
 80047fe:	edd3 7a00 	vldr	s15, [r3]
 8004802:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004806:	4b4d      	ldr	r3, [pc, #308]	@ (800493c <MadgwickAHRSupdate+0x1160>)
 8004808:	edc3 7a00 	vstr	s15, [r3]
	q2 += qDot3 * (deltat);
 800480c:	4b47      	ldr	r3, [pc, #284]	@ (800492c <MadgwickAHRSupdate+0x1150>)
 800480e:	ed93 7a00 	vldr	s14, [r3]
 8004812:	4b48      	ldr	r3, [pc, #288]	@ (8004934 <MadgwickAHRSupdate+0x1158>)
 8004814:	edd3 7a00 	vldr	s15, [r3]
 8004818:	ee27 7a27 	vmul.f32	s14, s14, s15
 800481c:	4b48      	ldr	r3, [pc, #288]	@ (8004940 <MadgwickAHRSupdate+0x1164>)
 800481e:	edd3 7a00 	vldr	s15, [r3]
 8004822:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004826:	4b46      	ldr	r3, [pc, #280]	@ (8004940 <MadgwickAHRSupdate+0x1164>)
 8004828:	edc3 7a00 	vstr	s15, [r3]
	q3 += qDot4 * (deltat);
 800482c:	4b40      	ldr	r3, [pc, #256]	@ (8004930 <MadgwickAHRSupdate+0x1154>)
 800482e:	ed93 7a00 	vldr	s14, [r3]
 8004832:	4b40      	ldr	r3, [pc, #256]	@ (8004934 <MadgwickAHRSupdate+0x1158>)
 8004834:	edd3 7a00 	vldr	s15, [r3]
 8004838:	ee27 7a27 	vmul.f32	s14, s14, s15
 800483c:	4b41      	ldr	r3, [pc, #260]	@ (8004944 <MadgwickAHRSupdate+0x1168>)
 800483e:	edd3 7a00 	vldr	s15, [r3]
 8004842:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004846:	4b3f      	ldr	r3, [pc, #252]	@ (8004944 <MadgwickAHRSupdate+0x1168>)
 8004848:	edc3 7a00 	vstr	s15, [r3]

	recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 800484c:	4b3a      	ldr	r3, [pc, #232]	@ (8004938 <MadgwickAHRSupdate+0x115c>)
 800484e:	ed93 7a00 	vldr	s14, [r3]
 8004852:	4b39      	ldr	r3, [pc, #228]	@ (8004938 <MadgwickAHRSupdate+0x115c>)
 8004854:	edd3 7a00 	vldr	s15, [r3]
 8004858:	ee27 7a27 	vmul.f32	s14, s14, s15
 800485c:	4b37      	ldr	r3, [pc, #220]	@ (800493c <MadgwickAHRSupdate+0x1160>)
 800485e:	edd3 6a00 	vldr	s13, [r3]
 8004862:	4b36      	ldr	r3, [pc, #216]	@ (800493c <MadgwickAHRSupdate+0x1160>)
 8004864:	edd3 7a00 	vldr	s15, [r3]
 8004868:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800486c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004870:	4b33      	ldr	r3, [pc, #204]	@ (8004940 <MadgwickAHRSupdate+0x1164>)
 8004872:	edd3 6a00 	vldr	s13, [r3]
 8004876:	4b32      	ldr	r3, [pc, #200]	@ (8004940 <MadgwickAHRSupdate+0x1164>)
 8004878:	edd3 7a00 	vldr	s15, [r3]
 800487c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004880:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004884:	4b2f      	ldr	r3, [pc, #188]	@ (8004944 <MadgwickAHRSupdate+0x1168>)
 8004886:	edd3 6a00 	vldr	s13, [r3]
 800488a:	4b2e      	ldr	r3, [pc, #184]	@ (8004944 <MadgwickAHRSupdate+0x1168>)
 800488c:	edd3 7a00 	vldr	s15, [r3]
 8004890:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004894:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004898:	eeb0 0a67 	vmov.f32	s0, s15
 800489c:	f7fe fef4 	bl	8003688 <invSqrt>
 80048a0:	eef0 7a40 	vmov.f32	s15, s0
 80048a4:	4b1b      	ldr	r3, [pc, #108]	@ (8004914 <MadgwickAHRSupdate+0x1138>)
 80048a6:	edc3 7a00 	vstr	s15, [r3]
	q0 *= recipNorm;
 80048aa:	4b23      	ldr	r3, [pc, #140]	@ (8004938 <MadgwickAHRSupdate+0x115c>)
 80048ac:	ed93 7a00 	vldr	s14, [r3]
 80048b0:	4b18      	ldr	r3, [pc, #96]	@ (8004914 <MadgwickAHRSupdate+0x1138>)
 80048b2:	edd3 7a00 	vldr	s15, [r3]
 80048b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048ba:	4b1f      	ldr	r3, [pc, #124]	@ (8004938 <MadgwickAHRSupdate+0x115c>)
 80048bc:	edc3 7a00 	vstr	s15, [r3]
	q1 *= recipNorm;
 80048c0:	4b1e      	ldr	r3, [pc, #120]	@ (800493c <MadgwickAHRSupdate+0x1160>)
 80048c2:	ed93 7a00 	vldr	s14, [r3]
 80048c6:	4b13      	ldr	r3, [pc, #76]	@ (8004914 <MadgwickAHRSupdate+0x1138>)
 80048c8:	edd3 7a00 	vldr	s15, [r3]
 80048cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048d0:	4b1a      	ldr	r3, [pc, #104]	@ (800493c <MadgwickAHRSupdate+0x1160>)
 80048d2:	edc3 7a00 	vstr	s15, [r3]
	q2 *= recipNorm;
 80048d6:	4b1a      	ldr	r3, [pc, #104]	@ (8004940 <MadgwickAHRSupdate+0x1164>)
 80048d8:	ed93 7a00 	vldr	s14, [r3]
 80048dc:	4b0d      	ldr	r3, [pc, #52]	@ (8004914 <MadgwickAHRSupdate+0x1138>)
 80048de:	edd3 7a00 	vldr	s15, [r3]
 80048e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048e6:	4b16      	ldr	r3, [pc, #88]	@ (8004940 <MadgwickAHRSupdate+0x1164>)
 80048e8:	edc3 7a00 	vstr	s15, [r3]
	q3 *= recipNorm;
 80048ec:	4b15      	ldr	r3, [pc, #84]	@ (8004944 <MadgwickAHRSupdate+0x1168>)
 80048ee:	ed93 7a00 	vldr	s14, [r3]
 80048f2:	4b08      	ldr	r3, [pc, #32]	@ (8004914 <MadgwickAHRSupdate+0x1138>)
 80048f4:	edd3 7a00 	vldr	s15, [r3]
 80048f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048fc:	4b11      	ldr	r3, [pc, #68]	@ (8004944 <MadgwickAHRSupdate+0x1168>)
 80048fe:	edc3 7a00 	vstr	s15, [r3]
}
 8004902:	bf00      	nop
 8004904:	3728      	adds	r7, #40	@ 0x28
 8004906:	46bd      	mov	sp, r7
 8004908:	bd80      	pop	{r7, pc}
 800490a:	bf00      	nop
 800490c:	200003d4 	.word	0x200003d4
 8004910:	200003d8 	.word	0x200003d8
 8004914:	200003c8 	.word	0x200003c8
 8004918:	2000000c 	.word	0x2000000c
 800491c:	200003cc 	.word	0x200003cc
 8004920:	200003dc 	.word	0x200003dc
 8004924:	200003d0 	.word	0x200003d0
 8004928:	200003e0 	.word	0x200003e0
 800492c:	200003e4 	.word	0x200003e4
 8004930:	200003e8 	.word	0x200003e8
 8004934:	20000484 	.word	0x20000484
 8004938:	20000008 	.word	0x20000008
 800493c:	20000478 	.word	0x20000478
 8004940:	2000047c 	.word	0x2000047c
 8004944:	20000480 	.word	0x20000480

08004948 <LSM9DS1_ReadGyro_DMA>:

//low_power_code
void LSM9DS1_ReadGyro_DMA(void) {
 8004948:	b580      	push	{r7, lr}
 800494a:	b082      	sub	sp, #8
 800494c:	af02      	add	r7, sp, #8
	HAL_I2C_Mem_Read_DMA(&hi2c1, LSM9DS1_ADDR, OUT_X_G | 0x80,
 800494e:	2306      	movs	r3, #6
 8004950:	9301      	str	r3, [sp, #4]
 8004952:	4b05      	ldr	r3, [pc, #20]	@ (8004968 <LSM9DS1_ReadGyro_DMA+0x20>)
 8004954:	9300      	str	r3, [sp, #0]
 8004956:	2301      	movs	r3, #1
 8004958:	2298      	movs	r2, #152	@ 0x98
 800495a:	21d4      	movs	r1, #212	@ 0xd4
 800495c:	4803      	ldr	r0, [pc, #12]	@ (800496c <LSM9DS1_ReadGyro_DMA+0x24>)
 800495e:	f003 fd83 	bl	8008468 <HAL_I2C_Mem_Read_DMA>
	I2C_MEMADD_SIZE_8BIT, gyro_buffer, 6);
}
 8004962:	bf00      	nop
 8004964:	46bd      	mov	sp, r7
 8004966:	bd80      	pop	{r7, pc}
 8004968:	20000350 	.word	0x20000350
 800496c:	200001f0 	.word	0x200001f0

08004970 <LSM9DS1_ReadAccel_DMA>:

void LSM9DS1_ReadAccel_DMA(void) {
 8004970:	b580      	push	{r7, lr}
 8004972:	b082      	sub	sp, #8
 8004974:	af02      	add	r7, sp, #8
	HAL_I2C_Mem_Read_DMA(&hi2c1, LSM9DS1_ADDR, OUT_X_XL | 0x80,
 8004976:	2306      	movs	r3, #6
 8004978:	9301      	str	r3, [sp, #4]
 800497a:	4b05      	ldr	r3, [pc, #20]	@ (8004990 <LSM9DS1_ReadAccel_DMA+0x20>)
 800497c:	9300      	str	r3, [sp, #0]
 800497e:	2301      	movs	r3, #1
 8004980:	22a8      	movs	r2, #168	@ 0xa8
 8004982:	21d4      	movs	r1, #212	@ 0xd4
 8004984:	4803      	ldr	r0, [pc, #12]	@ (8004994 <LSM9DS1_ReadAccel_DMA+0x24>)
 8004986:	f003 fd6f 	bl	8008468 <HAL_I2C_Mem_Read_DMA>
	I2C_MEMADD_SIZE_8BIT, accel_buffer, 6);
}
 800498a:	bf00      	nop
 800498c:	46bd      	mov	sp, r7
 800498e:	bd80      	pop	{r7, pc}
 8004990:	20000358 	.word	0x20000358
 8004994:	200001f0 	.word	0x200001f0

08004998 <LSM9DS1_ReadMag_DMA>:

void LSM9DS1_ReadMag_DMA(void) {
 8004998:	b580      	push	{r7, lr}
 800499a:	b082      	sub	sp, #8
 800499c:	af02      	add	r7, sp, #8
	HAL_I2C_Mem_Read_DMA(&hi2c1, MAG_ADDR, OUT_X_M | 0x80, I2C_MEMADD_SIZE_8BIT,
 800499e:	2306      	movs	r3, #6
 80049a0:	9301      	str	r3, [sp, #4]
 80049a2:	4b05      	ldr	r3, [pc, #20]	@ (80049b8 <LSM9DS1_ReadMag_DMA+0x20>)
 80049a4:	9300      	str	r3, [sp, #0]
 80049a6:	2301      	movs	r3, #1
 80049a8:	22a8      	movs	r2, #168	@ 0xa8
 80049aa:	213c      	movs	r1, #60	@ 0x3c
 80049ac:	4803      	ldr	r0, [pc, #12]	@ (80049bc <LSM9DS1_ReadMag_DMA+0x24>)
 80049ae:	f003 fd5b 	bl	8008468 <HAL_I2C_Mem_Read_DMA>
			mag_buffer, 6);
}
 80049b2:	bf00      	nop
 80049b4:	46bd      	mov	sp, r7
 80049b6:	bd80      	pop	{r7, pc}
 80049b8:	20000360 	.word	0x20000360
 80049bc:	200001f0 	.word	0x200001f0

080049c0 <magcal_Init>:

void magcal_Init(void) {
 80049c0:	b580      	push	{r7, lr}
 80049c2:	af00      	add	r7, sp, #0
	memset(&magcal, 0, sizeof(magcal));
 80049c4:	f241 52e4 	movw	r2, #5604	@ 0x15e4
 80049c8:	2100      	movs	r1, #0
 80049ca:	480e      	ldr	r0, [pc, #56]	@ (8004a04 <magcal_Init+0x44>)
 80049cc:	f00b fc15 	bl	80101fa <memset>
	magcal.V[2] = 80.0f;
 80049d0:	4b0c      	ldr	r3, [pc, #48]	@ (8004a04 <magcal_Init+0x44>)
 80049d2:	4a0d      	ldr	r2, [pc, #52]	@ (8004a08 <magcal_Init+0x48>)
 80049d4:	609a      	str	r2, [r3, #8]
	magcal.invW[0][0] = 1.0f;
 80049d6:	4b0b      	ldr	r3, [pc, #44]	@ (8004a04 <magcal_Init+0x44>)
 80049d8:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80049dc:	60da      	str	r2, [r3, #12]
	magcal.invW[1][1] = 1.0f;
 80049de:	4b09      	ldr	r3, [pc, #36]	@ (8004a04 <magcal_Init+0x44>)
 80049e0:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80049e4:	61da      	str	r2, [r3, #28]
	magcal.invW[2][2] = 1.0f;
 80049e6:	4b07      	ldr	r3, [pc, #28]	@ (8004a04 <magcal_Init+0x44>)
 80049e8:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80049ec:	62da      	str	r2, [r3, #44]	@ 0x2c
	magcal.FitError = 100.0f;
 80049ee:	4b05      	ldr	r3, [pc, #20]	@ (8004a04 <magcal_Init+0x44>)
 80049f0:	4a06      	ldr	r2, [pc, #24]	@ (8004a0c <magcal_Init+0x4c>)
 80049f2:	639a      	str	r2, [r3, #56]	@ 0x38
	magcal.FitErrorAge = 100.0f;
 80049f4:	4b03      	ldr	r3, [pc, #12]	@ (8004a04 <magcal_Init+0x44>)
 80049f6:	4a05      	ldr	r2, [pc, #20]	@ (8004a0c <magcal_Init+0x4c>)
 80049f8:	63da      	str	r2, [r3, #60]	@ 0x3c
	magcal.B = 50.0f;
 80049fa:	4b02      	ldr	r3, [pc, #8]	@ (8004a04 <magcal_Init+0x44>)
 80049fc:	4a04      	ldr	r2, [pc, #16]	@ (8004a10 <magcal_Init+0x50>)
 80049fe:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004a00:	bf00      	nop
 8004a02:	bd80      	pop	{r7, pc}
 8004a04:	200004e8 	.word	0x200004e8
 8004a08:	42a00000 	.word	0x42a00000
 8004a0c:	42c80000 	.word	0x42c80000
 8004a10:	42480000 	.word	0x42480000

08004a14 <choose_discard_magcal>:

static int choose_discard_magcal(void) {
 8004a14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a18:	b091      	sub	sp, #68	@ 0x44
 8004a1a:	af00      	add	r7, sp, #0

	// When enough data is collected (gaps error is low), assume we
	// have a pretty good coverage and the field stregth is known.
	gaps = quality_surface_gap_error();
 8004a1c:	f002 f930 	bl	8006c80 <quality_surface_gap_error>
 8004a20:	eef0 7a40 	vmov.f32	s15, s0
 8004a24:	4b6b      	ldr	r3, [pc, #428]	@ (8004bd4 <choose_discard_magcal+0x1c0>)
 8004a26:	edc3 7a00 	vstr	s15, [r3]
	if (gaps < 25.0f)
 8004a2a:	4b6a      	ldr	r3, [pc, #424]	@ (8004bd4 <choose_discard_magcal+0x1c0>)
 8004a2c:	edd3 7a00 	vldr	s15, [r3]
 8004a30:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 8004a34:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004a38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a3c:	f140 80bc 	bpl.w	8004bb8 <choose_discard_magcal+0x1a4>
	{
		// occasionally look for points farthest from average field strength
		// always rate limit assumption-based data purging, but allow the
		// rate to increase as the angular coverage improves.
		if (gaps < 1.0f)
 8004a40:	4b64      	ldr	r3, [pc, #400]	@ (8004bd4 <choose_discard_magcal+0x1c0>)
 8004a42:	edd3 7a00 	vldr	s15, [r3]
 8004a46:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004a4a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004a4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a52:	d503      	bpl.n	8004a5c <choose_discard_magcal+0x48>
			gaps = 1.0f;
 8004a54:	4a5f      	ldr	r2, [pc, #380]	@ (8004bd4 <choose_discard_magcal+0x1c0>)
 8004a56:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8004a5a:	6013      	str	r3, [r2, #0]
		if (++runcount > (int) (gaps * 10.0f))
 8004a5c:	4b5e      	ldr	r3, [pc, #376]	@ (8004bd8 <choose_discard_magcal+0x1c4>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	1c5a      	adds	r2, r3, #1
 8004a62:	4b5d      	ldr	r3, [pc, #372]	@ (8004bd8 <choose_discard_magcal+0x1c4>)
 8004a64:	601a      	str	r2, [r3, #0]
 8004a66:	4b5c      	ldr	r3, [pc, #368]	@ (8004bd8 <choose_discard_magcal+0x1c4>)
 8004a68:	681a      	ldr	r2, [r3, #0]
 8004a6a:	4b5a      	ldr	r3, [pc, #360]	@ (8004bd4 <choose_discard_magcal+0x1c0>)
 8004a6c:	edd3 7a00 	vldr	s15, [r3]
 8004a70:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8004a74:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004a78:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004a7c:	ee17 3a90 	vmov	r3, s15
 8004a80:	429a      	cmp	r2, r3
 8004a82:	f340 809c 	ble.w	8004bbe <choose_discard_magcal+0x1aa>
		{
			j = MAGBUFFSIZE;
 8004a86:	4a55      	ldr	r2, [pc, #340]	@ (8004bdc <choose_discard_magcal+0x1c8>)
 8004a88:	f240 238a 	movw	r3, #650	@ 0x28a
 8004a8c:	6013      	str	r3, [r2, #0]
			errormax = 0.0f;
 8004a8e:	4a54      	ldr	r2, [pc, #336]	@ (8004be0 <choose_discard_magcal+0x1cc>)
 8004a90:	f04f 0300 	mov.w	r3, #0
 8004a94:	6013      	str	r3, [r2, #0]
			for (i = 0; i < MAGBUFFSIZE; i++)
 8004a96:	4a53      	ldr	r2, [pc, #332]	@ (8004be4 <choose_discard_magcal+0x1d0>)
 8004a98:	2300      	movs	r3, #0
 8004a9a:	6013      	str	r3, [r2, #0]
 8004a9c:	e079      	b.n	8004b92 <choose_discard_magcal+0x17e>
			{
				rawx = magcal.BpFast[0][i];
 8004a9e:	4b51      	ldr	r3, [pc, #324]	@ (8004be4 <choose_discard_magcal+0x1d0>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	4a51      	ldr	r2, [pc, #324]	@ (8004be8 <choose_discard_magcal+0x1d4>)
 8004aa4:	f503 7303 	add.w	r3, r3, #524	@ 0x20c
 8004aa8:	005b      	lsls	r3, r3, #1
 8004aaa:	4413      	add	r3, r2
 8004aac:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004ab0:	461a      	mov	r2, r3
 8004ab2:	4b4e      	ldr	r3, [pc, #312]	@ (8004bec <choose_discard_magcal+0x1d8>)
 8004ab4:	601a      	str	r2, [r3, #0]
				rawy = magcal.BpFast[1][i];
 8004ab6:	4b4b      	ldr	r3, [pc, #300]	@ (8004be4 <choose_discard_magcal+0x1d0>)
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4a4b      	ldr	r2, [pc, #300]	@ (8004be8 <choose_discard_magcal+0x1d4>)
 8004abc:	f203 4396 	addw	r3, r3, #1174	@ 0x496
 8004ac0:	005b      	lsls	r3, r3, #1
 8004ac2:	4413      	add	r3, r2
 8004ac4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004ac8:	461a      	mov	r2, r3
 8004aca:	4b49      	ldr	r3, [pc, #292]	@ (8004bf0 <choose_discard_magcal+0x1dc>)
 8004acc:	601a      	str	r2, [r3, #0]
				rawz = magcal.BpFast[2][i];
 8004ace:	4b45      	ldr	r3, [pc, #276]	@ (8004be4 <choose_discard_magcal+0x1d0>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	4a45      	ldr	r2, [pc, #276]	@ (8004be8 <choose_discard_magcal+0x1d4>)
 8004ad4:	f503 63e4 	add.w	r3, r3, #1824	@ 0x720
 8004ad8:	005b      	lsls	r3, r3, #1
 8004ada:	4413      	add	r3, r2
 8004adc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004ae0:	461a      	mov	r2, r3
 8004ae2:	4b44      	ldr	r3, [pc, #272]	@ (8004bf4 <choose_discard_magcal+0x1e0>)
 8004ae4:	601a      	str	r2, [r3, #0]
//				apply_calibration(rawx, rawy, rawz, &point);
				x = point.x;
 8004ae6:	4b44      	ldr	r3, [pc, #272]	@ (8004bf8 <choose_discard_magcal+0x1e4>)
 8004ae8:	681a      	ldr	r2, [r3, #0]
 8004aea:	4b44      	ldr	r3, [pc, #272]	@ (8004bfc <choose_discard_magcal+0x1e8>)
 8004aec:	601a      	str	r2, [r3, #0]
				y = point.y;
 8004aee:	4b42      	ldr	r3, [pc, #264]	@ (8004bf8 <choose_discard_magcal+0x1e4>)
 8004af0:	685a      	ldr	r2, [r3, #4]
 8004af2:	4b43      	ldr	r3, [pc, #268]	@ (8004c00 <choose_discard_magcal+0x1ec>)
 8004af4:	601a      	str	r2, [r3, #0]
				z = point.z;
 8004af6:	4b40      	ldr	r3, [pc, #256]	@ (8004bf8 <choose_discard_magcal+0x1e4>)
 8004af8:	689a      	ldr	r2, [r3, #8]
 8004afa:	4b42      	ldr	r3, [pc, #264]	@ (8004c04 <choose_discard_magcal+0x1f0>)
 8004afc:	601a      	str	r2, [r3, #0]
				field = sqrtf(x * x + y * y + z * z);
 8004afe:	4b3f      	ldr	r3, [pc, #252]	@ (8004bfc <choose_discard_magcal+0x1e8>)
 8004b00:	ed93 7a00 	vldr	s14, [r3]
 8004b04:	4b3d      	ldr	r3, [pc, #244]	@ (8004bfc <choose_discard_magcal+0x1e8>)
 8004b06:	edd3 7a00 	vldr	s15, [r3]
 8004b0a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004b0e:	4b3c      	ldr	r3, [pc, #240]	@ (8004c00 <choose_discard_magcal+0x1ec>)
 8004b10:	edd3 6a00 	vldr	s13, [r3]
 8004b14:	4b3a      	ldr	r3, [pc, #232]	@ (8004c00 <choose_discard_magcal+0x1ec>)
 8004b16:	edd3 7a00 	vldr	s15, [r3]
 8004b1a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004b1e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004b22:	4b38      	ldr	r3, [pc, #224]	@ (8004c04 <choose_discard_magcal+0x1f0>)
 8004b24:	edd3 6a00 	vldr	s13, [r3]
 8004b28:	4b36      	ldr	r3, [pc, #216]	@ (8004c04 <choose_discard_magcal+0x1f0>)
 8004b2a:	edd3 7a00 	vldr	s15, [r3]
 8004b2e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004b32:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004b36:	eeb0 0a67 	vmov.f32	s0, s15
 8004b3a:	f00c fa8d 	bl	8011058 <sqrtf>
 8004b3e:	eef0 7a40 	vmov.f32	s15, s0
 8004b42:	4b31      	ldr	r3, [pc, #196]	@ (8004c08 <choose_discard_magcal+0x1f4>)
 8004b44:	edc3 7a00 	vstr	s15, [r3]
				// if magcal.B is bad, things could go horribly wrong
				error = fabsf(field - magcal.B);
 8004b48:	4b2f      	ldr	r3, [pc, #188]	@ (8004c08 <choose_discard_magcal+0x1f4>)
 8004b4a:	ed93 7a00 	vldr	s14, [r3]
 8004b4e:	4b26      	ldr	r3, [pc, #152]	@ (8004be8 <choose_discard_magcal+0x1d4>)
 8004b50:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8004b54:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004b58:	eef0 7ae7 	vabs.f32	s15, s15
 8004b5c:	4b2b      	ldr	r3, [pc, #172]	@ (8004c0c <choose_discard_magcal+0x1f8>)
 8004b5e:	edc3 7a00 	vstr	s15, [r3]
				if (error > errormax) {
 8004b62:	4b2a      	ldr	r3, [pc, #168]	@ (8004c0c <choose_discard_magcal+0x1f8>)
 8004b64:	ed93 7a00 	vldr	s14, [r3]
 8004b68:	4b1d      	ldr	r3, [pc, #116]	@ (8004be0 <choose_discard_magcal+0x1cc>)
 8004b6a:	edd3 7a00 	vldr	s15, [r3]
 8004b6e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004b72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b76:	dd07      	ble.n	8004b88 <choose_discard_magcal+0x174>
					errormax = error;
 8004b78:	4b24      	ldr	r3, [pc, #144]	@ (8004c0c <choose_discard_magcal+0x1f8>)
 8004b7a:	681a      	ldr	r2, [r3, #0]
 8004b7c:	4b18      	ldr	r3, [pc, #96]	@ (8004be0 <choose_discard_magcal+0x1cc>)
 8004b7e:	601a      	str	r2, [r3, #0]
					j = i;
 8004b80:	4b18      	ldr	r3, [pc, #96]	@ (8004be4 <choose_discard_magcal+0x1d0>)
 8004b82:	681a      	ldr	r2, [r3, #0]
 8004b84:	4b15      	ldr	r3, [pc, #84]	@ (8004bdc <choose_discard_magcal+0x1c8>)
 8004b86:	601a      	str	r2, [r3, #0]
			for (i = 0; i < MAGBUFFSIZE; i++)
 8004b88:	4b16      	ldr	r3, [pc, #88]	@ (8004be4 <choose_discard_magcal+0x1d0>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	1c5a      	adds	r2, r3, #1
 8004b8e:	4b15      	ldr	r3, [pc, #84]	@ (8004be4 <choose_discard_magcal+0x1d0>)
 8004b90:	601a      	str	r2, [r3, #0]
 8004b92:	4b14      	ldr	r3, [pc, #80]	@ (8004be4 <choose_discard_magcal+0x1d0>)
 8004b94:	681a      	ldr	r2, [r3, #0]
 8004b96:	f240 2389 	movw	r3, #649	@ 0x289
 8004b9a:	429a      	cmp	r2, r3
 8004b9c:	f77f af7f 	ble.w	8004a9e <choose_discard_magcal+0x8a>
				}
			}
			runcount = 0;
 8004ba0:	4a0d      	ldr	r2, [pc, #52]	@ (8004bd8 <choose_discard_magcal+0x1c4>)
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	6013      	str	r3, [r2, #0]
			if (j < MAGBUFFSIZE)
 8004ba6:	4b0d      	ldr	r3, [pc, #52]	@ (8004bdc <choose_discard_magcal+0x1c8>)
 8004ba8:	681a      	ldr	r2, [r3, #0]
 8004baa:	f240 2389 	movw	r3, #649	@ 0x289
 8004bae:	429a      	cmp	r2, r3
 8004bb0:	dc05      	bgt.n	8004bbe <choose_discard_magcal+0x1aa>
			{
				//printf("worst error at %d\n", j);
				return j;
 8004bb2:	4b0a      	ldr	r3, [pc, #40]	@ (8004bdc <choose_discard_magcal+0x1c8>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	e11d      	b.n	8004df4 <choose_discard_magcal+0x3e0>
			}
		}
	}
	else
	{
		runcount = 0;
 8004bb8:	4a07      	ldr	r2, [pc, #28]	@ (8004bd8 <choose_discard_magcal+0x1c4>)
 8004bba:	2300      	movs	r3, #0
 8004bbc:	6013      	str	r3, [r2, #0]
	}

	for (i = 0; i < MAGBUFFSIZE; i++)
 8004bbe:	4a09      	ldr	r2, [pc, #36]	@ (8004be4 <choose_discard_magcal+0x1d0>)
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	6013      	str	r3, [r2, #0]
 8004bc4:	e10d      	b.n	8004de2 <choose_discard_magcal+0x3ce>
	{
		for (j = i + 1; j < MAGBUFFSIZE; j++) {
 8004bc6:	4b07      	ldr	r3, [pc, #28]	@ (8004be4 <choose_discard_magcal+0x1d0>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	1c5a      	adds	r2, r3, #1
 8004bcc:	4b03      	ldr	r3, [pc, #12]	@ (8004bdc <choose_discard_magcal+0x1c8>)
 8004bce:	601a      	str	r2, [r3, #0]
 8004bd0:	e0fb      	b.n	8004dca <choose_discard_magcal+0x3b6>
 8004bd2:	bf00      	nop
 8004bd4:	20001b1c 	.word	0x20001b1c
 8004bd8:	20001b00 	.word	0x20001b00
 8004bdc:	20001b08 	.word	0x20001b08
 8004be0:	20001b28 	.word	0x20001b28
 8004be4:	20001b04 	.word	0x20001b04
 8004be8:	200004e8 	.word	0x200004e8
 8004bec:	20001ad4 	.word	0x20001ad4
 8004bf0:	20001ad8 	.word	0x20001ad8
 8004bf4:	20001adc 	.word	0x20001adc
 8004bf8:	20001b10 	.word	0x20001b10
 8004bfc:	20001aec 	.word	0x20001aec
 8004c00:	20001af0 	.word	0x20001af0
 8004c04:	20001af4 	.word	0x20001af4
 8004c08:	20001b20 	.word	0x20001b20
 8004c0c:	20001b24 	.word	0x20001b24
			dx = magcal.BpFast[0][i] - magcal.BpFast[0][j];
 8004c10:	4b7b      	ldr	r3, [pc, #492]	@ (8004e00 <choose_discard_magcal+0x3ec>)
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	4a7b      	ldr	r2, [pc, #492]	@ (8004e04 <choose_discard_magcal+0x3f0>)
 8004c16:	f503 7303 	add.w	r3, r3, #524	@ 0x20c
 8004c1a:	005b      	lsls	r3, r3, #1
 8004c1c:	4413      	add	r3, r2
 8004c1e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004c22:	4619      	mov	r1, r3
 8004c24:	4b78      	ldr	r3, [pc, #480]	@ (8004e08 <choose_discard_magcal+0x3f4>)
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	4a76      	ldr	r2, [pc, #472]	@ (8004e04 <choose_discard_magcal+0x3f0>)
 8004c2a:	f503 7303 	add.w	r3, r3, #524	@ 0x20c
 8004c2e:	005b      	lsls	r3, r3, #1
 8004c30:	4413      	add	r3, r2
 8004c32:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004c36:	1aca      	subs	r2, r1, r3
 8004c38:	4b74      	ldr	r3, [pc, #464]	@ (8004e0c <choose_discard_magcal+0x3f8>)
 8004c3a:	601a      	str	r2, [r3, #0]
			dy = magcal.BpFast[1][i] - magcal.BpFast[1][j];
 8004c3c:	4b70      	ldr	r3, [pc, #448]	@ (8004e00 <choose_discard_magcal+0x3ec>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	4a70      	ldr	r2, [pc, #448]	@ (8004e04 <choose_discard_magcal+0x3f0>)
 8004c42:	f203 4396 	addw	r3, r3, #1174	@ 0x496
 8004c46:	005b      	lsls	r3, r3, #1
 8004c48:	4413      	add	r3, r2
 8004c4a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004c4e:	4619      	mov	r1, r3
 8004c50:	4b6d      	ldr	r3, [pc, #436]	@ (8004e08 <choose_discard_magcal+0x3f4>)
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	4a6b      	ldr	r2, [pc, #428]	@ (8004e04 <choose_discard_magcal+0x3f0>)
 8004c56:	f203 4396 	addw	r3, r3, #1174	@ 0x496
 8004c5a:	005b      	lsls	r3, r3, #1
 8004c5c:	4413      	add	r3, r2
 8004c5e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004c62:	1aca      	subs	r2, r1, r3
 8004c64:	4b6a      	ldr	r3, [pc, #424]	@ (8004e10 <choose_discard_magcal+0x3fc>)
 8004c66:	601a      	str	r2, [r3, #0]
			dz = magcal.BpFast[2][i] - magcal.BpFast[2][j];
 8004c68:	4b65      	ldr	r3, [pc, #404]	@ (8004e00 <choose_discard_magcal+0x3ec>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	4a65      	ldr	r2, [pc, #404]	@ (8004e04 <choose_discard_magcal+0x3f0>)
 8004c6e:	f503 63e4 	add.w	r3, r3, #1824	@ 0x720
 8004c72:	005b      	lsls	r3, r3, #1
 8004c74:	4413      	add	r3, r2
 8004c76:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004c7a:	4619      	mov	r1, r3
 8004c7c:	4b62      	ldr	r3, [pc, #392]	@ (8004e08 <choose_discard_magcal+0x3f4>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4a60      	ldr	r2, [pc, #384]	@ (8004e04 <choose_discard_magcal+0x3f0>)
 8004c82:	f503 63e4 	add.w	r3, r3, #1824	@ 0x720
 8004c86:	005b      	lsls	r3, r3, #1
 8004c88:	4413      	add	r3, r2
 8004c8a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004c8e:	1aca      	subs	r2, r1, r3
 8004c90:	4b60      	ldr	r3, [pc, #384]	@ (8004e14 <choose_discard_magcal+0x400>)
 8004c92:	601a      	str	r2, [r3, #0]
			distsq = (int64_t) dx * (int64_t) dx;
 8004c94:	4b5d      	ldr	r3, [pc, #372]	@ (8004e0c <choose_discard_magcal+0x3f8>)
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	17da      	asrs	r2, r3, #31
 8004c9a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004c9c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004c9e:	4b5b      	ldr	r3, [pc, #364]	@ (8004e0c <choose_discard_magcal+0x3f8>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	17da      	asrs	r2, r3, #31
 8004ca4:	633b      	str	r3, [r7, #48]	@ 0x30
 8004ca6:	637a      	str	r2, [r7, #52]	@ 0x34
 8004ca8:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8004cac:	460b      	mov	r3, r1
 8004cae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004cb0:	fb02 f203 	mul.w	r2, r2, r3
 8004cb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004cb6:	e9c7 010e 	strd	r0, r1, [r7, #56]	@ 0x38
 8004cba:	4601      	mov	r1, r0
 8004cbc:	fb01 f303 	mul.w	r3, r1, r3
 8004cc0:	4413      	add	r3, r2
 8004cc2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004cc4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004cc6:	fba2 1201 	umull	r1, r2, r2, r1
 8004cca:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004ccc:	460a      	mov	r2, r1
 8004cce:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004cd0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004cd2:	4413      	add	r3, r2
 8004cd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004cd6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8004cda:	4b4f      	ldr	r3, [pc, #316]	@ (8004e18 <choose_discard_magcal+0x404>)
 8004cdc:	e9c3 0100 	strd	r0, r1, [r3]
			distsq += (int64_t) dy * (int64_t) dy;
 8004ce0:	4b4b      	ldr	r3, [pc, #300]	@ (8004e10 <choose_discard_magcal+0x3fc>)
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	17da      	asrs	r2, r3, #31
 8004ce6:	623b      	str	r3, [r7, #32]
 8004ce8:	627a      	str	r2, [r7, #36]	@ 0x24
 8004cea:	4b49      	ldr	r3, [pc, #292]	@ (8004e10 <choose_discard_magcal+0x3fc>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	17da      	asrs	r2, r3, #31
 8004cf0:	61bb      	str	r3, [r7, #24]
 8004cf2:	61fa      	str	r2, [r7, #28]
 8004cf4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8004cf8:	460b      	mov	r3, r1
 8004cfa:	69ba      	ldr	r2, [r7, #24]
 8004cfc:	fb02 f203 	mul.w	r2, r2, r3
 8004d00:	69fb      	ldr	r3, [r7, #28]
 8004d02:	e9c7 0108 	strd	r0, r1, [r7, #32]
 8004d06:	4601      	mov	r1, r0
 8004d08:	fb01 f303 	mul.w	r3, r1, r3
 8004d0c:	4413      	add	r3, r2
 8004d0e:	6a3a      	ldr	r2, [r7, #32]
 8004d10:	69b9      	ldr	r1, [r7, #24]
 8004d12:	fba2 1201 	umull	r1, r2, r2, r1
 8004d16:	617a      	str	r2, [r7, #20]
 8004d18:	460a      	mov	r2, r1
 8004d1a:	613a      	str	r2, [r7, #16]
 8004d1c:	697a      	ldr	r2, [r7, #20]
 8004d1e:	4413      	add	r3, r2
 8004d20:	617b      	str	r3, [r7, #20]
 8004d22:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004d26:	4b3c      	ldr	r3, [pc, #240]	@ (8004e18 <choose_discard_magcal+0x404>)
 8004d28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d2c:	1886      	adds	r6, r0, r2
 8004d2e:	60be      	str	r6, [r7, #8]
 8004d30:	eb41 0303 	adc.w	r3, r1, r3
 8004d34:	60fb      	str	r3, [r7, #12]
 8004d36:	4b38      	ldr	r3, [pc, #224]	@ (8004e18 <choose_discard_magcal+0x404>)
 8004d38:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004d3c:	e9c3 1200 	strd	r1, r2, [r3]
			distsq += (int64_t) dz * (int64_t) dz;
 8004d40:	4b34      	ldr	r3, [pc, #208]	@ (8004e14 <choose_discard_magcal+0x400>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	17da      	asrs	r2, r3, #31
 8004d46:	469a      	mov	sl, r3
 8004d48:	4693      	mov	fp, r2
 8004d4a:	4b32      	ldr	r3, [pc, #200]	@ (8004e14 <choose_discard_magcal+0x400>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	17da      	asrs	r2, r3, #31
 8004d50:	461c      	mov	r4, r3
 8004d52:	4615      	mov	r5, r2
 8004d54:	fb04 f20b 	mul.w	r2, r4, fp
 8004d58:	fb0a f305 	mul.w	r3, sl, r5
 8004d5c:	4413      	add	r3, r2
 8004d5e:	fbaa 8904 	umull	r8, r9, sl, r4
 8004d62:	444b      	add	r3, r9
 8004d64:	4699      	mov	r9, r3
 8004d66:	4640      	mov	r0, r8
 8004d68:	4649      	mov	r1, r9
 8004d6a:	4b2b      	ldr	r3, [pc, #172]	@ (8004e18 <choose_discard_magcal+0x404>)
 8004d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d70:	1886      	adds	r6, r0, r2
 8004d72:	603e      	str	r6, [r7, #0]
 8004d74:	eb41 0303 	adc.w	r3, r1, r3
 8004d78:	607b      	str	r3, [r7, #4]
 8004d7a:	4b27      	ldr	r3, [pc, #156]	@ (8004e18 <choose_discard_magcal+0x404>)
 8004d7c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004d80:	e9c3 1200 	strd	r1, r2, [r3]
			if (distsq < minsum) {
 8004d84:	4b24      	ldr	r3, [pc, #144]	@ (8004e18 <choose_discard_magcal+0x404>)
 8004d86:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004d8a:	4b24      	ldr	r3, [pc, #144]	@ (8004e1c <choose_discard_magcal+0x408>)
 8004d8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d90:	4290      	cmp	r0, r2
 8004d92:	eb71 0303 	sbcs.w	r3, r1, r3
 8004d96:	d213      	bcs.n	8004dc0 <choose_discard_magcal+0x3ac>
				minsum = distsq;
 8004d98:	4b1f      	ldr	r3, [pc, #124]	@ (8004e18 <choose_discard_magcal+0x404>)
 8004d9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d9e:	491f      	ldr	r1, [pc, #124]	@ (8004e1c <choose_discard_magcal+0x408>)
 8004da0:	e9c1 2300 	strd	r2, r3, [r1]
				minindex = (random() & 1) ? i : j;
 8004da4:	f00b f8e6 	bl	800ff74 <random>
 8004da8:	4603      	mov	r3, r0
 8004daa:	f003 0301 	and.w	r3, r3, #1
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d002      	beq.n	8004db8 <choose_discard_magcal+0x3a4>
 8004db2:	4b13      	ldr	r3, [pc, #76]	@ (8004e00 <choose_discard_magcal+0x3ec>)
 8004db4:	681a      	ldr	r2, [r3, #0]
 8004db6:	e001      	b.n	8004dbc <choose_discard_magcal+0x3a8>
 8004db8:	4b13      	ldr	r3, [pc, #76]	@ (8004e08 <choose_discard_magcal+0x3f4>)
 8004dba:	681a      	ldr	r2, [r3, #0]
 8004dbc:	4b18      	ldr	r3, [pc, #96]	@ (8004e20 <choose_discard_magcal+0x40c>)
 8004dbe:	601a      	str	r2, [r3, #0]
		for (j = i + 1; j < MAGBUFFSIZE; j++) {
 8004dc0:	4b11      	ldr	r3, [pc, #68]	@ (8004e08 <choose_discard_magcal+0x3f4>)
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	1c5a      	adds	r2, r3, #1
 8004dc6:	4b10      	ldr	r3, [pc, #64]	@ (8004e08 <choose_discard_magcal+0x3f4>)
 8004dc8:	601a      	str	r2, [r3, #0]
 8004dca:	4b0f      	ldr	r3, [pc, #60]	@ (8004e08 <choose_discard_magcal+0x3f4>)
 8004dcc:	681a      	ldr	r2, [r3, #0]
 8004dce:	f240 2389 	movw	r3, #649	@ 0x289
 8004dd2:	429a      	cmp	r2, r3
 8004dd4:	f77f af1c 	ble.w	8004c10 <choose_discard_magcal+0x1fc>
	for (i = 0; i < MAGBUFFSIZE; i++)
 8004dd8:	4b09      	ldr	r3, [pc, #36]	@ (8004e00 <choose_discard_magcal+0x3ec>)
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	1c5a      	adds	r2, r3, #1
 8004dde:	4b08      	ldr	r3, [pc, #32]	@ (8004e00 <choose_discard_magcal+0x3ec>)
 8004de0:	601a      	str	r2, [r3, #0]
 8004de2:	4b07      	ldr	r3, [pc, #28]	@ (8004e00 <choose_discard_magcal+0x3ec>)
 8004de4:	681a      	ldr	r2, [r3, #0]
 8004de6:	f240 2389 	movw	r3, #649	@ 0x289
 8004dea:	429a      	cmp	r2, r3
 8004dec:	f77f aeeb 	ble.w	8004bc6 <choose_discard_magcal+0x1b2>
			}
		}
	}
	return minindex;
 8004df0:	4b0b      	ldr	r3, [pc, #44]	@ (8004e20 <choose_discard_magcal+0x40c>)
 8004df2:	681b      	ldr	r3, [r3, #0]
}
 8004df4:	4618      	mov	r0, r3
 8004df6:	3744      	adds	r7, #68	@ 0x44
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004dfe:	bf00      	nop
 8004e00:	20001b04 	.word	0x20001b04
 8004e04:	200004e8 	.word	0x200004e8
 8004e08:	20001b08 	.word	0x20001b08
 8004e0c:	20001ae0 	.word	0x20001ae0
 8004e10:	20001ae4 	.word	0x20001ae4
 8004e14:	20001ae8 	.word	0x20001ae8
 8004e18:	20001af8 	.word	0x20001af8
 8004e1c:	20000048 	.word	0x20000048
 8004e20:	20001b0c 	.word	0x20001b0c

08004e24 <add_magcal_data>:

static void add_magcal_data(const int16_t *data) {
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b084      	sub	sp, #16
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]

	int i;

	// first look for an unused caldata slot
	for (i = 0; i < MAGBUFFSIZE; i++) {
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	60fb      	str	r3, [r7, #12]
 8004e30:	e00c      	b.n	8004e4c <add_magcal_data+0x28>
		if (!magcal.valid[i])
 8004e32:	4a31      	ldr	r2, [pc, #196]	@ (8004ef8 <add_magcal_data+0xd4>)
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	4413      	add	r3, r2
 8004e38:	f503 539a 	add.w	r3, r3, #4928	@ 0x1340
 8004e3c:	3316      	adds	r3, #22
 8004e3e:	f993 3000 	ldrsb.w	r3, [r3]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d008      	beq.n	8004e58 <add_magcal_data+0x34>
	for (i = 0; i < MAGBUFFSIZE; i++) {
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	3301      	adds	r3, #1
 8004e4a:	60fb      	str	r3, [r7, #12]
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	f240 2289 	movw	r2, #649	@ 0x289
 8004e52:	4293      	cmp	r3, r2
 8004e54:	dded      	ble.n	8004e32 <add_magcal_data+0xe>
 8004e56:	e000      	b.n	8004e5a <add_magcal_data+0x36>
			break;
 8004e58:	bf00      	nop
	}

	if (i >= MAGBUFFSIZE) {
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	f240 2289 	movw	r2, #649	@ 0x289
 8004e60:	4293      	cmp	r3, r2
 8004e62:	dd19      	ble.n	8004e98 <add_magcal_data+0x74>
		i = choose_discard_magcal();
 8004e64:	f7ff fdd6 	bl	8004a14 <choose_discard_magcal>
 8004e68:	60f8      	str	r0, [r7, #12]
		if (i < 0 || i >= MAGBUFFSIZE) {
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	db04      	blt.n	8004e7a <add_magcal_data+0x56>
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	f240 2289 	movw	r2, #649	@ 0x289
 8004e76:	4293      	cmp	r3, r2
 8004e78:	dd0e      	ble.n	8004e98 <add_magcal_data+0x74>
			i = random() % MAGBUFFSIZE;
 8004e7a:	f00b f87b 	bl	800ff74 <random>
 8004e7e:	4603      	mov	r3, r0
 8004e80:	4a1e      	ldr	r2, [pc, #120]	@ (8004efc <add_magcal_data+0xd8>)
 8004e82:	fb82 1203 	smull	r1, r2, r2, r3
 8004e86:	1211      	asrs	r1, r2, #8
 8004e88:	17da      	asrs	r2, r3, #31
 8004e8a:	1a8a      	subs	r2, r1, r2
 8004e8c:	f240 218a 	movw	r1, #650	@ 0x28a
 8004e90:	fb01 f202 	mul.w	r2, r1, r2
 8004e94:	1a9b      	subs	r3, r3, r2
 8004e96:	60fb      	str	r3, [r7, #12]
		}
	}
	// add it to the cal buffer
	magcal.BpFast[0][i] = data[0];
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	f9b3 1000 	ldrsh.w	r1, [r3]
 8004e9e:	4a16      	ldr	r2, [pc, #88]	@ (8004ef8 <add_magcal_data+0xd4>)
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	f503 7303 	add.w	r3, r3, #524	@ 0x20c
 8004ea6:	005b      	lsls	r3, r3, #1
 8004ea8:	4413      	add	r3, r2
 8004eaa:	460a      	mov	r2, r1
 8004eac:	805a      	strh	r2, [r3, #2]
	magcal.BpFast[1][i] = data[1];
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	3302      	adds	r3, #2
 8004eb2:	f9b3 1000 	ldrsh.w	r1, [r3]
 8004eb6:	4a10      	ldr	r2, [pc, #64]	@ (8004ef8 <add_magcal_data+0xd4>)
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	f203 4396 	addw	r3, r3, #1174	@ 0x496
 8004ebe:	005b      	lsls	r3, r3, #1
 8004ec0:	4413      	add	r3, r2
 8004ec2:	460a      	mov	r2, r1
 8004ec4:	805a      	strh	r2, [r3, #2]
	magcal.BpFast[2][i] = data[2];
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	3304      	adds	r3, #4
 8004eca:	f9b3 1000 	ldrsh.w	r1, [r3]
 8004ece:	4a0a      	ldr	r2, [pc, #40]	@ (8004ef8 <add_magcal_data+0xd4>)
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	f503 63e4 	add.w	r3, r3, #1824	@ 0x720
 8004ed6:	005b      	lsls	r3, r3, #1
 8004ed8:	4413      	add	r3, r2
 8004eda:	460a      	mov	r2, r1
 8004edc:	805a      	strh	r2, [r3, #2]
	magcal.valid[i] = 1;
 8004ede:	4a06      	ldr	r2, [pc, #24]	@ (8004ef8 <add_magcal_data+0xd4>)
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	4413      	add	r3, r2
 8004ee4:	f503 539a 	add.w	r3, r3, #4928	@ 0x1340
 8004ee8:	3316      	adds	r3, #22
 8004eea:	2201      	movs	r2, #1
 8004eec:	701a      	strb	r2, [r3, #0]
}
 8004eee:	bf00      	nop
 8004ef0:	3710      	adds	r7, #16
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	bd80      	pop	{r7, pc}
 8004ef6:	bf00      	nop
 8004ef8:	200004e8 	.word	0x200004e8
 8004efc:	64d319ff 	.word	0x64d319ff

08004f00 <process_imu_data>:

void process_imu_data(int16_t raw_magX, int16_t raw_magY, int16_t raw_magZ) {
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b082      	sub	sp, #8
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	4603      	mov	r3, r0
 8004f08:	80fb      	strh	r3, [r7, #6]
 8004f0a:	460b      	mov	r3, r1
 8004f0c:	80bb      	strh	r3, [r7, #4]
 8004f0e:	4613      	mov	r3, r2
 8004f10:	807b      	strh	r3, [r7, #2]
	mag_raw[0] = raw_magX;
 8004f12:	88fa      	ldrh	r2, [r7, #6]
 8004f14:	4b07      	ldr	r3, [pc, #28]	@ (8004f34 <process_imu_data+0x34>)
 8004f16:	801a      	strh	r2, [r3, #0]
	mag_raw[1] = raw_magY;
 8004f18:	88ba      	ldrh	r2, [r7, #4]
 8004f1a:	4b06      	ldr	r3, [pc, #24]	@ (8004f34 <process_imu_data+0x34>)
 8004f1c:	805a      	strh	r2, [r3, #2]
	mag_raw[2] = raw_magZ;
 8004f1e:	887a      	ldrh	r2, [r7, #2]
 8004f20:	4b04      	ldr	r3, [pc, #16]	@ (8004f34 <process_imu_data+0x34>)
 8004f22:	809a      	strh	r2, [r3, #4]
	add_magcal_data(mag_raw);
 8004f24:	4803      	ldr	r0, [pc, #12]	@ (8004f34 <process_imu_data+0x34>)
 8004f26:	f7ff ff7d 	bl	8004e24 <add_magcal_data>
}
 8004f2a:	bf00      	nop
 8004f2c:	3708      	adds	r7, #8
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	bd80      	pop	{r7, pc}
 8004f32:	bf00      	nop
 8004f34:	20001acc 	.word	0x20001acc

08004f38 <HAL_I2C_MemRxCpltCallback>:

void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c) {
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b086      	sub	sp, #24
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]

	DAM_Callback_cnt++;
 8004f40:	4b79      	ldr	r3, [pc, #484]	@ (8005128 <HAL_I2C_MemRxCpltCallback+0x1f0>)
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	3301      	adds	r3, #1
 8004f46:	4a78      	ldr	r2, [pc, #480]	@ (8005128 <HAL_I2C_MemRxCpltCallback+0x1f0>)
 8004f48:	6013      	str	r3, [r2, #0]

	if (hi2c->Instance == I2C1) {
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	4a77      	ldr	r2, [pc, #476]	@ (800512c <HAL_I2C_MemRxCpltCallback+0x1f4>)
 8004f50:	4293      	cmp	r3, r2
 8004f52:	f040 8363 	bne.w	800561c <HAL_I2C_MemRxCpltCallback+0x6e4>
		if (CurrentSensor == GYRO_SENSOR) {
 8004f56:	4b76      	ldr	r3, [pc, #472]	@ (8005130 <HAL_I2C_MemRxCpltCallback+0x1f8>)
 8004f58:	781b      	ldrb	r3, [r3, #0]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	f040 8116 	bne.w	800518c <HAL_I2C_MemRxCpltCallback+0x254>
			gyroX = (int16_t) ((gyro_buffer[1] << 8) | gyro_buffer[0]);
 8004f60:	4b74      	ldr	r3, [pc, #464]	@ (8005134 <HAL_I2C_MemRxCpltCallback+0x1fc>)
 8004f62:	785b      	ldrb	r3, [r3, #1]
 8004f64:	021b      	lsls	r3, r3, #8
 8004f66:	b21a      	sxth	r2, r3
 8004f68:	4b72      	ldr	r3, [pc, #456]	@ (8005134 <HAL_I2C_MemRxCpltCallback+0x1fc>)
 8004f6a:	781b      	ldrb	r3, [r3, #0]
 8004f6c:	b21b      	sxth	r3, r3
 8004f6e:	4313      	orrs	r3, r2
 8004f70:	b21a      	sxth	r2, r3
 8004f72:	4b71      	ldr	r3, [pc, #452]	@ (8005138 <HAL_I2C_MemRxCpltCallback+0x200>)
 8004f74:	801a      	strh	r2, [r3, #0]
			gyroY = (int16_t) ((gyro_buffer[3] << 8) | gyro_buffer[2]);
 8004f76:	4b6f      	ldr	r3, [pc, #444]	@ (8005134 <HAL_I2C_MemRxCpltCallback+0x1fc>)
 8004f78:	78db      	ldrb	r3, [r3, #3]
 8004f7a:	021b      	lsls	r3, r3, #8
 8004f7c:	b21a      	sxth	r2, r3
 8004f7e:	4b6d      	ldr	r3, [pc, #436]	@ (8005134 <HAL_I2C_MemRxCpltCallback+0x1fc>)
 8004f80:	789b      	ldrb	r3, [r3, #2]
 8004f82:	b21b      	sxth	r3, r3
 8004f84:	4313      	orrs	r3, r2
 8004f86:	b21a      	sxth	r2, r3
 8004f88:	4b6c      	ldr	r3, [pc, #432]	@ (800513c <HAL_I2C_MemRxCpltCallback+0x204>)
 8004f8a:	801a      	strh	r2, [r3, #0]
			gyroZ = (int16_t) ((gyro_buffer[5] << 8) | gyro_buffer[4]);
 8004f8c:	4b69      	ldr	r3, [pc, #420]	@ (8005134 <HAL_I2C_MemRxCpltCallback+0x1fc>)
 8004f8e:	795b      	ldrb	r3, [r3, #5]
 8004f90:	021b      	lsls	r3, r3, #8
 8004f92:	b21a      	sxth	r2, r3
 8004f94:	4b67      	ldr	r3, [pc, #412]	@ (8005134 <HAL_I2C_MemRxCpltCallback+0x1fc>)
 8004f96:	791b      	ldrb	r3, [r3, #4]
 8004f98:	b21b      	sxth	r3, r3
 8004f9a:	4313      	orrs	r3, r2
 8004f9c:	b21a      	sxth	r2, r3
 8004f9e:	4b68      	ldr	r3, [pc, #416]	@ (8005140 <HAL_I2C_MemRxCpltCallback+0x208>)
 8004fa0:	801a      	strh	r2, [r3, #0]

			gyroX_current = gyroX * GYRO_SENSITIVITY_245DPS / 1000.0f;
 8004fa2:	4b65      	ldr	r3, [pc, #404]	@ (8005138 <HAL_I2C_MemRxCpltCallback+0x200>)
 8004fa4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004fa8:	ee07 3a90 	vmov	s15, r3
 8004fac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004fb0:	ed9f 7a64 	vldr	s14, [pc, #400]	@ 8005144 <HAL_I2C_MemRxCpltCallback+0x20c>
 8004fb4:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004fb8:	eddf 6a63 	vldr	s13, [pc, #396]	@ 8005148 <HAL_I2C_MemRxCpltCallback+0x210>
 8004fbc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004fc0:	4b62      	ldr	r3, [pc, #392]	@ (800514c <HAL_I2C_MemRxCpltCallback+0x214>)
 8004fc2:	edc3 7a00 	vstr	s15, [r3]
			gyroY_current = gyroY * GYRO_SENSITIVITY_245DPS / 1000.0f;
 8004fc6:	4b5d      	ldr	r3, [pc, #372]	@ (800513c <HAL_I2C_MemRxCpltCallback+0x204>)
 8004fc8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004fcc:	ee07 3a90 	vmov	s15, r3
 8004fd0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004fd4:	ed9f 7a5b 	vldr	s14, [pc, #364]	@ 8005144 <HAL_I2C_MemRxCpltCallback+0x20c>
 8004fd8:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004fdc:	eddf 6a5a 	vldr	s13, [pc, #360]	@ 8005148 <HAL_I2C_MemRxCpltCallback+0x210>
 8004fe0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004fe4:	4b5a      	ldr	r3, [pc, #360]	@ (8005150 <HAL_I2C_MemRxCpltCallback+0x218>)
 8004fe6:	edc3 7a00 	vstr	s15, [r3]
			gyroZ_current = gyroZ * GYRO_SENSITIVITY_245DPS / 1000.0f - 4.6;
 8004fea:	4b55      	ldr	r3, [pc, #340]	@ (8005140 <HAL_I2C_MemRxCpltCallback+0x208>)
 8004fec:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004ff0:	ee07 3a90 	vmov	s15, r3
 8004ff4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004ff8:	ed9f 7a52 	vldr	s14, [pc, #328]	@ 8005144 <HAL_I2C_MemRxCpltCallback+0x20c>
 8004ffc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005000:	ed9f 7a51 	vldr	s14, [pc, #324]	@ 8005148 <HAL_I2C_MemRxCpltCallback+0x210>
 8005004:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005008:	ee16 0a90 	vmov	r0, s13
 800500c:	f7fb fa74 	bl	80004f8 <__aeabi_f2d>
 8005010:	a343      	add	r3, pc, #268	@ (adr r3, 8005120 <HAL_I2C_MemRxCpltCallback+0x1e8>)
 8005012:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005016:	f7fb f90f 	bl	8000238 <__aeabi_dsub>
 800501a:	4602      	mov	r2, r0
 800501c:	460b      	mov	r3, r1
 800501e:	4610      	mov	r0, r2
 8005020:	4619      	mov	r1, r3
 8005022:	f7fb fd71 	bl	8000b08 <__aeabi_d2f>
 8005026:	4603      	mov	r3, r0
 8005028:	4a4a      	ldr	r2, [pc, #296]	@ (8005154 <HAL_I2C_MemRxCpltCallback+0x21c>)
 800502a:	6013      	str	r3, [r2, #0]

			if (DAM_Callback_cnt < 1000) {
 800502c:	4b3e      	ldr	r3, [pc, #248]	@ (8005128 <HAL_I2C_MemRxCpltCallback+0x1f0>)
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005034:	da21      	bge.n	800507a <HAL_I2C_MemRxCpltCallback+0x142>
				gyroX_sum += gyroX_current;
 8005036:	4b48      	ldr	r3, [pc, #288]	@ (8005158 <HAL_I2C_MemRxCpltCallback+0x220>)
 8005038:	ed93 7a00 	vldr	s14, [r3]
 800503c:	4b43      	ldr	r3, [pc, #268]	@ (800514c <HAL_I2C_MemRxCpltCallback+0x214>)
 800503e:	edd3 7a00 	vldr	s15, [r3]
 8005042:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005046:	4b44      	ldr	r3, [pc, #272]	@ (8005158 <HAL_I2C_MemRxCpltCallback+0x220>)
 8005048:	edc3 7a00 	vstr	s15, [r3]
				gyroY_sum += gyroY_current;
 800504c:	4b43      	ldr	r3, [pc, #268]	@ (800515c <HAL_I2C_MemRxCpltCallback+0x224>)
 800504e:	ed93 7a00 	vldr	s14, [r3]
 8005052:	4b3f      	ldr	r3, [pc, #252]	@ (8005150 <HAL_I2C_MemRxCpltCallback+0x218>)
 8005054:	edd3 7a00 	vldr	s15, [r3]
 8005058:	ee77 7a27 	vadd.f32	s15, s14, s15
 800505c:	4b3f      	ldr	r3, [pc, #252]	@ (800515c <HAL_I2C_MemRxCpltCallback+0x224>)
 800505e:	edc3 7a00 	vstr	s15, [r3]
				gyroZ_sum += gyroZ_current;
 8005062:	4b3f      	ldr	r3, [pc, #252]	@ (8005160 <HAL_I2C_MemRxCpltCallback+0x228>)
 8005064:	ed93 7a00 	vldr	s14, [r3]
 8005068:	4b3a      	ldr	r3, [pc, #232]	@ (8005154 <HAL_I2C_MemRxCpltCallback+0x21c>)
 800506a:	edd3 7a00 	vldr	s15, [r3]
 800506e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005072:	4b3b      	ldr	r3, [pc, #236]	@ (8005160 <HAL_I2C_MemRxCpltCallback+0x228>)
 8005074:	edc3 7a00 	vstr	s15, [r3]
			}

			CurrentSensor = GYRO_SENSOR;
		}
	}
}
 8005078:	e2d0      	b.n	800561c <HAL_I2C_MemRxCpltCallback+0x6e4>
				gyroX_avg = gyroX_sum / 1000.0f;
 800507a:	4b37      	ldr	r3, [pc, #220]	@ (8005158 <HAL_I2C_MemRxCpltCallback+0x220>)
 800507c:	ed93 7a00 	vldr	s14, [r3]
 8005080:	eddf 6a31 	vldr	s13, [pc, #196]	@ 8005148 <HAL_I2C_MemRxCpltCallback+0x210>
 8005084:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005088:	4b36      	ldr	r3, [pc, #216]	@ (8005164 <HAL_I2C_MemRxCpltCallback+0x22c>)
 800508a:	edc3 7a00 	vstr	s15, [r3]
				gyroY_avg = gyroY_sum / 1000.0f;
 800508e:	4b33      	ldr	r3, [pc, #204]	@ (800515c <HAL_I2C_MemRxCpltCallback+0x224>)
 8005090:	ed93 7a00 	vldr	s14, [r3]
 8005094:	eddf 6a2c 	vldr	s13, [pc, #176]	@ 8005148 <HAL_I2C_MemRxCpltCallback+0x210>
 8005098:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800509c:	4b32      	ldr	r3, [pc, #200]	@ (8005168 <HAL_I2C_MemRxCpltCallback+0x230>)
 800509e:	edc3 7a00 	vstr	s15, [r3]
				gyroZ_avg = gyroZ_sum / 1000.0f;
 80050a2:	4b2f      	ldr	r3, [pc, #188]	@ (8005160 <HAL_I2C_MemRxCpltCallback+0x228>)
 80050a4:	ed93 7a00 	vldr	s14, [r3]
 80050a8:	eddf 6a27 	vldr	s13, [pc, #156]	@ 8005148 <HAL_I2C_MemRxCpltCallback+0x210>
 80050ac:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80050b0:	4b2e      	ldr	r3, [pc, #184]	@ (800516c <HAL_I2C_MemRxCpltCallback+0x234>)
 80050b2:	edc3 7a00 	vstr	s15, [r3]
				gyro_x = gyroX_current - gyroX_avg;
 80050b6:	4b25      	ldr	r3, [pc, #148]	@ (800514c <HAL_I2C_MemRxCpltCallback+0x214>)
 80050b8:	ed93 7a00 	vldr	s14, [r3]
 80050bc:	4b29      	ldr	r3, [pc, #164]	@ (8005164 <HAL_I2C_MemRxCpltCallback+0x22c>)
 80050be:	edd3 7a00 	vldr	s15, [r3]
 80050c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80050c6:	4b2a      	ldr	r3, [pc, #168]	@ (8005170 <HAL_I2C_MemRxCpltCallback+0x238>)
 80050c8:	edc3 7a00 	vstr	s15, [r3]
				gyro_y = gyroY_current - gyroY_avg;
 80050cc:	4b20      	ldr	r3, [pc, #128]	@ (8005150 <HAL_I2C_MemRxCpltCallback+0x218>)
 80050ce:	ed93 7a00 	vldr	s14, [r3]
 80050d2:	4b25      	ldr	r3, [pc, #148]	@ (8005168 <HAL_I2C_MemRxCpltCallback+0x230>)
 80050d4:	edd3 7a00 	vldr	s15, [r3]
 80050d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80050dc:	4b25      	ldr	r3, [pc, #148]	@ (8005174 <HAL_I2C_MemRxCpltCallback+0x23c>)
 80050de:	edc3 7a00 	vstr	s15, [r3]
				gyro_z = gyroZ_current - gyroZ_avg;
 80050e2:	4b1c      	ldr	r3, [pc, #112]	@ (8005154 <HAL_I2C_MemRxCpltCallback+0x21c>)
 80050e4:	ed93 7a00 	vldr	s14, [r3]
 80050e8:	4b20      	ldr	r3, [pc, #128]	@ (800516c <HAL_I2C_MemRxCpltCallback+0x234>)
 80050ea:	edd3 7a00 	vldr	s15, [r3]
 80050ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80050f2:	4b21      	ldr	r3, [pc, #132]	@ (8005178 <HAL_I2C_MemRxCpltCallback+0x240>)
 80050f4:	edc3 7a00 	vstr	s15, [r3]
				gxyz[0] = gx1;
 80050f8:	4b20      	ldr	r3, [pc, #128]	@ (800517c <HAL_I2C_MemRxCpltCallback+0x244>)
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	4a20      	ldr	r2, [pc, #128]	@ (8005180 <HAL_I2C_MemRxCpltCallback+0x248>)
 80050fe:	6013      	str	r3, [r2, #0]
				gxyz[1] = gy1;
 8005100:	4b20      	ldr	r3, [pc, #128]	@ (8005184 <HAL_I2C_MemRxCpltCallback+0x24c>)
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	4a1e      	ldr	r2, [pc, #120]	@ (8005180 <HAL_I2C_MemRxCpltCallback+0x248>)
 8005106:	6053      	str	r3, [r2, #4]
				gxyz[2] = gz1;
 8005108:	4b1f      	ldr	r3, [pc, #124]	@ (8005188 <HAL_I2C_MemRxCpltCallback+0x250>)
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	4a1c      	ldr	r2, [pc, #112]	@ (8005180 <HAL_I2C_MemRxCpltCallback+0x248>)
 800510e:	6093      	str	r3, [r2, #8]
				CurrentSensor = ACCEL_SENSOR;
 8005110:	4b07      	ldr	r3, [pc, #28]	@ (8005130 <HAL_I2C_MemRxCpltCallback+0x1f8>)
 8005112:	2201      	movs	r2, #1
 8005114:	701a      	strb	r2, [r3, #0]
				LSM9DS1_ReadAccel_DMA();
 8005116:	f7ff fc2b 	bl	8004970 <LSM9DS1_ReadAccel_DMA>
}
 800511a:	e27f      	b.n	800561c <HAL_I2C_MemRxCpltCallback+0x6e4>
 800511c:	f3af 8000 	nop.w
 8005120:	66666666 	.word	0x66666666
 8005124:	40126666 	.word	0x40126666
 8005128:	200003c4 	.word	0x200003c4
 800512c:	40005400 	.word	0x40005400
 8005130:	200003c0 	.word	0x200003c0
 8005134:	20000350 	.word	0x20000350
 8005138:	20000366 	.word	0x20000366
 800513c:	20000368 	.word	0x20000368
 8005140:	2000036a 	.word	0x2000036a
 8005144:	410c0000 	.word	0x410c0000
 8005148:	447a0000 	.word	0x447a0000
 800514c:	200003a8 	.word	0x200003a8
 8005150:	200003ac 	.word	0x200003ac
 8005154:	200003b0 	.word	0x200003b0
 8005158:	20000390 	.word	0x20000390
 800515c:	20000394 	.word	0x20000394
 8005160:	20000398 	.word	0x20000398
 8005164:	2000039c 	.word	0x2000039c
 8005168:	200003a0 	.word	0x200003a0
 800516c:	200003a4 	.word	0x200003a4
 8005170:	20000384 	.word	0x20000384
 8005174:	20000388 	.word	0x20000388
 8005178:	2000038c 	.word	0x2000038c
 800517c:	20000454 	.word	0x20000454
 8005180:	20000494 	.word	0x20000494
 8005184:	20000458 	.word	0x20000458
 8005188:	2000045c 	.word	0x2000045c
		} else if (CurrentSensor == ACCEL_SENSOR) {
 800518c:	4b7a      	ldr	r3, [pc, #488]	@ (8005378 <HAL_I2C_MemRxCpltCallback+0x440>)
 800518e:	781b      	ldrb	r3, [r3, #0]
 8005190:	2b01      	cmp	r3, #1
 8005192:	f040 80b1 	bne.w	80052f8 <HAL_I2C_MemRxCpltCallback+0x3c0>
			accelX = (int16_t) ((accel_buffer[1] << 8) | accel_buffer[0]);
 8005196:	4b79      	ldr	r3, [pc, #484]	@ (800537c <HAL_I2C_MemRxCpltCallback+0x444>)
 8005198:	785b      	ldrb	r3, [r3, #1]
 800519a:	021b      	lsls	r3, r3, #8
 800519c:	b21a      	sxth	r2, r3
 800519e:	4b77      	ldr	r3, [pc, #476]	@ (800537c <HAL_I2C_MemRxCpltCallback+0x444>)
 80051a0:	781b      	ldrb	r3, [r3, #0]
 80051a2:	b21b      	sxth	r3, r3
 80051a4:	4313      	orrs	r3, r2
 80051a6:	b21a      	sxth	r2, r3
 80051a8:	4b75      	ldr	r3, [pc, #468]	@ (8005380 <HAL_I2C_MemRxCpltCallback+0x448>)
 80051aa:	801a      	strh	r2, [r3, #0]
			accelY = (int16_t) ((accel_buffer[3] << 8) | accel_buffer[2]);
 80051ac:	4b73      	ldr	r3, [pc, #460]	@ (800537c <HAL_I2C_MemRxCpltCallback+0x444>)
 80051ae:	78db      	ldrb	r3, [r3, #3]
 80051b0:	021b      	lsls	r3, r3, #8
 80051b2:	b21a      	sxth	r2, r3
 80051b4:	4b71      	ldr	r3, [pc, #452]	@ (800537c <HAL_I2C_MemRxCpltCallback+0x444>)
 80051b6:	789b      	ldrb	r3, [r3, #2]
 80051b8:	b21b      	sxth	r3, r3
 80051ba:	4313      	orrs	r3, r2
 80051bc:	b21a      	sxth	r2, r3
 80051be:	4b71      	ldr	r3, [pc, #452]	@ (8005384 <HAL_I2C_MemRxCpltCallback+0x44c>)
 80051c0:	801a      	strh	r2, [r3, #0]
			accelZ = (int16_t) ((accel_buffer[5] << 8) | accel_buffer[4]);
 80051c2:	4b6e      	ldr	r3, [pc, #440]	@ (800537c <HAL_I2C_MemRxCpltCallback+0x444>)
 80051c4:	795b      	ldrb	r3, [r3, #5]
 80051c6:	021b      	lsls	r3, r3, #8
 80051c8:	b21a      	sxth	r2, r3
 80051ca:	4b6c      	ldr	r3, [pc, #432]	@ (800537c <HAL_I2C_MemRxCpltCallback+0x444>)
 80051cc:	791b      	ldrb	r3, [r3, #4]
 80051ce:	b21b      	sxth	r3, r3
 80051d0:	4313      	orrs	r3, r2
 80051d2:	b21a      	sxth	r2, r3
 80051d4:	4b6c      	ldr	r3, [pc, #432]	@ (8005388 <HAL_I2C_MemRxCpltCallback+0x450>)
 80051d6:	801a      	strh	r2, [r3, #0]
			accel_x = accelX * ACCEL_SENSITIVITY_2G / 100000;
 80051d8:	4b69      	ldr	r3, [pc, #420]	@ (8005380 <HAL_I2C_MemRxCpltCallback+0x448>)
 80051da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80051de:	ee07 3a90 	vmov	s15, r3
 80051e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80051e6:	ed9f 7a69 	vldr	s14, [pc, #420]	@ 800538c <HAL_I2C_MemRxCpltCallback+0x454>
 80051ea:	ee27 7a87 	vmul.f32	s14, s15, s14
 80051ee:	eddf 6a68 	vldr	s13, [pc, #416]	@ 8005390 <HAL_I2C_MemRxCpltCallback+0x458>
 80051f2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80051f6:	4b67      	ldr	r3, [pc, #412]	@ (8005394 <HAL_I2C_MemRxCpltCallback+0x45c>)
 80051f8:	edc3 7a00 	vstr	s15, [r3]
			accel_y = accelY * ACCEL_SENSITIVITY_2G / 100000;
 80051fc:	4b61      	ldr	r3, [pc, #388]	@ (8005384 <HAL_I2C_MemRxCpltCallback+0x44c>)
 80051fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005202:	ee07 3a90 	vmov	s15, r3
 8005206:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800520a:	ed9f 7a60 	vldr	s14, [pc, #384]	@ 800538c <HAL_I2C_MemRxCpltCallback+0x454>
 800520e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005212:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005390 <HAL_I2C_MemRxCpltCallback+0x458>
 8005216:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800521a:	4b5f      	ldr	r3, [pc, #380]	@ (8005398 <HAL_I2C_MemRxCpltCallback+0x460>)
 800521c:	edc3 7a00 	vstr	s15, [r3]
			accel_z = accelZ * ACCEL_SENSITIVITY_2G / 100000;
 8005220:	4b59      	ldr	r3, [pc, #356]	@ (8005388 <HAL_I2C_MemRxCpltCallback+0x450>)
 8005222:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005226:	ee07 3a90 	vmov	s15, r3
 800522a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800522e:	ed9f 7a57 	vldr	s14, [pc, #348]	@ 800538c <HAL_I2C_MemRxCpltCallback+0x454>
 8005232:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005236:	eddf 6a56 	vldr	s13, [pc, #344]	@ 8005390 <HAL_I2C_MemRxCpltCallback+0x458>
 800523a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800523e:	4b57      	ldr	r3, [pc, #348]	@ (800539c <HAL_I2C_MemRxCpltCallback+0x464>)
 8005240:	edc3 7a00 	vstr	s15, [r3]
			axyz[0] = accel_x;
 8005244:	4b53      	ldr	r3, [pc, #332]	@ (8005394 <HAL_I2C_MemRxCpltCallback+0x45c>)
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	4a55      	ldr	r2, [pc, #340]	@ (80053a0 <HAL_I2C_MemRxCpltCallback+0x468>)
 800524a:	6013      	str	r3, [r2, #0]
			axyz[1] = accel_y;
 800524c:	4b52      	ldr	r3, [pc, #328]	@ (8005398 <HAL_I2C_MemRxCpltCallback+0x460>)
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	4a53      	ldr	r2, [pc, #332]	@ (80053a0 <HAL_I2C_MemRxCpltCallback+0x468>)
 8005252:	6053      	str	r3, [r2, #4]
			axyz[2] = accel_z;
 8005254:	4b51      	ldr	r3, [pc, #324]	@ (800539c <HAL_I2C_MemRxCpltCallback+0x464>)
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	4a51      	ldr	r2, [pc, #324]	@ (80053a0 <HAL_I2C_MemRxCpltCallback+0x468>)
 800525a:	6093      	str	r3, [r2, #8]
			axyz2[0] = axyz[0];
 800525c:	4b50      	ldr	r3, [pc, #320]	@ (80053a0 <HAL_I2C_MemRxCpltCallback+0x468>)
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4a50      	ldr	r2, [pc, #320]	@ (80053a4 <HAL_I2C_MemRxCpltCallback+0x46c>)
 8005262:	6013      	str	r3, [r2, #0]
			axyz2[1] = axyz[1];
 8005264:	4b4e      	ldr	r3, [pc, #312]	@ (80053a0 <HAL_I2C_MemRxCpltCallback+0x468>)
 8005266:	685b      	ldr	r3, [r3, #4]
 8005268:	4a4e      	ldr	r2, [pc, #312]	@ (80053a4 <HAL_I2C_MemRxCpltCallback+0x46c>)
 800526a:	6053      	str	r3, [r2, #4]
			axyz2[2] = axyz[2];
 800526c:	4b4c      	ldr	r3, [pc, #304]	@ (80053a0 <HAL_I2C_MemRxCpltCallback+0x468>)
 800526e:	689b      	ldr	r3, [r3, #8]
 8005270:	4a4c      	ldr	r2, [pc, #304]	@ (80053a4 <HAL_I2C_MemRxCpltCallback+0x46c>)
 8005272:	6093      	str	r3, [r2, #8]
			axyz[0] = axyz[0] * 1 / 9.8;
 8005274:	4b4a      	ldr	r3, [pc, #296]	@ (80053a0 <HAL_I2C_MemRxCpltCallback+0x468>)
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	4618      	mov	r0, r3
 800527a:	f7fb f93d 	bl	80004f8 <__aeabi_f2d>
 800527e:	a33c      	add	r3, pc, #240	@ (adr r3, 8005370 <HAL_I2C_MemRxCpltCallback+0x438>)
 8005280:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005284:	f7fb faba 	bl	80007fc <__aeabi_ddiv>
 8005288:	4602      	mov	r2, r0
 800528a:	460b      	mov	r3, r1
 800528c:	4610      	mov	r0, r2
 800528e:	4619      	mov	r1, r3
 8005290:	f7fb fc3a 	bl	8000b08 <__aeabi_d2f>
 8005294:	4603      	mov	r3, r0
 8005296:	4a42      	ldr	r2, [pc, #264]	@ (80053a0 <HAL_I2C_MemRxCpltCallback+0x468>)
 8005298:	6013      	str	r3, [r2, #0]
			axyz[1] = axyz[1] * 1 / 9.8;
 800529a:	4b41      	ldr	r3, [pc, #260]	@ (80053a0 <HAL_I2C_MemRxCpltCallback+0x468>)
 800529c:	685b      	ldr	r3, [r3, #4]
 800529e:	4618      	mov	r0, r3
 80052a0:	f7fb f92a 	bl	80004f8 <__aeabi_f2d>
 80052a4:	a332      	add	r3, pc, #200	@ (adr r3, 8005370 <HAL_I2C_MemRxCpltCallback+0x438>)
 80052a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052aa:	f7fb faa7 	bl	80007fc <__aeabi_ddiv>
 80052ae:	4602      	mov	r2, r0
 80052b0:	460b      	mov	r3, r1
 80052b2:	4610      	mov	r0, r2
 80052b4:	4619      	mov	r1, r3
 80052b6:	f7fb fc27 	bl	8000b08 <__aeabi_d2f>
 80052ba:	4603      	mov	r3, r0
 80052bc:	4a38      	ldr	r2, [pc, #224]	@ (80053a0 <HAL_I2C_MemRxCpltCallback+0x468>)
 80052be:	6053      	str	r3, [r2, #4]
			axyz[2] = axyz[2] * 1 / 9.8;
 80052c0:	4b37      	ldr	r3, [pc, #220]	@ (80053a0 <HAL_I2C_MemRxCpltCallback+0x468>)
 80052c2:	689b      	ldr	r3, [r3, #8]
 80052c4:	4618      	mov	r0, r3
 80052c6:	f7fb f917 	bl	80004f8 <__aeabi_f2d>
 80052ca:	a329      	add	r3, pc, #164	@ (adr r3, 8005370 <HAL_I2C_MemRxCpltCallback+0x438>)
 80052cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052d0:	f7fb fa94 	bl	80007fc <__aeabi_ddiv>
 80052d4:	4602      	mov	r2, r0
 80052d6:	460b      	mov	r3, r1
 80052d8:	4610      	mov	r0, r2
 80052da:	4619      	mov	r1, r3
 80052dc:	f7fb fc14 	bl	8000b08 <__aeabi_d2f>
 80052e0:	4603      	mov	r3, r0
 80052e2:	4a2f      	ldr	r2, [pc, #188]	@ (80053a0 <HAL_I2C_MemRxCpltCallback+0x468>)
 80052e4:	6093      	str	r3, [r2, #8]
			vector_normalize(axyz);
 80052e6:	482e      	ldr	r0, [pc, #184]	@ (80053a0 <HAL_I2C_MemRxCpltCallback+0x468>)
 80052e8:	f7fe fa36 	bl	8003758 <vector_normalize>
			CurrentSensor = MAG_SENSOR;
 80052ec:	4b22      	ldr	r3, [pc, #136]	@ (8005378 <HAL_I2C_MemRxCpltCallback+0x440>)
 80052ee:	2202      	movs	r2, #2
 80052f0:	701a      	strb	r2, [r3, #0]
			LSM9DS1_ReadMag_DMA();
 80052f2:	f7ff fb51 	bl	8004998 <LSM9DS1_ReadMag_DMA>
}
 80052f6:	e191      	b.n	800561c <HAL_I2C_MemRxCpltCallback+0x6e4>
		} else if (CurrentSensor == MAG_SENSOR) {
 80052f8:	4b1f      	ldr	r3, [pc, #124]	@ (8005378 <HAL_I2C_MemRxCpltCallback+0x440>)
 80052fa:	781b      	ldrb	r3, [r3, #0]
 80052fc:	2b02      	cmp	r3, #2
 80052fe:	f040 818d 	bne.w	800561c <HAL_I2C_MemRxCpltCallback+0x6e4>
			magX = (int16_t) ((mag_buffer[1] << 8) | mag_buffer[0]);
 8005302:	4b29      	ldr	r3, [pc, #164]	@ (80053a8 <HAL_I2C_MemRxCpltCallback+0x470>)
 8005304:	785b      	ldrb	r3, [r3, #1]
 8005306:	021b      	lsls	r3, r3, #8
 8005308:	b21a      	sxth	r2, r3
 800530a:	4b27      	ldr	r3, [pc, #156]	@ (80053a8 <HAL_I2C_MemRxCpltCallback+0x470>)
 800530c:	781b      	ldrb	r3, [r3, #0]
 800530e:	b21b      	sxth	r3, r3
 8005310:	4313      	orrs	r3, r2
 8005312:	b21a      	sxth	r2, r3
 8005314:	4b25      	ldr	r3, [pc, #148]	@ (80053ac <HAL_I2C_MemRxCpltCallback+0x474>)
 8005316:	801a      	strh	r2, [r3, #0]
			magY = (int16_t) ((mag_buffer[3] << 8) | mag_buffer[2]);
 8005318:	4b23      	ldr	r3, [pc, #140]	@ (80053a8 <HAL_I2C_MemRxCpltCallback+0x470>)
 800531a:	78db      	ldrb	r3, [r3, #3]
 800531c:	021b      	lsls	r3, r3, #8
 800531e:	b21a      	sxth	r2, r3
 8005320:	4b21      	ldr	r3, [pc, #132]	@ (80053a8 <HAL_I2C_MemRxCpltCallback+0x470>)
 8005322:	789b      	ldrb	r3, [r3, #2]
 8005324:	b21b      	sxth	r3, r3
 8005326:	4313      	orrs	r3, r2
 8005328:	b21a      	sxth	r2, r3
 800532a:	4b21      	ldr	r3, [pc, #132]	@ (80053b0 <HAL_I2C_MemRxCpltCallback+0x478>)
 800532c:	801a      	strh	r2, [r3, #0]
			magZ = (int16_t) ((mag_buffer[5] << 8) | mag_buffer[4]);
 800532e:	4b1e      	ldr	r3, [pc, #120]	@ (80053a8 <HAL_I2C_MemRxCpltCallback+0x470>)
 8005330:	795b      	ldrb	r3, [r3, #5]
 8005332:	021b      	lsls	r3, r3, #8
 8005334:	b21a      	sxth	r2, r3
 8005336:	4b1c      	ldr	r3, [pc, #112]	@ (80053a8 <HAL_I2C_MemRxCpltCallback+0x470>)
 8005338:	791b      	ldrb	r3, [r3, #4]
 800533a:	b21b      	sxth	r3, r3
 800533c:	4313      	orrs	r3, r2
 800533e:	b21a      	sxth	r2, r3
 8005340:	4b1c      	ldr	r3, [pc, #112]	@ (80053b4 <HAL_I2C_MemRxCpltCallback+0x47c>)
 8005342:	801a      	strh	r2, [r3, #0]
			if (magcal_flag == 1) {
 8005344:	4b1c      	ldr	r3, [pc, #112]	@ (80053b8 <HAL_I2C_MemRxCpltCallback+0x480>)
 8005346:	781b      	ldrb	r3, [r3, #0]
 8005348:	2b01      	cmp	r3, #1
 800534a:	d137      	bne.n	80053bc <HAL_I2C_MemRxCpltCallback+0x484>
				process_imu_data(magX, magY, magZ);
 800534c:	4b17      	ldr	r3, [pc, #92]	@ (80053ac <HAL_I2C_MemRxCpltCallback+0x474>)
 800534e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005352:	4a17      	ldr	r2, [pc, #92]	@ (80053b0 <HAL_I2C_MemRxCpltCallback+0x478>)
 8005354:	f9b2 1000 	ldrsh.w	r1, [r2]
 8005358:	4a16      	ldr	r2, [pc, #88]	@ (80053b4 <HAL_I2C_MemRxCpltCallback+0x47c>)
 800535a:	f9b2 2000 	ldrsh.w	r2, [r2]
 800535e:	4618      	mov	r0, r3
 8005360:	f7ff fdce 	bl	8004f00 <process_imu_data>
				MagCal_Run();
 8005364:	f7fc fc98 	bl	8001c98 <MagCal_Run>
 8005368:	e155      	b.n	8005616 <HAL_I2C_MemRxCpltCallback+0x6de>
 800536a:	bf00      	nop
 800536c:	f3af 8000 	nop.w
 8005370:	9999999a 	.word	0x9999999a
 8005374:	40239999 	.word	0x40239999
 8005378:	200003c0 	.word	0x200003c0
 800537c:	20000358 	.word	0x20000358
 8005380:	2000036c 	.word	0x2000036c
 8005384:	2000036e 	.word	0x2000036e
 8005388:	20000370 	.word	0x20000370
 800538c:	42740000 	.word	0x42740000
 8005390:	47c35000 	.word	0x47c35000
 8005394:	20000378 	.word	0x20000378
 8005398:	2000037c 	.word	0x2000037c
 800539c:	20000380 	.word	0x20000380
 80053a0:	200004ac 	.word	0x200004ac
 80053a4:	200004d0 	.word	0x200004d0
 80053a8:	20000360 	.word	0x20000360
 80053ac:	20000372 	.word	0x20000372
 80053b0:	20000374 	.word	0x20000374
 80053b4:	20000376 	.word	0x20000376
 80053b8:	20000040 	.word	0x20000040
				mag_x = magX * MAG_SENSITIVITY_4GAUSS / 1000;
 80053bc:	4b9c      	ldr	r3, [pc, #624]	@ (8005630 <HAL_I2C_MemRxCpltCallback+0x6f8>)
 80053be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80053c2:	ee07 3a90 	vmov	s15, r3
 80053c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80053ca:	ed9f 7a9a 	vldr	s14, [pc, #616]	@ 8005634 <HAL_I2C_MemRxCpltCallback+0x6fc>
 80053ce:	ee27 7a87 	vmul.f32	s14, s15, s14
 80053d2:	eddf 6a99 	vldr	s13, [pc, #612]	@ 8005638 <HAL_I2C_MemRxCpltCallback+0x700>
 80053d6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80053da:	4b98      	ldr	r3, [pc, #608]	@ (800563c <HAL_I2C_MemRxCpltCallback+0x704>)
 80053dc:	edc3 7a00 	vstr	s15, [r3]
				mag_y = magY * MAG_SENSITIVITY_4GAUSS / 1000;
 80053e0:	4b97      	ldr	r3, [pc, #604]	@ (8005640 <HAL_I2C_MemRxCpltCallback+0x708>)
 80053e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80053e6:	ee07 3a90 	vmov	s15, r3
 80053ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80053ee:	ed9f 7a91 	vldr	s14, [pc, #580]	@ 8005634 <HAL_I2C_MemRxCpltCallback+0x6fc>
 80053f2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80053f6:	eddf 6a90 	vldr	s13, [pc, #576]	@ 8005638 <HAL_I2C_MemRxCpltCallback+0x700>
 80053fa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80053fe:	4b91      	ldr	r3, [pc, #580]	@ (8005644 <HAL_I2C_MemRxCpltCallback+0x70c>)
 8005400:	edc3 7a00 	vstr	s15, [r3]
				mag_z = magZ * MAG_SENSITIVITY_4GAUSS / 1000;
 8005404:	4b90      	ldr	r3, [pc, #576]	@ (8005648 <HAL_I2C_MemRxCpltCallback+0x710>)
 8005406:	f9b3 3000 	ldrsh.w	r3, [r3]
 800540a:	ee07 3a90 	vmov	s15, r3
 800540e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005412:	ed9f 7a88 	vldr	s14, [pc, #544]	@ 8005634 <HAL_I2C_MemRxCpltCallback+0x6fc>
 8005416:	ee27 7a87 	vmul.f32	s14, s15, s14
 800541a:	eddf 6a87 	vldr	s13, [pc, #540]	@ 8005638 <HAL_I2C_MemRxCpltCallback+0x700>
 800541e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005422:	4b8a      	ldr	r3, [pc, #552]	@ (800564c <HAL_I2C_MemRxCpltCallback+0x714>)
 8005424:	edc3 7a00 	vstr	s15, [r3]
				mx1 = mag_x - hardIron_x;
 8005428:	4b84      	ldr	r3, [pc, #528]	@ (800563c <HAL_I2C_MemRxCpltCallback+0x704>)
 800542a:	ed93 7a00 	vldr	s14, [r3]
 800542e:	4b88      	ldr	r3, [pc, #544]	@ (8005650 <HAL_I2C_MemRxCpltCallback+0x718>)
 8005430:	edd3 7a00 	vldr	s15, [r3]
 8005434:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005438:	4b86      	ldr	r3, [pc, #536]	@ (8005654 <HAL_I2C_MemRxCpltCallback+0x71c>)
 800543a:	edc3 7a00 	vstr	s15, [r3]
				my1 = mag_y - hardIron_y;
 800543e:	4b81      	ldr	r3, [pc, #516]	@ (8005644 <HAL_I2C_MemRxCpltCallback+0x70c>)
 8005440:	ed93 7a00 	vldr	s14, [r3]
 8005444:	4b84      	ldr	r3, [pc, #528]	@ (8005658 <HAL_I2C_MemRxCpltCallback+0x720>)
 8005446:	edd3 7a00 	vldr	s15, [r3]
 800544a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800544e:	4b83      	ldr	r3, [pc, #524]	@ (800565c <HAL_I2C_MemRxCpltCallback+0x724>)
 8005450:	edc3 7a00 	vstr	s15, [r3]
				mz1 = mag_z - hardIron_z;
 8005454:	4b7d      	ldr	r3, [pc, #500]	@ (800564c <HAL_I2C_MemRxCpltCallback+0x714>)
 8005456:	ed93 7a00 	vldr	s14, [r3]
 800545a:	4b81      	ldr	r3, [pc, #516]	@ (8005660 <HAL_I2C_MemRxCpltCallback+0x728>)
 800545c:	edd3 7a00 	vldr	s15, [r3]
 8005460:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005464:	4b7f      	ldr	r3, [pc, #508]	@ (8005664 <HAL_I2C_MemRxCpltCallback+0x72c>)
 8005466:	edc3 7a00 	vstr	s15, [r3]
				float corrected_V[] = { mx1, my1, mz1 };
 800546a:	4b7a      	ldr	r3, [pc, #488]	@ (8005654 <HAL_I2C_MemRxCpltCallback+0x71c>)
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	60fb      	str	r3, [r7, #12]
 8005470:	4b7a      	ldr	r3, [pc, #488]	@ (800565c <HAL_I2C_MemRxCpltCallback+0x724>)
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	613b      	str	r3, [r7, #16]
 8005476:	4b7b      	ldr	r3, [pc, #492]	@ (8005664 <HAL_I2C_MemRxCpltCallback+0x72c>)
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	617b      	str	r3, [r7, #20]
				result_V[0] = corrected_V[0] * softIron_cali[0][0]
 800547c:	ed97 7a03 	vldr	s14, [r7, #12]
 8005480:	4b79      	ldr	r3, [pc, #484]	@ (8005668 <HAL_I2C_MemRxCpltCallback+0x730>)
 8005482:	edd3 7a00 	vldr	s15, [r3]
 8005486:	ee27 7a27 	vmul.f32	s14, s14, s15
						+ corrected_V[1] * softIron_cali[0][1]
 800548a:	edd7 6a04 	vldr	s13, [r7, #16]
 800548e:	4b76      	ldr	r3, [pc, #472]	@ (8005668 <HAL_I2C_MemRxCpltCallback+0x730>)
 8005490:	edd3 7a01 	vldr	s15, [r3, #4]
 8005494:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005498:	ee37 7a27 	vadd.f32	s14, s14, s15
						+ corrected_V[2] * softIron_cali[0][2];
 800549c:	edd7 6a05 	vldr	s13, [r7, #20]
 80054a0:	4b71      	ldr	r3, [pc, #452]	@ (8005668 <HAL_I2C_MemRxCpltCallback+0x730>)
 80054a2:	edd3 7a02 	vldr	s15, [r3, #8]
 80054a6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80054aa:	ee77 7a27 	vadd.f32	s15, s14, s15
				result_V[0] = corrected_V[0] * softIron_cali[0][0]
 80054ae:	4b6f      	ldr	r3, [pc, #444]	@ (800566c <HAL_I2C_MemRxCpltCallback+0x734>)
 80054b0:	edc3 7a00 	vstr	s15, [r3]
				result_V[1] = corrected_V[0] * softIron_cali[1][0]
 80054b4:	ed97 7a03 	vldr	s14, [r7, #12]
 80054b8:	4b6b      	ldr	r3, [pc, #428]	@ (8005668 <HAL_I2C_MemRxCpltCallback+0x730>)
 80054ba:	edd3 7a03 	vldr	s15, [r3, #12]
 80054be:	ee27 7a27 	vmul.f32	s14, s14, s15
						+ corrected_V[1] * softIron_cali[1][1]
 80054c2:	edd7 6a04 	vldr	s13, [r7, #16]
 80054c6:	4b68      	ldr	r3, [pc, #416]	@ (8005668 <HAL_I2C_MemRxCpltCallback+0x730>)
 80054c8:	edd3 7a04 	vldr	s15, [r3, #16]
 80054cc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80054d0:	ee37 7a27 	vadd.f32	s14, s14, s15
						+ corrected_V[2] * softIron_cali[1][2];
 80054d4:	edd7 6a05 	vldr	s13, [r7, #20]
 80054d8:	4b63      	ldr	r3, [pc, #396]	@ (8005668 <HAL_I2C_MemRxCpltCallback+0x730>)
 80054da:	edd3 7a05 	vldr	s15, [r3, #20]
 80054de:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80054e2:	ee77 7a27 	vadd.f32	s15, s14, s15
				result_V[1] = corrected_V[0] * softIron_cali[1][0]
 80054e6:	4b61      	ldr	r3, [pc, #388]	@ (800566c <HAL_I2C_MemRxCpltCallback+0x734>)
 80054e8:	edc3 7a01 	vstr	s15, [r3, #4]
				result_V[2] = corrected_V[0] * softIron_cali[2][0]
 80054ec:	ed97 7a03 	vldr	s14, [r7, #12]
 80054f0:	4b5d      	ldr	r3, [pc, #372]	@ (8005668 <HAL_I2C_MemRxCpltCallback+0x730>)
 80054f2:	edd3 7a06 	vldr	s15, [r3, #24]
 80054f6:	ee27 7a27 	vmul.f32	s14, s14, s15
						+ corrected_V[1] * softIron_cali[2][1]
 80054fa:	edd7 6a04 	vldr	s13, [r7, #16]
 80054fe:	4b5a      	ldr	r3, [pc, #360]	@ (8005668 <HAL_I2C_MemRxCpltCallback+0x730>)
 8005500:	edd3 7a07 	vldr	s15, [r3, #28]
 8005504:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005508:	ee37 7a27 	vadd.f32	s14, s14, s15
						+ corrected_V[2] * softIron_cali[2][2];
 800550c:	edd7 6a05 	vldr	s13, [r7, #20]
 8005510:	4b55      	ldr	r3, [pc, #340]	@ (8005668 <HAL_I2C_MemRxCpltCallback+0x730>)
 8005512:	edd3 7a08 	vldr	s15, [r3, #32]
 8005516:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800551a:	ee77 7a27 	vadd.f32	s15, s14, s15
				result_V[2] = corrected_V[0] * softIron_cali[2][0]
 800551e:	4b53      	ldr	r3, [pc, #332]	@ (800566c <HAL_I2C_MemRxCpltCallback+0x734>)
 8005520:	edc3 7a02 	vstr	s15, [r3, #8]
				mx2 = result_V[0];
 8005524:	4b51      	ldr	r3, [pc, #324]	@ (800566c <HAL_I2C_MemRxCpltCallback+0x734>)
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	4a51      	ldr	r2, [pc, #324]	@ (8005670 <HAL_I2C_MemRxCpltCallback+0x738>)
 800552a:	6013      	str	r3, [r2, #0]
				my2 = result_V[1];
 800552c:	4b4f      	ldr	r3, [pc, #316]	@ (800566c <HAL_I2C_MemRxCpltCallback+0x734>)
 800552e:	685b      	ldr	r3, [r3, #4]
 8005530:	4a50      	ldr	r2, [pc, #320]	@ (8005674 <HAL_I2C_MemRxCpltCallback+0x73c>)
 8005532:	6013      	str	r3, [r2, #0]
				mz2 = result_V[2];
 8005534:	4b4d      	ldr	r3, [pc, #308]	@ (800566c <HAL_I2C_MemRxCpltCallback+0x734>)
 8005536:	689b      	ldr	r3, [r3, #8]
 8005538:	4a4f      	ldr	r2, [pc, #316]	@ (8005678 <HAL_I2C_MemRxCpltCallback+0x740>)
 800553a:	6013      	str	r3, [r2, #0]
				mxyz[0] = mx2;
 800553c:	4b4c      	ldr	r3, [pc, #304]	@ (8005670 <HAL_I2C_MemRxCpltCallback+0x738>)
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	4a4e      	ldr	r2, [pc, #312]	@ (800567c <HAL_I2C_MemRxCpltCallback+0x744>)
 8005542:	6013      	str	r3, [r2, #0]
				mxyz[1] = my2;
 8005544:	4b4b      	ldr	r3, [pc, #300]	@ (8005674 <HAL_I2C_MemRxCpltCallback+0x73c>)
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	4a4c      	ldr	r2, [pc, #304]	@ (800567c <HAL_I2C_MemRxCpltCallback+0x744>)
 800554a:	6053      	str	r3, [r2, #4]
				mxyz[2] = mz2;
 800554c:	4b4a      	ldr	r3, [pc, #296]	@ (8005678 <HAL_I2C_MemRxCpltCallback+0x740>)
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	4a4a      	ldr	r2, [pc, #296]	@ (800567c <HAL_I2C_MemRxCpltCallback+0x744>)
 8005552:	6093      	str	r3, [r2, #8]
				vector_normalize(mxyz);
 8005554:	4849      	ldr	r0, [pc, #292]	@ (800567c <HAL_I2C_MemRxCpltCallback+0x744>)
 8005556:	f7fe f8ff 	bl	8003758 <vector_normalize>
				axyz1[0] = -axyz[0];
 800555a:	4b49      	ldr	r3, [pc, #292]	@ (8005680 <HAL_I2C_MemRxCpltCallback+0x748>)
 800555c:	edd3 7a00 	vldr	s15, [r3]
 8005560:	eef1 7a67 	vneg.f32	s15, s15
 8005564:	4b47      	ldr	r3, [pc, #284]	@ (8005684 <HAL_I2C_MemRxCpltCallback+0x74c>)
 8005566:	edc3 7a00 	vstr	s15, [r3]
				gxyz1[0] = -gxyz[0];
 800556a:	4b47      	ldr	r3, [pc, #284]	@ (8005688 <HAL_I2C_MemRxCpltCallback+0x750>)
 800556c:	edd3 7a00 	vldr	s15, [r3]
 8005570:	eef1 7a67 	vneg.f32	s15, s15
 8005574:	4b45      	ldr	r3, [pc, #276]	@ (800568c <HAL_I2C_MemRxCpltCallback+0x754>)
 8005576:	edc3 7a00 	vstr	s15, [r3]
				Now = micros();
 800557a:	f7fe f873 	bl	8003664 <micros>
 800557e:	4603      	mov	r3, r0
 8005580:	4a43      	ldr	r2, [pc, #268]	@ (8005690 <HAL_I2C_MemRxCpltCallback+0x758>)
 8005582:	6013      	str	r3, [r2, #0]
				deltat = (Now - lastUpdate) * 1.5e-4;
 8005584:	4b42      	ldr	r3, [pc, #264]	@ (8005690 <HAL_I2C_MemRxCpltCallback+0x758>)
 8005586:	681a      	ldr	r2, [r3, #0]
 8005588:	4b42      	ldr	r3, [pc, #264]	@ (8005694 <HAL_I2C_MemRxCpltCallback+0x75c>)
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	1ad3      	subs	r3, r2, r3
 800558e:	4618      	mov	r0, r3
 8005590:	f7fa ff90 	bl	80004b4 <__aeabi_ui2d>
 8005594:	a324      	add	r3, pc, #144	@ (adr r3, 8005628 <HAL_I2C_MemRxCpltCallback+0x6f0>)
 8005596:	e9d3 2300 	ldrd	r2, r3, [r3]
 800559a:	f7fb f805 	bl	80005a8 <__aeabi_dmul>
 800559e:	4602      	mov	r2, r0
 80055a0:	460b      	mov	r3, r1
 80055a2:	4610      	mov	r0, r2
 80055a4:	4619      	mov	r1, r3
 80055a6:	f7fb faaf 	bl	8000b08 <__aeabi_d2f>
 80055aa:	4603      	mov	r3, r0
 80055ac:	4a3a      	ldr	r2, [pc, #232]	@ (8005698 <HAL_I2C_MemRxCpltCallback+0x760>)
 80055ae:	6013      	str	r3, [r2, #0]
				lastUpdate = Now;
 80055b0:	4b37      	ldr	r3, [pc, #220]	@ (8005690 <HAL_I2C_MemRxCpltCallback+0x758>)
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	4a37      	ldr	r2, [pc, #220]	@ (8005694 <HAL_I2C_MemRxCpltCallback+0x75c>)
 80055b6:	6013      	str	r3, [r2, #0]
				MadgwickAHRSupdate(gxyz1[0], gxyz[1], gxyz[2], axyz1[0],
 80055b8:	4b34      	ldr	r3, [pc, #208]	@ (800568c <HAL_I2C_MemRxCpltCallback+0x754>)
 80055ba:	edd3 7a00 	vldr	s15, [r3]
 80055be:	4b32      	ldr	r3, [pc, #200]	@ (8005688 <HAL_I2C_MemRxCpltCallback+0x750>)
 80055c0:	ed93 7a01 	vldr	s14, [r3, #4]
 80055c4:	4b30      	ldr	r3, [pc, #192]	@ (8005688 <HAL_I2C_MemRxCpltCallback+0x750>)
 80055c6:	edd3 6a02 	vldr	s13, [r3, #8]
 80055ca:	4b2e      	ldr	r3, [pc, #184]	@ (8005684 <HAL_I2C_MemRxCpltCallback+0x74c>)
 80055cc:	ed93 6a00 	vldr	s12, [r3]
 80055d0:	4b2b      	ldr	r3, [pc, #172]	@ (8005680 <HAL_I2C_MemRxCpltCallback+0x748>)
 80055d2:	edd3 5a01 	vldr	s11, [r3, #4]
 80055d6:	4b2a      	ldr	r3, [pc, #168]	@ (8005680 <HAL_I2C_MemRxCpltCallback+0x748>)
 80055d8:	ed93 5a02 	vldr	s10, [r3, #8]
 80055dc:	4b27      	ldr	r3, [pc, #156]	@ (800567c <HAL_I2C_MemRxCpltCallback+0x744>)
 80055de:	edd3 4a00 	vldr	s9, [r3]
 80055e2:	4b26      	ldr	r3, [pc, #152]	@ (800567c <HAL_I2C_MemRxCpltCallback+0x744>)
 80055e4:	edd3 3a01 	vldr	s7, [r3, #4]
 80055e8:	4b24      	ldr	r3, [pc, #144]	@ (800567c <HAL_I2C_MemRxCpltCallback+0x744>)
 80055ea:	ed93 4a02 	vldr	s8, [r3, #8]
 80055ee:	eeb0 3a64 	vmov.f32	s6, s9
 80055f2:	eef0 2a45 	vmov.f32	s5, s10
 80055f6:	eeb0 2a65 	vmov.f32	s4, s11
 80055fa:	eef0 1a46 	vmov.f32	s3, s12
 80055fe:	eeb0 1a66 	vmov.f32	s2, s13
 8005602:	eef0 0a47 	vmov.f32	s1, s14
 8005606:	eeb0 0a67 	vmov.f32	s0, s15
 800560a:	f7fe f8e7 	bl	80037dc <MadgwickAHRSupdate>
				UTIL_SEQ_SetTask(1 << CFG_TASK_MY_TASK_BLE, CFG_SCH_PRIO_0);
 800560e:	2100      	movs	r1, #0
 8005610:	2004      	movs	r0, #4
 8005612:	f00a fb93 	bl	800fd3c <UTIL_SEQ_SetTask>
			CurrentSensor = GYRO_SENSOR;
 8005616:	4b21      	ldr	r3, [pc, #132]	@ (800569c <HAL_I2C_MemRxCpltCallback+0x764>)
 8005618:	2200      	movs	r2, #0
 800561a:	701a      	strb	r2, [r3, #0]
}
 800561c:	bf00      	nop
 800561e:	3718      	adds	r7, #24
 8005620:	46bd      	mov	sp, r7
 8005622:	bd80      	pop	{r7, pc}
 8005624:	f3af 8000 	nop.w
 8005628:	30553261 	.word	0x30553261
 800562c:	3f23a92a 	.word	0x3f23a92a
 8005630:	20000372 	.word	0x20000372
 8005634:	3e0f5c29 	.word	0x3e0f5c29
 8005638:	447a0000 	.word	0x447a0000
 800563c:	200003b4 	.word	0x200003b4
 8005640:	20000374 	.word	0x20000374
 8005644:	200003b8 	.word	0x200003b8
 8005648:	20000376 	.word	0x20000376
 800564c:	200003bc 	.word	0x200003bc
 8005650:	20000010 	.word	0x20000010
 8005654:	20000460 	.word	0x20000460
 8005658:	20000014 	.word	0x20000014
 800565c:	20000464 	.word	0x20000464
 8005660:	20000018 	.word	0x20000018
 8005664:	20000468 	.word	0x20000468
 8005668:	2000001c 	.word	0x2000001c
 800566c:	200004dc 	.word	0x200004dc
 8005670:	2000046c 	.word	0x2000046c
 8005674:	20000470 	.word	0x20000470
 8005678:	20000474 	.word	0x20000474
 800567c:	200004c4 	.word	0x200004c4
 8005680:	200004ac 	.word	0x200004ac
 8005684:	200004b8 	.word	0x200004b8
 8005688:	20000494 	.word	0x20000494
 800568c:	200004a0 	.word	0x200004a0
 8005690:	20000490 	.word	0x20000490
 8005694:	20000488 	.word	0x20000488
 8005698:	20000484 	.word	0x20000484
 800569c:	200003c0 	.word	0x200003c0

080056a0 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */

int main(void) {
 80056a0:	b580      	push	{r7, lr}
 80056a2:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80056a4:	f001 fe5c 	bl	8007360 <HAL_Init>
	/* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
	MX_APPE_Config();
 80056a8:	f7fb fb52 	bl	8000d50 <MX_APPE_Config>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80056ac:	f000 f824 	bl	80056f8 <SystemClock_Config>

	/* Configure the peripherals common clocks */
	PeriphCommonClock_Config();
 80056b0:	f000 f884 	bl	80057bc <PeriphCommonClock_Config>

	/* IPCC initialisation */
	MX_IPCC_Init();
 80056b4:	f000 f8e2 	bl	800587c <MX_IPCC_Init>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80056b8:	f000 f998 	bl	80059ec <MX_GPIO_Init>
	MX_DMA_Init();
 80056bc:	f000 f97c 	bl	80059b8 <MX_DMA_Init>
	MX_I2C1_Init();
 80056c0:	f000 f89c 	bl	80057fc <MX_I2C1_Init>
	MX_RTC_Init();
 80056c4:	f000 f8f6 	bl	80058b4 <MX_RTC_Init>
	MX_TIM2_Init();
 80056c8:	f000 f928 	bl	800591c <MX_TIM2_Init>
	MX_RF_Init();
 80056cc:	f000 f8ea 	bl	80058a4 <MX_RF_Init>
	/* USER CODE BEGIN 2 */

	/* USER CODE END 2 */

	/* Init code for STM32_WPAN */
	MX_APPE_Init();
 80056d0:	f7fb fb4c 	bl	8000d6c <MX_APPE_Init>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	LSM9DS1_Init();
 80056d4:	f7fd ff92 	bl	80035fc <LSM9DS1_Init>
	HAL_Delay(10);
 80056d8:	200a      	movs	r0, #10
 80056da:	f7fb fc74 	bl	8000fc6 <HAL_Delay>

	HAL_TIM_Base_Start(&htim2);
 80056de:	4805      	ldr	r0, [pc, #20]	@ (80056f4 <main+0x54>)
 80056e0:	f006 fd9c 	bl	800c21c <HAL_TIM_Base_Start>

	magcal_Init();
 80056e4:	f7ff f96c 	bl	80049c0 <magcal_Init>

	while (1) {

		/* USER CODE END WHILE */
		MX_APPE_Process();
 80056e8:	f7fb fc92 	bl	8001010 <MX_APPE_Process>

		/* USER CODE BEGIN 3 */

		//low_power_code
		LSM9DS1_ReadGyro_DMA();
 80056ec:	f7ff f92c 	bl	8004948 <LSM9DS1_ReadGyro_DMA>
		MX_APPE_Process();
 80056f0:	bf00      	nop
 80056f2:	e7f9      	b.n	80056e8 <main+0x48>
 80056f4:	20000304 	.word	0x20000304

080056f8 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b09a      	sub	sp, #104	@ 0x68
 80056fc:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80056fe:	f107 0320 	add.w	r3, r7, #32
 8005702:	2248      	movs	r2, #72	@ 0x48
 8005704:	2100      	movs	r1, #0
 8005706:	4618      	mov	r0, r3
 8005708:	f00a fd77 	bl	80101fa <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800570c:	1d3b      	adds	r3, r7, #4
 800570e:	2200      	movs	r2, #0
 8005710:	601a      	str	r2, [r3, #0]
 8005712:	605a      	str	r2, [r3, #4]
 8005714:	609a      	str	r2, [r3, #8]
 8005716:	60da      	str	r2, [r3, #12]
 8005718:	611a      	str	r2, [r3, #16]
 800571a:	615a      	str	r2, [r3, #20]
 800571c:	619a      	str	r2, [r3, #24]

	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess();
 800571e:	f004 fde1 	bl	800a2e4 <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMHIGH);
 8005722:	2010      	movs	r0, #16
 8005724:	f7fd ff04 	bl	8003530 <LL_RCC_LSE_SetDriveCapability>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005728:	4b23      	ldr	r3, [pc, #140]	@ (80057b8 <SystemClock_Config+0xc0>)
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005730:	4a21      	ldr	r2, [pc, #132]	@ (80057b8 <SystemClock_Config+0xc0>)
 8005732:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005736:	6013      	str	r3, [r2, #0]
 8005738:	4b1f      	ldr	r3, [pc, #124]	@ (80057b8 <SystemClock_Config+0xc0>)
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005740:	603b      	str	r3, [r7, #0]
 8005742:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI
 8005744:	2327      	movs	r3, #39	@ 0x27
 8005746:	623b      	str	r3, [r7, #32]
			| RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_LSE
			| RCC_OSCILLATORTYPE_MSI;
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005748:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800574c:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800574e:	2301      	movs	r3, #1
 8005750:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8005752:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005756:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8005758:	2301      	movs	r3, #1
 800575a:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800575c:	2340      	movs	r3, #64	@ 0x40
 800575e:	633b      	str	r3, [r7, #48]	@ 0x30
	RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8005760:	2300      	movs	r3, #0
 8005762:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_10;
 8005764:	23a0      	movs	r3, #160	@ 0xa0
 8005766:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8005768:	2300      	movs	r3, #0
 800576a:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800576c:	f107 0320 	add.w	r3, r7, #32
 8005770:	4618      	mov	r0, r3
 8005772:	f005 f933 	bl	800a9dc <HAL_RCC_OscConfig>
 8005776:	4603      	mov	r3, r0
 8005778:	2b00      	cmp	r3, #0
 800577a:	d001      	beq.n	8005780 <SystemClock_Config+0x88>
		Error_Handler();
 800577c:	f000 f9b2 	bl	8005ae4 <Error_Handler>
	}

	/** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4 | RCC_CLOCKTYPE_HCLK2
 8005780:	236f      	movs	r3, #111	@ 0x6f
 8005782:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1
			| RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8005784:	2300      	movs	r3, #0
 8005786:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005788:	2300      	movs	r3, #0
 800578a:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800578c:	2300      	movs	r3, #0
 800578e:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005790:	2300      	movs	r3, #0
 8005792:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8005794:	2300      	movs	r3, #0
 8005796:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8005798:	2300      	movs	r3, #0
 800579a:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 800579c:	1d3b      	adds	r3, r7, #4
 800579e:	2101      	movs	r1, #1
 80057a0:	4618      	mov	r0, r3
 80057a2:	f005 fc8f 	bl	800b0c4 <HAL_RCC_ClockConfig>
 80057a6:	4603      	mov	r3, r0
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d001      	beq.n	80057b0 <SystemClock_Config+0xb8>
		Error_Handler();
 80057ac:	f000 f99a 	bl	8005ae4 <Error_Handler>
	}
}
 80057b0:	bf00      	nop
 80057b2:	3768      	adds	r7, #104	@ 0x68
 80057b4:	46bd      	mov	sp, r7
 80057b6:	bd80      	pop	{r7, pc}
 80057b8:	58000400 	.word	0x58000400

080057bc <PeriphCommonClock_Config>:

/**
 * @brief Peripherals Common Clock Configuration
 * @retval None
 */
void PeriphCommonClock_Config(void) {
 80057bc:	b580      	push	{r7, lr}
 80057be:	b094      	sub	sp, #80	@ 0x50
 80057c0:	af00      	add	r7, sp, #0
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 80057c2:	463b      	mov	r3, r7
 80057c4:	2250      	movs	r2, #80	@ 0x50
 80057c6:	2100      	movs	r1, #0
 80057c8:	4618      	mov	r0, r3
 80057ca:	f00a fd16 	bl	80101fa <memset>

	/** Initializes the peripherals clock
	 */
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS
 80057ce:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80057d2:	603b      	str	r3, [r7, #0]
			| RCC_PERIPHCLK_RFWAKEUP;
	PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 80057d4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80057d8:	647b      	str	r3, [r7, #68]	@ 0x44
	PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 80057da:	2300      	movs	r3, #0
 80057dc:	64bb      	str	r3, [r7, #72]	@ 0x48
	PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 80057de:	2300      	movs	r3, #0
 80057e0:	64fb      	str	r3, [r7, #76]	@ 0x4c

	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 80057e2:	463b      	mov	r3, r7
 80057e4:	4618      	mov	r0, r3
 80057e6:	f006 f87e 	bl	800b8e6 <HAL_RCCEx_PeriphCLKConfig>
 80057ea:	4603      	mov	r3, r0
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d001      	beq.n	80057f4 <PeriphCommonClock_Config+0x38>
		Error_Handler();
 80057f0:	f000 f978 	bl	8005ae4 <Error_Handler>
	}
	/* USER CODE BEGIN Smps */

	/* USER CODE END Smps */
}
 80057f4:	bf00      	nop
 80057f6:	3750      	adds	r7, #80	@ 0x50
 80057f8:	46bd      	mov	sp, r7
 80057fa:	bd80      	pop	{r7, pc}

080057fc <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 80057fc:	b580      	push	{r7, lr}
 80057fe:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8005800:	4b1b      	ldr	r3, [pc, #108]	@ (8005870 <MX_I2C1_Init+0x74>)
 8005802:	4a1c      	ldr	r2, [pc, #112]	@ (8005874 <MX_I2C1_Init+0x78>)
 8005804:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x00B07CB4;
 8005806:	4b1a      	ldr	r3, [pc, #104]	@ (8005870 <MX_I2C1_Init+0x74>)
 8005808:	4a1b      	ldr	r2, [pc, #108]	@ (8005878 <MX_I2C1_Init+0x7c>)
 800580a:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0;
 800580c:	4b18      	ldr	r3, [pc, #96]	@ (8005870 <MX_I2C1_Init+0x74>)
 800580e:	2200      	movs	r2, #0
 8005810:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005812:	4b17      	ldr	r3, [pc, #92]	@ (8005870 <MX_I2C1_Init+0x74>)
 8005814:	2201      	movs	r2, #1
 8005816:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005818:	4b15      	ldr	r3, [pc, #84]	@ (8005870 <MX_I2C1_Init+0x74>)
 800581a:	2200      	movs	r2, #0
 800581c:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 800581e:	4b14      	ldr	r3, [pc, #80]	@ (8005870 <MX_I2C1_Init+0x74>)
 8005820:	2200      	movs	r2, #0
 8005822:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8005824:	4b12      	ldr	r3, [pc, #72]	@ (8005870 <MX_I2C1_Init+0x74>)
 8005826:	2200      	movs	r2, #0
 8005828:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800582a:	4b11      	ldr	r3, [pc, #68]	@ (8005870 <MX_I2C1_Init+0x74>)
 800582c:	2200      	movs	r2, #0
 800582e:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005830:	4b0f      	ldr	r3, [pc, #60]	@ (8005870 <MX_I2C1_Init+0x74>)
 8005832:	2200      	movs	r2, #0
 8005834:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8005836:	480e      	ldr	r0, [pc, #56]	@ (8005870 <MX_I2C1_Init+0x74>)
 8005838:	f002 fc66 	bl	8008108 <HAL_I2C_Init>
 800583c:	4603      	mov	r3, r0
 800583e:	2b00      	cmp	r3, #0
 8005840:	d001      	beq.n	8005846 <MX_I2C1_Init+0x4a>
		Error_Handler();
 8005842:	f000 f94f 	bl	8005ae4 <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE)
 8005846:	2100      	movs	r1, #0
 8005848:	4809      	ldr	r0, [pc, #36]	@ (8005870 <MX_I2C1_Init+0x74>)
 800584a:	f004 fc2d 	bl	800a0a8 <HAL_I2CEx_ConfigAnalogFilter>
 800584e:	4603      	mov	r3, r0
 8005850:	2b00      	cmp	r3, #0
 8005852:	d001      	beq.n	8005858 <MX_I2C1_Init+0x5c>
			!= HAL_OK) {
		Error_Handler();
 8005854:	f000 f946 	bl	8005ae4 <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK) {
 8005858:	2100      	movs	r1, #0
 800585a:	4805      	ldr	r0, [pc, #20]	@ (8005870 <MX_I2C1_Init+0x74>)
 800585c:	f004 fc6f 	bl	800a13e <HAL_I2CEx_ConfigDigitalFilter>
 8005860:	4603      	mov	r3, r0
 8005862:	2b00      	cmp	r3, #0
 8005864:	d001      	beq.n	800586a <MX_I2C1_Init+0x6e>
		Error_Handler();
 8005866:	f000 f93d 	bl	8005ae4 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */
//	__HAL_LINKDMA(&hi2c1, hdmarx, hdma_i2c1_rx);
	/* USER CODE END I2C1_Init 2 */

}
 800586a:	bf00      	nop
 800586c:	bd80      	pop	{r7, pc}
 800586e:	bf00      	nop
 8005870:	200001f0 	.word	0x200001f0
 8005874:	40005400 	.word	0x40005400
 8005878:	00b07cb4 	.word	0x00b07cb4

0800587c <MX_IPCC_Init>:
/**
 * @brief IPCC Initialization Function
 * @param None
 * @retval None
 */
static void MX_IPCC_Init(void) {
 800587c:	b580      	push	{r7, lr}
 800587e:	af00      	add	r7, sp, #0
	/* USER CODE END IPCC_Init 0 */

	/* USER CODE BEGIN IPCC_Init 1 */

	/* USER CODE END IPCC_Init 1 */
	hipcc.Instance = IPCC;
 8005880:	4b06      	ldr	r3, [pc, #24]	@ (800589c <MX_IPCC_Init+0x20>)
 8005882:	4a07      	ldr	r2, [pc, #28]	@ (80058a0 <MX_IPCC_Init+0x24>)
 8005884:	601a      	str	r2, [r3, #0]
	if (HAL_IPCC_Init(&hipcc) != HAL_OK) {
 8005886:	4805      	ldr	r0, [pc, #20]	@ (800589c <MX_IPCC_Init+0x20>)
 8005888:	f004 fca6 	bl	800a1d8 <HAL_IPCC_Init>
 800588c:	4603      	mov	r3, r0
 800588e:	2b00      	cmp	r3, #0
 8005890:	d001      	beq.n	8005896 <MX_IPCC_Init+0x1a>
		Error_Handler();
 8005892:	f000 f927 	bl	8005ae4 <Error_Handler>
	}
	/* USER CODE BEGIN IPCC_Init 2 */

	/* USER CODE END IPCC_Init 2 */

}
 8005896:	bf00      	nop
 8005898:	bd80      	pop	{r7, pc}
 800589a:	bf00      	nop
 800589c:	200002a4 	.word	0x200002a4
 80058a0:	58000c00 	.word	0x58000c00

080058a4 <MX_RF_Init>:
/**
 * @brief RF Initialization Function
 * @param None
 * @retval None
 */
static void MX_RF_Init(void) {
 80058a4:	b480      	push	{r7}
 80058a6:	af00      	add	r7, sp, #0
	/* USER CODE END RF_Init 1 */
	/* USER CODE BEGIN RF_Init 2 */

	/* USER CODE END RF_Init 2 */

}
 80058a8:	bf00      	nop
 80058aa:	46bd      	mov	sp, r7
 80058ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b0:	4770      	bx	lr
	...

080058b4 <MX_RTC_Init>:
/**
 * @brief RTC Initialization Function
 * @param None
 * @retval None
 */
static void MX_RTC_Init(void) {
 80058b4:	b580      	push	{r7, lr}
 80058b6:	af00      	add	r7, sp, #0

	/* USER CODE END RTC_Init 1 */

	/** Initialize RTC Only
	 */
	hrtc.Instance = RTC;
 80058b8:	4b16      	ldr	r3, [pc, #88]	@ (8005914 <MX_RTC_Init+0x60>)
 80058ba:	4a17      	ldr	r2, [pc, #92]	@ (8005918 <MX_RTC_Init+0x64>)
 80058bc:	601a      	str	r2, [r3, #0]
	hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80058be:	4b15      	ldr	r3, [pc, #84]	@ (8005914 <MX_RTC_Init+0x60>)
 80058c0:	2200      	movs	r2, #0
 80058c2:	605a      	str	r2, [r3, #4]
	hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 80058c4:	4b13      	ldr	r3, [pc, #76]	@ (8005914 <MX_RTC_Init+0x60>)
 80058c6:	220f      	movs	r2, #15
 80058c8:	609a      	str	r2, [r3, #8]
	hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 80058ca:	4b12      	ldr	r3, [pc, #72]	@ (8005914 <MX_RTC_Init+0x60>)
 80058cc:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 80058d0:	60da      	str	r2, [r3, #12]
	hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80058d2:	4b10      	ldr	r3, [pc, #64]	@ (8005914 <MX_RTC_Init+0x60>)
 80058d4:	2200      	movs	r2, #0
 80058d6:	611a      	str	r2, [r3, #16]
	hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80058d8:	4b0e      	ldr	r3, [pc, #56]	@ (8005914 <MX_RTC_Init+0x60>)
 80058da:	2200      	movs	r2, #0
 80058dc:	619a      	str	r2, [r3, #24]
	hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80058de:	4b0d      	ldr	r3, [pc, #52]	@ (8005914 <MX_RTC_Init+0x60>)
 80058e0:	2200      	movs	r2, #0
 80058e2:	61da      	str	r2, [r3, #28]
	hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80058e4:	4b0b      	ldr	r3, [pc, #44]	@ (8005914 <MX_RTC_Init+0x60>)
 80058e6:	2200      	movs	r2, #0
 80058e8:	615a      	str	r2, [r3, #20]
	if (HAL_RTC_Init(&hrtc) != HAL_OK) {
 80058ea:	480a      	ldr	r0, [pc, #40]	@ (8005914 <MX_RTC_Init+0x60>)
 80058ec:	f006 fa82 	bl	800bdf4 <HAL_RTC_Init>
 80058f0:	4603      	mov	r3, r0
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d001      	beq.n	80058fa <MX_RTC_Init+0x46>
		Error_Handler();
 80058f6:	f000 f8f5 	bl	8005ae4 <Error_Handler>
	}

	/** Enable the WakeUp
	 */
	if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16)
 80058fa:	2200      	movs	r2, #0
 80058fc:	2100      	movs	r1, #0
 80058fe:	4805      	ldr	r0, [pc, #20]	@ (8005914 <MX_RTC_Init+0x60>)
 8005900:	f006 fb78 	bl	800bff4 <HAL_RTCEx_SetWakeUpTimer_IT>
 8005904:	4603      	mov	r3, r0
 8005906:	2b00      	cmp	r3, #0
 8005908:	d001      	beq.n	800590e <MX_RTC_Init+0x5a>
			!= HAL_OK) {
		Error_Handler();
 800590a:	f000 f8eb 	bl	8005ae4 <Error_Handler>
	}
	/* USER CODE BEGIN RTC_Init 2 */

	/* USER CODE END RTC_Init 2 */

}
 800590e:	bf00      	nop
 8005910:	bd80      	pop	{r7, pc}
 8005912:	bf00      	nop
 8005914:	200002e0 	.word	0x200002e0
 8005918:	40002800 	.word	0x40002800

0800591c <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 800591c:	b580      	push	{r7, lr}
 800591e:	b088      	sub	sp, #32
 8005920:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8005922:	f107 0310 	add.w	r3, r7, #16
 8005926:	2200      	movs	r2, #0
 8005928:	601a      	str	r2, [r3, #0]
 800592a:	605a      	str	r2, [r3, #4]
 800592c:	609a      	str	r2, [r3, #8]
 800592e:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8005930:	1d3b      	adds	r3, r7, #4
 8005932:	2200      	movs	r2, #0
 8005934:	601a      	str	r2, [r3, #0]
 8005936:	605a      	str	r2, [r3, #4]
 8005938:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 800593a:	4b1e      	ldr	r3, [pc, #120]	@ (80059b4 <MX_TIM2_Init+0x98>)
 800593c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8005940:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 99;
 8005942:	4b1c      	ldr	r3, [pc, #112]	@ (80059b4 <MX_TIM2_Init+0x98>)
 8005944:	2263      	movs	r2, #99	@ 0x63
 8005946:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005948:	4b1a      	ldr	r3, [pc, #104]	@ (80059b4 <MX_TIM2_Init+0x98>)
 800594a:	2200      	movs	r2, #0
 800594c:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 0xffffffff;
 800594e:	4b19      	ldr	r3, [pc, #100]	@ (80059b4 <MX_TIM2_Init+0x98>)
 8005950:	f04f 32ff 	mov.w	r2, #4294967295
 8005954:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005956:	4b17      	ldr	r3, [pc, #92]	@ (80059b4 <MX_TIM2_Init+0x98>)
 8005958:	2200      	movs	r2, #0
 800595a:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800595c:	4b15      	ldr	r3, [pc, #84]	@ (80059b4 <MX_TIM2_Init+0x98>)
 800595e:	2200      	movs	r2, #0
 8005960:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8005962:	4814      	ldr	r0, [pc, #80]	@ (80059b4 <MX_TIM2_Init+0x98>)
 8005964:	f006 fc02 	bl	800c16c <HAL_TIM_Base_Init>
 8005968:	4603      	mov	r3, r0
 800596a:	2b00      	cmp	r3, #0
 800596c:	d001      	beq.n	8005972 <MX_TIM2_Init+0x56>
		Error_Handler();
 800596e:	f000 f8b9 	bl	8005ae4 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005972:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005976:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8005978:	f107 0310 	add.w	r3, r7, #16
 800597c:	4619      	mov	r1, r3
 800597e:	480d      	ldr	r0, [pc, #52]	@ (80059b4 <MX_TIM2_Init+0x98>)
 8005980:	f006 fc92 	bl	800c2a8 <HAL_TIM_ConfigClockSource>
 8005984:	4603      	mov	r3, r0
 8005986:	2b00      	cmp	r3, #0
 8005988:	d001      	beq.n	800598e <MX_TIM2_Init+0x72>
		Error_Handler();
 800598a:	f000 f8ab 	bl	8005ae4 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800598e:	2300      	movs	r3, #0
 8005990:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005992:	2300      	movs	r3, #0
 8005994:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8005996:	1d3b      	adds	r3, r7, #4
 8005998:	4619      	mov	r1, r3
 800599a:	4806      	ldr	r0, [pc, #24]	@ (80059b4 <MX_TIM2_Init+0x98>)
 800599c:	f006 fe5a 	bl	800c654 <HAL_TIMEx_MasterConfigSynchronization>
 80059a0:	4603      	mov	r3, r0
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d001      	beq.n	80059aa <MX_TIM2_Init+0x8e>
			!= HAL_OK) {
		Error_Handler();
 80059a6:	f000 f89d 	bl	8005ae4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 80059aa:	bf00      	nop
 80059ac:	3720      	adds	r7, #32
 80059ae:	46bd      	mov	sp, r7
 80059b0:	bd80      	pop	{r7, pc}
 80059b2:	bf00      	nop
 80059b4:	20000304 	.word	0x20000304

080059b8 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 80059b8:	b580      	push	{r7, lr}
 80059ba:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMAMUX1_CLK_ENABLE();
 80059bc:	2004      	movs	r0, #4
 80059be:	f7fd fdcd 	bl	800355c <LL_AHB1_GRP1_EnableClock>
	__HAL_RCC_DMA1_CLK_ENABLE();
 80059c2:	2001      	movs	r0, #1
 80059c4:	f7fd fdca 	bl	800355c <LL_AHB1_GRP1_EnableClock>

	/* DMA interrupt init */
	/* DMA1_Channel7_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 80059c8:	2200      	movs	r2, #0
 80059ca:	2100      	movs	r1, #0
 80059cc:	2011      	movs	r0, #17
 80059ce:	f001 fe94 	bl	80076fa <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80059d2:	2011      	movs	r0, #17
 80059d4:	f001 feab 	bl	800772e <HAL_NVIC_EnableIRQ>
	/* DMAMUX1_OVR_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMAMUX1_OVR_IRQn, 0, 0);
 80059d8:	2200      	movs	r2, #0
 80059da:	2100      	movs	r1, #0
 80059dc:	203e      	movs	r0, #62	@ 0x3e
 80059de:	f001 fe8c 	bl	80076fa <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMAMUX1_OVR_IRQn);
 80059e2:	203e      	movs	r0, #62	@ 0x3e
 80059e4:	f001 fea3 	bl	800772e <HAL_NVIC_EnableIRQ>

}
 80059e8:	bf00      	nop
 80059ea:	bd80      	pop	{r7, pc}

080059ec <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b086      	sub	sp, #24
 80059f0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80059f2:	1d3b      	adds	r3, r7, #4
 80059f4:	2200      	movs	r2, #0
 80059f6:	601a      	str	r2, [r3, #0]
 80059f8:	605a      	str	r2, [r3, #4]
 80059fa:	609a      	str	r2, [r3, #8]
 80059fc:	60da      	str	r2, [r3, #12]
 80059fe:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8005a00:	2004      	movs	r0, #4
 8005a02:	f7fd fdc4 	bl	800358e <LL_AHB2_GRP1_EnableClock>
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8005a06:	2002      	movs	r0, #2
 8005a08:	f7fd fdc1 	bl	800358e <LL_AHB2_GRP1_EnableClock>
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8005a0c:	2001      	movs	r0, #1
 8005a0e:	f7fd fdbe 	bl	800358e <LL_AHB2_GRP1_EnableClock>
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8005a12:	2008      	movs	r0, #8
 8005a14:	f7fd fdbb 	bl	800358e <LL_AHB2_GRP1_EnableClock>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6 | GPIO_PIN_7, GPIO_PIN_RESET);
 8005a18:	2200      	movs	r2, #0
 8005a1a:	21c0      	movs	r1, #192	@ 0xc0
 8005a1c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8005a20:	f002 fb1c 	bl	800805c <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LD2_Pin | LD3_Pin | LD1_Pin, GPIO_PIN_RESET);
 8005a24:	2200      	movs	r2, #0
 8005a26:	2123      	movs	r1, #35	@ 0x23
 8005a28:	482b      	ldr	r0, [pc, #172]	@ (8005ad8 <MX_GPIO_Init+0xec>)
 8005a2a:	f002 fb17 	bl	800805c <HAL_GPIO_WritePin>

	/*Configure GPIO pins : PA6 PA7 */
	GPIO_InitStruct.Pin = GPIO_PIN_6 | GPIO_PIN_7;
 8005a2e:	23c0      	movs	r3, #192	@ 0xc0
 8005a30:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005a32:	2301      	movs	r3, #1
 8005a34:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a36:	2300      	movs	r3, #0
 8005a38:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005a3e:	1d3b      	adds	r3, r7, #4
 8005a40:	4619      	mov	r1, r3
 8005a42:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8005a46:	f002 f999 	bl	8007d7c <HAL_GPIO_Init>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8005a4a:	2310      	movs	r3, #16
 8005a4c:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005a4e:	2300      	movs	r3, #0
 8005a50:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005a52:	2301      	movs	r3, #1
 8005a54:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8005a56:	1d3b      	adds	r3, r7, #4
 8005a58:	4619      	mov	r1, r3
 8005a5a:	4820      	ldr	r0, [pc, #128]	@ (8005adc <MX_GPIO_Init+0xf0>)
 8005a5c:	f002 f98e 	bl	8007d7c <HAL_GPIO_Init>

	/*Configure GPIO pins : LD2_Pin LD3_Pin LD1_Pin */
	GPIO_InitStruct.Pin = LD2_Pin | LD3_Pin | LD1_Pin;
 8005a60:	2323      	movs	r3, #35	@ 0x23
 8005a62:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005a64:	2301      	movs	r3, #1
 8005a66:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a68:	2300      	movs	r3, #0
 8005a6a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005a70:	1d3b      	adds	r3, r7, #4
 8005a72:	4619      	mov	r1, r3
 8005a74:	4818      	ldr	r0, [pc, #96]	@ (8005ad8 <MX_GPIO_Init+0xec>)
 8005a76:	f002 f981 	bl	8007d7c <HAL_GPIO_Init>

	/*Configure GPIO pins : USB_DM_Pin USB_DP_Pin */
	GPIO_InitStruct.Pin = USB_DM_Pin | USB_DP_Pin;
 8005a7a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8005a7e:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a80:	2302      	movs	r3, #2
 8005a82:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a84:	2300      	movs	r3, #0
 8005a86:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005a88:	2300      	movs	r3, #0
 8005a8a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8005a8c:	230a      	movs	r3, #10
 8005a8e:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005a90:	1d3b      	adds	r3, r7, #4
 8005a92:	4619      	mov	r1, r3
 8005a94:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8005a98:	f002 f970 	bl	8007d7c <HAL_GPIO_Init>

	/*Configure GPIO pins : B2_Pin B3_Pin */
	GPIO_InitStruct.Pin = B2_Pin | B3_Pin;
 8005a9c:	2303      	movs	r3, #3
 8005a9e:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005aa0:	2300      	movs	r3, #0
 8005aa2:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005aa8:	1d3b      	adds	r3, r7, #4
 8005aaa:	4619      	mov	r1, r3
 8005aac:	480c      	ldr	r0, [pc, #48]	@ (8005ae0 <MX_GPIO_Init+0xf4>)
 8005aae:	f002 f965 	bl	8007d7c <HAL_GPIO_Init>

	/*Configure GPIO pins : STLINK_RX_Pin STLINK_TX_Pin */
	GPIO_InitStruct.Pin = STLINK_RX_Pin | STLINK_TX_Pin;
 8005ab2:	23c0      	movs	r3, #192	@ 0xc0
 8005ab4:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005ab6:	2302      	movs	r3, #2
 8005ab8:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005aba:	2300      	movs	r3, #0
 8005abc:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005abe:	2300      	movs	r3, #0
 8005ac0:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005ac2:	2307      	movs	r3, #7
 8005ac4:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005ac6:	1d3b      	adds	r3, r7, #4
 8005ac8:	4619      	mov	r1, r3
 8005aca:	4803      	ldr	r0, [pc, #12]	@ (8005ad8 <MX_GPIO_Init+0xec>)
 8005acc:	f002 f956 	bl	8007d7c <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8005ad0:	bf00      	nop
 8005ad2:	3718      	adds	r7, #24
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	bd80      	pop	{r7, pc}
 8005ad8:	48000400 	.word	0x48000400
 8005adc:	48000800 	.word	0x48000800
 8005ae0:	48000c00 	.word	0x48000c00

08005ae4 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8005ae4:	b480      	push	{r7}
 8005ae6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8005ae8:	b672      	cpsid	i
}
 8005aea:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8005aec:	bf00      	nop
 8005aee:	e7fd      	b.n	8005aec <Error_Handler+0x8>

08005af0 <f3x3matrixAeqI>:
#define Y 1
#define Z 2

// function sets the 3x3 matrix A to the identity matrix
void f3x3matrixAeqI(float A[][3])
{
 8005af0:	b480      	push	{r7}
 8005af2:	b085      	sub	sp, #20
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
	float *pAij;	// pointer to A[i][j]
	int8_t i, j;	// loop counters

	for (i = 0; i < 3; i++) {
 8005af8:	2300      	movs	r3, #0
 8005afa:	72fb      	strb	r3, [r7, #11]
 8005afc:	e032      	b.n	8005b64 <f3x3matrixAeqI+0x74>
		// set pAij to &A[i][j=0]
		pAij = A[i];
 8005afe:	f997 200b 	ldrsb.w	r2, [r7, #11]
 8005b02:	4613      	mov	r3, r2
 8005b04:	005b      	lsls	r3, r3, #1
 8005b06:	4413      	add	r3, r2
 8005b08:	009b      	lsls	r3, r3, #2
 8005b0a:	461a      	mov	r2, r3
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	4413      	add	r3, r2
 8005b10:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < 3; j++) {
 8005b12:	2300      	movs	r3, #0
 8005b14:	72bb      	strb	r3, [r7, #10]
 8005b16:	e00b      	b.n	8005b30 <f3x3matrixAeqI+0x40>
			*(pAij++) = 0.0F;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	1d1a      	adds	r2, r3, #4
 8005b1c:	60fa      	str	r2, [r7, #12]
 8005b1e:	f04f 0200 	mov.w	r2, #0
 8005b22:	601a      	str	r2, [r3, #0]
		for (j = 0; j < 3; j++) {
 8005b24:	f997 300a 	ldrsb.w	r3, [r7, #10]
 8005b28:	b2db      	uxtb	r3, r3
 8005b2a:	3301      	adds	r3, #1
 8005b2c:	b2db      	uxtb	r3, r3
 8005b2e:	72bb      	strb	r3, [r7, #10]
 8005b30:	f997 300a 	ldrsb.w	r3, [r7, #10]
 8005b34:	2b02      	cmp	r3, #2
 8005b36:	ddef      	ble.n	8005b18 <f3x3matrixAeqI+0x28>
		}
		A[i][i] = 1.0F;
 8005b38:	f997 200b 	ldrsb.w	r2, [r7, #11]
 8005b3c:	4613      	mov	r3, r2
 8005b3e:	005b      	lsls	r3, r3, #1
 8005b40:	4413      	add	r3, r2
 8005b42:	009b      	lsls	r3, r3, #2
 8005b44:	461a      	mov	r2, r3
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	441a      	add	r2, r3
 8005b4a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8005b4e:	009b      	lsls	r3, r3, #2
 8005b50:	4413      	add	r3, r2
 8005b52:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8005b56:	601a      	str	r2, [r3, #0]
	for (i = 0; i < 3; i++) {
 8005b58:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8005b5c:	b2db      	uxtb	r3, r3
 8005b5e:	3301      	adds	r3, #1
 8005b60:	b2db      	uxtb	r3, r3
 8005b62:	72fb      	strb	r3, [r7, #11]
 8005b64:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8005b68:	2b02      	cmp	r3, #2
 8005b6a:	ddc8      	ble.n	8005afe <f3x3matrixAeqI+0xe>
	}
}
 8005b6c:	bf00      	nop
 8005b6e:	bf00      	nop
 8005b70:	3714      	adds	r7, #20
 8005b72:	46bd      	mov	sp, r7
 8005b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b78:	4770      	bx	lr

08005b7a <fmatrixAeqI>:

// function sets the matrix A to the identity matrix
void fmatrixAeqI(float *A[], int16_t rc)
{
 8005b7a:	b480      	push	{r7}
 8005b7c:	b085      	sub	sp, #20
 8005b7e:	af00      	add	r7, sp, #0
 8005b80:	6078      	str	r0, [r7, #4]
 8005b82:	460b      	mov	r3, r1
 8005b84:	807b      	strh	r3, [r7, #2]
	// rc = rows and columns in A

	float *pAij;	// pointer to A[i][j]
	int8_t i, j;	// loop counters

	for (i = 0; i < rc; i++) {
 8005b86:	2300      	movs	r3, #0
 8005b88:	72fb      	strb	r3, [r7, #11]
 8005b8a:	e02f      	b.n	8005bec <fmatrixAeqI+0x72>
		// set pAij to &A[i][j=0]
		pAij = A[i];
 8005b8c:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8005b90:	009b      	lsls	r3, r3, #2
 8005b92:	687a      	ldr	r2, [r7, #4]
 8005b94:	4413      	add	r3, r2
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < rc; j++) {
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	72bb      	strb	r3, [r7, #10]
 8005b9e:	e00b      	b.n	8005bb8 <fmatrixAeqI+0x3e>
			*(pAij++) = 0.0F;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	1d1a      	adds	r2, r3, #4
 8005ba4:	60fa      	str	r2, [r7, #12]
 8005ba6:	f04f 0200 	mov.w	r2, #0
 8005baa:	601a      	str	r2, [r3, #0]
		for (j = 0; j < rc; j++) {
 8005bac:	f997 300a 	ldrsb.w	r3, [r7, #10]
 8005bb0:	b2db      	uxtb	r3, r3
 8005bb2:	3301      	adds	r3, #1
 8005bb4:	b2db      	uxtb	r3, r3
 8005bb6:	72bb      	strb	r3, [r7, #10]
 8005bb8:	f997 300a 	ldrsb.w	r3, [r7, #10]
 8005bbc:	b21b      	sxth	r3, r3
 8005bbe:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8005bc2:	429a      	cmp	r2, r3
 8005bc4:	dcec      	bgt.n	8005ba0 <fmatrixAeqI+0x26>
		}
		A[i][i] = 1.0F;
 8005bc6:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8005bca:	009b      	lsls	r3, r3, #2
 8005bcc:	687a      	ldr	r2, [r7, #4]
 8005bce:	4413      	add	r3, r2
 8005bd0:	681a      	ldr	r2, [r3, #0]
 8005bd2:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8005bd6:	009b      	lsls	r3, r3, #2
 8005bd8:	4413      	add	r3, r2
 8005bda:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8005bde:	601a      	str	r2, [r3, #0]
	for (i = 0; i < rc; i++) {
 8005be0:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8005be4:	b2db      	uxtb	r3, r3
 8005be6:	3301      	adds	r3, #1
 8005be8:	b2db      	uxtb	r3, r3
 8005bea:	72fb      	strb	r3, [r7, #11]
 8005bec:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8005bf0:	b21b      	sxth	r3, r3
 8005bf2:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8005bf6:	429a      	cmp	r2, r3
 8005bf8:	dcc8      	bgt.n	8005b8c <fmatrixAeqI+0x12>
	}
}
 8005bfa:	bf00      	nop
 8005bfc:	bf00      	nop
 8005bfe:	3714      	adds	r7, #20
 8005c00:	46bd      	mov	sp, r7
 8005c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c06:	4770      	bx	lr

08005c08 <f3x3matrixAeqScalar>:

// function sets every entry in the 3x3 matrix A to a constant scalar
void f3x3matrixAeqScalar(float A[][3], float Scalar)
{
 8005c08:	b480      	push	{r7}
 8005c0a:	b085      	sub	sp, #20
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
 8005c10:	ed87 0a00 	vstr	s0, [r7]
	float *pAij;	// pointer to A[i][j]
	int8_t i, j;	// counters

	for (i = 0; i < 3; i++) {
 8005c14:	2300      	movs	r3, #0
 8005c16:	72fb      	strb	r3, [r7, #11]
 8005c18:	e021      	b.n	8005c5e <f3x3matrixAeqScalar+0x56>
		// set pAij to &A[i][j=0]
		pAij = A[i];
 8005c1a:	f997 200b 	ldrsb.w	r2, [r7, #11]
 8005c1e:	4613      	mov	r3, r2
 8005c20:	005b      	lsls	r3, r3, #1
 8005c22:	4413      	add	r3, r2
 8005c24:	009b      	lsls	r3, r3, #2
 8005c26:	461a      	mov	r2, r3
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	4413      	add	r3, r2
 8005c2c:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < 3; j++) {
 8005c2e:	2300      	movs	r3, #0
 8005c30:	72bb      	strb	r3, [r7, #10]
 8005c32:	e00a      	b.n	8005c4a <f3x3matrixAeqScalar+0x42>
			*(pAij++) = Scalar;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	1d1a      	adds	r2, r3, #4
 8005c38:	60fa      	str	r2, [r7, #12]
 8005c3a:	683a      	ldr	r2, [r7, #0]
 8005c3c:	601a      	str	r2, [r3, #0]
		for (j = 0; j < 3; j++) {
 8005c3e:	f997 300a 	ldrsb.w	r3, [r7, #10]
 8005c42:	b2db      	uxtb	r3, r3
 8005c44:	3301      	adds	r3, #1
 8005c46:	b2db      	uxtb	r3, r3
 8005c48:	72bb      	strb	r3, [r7, #10]
 8005c4a:	f997 300a 	ldrsb.w	r3, [r7, #10]
 8005c4e:	2b02      	cmp	r3, #2
 8005c50:	ddf0      	ble.n	8005c34 <f3x3matrixAeqScalar+0x2c>
	for (i = 0; i < 3; i++) {
 8005c52:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8005c56:	b2db      	uxtb	r3, r3
 8005c58:	3301      	adds	r3, #1
 8005c5a:	b2db      	uxtb	r3, r3
 8005c5c:	72fb      	strb	r3, [r7, #11]
 8005c5e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8005c62:	2b02      	cmp	r3, #2
 8005c64:	ddd9      	ble.n	8005c1a <f3x3matrixAeqScalar+0x12>
		}
	}
}
 8005c66:	bf00      	nop
 8005c68:	bf00      	nop
 8005c6a:	3714      	adds	r7, #20
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c72:	4770      	bx	lr

08005c74 <f3x3matrixAeqAxScalar>:

// function multiplies all elements of 3x3 matrix A by the specified scalar
void f3x3matrixAeqAxScalar(float A[][3], float Scalar)
{
 8005c74:	b480      	push	{r7}
 8005c76:	b085      	sub	sp, #20
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
 8005c7c:	ed87 0a00 	vstr	s0, [r7]
	float *pAij;	// pointer to A[i][j]
	int8_t i, j;	// loop counters

	for (i = 0; i < 3; i++) {
 8005c80:	2300      	movs	r3, #0
 8005c82:	72fb      	strb	r3, [r7, #11]
 8005c84:	e027      	b.n	8005cd6 <f3x3matrixAeqAxScalar+0x62>
		// set pAij to &A[i][j=0]
		pAij = A[i];
 8005c86:	f997 200b 	ldrsb.w	r2, [r7, #11]
 8005c8a:	4613      	mov	r3, r2
 8005c8c:	005b      	lsls	r3, r3, #1
 8005c8e:	4413      	add	r3, r2
 8005c90:	009b      	lsls	r3, r3, #2
 8005c92:	461a      	mov	r2, r3
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	4413      	add	r3, r2
 8005c98:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < 3; j++) {
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	72bb      	strb	r3, [r7, #10]
 8005c9e:	e010      	b.n	8005cc2 <f3x3matrixAeqAxScalar+0x4e>
			*(pAij++) *= Scalar;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	1d1a      	adds	r2, r3, #4
 8005ca4:	60fa      	str	r2, [r7, #12]
 8005ca6:	ed93 7a00 	vldr	s14, [r3]
 8005caa:	edd7 7a00 	vldr	s15, [r7]
 8005cae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cb2:	edc3 7a00 	vstr	s15, [r3]
		for (j = 0; j < 3; j++) {
 8005cb6:	f997 300a 	ldrsb.w	r3, [r7, #10]
 8005cba:	b2db      	uxtb	r3, r3
 8005cbc:	3301      	adds	r3, #1
 8005cbe:	b2db      	uxtb	r3, r3
 8005cc0:	72bb      	strb	r3, [r7, #10]
 8005cc2:	f997 300a 	ldrsb.w	r3, [r7, #10]
 8005cc6:	2b02      	cmp	r3, #2
 8005cc8:	ddea      	ble.n	8005ca0 <f3x3matrixAeqAxScalar+0x2c>
	for (i = 0; i < 3; i++) {
 8005cca:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8005cce:	b2db      	uxtb	r3, r3
 8005cd0:	3301      	adds	r3, #1
 8005cd2:	b2db      	uxtb	r3, r3
 8005cd4:	72fb      	strb	r3, [r7, #11]
 8005cd6:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8005cda:	2b02      	cmp	r3, #2
 8005cdc:	ddd3      	ble.n	8005c86 <f3x3matrixAeqAxScalar+0x12>
		}
	}
}
 8005cde:	bf00      	nop
 8005ce0:	bf00      	nop
 8005ce2:	3714      	adds	r7, #20
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cea:	4770      	bx	lr

08005cec <f3x3matrixAeqMinusA>:

// function negates all elements of 3x3 matrix A
void f3x3matrixAeqMinusA(float A[][3])
{
 8005cec:	b480      	push	{r7}
 8005cee:	b085      	sub	sp, #20
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	6078      	str	r0, [r7, #4]
	float *pAij;	// pointer to A[i][j]
	int8_t i, j;	// loop counters

	for (i = 0; i < 3; i++) {
 8005cf4:	2300      	movs	r3, #0
 8005cf6:	72fb      	strb	r3, [r7, #11]
 8005cf8:	e027      	b.n	8005d4a <f3x3matrixAeqMinusA+0x5e>
		// set pAij to &A[i][j=0]
		pAij = A[i];
 8005cfa:	f997 200b 	ldrsb.w	r2, [r7, #11]
 8005cfe:	4613      	mov	r3, r2
 8005d00:	005b      	lsls	r3, r3, #1
 8005d02:	4413      	add	r3, r2
 8005d04:	009b      	lsls	r3, r3, #2
 8005d06:	461a      	mov	r2, r3
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	4413      	add	r3, r2
 8005d0c:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < 3; j++) {
 8005d0e:	2300      	movs	r3, #0
 8005d10:	72bb      	strb	r3, [r7, #10]
 8005d12:	e010      	b.n	8005d36 <f3x3matrixAeqMinusA+0x4a>
			*pAij = -*pAij;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	edd3 7a00 	vldr	s15, [r3]
 8005d1a:	eef1 7a67 	vneg.f32	s15, s15
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	edc3 7a00 	vstr	s15, [r3]
			pAij++;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	3304      	adds	r3, #4
 8005d28:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < 3; j++) {
 8005d2a:	f997 300a 	ldrsb.w	r3, [r7, #10]
 8005d2e:	b2db      	uxtb	r3, r3
 8005d30:	3301      	adds	r3, #1
 8005d32:	b2db      	uxtb	r3, r3
 8005d34:	72bb      	strb	r3, [r7, #10]
 8005d36:	f997 300a 	ldrsb.w	r3, [r7, #10]
 8005d3a:	2b02      	cmp	r3, #2
 8005d3c:	ddea      	ble.n	8005d14 <f3x3matrixAeqMinusA+0x28>
	for (i = 0; i < 3; i++) {
 8005d3e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8005d42:	b2db      	uxtb	r3, r3
 8005d44:	3301      	adds	r3, #1
 8005d46:	b2db      	uxtb	r3, r3
 8005d48:	72fb      	strb	r3, [r7, #11]
 8005d4a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8005d4e:	2b02      	cmp	r3, #2
 8005d50:	ddd3      	ble.n	8005cfa <f3x3matrixAeqMinusA+0xe>
		}
	}
}
 8005d52:	bf00      	nop
 8005d54:	bf00      	nop
 8005d56:	3714      	adds	r7, #20
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5e:	4770      	bx	lr

08005d60 <f3x3matrixAeqInvSymB>:

// function directly calculates the symmetric inverse of a symmetric 3x3 matrix
// only the on and above diagonal terms in B are used and need to be specified
void f3x3matrixAeqInvSymB(float A[][3], float B[][3])
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b086      	sub	sp, #24
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
 8005d68:	6039      	str	r1, [r7, #0]
	float fB12B02mB01B22;	// B[1][2] * B[0][2] - B[0][1] * B[2][2]
	float fB01B12mB11B02;	// B[0][1] * B[1][2] - B[1][1] * B[0][2]
	float ftmp;				// determinant and then reciprocal

	// calculate useful products
	fB11B22mB12B12 = B[1][1] * B[2][2] - B[1][2] * B[1][2];
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	330c      	adds	r3, #12
 8005d6e:	ed93 7a01 	vldr	s14, [r3, #4]
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	3318      	adds	r3, #24
 8005d76:	edd3 7a02 	vldr	s15, [r3, #8]
 8005d7a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	330c      	adds	r3, #12
 8005d82:	edd3 6a02 	vldr	s13, [r3, #8]
 8005d86:	683b      	ldr	r3, [r7, #0]
 8005d88:	330c      	adds	r3, #12
 8005d8a:	edd3 7a02 	vldr	s15, [r3, #8]
 8005d8e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005d92:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005d96:	edc7 7a05 	vstr	s15, [r7, #20]
	fB12B02mB01B22 = B[1][2] * B[0][2] - B[0][1] * B[2][2];
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	330c      	adds	r3, #12
 8005d9e:	ed93 7a02 	vldr	s14, [r3, #8]
 8005da2:	683b      	ldr	r3, [r7, #0]
 8005da4:	edd3 7a02 	vldr	s15, [r3, #8]
 8005da8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	edd3 6a01 	vldr	s13, [r3, #4]
 8005db2:	683b      	ldr	r3, [r7, #0]
 8005db4:	3318      	adds	r3, #24
 8005db6:	edd3 7a02 	vldr	s15, [r3, #8]
 8005dba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005dbe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005dc2:	edc7 7a04 	vstr	s15, [r7, #16]
	fB01B12mB11B02 = B[0][1] * B[1][2] - B[1][1] * B[0][2];
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	ed93 7a01 	vldr	s14, [r3, #4]
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	330c      	adds	r3, #12
 8005dd0:	edd3 7a02 	vldr	s15, [r3, #8]
 8005dd4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	330c      	adds	r3, #12
 8005ddc:	edd3 6a01 	vldr	s13, [r3, #4]
 8005de0:	683b      	ldr	r3, [r7, #0]
 8005de2:	edd3 7a02 	vldr	s15, [r3, #8]
 8005de6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005dea:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005dee:	edc7 7a03 	vstr	s15, [r7, #12]

	// set ftmp to the determinant of the input matrix B
	ftmp = B[0][0] * fB11B22mB12B12 + B[0][1] * fB12B02mB01B22 + B[0][2] * fB01B12mB11B02;
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	ed93 7a00 	vldr	s14, [r3]
 8005df8:	edd7 7a05 	vldr	s15, [r7, #20]
 8005dfc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005e00:	683b      	ldr	r3, [r7, #0]
 8005e02:	edd3 6a01 	vldr	s13, [r3, #4]
 8005e06:	edd7 7a04 	vldr	s15, [r7, #16]
 8005e0a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005e0e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	edd3 6a02 	vldr	s13, [r3, #8]
 8005e18:	edd7 7a03 	vldr	s15, [r7, #12]
 8005e1c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005e20:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005e24:	edc7 7a02 	vstr	s15, [r7, #8]

	// set A to the inverse of B for any determinant except zero
	if (ftmp != 0.0F) {
 8005e28:	edd7 7a02 	vldr	s15, [r7, #8]
 8005e2c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8005e30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e34:	f000 8083 	beq.w	8005f3e <f3x3matrixAeqInvSymB+0x1de>
		ftmp = 1.0F / ftmp;
 8005e38:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005e3c:	ed97 7a02 	vldr	s14, [r7, #8]
 8005e40:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005e44:	edc7 7a02 	vstr	s15, [r7, #8]
		A[0][0] = fB11B22mB12B12 * ftmp;
 8005e48:	ed97 7a05 	vldr	s14, [r7, #20]
 8005e4c:	edd7 7a02 	vldr	s15, [r7, #8]
 8005e50:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	edc3 7a00 	vstr	s15, [r3]
		A[1][0] = A[0][1] = fB12B02mB01B22 * ftmp;
 8005e5a:	ed97 7a04 	vldr	s14, [r7, #16]
 8005e5e:	edd7 7a02 	vldr	s15, [r7, #8]
 8005e62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	edc3 7a01 	vstr	s15, [r3, #4]
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	330c      	adds	r3, #12
 8005e70:	687a      	ldr	r2, [r7, #4]
 8005e72:	6852      	ldr	r2, [r2, #4]
 8005e74:	601a      	str	r2, [r3, #0]
		A[2][0] = A[0][2] = fB01B12mB11B02 * ftmp;
 8005e76:	ed97 7a03 	vldr	s14, [r7, #12]
 8005e7a:	edd7 7a02 	vldr	s15, [r7, #8]
 8005e7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	edc3 7a02 	vstr	s15, [r3, #8]
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	3318      	adds	r3, #24
 8005e8c:	687a      	ldr	r2, [r7, #4]
 8005e8e:	6892      	ldr	r2, [r2, #8]
 8005e90:	601a      	str	r2, [r3, #0]
		A[1][1] = (B[0][0] * B[2][2] - B[0][2] * B[0][2]) * ftmp;
 8005e92:	683b      	ldr	r3, [r7, #0]
 8005e94:	ed93 7a00 	vldr	s14, [r3]
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	3318      	adds	r3, #24
 8005e9c:	edd3 7a02 	vldr	s15, [r3, #8]
 8005ea0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005ea4:	683b      	ldr	r3, [r7, #0]
 8005ea6:	edd3 6a02 	vldr	s13, [r3, #8]
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	edd3 7a02 	vldr	s15, [r3, #8]
 8005eb0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005eb4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	330c      	adds	r3, #12
 8005ebc:	edd7 7a02 	vldr	s15, [r7, #8]
 8005ec0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ec4:	edc3 7a01 	vstr	s15, [r3, #4]
		A[2][1] = A[1][2] = (B[0][2] * B[0][1] - B[0][0] * B[1][2]) * ftmp;
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	ed93 7a02 	vldr	s14, [r3, #8]
 8005ece:	683b      	ldr	r3, [r7, #0]
 8005ed0:	edd3 7a01 	vldr	s15, [r3, #4]
 8005ed4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005ed8:	683b      	ldr	r3, [r7, #0]
 8005eda:	edd3 6a00 	vldr	s13, [r3]
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	330c      	adds	r3, #12
 8005ee2:	edd3 7a02 	vldr	s15, [r3, #8]
 8005ee6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005eea:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	330c      	adds	r3, #12
 8005ef2:	edd7 7a02 	vldr	s15, [r7, #8]
 8005ef6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005efa:	edc3 7a02 	vstr	s15, [r3, #8]
 8005efe:	687a      	ldr	r2, [r7, #4]
 8005f00:	3218      	adds	r2, #24
 8005f02:	689b      	ldr	r3, [r3, #8]
 8005f04:	6053      	str	r3, [r2, #4]
		A[2][2] = (B[0][0] * B[1][1] - B[0][1] * B[0][1]) * ftmp;
 8005f06:	683b      	ldr	r3, [r7, #0]
 8005f08:	ed93 7a00 	vldr	s14, [r3]
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	330c      	adds	r3, #12
 8005f10:	edd3 7a01 	vldr	s15, [r3, #4]
 8005f14:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	edd3 6a01 	vldr	s13, [r3, #4]
 8005f1e:	683b      	ldr	r3, [r7, #0]
 8005f20:	edd3 7a01 	vldr	s15, [r3, #4]
 8005f24:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005f28:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	3318      	adds	r3, #24
 8005f30:	edd7 7a02 	vldr	s15, [r7, #8]
 8005f34:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f38:	edc3 7a02 	vstr	s15, [r3, #8]
	} else {
		// provide the identity matrix if the determinant is zero
		f3x3matrixAeqI(A);
	}
}
 8005f3c:	e002      	b.n	8005f44 <f3x3matrixAeqInvSymB+0x1e4>
		f3x3matrixAeqI(A);
 8005f3e:	6878      	ldr	r0, [r7, #4]
 8005f40:	f7ff fdd6 	bl	8005af0 <f3x3matrixAeqI>
}
 8005f44:	bf00      	nop
 8005f46:	3718      	adds	r7, #24
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	bd80      	pop	{r7, pc}

08005f4c <f3x3matrixDetA>:

// function calculates the determinant of a 3x3 matrix
float f3x3matrixDetA(float A[][3])
{
 8005f4c:	b480      	push	{r7}
 8005f4e:	b083      	sub	sp, #12
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
	return (A[X][X] * (A[Y][Y] * A[Z][Z] - A[Y][Z] * A[Z][Y]) +
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	ed93 7a00 	vldr	s14, [r3]
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	330c      	adds	r3, #12
 8005f5e:	edd3 6a01 	vldr	s13, [r3, #4]
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	3318      	adds	r3, #24
 8005f66:	edd3 7a02 	vldr	s15, [r3, #8]
 8005f6a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	330c      	adds	r3, #12
 8005f72:	ed93 6a02 	vldr	s12, [r3, #8]
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	3318      	adds	r3, #24
 8005f7a:	edd3 7a01 	vldr	s15, [r3, #4]
 8005f7e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8005f82:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8005f86:	ee27 7a27 	vmul.f32	s14, s14, s15
			A[X][Y] * (A[Y][Z] * A[Z][X] - A[Y][X] * A[Z][Z]) +
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	edd3 6a01 	vldr	s13, [r3, #4]
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	330c      	adds	r3, #12
 8005f94:	ed93 6a02 	vldr	s12, [r3, #8]
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	3318      	adds	r3, #24
 8005f9c:	edd3 7a00 	vldr	s15, [r3]
 8005fa0:	ee26 6a27 	vmul.f32	s12, s12, s15
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	330c      	adds	r3, #12
 8005fa8:	edd3 5a00 	vldr	s11, [r3]
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	3318      	adds	r3, #24
 8005fb0:	edd3 7a02 	vldr	s15, [r3, #8]
 8005fb4:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8005fb8:	ee76 7a67 	vsub.f32	s15, s12, s15
 8005fbc:	ee66 7aa7 	vmul.f32	s15, s13, s15
	return (A[X][X] * (A[Y][Y] * A[Z][Z] - A[Y][Z] * A[Z][Y]) +
 8005fc0:	ee37 7a27 	vadd.f32	s14, s14, s15
			A[X][Z] * (A[Y][X] * A[Z][Y] - A[Y][Y] * A[Z][X]));
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	edd3 6a02 	vldr	s13, [r3, #8]
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	330c      	adds	r3, #12
 8005fce:	ed93 6a00 	vldr	s12, [r3]
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	3318      	adds	r3, #24
 8005fd6:	edd3 7a01 	vldr	s15, [r3, #4]
 8005fda:	ee26 6a27 	vmul.f32	s12, s12, s15
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	330c      	adds	r3, #12
 8005fe2:	edd3 5a01 	vldr	s11, [r3, #4]
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	3318      	adds	r3, #24
 8005fea:	edd3 7a00 	vldr	s15, [r3]
 8005fee:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8005ff2:	ee76 7a67 	vsub.f32	s15, s12, s15
 8005ff6:	ee66 7aa7 	vmul.f32	s15, s13, s15
			A[X][Y] * (A[Y][Z] * A[Z][X] - A[Y][X] * A[Z][Z]) +
 8005ffa:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8005ffe:	eeb0 0a67 	vmov.f32	s0, s15
 8006002:	370c      	adds	r7, #12
 8006004:	46bd      	mov	sp, r7
 8006006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600a:	4770      	bx	lr

0800600c <eigencompute>:
// A[][] is changed on output.
// eigval[0..n-1] returns the eigenvalues of A[][].
// eigvec[0..n-1][0..n-1] returns the normalized eigenvectors of A[][]
// the eigenvectors are not sorted by value
void eigencompute(float A[][10], float eigval[], float eigvec[][10], int8_t n)
{
 800600c:	b5b0      	push	{r4, r5, r7, lr}
 800600e:	b08c      	sub	sp, #48	@ 0x30
 8006010:	af00      	add	r7, sp, #0
 8006012:	60f8      	str	r0, [r7, #12]
 8006014:	60b9      	str	r1, [r7, #8]
 8006016:	607a      	str	r2, [r7, #4]
 8006018:	70fb      	strb	r3, [r7, #3]
	int8_t j;
	// timeout ctr for number of passes of the algorithm
	int8_t ctr;

	// initialize eigenvectors matrix and eigenvalues array
	for (ir = 0; ir < n; ir++) {
 800601a:	2300      	movs	r3, #0
 800601c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8006020:	e04b      	b.n	80060ba <eigencompute+0xae>
		// loop over all columns
		for (ic = 0; ic < n; ic++) {
 8006022:	2300      	movs	r3, #0
 8006024:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8006028:	e016      	b.n	8006058 <eigencompute+0x4c>
			// set on diagonal and off-diagonal elements to zero
			eigvec[ir][ic] = 0.0F;
 800602a:	f997 2027 	ldrsb.w	r2, [r7, #39]	@ 0x27
 800602e:	4613      	mov	r3, r2
 8006030:	009b      	lsls	r3, r3, #2
 8006032:	4413      	add	r3, r2
 8006034:	00db      	lsls	r3, r3, #3
 8006036:	461a      	mov	r2, r3
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	441a      	add	r2, r3
 800603c:	f997 3026 	ldrsb.w	r3, [r7, #38]	@ 0x26
 8006040:	009b      	lsls	r3, r3, #2
 8006042:	4413      	add	r3, r2
 8006044:	f04f 0200 	mov.w	r2, #0
 8006048:	601a      	str	r2, [r3, #0]
		for (ic = 0; ic < n; ic++) {
 800604a:	f997 3026 	ldrsb.w	r3, [r7, #38]	@ 0x26
 800604e:	b2db      	uxtb	r3, r3
 8006050:	3301      	adds	r3, #1
 8006052:	b2db      	uxtb	r3, r3
 8006054:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8006058:	f997 2026 	ldrsb.w	r2, [r7, #38]	@ 0x26
 800605c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006060:	429a      	cmp	r2, r3
 8006062:	dbe2      	blt.n	800602a <eigencompute+0x1e>
		}

		// correct the diagonal elements to 1.0
		eigvec[ir][ir] = 1.0F;
 8006064:	f997 2027 	ldrsb.w	r2, [r7, #39]	@ 0x27
 8006068:	4613      	mov	r3, r2
 800606a:	009b      	lsls	r3, r3, #2
 800606c:	4413      	add	r3, r2
 800606e:	00db      	lsls	r3, r3, #3
 8006070:	461a      	mov	r2, r3
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	441a      	add	r2, r3
 8006076:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800607a:	009b      	lsls	r3, r3, #2
 800607c:	4413      	add	r3, r2
 800607e:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8006082:	601a      	str	r2, [r3, #0]

		// initialize the array of eigenvalues to the diagonal elements of m
		eigval[ir] = A[ir][ir];
 8006084:	f997 2027 	ldrsb.w	r2, [r7, #39]	@ 0x27
 8006088:	4613      	mov	r3, r2
 800608a:	009b      	lsls	r3, r3, #2
 800608c:	4413      	add	r3, r2
 800608e:	00db      	lsls	r3, r3, #3
 8006090:	461a      	mov	r2, r3
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	1899      	adds	r1, r3, r2
 8006096:	f997 2027 	ldrsb.w	r2, [r7, #39]	@ 0x27
 800609a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800609e:	009b      	lsls	r3, r3, #2
 80060a0:	68b8      	ldr	r0, [r7, #8]
 80060a2:	4403      	add	r3, r0
 80060a4:	0092      	lsls	r2, r2, #2
 80060a6:	440a      	add	r2, r1
 80060a8:	6812      	ldr	r2, [r2, #0]
 80060aa:	601a      	str	r2, [r3, #0]
	for (ir = 0; ir < n; ir++) {
 80060ac:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80060b0:	b2db      	uxtb	r3, r3
 80060b2:	3301      	adds	r3, #1
 80060b4:	b2db      	uxtb	r3, r3
 80060b6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80060ba:	f997 2027 	ldrsb.w	r2, [r7, #39]	@ 0x27
 80060be:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80060c2:	429a      	cmp	r2, r3
 80060c4:	dbad      	blt.n	8006022 <eigencompute+0x16>
	}

	// initialize the counter and loop until converged or NITERATIONS reached
	ctr = 0;
 80060c6:	2300      	movs	r3, #0
 80060c8:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
	do {
		// compute the absolute value of the above diagonal elements as exit criterion
		residue = 0.0F;
 80060cc:	f04f 0300 	mov.w	r3, #0
 80060d0:	62bb      	str	r3, [r7, #40]	@ 0x28
		// loop over rows excluding last row
		for (ir = 0; ir < n - 1; ir++) {
 80060d2:	2300      	movs	r3, #0
 80060d4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80060d8:	e031      	b.n	800613e <eigencompute+0x132>
			// loop over above diagonal columns
			for (ic = ir + 1; ic < n; ic++) {
 80060da:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80060de:	3301      	adds	r3, #1
 80060e0:	b2db      	uxtb	r3, r3
 80060e2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80060e6:	e01d      	b.n	8006124 <eigencompute+0x118>
				// accumulate the residual off diagonal terms which are being driven to zero
				residue += fabs(A[ir][ic]);
 80060e8:	f997 2027 	ldrsb.w	r2, [r7, #39]	@ 0x27
 80060ec:	4613      	mov	r3, r2
 80060ee:	009b      	lsls	r3, r3, #2
 80060f0:	4413      	add	r3, r2
 80060f2:	00db      	lsls	r3, r3, #3
 80060f4:	461a      	mov	r2, r3
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	441a      	add	r2, r3
 80060fa:	f997 3026 	ldrsb.w	r3, [r7, #38]	@ 0x26
 80060fe:	009b      	lsls	r3, r3, #2
 8006100:	4413      	add	r3, r2
 8006102:	edd3 7a00 	vldr	s15, [r3]
 8006106:	eef0 7ae7 	vabs.f32	s15, s15
 800610a:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800610e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006112:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
			for (ic = ir + 1; ic < n; ic++) {
 8006116:	f997 3026 	ldrsb.w	r3, [r7, #38]	@ 0x26
 800611a:	b2db      	uxtb	r3, r3
 800611c:	3301      	adds	r3, #1
 800611e:	b2db      	uxtb	r3, r3
 8006120:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8006124:	f997 2026 	ldrsb.w	r2, [r7, #38]	@ 0x26
 8006128:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800612c:	429a      	cmp	r2, r3
 800612e:	dbdb      	blt.n	80060e8 <eigencompute+0xdc>
		for (ir = 0; ir < n - 1; ir++) {
 8006130:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006134:	b2db      	uxtb	r3, r3
 8006136:	3301      	adds	r3, #1
 8006138:	b2db      	uxtb	r3, r3
 800613a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800613e:	f997 2027 	ldrsb.w	r2, [r7, #39]	@ 0x27
 8006142:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006146:	3b01      	subs	r3, #1
 8006148:	429a      	cmp	r2, r3
 800614a:	dbc6      	blt.n	80060da <eigencompute+0xce>
			}
		}

		// check if we still have work to do
		if (residue > 0.0F) {
 800614c:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8006150:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006154:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006158:	f340 8344 	ble.w	80067e4 <eigencompute+0x7d8>
			// loop over all rows with the exception of the last row (since only rotating above diagonal elements)
			for (ir = 0; ir < n - 1; ir++) {
 800615c:	2300      	movs	r3, #0
 800615e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8006162:	e337      	b.n	80067d4 <eigencompute+0x7c8>
				// loop over columns ic (where ic is always greater than ir since above diagonal)
				for (ic = ir + 1; ic < n; ic++) {
 8006164:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006168:	3301      	adds	r3, #1
 800616a:	b2db      	uxtb	r3, r3
 800616c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8006170:	e322      	b.n	80067b8 <eigencompute+0x7ac>
					// only continue with this element if the element is non-zero
					if (fabs(A[ir][ic]) > 0.0F) {
 8006172:	f997 2027 	ldrsb.w	r2, [r7, #39]	@ 0x27
 8006176:	4613      	mov	r3, r2
 8006178:	009b      	lsls	r3, r3, #2
 800617a:	4413      	add	r3, r2
 800617c:	00db      	lsls	r3, r3, #3
 800617e:	461a      	mov	r2, r3
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	441a      	add	r2, r3
 8006184:	f997 3026 	ldrsb.w	r3, [r7, #38]	@ 0x26
 8006188:	009b      	lsls	r3, r3, #2
 800618a:	4413      	add	r3, r2
 800618c:	edd3 7a00 	vldr	s15, [r3]
 8006190:	eef0 7ae7 	vabs.f32	s15, s15
 8006194:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006198:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800619c:	f340 8305 	ble.w	80067aa <eigencompute+0x79e>
						// calculate cot(2*phi) where phi is the Jacobi rotation angle
						cot2phi = 0.5F * (eigval[ic] - eigval[ir]) / (A[ir][ic]);
 80061a0:	f997 3026 	ldrsb.w	r3, [r7, #38]	@ 0x26
 80061a4:	009b      	lsls	r3, r3, #2
 80061a6:	68ba      	ldr	r2, [r7, #8]
 80061a8:	4413      	add	r3, r2
 80061aa:	ed93 7a00 	vldr	s14, [r3]
 80061ae:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80061b2:	009b      	lsls	r3, r3, #2
 80061b4:	68ba      	ldr	r2, [r7, #8]
 80061b6:	4413      	add	r3, r2
 80061b8:	edd3 7a00 	vldr	s15, [r3]
 80061bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80061c0:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80061c4:	ee67 6a87 	vmul.f32	s13, s15, s14
 80061c8:	f997 2027 	ldrsb.w	r2, [r7, #39]	@ 0x27
 80061cc:	4613      	mov	r3, r2
 80061ce:	009b      	lsls	r3, r3, #2
 80061d0:	4413      	add	r3, r2
 80061d2:	00db      	lsls	r3, r3, #3
 80061d4:	461a      	mov	r2, r3
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	441a      	add	r2, r3
 80061da:	f997 3026 	ldrsb.w	r3, [r7, #38]	@ 0x26
 80061de:	009b      	lsls	r3, r3, #2
 80061e0:	4413      	add	r3, r2
 80061e2:	ed93 7a00 	vldr	s14, [r3]
 80061e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80061ea:	edc7 7a08 	vstr	s15, [r7, #32]

						// calculate tan(phi) correcting sign to ensure the smaller solution is used
						tanphi = 1.0F / (fabs(cot2phi) + sqrtf(1.0F + cot2phi * cot2phi));
 80061ee:	edd7 7a08 	vldr	s15, [r7, #32]
 80061f2:	eef0 7ae7 	vabs.f32	s15, s15
 80061f6:	ee17 0a90 	vmov	r0, s15
 80061fa:	f7fa f97d 	bl	80004f8 <__aeabi_f2d>
 80061fe:	4604      	mov	r4, r0
 8006200:	460d      	mov	r5, r1
 8006202:	edd7 7a08 	vldr	s15, [r7, #32]
 8006206:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800620a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800620e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006212:	eeb0 0a67 	vmov.f32	s0, s15
 8006216:	f00a ff1f 	bl	8011058 <sqrtf>
 800621a:	ee10 3a10 	vmov	r3, s0
 800621e:	4618      	mov	r0, r3
 8006220:	f7fa f96a 	bl	80004f8 <__aeabi_f2d>
 8006224:	4602      	mov	r2, r0
 8006226:	460b      	mov	r3, r1
 8006228:	4620      	mov	r0, r4
 800622a:	4629      	mov	r1, r5
 800622c:	f7fa f806 	bl	800023c <__adddf3>
 8006230:	4602      	mov	r2, r0
 8006232:	460b      	mov	r3, r1
 8006234:	f04f 0000 	mov.w	r0, #0
 8006238:	49d1      	ldr	r1, [pc, #836]	@ (8006580 <eigencompute+0x574>)
 800623a:	f7fa fadf 	bl	80007fc <__aeabi_ddiv>
 800623e:	4602      	mov	r2, r0
 8006240:	460b      	mov	r3, r1
 8006242:	4610      	mov	r0, r2
 8006244:	4619      	mov	r1, r3
 8006246:	f7fa fc5f 	bl	8000b08 <__aeabi_d2f>
 800624a:	4603      	mov	r3, r0
 800624c:	62fb      	str	r3, [r7, #44]	@ 0x2c
						if (cot2phi < 0.0F) {
 800624e:	edd7 7a08 	vldr	s15, [r7, #32]
 8006252:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006256:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800625a:	d505      	bpl.n	8006268 <eigencompute+0x25c>
							tanphi = -tanphi;
 800625c:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8006260:	eef1 7a67 	vneg.f32	s15, s15
 8006264:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
						}

						// calculate the sine and cosine of the Jacobi rotation angle phi
						cosphi = 1.0F / sqrtf(1.0F + tanphi * tanphi);
 8006268:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800626c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8006270:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006274:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006278:	eeb0 0a67 	vmov.f32	s0, s15
 800627c:	f00a feec 	bl	8011058 <sqrtf>
 8006280:	eeb0 7a40 	vmov.f32	s14, s0
 8006284:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006288:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800628c:	edc7 7a07 	vstr	s15, [r7, #28]
						sinphi = tanphi * cosphi;
 8006290:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8006294:	edd7 7a07 	vldr	s15, [r7, #28]
 8006298:	ee67 7a27 	vmul.f32	s15, s14, s15
 800629c:	edc7 7a06 	vstr	s15, [r7, #24]

						// calculate tan(phi/2)
						tanhalfphi = sinphi / (1.0F + cosphi);
 80062a0:	edd7 7a07 	vldr	s15, [r7, #28]
 80062a4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80062a8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80062ac:	edd7 6a06 	vldr	s13, [r7, #24]
 80062b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80062b4:	edc7 7a05 	vstr	s15, [r7, #20]

						// set tmp = tan(phi) times current matrix element used in update of leading diagonal elements
						ftmp = tanphi * A[ir][ic];
 80062b8:	f997 2027 	ldrsb.w	r2, [r7, #39]	@ 0x27
 80062bc:	4613      	mov	r3, r2
 80062be:	009b      	lsls	r3, r3, #2
 80062c0:	4413      	add	r3, r2
 80062c2:	00db      	lsls	r3, r3, #3
 80062c4:	461a      	mov	r2, r3
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	441a      	add	r2, r3
 80062ca:	f997 3026 	ldrsb.w	r3, [r7, #38]	@ 0x26
 80062ce:	009b      	lsls	r3, r3, #2
 80062d0:	4413      	add	r3, r2
 80062d2:	edd3 7a00 	vldr	s15, [r3]
 80062d6:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 80062da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062de:	edc7 7a04 	vstr	s15, [r7, #16]

						// apply the jacobi rotation to diagonal elements [ir][ir] and [ic][ic] stored in the eigenvalue array
						// eigval[ir] = eigval[ir] - tan(phi) *  A[ir][ic]
						eigval[ir] -= ftmp;
 80062e2:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80062e6:	009b      	lsls	r3, r3, #2
 80062e8:	68ba      	ldr	r2, [r7, #8]
 80062ea:	4413      	add	r3, r2
 80062ec:	ed93 7a00 	vldr	s14, [r3]
 80062f0:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80062f4:	009b      	lsls	r3, r3, #2
 80062f6:	68ba      	ldr	r2, [r7, #8]
 80062f8:	4413      	add	r3, r2
 80062fa:	edd7 7a04 	vldr	s15, [r7, #16]
 80062fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006302:	edc3 7a00 	vstr	s15, [r3]
						// eigval[ic] = eigval[ic] + tan(phi) * A[ir][ic]
						eigval[ic] += ftmp;
 8006306:	f997 3026 	ldrsb.w	r3, [r7, #38]	@ 0x26
 800630a:	009b      	lsls	r3, r3, #2
 800630c:	68ba      	ldr	r2, [r7, #8]
 800630e:	4413      	add	r3, r2
 8006310:	ed93 7a00 	vldr	s14, [r3]
 8006314:	f997 3026 	ldrsb.w	r3, [r7, #38]	@ 0x26
 8006318:	009b      	lsls	r3, r3, #2
 800631a:	68ba      	ldr	r2, [r7, #8]
 800631c:	4413      	add	r3, r2
 800631e:	edd7 7a04 	vldr	s15, [r7, #16]
 8006322:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006326:	edc3 7a00 	vstr	s15, [r3]

						// by definition, applying the jacobi rotation on element ir, ic results in 0.0
						A[ir][ic] = 0.0F;
 800632a:	f997 2027 	ldrsb.w	r2, [r7, #39]	@ 0x27
 800632e:	4613      	mov	r3, r2
 8006330:	009b      	lsls	r3, r3, #2
 8006332:	4413      	add	r3, r2
 8006334:	00db      	lsls	r3, r3, #3
 8006336:	461a      	mov	r2, r3
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	441a      	add	r2, r3
 800633c:	f997 3026 	ldrsb.w	r3, [r7, #38]	@ 0x26
 8006340:	009b      	lsls	r3, r3, #2
 8006342:	4413      	add	r3, r2
 8006344:	f04f 0200 	mov.w	r2, #0
 8006348:	601a      	str	r2, [r3, #0]

						// apply the jacobi rotation to all elements of the eigenvector matrix
						for (j = 0; j < n; j++) {
 800634a:	2300      	movs	r3, #0
 800634c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8006350:	e07e      	b.n	8006450 <eigencompute+0x444>
							// store eigvec[j][ir]
							ftmp = eigvec[j][ir];
 8006352:	f997 2025 	ldrsb.w	r2, [r7, #37]	@ 0x25
 8006356:	4613      	mov	r3, r2
 8006358:	009b      	lsls	r3, r3, #2
 800635a:	4413      	add	r3, r2
 800635c:	00db      	lsls	r3, r3, #3
 800635e:	461a      	mov	r2, r3
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	441a      	add	r2, r3
 8006364:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006368:	009b      	lsls	r3, r3, #2
 800636a:	4413      	add	r3, r2
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	613b      	str	r3, [r7, #16]
							// eigvec[j][ir] = eigvec[j][ir] - sin(phi) * (eigvec[j][ic] + tan(phi/2) * eigvec[j][ir])
							eigvec[j][ir] = ftmp - sinphi * (eigvec[j][ic] + tanhalfphi * ftmp);
 8006370:	f997 2025 	ldrsb.w	r2, [r7, #37]	@ 0x25
 8006374:	4613      	mov	r3, r2
 8006376:	009b      	lsls	r3, r3, #2
 8006378:	4413      	add	r3, r2
 800637a:	00db      	lsls	r3, r3, #3
 800637c:	461a      	mov	r2, r3
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	441a      	add	r2, r3
 8006382:	f997 3026 	ldrsb.w	r3, [r7, #38]	@ 0x26
 8006386:	009b      	lsls	r3, r3, #2
 8006388:	4413      	add	r3, r2
 800638a:	ed93 7a00 	vldr	s14, [r3]
 800638e:	edd7 6a05 	vldr	s13, [r7, #20]
 8006392:	edd7 7a04 	vldr	s15, [r7, #16]
 8006396:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800639a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800639e:	edd7 7a06 	vldr	s15, [r7, #24]
 80063a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063a6:	f997 2025 	ldrsb.w	r2, [r7, #37]	@ 0x25
 80063aa:	4613      	mov	r3, r2
 80063ac:	009b      	lsls	r3, r3, #2
 80063ae:	4413      	add	r3, r2
 80063b0:	00db      	lsls	r3, r3, #3
 80063b2:	461a      	mov	r2, r3
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	441a      	add	r2, r3
 80063b8:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80063bc:	ed97 7a04 	vldr	s14, [r7, #16]
 80063c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80063c4:	009b      	lsls	r3, r3, #2
 80063c6:	4413      	add	r3, r2
 80063c8:	edc3 7a00 	vstr	s15, [r3]
							// eigvec[j][ic] = eigvec[j][ic] + sin(phi) * (eigvec[j][ir] - tan(phi/2) * eigvec[j][ic])
							eigvec[j][ic] = eigvec[j][ic] + sinphi * (ftmp - tanhalfphi * eigvec[j][ic]);
 80063cc:	f997 2025 	ldrsb.w	r2, [r7, #37]	@ 0x25
 80063d0:	4613      	mov	r3, r2
 80063d2:	009b      	lsls	r3, r3, #2
 80063d4:	4413      	add	r3, r2
 80063d6:	00db      	lsls	r3, r3, #3
 80063d8:	461a      	mov	r2, r3
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	441a      	add	r2, r3
 80063de:	f997 3026 	ldrsb.w	r3, [r7, #38]	@ 0x26
 80063e2:	009b      	lsls	r3, r3, #2
 80063e4:	4413      	add	r3, r2
 80063e6:	ed93 7a00 	vldr	s14, [r3]
 80063ea:	f997 2025 	ldrsb.w	r2, [r7, #37]	@ 0x25
 80063ee:	4613      	mov	r3, r2
 80063f0:	009b      	lsls	r3, r3, #2
 80063f2:	4413      	add	r3, r2
 80063f4:	00db      	lsls	r3, r3, #3
 80063f6:	461a      	mov	r2, r3
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	441a      	add	r2, r3
 80063fc:	f997 3026 	ldrsb.w	r3, [r7, #38]	@ 0x26
 8006400:	009b      	lsls	r3, r3, #2
 8006402:	4413      	add	r3, r2
 8006404:	edd3 6a00 	vldr	s13, [r3]
 8006408:	edd7 7a05 	vldr	s15, [r7, #20]
 800640c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006410:	edd7 6a04 	vldr	s13, [r7, #16]
 8006414:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8006418:	edd7 7a06 	vldr	s15, [r7, #24]
 800641c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006420:	f997 2025 	ldrsb.w	r2, [r7, #37]	@ 0x25
 8006424:	4613      	mov	r3, r2
 8006426:	009b      	lsls	r3, r3, #2
 8006428:	4413      	add	r3, r2
 800642a:	00db      	lsls	r3, r3, #3
 800642c:	461a      	mov	r2, r3
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	441a      	add	r2, r3
 8006432:	f997 3026 	ldrsb.w	r3, [r7, #38]	@ 0x26
 8006436:	ee77 7a27 	vadd.f32	s15, s14, s15
 800643a:	009b      	lsls	r3, r3, #2
 800643c:	4413      	add	r3, r2
 800643e:	edc3 7a00 	vstr	s15, [r3]
						for (j = 0; j < n; j++) {
 8006442:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8006446:	b2db      	uxtb	r3, r3
 8006448:	3301      	adds	r3, #1
 800644a:	b2db      	uxtb	r3, r3
 800644c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8006450:	f997 2025 	ldrsb.w	r2, [r7, #37]	@ 0x25
 8006454:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006458:	429a      	cmp	r2, r3
 800645a:	f6ff af7a 	blt.w	8006352 <eigencompute+0x346>
						}

						// apply the jacobi rotation only to those elements of matrix m that can change
						for (j = 0; j <= ir - 1; j++) {
 800645e:	2300      	movs	r3, #0
 8006460:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8006464:	e07e      	b.n	8006564 <eigencompute+0x558>
							// store A[j][ir]
							ftmp = A[j][ir];
 8006466:	f997 2025 	ldrsb.w	r2, [r7, #37]	@ 0x25
 800646a:	4613      	mov	r3, r2
 800646c:	009b      	lsls	r3, r3, #2
 800646e:	4413      	add	r3, r2
 8006470:	00db      	lsls	r3, r3, #3
 8006472:	461a      	mov	r2, r3
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	441a      	add	r2, r3
 8006478:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800647c:	009b      	lsls	r3, r3, #2
 800647e:	4413      	add	r3, r2
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	613b      	str	r3, [r7, #16]
							// A[j][ir] = A[j][ir] - sin(phi) * (A[j][ic] + tan(phi/2) * A[j][ir])
							A[j][ir] = ftmp - sinphi * (A[j][ic] + tanhalfphi * ftmp);
 8006484:	f997 2025 	ldrsb.w	r2, [r7, #37]	@ 0x25
 8006488:	4613      	mov	r3, r2
 800648a:	009b      	lsls	r3, r3, #2
 800648c:	4413      	add	r3, r2
 800648e:	00db      	lsls	r3, r3, #3
 8006490:	461a      	mov	r2, r3
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	441a      	add	r2, r3
 8006496:	f997 3026 	ldrsb.w	r3, [r7, #38]	@ 0x26
 800649a:	009b      	lsls	r3, r3, #2
 800649c:	4413      	add	r3, r2
 800649e:	ed93 7a00 	vldr	s14, [r3]
 80064a2:	edd7 6a05 	vldr	s13, [r7, #20]
 80064a6:	edd7 7a04 	vldr	s15, [r7, #16]
 80064aa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80064ae:	ee37 7a27 	vadd.f32	s14, s14, s15
 80064b2:	edd7 7a06 	vldr	s15, [r7, #24]
 80064b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80064ba:	f997 2025 	ldrsb.w	r2, [r7, #37]	@ 0x25
 80064be:	4613      	mov	r3, r2
 80064c0:	009b      	lsls	r3, r3, #2
 80064c2:	4413      	add	r3, r2
 80064c4:	00db      	lsls	r3, r3, #3
 80064c6:	461a      	mov	r2, r3
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	441a      	add	r2, r3
 80064cc:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80064d0:	ed97 7a04 	vldr	s14, [r7, #16]
 80064d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80064d8:	009b      	lsls	r3, r3, #2
 80064da:	4413      	add	r3, r2
 80064dc:	edc3 7a00 	vstr	s15, [r3]
							// A[j][ic] = A[j][ic] + sin(phi) * (A[j][ir] - tan(phi/2) * A[j][ic])
							A[j][ic] = A[j][ic] + sinphi * (ftmp - tanhalfphi * A[j][ic]);
 80064e0:	f997 2025 	ldrsb.w	r2, [r7, #37]	@ 0x25
 80064e4:	4613      	mov	r3, r2
 80064e6:	009b      	lsls	r3, r3, #2
 80064e8:	4413      	add	r3, r2
 80064ea:	00db      	lsls	r3, r3, #3
 80064ec:	461a      	mov	r2, r3
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	441a      	add	r2, r3
 80064f2:	f997 3026 	ldrsb.w	r3, [r7, #38]	@ 0x26
 80064f6:	009b      	lsls	r3, r3, #2
 80064f8:	4413      	add	r3, r2
 80064fa:	ed93 7a00 	vldr	s14, [r3]
 80064fe:	f997 2025 	ldrsb.w	r2, [r7, #37]	@ 0x25
 8006502:	4613      	mov	r3, r2
 8006504:	009b      	lsls	r3, r3, #2
 8006506:	4413      	add	r3, r2
 8006508:	00db      	lsls	r3, r3, #3
 800650a:	461a      	mov	r2, r3
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	441a      	add	r2, r3
 8006510:	f997 3026 	ldrsb.w	r3, [r7, #38]	@ 0x26
 8006514:	009b      	lsls	r3, r3, #2
 8006516:	4413      	add	r3, r2
 8006518:	edd3 6a00 	vldr	s13, [r3]
 800651c:	edd7 7a05 	vldr	s15, [r7, #20]
 8006520:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006524:	edd7 6a04 	vldr	s13, [r7, #16]
 8006528:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800652c:	edd7 7a06 	vldr	s15, [r7, #24]
 8006530:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006534:	f997 2025 	ldrsb.w	r2, [r7, #37]	@ 0x25
 8006538:	4613      	mov	r3, r2
 800653a:	009b      	lsls	r3, r3, #2
 800653c:	4413      	add	r3, r2
 800653e:	00db      	lsls	r3, r3, #3
 8006540:	461a      	mov	r2, r3
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	441a      	add	r2, r3
 8006546:	f997 3026 	ldrsb.w	r3, [r7, #38]	@ 0x26
 800654a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800654e:	009b      	lsls	r3, r3, #2
 8006550:	4413      	add	r3, r2
 8006552:	edc3 7a00 	vstr	s15, [r3]
						for (j = 0; j <= ir - 1; j++) {
 8006556:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 800655a:	b2db      	uxtb	r3, r3
 800655c:	3301      	adds	r3, #1
 800655e:	b2db      	uxtb	r3, r3
 8006560:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8006564:	f997 2027 	ldrsb.w	r2, [r7, #39]	@ 0x27
 8006568:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 800656c:	429a      	cmp	r2, r3
 800656e:	f73f af7a 	bgt.w	8006466 <eigencompute+0x45a>
						}
						for (j = ir + 1; j <= ic - 1; j++) {
 8006572:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006576:	3301      	adds	r3, #1
 8006578:	b2db      	uxtb	r3, r3
 800657a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 800657e:	e080      	b.n	8006682 <eigencompute+0x676>
 8006580:	3ff00000 	.word	0x3ff00000
							// store A[ir][j]
							ftmp = A[ir][j];
 8006584:	f997 2027 	ldrsb.w	r2, [r7, #39]	@ 0x27
 8006588:	4613      	mov	r3, r2
 800658a:	009b      	lsls	r3, r3, #2
 800658c:	4413      	add	r3, r2
 800658e:	00db      	lsls	r3, r3, #3
 8006590:	461a      	mov	r2, r3
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	441a      	add	r2, r3
 8006596:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 800659a:	009b      	lsls	r3, r3, #2
 800659c:	4413      	add	r3, r2
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	613b      	str	r3, [r7, #16]
							// A[ir][j] = A[ir][j] - sin(phi) * (A[j][ic] + tan(phi/2) * A[ir][j])
							A[ir][j] = ftmp - sinphi * (A[j][ic] + tanhalfphi * ftmp);
 80065a2:	f997 2025 	ldrsb.w	r2, [r7, #37]	@ 0x25
 80065a6:	4613      	mov	r3, r2
 80065a8:	009b      	lsls	r3, r3, #2
 80065aa:	4413      	add	r3, r2
 80065ac:	00db      	lsls	r3, r3, #3
 80065ae:	461a      	mov	r2, r3
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	441a      	add	r2, r3
 80065b4:	f997 3026 	ldrsb.w	r3, [r7, #38]	@ 0x26
 80065b8:	009b      	lsls	r3, r3, #2
 80065ba:	4413      	add	r3, r2
 80065bc:	ed93 7a00 	vldr	s14, [r3]
 80065c0:	edd7 6a05 	vldr	s13, [r7, #20]
 80065c4:	edd7 7a04 	vldr	s15, [r7, #16]
 80065c8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80065cc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80065d0:	edd7 7a06 	vldr	s15, [r7, #24]
 80065d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80065d8:	f997 2027 	ldrsb.w	r2, [r7, #39]	@ 0x27
 80065dc:	4613      	mov	r3, r2
 80065de:	009b      	lsls	r3, r3, #2
 80065e0:	4413      	add	r3, r2
 80065e2:	00db      	lsls	r3, r3, #3
 80065e4:	461a      	mov	r2, r3
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	441a      	add	r2, r3
 80065ea:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 80065ee:	ed97 7a04 	vldr	s14, [r7, #16]
 80065f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80065f6:	009b      	lsls	r3, r3, #2
 80065f8:	4413      	add	r3, r2
 80065fa:	edc3 7a00 	vstr	s15, [r3]
							// A[j][ic] = A[j][ic] + sin(phi) * (A[ir][j] - tan(phi/2) * A[j][ic])
							A[j][ic] = A[j][ic] + sinphi * (ftmp - tanhalfphi * A[j][ic]);
 80065fe:	f997 2025 	ldrsb.w	r2, [r7, #37]	@ 0x25
 8006602:	4613      	mov	r3, r2
 8006604:	009b      	lsls	r3, r3, #2
 8006606:	4413      	add	r3, r2
 8006608:	00db      	lsls	r3, r3, #3
 800660a:	461a      	mov	r2, r3
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	441a      	add	r2, r3
 8006610:	f997 3026 	ldrsb.w	r3, [r7, #38]	@ 0x26
 8006614:	009b      	lsls	r3, r3, #2
 8006616:	4413      	add	r3, r2
 8006618:	ed93 7a00 	vldr	s14, [r3]
 800661c:	f997 2025 	ldrsb.w	r2, [r7, #37]	@ 0x25
 8006620:	4613      	mov	r3, r2
 8006622:	009b      	lsls	r3, r3, #2
 8006624:	4413      	add	r3, r2
 8006626:	00db      	lsls	r3, r3, #3
 8006628:	461a      	mov	r2, r3
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	441a      	add	r2, r3
 800662e:	f997 3026 	ldrsb.w	r3, [r7, #38]	@ 0x26
 8006632:	009b      	lsls	r3, r3, #2
 8006634:	4413      	add	r3, r2
 8006636:	edd3 6a00 	vldr	s13, [r3]
 800663a:	edd7 7a05 	vldr	s15, [r7, #20]
 800663e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006642:	edd7 6a04 	vldr	s13, [r7, #16]
 8006646:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800664a:	edd7 7a06 	vldr	s15, [r7, #24]
 800664e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006652:	f997 2025 	ldrsb.w	r2, [r7, #37]	@ 0x25
 8006656:	4613      	mov	r3, r2
 8006658:	009b      	lsls	r3, r3, #2
 800665a:	4413      	add	r3, r2
 800665c:	00db      	lsls	r3, r3, #3
 800665e:	461a      	mov	r2, r3
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	441a      	add	r2, r3
 8006664:	f997 3026 	ldrsb.w	r3, [r7, #38]	@ 0x26
 8006668:	ee77 7a27 	vadd.f32	s15, s14, s15
 800666c:	009b      	lsls	r3, r3, #2
 800666e:	4413      	add	r3, r2
 8006670:	edc3 7a00 	vstr	s15, [r3]
						for (j = ir + 1; j <= ic - 1; j++) {
 8006674:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8006678:	b2db      	uxtb	r3, r3
 800667a:	3301      	adds	r3, #1
 800667c:	b2db      	uxtb	r3, r3
 800667e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8006682:	f997 2026 	ldrsb.w	r2, [r7, #38]	@ 0x26
 8006686:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 800668a:	429a      	cmp	r2, r3
 800668c:	f73f af7a 	bgt.w	8006584 <eigencompute+0x578>
						}
						for (j = ic + 1; j < n; j++) {
 8006690:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006694:	3301      	adds	r3, #1
 8006696:	b2db      	uxtb	r3, r3
 8006698:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 800669c:	e07e      	b.n	800679c <eigencompute+0x790>
							// store A[ir][j]
							ftmp = A[ir][j];
 800669e:	f997 2027 	ldrsb.w	r2, [r7, #39]	@ 0x27
 80066a2:	4613      	mov	r3, r2
 80066a4:	009b      	lsls	r3, r3, #2
 80066a6:	4413      	add	r3, r2
 80066a8:	00db      	lsls	r3, r3, #3
 80066aa:	461a      	mov	r2, r3
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	441a      	add	r2, r3
 80066b0:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 80066b4:	009b      	lsls	r3, r3, #2
 80066b6:	4413      	add	r3, r2
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	613b      	str	r3, [r7, #16]
							// A[ir][j] = A[ir][j] - sin(phi) * (A[ic][j] + tan(phi/2) * A[ir][j])
							A[ir][j] = ftmp - sinphi * (A[ic][j] + tanhalfphi * ftmp);
 80066bc:	f997 2026 	ldrsb.w	r2, [r7, #38]	@ 0x26
 80066c0:	4613      	mov	r3, r2
 80066c2:	009b      	lsls	r3, r3, #2
 80066c4:	4413      	add	r3, r2
 80066c6:	00db      	lsls	r3, r3, #3
 80066c8:	461a      	mov	r2, r3
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	441a      	add	r2, r3
 80066ce:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 80066d2:	009b      	lsls	r3, r3, #2
 80066d4:	4413      	add	r3, r2
 80066d6:	ed93 7a00 	vldr	s14, [r3]
 80066da:	edd7 6a05 	vldr	s13, [r7, #20]
 80066de:	edd7 7a04 	vldr	s15, [r7, #16]
 80066e2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80066e6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80066ea:	edd7 7a06 	vldr	s15, [r7, #24]
 80066ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80066f2:	f997 2027 	ldrsb.w	r2, [r7, #39]	@ 0x27
 80066f6:	4613      	mov	r3, r2
 80066f8:	009b      	lsls	r3, r3, #2
 80066fa:	4413      	add	r3, r2
 80066fc:	00db      	lsls	r3, r3, #3
 80066fe:	461a      	mov	r2, r3
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	441a      	add	r2, r3
 8006704:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8006708:	ed97 7a04 	vldr	s14, [r7, #16]
 800670c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006710:	009b      	lsls	r3, r3, #2
 8006712:	4413      	add	r3, r2
 8006714:	edc3 7a00 	vstr	s15, [r3]
							// A[ic][j] = A[ic][j] + sin(phi) * (A[ir][j] - tan(phi/2) * A[ic][j])
							A[ic][j] = A[ic][j] + sinphi * (ftmp - tanhalfphi * A[ic][j]);
 8006718:	f997 2026 	ldrsb.w	r2, [r7, #38]	@ 0x26
 800671c:	4613      	mov	r3, r2
 800671e:	009b      	lsls	r3, r3, #2
 8006720:	4413      	add	r3, r2
 8006722:	00db      	lsls	r3, r3, #3
 8006724:	461a      	mov	r2, r3
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	441a      	add	r2, r3
 800672a:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 800672e:	009b      	lsls	r3, r3, #2
 8006730:	4413      	add	r3, r2
 8006732:	ed93 7a00 	vldr	s14, [r3]
 8006736:	f997 2026 	ldrsb.w	r2, [r7, #38]	@ 0x26
 800673a:	4613      	mov	r3, r2
 800673c:	009b      	lsls	r3, r3, #2
 800673e:	4413      	add	r3, r2
 8006740:	00db      	lsls	r3, r3, #3
 8006742:	461a      	mov	r2, r3
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	441a      	add	r2, r3
 8006748:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 800674c:	009b      	lsls	r3, r3, #2
 800674e:	4413      	add	r3, r2
 8006750:	edd3 6a00 	vldr	s13, [r3]
 8006754:	edd7 7a05 	vldr	s15, [r7, #20]
 8006758:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800675c:	edd7 6a04 	vldr	s13, [r7, #16]
 8006760:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8006764:	edd7 7a06 	vldr	s15, [r7, #24]
 8006768:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800676c:	f997 2026 	ldrsb.w	r2, [r7, #38]	@ 0x26
 8006770:	4613      	mov	r3, r2
 8006772:	009b      	lsls	r3, r3, #2
 8006774:	4413      	add	r3, r2
 8006776:	00db      	lsls	r3, r3, #3
 8006778:	461a      	mov	r2, r3
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	441a      	add	r2, r3
 800677e:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8006782:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006786:	009b      	lsls	r3, r3, #2
 8006788:	4413      	add	r3, r2
 800678a:	edc3 7a00 	vstr	s15, [r3]
						for (j = ic + 1; j < n; j++) {
 800678e:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8006792:	b2db      	uxtb	r3, r3
 8006794:	3301      	adds	r3, #1
 8006796:	b2db      	uxtb	r3, r3
 8006798:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 800679c:	f997 2025 	ldrsb.w	r2, [r7, #37]	@ 0x25
 80067a0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80067a4:	429a      	cmp	r2, r3
 80067a6:	f6ff af7a 	blt.w	800669e <eigencompute+0x692>
				for (ic = ir + 1; ic < n; ic++) {
 80067aa:	f997 3026 	ldrsb.w	r3, [r7, #38]	@ 0x26
 80067ae:	b2db      	uxtb	r3, r3
 80067b0:	3301      	adds	r3, #1
 80067b2:	b2db      	uxtb	r3, r3
 80067b4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80067b8:	f997 2026 	ldrsb.w	r2, [r7, #38]	@ 0x26
 80067bc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80067c0:	429a      	cmp	r2, r3
 80067c2:	f6ff acd6 	blt.w	8006172 <eigencompute+0x166>
			for (ir = 0; ir < n - 1; ir++) {
 80067c6:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80067ca:	b2db      	uxtb	r3, r3
 80067cc:	3301      	adds	r3, #1
 80067ce:	b2db      	uxtb	r3, r3
 80067d0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80067d4:	f997 2027 	ldrsb.w	r2, [r7, #39]	@ 0x27
 80067d8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80067dc:	3b01      	subs	r3, #1
 80067de:	429a      	cmp	r2, r3
 80067e0:	f6ff acc0 	blt.w	8006164 <eigencompute+0x158>
						}
					}   // end of test for matrix element already zero
				}   // end of loop over columns
			}   // end of loop over rows
		}  // end of test for non-zero residue
	} while ((residue > 0.0F) && (ctr++ < NITERATIONS)); // end of main loop
 80067e4:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80067e8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80067ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80067f0:	dc00      	bgt.n	80067f4 <eigencompute+0x7e8>
}
 80067f2:	e009      	b.n	8006808 <eigencompute+0x7fc>
	} while ((residue > 0.0F) && (ctr++ < NITERATIONS)); // end of main loop
 80067f4:	f997 3024 	ldrsb.w	r3, [r7, #36]	@ 0x24
 80067f8:	b2da      	uxtb	r2, r3
 80067fa:	3201      	adds	r2, #1
 80067fc:	b2d2      	uxtb	r2, r2
 80067fe:	f887 2024 	strb.w	r2, [r7, #36]	@ 0x24
 8006802:	2b0e      	cmp	r3, #14
 8006804:	f77f ac62 	ble.w	80060cc <eigencompute+0xc0>
}
 8006808:	bf00      	nop
 800680a:	3730      	adds	r7, #48	@ 0x30
 800680c:	46bd      	mov	sp, r7
 800680e:	bdb0      	pop	{r4, r5, r7, pc}

08006810 <fmatrixAeqInvA>:

// function uses Gauss-Jordan elimination to compute the inverse of matrix A in situ
// on exit, A is replaced with its inverse
void fmatrixAeqInvA(float *A[], int8_t iColInd[], int8_t iRowInd[], int8_t iPivot[], int8_t isize)
{
 8006810:	b580      	push	{r7, lr}
 8006812:	b08a      	sub	sp, #40	@ 0x28
 8006814:	af00      	add	r7, sp, #0
 8006816:	60f8      	str	r0, [r7, #12]
 8006818:	60b9      	str	r1, [r7, #8]
 800681a:	607a      	str	r2, [r7, #4]
 800681c:	603b      	str	r3, [r7, #0]
	float ftmp;						// temporary variable used in swaps
	int8_t i, j, k, l, m;			// index counters
	int8_t iPivotRow, iPivotCol;	// row and column of pivot element

	// to avoid compiler warnings
	iPivotRow = iPivotCol = 0;
 800681e:	2300      	movs	r3, #0
 8006820:	777b      	strb	r3, [r7, #29]
 8006822:	7f7b      	ldrb	r3, [r7, #29]
 8006824:	77bb      	strb	r3, [r7, #30]

	// initialize the pivot array to 0
	for (j = 0; j < isize; j++) {
 8006826:	2300      	movs	r3, #0
 8006828:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800682c:	e00c      	b.n	8006848 <fmatrixAeqInvA+0x38>
		iPivot[j] = 0;
 800682e:	f997 3022 	ldrsb.w	r3, [r7, #34]	@ 0x22
 8006832:	683a      	ldr	r2, [r7, #0]
 8006834:	4413      	add	r3, r2
 8006836:	2200      	movs	r2, #0
 8006838:	701a      	strb	r2, [r3, #0]
	for (j = 0; j < isize; j++) {
 800683a:	f997 3022 	ldrsb.w	r3, [r7, #34]	@ 0x22
 800683e:	b2db      	uxtb	r3, r3
 8006840:	3301      	adds	r3, #1
 8006842:	b2db      	uxtb	r3, r3
 8006844:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006848:	f997 2022 	ldrsb.w	r2, [r7, #34]	@ 0x22
 800684c:	f997 3030 	ldrsb.w	r3, [r7, #48]	@ 0x30
 8006850:	429a      	cmp	r2, r3
 8006852:	dbec      	blt.n	800682e <fmatrixAeqInvA+0x1e>
	}

	// main loop i over the dimensions of the square matrix A
	for (i = 0; i < isize; i++) {
 8006854:	2300      	movs	r3, #0
 8006856:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800685a:	e1a1      	b.n	8006ba0 <fmatrixAeqInvA+0x390>
		// zero the largest element found for pivoting
		largest = 0.0F;
 800685c:	f04f 0300 	mov.w	r3, #0
 8006860:	627b      	str	r3, [r7, #36]	@ 0x24
		// loop over candidate rows j
		for (j = 0; j < isize; j++) {
 8006862:	2300      	movs	r3, #0
 8006864:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006868:	e063      	b.n	8006932 <fmatrixAeqInvA+0x122>
			// check if row j has been previously pivoted
			if (iPivot[j] != 1) {
 800686a:	f997 3022 	ldrsb.w	r3, [r7, #34]	@ 0x22
 800686e:	683a      	ldr	r2, [r7, #0]
 8006870:	4413      	add	r3, r2
 8006872:	f993 3000 	ldrsb.w	r3, [r3]
 8006876:	2b01      	cmp	r3, #1
 8006878:	d054      	beq.n	8006924 <fmatrixAeqInvA+0x114>
				// loop over candidate columns k
				for (k = 0; k < isize; k++) {
 800687a:	2300      	movs	r3, #0
 800687c:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
 8006880:	e04a      	b.n	8006918 <fmatrixAeqInvA+0x108>
					// check if column k has previously been pivoted
					if (iPivot[k] == 0) {
 8006882:	f997 3021 	ldrsb.w	r3, [r7, #33]	@ 0x21
 8006886:	683a      	ldr	r2, [r7, #0]
 8006888:	4413      	add	r3, r2
 800688a:	f993 3000 	ldrsb.w	r3, [r3]
 800688e:	2b00      	cmp	r3, #0
 8006890:	d12b      	bne.n	80068ea <fmatrixAeqInvA+0xda>
						// check if the pivot element is the largest found so far
						if (fabs(A[j][k]) >= largest) {
 8006892:	f997 3022 	ldrsb.w	r3, [r7, #34]	@ 0x22
 8006896:	009b      	lsls	r3, r3, #2
 8006898:	68fa      	ldr	r2, [r7, #12]
 800689a:	4413      	add	r3, r2
 800689c:	681a      	ldr	r2, [r3, #0]
 800689e:	f997 3021 	ldrsb.w	r3, [r7, #33]	@ 0x21
 80068a2:	009b      	lsls	r3, r3, #2
 80068a4:	4413      	add	r3, r2
 80068a6:	edd3 7a00 	vldr	s15, [r3]
 80068aa:	eef0 7ae7 	vabs.f32	s15, s15
 80068ae:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80068b2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80068b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80068ba:	d826      	bhi.n	800690a <fmatrixAeqInvA+0xfa>
							// and store this location as the current best candidate for pivoting
							iPivotRow = j;
 80068bc:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80068c0:	77bb      	strb	r3, [r7, #30]
							iPivotCol = k;
 80068c2:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80068c6:	777b      	strb	r3, [r7, #29]
							largest = (float) fabs(A[iPivotRow][iPivotCol]);
 80068c8:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80068cc:	009b      	lsls	r3, r3, #2
 80068ce:	68fa      	ldr	r2, [r7, #12]
 80068d0:	4413      	add	r3, r2
 80068d2:	681a      	ldr	r2, [r3, #0]
 80068d4:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80068d8:	009b      	lsls	r3, r3, #2
 80068da:	4413      	add	r3, r2
 80068dc:	edd3 7a00 	vldr	s15, [r3]
 80068e0:	eef0 7ae7 	vabs.f32	s15, s15
 80068e4:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
 80068e8:	e00f      	b.n	800690a <fmatrixAeqInvA+0xfa>
						}
					} else if (iPivot[k] > 1) {
 80068ea:	f997 3021 	ldrsb.w	r3, [r7, #33]	@ 0x21
 80068ee:	683a      	ldr	r2, [r7, #0]
 80068f0:	4413      	add	r3, r2
 80068f2:	f993 3000 	ldrsb.w	r3, [r3]
 80068f6:	2b01      	cmp	r3, #1
 80068f8:	dd07      	ble.n	800690a <fmatrixAeqInvA+0xfa>
						// zero determinant situation: exit with identity matrix
						fmatrixAeqI(A, isize);
 80068fa:	f997 3030 	ldrsb.w	r3, [r7, #48]	@ 0x30
 80068fe:	b21b      	sxth	r3, r3
 8006900:	4619      	mov	r1, r3
 8006902:	68f8      	ldr	r0, [r7, #12]
 8006904:	f7ff f939 	bl	8005b7a <fmatrixAeqI>
						return;
 8006908:	e1b6      	b.n	8006c78 <fmatrixAeqInvA+0x468>
				for (k = 0; k < isize; k++) {
 800690a:	f997 3021 	ldrsb.w	r3, [r7, #33]	@ 0x21
 800690e:	b2db      	uxtb	r3, r3
 8006910:	3301      	adds	r3, #1
 8006912:	b2db      	uxtb	r3, r3
 8006914:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
 8006918:	f997 2021 	ldrsb.w	r2, [r7, #33]	@ 0x21
 800691c:	f997 3030 	ldrsb.w	r3, [r7, #48]	@ 0x30
 8006920:	429a      	cmp	r2, r3
 8006922:	dbae      	blt.n	8006882 <fmatrixAeqInvA+0x72>
		for (j = 0; j < isize; j++) {
 8006924:	f997 3022 	ldrsb.w	r3, [r7, #34]	@ 0x22
 8006928:	b2db      	uxtb	r3, r3
 800692a:	3301      	adds	r3, #1
 800692c:	b2db      	uxtb	r3, r3
 800692e:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006932:	f997 2022 	ldrsb.w	r2, [r7, #34]	@ 0x22
 8006936:	f997 3030 	ldrsb.w	r3, [r7, #48]	@ 0x30
 800693a:	429a      	cmp	r2, r3
 800693c:	db95      	blt.n	800686a <fmatrixAeqInvA+0x5a>
					}
				}
			}
		}
		// increment the entry in iPivot to denote it has been selected for pivoting
		iPivot[iPivotCol]++;
 800693e:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8006942:	683a      	ldr	r2, [r7, #0]
 8006944:	4413      	add	r3, r2
 8006946:	f993 2000 	ldrsb.w	r2, [r3]
 800694a:	b2d2      	uxtb	r2, r2
 800694c:	3201      	adds	r2, #1
 800694e:	b2d2      	uxtb	r2, r2
 8006950:	b252      	sxtb	r2, r2
 8006952:	701a      	strb	r2, [r3, #0]

		// check the pivot rows iPivotRow and iPivotCol are not the same before swapping
		if (iPivotRow != iPivotCol) {
 8006954:	f997 201e 	ldrsb.w	r2, [r7, #30]
 8006958:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800695c:	429a      	cmp	r2, r3
 800695e:	d03e      	beq.n	80069de <fmatrixAeqInvA+0x1ce>
			// loop over columns l
			for (l = 0; l < isize; l++) {
 8006960:	2300      	movs	r3, #0
 8006962:	f887 3020 	strb.w	r3, [r7, #32]
 8006966:	e034      	b.n	80069d2 <fmatrixAeqInvA+0x1c2>
				// and swap all elements of rows iPivotRow and iPivotCol
				ftmp = A[iPivotRow][l];
 8006968:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800696c:	009b      	lsls	r3, r3, #2
 800696e:	68fa      	ldr	r2, [r7, #12]
 8006970:	4413      	add	r3, r2
 8006972:	681a      	ldr	r2, [r3, #0]
 8006974:	f997 3020 	ldrsb.w	r3, [r7, #32]
 8006978:	009b      	lsls	r3, r3, #2
 800697a:	4413      	add	r3, r2
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	61bb      	str	r3, [r7, #24]
				A[iPivotRow][l] = A[iPivotCol][l];
 8006980:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8006984:	009b      	lsls	r3, r3, #2
 8006986:	68fa      	ldr	r2, [r7, #12]
 8006988:	4413      	add	r3, r2
 800698a:	681a      	ldr	r2, [r3, #0]
 800698c:	f997 3020 	ldrsb.w	r3, [r7, #32]
 8006990:	009b      	lsls	r3, r3, #2
 8006992:	441a      	add	r2, r3
 8006994:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8006998:	009b      	lsls	r3, r3, #2
 800699a:	68f9      	ldr	r1, [r7, #12]
 800699c:	440b      	add	r3, r1
 800699e:	6819      	ldr	r1, [r3, #0]
 80069a0:	f997 3020 	ldrsb.w	r3, [r7, #32]
 80069a4:	009b      	lsls	r3, r3, #2
 80069a6:	440b      	add	r3, r1
 80069a8:	6812      	ldr	r2, [r2, #0]
 80069aa:	601a      	str	r2, [r3, #0]
				A[iPivotCol][l] = ftmp;
 80069ac:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80069b0:	009b      	lsls	r3, r3, #2
 80069b2:	68fa      	ldr	r2, [r7, #12]
 80069b4:	4413      	add	r3, r2
 80069b6:	681a      	ldr	r2, [r3, #0]
 80069b8:	f997 3020 	ldrsb.w	r3, [r7, #32]
 80069bc:	009b      	lsls	r3, r3, #2
 80069be:	4413      	add	r3, r2
 80069c0:	69ba      	ldr	r2, [r7, #24]
 80069c2:	601a      	str	r2, [r3, #0]
			for (l = 0; l < isize; l++) {
 80069c4:	f997 3020 	ldrsb.w	r3, [r7, #32]
 80069c8:	b2db      	uxtb	r3, r3
 80069ca:	3301      	adds	r3, #1
 80069cc:	b2db      	uxtb	r3, r3
 80069ce:	f887 3020 	strb.w	r3, [r7, #32]
 80069d2:	f997 2020 	ldrsb.w	r2, [r7, #32]
 80069d6:	f997 3030 	ldrsb.w	r3, [r7, #48]	@ 0x30
 80069da:	429a      	cmp	r2, r3
 80069dc:	dbc4      	blt.n	8006968 <fmatrixAeqInvA+0x158>
			}
		}

		// record that on the i-th iteration rows iPivotRow and iPivotCol were swapped
		iRowInd[i] = iPivotRow;
 80069de:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 80069e2:	687a      	ldr	r2, [r7, #4]
 80069e4:	4413      	add	r3, r2
 80069e6:	7fba      	ldrb	r2, [r7, #30]
 80069e8:	701a      	strb	r2, [r3, #0]
		iColInd[i] = iPivotCol;
 80069ea:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 80069ee:	68ba      	ldr	r2, [r7, #8]
 80069f0:	4413      	add	r3, r2
 80069f2:	7f7a      	ldrb	r2, [r7, #29]
 80069f4:	701a      	strb	r2, [r3, #0]

		// check for zero on-diagonal element (singular matrix) and return with identity matrix if detected
		if (A[iPivotCol][iPivotCol] == 0.0F) {
 80069f6:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80069fa:	009b      	lsls	r3, r3, #2
 80069fc:	68fa      	ldr	r2, [r7, #12]
 80069fe:	4413      	add	r3, r2
 8006a00:	681a      	ldr	r2, [r3, #0]
 8006a02:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8006a06:	009b      	lsls	r3, r3, #2
 8006a08:	4413      	add	r3, r2
 8006a0a:	edd3 7a00 	vldr	s15, [r3]
 8006a0e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8006a12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a16:	d107      	bne.n	8006a28 <fmatrixAeqInvA+0x218>
			// zero determinant situation: exit with identity matrix
			fmatrixAeqI(A, isize);
 8006a18:	f997 3030 	ldrsb.w	r3, [r7, #48]	@ 0x30
 8006a1c:	b21b      	sxth	r3, r3
 8006a1e:	4619      	mov	r1, r3
 8006a20:	68f8      	ldr	r0, [r7, #12]
 8006a22:	f7ff f8aa 	bl	8005b7a <fmatrixAeqI>
			return;
 8006a26:	e127      	b.n	8006c78 <fmatrixAeqInvA+0x468>
		}

		// calculate the reciprocal of the pivot element knowing it's non-zero
		recippiv = 1.0F / A[iPivotCol][iPivotCol];
 8006a28:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8006a2c:	009b      	lsls	r3, r3, #2
 8006a2e:	68fa      	ldr	r2, [r7, #12]
 8006a30:	4413      	add	r3, r2
 8006a32:	681a      	ldr	r2, [r3, #0]
 8006a34:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8006a38:	009b      	lsls	r3, r3, #2
 8006a3a:	4413      	add	r3, r2
 8006a3c:	ed93 7a00 	vldr	s14, [r3]
 8006a40:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006a44:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006a48:	edc7 7a05 	vstr	s15, [r7, #20]
		// by definition, the diagonal element normalizes to 1
		A[iPivotCol][iPivotCol] = 1.0F;
 8006a4c:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8006a50:	009b      	lsls	r3, r3, #2
 8006a52:	68fa      	ldr	r2, [r7, #12]
 8006a54:	4413      	add	r3, r2
 8006a56:	681a      	ldr	r2, [r3, #0]
 8006a58:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8006a5c:	009b      	lsls	r3, r3, #2
 8006a5e:	4413      	add	r3, r2
 8006a60:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8006a64:	601a      	str	r2, [r3, #0]
		// multiply all of row iPivotCol by the reciprocal of the pivot element including the diagonal element
		// the diagonal element A[iPivotCol][iPivotCol] now has value equal to the reciprocal of its previous value
		for (l = 0; l < isize; l++) {
 8006a66:	2300      	movs	r3, #0
 8006a68:	f887 3020 	strb.w	r3, [r7, #32]
 8006a6c:	e022      	b.n	8006ab4 <fmatrixAeqInvA+0x2a4>
			A[iPivotCol][l] *= recippiv;
 8006a6e:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8006a72:	009b      	lsls	r3, r3, #2
 8006a74:	68fa      	ldr	r2, [r7, #12]
 8006a76:	4413      	add	r3, r2
 8006a78:	681a      	ldr	r2, [r3, #0]
 8006a7a:	f997 3020 	ldrsb.w	r3, [r7, #32]
 8006a7e:	009b      	lsls	r3, r3, #2
 8006a80:	4413      	add	r3, r2
 8006a82:	ed93 7a00 	vldr	s14, [r3]
 8006a86:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8006a8a:	009b      	lsls	r3, r3, #2
 8006a8c:	68fa      	ldr	r2, [r7, #12]
 8006a8e:	4413      	add	r3, r2
 8006a90:	681a      	ldr	r2, [r3, #0]
 8006a92:	f997 3020 	ldrsb.w	r3, [r7, #32]
 8006a96:	009b      	lsls	r3, r3, #2
 8006a98:	4413      	add	r3, r2
 8006a9a:	edd7 7a05 	vldr	s15, [r7, #20]
 8006a9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006aa2:	edc3 7a00 	vstr	s15, [r3]
		for (l = 0; l < isize; l++) {
 8006aa6:	f997 3020 	ldrsb.w	r3, [r7, #32]
 8006aaa:	b2db      	uxtb	r3, r3
 8006aac:	3301      	adds	r3, #1
 8006aae:	b2db      	uxtb	r3, r3
 8006ab0:	f887 3020 	strb.w	r3, [r7, #32]
 8006ab4:	f997 2020 	ldrsb.w	r2, [r7, #32]
 8006ab8:	f997 3030 	ldrsb.w	r3, [r7, #48]	@ 0x30
 8006abc:	429a      	cmp	r2, r3
 8006abe:	dbd6      	blt.n	8006a6e <fmatrixAeqInvA+0x25e>
		}
		// loop over all rows m of A
		for (m = 0; m < isize; m++) {
 8006ac0:	2300      	movs	r3, #0
 8006ac2:	77fb      	strb	r3, [r7, #31]
 8006ac4:	e05f      	b.n	8006b86 <fmatrixAeqInvA+0x376>
			if (m != iPivotCol) {
 8006ac6:	f997 201f 	ldrsb.w	r2, [r7, #31]
 8006aca:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8006ace:	429a      	cmp	r2, r3
 8006ad0:	d053      	beq.n	8006b7a <fmatrixAeqInvA+0x36a>
				// scaling factor for this row m is in column iPivotCol
				scaling = A[m][iPivotCol];
 8006ad2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006ad6:	009b      	lsls	r3, r3, #2
 8006ad8:	68fa      	ldr	r2, [r7, #12]
 8006ada:	4413      	add	r3, r2
 8006adc:	681a      	ldr	r2, [r3, #0]
 8006ade:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8006ae2:	009b      	lsls	r3, r3, #2
 8006ae4:	4413      	add	r3, r2
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	613b      	str	r3, [r7, #16]
				// zero this element
				A[m][iPivotCol] = 0.0F;
 8006aea:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006aee:	009b      	lsls	r3, r3, #2
 8006af0:	68fa      	ldr	r2, [r7, #12]
 8006af2:	4413      	add	r3, r2
 8006af4:	681a      	ldr	r2, [r3, #0]
 8006af6:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8006afa:	009b      	lsls	r3, r3, #2
 8006afc:	4413      	add	r3, r2
 8006afe:	f04f 0200 	mov.w	r2, #0
 8006b02:	601a      	str	r2, [r3, #0]
				// loop over all columns l of A and perform elimination
				for (l = 0; l < isize; l++) {
 8006b04:	2300      	movs	r3, #0
 8006b06:	f887 3020 	strb.w	r3, [r7, #32]
 8006b0a:	e030      	b.n	8006b6e <fmatrixAeqInvA+0x35e>
					A[m][l] -= A[iPivotCol][l] * scaling;
 8006b0c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006b10:	009b      	lsls	r3, r3, #2
 8006b12:	68fa      	ldr	r2, [r7, #12]
 8006b14:	4413      	add	r3, r2
 8006b16:	681a      	ldr	r2, [r3, #0]
 8006b18:	f997 3020 	ldrsb.w	r3, [r7, #32]
 8006b1c:	009b      	lsls	r3, r3, #2
 8006b1e:	4413      	add	r3, r2
 8006b20:	ed93 7a00 	vldr	s14, [r3]
 8006b24:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8006b28:	009b      	lsls	r3, r3, #2
 8006b2a:	68fa      	ldr	r2, [r7, #12]
 8006b2c:	4413      	add	r3, r2
 8006b2e:	681a      	ldr	r2, [r3, #0]
 8006b30:	f997 3020 	ldrsb.w	r3, [r7, #32]
 8006b34:	009b      	lsls	r3, r3, #2
 8006b36:	4413      	add	r3, r2
 8006b38:	edd3 6a00 	vldr	s13, [r3]
 8006b3c:	edd7 7a04 	vldr	s15, [r7, #16]
 8006b40:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006b44:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006b48:	009b      	lsls	r3, r3, #2
 8006b4a:	68fa      	ldr	r2, [r7, #12]
 8006b4c:	4413      	add	r3, r2
 8006b4e:	681a      	ldr	r2, [r3, #0]
 8006b50:	f997 3020 	ldrsb.w	r3, [r7, #32]
 8006b54:	009b      	lsls	r3, r3, #2
 8006b56:	4413      	add	r3, r2
 8006b58:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006b5c:	edc3 7a00 	vstr	s15, [r3]
				for (l = 0; l < isize; l++) {
 8006b60:	f997 3020 	ldrsb.w	r3, [r7, #32]
 8006b64:	b2db      	uxtb	r3, r3
 8006b66:	3301      	adds	r3, #1
 8006b68:	b2db      	uxtb	r3, r3
 8006b6a:	f887 3020 	strb.w	r3, [r7, #32]
 8006b6e:	f997 2020 	ldrsb.w	r2, [r7, #32]
 8006b72:	f997 3030 	ldrsb.w	r3, [r7, #48]	@ 0x30
 8006b76:	429a      	cmp	r2, r3
 8006b78:	dbc8      	blt.n	8006b0c <fmatrixAeqInvA+0x2fc>
		for (m = 0; m < isize; m++) {
 8006b7a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006b7e:	b2db      	uxtb	r3, r3
 8006b80:	3301      	adds	r3, #1
 8006b82:	b2db      	uxtb	r3, r3
 8006b84:	77fb      	strb	r3, [r7, #31]
 8006b86:	f997 201f 	ldrsb.w	r2, [r7, #31]
 8006b8a:	f997 3030 	ldrsb.w	r3, [r7, #48]	@ 0x30
 8006b8e:	429a      	cmp	r2, r3
 8006b90:	db99      	blt.n	8006ac6 <fmatrixAeqInvA+0x2b6>
	for (i = 0; i < isize; i++) {
 8006b92:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8006b96:	b2db      	uxtb	r3, r3
 8006b98:	3301      	adds	r3, #1
 8006b9a:	b2db      	uxtb	r3, r3
 8006b9c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006ba0:	f997 2023 	ldrsb.w	r2, [r7, #35]	@ 0x23
 8006ba4:	f997 3030 	ldrsb.w	r3, [r7, #48]	@ 0x30
 8006ba8:	429a      	cmp	r2, r3
 8006baa:	f6ff ae57 	blt.w	800685c <fmatrixAeqInvA+0x4c>
			}
		}
	} // end of loop i over the matrix dimensions

	// finally, loop in inverse order to apply the missing column swaps
	for (l = isize - 1; l >= 0; l--) {
 8006bae:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8006bb2:	3b01      	subs	r3, #1
 8006bb4:	b2db      	uxtb	r3, r3
 8006bb6:	f887 3020 	strb.w	r3, [r7, #32]
 8006bba:	e059      	b.n	8006c70 <fmatrixAeqInvA+0x460>
		// set i and j to the two columns to be swapped
		i = iRowInd[l];
 8006bbc:	f997 3020 	ldrsb.w	r3, [r7, #32]
 8006bc0:	687a      	ldr	r2, [r7, #4]
 8006bc2:	4413      	add	r3, r2
 8006bc4:	781b      	ldrb	r3, [r3, #0]
 8006bc6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
		j = iColInd[l];
 8006bca:	f997 3020 	ldrsb.w	r3, [r7, #32]
 8006bce:	68ba      	ldr	r2, [r7, #8]
 8006bd0:	4413      	add	r3, r2
 8006bd2:	781b      	ldrb	r3, [r3, #0]
 8006bd4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22

		// check that the two columns i and j to be swapped are not the same
		if (i != j) {
 8006bd8:	f997 2023 	ldrsb.w	r2, [r7, #35]	@ 0x23
 8006bdc:	f997 3022 	ldrsb.w	r3, [r7, #34]	@ 0x22
 8006be0:	429a      	cmp	r2, r3
 8006be2:	d03e      	beq.n	8006c62 <fmatrixAeqInvA+0x452>
			// loop over all rows k to swap columns i and j of A
			for (k = 0; k < isize; k++) {
 8006be4:	2300      	movs	r3, #0
 8006be6:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
 8006bea:	e034      	b.n	8006c56 <fmatrixAeqInvA+0x446>
				ftmp = A[k][i];
 8006bec:	f997 3021 	ldrsb.w	r3, [r7, #33]	@ 0x21
 8006bf0:	009b      	lsls	r3, r3, #2
 8006bf2:	68fa      	ldr	r2, [r7, #12]
 8006bf4:	4413      	add	r3, r2
 8006bf6:	681a      	ldr	r2, [r3, #0]
 8006bf8:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8006bfc:	009b      	lsls	r3, r3, #2
 8006bfe:	4413      	add	r3, r2
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	61bb      	str	r3, [r7, #24]
				A[k][i] = A[k][j];
 8006c04:	f997 3021 	ldrsb.w	r3, [r7, #33]	@ 0x21
 8006c08:	009b      	lsls	r3, r3, #2
 8006c0a:	68fa      	ldr	r2, [r7, #12]
 8006c0c:	4413      	add	r3, r2
 8006c0e:	681a      	ldr	r2, [r3, #0]
 8006c10:	f997 3022 	ldrsb.w	r3, [r7, #34]	@ 0x22
 8006c14:	009b      	lsls	r3, r3, #2
 8006c16:	441a      	add	r2, r3
 8006c18:	f997 3021 	ldrsb.w	r3, [r7, #33]	@ 0x21
 8006c1c:	009b      	lsls	r3, r3, #2
 8006c1e:	68f9      	ldr	r1, [r7, #12]
 8006c20:	440b      	add	r3, r1
 8006c22:	6819      	ldr	r1, [r3, #0]
 8006c24:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8006c28:	009b      	lsls	r3, r3, #2
 8006c2a:	440b      	add	r3, r1
 8006c2c:	6812      	ldr	r2, [r2, #0]
 8006c2e:	601a      	str	r2, [r3, #0]
				A[k][j] = ftmp;
 8006c30:	f997 3021 	ldrsb.w	r3, [r7, #33]	@ 0x21
 8006c34:	009b      	lsls	r3, r3, #2
 8006c36:	68fa      	ldr	r2, [r7, #12]
 8006c38:	4413      	add	r3, r2
 8006c3a:	681a      	ldr	r2, [r3, #0]
 8006c3c:	f997 3022 	ldrsb.w	r3, [r7, #34]	@ 0x22
 8006c40:	009b      	lsls	r3, r3, #2
 8006c42:	4413      	add	r3, r2
 8006c44:	69ba      	ldr	r2, [r7, #24]
 8006c46:	601a      	str	r2, [r3, #0]
			for (k = 0; k < isize; k++) {
 8006c48:	f997 3021 	ldrsb.w	r3, [r7, #33]	@ 0x21
 8006c4c:	b2db      	uxtb	r3, r3
 8006c4e:	3301      	adds	r3, #1
 8006c50:	b2db      	uxtb	r3, r3
 8006c52:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
 8006c56:	f997 2021 	ldrsb.w	r2, [r7, #33]	@ 0x21
 8006c5a:	f997 3030 	ldrsb.w	r3, [r7, #48]	@ 0x30
 8006c5e:	429a      	cmp	r2, r3
 8006c60:	dbc4      	blt.n	8006bec <fmatrixAeqInvA+0x3dc>
	for (l = isize - 1; l >= 0; l--) {
 8006c62:	f997 3020 	ldrsb.w	r3, [r7, #32]
 8006c66:	b2db      	uxtb	r3, r3
 8006c68:	3b01      	subs	r3, #1
 8006c6a:	b2db      	uxtb	r3, r3
 8006c6c:	f887 3020 	strb.w	r3, [r7, #32]
 8006c70:	f997 3020 	ldrsb.w	r3, [r7, #32]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	daa1      	bge.n	8006bbc <fmatrixAeqInvA+0x3ac>
			}
		}
	}
}
 8006c78:	3728      	adds	r7, #40	@ 0x28
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	bd80      	pop	{r7, pc}
	...

08006c80 <quality_surface_gap_error>:
static int quality_wobble_computed=0;


// How many surface gaps
float quality_surface_gap_error(void)
{
 8006c80:	b480      	push	{r7}
 8006c82:	b085      	sub	sp, #20
 8006c84:	af00      	add	r7, sp, #0
	float error=0.0f;
 8006c86:	f04f 0300 	mov.w	r3, #0
 8006c8a:	60fb      	str	r3, [r7, #12]
	int i, num;

	if (quality_gaps_computed) return quality_gaps_buffer;
 8006c8c:	4b22      	ldr	r3, [pc, #136]	@ (8006d18 <quality_surface_gap_error+0x98>)
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d002      	beq.n	8006c9a <quality_surface_gap_error+0x1a>
 8006c94:	4b21      	ldr	r3, [pc, #132]	@ (8006d1c <quality_surface_gap_error+0x9c>)
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	e035      	b.n	8006d06 <quality_surface_gap_error+0x86>
	for (i=0; i < 100; i++) {
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	60bb      	str	r3, [r7, #8]
 8006c9e:	e02a      	b.n	8006cf6 <quality_surface_gap_error+0x76>
		num = spheredist[i];
 8006ca0:	4a1f      	ldr	r2, [pc, #124]	@ (8006d20 <quality_surface_gap_error+0xa0>)
 8006ca2:	68bb      	ldr	r3, [r7, #8]
 8006ca4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006ca8:	607b      	str	r3, [r7, #4]
		if (num == 0) {
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d108      	bne.n	8006cc2 <quality_surface_gap_error+0x42>
			error += 1.0f;
 8006cb0:	edd7 7a03 	vldr	s15, [r7, #12]
 8006cb4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006cb8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006cbc:	edc7 7a03 	vstr	s15, [r7, #12]
 8006cc0:	e016      	b.n	8006cf0 <quality_surface_gap_error+0x70>
		} else if (num == 1) {
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	2b01      	cmp	r3, #1
 8006cc6:	d108      	bne.n	8006cda <quality_surface_gap_error+0x5a>
			error += 0.2f;
 8006cc8:	edd7 7a03 	vldr	s15, [r7, #12]
 8006ccc:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 8006d24 <quality_surface_gap_error+0xa4>
 8006cd0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006cd4:	edc7 7a03 	vstr	s15, [r7, #12]
 8006cd8:	e00a      	b.n	8006cf0 <quality_surface_gap_error+0x70>
		} else if (num == 2) {
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	2b02      	cmp	r3, #2
 8006cde:	d107      	bne.n	8006cf0 <quality_surface_gap_error+0x70>
			error += 0.01f;
 8006ce0:	edd7 7a03 	vldr	s15, [r7, #12]
 8006ce4:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 8006d28 <quality_surface_gap_error+0xa8>
 8006ce8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006cec:	edc7 7a03 	vstr	s15, [r7, #12]
	for (i=0; i < 100; i++) {
 8006cf0:	68bb      	ldr	r3, [r7, #8]
 8006cf2:	3301      	adds	r3, #1
 8006cf4:	60bb      	str	r3, [r7, #8]
 8006cf6:	68bb      	ldr	r3, [r7, #8]
 8006cf8:	2b63      	cmp	r3, #99	@ 0x63
 8006cfa:	ddd1      	ble.n	8006ca0 <quality_surface_gap_error+0x20>
		}
	}
	quality_gaps_buffer = error;
 8006cfc:	4a07      	ldr	r2, [pc, #28]	@ (8006d1c <quality_surface_gap_error+0x9c>)
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	6013      	str	r3, [r2, #0]
//	quality_gaps_computed = 1;
	return quality_gaps_buffer;
 8006d02:	4b06      	ldr	r3, [pc, #24]	@ (8006d1c <quality_surface_gap_error+0x9c>)
 8006d04:	681b      	ldr	r3, [r3, #0]
}
 8006d06:	ee07 3a90 	vmov	s15, r3
 8006d0a:	eeb0 0a67 	vmov.f32	s0, s15
 8006d0e:	3714      	adds	r7, #20
 8006d10:	46bd      	mov	sp, r7
 8006d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d16:	4770      	bx	lr
 8006d18:	20001cc0 	.word	0x20001cc0
 8006d1c:	20001cbc 	.word	0x20001cbc
 8006d20:	20001b2c 	.word	0x20001b2c
 8006d24:	3e4ccccd 	.word	0x3e4ccccd
 8006d28:	3c23d70a 	.word	0x3c23d70a

08006d2c <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8006d2c:	b480      	push	{r7}
 8006d2e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8006d30:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006d34:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d38:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006d3c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006d40:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8006d44:	bf00      	nop
 8006d46:	46bd      	mov	sp, r7
 8006d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4c:	4770      	bx	lr

08006d4e <LL_AHB2_GRP1_EnableClock>:
{
 8006d4e:	b480      	push	{r7}
 8006d50:	b085      	sub	sp, #20
 8006d52:	af00      	add	r7, sp, #0
 8006d54:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8006d56:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006d5a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006d5c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	4313      	orrs	r3, r2
 8006d64:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8006d66:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006d6a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	4013      	ands	r3, r2
 8006d70:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8006d72:	68fb      	ldr	r3, [r7, #12]
}
 8006d74:	bf00      	nop
 8006d76:	3714      	adds	r7, #20
 8006d78:	46bd      	mov	sp, r7
 8006d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7e:	4770      	bx	lr

08006d80 <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8006d80:	b480      	push	{r7}
 8006d82:	b085      	sub	sp, #20
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 8006d88:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006d8c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006d8e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	4313      	orrs	r3, r2
 8006d96:	650b      	str	r3, [r1, #80]	@ 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8006d98:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006d9c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	4013      	ands	r3, r2
 8006da2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8006da4:	68fb      	ldr	r3, [r7, #12]
}
 8006da6:	bf00      	nop
 8006da8:	3714      	adds	r7, #20
 8006daa:	46bd      	mov	sp, r7
 8006dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db0:	4770      	bx	lr

08006db2 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8006db2:	b480      	push	{r7}
 8006db4:	b085      	sub	sp, #20
 8006db6:	af00      	add	r7, sp, #0
 8006db8:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8006dba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006dbe:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8006dc0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	4313      	orrs	r3, r2
 8006dc8:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8006dca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006dce:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	4013      	ands	r3, r2
 8006dd4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8006dd6:	68fb      	ldr	r3, [r7, #12]
}
 8006dd8:	bf00      	nop
 8006dda:	3714      	adds	r7, #20
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de2:	4770      	bx	lr

08006de4 <HAL_MspInit>:

/* USER CODE END 0 */
/**
 * Initializes the Global MSP.
 */
void HAL_MspInit(void) {
 8006de4:	b580      	push	{r7, lr}
 8006de6:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN MspInit 0 */

	/* USER CODE END MspInit 0 */

	__HAL_RCC_HSEM_CLK_ENABLE();
 8006de8:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8006dec:	f7ff ffc8 	bl	8006d80 <LL_AHB3_GRP1_EnableClock>

	/* System interrupt init*/

	/* Peripheral interrupt init */
	/* HSEM_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 8006df0:	2200      	movs	r2, #0
 8006df2:	2100      	movs	r1, #0
 8006df4:	202e      	movs	r0, #46	@ 0x2e
 8006df6:	f000 fc80 	bl	80076fa <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8006dfa:	202e      	movs	r0, #46	@ 0x2e
 8006dfc:	f000 fc97 	bl	800772e <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MspInit 1 */

	/* USER CODE END MspInit 1 */
}
 8006e00:	bf00      	nop
 8006e02:	bd80      	pop	{r7, pc}

08006e04 <HAL_I2C_MspInit>:
 * @brief I2C MSP Initialization
 * This function configures the hardware resources used in this example
 * @param hi2c: I2C handle pointer
 * @retval None
 */
void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c) {
 8006e04:	b580      	push	{r7, lr}
 8006e06:	b09c      	sub	sp, #112	@ 0x70
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8006e0c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8006e10:	2200      	movs	r2, #0
 8006e12:	601a      	str	r2, [r3, #0]
 8006e14:	605a      	str	r2, [r3, #4]
 8006e16:	609a      	str	r2, [r3, #8]
 8006e18:	60da      	str	r2, [r3, #12]
 8006e1a:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 8006e1c:	f107 030c 	add.w	r3, r7, #12
 8006e20:	2250      	movs	r2, #80	@ 0x50
 8006e22:	2100      	movs	r1, #0
 8006e24:	4618      	mov	r0, r3
 8006e26:	f009 f9e8 	bl	80101fa <memset>
	if (hi2c->Instance == I2C1) {
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	4a34      	ldr	r2, [pc, #208]	@ (8006f00 <HAL_I2C_MspInit+0xfc>)
 8006e30:	4293      	cmp	r3, r2
 8006e32:	d160      	bne.n	8006ef6 <HAL_I2C_MspInit+0xf2>

		/* USER CODE END I2C1_MspInit 0 */

		/** Initializes the peripherals clock
		 */
		PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8006e34:	2304      	movs	r3, #4
 8006e36:	60fb      	str	r3, [r7, #12]
		PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8006e38:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 8006e3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 8006e3e:	f107 030c 	add.w	r3, r7, #12
 8006e42:	4618      	mov	r0, r3
 8006e44:	f004 fd4f 	bl	800b8e6 <HAL_RCCEx_PeriphCLKConfig>
 8006e48:	4603      	mov	r3, r0
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d001      	beq.n	8006e52 <HAL_I2C_MspInit+0x4e>
			Error_Handler();
 8006e4e:	f7fe fe49 	bl	8005ae4 <Error_Handler>
		}

		__HAL_RCC_GPIOB_CLK_ENABLE();
 8006e52:	2002      	movs	r0, #2
 8006e54:	f7ff ff7b 	bl	8006d4e <LL_AHB2_GRP1_EnableClock>
		/**I2C1 GPIO Configuration
		 PB8     ------> I2C1_SCL
		 PB9     ------> I2C1_SDA
		 */
		GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9;
 8006e58:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8006e5c:	65fb      	str	r3, [r7, #92]	@ 0x5c
		GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006e5e:	2312      	movs	r3, #18
 8006e60:	663b      	str	r3, [r7, #96]	@ 0x60
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e62:	2300      	movs	r3, #0
 8006e64:	667b      	str	r3, [r7, #100]	@ 0x64
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006e66:	2300      	movs	r3, #0
 8006e68:	66bb      	str	r3, [r7, #104]	@ 0x68
		GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8006e6a:	2304      	movs	r3, #4
 8006e6c:	66fb      	str	r3, [r7, #108]	@ 0x6c
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006e6e:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8006e72:	4619      	mov	r1, r3
 8006e74:	4823      	ldr	r0, [pc, #140]	@ (8006f04 <HAL_I2C_MspInit+0x100>)
 8006e76:	f000 ff81 	bl	8007d7c <HAL_GPIO_Init>

		/* Peripheral clock enable */
		__HAL_RCC_I2C1_CLK_ENABLE();
 8006e7a:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8006e7e:	f7ff ff98 	bl	8006db2 <LL_APB1_GRP1_EnableClock>

		/* I2C1 DMA Init */
		/* I2C1_RX Init */
		hdma_i2c1_rx.Instance = DMA1_Channel7;
 8006e82:	4b21      	ldr	r3, [pc, #132]	@ (8006f08 <HAL_I2C_MspInit+0x104>)
 8006e84:	4a21      	ldr	r2, [pc, #132]	@ (8006f0c <HAL_I2C_MspInit+0x108>)
 8006e86:	601a      	str	r2, [r3, #0]
		hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
 8006e88:	4b1f      	ldr	r3, [pc, #124]	@ (8006f08 <HAL_I2C_MspInit+0x104>)
 8006e8a:	220a      	movs	r2, #10
 8006e8c:	605a      	str	r2, [r3, #4]
		hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006e8e:	4b1e      	ldr	r3, [pc, #120]	@ (8006f08 <HAL_I2C_MspInit+0x104>)
 8006e90:	2200      	movs	r2, #0
 8006e92:	609a      	str	r2, [r3, #8]
		hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006e94:	4b1c      	ldr	r3, [pc, #112]	@ (8006f08 <HAL_I2C_MspInit+0x104>)
 8006e96:	2200      	movs	r2, #0
 8006e98:	60da      	str	r2, [r3, #12]
		hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006e9a:	4b1b      	ldr	r3, [pc, #108]	@ (8006f08 <HAL_I2C_MspInit+0x104>)
 8006e9c:	2280      	movs	r2, #128	@ 0x80
 8006e9e:	611a      	str	r2, [r3, #16]
		hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006ea0:	4b19      	ldr	r3, [pc, #100]	@ (8006f08 <HAL_I2C_MspInit+0x104>)
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	615a      	str	r2, [r3, #20]
		hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006ea6:	4b18      	ldr	r3, [pc, #96]	@ (8006f08 <HAL_I2C_MspInit+0x104>)
 8006ea8:	2200      	movs	r2, #0
 8006eaa:	619a      	str	r2, [r3, #24]
		hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8006eac:	4b16      	ldr	r3, [pc, #88]	@ (8006f08 <HAL_I2C_MspInit+0x104>)
 8006eae:	2200      	movs	r2, #0
 8006eb0:	61da      	str	r2, [r3, #28]
		hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8006eb2:	4b15      	ldr	r3, [pc, #84]	@ (8006f08 <HAL_I2C_MspInit+0x104>)
 8006eb4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8006eb8:	621a      	str	r2, [r3, #32]
		if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK) {
 8006eba:	4813      	ldr	r0, [pc, #76]	@ (8006f08 <HAL_I2C_MspInit+0x104>)
 8006ebc:	f000 fc7c 	bl	80077b8 <HAL_DMA_Init>
 8006ec0:	4603      	mov	r3, r0
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d001      	beq.n	8006eca <HAL_I2C_MspInit+0xc6>
			Error_Handler();
 8006ec6:	f7fe fe0d 	bl	8005ae4 <Error_Handler>
		}

		__HAL_LINKDMA(hi2c, hdmarx, hdma_i2c1_rx);
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	4a0e      	ldr	r2, [pc, #56]	@ (8006f08 <HAL_I2C_MspInit+0x104>)
 8006ece:	63da      	str	r2, [r3, #60]	@ 0x3c
 8006ed0:	4a0d      	ldr	r2, [pc, #52]	@ (8006f08 <HAL_I2C_MspInit+0x104>)
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	6293      	str	r3, [r2, #40]	@ 0x28

		/* I2C1 interrupt Init */
		HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8006ed6:	2200      	movs	r2, #0
 8006ed8:	2100      	movs	r1, #0
 8006eda:	201e      	movs	r0, #30
 8006edc:	f000 fc0d 	bl	80076fa <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8006ee0:	201e      	movs	r0, #30
 8006ee2:	f000 fc24 	bl	800772e <HAL_NVIC_EnableIRQ>
		HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8006ee6:	2200      	movs	r2, #0
 8006ee8:	2100      	movs	r1, #0
 8006eea:	201f      	movs	r0, #31
 8006eec:	f000 fc05 	bl	80076fa <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8006ef0:	201f      	movs	r0, #31
 8006ef2:	f000 fc1c 	bl	800772e <HAL_NVIC_EnableIRQ>

		/* USER CODE END I2C1_MspInit 1 */

	}

}
 8006ef6:	bf00      	nop
 8006ef8:	3770      	adds	r7, #112	@ 0x70
 8006efa:	46bd      	mov	sp, r7
 8006efc:	bd80      	pop	{r7, pc}
 8006efe:	bf00      	nop
 8006f00:	40005400 	.word	0x40005400
 8006f04:	48000400 	.word	0x48000400
 8006f08:	20000244 	.word	0x20000244
 8006f0c:	40020080 	.word	0x40020080

08006f10 <HAL_IPCC_MspInit>:
 * @brief IPCC MSP Initialization
 * This function configures the hardware resources used in this example
 * @param hipcc: IPCC handle pointer
 * @retval None
 */
void HAL_IPCC_MspInit(IPCC_HandleTypeDef *hipcc) {
 8006f10:	b580      	push	{r7, lr}
 8006f12:	b082      	sub	sp, #8
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	6078      	str	r0, [r7, #4]
	if (hipcc->Instance == IPCC) {
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	4a0d      	ldr	r2, [pc, #52]	@ (8006f54 <HAL_IPCC_MspInit+0x44>)
 8006f1e:	4293      	cmp	r3, r2
 8006f20:	d113      	bne.n	8006f4a <HAL_IPCC_MspInit+0x3a>
		/* USER CODE BEGIN IPCC_MspInit 0 */

		/* USER CODE END IPCC_MspInit 0 */
		/* Peripheral clock enable */
		__HAL_RCC_IPCC_CLK_ENABLE();
 8006f22:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8006f26:	f7ff ff2b 	bl	8006d80 <LL_AHB3_GRP1_EnableClock>
		/* IPCC interrupt Init */
		HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 8006f2a:	2200      	movs	r2, #0
 8006f2c:	2100      	movs	r1, #0
 8006f2e:	202c      	movs	r0, #44	@ 0x2c
 8006f30:	f000 fbe3 	bl	80076fa <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8006f34:	202c      	movs	r0, #44	@ 0x2c
 8006f36:	f000 fbfa 	bl	800772e <HAL_NVIC_EnableIRQ>
		HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	2100      	movs	r1, #0
 8006f3e:	202d      	movs	r0, #45	@ 0x2d
 8006f40:	f000 fbdb 	bl	80076fa <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8006f44:	202d      	movs	r0, #45	@ 0x2d
 8006f46:	f000 fbf2 	bl	800772e <HAL_NVIC_EnableIRQ>

		/* USER CODE END IPCC_MspInit 1 */

	}

}
 8006f4a:	bf00      	nop
 8006f4c:	3708      	adds	r7, #8
 8006f4e:	46bd      	mov	sp, r7
 8006f50:	bd80      	pop	{r7, pc}
 8006f52:	bf00      	nop
 8006f54:	58000c00 	.word	0x58000c00

08006f58 <HAL_RTC_MspInit>:
 * @brief RTC MSP Initialization
 * This function configures the hardware resources used in this example
 * @param hrtc: RTC handle pointer
 * @retval None
 */
void HAL_RTC_MspInit(RTC_HandleTypeDef *hrtc) {
 8006f58:	b580      	push	{r7, lr}
 8006f5a:	b096      	sub	sp, #88	@ 0x58
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	6078      	str	r0, [r7, #4]
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 8006f60:	f107 0308 	add.w	r3, r7, #8
 8006f64:	2250      	movs	r2, #80	@ 0x50
 8006f66:	2100      	movs	r1, #0
 8006f68:	4618      	mov	r0, r3
 8006f6a:	f009 f946 	bl	80101fa <memset>
	if (hrtc->Instance == RTC) {
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	4a12      	ldr	r2, [pc, #72]	@ (8006fbc <HAL_RTC_MspInit+0x64>)
 8006f74:	4293      	cmp	r3, r2
 8006f76:	d11d      	bne.n	8006fb4 <HAL_RTC_MspInit+0x5c>

		/* USER CODE END RTC_MspInit 0 */

		/** Initializes the peripherals clock
		 */
		PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8006f78:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8006f7c:	60bb      	str	r3, [r7, #8]
		PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8006f7e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006f82:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 8006f84:	f107 0308 	add.w	r3, r7, #8
 8006f88:	4618      	mov	r0, r3
 8006f8a:	f004 fcac 	bl	800b8e6 <HAL_RCCEx_PeriphCLKConfig>
 8006f8e:	4603      	mov	r3, r0
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d001      	beq.n	8006f98 <HAL_RTC_MspInit+0x40>
			Error_Handler();
 8006f94:	f7fe fda6 	bl	8005ae4 <Error_Handler>
		}

		/* Peripheral clock enable */
		__HAL_RCC_RTC_ENABLE();
 8006f98:	f7ff fec8 	bl	8006d2c <LL_RCC_EnableRTC>
		__HAL_RCC_RTCAPB_CLK_ENABLE();
 8006f9c:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8006fa0:	f7ff ff07 	bl	8006db2 <LL_APB1_GRP1_EnableClock>
		/* RTC interrupt Init */
		HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	2100      	movs	r1, #0
 8006fa8:	2003      	movs	r0, #3
 8006faa:	f000 fba6 	bl	80076fa <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8006fae:	2003      	movs	r0, #3
 8006fb0:	f000 fbbd 	bl	800772e <HAL_NVIC_EnableIRQ>

		/* USER CODE END RTC_MspInit 1 */

	}

}
 8006fb4:	bf00      	nop
 8006fb6:	3758      	adds	r7, #88	@ 0x58
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	bd80      	pop	{r7, pc}
 8006fbc:	40002800 	.word	0x40002800

08006fc0 <HAL_TIM_Base_MspInit>:
 * @brief TIM_Base MSP Initialization
 * This function configures the hardware resources used in this example
 * @param htim_base: TIM_Base handle pointer
 * @retval None
 */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim_base) {
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	b082      	sub	sp, #8
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
	if (htim_base->Instance == TIM2) {
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006fd0:	d102      	bne.n	8006fd8 <HAL_TIM_Base_MspInit+0x18>
		/* USER CODE BEGIN TIM2_MspInit 0 */

		/* USER CODE END TIM2_MspInit 0 */
		/* Peripheral clock enable */
		__HAL_RCC_TIM2_CLK_ENABLE();
 8006fd2:	2001      	movs	r0, #1
 8006fd4:	f7ff feed 	bl	8006db2 <LL_APB1_GRP1_EnableClock>

		/* USER CODE END TIM2_MspInit 1 */

	}

}
 8006fd8:	bf00      	nop
 8006fda:	3708      	adds	r7, #8
 8006fdc:	46bd      	mov	sp, r7
 8006fde:	bd80      	pop	{r7, pc}

08006fe0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006fe0:	b480      	push	{r7}
 8006fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8006fe4:	bf00      	nop
 8006fe6:	e7fd      	b.n	8006fe4 <NMI_Handler+0x4>

08006fe8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006fe8:	b480      	push	{r7}
 8006fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006fec:	bf00      	nop
 8006fee:	e7fd      	b.n	8006fec <HardFault_Handler+0x4>

08006ff0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006ff0:	b480      	push	{r7}
 8006ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006ff4:	bf00      	nop
 8006ff6:	e7fd      	b.n	8006ff4 <MemManage_Handler+0x4>

08006ff8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006ff8:	b480      	push	{r7}
 8006ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006ffc:	bf00      	nop
 8006ffe:	e7fd      	b.n	8006ffc <BusFault_Handler+0x4>

08007000 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007000:	b480      	push	{r7}
 8007002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007004:	bf00      	nop
 8007006:	e7fd      	b.n	8007004 <UsageFault_Handler+0x4>

08007008 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8007008:	b480      	push	{r7}
 800700a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800700c:	bf00      	nop
 800700e:	46bd      	mov	sp, r7
 8007010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007014:	4770      	bx	lr

08007016 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8007016:	b480      	push	{r7}
 8007018:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800701a:	bf00      	nop
 800701c:	46bd      	mov	sp, r7
 800701e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007022:	4770      	bx	lr

08007024 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8007024:	b480      	push	{r7}
 8007026:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8007028:	bf00      	nop
 800702a:	46bd      	mov	sp, r7
 800702c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007030:	4770      	bx	lr

08007032 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007032:	b580      	push	{r7, lr}
 8007034:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8007036:	f000 f9ed 	bl	8007414 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800703a:	bf00      	nop
 800703c:	bd80      	pop	{r7, pc}

0800703e <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 800703e:	b580      	push	{r7, lr}
 8007040:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8007042:	f7fa fb6f 	bl	8001724 <HW_TS_RTC_Wakeup_Handler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8007046:	bf00      	nop
 8007048:	bd80      	pop	{r7, pc}
	...

0800704c <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 800704c:	b580      	push	{r7, lr}
 800704e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */
  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8007050:	4802      	ldr	r0, [pc, #8]	@ (800705c <DMA1_Channel7_IRQHandler+0x10>)
 8007052:	f000 fd33 	bl	8007abc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8007056:	bf00      	nop
 8007058:	bd80      	pop	{r7, pc}
 800705a:	bf00      	nop
 800705c:	20000244 	.word	0x20000244

08007060 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8007060:	b580      	push	{r7, lr}
 8007062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8007064:	4802      	ldr	r0, [pc, #8]	@ (8007070 <I2C1_EV_IRQHandler+0x10>)
 8007066:	f001 fae5 	bl	8008634 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800706a:	bf00      	nop
 800706c:	bd80      	pop	{r7, pc}
 800706e:	bf00      	nop
 8007070:	200001f0 	.word	0x200001f0

08007074 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8007074:	b580      	push	{r7, lr}
 8007076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8007078:	4802      	ldr	r0, [pc, #8]	@ (8007084 <I2C1_ER_IRQHandler+0x10>)
 800707a:	f001 faf5 	bl	8008668 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800707e:	bf00      	nop
 8007080:	bd80      	pop	{r7, pc}
 8007082:	bf00      	nop
 8007084:	200001f0 	.word	0x200001f0

08007088 <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 8007088:	b580      	push	{r7, lr}
 800708a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 800708c:	f008 fbb8 	bl	800f800 <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 8007090:	bf00      	nop
 8007092:	bd80      	pop	{r7, pc}

08007094 <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 8007094:	b580      	push	{r7, lr}
 8007096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 8007098:	f008 fbe8 	bl	800f86c <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 800709c:	bf00      	nop
 800709e:	bd80      	pop	{r7, pc}

080070a0 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 80070a0:	b580      	push	{r7, lr}
 80070a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 80070a4:	f001 f80c 	bl	80080c0 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 80070a8:	bf00      	nop
 80070aa:	bd80      	pop	{r7, pc}

080070ac <DMAMUX1_OVR_IRQHandler>:

/**
  * @brief This function handles DMAMUX1 overrun interrupt.
  */
void DMAMUX1_OVR_IRQHandler(void)
{
 80070ac:	b480      	push	{r7}
 80070ae:	af00      	add	r7, sp, #0
  /* USER CODE END DMAMUX1_OVR_IRQn 0 */

  /* USER CODE BEGIN DMAMUX1_OVR_IRQn 1 */

  /* USER CODE END DMAMUX1_OVR_IRQn 1 */
}
 80070b0:	bf00      	nop
 80070b2:	46bd      	mov	sp, r7
 80070b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b8:	4770      	bx	lr

080070ba <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80070ba:	b480      	push	{r7}
 80070bc:	af00      	add	r7, sp, #0
  return 1;
 80070be:	2301      	movs	r3, #1
}
 80070c0:	4618      	mov	r0, r3
 80070c2:	46bd      	mov	sp, r7
 80070c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c8:	4770      	bx	lr

080070ca <_kill>:

int _kill(int pid, int sig)
{
 80070ca:	b580      	push	{r7, lr}
 80070cc:	b082      	sub	sp, #8
 80070ce:	af00      	add	r7, sp, #0
 80070d0:	6078      	str	r0, [r7, #4]
 80070d2:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80070d4:	f009 f8e0 	bl	8010298 <__errno>
 80070d8:	4603      	mov	r3, r0
 80070da:	2216      	movs	r2, #22
 80070dc:	601a      	str	r2, [r3, #0]
  return -1;
 80070de:	f04f 33ff 	mov.w	r3, #4294967295
}
 80070e2:	4618      	mov	r0, r3
 80070e4:	3708      	adds	r7, #8
 80070e6:	46bd      	mov	sp, r7
 80070e8:	bd80      	pop	{r7, pc}

080070ea <_exit>:

void _exit (int status)
{
 80070ea:	b580      	push	{r7, lr}
 80070ec:	b082      	sub	sp, #8
 80070ee:	af00      	add	r7, sp, #0
 80070f0:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80070f2:	f04f 31ff 	mov.w	r1, #4294967295
 80070f6:	6878      	ldr	r0, [r7, #4]
 80070f8:	f7ff ffe7 	bl	80070ca <_kill>
  while (1) {}    /* Make sure we hang here */
 80070fc:	bf00      	nop
 80070fe:	e7fd      	b.n	80070fc <_exit+0x12>

08007100 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8007100:	b580      	push	{r7, lr}
 8007102:	b086      	sub	sp, #24
 8007104:	af00      	add	r7, sp, #0
 8007106:	60f8      	str	r0, [r7, #12]
 8007108:	60b9      	str	r1, [r7, #8]
 800710a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800710c:	2300      	movs	r3, #0
 800710e:	617b      	str	r3, [r7, #20]
 8007110:	e00a      	b.n	8007128 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8007112:	f3af 8000 	nop.w
 8007116:	4601      	mov	r1, r0
 8007118:	68bb      	ldr	r3, [r7, #8]
 800711a:	1c5a      	adds	r2, r3, #1
 800711c:	60ba      	str	r2, [r7, #8]
 800711e:	b2ca      	uxtb	r2, r1
 8007120:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007122:	697b      	ldr	r3, [r7, #20]
 8007124:	3301      	adds	r3, #1
 8007126:	617b      	str	r3, [r7, #20]
 8007128:	697a      	ldr	r2, [r7, #20]
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	429a      	cmp	r2, r3
 800712e:	dbf0      	blt.n	8007112 <_read+0x12>
  }

  return len;
 8007130:	687b      	ldr	r3, [r7, #4]
}
 8007132:	4618      	mov	r0, r3
 8007134:	3718      	adds	r7, #24
 8007136:	46bd      	mov	sp, r7
 8007138:	bd80      	pop	{r7, pc}

0800713a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800713a:	b580      	push	{r7, lr}
 800713c:	b086      	sub	sp, #24
 800713e:	af00      	add	r7, sp, #0
 8007140:	60f8      	str	r0, [r7, #12]
 8007142:	60b9      	str	r1, [r7, #8]
 8007144:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007146:	2300      	movs	r3, #0
 8007148:	617b      	str	r3, [r7, #20]
 800714a:	e009      	b.n	8007160 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800714c:	68bb      	ldr	r3, [r7, #8]
 800714e:	1c5a      	adds	r2, r3, #1
 8007150:	60ba      	str	r2, [r7, #8]
 8007152:	781b      	ldrb	r3, [r3, #0]
 8007154:	4618      	mov	r0, r3
 8007156:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800715a:	697b      	ldr	r3, [r7, #20]
 800715c:	3301      	adds	r3, #1
 800715e:	617b      	str	r3, [r7, #20]
 8007160:	697a      	ldr	r2, [r7, #20]
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	429a      	cmp	r2, r3
 8007166:	dbf1      	blt.n	800714c <_write+0x12>
  }
  return len;
 8007168:	687b      	ldr	r3, [r7, #4]
}
 800716a:	4618      	mov	r0, r3
 800716c:	3718      	adds	r7, #24
 800716e:	46bd      	mov	sp, r7
 8007170:	bd80      	pop	{r7, pc}

08007172 <_close>:

int _close(int file)
{
 8007172:	b480      	push	{r7}
 8007174:	b083      	sub	sp, #12
 8007176:	af00      	add	r7, sp, #0
 8007178:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800717a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800717e:	4618      	mov	r0, r3
 8007180:	370c      	adds	r7, #12
 8007182:	46bd      	mov	sp, r7
 8007184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007188:	4770      	bx	lr

0800718a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800718a:	b480      	push	{r7}
 800718c:	b083      	sub	sp, #12
 800718e:	af00      	add	r7, sp, #0
 8007190:	6078      	str	r0, [r7, #4]
 8007192:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8007194:	683b      	ldr	r3, [r7, #0]
 8007196:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800719a:	605a      	str	r2, [r3, #4]
  return 0;
 800719c:	2300      	movs	r3, #0
}
 800719e:	4618      	mov	r0, r3
 80071a0:	370c      	adds	r7, #12
 80071a2:	46bd      	mov	sp, r7
 80071a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a8:	4770      	bx	lr

080071aa <_isatty>:

int _isatty(int file)
{
 80071aa:	b480      	push	{r7}
 80071ac:	b083      	sub	sp, #12
 80071ae:	af00      	add	r7, sp, #0
 80071b0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80071b2:	2301      	movs	r3, #1
}
 80071b4:	4618      	mov	r0, r3
 80071b6:	370c      	adds	r7, #12
 80071b8:	46bd      	mov	sp, r7
 80071ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071be:	4770      	bx	lr

080071c0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80071c0:	b480      	push	{r7}
 80071c2:	b085      	sub	sp, #20
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	60f8      	str	r0, [r7, #12]
 80071c8:	60b9      	str	r1, [r7, #8]
 80071ca:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80071cc:	2300      	movs	r3, #0
}
 80071ce:	4618      	mov	r0, r3
 80071d0:	3714      	adds	r7, #20
 80071d2:	46bd      	mov	sp, r7
 80071d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d8:	4770      	bx	lr
	...

080071dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80071dc:	b580      	push	{r7, lr}
 80071de:	b086      	sub	sp, #24
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80071e4:	4a14      	ldr	r2, [pc, #80]	@ (8007238 <_sbrk+0x5c>)
 80071e6:	4b15      	ldr	r3, [pc, #84]	@ (800723c <_sbrk+0x60>)
 80071e8:	1ad3      	subs	r3, r2, r3
 80071ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80071ec:	697b      	ldr	r3, [r7, #20]
 80071ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80071f0:	4b13      	ldr	r3, [pc, #76]	@ (8007240 <_sbrk+0x64>)
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d102      	bne.n	80071fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80071f8:	4b11      	ldr	r3, [pc, #68]	@ (8007240 <_sbrk+0x64>)
 80071fa:	4a12      	ldr	r2, [pc, #72]	@ (8007244 <_sbrk+0x68>)
 80071fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80071fe:	4b10      	ldr	r3, [pc, #64]	@ (8007240 <_sbrk+0x64>)
 8007200:	681a      	ldr	r2, [r3, #0]
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	4413      	add	r3, r2
 8007206:	693a      	ldr	r2, [r7, #16]
 8007208:	429a      	cmp	r2, r3
 800720a:	d207      	bcs.n	800721c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800720c:	f009 f844 	bl	8010298 <__errno>
 8007210:	4603      	mov	r3, r0
 8007212:	220c      	movs	r2, #12
 8007214:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8007216:	f04f 33ff 	mov.w	r3, #4294967295
 800721a:	e009      	b.n	8007230 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800721c:	4b08      	ldr	r3, [pc, #32]	@ (8007240 <_sbrk+0x64>)
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8007222:	4b07      	ldr	r3, [pc, #28]	@ (8007240 <_sbrk+0x64>)
 8007224:	681a      	ldr	r2, [r3, #0]
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	4413      	add	r3, r2
 800722a:	4a05      	ldr	r2, [pc, #20]	@ (8007240 <_sbrk+0x64>)
 800722c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800722e:	68fb      	ldr	r3, [r7, #12]
}
 8007230:	4618      	mov	r0, r3
 8007232:	3718      	adds	r7, #24
 8007234:	46bd      	mov	sp, r7
 8007236:	bd80      	pop	{r7, pc}
 8007238:	20030000 	.word	0x20030000
 800723c:	00000400 	.word	0x00000400
 8007240:	20001cc4 	.word	0x20001cc4
 8007244:	200021d8 	.word	0x200021d8

08007248 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8007248:	b480      	push	{r7}
 800724a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 800724c:	4b24      	ldr	r3, [pc, #144]	@ (80072e0 <SystemInit+0x98>)
 800724e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007252:	4a23      	ldr	r2, [pc, #140]	@ (80072e0 <SystemInit+0x98>)
 8007254:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007258:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800725c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007266:	f043 0301 	orr.w	r3, r3, #1
 800726a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 800726c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007270:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 8007274:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8007276:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800727a:	681a      	ldr	r2, [r3, #0]
 800727c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007280:	4b18      	ldr	r3, [pc, #96]	@ (80072e4 <SystemInit+0x9c>)
 8007282:	4013      	ands	r3, r2
 8007284:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8007286:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800728a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800728e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007292:	f023 0305 	bic.w	r3, r3, #5
 8007296:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 800729a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800729e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80072a2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80072a6:	f023 0301 	bic.w	r3, r3, #1
 80072aa:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 80072ae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80072b2:	4a0d      	ldr	r2, [pc, #52]	@ (80072e8 <SystemInit+0xa0>)
 80072b4:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 80072b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80072ba:	4a0b      	ldr	r2, [pc, #44]	@ (80072e8 <SystemInit+0xa0>)
 80072bc:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80072be:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80072c8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80072cc:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80072ce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80072d2:	2200      	movs	r2, #0
 80072d4:	619a      	str	r2, [r3, #24]
}
 80072d6:	bf00      	nop
 80072d8:	46bd      	mov	sp, r7
 80072da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072de:	4770      	bx	lr
 80072e0:	e000ed00 	.word	0xe000ed00
 80072e4:	faf6fefb 	.word	0xfaf6fefb
 80072e8:	22041000 	.word	0x22041000

080072ec <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 80072ec:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80072ee:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80072f0:	3304      	adds	r3, #4

080072f2 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80072f2:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80072f4:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 80072f6:	d3f9      	bcc.n	80072ec <CopyDataInit>
  bx lr
 80072f8:	4770      	bx	lr

080072fa <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 80072fa:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 80072fc:	3004      	adds	r0, #4

080072fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 80072fe:	4288      	cmp	r0, r1
  bcc FillZerobss
 8007300:	d3fb      	bcc.n	80072fa <FillZerobss>
  bx lr
 8007302:	4770      	bx	lr

08007304 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8007304:	480c      	ldr	r0, [pc, #48]	@ (8007338 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8007306:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8007308:	f7ff ff9e 	bl	8007248 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 800730c:	480b      	ldr	r0, [pc, #44]	@ (800733c <LoopForever+0x6>)
 800730e:	490c      	ldr	r1, [pc, #48]	@ (8007340 <LoopForever+0xa>)
 8007310:	4a0c      	ldr	r2, [pc, #48]	@ (8007344 <LoopForever+0xe>)
 8007312:	2300      	movs	r3, #0
 8007314:	f7ff ffed 	bl	80072f2 <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8007318:	480b      	ldr	r0, [pc, #44]	@ (8007348 <LoopForever+0x12>)
 800731a:	490c      	ldr	r1, [pc, #48]	@ (800734c <LoopForever+0x16>)
 800731c:	4a0c      	ldr	r2, [pc, #48]	@ (8007350 <LoopForever+0x1a>)
 800731e:	2300      	movs	r3, #0
 8007320:	f7ff ffe7 	bl	80072f2 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8007324:	480b      	ldr	r0, [pc, #44]	@ (8007354 <LoopForever+0x1e>)
 8007326:	490c      	ldr	r1, [pc, #48]	@ (8007358 <LoopForever+0x22>)
 8007328:	2300      	movs	r3, #0
 800732a:	f7ff ffe8 	bl	80072fe <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800732e:	f008 ffb9 	bl	80102a4 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8007332:	f7fe f9b5 	bl	80056a0 <main>

08007336 <LoopForever>:

LoopForever:
  b LoopForever
 8007336:	e7fe      	b.n	8007336 <LoopForever>
  ldr   r0, =_estack
 8007338:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 800733c:	20000008 	.word	0x20000008
 8007340:	200000e0 	.word	0x200000e0
 8007344:	08011cc4 	.word	0x08011cc4
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8007348:	200301e4 	.word	0x200301e4
 800734c:	20030a67 	.word	0x20030a67
 8007350:	08011de2 	.word	0x08011de2
  INIT_BSS _sbss, _ebss
 8007354:	20000130 	.word	0x20000130
 8007358:	200021d4 	.word	0x200021d4

0800735c <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800735c:	e7fe      	b.n	800735c <ADC1_IRQHandler>
	...

08007360 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007360:	b580      	push	{r7, lr}
 8007362:	b082      	sub	sp, #8
 8007364:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8007366:	2300      	movs	r3, #0
 8007368:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800736a:	4b0c      	ldr	r3, [pc, #48]	@ (800739c <HAL_Init+0x3c>)
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	4a0b      	ldr	r2, [pc, #44]	@ (800739c <HAL_Init+0x3c>)
 8007370:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007374:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007376:	2003      	movs	r0, #3
 8007378:	f000 f9b4 	bl	80076e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800737c:	2000      	movs	r0, #0
 800737e:	f000 f80f 	bl	80073a0 <HAL_InitTick>
 8007382:	4603      	mov	r3, r0
 8007384:	2b00      	cmp	r3, #0
 8007386:	d002      	beq.n	800738e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8007388:	2301      	movs	r3, #1
 800738a:	71fb      	strb	r3, [r7, #7]
 800738c:	e001      	b.n	8007392 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800738e:	f7ff fd29 	bl	8006de4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8007392:	79fb      	ldrb	r3, [r7, #7]
}
 8007394:	4618      	mov	r0, r3
 8007396:	3708      	adds	r7, #8
 8007398:	46bd      	mov	sp, r7
 800739a:	bd80      	pop	{r7, pc}
 800739c:	58004000 	.word	0x58004000

080073a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80073a0:	b580      	push	{r7, lr}
 80073a2:	b084      	sub	sp, #16
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80073a8:	2300      	movs	r3, #0
 80073aa:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 80073ac:	4b17      	ldr	r3, [pc, #92]	@ (800740c <HAL_InitTick+0x6c>)
 80073ae:	781b      	ldrb	r3, [r3, #0]
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d024      	beq.n	80073fe <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80073b4:	f004 f832 	bl	800b41c <HAL_RCC_GetHCLKFreq>
 80073b8:	4602      	mov	r2, r0
 80073ba:	4b14      	ldr	r3, [pc, #80]	@ (800740c <HAL_InitTick+0x6c>)
 80073bc:	781b      	ldrb	r3, [r3, #0]
 80073be:	4619      	mov	r1, r3
 80073c0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80073c4:	fbb3 f3f1 	udiv	r3, r3, r1
 80073c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80073cc:	4618      	mov	r0, r3
 80073ce:	f000 f9ca 	bl	8007766 <HAL_SYSTICK_Config>
 80073d2:	4603      	mov	r3, r0
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d10f      	bne.n	80073f8 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	2b0f      	cmp	r3, #15
 80073dc:	d809      	bhi.n	80073f2 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80073de:	2200      	movs	r2, #0
 80073e0:	6879      	ldr	r1, [r7, #4]
 80073e2:	f04f 30ff 	mov.w	r0, #4294967295
 80073e6:	f000 f988 	bl	80076fa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80073ea:	4a09      	ldr	r2, [pc, #36]	@ (8007410 <HAL_InitTick+0x70>)
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	6013      	str	r3, [r2, #0]
 80073f0:	e007      	b.n	8007402 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 80073f2:	2301      	movs	r3, #1
 80073f4:	73fb      	strb	r3, [r7, #15]
 80073f6:	e004      	b.n	8007402 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 80073f8:	2301      	movs	r3, #1
 80073fa:	73fb      	strb	r3, [r7, #15]
 80073fc:	e001      	b.n	8007402 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 80073fe:	2301      	movs	r3, #1
 8007400:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8007402:	7bfb      	ldrb	r3, [r7, #15]
}
 8007404:	4618      	mov	r0, r3
 8007406:	3710      	adds	r7, #16
 8007408:	46bd      	mov	sp, r7
 800740a:	bd80      	pop	{r7, pc}
 800740c:	20000058 	.word	0x20000058
 8007410:	20000054 	.word	0x20000054

08007414 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007414:	b480      	push	{r7}
 8007416:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8007418:	4b06      	ldr	r3, [pc, #24]	@ (8007434 <HAL_IncTick+0x20>)
 800741a:	781b      	ldrb	r3, [r3, #0]
 800741c:	461a      	mov	r2, r3
 800741e:	4b06      	ldr	r3, [pc, #24]	@ (8007438 <HAL_IncTick+0x24>)
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	4413      	add	r3, r2
 8007424:	4a04      	ldr	r2, [pc, #16]	@ (8007438 <HAL_IncTick+0x24>)
 8007426:	6013      	str	r3, [r2, #0]
}
 8007428:	bf00      	nop
 800742a:	46bd      	mov	sp, r7
 800742c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007430:	4770      	bx	lr
 8007432:	bf00      	nop
 8007434:	20000058 	.word	0x20000058
 8007438:	20001cc8 	.word	0x20001cc8

0800743c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800743c:	b480      	push	{r7}
 800743e:	af00      	add	r7, sp, #0
  return uwTick;
 8007440:	4b03      	ldr	r3, [pc, #12]	@ (8007450 <HAL_GetTick+0x14>)
 8007442:	681b      	ldr	r3, [r3, #0]
}
 8007444:	4618      	mov	r0, r3
 8007446:	46bd      	mov	sp, r7
 8007448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744c:	4770      	bx	lr
 800744e:	bf00      	nop
 8007450:	20001cc8 	.word	0x20001cc8

08007454 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8007454:	b480      	push	{r7}
 8007456:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8007458:	4b03      	ldr	r3, [pc, #12]	@ (8007468 <HAL_GetTickPrio+0x14>)
 800745a:	681b      	ldr	r3, [r3, #0]
}
 800745c:	4618      	mov	r0, r3
 800745e:	46bd      	mov	sp, r7
 8007460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007464:	4770      	bx	lr
 8007466:	bf00      	nop
 8007468:	20000054 	.word	0x20000054

0800746c <HAL_GetTickFreq>:
  * @brief Return tick frequency.
  * @retval Tick frequency.
  *         Value of @ref HAL_TickFreqTypeDef.
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
 800746c:	b480      	push	{r7}
 800746e:	af00      	add	r7, sp, #0
  return uwTickFreq;
 8007470:	4b03      	ldr	r3, [pc, #12]	@ (8007480 <HAL_GetTickFreq+0x14>)
 8007472:	781b      	ldrb	r3, [r3, #0]
}
 8007474:	4618      	mov	r0, r3
 8007476:	46bd      	mov	sp, r7
 8007478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747c:	4770      	bx	lr
 800747e:	bf00      	nop
 8007480:	20000058 	.word	0x20000058

08007484 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007484:	b480      	push	{r7}
 8007486:	b085      	sub	sp, #20
 8007488:	af00      	add	r7, sp, #0
 800748a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	f003 0307 	and.w	r3, r3, #7
 8007492:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007494:	4b0c      	ldr	r3, [pc, #48]	@ (80074c8 <__NVIC_SetPriorityGrouping+0x44>)
 8007496:	68db      	ldr	r3, [r3, #12]
 8007498:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800749a:	68ba      	ldr	r2, [r7, #8]
 800749c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80074a0:	4013      	ands	r3, r2
 80074a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80074a8:	68bb      	ldr	r3, [r7, #8]
 80074aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80074ac:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80074b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80074b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80074b6:	4a04      	ldr	r2, [pc, #16]	@ (80074c8 <__NVIC_SetPriorityGrouping+0x44>)
 80074b8:	68bb      	ldr	r3, [r7, #8]
 80074ba:	60d3      	str	r3, [r2, #12]
}
 80074bc:	bf00      	nop
 80074be:	3714      	adds	r7, #20
 80074c0:	46bd      	mov	sp, r7
 80074c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c6:	4770      	bx	lr
 80074c8:	e000ed00 	.word	0xe000ed00

080074cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80074cc:	b480      	push	{r7}
 80074ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80074d0:	4b04      	ldr	r3, [pc, #16]	@ (80074e4 <__NVIC_GetPriorityGrouping+0x18>)
 80074d2:	68db      	ldr	r3, [r3, #12]
 80074d4:	0a1b      	lsrs	r3, r3, #8
 80074d6:	f003 0307 	and.w	r3, r3, #7
}
 80074da:	4618      	mov	r0, r3
 80074dc:	46bd      	mov	sp, r7
 80074de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e2:	4770      	bx	lr
 80074e4:	e000ed00 	.word	0xe000ed00

080074e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80074e8:	b480      	push	{r7}
 80074ea:	b083      	sub	sp, #12
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	4603      	mov	r3, r0
 80074f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80074f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	db0b      	blt.n	8007512 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80074fa:	79fb      	ldrb	r3, [r7, #7]
 80074fc:	f003 021f 	and.w	r2, r3, #31
 8007500:	4907      	ldr	r1, [pc, #28]	@ (8007520 <__NVIC_EnableIRQ+0x38>)
 8007502:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007506:	095b      	lsrs	r3, r3, #5
 8007508:	2001      	movs	r0, #1
 800750a:	fa00 f202 	lsl.w	r2, r0, r2
 800750e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8007512:	bf00      	nop
 8007514:	370c      	adds	r7, #12
 8007516:	46bd      	mov	sp, r7
 8007518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751c:	4770      	bx	lr
 800751e:	bf00      	nop
 8007520:	e000e100 	.word	0xe000e100

08007524 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8007524:	b480      	push	{r7}
 8007526:	b083      	sub	sp, #12
 8007528:	af00      	add	r7, sp, #0
 800752a:	4603      	mov	r3, r0
 800752c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800752e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007532:	2b00      	cmp	r3, #0
 8007534:	db12      	blt.n	800755c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007536:	79fb      	ldrb	r3, [r7, #7]
 8007538:	f003 021f 	and.w	r2, r3, #31
 800753c:	490a      	ldr	r1, [pc, #40]	@ (8007568 <__NVIC_DisableIRQ+0x44>)
 800753e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007542:	095b      	lsrs	r3, r3, #5
 8007544:	2001      	movs	r0, #1
 8007546:	fa00 f202 	lsl.w	r2, r0, r2
 800754a:	3320      	adds	r3, #32
 800754c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8007550:	f3bf 8f4f 	dsb	sy
}
 8007554:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8007556:	f3bf 8f6f 	isb	sy
}
 800755a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800755c:	bf00      	nop
 800755e:	370c      	adds	r7, #12
 8007560:	46bd      	mov	sp, r7
 8007562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007566:	4770      	bx	lr
 8007568:	e000e100 	.word	0xe000e100

0800756c <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 800756c:	b480      	push	{r7}
 800756e:	b083      	sub	sp, #12
 8007570:	af00      	add	r7, sp, #0
 8007572:	4603      	mov	r3, r0
 8007574:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007576:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800757a:	2b00      	cmp	r3, #0
 800757c:	db0c      	blt.n	8007598 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800757e:	79fb      	ldrb	r3, [r7, #7]
 8007580:	f003 021f 	and.w	r2, r3, #31
 8007584:	4907      	ldr	r1, [pc, #28]	@ (80075a4 <__NVIC_SetPendingIRQ+0x38>)
 8007586:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800758a:	095b      	lsrs	r3, r3, #5
 800758c:	2001      	movs	r0, #1
 800758e:	fa00 f202 	lsl.w	r2, r0, r2
 8007592:	3340      	adds	r3, #64	@ 0x40
 8007594:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8007598:	bf00      	nop
 800759a:	370c      	adds	r7, #12
 800759c:	46bd      	mov	sp, r7
 800759e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a2:	4770      	bx	lr
 80075a4:	e000e100 	.word	0xe000e100

080075a8 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80075a8:	b480      	push	{r7}
 80075aa:	b083      	sub	sp, #12
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	4603      	mov	r3, r0
 80075b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80075b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	db0c      	blt.n	80075d4 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80075ba:	79fb      	ldrb	r3, [r7, #7]
 80075bc:	f003 021f 	and.w	r2, r3, #31
 80075c0:	4907      	ldr	r1, [pc, #28]	@ (80075e0 <__NVIC_ClearPendingIRQ+0x38>)
 80075c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80075c6:	095b      	lsrs	r3, r3, #5
 80075c8:	2001      	movs	r0, #1
 80075ca:	fa00 f202 	lsl.w	r2, r0, r2
 80075ce:	3360      	adds	r3, #96	@ 0x60
 80075d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80075d4:	bf00      	nop
 80075d6:	370c      	adds	r7, #12
 80075d8:	46bd      	mov	sp, r7
 80075da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075de:	4770      	bx	lr
 80075e0:	e000e100 	.word	0xe000e100

080075e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80075e4:	b480      	push	{r7}
 80075e6:	b083      	sub	sp, #12
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	4603      	mov	r3, r0
 80075ec:	6039      	str	r1, [r7, #0]
 80075ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80075f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	db0a      	blt.n	800760e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80075f8:	683b      	ldr	r3, [r7, #0]
 80075fa:	b2da      	uxtb	r2, r3
 80075fc:	490c      	ldr	r1, [pc, #48]	@ (8007630 <__NVIC_SetPriority+0x4c>)
 80075fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007602:	0112      	lsls	r2, r2, #4
 8007604:	b2d2      	uxtb	r2, r2
 8007606:	440b      	add	r3, r1
 8007608:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800760c:	e00a      	b.n	8007624 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800760e:	683b      	ldr	r3, [r7, #0]
 8007610:	b2da      	uxtb	r2, r3
 8007612:	4908      	ldr	r1, [pc, #32]	@ (8007634 <__NVIC_SetPriority+0x50>)
 8007614:	79fb      	ldrb	r3, [r7, #7]
 8007616:	f003 030f 	and.w	r3, r3, #15
 800761a:	3b04      	subs	r3, #4
 800761c:	0112      	lsls	r2, r2, #4
 800761e:	b2d2      	uxtb	r2, r2
 8007620:	440b      	add	r3, r1
 8007622:	761a      	strb	r2, [r3, #24]
}
 8007624:	bf00      	nop
 8007626:	370c      	adds	r7, #12
 8007628:	46bd      	mov	sp, r7
 800762a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762e:	4770      	bx	lr
 8007630:	e000e100 	.word	0xe000e100
 8007634:	e000ed00 	.word	0xe000ed00

08007638 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007638:	b480      	push	{r7}
 800763a:	b089      	sub	sp, #36	@ 0x24
 800763c:	af00      	add	r7, sp, #0
 800763e:	60f8      	str	r0, [r7, #12]
 8007640:	60b9      	str	r1, [r7, #8]
 8007642:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	f003 0307 	and.w	r3, r3, #7
 800764a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800764c:	69fb      	ldr	r3, [r7, #28]
 800764e:	f1c3 0307 	rsb	r3, r3, #7
 8007652:	2b04      	cmp	r3, #4
 8007654:	bf28      	it	cs
 8007656:	2304      	movcs	r3, #4
 8007658:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800765a:	69fb      	ldr	r3, [r7, #28]
 800765c:	3304      	adds	r3, #4
 800765e:	2b06      	cmp	r3, #6
 8007660:	d902      	bls.n	8007668 <NVIC_EncodePriority+0x30>
 8007662:	69fb      	ldr	r3, [r7, #28]
 8007664:	3b03      	subs	r3, #3
 8007666:	e000      	b.n	800766a <NVIC_EncodePriority+0x32>
 8007668:	2300      	movs	r3, #0
 800766a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800766c:	f04f 32ff 	mov.w	r2, #4294967295
 8007670:	69bb      	ldr	r3, [r7, #24]
 8007672:	fa02 f303 	lsl.w	r3, r2, r3
 8007676:	43da      	mvns	r2, r3
 8007678:	68bb      	ldr	r3, [r7, #8]
 800767a:	401a      	ands	r2, r3
 800767c:	697b      	ldr	r3, [r7, #20]
 800767e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007680:	f04f 31ff 	mov.w	r1, #4294967295
 8007684:	697b      	ldr	r3, [r7, #20]
 8007686:	fa01 f303 	lsl.w	r3, r1, r3
 800768a:	43d9      	mvns	r1, r3
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007690:	4313      	orrs	r3, r2
         );
}
 8007692:	4618      	mov	r0, r3
 8007694:	3724      	adds	r7, #36	@ 0x24
 8007696:	46bd      	mov	sp, r7
 8007698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769c:	4770      	bx	lr
	...

080076a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80076a0:	b580      	push	{r7, lr}
 80076a2:	b082      	sub	sp, #8
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	3b01      	subs	r3, #1
 80076ac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80076b0:	d301      	bcc.n	80076b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80076b2:	2301      	movs	r3, #1
 80076b4:	e00f      	b.n	80076d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80076b6:	4a0a      	ldr	r2, [pc, #40]	@ (80076e0 <SysTick_Config+0x40>)
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	3b01      	subs	r3, #1
 80076bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80076be:	210f      	movs	r1, #15
 80076c0:	f04f 30ff 	mov.w	r0, #4294967295
 80076c4:	f7ff ff8e 	bl	80075e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80076c8:	4b05      	ldr	r3, [pc, #20]	@ (80076e0 <SysTick_Config+0x40>)
 80076ca:	2200      	movs	r2, #0
 80076cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80076ce:	4b04      	ldr	r3, [pc, #16]	@ (80076e0 <SysTick_Config+0x40>)
 80076d0:	2207      	movs	r2, #7
 80076d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80076d4:	2300      	movs	r3, #0
}
 80076d6:	4618      	mov	r0, r3
 80076d8:	3708      	adds	r7, #8
 80076da:	46bd      	mov	sp, r7
 80076dc:	bd80      	pop	{r7, pc}
 80076de:	bf00      	nop
 80076e0:	e000e010 	.word	0xe000e010

080076e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80076e4:	b580      	push	{r7, lr}
 80076e6:	b082      	sub	sp, #8
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80076ec:	6878      	ldr	r0, [r7, #4]
 80076ee:	f7ff fec9 	bl	8007484 <__NVIC_SetPriorityGrouping>
}
 80076f2:	bf00      	nop
 80076f4:	3708      	adds	r7, #8
 80076f6:	46bd      	mov	sp, r7
 80076f8:	bd80      	pop	{r7, pc}

080076fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80076fa:	b580      	push	{r7, lr}
 80076fc:	b086      	sub	sp, #24
 80076fe:	af00      	add	r7, sp, #0
 8007700:	4603      	mov	r3, r0
 8007702:	60b9      	str	r1, [r7, #8]
 8007704:	607a      	str	r2, [r7, #4]
 8007706:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8007708:	f7ff fee0 	bl	80074cc <__NVIC_GetPriorityGrouping>
 800770c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800770e:	687a      	ldr	r2, [r7, #4]
 8007710:	68b9      	ldr	r1, [r7, #8]
 8007712:	6978      	ldr	r0, [r7, #20]
 8007714:	f7ff ff90 	bl	8007638 <NVIC_EncodePriority>
 8007718:	4602      	mov	r2, r0
 800771a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800771e:	4611      	mov	r1, r2
 8007720:	4618      	mov	r0, r3
 8007722:	f7ff ff5f 	bl	80075e4 <__NVIC_SetPriority>
}
 8007726:	bf00      	nop
 8007728:	3718      	adds	r7, #24
 800772a:	46bd      	mov	sp, r7
 800772c:	bd80      	pop	{r7, pc}

0800772e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800772e:	b580      	push	{r7, lr}
 8007730:	b082      	sub	sp, #8
 8007732:	af00      	add	r7, sp, #0
 8007734:	4603      	mov	r3, r0
 8007736:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007738:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800773c:	4618      	mov	r0, r3
 800773e:	f7ff fed3 	bl	80074e8 <__NVIC_EnableIRQ>
}
 8007742:	bf00      	nop
 8007744:	3708      	adds	r7, #8
 8007746:	46bd      	mov	sp, r7
 8007748:	bd80      	pop	{r7, pc}

0800774a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800774a:	b580      	push	{r7, lr}
 800774c:	b082      	sub	sp, #8
 800774e:	af00      	add	r7, sp, #0
 8007750:	4603      	mov	r3, r0
 8007752:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8007754:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007758:	4618      	mov	r0, r3
 800775a:	f7ff fee3 	bl	8007524 <__NVIC_DisableIRQ>
}
 800775e:	bf00      	nop
 8007760:	3708      	adds	r7, #8
 8007762:	46bd      	mov	sp, r7
 8007764:	bd80      	pop	{r7, pc}

08007766 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007766:	b580      	push	{r7, lr}
 8007768:	b082      	sub	sp, #8
 800776a:	af00      	add	r7, sp, #0
 800776c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800776e:	6878      	ldr	r0, [r7, #4]
 8007770:	f7ff ff96 	bl	80076a0 <SysTick_Config>
 8007774:	4603      	mov	r3, r0
}
 8007776:	4618      	mov	r0, r3
 8007778:	3708      	adds	r7, #8
 800777a:	46bd      	mov	sp, r7
 800777c:	bd80      	pop	{r7, pc}

0800777e <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 800777e:	b580      	push	{r7, lr}
 8007780:	b082      	sub	sp, #8
 8007782:	af00      	add	r7, sp, #0
 8007784:	4603      	mov	r3, r0
 8007786:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8007788:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800778c:	4618      	mov	r0, r3
 800778e:	f7ff feed 	bl	800756c <__NVIC_SetPendingIRQ>
}
 8007792:	bf00      	nop
 8007794:	3708      	adds	r7, #8
 8007796:	46bd      	mov	sp, r7
 8007798:	bd80      	pop	{r7, pc}

0800779a <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 800779a:	b580      	push	{r7, lr}
 800779c:	b082      	sub	sp, #8
 800779e:	af00      	add	r7, sp, #0
 80077a0:	4603      	mov	r3, r0
 80077a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 80077a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80077a8:	4618      	mov	r0, r3
 80077aa:	f7ff fefd 	bl	80075a8 <__NVIC_ClearPendingIRQ>
}
 80077ae:	bf00      	nop
 80077b0:	3708      	adds	r7, #8
 80077b2:	46bd      	mov	sp, r7
 80077b4:	bd80      	pop	{r7, pc}
	...

080077b8 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80077b8:	b580      	push	{r7, lr}
 80077ba:	b084      	sub	sp, #16
 80077bc:	af00      	add	r7, sp, #0
 80077be:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d101      	bne.n	80077ca <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80077c6:	2301      	movs	r3, #1
 80077c8:	e08e      	b.n	80078e8 <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	461a      	mov	r2, r3
 80077d0:	4b47      	ldr	r3, [pc, #284]	@ (80078f0 <HAL_DMA_Init+0x138>)
 80077d2:	429a      	cmp	r2, r3
 80077d4:	d80f      	bhi.n	80077f6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	461a      	mov	r2, r3
 80077dc:	4b45      	ldr	r3, [pc, #276]	@ (80078f4 <HAL_DMA_Init+0x13c>)
 80077de:	4413      	add	r3, r2
 80077e0:	4a45      	ldr	r2, [pc, #276]	@ (80078f8 <HAL_DMA_Init+0x140>)
 80077e2:	fba2 2303 	umull	r2, r3, r2, r3
 80077e6:	091b      	lsrs	r3, r3, #4
 80077e8:	009a      	lsls	r2, r3, #2
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	4a42      	ldr	r2, [pc, #264]	@ (80078fc <HAL_DMA_Init+0x144>)
 80077f2:	641a      	str	r2, [r3, #64]	@ 0x40
 80077f4:	e00e      	b.n	8007814 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	461a      	mov	r2, r3
 80077fc:	4b40      	ldr	r3, [pc, #256]	@ (8007900 <HAL_DMA_Init+0x148>)
 80077fe:	4413      	add	r3, r2
 8007800:	4a3d      	ldr	r2, [pc, #244]	@ (80078f8 <HAL_DMA_Init+0x140>)
 8007802:	fba2 2303 	umull	r2, r3, r2, r3
 8007806:	091b      	lsrs	r3, r3, #4
 8007808:	009a      	lsls	r2, r3, #2
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	4a3c      	ldr	r2, [pc, #240]	@ (8007904 <HAL_DMA_Init+0x14c>)
 8007812:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	2202      	movs	r2, #2
 8007818:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800782a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800782e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8007838:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	691b      	ldr	r3, [r3, #16]
 800783e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007844:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	699b      	ldr	r3, [r3, #24]
 800784a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007850:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	6a1b      	ldr	r3, [r3, #32]
 8007856:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8007858:	68fa      	ldr	r2, [r7, #12]
 800785a:	4313      	orrs	r3, r2
 800785c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	68fa      	ldr	r2, [r7, #12]
 8007864:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8007866:	6878      	ldr	r0, [r7, #4]
 8007868:	f000 fa24 	bl	8007cb4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	689b      	ldr	r3, [r3, #8]
 8007870:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007874:	d102      	bne.n	800787c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	2200      	movs	r2, #0
 800787a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	685a      	ldr	r2, [r3, #4]
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007884:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8007888:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800788e:	687a      	ldr	r2, [r7, #4]
 8007890:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8007892:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	685b      	ldr	r3, [r3, #4]
 8007898:	2b00      	cmp	r3, #0
 800789a:	d010      	beq.n	80078be <HAL_DMA_Init+0x106>
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	685b      	ldr	r3, [r3, #4]
 80078a0:	2b04      	cmp	r3, #4
 80078a2:	d80c      	bhi.n	80078be <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80078a4:	6878      	ldr	r0, [r7, #4]
 80078a6:	f000 fa43 	bl	8007d30 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80078ae:	2200      	movs	r2, #0
 80078b0:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80078b6:	687a      	ldr	r2, [r7, #4]
 80078b8:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80078ba:	605a      	str	r2, [r3, #4]
 80078bc:	e008      	b.n	80078d0 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	2200      	movs	r2, #0
 80078c2:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	2200      	movs	r2, #0
 80078c8:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	2200      	movs	r2, #0
 80078ce:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	2200      	movs	r2, #0
 80078d4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	2201      	movs	r2, #1
 80078da:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	2200      	movs	r2, #0
 80078e2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80078e6:	2300      	movs	r3, #0
}
 80078e8:	4618      	mov	r0, r3
 80078ea:	3710      	adds	r7, #16
 80078ec:	46bd      	mov	sp, r7
 80078ee:	bd80      	pop	{r7, pc}
 80078f0:	40020407 	.word	0x40020407
 80078f4:	bffdfff8 	.word	0xbffdfff8
 80078f8:	cccccccd 	.word	0xcccccccd
 80078fc:	40020000 	.word	0x40020000
 8007900:	bffdfbf8 	.word	0xbffdfbf8
 8007904:	40020400 	.word	0x40020400

08007908 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8007908:	b580      	push	{r7, lr}
 800790a:	b086      	sub	sp, #24
 800790c:	af00      	add	r7, sp, #0
 800790e:	60f8      	str	r0, [r7, #12]
 8007910:	60b9      	str	r1, [r7, #8]
 8007912:	607a      	str	r2, [r7, #4]
 8007914:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007916:	2300      	movs	r3, #0
 8007918:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8007920:	2b01      	cmp	r3, #1
 8007922:	d101      	bne.n	8007928 <HAL_DMA_Start_IT+0x20>
 8007924:	2302      	movs	r3, #2
 8007926:	e066      	b.n	80079f6 <HAL_DMA_Start_IT+0xee>
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	2201      	movs	r2, #1
 800792c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8007936:	b2db      	uxtb	r3, r3
 8007938:	2b01      	cmp	r3, #1
 800793a:	d155      	bne.n	80079e8 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	2202      	movs	r2, #2
 8007940:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	2200      	movs	r2, #0
 8007948:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	681a      	ldr	r2, [r3, #0]
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	f022 0201 	bic.w	r2, r2, #1
 8007958:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800795a:	683b      	ldr	r3, [r7, #0]
 800795c:	687a      	ldr	r2, [r7, #4]
 800795e:	68b9      	ldr	r1, [r7, #8]
 8007960:	68f8      	ldr	r0, [r7, #12]
 8007962:	f000 f968 	bl	8007c36 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800796a:	2b00      	cmp	r3, #0
 800796c:	d008      	beq.n	8007980 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	681a      	ldr	r2, [r3, #0]
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	f042 020e 	orr.w	r2, r2, #14
 800797c:	601a      	str	r2, [r3, #0]
 800797e:	e00f      	b.n	80079a0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	681a      	ldr	r2, [r3, #0]
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	f022 0204 	bic.w	r2, r2, #4
 800798e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	681a      	ldr	r2, [r3, #0]
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	f042 020a 	orr.w	r2, r2, #10
 800799e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d007      	beq.n	80079be <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80079b2:	681a      	ldr	r2, [r3, #0]
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80079b8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80079bc:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d007      	beq.n	80079d6 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80079ca:	681a      	ldr	r2, [r3, #0]
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80079d0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80079d4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	681a      	ldr	r2, [r3, #0]
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	f042 0201 	orr.w	r2, r2, #1
 80079e4:	601a      	str	r2, [r3, #0]
 80079e6:	e005      	b.n	80079f4 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	2200      	movs	r2, #0
 80079ec:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80079f0:	2302      	movs	r3, #2
 80079f2:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80079f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80079f6:	4618      	mov	r0, r3
 80079f8:	3718      	adds	r7, #24
 80079fa:	46bd      	mov	sp, r7
 80079fc:	bd80      	pop	{r7, pc}

080079fe <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80079fe:	b580      	push	{r7, lr}
 8007a00:	b084      	sub	sp, #16
 8007a02:	af00      	add	r7, sp, #0
 8007a04:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007a06:	2300      	movs	r3, #0
 8007a08:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8007a10:	b2db      	uxtb	r3, r3
 8007a12:	2b02      	cmp	r3, #2
 8007a14:	d005      	beq.n	8007a22 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	2204      	movs	r2, #4
 8007a1a:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8007a1c:	2301      	movs	r3, #1
 8007a1e:	73fb      	strb	r3, [r7, #15]
 8007a20:	e047      	b.n	8007ab2 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	681a      	ldr	r2, [r3, #0]
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	f022 020e 	bic.w	r2, r2, #14
 8007a30:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	681a      	ldr	r2, [r3, #0]
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	f022 0201 	bic.w	r2, r2, #1
 8007a40:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007a46:	681a      	ldr	r2, [r3, #0]
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007a4c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007a50:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007a56:	f003 021c 	and.w	r2, r3, #28
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a5e:	2101      	movs	r1, #1
 8007a60:	fa01 f202 	lsl.w	r2, r1, r2
 8007a64:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007a6a:	687a      	ldr	r2, [r7, #4]
 8007a6c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8007a6e:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d00c      	beq.n	8007a92 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a7c:	681a      	ldr	r2, [r3, #0]
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a82:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007a86:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007a8c:	687a      	ldr	r2, [r7, #4]
 8007a8e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8007a90:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	2201      	movs	r2, #1
 8007a96:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	2200      	movs	r2, #0
 8007a9e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d003      	beq.n	8007ab2 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007aae:	6878      	ldr	r0, [r7, #4]
 8007ab0:	4798      	blx	r3
    }
  }
  return status;
 8007ab2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ab4:	4618      	mov	r0, r3
 8007ab6:	3710      	adds	r7, #16
 8007ab8:	46bd      	mov	sp, r7
 8007aba:	bd80      	pop	{r7, pc}

08007abc <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007abc:	b580      	push	{r7, lr}
 8007abe:	b084      	sub	sp, #16
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007ad8:	f003 031c 	and.w	r3, r3, #28
 8007adc:	2204      	movs	r2, #4
 8007ade:	409a      	lsls	r2, r3
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	4013      	ands	r3, r2
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d026      	beq.n	8007b36 <HAL_DMA_IRQHandler+0x7a>
 8007ae8:	68bb      	ldr	r3, [r7, #8]
 8007aea:	f003 0304 	and.w	r3, r3, #4
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d021      	beq.n	8007b36 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	f003 0320 	and.w	r3, r3, #32
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d107      	bne.n	8007b10 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	681a      	ldr	r2, [r3, #0]
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	f022 0204 	bic.w	r2, r2, #4
 8007b0e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b14:	f003 021c 	and.w	r2, r3, #28
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b1c:	2104      	movs	r1, #4
 8007b1e:	fa01 f202 	lsl.w	r2, r1, r2
 8007b22:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d071      	beq.n	8007c10 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b30:	6878      	ldr	r0, [r7, #4]
 8007b32:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8007b34:	e06c      	b.n	8007c10 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b3a:	f003 031c 	and.w	r3, r3, #28
 8007b3e:	2202      	movs	r2, #2
 8007b40:	409a      	lsls	r2, r3
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	4013      	ands	r3, r2
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d02e      	beq.n	8007ba8 <HAL_DMA_IRQHandler+0xec>
 8007b4a:	68bb      	ldr	r3, [r7, #8]
 8007b4c:	f003 0302 	and.w	r3, r3, #2
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d029      	beq.n	8007ba8 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	f003 0320 	and.w	r3, r3, #32
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d10b      	bne.n	8007b7a <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	681a      	ldr	r2, [r3, #0]
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	f022 020a 	bic.w	r2, r2, #10
 8007b70:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	2201      	movs	r2, #1
 8007b76:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b7e:	f003 021c 	and.w	r2, r3, #28
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b86:	2102      	movs	r1, #2
 8007b88:	fa01 f202 	lsl.w	r2, r1, r2
 8007b8c:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	2200      	movs	r2, #0
 8007b92:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d038      	beq.n	8007c10 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ba2:	6878      	ldr	r0, [r7, #4]
 8007ba4:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8007ba6:	e033      	b.n	8007c10 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007bac:	f003 031c 	and.w	r3, r3, #28
 8007bb0:	2208      	movs	r2, #8
 8007bb2:	409a      	lsls	r2, r3
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	4013      	ands	r3, r2
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d02a      	beq.n	8007c12 <HAL_DMA_IRQHandler+0x156>
 8007bbc:	68bb      	ldr	r3, [r7, #8]
 8007bbe:	f003 0308 	and.w	r3, r3, #8
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d025      	beq.n	8007c12 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	681a      	ldr	r2, [r3, #0]
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	f022 020e 	bic.w	r2, r2, #14
 8007bd4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007bda:	f003 021c 	and.w	r2, r3, #28
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007be2:	2101      	movs	r1, #1
 8007be4:	fa01 f202 	lsl.w	r2, r1, r2
 8007be8:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	2201      	movs	r2, #1
 8007bee:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	2201      	movs	r2, #1
 8007bf4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	2200      	movs	r2, #0
 8007bfc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d004      	beq.n	8007c12 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007c0c:	6878      	ldr	r0, [r7, #4]
 8007c0e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8007c10:	bf00      	nop
 8007c12:	bf00      	nop
}
 8007c14:	3710      	adds	r7, #16
 8007c16:	46bd      	mov	sp, r7
 8007c18:	bd80      	pop	{r7, pc}

08007c1a <HAL_DMA_GetState>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8007c1a:	b480      	push	{r7}
 8007c1c:	b083      	sub	sp, #12
 8007c1e:	af00      	add	r7, sp, #0
 8007c20:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8007c28:	b2db      	uxtb	r3, r3
}
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	370c      	adds	r7, #12
 8007c2e:	46bd      	mov	sp, r7
 8007c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c34:	4770      	bx	lr

08007c36 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007c36:	b480      	push	{r7}
 8007c38:	b085      	sub	sp, #20
 8007c3a:	af00      	add	r7, sp, #0
 8007c3c:	60f8      	str	r0, [r7, #12]
 8007c3e:	60b9      	str	r1, [r7, #8]
 8007c40:	607a      	str	r2, [r7, #4]
 8007c42:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007c48:	68fa      	ldr	r2, [r7, #12]
 8007c4a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8007c4c:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d004      	beq.n	8007c60 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007c5a:	68fa      	ldr	r2, [r7, #12]
 8007c5c:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8007c5e:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007c64:	f003 021c 	and.w	r2, r3, #28
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c6c:	2101      	movs	r1, #1
 8007c6e:	fa01 f202 	lsl.w	r2, r1, r2
 8007c72:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	683a      	ldr	r2, [r7, #0]
 8007c7a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	689b      	ldr	r3, [r3, #8]
 8007c80:	2b10      	cmp	r3, #16
 8007c82:	d108      	bne.n	8007c96 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	687a      	ldr	r2, [r7, #4]
 8007c8a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	68ba      	ldr	r2, [r7, #8]
 8007c92:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8007c94:	e007      	b.n	8007ca6 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	68ba      	ldr	r2, [r7, #8]
 8007c9c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	687a      	ldr	r2, [r7, #4]
 8007ca4:	60da      	str	r2, [r3, #12]
}
 8007ca6:	bf00      	nop
 8007ca8:	3714      	adds	r7, #20
 8007caa:	46bd      	mov	sp, r7
 8007cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb0:	4770      	bx	lr
	...

08007cb4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007cb4:	b480      	push	{r7}
 8007cb6:	b085      	sub	sp, #20
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	461a      	mov	r2, r3
 8007cc2:	4b17      	ldr	r3, [pc, #92]	@ (8007d20 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8007cc4:	429a      	cmp	r2, r3
 8007cc6:	d80a      	bhi.n	8007cde <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007ccc:	089b      	lsrs	r3, r3, #2
 8007cce:	009b      	lsls	r3, r3, #2
 8007cd0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007cd4:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 8007cd8:	687a      	ldr	r2, [r7, #4]
 8007cda:	6493      	str	r3, [r2, #72]	@ 0x48
 8007cdc:	e007      	b.n	8007cee <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007ce2:	089b      	lsrs	r3, r3, #2
 8007ce4:	009a      	lsls	r2, r3, #2
 8007ce6:	4b0f      	ldr	r3, [pc, #60]	@ (8007d24 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8007ce8:	4413      	add	r3, r2
 8007cea:	687a      	ldr	r2, [r7, #4]
 8007cec:	6493      	str	r3, [r2, #72]	@ 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif /* DMA2 */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	b2db      	uxtb	r3, r3
 8007cf4:	3b08      	subs	r3, #8
 8007cf6:	4a0c      	ldr	r2, [pc, #48]	@ (8007d28 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8007cf8:	fba2 2303 	umull	r2, r3, r2, r3
 8007cfc:	091b      	lsrs	r3, r3, #4
 8007cfe:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	4a0a      	ldr	r2, [pc, #40]	@ (8007d2c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8007d04:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	f003 031f 	and.w	r3, r3, #31
 8007d0c:	2201      	movs	r2, #1
 8007d0e:	409a      	lsls	r2, r3
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8007d14:	bf00      	nop
 8007d16:	3714      	adds	r7, #20
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d1e:	4770      	bx	lr
 8007d20:	40020407 	.word	0x40020407
 8007d24:	4002081c 	.word	0x4002081c
 8007d28:	cccccccd 	.word	0xcccccccd
 8007d2c:	40020880 	.word	0x40020880

08007d30 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007d30:	b480      	push	{r7}
 8007d32:	b085      	sub	sp, #20
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	685b      	ldr	r3, [r3, #4]
 8007d3c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007d40:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007d42:	68fa      	ldr	r2, [r7, #12]
 8007d44:	4b0b      	ldr	r3, [pc, #44]	@ (8007d74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8007d46:	4413      	add	r3, r2
 8007d48:	009b      	lsls	r3, r3, #2
 8007d4a:	461a      	mov	r2, r3
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	4a09      	ldr	r2, [pc, #36]	@ (8007d78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 8007d54:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	3b01      	subs	r3, #1
 8007d5a:	f003 0303 	and.w	r3, r3, #3
 8007d5e:	2201      	movs	r2, #1
 8007d60:	409a      	lsls	r2, r3
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8007d66:	bf00      	nop
 8007d68:	3714      	adds	r7, #20
 8007d6a:	46bd      	mov	sp, r7
 8007d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d70:	4770      	bx	lr
 8007d72:	bf00      	nop
 8007d74:	1000823f 	.word	0x1000823f
 8007d78:	40020940 	.word	0x40020940

08007d7c <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007d7c:	b480      	push	{r7}
 8007d7e:	b087      	sub	sp, #28
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	6078      	str	r0, [r7, #4]
 8007d84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8007d86:	2300      	movs	r3, #0
 8007d88:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007d8a:	e14c      	b.n	8008026 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8007d8c:	683b      	ldr	r3, [r7, #0]
 8007d8e:	681a      	ldr	r2, [r3, #0]
 8007d90:	2101      	movs	r1, #1
 8007d92:	697b      	ldr	r3, [r7, #20]
 8007d94:	fa01 f303 	lsl.w	r3, r1, r3
 8007d98:	4013      	ands	r3, r2
 8007d9a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	f000 813e 	beq.w	8008020 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007da4:	683b      	ldr	r3, [r7, #0]
 8007da6:	685b      	ldr	r3, [r3, #4]
 8007da8:	f003 0303 	and.w	r3, r3, #3
 8007dac:	2b01      	cmp	r3, #1
 8007dae:	d005      	beq.n	8007dbc <HAL_GPIO_Init+0x40>
 8007db0:	683b      	ldr	r3, [r7, #0]
 8007db2:	685b      	ldr	r3, [r3, #4]
 8007db4:	f003 0303 	and.w	r3, r3, #3
 8007db8:	2b02      	cmp	r3, #2
 8007dba:	d130      	bne.n	8007e1e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	689b      	ldr	r3, [r3, #8]
 8007dc0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8007dc2:	697b      	ldr	r3, [r7, #20]
 8007dc4:	005b      	lsls	r3, r3, #1
 8007dc6:	2203      	movs	r2, #3
 8007dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8007dcc:	43db      	mvns	r3, r3
 8007dce:	693a      	ldr	r2, [r7, #16]
 8007dd0:	4013      	ands	r3, r2
 8007dd2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8007dd4:	683b      	ldr	r3, [r7, #0]
 8007dd6:	68da      	ldr	r2, [r3, #12]
 8007dd8:	697b      	ldr	r3, [r7, #20]
 8007dda:	005b      	lsls	r3, r3, #1
 8007ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8007de0:	693a      	ldr	r2, [r7, #16]
 8007de2:	4313      	orrs	r3, r2
 8007de4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	693a      	ldr	r2, [r7, #16]
 8007dea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	685b      	ldr	r3, [r3, #4]
 8007df0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007df2:	2201      	movs	r2, #1
 8007df4:	697b      	ldr	r3, [r7, #20]
 8007df6:	fa02 f303 	lsl.w	r3, r2, r3
 8007dfa:	43db      	mvns	r3, r3
 8007dfc:	693a      	ldr	r2, [r7, #16]
 8007dfe:	4013      	ands	r3, r2
 8007e00:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007e02:	683b      	ldr	r3, [r7, #0]
 8007e04:	685b      	ldr	r3, [r3, #4]
 8007e06:	091b      	lsrs	r3, r3, #4
 8007e08:	f003 0201 	and.w	r2, r3, #1
 8007e0c:	697b      	ldr	r3, [r7, #20]
 8007e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8007e12:	693a      	ldr	r2, [r7, #16]
 8007e14:	4313      	orrs	r3, r2
 8007e16:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	693a      	ldr	r2, [r7, #16]
 8007e1c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007e1e:	683b      	ldr	r3, [r7, #0]
 8007e20:	685b      	ldr	r3, [r3, #4]
 8007e22:	f003 0303 	and.w	r3, r3, #3
 8007e26:	2b03      	cmp	r3, #3
 8007e28:	d017      	beq.n	8007e5a <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	68db      	ldr	r3, [r3, #12]
 8007e2e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007e30:	697b      	ldr	r3, [r7, #20]
 8007e32:	005b      	lsls	r3, r3, #1
 8007e34:	2203      	movs	r2, #3
 8007e36:	fa02 f303 	lsl.w	r3, r2, r3
 8007e3a:	43db      	mvns	r3, r3
 8007e3c:	693a      	ldr	r2, [r7, #16]
 8007e3e:	4013      	ands	r3, r2
 8007e40:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007e42:	683b      	ldr	r3, [r7, #0]
 8007e44:	689a      	ldr	r2, [r3, #8]
 8007e46:	697b      	ldr	r3, [r7, #20]
 8007e48:	005b      	lsls	r3, r3, #1
 8007e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8007e4e:	693a      	ldr	r2, [r7, #16]
 8007e50:	4313      	orrs	r3, r2
 8007e52:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	693a      	ldr	r2, [r7, #16]
 8007e58:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007e5a:	683b      	ldr	r3, [r7, #0]
 8007e5c:	685b      	ldr	r3, [r3, #4]
 8007e5e:	f003 0303 	and.w	r3, r3, #3
 8007e62:	2b02      	cmp	r3, #2
 8007e64:	d123      	bne.n	8007eae <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8007e66:	697b      	ldr	r3, [r7, #20]
 8007e68:	08da      	lsrs	r2, r3, #3
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	3208      	adds	r2, #8
 8007e6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e72:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8007e74:	697b      	ldr	r3, [r7, #20]
 8007e76:	f003 0307 	and.w	r3, r3, #7
 8007e7a:	009b      	lsls	r3, r3, #2
 8007e7c:	220f      	movs	r2, #15
 8007e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8007e82:	43db      	mvns	r3, r3
 8007e84:	693a      	ldr	r2, [r7, #16]
 8007e86:	4013      	ands	r3, r2
 8007e88:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8007e8a:	683b      	ldr	r3, [r7, #0]
 8007e8c:	691a      	ldr	r2, [r3, #16]
 8007e8e:	697b      	ldr	r3, [r7, #20]
 8007e90:	f003 0307 	and.w	r3, r3, #7
 8007e94:	009b      	lsls	r3, r3, #2
 8007e96:	fa02 f303 	lsl.w	r3, r2, r3
 8007e9a:	693a      	ldr	r2, [r7, #16]
 8007e9c:	4313      	orrs	r3, r2
 8007e9e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8007ea0:	697b      	ldr	r3, [r7, #20]
 8007ea2:	08da      	lsrs	r2, r3, #3
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	3208      	adds	r2, #8
 8007ea8:	6939      	ldr	r1, [r7, #16]
 8007eaa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8007eb4:	697b      	ldr	r3, [r7, #20]
 8007eb6:	005b      	lsls	r3, r3, #1
 8007eb8:	2203      	movs	r2, #3
 8007eba:	fa02 f303 	lsl.w	r3, r2, r3
 8007ebe:	43db      	mvns	r3, r3
 8007ec0:	693a      	ldr	r2, [r7, #16]
 8007ec2:	4013      	ands	r3, r2
 8007ec4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8007ec6:	683b      	ldr	r3, [r7, #0]
 8007ec8:	685b      	ldr	r3, [r3, #4]
 8007eca:	f003 0203 	and.w	r2, r3, #3
 8007ece:	697b      	ldr	r3, [r7, #20]
 8007ed0:	005b      	lsls	r3, r3, #1
 8007ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8007ed6:	693a      	ldr	r2, [r7, #16]
 8007ed8:	4313      	orrs	r3, r2
 8007eda:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	693a      	ldr	r2, [r7, #16]
 8007ee0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8007ee2:	683b      	ldr	r3, [r7, #0]
 8007ee4:	685b      	ldr	r3, [r3, #4]
 8007ee6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	f000 8098 	beq.w	8008020 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8007ef0:	4a54      	ldr	r2, [pc, #336]	@ (8008044 <HAL_GPIO_Init+0x2c8>)
 8007ef2:	697b      	ldr	r3, [r7, #20]
 8007ef4:	089b      	lsrs	r3, r3, #2
 8007ef6:	3302      	adds	r3, #2
 8007ef8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007efc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8007efe:	697b      	ldr	r3, [r7, #20]
 8007f00:	f003 0303 	and.w	r3, r3, #3
 8007f04:	009b      	lsls	r3, r3, #2
 8007f06:	220f      	movs	r2, #15
 8007f08:	fa02 f303 	lsl.w	r3, r2, r3
 8007f0c:	43db      	mvns	r3, r3
 8007f0e:	693a      	ldr	r2, [r7, #16]
 8007f10:	4013      	ands	r3, r2
 8007f12:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8007f1a:	d019      	beq.n	8007f50 <HAL_GPIO_Init+0x1d4>
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	4a4a      	ldr	r2, [pc, #296]	@ (8008048 <HAL_GPIO_Init+0x2cc>)
 8007f20:	4293      	cmp	r3, r2
 8007f22:	d013      	beq.n	8007f4c <HAL_GPIO_Init+0x1d0>
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	4a49      	ldr	r2, [pc, #292]	@ (800804c <HAL_GPIO_Init+0x2d0>)
 8007f28:	4293      	cmp	r3, r2
 8007f2a:	d00d      	beq.n	8007f48 <HAL_GPIO_Init+0x1cc>
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	4a48      	ldr	r2, [pc, #288]	@ (8008050 <HAL_GPIO_Init+0x2d4>)
 8007f30:	4293      	cmp	r3, r2
 8007f32:	d007      	beq.n	8007f44 <HAL_GPIO_Init+0x1c8>
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	4a47      	ldr	r2, [pc, #284]	@ (8008054 <HAL_GPIO_Init+0x2d8>)
 8007f38:	4293      	cmp	r3, r2
 8007f3a:	d101      	bne.n	8007f40 <HAL_GPIO_Init+0x1c4>
 8007f3c:	2304      	movs	r3, #4
 8007f3e:	e008      	b.n	8007f52 <HAL_GPIO_Init+0x1d6>
 8007f40:	2307      	movs	r3, #7
 8007f42:	e006      	b.n	8007f52 <HAL_GPIO_Init+0x1d6>
 8007f44:	2303      	movs	r3, #3
 8007f46:	e004      	b.n	8007f52 <HAL_GPIO_Init+0x1d6>
 8007f48:	2302      	movs	r3, #2
 8007f4a:	e002      	b.n	8007f52 <HAL_GPIO_Init+0x1d6>
 8007f4c:	2301      	movs	r3, #1
 8007f4e:	e000      	b.n	8007f52 <HAL_GPIO_Init+0x1d6>
 8007f50:	2300      	movs	r3, #0
 8007f52:	697a      	ldr	r2, [r7, #20]
 8007f54:	f002 0203 	and.w	r2, r2, #3
 8007f58:	0092      	lsls	r2, r2, #2
 8007f5a:	4093      	lsls	r3, r2
 8007f5c:	693a      	ldr	r2, [r7, #16]
 8007f5e:	4313      	orrs	r3, r2
 8007f60:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8007f62:	4938      	ldr	r1, [pc, #224]	@ (8008044 <HAL_GPIO_Init+0x2c8>)
 8007f64:	697b      	ldr	r3, [r7, #20]
 8007f66:	089b      	lsrs	r3, r3, #2
 8007f68:	3302      	adds	r3, #2
 8007f6a:	693a      	ldr	r2, [r7, #16]
 8007f6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007f70:	4b39      	ldr	r3, [pc, #228]	@ (8008058 <HAL_GPIO_Init+0x2dc>)
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	43db      	mvns	r3, r3
 8007f7a:	693a      	ldr	r2, [r7, #16]
 8007f7c:	4013      	ands	r3, r2
 8007f7e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8007f80:	683b      	ldr	r3, [r7, #0]
 8007f82:	685b      	ldr	r3, [r3, #4]
 8007f84:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d003      	beq.n	8007f94 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8007f8c:	693a      	ldr	r2, [r7, #16]
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	4313      	orrs	r3, r2
 8007f92:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8007f94:	4a30      	ldr	r2, [pc, #192]	@ (8008058 <HAL_GPIO_Init+0x2dc>)
 8007f96:	693b      	ldr	r3, [r7, #16]
 8007f98:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8007f9a:	4b2f      	ldr	r3, [pc, #188]	@ (8008058 <HAL_GPIO_Init+0x2dc>)
 8007f9c:	685b      	ldr	r3, [r3, #4]
 8007f9e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	43db      	mvns	r3, r3
 8007fa4:	693a      	ldr	r2, [r7, #16]
 8007fa6:	4013      	ands	r3, r2
 8007fa8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8007faa:	683b      	ldr	r3, [r7, #0]
 8007fac:	685b      	ldr	r3, [r3, #4]
 8007fae:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d003      	beq.n	8007fbe <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8007fb6:	693a      	ldr	r2, [r7, #16]
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	4313      	orrs	r3, r2
 8007fbc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8007fbe:	4a26      	ldr	r2, [pc, #152]	@ (8008058 <HAL_GPIO_Init+0x2dc>)
 8007fc0:	693b      	ldr	r3, [r7, #16]
 8007fc2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8007fc4:	4b24      	ldr	r3, [pc, #144]	@ (8008058 <HAL_GPIO_Init+0x2dc>)
 8007fc6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007fca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	43db      	mvns	r3, r3
 8007fd0:	693a      	ldr	r2, [r7, #16]
 8007fd2:	4013      	ands	r3, r2
 8007fd4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8007fd6:	683b      	ldr	r3, [r7, #0]
 8007fd8:	685b      	ldr	r3, [r3, #4]
 8007fda:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d003      	beq.n	8007fea <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8007fe2:	693a      	ldr	r2, [r7, #16]
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	4313      	orrs	r3, r2
 8007fe8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8007fea:	4a1b      	ldr	r2, [pc, #108]	@ (8008058 <HAL_GPIO_Init+0x2dc>)
 8007fec:	693b      	ldr	r3, [r7, #16]
 8007fee:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 8007ff2:	4b19      	ldr	r3, [pc, #100]	@ (8008058 <HAL_GPIO_Init+0x2dc>)
 8007ff4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007ff8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	43db      	mvns	r3, r3
 8007ffe:	693a      	ldr	r2, [r7, #16]
 8008000:	4013      	ands	r3, r2
 8008002:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8008004:	683b      	ldr	r3, [r7, #0]
 8008006:	685b      	ldr	r3, [r3, #4]
 8008008:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800800c:	2b00      	cmp	r3, #0
 800800e:	d003      	beq.n	8008018 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8008010:	693a      	ldr	r2, [r7, #16]
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	4313      	orrs	r3, r2
 8008016:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8008018:	4a0f      	ldr	r2, [pc, #60]	@ (8008058 <HAL_GPIO_Init+0x2dc>)
 800801a:	693b      	ldr	r3, [r7, #16]
 800801c:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      }
    }

    position++;
 8008020:	697b      	ldr	r3, [r7, #20]
 8008022:	3301      	adds	r3, #1
 8008024:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008026:	683b      	ldr	r3, [r7, #0]
 8008028:	681a      	ldr	r2, [r3, #0]
 800802a:	697b      	ldr	r3, [r7, #20]
 800802c:	fa22 f303 	lsr.w	r3, r2, r3
 8008030:	2b00      	cmp	r3, #0
 8008032:	f47f aeab 	bne.w	8007d8c <HAL_GPIO_Init+0x10>
  }
}
 8008036:	bf00      	nop
 8008038:	bf00      	nop
 800803a:	371c      	adds	r7, #28
 800803c:	46bd      	mov	sp, r7
 800803e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008042:	4770      	bx	lr
 8008044:	40010000 	.word	0x40010000
 8008048:	48000400 	.word	0x48000400
 800804c:	48000800 	.word	0x48000800
 8008050:	48000c00 	.word	0x48000c00
 8008054:	48001000 	.word	0x48001000
 8008058:	58000800 	.word	0x58000800

0800805c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800805c:	b480      	push	{r7}
 800805e:	b083      	sub	sp, #12
 8008060:	af00      	add	r7, sp, #0
 8008062:	6078      	str	r0, [r7, #4]
 8008064:	460b      	mov	r3, r1
 8008066:	807b      	strh	r3, [r7, #2]
 8008068:	4613      	mov	r3, r2
 800806a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800806c:	787b      	ldrb	r3, [r7, #1]
 800806e:	2b00      	cmp	r3, #0
 8008070:	d003      	beq.n	800807a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8008072:	887a      	ldrh	r2, [r7, #2]
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8008078:	e002      	b.n	8008080 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800807a:	887a      	ldrh	r2, [r7, #2]
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8008080:	bf00      	nop
 8008082:	370c      	adds	r7, #12
 8008084:	46bd      	mov	sp, r7
 8008086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800808a:	4770      	bx	lr

0800808c <HAL_GPIO_TogglePin>:
  * @param GPIOx where x can be (A..H) to select the GPIO peripheral for STM32WBxx family
  * @param GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800808c:	b480      	push	{r7}
 800808e:	b085      	sub	sp, #20
 8008090:	af00      	add	r7, sp, #0
 8008092:	6078      	str	r0, [r7, #4]
 8008094:	460b      	mov	r3, r1
 8008096:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	695b      	ldr	r3, [r3, #20]
 800809c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800809e:	887a      	ldrh	r2, [r7, #2]
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	4013      	ands	r3, r2
 80080a4:	041a      	lsls	r2, r3, #16
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	43d9      	mvns	r1, r3
 80080aa:	887b      	ldrh	r3, [r7, #2]
 80080ac:	400b      	ands	r3, r1
 80080ae:	431a      	orrs	r2, r3
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	619a      	str	r2, [r3, #24]
}
 80080b4:	bf00      	nop
 80080b6:	3714      	adds	r7, #20
 80080b8:	46bd      	mov	sp, r7
 80080ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080be:	4770      	bx	lr

080080c0 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 80080c0:	b580      	push	{r7, lr}
 80080c2:	b082      	sub	sp, #8
 80080c4:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 80080c6:	4b0a      	ldr	r3, [pc, #40]	@ (80080f0 <HAL_HSEM_IRQHandler+0x30>)
 80080c8:	68db      	ldr	r3, [r3, #12]
 80080ca:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 80080cc:	4b08      	ldr	r3, [pc, #32]	@ (80080f0 <HAL_HSEM_IRQHandler+0x30>)
 80080ce:	681a      	ldr	r2, [r3, #0]
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	43db      	mvns	r3, r3
 80080d4:	4906      	ldr	r1, [pc, #24]	@ (80080f0 <HAL_HSEM_IRQHandler+0x30>)
 80080d6:	4013      	ands	r3, r2
 80080d8:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 80080da:	4a05      	ldr	r2, [pc, #20]	@ (80080f0 <HAL_HSEM_IRQHandler+0x30>)
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 80080e0:	6878      	ldr	r0, [r7, #4]
 80080e2:	f000 f807 	bl	80080f4 <HAL_HSEM_FreeCallback>
}
 80080e6:	bf00      	nop
 80080e8:	3708      	adds	r7, #8
 80080ea:	46bd      	mov	sp, r7
 80080ec:	bd80      	pop	{r7, pc}
 80080ee:	bf00      	nop
 80080f0:	58001500 	.word	0x58001500

080080f4 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 80080f4:	b480      	push	{r7}
 80080f6:	b083      	sub	sp, #12
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 80080fc:	bf00      	nop
 80080fe:	370c      	adds	r7, #12
 8008100:	46bd      	mov	sp, r7
 8008102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008106:	4770      	bx	lr

08008108 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008108:	b580      	push	{r7, lr}
 800810a:	b082      	sub	sp, #8
 800810c:	af00      	add	r7, sp, #0
 800810e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	2b00      	cmp	r3, #0
 8008114:	d101      	bne.n	800811a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008116:	2301      	movs	r3, #1
 8008118:	e08d      	b.n	8008236 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008120:	b2db      	uxtb	r3, r3
 8008122:	2b00      	cmp	r3, #0
 8008124:	d106      	bne.n	8008134 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	2200      	movs	r2, #0
 800812a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800812e:	6878      	ldr	r0, [r7, #4]
 8008130:	f7fe fe68 	bl	8006e04 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	2224      	movs	r2, #36	@ 0x24
 8008138:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	681a      	ldr	r2, [r3, #0]
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	f022 0201 	bic.w	r2, r2, #1
 800814a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	685a      	ldr	r2, [r3, #4]
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8008158:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	689a      	ldr	r2, [r3, #8]
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008168:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	68db      	ldr	r3, [r3, #12]
 800816e:	2b01      	cmp	r3, #1
 8008170:	d107      	bne.n	8008182 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	689a      	ldr	r2, [r3, #8]
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800817e:	609a      	str	r2, [r3, #8]
 8008180:	e006      	b.n	8008190 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	689a      	ldr	r2, [r3, #8]
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800818e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	68db      	ldr	r3, [r3, #12]
 8008194:	2b02      	cmp	r3, #2
 8008196:	d108      	bne.n	80081aa <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	685a      	ldr	r2, [r3, #4]
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80081a6:	605a      	str	r2, [r3, #4]
 80081a8:	e007      	b.n	80081ba <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	685a      	ldr	r2, [r3, #4]
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80081b8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	685b      	ldr	r3, [r3, #4]
 80081c0:	687a      	ldr	r2, [r7, #4]
 80081c2:	6812      	ldr	r2, [r2, #0]
 80081c4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80081c8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80081cc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	68da      	ldr	r2, [r3, #12]
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80081dc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	691a      	ldr	r2, [r3, #16]
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	695b      	ldr	r3, [r3, #20]
 80081e6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	699b      	ldr	r3, [r3, #24]
 80081ee:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	430a      	orrs	r2, r1
 80081f6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	69d9      	ldr	r1, [r3, #28]
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	6a1a      	ldr	r2, [r3, #32]
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	430a      	orrs	r2, r1
 8008206:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	681a      	ldr	r2, [r3, #0]
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	f042 0201 	orr.w	r2, r2, #1
 8008216:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	2200      	movs	r2, #0
 800821c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	2220      	movs	r2, #32
 8008222:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	2200      	movs	r2, #0
 800822a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	2200      	movs	r2, #0
 8008230:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8008234:	2300      	movs	r3, #0
}
 8008236:	4618      	mov	r0, r3
 8008238:	3708      	adds	r7, #8
 800823a:	46bd      	mov	sp, r7
 800823c:	bd80      	pop	{r7, pc}
	...

08008240 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008240:	b580      	push	{r7, lr}
 8008242:	b088      	sub	sp, #32
 8008244:	af02      	add	r7, sp, #8
 8008246:	60f8      	str	r0, [r7, #12]
 8008248:	4608      	mov	r0, r1
 800824a:	4611      	mov	r1, r2
 800824c:	461a      	mov	r2, r3
 800824e:	4603      	mov	r3, r0
 8008250:	817b      	strh	r3, [r7, #10]
 8008252:	460b      	mov	r3, r1
 8008254:	813b      	strh	r3, [r7, #8]
 8008256:	4613      	mov	r3, r2
 8008258:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008260:	b2db      	uxtb	r3, r3
 8008262:	2b20      	cmp	r3, #32
 8008264:	f040 80f9 	bne.w	800845a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008268:	6a3b      	ldr	r3, [r7, #32]
 800826a:	2b00      	cmp	r3, #0
 800826c:	d002      	beq.n	8008274 <HAL_I2C_Mem_Write+0x34>
 800826e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008270:	2b00      	cmp	r3, #0
 8008272:	d105      	bne.n	8008280 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800827a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800827c:	2301      	movs	r3, #1
 800827e:	e0ed      	b.n	800845c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008286:	2b01      	cmp	r3, #1
 8008288:	d101      	bne.n	800828e <HAL_I2C_Mem_Write+0x4e>
 800828a:	2302      	movs	r3, #2
 800828c:	e0e6      	b.n	800845c <HAL_I2C_Mem_Write+0x21c>
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	2201      	movs	r2, #1
 8008292:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008296:	f7ff f8d1 	bl	800743c <HAL_GetTick>
 800829a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800829c:	697b      	ldr	r3, [r7, #20]
 800829e:	9300      	str	r3, [sp, #0]
 80082a0:	2319      	movs	r3, #25
 80082a2:	2201      	movs	r2, #1
 80082a4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80082a8:	68f8      	ldr	r0, [r7, #12]
 80082aa:	f001 fc26 	bl	8009afa <I2C_WaitOnFlagUntilTimeout>
 80082ae:	4603      	mov	r3, r0
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d001      	beq.n	80082b8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80082b4:	2301      	movs	r3, #1
 80082b6:	e0d1      	b.n	800845c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	2221      	movs	r2, #33	@ 0x21
 80082bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	2240      	movs	r2, #64	@ 0x40
 80082c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	2200      	movs	r2, #0
 80082cc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	6a3a      	ldr	r2, [r7, #32]
 80082d2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80082d8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	2200      	movs	r2, #0
 80082de:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80082e0:	88f8      	ldrh	r0, [r7, #6]
 80082e2:	893a      	ldrh	r2, [r7, #8]
 80082e4:	8979      	ldrh	r1, [r7, #10]
 80082e6:	697b      	ldr	r3, [r7, #20]
 80082e8:	9301      	str	r3, [sp, #4]
 80082ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082ec:	9300      	str	r3, [sp, #0]
 80082ee:	4603      	mov	r3, r0
 80082f0:	68f8      	ldr	r0, [r7, #12]
 80082f2:	f000 fe55 	bl	8008fa0 <I2C_RequestMemoryWrite>
 80082f6:	4603      	mov	r3, r0
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d005      	beq.n	8008308 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	2200      	movs	r2, #0
 8008300:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8008304:	2301      	movs	r3, #1
 8008306:	e0a9      	b.n	800845c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800830c:	b29b      	uxth	r3, r3
 800830e:	2bff      	cmp	r3, #255	@ 0xff
 8008310:	d90e      	bls.n	8008330 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	22ff      	movs	r2, #255	@ 0xff
 8008316:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800831c:	b2da      	uxtb	r2, r3
 800831e:	8979      	ldrh	r1, [r7, #10]
 8008320:	2300      	movs	r3, #0
 8008322:	9300      	str	r3, [sp, #0]
 8008324:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8008328:	68f8      	ldr	r0, [r7, #12]
 800832a:	f001 fda9 	bl	8009e80 <I2C_TransferConfig>
 800832e:	e00f      	b.n	8008350 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008334:	b29a      	uxth	r2, r3
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800833e:	b2da      	uxtb	r2, r3
 8008340:	8979      	ldrh	r1, [r7, #10]
 8008342:	2300      	movs	r3, #0
 8008344:	9300      	str	r3, [sp, #0]
 8008346:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800834a:	68f8      	ldr	r0, [r7, #12]
 800834c:	f001 fd98 	bl	8009e80 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008350:	697a      	ldr	r2, [r7, #20]
 8008352:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008354:	68f8      	ldr	r0, [r7, #12]
 8008356:	f001 fc29 	bl	8009bac <I2C_WaitOnTXISFlagUntilTimeout>
 800835a:	4603      	mov	r3, r0
 800835c:	2b00      	cmp	r3, #0
 800835e:	d001      	beq.n	8008364 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8008360:	2301      	movs	r3, #1
 8008362:	e07b      	b.n	800845c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008368:	781a      	ldrb	r2, [r3, #0]
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008374:	1c5a      	adds	r2, r3, #1
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800837e:	b29b      	uxth	r3, r3
 8008380:	3b01      	subs	r3, #1
 8008382:	b29a      	uxth	r2, r3
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800838c:	3b01      	subs	r3, #1
 800838e:	b29a      	uxth	r2, r3
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008398:	b29b      	uxth	r3, r3
 800839a:	2b00      	cmp	r3, #0
 800839c:	d034      	beq.n	8008408 <HAL_I2C_Mem_Write+0x1c8>
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d130      	bne.n	8008408 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80083a6:	697b      	ldr	r3, [r7, #20]
 80083a8:	9300      	str	r3, [sp, #0]
 80083aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083ac:	2200      	movs	r2, #0
 80083ae:	2180      	movs	r1, #128	@ 0x80
 80083b0:	68f8      	ldr	r0, [r7, #12]
 80083b2:	f001 fba2 	bl	8009afa <I2C_WaitOnFlagUntilTimeout>
 80083b6:	4603      	mov	r3, r0
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d001      	beq.n	80083c0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80083bc:	2301      	movs	r3, #1
 80083be:	e04d      	b.n	800845c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80083c4:	b29b      	uxth	r3, r3
 80083c6:	2bff      	cmp	r3, #255	@ 0xff
 80083c8:	d90e      	bls.n	80083e8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	22ff      	movs	r2, #255	@ 0xff
 80083ce:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80083d4:	b2da      	uxtb	r2, r3
 80083d6:	8979      	ldrh	r1, [r7, #10]
 80083d8:	2300      	movs	r3, #0
 80083da:	9300      	str	r3, [sp, #0]
 80083dc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80083e0:	68f8      	ldr	r0, [r7, #12]
 80083e2:	f001 fd4d 	bl	8009e80 <I2C_TransferConfig>
 80083e6:	e00f      	b.n	8008408 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80083ec:	b29a      	uxth	r2, r3
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80083f6:	b2da      	uxtb	r2, r3
 80083f8:	8979      	ldrh	r1, [r7, #10]
 80083fa:	2300      	movs	r3, #0
 80083fc:	9300      	str	r3, [sp, #0]
 80083fe:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8008402:	68f8      	ldr	r0, [r7, #12]
 8008404:	f001 fd3c 	bl	8009e80 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800840c:	b29b      	uxth	r3, r3
 800840e:	2b00      	cmp	r3, #0
 8008410:	d19e      	bne.n	8008350 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008412:	697a      	ldr	r2, [r7, #20]
 8008414:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008416:	68f8      	ldr	r0, [r7, #12]
 8008418:	f001 fc0f 	bl	8009c3a <I2C_WaitOnSTOPFlagUntilTimeout>
 800841c:	4603      	mov	r3, r0
 800841e:	2b00      	cmp	r3, #0
 8008420:	d001      	beq.n	8008426 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8008422:	2301      	movs	r3, #1
 8008424:	e01a      	b.n	800845c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	2220      	movs	r2, #32
 800842c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	6859      	ldr	r1, [r3, #4]
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	681a      	ldr	r2, [r3, #0]
 8008438:	4b0a      	ldr	r3, [pc, #40]	@ (8008464 <HAL_I2C_Mem_Write+0x224>)
 800843a:	400b      	ands	r3, r1
 800843c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	2220      	movs	r2, #32
 8008442:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	2200      	movs	r2, #0
 800844a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	2200      	movs	r2, #0
 8008452:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8008456:	2300      	movs	r3, #0
 8008458:	e000      	b.n	800845c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800845a:	2302      	movs	r3, #2
  }
}
 800845c:	4618      	mov	r0, r3
 800845e:	3718      	adds	r7, #24
 8008460:	46bd      	mov	sp, r7
 8008462:	bd80      	pop	{r7, pc}
 8008464:	fe00e800 	.word	0xfe00e800

08008468 <HAL_I2C_Mem_Read_DMA>:
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                       uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8008468:	b580      	push	{r7, lr}
 800846a:	b088      	sub	sp, #32
 800846c:	af02      	add	r7, sp, #8
 800846e:	60f8      	str	r0, [r7, #12]
 8008470:	4608      	mov	r0, r1
 8008472:	4611      	mov	r1, r2
 8008474:	461a      	mov	r2, r3
 8008476:	4603      	mov	r3, r0
 8008478:	817b      	strh	r3, [r7, #10]
 800847a:	460b      	mov	r3, r1
 800847c:	813b      	strh	r3, [r7, #8]
 800847e:	4613      	mov	r3, r2
 8008480:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008488:	b2db      	uxtb	r3, r3
 800848a:	2b20      	cmp	r3, #32
 800848c:	f040 80c2 	bne.w	8008614 <HAL_I2C_Mem_Read_DMA+0x1ac>
  {
    if ((pData == NULL) || (Size == 0U))
 8008490:	6a3b      	ldr	r3, [r7, #32]
 8008492:	2b00      	cmp	r3, #0
 8008494:	d002      	beq.n	800849c <HAL_I2C_Mem_Read_DMA+0x34>
 8008496:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008498:	2b00      	cmp	r3, #0
 800849a:	d105      	bne.n	80084a8 <HAL_I2C_Mem_Read_DMA+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80084a2:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80084a4:	2301      	movs	r3, #1
 80084a6:	e0b6      	b.n	8008616 <HAL_I2C_Mem_Read_DMA+0x1ae>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	699b      	ldr	r3, [r3, #24]
 80084ae:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80084b2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80084b6:	d101      	bne.n	80084bc <HAL_I2C_Mem_Read_DMA+0x54>
    {
      return HAL_BUSY;
 80084b8:	2302      	movs	r3, #2
 80084ba:	e0ac      	b.n	8008616 <HAL_I2C_Mem_Read_DMA+0x1ae>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80084c2:	2b01      	cmp	r3, #1
 80084c4:	d101      	bne.n	80084ca <HAL_I2C_Mem_Read_DMA+0x62>
 80084c6:	2302      	movs	r3, #2
 80084c8:	e0a5      	b.n	8008616 <HAL_I2C_Mem_Read_DMA+0x1ae>
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	2201      	movs	r2, #1
 80084ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	2222      	movs	r2, #34	@ 0x22
 80084d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	2240      	movs	r2, #64	@ 0x40
 80084de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	2200      	movs	r2, #0
 80084e6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	6a3a      	ldr	r2, [r7, #32]
 80084ec:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80084f2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	4a4a      	ldr	r2, [pc, #296]	@ (8008620 <HAL_I2C_Mem_Read_DMA+0x1b8>)
 80084f8:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Mem_ISR_DMA;
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	4a49      	ldr	r2, [pc, #292]	@ (8008624 <HAL_I2C_Mem_Read_DMA+0x1bc>)
 80084fe:	635a      	str	r2, [r3, #52]	@ 0x34
    hi2c->Devaddress  = DevAddress;
 8008500:	897a      	ldrh	r2, [r7, #10]
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	64da      	str	r2, [r3, #76]	@ 0x4c

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800850a:	b29b      	uxth	r3, r3
 800850c:	2bff      	cmp	r3, #255	@ 0xff
 800850e:	d903      	bls.n	8008518 <HAL_I2C_Mem_Read_DMA+0xb0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	22ff      	movs	r2, #255	@ 0xff
 8008514:	851a      	strh	r2, [r3, #40]	@ 0x28
 8008516:	e004      	b.n	8008522 <HAL_I2C_Mem_Read_DMA+0xba>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800851c:	b29a      	uxth	r2, r3
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	851a      	strh	r2, [r3, #40]	@ 0x28
    }

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008522:	88fb      	ldrh	r3, [r7, #6]
 8008524:	2b01      	cmp	r3, #1
 8008526:	d109      	bne.n	800853c <HAL_I2C_Mem_Read_DMA+0xd4>
    {
      /* Prefetch Memory Address */
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008528:	893b      	ldrh	r3, [r7, #8]
 800852a:	b2da      	uxtb	r2, r3
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	f04f 32ff 	mov.w	r2, #4294967295
 8008538:	651a      	str	r2, [r3, #80]	@ 0x50
 800853a:	e00b      	b.n	8008554 <HAL_I2C_Mem_Read_DMA+0xec>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Prefetch Memory Address (MSB part, LSB will be manage through interrupt) */
      hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800853c:	893b      	ldrh	r3, [r7, #8]
 800853e:	0a1b      	lsrs	r3, r3, #8
 8008540:	b29b      	uxth	r3, r3
 8008542:	b2da      	uxtb	r2, r3
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Prepare Memaddress buffer for LSB part */
      hi2c->Memaddress = I2C_MEM_ADD_LSB(MemAddress);
 800854a:	893b      	ldrh	r3, [r7, #8]
 800854c:	b2db      	uxtb	r3, r3
 800854e:	461a      	mov	r2, r3
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    if (hi2c->hdmarx != NULL)
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008558:	2b00      	cmp	r3, #0
 800855a:	d020      	beq.n	800859e <HAL_I2C_Mem_Read_DMA+0x136>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008560:	4a31      	ldr	r2, [pc, #196]	@ (8008628 <HAL_I2C_Mem_Read_DMA+0x1c0>)
 8008562:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008568:	4a30      	ldr	r2, [pc, #192]	@ (800862c <HAL_I2C_Mem_Read_DMA+0x1c4>)
 800856a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008570:	2200      	movs	r2, #0
 8008572:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->hdmarx->XferAbortCallback = NULL;
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008578:	2200      	movs	r2, #0
 800857a:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the DMA channel */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	3324      	adds	r3, #36	@ 0x24
 8008586:	4619      	mov	r1, r3
 8008588:	6a3a      	ldr	r2, [r7, #32]
                                       hi2c->XferSize);
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 800858e:	f7ff f9bb 	bl	8007908 <HAL_DMA_Start_IT>
 8008592:	4603      	mov	r3, r0
 8008594:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 8008596:	7dfb      	ldrb	r3, [r7, #23]
 8008598:	2b00      	cmp	r3, #0
 800859a:	d127      	bne.n	80085ec <HAL_I2C_Mem_Read_DMA+0x184>
 800859c:	e013      	b.n	80085c6 <HAL_I2C_Mem_Read_DMA+0x15e>
      hi2c->State     = HAL_I2C_STATE_READY;
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	2220      	movs	r2, #32
 80085a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	2200      	movs	r2, #0
 80085aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80085b2:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	645a      	str	r2, [r3, #68]	@ 0x44
      __HAL_UNLOCK(hi2c);
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	2200      	movs	r2, #0
 80085be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80085c2:	2301      	movs	r3, #1
 80085c4:	e027      	b.n	8008616 <HAL_I2C_Mem_Read_DMA+0x1ae>
    {
      /* Send Slave Address and Memory Address */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80085c6:	88fb      	ldrh	r3, [r7, #6]
 80085c8:	b2da      	uxtb	r2, r3
 80085ca:	8979      	ldrh	r1, [r7, #10]
 80085cc:	4b18      	ldr	r3, [pc, #96]	@ (8008630 <HAL_I2C_Mem_Read_DMA+0x1c8>)
 80085ce:	9300      	str	r3, [sp, #0]
 80085d0:	2300      	movs	r3, #0
 80085d2:	68f8      	ldr	r0, [r7, #12]
 80085d4:	f001 fc54 	bl	8009e80 <I2C_TransferConfig>

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	2200      	movs	r2, #0
 80085dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 80085e0:	2101      	movs	r1, #1
 80085e2:	68f8      	ldr	r0, [r7, #12]
 80085e4:	f001 fc7e 	bl	8009ee4 <I2C_Enable_IRQ>
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
 80085e8:	2300      	movs	r3, #0
 80085ea:	e014      	b.n	8008616 <HAL_I2C_Mem_Read_DMA+0x1ae>
      hi2c->State     = HAL_I2C_STATE_READY;
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	2220      	movs	r2, #32
 80085f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	2200      	movs	r2, #0
 80085f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008600:	f043 0210 	orr.w	r2, r3, #16
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	645a      	str	r2, [r3, #68]	@ 0x44
      __HAL_UNLOCK(hi2c);
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	2200      	movs	r2, #0
 800860c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8008610:	2301      	movs	r3, #1
 8008612:	e000      	b.n	8008616 <HAL_I2C_Mem_Read_DMA+0x1ae>
  }
  else
  {
    return HAL_BUSY;
 8008614:	2302      	movs	r3, #2
  }
}
 8008616:	4618      	mov	r0, r3
 8008618:	3718      	adds	r7, #24
 800861a:	46bd      	mov	sp, r7
 800861c:	bd80      	pop	{r7, pc}
 800861e:	bf00      	nop
 8008620:	ffff0000 	.word	0xffff0000
 8008624:	08008ba5 	.word	0x08008ba5
 8008628:	080099fb 	.word	0x080099fb
 800862c:	08009a91 	.word	0x08009a91
 8008630:	80002000 	.word	0x80002000

08008634 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8008634:	b580      	push	{r7, lr}
 8008636:	b084      	sub	sp, #16
 8008638:	af00      	add	r7, sp, #0
 800863a:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	699b      	ldr	r3, [r3, #24]
 8008642:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008650:	2b00      	cmp	r3, #0
 8008652:	d005      	beq.n	8008660 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008658:	68ba      	ldr	r2, [r7, #8]
 800865a:	68f9      	ldr	r1, [r7, #12]
 800865c:	6878      	ldr	r0, [r7, #4]
 800865e:	4798      	blx	r3
  }
}
 8008660:	bf00      	nop
 8008662:	3710      	adds	r7, #16
 8008664:	46bd      	mov	sp, r7
 8008666:	bd80      	pop	{r7, pc}

08008668 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8008668:	b580      	push	{r7, lr}
 800866a:	b086      	sub	sp, #24
 800866c:	af00      	add	r7, sp, #0
 800866e:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	699b      	ldr	r3, [r3, #24]
 8008676:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8008680:	697b      	ldr	r3, [r7, #20]
 8008682:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008686:	2b00      	cmp	r3, #0
 8008688:	d00f      	beq.n	80086aa <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800868a:	693b      	ldr	r3, [r7, #16]
 800868c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8008690:	2b00      	cmp	r3, #0
 8008692:	d00a      	beq.n	80086aa <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008698:	f043 0201 	orr.w	r2, r3, #1
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80086a8:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80086aa:	697b      	ldr	r3, [r7, #20]
 80086ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d00f      	beq.n	80086d4 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80086b4:	693b      	ldr	r3, [r7, #16]
 80086b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d00a      	beq.n	80086d4 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80086c2:	f043 0208 	orr.w	r2, r3, #8
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80086d2:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80086d4:	697b      	ldr	r3, [r7, #20]
 80086d6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d00f      	beq.n	80086fe <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80086de:	693b      	ldr	r3, [r7, #16]
 80086e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d00a      	beq.n	80086fe <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80086ec:	f043 0202 	orr.w	r2, r3, #2
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80086fc:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008702:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	f003 030b 	and.w	r3, r3, #11
 800870a:	2b00      	cmp	r3, #0
 800870c:	d003      	beq.n	8008716 <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 800870e:	68f9      	ldr	r1, [r7, #12]
 8008710:	6878      	ldr	r0, [r7, #4]
 8008712:	f001 f837 	bl	8009784 <I2C_ITError>
  }
}
 8008716:	bf00      	nop
 8008718:	3718      	adds	r7, #24
 800871a:	46bd      	mov	sp, r7
 800871c:	bd80      	pop	{r7, pc}

0800871e <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800871e:	b480      	push	{r7}
 8008720:	b083      	sub	sp, #12
 8008722:	af00      	add	r7, sp, #0
 8008724:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8008726:	bf00      	nop
 8008728:	370c      	adds	r7, #12
 800872a:	46bd      	mov	sp, r7
 800872c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008730:	4770      	bx	lr

08008732 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008732:	b480      	push	{r7}
 8008734:	b083      	sub	sp, #12
 8008736:	af00      	add	r7, sp, #0
 8008738:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800873a:	bf00      	nop
 800873c:	370c      	adds	r7, #12
 800873e:	46bd      	mov	sp, r7
 8008740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008744:	4770      	bx	lr

08008746 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008746:	b480      	push	{r7}
 8008748:	b083      	sub	sp, #12
 800874a:	af00      	add	r7, sp, #0
 800874c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800874e:	bf00      	nop
 8008750:	370c      	adds	r7, #12
 8008752:	46bd      	mov	sp, r7
 8008754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008758:	4770      	bx	lr

0800875a <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800875a:	b480      	push	{r7}
 800875c:	b083      	sub	sp, #12
 800875e:	af00      	add	r7, sp, #0
 8008760:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8008762:	bf00      	nop
 8008764:	370c      	adds	r7, #12
 8008766:	46bd      	mov	sp, r7
 8008768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800876c:	4770      	bx	lr

0800876e <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800876e:	b480      	push	{r7}
 8008770:	b083      	sub	sp, #12
 8008772:	af00      	add	r7, sp, #0
 8008774:	6078      	str	r0, [r7, #4]
 8008776:	460b      	mov	r3, r1
 8008778:	70fb      	strb	r3, [r7, #3]
 800877a:	4613      	mov	r3, r2
 800877c:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800877e:	bf00      	nop
 8008780:	370c      	adds	r7, #12
 8008782:	46bd      	mov	sp, r7
 8008784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008788:	4770      	bx	lr

0800878a <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800878a:	b480      	push	{r7}
 800878c:	b083      	sub	sp, #12
 800878e:	af00      	add	r7, sp, #0
 8008790:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8008792:	bf00      	nop
 8008794:	370c      	adds	r7, #12
 8008796:	46bd      	mov	sp, r7
 8008798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800879c:	4770      	bx	lr

0800879e <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800879e:	b480      	push	{r7}
 80087a0:	b083      	sub	sp, #12
 80087a2:	af00      	add	r7, sp, #0
 80087a4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80087a6:	bf00      	nop
 80087a8:	370c      	adds	r7, #12
 80087aa:	46bd      	mov	sp, r7
 80087ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b0:	4770      	bx	lr

080087b2 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80087b2:	b480      	push	{r7}
 80087b4:	b083      	sub	sp, #12
 80087b6:	af00      	add	r7, sp, #0
 80087b8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80087ba:	bf00      	nop
 80087bc:	370c      	adds	r7, #12
 80087be:	46bd      	mov	sp, r7
 80087c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c4:	4770      	bx	lr

080087c6 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80087c6:	b480      	push	{r7}
 80087c8:	b083      	sub	sp, #12
 80087ca:	af00      	add	r7, sp, #0
 80087cc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80087ce:	bf00      	nop
 80087d0:	370c      	adds	r7, #12
 80087d2:	46bd      	mov	sp, r7
 80087d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d8:	4770      	bx	lr

080087da <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 80087da:	b580      	push	{r7, lr}
 80087dc:	b086      	sub	sp, #24
 80087de:	af00      	add	r7, sp, #0
 80087e0:	60f8      	str	r0, [r7, #12]
 80087e2:	60b9      	str	r1, [r7, #8]
 80087e4:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087ea:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80087ec:	68bb      	ldr	r3, [r7, #8]
 80087ee:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80087f6:	2b01      	cmp	r3, #1
 80087f8:	d101      	bne.n	80087fe <I2C_Slave_ISR_IT+0x24>
 80087fa:	2302      	movs	r3, #2
 80087fc:	e0e2      	b.n	80089c4 <I2C_Slave_ISR_IT+0x1ea>
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	2201      	movs	r2, #1
 8008802:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8008806:	693b      	ldr	r3, [r7, #16]
 8008808:	f003 0320 	and.w	r3, r3, #32
 800880c:	2b00      	cmp	r3, #0
 800880e:	d009      	beq.n	8008824 <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8008816:	2b00      	cmp	r3, #0
 8008818:	d004      	beq.n	8008824 <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800881a:	6939      	ldr	r1, [r7, #16]
 800881c:	68f8      	ldr	r0, [r7, #12]
 800881e:	f000 fdf9 	bl	8009414 <I2C_ITSlaveCplt>
 8008822:	e0ca      	b.n	80089ba <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8008824:	693b      	ldr	r3, [r7, #16]
 8008826:	f003 0310 	and.w	r3, r3, #16
 800882a:	2b00      	cmp	r3, #0
 800882c:	d04b      	beq.n	80088c6 <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8008834:	2b00      	cmp	r3, #0
 8008836:	d046      	beq.n	80088c6 <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800883c:	b29b      	uxth	r3, r3
 800883e:	2b00      	cmp	r3, #0
 8008840:	d128      	bne.n	8008894 <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008848:	b2db      	uxtb	r3, r3
 800884a:	2b28      	cmp	r3, #40	@ 0x28
 800884c:	d108      	bne.n	8008860 <I2C_Slave_ISR_IT+0x86>
 800884e:	697b      	ldr	r3, [r7, #20]
 8008850:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008854:	d104      	bne.n	8008860 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8008856:	6939      	ldr	r1, [r7, #16]
 8008858:	68f8      	ldr	r0, [r7, #12]
 800885a:	f000 ff3f 	bl	80096dc <I2C_ITListenCplt>
 800885e:	e031      	b.n	80088c4 <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008866:	b2db      	uxtb	r3, r3
 8008868:	2b29      	cmp	r3, #41	@ 0x29
 800886a:	d10e      	bne.n	800888a <I2C_Slave_ISR_IT+0xb0>
 800886c:	697b      	ldr	r3, [r7, #20]
 800886e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8008872:	d00a      	beq.n	800888a <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	2210      	movs	r2, #16
 800887a:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800887c:	68f8      	ldr	r0, [r7, #12]
 800887e:	f001 f898 	bl	80099b2 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8008882:	68f8      	ldr	r0, [r7, #12]
 8008884:	f000 fca1 	bl	80091ca <I2C_ITSlaveSeqCplt>
 8008888:	e01c      	b.n	80088c4 <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	2210      	movs	r2, #16
 8008890:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8008892:	e08f      	b.n	80089b4 <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	2210      	movs	r2, #16
 800889a:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80088a0:	f043 0204 	orr.w	r2, r3, #4
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80088a8:	697b      	ldr	r3, [r7, #20]
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d003      	beq.n	80088b6 <I2C_Slave_ISR_IT+0xdc>
 80088ae:	697b      	ldr	r3, [r7, #20]
 80088b0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80088b4:	d17e      	bne.n	80089b4 <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80088ba:	4619      	mov	r1, r3
 80088bc:	68f8      	ldr	r0, [r7, #12]
 80088be:	f000 ff61 	bl	8009784 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80088c2:	e077      	b.n	80089b4 <I2C_Slave_ISR_IT+0x1da>
 80088c4:	e076      	b.n	80089b4 <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80088c6:	693b      	ldr	r3, [r7, #16]
 80088c8:	f003 0304 	and.w	r3, r3, #4
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d02f      	beq.n	8008930 <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d02a      	beq.n	8008930 <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80088de:	b29b      	uxth	r3, r3
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d018      	beq.n	8008916 <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088ee:	b2d2      	uxtb	r2, r2
 80088f0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088f6:	1c5a      	adds	r2, r3, #1
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008900:	3b01      	subs	r3, #1
 8008902:	b29a      	uxth	r2, r3
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800890c:	b29b      	uxth	r3, r3
 800890e:	3b01      	subs	r3, #1
 8008910:	b29a      	uxth	r2, r3
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800891a:	b29b      	uxth	r3, r3
 800891c:	2b00      	cmp	r3, #0
 800891e:	d14b      	bne.n	80089b8 <I2C_Slave_ISR_IT+0x1de>
 8008920:	697b      	ldr	r3, [r7, #20]
 8008922:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8008926:	d047      	beq.n	80089b8 <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8008928:	68f8      	ldr	r0, [r7, #12]
 800892a:	f000 fc4e 	bl	80091ca <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800892e:	e043      	b.n	80089b8 <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8008930:	693b      	ldr	r3, [r7, #16]
 8008932:	f003 0308 	and.w	r3, r3, #8
 8008936:	2b00      	cmp	r3, #0
 8008938:	d009      	beq.n	800894e <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8008940:	2b00      	cmp	r3, #0
 8008942:	d004      	beq.n	800894e <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8008944:	6939      	ldr	r1, [r7, #16]
 8008946:	68f8      	ldr	r0, [r7, #12]
 8008948:	f000 fb7e 	bl	8009048 <I2C_ITAddrCplt>
 800894c:	e035      	b.n	80089ba <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800894e:	693b      	ldr	r3, [r7, #16]
 8008950:	f003 0302 	and.w	r3, r3, #2
 8008954:	2b00      	cmp	r3, #0
 8008956:	d030      	beq.n	80089ba <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800895e:	2b00      	cmp	r3, #0
 8008960:	d02b      	beq.n	80089ba <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008966:	b29b      	uxth	r3, r3
 8008968:	2b00      	cmp	r3, #0
 800896a:	d018      	beq.n	800899e <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008970:	781a      	ldrb	r2, [r3, #0]
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800897c:	1c5a      	adds	r2, r3, #1
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008986:	b29b      	uxth	r3, r3
 8008988:	3b01      	subs	r3, #1
 800898a:	b29a      	uxth	r2, r3
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008994:	3b01      	subs	r3, #1
 8008996:	b29a      	uxth	r2, r3
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	851a      	strh	r2, [r3, #40]	@ 0x28
 800899c:	e00d      	b.n	80089ba <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800899e:	697b      	ldr	r3, [r7, #20]
 80089a0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80089a4:	d002      	beq.n	80089ac <I2C_Slave_ISR_IT+0x1d2>
 80089a6:	697b      	ldr	r3, [r7, #20]
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d106      	bne.n	80089ba <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80089ac:	68f8      	ldr	r0, [r7, #12]
 80089ae:	f000 fc0c 	bl	80091ca <I2C_ITSlaveSeqCplt>
 80089b2:	e002      	b.n	80089ba <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 80089b4:	bf00      	nop
 80089b6:	e000      	b.n	80089ba <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 80089b8:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	2200      	movs	r2, #0
 80089be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80089c2:	2300      	movs	r3, #0
}
 80089c4:	4618      	mov	r0, r3
 80089c6:	3718      	adds	r7, #24
 80089c8:	46bd      	mov	sp, r7
 80089ca:	bd80      	pop	{r7, pc}

080089cc <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 80089cc:	b580      	push	{r7, lr}
 80089ce:	b088      	sub	sp, #32
 80089d0:	af02      	add	r7, sp, #8
 80089d2:	60f8      	str	r0, [r7, #12]
 80089d4:	60b9      	str	r1, [r7, #8]
 80089d6:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80089de:	2b01      	cmp	r3, #1
 80089e0:	d101      	bne.n	80089e6 <I2C_Master_ISR_DMA+0x1a>
 80089e2:	2302      	movs	r3, #2
 80089e4:	e0d9      	b.n	8008b9a <I2C_Master_ISR_DMA+0x1ce>
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	2201      	movs	r2, #1
 80089ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80089ee:	68bb      	ldr	r3, [r7, #8]
 80089f0:	f003 0310 	and.w	r3, r3, #16
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d016      	beq.n	8008a26 <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d011      	beq.n	8008a26 <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	2210      	movs	r2, #16
 8008a08:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008a0e:	f043 0204 	orr.w	r2, r3, #4
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8008a16:	2120      	movs	r1, #32
 8008a18:	68f8      	ldr	r0, [r7, #12]
 8008a1a:	f001 fa63 	bl	8009ee4 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8008a1e:	68f8      	ldr	r0, [r7, #12]
 8008a20:	f000 ffc7 	bl	80099b2 <I2C_Flush_TXDR>
 8008a24:	e0b4      	b.n	8008b90 <I2C_Master_ISR_DMA+0x1c4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8008a26:	68bb      	ldr	r3, [r7, #8]
 8008a28:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d071      	beq.n	8008b14 <I2C_Master_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d06c      	beq.n	8008b14 <I2C_Master_ISR_DMA+0x148>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	681a      	ldr	r2, [r3, #0]
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008a48:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008a4e:	b29b      	uxth	r3, r3
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d04e      	beq.n	8008af2 <I2C_Master_ISR_DMA+0x126>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	685b      	ldr	r3, [r3, #4]
 8008a5a:	b29b      	uxth	r3, r3
 8008a5c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008a60:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008a66:	b29b      	uxth	r3, r3
 8008a68:	2bff      	cmp	r3, #255	@ 0xff
 8008a6a:	d906      	bls.n	8008a7a <I2C_Master_ISR_DMA+0xae>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	22ff      	movs	r2, #255	@ 0xff
 8008a70:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 8008a72:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8008a76:	617b      	str	r3, [r7, #20]
 8008a78:	e010      	b.n	8008a9c <I2C_Master_ISR_DMA+0xd0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008a7e:	b29a      	uxth	r2, r3
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a88:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8008a8c:	d003      	beq.n	8008a96 <I2C_Master_ISR_DMA+0xca>
        {
          xfermode = hi2c->XferOptions;
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a92:	617b      	str	r3, [r7, #20]
 8008a94:	e002      	b.n	8008a9c <I2C_Master_ISR_DMA+0xd0>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8008a96:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8008a9a:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008aa0:	b2da      	uxtb	r2, r3
 8008aa2:	8a79      	ldrh	r1, [r7, #18]
 8008aa4:	2300      	movs	r3, #0
 8008aa6:	9300      	str	r3, [sp, #0]
 8008aa8:	697b      	ldr	r3, [r7, #20]
 8008aaa:	68f8      	ldr	r0, [r7, #12]
 8008aac:	f001 f9e8 	bl	8009e80 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008ab4:	b29a      	uxth	r2, r3
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008aba:	1ad3      	subs	r3, r2, r3
 8008abc:	b29a      	uxth	r2, r3
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008ac8:	b2db      	uxtb	r3, r3
 8008aca:	2b22      	cmp	r3, #34	@ 0x22
 8008acc:	d108      	bne.n	8008ae0 <I2C_Master_ISR_DMA+0x114>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	681a      	ldr	r2, [r3, #0]
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008adc:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8008ade:	e057      	b.n	8008b90 <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	681a      	ldr	r2, [r3, #0]
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008aee:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8008af0:	e04e      	b.n	8008b90 <I2C_Master_ISR_DMA+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	685b      	ldr	r3, [r3, #4]
 8008af8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008afc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008b00:	d003      	beq.n	8008b0a <I2C_Master_ISR_DMA+0x13e>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8008b02:	68f8      	ldr	r0, [r7, #12]
 8008b04:	f000 fb24 	bl	8009150 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8008b08:	e042      	b.n	8008b90 <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8008b0a:	2140      	movs	r1, #64	@ 0x40
 8008b0c:	68f8      	ldr	r0, [r7, #12]
 8008b0e:	f000 fe39 	bl	8009784 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8008b12:	e03d      	b.n	8008b90 <I2C_Master_ISR_DMA+0x1c4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8008b14:	68bb      	ldr	r3, [r7, #8]
 8008b16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d028      	beq.n	8008b70 <I2C_Master_ISR_DMA+0x1a4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d023      	beq.n	8008b70 <I2C_Master_ISR_DMA+0x1a4>
  {
    if (hi2c->XferCount == 0U)
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008b2c:	b29b      	uxth	r3, r3
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d119      	bne.n	8008b66 <I2C_Master_ISR_DMA+0x19a>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	685b      	ldr	r3, [r3, #4]
 8008b38:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008b3c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008b40:	d025      	beq.n	8008b8e <I2C_Master_ISR_DMA+0x1c2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b46:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8008b4a:	d108      	bne.n	8008b5e <I2C_Master_ISR_DMA+0x192>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	685a      	ldr	r2, [r3, #4]
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008b5a:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8008b5c:	e017      	b.n	8008b8e <I2C_Master_ISR_DMA+0x1c2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8008b5e:	68f8      	ldr	r0, [r7, #12]
 8008b60:	f000 faf6 	bl	8009150 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8008b64:	e013      	b.n	8008b8e <I2C_Master_ISR_DMA+0x1c2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8008b66:	2140      	movs	r1, #64	@ 0x40
 8008b68:	68f8      	ldr	r0, [r7, #12]
 8008b6a:	f000 fe0b 	bl	8009784 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8008b6e:	e00e      	b.n	8008b8e <I2C_Master_ISR_DMA+0x1c2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8008b70:	68bb      	ldr	r3, [r7, #8]
 8008b72:	f003 0320 	and.w	r3, r3, #32
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d00a      	beq.n	8008b90 <I2C_Master_ISR_DMA+0x1c4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d005      	beq.n	8008b90 <I2C_Master_ISR_DMA+0x1c4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8008b84:	68b9      	ldr	r1, [r7, #8]
 8008b86:	68f8      	ldr	r0, [r7, #12]
 8008b88:	f000 fb7c 	bl	8009284 <I2C_ITMasterCplt>
 8008b8c:	e000      	b.n	8008b90 <I2C_Master_ISR_DMA+0x1c4>
    if (hi2c->XferCount == 0U)
 8008b8e:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	2200      	movs	r2, #0
 8008b94:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8008b98:	2300      	movs	r3, #0
}
 8008b9a:	4618      	mov	r0, r3
 8008b9c:	3718      	adds	r7, #24
 8008b9e:	46bd      	mov	sp, r7
 8008ba0:	bd80      	pop	{r7, pc}
	...

08008ba4 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8008ba4:	b580      	push	{r7, lr}
 8008ba6:	b088      	sub	sp, #32
 8008ba8:	af02      	add	r7, sp, #8
 8008baa:	60f8      	str	r0, [r7, #12]
 8008bac:	60b9      	str	r1, [r7, #8]
 8008bae:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8008bb0:	4b8d      	ldr	r3, [pc, #564]	@ (8008de8 <I2C_Mem_ISR_DMA+0x244>)
 8008bb2:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008bba:	2b01      	cmp	r3, #1
 8008bbc:	d101      	bne.n	8008bc2 <I2C_Mem_ISR_DMA+0x1e>
 8008bbe:	2302      	movs	r3, #2
 8008bc0:	e10e      	b.n	8008de0 <I2C_Mem_ISR_DMA+0x23c>
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	2201      	movs	r2, #1
 8008bc6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8008bca:	68bb      	ldr	r3, [r7, #8]
 8008bcc:	f003 0310 	and.w	r3, r3, #16
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d016      	beq.n	8008c02 <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d011      	beq.n	8008c02 <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	2210      	movs	r2, #16
 8008be4:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008bea:	f043 0204 	orr.w	r2, r3, #4
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8008bf2:	2120      	movs	r1, #32
 8008bf4:	68f8      	ldr	r0, [r7, #12]
 8008bf6:	f001 f975 	bl	8009ee4 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8008bfa:	68f8      	ldr	r0, [r7, #12]
 8008bfc:	f000 fed9 	bl	80099b2 <I2C_Flush_TXDR>
 8008c00:	e0e9      	b.n	8008dd6 <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8008c02:	68bb      	ldr	r3, [r7, #8]
 8008c04:	f003 0302 	and.w	r3, r3, #2
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d00e      	beq.n	8008c2a <I2C_Mem_ISR_DMA+0x86>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d009      	beq.n	8008c2a <I2C_Mem_ISR_DMA+0x86>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	68fa      	ldr	r2, [r7, #12]
 8008c1c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8008c1e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	f04f 32ff 	mov.w	r2, #4294967295
 8008c26:	651a      	str	r2, [r3, #80]	@ 0x50
 8008c28:	e0d5      	b.n	8008dd6 <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8008c2a:	68bb      	ldr	r3, [r7, #8]
 8008c2c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d05f      	beq.n	8008cf4 <I2C_Mem_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d05a      	beq.n	8008cf4 <I2C_Mem_ISR_DMA+0x150>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8008c3e:	2101      	movs	r1, #1
 8008c40:	68f8      	ldr	r0, [r7, #12]
 8008c42:	f001 f9d3 	bl	8009fec <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8008c46:	2110      	movs	r1, #16
 8008c48:	68f8      	ldr	r0, [r7, #12]
 8008c4a:	f001 f94b 	bl	8009ee4 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008c52:	b29b      	uxth	r3, r3
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d048      	beq.n	8008cea <I2C_Mem_ISR_DMA+0x146>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008c5c:	b29b      	uxth	r3, r3
 8008c5e:	2bff      	cmp	r3, #255	@ 0xff
 8008c60:	d910      	bls.n	8008c84 <I2C_Mem_ISR_DMA+0xe0>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	22ff      	movs	r2, #255	@ 0xff
 8008c66:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008c6c:	b299      	uxth	r1, r3
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008c72:	b2da      	uxtb	r2, r3
 8008c74:	2300      	movs	r3, #0
 8008c76:	9300      	str	r3, [sp, #0]
 8008c78:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8008c7c:	68f8      	ldr	r0, [r7, #12]
 8008c7e:	f001 f8ff 	bl	8009e80 <I2C_TransferConfig>
 8008c82:	e011      	b.n	8008ca8 <I2C_Mem_ISR_DMA+0x104>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008c88:	b29a      	uxth	r2, r3
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008c92:	b299      	uxth	r1, r3
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008c98:	b2da      	uxtb	r2, r3
 8008c9a:	2300      	movs	r3, #0
 8008c9c:	9300      	str	r3, [sp, #0]
 8008c9e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8008ca2:	68f8      	ldr	r0, [r7, #12]
 8008ca4:	f001 f8ec 	bl	8009e80 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008cac:	b29a      	uxth	r2, r3
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008cb2:	1ad3      	subs	r3, r2, r3
 8008cb4:	b29a      	uxth	r2, r3
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008cc0:	b2db      	uxtb	r3, r3
 8008cc2:	2b22      	cmp	r3, #34	@ 0x22
 8008cc4:	d108      	bne.n	8008cd8 <I2C_Mem_ISR_DMA+0x134>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	681a      	ldr	r2, [r3, #0]
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008cd4:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8008cd6:	e07e      	b.n	8008dd6 <I2C_Mem_ISR_DMA+0x232>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	681a      	ldr	r2, [r3, #0]
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008ce6:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8008ce8:	e075      	b.n	8008dd6 <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8008cea:	2140      	movs	r1, #64	@ 0x40
 8008cec:	68f8      	ldr	r0, [r7, #12]
 8008cee:	f000 fd49 	bl	8009784 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8008cf2:	e070      	b.n	8008dd6 <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8008cf4:	68bb      	ldr	r3, [r7, #8]
 8008cf6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d05d      	beq.n	8008dba <I2C_Mem_ISR_DMA+0x216>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d058      	beq.n	8008dba <I2C_Mem_ISR_DMA+0x216>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8008d08:	2101      	movs	r1, #1
 8008d0a:	68f8      	ldr	r0, [r7, #12]
 8008d0c:	f001 f96e 	bl	8009fec <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8008d10:	2110      	movs	r1, #16
 8008d12:	68f8      	ldr	r0, [r7, #12]
 8008d14:	f001 f8e6 	bl	8009ee4 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008d1e:	b2db      	uxtb	r3, r3
 8008d20:	2b22      	cmp	r3, #34	@ 0x22
 8008d22:	d101      	bne.n	8008d28 <I2C_Mem_ISR_DMA+0x184>
    {
      direction = I2C_GENERATE_START_READ;
 8008d24:	4b31      	ldr	r3, [pc, #196]	@ (8008dec <I2C_Mem_ISR_DMA+0x248>)
 8008d26:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008d2c:	b29b      	uxth	r3, r3
 8008d2e:	2bff      	cmp	r3, #255	@ 0xff
 8008d30:	d910      	bls.n	8008d54 <I2C_Mem_ISR_DMA+0x1b0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	22ff      	movs	r2, #255	@ 0xff
 8008d36:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008d3c:	b299      	uxth	r1, r3
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008d42:	b2da      	uxtb	r2, r3
 8008d44:	697b      	ldr	r3, [r7, #20]
 8008d46:	9300      	str	r3, [sp, #0]
 8008d48:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8008d4c:	68f8      	ldr	r0, [r7, #12]
 8008d4e:	f001 f897 	bl	8009e80 <I2C_TransferConfig>
 8008d52:	e011      	b.n	8008d78 <I2C_Mem_ISR_DMA+0x1d4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008d58:	b29a      	uxth	r2, r3
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008d62:	b299      	uxth	r1, r3
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008d68:	b2da      	uxtb	r2, r3
 8008d6a:	697b      	ldr	r3, [r7, #20]
 8008d6c:	9300      	str	r3, [sp, #0]
 8008d6e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8008d72:	68f8      	ldr	r0, [r7, #12]
 8008d74:	f001 f884 	bl	8009e80 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008d7c:	b29a      	uxth	r2, r3
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008d82:	1ad3      	subs	r3, r2, r3
 8008d84:	b29a      	uxth	r2, r3
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008d90:	b2db      	uxtb	r3, r3
 8008d92:	2b22      	cmp	r3, #34	@ 0x22
 8008d94:	d108      	bne.n	8008da8 <I2C_Mem_ISR_DMA+0x204>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	681a      	ldr	r2, [r3, #0]
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008da4:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8008da6:	e016      	b.n	8008dd6 <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	681a      	ldr	r2, [r3, #0]
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008db6:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8008db8:	e00d      	b.n	8008dd6 <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8008dba:	68bb      	ldr	r3, [r7, #8]
 8008dbc:	f003 0320 	and.w	r3, r3, #32
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d008      	beq.n	8008dd6 <I2C_Mem_ISR_DMA+0x232>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d003      	beq.n	8008dd6 <I2C_Mem_ISR_DMA+0x232>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8008dce:	68b9      	ldr	r1, [r7, #8]
 8008dd0:	68f8      	ldr	r0, [r7, #12]
 8008dd2:	f000 fa57 	bl	8009284 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	2200      	movs	r2, #0
 8008dda:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8008dde:	2300      	movs	r3, #0
}
 8008de0:	4618      	mov	r0, r3
 8008de2:	3718      	adds	r7, #24
 8008de4:	46bd      	mov	sp, r7
 8008de6:	bd80      	pop	{r7, pc}
 8008de8:	80002000 	.word	0x80002000
 8008dec:	80002400 	.word	0x80002400

08008df0 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8008df0:	b580      	push	{r7, lr}
 8008df2:	b088      	sub	sp, #32
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	60f8      	str	r0, [r7, #12]
 8008df8:	60b9      	str	r1, [r7, #8]
 8008dfa:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e00:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8008e02:	2300      	movs	r3, #0
 8008e04:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008e0c:	2b01      	cmp	r3, #1
 8008e0e:	d101      	bne.n	8008e14 <I2C_Slave_ISR_DMA+0x24>
 8008e10:	2302      	movs	r3, #2
 8008e12:	e0c0      	b.n	8008f96 <I2C_Slave_ISR_DMA+0x1a6>
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	2201      	movs	r2, #1
 8008e18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8008e1c:	68bb      	ldr	r3, [r7, #8]
 8008e1e:	f003 0320 	and.w	r3, r3, #32
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d009      	beq.n	8008e3a <I2C_Slave_ISR_DMA+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d004      	beq.n	8008e3a <I2C_Slave_ISR_DMA+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8008e30:	68b9      	ldr	r1, [r7, #8]
 8008e32:	68f8      	ldr	r0, [r7, #12]
 8008e34:	f000 faee 	bl	8009414 <I2C_ITSlaveCplt>
 8008e38:	e0a8      	b.n	8008f8c <I2C_Slave_ISR_DMA+0x19c>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8008e3a:	68bb      	ldr	r3, [r7, #8]
 8008e3c:	f003 0310 	and.w	r3, r3, #16
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	f000 8095 	beq.w	8008f70 <I2C_Slave_ISR_DMA+0x180>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	f000 808f 	beq.w	8008f70 <I2C_Slave_ISR_DMA+0x180>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d104      	bne.n	8008e66 <I2C_Slave_ISR_DMA+0x76>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d07d      	beq.n	8008f62 <I2C_Slave_ISR_DMA+0x172>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d00c      	beq.n	8008e88 <I2C_Slave_ISR_DMA+0x98>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d007      	beq.n	8008e88 <I2C_Slave_ISR_DMA+0x98>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	685b      	ldr	r3, [r3, #4]
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d101      	bne.n	8008e88 <I2C_Slave_ISR_DMA+0x98>
          {
            treatdmanack = 1U;
 8008e84:	2301      	movs	r3, #1
 8008e86:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d00c      	beq.n	8008eaa <I2C_Slave_ISR_DMA+0xba>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d007      	beq.n	8008eaa <I2C_Slave_ISR_DMA+0xba>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	685b      	ldr	r3, [r3, #4]
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d101      	bne.n	8008eaa <I2C_Slave_ISR_DMA+0xba>
          {
            treatdmanack = 1U;
 8008ea6:	2301      	movs	r3, #1
 8008ea8:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8008eaa:	69fb      	ldr	r3, [r7, #28]
 8008eac:	2b01      	cmp	r3, #1
 8008eae:	d128      	bne.n	8008f02 <I2C_Slave_ISR_DMA+0x112>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008eb6:	b2db      	uxtb	r3, r3
 8008eb8:	2b28      	cmp	r3, #40	@ 0x28
 8008eba:	d108      	bne.n	8008ece <I2C_Slave_ISR_DMA+0xde>
 8008ebc:	69bb      	ldr	r3, [r7, #24]
 8008ebe:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008ec2:	d104      	bne.n	8008ece <I2C_Slave_ISR_DMA+0xde>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8008ec4:	68b9      	ldr	r1, [r7, #8]
 8008ec6:	68f8      	ldr	r0, [r7, #12]
 8008ec8:	f000 fc08 	bl	80096dc <I2C_ITListenCplt>
 8008ecc:	e048      	b.n	8008f60 <I2C_Slave_ISR_DMA+0x170>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008ed4:	b2db      	uxtb	r3, r3
 8008ed6:	2b29      	cmp	r3, #41	@ 0x29
 8008ed8:	d10e      	bne.n	8008ef8 <I2C_Slave_ISR_DMA+0x108>
 8008eda:	69bb      	ldr	r3, [r7, #24]
 8008edc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8008ee0:	d00a      	beq.n	8008ef8 <I2C_Slave_ISR_DMA+0x108>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	2210      	movs	r2, #16
 8008ee8:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8008eea:	68f8      	ldr	r0, [r7, #12]
 8008eec:	f000 fd61 	bl	80099b2 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8008ef0:	68f8      	ldr	r0, [r7, #12]
 8008ef2:	f000 f96a 	bl	80091ca <I2C_ITSlaveSeqCplt>
 8008ef6:	e033      	b.n	8008f60 <I2C_Slave_ISR_DMA+0x170>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	2210      	movs	r2, #16
 8008efe:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8008f00:	e034      	b.n	8008f6c <I2C_Slave_ISR_DMA+0x17c>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	2210      	movs	r2, #16
 8008f08:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008f0e:	f043 0204 	orr.w	r2, r3, #4
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008f1c:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8008f1e:	69bb      	ldr	r3, [r7, #24]
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d003      	beq.n	8008f2c <I2C_Slave_ISR_DMA+0x13c>
 8008f24:	69bb      	ldr	r3, [r7, #24]
 8008f26:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008f2a:	d11f      	bne.n	8008f6c <I2C_Slave_ISR_DMA+0x17c>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8008f2c:	7dfb      	ldrb	r3, [r7, #23]
 8008f2e:	2b21      	cmp	r3, #33	@ 0x21
 8008f30:	d002      	beq.n	8008f38 <I2C_Slave_ISR_DMA+0x148>
 8008f32:	7dfb      	ldrb	r3, [r7, #23]
 8008f34:	2b29      	cmp	r3, #41	@ 0x29
 8008f36:	d103      	bne.n	8008f40 <I2C_Slave_ISR_DMA+0x150>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	2221      	movs	r2, #33	@ 0x21
 8008f3c:	631a      	str	r2, [r3, #48]	@ 0x30
 8008f3e:	e008      	b.n	8008f52 <I2C_Slave_ISR_DMA+0x162>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8008f40:	7dfb      	ldrb	r3, [r7, #23]
 8008f42:	2b22      	cmp	r3, #34	@ 0x22
 8008f44:	d002      	beq.n	8008f4c <I2C_Slave_ISR_DMA+0x15c>
 8008f46:	7dfb      	ldrb	r3, [r7, #23]
 8008f48:	2b2a      	cmp	r3, #42	@ 0x2a
 8008f4a:	d102      	bne.n	8008f52 <I2C_Slave_ISR_DMA+0x162>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	2222      	movs	r2, #34	@ 0x22
 8008f50:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008f56:	4619      	mov	r1, r3
 8008f58:	68f8      	ldr	r0, [r7, #12]
 8008f5a:	f000 fc13 	bl	8009784 <I2C_ITError>
      if (treatdmanack == 1U)
 8008f5e:	e005      	b.n	8008f6c <I2C_Slave_ISR_DMA+0x17c>
 8008f60:	e004      	b.n	8008f6c <I2C_Slave_ISR_DMA+0x17c>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	2210      	movs	r2, #16
 8008f68:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8008f6a:	e00f      	b.n	8008f8c <I2C_Slave_ISR_DMA+0x19c>
      if (treatdmanack == 1U)
 8008f6c:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8008f6e:	e00d      	b.n	8008f8c <I2C_Slave_ISR_DMA+0x19c>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8008f70:	68bb      	ldr	r3, [r7, #8]
 8008f72:	f003 0308 	and.w	r3, r3, #8
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d008      	beq.n	8008f8c <I2C_Slave_ISR_DMA+0x19c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d003      	beq.n	8008f8c <I2C_Slave_ISR_DMA+0x19c>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8008f84:	68b9      	ldr	r1, [r7, #8]
 8008f86:	68f8      	ldr	r0, [r7, #12]
 8008f88:	f000 f85e 	bl	8009048 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	2200      	movs	r2, #0
 8008f90:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8008f94:	2300      	movs	r3, #0
}
 8008f96:	4618      	mov	r0, r3
 8008f98:	3720      	adds	r7, #32
 8008f9a:	46bd      	mov	sp, r7
 8008f9c:	bd80      	pop	{r7, pc}
	...

08008fa0 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8008fa0:	b580      	push	{r7, lr}
 8008fa2:	b086      	sub	sp, #24
 8008fa4:	af02      	add	r7, sp, #8
 8008fa6:	60f8      	str	r0, [r7, #12]
 8008fa8:	4608      	mov	r0, r1
 8008faa:	4611      	mov	r1, r2
 8008fac:	461a      	mov	r2, r3
 8008fae:	4603      	mov	r3, r0
 8008fb0:	817b      	strh	r3, [r7, #10]
 8008fb2:	460b      	mov	r3, r1
 8008fb4:	813b      	strh	r3, [r7, #8]
 8008fb6:	4613      	mov	r3, r2
 8008fb8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8008fba:	88fb      	ldrh	r3, [r7, #6]
 8008fbc:	b2da      	uxtb	r2, r3
 8008fbe:	8979      	ldrh	r1, [r7, #10]
 8008fc0:	4b20      	ldr	r3, [pc, #128]	@ (8009044 <I2C_RequestMemoryWrite+0xa4>)
 8008fc2:	9300      	str	r3, [sp, #0]
 8008fc4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8008fc8:	68f8      	ldr	r0, [r7, #12]
 8008fca:	f000 ff59 	bl	8009e80 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008fce:	69fa      	ldr	r2, [r7, #28]
 8008fd0:	69b9      	ldr	r1, [r7, #24]
 8008fd2:	68f8      	ldr	r0, [r7, #12]
 8008fd4:	f000 fdea 	bl	8009bac <I2C_WaitOnTXISFlagUntilTimeout>
 8008fd8:	4603      	mov	r3, r0
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d001      	beq.n	8008fe2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8008fde:	2301      	movs	r3, #1
 8008fe0:	e02c      	b.n	800903c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008fe2:	88fb      	ldrh	r3, [r7, #6]
 8008fe4:	2b01      	cmp	r3, #1
 8008fe6:	d105      	bne.n	8008ff4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008fe8:	893b      	ldrh	r3, [r7, #8]
 8008fea:	b2da      	uxtb	r2, r3
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	629a      	str	r2, [r3, #40]	@ 0x28
 8008ff2:	e015      	b.n	8009020 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8008ff4:	893b      	ldrh	r3, [r7, #8]
 8008ff6:	0a1b      	lsrs	r3, r3, #8
 8008ff8:	b29b      	uxth	r3, r3
 8008ffa:	b2da      	uxtb	r2, r3
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009002:	69fa      	ldr	r2, [r7, #28]
 8009004:	69b9      	ldr	r1, [r7, #24]
 8009006:	68f8      	ldr	r0, [r7, #12]
 8009008:	f000 fdd0 	bl	8009bac <I2C_WaitOnTXISFlagUntilTimeout>
 800900c:	4603      	mov	r3, r0
 800900e:	2b00      	cmp	r3, #0
 8009010:	d001      	beq.n	8009016 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8009012:	2301      	movs	r3, #1
 8009014:	e012      	b.n	800903c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009016:	893b      	ldrh	r3, [r7, #8]
 8009018:	b2da      	uxtb	r2, r3
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8009020:	69fb      	ldr	r3, [r7, #28]
 8009022:	9300      	str	r3, [sp, #0]
 8009024:	69bb      	ldr	r3, [r7, #24]
 8009026:	2200      	movs	r2, #0
 8009028:	2180      	movs	r1, #128	@ 0x80
 800902a:	68f8      	ldr	r0, [r7, #12]
 800902c:	f000 fd65 	bl	8009afa <I2C_WaitOnFlagUntilTimeout>
 8009030:	4603      	mov	r3, r0
 8009032:	2b00      	cmp	r3, #0
 8009034:	d001      	beq.n	800903a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8009036:	2301      	movs	r3, #1
 8009038:	e000      	b.n	800903c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800903a:	2300      	movs	r3, #0
}
 800903c:	4618      	mov	r0, r3
 800903e:	3710      	adds	r7, #16
 8009040:	46bd      	mov	sp, r7
 8009042:	bd80      	pop	{r7, pc}
 8009044:	80002000 	.word	0x80002000

08009048 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8009048:	b580      	push	{r7, lr}
 800904a:	b084      	sub	sp, #16
 800904c:	af00      	add	r7, sp, #0
 800904e:	6078      	str	r0, [r7, #4]
 8009050:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009058:	b2db      	uxtb	r3, r3
 800905a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800905e:	2b28      	cmp	r3, #40	@ 0x28
 8009060:	d16a      	bne.n	8009138 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	699b      	ldr	r3, [r3, #24]
 8009068:	0c1b      	lsrs	r3, r3, #16
 800906a:	b2db      	uxtb	r3, r3
 800906c:	f003 0301 	and.w	r3, r3, #1
 8009070:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	699b      	ldr	r3, [r3, #24]
 8009078:	0c1b      	lsrs	r3, r3, #16
 800907a:	b29b      	uxth	r3, r3
 800907c:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8009080:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	689b      	ldr	r3, [r3, #8]
 8009088:	b29b      	uxth	r3, r3
 800908a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800908e:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	68db      	ldr	r3, [r3, #12]
 8009096:	b29b      	uxth	r3, r3
 8009098:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800909c:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	68db      	ldr	r3, [r3, #12]
 80090a2:	2b02      	cmp	r3, #2
 80090a4:	d138      	bne.n	8009118 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 80090a6:	897b      	ldrh	r3, [r7, #10]
 80090a8:	09db      	lsrs	r3, r3, #7
 80090aa:	b29a      	uxth	r2, r3
 80090ac:	89bb      	ldrh	r3, [r7, #12]
 80090ae:	4053      	eors	r3, r2
 80090b0:	b29b      	uxth	r3, r3
 80090b2:	f003 0306 	and.w	r3, r3, #6
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d11c      	bne.n	80090f4 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 80090ba:	897b      	ldrh	r3, [r7, #10]
 80090bc:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80090c2:	1c5a      	adds	r2, r3, #1
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80090cc:	2b02      	cmp	r3, #2
 80090ce:	d13b      	bne.n	8009148 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	2200      	movs	r2, #0
 80090d4:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	2208      	movs	r2, #8
 80090dc:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	2200      	movs	r2, #0
 80090e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80090e6:	89ba      	ldrh	r2, [r7, #12]
 80090e8:	7bfb      	ldrb	r3, [r7, #15]
 80090ea:	4619      	mov	r1, r3
 80090ec:	6878      	ldr	r0, [r7, #4]
 80090ee:	f7ff fb3e 	bl	800876e <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80090f2:	e029      	b.n	8009148 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 80090f4:	893b      	ldrh	r3, [r7, #8]
 80090f6:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80090f8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80090fc:	6878      	ldr	r0, [r7, #4]
 80090fe:	f000 ff75 	bl	8009fec <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	2200      	movs	r2, #0
 8009106:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800910a:	89ba      	ldrh	r2, [r7, #12]
 800910c:	7bfb      	ldrb	r3, [r7, #15]
 800910e:	4619      	mov	r1, r3
 8009110:	6878      	ldr	r0, [r7, #4]
 8009112:	f7ff fb2c 	bl	800876e <HAL_I2C_AddrCallback>
}
 8009116:	e017      	b.n	8009148 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8009118:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800911c:	6878      	ldr	r0, [r7, #4]
 800911e:	f000 ff65 	bl	8009fec <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	2200      	movs	r2, #0
 8009126:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800912a:	89ba      	ldrh	r2, [r7, #12]
 800912c:	7bfb      	ldrb	r3, [r7, #15]
 800912e:	4619      	mov	r1, r3
 8009130:	6878      	ldr	r0, [r7, #4]
 8009132:	f7ff fb1c 	bl	800876e <HAL_I2C_AddrCallback>
}
 8009136:	e007      	b.n	8009148 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	2208      	movs	r2, #8
 800913e:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	2200      	movs	r2, #0
 8009144:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8009148:	bf00      	nop
 800914a:	3710      	adds	r7, #16
 800914c:	46bd      	mov	sp, r7
 800914e:	bd80      	pop	{r7, pc}

08009150 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8009150:	b580      	push	{r7, lr}
 8009152:	b082      	sub	sp, #8
 8009154:	af00      	add	r7, sp, #0
 8009156:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	2200      	movs	r2, #0
 800915c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009166:	b2db      	uxtb	r3, r3
 8009168:	2b21      	cmp	r3, #33	@ 0x21
 800916a:	d115      	bne.n	8009198 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	2220      	movs	r2, #32
 8009170:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	2211      	movs	r2, #17
 8009178:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	2200      	movs	r2, #0
 800917e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8009180:	2101      	movs	r1, #1
 8009182:	6878      	ldr	r0, [r7, #4]
 8009184:	f000 ff32 	bl	8009fec <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	2200      	movs	r2, #0
 800918c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8009190:	6878      	ldr	r0, [r7, #4]
 8009192:	f7ff fac4 	bl	800871e <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8009196:	e014      	b.n	80091c2 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	2220      	movs	r2, #32
 800919c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	2212      	movs	r2, #18
 80091a4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	2200      	movs	r2, #0
 80091aa:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80091ac:	2102      	movs	r1, #2
 80091ae:	6878      	ldr	r0, [r7, #4]
 80091b0:	f000 ff1c 	bl	8009fec <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	2200      	movs	r2, #0
 80091b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 80091bc:	6878      	ldr	r0, [r7, #4]
 80091be:	f7ff fab8 	bl	8008732 <HAL_I2C_MasterRxCpltCallback>
}
 80091c2:	bf00      	nop
 80091c4:	3708      	adds	r7, #8
 80091c6:	46bd      	mov	sp, r7
 80091c8:	bd80      	pop	{r7, pc}

080091ca <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80091ca:	b580      	push	{r7, lr}
 80091cc:	b084      	sub	sp, #16
 80091ce:	af00      	add	r7, sp, #0
 80091d0:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	2200      	movs	r2, #0
 80091de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d008      	beq.n	80091fe <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	681a      	ldr	r2, [r3, #0]
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80091fa:	601a      	str	r2, [r3, #0]
 80091fc:	e00c      	b.n	8009218 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009204:	2b00      	cmp	r3, #0
 8009206:	d007      	beq.n	8009218 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	681a      	ldr	r2, [r3, #0]
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8009216:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800921e:	b2db      	uxtb	r3, r3
 8009220:	2b29      	cmp	r3, #41	@ 0x29
 8009222:	d112      	bne.n	800924a <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	2228      	movs	r2, #40	@ 0x28
 8009228:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	2221      	movs	r2, #33	@ 0x21
 8009230:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8009232:	2101      	movs	r1, #1
 8009234:	6878      	ldr	r0, [r7, #4]
 8009236:	f000 fed9 	bl	8009fec <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	2200      	movs	r2, #0
 800923e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8009242:	6878      	ldr	r0, [r7, #4]
 8009244:	f7ff fa7f 	bl	8008746 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8009248:	e017      	b.n	800927a <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009250:	b2db      	uxtb	r3, r3
 8009252:	2b2a      	cmp	r3, #42	@ 0x2a
 8009254:	d111      	bne.n	800927a <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	2228      	movs	r2, #40	@ 0x28
 800925a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	2222      	movs	r2, #34	@ 0x22
 8009262:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8009264:	2102      	movs	r1, #2
 8009266:	6878      	ldr	r0, [r7, #4]
 8009268:	f000 fec0 	bl	8009fec <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	2200      	movs	r2, #0
 8009270:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8009274:	6878      	ldr	r0, [r7, #4]
 8009276:	f7ff fa70 	bl	800875a <HAL_I2C_SlaveRxCpltCallback>
}
 800927a:	bf00      	nop
 800927c:	3710      	adds	r7, #16
 800927e:	46bd      	mov	sp, r7
 8009280:	bd80      	pop	{r7, pc}
	...

08009284 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8009284:	b580      	push	{r7, lr}
 8009286:	b086      	sub	sp, #24
 8009288:	af00      	add	r7, sp, #0
 800928a:	6078      	str	r0, [r7, #4]
 800928c:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 800928e:	683b      	ldr	r3, [r7, #0]
 8009290:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	2220      	movs	r2, #32
 8009298:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80092a0:	b2db      	uxtb	r3, r3
 80092a2:	2b21      	cmp	r3, #33	@ 0x21
 80092a4:	d107      	bne.n	80092b6 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80092a6:	2101      	movs	r1, #1
 80092a8:	6878      	ldr	r0, [r7, #4]
 80092aa:	f000 fe9f 	bl	8009fec <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	2211      	movs	r2, #17
 80092b2:	631a      	str	r2, [r3, #48]	@ 0x30
 80092b4:	e00c      	b.n	80092d0 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80092bc:	b2db      	uxtb	r3, r3
 80092be:	2b22      	cmp	r3, #34	@ 0x22
 80092c0:	d106      	bne.n	80092d0 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80092c2:	2102      	movs	r1, #2
 80092c4:	6878      	ldr	r0, [r7, #4]
 80092c6:	f000 fe91 	bl	8009fec <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	2212      	movs	r2, #18
 80092ce:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	6859      	ldr	r1, [r3, #4]
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	681a      	ldr	r2, [r3, #0]
 80092da:	4b4c      	ldr	r3, [pc, #304]	@ (800940c <I2C_ITMasterCplt+0x188>)
 80092dc:	400b      	ands	r3, r1
 80092de:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	2200      	movs	r2, #0
 80092e4:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	4a49      	ldr	r2, [pc, #292]	@ (8009410 <I2C_ITMasterCplt+0x18c>)
 80092ea:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 80092ec:	697b      	ldr	r3, [r7, #20]
 80092ee:	f003 0310 	and.w	r3, r3, #16
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d009      	beq.n	800930a <I2C_ITMasterCplt+0x86>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	2210      	movs	r2, #16
 80092fc:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009302:	f043 0204 	orr.w	r2, r3, #4
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009310:	b2db      	uxtb	r3, r3
 8009312:	2b60      	cmp	r3, #96	@ 0x60
 8009314:	d10a      	bne.n	800932c <I2C_ITMasterCplt+0xa8>
 8009316:	697b      	ldr	r3, [r7, #20]
 8009318:	f003 0304 	and.w	r3, r3, #4
 800931c:	2b00      	cmp	r3, #0
 800931e:	d005      	beq.n	800932c <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009326:	b2db      	uxtb	r3, r3
 8009328:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 800932a:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800932c:	6878      	ldr	r0, [r7, #4]
 800932e:	f000 fb40 	bl	80099b2 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009336:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800933e:	b2db      	uxtb	r3, r3
 8009340:	2b60      	cmp	r3, #96	@ 0x60
 8009342:	d002      	beq.n	800934a <I2C_ITMasterCplt+0xc6>
 8009344:	693b      	ldr	r3, [r7, #16]
 8009346:	2b00      	cmp	r3, #0
 8009348:	d006      	beq.n	8009358 <I2C_ITMasterCplt+0xd4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800934e:	4619      	mov	r1, r3
 8009350:	6878      	ldr	r0, [r7, #4]
 8009352:	f000 fa17 	bl	8009784 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8009356:	e054      	b.n	8009402 <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800935e:	b2db      	uxtb	r3, r3
 8009360:	2b21      	cmp	r3, #33	@ 0x21
 8009362:	d124      	bne.n	80093ae <I2C_ITMasterCplt+0x12a>
    hi2c->State = HAL_I2C_STATE_READY;
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	2220      	movs	r2, #32
 8009368:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	2200      	movs	r2, #0
 8009370:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009378:	b2db      	uxtb	r3, r3
 800937a:	2b40      	cmp	r3, #64	@ 0x40
 800937c:	d10b      	bne.n	8009396 <I2C_ITMasterCplt+0x112>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	2200      	movs	r2, #0
 8009382:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	2200      	movs	r2, #0
 800938a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 800938e:	6878      	ldr	r0, [r7, #4]
 8009390:	f7ff fa05 	bl	800879e <HAL_I2C_MemTxCpltCallback>
}
 8009394:	e035      	b.n	8009402 <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	2200      	movs	r2, #0
 800939a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	2200      	movs	r2, #0
 80093a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80093a6:	6878      	ldr	r0, [r7, #4]
 80093a8:	f7ff f9b9 	bl	800871e <HAL_I2C_MasterTxCpltCallback>
}
 80093ac:	e029      	b.n	8009402 <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80093b4:	b2db      	uxtb	r3, r3
 80093b6:	2b22      	cmp	r3, #34	@ 0x22
 80093b8:	d123      	bne.n	8009402 <I2C_ITMasterCplt+0x17e>
    hi2c->State = HAL_I2C_STATE_READY;
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	2220      	movs	r2, #32
 80093be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	2200      	movs	r2, #0
 80093c6:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80093ce:	b2db      	uxtb	r3, r3
 80093d0:	2b40      	cmp	r3, #64	@ 0x40
 80093d2:	d10b      	bne.n	80093ec <I2C_ITMasterCplt+0x168>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	2200      	movs	r2, #0
 80093d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	2200      	movs	r2, #0
 80093e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 80093e4:	6878      	ldr	r0, [r7, #4]
 80093e6:	f7fb fda7 	bl	8004f38 <HAL_I2C_MemRxCpltCallback>
}
 80093ea:	e00a      	b.n	8009402 <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	2200      	movs	r2, #0
 80093f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	2200      	movs	r2, #0
 80093f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80093fc:	6878      	ldr	r0, [r7, #4]
 80093fe:	f7ff f998 	bl	8008732 <HAL_I2C_MasterRxCpltCallback>
}
 8009402:	bf00      	nop
 8009404:	3718      	adds	r7, #24
 8009406:	46bd      	mov	sp, r7
 8009408:	bd80      	pop	{r7, pc}
 800940a:	bf00      	nop
 800940c:	fe00e800 	.word	0xfe00e800
 8009410:	ffff0000 	.word	0xffff0000

08009414 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8009414:	b580      	push	{r7, lr}
 8009416:	b086      	sub	sp, #24
 8009418:	af00      	add	r7, sp, #0
 800941a:	6078      	str	r0, [r7, #4]
 800941c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8009426:	683b      	ldr	r3, [r7, #0]
 8009428:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800942e:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009436:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	2220      	movs	r2, #32
 800943e:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8009440:	7afb      	ldrb	r3, [r7, #11]
 8009442:	2b21      	cmp	r3, #33	@ 0x21
 8009444:	d002      	beq.n	800944c <I2C_ITSlaveCplt+0x38>
 8009446:	7afb      	ldrb	r3, [r7, #11]
 8009448:	2b29      	cmp	r3, #41	@ 0x29
 800944a:	d108      	bne.n	800945e <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800944c:	f248 0101 	movw	r1, #32769	@ 0x8001
 8009450:	6878      	ldr	r0, [r7, #4]
 8009452:	f000 fdcb 	bl	8009fec <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	2221      	movs	r2, #33	@ 0x21
 800945a:	631a      	str	r2, [r3, #48]	@ 0x30
 800945c:	e019      	b.n	8009492 <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800945e:	7afb      	ldrb	r3, [r7, #11]
 8009460:	2b22      	cmp	r3, #34	@ 0x22
 8009462:	d002      	beq.n	800946a <I2C_ITSlaveCplt+0x56>
 8009464:	7afb      	ldrb	r3, [r7, #11]
 8009466:	2b2a      	cmp	r3, #42	@ 0x2a
 8009468:	d108      	bne.n	800947c <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800946a:	f248 0102 	movw	r1, #32770	@ 0x8002
 800946e:	6878      	ldr	r0, [r7, #4]
 8009470:	f000 fdbc 	bl	8009fec <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	2222      	movs	r2, #34	@ 0x22
 8009478:	631a      	str	r2, [r3, #48]	@ 0x30
 800947a:	e00a      	b.n	8009492 <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 800947c:	7afb      	ldrb	r3, [r7, #11]
 800947e:	2b28      	cmp	r3, #40	@ 0x28
 8009480:	d107      	bne.n	8009492 <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8009482:	f248 0103 	movw	r1, #32771	@ 0x8003
 8009486:	6878      	ldr	r0, [r7, #4]
 8009488:	f000 fdb0 	bl	8009fec <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	2200      	movs	r2, #0
 8009490:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	685a      	ldr	r2, [r3, #4]
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80094a0:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	6859      	ldr	r1, [r3, #4]
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	681a      	ldr	r2, [r3, #0]
 80094ac:	4b89      	ldr	r3, [pc, #548]	@ (80096d4 <I2C_ITSlaveCplt+0x2c0>)
 80094ae:	400b      	ands	r3, r1
 80094b0:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80094b2:	6878      	ldr	r0, [r7, #4]
 80094b4:	f000 fa7d 	bl	80099b2 <I2C_Flush_TXDR>

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80094b8:	693b      	ldr	r3, [r7, #16]
 80094ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d013      	beq.n	80094ea <I2C_ITSlaveCplt+0xd6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	681a      	ldr	r2, [r3, #0]
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80094d0:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d01f      	beq.n	800951a <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	685b      	ldr	r3, [r3, #4]
 80094e2:	b29a      	uxth	r2, r3
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80094e8:	e017      	b.n	800951a <I2C_ITSlaveCplt+0x106>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80094ea:	693b      	ldr	r3, [r7, #16]
 80094ec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d012      	beq.n	800951a <I2C_ITSlaveCplt+0x106>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	681a      	ldr	r2, [r3, #0]
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8009502:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009508:	2b00      	cmp	r3, #0
 800950a:	d006      	beq.n	800951a <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	685b      	ldr	r3, [r3, #4]
 8009514:	b29a      	uxth	r2, r3
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	855a      	strh	r2, [r3, #42]	@ 0x2a
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800951a:	697b      	ldr	r3, [r7, #20]
 800951c:	f003 0304 	and.w	r3, r3, #4
 8009520:	2b00      	cmp	r3, #0
 8009522:	d020      	beq.n	8009566 <I2C_ITSlaveCplt+0x152>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8009524:	697b      	ldr	r3, [r7, #20]
 8009526:	f023 0304 	bic.w	r3, r3, #4
 800952a:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009536:	b2d2      	uxtb	r2, r2
 8009538:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800953e:	1c5a      	adds	r2, r3, #1
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009548:	2b00      	cmp	r3, #0
 800954a:	d00c      	beq.n	8009566 <I2C_ITSlaveCplt+0x152>
    {
      hi2c->XferSize--;
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009550:	3b01      	subs	r3, #1
 8009552:	b29a      	uxth	r2, r3
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800955c:	b29b      	uxth	r3, r3
 800955e:	3b01      	subs	r3, #1
 8009560:	b29a      	uxth	r2, r3
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800956a:	b29b      	uxth	r3, r3
 800956c:	2b00      	cmp	r3, #0
 800956e:	d005      	beq.n	800957c <I2C_ITSlaveCplt+0x168>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009574:	f043 0204 	orr.w	r2, r3, #4
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800957c:	697b      	ldr	r3, [r7, #20]
 800957e:	f003 0310 	and.w	r3, r3, #16
 8009582:	2b00      	cmp	r3, #0
 8009584:	d049      	beq.n	800961a <I2C_ITSlaveCplt+0x206>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8009586:	693b      	ldr	r3, [r7, #16]
 8009588:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800958c:	2b00      	cmp	r3, #0
 800958e:	d044      	beq.n	800961a <I2C_ITSlaveCplt+0x206>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009594:	b29b      	uxth	r3, r3
 8009596:	2b00      	cmp	r3, #0
 8009598:	d128      	bne.n	80095ec <I2C_ITSlaveCplt+0x1d8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80095a0:	b2db      	uxtb	r3, r3
 80095a2:	2b28      	cmp	r3, #40	@ 0x28
 80095a4:	d108      	bne.n	80095b8 <I2C_ITSlaveCplt+0x1a4>
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80095ac:	d104      	bne.n	80095b8 <I2C_ITSlaveCplt+0x1a4>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80095ae:	6979      	ldr	r1, [r7, #20]
 80095b0:	6878      	ldr	r0, [r7, #4]
 80095b2:	f000 f893 	bl	80096dc <I2C_ITListenCplt>
 80095b6:	e030      	b.n	800961a <I2C_ITSlaveCplt+0x206>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80095be:	b2db      	uxtb	r3, r3
 80095c0:	2b29      	cmp	r3, #41	@ 0x29
 80095c2:	d10e      	bne.n	80095e2 <I2C_ITSlaveCplt+0x1ce>
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80095ca:	d00a      	beq.n	80095e2 <I2C_ITSlaveCplt+0x1ce>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	2210      	movs	r2, #16
 80095d2:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80095d4:	6878      	ldr	r0, [r7, #4]
 80095d6:	f000 f9ec 	bl	80099b2 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80095da:	6878      	ldr	r0, [r7, #4]
 80095dc:	f7ff fdf5 	bl	80091ca <I2C_ITSlaveSeqCplt>
 80095e0:	e01b      	b.n	800961a <I2C_ITSlaveCplt+0x206>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	2210      	movs	r2, #16
 80095e8:	61da      	str	r2, [r3, #28]
 80095ea:	e016      	b.n	800961a <I2C_ITSlaveCplt+0x206>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	2210      	movs	r2, #16
 80095f2:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80095f8:	f043 0204 	orr.w	r2, r3, #4
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	2b00      	cmp	r3, #0
 8009604:	d003      	beq.n	800960e <I2C_ITSlaveCplt+0x1fa>
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800960c:	d105      	bne.n	800961a <I2C_ITSlaveCplt+0x206>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009612:	4619      	mov	r1, r3
 8009614:	6878      	ldr	r0, [r7, #4]
 8009616:	f000 f8b5 	bl	8009784 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	2200      	movs	r2, #0
 800961e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	2200      	movs	r2, #0
 8009626:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800962c:	2b00      	cmp	r3, #0
 800962e:	d010      	beq.n	8009652 <I2C_ITSlaveCplt+0x23e>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009634:	4619      	mov	r1, r3
 8009636:	6878      	ldr	r0, [r7, #4]
 8009638:	f000 f8a4 	bl	8009784 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009642:	b2db      	uxtb	r3, r3
 8009644:	2b28      	cmp	r3, #40	@ 0x28
 8009646:	d141      	bne.n	80096cc <I2C_ITSlaveCplt+0x2b8>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8009648:	6979      	ldr	r1, [r7, #20]
 800964a:	6878      	ldr	r0, [r7, #4]
 800964c:	f000 f846 	bl	80096dc <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8009650:	e03c      	b.n	80096cc <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009656:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800965a:	d014      	beq.n	8009686 <I2C_ITSlaveCplt+0x272>
    I2C_ITSlaveSeqCplt(hi2c);
 800965c:	6878      	ldr	r0, [r7, #4]
 800965e:	f7ff fdb4 	bl	80091ca <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	4a1c      	ldr	r2, [pc, #112]	@ (80096d8 <I2C_ITSlaveCplt+0x2c4>)
 8009666:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	2220      	movs	r2, #32
 800966c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	2200      	movs	r2, #0
 8009674:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	2200      	movs	r2, #0
 800967a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800967e:	6878      	ldr	r0, [r7, #4]
 8009680:	f7ff f883 	bl	800878a <HAL_I2C_ListenCpltCallback>
}
 8009684:	e022      	b.n	80096cc <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800968c:	b2db      	uxtb	r3, r3
 800968e:	2b22      	cmp	r3, #34	@ 0x22
 8009690:	d10e      	bne.n	80096b0 <I2C_ITSlaveCplt+0x29c>
    hi2c->State = HAL_I2C_STATE_READY;
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	2220      	movs	r2, #32
 8009696:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	2200      	movs	r2, #0
 800969e:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	2200      	movs	r2, #0
 80096a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80096a8:	6878      	ldr	r0, [r7, #4]
 80096aa:	f7ff f856 	bl	800875a <HAL_I2C_SlaveRxCpltCallback>
}
 80096ae:	e00d      	b.n	80096cc <I2C_ITSlaveCplt+0x2b8>
    hi2c->State = HAL_I2C_STATE_READY;
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	2220      	movs	r2, #32
 80096b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	2200      	movs	r2, #0
 80096bc:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	2200      	movs	r2, #0
 80096c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80096c6:	6878      	ldr	r0, [r7, #4]
 80096c8:	f7ff f83d 	bl	8008746 <HAL_I2C_SlaveTxCpltCallback>
}
 80096cc:	bf00      	nop
 80096ce:	3718      	adds	r7, #24
 80096d0:	46bd      	mov	sp, r7
 80096d2:	bd80      	pop	{r7, pc}
 80096d4:	fe00e800 	.word	0xfe00e800
 80096d8:	ffff0000 	.word	0xffff0000

080096dc <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80096dc:	b580      	push	{r7, lr}
 80096de:	b082      	sub	sp, #8
 80096e0:	af00      	add	r7, sp, #0
 80096e2:	6078      	str	r0, [r7, #4]
 80096e4:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	4a25      	ldr	r2, [pc, #148]	@ (8009780 <I2C_ITListenCplt+0xa4>)
 80096ea:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	2200      	movs	r2, #0
 80096f0:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	2220      	movs	r2, #32
 80096f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	2200      	movs	r2, #0
 80096fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	2200      	movs	r2, #0
 8009706:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8009708:	683b      	ldr	r3, [r7, #0]
 800970a:	f003 0304 	and.w	r3, r3, #4
 800970e:	2b00      	cmp	r3, #0
 8009710:	d022      	beq.n	8009758 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800971c:	b2d2      	uxtb	r2, r2
 800971e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009724:	1c5a      	adds	r2, r3, #1
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800972e:	2b00      	cmp	r3, #0
 8009730:	d012      	beq.n	8009758 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009736:	3b01      	subs	r3, #1
 8009738:	b29a      	uxth	r2, r3
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009742:	b29b      	uxth	r3, r3
 8009744:	3b01      	subs	r3, #1
 8009746:	b29a      	uxth	r2, r3
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009750:	f043 0204 	orr.w	r2, r3, #4
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8009758:	f248 0103 	movw	r1, #32771	@ 0x8003
 800975c:	6878      	ldr	r0, [r7, #4]
 800975e:	f000 fc45 	bl	8009fec <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	2210      	movs	r2, #16
 8009768:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	2200      	movs	r2, #0
 800976e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8009772:	6878      	ldr	r0, [r7, #4]
 8009774:	f7ff f809 	bl	800878a <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8009778:	bf00      	nop
 800977a:	3708      	adds	r7, #8
 800977c:	46bd      	mov	sp, r7
 800977e:	bd80      	pop	{r7, pc}
 8009780:	ffff0000 	.word	0xffff0000

08009784 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8009784:	b580      	push	{r7, lr}
 8009786:	b084      	sub	sp, #16
 8009788:	af00      	add	r7, sp, #0
 800978a:	6078      	str	r0, [r7, #4]
 800978c:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009794:	73fb      	strb	r3, [r7, #15]
#if defined(HAL_DMA_MODULE_ENABLED)
  uint32_t tmppreviousstate;
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	2200      	movs	r2, #0
 800979a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	4a6d      	ldr	r2, [pc, #436]	@ (8009958 <I2C_ITError+0x1d4>)
 80097a2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	2200      	movs	r2, #0
 80097a8:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80097ae:	683b      	ldr	r3, [r7, #0]
 80097b0:	431a      	orrs	r2, r3
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80097b6:	7bfb      	ldrb	r3, [r7, #15]
 80097b8:	2b28      	cmp	r3, #40	@ 0x28
 80097ba:	d005      	beq.n	80097c8 <I2C_ITError+0x44>
 80097bc:	7bfb      	ldrb	r3, [r7, #15]
 80097be:	2b29      	cmp	r3, #41	@ 0x29
 80097c0:	d002      	beq.n	80097c8 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80097c2:	7bfb      	ldrb	r3, [r7, #15]
 80097c4:	2b2a      	cmp	r3, #42	@ 0x2a
 80097c6:	d10b      	bne.n	80097e0 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80097c8:	2103      	movs	r1, #3
 80097ca:	6878      	ldr	r0, [r7, #4]
 80097cc:	f000 fc0e 	bl	8009fec <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	2228      	movs	r2, #40	@ 0x28
 80097d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	4a60      	ldr	r2, [pc, #384]	@ (800995c <I2C_ITError+0x1d8>)
 80097dc:	635a      	str	r2, [r3, #52]	@ 0x34
 80097de:	e030      	b.n	8009842 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80097e0:	f248 0103 	movw	r1, #32771	@ 0x8003
 80097e4:	6878      	ldr	r0, [r7, #4]
 80097e6:	f000 fc01 	bl	8009fec <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80097ea:	6878      	ldr	r0, [r7, #4]
 80097ec:	f000 f8e1 	bl	80099b2 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80097f6:	b2db      	uxtb	r3, r3
 80097f8:	2b60      	cmp	r3, #96	@ 0x60
 80097fa:	d01f      	beq.n	800983c <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	2220      	movs	r2, #32
 8009800:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	699b      	ldr	r3, [r3, #24]
 800980a:	f003 0320 	and.w	r3, r3, #32
 800980e:	2b20      	cmp	r3, #32
 8009810:	d114      	bne.n	800983c <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	699b      	ldr	r3, [r3, #24]
 8009818:	f003 0310 	and.w	r3, r3, #16
 800981c:	2b10      	cmp	r3, #16
 800981e:	d109      	bne.n	8009834 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	2210      	movs	r2, #16
 8009826:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800982c:	f043 0204 	orr.w	r2, r3, #4
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	2220      	movs	r2, #32
 800983a:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	2200      	movs	r2, #0
 8009840:	635a      	str	r2, [r3, #52]	@ 0x34
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009846:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800984c:	2b00      	cmp	r3, #0
 800984e:	d039      	beq.n	80098c4 <I2C_ITError+0x140>
 8009850:	68bb      	ldr	r3, [r7, #8]
 8009852:	2b11      	cmp	r3, #17
 8009854:	d002      	beq.n	800985c <I2C_ITError+0xd8>
 8009856:	68bb      	ldr	r3, [r7, #8]
 8009858:	2b21      	cmp	r3, #33	@ 0x21
 800985a:	d133      	bne.n	80098c4 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009866:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800986a:	d107      	bne.n	800987c <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	681a      	ldr	r2, [r3, #0]
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800987a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009880:	4618      	mov	r0, r3
 8009882:	f7fe f9ca 	bl	8007c1a <HAL_DMA_GetState>
 8009886:	4603      	mov	r3, r0
 8009888:	2b01      	cmp	r3, #1
 800988a:	d017      	beq.n	80098bc <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009890:	4a33      	ldr	r2, [pc, #204]	@ (8009960 <I2C_ITError+0x1dc>)
 8009892:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	2200      	movs	r2, #0
 8009898:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80098a0:	4618      	mov	r0, r3
 80098a2:	f7fe f8ac 	bl	80079fe <HAL_DMA_Abort_IT>
 80098a6:	4603      	mov	r3, r0
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d04d      	beq.n	8009948 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80098b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80098b2:	687a      	ldr	r2, [r7, #4]
 80098b4:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80098b6:	4610      	mov	r0, r2
 80098b8:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80098ba:	e045      	b.n	8009948 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80098bc:	6878      	ldr	r0, [r7, #4]
 80098be:	f000 f851 	bl	8009964 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80098c2:	e041      	b.n	8009948 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d039      	beq.n	8009940 <I2C_ITError+0x1bc>
 80098cc:	68bb      	ldr	r3, [r7, #8]
 80098ce:	2b12      	cmp	r3, #18
 80098d0:	d002      	beq.n	80098d8 <I2C_ITError+0x154>
 80098d2:	68bb      	ldr	r3, [r7, #8]
 80098d4:	2b22      	cmp	r3, #34	@ 0x22
 80098d6:	d133      	bne.n	8009940 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80098e2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80098e6:	d107      	bne.n	80098f8 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	681a      	ldr	r2, [r3, #0]
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80098f6:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80098fc:	4618      	mov	r0, r3
 80098fe:	f7fe f98c 	bl	8007c1a <HAL_DMA_GetState>
 8009902:	4603      	mov	r3, r0
 8009904:	2b01      	cmp	r3, #1
 8009906:	d017      	beq.n	8009938 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800990c:	4a14      	ldr	r2, [pc, #80]	@ (8009960 <I2C_ITError+0x1dc>)
 800990e:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	2200      	movs	r2, #0
 8009914:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800991c:	4618      	mov	r0, r3
 800991e:	f7fe f86e 	bl	80079fe <HAL_DMA_Abort_IT>
 8009922:	4603      	mov	r3, r0
 8009924:	2b00      	cmp	r3, #0
 8009926:	d011      	beq.n	800994c <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800992c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800992e:	687a      	ldr	r2, [r7, #4]
 8009930:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8009932:	4610      	mov	r0, r2
 8009934:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8009936:	e009      	b.n	800994c <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8009938:	6878      	ldr	r0, [r7, #4]
 800993a:	f000 f813 	bl	8009964 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800993e:	e005      	b.n	800994c <I2C_ITError+0x1c8>
    }
  }
  else
#endif /* HAL_DMA_MODULE_ENABLED */
  {
    I2C_TreatErrorCallback(hi2c);
 8009940:	6878      	ldr	r0, [r7, #4]
 8009942:	f000 f80f 	bl	8009964 <I2C_TreatErrorCallback>
  }
}
 8009946:	e002      	b.n	800994e <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8009948:	bf00      	nop
 800994a:	e000      	b.n	800994e <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800994c:	bf00      	nop
}
 800994e:	bf00      	nop
 8009950:	3710      	adds	r7, #16
 8009952:	46bd      	mov	sp, r7
 8009954:	bd80      	pop	{r7, pc}
 8009956:	bf00      	nop
 8009958:	ffff0000 	.word	0xffff0000
 800995c:	080087db 	.word	0x080087db
 8009960:	08009abf 	.word	0x08009abf

08009964 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8009964:	b580      	push	{r7, lr}
 8009966:	b082      	sub	sp, #8
 8009968:	af00      	add	r7, sp, #0
 800996a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009972:	b2db      	uxtb	r3, r3
 8009974:	2b60      	cmp	r3, #96	@ 0x60
 8009976:	d10e      	bne.n	8009996 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	2220      	movs	r2, #32
 800997c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	2200      	movs	r2, #0
 8009984:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	2200      	movs	r2, #0
 800998a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800998e:	6878      	ldr	r0, [r7, #4]
 8009990:	f7fe ff19 	bl	80087c6 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8009994:	e009      	b.n	80099aa <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	2200      	movs	r2, #0
 800999a:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	2200      	movs	r2, #0
 80099a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80099a4:	6878      	ldr	r0, [r7, #4]
 80099a6:	f7fe ff04 	bl	80087b2 <HAL_I2C_ErrorCallback>
}
 80099aa:	bf00      	nop
 80099ac:	3708      	adds	r7, #8
 80099ae:	46bd      	mov	sp, r7
 80099b0:	bd80      	pop	{r7, pc}

080099b2 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80099b2:	b480      	push	{r7}
 80099b4:	b083      	sub	sp, #12
 80099b6:	af00      	add	r7, sp, #0
 80099b8:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	699b      	ldr	r3, [r3, #24]
 80099c0:	f003 0302 	and.w	r3, r3, #2
 80099c4:	2b02      	cmp	r3, #2
 80099c6:	d103      	bne.n	80099d0 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	2200      	movs	r2, #0
 80099ce:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	699b      	ldr	r3, [r3, #24]
 80099d6:	f003 0301 	and.w	r3, r3, #1
 80099da:	2b01      	cmp	r3, #1
 80099dc:	d007      	beq.n	80099ee <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	699a      	ldr	r2, [r3, #24]
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	f042 0201 	orr.w	r2, r2, #1
 80099ec:	619a      	str	r2, [r3, #24]
  }
}
 80099ee:	bf00      	nop
 80099f0:	370c      	adds	r7, #12
 80099f2:	46bd      	mov	sp, r7
 80099f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f8:	4770      	bx	lr

080099fa <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80099fa:	b580      	push	{r7, lr}
 80099fc:	b084      	sub	sp, #16
 80099fe:	af00      	add	r7, sp, #0
 8009a00:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a06:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	681a      	ldr	r2, [r3, #0]
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8009a16:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009a1c:	b29b      	uxth	r3, r3
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d104      	bne.n	8009a2c <I2C_DMAMasterReceiveCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8009a22:	2120      	movs	r1, #32
 8009a24:	68f8      	ldr	r0, [r7, #12]
 8009a26:	f000 fa5d 	bl	8009ee4 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8009a2a:	e02d      	b.n	8009a88 <I2C_DMAMasterReceiveCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a30:	68fa      	ldr	r2, [r7, #12]
 8009a32:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8009a34:	441a      	add	r2, r3
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009a3e:	b29b      	uxth	r3, r3
 8009a40:	2bff      	cmp	r3, #255	@ 0xff
 8009a42:	d903      	bls.n	8009a4c <I2C_DMAMasterReceiveCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	22ff      	movs	r2, #255	@ 0xff
 8009a48:	851a      	strh	r2, [r3, #40]	@ 0x28
 8009a4a:	e004      	b.n	8009a56 <I2C_DMAMasterReceiveCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009a50:	b29a      	uxth	r2, r3
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	3324      	adds	r3, #36	@ 0x24
 8009a60:	4619      	mov	r1, r3
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a66:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8009a6c:	f7fd ff4c 	bl	8007908 <HAL_DMA_Start_IT>
 8009a70:	4603      	mov	r3, r0
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d004      	beq.n	8009a80 <I2C_DMAMasterReceiveCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8009a76:	2110      	movs	r1, #16
 8009a78:	68f8      	ldr	r0, [r7, #12]
 8009a7a:	f7ff fe83 	bl	8009784 <I2C_ITError>
}
 8009a7e:	e003      	b.n	8009a88 <I2C_DMAMasterReceiveCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8009a80:	2140      	movs	r1, #64	@ 0x40
 8009a82:	68f8      	ldr	r0, [r7, #12]
 8009a84:	f000 fa2e 	bl	8009ee4 <I2C_Enable_IRQ>
}
 8009a88:	bf00      	nop
 8009a8a:	3710      	adds	r7, #16
 8009a8c:	46bd      	mov	sp, r7
 8009a8e:	bd80      	pop	{r7, pc}

08009a90 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8009a90:	b580      	push	{r7, lr}
 8009a92:	b084      	sub	sp, #16
 8009a94:	af00      	add	r7, sp, #0
 8009a96:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a9c:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	685a      	ldr	r2, [r3, #4]
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009aac:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8009aae:	2110      	movs	r1, #16
 8009ab0:	68f8      	ldr	r0, [r7, #12]
 8009ab2:	f7ff fe67 	bl	8009784 <I2C_ITError>
}
 8009ab6:	bf00      	nop
 8009ab8:	3710      	adds	r7, #16
 8009aba:	46bd      	mov	sp, r7
 8009abc:	bd80      	pop	{r7, pc}

08009abe <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8009abe:	b580      	push	{r7, lr}
 8009ac0:	b084      	sub	sp, #16
 8009ac2:	af00      	add	r7, sp, #0
 8009ac4:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009aca:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d003      	beq.n	8009adc <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ad8:	2200      	movs	r2, #0
 8009ada:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d003      	beq.n	8009aec <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009ae8:	2200      	movs	r2, #0
 8009aea:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8009aec:	68f8      	ldr	r0, [r7, #12]
 8009aee:	f7ff ff39 	bl	8009964 <I2C_TreatErrorCallback>
}
 8009af2:	bf00      	nop
 8009af4:	3710      	adds	r7, #16
 8009af6:	46bd      	mov	sp, r7
 8009af8:	bd80      	pop	{r7, pc}

08009afa <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8009afa:	b580      	push	{r7, lr}
 8009afc:	b084      	sub	sp, #16
 8009afe:	af00      	add	r7, sp, #0
 8009b00:	60f8      	str	r0, [r7, #12]
 8009b02:	60b9      	str	r1, [r7, #8]
 8009b04:	603b      	str	r3, [r7, #0]
 8009b06:	4613      	mov	r3, r2
 8009b08:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009b0a:	e03b      	b.n	8009b84 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009b0c:	69ba      	ldr	r2, [r7, #24]
 8009b0e:	6839      	ldr	r1, [r7, #0]
 8009b10:	68f8      	ldr	r0, [r7, #12]
 8009b12:	f000 f8d5 	bl	8009cc0 <I2C_IsErrorOccurred>
 8009b16:	4603      	mov	r3, r0
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d001      	beq.n	8009b20 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8009b1c:	2301      	movs	r3, #1
 8009b1e:	e041      	b.n	8009ba4 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009b20:	683b      	ldr	r3, [r7, #0]
 8009b22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b26:	d02d      	beq.n	8009b84 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009b28:	f7fd fc88 	bl	800743c <HAL_GetTick>
 8009b2c:	4602      	mov	r2, r0
 8009b2e:	69bb      	ldr	r3, [r7, #24]
 8009b30:	1ad3      	subs	r3, r2, r3
 8009b32:	683a      	ldr	r2, [r7, #0]
 8009b34:	429a      	cmp	r2, r3
 8009b36:	d302      	bcc.n	8009b3e <I2C_WaitOnFlagUntilTimeout+0x44>
 8009b38:	683b      	ldr	r3, [r7, #0]
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d122      	bne.n	8009b84 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	699a      	ldr	r2, [r3, #24]
 8009b44:	68bb      	ldr	r3, [r7, #8]
 8009b46:	4013      	ands	r3, r2
 8009b48:	68ba      	ldr	r2, [r7, #8]
 8009b4a:	429a      	cmp	r2, r3
 8009b4c:	bf0c      	ite	eq
 8009b4e:	2301      	moveq	r3, #1
 8009b50:	2300      	movne	r3, #0
 8009b52:	b2db      	uxtb	r3, r3
 8009b54:	461a      	mov	r2, r3
 8009b56:	79fb      	ldrb	r3, [r7, #7]
 8009b58:	429a      	cmp	r2, r3
 8009b5a:	d113      	bne.n	8009b84 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009b60:	f043 0220 	orr.w	r2, r3, #32
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	2220      	movs	r2, #32
 8009b6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	2200      	movs	r2, #0
 8009b74:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	2200      	movs	r2, #0
 8009b7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8009b80:	2301      	movs	r3, #1
 8009b82:	e00f      	b.n	8009ba4 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	699a      	ldr	r2, [r3, #24]
 8009b8a:	68bb      	ldr	r3, [r7, #8]
 8009b8c:	4013      	ands	r3, r2
 8009b8e:	68ba      	ldr	r2, [r7, #8]
 8009b90:	429a      	cmp	r2, r3
 8009b92:	bf0c      	ite	eq
 8009b94:	2301      	moveq	r3, #1
 8009b96:	2300      	movne	r3, #0
 8009b98:	b2db      	uxtb	r3, r3
 8009b9a:	461a      	mov	r2, r3
 8009b9c:	79fb      	ldrb	r3, [r7, #7]
 8009b9e:	429a      	cmp	r2, r3
 8009ba0:	d0b4      	beq.n	8009b0c <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009ba2:	2300      	movs	r3, #0
}
 8009ba4:	4618      	mov	r0, r3
 8009ba6:	3710      	adds	r7, #16
 8009ba8:	46bd      	mov	sp, r7
 8009baa:	bd80      	pop	{r7, pc}

08009bac <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009bac:	b580      	push	{r7, lr}
 8009bae:	b084      	sub	sp, #16
 8009bb0:	af00      	add	r7, sp, #0
 8009bb2:	60f8      	str	r0, [r7, #12]
 8009bb4:	60b9      	str	r1, [r7, #8]
 8009bb6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009bb8:	e033      	b.n	8009c22 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009bba:	687a      	ldr	r2, [r7, #4]
 8009bbc:	68b9      	ldr	r1, [r7, #8]
 8009bbe:	68f8      	ldr	r0, [r7, #12]
 8009bc0:	f000 f87e 	bl	8009cc0 <I2C_IsErrorOccurred>
 8009bc4:	4603      	mov	r3, r0
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d001      	beq.n	8009bce <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009bca:	2301      	movs	r3, #1
 8009bcc:	e031      	b.n	8009c32 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009bce:	68bb      	ldr	r3, [r7, #8]
 8009bd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009bd4:	d025      	beq.n	8009c22 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009bd6:	f7fd fc31 	bl	800743c <HAL_GetTick>
 8009bda:	4602      	mov	r2, r0
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	1ad3      	subs	r3, r2, r3
 8009be0:	68ba      	ldr	r2, [r7, #8]
 8009be2:	429a      	cmp	r2, r3
 8009be4:	d302      	bcc.n	8009bec <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8009be6:	68bb      	ldr	r3, [r7, #8]
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d11a      	bne.n	8009c22 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	699b      	ldr	r3, [r3, #24]
 8009bf2:	f003 0302 	and.w	r3, r3, #2
 8009bf6:	2b02      	cmp	r3, #2
 8009bf8:	d013      	beq.n	8009c22 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009bfe:	f043 0220 	orr.w	r2, r3, #32
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	2220      	movs	r2, #32
 8009c0a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	2200      	movs	r2, #0
 8009c12:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	2200      	movs	r2, #0
 8009c1a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8009c1e:	2301      	movs	r3, #1
 8009c20:	e007      	b.n	8009c32 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	699b      	ldr	r3, [r3, #24]
 8009c28:	f003 0302 	and.w	r3, r3, #2
 8009c2c:	2b02      	cmp	r3, #2
 8009c2e:	d1c4      	bne.n	8009bba <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8009c30:	2300      	movs	r3, #0
}
 8009c32:	4618      	mov	r0, r3
 8009c34:	3710      	adds	r7, #16
 8009c36:	46bd      	mov	sp, r7
 8009c38:	bd80      	pop	{r7, pc}

08009c3a <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009c3a:	b580      	push	{r7, lr}
 8009c3c:	b084      	sub	sp, #16
 8009c3e:	af00      	add	r7, sp, #0
 8009c40:	60f8      	str	r0, [r7, #12]
 8009c42:	60b9      	str	r1, [r7, #8]
 8009c44:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009c46:	e02f      	b.n	8009ca8 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009c48:	687a      	ldr	r2, [r7, #4]
 8009c4a:	68b9      	ldr	r1, [r7, #8]
 8009c4c:	68f8      	ldr	r0, [r7, #12]
 8009c4e:	f000 f837 	bl	8009cc0 <I2C_IsErrorOccurred>
 8009c52:	4603      	mov	r3, r0
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d001      	beq.n	8009c5c <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009c58:	2301      	movs	r3, #1
 8009c5a:	e02d      	b.n	8009cb8 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009c5c:	f7fd fbee 	bl	800743c <HAL_GetTick>
 8009c60:	4602      	mov	r2, r0
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	1ad3      	subs	r3, r2, r3
 8009c66:	68ba      	ldr	r2, [r7, #8]
 8009c68:	429a      	cmp	r2, r3
 8009c6a:	d302      	bcc.n	8009c72 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8009c6c:	68bb      	ldr	r3, [r7, #8]
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d11a      	bne.n	8009ca8 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	699b      	ldr	r3, [r3, #24]
 8009c78:	f003 0320 	and.w	r3, r3, #32
 8009c7c:	2b20      	cmp	r3, #32
 8009c7e:	d013      	beq.n	8009ca8 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009c84:	f043 0220 	orr.w	r2, r3, #32
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	2220      	movs	r2, #32
 8009c90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	2200      	movs	r2, #0
 8009c98:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	2200      	movs	r2, #0
 8009ca0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8009ca4:	2301      	movs	r3, #1
 8009ca6:	e007      	b.n	8009cb8 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	699b      	ldr	r3, [r3, #24]
 8009cae:	f003 0320 	and.w	r3, r3, #32
 8009cb2:	2b20      	cmp	r3, #32
 8009cb4:	d1c8      	bne.n	8009c48 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009cb6:	2300      	movs	r3, #0
}
 8009cb8:	4618      	mov	r0, r3
 8009cba:	3710      	adds	r7, #16
 8009cbc:	46bd      	mov	sp, r7
 8009cbe:	bd80      	pop	{r7, pc}

08009cc0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009cc0:	b580      	push	{r7, lr}
 8009cc2:	b08a      	sub	sp, #40	@ 0x28
 8009cc4:	af00      	add	r7, sp, #0
 8009cc6:	60f8      	str	r0, [r7, #12]
 8009cc8:	60b9      	str	r1, [r7, #8]
 8009cca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009ccc:	2300      	movs	r3, #0
 8009cce:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	699b      	ldr	r3, [r3, #24]
 8009cd8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8009cda:	2300      	movs	r3, #0
 8009cdc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8009ce2:	69bb      	ldr	r3, [r7, #24]
 8009ce4:	f003 0310 	and.w	r3, r3, #16
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d068      	beq.n	8009dbe <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	2210      	movs	r2, #16
 8009cf2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009cf4:	e049      	b.n	8009d8a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8009cf6:	68bb      	ldr	r3, [r7, #8]
 8009cf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009cfc:	d045      	beq.n	8009d8a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8009cfe:	f7fd fb9d 	bl	800743c <HAL_GetTick>
 8009d02:	4602      	mov	r2, r0
 8009d04:	69fb      	ldr	r3, [r7, #28]
 8009d06:	1ad3      	subs	r3, r2, r3
 8009d08:	68ba      	ldr	r2, [r7, #8]
 8009d0a:	429a      	cmp	r2, r3
 8009d0c:	d302      	bcc.n	8009d14 <I2C_IsErrorOccurred+0x54>
 8009d0e:	68bb      	ldr	r3, [r7, #8]
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d13a      	bne.n	8009d8a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	685b      	ldr	r3, [r3, #4]
 8009d1a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009d1e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009d26:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	699b      	ldr	r3, [r3, #24]
 8009d2e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009d32:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009d36:	d121      	bne.n	8009d7c <I2C_IsErrorOccurred+0xbc>
 8009d38:	697b      	ldr	r3, [r7, #20]
 8009d3a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009d3e:	d01d      	beq.n	8009d7c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8009d40:	7cfb      	ldrb	r3, [r7, #19]
 8009d42:	2b20      	cmp	r3, #32
 8009d44:	d01a      	beq.n	8009d7c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	685a      	ldr	r2, [r3, #4]
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009d54:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8009d56:	f7fd fb71 	bl	800743c <HAL_GetTick>
 8009d5a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009d5c:	e00e      	b.n	8009d7c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8009d5e:	f7fd fb6d 	bl	800743c <HAL_GetTick>
 8009d62:	4602      	mov	r2, r0
 8009d64:	69fb      	ldr	r3, [r7, #28]
 8009d66:	1ad3      	subs	r3, r2, r3
 8009d68:	2b19      	cmp	r3, #25
 8009d6a:	d907      	bls.n	8009d7c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8009d6c:	6a3b      	ldr	r3, [r7, #32]
 8009d6e:	f043 0320 	orr.w	r3, r3, #32
 8009d72:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8009d74:	2301      	movs	r3, #1
 8009d76:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8009d7a:	e006      	b.n	8009d8a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	699b      	ldr	r3, [r3, #24]
 8009d82:	f003 0320 	and.w	r3, r3, #32
 8009d86:	2b20      	cmp	r3, #32
 8009d88:	d1e9      	bne.n	8009d5e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	699b      	ldr	r3, [r3, #24]
 8009d90:	f003 0320 	and.w	r3, r3, #32
 8009d94:	2b20      	cmp	r3, #32
 8009d96:	d003      	beq.n	8009da0 <I2C_IsErrorOccurred+0xe0>
 8009d98:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d0aa      	beq.n	8009cf6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8009da0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d103      	bne.n	8009db0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	2220      	movs	r2, #32
 8009dae:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8009db0:	6a3b      	ldr	r3, [r7, #32]
 8009db2:	f043 0304 	orr.w	r3, r3, #4
 8009db6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8009db8:	2301      	movs	r3, #1
 8009dba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	699b      	ldr	r3, [r3, #24]
 8009dc4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8009dc6:	69bb      	ldr	r3, [r7, #24]
 8009dc8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d00b      	beq.n	8009de8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8009dd0:	6a3b      	ldr	r3, [r7, #32]
 8009dd2:	f043 0301 	orr.w	r3, r3, #1
 8009dd6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009de0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009de2:	2301      	movs	r3, #1
 8009de4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8009de8:	69bb      	ldr	r3, [r7, #24]
 8009dea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d00b      	beq.n	8009e0a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8009df2:	6a3b      	ldr	r3, [r7, #32]
 8009df4:	f043 0308 	orr.w	r3, r3, #8
 8009df8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8009e02:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009e04:	2301      	movs	r3, #1
 8009e06:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8009e0a:	69bb      	ldr	r3, [r7, #24]
 8009e0c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d00b      	beq.n	8009e2c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8009e14:	6a3b      	ldr	r3, [r7, #32]
 8009e16:	f043 0302 	orr.w	r3, r3, #2
 8009e1a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009e24:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009e26:	2301      	movs	r3, #1
 8009e28:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8009e2c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d01c      	beq.n	8009e6e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8009e34:	68f8      	ldr	r0, [r7, #12]
 8009e36:	f7ff fdbc 	bl	80099b2 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	6859      	ldr	r1, [r3, #4]
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	681a      	ldr	r2, [r3, #0]
 8009e44:	4b0d      	ldr	r3, [pc, #52]	@ (8009e7c <I2C_IsErrorOccurred+0x1bc>)
 8009e46:	400b      	ands	r3, r1
 8009e48:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009e4e:	6a3b      	ldr	r3, [r7, #32]
 8009e50:	431a      	orrs	r2, r3
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	2220      	movs	r2, #32
 8009e5a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	2200      	movs	r2, #0
 8009e62:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	2200      	movs	r2, #0
 8009e6a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8009e6e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8009e72:	4618      	mov	r0, r3
 8009e74:	3728      	adds	r7, #40	@ 0x28
 8009e76:	46bd      	mov	sp, r7
 8009e78:	bd80      	pop	{r7, pc}
 8009e7a:	bf00      	nop
 8009e7c:	fe00e800 	.word	0xfe00e800

08009e80 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8009e80:	b480      	push	{r7}
 8009e82:	b087      	sub	sp, #28
 8009e84:	af00      	add	r7, sp, #0
 8009e86:	60f8      	str	r0, [r7, #12]
 8009e88:	607b      	str	r3, [r7, #4]
 8009e8a:	460b      	mov	r3, r1
 8009e8c:	817b      	strh	r3, [r7, #10]
 8009e8e:	4613      	mov	r3, r2
 8009e90:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009e92:	897b      	ldrh	r3, [r7, #10]
 8009e94:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009e98:	7a7b      	ldrb	r3, [r7, #9]
 8009e9a:	041b      	lsls	r3, r3, #16
 8009e9c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009ea0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009ea6:	6a3b      	ldr	r3, [r7, #32]
 8009ea8:	4313      	orrs	r3, r2
 8009eaa:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009eae:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	685a      	ldr	r2, [r3, #4]
 8009eb6:	6a3b      	ldr	r3, [r7, #32]
 8009eb8:	0d5b      	lsrs	r3, r3, #21
 8009eba:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8009ebe:	4b08      	ldr	r3, [pc, #32]	@ (8009ee0 <I2C_TransferConfig+0x60>)
 8009ec0:	430b      	orrs	r3, r1
 8009ec2:	43db      	mvns	r3, r3
 8009ec4:	ea02 0103 	and.w	r1, r2, r3
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	697a      	ldr	r2, [r7, #20]
 8009ece:	430a      	orrs	r2, r1
 8009ed0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8009ed2:	bf00      	nop
 8009ed4:	371c      	adds	r7, #28
 8009ed6:	46bd      	mov	sp, r7
 8009ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009edc:	4770      	bx	lr
 8009ede:	bf00      	nop
 8009ee0:	03ff63ff 	.word	0x03ff63ff

08009ee4 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8009ee4:	b480      	push	{r7}
 8009ee6:	b085      	sub	sp, #20
 8009ee8:	af00      	add	r7, sp, #0
 8009eea:	6078      	str	r0, [r7, #4]
 8009eec:	460b      	mov	r3, r1
 8009eee:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8009ef0:	2300      	movs	r3, #0
 8009ef2:	60fb      	str	r3, [r7, #12]

#if defined(HAL_DMA_MODULE_ENABLED)
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009ef8:	4a39      	ldr	r2, [pc, #228]	@ (8009fe0 <I2C_Enable_IRQ+0xfc>)
 8009efa:	4293      	cmp	r3, r2
 8009efc:	d032      	beq.n	8009f64 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8009f02:	4a38      	ldr	r2, [pc, #224]	@ (8009fe4 <I2C_Enable_IRQ+0x100>)
 8009f04:	4293      	cmp	r3, r2
 8009f06:	d02d      	beq.n	8009f64 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8009f0c:	4a36      	ldr	r2, [pc, #216]	@ (8009fe8 <I2C_Enable_IRQ+0x104>)
 8009f0e:	4293      	cmp	r3, r2
 8009f10:	d028      	beq.n	8009f64 <I2C_Enable_IRQ+0x80>
#endif /* HAL_DMA_MODULE_ENABLED */
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8009f12:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	da03      	bge.n	8009f22 <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8009f20:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8009f22:	887b      	ldrh	r3, [r7, #2]
 8009f24:	f003 0301 	and.w	r3, r3, #1
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d003      	beq.n	8009f34 <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8009f32:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8009f34:	887b      	ldrh	r3, [r7, #2]
 8009f36:	f003 0302 	and.w	r3, r3, #2
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d003      	beq.n	8009f46 <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8009f44:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8009f46:	887b      	ldrh	r3, [r7, #2]
 8009f48:	2b10      	cmp	r3, #16
 8009f4a:	d103      	bne.n	8009f54 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8009f52:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8009f54:	887b      	ldrh	r3, [r7, #2]
 8009f56:	2b20      	cmp	r3, #32
 8009f58:	d133      	bne.n	8009fc2 <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	f043 0320 	orr.w	r3, r3, #32
 8009f60:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8009f62:	e02e      	b.n	8009fc2 <I2C_Enable_IRQ+0xde>
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8009f64:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	da03      	bge.n	8009f74 <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8009f72:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8009f74:	887b      	ldrh	r3, [r7, #2]
 8009f76:	f003 0301 	and.w	r3, r3, #1
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d003      	beq.n	8009f86 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8009f84:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8009f86:	887b      	ldrh	r3, [r7, #2]
 8009f88:	f003 0302 	and.w	r3, r3, #2
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d003      	beq.n	8009f98 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8009f96:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8009f98:	887b      	ldrh	r3, [r7, #2]
 8009f9a:	2b10      	cmp	r3, #16
 8009f9c:	d103      	bne.n	8009fa6 <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8009fa4:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8009fa6:	887b      	ldrh	r3, [r7, #2]
 8009fa8:	2b20      	cmp	r3, #32
 8009faa:	d103      	bne.n	8009fb4 <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8009fb2:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8009fb4:	887b      	ldrh	r3, [r7, #2]
 8009fb6:	2b40      	cmp	r3, #64	@ 0x40
 8009fb8:	d103      	bne.n	8009fc2 <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009fc0:	60fb      	str	r3, [r7, #12]
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	6819      	ldr	r1, [r3, #0]
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	68fa      	ldr	r2, [r7, #12]
 8009fce:	430a      	orrs	r2, r1
 8009fd0:	601a      	str	r2, [r3, #0]
}
 8009fd2:	bf00      	nop
 8009fd4:	3714      	adds	r7, #20
 8009fd6:	46bd      	mov	sp, r7
 8009fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fdc:	4770      	bx	lr
 8009fde:	bf00      	nop
 8009fe0:	080089cd 	.word	0x080089cd
 8009fe4:	08008df1 	.word	0x08008df1
 8009fe8:	08008ba5 	.word	0x08008ba5

08009fec <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8009fec:	b480      	push	{r7}
 8009fee:	b085      	sub	sp, #20
 8009ff0:	af00      	add	r7, sp, #0
 8009ff2:	6078      	str	r0, [r7, #4]
 8009ff4:	460b      	mov	r3, r1
 8009ff6:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8009ff8:	2300      	movs	r3, #0
 8009ffa:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8009ffc:	887b      	ldrh	r3, [r7, #2]
 8009ffe:	f003 0301 	and.w	r3, r3, #1
 800a002:	2b00      	cmp	r3, #0
 800a004:	d00f      	beq.n	800a026 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 800a00c:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a014:	b2db      	uxtb	r3, r3
 800a016:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800a01a:	2b28      	cmp	r3, #40	@ 0x28
 800a01c:	d003      	beq.n	800a026 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 800a024:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800a026:	887b      	ldrh	r3, [r7, #2]
 800a028:	f003 0302 	and.w	r3, r3, #2
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d00f      	beq.n	800a050 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 800a036:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a03e:	b2db      	uxtb	r3, r3
 800a040:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800a044:	2b28      	cmp	r3, #40	@ 0x28
 800a046:	d003      	beq.n	800a050 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 800a04e:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800a050:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a054:	2b00      	cmp	r3, #0
 800a056:	da03      	bge.n	800a060 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 800a05e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800a060:	887b      	ldrh	r3, [r7, #2]
 800a062:	2b10      	cmp	r3, #16
 800a064:	d103      	bne.n	800a06e <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 800a06c:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800a06e:	887b      	ldrh	r3, [r7, #2]
 800a070:	2b20      	cmp	r3, #32
 800a072:	d103      	bne.n	800a07c <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	f043 0320 	orr.w	r3, r3, #32
 800a07a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800a07c:	887b      	ldrh	r3, [r7, #2]
 800a07e:	2b40      	cmp	r3, #64	@ 0x40
 800a080:	d103      	bne.n	800a08a <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a088:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	6819      	ldr	r1, [r3, #0]
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	43da      	mvns	r2, r3
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	400a      	ands	r2, r1
 800a09a:	601a      	str	r2, [r3, #0]
}
 800a09c:	bf00      	nop
 800a09e:	3714      	adds	r7, #20
 800a0a0:	46bd      	mov	sp, r7
 800a0a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0a6:	4770      	bx	lr

0800a0a8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800a0a8:	b480      	push	{r7}
 800a0aa:	b083      	sub	sp, #12
 800a0ac:	af00      	add	r7, sp, #0
 800a0ae:	6078      	str	r0, [r7, #4]
 800a0b0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a0b8:	b2db      	uxtb	r3, r3
 800a0ba:	2b20      	cmp	r3, #32
 800a0bc:	d138      	bne.n	800a130 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a0c4:	2b01      	cmp	r3, #1
 800a0c6:	d101      	bne.n	800a0cc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800a0c8:	2302      	movs	r3, #2
 800a0ca:	e032      	b.n	800a132 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	2201      	movs	r2, #1
 800a0d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	2224      	movs	r2, #36	@ 0x24
 800a0d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	681a      	ldr	r2, [r3, #0]
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	f022 0201 	bic.w	r2, r2, #1
 800a0ea:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	681a      	ldr	r2, [r3, #0]
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800a0fa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	6819      	ldr	r1, [r3, #0]
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	683a      	ldr	r2, [r7, #0]
 800a108:	430a      	orrs	r2, r1
 800a10a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	681a      	ldr	r2, [r3, #0]
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	f042 0201 	orr.w	r2, r2, #1
 800a11a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	2220      	movs	r2, #32
 800a120:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	2200      	movs	r2, #0
 800a128:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800a12c:	2300      	movs	r3, #0
 800a12e:	e000      	b.n	800a132 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800a130:	2302      	movs	r3, #2
  }
}
 800a132:	4618      	mov	r0, r3
 800a134:	370c      	adds	r7, #12
 800a136:	46bd      	mov	sp, r7
 800a138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a13c:	4770      	bx	lr

0800a13e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800a13e:	b480      	push	{r7}
 800a140:	b085      	sub	sp, #20
 800a142:	af00      	add	r7, sp, #0
 800a144:	6078      	str	r0, [r7, #4]
 800a146:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a14e:	b2db      	uxtb	r3, r3
 800a150:	2b20      	cmp	r3, #32
 800a152:	d139      	bne.n	800a1c8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a15a:	2b01      	cmp	r3, #1
 800a15c:	d101      	bne.n	800a162 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800a15e:	2302      	movs	r3, #2
 800a160:	e033      	b.n	800a1ca <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	2201      	movs	r2, #1
 800a166:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	2224      	movs	r2, #36	@ 0x24
 800a16e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	681a      	ldr	r2, [r3, #0]
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	f022 0201 	bic.w	r2, r2, #1
 800a180:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800a190:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800a192:	683b      	ldr	r3, [r7, #0]
 800a194:	021b      	lsls	r3, r3, #8
 800a196:	68fa      	ldr	r2, [r7, #12]
 800a198:	4313      	orrs	r3, r2
 800a19a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	68fa      	ldr	r2, [r7, #12]
 800a1a2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	681a      	ldr	r2, [r3, #0]
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	f042 0201 	orr.w	r2, r2, #1
 800a1b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	2220      	movs	r2, #32
 800a1b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	2200      	movs	r2, #0
 800a1c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800a1c4:	2300      	movs	r3, #0
 800a1c6:	e000      	b.n	800a1ca <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800a1c8:	2302      	movs	r3, #2
  }
}
 800a1ca:	4618      	mov	r0, r3
 800a1cc:	3714      	adds	r7, #20
 800a1ce:	46bd      	mov	sp, r7
 800a1d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1d4:	4770      	bx	lr
	...

0800a1d8 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 800a1d8:	b580      	push	{r7, lr}
 800a1da:	b084      	sub	sp, #16
 800a1dc:	af00      	add	r7, sp, #0
 800a1de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 800a1e0:	2300      	movs	r3, #0
 800a1e2:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d01e      	beq.n	800a228 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 800a1ea:	4b13      	ldr	r3, [pc, #76]	@ (800a238 <HAL_IPCC_Init+0x60>)
 800a1ec:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800a1f4:	b2db      	uxtb	r3, r3
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d102      	bne.n	800a200 <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 800a1fa:	6878      	ldr	r0, [r7, #4]
 800a1fc:	f7fc fe88 	bl	8006f10 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 800a200:	68b8      	ldr	r0, [r7, #8]
 800a202:	f000 f85b 	bl	800a2bc <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 800a206:	68bb      	ldr	r3, [r7, #8]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	f043 1201 	orr.w	r2, r3, #65537	@ 0x10001
 800a20e:	68bb      	ldr	r3, [r7, #8]
 800a210:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 800a212:	6878      	ldr	r0, [r7, #4]
 800a214:	f000 f82c 	bl	800a270 <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	2200      	movs	r2, #0
 800a21c:	635a      	str	r2, [r3, #52]	@ 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	2201      	movs	r2, #1
 800a222:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
 800a226:	e001      	b.n	800a22c <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 800a228:	2301      	movs	r3, #1
 800a22a:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 800a22c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a22e:	4618      	mov	r0, r3
 800a230:	3710      	adds	r7, #16
 800a232:	46bd      	mov	sp, r7
 800a234:	bd80      	pop	{r7, pc}
 800a236:	bf00      	nop
 800a238:	58000c00 	.word	0x58000c00

0800a23c <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 800a23c:	b480      	push	{r7}
 800a23e:	b085      	sub	sp, #20
 800a240:	af00      	add	r7, sp, #0
 800a242:	60f8      	str	r0, [r7, #12]
 800a244:	60b9      	str	r1, [r7, #8]
 800a246:	4613      	mov	r3, r2
 800a248:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 800a24a:	bf00      	nop
 800a24c:	3714      	adds	r7, #20
 800a24e:	46bd      	mov	sp, r7
 800a250:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a254:	4770      	bx	lr

0800a256 <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 800a256:	b480      	push	{r7}
 800a258:	b085      	sub	sp, #20
 800a25a:	af00      	add	r7, sp, #0
 800a25c:	60f8      	str	r0, [r7, #12]
 800a25e:	60b9      	str	r1, [r7, #8]
 800a260:	4613      	mov	r3, r2
 800a262:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 800a264:	bf00      	nop
 800a266:	3714      	adds	r7, #20
 800a268:	46bd      	mov	sp, r7
 800a26a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a26e:	4770      	bx	lr

0800a270 <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 800a270:	b480      	push	{r7}
 800a272:	b085      	sub	sp, #20
 800a274:	af00      	add	r7, sp, #0
 800a276:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 800a278:	2300      	movs	r3, #0
 800a27a:	60fb      	str	r3, [r7, #12]
 800a27c:	e00f      	b.n	800a29e <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 800a27e:	687a      	ldr	r2, [r7, #4]
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	009b      	lsls	r3, r3, #2
 800a284:	4413      	add	r3, r2
 800a286:	4a0b      	ldr	r2, [pc, #44]	@ (800a2b4 <IPCC_SetDefaultCallbacks+0x44>)
 800a288:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 800a28a:	687a      	ldr	r2, [r7, #4]
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	3306      	adds	r3, #6
 800a290:	009b      	lsls	r3, r3, #2
 800a292:	4413      	add	r3, r2
 800a294:	4a08      	ldr	r2, [pc, #32]	@ (800a2b8 <IPCC_SetDefaultCallbacks+0x48>)
 800a296:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	3301      	adds	r3, #1
 800a29c:	60fb      	str	r3, [r7, #12]
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	2b05      	cmp	r3, #5
 800a2a2:	d9ec      	bls.n	800a27e <IPCC_SetDefaultCallbacks+0xe>
  }
}
 800a2a4:	bf00      	nop
 800a2a6:	bf00      	nop
 800a2a8:	3714      	adds	r7, #20
 800a2aa:	46bd      	mov	sp, r7
 800a2ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b0:	4770      	bx	lr
 800a2b2:	bf00      	nop
 800a2b4:	0800a23d 	.word	0x0800a23d
 800a2b8:	0800a257 	.word	0x0800a257

0800a2bc <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 800a2bc:	b480      	push	{r7}
 800a2be:	b083      	sub	sp, #12
 800a2c0:	af00      	add	r7, sp, #0
 800a2c2:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	2200      	movs	r2, #0
 800a2c8:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	f04f 123f 	mov.w	r2, #4128831	@ 0x3f003f
 800a2d0:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	223f      	movs	r2, #63	@ 0x3f
 800a2d6:	609a      	str	r2, [r3, #8]
}
 800a2d8:	bf00      	nop
 800a2da:	370c      	adds	r7, #12
 800a2dc:	46bd      	mov	sp, r7
 800a2de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2e2:	4770      	bx	lr

0800a2e4 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800a2e4:	b480      	push	{r7}
 800a2e6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a2e8:	4b05      	ldr	r3, [pc, #20]	@ (800a300 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	4a04      	ldr	r2, [pc, #16]	@ (800a300 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800a2ee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a2f2:	6013      	str	r3, [r2, #0]
}
 800a2f4:	bf00      	nop
 800a2f6:	46bd      	mov	sp, r7
 800a2f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2fc:	4770      	bx	lr
 800a2fe:	bf00      	nop
 800a300:	58000400 	.word	0x58000400

0800a304 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800a304:	b480      	push	{r7}
 800a306:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 800a308:	4b04      	ldr	r3, [pc, #16]	@ (800a31c <HAL_PWREx_GetVoltageRange+0x18>)
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 800a310:	4618      	mov	r0, r3
 800a312:	46bd      	mov	sp, r7
 800a314:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a318:	4770      	bx	lr
 800a31a:	bf00      	nop
 800a31c:	58000400 	.word	0x58000400

0800a320 <LL_RCC_HSE_IsEnabledDiv2>:
{
 800a320:	b480      	push	{r7}
 800a322:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 800a324:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a32e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a332:	d101      	bne.n	800a338 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 800a334:	2301      	movs	r3, #1
 800a336:	e000      	b.n	800a33a <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 800a338:	2300      	movs	r3, #0
}
 800a33a:	4618      	mov	r0, r3
 800a33c:	46bd      	mov	sp, r7
 800a33e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a342:	4770      	bx	lr

0800a344 <LL_RCC_HSE_Enable>:
{
 800a344:	b480      	push	{r7}
 800a346:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800a348:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a352:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a356:	6013      	str	r3, [r2, #0]
}
 800a358:	bf00      	nop
 800a35a:	46bd      	mov	sp, r7
 800a35c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a360:	4770      	bx	lr

0800a362 <LL_RCC_HSE_Disable>:
{
 800a362:	b480      	push	{r7}
 800a364:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800a366:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a370:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a374:	6013      	str	r3, [r2, #0]
}
 800a376:	bf00      	nop
 800a378:	46bd      	mov	sp, r7
 800a37a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a37e:	4770      	bx	lr

0800a380 <LL_RCC_HSE_IsReady>:
{
 800a380:	b480      	push	{r7}
 800a382:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800a384:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a38e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a392:	d101      	bne.n	800a398 <LL_RCC_HSE_IsReady+0x18>
 800a394:	2301      	movs	r3, #1
 800a396:	e000      	b.n	800a39a <LL_RCC_HSE_IsReady+0x1a>
 800a398:	2300      	movs	r3, #0
}
 800a39a:	4618      	mov	r0, r3
 800a39c:	46bd      	mov	sp, r7
 800a39e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a2:	4770      	bx	lr

0800a3a4 <LL_RCC_HSI_Enable>:
{
 800a3a4:	b480      	push	{r7}
 800a3a6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800a3a8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a3b2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a3b6:	6013      	str	r3, [r2, #0]
}
 800a3b8:	bf00      	nop
 800a3ba:	46bd      	mov	sp, r7
 800a3bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3c0:	4770      	bx	lr

0800a3c2 <LL_RCC_HSI_Disable>:
{
 800a3c2:	b480      	push	{r7}
 800a3c4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800a3c6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a3d0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a3d4:	6013      	str	r3, [r2, #0]
}
 800a3d6:	bf00      	nop
 800a3d8:	46bd      	mov	sp, r7
 800a3da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3de:	4770      	bx	lr

0800a3e0 <LL_RCC_HSI_IsReady>:
{
 800a3e0:	b480      	push	{r7}
 800a3e2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800a3e4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a3ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a3f2:	d101      	bne.n	800a3f8 <LL_RCC_HSI_IsReady+0x18>
 800a3f4:	2301      	movs	r3, #1
 800a3f6:	e000      	b.n	800a3fa <LL_RCC_HSI_IsReady+0x1a>
 800a3f8:	2300      	movs	r3, #0
}
 800a3fa:	4618      	mov	r0, r3
 800a3fc:	46bd      	mov	sp, r7
 800a3fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a402:	4770      	bx	lr

0800a404 <LL_RCC_HSI_SetCalibTrimming>:
{
 800a404:	b480      	push	{r7}
 800a406:	b083      	sub	sp, #12
 800a408:	af00      	add	r7, sp, #0
 800a40a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800a40c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a410:	685b      	ldr	r3, [r3, #4]
 800a412:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	061b      	lsls	r3, r3, #24
 800a41a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800a41e:	4313      	orrs	r3, r2
 800a420:	604b      	str	r3, [r1, #4]
}
 800a422:	bf00      	nop
 800a424:	370c      	adds	r7, #12
 800a426:	46bd      	mov	sp, r7
 800a428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a42c:	4770      	bx	lr

0800a42e <LL_RCC_HSI48_Enable>:
{
 800a42e:	b480      	push	{r7}
 800a430:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800a432:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a436:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a43a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a43e:	f043 0301 	orr.w	r3, r3, #1
 800a442:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 800a446:	bf00      	nop
 800a448:	46bd      	mov	sp, r7
 800a44a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a44e:	4770      	bx	lr

0800a450 <LL_RCC_HSI48_Disable>:
{
 800a450:	b480      	push	{r7}
 800a452:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800a454:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a458:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a45c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a460:	f023 0301 	bic.w	r3, r3, #1
 800a464:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 800a468:	bf00      	nop
 800a46a:	46bd      	mov	sp, r7
 800a46c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a470:	4770      	bx	lr

0800a472 <LL_RCC_HSI48_IsReady>:
{
 800a472:	b480      	push	{r7}
 800a474:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 800a476:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a47a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a47e:	f003 0302 	and.w	r3, r3, #2
 800a482:	2b02      	cmp	r3, #2
 800a484:	d101      	bne.n	800a48a <LL_RCC_HSI48_IsReady+0x18>
 800a486:	2301      	movs	r3, #1
 800a488:	e000      	b.n	800a48c <LL_RCC_HSI48_IsReady+0x1a>
 800a48a:	2300      	movs	r3, #0
}
 800a48c:	4618      	mov	r0, r3
 800a48e:	46bd      	mov	sp, r7
 800a490:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a494:	4770      	bx	lr

0800a496 <LL_RCC_LSE_Enable>:
{
 800a496:	b480      	push	{r7}
 800a498:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800a49a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a49e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a4a2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a4a6:	f043 0301 	orr.w	r3, r3, #1
 800a4aa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800a4ae:	bf00      	nop
 800a4b0:	46bd      	mov	sp, r7
 800a4b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b6:	4770      	bx	lr

0800a4b8 <LL_RCC_LSE_Disable>:
{
 800a4b8:	b480      	push	{r7}
 800a4ba:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800a4bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a4c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a4c4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a4c8:	f023 0301 	bic.w	r3, r3, #1
 800a4cc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800a4d0:	bf00      	nop
 800a4d2:	46bd      	mov	sp, r7
 800a4d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4d8:	4770      	bx	lr

0800a4da <LL_RCC_LSE_EnableBypass>:
{
 800a4da:	b480      	push	{r7}
 800a4dc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800a4de:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a4e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a4e6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a4ea:	f043 0304 	orr.w	r3, r3, #4
 800a4ee:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800a4f2:	bf00      	nop
 800a4f4:	46bd      	mov	sp, r7
 800a4f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4fa:	4770      	bx	lr

0800a4fc <LL_RCC_LSE_DisableBypass>:
{
 800a4fc:	b480      	push	{r7}
 800a4fe:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800a500:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a504:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a508:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a50c:	f023 0304 	bic.w	r3, r3, #4
 800a510:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800a514:	bf00      	nop
 800a516:	46bd      	mov	sp, r7
 800a518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a51c:	4770      	bx	lr

0800a51e <LL_RCC_LSE_IsReady>:
{
 800a51e:	b480      	push	{r7}
 800a520:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800a522:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a526:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a52a:	f003 0302 	and.w	r3, r3, #2
 800a52e:	2b02      	cmp	r3, #2
 800a530:	d101      	bne.n	800a536 <LL_RCC_LSE_IsReady+0x18>
 800a532:	2301      	movs	r3, #1
 800a534:	e000      	b.n	800a538 <LL_RCC_LSE_IsReady+0x1a>
 800a536:	2300      	movs	r3, #0
}
 800a538:	4618      	mov	r0, r3
 800a53a:	46bd      	mov	sp, r7
 800a53c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a540:	4770      	bx	lr

0800a542 <LL_RCC_LSI1_Enable>:
{
 800a542:	b480      	push	{r7}
 800a544:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800a546:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a54a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a54e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a552:	f043 0301 	orr.w	r3, r3, #1
 800a556:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800a55a:	bf00      	nop
 800a55c:	46bd      	mov	sp, r7
 800a55e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a562:	4770      	bx	lr

0800a564 <LL_RCC_LSI1_Disable>:
{
 800a564:	b480      	push	{r7}
 800a566:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800a568:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a56c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a570:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a574:	f023 0301 	bic.w	r3, r3, #1
 800a578:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800a57c:	bf00      	nop
 800a57e:	46bd      	mov	sp, r7
 800a580:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a584:	4770      	bx	lr

0800a586 <LL_RCC_LSI1_IsReady>:
{
 800a586:	b480      	push	{r7}
 800a588:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 800a58a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a58e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a592:	f003 0302 	and.w	r3, r3, #2
 800a596:	2b02      	cmp	r3, #2
 800a598:	d101      	bne.n	800a59e <LL_RCC_LSI1_IsReady+0x18>
 800a59a:	2301      	movs	r3, #1
 800a59c:	e000      	b.n	800a5a0 <LL_RCC_LSI1_IsReady+0x1a>
 800a59e:	2300      	movs	r3, #0
}
 800a5a0:	4618      	mov	r0, r3
 800a5a2:	46bd      	mov	sp, r7
 800a5a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5a8:	4770      	bx	lr

0800a5aa <LL_RCC_LSI2_Enable>:
{
 800a5aa:	b480      	push	{r7}
 800a5ac:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800a5ae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a5b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a5b6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a5ba:	f043 0304 	orr.w	r3, r3, #4
 800a5be:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800a5c2:	bf00      	nop
 800a5c4:	46bd      	mov	sp, r7
 800a5c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ca:	4770      	bx	lr

0800a5cc <LL_RCC_LSI2_Disable>:
{
 800a5cc:	b480      	push	{r7}
 800a5ce:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800a5d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a5d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a5d8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a5dc:	f023 0304 	bic.w	r3, r3, #4
 800a5e0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800a5e4:	bf00      	nop
 800a5e6:	46bd      	mov	sp, r7
 800a5e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ec:	4770      	bx	lr

0800a5ee <LL_RCC_LSI2_IsReady>:
{
 800a5ee:	b480      	push	{r7}
 800a5f0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 800a5f2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a5f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a5fa:	f003 0308 	and.w	r3, r3, #8
 800a5fe:	2b08      	cmp	r3, #8
 800a600:	d101      	bne.n	800a606 <LL_RCC_LSI2_IsReady+0x18>
 800a602:	2301      	movs	r3, #1
 800a604:	e000      	b.n	800a608 <LL_RCC_LSI2_IsReady+0x1a>
 800a606:	2300      	movs	r3, #0
}
 800a608:	4618      	mov	r0, r3
 800a60a:	46bd      	mov	sp, r7
 800a60c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a610:	4770      	bx	lr

0800a612 <LL_RCC_LSI2_SetTrimming>:
{
 800a612:	b480      	push	{r7}
 800a614:	b083      	sub	sp, #12
 800a616:	af00      	add	r7, sp, #0
 800a618:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 800a61a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a61e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a622:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	021b      	lsls	r3, r3, #8
 800a62a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800a62e:	4313      	orrs	r3, r2
 800a630:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 800a634:	bf00      	nop
 800a636:	370c      	adds	r7, #12
 800a638:	46bd      	mov	sp, r7
 800a63a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a63e:	4770      	bx	lr

0800a640 <LL_RCC_MSI_Enable>:
{
 800a640:	b480      	push	{r7}
 800a642:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800a644:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a64e:	f043 0301 	orr.w	r3, r3, #1
 800a652:	6013      	str	r3, [r2, #0]
}
 800a654:	bf00      	nop
 800a656:	46bd      	mov	sp, r7
 800a658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a65c:	4770      	bx	lr

0800a65e <LL_RCC_MSI_Disable>:
{
 800a65e:	b480      	push	{r7}
 800a660:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800a662:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a66c:	f023 0301 	bic.w	r3, r3, #1
 800a670:	6013      	str	r3, [r2, #0]
}
 800a672:	bf00      	nop
 800a674:	46bd      	mov	sp, r7
 800a676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a67a:	4770      	bx	lr

0800a67c <LL_RCC_MSI_IsReady>:
{
 800a67c:	b480      	push	{r7}
 800a67e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800a680:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	f003 0302 	and.w	r3, r3, #2
 800a68a:	2b02      	cmp	r3, #2
 800a68c:	d101      	bne.n	800a692 <LL_RCC_MSI_IsReady+0x16>
 800a68e:	2301      	movs	r3, #1
 800a690:	e000      	b.n	800a694 <LL_RCC_MSI_IsReady+0x18>
 800a692:	2300      	movs	r3, #0
}
 800a694:	4618      	mov	r0, r3
 800a696:	46bd      	mov	sp, r7
 800a698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a69c:	4770      	bx	lr

0800a69e <LL_RCC_MSI_SetRange>:
{
 800a69e:	b480      	push	{r7}
 800a6a0:	b083      	sub	sp, #12
 800a6a2:	af00      	add	r7, sp, #0
 800a6a4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 800a6a6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800a6b0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	4313      	orrs	r3, r2
 800a6b8:	600b      	str	r3, [r1, #0]
}
 800a6ba:	bf00      	nop
 800a6bc:	370c      	adds	r7, #12
 800a6be:	46bd      	mov	sp, r7
 800a6c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6c4:	4770      	bx	lr

0800a6c6 <LL_RCC_MSI_GetRange>:
{
 800a6c6:	b480      	push	{r7}
 800a6c8:	b083      	sub	sp, #12
 800a6ca:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 800a6cc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a6d6:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	2bb0      	cmp	r3, #176	@ 0xb0
 800a6dc:	d901      	bls.n	800a6e2 <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 800a6de:	23b0      	movs	r3, #176	@ 0xb0
 800a6e0:	607b      	str	r3, [r7, #4]
  return msiRange;
 800a6e2:	687b      	ldr	r3, [r7, #4]
}
 800a6e4:	4618      	mov	r0, r3
 800a6e6:	370c      	adds	r7, #12
 800a6e8:	46bd      	mov	sp, r7
 800a6ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ee:	4770      	bx	lr

0800a6f0 <LL_RCC_MSI_SetCalibTrimming>:
{
 800a6f0:	b480      	push	{r7}
 800a6f2:	b083      	sub	sp, #12
 800a6f4:	af00      	add	r7, sp, #0
 800a6f6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 800a6f8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a6fc:	685b      	ldr	r3, [r3, #4]
 800a6fe:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	021b      	lsls	r3, r3, #8
 800a706:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800a70a:	4313      	orrs	r3, r2
 800a70c:	604b      	str	r3, [r1, #4]
}
 800a70e:	bf00      	nop
 800a710:	370c      	adds	r7, #12
 800a712:	46bd      	mov	sp, r7
 800a714:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a718:	4770      	bx	lr

0800a71a <LL_RCC_SetSysClkSource>:
{
 800a71a:	b480      	push	{r7}
 800a71c:	b083      	sub	sp, #12
 800a71e:	af00      	add	r7, sp, #0
 800a720:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800a722:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a726:	689b      	ldr	r3, [r3, #8]
 800a728:	f023 0203 	bic.w	r2, r3, #3
 800a72c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	4313      	orrs	r3, r2
 800a734:	608b      	str	r3, [r1, #8]
}
 800a736:	bf00      	nop
 800a738:	370c      	adds	r7, #12
 800a73a:	46bd      	mov	sp, r7
 800a73c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a740:	4770      	bx	lr

0800a742 <LL_RCC_GetSysClkSource>:
{
 800a742:	b480      	push	{r7}
 800a744:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800a746:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a74a:	689b      	ldr	r3, [r3, #8]
 800a74c:	f003 030c 	and.w	r3, r3, #12
}
 800a750:	4618      	mov	r0, r3
 800a752:	46bd      	mov	sp, r7
 800a754:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a758:	4770      	bx	lr

0800a75a <LL_RCC_SetAHBPrescaler>:
{
 800a75a:	b480      	push	{r7}
 800a75c:	b083      	sub	sp, #12
 800a75e:	af00      	add	r7, sp, #0
 800a760:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800a762:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a766:	689b      	ldr	r3, [r3, #8]
 800a768:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800a76c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	4313      	orrs	r3, r2
 800a774:	608b      	str	r3, [r1, #8]
}
 800a776:	bf00      	nop
 800a778:	370c      	adds	r7, #12
 800a77a:	46bd      	mov	sp, r7
 800a77c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a780:	4770      	bx	lr

0800a782 <LL_C2_RCC_SetAHBPrescaler>:
{
 800a782:	b480      	push	{r7}
 800a784:	b083      	sub	sp, #12
 800a786:	af00      	add	r7, sp, #0
 800a788:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800a78a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a78e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800a792:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800a796:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	4313      	orrs	r3, r2
 800a79e:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 800a7a2:	bf00      	nop
 800a7a4:	370c      	adds	r7, #12
 800a7a6:	46bd      	mov	sp, r7
 800a7a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ac:	4770      	bx	lr

0800a7ae <LL_RCC_SetAHB4Prescaler>:
{
 800a7ae:	b480      	push	{r7}
 800a7b0:	b083      	sub	sp, #12
 800a7b2:	af00      	add	r7, sp, #0
 800a7b4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800a7b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a7ba:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800a7be:	f023 020f 	bic.w	r2, r3, #15
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	091b      	lsrs	r3, r3, #4
 800a7c6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800a7ca:	4313      	orrs	r3, r2
 800a7cc:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 800a7d0:	bf00      	nop
 800a7d2:	370c      	adds	r7, #12
 800a7d4:	46bd      	mov	sp, r7
 800a7d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7da:	4770      	bx	lr

0800a7dc <LL_RCC_SetAPB1Prescaler>:
{
 800a7dc:	b480      	push	{r7}
 800a7de:	b083      	sub	sp, #12
 800a7e0:	af00      	add	r7, sp, #0
 800a7e2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800a7e4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a7e8:	689b      	ldr	r3, [r3, #8]
 800a7ea:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800a7ee:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	4313      	orrs	r3, r2
 800a7f6:	608b      	str	r3, [r1, #8]
}
 800a7f8:	bf00      	nop
 800a7fa:	370c      	adds	r7, #12
 800a7fc:	46bd      	mov	sp, r7
 800a7fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a802:	4770      	bx	lr

0800a804 <LL_RCC_SetAPB2Prescaler>:
{
 800a804:	b480      	push	{r7}
 800a806:	b083      	sub	sp, #12
 800a808:	af00      	add	r7, sp, #0
 800a80a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800a80c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a810:	689b      	ldr	r3, [r3, #8]
 800a812:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800a816:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	4313      	orrs	r3, r2
 800a81e:	608b      	str	r3, [r1, #8]
}
 800a820:	bf00      	nop
 800a822:	370c      	adds	r7, #12
 800a824:	46bd      	mov	sp, r7
 800a826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a82a:	4770      	bx	lr

0800a82c <LL_RCC_GetAHBPrescaler>:
{
 800a82c:	b480      	push	{r7}
 800a82e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800a830:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a834:	689b      	ldr	r3, [r3, #8]
 800a836:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800a83a:	4618      	mov	r0, r3
 800a83c:	46bd      	mov	sp, r7
 800a83e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a842:	4770      	bx	lr

0800a844 <LL_RCC_GetAHB4Prescaler>:
{
 800a844:	b480      	push	{r7}
 800a846:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 800a848:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a84c:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800a850:	011b      	lsls	r3, r3, #4
 800a852:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800a856:	4618      	mov	r0, r3
 800a858:	46bd      	mov	sp, r7
 800a85a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a85e:	4770      	bx	lr

0800a860 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 800a860:	b480      	push	{r7}
 800a862:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800a864:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a86e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800a872:	6013      	str	r3, [r2, #0]
}
 800a874:	bf00      	nop
 800a876:	46bd      	mov	sp, r7
 800a878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a87c:	4770      	bx	lr

0800a87e <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 800a87e:	b480      	push	{r7}
 800a880:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800a882:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a88c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a890:	6013      	str	r3, [r2, #0]
}
 800a892:	bf00      	nop
 800a894:	46bd      	mov	sp, r7
 800a896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a89a:	4770      	bx	lr

0800a89c <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 800a89c:	b480      	push	{r7}
 800a89e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800a8a0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a8aa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a8ae:	d101      	bne.n	800a8b4 <LL_RCC_PLL_IsReady+0x18>
 800a8b0:	2301      	movs	r3, #1
 800a8b2:	e000      	b.n	800a8b6 <LL_RCC_PLL_IsReady+0x1a>
 800a8b4:	2300      	movs	r3, #0
}
 800a8b6:	4618      	mov	r0, r3
 800a8b8:	46bd      	mov	sp, r7
 800a8ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8be:	4770      	bx	lr

0800a8c0 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800a8c0:	b480      	push	{r7}
 800a8c2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800a8c4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a8c8:	68db      	ldr	r3, [r3, #12]
 800a8ca:	0a1b      	lsrs	r3, r3, #8
 800a8cc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 800a8d0:	4618      	mov	r0, r3
 800a8d2:	46bd      	mov	sp, r7
 800a8d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8d8:	4770      	bx	lr

0800a8da <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800a8da:	b480      	push	{r7}
 800a8dc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800a8de:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a8e2:	68db      	ldr	r3, [r3, #12]
 800a8e4:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 800a8e8:	4618      	mov	r0, r3
 800a8ea:	46bd      	mov	sp, r7
 800a8ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8f0:	4770      	bx	lr

0800a8f2 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800a8f2:	b480      	push	{r7}
 800a8f4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800a8f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a8fa:	68db      	ldr	r3, [r3, #12]
 800a8fc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 800a900:	4618      	mov	r0, r3
 800a902:	46bd      	mov	sp, r7
 800a904:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a908:	4770      	bx	lr

0800a90a <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800a90a:	b480      	push	{r7}
 800a90c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800a90e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a912:	68db      	ldr	r3, [r3, #12]
 800a914:	f003 0303 	and.w	r3, r3, #3
}
 800a918:	4618      	mov	r0, r3
 800a91a:	46bd      	mov	sp, r7
 800a91c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a920:	4770      	bx	lr

0800a922 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 800a922:	b480      	push	{r7}
 800a924:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800a926:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a92a:	689b      	ldr	r3, [r3, #8]
 800a92c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a930:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a934:	d101      	bne.n	800a93a <LL_RCC_IsActiveFlag_HPRE+0x18>
 800a936:	2301      	movs	r3, #1
 800a938:	e000      	b.n	800a93c <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800a93a:	2300      	movs	r3, #0
}
 800a93c:	4618      	mov	r0, r3
 800a93e:	46bd      	mov	sp, r7
 800a940:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a944:	4770      	bx	lr

0800a946 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 800a946:	b480      	push	{r7}
 800a948:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 800a94a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a94e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800a952:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a956:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a95a:	d101      	bne.n	800a960 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 800a95c:	2301      	movs	r3, #1
 800a95e:	e000      	b.n	800a962 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 800a960:	2300      	movs	r3, #0
}
 800a962:	4618      	mov	r0, r3
 800a964:	46bd      	mov	sp, r7
 800a966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a96a:	4770      	bx	lr

0800a96c <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 800a96c:	b480      	push	{r7}
 800a96e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 800a970:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a974:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800a978:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a97c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a980:	d101      	bne.n	800a986 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800a982:	2301      	movs	r3, #1
 800a984:	e000      	b.n	800a988 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800a986:	2300      	movs	r3, #0
}
 800a988:	4618      	mov	r0, r3
 800a98a:	46bd      	mov	sp, r7
 800a98c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a990:	4770      	bx	lr

0800a992 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 800a992:	b480      	push	{r7}
 800a994:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800a996:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a99a:	689b      	ldr	r3, [r3, #8]
 800a99c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a9a0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a9a4:	d101      	bne.n	800a9aa <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800a9a6:	2301      	movs	r3, #1
 800a9a8:	e000      	b.n	800a9ac <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800a9aa:	2300      	movs	r3, #0
}
 800a9ac:	4618      	mov	r0, r3
 800a9ae:	46bd      	mov	sp, r7
 800a9b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9b4:	4770      	bx	lr

0800a9b6 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 800a9b6:	b480      	push	{r7}
 800a9b8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800a9ba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a9be:	689b      	ldr	r3, [r3, #8]
 800a9c0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800a9c4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a9c8:	d101      	bne.n	800a9ce <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800a9ca:	2301      	movs	r3, #1
 800a9cc:	e000      	b.n	800a9d0 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800a9ce:	2300      	movs	r3, #0
}
 800a9d0:	4618      	mov	r0, r3
 800a9d2:	46bd      	mov	sp, r7
 800a9d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9d8:	4770      	bx	lr
	...

0800a9dc <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a9dc:	b590      	push	{r4, r7, lr}
 800a9de:	b08d      	sub	sp, #52	@ 0x34
 800a9e0:	af00      	add	r7, sp, #0
 800a9e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d101      	bne.n	800a9ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a9ea:	2301      	movs	r3, #1
 800a9ec:	e363      	b.n	800b0b6 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	f003 0320 	and.w	r3, r3, #32
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	f000 808d 	beq.w	800ab16 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a9fc:	f7ff fea1 	bl	800a742 <LL_RCC_GetSysClkSource>
 800aa00:	62f8      	str	r0, [r7, #44]	@ 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800aa02:	f7ff ff82 	bl	800a90a <LL_RCC_PLL_GetMainSource>
 800aa06:	62b8      	str	r0, [r7, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800aa08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d005      	beq.n	800aa1a <HAL_RCC_OscConfig+0x3e>
 800aa0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa10:	2b0c      	cmp	r3, #12
 800aa12:	d147      	bne.n	800aaa4 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 800aa14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa16:	2b01      	cmp	r3, #1
 800aa18:	d144      	bne.n	800aaa4 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	69db      	ldr	r3, [r3, #28]
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d101      	bne.n	800aa26 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 800aa22:	2301      	movs	r3, #1
 800aa24:	e347      	b.n	800b0b6 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800aa2a:	f7ff fe4c 	bl	800a6c6 <LL_RCC_MSI_GetRange>
 800aa2e:	4603      	mov	r3, r0
 800aa30:	429c      	cmp	r4, r3
 800aa32:	d914      	bls.n	800aa5e <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa38:	4618      	mov	r0, r3
 800aa3a:	f000 fd03 	bl	800b444 <RCC_SetFlashLatencyFromMSIRange>
 800aa3e:	4603      	mov	r3, r0
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d001      	beq.n	800aa48 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 800aa44:	2301      	movs	r3, #1
 800aa46:	e336      	b.n	800b0b6 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa4c:	4618      	mov	r0, r3
 800aa4e:	f7ff fe26 	bl	800a69e <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	6a1b      	ldr	r3, [r3, #32]
 800aa56:	4618      	mov	r0, r3
 800aa58:	f7ff fe4a 	bl	800a6f0 <LL_RCC_MSI_SetCalibTrimming>
 800aa5c:	e013      	b.n	800aa86 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa62:	4618      	mov	r0, r3
 800aa64:	f7ff fe1b 	bl	800a69e <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	6a1b      	ldr	r3, [r3, #32]
 800aa6c:	4618      	mov	r0, r3
 800aa6e:	f7ff fe3f 	bl	800a6f0 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa76:	4618      	mov	r0, r3
 800aa78:	f000 fce4 	bl	800b444 <RCC_SetFlashLatencyFromMSIRange>
 800aa7c:	4603      	mov	r3, r0
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d001      	beq.n	800aa86 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 800aa82:	2301      	movs	r3, #1
 800aa84:	e317      	b.n	800b0b6 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800aa86:	f000 fcc9 	bl	800b41c <HAL_RCC_GetHCLKFreq>
 800aa8a:	4603      	mov	r3, r0
 800aa8c:	4aa4      	ldr	r2, [pc, #656]	@ (800ad20 <HAL_RCC_OscConfig+0x344>)
 800aa8e:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800aa90:	4ba4      	ldr	r3, [pc, #656]	@ (800ad24 <HAL_RCC_OscConfig+0x348>)
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	4618      	mov	r0, r3
 800aa96:	f7fc fc83 	bl	80073a0 <HAL_InitTick>
 800aa9a:	4603      	mov	r3, r0
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d039      	beq.n	800ab14 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 800aaa0:	2301      	movs	r3, #1
 800aaa2:	e308      	b.n	800b0b6 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	69db      	ldr	r3, [r3, #28]
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d01e      	beq.n	800aaea <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800aaac:	f7ff fdc8 	bl	800a640 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800aab0:	f7fc fcc4 	bl	800743c <HAL_GetTick>
 800aab4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800aab6:	e008      	b.n	800aaca <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800aab8:	f7fc fcc0 	bl	800743c <HAL_GetTick>
 800aabc:	4602      	mov	r2, r0
 800aabe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aac0:	1ad3      	subs	r3, r2, r3
 800aac2:	2b02      	cmp	r3, #2
 800aac4:	d901      	bls.n	800aaca <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800aac6:	2303      	movs	r3, #3
 800aac8:	e2f5      	b.n	800b0b6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 800aaca:	f7ff fdd7 	bl	800a67c <LL_RCC_MSI_IsReady>
 800aace:	4603      	mov	r3, r0
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d0f1      	beq.n	800aab8 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aad8:	4618      	mov	r0, r3
 800aada:	f7ff fde0 	bl	800a69e <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	6a1b      	ldr	r3, [r3, #32]
 800aae2:	4618      	mov	r0, r3
 800aae4:	f7ff fe04 	bl	800a6f0 <LL_RCC_MSI_SetCalibTrimming>
 800aae8:	e015      	b.n	800ab16 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800aaea:	f7ff fdb8 	bl	800a65e <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800aaee:	f7fc fca5 	bl	800743c <HAL_GetTick>
 800aaf2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800aaf4:	e008      	b.n	800ab08 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800aaf6:	f7fc fca1 	bl	800743c <HAL_GetTick>
 800aafa:	4602      	mov	r2, r0
 800aafc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aafe:	1ad3      	subs	r3, r2, r3
 800ab00:	2b02      	cmp	r3, #2
 800ab02:	d901      	bls.n	800ab08 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800ab04:	2303      	movs	r3, #3
 800ab06:	e2d6      	b.n	800b0b6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 800ab08:	f7ff fdb8 	bl	800a67c <LL_RCC_MSI_IsReady>
 800ab0c:	4603      	mov	r3, r0
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d1f1      	bne.n	800aaf6 <HAL_RCC_OscConfig+0x11a>
 800ab12:	e000      	b.n	800ab16 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800ab14:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	f003 0301 	and.w	r3, r3, #1
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d047      	beq.n	800abb2 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800ab22:	f7ff fe0e 	bl	800a742 <LL_RCC_GetSysClkSource>
 800ab26:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800ab28:	f7ff feef 	bl	800a90a <LL_RCC_PLL_GetMainSource>
 800ab2c:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800ab2e:	6a3b      	ldr	r3, [r7, #32]
 800ab30:	2b08      	cmp	r3, #8
 800ab32:	d005      	beq.n	800ab40 <HAL_RCC_OscConfig+0x164>
 800ab34:	6a3b      	ldr	r3, [r7, #32]
 800ab36:	2b0c      	cmp	r3, #12
 800ab38:	d108      	bne.n	800ab4c <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 800ab3a:	69fb      	ldr	r3, [r7, #28]
 800ab3c:	2b03      	cmp	r3, #3
 800ab3e:	d105      	bne.n	800ab4c <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	685b      	ldr	r3, [r3, #4]
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d134      	bne.n	800abb2 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 800ab48:	2301      	movs	r3, #1
 800ab4a:	e2b4      	b.n	800b0b6 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	685b      	ldr	r3, [r3, #4]
 800ab50:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ab54:	d102      	bne.n	800ab5c <HAL_RCC_OscConfig+0x180>
 800ab56:	f7ff fbf5 	bl	800a344 <LL_RCC_HSE_Enable>
 800ab5a:	e001      	b.n	800ab60 <HAL_RCC_OscConfig+0x184>
 800ab5c:	f7ff fc01 	bl	800a362 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	685b      	ldr	r3, [r3, #4]
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d012      	beq.n	800ab8e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ab68:	f7fc fc68 	bl	800743c <HAL_GetTick>
 800ab6c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800ab6e:	e008      	b.n	800ab82 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800ab70:	f7fc fc64 	bl	800743c <HAL_GetTick>
 800ab74:	4602      	mov	r2, r0
 800ab76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab78:	1ad3      	subs	r3, r2, r3
 800ab7a:	2b64      	cmp	r3, #100	@ 0x64
 800ab7c:	d901      	bls.n	800ab82 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800ab7e:	2303      	movs	r3, #3
 800ab80:	e299      	b.n	800b0b6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 800ab82:	f7ff fbfd 	bl	800a380 <LL_RCC_HSE_IsReady>
 800ab86:	4603      	mov	r3, r0
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d0f1      	beq.n	800ab70 <HAL_RCC_OscConfig+0x194>
 800ab8c:	e011      	b.n	800abb2 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ab8e:	f7fc fc55 	bl	800743c <HAL_GetTick>
 800ab92:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 800ab94:	e008      	b.n	800aba8 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800ab96:	f7fc fc51 	bl	800743c <HAL_GetTick>
 800ab9a:	4602      	mov	r2, r0
 800ab9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab9e:	1ad3      	subs	r3, r2, r3
 800aba0:	2b64      	cmp	r3, #100	@ 0x64
 800aba2:	d901      	bls.n	800aba8 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800aba4:	2303      	movs	r3, #3
 800aba6:	e286      	b.n	800b0b6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 800aba8:	f7ff fbea 	bl	800a380 <LL_RCC_HSE_IsReady>
 800abac:	4603      	mov	r3, r0
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d1f1      	bne.n	800ab96 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	f003 0302 	and.w	r3, r3, #2
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d04c      	beq.n	800ac58 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800abbe:	f7ff fdc0 	bl	800a742 <LL_RCC_GetSysClkSource>
 800abc2:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800abc4:	f7ff fea1 	bl	800a90a <LL_RCC_PLL_GetMainSource>
 800abc8:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800abca:	69bb      	ldr	r3, [r7, #24]
 800abcc:	2b04      	cmp	r3, #4
 800abce:	d005      	beq.n	800abdc <HAL_RCC_OscConfig+0x200>
 800abd0:	69bb      	ldr	r3, [r7, #24]
 800abd2:	2b0c      	cmp	r3, #12
 800abd4:	d10e      	bne.n	800abf4 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800abd6:	697b      	ldr	r3, [r7, #20]
 800abd8:	2b02      	cmp	r3, #2
 800abda:	d10b      	bne.n	800abf4 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	68db      	ldr	r3, [r3, #12]
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d101      	bne.n	800abe8 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 800abe4:	2301      	movs	r3, #1
 800abe6:	e266      	b.n	800b0b6 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	691b      	ldr	r3, [r3, #16]
 800abec:	4618      	mov	r0, r3
 800abee:	f7ff fc09 	bl	800a404 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800abf2:	e031      	b.n	800ac58 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	68db      	ldr	r3, [r3, #12]
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d019      	beq.n	800ac30 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800abfc:	f7ff fbd2 	bl	800a3a4 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ac00:	f7fc fc1c 	bl	800743c <HAL_GetTick>
 800ac04:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800ac06:	e008      	b.n	800ac1a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800ac08:	f7fc fc18 	bl	800743c <HAL_GetTick>
 800ac0c:	4602      	mov	r2, r0
 800ac0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac10:	1ad3      	subs	r3, r2, r3
 800ac12:	2b02      	cmp	r3, #2
 800ac14:	d901      	bls.n	800ac1a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800ac16:	2303      	movs	r3, #3
 800ac18:	e24d      	b.n	800b0b6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 800ac1a:	f7ff fbe1 	bl	800a3e0 <LL_RCC_HSI_IsReady>
 800ac1e:	4603      	mov	r3, r0
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d0f1      	beq.n	800ac08 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	691b      	ldr	r3, [r3, #16]
 800ac28:	4618      	mov	r0, r3
 800ac2a:	f7ff fbeb 	bl	800a404 <LL_RCC_HSI_SetCalibTrimming>
 800ac2e:	e013      	b.n	800ac58 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800ac30:	f7ff fbc7 	bl	800a3c2 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ac34:	f7fc fc02 	bl	800743c <HAL_GetTick>
 800ac38:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800ac3a:	e008      	b.n	800ac4e <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800ac3c:	f7fc fbfe 	bl	800743c <HAL_GetTick>
 800ac40:	4602      	mov	r2, r0
 800ac42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac44:	1ad3      	subs	r3, r2, r3
 800ac46:	2b02      	cmp	r3, #2
 800ac48:	d901      	bls.n	800ac4e <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 800ac4a:	2303      	movs	r3, #3
 800ac4c:	e233      	b.n	800b0b6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 800ac4e:	f7ff fbc7 	bl	800a3e0 <LL_RCC_HSI_IsReady>
 800ac52:	4603      	mov	r3, r0
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d1f1      	bne.n	800ac3c <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	f003 0308 	and.w	r3, r3, #8
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d106      	bne.n	800ac72 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	f000 80a3 	beq.w	800adb8 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	695b      	ldr	r3, [r3, #20]
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d076      	beq.n	800ad68 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	f003 0310 	and.w	r3, r3, #16
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d046      	beq.n	800ad14 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 800ac86:	f7ff fc7e 	bl	800a586 <LL_RCC_LSI1_IsReady>
 800ac8a:	4603      	mov	r3, r0
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d113      	bne.n	800acb8 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 800ac90:	f7ff fc57 	bl	800a542 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800ac94:	f7fc fbd2 	bl	800743c <HAL_GetTick>
 800ac98:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 800ac9a:	e008      	b.n	800acae <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800ac9c:	f7fc fbce 	bl	800743c <HAL_GetTick>
 800aca0:	4602      	mov	r2, r0
 800aca2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aca4:	1ad3      	subs	r3, r2, r3
 800aca6:	2b02      	cmp	r3, #2
 800aca8:	d901      	bls.n	800acae <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 800acaa:	2303      	movs	r3, #3
 800acac:	e203      	b.n	800b0b6 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 800acae:	f7ff fc6a 	bl	800a586 <LL_RCC_LSI1_IsReady>
 800acb2:	4603      	mov	r3, r0
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d0f1      	beq.n	800ac9c <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 800acb8:	f7ff fc77 	bl	800a5aa <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800acbc:	f7fc fbbe 	bl	800743c <HAL_GetTick>
 800acc0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 800acc2:	e008      	b.n	800acd6 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800acc4:	f7fc fbba 	bl	800743c <HAL_GetTick>
 800acc8:	4602      	mov	r2, r0
 800acca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800accc:	1ad3      	subs	r3, r2, r3
 800acce:	2b03      	cmp	r3, #3
 800acd0:	d901      	bls.n	800acd6 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 800acd2:	2303      	movs	r3, #3
 800acd4:	e1ef      	b.n	800b0b6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 800acd6:	f7ff fc8a 	bl	800a5ee <LL_RCC_LSI2_IsReady>
 800acda:	4603      	mov	r3, r0
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d0f1      	beq.n	800acc4 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	699b      	ldr	r3, [r3, #24]
 800ace4:	4618      	mov	r0, r3
 800ace6:	f7ff fc94 	bl	800a612 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 800acea:	f7ff fc3b 	bl	800a564 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800acee:	f7fc fba5 	bl	800743c <HAL_GetTick>
 800acf2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 800acf4:	e008      	b.n	800ad08 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800acf6:	f7fc fba1 	bl	800743c <HAL_GetTick>
 800acfa:	4602      	mov	r2, r0
 800acfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acfe:	1ad3      	subs	r3, r2, r3
 800ad00:	2b02      	cmp	r3, #2
 800ad02:	d901      	bls.n	800ad08 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 800ad04:	2303      	movs	r3, #3
 800ad06:	e1d6      	b.n	800b0b6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 800ad08:	f7ff fc3d 	bl	800a586 <LL_RCC_LSI1_IsReady>
 800ad0c:	4603      	mov	r3, r0
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d1f1      	bne.n	800acf6 <HAL_RCC_OscConfig+0x31a>
 800ad12:	e051      	b.n	800adb8 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 800ad14:	f7ff fc15 	bl	800a542 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ad18:	f7fc fb90 	bl	800743c <HAL_GetTick>
 800ad1c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 800ad1e:	e00c      	b.n	800ad3a <HAL_RCC_OscConfig+0x35e>
 800ad20:	20000050 	.word	0x20000050
 800ad24:	20000054 	.word	0x20000054
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800ad28:	f7fc fb88 	bl	800743c <HAL_GetTick>
 800ad2c:	4602      	mov	r2, r0
 800ad2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad30:	1ad3      	subs	r3, r2, r3
 800ad32:	2b02      	cmp	r3, #2
 800ad34:	d901      	bls.n	800ad3a <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800ad36:	2303      	movs	r3, #3
 800ad38:	e1bd      	b.n	800b0b6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 800ad3a:	f7ff fc24 	bl	800a586 <LL_RCC_LSI1_IsReady>
 800ad3e:	4603      	mov	r3, r0
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d0f1      	beq.n	800ad28 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 800ad44:	f7ff fc42 	bl	800a5cc <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 800ad48:	e008      	b.n	800ad5c <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800ad4a:	f7fc fb77 	bl	800743c <HAL_GetTick>
 800ad4e:	4602      	mov	r2, r0
 800ad50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad52:	1ad3      	subs	r3, r2, r3
 800ad54:	2b03      	cmp	r3, #3
 800ad56:	d901      	bls.n	800ad5c <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 800ad58:	2303      	movs	r3, #3
 800ad5a:	e1ac      	b.n	800b0b6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 800ad5c:	f7ff fc47 	bl	800a5ee <LL_RCC_LSI2_IsReady>
 800ad60:	4603      	mov	r3, r0
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d1f1      	bne.n	800ad4a <HAL_RCC_OscConfig+0x36e>
 800ad66:	e027      	b.n	800adb8 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 800ad68:	f7ff fc30 	bl	800a5cc <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ad6c:	f7fc fb66 	bl	800743c <HAL_GetTick>
 800ad70:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 800ad72:	e008      	b.n	800ad86 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800ad74:	f7fc fb62 	bl	800743c <HAL_GetTick>
 800ad78:	4602      	mov	r2, r0
 800ad7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad7c:	1ad3      	subs	r3, r2, r3
 800ad7e:	2b03      	cmp	r3, #3
 800ad80:	d901      	bls.n	800ad86 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800ad82:	2303      	movs	r3, #3
 800ad84:	e197      	b.n	800b0b6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 800ad86:	f7ff fc32 	bl	800a5ee <LL_RCC_LSI2_IsReady>
 800ad8a:	4603      	mov	r3, r0
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d1f1      	bne.n	800ad74 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 800ad90:	f7ff fbe8 	bl	800a564 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ad94:	f7fc fb52 	bl	800743c <HAL_GetTick>
 800ad98:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 800ad9a:	e008      	b.n	800adae <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800ad9c:	f7fc fb4e 	bl	800743c <HAL_GetTick>
 800ada0:	4602      	mov	r2, r0
 800ada2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ada4:	1ad3      	subs	r3, r2, r3
 800ada6:	2b02      	cmp	r3, #2
 800ada8:	d901      	bls.n	800adae <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 800adaa:	2303      	movs	r3, #3
 800adac:	e183      	b.n	800b0b6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 800adae:	f7ff fbea 	bl	800a586 <LL_RCC_LSI1_IsReady>
 800adb2:	4603      	mov	r3, r0
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d1f1      	bne.n	800ad9c <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	f003 0304 	and.w	r3, r3, #4
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d05b      	beq.n	800ae7c <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800adc4:	4ba7      	ldr	r3, [pc, #668]	@ (800b064 <HAL_RCC_OscConfig+0x688>)
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800adcc:	2b00      	cmp	r3, #0
 800adce:	d114      	bne.n	800adfa <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800add0:	f7ff fa88 	bl	800a2e4 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800add4:	f7fc fb32 	bl	800743c <HAL_GetTick>
 800add8:	6278      	str	r0, [r7, #36]	@ 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800adda:	e008      	b.n	800adee <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800addc:	f7fc fb2e 	bl	800743c <HAL_GetTick>
 800ade0:	4602      	mov	r2, r0
 800ade2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ade4:	1ad3      	subs	r3, r2, r3
 800ade6:	2b02      	cmp	r3, #2
 800ade8:	d901      	bls.n	800adee <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 800adea:	2303      	movs	r3, #3
 800adec:	e163      	b.n	800b0b6 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800adee:	4b9d      	ldr	r3, [pc, #628]	@ (800b064 <HAL_RCC_OscConfig+0x688>)
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d0f0      	beq.n	800addc <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	689b      	ldr	r3, [r3, #8]
 800adfe:	2b01      	cmp	r3, #1
 800ae00:	d102      	bne.n	800ae08 <HAL_RCC_OscConfig+0x42c>
 800ae02:	f7ff fb48 	bl	800a496 <LL_RCC_LSE_Enable>
 800ae06:	e00c      	b.n	800ae22 <HAL_RCC_OscConfig+0x446>
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	689b      	ldr	r3, [r3, #8]
 800ae0c:	2b05      	cmp	r3, #5
 800ae0e:	d104      	bne.n	800ae1a <HAL_RCC_OscConfig+0x43e>
 800ae10:	f7ff fb63 	bl	800a4da <LL_RCC_LSE_EnableBypass>
 800ae14:	f7ff fb3f 	bl	800a496 <LL_RCC_LSE_Enable>
 800ae18:	e003      	b.n	800ae22 <HAL_RCC_OscConfig+0x446>
 800ae1a:	f7ff fb4d 	bl	800a4b8 <LL_RCC_LSE_Disable>
 800ae1e:	f7ff fb6d 	bl	800a4fc <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	689b      	ldr	r3, [r3, #8]
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d014      	beq.n	800ae54 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ae2a:	f7fc fb07 	bl	800743c <HAL_GetTick>
 800ae2e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 800ae30:	e00a      	b.n	800ae48 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ae32:	f7fc fb03 	bl	800743c <HAL_GetTick>
 800ae36:	4602      	mov	r2, r0
 800ae38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae3a:	1ad3      	subs	r3, r2, r3
 800ae3c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ae40:	4293      	cmp	r3, r2
 800ae42:	d901      	bls.n	800ae48 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 800ae44:	2303      	movs	r3, #3
 800ae46:	e136      	b.n	800b0b6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 800ae48:	f7ff fb69 	bl	800a51e <LL_RCC_LSE_IsReady>
 800ae4c:	4603      	mov	r3, r0
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d0ef      	beq.n	800ae32 <HAL_RCC_OscConfig+0x456>
 800ae52:	e013      	b.n	800ae7c <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ae54:	f7fc faf2 	bl	800743c <HAL_GetTick>
 800ae58:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800ae5a:	e00a      	b.n	800ae72 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ae5c:	f7fc faee 	bl	800743c <HAL_GetTick>
 800ae60:	4602      	mov	r2, r0
 800ae62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae64:	1ad3      	subs	r3, r2, r3
 800ae66:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ae6a:	4293      	cmp	r3, r2
 800ae6c:	d901      	bls.n	800ae72 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 800ae6e:	2303      	movs	r3, #3
 800ae70:	e121      	b.n	800b0b6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 800ae72:	f7ff fb54 	bl	800a51e <LL_RCC_LSE_IsReady>
 800ae76:	4603      	mov	r3, r0
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d1ef      	bne.n	800ae5c <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	d02c      	beq.n	800aee2 <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d014      	beq.n	800aeba <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800ae90:	f7ff facd 	bl	800a42e <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ae94:	f7fc fad2 	bl	800743c <HAL_GetTick>
 800ae98:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 800ae9a:	e008      	b.n	800aeae <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800ae9c:	f7fc face 	bl	800743c <HAL_GetTick>
 800aea0:	4602      	mov	r2, r0
 800aea2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aea4:	1ad3      	subs	r3, r2, r3
 800aea6:	2b02      	cmp	r3, #2
 800aea8:	d901      	bls.n	800aeae <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 800aeaa:	2303      	movs	r3, #3
 800aeac:	e103      	b.n	800b0b6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 800aeae:	f7ff fae0 	bl	800a472 <LL_RCC_HSI48_IsReady>
 800aeb2:	4603      	mov	r3, r0
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d0f1      	beq.n	800ae9c <HAL_RCC_OscConfig+0x4c0>
 800aeb8:	e013      	b.n	800aee2 <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800aeba:	f7ff fac9 	bl	800a450 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800aebe:	f7fc fabd 	bl	800743c <HAL_GetTick>
 800aec2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 800aec4:	e008      	b.n	800aed8 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800aec6:	f7fc fab9 	bl	800743c <HAL_GetTick>
 800aeca:	4602      	mov	r2, r0
 800aecc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aece:	1ad3      	subs	r3, r2, r3
 800aed0:	2b02      	cmp	r3, #2
 800aed2:	d901      	bls.n	800aed8 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 800aed4:	2303      	movs	r3, #3
 800aed6:	e0ee      	b.n	800b0b6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 800aed8:	f7ff facb 	bl	800a472 <LL_RCC_HSI48_IsReady>
 800aedc:	4603      	mov	r3, r0
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d1f1      	bne.n	800aec6 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	f000 80e4 	beq.w	800b0b4 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800aeec:	f7ff fc29 	bl	800a742 <LL_RCC_GetSysClkSource>
 800aef0:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 800aef2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800aef6:	68db      	ldr	r3, [r3, #12]
 800aef8:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aefe:	2b02      	cmp	r3, #2
 800af00:	f040 80b4 	bne.w	800b06c <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	f003 0203 	and.w	r2, r3, #3
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800af0e:	429a      	cmp	r2, r3
 800af10:	d123      	bne.n	800af5a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800af12:	68fb      	ldr	r3, [r7, #12]
 800af14:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800af1c:	429a      	cmp	r2, r3
 800af1e:	d11c      	bne.n	800af5a <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	0a1b      	lsrs	r3, r3, #8
 800af24:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800af2c:	429a      	cmp	r2, r3
 800af2e:	d114      	bne.n	800af5a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800af30:	68fb      	ldr	r3, [r7, #12]
 800af32:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800af3a:	429a      	cmp	r2, r3
 800af3c:	d10d      	bne.n	800af5a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800af3e:	68fb      	ldr	r3, [r7, #12]
 800af40:	f003 6260 	and.w	r2, r3, #234881024	@ 0xe000000
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800af48:	429a      	cmp	r2, r3
 800af4a:	d106      	bne.n	800af5a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800af56:	429a      	cmp	r2, r3
 800af58:	d05d      	beq.n	800b016 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800af5a:	693b      	ldr	r3, [r7, #16]
 800af5c:	2b0c      	cmp	r3, #12
 800af5e:	d058      	beq.n	800b012 <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800af60:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d001      	beq.n	800af72 <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 800af6e:	2301      	movs	r3, #1
 800af70:	e0a1      	b.n	800b0b6 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800af72:	f7ff fc84 	bl	800a87e <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800af76:	f7fc fa61 	bl	800743c <HAL_GetTick>
 800af7a:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800af7c:	e008      	b.n	800af90 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800af7e:	f7fc fa5d 	bl	800743c <HAL_GetTick>
 800af82:	4602      	mov	r2, r0
 800af84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af86:	1ad3      	subs	r3, r2, r3
 800af88:	2b02      	cmp	r3, #2
 800af8a:	d901      	bls.n	800af90 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 800af8c:	2303      	movs	r3, #3
 800af8e:	e092      	b.n	800b0b6 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800af90:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d1ef      	bne.n	800af7e <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800af9e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800afa2:	68da      	ldr	r2, [r3, #12]
 800afa4:	4b30      	ldr	r3, [pc, #192]	@ (800b068 <HAL_RCC_OscConfig+0x68c>)
 800afa6:	4013      	ands	r3, r2
 800afa8:	687a      	ldr	r2, [r7, #4]
 800afaa:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 800afac:	687a      	ldr	r2, [r7, #4]
 800afae:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800afb0:	4311      	orrs	r1, r2
 800afb2:	687a      	ldr	r2, [r7, #4]
 800afb4:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800afb6:	0212      	lsls	r2, r2, #8
 800afb8:	4311      	orrs	r1, r2
 800afba:	687a      	ldr	r2, [r7, #4]
 800afbc:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800afbe:	4311      	orrs	r1, r2
 800afc0:	687a      	ldr	r2, [r7, #4]
 800afc2:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800afc4:	4311      	orrs	r1, r2
 800afc6:	687a      	ldr	r2, [r7, #4]
 800afc8:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800afca:	430a      	orrs	r2, r1
 800afcc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800afd0:	4313      	orrs	r3, r2
 800afd2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800afd4:	f7ff fc44 	bl	800a860 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800afd8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800afdc:	68db      	ldr	r3, [r3, #12]
 800afde:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800afe2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800afe6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800afe8:	f7fc fa28 	bl	800743c <HAL_GetTick>
 800afec:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800afee:	e008      	b.n	800b002 <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800aff0:	f7fc fa24 	bl	800743c <HAL_GetTick>
 800aff4:	4602      	mov	r2, r0
 800aff6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aff8:	1ad3      	subs	r3, r2, r3
 800affa:	2b02      	cmp	r3, #2
 800affc:	d901      	bls.n	800b002 <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 800affe:	2303      	movs	r3, #3
 800b000:	e059      	b.n	800b0b6 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b002:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d0ef      	beq.n	800aff0 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800b010:	e050      	b.n	800b0b4 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800b012:	2301      	movs	r3, #1
 800b014:	e04f      	b.n	800b0b6 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b016:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b020:	2b00      	cmp	r3, #0
 800b022:	d147      	bne.n	800b0b4 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800b024:	f7ff fc1c 	bl	800a860 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800b028:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b02c:	68db      	ldr	r3, [r3, #12]
 800b02e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b032:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b036:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800b038:	f7fc fa00 	bl	800743c <HAL_GetTick>
 800b03c:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b03e:	e008      	b.n	800b052 <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b040:	f7fc f9fc 	bl	800743c <HAL_GetTick>
 800b044:	4602      	mov	r2, r0
 800b046:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b048:	1ad3      	subs	r3, r2, r3
 800b04a:	2b02      	cmp	r3, #2
 800b04c:	d901      	bls.n	800b052 <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 800b04e:	2303      	movs	r3, #3
 800b050:	e031      	b.n	800b0b6 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b052:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d0ef      	beq.n	800b040 <HAL_RCC_OscConfig+0x664>
 800b060:	e028      	b.n	800b0b4 <HAL_RCC_OscConfig+0x6d8>
 800b062:	bf00      	nop
 800b064:	58000400 	.word	0x58000400
 800b068:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800b06c:	693b      	ldr	r3, [r7, #16]
 800b06e:	2b0c      	cmp	r3, #12
 800b070:	d01e      	beq.n	800b0b0 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b072:	f7ff fc04 	bl	800a87e <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b076:	f7fc f9e1 	bl	800743c <HAL_GetTick>
 800b07a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b07c:	e008      	b.n	800b090 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b07e:	f7fc f9dd 	bl	800743c <HAL_GetTick>
 800b082:	4602      	mov	r2, r0
 800b084:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b086:	1ad3      	subs	r3, r2, r3
 800b088:	2b02      	cmp	r3, #2
 800b08a:	d901      	bls.n	800b090 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 800b08c:	2303      	movs	r3, #3
 800b08e:	e012      	b.n	800b0b6 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b090:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	d1ef      	bne.n	800b07e <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 800b09e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b0a2:	68da      	ldr	r2, [r3, #12]
 800b0a4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800b0a8:	4b05      	ldr	r3, [pc, #20]	@ (800b0c0 <HAL_RCC_OscConfig+0x6e4>)
 800b0aa:	4013      	ands	r3, r2
 800b0ac:	60cb      	str	r3, [r1, #12]
 800b0ae:	e001      	b.n	800b0b4 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800b0b0:	2301      	movs	r3, #1
 800b0b2:	e000      	b.n	800b0b6 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 800b0b4:	2300      	movs	r3, #0
}
 800b0b6:	4618      	mov	r0, r3
 800b0b8:	3734      	adds	r7, #52	@ 0x34
 800b0ba:	46bd      	mov	sp, r7
 800b0bc:	bd90      	pop	{r4, r7, pc}
 800b0be:	bf00      	nop
 800b0c0:	eefefffc 	.word	0xeefefffc

0800b0c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b0c4:	b580      	push	{r7, lr}
 800b0c6:	b084      	sub	sp, #16
 800b0c8:	af00      	add	r7, sp, #0
 800b0ca:	6078      	str	r0, [r7, #4]
 800b0cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d101      	bne.n	800b0d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800b0d4:	2301      	movs	r3, #1
 800b0d6:	e12d      	b.n	800b334 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800b0d8:	4b98      	ldr	r3, [pc, #608]	@ (800b33c <HAL_RCC_ClockConfig+0x278>)
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	f003 0307 	and.w	r3, r3, #7
 800b0e0:	683a      	ldr	r2, [r7, #0]
 800b0e2:	429a      	cmp	r2, r3
 800b0e4:	d91b      	bls.n	800b11e <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b0e6:	4b95      	ldr	r3, [pc, #596]	@ (800b33c <HAL_RCC_ClockConfig+0x278>)
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	f023 0207 	bic.w	r2, r3, #7
 800b0ee:	4993      	ldr	r1, [pc, #588]	@ (800b33c <HAL_RCC_ClockConfig+0x278>)
 800b0f0:	683b      	ldr	r3, [r7, #0]
 800b0f2:	4313      	orrs	r3, r2
 800b0f4:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b0f6:	f7fc f9a1 	bl	800743c <HAL_GetTick>
 800b0fa:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b0fc:	e008      	b.n	800b110 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800b0fe:	f7fc f99d 	bl	800743c <HAL_GetTick>
 800b102:	4602      	mov	r2, r0
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	1ad3      	subs	r3, r2, r3
 800b108:	2b02      	cmp	r3, #2
 800b10a:	d901      	bls.n	800b110 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 800b10c:	2303      	movs	r3, #3
 800b10e:	e111      	b.n	800b334 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b110:	4b8a      	ldr	r3, [pc, #552]	@ (800b33c <HAL_RCC_ClockConfig+0x278>)
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	f003 0307 	and.w	r3, r3, #7
 800b118:	683a      	ldr	r2, [r7, #0]
 800b11a:	429a      	cmp	r2, r3
 800b11c:	d1ef      	bne.n	800b0fe <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	f003 0302 	and.w	r3, r3, #2
 800b126:	2b00      	cmp	r3, #0
 800b128:	d016      	beq.n	800b158 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	689b      	ldr	r3, [r3, #8]
 800b12e:	4618      	mov	r0, r3
 800b130:	f7ff fb13 	bl	800a75a <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800b134:	f7fc f982 	bl	800743c <HAL_GetTick>
 800b138:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800b13a:	e008      	b.n	800b14e <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800b13c:	f7fc f97e 	bl	800743c <HAL_GetTick>
 800b140:	4602      	mov	r2, r0
 800b142:	68fb      	ldr	r3, [r7, #12]
 800b144:	1ad3      	subs	r3, r2, r3
 800b146:	2b02      	cmp	r3, #2
 800b148:	d901      	bls.n	800b14e <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800b14a:	2303      	movs	r3, #3
 800b14c:	e0f2      	b.n	800b334 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800b14e:	f7ff fbe8 	bl	800a922 <LL_RCC_IsActiveFlag_HPRE>
 800b152:	4603      	mov	r3, r0
 800b154:	2b00      	cmp	r3, #0
 800b156:	d0f1      	beq.n	800b13c <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	f003 0320 	and.w	r3, r3, #32
 800b160:	2b00      	cmp	r3, #0
 800b162:	d016      	beq.n	800b192 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	695b      	ldr	r3, [r3, #20]
 800b168:	4618      	mov	r0, r3
 800b16a:	f7ff fb0a 	bl	800a782 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800b16e:	f7fc f965 	bl	800743c <HAL_GetTick>
 800b172:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800b174:	e008      	b.n	800b188 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800b176:	f7fc f961 	bl	800743c <HAL_GetTick>
 800b17a:	4602      	mov	r2, r0
 800b17c:	68fb      	ldr	r3, [r7, #12]
 800b17e:	1ad3      	subs	r3, r2, r3
 800b180:	2b02      	cmp	r3, #2
 800b182:	d901      	bls.n	800b188 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 800b184:	2303      	movs	r3, #3
 800b186:	e0d5      	b.n	800b334 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800b188:	f7ff fbdd 	bl	800a946 <LL_RCC_IsActiveFlag_C2HPRE>
 800b18c:	4603      	mov	r3, r0
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d0f1      	beq.n	800b176 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d016      	beq.n	800b1cc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	699b      	ldr	r3, [r3, #24]
 800b1a2:	4618      	mov	r0, r3
 800b1a4:	f7ff fb03 	bl	800a7ae <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800b1a8:	f7fc f948 	bl	800743c <HAL_GetTick>
 800b1ac:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800b1ae:	e008      	b.n	800b1c2 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800b1b0:	f7fc f944 	bl	800743c <HAL_GetTick>
 800b1b4:	4602      	mov	r2, r0
 800b1b6:	68fb      	ldr	r3, [r7, #12]
 800b1b8:	1ad3      	subs	r3, r2, r3
 800b1ba:	2b02      	cmp	r3, #2
 800b1bc:	d901      	bls.n	800b1c2 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800b1be:	2303      	movs	r3, #3
 800b1c0:	e0b8      	b.n	800b334 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800b1c2:	f7ff fbd3 	bl	800a96c <LL_RCC_IsActiveFlag_SHDHPRE>
 800b1c6:	4603      	mov	r3, r0
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d0f1      	beq.n	800b1b0 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	f003 0304 	and.w	r3, r3, #4
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d016      	beq.n	800b206 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	68db      	ldr	r3, [r3, #12]
 800b1dc:	4618      	mov	r0, r3
 800b1de:	f7ff fafd 	bl	800a7dc <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800b1e2:	f7fc f92b 	bl	800743c <HAL_GetTick>
 800b1e6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800b1e8:	e008      	b.n	800b1fc <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800b1ea:	f7fc f927 	bl	800743c <HAL_GetTick>
 800b1ee:	4602      	mov	r2, r0
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	1ad3      	subs	r3, r2, r3
 800b1f4:	2b02      	cmp	r3, #2
 800b1f6:	d901      	bls.n	800b1fc <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 800b1f8:	2303      	movs	r3, #3
 800b1fa:	e09b      	b.n	800b334 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800b1fc:	f7ff fbc9 	bl	800a992 <LL_RCC_IsActiveFlag_PPRE1>
 800b200:	4603      	mov	r3, r0
 800b202:	2b00      	cmp	r3, #0
 800b204:	d0f1      	beq.n	800b1ea <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	f003 0308 	and.w	r3, r3, #8
 800b20e:	2b00      	cmp	r3, #0
 800b210:	d017      	beq.n	800b242 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	691b      	ldr	r3, [r3, #16]
 800b216:	00db      	lsls	r3, r3, #3
 800b218:	4618      	mov	r0, r3
 800b21a:	f7ff faf3 	bl	800a804 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800b21e:	f7fc f90d 	bl	800743c <HAL_GetTick>
 800b222:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800b224:	e008      	b.n	800b238 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800b226:	f7fc f909 	bl	800743c <HAL_GetTick>
 800b22a:	4602      	mov	r2, r0
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	1ad3      	subs	r3, r2, r3
 800b230:	2b02      	cmp	r3, #2
 800b232:	d901      	bls.n	800b238 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 800b234:	2303      	movs	r3, #3
 800b236:	e07d      	b.n	800b334 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800b238:	f7ff fbbd 	bl	800a9b6 <LL_RCC_IsActiveFlag_PPRE2>
 800b23c:	4603      	mov	r3, r0
 800b23e:	2b00      	cmp	r3, #0
 800b240:	d0f1      	beq.n	800b226 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	f003 0301 	and.w	r3, r3, #1
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	d043      	beq.n	800b2d6 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	685b      	ldr	r3, [r3, #4]
 800b252:	2b02      	cmp	r3, #2
 800b254:	d106      	bne.n	800b264 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800b256:	f7ff f893 	bl	800a380 <LL_RCC_HSE_IsReady>
 800b25a:	4603      	mov	r3, r0
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	d11e      	bne.n	800b29e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800b260:	2301      	movs	r3, #1
 800b262:	e067      	b.n	800b334 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	685b      	ldr	r3, [r3, #4]
 800b268:	2b03      	cmp	r3, #3
 800b26a:	d106      	bne.n	800b27a <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 800b26c:	f7ff fb16 	bl	800a89c <LL_RCC_PLL_IsReady>
 800b270:	4603      	mov	r3, r0
 800b272:	2b00      	cmp	r3, #0
 800b274:	d113      	bne.n	800b29e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800b276:	2301      	movs	r3, #1
 800b278:	e05c      	b.n	800b334 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	685b      	ldr	r3, [r3, #4]
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d106      	bne.n	800b290 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800b282:	f7ff f9fb 	bl	800a67c <LL_RCC_MSI_IsReady>
 800b286:	4603      	mov	r3, r0
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d108      	bne.n	800b29e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800b28c:	2301      	movs	r3, #1
 800b28e:	e051      	b.n	800b334 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 800b290:	f7ff f8a6 	bl	800a3e0 <LL_RCC_HSI_IsReady>
 800b294:	4603      	mov	r3, r0
 800b296:	2b00      	cmp	r3, #0
 800b298:	d101      	bne.n	800b29e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800b29a:	2301      	movs	r3, #1
 800b29c:	e04a      	b.n	800b334 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	685b      	ldr	r3, [r3, #4]
 800b2a2:	4618      	mov	r0, r3
 800b2a4:	f7ff fa39 	bl	800a71a <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b2a8:	f7fc f8c8 	bl	800743c <HAL_GetTick>
 800b2ac:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b2ae:	e00a      	b.n	800b2c6 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b2b0:	f7fc f8c4 	bl	800743c <HAL_GetTick>
 800b2b4:	4602      	mov	r2, r0
 800b2b6:	68fb      	ldr	r3, [r7, #12]
 800b2b8:	1ad3      	subs	r3, r2, r3
 800b2ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b2be:	4293      	cmp	r3, r2
 800b2c0:	d901      	bls.n	800b2c6 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 800b2c2:	2303      	movs	r3, #3
 800b2c4:	e036      	b.n	800b334 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b2c6:	f7ff fa3c 	bl	800a742 <LL_RCC_GetSysClkSource>
 800b2ca:	4602      	mov	r2, r0
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	685b      	ldr	r3, [r3, #4]
 800b2d0:	009b      	lsls	r3, r3, #2
 800b2d2:	429a      	cmp	r2, r3
 800b2d4:	d1ec      	bne.n	800b2b0 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800b2d6:	4b19      	ldr	r3, [pc, #100]	@ (800b33c <HAL_RCC_ClockConfig+0x278>)
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	f003 0307 	and.w	r3, r3, #7
 800b2de:	683a      	ldr	r2, [r7, #0]
 800b2e0:	429a      	cmp	r2, r3
 800b2e2:	d21b      	bcs.n	800b31c <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b2e4:	4b15      	ldr	r3, [pc, #84]	@ (800b33c <HAL_RCC_ClockConfig+0x278>)
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	f023 0207 	bic.w	r2, r3, #7
 800b2ec:	4913      	ldr	r1, [pc, #76]	@ (800b33c <HAL_RCC_ClockConfig+0x278>)
 800b2ee:	683b      	ldr	r3, [r7, #0]
 800b2f0:	4313      	orrs	r3, r2
 800b2f2:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b2f4:	f7fc f8a2 	bl	800743c <HAL_GetTick>
 800b2f8:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b2fa:	e008      	b.n	800b30e <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800b2fc:	f7fc f89e 	bl	800743c <HAL_GetTick>
 800b300:	4602      	mov	r2, r0
 800b302:	68fb      	ldr	r3, [r7, #12]
 800b304:	1ad3      	subs	r3, r2, r3
 800b306:	2b02      	cmp	r3, #2
 800b308:	d901      	bls.n	800b30e <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 800b30a:	2303      	movs	r3, #3
 800b30c:	e012      	b.n	800b334 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b30e:	4b0b      	ldr	r3, [pc, #44]	@ (800b33c <HAL_RCC_ClockConfig+0x278>)
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	f003 0307 	and.w	r3, r3, #7
 800b316:	683a      	ldr	r2, [r7, #0]
 800b318:	429a      	cmp	r2, r3
 800b31a:	d1ef      	bne.n	800b2fc <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800b31c:	f000 f87e 	bl	800b41c <HAL_RCC_GetHCLKFreq>
 800b320:	4603      	mov	r3, r0
 800b322:	4a07      	ldr	r2, [pc, #28]	@ (800b340 <HAL_RCC_ClockConfig+0x27c>)
 800b324:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 800b326:	f7fc f895 	bl	8007454 <HAL_GetTickPrio>
 800b32a:	4603      	mov	r3, r0
 800b32c:	4618      	mov	r0, r3
 800b32e:	f7fc f837 	bl	80073a0 <HAL_InitTick>
 800b332:	4603      	mov	r3, r0
}
 800b334:	4618      	mov	r0, r3
 800b336:	3710      	adds	r7, #16
 800b338:	46bd      	mov	sp, r7
 800b33a:	bd80      	pop	{r7, pc}
 800b33c:	58004000 	.word	0x58004000
 800b340:	20000050 	.word	0x20000050

0800b344 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b344:	b590      	push	{r4, r7, lr}
 800b346:	b085      	sub	sp, #20
 800b348:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b34a:	f7ff f9fa 	bl	800a742 <LL_RCC_GetSysClkSource>
 800b34e:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	2b00      	cmp	r3, #0
 800b354:	d10a      	bne.n	800b36c <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800b356:	f7ff f9b6 	bl	800a6c6 <LL_RCC_MSI_GetRange>
 800b35a:	4603      	mov	r3, r0
 800b35c:	091b      	lsrs	r3, r3, #4
 800b35e:	f003 030f 	and.w	r3, r3, #15
 800b362:	4a2b      	ldr	r2, [pc, #172]	@ (800b410 <HAL_RCC_GetSysClockFreq+0xcc>)
 800b364:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b368:	60fb      	str	r3, [r7, #12]
 800b36a:	e04b      	b.n	800b404 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	2b04      	cmp	r3, #4
 800b370:	d102      	bne.n	800b378 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800b372:	4b28      	ldr	r3, [pc, #160]	@ (800b414 <HAL_RCC_GetSysClockFreq+0xd0>)
 800b374:	60fb      	str	r3, [r7, #12]
 800b376:	e045      	b.n	800b404 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	2b08      	cmp	r3, #8
 800b37c:	d10a      	bne.n	800b394 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800b37e:	f7fe ffcf 	bl	800a320 <LL_RCC_HSE_IsEnabledDiv2>
 800b382:	4603      	mov	r3, r0
 800b384:	2b01      	cmp	r3, #1
 800b386:	d102      	bne.n	800b38e <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 800b388:	4b22      	ldr	r3, [pc, #136]	@ (800b414 <HAL_RCC_GetSysClockFreq+0xd0>)
 800b38a:	60fb      	str	r3, [r7, #12]
 800b38c:	e03a      	b.n	800b404 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800b38e:	4b22      	ldr	r3, [pc, #136]	@ (800b418 <HAL_RCC_GetSysClockFreq+0xd4>)
 800b390:	60fb      	str	r3, [r7, #12]
 800b392:	e037      	b.n	800b404 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 800b394:	f7ff fab9 	bl	800a90a <LL_RCC_PLL_GetMainSource>
 800b398:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 800b39a:	683b      	ldr	r3, [r7, #0]
 800b39c:	2b02      	cmp	r3, #2
 800b39e:	d003      	beq.n	800b3a8 <HAL_RCC_GetSysClockFreq+0x64>
 800b3a0:	683b      	ldr	r3, [r7, #0]
 800b3a2:	2b03      	cmp	r3, #3
 800b3a4:	d003      	beq.n	800b3ae <HAL_RCC_GetSysClockFreq+0x6a>
 800b3a6:	e00d      	b.n	800b3c4 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 800b3a8:	4b1a      	ldr	r3, [pc, #104]	@ (800b414 <HAL_RCC_GetSysClockFreq+0xd0>)
 800b3aa:	60bb      	str	r3, [r7, #8]
        break;
 800b3ac:	e015      	b.n	800b3da <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800b3ae:	f7fe ffb7 	bl	800a320 <LL_RCC_HSE_IsEnabledDiv2>
 800b3b2:	4603      	mov	r3, r0
 800b3b4:	2b01      	cmp	r3, #1
 800b3b6:	d102      	bne.n	800b3be <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 800b3b8:	4b16      	ldr	r3, [pc, #88]	@ (800b414 <HAL_RCC_GetSysClockFreq+0xd0>)
 800b3ba:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800b3bc:	e00d      	b.n	800b3da <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 800b3be:	4b16      	ldr	r3, [pc, #88]	@ (800b418 <HAL_RCC_GetSysClockFreq+0xd4>)
 800b3c0:	60bb      	str	r3, [r7, #8]
        break;
 800b3c2:	e00a      	b.n	800b3da <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800b3c4:	f7ff f97f 	bl	800a6c6 <LL_RCC_MSI_GetRange>
 800b3c8:	4603      	mov	r3, r0
 800b3ca:	091b      	lsrs	r3, r3, #4
 800b3cc:	f003 030f 	and.w	r3, r3, #15
 800b3d0:	4a0f      	ldr	r2, [pc, #60]	@ (800b410 <HAL_RCC_GetSysClockFreq+0xcc>)
 800b3d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b3d6:	60bb      	str	r3, [r7, #8]
        break;
 800b3d8:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 800b3da:	f7ff fa71 	bl	800a8c0 <LL_RCC_PLL_GetN>
 800b3de:	4602      	mov	r2, r0
 800b3e0:	68bb      	ldr	r3, [r7, #8]
 800b3e2:	fb03 f402 	mul.w	r4, r3, r2
 800b3e6:	f7ff fa84 	bl	800a8f2 <LL_RCC_PLL_GetDivider>
 800b3ea:	4603      	mov	r3, r0
 800b3ec:	091b      	lsrs	r3, r3, #4
 800b3ee:	3301      	adds	r3, #1
 800b3f0:	fbb4 f4f3 	udiv	r4, r4, r3
 800b3f4:	f7ff fa71 	bl	800a8da <LL_RCC_PLL_GetR>
 800b3f8:	4603      	mov	r3, r0
 800b3fa:	0f5b      	lsrs	r3, r3, #29
 800b3fc:	3301      	adds	r3, #1
 800b3fe:	fbb4 f3f3 	udiv	r3, r4, r3
 800b402:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 800b404:	68fb      	ldr	r3, [r7, #12]
}
 800b406:	4618      	mov	r0, r3
 800b408:	3714      	adds	r7, #20
 800b40a:	46bd      	mov	sp, r7
 800b40c:	bd90      	pop	{r4, r7, pc}
 800b40e:	bf00      	nop
 800b410:	08011b44 	.word	0x08011b44
 800b414:	00f42400 	.word	0x00f42400
 800b418:	01e84800 	.word	0x01e84800

0800b41c <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b41c:	b598      	push	{r3, r4, r7, lr}
 800b41e:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800b420:	f7ff ff90 	bl	800b344 <HAL_RCC_GetSysClockFreq>
 800b424:	4604      	mov	r4, r0
 800b426:	f7ff fa01 	bl	800a82c <LL_RCC_GetAHBPrescaler>
 800b42a:	4603      	mov	r3, r0
 800b42c:	091b      	lsrs	r3, r3, #4
 800b42e:	f003 030f 	and.w	r3, r3, #15
 800b432:	4a03      	ldr	r2, [pc, #12]	@ (800b440 <HAL_RCC_GetHCLKFreq+0x24>)
 800b434:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b438:	fbb4 f3f3 	udiv	r3, r4, r3
}
 800b43c:	4618      	mov	r0, r3
 800b43e:	bd98      	pop	{r3, r4, r7, pc}
 800b440:	08011b04 	.word	0x08011b04

0800b444 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 800b444:	b590      	push	{r4, r7, lr}
 800b446:	b085      	sub	sp, #20
 800b448:	af00      	add	r7, sp, #0
 800b44a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	2bb0      	cmp	r3, #176	@ 0xb0
 800b450:	d903      	bls.n	800b45a <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 800b452:	4b15      	ldr	r3, [pc, #84]	@ (800b4a8 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800b454:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b456:	60fb      	str	r3, [r7, #12]
 800b458:	e007      	b.n	800b46a <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	091b      	lsrs	r3, r3, #4
 800b45e:	f003 030f 	and.w	r3, r3, #15
 800b462:	4a11      	ldr	r2, [pc, #68]	@ (800b4a8 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800b464:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b468:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 800b46a:	f7ff f9eb 	bl	800a844 <LL_RCC_GetAHB4Prescaler>
 800b46e:	4603      	mov	r3, r0
 800b470:	091b      	lsrs	r3, r3, #4
 800b472:	f003 030f 	and.w	r3, r3, #15
 800b476:	4a0d      	ldr	r2, [pc, #52]	@ (800b4ac <RCC_SetFlashLatencyFromMSIRange+0x68>)
 800b478:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b47c:	68fa      	ldr	r2, [r7, #12]
 800b47e:	fbb2 f3f3 	udiv	r3, r2, r3
 800b482:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800b484:	68bb      	ldr	r3, [r7, #8]
 800b486:	4a0a      	ldr	r2, [pc, #40]	@ (800b4b0 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 800b488:	fba2 2303 	umull	r2, r3, r2, r3
 800b48c:	0c9c      	lsrs	r4, r3, #18
 800b48e:	f7fe ff39 	bl	800a304 <HAL_PWREx_GetVoltageRange>
 800b492:	4603      	mov	r3, r0
 800b494:	4619      	mov	r1, r3
 800b496:	4620      	mov	r0, r4
 800b498:	f000 f80c 	bl	800b4b4 <RCC_SetFlashLatency>
 800b49c:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 800b49e:	4618      	mov	r0, r3
 800b4a0:	3714      	adds	r7, #20
 800b4a2:	46bd      	mov	sp, r7
 800b4a4:	bd90      	pop	{r4, r7, pc}
 800b4a6:	bf00      	nop
 800b4a8:	08011b44 	.word	0x08011b44
 800b4ac:	08011b04 	.word	0x08011b04
 800b4b0:	431bde83 	.word	0x431bde83

0800b4b4 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 800b4b4:	b590      	push	{r4, r7, lr}
 800b4b6:	b093      	sub	sp, #76	@ 0x4c
 800b4b8:	af00      	add	r7, sp, #0
 800b4ba:	6078      	str	r0, [r7, #4]
 800b4bc:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 800b4be:	4b37      	ldr	r3, [pc, #220]	@ (800b59c <RCC_SetFlashLatency+0xe8>)
 800b4c0:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 800b4c4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800b4c6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 800b4ca:	4a35      	ldr	r2, [pc, #212]	@ (800b5a0 <RCC_SetFlashLatency+0xec>)
 800b4cc:	f107 031c 	add.w	r3, r7, #28
 800b4d0:	ca07      	ldmia	r2, {r0, r1, r2}
 800b4d2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 800b4d6:	4b33      	ldr	r3, [pc, #204]	@ (800b5a4 <RCC_SetFlashLatency+0xf0>)
 800b4d8:	f107 040c 	add.w	r4, r7, #12
 800b4dc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800b4de:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800b4e2:	2300      	movs	r3, #0
 800b4e4:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800b4e6:	683b      	ldr	r3, [r7, #0]
 800b4e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b4ec:	d11a      	bne.n	800b524 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800b4ee:	2300      	movs	r3, #0
 800b4f0:	643b      	str	r3, [r7, #64]	@ 0x40
 800b4f2:	e013      	b.n	800b51c <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 800b4f4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b4f6:	009b      	lsls	r3, r3, #2
 800b4f8:	3348      	adds	r3, #72	@ 0x48
 800b4fa:	443b      	add	r3, r7
 800b4fc:	f853 3c20 	ldr.w	r3, [r3, #-32]
 800b500:	687a      	ldr	r2, [r7, #4]
 800b502:	429a      	cmp	r2, r3
 800b504:	d807      	bhi.n	800b516 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800b506:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b508:	009b      	lsls	r3, r3, #2
 800b50a:	3348      	adds	r3, #72	@ 0x48
 800b50c:	443b      	add	r3, r7
 800b50e:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800b512:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 800b514:	e020      	b.n	800b558 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800b516:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b518:	3301      	adds	r3, #1
 800b51a:	643b      	str	r3, [r7, #64]	@ 0x40
 800b51c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b51e:	2b03      	cmp	r3, #3
 800b520:	d9e8      	bls.n	800b4f4 <RCC_SetFlashLatency+0x40>
 800b522:	e019      	b.n	800b558 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800b524:	2300      	movs	r3, #0
 800b526:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b528:	e013      	b.n	800b552 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800b52a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b52c:	009b      	lsls	r3, r3, #2
 800b52e:	3348      	adds	r3, #72	@ 0x48
 800b530:	443b      	add	r3, r7
 800b532:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800b536:	687a      	ldr	r2, [r7, #4]
 800b538:	429a      	cmp	r2, r3
 800b53a:	d807      	bhi.n	800b54c <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800b53c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b53e:	009b      	lsls	r3, r3, #2
 800b540:	3348      	adds	r3, #72	@ 0x48
 800b542:	443b      	add	r3, r7
 800b544:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800b548:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 800b54a:	e005      	b.n	800b558 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800b54c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b54e:	3301      	adds	r3, #1
 800b550:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b552:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b554:	2b02      	cmp	r3, #2
 800b556:	d9e8      	bls.n	800b52a <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 800b558:	4b13      	ldr	r3, [pc, #76]	@ (800b5a8 <RCC_SetFlashLatency+0xf4>)
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	f023 0207 	bic.w	r2, r3, #7
 800b560:	4911      	ldr	r1, [pc, #68]	@ (800b5a8 <RCC_SetFlashLatency+0xf4>)
 800b562:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b564:	4313      	orrs	r3, r2
 800b566:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800b568:	f7fb ff68 	bl	800743c <HAL_GetTick>
 800b56c:	63b8      	str	r0, [r7, #56]	@ 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800b56e:	e008      	b.n	800b582 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800b570:	f7fb ff64 	bl	800743c <HAL_GetTick>
 800b574:	4602      	mov	r2, r0
 800b576:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b578:	1ad3      	subs	r3, r2, r3
 800b57a:	2b02      	cmp	r3, #2
 800b57c:	d901      	bls.n	800b582 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 800b57e:	2303      	movs	r3, #3
 800b580:	e007      	b.n	800b592 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800b582:	4b09      	ldr	r3, [pc, #36]	@ (800b5a8 <RCC_SetFlashLatency+0xf4>)
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	f003 0307 	and.w	r3, r3, #7
 800b58a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b58c:	429a      	cmp	r2, r3
 800b58e:	d1ef      	bne.n	800b570 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 800b590:	2300      	movs	r3, #0
}
 800b592:	4618      	mov	r0, r3
 800b594:	374c      	adds	r7, #76	@ 0x4c
 800b596:	46bd      	mov	sp, r7
 800b598:	bd90      	pop	{r4, r7, pc}
 800b59a:	bf00      	nop
 800b59c:	08011960 	.word	0x08011960
 800b5a0:	08011970 	.word	0x08011970
 800b5a4:	0801197c 	.word	0x0801197c
 800b5a8:	58004000 	.word	0x58004000

0800b5ac <LL_RCC_LSE_IsEnabled>:
{
 800b5ac:	b480      	push	{r7}
 800b5ae:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 800b5b0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b5b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b5b8:	f003 0301 	and.w	r3, r3, #1
 800b5bc:	2b01      	cmp	r3, #1
 800b5be:	d101      	bne.n	800b5c4 <LL_RCC_LSE_IsEnabled+0x18>
 800b5c0:	2301      	movs	r3, #1
 800b5c2:	e000      	b.n	800b5c6 <LL_RCC_LSE_IsEnabled+0x1a>
 800b5c4:	2300      	movs	r3, #0
}
 800b5c6:	4618      	mov	r0, r3
 800b5c8:	46bd      	mov	sp, r7
 800b5ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ce:	4770      	bx	lr

0800b5d0 <LL_RCC_LSE_IsReady>:
{
 800b5d0:	b480      	push	{r7}
 800b5d2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800b5d4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b5d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b5dc:	f003 0302 	and.w	r3, r3, #2
 800b5e0:	2b02      	cmp	r3, #2
 800b5e2:	d101      	bne.n	800b5e8 <LL_RCC_LSE_IsReady+0x18>
 800b5e4:	2301      	movs	r3, #1
 800b5e6:	e000      	b.n	800b5ea <LL_RCC_LSE_IsReady+0x1a>
 800b5e8:	2300      	movs	r3, #0
}
 800b5ea:	4618      	mov	r0, r3
 800b5ec:	46bd      	mov	sp, r7
 800b5ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5f2:	4770      	bx	lr

0800b5f4 <LL_RCC_SetRFWKPClockSource>:
{
 800b5f4:	b480      	push	{r7}
 800b5f6:	b083      	sub	sp, #12
 800b5f8:	af00      	add	r7, sp, #0
 800b5fa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 800b5fc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b600:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b604:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800b608:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	4313      	orrs	r3, r2
 800b610:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 800b614:	bf00      	nop
 800b616:	370c      	adds	r7, #12
 800b618:	46bd      	mov	sp, r7
 800b61a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b61e:	4770      	bx	lr

0800b620 <LL_RCC_SetSMPSClockSource>:
{
 800b620:	b480      	push	{r7}
 800b622:	b083      	sub	sp, #12
 800b624:	af00      	add	r7, sp, #0
 800b626:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 800b628:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b62c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b62e:	f023 0203 	bic.w	r2, r3, #3
 800b632:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	4313      	orrs	r3, r2
 800b63a:	624b      	str	r3, [r1, #36]	@ 0x24
}
 800b63c:	bf00      	nop
 800b63e:	370c      	adds	r7, #12
 800b640:	46bd      	mov	sp, r7
 800b642:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b646:	4770      	bx	lr

0800b648 <LL_RCC_SetSMPSPrescaler>:
{
 800b648:	b480      	push	{r7}
 800b64a:	b083      	sub	sp, #12
 800b64c:	af00      	add	r7, sp, #0
 800b64e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 800b650:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b654:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b656:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800b65a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	4313      	orrs	r3, r2
 800b662:	624b      	str	r3, [r1, #36]	@ 0x24
}
 800b664:	bf00      	nop
 800b666:	370c      	adds	r7, #12
 800b668:	46bd      	mov	sp, r7
 800b66a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b66e:	4770      	bx	lr

0800b670 <LL_RCC_SetUSARTClockSource>:
{
 800b670:	b480      	push	{r7}
 800b672:	b083      	sub	sp, #12
 800b674:	af00      	add	r7, sp, #0
 800b676:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 800b678:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b67c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b680:	f023 0203 	bic.w	r2, r3, #3
 800b684:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	4313      	orrs	r3, r2
 800b68c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800b690:	bf00      	nop
 800b692:	370c      	adds	r7, #12
 800b694:	46bd      	mov	sp, r7
 800b696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b69a:	4770      	bx	lr

0800b69c <LL_RCC_SetLPUARTClockSource>:
{
 800b69c:	b480      	push	{r7}
 800b69e:	b083      	sub	sp, #12
 800b6a0:	af00      	add	r7, sp, #0
 800b6a2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 800b6a4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b6a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b6ac:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800b6b0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	4313      	orrs	r3, r2
 800b6b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800b6bc:	bf00      	nop
 800b6be:	370c      	adds	r7, #12
 800b6c0:	46bd      	mov	sp, r7
 800b6c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6c6:	4770      	bx	lr

0800b6c8 <LL_RCC_SetI2CClockSource>:
{
 800b6c8:	b480      	push	{r7}
 800b6ca:	b083      	sub	sp, #12
 800b6cc:	af00      	add	r7, sp, #0
 800b6ce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800b6d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b6d4:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	091b      	lsrs	r3, r3, #4
 800b6dc:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 800b6e0:	43db      	mvns	r3, r3
 800b6e2:	401a      	ands	r2, r3
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	011b      	lsls	r3, r3, #4
 800b6e8:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 800b6ec:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800b6f0:	4313      	orrs	r3, r2
 800b6f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800b6f6:	bf00      	nop
 800b6f8:	370c      	adds	r7, #12
 800b6fa:	46bd      	mov	sp, r7
 800b6fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b700:	4770      	bx	lr

0800b702 <LL_RCC_SetLPTIMClockSource>:
{
 800b702:	b480      	push	{r7}
 800b704:	b083      	sub	sp, #12
 800b706:	af00      	add	r7, sp, #0
 800b708:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800b70a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b70e:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	0c1b      	lsrs	r3, r3, #16
 800b716:	041b      	lsls	r3, r3, #16
 800b718:	43db      	mvns	r3, r3
 800b71a:	401a      	ands	r2, r3
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	041b      	lsls	r3, r3, #16
 800b720:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800b724:	4313      	orrs	r3, r2
 800b726:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800b72a:	bf00      	nop
 800b72c:	370c      	adds	r7, #12
 800b72e:	46bd      	mov	sp, r7
 800b730:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b734:	4770      	bx	lr

0800b736 <LL_RCC_SetSAIClockSource>:
{
 800b736:	b480      	push	{r7}
 800b738:	b083      	sub	sp, #12
 800b73a:	af00      	add	r7, sp, #0
 800b73c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 800b73e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b742:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b746:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800b74a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	4313      	orrs	r3, r2
 800b752:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800b756:	bf00      	nop
 800b758:	370c      	adds	r7, #12
 800b75a:	46bd      	mov	sp, r7
 800b75c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b760:	4770      	bx	lr

0800b762 <LL_RCC_SetRNGClockSource>:
{
 800b762:	b480      	push	{r7}
 800b764:	b083      	sub	sp, #12
 800b766:	af00      	add	r7, sp, #0
 800b768:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800b76a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b76e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b772:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800b776:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	4313      	orrs	r3, r2
 800b77e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800b782:	bf00      	nop
 800b784:	370c      	adds	r7, #12
 800b786:	46bd      	mov	sp, r7
 800b788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b78c:	4770      	bx	lr

0800b78e <LL_RCC_SetCLK48ClockSource>:
{
 800b78e:	b480      	push	{r7}
 800b790:	b083      	sub	sp, #12
 800b792:	af00      	add	r7, sp, #0
 800b794:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 800b796:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b79a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b79e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800b7a2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	4313      	orrs	r3, r2
 800b7aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800b7ae:	bf00      	nop
 800b7b0:	370c      	adds	r7, #12
 800b7b2:	46bd      	mov	sp, r7
 800b7b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7b8:	4770      	bx	lr

0800b7ba <LL_RCC_SetUSBClockSource>:
{
 800b7ba:	b580      	push	{r7, lr}
 800b7bc:	b082      	sub	sp, #8
 800b7be:	af00      	add	r7, sp, #0
 800b7c0:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 800b7c2:	6878      	ldr	r0, [r7, #4]
 800b7c4:	f7ff ffe3 	bl	800b78e <LL_RCC_SetCLK48ClockSource>
}
 800b7c8:	bf00      	nop
 800b7ca:	3708      	adds	r7, #8
 800b7cc:	46bd      	mov	sp, r7
 800b7ce:	bd80      	pop	{r7, pc}

0800b7d0 <LL_RCC_SetADCClockSource>:
{
 800b7d0:	b480      	push	{r7}
 800b7d2:	b083      	sub	sp, #12
 800b7d4:	af00      	add	r7, sp, #0
 800b7d6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800b7d8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b7dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b7e0:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800b7e4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	4313      	orrs	r3, r2
 800b7ec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800b7f0:	bf00      	nop
 800b7f2:	370c      	adds	r7, #12
 800b7f4:	46bd      	mov	sp, r7
 800b7f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7fa:	4770      	bx	lr

0800b7fc <LL_RCC_SetRTCClockSource>:
{
 800b7fc:	b480      	push	{r7}
 800b7fe:	b083      	sub	sp, #12
 800b800:	af00      	add	r7, sp, #0
 800b802:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800b804:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b808:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b80c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800b810:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	4313      	orrs	r3, r2
 800b818:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 800b81c:	bf00      	nop
 800b81e:	370c      	adds	r7, #12
 800b820:	46bd      	mov	sp, r7
 800b822:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b826:	4770      	bx	lr

0800b828 <LL_RCC_GetRTCClockSource>:
{
 800b828:	b480      	push	{r7}
 800b82a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800b82c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b830:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b834:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 800b838:	4618      	mov	r0, r3
 800b83a:	46bd      	mov	sp, r7
 800b83c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b840:	4770      	bx	lr

0800b842 <LL_RCC_ForceBackupDomainReset>:
{
 800b842:	b480      	push	{r7}
 800b844:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800b846:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b84a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b84e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b852:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b856:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800b85a:	bf00      	nop
 800b85c:	46bd      	mov	sp, r7
 800b85e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b862:	4770      	bx	lr

0800b864 <LL_RCC_ReleaseBackupDomainReset>:
{
 800b864:	b480      	push	{r7}
 800b866:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800b868:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b86c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b870:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b874:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b878:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800b87c:	bf00      	nop
 800b87e:	46bd      	mov	sp, r7
 800b880:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b884:	4770      	bx	lr

0800b886 <LL_RCC_PLLSAI1_Enable>:
{
 800b886:	b480      	push	{r7}
 800b888:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800b88a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b894:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800b898:	6013      	str	r3, [r2, #0]
}
 800b89a:	bf00      	nop
 800b89c:	46bd      	mov	sp, r7
 800b89e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8a2:	4770      	bx	lr

0800b8a4 <LL_RCC_PLLSAI1_Disable>:
{
 800b8a4:	b480      	push	{r7}
 800b8a6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800b8a8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b8ac:	681b      	ldr	r3, [r3, #0]
 800b8ae:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b8b2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800b8b6:	6013      	str	r3, [r2, #0]
}
 800b8b8:	bf00      	nop
 800b8ba:	46bd      	mov	sp, r7
 800b8bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8c0:	4770      	bx	lr

0800b8c2 <LL_RCC_PLLSAI1_IsReady>:
{
 800b8c2:	b480      	push	{r7}
 800b8c4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 800b8c6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b8d0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b8d4:	d101      	bne.n	800b8da <LL_RCC_PLLSAI1_IsReady+0x18>
 800b8d6:	2301      	movs	r3, #1
 800b8d8:	e000      	b.n	800b8dc <LL_RCC_PLLSAI1_IsReady+0x1a>
 800b8da:	2300      	movs	r3, #0
}
 800b8dc:	4618      	mov	r0, r3
 800b8de:	46bd      	mov	sp, r7
 800b8e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8e4:	4770      	bx	lr

0800b8e6 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b8e6:	b580      	push	{r7, lr}
 800b8e8:	b088      	sub	sp, #32
 800b8ea:	af00      	add	r7, sp, #0
 800b8ec:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 800b8ee:	2300      	movs	r3, #0
 800b8f0:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 800b8f2:	2300      	movs	r3, #0
 800b8f4:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d034      	beq.n	800b96c <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b906:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800b90a:	d021      	beq.n	800b950 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 800b90c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800b910:	d81b      	bhi.n	800b94a <HAL_RCCEx_PeriphCLKConfig+0x64>
 800b912:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800b916:	d01d      	beq.n	800b954 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 800b918:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800b91c:	d815      	bhi.n	800b94a <HAL_RCCEx_PeriphCLKConfig+0x64>
 800b91e:	2b00      	cmp	r3, #0
 800b920:	d00b      	beq.n	800b93a <HAL_RCCEx_PeriphCLKConfig+0x54>
 800b922:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b926:	d110      	bne.n	800b94a <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 800b928:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b92c:	68db      	ldr	r3, [r3, #12]
 800b92e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b932:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b936:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 800b938:	e00d      	b.n	800b956 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	3304      	adds	r3, #4
 800b93e:	4618      	mov	r0, r3
 800b940:	f000 f947 	bl	800bbd2 <RCCEx_PLLSAI1_ConfigNP>
 800b944:	4603      	mov	r3, r0
 800b946:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 800b948:	e005      	b.n	800b956 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 800b94a:	2301      	movs	r3, #1
 800b94c:	77fb      	strb	r3, [r7, #31]
        break;
 800b94e:	e002      	b.n	800b956 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800b950:	bf00      	nop
 800b952:	e000      	b.n	800b956 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800b954:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b956:	7ffb      	ldrb	r3, [r7, #31]
 800b958:	2b00      	cmp	r3, #0
 800b95a:	d105      	bne.n	800b968 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b960:	4618      	mov	r0, r3
 800b962:	f7ff fee8 	bl	800b736 <LL_RCC_SetSAIClockSource>
 800b966:	e001      	b.n	800b96c <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b968:	7ffb      	ldrb	r3, [r7, #31]
 800b96a:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	681b      	ldr	r3, [r3, #0]
 800b970:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b974:	2b00      	cmp	r3, #0
 800b976:	d046      	beq.n	800ba06 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 800b978:	f7ff ff56 	bl	800b828 <LL_RCC_GetRTCClockSource>
 800b97c:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b982:	69ba      	ldr	r2, [r7, #24]
 800b984:	429a      	cmp	r2, r3
 800b986:	d03c      	beq.n	800ba02 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800b988:	f7fe fcac 	bl	800a2e4 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 800b98c:	69bb      	ldr	r3, [r7, #24]
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d105      	bne.n	800b99e <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b996:	4618      	mov	r0, r3
 800b998:	f7ff ff30 	bl	800b7fc <LL_RCC_SetRTCClockSource>
 800b99c:	e02e      	b.n	800b9fc <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 800b99e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b9a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b9a6:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 800b9a8:	f7ff ff4b 	bl	800b842 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 800b9ac:	f7ff ff5a 	bl	800b864 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 800b9b0:	697b      	ldr	r3, [r7, #20]
 800b9b2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b9ba:	4313      	orrs	r3, r2
 800b9bc:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 800b9be:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b9c2:	697b      	ldr	r3, [r7, #20]
 800b9c4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 800b9c8:	f7ff fdf0 	bl	800b5ac <LL_RCC_LSE_IsEnabled>
 800b9cc:	4603      	mov	r3, r0
 800b9ce:	2b01      	cmp	r3, #1
 800b9d0:	d114      	bne.n	800b9fc <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800b9d2:	f7fb fd33 	bl	800743c <HAL_GetTick>
 800b9d6:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 800b9d8:	e00b      	b.n	800b9f2 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b9da:	f7fb fd2f 	bl	800743c <HAL_GetTick>
 800b9de:	4602      	mov	r2, r0
 800b9e0:	693b      	ldr	r3, [r7, #16]
 800b9e2:	1ad3      	subs	r3, r2, r3
 800b9e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b9e8:	4293      	cmp	r3, r2
 800b9ea:	d902      	bls.n	800b9f2 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 800b9ec:	2303      	movs	r3, #3
 800b9ee:	77fb      	strb	r3, [r7, #31]
              break;
 800b9f0:	e004      	b.n	800b9fc <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 800b9f2:	f7ff fded 	bl	800b5d0 <LL_RCC_LSE_IsReady>
 800b9f6:	4603      	mov	r3, r0
 800b9f8:	2b01      	cmp	r3, #1
 800b9fa:	d1ee      	bne.n	800b9da <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 800b9fc:	7ffb      	ldrb	r3, [r7, #31]
 800b9fe:	77bb      	strb	r3, [r7, #30]
 800ba00:	e001      	b.n	800ba06 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ba02:	7ffb      	ldrb	r3, [r7, #31]
 800ba04:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	f003 0301 	and.w	r3, r3, #1
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d004      	beq.n	800ba1c <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	699b      	ldr	r3, [r3, #24]
 800ba16:	4618      	mov	r0, r3
 800ba18:	f7ff fe2a 	bl	800b670 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	f003 0302 	and.w	r3, r3, #2
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	d004      	beq.n	800ba32 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	69db      	ldr	r3, [r3, #28]
 800ba2c:	4618      	mov	r0, r3
 800ba2e:	f7ff fe35 	bl	800b69c <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	f003 0310 	and.w	r3, r3, #16
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	d004      	beq.n	800ba48 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ba42:	4618      	mov	r0, r3
 800ba44:	f7ff fe5d 	bl	800b702 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	681b      	ldr	r3, [r3, #0]
 800ba4c:	f003 0320 	and.w	r3, r3, #32
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	d004      	beq.n	800ba5e <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba58:	4618      	mov	r0, r3
 800ba5a:	f7ff fe52 	bl	800b702 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	f003 0304 	and.w	r3, r3, #4
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d004      	beq.n	800ba74 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	6a1b      	ldr	r3, [r3, #32]
 800ba6e:	4618      	mov	r0, r3
 800ba70:	f7ff fe2a 	bl	800b6c8 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	f003 0308 	and.w	r3, r3, #8
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	d004      	beq.n	800ba8a <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ba84:	4618      	mov	r0, r3
 800ba86:	f7ff fe1f 	bl	800b6c8 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	681b      	ldr	r3, [r3, #0]
 800ba8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d022      	beq.n	800badc <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ba9a:	4618      	mov	r0, r3
 800ba9c:	f7ff fe8d 	bl	800b7ba <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800baa4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800baa8:	d107      	bne.n	800baba <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 800baaa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800baae:	68db      	ldr	r3, [r3, #12]
 800bab0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800bab4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800bab8:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800babe:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800bac2:	d10b      	bne.n	800badc <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	3304      	adds	r3, #4
 800bac8:	4618      	mov	r0, r3
 800baca:	f000 f8dd 	bl	800bc88 <RCCEx_PLLSAI1_ConfigNQ>
 800bace:	4603      	mov	r3, r0
 800bad0:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800bad2:	7ffb      	ldrb	r3, [r7, #31]
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	d001      	beq.n	800badc <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 800bad8:	7ffb      	ldrb	r3, [r7, #31]
 800bada:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	681b      	ldr	r3, [r3, #0]
 800bae0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	d02b      	beq.n	800bb40 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800baec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800baf0:	d008      	beq.n	800bb04 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800baf6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800bafa:	d003      	beq.n	800bb04 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	d105      	bne.n	800bb10 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bb08:	4618      	mov	r0, r3
 800bb0a:	f7ff fe2a 	bl	800b762 <LL_RCC_SetRNGClockSource>
 800bb0e:	e00a      	b.n	800bb26 <HAL_RCCEx_PeriphCLKConfig+0x240>
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bb14:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800bb18:	60fb      	str	r3, [r7, #12]
 800bb1a:	2000      	movs	r0, #0
 800bb1c:	f7ff fe21 	bl	800b762 <LL_RCC_SetRNGClockSource>
 800bb20:	68f8      	ldr	r0, [r7, #12]
 800bb22:	f7ff fe34 	bl	800b78e <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bb2a:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 800bb2e:	d107      	bne.n	800bb40 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800bb30:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bb34:	68db      	ldr	r3, [r3, #12]
 800bb36:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800bb3a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800bb3e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	d022      	beq.n	800bb92 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bb50:	4618      	mov	r0, r3
 800bb52:	f7ff fe3d 	bl	800b7d0 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bb5a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bb5e:	d107      	bne.n	800bb70 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800bb60:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bb64:	68db      	ldr	r3, [r3, #12]
 800bb66:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800bb6a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800bb6e:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bb74:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bb78:	d10b      	bne.n	800bb92 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	3304      	adds	r3, #4
 800bb7e:	4618      	mov	r0, r3
 800bb80:	f000 f8dd 	bl	800bd3e <RCCEx_PLLSAI1_ConfigNR>
 800bb84:	4603      	mov	r3, r0
 800bb86:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800bb88:	7ffb      	ldrb	r3, [r7, #31]
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	d001      	beq.n	800bb92 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 800bb8e:	7ffb      	ldrb	r3, [r7, #31]
 800bb90:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	681b      	ldr	r3, [r3, #0]
 800bb96:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	d004      	beq.n	800bba8 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bba2:	4618      	mov	r0, r3
 800bba4:	f7ff fd26 	bl	800b5f4 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	681b      	ldr	r3, [r3, #0]
 800bbac:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	d009      	beq.n	800bbc8 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bbb8:	4618      	mov	r0, r3
 800bbba:	f7ff fd45 	bl	800b648 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bbc2:	4618      	mov	r0, r3
 800bbc4:	f7ff fd2c 	bl	800b620 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 800bbc8:	7fbb      	ldrb	r3, [r7, #30]
}
 800bbca:	4618      	mov	r0, r3
 800bbcc:	3720      	adds	r7, #32
 800bbce:	46bd      	mov	sp, r7
 800bbd0:	bd80      	pop	{r7, pc}

0800bbd2 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800bbd2:	b580      	push	{r7, lr}
 800bbd4:	b084      	sub	sp, #16
 800bbd6:	af00      	add	r7, sp, #0
 800bbd8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800bbda:	2300      	movs	r3, #0
 800bbdc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800bbde:	f7ff fe61 	bl	800b8a4 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800bbe2:	f7fb fc2b 	bl	800743c <HAL_GetTick>
 800bbe6:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800bbe8:	e009      	b.n	800bbfe <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800bbea:	f7fb fc27 	bl	800743c <HAL_GetTick>
 800bbee:	4602      	mov	r2, r0
 800bbf0:	68bb      	ldr	r3, [r7, #8]
 800bbf2:	1ad3      	subs	r3, r2, r3
 800bbf4:	2b02      	cmp	r3, #2
 800bbf6:	d902      	bls.n	800bbfe <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 800bbf8:	2303      	movs	r3, #3
 800bbfa:	73fb      	strb	r3, [r7, #15]
      break;
 800bbfc:	e004      	b.n	800bc08 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800bbfe:	f7ff fe60 	bl	800b8c2 <LL_RCC_PLLSAI1_IsReady>
 800bc02:	4603      	mov	r3, r0
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	d1f0      	bne.n	800bbea <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 800bc08:	7bfb      	ldrb	r3, [r7, #15]
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	d137      	bne.n	800bc7e <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800bc0e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bc12:	691b      	ldr	r3, [r3, #16]
 800bc14:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	681b      	ldr	r3, [r3, #0]
 800bc1c:	021b      	lsls	r3, r3, #8
 800bc1e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800bc22:	4313      	orrs	r3, r2
 800bc24:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 800bc26:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bc2a:	691b      	ldr	r3, [r3, #16]
 800bc2c:	f423 1278 	bic.w	r2, r3, #4063232	@ 0x3e0000
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	685b      	ldr	r3, [r3, #4]
 800bc34:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800bc38:	4313      	orrs	r3, r2
 800bc3a:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800bc3c:	f7ff fe23 	bl	800b886 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bc40:	f7fb fbfc 	bl	800743c <HAL_GetTick>
 800bc44:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800bc46:	e009      	b.n	800bc5c <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800bc48:	f7fb fbf8 	bl	800743c <HAL_GetTick>
 800bc4c:	4602      	mov	r2, r0
 800bc4e:	68bb      	ldr	r3, [r7, #8]
 800bc50:	1ad3      	subs	r3, r2, r3
 800bc52:	2b02      	cmp	r3, #2
 800bc54:	d902      	bls.n	800bc5c <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 800bc56:	2303      	movs	r3, #3
 800bc58:	73fb      	strb	r3, [r7, #15]
        break;
 800bc5a:	e004      	b.n	800bc66 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800bc5c:	f7ff fe31 	bl	800b8c2 <LL_RCC_PLLSAI1_IsReady>
 800bc60:	4603      	mov	r3, r0
 800bc62:	2b01      	cmp	r3, #1
 800bc64:	d1f0      	bne.n	800bc48 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 800bc66:	7bfb      	ldrb	r3, [r7, #15]
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	d108      	bne.n	800bc7e <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800bc6c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bc70:	691a      	ldr	r2, [r3, #16]
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	691b      	ldr	r3, [r3, #16]
 800bc76:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800bc7a:	4313      	orrs	r3, r2
 800bc7c:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800bc7e:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc80:	4618      	mov	r0, r3
 800bc82:	3710      	adds	r7, #16
 800bc84:	46bd      	mov	sp, r7
 800bc86:	bd80      	pop	{r7, pc}

0800bc88 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800bc88:	b580      	push	{r7, lr}
 800bc8a:	b084      	sub	sp, #16
 800bc8c:	af00      	add	r7, sp, #0
 800bc8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800bc90:	2300      	movs	r3, #0
 800bc92:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800bc94:	f7ff fe06 	bl	800b8a4 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800bc98:	f7fb fbd0 	bl	800743c <HAL_GetTick>
 800bc9c:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800bc9e:	e009      	b.n	800bcb4 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800bca0:	f7fb fbcc 	bl	800743c <HAL_GetTick>
 800bca4:	4602      	mov	r2, r0
 800bca6:	68bb      	ldr	r3, [r7, #8]
 800bca8:	1ad3      	subs	r3, r2, r3
 800bcaa:	2b02      	cmp	r3, #2
 800bcac:	d902      	bls.n	800bcb4 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 800bcae:	2303      	movs	r3, #3
 800bcb0:	73fb      	strb	r3, [r7, #15]
      break;
 800bcb2:	e004      	b.n	800bcbe <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800bcb4:	f7ff fe05 	bl	800b8c2 <LL_RCC_PLLSAI1_IsReady>
 800bcb8:	4603      	mov	r3, r0
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	d1f0      	bne.n	800bca0 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 800bcbe:	7bfb      	ldrb	r3, [r7, #15]
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	d137      	bne.n	800bd34 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800bcc4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bcc8:	691b      	ldr	r3, [r3, #16]
 800bcca:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	681b      	ldr	r3, [r3, #0]
 800bcd2:	021b      	lsls	r3, r3, #8
 800bcd4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800bcd8:	4313      	orrs	r3, r2
 800bcda:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 800bcdc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bce0:	691b      	ldr	r3, [r3, #16]
 800bce2:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	689b      	ldr	r3, [r3, #8]
 800bcea:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800bcee:	4313      	orrs	r3, r2
 800bcf0:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800bcf2:	f7ff fdc8 	bl	800b886 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bcf6:	f7fb fba1 	bl	800743c <HAL_GetTick>
 800bcfa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800bcfc:	e009      	b.n	800bd12 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800bcfe:	f7fb fb9d 	bl	800743c <HAL_GetTick>
 800bd02:	4602      	mov	r2, r0
 800bd04:	68bb      	ldr	r3, [r7, #8]
 800bd06:	1ad3      	subs	r3, r2, r3
 800bd08:	2b02      	cmp	r3, #2
 800bd0a:	d902      	bls.n	800bd12 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 800bd0c:	2303      	movs	r3, #3
 800bd0e:	73fb      	strb	r3, [r7, #15]
        break;
 800bd10:	e004      	b.n	800bd1c <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800bd12:	f7ff fdd6 	bl	800b8c2 <LL_RCC_PLLSAI1_IsReady>
 800bd16:	4603      	mov	r3, r0
 800bd18:	2b01      	cmp	r3, #1
 800bd1a:	d1f0      	bne.n	800bcfe <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 800bd1c:	7bfb      	ldrb	r3, [r7, #15]
 800bd1e:	2b00      	cmp	r3, #0
 800bd20:	d108      	bne.n	800bd34 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800bd22:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bd26:	691a      	ldr	r2, [r3, #16]
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	691b      	ldr	r3, [r3, #16]
 800bd2c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800bd30:	4313      	orrs	r3, r2
 800bd32:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800bd34:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd36:	4618      	mov	r0, r3
 800bd38:	3710      	adds	r7, #16
 800bd3a:	46bd      	mov	sp, r7
 800bd3c:	bd80      	pop	{r7, pc}

0800bd3e <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800bd3e:	b580      	push	{r7, lr}
 800bd40:	b084      	sub	sp, #16
 800bd42:	af00      	add	r7, sp, #0
 800bd44:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800bd46:	2300      	movs	r3, #0
 800bd48:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800bd4a:	f7ff fdab 	bl	800b8a4 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800bd4e:	f7fb fb75 	bl	800743c <HAL_GetTick>
 800bd52:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800bd54:	e009      	b.n	800bd6a <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800bd56:	f7fb fb71 	bl	800743c <HAL_GetTick>
 800bd5a:	4602      	mov	r2, r0
 800bd5c:	68bb      	ldr	r3, [r7, #8]
 800bd5e:	1ad3      	subs	r3, r2, r3
 800bd60:	2b02      	cmp	r3, #2
 800bd62:	d902      	bls.n	800bd6a <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 800bd64:	2303      	movs	r3, #3
 800bd66:	73fb      	strb	r3, [r7, #15]
      break;
 800bd68:	e004      	b.n	800bd74 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800bd6a:	f7ff fdaa 	bl	800b8c2 <LL_RCC_PLLSAI1_IsReady>
 800bd6e:	4603      	mov	r3, r0
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	d1f0      	bne.n	800bd56 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 800bd74:	7bfb      	ldrb	r3, [r7, #15]
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	d137      	bne.n	800bdea <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800bd7a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bd7e:	691b      	ldr	r3, [r3, #16]
 800bd80:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	021b      	lsls	r3, r3, #8
 800bd8a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800bd8e:	4313      	orrs	r3, r2
 800bd90:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 800bd92:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bd96:	691b      	ldr	r3, [r3, #16]
 800bd98:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	68db      	ldr	r3, [r3, #12]
 800bda0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800bda4:	4313      	orrs	r3, r2
 800bda6:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800bda8:	f7ff fd6d 	bl	800b886 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bdac:	f7fb fb46 	bl	800743c <HAL_GetTick>
 800bdb0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800bdb2:	e009      	b.n	800bdc8 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800bdb4:	f7fb fb42 	bl	800743c <HAL_GetTick>
 800bdb8:	4602      	mov	r2, r0
 800bdba:	68bb      	ldr	r3, [r7, #8]
 800bdbc:	1ad3      	subs	r3, r2, r3
 800bdbe:	2b02      	cmp	r3, #2
 800bdc0:	d902      	bls.n	800bdc8 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 800bdc2:	2303      	movs	r3, #3
 800bdc4:	73fb      	strb	r3, [r7, #15]
        break;
 800bdc6:	e004      	b.n	800bdd2 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800bdc8:	f7ff fd7b 	bl	800b8c2 <LL_RCC_PLLSAI1_IsReady>
 800bdcc:	4603      	mov	r3, r0
 800bdce:	2b01      	cmp	r3, #1
 800bdd0:	d1f0      	bne.n	800bdb4 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 800bdd2:	7bfb      	ldrb	r3, [r7, #15]
 800bdd4:	2b00      	cmp	r3, #0
 800bdd6:	d108      	bne.n	800bdea <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800bdd8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bddc:	691a      	ldr	r2, [r3, #16]
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	691b      	ldr	r3, [r3, #16]
 800bde2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800bde6:	4313      	orrs	r3, r2
 800bde8:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800bdea:	7bfb      	ldrb	r3, [r7, #15]
}
 800bdec:	4618      	mov	r0, r3
 800bdee:	3710      	adds	r7, #16
 800bdf0:	46bd      	mov	sp, r7
 800bdf2:	bd80      	pop	{r7, pc}

0800bdf4 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800bdf4:	b580      	push	{r7, lr}
 800bdf6:	b084      	sub	sp, #16
 800bdf8:	af00      	add	r7, sp, #0
 800bdfa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	2b00      	cmp	r3, #0
 800be00:	d101      	bne.n	800be06 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 800be02:	2301      	movs	r3, #1
 800be04:	e09f      	b.n	800bf46 <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800be0c:	b2db      	uxtb	r3, r3
 800be0e:	2b00      	cmp	r3, #0
 800be10:	d106      	bne.n	800be20 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	2200      	movs	r2, #0
 800be16:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800be1a:	6878      	ldr	r0, [r7, #4]
 800be1c:	f7fb f89c 	bl	8006f58 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	2202      	movs	r2, #2
 800be24:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800be28:	4b49      	ldr	r3, [pc, #292]	@ (800bf50 <HAL_RTC_Init+0x15c>)
 800be2a:	68db      	ldr	r3, [r3, #12]
 800be2c:	f003 0310 	and.w	r3, r3, #16
 800be30:	2b10      	cmp	r3, #16
 800be32:	d07e      	beq.n	800bf32 <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	681b      	ldr	r3, [r3, #0]
 800be38:	22ca      	movs	r2, #202	@ 0xca
 800be3a:	625a      	str	r2, [r3, #36]	@ 0x24
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	2253      	movs	r2, #83	@ 0x53
 800be42:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800be44:	6878      	ldr	r0, [r7, #4]
 800be46:	f000 f8ab 	bl	800bfa0 <RTC_EnterInitMode>
 800be4a:	4603      	mov	r3, r0
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	d00a      	beq.n	800be66 <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	681b      	ldr	r3, [r3, #0]
 800be54:	22ff      	movs	r2, #255	@ 0xff
 800be56:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	2204      	movs	r2, #4
 800be5c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

      status = HAL_ERROR;
 800be60:	2301      	movs	r3, #1
 800be62:	73fb      	strb	r3, [r7, #15]
 800be64:	e067      	b.n	800bf36 <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	681b      	ldr	r3, [r3, #0]
 800be6a:	689b      	ldr	r3, [r3, #8]
 800be6c:	687a      	ldr	r2, [r7, #4]
 800be6e:	6812      	ldr	r2, [r2, #0]
 800be70:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800be74:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800be78:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	681b      	ldr	r3, [r3, #0]
 800be7e:	6899      	ldr	r1, [r3, #8]
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	685a      	ldr	r2, [r3, #4]
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	691b      	ldr	r3, [r3, #16]
 800be88:	431a      	orrs	r2, r3
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	699b      	ldr	r3, [r3, #24]
 800be8e:	431a      	orrs	r2, r3
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	681b      	ldr	r3, [r3, #0]
 800be94:	430a      	orrs	r2, r1
 800be96:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	687a      	ldr	r2, [r7, #4]
 800be9e:	68d2      	ldr	r2, [r2, #12]
 800bea0:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	6919      	ldr	r1, [r3, #16]
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	689b      	ldr	r3, [r3, #8]
 800beac:	041a      	lsls	r2, r3, #16
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	681b      	ldr	r3, [r3, #0]
 800beb2:	430a      	orrs	r2, r1
 800beb4:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	681b      	ldr	r3, [r3, #0]
 800beba:	68da      	ldr	r2, [r3, #12]
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	681b      	ldr	r3, [r3, #0]
 800bec0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800bec4:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	681b      	ldr	r3, [r3, #0]
 800bed0:	f022 0203 	bic.w	r2, r2, #3
 800bed4:	64da      	str	r2, [r3, #76]	@ 0x4c
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	681b      	ldr	r3, [r3, #0]
 800beda:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	69da      	ldr	r2, [r3, #28]
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	695b      	ldr	r3, [r3, #20]
 800bee4:	431a      	orrs	r2, r3
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	681b      	ldr	r3, [r3, #0]
 800beea:	430a      	orrs	r2, r1
 800beec:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	681b      	ldr	r3, [r3, #0]
 800bef2:	689b      	ldr	r3, [r3, #8]
 800bef4:	f003 0320 	and.w	r3, r3, #32
 800bef8:	2b00      	cmp	r3, #0
 800befa:	d113      	bne.n	800bf24 <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800befc:	6878      	ldr	r0, [r7, #4]
 800befe:	f000 f829 	bl	800bf54 <HAL_RTC_WaitForSynchro>
 800bf02:	4603      	mov	r3, r0
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	d00d      	beq.n	800bf24 <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	681b      	ldr	r3, [r3, #0]
 800bf0c:	22ff      	movs	r2, #255	@ 0xff
 800bf0e:	625a      	str	r2, [r3, #36]	@ 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	2204      	movs	r2, #4
 800bf14:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	2200      	movs	r2, #0
 800bf1c:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 800bf20:	2301      	movs	r3, #1
 800bf22:	e010      	b.n	800bf46 <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	681b      	ldr	r3, [r3, #0]
 800bf28:	22ff      	movs	r2, #255	@ 0xff
 800bf2a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Set RTC state */
      status = HAL_OK;
 800bf2c:	2300      	movs	r3, #0
 800bf2e:	73fb      	strb	r3, [r7, #15]
 800bf30:	e001      	b.n	800bf36 <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 800bf32:	2300      	movs	r3, #0
 800bf34:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800bf36:	7bfb      	ldrb	r3, [r7, #15]
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	d103      	bne.n	800bf44 <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	2201      	movs	r2, #1
 800bf40:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  return status;
 800bf44:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf46:	4618      	mov	r0, r3
 800bf48:	3710      	adds	r7, #16
 800bf4a:	46bd      	mov	sp, r7
 800bf4c:	bd80      	pop	{r7, pc}
 800bf4e:	bf00      	nop
 800bf50:	40002800 	.word	0x40002800

0800bf54 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800bf54:	b580      	push	{r7, lr}
 800bf56:	b084      	sub	sp, #16
 800bf58:	af00      	add	r7, sp, #0
 800bf5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	68da      	ldr	r2, [r3, #12]
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	681b      	ldr	r3, [r3, #0]
 800bf66:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800bf6a:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800bf6c:	f7fb fa66 	bl	800743c <HAL_GetTick>
 800bf70:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800bf72:	e009      	b.n	800bf88 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800bf74:	f7fb fa62 	bl	800743c <HAL_GetTick>
 800bf78:	4602      	mov	r2, r0
 800bf7a:	68fb      	ldr	r3, [r7, #12]
 800bf7c:	1ad3      	subs	r3, r2, r3
 800bf7e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800bf82:	d901      	bls.n	800bf88 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 800bf84:	2303      	movs	r3, #3
 800bf86:	e007      	b.n	800bf98 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	681b      	ldr	r3, [r3, #0]
 800bf8c:	68db      	ldr	r3, [r3, #12]
 800bf8e:	f003 0320 	and.w	r3, r3, #32
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	d0ee      	beq.n	800bf74 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 800bf96:	2300      	movs	r3, #0
}
 800bf98:	4618      	mov	r0, r3
 800bf9a:	3710      	adds	r7, #16
 800bf9c:	46bd      	mov	sp, r7
 800bf9e:	bd80      	pop	{r7, pc}

0800bfa0 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800bfa0:	b580      	push	{r7, lr}
 800bfa2:	b084      	sub	sp, #16
 800bfa4:	af00      	add	r7, sp, #0
 800bfa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	681b      	ldr	r3, [r3, #0]
 800bfac:	68db      	ldr	r3, [r3, #12]
 800bfae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	d119      	bne.n	800bfea <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	681b      	ldr	r3, [r3, #0]
 800bfba:	f04f 32ff 	mov.w	r2, #4294967295
 800bfbe:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800bfc0:	f7fb fa3c 	bl	800743c <HAL_GetTick>
 800bfc4:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800bfc6:	e009      	b.n	800bfdc <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800bfc8:	f7fb fa38 	bl	800743c <HAL_GetTick>
 800bfcc:	4602      	mov	r2, r0
 800bfce:	68fb      	ldr	r3, [r7, #12]
 800bfd0:	1ad3      	subs	r3, r2, r3
 800bfd2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800bfd6:	d901      	bls.n	800bfdc <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 800bfd8:	2303      	movs	r3, #3
 800bfda:	e007      	b.n	800bfec <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	681b      	ldr	r3, [r3, #0]
 800bfe0:	68db      	ldr	r3, [r3, #12]
 800bfe2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bfe6:	2b00      	cmp	r3, #0
 800bfe8:	d0ee      	beq.n	800bfc8 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 800bfea:	2300      	movs	r3, #0
}
 800bfec:	4618      	mov	r0, r3
 800bfee:	3710      	adds	r7, #16
 800bff0:	46bd      	mov	sp, r7
 800bff2:	bd80      	pop	{r7, pc}

0800bff4 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 800bff4:	b580      	push	{r7, lr}
 800bff6:	b086      	sub	sp, #24
 800bff8:	af00      	add	r7, sp, #0
 800bffa:	60f8      	str	r0, [r7, #12]
 800bffc:	60b9      	str	r1, [r7, #8]
 800bffe:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800c000:	68fb      	ldr	r3, [r7, #12]
 800c002:	f893 3020 	ldrb.w	r3, [r3, #32]
 800c006:	2b01      	cmp	r3, #1
 800c008:	d101      	bne.n	800c00e <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 800c00a:	2302      	movs	r3, #2
 800c00c:	e0a8      	b.n	800c160 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
 800c00e:	68fb      	ldr	r3, [r7, #12]
 800c010:	2201      	movs	r2, #1
 800c012:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800c016:	68fb      	ldr	r3, [r7, #12]
 800c018:	2202      	movs	r2, #2
 800c01a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c01e:	68fb      	ldr	r3, [r7, #12]
 800c020:	681b      	ldr	r3, [r3, #0]
 800c022:	22ca      	movs	r2, #202	@ 0xca
 800c024:	625a      	str	r2, [r3, #36]	@ 0x24
 800c026:	68fb      	ldr	r3, [r7, #12]
 800c028:	681b      	ldr	r3, [r3, #0]
 800c02a:	2253      	movs	r2, #83	@ 0x53
 800c02c:	625a      	str	r2, [r3, #36]	@ 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 800c02e:	68fb      	ldr	r3, [r7, #12]
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	689b      	ldr	r3, [r3, #8]
 800c034:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c038:	2b00      	cmp	r3, #0
 800c03a:	d020      	beq.n	800c07e <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
  {
    tickstart = HAL_GetTick();
 800c03c:	f7fb f9fe 	bl	800743c <HAL_GetTick>
 800c040:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 800c042:	e015      	b.n	800c070 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800c044:	f7fb f9fa 	bl	800743c <HAL_GetTick>
 800c048:	4602      	mov	r2, r0
 800c04a:	697b      	ldr	r3, [r7, #20]
 800c04c:	1ad3      	subs	r3, r2, r3
 800c04e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800c052:	d90d      	bls.n	800c070 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c054:	68fb      	ldr	r3, [r7, #12]
 800c056:	681b      	ldr	r3, [r3, #0]
 800c058:	22ff      	movs	r2, #255	@ 0xff
 800c05a:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800c05c:	68fb      	ldr	r3, [r7, #12]
 800c05e:	2203      	movs	r2, #3
 800c060:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800c064:	68fb      	ldr	r3, [r7, #12]
 800c066:	2200      	movs	r2, #0
 800c068:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 800c06c:	2303      	movs	r3, #3
 800c06e:	e077      	b.n	800c160 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 800c070:	68fb      	ldr	r3, [r7, #12]
 800c072:	681b      	ldr	r3, [r3, #0]
 800c074:	68db      	ldr	r3, [r3, #12]
 800c076:	f003 0304 	and.w	r3, r3, #4
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	d1e2      	bne.n	800c044 <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800c07e:	68fb      	ldr	r3, [r7, #12]
 800c080:	681b      	ldr	r3, [r3, #0]
 800c082:	689a      	ldr	r2, [r3, #8]
 800c084:	68fb      	ldr	r3, [r7, #12]
 800c086:	681b      	ldr	r3, [r3, #0]
 800c088:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800c08c:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800c08e:	68fb      	ldr	r3, [r7, #12]
 800c090:	681b      	ldr	r3, [r3, #0]
 800c092:	68db      	ldr	r3, [r3, #12]
 800c094:	b2da      	uxtb	r2, r3
 800c096:	68fb      	ldr	r3, [r7, #12]
 800c098:	681b      	ldr	r3, [r3, #0]
 800c09a:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 800c09e:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800c0a0:	f7fb f9cc 	bl	800743c <HAL_GetTick>
 800c0a4:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800c0a6:	e015      	b.n	800c0d4 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800c0a8:	f7fb f9c8 	bl	800743c <HAL_GetTick>
 800c0ac:	4602      	mov	r2, r0
 800c0ae:	697b      	ldr	r3, [r7, #20]
 800c0b0:	1ad3      	subs	r3, r2, r3
 800c0b2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800c0b6:	d90d      	bls.n	800c0d4 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c0b8:	68fb      	ldr	r3, [r7, #12]
 800c0ba:	681b      	ldr	r3, [r3, #0]
 800c0bc:	22ff      	movs	r2, #255	@ 0xff
 800c0be:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800c0c0:	68fb      	ldr	r3, [r7, #12]
 800c0c2:	2203      	movs	r2, #3
 800c0c4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800c0c8:	68fb      	ldr	r3, [r7, #12]
 800c0ca:	2200      	movs	r2, #0
 800c0cc:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 800c0d0:	2303      	movs	r3, #3
 800c0d2:	e045      	b.n	800c160 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800c0d4:	68fb      	ldr	r3, [r7, #12]
 800c0d6:	681b      	ldr	r3, [r3, #0]
 800c0d8:	68db      	ldr	r3, [r3, #12]
 800c0da:	f003 0304 	and.w	r3, r3, #4
 800c0de:	2b00      	cmp	r3, #0
 800c0e0:	d0e2      	beq.n	800c0a8 <HAL_RTCEx_SetWakeUpTimer_IT+0xb4>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 800c0e2:	68fb      	ldr	r3, [r7, #12]
 800c0e4:	681b      	ldr	r3, [r3, #0]
 800c0e6:	68ba      	ldr	r2, [r7, #8]
 800c0e8:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 800c0ea:	68fb      	ldr	r3, [r7, #12]
 800c0ec:	681b      	ldr	r3, [r3, #0]
 800c0ee:	689a      	ldr	r2, [r3, #8]
 800c0f0:	68fb      	ldr	r3, [r7, #12]
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	f022 0207 	bic.w	r2, r2, #7
 800c0f8:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 800c0fa:	68fb      	ldr	r3, [r7, #12]
 800c0fc:	681b      	ldr	r3, [r3, #0]
 800c0fe:	6899      	ldr	r1, [r3, #8]
 800c100:	68fb      	ldr	r3, [r7, #12]
 800c102:	681b      	ldr	r3, [r3, #0]
 800c104:	687a      	ldr	r2, [r7, #4]
 800c106:	430a      	orrs	r2, r1
 800c108:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 800c10a:	4b17      	ldr	r3, [pc, #92]	@ (800c168 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800c10c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c110:	4a15      	ldr	r2, [pc, #84]	@ (800c168 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800c112:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800c116:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 800c11a:	4b13      	ldr	r3, [pc, #76]	@ (800c168 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800c11c:	681b      	ldr	r3, [r3, #0]
 800c11e:	4a12      	ldr	r2, [pc, #72]	@ (800c168 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800c120:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800c124:	6013      	str	r3, [r2, #0]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 800c126:	68fb      	ldr	r3, [r7, #12]
 800c128:	681b      	ldr	r3, [r3, #0]
 800c12a:	689a      	ldr	r2, [r3, #8]
 800c12c:	68fb      	ldr	r3, [r7, #12]
 800c12e:	681b      	ldr	r3, [r3, #0]
 800c130:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800c134:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 800c136:	68fb      	ldr	r3, [r7, #12]
 800c138:	681b      	ldr	r3, [r3, #0]
 800c13a:	689a      	ldr	r2, [r3, #8]
 800c13c:	68fb      	ldr	r3, [r7, #12]
 800c13e:	681b      	ldr	r3, [r3, #0]
 800c140:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800c144:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c146:	68fb      	ldr	r3, [r7, #12]
 800c148:	681b      	ldr	r3, [r3, #0]
 800c14a:	22ff      	movs	r2, #255	@ 0xff
 800c14c:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800c14e:	68fb      	ldr	r3, [r7, #12]
 800c150:	2201      	movs	r2, #1
 800c152:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800c156:	68fb      	ldr	r3, [r7, #12]
 800c158:	2200      	movs	r2, #0
 800c15a:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800c15e:	2300      	movs	r3, #0
}
 800c160:	4618      	mov	r0, r3
 800c162:	3718      	adds	r7, #24
 800c164:	46bd      	mov	sp, r7
 800c166:	bd80      	pop	{r7, pc}
 800c168:	58000800 	.word	0x58000800

0800c16c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c16c:	b580      	push	{r7, lr}
 800c16e:	b082      	sub	sp, #8
 800c170:	af00      	add	r7, sp, #0
 800c172:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	2b00      	cmp	r3, #0
 800c178:	d101      	bne.n	800c17e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c17a:	2301      	movs	r3, #1
 800c17c:	e049      	b.n	800c212 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c184:	b2db      	uxtb	r3, r3
 800c186:	2b00      	cmp	r3, #0
 800c188:	d106      	bne.n	800c198 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	2200      	movs	r2, #0
 800c18e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c192:	6878      	ldr	r0, [r7, #4]
 800c194:	f7fa ff14 	bl	8006fc0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	2202      	movs	r2, #2
 800c19c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	681a      	ldr	r2, [r3, #0]
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	3304      	adds	r3, #4
 800c1a8:	4619      	mov	r1, r3
 800c1aa:	4610      	mov	r0, r2
 800c1ac:	f000 f946 	bl	800c43c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	2201      	movs	r2, #1
 800c1b4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	2201      	movs	r2, #1
 800c1bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	2201      	movs	r2, #1
 800c1c4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	2201      	movs	r2, #1
 800c1cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	2201      	movs	r2, #1
 800c1d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	2201      	movs	r2, #1
 800c1dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	2201      	movs	r2, #1
 800c1e4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	2201      	movs	r2, #1
 800c1ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	2201      	movs	r2, #1
 800c1f4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	2201      	movs	r2, #1
 800c1fc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	2201      	movs	r2, #1
 800c204:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	2201      	movs	r2, #1
 800c20c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800c210:	2300      	movs	r3, #0
}
 800c212:	4618      	mov	r0, r3
 800c214:	3708      	adds	r7, #8
 800c216:	46bd      	mov	sp, r7
 800c218:	bd80      	pop	{r7, pc}
	...

0800c21c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800c21c:	b480      	push	{r7}
 800c21e:	b085      	sub	sp, #20
 800c220:	af00      	add	r7, sp, #0
 800c222:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c22a:	b2db      	uxtb	r3, r3
 800c22c:	2b01      	cmp	r3, #1
 800c22e:	d001      	beq.n	800c234 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800c230:	2301      	movs	r3, #1
 800c232:	e02e      	b.n	800c292 <HAL_TIM_Base_Start+0x76>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	2202      	movs	r2, #2
 800c238:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	681b      	ldr	r3, [r3, #0]
 800c240:	4a17      	ldr	r2, [pc, #92]	@ (800c2a0 <HAL_TIM_Base_Start+0x84>)
 800c242:	4293      	cmp	r3, r2
 800c244:	d004      	beq.n	800c250 <HAL_TIM_Base_Start+0x34>
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	681b      	ldr	r3, [r3, #0]
 800c24a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c24e:	d115      	bne.n	800c27c <HAL_TIM_Base_Start+0x60>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	681b      	ldr	r3, [r3, #0]
 800c254:	689a      	ldr	r2, [r3, #8]
 800c256:	4b13      	ldr	r3, [pc, #76]	@ (800c2a4 <HAL_TIM_Base_Start+0x88>)
 800c258:	4013      	ands	r3, r2
 800c25a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c25c:	68fb      	ldr	r3, [r7, #12]
 800c25e:	2b06      	cmp	r3, #6
 800c260:	d015      	beq.n	800c28e <HAL_TIM_Base_Start+0x72>
 800c262:	68fb      	ldr	r3, [r7, #12]
 800c264:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c268:	d011      	beq.n	800c28e <HAL_TIM_Base_Start+0x72>
    {
      __HAL_TIM_ENABLE(htim);
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	681b      	ldr	r3, [r3, #0]
 800c26e:	681a      	ldr	r2, [r3, #0]
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	681b      	ldr	r3, [r3, #0]
 800c274:	f042 0201 	orr.w	r2, r2, #1
 800c278:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c27a:	e008      	b.n	800c28e <HAL_TIM_Base_Start+0x72>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	681b      	ldr	r3, [r3, #0]
 800c280:	681a      	ldr	r2, [r3, #0]
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	681b      	ldr	r3, [r3, #0]
 800c286:	f042 0201 	orr.w	r2, r2, #1
 800c28a:	601a      	str	r2, [r3, #0]
 800c28c:	e000      	b.n	800c290 <HAL_TIM_Base_Start+0x74>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c28e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c290:	2300      	movs	r3, #0
}
 800c292:	4618      	mov	r0, r3
 800c294:	3714      	adds	r7, #20
 800c296:	46bd      	mov	sp, r7
 800c298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c29c:	4770      	bx	lr
 800c29e:	bf00      	nop
 800c2a0:	40012c00 	.word	0x40012c00
 800c2a4:	00010007 	.word	0x00010007

0800c2a8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c2a8:	b580      	push	{r7, lr}
 800c2aa:	b084      	sub	sp, #16
 800c2ac:	af00      	add	r7, sp, #0
 800c2ae:	6078      	str	r0, [r7, #4]
 800c2b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c2b2:	2300      	movs	r3, #0
 800c2b4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c2bc:	2b01      	cmp	r3, #1
 800c2be:	d101      	bne.n	800c2c4 <HAL_TIM_ConfigClockSource+0x1c>
 800c2c0:	2302      	movs	r3, #2
 800c2c2:	e0b6      	b.n	800c432 <HAL_TIM_ConfigClockSource+0x18a>
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	2201      	movs	r2, #1
 800c2c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	2202      	movs	r2, #2
 800c2d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	681b      	ldr	r3, [r3, #0]
 800c2d8:	689b      	ldr	r3, [r3, #8]
 800c2da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c2dc:	68bb      	ldr	r3, [r7, #8]
 800c2de:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800c2e2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800c2e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c2e8:	68bb      	ldr	r3, [r7, #8]
 800c2ea:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800c2ee:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	681b      	ldr	r3, [r3, #0]
 800c2f4:	68ba      	ldr	r2, [r7, #8]
 800c2f6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c2f8:	683b      	ldr	r3, [r7, #0]
 800c2fa:	681b      	ldr	r3, [r3, #0]
 800c2fc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c300:	d03e      	beq.n	800c380 <HAL_TIM_ConfigClockSource+0xd8>
 800c302:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c306:	f200 8087 	bhi.w	800c418 <HAL_TIM_ConfigClockSource+0x170>
 800c30a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c30e:	f000 8086 	beq.w	800c41e <HAL_TIM_ConfigClockSource+0x176>
 800c312:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c316:	d87f      	bhi.n	800c418 <HAL_TIM_ConfigClockSource+0x170>
 800c318:	2b70      	cmp	r3, #112	@ 0x70
 800c31a:	d01a      	beq.n	800c352 <HAL_TIM_ConfigClockSource+0xaa>
 800c31c:	2b70      	cmp	r3, #112	@ 0x70
 800c31e:	d87b      	bhi.n	800c418 <HAL_TIM_ConfigClockSource+0x170>
 800c320:	2b60      	cmp	r3, #96	@ 0x60
 800c322:	d050      	beq.n	800c3c6 <HAL_TIM_ConfigClockSource+0x11e>
 800c324:	2b60      	cmp	r3, #96	@ 0x60
 800c326:	d877      	bhi.n	800c418 <HAL_TIM_ConfigClockSource+0x170>
 800c328:	2b50      	cmp	r3, #80	@ 0x50
 800c32a:	d03c      	beq.n	800c3a6 <HAL_TIM_ConfigClockSource+0xfe>
 800c32c:	2b50      	cmp	r3, #80	@ 0x50
 800c32e:	d873      	bhi.n	800c418 <HAL_TIM_ConfigClockSource+0x170>
 800c330:	2b40      	cmp	r3, #64	@ 0x40
 800c332:	d058      	beq.n	800c3e6 <HAL_TIM_ConfigClockSource+0x13e>
 800c334:	2b40      	cmp	r3, #64	@ 0x40
 800c336:	d86f      	bhi.n	800c418 <HAL_TIM_ConfigClockSource+0x170>
 800c338:	2b30      	cmp	r3, #48	@ 0x30
 800c33a:	d064      	beq.n	800c406 <HAL_TIM_ConfigClockSource+0x15e>
 800c33c:	2b30      	cmp	r3, #48	@ 0x30
 800c33e:	d86b      	bhi.n	800c418 <HAL_TIM_ConfigClockSource+0x170>
 800c340:	2b20      	cmp	r3, #32
 800c342:	d060      	beq.n	800c406 <HAL_TIM_ConfigClockSource+0x15e>
 800c344:	2b20      	cmp	r3, #32
 800c346:	d867      	bhi.n	800c418 <HAL_TIM_ConfigClockSource+0x170>
 800c348:	2b00      	cmp	r3, #0
 800c34a:	d05c      	beq.n	800c406 <HAL_TIM_ConfigClockSource+0x15e>
 800c34c:	2b10      	cmp	r3, #16
 800c34e:	d05a      	beq.n	800c406 <HAL_TIM_ConfigClockSource+0x15e>
 800c350:	e062      	b.n	800c418 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c356:	683b      	ldr	r3, [r7, #0]
 800c358:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c35a:	683b      	ldr	r3, [r7, #0]
 800c35c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c35e:	683b      	ldr	r3, [r7, #0]
 800c360:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c362:	f000 f957 	bl	800c614 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	681b      	ldr	r3, [r3, #0]
 800c36a:	689b      	ldr	r3, [r3, #8]
 800c36c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c36e:	68bb      	ldr	r3, [r7, #8]
 800c370:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800c374:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	681b      	ldr	r3, [r3, #0]
 800c37a:	68ba      	ldr	r2, [r7, #8]
 800c37c:	609a      	str	r2, [r3, #8]
      break;
 800c37e:	e04f      	b.n	800c420 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c384:	683b      	ldr	r3, [r7, #0]
 800c386:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c388:	683b      	ldr	r3, [r7, #0]
 800c38a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c38c:	683b      	ldr	r3, [r7, #0]
 800c38e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c390:	f000 f940 	bl	800c614 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	681b      	ldr	r3, [r3, #0]
 800c398:	689a      	ldr	r2, [r3, #8]
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800c3a2:	609a      	str	r2, [r3, #8]
      break;
 800c3a4:	e03c      	b.n	800c420 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c3aa:	683b      	ldr	r3, [r7, #0]
 800c3ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c3ae:	683b      	ldr	r3, [r7, #0]
 800c3b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c3b2:	461a      	mov	r2, r3
 800c3b4:	f000 f8b2 	bl	800c51c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	681b      	ldr	r3, [r3, #0]
 800c3bc:	2150      	movs	r1, #80	@ 0x50
 800c3be:	4618      	mov	r0, r3
 800c3c0:	f000 f90b 	bl	800c5da <TIM_ITRx_SetConfig>
      break;
 800c3c4:	e02c      	b.n	800c420 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c3ca:	683b      	ldr	r3, [r7, #0]
 800c3cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c3ce:	683b      	ldr	r3, [r7, #0]
 800c3d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800c3d2:	461a      	mov	r2, r3
 800c3d4:	f000 f8d1 	bl	800c57a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	681b      	ldr	r3, [r3, #0]
 800c3dc:	2160      	movs	r1, #96	@ 0x60
 800c3de:	4618      	mov	r0, r3
 800c3e0:	f000 f8fb 	bl	800c5da <TIM_ITRx_SetConfig>
      break;
 800c3e4:	e01c      	b.n	800c420 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c3ea:	683b      	ldr	r3, [r7, #0]
 800c3ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c3ee:	683b      	ldr	r3, [r7, #0]
 800c3f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c3f2:	461a      	mov	r2, r3
 800c3f4:	f000 f892 	bl	800c51c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	681b      	ldr	r3, [r3, #0]
 800c3fc:	2140      	movs	r1, #64	@ 0x40
 800c3fe:	4618      	mov	r0, r3
 800c400:	f000 f8eb 	bl	800c5da <TIM_ITRx_SetConfig>
      break;
 800c404:	e00c      	b.n	800c420 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	681a      	ldr	r2, [r3, #0]
 800c40a:	683b      	ldr	r3, [r7, #0]
 800c40c:	681b      	ldr	r3, [r3, #0]
 800c40e:	4619      	mov	r1, r3
 800c410:	4610      	mov	r0, r2
 800c412:	f000 f8e2 	bl	800c5da <TIM_ITRx_SetConfig>
      break;
 800c416:	e003      	b.n	800c420 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800c418:	2301      	movs	r3, #1
 800c41a:	73fb      	strb	r3, [r7, #15]
      break;
 800c41c:	e000      	b.n	800c420 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800c41e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	2201      	movs	r2, #1
 800c424:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	2200      	movs	r2, #0
 800c42c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800c430:	7bfb      	ldrb	r3, [r7, #15]
}
 800c432:	4618      	mov	r0, r3
 800c434:	3710      	adds	r7, #16
 800c436:	46bd      	mov	sp, r7
 800c438:	bd80      	pop	{r7, pc}
	...

0800c43c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800c43c:	b480      	push	{r7}
 800c43e:	b085      	sub	sp, #20
 800c440:	af00      	add	r7, sp, #0
 800c442:	6078      	str	r0, [r7, #4]
 800c444:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	681b      	ldr	r3, [r3, #0]
 800c44a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	4a30      	ldr	r2, [pc, #192]	@ (800c510 <TIM_Base_SetConfig+0xd4>)
 800c450:	4293      	cmp	r3, r2
 800c452:	d003      	beq.n	800c45c <TIM_Base_SetConfig+0x20>
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c45a:	d108      	bne.n	800c46e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c45c:	68fb      	ldr	r3, [r7, #12]
 800c45e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c462:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c464:	683b      	ldr	r3, [r7, #0]
 800c466:	685b      	ldr	r3, [r3, #4]
 800c468:	68fa      	ldr	r2, [r7, #12]
 800c46a:	4313      	orrs	r3, r2
 800c46c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	4a27      	ldr	r2, [pc, #156]	@ (800c510 <TIM_Base_SetConfig+0xd4>)
 800c472:	4293      	cmp	r3, r2
 800c474:	d00b      	beq.n	800c48e <TIM_Base_SetConfig+0x52>
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c47c:	d007      	beq.n	800c48e <TIM_Base_SetConfig+0x52>
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	4a24      	ldr	r2, [pc, #144]	@ (800c514 <TIM_Base_SetConfig+0xd8>)
 800c482:	4293      	cmp	r3, r2
 800c484:	d003      	beq.n	800c48e <TIM_Base_SetConfig+0x52>
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	4a23      	ldr	r2, [pc, #140]	@ (800c518 <TIM_Base_SetConfig+0xdc>)
 800c48a:	4293      	cmp	r3, r2
 800c48c:	d108      	bne.n	800c4a0 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c48e:	68fb      	ldr	r3, [r7, #12]
 800c490:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c494:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c496:	683b      	ldr	r3, [r7, #0]
 800c498:	68db      	ldr	r3, [r3, #12]
 800c49a:	68fa      	ldr	r2, [r7, #12]
 800c49c:	4313      	orrs	r3, r2
 800c49e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c4a0:	68fb      	ldr	r3, [r7, #12]
 800c4a2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800c4a6:	683b      	ldr	r3, [r7, #0]
 800c4a8:	695b      	ldr	r3, [r3, #20]
 800c4aa:	4313      	orrs	r3, r2
 800c4ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	68fa      	ldr	r2, [r7, #12]
 800c4b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c4b4:	683b      	ldr	r3, [r7, #0]
 800c4b6:	689a      	ldr	r2, [r3, #8]
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c4bc:	683b      	ldr	r3, [r7, #0]
 800c4be:	681a      	ldr	r2, [r3, #0]
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	4a12      	ldr	r2, [pc, #72]	@ (800c510 <TIM_Base_SetConfig+0xd4>)
 800c4c8:	4293      	cmp	r3, r2
 800c4ca:	d007      	beq.n	800c4dc <TIM_Base_SetConfig+0xa0>
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	4a11      	ldr	r2, [pc, #68]	@ (800c514 <TIM_Base_SetConfig+0xd8>)
 800c4d0:	4293      	cmp	r3, r2
 800c4d2:	d003      	beq.n	800c4dc <TIM_Base_SetConfig+0xa0>
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	4a10      	ldr	r2, [pc, #64]	@ (800c518 <TIM_Base_SetConfig+0xdc>)
 800c4d8:	4293      	cmp	r3, r2
 800c4da:	d103      	bne.n	800c4e4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c4dc:	683b      	ldr	r3, [r7, #0]
 800c4de:	691a      	ldr	r2, [r3, #16]
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	2201      	movs	r2, #1
 800c4e8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	691b      	ldr	r3, [r3, #16]
 800c4ee:	f003 0301 	and.w	r3, r3, #1
 800c4f2:	2b01      	cmp	r3, #1
 800c4f4:	d105      	bne.n	800c502 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	691b      	ldr	r3, [r3, #16]
 800c4fa:	f023 0201 	bic.w	r2, r3, #1
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	611a      	str	r2, [r3, #16]
  }
}
 800c502:	bf00      	nop
 800c504:	3714      	adds	r7, #20
 800c506:	46bd      	mov	sp, r7
 800c508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c50c:	4770      	bx	lr
 800c50e:	bf00      	nop
 800c510:	40012c00 	.word	0x40012c00
 800c514:	40014400 	.word	0x40014400
 800c518:	40014800 	.word	0x40014800

0800c51c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c51c:	b480      	push	{r7}
 800c51e:	b087      	sub	sp, #28
 800c520:	af00      	add	r7, sp, #0
 800c522:	60f8      	str	r0, [r7, #12]
 800c524:	60b9      	str	r1, [r7, #8]
 800c526:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c528:	68fb      	ldr	r3, [r7, #12]
 800c52a:	6a1b      	ldr	r3, [r3, #32]
 800c52c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c52e:	68fb      	ldr	r3, [r7, #12]
 800c530:	6a1b      	ldr	r3, [r3, #32]
 800c532:	f023 0201 	bic.w	r2, r3, #1
 800c536:	68fb      	ldr	r3, [r7, #12]
 800c538:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c53a:	68fb      	ldr	r3, [r7, #12]
 800c53c:	699b      	ldr	r3, [r3, #24]
 800c53e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c540:	693b      	ldr	r3, [r7, #16]
 800c542:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800c546:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	011b      	lsls	r3, r3, #4
 800c54c:	693a      	ldr	r2, [r7, #16]
 800c54e:	4313      	orrs	r3, r2
 800c550:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c552:	697b      	ldr	r3, [r7, #20]
 800c554:	f023 030a 	bic.w	r3, r3, #10
 800c558:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c55a:	697a      	ldr	r2, [r7, #20]
 800c55c:	68bb      	ldr	r3, [r7, #8]
 800c55e:	4313      	orrs	r3, r2
 800c560:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c562:	68fb      	ldr	r3, [r7, #12]
 800c564:	693a      	ldr	r2, [r7, #16]
 800c566:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c568:	68fb      	ldr	r3, [r7, #12]
 800c56a:	697a      	ldr	r2, [r7, #20]
 800c56c:	621a      	str	r2, [r3, #32]
}
 800c56e:	bf00      	nop
 800c570:	371c      	adds	r7, #28
 800c572:	46bd      	mov	sp, r7
 800c574:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c578:	4770      	bx	lr

0800c57a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c57a:	b480      	push	{r7}
 800c57c:	b087      	sub	sp, #28
 800c57e:	af00      	add	r7, sp, #0
 800c580:	60f8      	str	r0, [r7, #12]
 800c582:	60b9      	str	r1, [r7, #8]
 800c584:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800c586:	68fb      	ldr	r3, [r7, #12]
 800c588:	6a1b      	ldr	r3, [r3, #32]
 800c58a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c58c:	68fb      	ldr	r3, [r7, #12]
 800c58e:	6a1b      	ldr	r3, [r3, #32]
 800c590:	f023 0210 	bic.w	r2, r3, #16
 800c594:	68fb      	ldr	r3, [r7, #12]
 800c596:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c598:	68fb      	ldr	r3, [r7, #12]
 800c59a:	699b      	ldr	r3, [r3, #24]
 800c59c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c59e:	693b      	ldr	r3, [r7, #16]
 800c5a0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800c5a4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	031b      	lsls	r3, r3, #12
 800c5aa:	693a      	ldr	r2, [r7, #16]
 800c5ac:	4313      	orrs	r3, r2
 800c5ae:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c5b0:	697b      	ldr	r3, [r7, #20]
 800c5b2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800c5b6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c5b8:	68bb      	ldr	r3, [r7, #8]
 800c5ba:	011b      	lsls	r3, r3, #4
 800c5bc:	697a      	ldr	r2, [r7, #20]
 800c5be:	4313      	orrs	r3, r2
 800c5c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c5c2:	68fb      	ldr	r3, [r7, #12]
 800c5c4:	693a      	ldr	r2, [r7, #16]
 800c5c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c5c8:	68fb      	ldr	r3, [r7, #12]
 800c5ca:	697a      	ldr	r2, [r7, #20]
 800c5cc:	621a      	str	r2, [r3, #32]
}
 800c5ce:	bf00      	nop
 800c5d0:	371c      	adds	r7, #28
 800c5d2:	46bd      	mov	sp, r7
 800c5d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5d8:	4770      	bx	lr

0800c5da <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c5da:	b480      	push	{r7}
 800c5dc:	b085      	sub	sp, #20
 800c5de:	af00      	add	r7, sp, #0
 800c5e0:	6078      	str	r0, [r7, #4]
 800c5e2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	689b      	ldr	r3, [r3, #8]
 800c5e8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c5ea:	68fb      	ldr	r3, [r7, #12]
 800c5ec:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800c5f0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c5f4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c5f6:	683a      	ldr	r2, [r7, #0]
 800c5f8:	68fb      	ldr	r3, [r7, #12]
 800c5fa:	4313      	orrs	r3, r2
 800c5fc:	f043 0307 	orr.w	r3, r3, #7
 800c600:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	68fa      	ldr	r2, [r7, #12]
 800c606:	609a      	str	r2, [r3, #8]
}
 800c608:	bf00      	nop
 800c60a:	3714      	adds	r7, #20
 800c60c:	46bd      	mov	sp, r7
 800c60e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c612:	4770      	bx	lr

0800c614 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c614:	b480      	push	{r7}
 800c616:	b087      	sub	sp, #28
 800c618:	af00      	add	r7, sp, #0
 800c61a:	60f8      	str	r0, [r7, #12]
 800c61c:	60b9      	str	r1, [r7, #8]
 800c61e:	607a      	str	r2, [r7, #4]
 800c620:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c622:	68fb      	ldr	r3, [r7, #12]
 800c624:	689b      	ldr	r3, [r3, #8]
 800c626:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c628:	697b      	ldr	r3, [r7, #20]
 800c62a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800c62e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c630:	683b      	ldr	r3, [r7, #0]
 800c632:	021a      	lsls	r2, r3, #8
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	431a      	orrs	r2, r3
 800c638:	68bb      	ldr	r3, [r7, #8]
 800c63a:	4313      	orrs	r3, r2
 800c63c:	697a      	ldr	r2, [r7, #20]
 800c63e:	4313      	orrs	r3, r2
 800c640:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c642:	68fb      	ldr	r3, [r7, #12]
 800c644:	697a      	ldr	r2, [r7, #20]
 800c646:	609a      	str	r2, [r3, #8]
}
 800c648:	bf00      	nop
 800c64a:	371c      	adds	r7, #28
 800c64c:	46bd      	mov	sp, r7
 800c64e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c652:	4770      	bx	lr

0800c654 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c654:	b480      	push	{r7}
 800c656:	b085      	sub	sp, #20
 800c658:	af00      	add	r7, sp, #0
 800c65a:	6078      	str	r0, [r7, #4]
 800c65c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c664:	2b01      	cmp	r3, #1
 800c666:	d101      	bne.n	800c66c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c668:	2302      	movs	r3, #2
 800c66a:	e04a      	b.n	800c702 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	2201      	movs	r2, #1
 800c670:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	2202      	movs	r2, #2
 800c678:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	681b      	ldr	r3, [r3, #0]
 800c680:	685b      	ldr	r3, [r3, #4]
 800c682:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	681b      	ldr	r3, [r3, #0]
 800c688:	689b      	ldr	r3, [r3, #8]
 800c68a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	681b      	ldr	r3, [r3, #0]
 800c690:	4a1f      	ldr	r2, [pc, #124]	@ (800c710 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 800c692:	4293      	cmp	r3, r2
 800c694:	d108      	bne.n	800c6a8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800c696:	68fb      	ldr	r3, [r7, #12]
 800c698:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800c69c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800c69e:	683b      	ldr	r3, [r7, #0]
 800c6a0:	685b      	ldr	r3, [r3, #4]
 800c6a2:	68fa      	ldr	r2, [r7, #12]
 800c6a4:	4313      	orrs	r3, r2
 800c6a6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c6a8:	68fb      	ldr	r3, [r7, #12]
 800c6aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c6ae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c6b0:	683b      	ldr	r3, [r7, #0]
 800c6b2:	681b      	ldr	r3, [r3, #0]
 800c6b4:	68fa      	ldr	r2, [r7, #12]
 800c6b6:	4313      	orrs	r3, r2
 800c6b8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	681b      	ldr	r3, [r3, #0]
 800c6be:	68fa      	ldr	r2, [r7, #12]
 800c6c0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	681b      	ldr	r3, [r3, #0]
 800c6c6:	4a12      	ldr	r2, [pc, #72]	@ (800c710 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 800c6c8:	4293      	cmp	r3, r2
 800c6ca:	d004      	beq.n	800c6d6 <HAL_TIMEx_MasterConfigSynchronization+0x82>
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	681b      	ldr	r3, [r3, #0]
 800c6d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c6d4:	d10c      	bne.n	800c6f0 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c6d6:	68bb      	ldr	r3, [r7, #8]
 800c6d8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c6dc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c6de:	683b      	ldr	r3, [r7, #0]
 800c6e0:	689b      	ldr	r3, [r3, #8]
 800c6e2:	68ba      	ldr	r2, [r7, #8]
 800c6e4:	4313      	orrs	r3, r2
 800c6e6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	681b      	ldr	r3, [r3, #0]
 800c6ec:	68ba      	ldr	r2, [r7, #8]
 800c6ee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	2201      	movs	r2, #1
 800c6f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	2200      	movs	r2, #0
 800c6fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800c700:	2300      	movs	r3, #0
}
 800c702:	4618      	mov	r0, r3
 800c704:	3714      	adds	r7, #20
 800c706:	46bd      	mov	sp, r7
 800c708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c70c:	4770      	bx	lr
 800c70e:	bf00      	nop
 800c710:	40012c00 	.word	0x40012c00

0800c714 <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 800c714:	b580      	push	{r7, lr}
 800c716:	b088      	sub	sp, #32
 800c718:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800c71a:	2300      	movs	r3, #0
 800c71c:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800c71e:	f107 0308 	add.w	r3, r7, #8
 800c722:	2218      	movs	r2, #24
 800c724:	2100      	movs	r1, #0
 800c726:	4618      	mov	r0, r3
 800c728:	f001 f92d 	bl	800d986 <Osal_MemSet>
  rq.ogf = 0x3f;
 800c72c:	233f      	movs	r3, #63	@ 0x3f
 800c72e:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 800c730:	2381      	movs	r3, #129	@ 0x81
 800c732:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800c734:	1dfb      	adds	r3, r7, #7
 800c736:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800c738:	2301      	movs	r3, #1
 800c73a:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800c73c:	f107 0308 	add.w	r3, r7, #8
 800c740:	2100      	movs	r1, #0
 800c742:	4618      	mov	r0, r3
 800c744:	f001 fba8 	bl	800de98 <hci_send_req>
 800c748:	4603      	mov	r3, r0
 800c74a:	2b00      	cmp	r3, #0
 800c74c:	da01      	bge.n	800c752 <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 800c74e:	23ff      	movs	r3, #255	@ 0xff
 800c750:	e000      	b.n	800c754 <aci_gap_set_non_discoverable+0x40>
  return status;
 800c752:	79fb      	ldrb	r3, [r7, #7]
}
 800c754:	4618      	mov	r0, r3
 800c756:	3720      	adds	r7, #32
 800c758:	46bd      	mov	sp, r7
 800c75a:	bd80      	pop	{r7, pc}

0800c75c <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Conn_Interval_Min,
                                     uint16_t Conn_Interval_Max )
{
 800c75c:	b5b0      	push	{r4, r5, r7, lr}
 800c75e:	b0ce      	sub	sp, #312	@ 0x138
 800c760:	af00      	add	r7, sp, #0
 800c762:	4605      	mov	r5, r0
 800c764:	460c      	mov	r4, r1
 800c766:	4610      	mov	r0, r2
 800c768:	4619      	mov	r1, r3
 800c76a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800c76e:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 800c772:	462a      	mov	r2, r5
 800c774:	701a      	strb	r2, [r3, #0]
 800c776:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800c77a:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800c77e:	4622      	mov	r2, r4
 800c780:	801a      	strh	r2, [r3, #0]
 800c782:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800c786:	f5a3 739b 	sub.w	r3, r3, #310	@ 0x136
 800c78a:	4602      	mov	r2, r0
 800c78c:	801a      	strh	r2, [r3, #0]
 800c78e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800c792:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 800c796:	460a      	mov	r2, r1
 800c798:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 800c79a:	f107 0310 	add.w	r3, r7, #16
 800c79e:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 800c7a2:	f897 314c 	ldrb.w	r3, [r7, #332]	@ 0x14c
 800c7a6:	3308      	adds	r3, #8
 800c7a8:	f107 0210 	add.w	r2, r7, #16
 800c7ac:	4413      	add	r3, r2
 800c7ae:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 800c7b2:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 800c7b6:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 800c7ba:	4413      	add	r3, r2
 800c7bc:	3309      	adds	r3, #9
 800c7be:	f107 0210 	add.w	r2, r7, #16
 800c7c2:	4413      	add	r3, r2
 800c7c4:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800c7c8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800c7cc:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800c7d0:	2200      	movs	r2, #0
 800c7d2:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800c7d4:	2300      	movs	r3, #0
 800c7d6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Type = Advertising_Type;
 800c7da:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800c7de:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800c7e2:	f2a2 1231 	subw	r2, r2, #305	@ 0x131
 800c7e6:	7812      	ldrb	r2, [r2, #0]
 800c7e8:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800c7ea:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800c7ee:	3301      	adds	r3, #1
 800c7f0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 800c7f4:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800c7f8:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800c7fc:	f5a2 729a 	sub.w	r2, r2, #308	@ 0x134
 800c800:	8812      	ldrh	r2, [r2, #0]
 800c802:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 800c806:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800c80a:	3302      	adds	r3, #2
 800c80c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 800c810:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800c814:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800c818:	f5a2 729b 	sub.w	r2, r2, #310	@ 0x136
 800c81c:	8812      	ldrh	r2, [r2, #0]
 800c81e:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 800c822:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800c826:	3302      	adds	r3, #2
 800c828:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 800c82c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800c830:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800c834:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 800c838:	7812      	ldrb	r2, [r2, #0]
 800c83a:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800c83c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800c840:	3301      	adds	r3, #1
 800c842:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 800c846:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800c84a:	f897 2148 	ldrb.w	r2, [r7, #328]	@ 0x148
 800c84e:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 800c850:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800c854:	3301      	adds	r3, #1
 800c856:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 800c85a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800c85e:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 800c862:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 800c864:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800c868:	3301      	adds	r3, #1
 800c86a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 800c86e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800c872:	3308      	adds	r3, #8
 800c874:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 800c878:	f8d7 1150 	ldr.w	r1, [r7, #336]	@ 0x150
 800c87c:	4618      	mov	r0, r3
 800c87e:	f001 f872 	bl	800d966 <Osal_MemCpy>
    index_input += Local_Name_Length;
 800c882:	f897 314c 	ldrb.w	r3, [r7, #332]	@ 0x14c
 800c886:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800c88a:	4413      	add	r3, r2
 800c88c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 800c890:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800c894:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 800c898:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 800c89a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800c89e:	3301      	adds	r3, #1
 800c8a0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 800c8a4:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800c8a8:	3301      	adds	r3, #1
 800c8aa:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 800c8ae:	f8d7 1158 	ldr.w	r1, [r7, #344]	@ 0x158
 800c8b2:	4618      	mov	r0, r3
 800c8b4:	f001 f857 	bl	800d966 <Osal_MemCpy>
    index_input += Service_Uuid_length;
 800c8b8:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 800c8bc:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800c8c0:	4413      	add	r3, r2
 800c8c2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp2->Conn_Interval_Min = Conn_Interval_Min;
 800c8c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800c8ca:	f8b7 215c 	ldrh.w	r2, [r7, #348]	@ 0x15c
 800c8ce:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 800c8d0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800c8d4:	3302      	adds	r3, #2
 800c8d6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp2->Conn_Interval_Max = Conn_Interval_Max;
 800c8da:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800c8de:	f8b7 2160 	ldrh.w	r2, [r7, #352]	@ 0x160
 800c8e2:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 800c8e4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800c8e8:	3302      	adds	r3, #2
 800c8ea:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800c8ee:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800c8f2:	2218      	movs	r2, #24
 800c8f4:	2100      	movs	r1, #0
 800c8f6:	4618      	mov	r0, r3
 800c8f8:	f001 f845 	bl	800d986 <Osal_MemSet>
  rq.ogf = 0x3f;
 800c8fc:	233f      	movs	r3, #63	@ 0x3f
 800c8fe:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x083;
 800c902:	2383      	movs	r3, #131	@ 0x83
 800c904:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800c908:	f107 0310 	add.w	r3, r7, #16
 800c90c:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800c910:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800c914:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800c918:	f107 030f 	add.w	r3, r7, #15
 800c91c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800c920:	2301      	movs	r3, #1
 800c922:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800c926:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800c92a:	2100      	movs	r1, #0
 800c92c:	4618      	mov	r0, r3
 800c92e:	f001 fab3 	bl	800de98 <hci_send_req>
 800c932:	4603      	mov	r3, r0
 800c934:	2b00      	cmp	r3, #0
 800c936:	da01      	bge.n	800c93c <aci_gap_set_discoverable+0x1e0>
    return BLE_STATUS_TIMEOUT;
 800c938:	23ff      	movs	r3, #255	@ 0xff
 800c93a:	e004      	b.n	800c946 <aci_gap_set_discoverable+0x1ea>
  return status;
 800c93c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800c940:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800c944:	781b      	ldrb	r3, [r3, #0]
}
 800c946:	4618      	mov	r0, r3
 800c948:	f507 779c 	add.w	r7, r7, #312	@ 0x138
 800c94c:	46bd      	mov	sp, r7
 800c94e:	bdb0      	pop	{r4, r5, r7, pc}

0800c950 <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 800c950:	b580      	push	{r7, lr}
 800c952:	b0cc      	sub	sp, #304	@ 0x130
 800c954:	af00      	add	r7, sp, #0
 800c956:	4602      	mov	r2, r0
 800c958:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800c95c:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800c960:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 800c962:	f107 0310 	add.w	r3, r7, #16
 800c966:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800c96a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800c96e:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800c972:	2200      	movs	r2, #0
 800c974:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800c976:	2300      	movs	r3, #0
 800c978:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->IO_Capability = IO_Capability;
 800c97c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800c980:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800c984:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800c988:	7812      	ldrb	r2, [r2, #0]
 800c98a:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800c98c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800c990:	3301      	adds	r3, #1
 800c992:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800c996:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800c99a:	2218      	movs	r2, #24
 800c99c:	2100      	movs	r1, #0
 800c99e:	4618      	mov	r0, r3
 800c9a0:	f000 fff1 	bl	800d986 <Osal_MemSet>
  rq.ogf = 0x3f;
 800c9a4:	233f      	movs	r3, #63	@ 0x3f
 800c9a6:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x085;
 800c9aa:	2385      	movs	r3, #133	@ 0x85
 800c9ac:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800c9b0:	f107 0310 	add.w	r3, r7, #16
 800c9b4:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800c9b8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800c9bc:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800c9c0:	f107 030f 	add.w	r3, r7, #15
 800c9c4:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800c9c8:	2301      	movs	r3, #1
 800c9ca:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800c9ce:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800c9d2:	2100      	movs	r1, #0
 800c9d4:	4618      	mov	r0, r3
 800c9d6:	f001 fa5f 	bl	800de98 <hci_send_req>
 800c9da:	4603      	mov	r3, r0
 800c9dc:	2b00      	cmp	r3, #0
 800c9de:	da01      	bge.n	800c9e4 <aci_gap_set_io_capability+0x94>
    return BLE_STATUS_TIMEOUT;
 800c9e0:	23ff      	movs	r3, #255	@ 0xff
 800c9e2:	e004      	b.n	800c9ee <aci_gap_set_io_capability+0x9e>
  return status;
 800c9e4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800c9e8:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800c9ec:	781b      	ldrb	r3, [r3, #0]
}
 800c9ee:	4618      	mov	r0, r3
 800c9f0:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800c9f4:	46bd      	mov	sp, r7
 800c9f6:	bd80      	pop	{r7, pc}

0800c9f8 <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 800c9f8:	b5b0      	push	{r4, r5, r7, lr}
 800c9fa:	b0cc      	sub	sp, #304	@ 0x130
 800c9fc:	af00      	add	r7, sp, #0
 800c9fe:	4605      	mov	r5, r0
 800ca00:	460c      	mov	r4, r1
 800ca02:	4610      	mov	r0, r2
 800ca04:	4619      	mov	r1, r3
 800ca06:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800ca0a:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800ca0e:	462a      	mov	r2, r5
 800ca10:	701a      	strb	r2, [r3, #0]
 800ca12:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800ca16:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800ca1a:	4622      	mov	r2, r4
 800ca1c:	701a      	strb	r2, [r3, #0]
 800ca1e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800ca22:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 800ca26:	4602      	mov	r2, r0
 800ca28:	701a      	strb	r2, [r3, #0]
 800ca2a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800ca2e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800ca32:	460a      	mov	r2, r1
 800ca34:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 800ca36:	f107 0310 	add.w	r3, r7, #16
 800ca3a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800ca3e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800ca42:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800ca46:	2200      	movs	r2, #0
 800ca48:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800ca4a:	2300      	movs	r3, #0
 800ca4c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 800ca50:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800ca54:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800ca58:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800ca5c:	7812      	ldrb	r2, [r2, #0]
 800ca5e:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800ca60:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800ca64:	3301      	adds	r3, #1
 800ca66:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->MITM_Mode = MITM_Mode;
 800ca6a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800ca6e:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800ca72:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800ca76:	7812      	ldrb	r2, [r2, #0]
 800ca78:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800ca7a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800ca7e:	3301      	adds	r3, #1
 800ca80:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->SC_Support = SC_Support;
 800ca84:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800ca88:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800ca8c:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 800ca90:	7812      	ldrb	r2, [r2, #0]
 800ca92:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800ca94:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800ca98:	3301      	adds	r3, #1
 800ca9a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 800ca9e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800caa2:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800caa6:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 800caaa:	7812      	ldrb	r2, [r2, #0]
 800caac:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 800caae:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800cab2:	3301      	adds	r3, #1
 800cab4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 800cab8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800cabc:	f897 2140 	ldrb.w	r2, [r7, #320]	@ 0x140
 800cac0:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800cac2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800cac6:	3301      	adds	r3, #1
 800cac8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 800cacc:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800cad0:	f897 2144 	ldrb.w	r2, [r7, #324]	@ 0x144
 800cad4:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800cad6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800cada:	3301      	adds	r3, #1
 800cadc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 800cae0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800cae4:	f897 2148 	ldrb.w	r2, [r7, #328]	@ 0x148
 800cae8:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 800caea:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800caee:	3301      	adds	r3, #1
 800caf0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 800caf4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800caf8:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 800cafc:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 800cb00:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800cb04:	3304      	adds	r3, #4
 800cb06:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 800cb0a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800cb0e:	f897 2150 	ldrb.w	r2, [r7, #336]	@ 0x150
 800cb12:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 800cb14:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800cb18:	3301      	adds	r3, #1
 800cb1a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800cb1e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800cb22:	2218      	movs	r2, #24
 800cb24:	2100      	movs	r1, #0
 800cb26:	4618      	mov	r0, r3
 800cb28:	f000 ff2d 	bl	800d986 <Osal_MemSet>
  rq.ogf = 0x3f;
 800cb2c:	233f      	movs	r3, #63	@ 0x3f
 800cb2e:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x086;
 800cb32:	2386      	movs	r3, #134	@ 0x86
 800cb34:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800cb38:	f107 0310 	add.w	r3, r7, #16
 800cb3c:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800cb40:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800cb44:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800cb48:	f107 030f 	add.w	r3, r7, #15
 800cb4c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800cb50:	2301      	movs	r3, #1
 800cb52:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800cb56:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800cb5a:	2100      	movs	r1, #0
 800cb5c:	4618      	mov	r0, r3
 800cb5e:	f001 f99b 	bl	800de98 <hci_send_req>
 800cb62:	4603      	mov	r3, r0
 800cb64:	2b00      	cmp	r3, #0
 800cb66:	da01      	bge.n	800cb6c <aci_gap_set_authentication_requirement+0x174>
    return BLE_STATUS_TIMEOUT;
 800cb68:	23ff      	movs	r3, #255	@ 0xff
 800cb6a:	e004      	b.n	800cb76 <aci_gap_set_authentication_requirement+0x17e>
  return status;
 800cb6c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800cb70:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800cb74:	781b      	ldrb	r3, [r3, #0]
}
 800cb76:	4618      	mov	r0, r3
 800cb78:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800cb7c:	46bd      	mov	sp, r7
 800cb7e:	bdb0      	pop	{r4, r5, r7, pc}

0800cb80 <aci_gap_pass_key_resp>:
  return status;
}

tBleStatus aci_gap_pass_key_resp( uint16_t Connection_Handle,
                                  uint32_t Pass_Key )
{
 800cb80:	b580      	push	{r7, lr}
 800cb82:	b0cc      	sub	sp, #304	@ 0x130
 800cb84:	af00      	add	r7, sp, #0
 800cb86:	4602      	mov	r2, r0
 800cb88:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800cb8c:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800cb90:	6019      	str	r1, [r3, #0]
 800cb92:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800cb96:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800cb9a:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_pass_key_resp_cp0 *cp0 = (aci_gap_pass_key_resp_cp0*)(cmd_buffer);
 800cb9c:	f107 0310 	add.w	r3, r7, #16
 800cba0:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800cba4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800cba8:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800cbac:	2200      	movs	r2, #0
 800cbae:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800cbb0:	2300      	movs	r3, #0
 800cbb2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 800cbb6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800cbba:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800cbbe:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800cbc2:	8812      	ldrh	r2, [r2, #0]
 800cbc4:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800cbc6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800cbca:	3302      	adds	r3, #2
 800cbcc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Pass_Key = Pass_Key;
 800cbd0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800cbd4:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800cbd8:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 800cbdc:	6812      	ldr	r2, [r2, #0]
 800cbde:	f8c3 2002 	str.w	r2, [r3, #2]
  index_input += 4;
 800cbe2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800cbe6:	3304      	adds	r3, #4
 800cbe8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800cbec:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800cbf0:	2218      	movs	r2, #24
 800cbf2:	2100      	movs	r1, #0
 800cbf4:	4618      	mov	r0, r3
 800cbf6:	f000 fec6 	bl	800d986 <Osal_MemSet>
  rq.ogf = 0x3f;
 800cbfa:	233f      	movs	r3, #63	@ 0x3f
 800cbfc:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x088;
 800cc00:	2388      	movs	r3, #136	@ 0x88
 800cc02:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800cc06:	f107 0310 	add.w	r3, r7, #16
 800cc0a:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800cc0e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800cc12:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800cc16:	f107 030f 	add.w	r3, r7, #15
 800cc1a:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800cc1e:	2301      	movs	r3, #1
 800cc20:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800cc24:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800cc28:	2100      	movs	r1, #0
 800cc2a:	4618      	mov	r0, r3
 800cc2c:	f001 f934 	bl	800de98 <hci_send_req>
 800cc30:	4603      	mov	r3, r0
 800cc32:	2b00      	cmp	r3, #0
 800cc34:	da01      	bge.n	800cc3a <aci_gap_pass_key_resp+0xba>
    return BLE_STATUS_TIMEOUT;
 800cc36:	23ff      	movs	r3, #255	@ 0xff
 800cc38:	e004      	b.n	800cc44 <aci_gap_pass_key_resp+0xc4>
  return status;
 800cc3a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800cc3e:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800cc42:	781b      	ldrb	r3, [r3, #0]
}
 800cc44:	4618      	mov	r0, r3
 800cc46:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800cc4a:	46bd      	mov	sp, r7
 800cc4c:	bd80      	pop	{r7, pc}

0800cc4e <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 800cc4e:	b590      	push	{r4, r7, lr}
 800cc50:	b0cd      	sub	sp, #308	@ 0x134
 800cc52:	af00      	add	r7, sp, #0
 800cc54:	4604      	mov	r4, r0
 800cc56:	4608      	mov	r0, r1
 800cc58:	4611      	mov	r1, r2
 800cc5a:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800cc5e:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 800cc62:	6013      	str	r3, [r2, #0]
 800cc64:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800cc68:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800cc6c:	4622      	mov	r2, r4
 800cc6e:	701a      	strb	r2, [r3, #0]
 800cc70:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800cc74:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800cc78:	4602      	mov	r2, r0
 800cc7a:	701a      	strb	r2, [r3, #0]
 800cc7c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800cc80:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 800cc84:	460a      	mov	r2, r1
 800cc86:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 800cc88:	f107 0310 	add.w	r3, r7, #16
 800cc8c:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800cc90:	f107 0308 	add.w	r3, r7, #8
 800cc94:	2207      	movs	r2, #7
 800cc96:	2100      	movs	r1, #0
 800cc98:	4618      	mov	r0, r3
 800cc9a:	f000 fe74 	bl	800d986 <Osal_MemSet>
  int index_input = 0;
 800cc9e:	2300      	movs	r3, #0
 800cca0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Role = Role;
 800cca4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800cca8:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800ccac:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800ccb0:	7812      	ldrb	r2, [r2, #0]
 800ccb2:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800ccb4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800ccb8:	3301      	adds	r3, #1
 800ccba:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->privacy_enabled = privacy_enabled;
 800ccbe:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800ccc2:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800ccc6:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800ccca:	7812      	ldrb	r2, [r2, #0]
 800cccc:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800ccce:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800ccd2:	3301      	adds	r3, #1
 800ccd4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->device_name_char_len = device_name_char_len;
 800ccd8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800ccdc:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800cce0:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 800cce4:	7812      	ldrb	r2, [r2, #0]
 800cce6:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800cce8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800ccec:	3301      	adds	r3, #1
 800ccee:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800ccf2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ccf6:	2218      	movs	r2, #24
 800ccf8:	2100      	movs	r1, #0
 800ccfa:	4618      	mov	r0, r3
 800ccfc:	f000 fe43 	bl	800d986 <Osal_MemSet>
  rq.ogf = 0x3f;
 800cd00:	233f      	movs	r3, #63	@ 0x3f
 800cd02:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x08a;
 800cd06:	238a      	movs	r3, #138	@ 0x8a
 800cd08:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800cd0c:	f107 0310 	add.w	r3, r7, #16
 800cd10:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800cd14:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800cd18:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &resp;
 800cd1c:	f107 0308 	add.w	r3, r7, #8
 800cd20:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = sizeof(resp);
 800cd24:	2307      	movs	r3, #7
 800cd26:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800cd2a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800cd2e:	2100      	movs	r1, #0
 800cd30:	4618      	mov	r0, r3
 800cd32:	f001 f8b1 	bl	800de98 <hci_send_req>
 800cd36:	4603      	mov	r3, r0
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	da01      	bge.n	800cd40 <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 800cd3c:	23ff      	movs	r3, #255	@ 0xff
 800cd3e:	e02e      	b.n	800cd9e <aci_gap_init+0x150>
  if ( resp.Status )
 800cd40:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800cd44:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800cd48:	781b      	ldrb	r3, [r3, #0]
 800cd4a:	2b00      	cmp	r3, #0
 800cd4c:	d005      	beq.n	800cd5a <aci_gap_init+0x10c>
    return resp.Status;
 800cd4e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800cd52:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800cd56:	781b      	ldrb	r3, [r3, #0]
 800cd58:	e021      	b.n	800cd9e <aci_gap_init+0x150>
  *Service_Handle = resp.Service_Handle;
 800cd5a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800cd5e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800cd62:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800cd66:	b29a      	uxth	r2, r3
 800cd68:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800cd6c:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800cd70:	681b      	ldr	r3, [r3, #0]
 800cd72:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 800cd74:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800cd78:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800cd7c:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800cd80:	b29a      	uxth	r2, r3
 800cd82:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800cd86:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 800cd88:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800cd8c:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800cd90:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800cd94:	b29a      	uxth	r2, r3
 800cd96:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800cd9a:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800cd9c:	2300      	movs	r3, #0
}
 800cd9e:	4618      	mov	r0, r3
 800cda0:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 800cda4:	46bd      	mov	sp, r7
 800cda6:	bd90      	pop	{r4, r7, pc}

0800cda8 <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 800cda8:	b580      	push	{r7, lr}
 800cdaa:	b0cc      	sub	sp, #304	@ 0x130
 800cdac:	af00      	add	r7, sp, #0
 800cdae:	4602      	mov	r2, r0
 800cdb0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800cdb4:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800cdb8:	6019      	str	r1, [r3, #0]
 800cdba:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800cdbe:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800cdc2:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 800cdc4:	f107 0310 	add.w	r3, r7, #16
 800cdc8:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800cdcc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800cdd0:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800cdd4:	2200      	movs	r2, #0
 800cdd6:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800cdd8:	2300      	movs	r3, #0
 800cdda:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->AdvDataLen = AdvDataLen;
 800cdde:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800cde2:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800cde6:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800cdea:	7812      	ldrb	r2, [r2, #0]
 800cdec:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800cdee:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800cdf2:	3301      	adds	r3, #1
 800cdf4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 800cdf8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800cdfc:	1c58      	adds	r0, r3, #1
 800cdfe:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800ce02:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800ce06:	781a      	ldrb	r2, [r3, #0]
 800ce08:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800ce0c:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800ce10:	6819      	ldr	r1, [r3, #0]
 800ce12:	f000 fda8 	bl	800d966 <Osal_MemCpy>
  index_input += AdvDataLen;
 800ce16:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800ce1a:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800ce1e:	781b      	ldrb	r3, [r3, #0]
 800ce20:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800ce24:	4413      	add	r3, r2
 800ce26:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800ce2a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ce2e:	2218      	movs	r2, #24
 800ce30:	2100      	movs	r1, #0
 800ce32:	4618      	mov	r0, r3
 800ce34:	f000 fda7 	bl	800d986 <Osal_MemSet>
  rq.ogf = 0x3f;
 800ce38:	233f      	movs	r3, #63	@ 0x3f
 800ce3a:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x08e;
 800ce3e:	238e      	movs	r3, #142	@ 0x8e
 800ce40:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800ce44:	f107 0310 	add.w	r3, r7, #16
 800ce48:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800ce4c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800ce50:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800ce54:	f107 030f 	add.w	r3, r7, #15
 800ce58:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800ce5c:	2301      	movs	r3, #1
 800ce5e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800ce62:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ce66:	2100      	movs	r1, #0
 800ce68:	4618      	mov	r0, r3
 800ce6a:	f001 f815 	bl	800de98 <hci_send_req>
 800ce6e:	4603      	mov	r3, r0
 800ce70:	2b00      	cmp	r3, #0
 800ce72:	da01      	bge.n	800ce78 <aci_gap_update_adv_data+0xd0>
    return BLE_STATUS_TIMEOUT;
 800ce74:	23ff      	movs	r3, #255	@ 0xff
 800ce76:	e004      	b.n	800ce82 <aci_gap_update_adv_data+0xda>
  return status;
 800ce78:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800ce7c:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800ce80:	781b      	ldrb	r3, [r3, #0]
}
 800ce82:	4618      	mov	r0, r3
 800ce84:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800ce88:	46bd      	mov	sp, r7
 800ce8a:	bd80      	pop	{r7, pc}

0800ce8c <aci_gap_configure_filter_accept_list>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_filter_accept_list( void )
{
 800ce8c:	b580      	push	{r7, lr}
 800ce8e:	b088      	sub	sp, #32
 800ce90:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800ce92:	2300      	movs	r3, #0
 800ce94:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800ce96:	f107 0308 	add.w	r3, r7, #8
 800ce9a:	2218      	movs	r2, #24
 800ce9c:	2100      	movs	r1, #0
 800ce9e:	4618      	mov	r0, r3
 800cea0:	f000 fd71 	bl	800d986 <Osal_MemSet>
  rq.ogf = 0x3f;
 800cea4:	233f      	movs	r3, #63	@ 0x3f
 800cea6:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 800cea8:	2392      	movs	r3, #146	@ 0x92
 800ceaa:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800ceac:	1dfb      	adds	r3, r7, #7
 800ceae:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800ceb0:	2301      	movs	r3, #1
 800ceb2:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800ceb4:	f107 0308 	add.w	r3, r7, #8
 800ceb8:	2100      	movs	r1, #0
 800ceba:	4618      	mov	r0, r3
 800cebc:	f000 ffec 	bl	800de98 <hci_send_req>
 800cec0:	4603      	mov	r3, r0
 800cec2:	2b00      	cmp	r3, #0
 800cec4:	da01      	bge.n	800ceca <aci_gap_configure_filter_accept_list+0x3e>
    return BLE_STATUS_TIMEOUT;
 800cec6:	23ff      	movs	r3, #255	@ 0xff
 800cec8:	e000      	b.n	800cecc <aci_gap_configure_filter_accept_list+0x40>
  return status;
 800ceca:	79fb      	ldrb	r3, [r7, #7]
}
 800cecc:	4618      	mov	r0, r3
 800cece:	3720      	adds	r7, #32
 800ced0:	46bd      	mov	sp, r7
 800ced2:	bd80      	pop	{r7, pc}

0800ced4 <aci_gap_numeric_comparison_value_confirm_yesno>:
  return status;
}

tBleStatus aci_gap_numeric_comparison_value_confirm_yesno( uint16_t Connection_Handle,
                                                           uint8_t Confirm_Yes_No )
{
 800ced4:	b580      	push	{r7, lr}
 800ced6:	b0cc      	sub	sp, #304	@ 0x130
 800ced8:	af00      	add	r7, sp, #0
 800ceda:	4602      	mov	r2, r0
 800cedc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800cee0:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800cee4:	801a      	strh	r2, [r3, #0]
 800cee6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800ceea:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 800ceee:	460a      	mov	r2, r1
 800cef0:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_numeric_comparison_value_confirm_yesno_cp0 *cp0 = (aci_gap_numeric_comparison_value_confirm_yesno_cp0*)(cmd_buffer);
 800cef2:	f107 0310 	add.w	r3, r7, #16
 800cef6:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800cefa:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800cefe:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800cf02:	2200      	movs	r2, #0
 800cf04:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800cf06:	2300      	movs	r3, #0
 800cf08:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 800cf0c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800cf10:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800cf14:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800cf18:	8812      	ldrh	r2, [r2, #0]
 800cf1a:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800cf1c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800cf20:	3302      	adds	r3, #2
 800cf22:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Confirm_Yes_No = Confirm_Yes_No;
 800cf26:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800cf2a:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800cf2e:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 800cf32:	7812      	ldrb	r2, [r2, #0]
 800cf34:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800cf36:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800cf3a:	3301      	adds	r3, #1
 800cf3c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800cf40:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800cf44:	2218      	movs	r2, #24
 800cf46:	2100      	movs	r1, #0
 800cf48:	4618      	mov	r0, r3
 800cf4a:	f000 fd1c 	bl	800d986 <Osal_MemSet>
  rq.ogf = 0x3f;
 800cf4e:	233f      	movs	r3, #63	@ 0x3f
 800cf50:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x0a5;
 800cf54:	23a5      	movs	r3, #165	@ 0xa5
 800cf56:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800cf5a:	f107 0310 	add.w	r3, r7, #16
 800cf5e:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800cf62:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800cf66:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800cf6a:	f107 030f 	add.w	r3, r7, #15
 800cf6e:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800cf72:	2301      	movs	r3, #1
 800cf74:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800cf78:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800cf7c:	2100      	movs	r1, #0
 800cf7e:	4618      	mov	r0, r3
 800cf80:	f000 ff8a 	bl	800de98 <hci_send_req>
 800cf84:	4603      	mov	r3, r0
 800cf86:	2b00      	cmp	r3, #0
 800cf88:	da01      	bge.n	800cf8e <aci_gap_numeric_comparison_value_confirm_yesno+0xba>
    return BLE_STATUS_TIMEOUT;
 800cf8a:	23ff      	movs	r3, #255	@ 0xff
 800cf8c:	e004      	b.n	800cf98 <aci_gap_numeric_comparison_value_confirm_yesno+0xc4>
  return status;
 800cf8e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800cf92:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800cf96:	781b      	ldrb	r3, [r3, #0]
}
 800cf98:	4618      	mov	r0, r3
 800cf9a:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800cf9e:	46bd      	mov	sp, r7
 800cfa0:	bd80      	pop	{r7, pc}

0800cfa2 <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 800cfa2:	b580      	push	{r7, lr}
 800cfa4:	b088      	sub	sp, #32
 800cfa6:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800cfa8:	2300      	movs	r3, #0
 800cfaa:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800cfac:	f107 0308 	add.w	r3, r7, #8
 800cfb0:	2218      	movs	r2, #24
 800cfb2:	2100      	movs	r1, #0
 800cfb4:	4618      	mov	r0, r3
 800cfb6:	f000 fce6 	bl	800d986 <Osal_MemSet>
  rq.ogf = 0x3f;
 800cfba:	233f      	movs	r3, #63	@ 0x3f
 800cfbc:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 800cfbe:	f240 1301 	movw	r3, #257	@ 0x101
 800cfc2:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800cfc4:	1dfb      	adds	r3, r7, #7
 800cfc6:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800cfc8:	2301      	movs	r3, #1
 800cfca:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800cfcc:	f107 0308 	add.w	r3, r7, #8
 800cfd0:	2100      	movs	r1, #0
 800cfd2:	4618      	mov	r0, r3
 800cfd4:	f000 ff60 	bl	800de98 <hci_send_req>
 800cfd8:	4603      	mov	r3, r0
 800cfda:	2b00      	cmp	r3, #0
 800cfdc:	da01      	bge.n	800cfe2 <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 800cfde:	23ff      	movs	r3, #255	@ 0xff
 800cfe0:	e000      	b.n	800cfe4 <aci_gatt_init+0x42>
  return status;
 800cfe2:	79fb      	ldrb	r3, [r7, #7]
}
 800cfe4:	4618      	mov	r0, r3
 800cfe6:	3720      	adds	r7, #32
 800cfe8:	46bd      	mov	sp, r7
 800cfea:	bd80      	pop	{r7, pc}

0800cfec <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 800cfec:	b590      	push	{r4, r7, lr}
 800cfee:	b0cf      	sub	sp, #316	@ 0x13c
 800cff0:	af00      	add	r7, sp, #0
 800cff2:	4604      	mov	r4, r0
 800cff4:	f507 709c 	add.w	r0, r7, #312	@ 0x138
 800cff8:	f5a0 709c 	sub.w	r0, r0, #312	@ 0x138
 800cffc:	6001      	str	r1, [r0, #0]
 800cffe:	4610      	mov	r0, r2
 800d000:	4619      	mov	r1, r3
 800d002:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800d006:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 800d00a:	4622      	mov	r2, r4
 800d00c:	701a      	strb	r2, [r3, #0]
 800d00e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800d012:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 800d016:	4602      	mov	r2, r0
 800d018:	701a      	strb	r2, [r3, #0]
 800d01a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800d01e:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 800d022:	460a      	mov	r2, r1
 800d024:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 800d026:	f107 0310 	add.w	r3, r7, #16
 800d02a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 800d02e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800d032:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 800d036:	781b      	ldrb	r3, [r3, #0]
 800d038:	2b01      	cmp	r3, #1
 800d03a:	d00a      	beq.n	800d052 <aci_gatt_add_service+0x66>
 800d03c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800d040:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 800d044:	781b      	ldrb	r3, [r3, #0]
 800d046:	2b02      	cmp	r3, #2
 800d048:	d101      	bne.n	800d04e <aci_gatt_add_service+0x62>
 800d04a:	2311      	movs	r3, #17
 800d04c:	e002      	b.n	800d054 <aci_gatt_add_service+0x68>
 800d04e:	2301      	movs	r3, #1
 800d050:	e000      	b.n	800d054 <aci_gatt_add_service+0x68>
 800d052:	2303      	movs	r3, #3
 800d054:	f107 0210 	add.w	r2, r7, #16
 800d058:	4413      	add	r3, r2
 800d05a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800d05e:	f107 030c 	add.w	r3, r7, #12
 800d062:	2203      	movs	r2, #3
 800d064:	2100      	movs	r1, #0
 800d066:	4618      	mov	r0, r3
 800d068:	f000 fc8d 	bl	800d986 <Osal_MemSet>
  int index_input = 0;
 800d06c:	2300      	movs	r3, #0
 800d06e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 800d072:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800d076:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800d07a:	f2a2 1231 	subw	r2, r2, #305	@ 0x131
 800d07e:	7812      	ldrb	r2, [r2, #0]
 800d080:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800d082:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d086:	3301      	adds	r3, #1
 800d088:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 800d08c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800d090:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 800d094:	781b      	ldrb	r3, [r3, #0]
 800d096:	2b01      	cmp	r3, #1
 800d098:	d002      	beq.n	800d0a0 <aci_gatt_add_service+0xb4>
 800d09a:	2b02      	cmp	r3, #2
 800d09c:	d004      	beq.n	800d0a8 <aci_gatt_add_service+0xbc>
 800d09e:	e007      	b.n	800d0b0 <aci_gatt_add_service+0xc4>
    {
      case 1: size = 2; break;
 800d0a0:	2302      	movs	r3, #2
 800d0a2:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
 800d0a6:	e005      	b.n	800d0b4 <aci_gatt_add_service+0xc8>
      case 2: size = 16; break;
 800d0a8:	2310      	movs	r3, #16
 800d0aa:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
 800d0ae:	e001      	b.n	800d0b4 <aci_gatt_add_service+0xc8>
      default: return BLE_STATUS_ERROR;
 800d0b0:	2397      	movs	r3, #151	@ 0x97
 800d0b2:	e06c      	b.n	800d18e <aci_gatt_add_service+0x1a2>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 800d0b4:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800d0b8:	1c58      	adds	r0, r3, #1
 800d0ba:	f897 2137 	ldrb.w	r2, [r7, #311]	@ 0x137
 800d0be:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800d0c2:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800d0c6:	6819      	ldr	r1, [r3, #0]
 800d0c8:	f000 fc4d 	bl	800d966 <Osal_MemCpy>
    index_input += size;
 800d0cc:	f897 3137 	ldrb.w	r3, [r7, #311]	@ 0x137
 800d0d0:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800d0d4:	4413      	add	r3, r2
 800d0d6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Service_Type = Service_Type;
 800d0da:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800d0de:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800d0e2:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 800d0e6:	7812      	ldrb	r2, [r2, #0]
 800d0e8:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 800d0ea:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d0ee:	3301      	adds	r3, #1
 800d0f0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 800d0f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800d0f8:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800d0fc:	f2a2 1233 	subw	r2, r2, #307	@ 0x133
 800d100:	7812      	ldrb	r2, [r2, #0]
 800d102:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 800d104:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d108:	3301      	adds	r3, #1
 800d10a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800d10e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d112:	2218      	movs	r2, #24
 800d114:	2100      	movs	r1, #0
 800d116:	4618      	mov	r0, r3
 800d118:	f000 fc35 	bl	800d986 <Osal_MemSet>
  rq.ogf = 0x3f;
 800d11c:	233f      	movs	r3, #63	@ 0x3f
 800d11e:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x102;
 800d122:	f44f 7381 	mov.w	r3, #258	@ 0x102
 800d126:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800d12a:	f107 0310 	add.w	r3, r7, #16
 800d12e:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800d132:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d136:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &resp;
 800d13a:	f107 030c 	add.w	r3, r7, #12
 800d13e:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = sizeof(resp);
 800d142:	2303      	movs	r3, #3
 800d144:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800d148:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d14c:	2100      	movs	r1, #0
 800d14e:	4618      	mov	r0, r3
 800d150:	f000 fea2 	bl	800de98 <hci_send_req>
 800d154:	4603      	mov	r3, r0
 800d156:	2b00      	cmp	r3, #0
 800d158:	da01      	bge.n	800d15e <aci_gatt_add_service+0x172>
    return BLE_STATUS_TIMEOUT;
 800d15a:	23ff      	movs	r3, #255	@ 0xff
 800d15c:	e017      	b.n	800d18e <aci_gatt_add_service+0x1a2>
  if ( resp.Status )
 800d15e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800d162:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800d166:	781b      	ldrb	r3, [r3, #0]
 800d168:	2b00      	cmp	r3, #0
 800d16a:	d005      	beq.n	800d178 <aci_gatt_add_service+0x18c>
    return resp.Status;
 800d16c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800d170:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800d174:	781b      	ldrb	r3, [r3, #0]
 800d176:	e00a      	b.n	800d18e <aci_gatt_add_service+0x1a2>
  *Service_Handle = resp.Service_Handle;
 800d178:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800d17c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800d180:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800d184:	b29a      	uxth	r2, r3
 800d186:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800d18a:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800d18c:	2300      	movs	r3, #0
}
 800d18e:	4618      	mov	r0, r3
 800d190:	f507 779e 	add.w	r7, r7, #316	@ 0x13c
 800d194:	46bd      	mov	sp, r7
 800d196:	bd90      	pop	{r4, r7, pc}

0800d198 <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 800d198:	b590      	push	{r4, r7, lr}
 800d19a:	b0d1      	sub	sp, #324	@ 0x144
 800d19c:	af00      	add	r7, sp, #0
 800d19e:	4604      	mov	r4, r0
 800d1a0:	4608      	mov	r0, r1
 800d1a2:	f507 71a0 	add.w	r1, r7, #320	@ 0x140
 800d1a6:	f5a1 719c 	sub.w	r1, r1, #312	@ 0x138
 800d1aa:	600a      	str	r2, [r1, #0]
 800d1ac:	4619      	mov	r1, r3
 800d1ae:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800d1b2:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 800d1b6:	4622      	mov	r2, r4
 800d1b8:	801a      	strh	r2, [r3, #0]
 800d1ba:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800d1be:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 800d1c2:	4602      	mov	r2, r0
 800d1c4:	701a      	strb	r2, [r3, #0]
 800d1c6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800d1ca:	f5a3 739d 	sub.w	r3, r3, #314	@ 0x13a
 800d1ce:	460a      	mov	r2, r1
 800d1d0:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 800d1d2:	f107 0318 	add.w	r3, r7, #24
 800d1d6:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 800d1da:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800d1de:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 800d1e2:	781b      	ldrb	r3, [r3, #0]
 800d1e4:	2b01      	cmp	r3, #1
 800d1e6:	d00a      	beq.n	800d1fe <aci_gatt_add_char+0x66>
 800d1e8:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800d1ec:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 800d1f0:	781b      	ldrb	r3, [r3, #0]
 800d1f2:	2b02      	cmp	r3, #2
 800d1f4:	d101      	bne.n	800d1fa <aci_gatt_add_char+0x62>
 800d1f6:	2313      	movs	r3, #19
 800d1f8:	e002      	b.n	800d200 <aci_gatt_add_char+0x68>
 800d1fa:	2303      	movs	r3, #3
 800d1fc:	e000      	b.n	800d200 <aci_gatt_add_char+0x68>
 800d1fe:	2305      	movs	r3, #5
 800d200:	f107 0218 	add.w	r2, r7, #24
 800d204:	4413      	add	r3, r2
 800d206:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800d20a:	f107 0314 	add.w	r3, r7, #20
 800d20e:	2203      	movs	r2, #3
 800d210:	2100      	movs	r1, #0
 800d212:	4618      	mov	r0, r3
 800d214:	f000 fbb7 	bl	800d986 <Osal_MemSet>
  int index_input = 0;
 800d218:	2300      	movs	r3, #0
 800d21a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Service_Handle = Service_Handle;
 800d21e:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800d222:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 800d226:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 800d22a:	8812      	ldrh	r2, [r2, #0]
 800d22c:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800d22e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800d232:	3302      	adds	r3, #2
 800d234:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 800d238:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800d23c:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 800d240:	f2a2 1233 	subw	r2, r2, #307	@ 0x133
 800d244:	7812      	ldrb	r2, [r2, #0]
 800d246:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800d248:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800d24c:	3301      	adds	r3, #1
 800d24e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 800d252:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800d256:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 800d25a:	781b      	ldrb	r3, [r3, #0]
 800d25c:	2b01      	cmp	r3, #1
 800d25e:	d002      	beq.n	800d266 <aci_gatt_add_char+0xce>
 800d260:	2b02      	cmp	r3, #2
 800d262:	d004      	beq.n	800d26e <aci_gatt_add_char+0xd6>
 800d264:	e007      	b.n	800d276 <aci_gatt_add_char+0xde>
    {
      case 1: size = 2; break;
 800d266:	2302      	movs	r3, #2
 800d268:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
 800d26c:	e005      	b.n	800d27a <aci_gatt_add_char+0xe2>
      case 2: size = 16; break;
 800d26e:	2310      	movs	r3, #16
 800d270:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
 800d274:	e001      	b.n	800d27a <aci_gatt_add_char+0xe2>
      default: return BLE_STATUS_ERROR;
 800d276:	2397      	movs	r3, #151	@ 0x97
 800d278:	e091      	b.n	800d39e <aci_gatt_add_char+0x206>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 800d27a:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800d27e:	1cd8      	adds	r0, r3, #3
 800d280:	f897 213f 	ldrb.w	r2, [r7, #319]	@ 0x13f
 800d284:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800d288:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800d28c:	6819      	ldr	r1, [r3, #0]
 800d28e:	f000 fb6a 	bl	800d966 <Osal_MemCpy>
    index_input += size;
 800d292:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 800d296:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 800d29a:	4413      	add	r3, r2
 800d29c:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 800d2a0:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800d2a4:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 800d2a8:	f5a2 729d 	sub.w	r2, r2, #314	@ 0x13a
 800d2ac:	8812      	ldrh	r2, [r2, #0]
 800d2ae:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 800d2b0:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800d2b4:	3302      	adds	r3, #2
 800d2b6:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Char_Properties = Char_Properties;
 800d2ba:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800d2be:	f897 2150 	ldrb.w	r2, [r7, #336]	@ 0x150
 800d2c2:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 800d2c4:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800d2c8:	3301      	adds	r3, #1
 800d2ca:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 800d2ce:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800d2d2:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 800d2d6:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 800d2d8:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800d2dc:	3301      	adds	r3, #1
 800d2de:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 800d2e2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800d2e6:	f897 2158 	ldrb.w	r2, [r7, #344]	@ 0x158
 800d2ea:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 800d2ec:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800d2f0:	3301      	adds	r3, #1
 800d2f2:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 800d2f6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800d2fa:	f897 215c 	ldrb.w	r2, [r7, #348]	@ 0x15c
 800d2fe:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 800d300:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800d304:	3301      	adds	r3, #1
 800d306:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Is_Variable = Is_Variable;
 800d30a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800d30e:	f897 2160 	ldrb.w	r2, [r7, #352]	@ 0x160
 800d312:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 800d314:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800d318:	3301      	adds	r3, #1
 800d31a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800d31e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800d322:	2218      	movs	r2, #24
 800d324:	2100      	movs	r1, #0
 800d326:	4618      	mov	r0, r3
 800d328:	f000 fb2d 	bl	800d986 <Osal_MemSet>
  rq.ogf = 0x3f;
 800d32c:	233f      	movs	r3, #63	@ 0x3f
 800d32e:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
  rq.ocf = 0x104;
 800d332:	f44f 7382 	mov.w	r3, #260	@ 0x104
 800d336:	f8a7 311a 	strh.w	r3, [r7, #282]	@ 0x11a
  rq.cparam = cmd_buffer;
 800d33a:	f107 0318 	add.w	r3, r7, #24
 800d33e:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.clen = index_input;
 800d342:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800d346:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  rq.rparam = &resp;
 800d34a:	f107 0314 	add.w	r3, r7, #20
 800d34e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  rq.rlen = sizeof(resp);
 800d352:	2303      	movs	r3, #3
 800d354:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 800d358:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800d35c:	2100      	movs	r1, #0
 800d35e:	4618      	mov	r0, r3
 800d360:	f000 fd9a 	bl	800de98 <hci_send_req>
 800d364:	4603      	mov	r3, r0
 800d366:	2b00      	cmp	r3, #0
 800d368:	da01      	bge.n	800d36e <aci_gatt_add_char+0x1d6>
    return BLE_STATUS_TIMEOUT;
 800d36a:	23ff      	movs	r3, #255	@ 0xff
 800d36c:	e017      	b.n	800d39e <aci_gatt_add_char+0x206>
  if ( resp.Status )
 800d36e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800d372:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800d376:	781b      	ldrb	r3, [r3, #0]
 800d378:	2b00      	cmp	r3, #0
 800d37a:	d005      	beq.n	800d388 <aci_gatt_add_char+0x1f0>
    return resp.Status;
 800d37c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800d380:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800d384:	781b      	ldrb	r3, [r3, #0]
 800d386:	e00a      	b.n	800d39e <aci_gatt_add_char+0x206>
  *Char_Handle = resp.Char_Handle;
 800d388:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800d38c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800d390:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800d394:	b29a      	uxth	r2, r3
 800d396:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 800d39a:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800d39c:	2300      	movs	r3, #0
}
 800d39e:	4618      	mov	r0, r3
 800d3a0:	f507 77a2 	add.w	r7, r7, #324	@ 0x144
 800d3a4:	46bd      	mov	sp, r7
 800d3a6:	bd90      	pop	{r4, r7, pc}

0800d3a8 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 800d3a8:	b5b0      	push	{r4, r5, r7, lr}
 800d3aa:	b0cc      	sub	sp, #304	@ 0x130
 800d3ac:	af00      	add	r7, sp, #0
 800d3ae:	4605      	mov	r5, r0
 800d3b0:	460c      	mov	r4, r1
 800d3b2:	4610      	mov	r0, r2
 800d3b4:	4619      	mov	r1, r3
 800d3b6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d3ba:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800d3be:	462a      	mov	r2, r5
 800d3c0:	801a      	strh	r2, [r3, #0]
 800d3c2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d3c6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800d3ca:	4622      	mov	r2, r4
 800d3cc:	801a      	strh	r2, [r3, #0]
 800d3ce:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d3d2:	f2a3 132d 	subw	r3, r3, #301	@ 0x12d
 800d3d6:	4602      	mov	r2, r0
 800d3d8:	701a      	strb	r2, [r3, #0]
 800d3da:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d3de:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 800d3e2:	460a      	mov	r2, r1
 800d3e4:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 800d3e6:	f107 0310 	add.w	r3, r7, #16
 800d3ea:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800d3ee:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d3f2:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800d3f6:	2200      	movs	r2, #0
 800d3f8:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800d3fa:	2300      	movs	r3, #0
 800d3fc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Service_Handle = Service_Handle;
 800d400:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800d404:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800d408:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800d40c:	8812      	ldrh	r2, [r2, #0]
 800d40e:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800d410:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d414:	3302      	adds	r3, #2
 800d416:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Char_Handle = Char_Handle;
 800d41a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800d41e:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800d422:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 800d426:	8812      	ldrh	r2, [r2, #0]
 800d428:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 800d42a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d42e:	3302      	adds	r3, #2
 800d430:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Val_Offset = Val_Offset;
 800d434:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800d438:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800d43c:	f2a2 122d 	subw	r2, r2, #301	@ 0x12d
 800d440:	7812      	ldrb	r2, [r2, #0]
 800d442:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800d444:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d448:	3301      	adds	r3, #1
 800d44a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 800d44e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800d452:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800d456:	f5a2 7297 	sub.w	r2, r2, #302	@ 0x12e
 800d45a:	7812      	ldrb	r2, [r2, #0]
 800d45c:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800d45e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d462:	3301      	adds	r3, #1
 800d464:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 800d468:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800d46c:	1d98      	adds	r0, r3, #6
 800d46e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d472:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 800d476:	781b      	ldrb	r3, [r3, #0]
 800d478:	461a      	mov	r2, r3
 800d47a:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 800d47e:	f000 fa72 	bl	800d966 <Osal_MemCpy>
  index_input += Char_Value_Length;
 800d482:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d486:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 800d48a:	781b      	ldrb	r3, [r3, #0]
 800d48c:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800d490:	4413      	add	r3, r2
 800d492:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800d496:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d49a:	2218      	movs	r2, #24
 800d49c:	2100      	movs	r1, #0
 800d49e:	4618      	mov	r0, r3
 800d4a0:	f000 fa71 	bl	800d986 <Osal_MemSet>
  rq.ogf = 0x3f;
 800d4a4:	233f      	movs	r3, #63	@ 0x3f
 800d4a6:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x106;
 800d4aa:	f44f 7383 	mov.w	r3, #262	@ 0x106
 800d4ae:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800d4b2:	f107 0310 	add.w	r3, r7, #16
 800d4b6:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800d4ba:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d4be:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800d4c2:	f107 030f 	add.w	r3, r7, #15
 800d4c6:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800d4ca:	2301      	movs	r3, #1
 800d4cc:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800d4d0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d4d4:	2100      	movs	r1, #0
 800d4d6:	4618      	mov	r0, r3
 800d4d8:	f000 fcde 	bl	800de98 <hci_send_req>
 800d4dc:	4603      	mov	r3, r0
 800d4de:	2b00      	cmp	r3, #0
 800d4e0:	da01      	bge.n	800d4e6 <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 800d4e2:	23ff      	movs	r3, #255	@ 0xff
 800d4e4:	e004      	b.n	800d4f0 <aci_gatt_update_char_value+0x148>
  return status;
 800d4e6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d4ea:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800d4ee:	781b      	ldrb	r3, [r3, #0]
}
 800d4f0:	4618      	mov	r0, r3
 800d4f2:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800d4f6:	46bd      	mov	sp, r7
 800d4f8:	bdb0      	pop	{r4, r5, r7, pc}

0800d4fa <aci_gatt_confirm_indication>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gatt_confirm_indication( uint16_t Connection_Handle )
{
 800d4fa:	b580      	push	{r7, lr}
 800d4fc:	b0cc      	sub	sp, #304	@ 0x130
 800d4fe:	af00      	add	r7, sp, #0
 800d500:	4602      	mov	r2, r0
 800d502:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d506:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800d50a:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_confirm_indication_cp0 *cp0 = (aci_gatt_confirm_indication_cp0*)(cmd_buffer);
 800d50c:	f107 0310 	add.w	r3, r7, #16
 800d510:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800d514:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d518:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800d51c:	2200      	movs	r2, #0
 800d51e:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800d520:	2300      	movs	r3, #0
 800d522:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 800d526:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800d52a:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800d52e:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800d532:	8812      	ldrh	r2, [r2, #0]
 800d534:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800d536:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d53a:	3302      	adds	r3, #2
 800d53c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800d540:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d544:	2218      	movs	r2, #24
 800d546:	2100      	movs	r1, #0
 800d548:	4618      	mov	r0, r3
 800d54a:	f000 fa1c 	bl	800d986 <Osal_MemSet>
  rq.ogf = 0x3f;
 800d54e:	233f      	movs	r3, #63	@ 0x3f
 800d550:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x125;
 800d554:	f240 1325 	movw	r3, #293	@ 0x125
 800d558:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800d55c:	f107 0310 	add.w	r3, r7, #16
 800d560:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800d564:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d568:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800d56c:	f107 030f 	add.w	r3, r7, #15
 800d570:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800d574:	2301      	movs	r3, #1
 800d576:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800d57a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d57e:	2100      	movs	r1, #0
 800d580:	4618      	mov	r0, r3
 800d582:	f000 fc89 	bl	800de98 <hci_send_req>
 800d586:	4603      	mov	r3, r0
 800d588:	2b00      	cmp	r3, #0
 800d58a:	da01      	bge.n	800d590 <aci_gatt_confirm_indication+0x96>
    return BLE_STATUS_TIMEOUT;
 800d58c:	23ff      	movs	r3, #255	@ 0xff
 800d58e:	e004      	b.n	800d59a <aci_gatt_confirm_indication+0xa0>
  return status;
 800d590:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d594:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800d598:	781b      	ldrb	r3, [r3, #0]
}
 800d59a:	4618      	mov	r0, r3
 800d59c:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800d5a0:	46bd      	mov	sp, r7
 800d5a2:	bd80      	pop	{r7, pc}

0800d5a4 <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 800d5a4:	b580      	push	{r7, lr}
 800d5a6:	b0cc      	sub	sp, #304	@ 0x130
 800d5a8:	af00      	add	r7, sp, #0
 800d5aa:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d5ae:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800d5b2:	601a      	str	r2, [r3, #0]
 800d5b4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d5b8:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800d5bc:	4602      	mov	r2, r0
 800d5be:	701a      	strb	r2, [r3, #0]
 800d5c0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d5c4:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800d5c8:	460a      	mov	r2, r1
 800d5ca:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 800d5cc:	f107 0310 	add.w	r3, r7, #16
 800d5d0:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800d5d4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d5d8:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800d5dc:	2200      	movs	r2, #0
 800d5de:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800d5e0:	2300      	movs	r3, #0
 800d5e2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Offset = Offset;
 800d5e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800d5ea:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800d5ee:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800d5f2:	7812      	ldrb	r2, [r2, #0]
 800d5f4:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800d5f6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d5fa:	3301      	adds	r3, #1
 800d5fc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Length = Length;
 800d600:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800d604:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800d608:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800d60c:	7812      	ldrb	r2, [r2, #0]
 800d60e:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800d610:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d614:	3301      	adds	r3, #1
 800d616:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 800d61a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800d61e:	1c98      	adds	r0, r3, #2
 800d620:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d624:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800d628:	781a      	ldrb	r2, [r3, #0]
 800d62a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d62e:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800d632:	6819      	ldr	r1, [r3, #0]
 800d634:	f000 f997 	bl	800d966 <Osal_MemCpy>
  index_input += Length;
 800d638:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d63c:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800d640:	781b      	ldrb	r3, [r3, #0]
 800d642:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800d646:	4413      	add	r3, r2
 800d648:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800d64c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d650:	2218      	movs	r2, #24
 800d652:	2100      	movs	r1, #0
 800d654:	4618      	mov	r0, r3
 800d656:	f000 f996 	bl	800d986 <Osal_MemSet>
  rq.ogf = 0x3f;
 800d65a:	233f      	movs	r3, #63	@ 0x3f
 800d65c:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x00c;
 800d660:	230c      	movs	r3, #12
 800d662:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800d666:	f107 0310 	add.w	r3, r7, #16
 800d66a:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800d66e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d672:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800d676:	f107 030f 	add.w	r3, r7, #15
 800d67a:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800d67e:	2301      	movs	r3, #1
 800d680:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800d684:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d688:	2100      	movs	r1, #0
 800d68a:	4618      	mov	r0, r3
 800d68c:	f000 fc04 	bl	800de98 <hci_send_req>
 800d690:	4603      	mov	r3, r0
 800d692:	2b00      	cmp	r3, #0
 800d694:	da01      	bge.n	800d69a <aci_hal_write_config_data+0xf6>
    return BLE_STATUS_TIMEOUT;
 800d696:	23ff      	movs	r3, #255	@ 0xff
 800d698:	e004      	b.n	800d6a4 <aci_hal_write_config_data+0x100>
  return status;
 800d69a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d69e:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800d6a2:	781b      	ldrb	r3, [r3, #0]
}
 800d6a4:	4618      	mov	r0, r3
 800d6a6:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800d6aa:	46bd      	mov	sp, r7
 800d6ac:	bd80      	pop	{r7, pc}

0800d6ae <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 800d6ae:	b580      	push	{r7, lr}
 800d6b0:	b0cc      	sub	sp, #304	@ 0x130
 800d6b2:	af00      	add	r7, sp, #0
 800d6b4:	4602      	mov	r2, r0
 800d6b6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d6ba:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800d6be:	701a      	strb	r2, [r3, #0]
 800d6c0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d6c4:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800d6c8:	460a      	mov	r2, r1
 800d6ca:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 800d6cc:	f107 0310 	add.w	r3, r7, #16
 800d6d0:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800d6d4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d6d8:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800d6dc:	2200      	movs	r2, #0
 800d6de:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800d6e0:	2300      	movs	r3, #0
 800d6e2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->En_High_Power = En_High_Power;
 800d6e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800d6ea:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800d6ee:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800d6f2:	7812      	ldrb	r2, [r2, #0]
 800d6f4:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800d6f6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d6fa:	3301      	adds	r3, #1
 800d6fc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->PA_Level = PA_Level;
 800d700:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800d704:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800d708:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800d70c:	7812      	ldrb	r2, [r2, #0]
 800d70e:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800d710:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d714:	3301      	adds	r3, #1
 800d716:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800d71a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d71e:	2218      	movs	r2, #24
 800d720:	2100      	movs	r1, #0
 800d722:	4618      	mov	r0, r3
 800d724:	f000 f92f 	bl	800d986 <Osal_MemSet>
  rq.ogf = 0x3f;
 800d728:	233f      	movs	r3, #63	@ 0x3f
 800d72a:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x00f;
 800d72e:	230f      	movs	r3, #15
 800d730:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800d734:	f107 0310 	add.w	r3, r7, #16
 800d738:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800d73c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d740:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800d744:	f107 030f 	add.w	r3, r7, #15
 800d748:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800d74c:	2301      	movs	r3, #1
 800d74e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800d752:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d756:	2100      	movs	r1, #0
 800d758:	4618      	mov	r0, r3
 800d75a:	f000 fb9d 	bl	800de98 <hci_send_req>
 800d75e:	4603      	mov	r3, r0
 800d760:	2b00      	cmp	r3, #0
 800d762:	da01      	bge.n	800d768 <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 800d764:	23ff      	movs	r3, #255	@ 0xff
 800d766:	e004      	b.n	800d772 <aci_hal_set_tx_power_level+0xc4>
  return status;
 800d768:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d76c:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800d770:	781b      	ldrb	r3, [r3, #0]
}
 800d772:	4618      	mov	r0, r3
 800d774:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800d778:	46bd      	mov	sp, r7
 800d77a:	bd80      	pop	{r7, pc}

0800d77c <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy( (void*)Link_Connection_Handle, (const void*)resp.Link_Connection_Handle, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
 800d77c:	b580      	push	{r7, lr}
 800d77e:	b0cc      	sub	sp, #304	@ 0x130
 800d780:	af00      	add	r7, sp, #0
 800d782:	4602      	mov	r2, r0
 800d784:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d788:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800d78c:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 800d78e:	f107 0310 	add.w	r3, r7, #16
 800d792:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800d796:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d79a:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800d79e:	2200      	movs	r2, #0
 800d7a0:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800d7a2:	2300      	movs	r3, #0
 800d7a4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 800d7a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800d7ac:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800d7b0:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800d7b4:	8812      	ldrh	r2, [r2, #0]
 800d7b6:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800d7b8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d7bc:	3302      	adds	r3, #2
 800d7be:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800d7c2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d7c6:	2218      	movs	r2, #24
 800d7c8:	2100      	movs	r1, #0
 800d7ca:	4618      	mov	r0, r3
 800d7cc:	f000 f8db 	bl	800d986 <Osal_MemSet>
  rq.ogf = 0x3f;
 800d7d0:	233f      	movs	r3, #63	@ 0x3f
 800d7d2:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x018;
 800d7d6:	2318      	movs	r3, #24
 800d7d8:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800d7dc:	f107 0310 	add.w	r3, r7, #16
 800d7e0:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800d7e4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d7e8:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800d7ec:	f107 030f 	add.w	r3, r7, #15
 800d7f0:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800d7f4:	2301      	movs	r3, #1
 800d7f6:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800d7fa:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d7fe:	2100      	movs	r1, #0
 800d800:	4618      	mov	r0, r3
 800d802:	f000 fb49 	bl	800de98 <hci_send_req>
 800d806:	4603      	mov	r3, r0
 800d808:	2b00      	cmp	r3, #0
 800d80a:	da01      	bge.n	800d810 <aci_hal_set_radio_activity_mask+0x94>
    return BLE_STATUS_TIMEOUT;
 800d80c:	23ff      	movs	r3, #255	@ 0xff
 800d80e:	e004      	b.n	800d81a <aci_hal_set_radio_activity_mask+0x9e>
  return status;
 800d810:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d814:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800d818:	781b      	ldrb	r3, [r3, #0]
}
 800d81a:	4618      	mov	r0, r3
 800d81c:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800d820:	46bd      	mov	sp, r7
 800d822:	bd80      	pop	{r7, pc}

0800d824 <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 800d824:	b580      	push	{r7, lr}
 800d826:	b088      	sub	sp, #32
 800d828:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800d82a:	2300      	movs	r3, #0
 800d82c:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800d82e:	f107 0308 	add.w	r3, r7, #8
 800d832:	2218      	movs	r2, #24
 800d834:	2100      	movs	r1, #0
 800d836:	4618      	mov	r0, r3
 800d838:	f000 f8a5 	bl	800d986 <Osal_MemSet>
  rq.ogf = 0x03;
 800d83c:	2303      	movs	r3, #3
 800d83e:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 800d840:	2303      	movs	r3, #3
 800d842:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800d844:	1dfb      	adds	r3, r7, #7
 800d846:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800d848:	2301      	movs	r3, #1
 800d84a:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800d84c:	f107 0308 	add.w	r3, r7, #8
 800d850:	2100      	movs	r1, #0
 800d852:	4618      	mov	r0, r3
 800d854:	f000 fb20 	bl	800de98 <hci_send_req>
 800d858:	4603      	mov	r3, r0
 800d85a:	2b00      	cmp	r3, #0
 800d85c:	da01      	bge.n	800d862 <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 800d85e:	23ff      	movs	r3, #255	@ 0xff
 800d860:	e000      	b.n	800d864 <hci_reset+0x40>
  return status;
 800d862:	79fb      	ldrb	r3, [r7, #7]
}
 800d864:	4618      	mov	r0, r3
 800d866:	3720      	adds	r7, #32
 800d868:	46bd      	mov	sp, r7
 800d86a:	bd80      	pop	{r7, pc}

0800d86c <hci_le_set_default_phy>:
}

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 800d86c:	b590      	push	{r4, r7, lr}
 800d86e:	b0cd      	sub	sp, #308	@ 0x134
 800d870:	af00      	add	r7, sp, #0
 800d872:	4604      	mov	r4, r0
 800d874:	4608      	mov	r0, r1
 800d876:	4611      	mov	r1, r2
 800d878:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d87c:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800d880:	4622      	mov	r2, r4
 800d882:	701a      	strb	r2, [r3, #0]
 800d884:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d888:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800d88c:	4602      	mov	r2, r0
 800d88e:	701a      	strb	r2, [r3, #0]
 800d890:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d894:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 800d898:	460a      	mov	r2, r1
 800d89a:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 800d89c:	f107 0310 	add.w	r3, r7, #16
 800d8a0:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800d8a4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d8a8:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800d8ac:	2200      	movs	r2, #0
 800d8ae:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800d8b0:	2300      	movs	r3, #0
 800d8b2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 800d8b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800d8ba:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800d8be:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800d8c2:	7812      	ldrb	r2, [r2, #0]
 800d8c4:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800d8c6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d8ca:	3301      	adds	r3, #1
 800d8cc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->TX_PHYS = TX_PHYS;
 800d8d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800d8d4:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800d8d8:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800d8dc:	7812      	ldrb	r2, [r2, #0]
 800d8de:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800d8e0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d8e4:	3301      	adds	r3, #1
 800d8e6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->RX_PHYS = RX_PHYS;
 800d8ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800d8ee:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800d8f2:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 800d8f6:	7812      	ldrb	r2, [r2, #0]
 800d8f8:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800d8fa:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d8fe:	3301      	adds	r3, #1
 800d900:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800d904:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d908:	2218      	movs	r2, #24
 800d90a:	2100      	movs	r1, #0
 800d90c:	4618      	mov	r0, r3
 800d90e:	f000 f83a 	bl	800d986 <Osal_MemSet>
  rq.ogf = 0x08;
 800d912:	2308      	movs	r3, #8
 800d914:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x031;
 800d918:	2331      	movs	r3, #49	@ 0x31
 800d91a:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800d91e:	f107 0310 	add.w	r3, r7, #16
 800d922:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800d926:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d92a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800d92e:	f107 030f 	add.w	r3, r7, #15
 800d932:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800d936:	2301      	movs	r3, #1
 800d938:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800d93c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d940:	2100      	movs	r1, #0
 800d942:	4618      	mov	r0, r3
 800d944:	f000 faa8 	bl	800de98 <hci_send_req>
 800d948:	4603      	mov	r3, r0
 800d94a:	2b00      	cmp	r3, #0
 800d94c:	da01      	bge.n	800d952 <hci_le_set_default_phy+0xe6>
    return BLE_STATUS_TIMEOUT;
 800d94e:	23ff      	movs	r3, #255	@ 0xff
 800d950:	e004      	b.n	800d95c <hci_le_set_default_phy+0xf0>
  return status;
 800d952:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d956:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800d95a:	781b      	ldrb	r3, [r3, #0]
}
 800d95c:	4618      	mov	r0, r3
 800d95e:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 800d962:	46bd      	mov	sp, r7
 800d964:	bd90      	pop	{r4, r7, pc}

0800d966 <Osal_MemCpy>:
 * Osal_MemCpy
 *
 */

void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 800d966:	b580      	push	{r7, lr}
 800d968:	b084      	sub	sp, #16
 800d96a:	af00      	add	r7, sp, #0
 800d96c:	60f8      	str	r0, [r7, #12]
 800d96e:	60b9      	str	r1, [r7, #8]
 800d970:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size );
 800d972:	687a      	ldr	r2, [r7, #4]
 800d974:	68b9      	ldr	r1, [r7, #8]
 800d976:	68f8      	ldr	r0, [r7, #12]
 800d978:	f002 fcbb 	bl	80102f2 <memcpy>
 800d97c:	4603      	mov	r3, r0
}
 800d97e:	4618      	mov	r0, r3
 800d980:	3710      	adds	r7, #16
 800d982:	46bd      	mov	sp, r7
 800d984:	bd80      	pop	{r7, pc}

0800d986 <Osal_MemSet>:
 * Osal_MemSet
 *
 */

void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 800d986:	b580      	push	{r7, lr}
 800d988:	b084      	sub	sp, #16
 800d98a:	af00      	add	r7, sp, #0
 800d98c:	60f8      	str	r0, [r7, #12]
 800d98e:	60b9      	str	r1, [r7, #8]
 800d990:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 800d992:	687a      	ldr	r2, [r7, #4]
 800d994:	68b9      	ldr	r1, [r7, #8]
 800d996:	68f8      	ldr	r0, [r7, #12]
 800d998:	f002 fc2f 	bl	80101fa <memset>
 800d99c:	4603      	mov	r3, r0
}
 800d99e:	4618      	mov	r0, r3
 800d9a0:	3710      	adds	r7, #16
 800d9a2:	46bd      	mov	sp, r7
 800d9a4:	bd80      	pop	{r7, pc}

0800d9a6 <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__WEAK void BAS_Init( void )
{
 800d9a6:	b480      	push	{r7}
 800d9a8:	af00      	add	r7, sp, #0
  return;
 800d9aa:	bf00      	nop
}
 800d9ac:	46bd      	mov	sp, r7
 800d9ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9b2:	4770      	bx	lr

0800d9b4 <BLS_Init>:

__WEAK void BLS_Init( void )
{
 800d9b4:	b480      	push	{r7}
 800d9b6:	af00      	add	r7, sp, #0
  return;
 800d9b8:	bf00      	nop
}
 800d9ba:	46bd      	mov	sp, r7
 800d9bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9c0:	4770      	bx	lr

0800d9c2 <CRS_STM_Init>:
__WEAK void CRS_STM_Init( void )
{
 800d9c2:	b480      	push	{r7}
 800d9c4:	af00      	add	r7, sp, #0
  return;
 800d9c6:	bf00      	nop
}
 800d9c8:	46bd      	mov	sp, r7
 800d9ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9ce:	4770      	bx	lr

0800d9d0 <DIS_Init>:
__WEAK void DIS_Init( void )
{
 800d9d0:	b480      	push	{r7}
 800d9d2:	af00      	add	r7, sp, #0
  return;
 800d9d4:	bf00      	nop
}
 800d9d6:	46bd      	mov	sp, r7
 800d9d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9dc:	4770      	bx	lr

0800d9de <EDS_STM_Init>:
__WEAK void EDS_STM_Init( void )
{
 800d9de:	b480      	push	{r7}
 800d9e0:	af00      	add	r7, sp, #0
  return;
 800d9e2:	bf00      	nop
}
 800d9e4:	46bd      	mov	sp, r7
 800d9e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9ea:	4770      	bx	lr

0800d9ec <HIDS_Init>:
__WEAK void HIDS_Init( void )
{
 800d9ec:	b480      	push	{r7}
 800d9ee:	af00      	add	r7, sp, #0
  return;
 800d9f0:	bf00      	nop
}
 800d9f2:	46bd      	mov	sp, r7
 800d9f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9f8:	4770      	bx	lr

0800d9fa <HRS_Init>:
__WEAK void HRS_Init( void )
{
 800d9fa:	b480      	push	{r7}
 800d9fc:	af00      	add	r7, sp, #0
  return;
 800d9fe:	bf00      	nop
}
 800da00:	46bd      	mov	sp, r7
 800da02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da06:	4770      	bx	lr

0800da08 <HTS_Init>:
__WEAK void HTS_Init( void )
{
 800da08:	b480      	push	{r7}
 800da0a:	af00      	add	r7, sp, #0
  return;
 800da0c:	bf00      	nop
}
 800da0e:	46bd      	mov	sp, r7
 800da10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da14:	4770      	bx	lr

0800da16 <IAS_Init>:
__WEAK void IAS_Init( void )
{
 800da16:	b480      	push	{r7}
 800da18:	af00      	add	r7, sp, #0
  return;
 800da1a:	bf00      	nop
}
 800da1c:	46bd      	mov	sp, r7
 800da1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da22:	4770      	bx	lr

0800da24 <LLS_Init>:
__WEAK void LLS_Init( void )
{
 800da24:	b480      	push	{r7}
 800da26:	af00      	add	r7, sp, #0
  return;
 800da28:	bf00      	nop
}
 800da2a:	46bd      	mov	sp, r7
 800da2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da30:	4770      	bx	lr

0800da32 <TPS_Init>:
__WEAK void TPS_Init( void )
{
 800da32:	b480      	push	{r7}
 800da34:	af00      	add	r7, sp, #0
  return;
 800da36:	bf00      	nop
}
 800da38:	46bd      	mov	sp, r7
 800da3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da3e:	4770      	bx	lr

0800da40 <MOTENV_STM_Init>:
__WEAK void MOTENV_STM_Init( void )
{
 800da40:	b480      	push	{r7}
 800da42:	af00      	add	r7, sp, #0
  return;
 800da44:	bf00      	nop
}
 800da46:	46bd      	mov	sp, r7
 800da48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da4c:	4770      	bx	lr

0800da4e <P2PS_STM_Init>:
__WEAK void P2PS_STM_Init( void )
{
 800da4e:	b480      	push	{r7}
 800da50:	af00      	add	r7, sp, #0
  return;
 800da52:	bf00      	nop
}
 800da54:	46bd      	mov	sp, r7
 800da56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da5a:	4770      	bx	lr

0800da5c <ZDD_STM_Init>:
__WEAK void ZDD_STM_Init( void )
{
 800da5c:	b480      	push	{r7}
 800da5e:	af00      	add	r7, sp, #0
  return;
 800da60:	bf00      	nop
}
 800da62:	46bd      	mov	sp, r7
 800da64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da68:	4770      	bx	lr

0800da6a <OTAS_STM_Init>:
__WEAK void OTAS_STM_Init( void )
{
 800da6a:	b480      	push	{r7}
 800da6c:	af00      	add	r7, sp, #0
  return;
 800da6e:	bf00      	nop
}
 800da70:	46bd      	mov	sp, r7
 800da72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da76:	4770      	bx	lr

0800da78 <MESH_Init>:
__WEAK void MESH_Init( void )
{
 800da78:	b480      	push	{r7}
 800da7a:	af00      	add	r7, sp, #0
  return;
 800da7c:	bf00      	nop
}
 800da7e:	46bd      	mov	sp, r7
 800da80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da84:	4770      	bx	lr

0800da86 <BVOPUS_STM_Init>:
__WEAK void BVOPUS_STM_Init( void )
{
 800da86:	b480      	push	{r7}
 800da88:	af00      	add	r7, sp, #0
  return;
 800da8a:	bf00      	nop
}
 800da8c:	46bd      	mov	sp, r7
 800da8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da92:	4770      	bx	lr

0800da94 <SVCCTL_Init>:
}

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 800da94:	b580      	push	{r7, lr}
 800da96:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 800da98:	4b04      	ldr	r3, [pc, #16]	@ (800daac <SVCCTL_Init+0x18>)
 800da9a:	2200      	movs	r2, #0
 800da9c:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 800da9e:	4b04      	ldr	r3, [pc, #16]	@ (800dab0 <SVCCTL_Init+0x1c>)
 800daa0:	2200      	movs	r2, #0
 800daa2:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 800daa4:	f000 f806 	bl	800dab4 <SVCCTL_SvcInit>

  return;
 800daa8:	bf00      	nop
}
 800daaa:	bd80      	pop	{r7, pc}
 800daac:	200000e0 	.word	0x200000e0
 800dab0:	20000100 	.word	0x20000100

0800dab4 <SVCCTL_SvcInit>:

__WEAK void SVCCTL_SvcInit(void)
{
 800dab4:	b580      	push	{r7, lr}
 800dab6:	af00      	add	r7, sp, #0
  BAS_Init();
 800dab8:	f7ff ff75 	bl	800d9a6 <BAS_Init>

  BLS_Init();
 800dabc:	f7ff ff7a 	bl	800d9b4 <BLS_Init>

  CRS_STM_Init();
 800dac0:	f7ff ff7f 	bl	800d9c2 <CRS_STM_Init>

  DIS_Init();
 800dac4:	f7ff ff84 	bl	800d9d0 <DIS_Init>

  EDS_STM_Init();
 800dac8:	f7ff ff89 	bl	800d9de <EDS_STM_Init>

  HIDS_Init();
 800dacc:	f7ff ff8e 	bl	800d9ec <HIDS_Init>

  HRS_Init();
 800dad0:	f7ff ff93 	bl	800d9fa <HRS_Init>

  HTS_Init();
 800dad4:	f7ff ff98 	bl	800da08 <HTS_Init>

  IAS_Init();
 800dad8:	f7ff ff9d 	bl	800da16 <IAS_Init>

  LLS_Init();
 800dadc:	f7ff ffa2 	bl	800da24 <LLS_Init>

  TPS_Init();
 800dae0:	f7ff ffa7 	bl	800da32 <TPS_Init>

  MOTENV_STM_Init();
 800dae4:	f7ff ffac 	bl	800da40 <MOTENV_STM_Init>

  P2PS_STM_Init();
 800dae8:	f7ff ffb1 	bl	800da4e <P2PS_STM_Init>

  ZDD_STM_Init();
 800daec:	f7ff ffb6 	bl	800da5c <ZDD_STM_Init>

  OTAS_STM_Init();
 800daf0:	f7ff ffbb 	bl	800da6a <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 800daf4:	f7ff ffc7 	bl	800da86 <BVOPUS_STM_Init>

  MESH_Init();
 800daf8:	f7ff ffbe 	bl	800da78 <MESH_Init>

  SVCCTL_InitCustomSvc();
 800dafc:	f001 fc80 	bl	800f400 <SVCCTL_InitCustomSvc>
  
  return;
 800db00:	bf00      	nop
}
 800db02:	bd80      	pop	{r7, pc}

0800db04 <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 800db04:	b480      	push	{r7}
 800db06:	b083      	sub	sp, #12
 800db08:	af00      	add	r7, sp, #0
 800db0a:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 800db0c:	4b09      	ldr	r3, [pc, #36]	@ (800db34 <SVCCTL_RegisterSvcHandler+0x30>)
 800db0e:	7f1b      	ldrb	r3, [r3, #28]
 800db10:	4619      	mov	r1, r3
 800db12:	4a08      	ldr	r2, [pc, #32]	@ (800db34 <SVCCTL_RegisterSvcHandler+0x30>)
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 800db1a:	4b06      	ldr	r3, [pc, #24]	@ (800db34 <SVCCTL_RegisterSvcHandler+0x30>)
 800db1c:	7f1b      	ldrb	r3, [r3, #28]
 800db1e:	3301      	adds	r3, #1
 800db20:	b2da      	uxtb	r2, r3
 800db22:	4b04      	ldr	r3, [pc, #16]	@ (800db34 <SVCCTL_RegisterSvcHandler+0x30>)
 800db24:	771a      	strb	r2, [r3, #28]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 800db26:	bf00      	nop
}
 800db28:	370c      	adds	r7, #12
 800db2a:	46bd      	mov	sp, r7
 800db2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db30:	4770      	bx	lr
 800db32:	bf00      	nop
 800db34:	200000e0 	.word	0x200000e0

0800db38 <SVCCTL_UserEvtRx>:

  return;
}

__WEAK SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 800db38:	b580      	push	{r7, lr}
 800db3a:	b086      	sub	sp, #24
 800db3c:	af00      	add	r7, sp, #0
 800db3e:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	3301      	adds	r3, #1
 800db44:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 800db46:	2300      	movs	r3, #0
 800db48:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 800db4a:	693b      	ldr	r3, [r7, #16]
 800db4c:	781b      	ldrb	r3, [r3, #0]
 800db4e:	2bff      	cmp	r3, #255	@ 0xff
 800db50:	d125      	bne.n	800db9e <SVCCTL_UserEvtRx+0x66>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 800db52:	693b      	ldr	r3, [r7, #16]
 800db54:	3302      	adds	r3, #2
 800db56:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 800db58:	68fb      	ldr	r3, [r7, #12]
 800db5a:	881b      	ldrh	r3, [r3, #0]
 800db5c:	b29b      	uxth	r3, r3
 800db5e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800db62:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800db66:	d118      	bne.n	800db9a <SVCCTL_UserEvtRx+0x62>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800db68:	2300      	movs	r3, #0
 800db6a:	757b      	strb	r3, [r7, #21]
 800db6c:	e00d      	b.n	800db8a <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 800db6e:	7d7b      	ldrb	r3, [r7, #21]
 800db70:	4a1a      	ldr	r2, [pc, #104]	@ (800dbdc <SVCCTL_UserEvtRx+0xa4>)
 800db72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800db76:	6878      	ldr	r0, [r7, #4]
 800db78:	4798      	blx	r3
 800db7a:	4603      	mov	r3, r0
 800db7c:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 800db7e:	7dfb      	ldrb	r3, [r7, #23]
 800db80:	2b00      	cmp	r3, #0
 800db82:	d108      	bne.n	800db96 <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800db84:	7d7b      	ldrb	r3, [r7, #21]
 800db86:	3301      	adds	r3, #1
 800db88:	757b      	strb	r3, [r7, #21]
 800db8a:	4b14      	ldr	r3, [pc, #80]	@ (800dbdc <SVCCTL_UserEvtRx+0xa4>)
 800db8c:	7f1b      	ldrb	r3, [r3, #28]
 800db8e:	7d7a      	ldrb	r2, [r7, #21]
 800db90:	429a      	cmp	r2, r3
 800db92:	d3ec      	bcc.n	800db6e <SVCCTL_UserEvtRx+0x36>
               */
              break;
            }
          }
#endif
          break;
 800db94:	e002      	b.n	800db9c <SVCCTL_UserEvtRx+0x64>
              break;
 800db96:	bf00      	nop
          break;
 800db98:	e000      	b.n	800db9c <SVCCTL_UserEvtRx+0x64>

        default:
          break;
 800db9a:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 800db9c:	e000      	b.n	800dba0 <SVCCTL_UserEvtRx+0x68>

    default:
      break;
 800db9e:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the application.
   */
  switch (event_notification_status)
 800dba0:	7dfb      	ldrb	r3, [r7, #23]
 800dba2:	2b02      	cmp	r3, #2
 800dba4:	d00f      	beq.n	800dbc6 <SVCCTL_UserEvtRx+0x8e>
 800dba6:	2b02      	cmp	r3, #2
 800dba8:	dc10      	bgt.n	800dbcc <SVCCTL_UserEvtRx+0x94>
 800dbaa:	2b00      	cmp	r3, #0
 800dbac:	d002      	beq.n	800dbb4 <SVCCTL_UserEvtRx+0x7c>
 800dbae:	2b01      	cmp	r3, #1
 800dbb0:	d006      	beq.n	800dbc0 <SVCCTL_UserEvtRx+0x88>
 800dbb2:	e00b      	b.n	800dbcc <SVCCTL_UserEvtRx+0x94>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 800dbb4:	6878      	ldr	r0, [r7, #4]
 800dbb6:	f000 ff9b 	bl	800eaf0 <SVCCTL_App_Notification>
 800dbba:	4603      	mov	r3, r0
 800dbbc:	75bb      	strb	r3, [r7, #22]
      break;
 800dbbe:	e008      	b.n	800dbd2 <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 800dbc0:	2301      	movs	r3, #1
 800dbc2:	75bb      	strb	r3, [r7, #22]
      break;
 800dbc4:	e005      	b.n	800dbd2 <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 800dbc6:	2300      	movs	r3, #0
 800dbc8:	75bb      	strb	r3, [r7, #22]
      break;
 800dbca:	e002      	b.n	800dbd2 <SVCCTL_UserEvtRx+0x9a>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 800dbcc:	2301      	movs	r3, #1
 800dbce:	75bb      	strb	r3, [r7, #22]
      break;
 800dbd0:	bf00      	nop
  }

  return (return_status);
 800dbd2:	7dbb      	ldrb	r3, [r7, #22]
}
 800dbd4:	4618      	mov	r0, r3
 800dbd6:	3718      	adds	r7, #24
 800dbd8:	46bd      	mov	sp, r7
 800dbda:	bd80      	pop	{r7, pc}
 800dbdc:	200000e0 	.word	0x200000e0

0800dbe0 <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 800dbe0:	b580      	push	{r7, lr}
 800dbe2:	b088      	sub	sp, #32
 800dbe4:	af00      	add	r7, sp, #0
 800dbe6:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800dbe8:	f107 030c 	add.w	r3, r7, #12
 800dbec:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 800dbf4:	69fb      	ldr	r3, [r7, #28]
 800dbf6:	212e      	movs	r1, #46	@ 0x2e
 800dbf8:	f64f 4066 	movw	r0, #64614	@ 0xfc66
 800dbfc:	f000 fae8 	bl	800e1d0 <shci_send>
            p_rsp );
 
  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800dc00:	69fb      	ldr	r3, [r7, #28]
 800dc02:	330b      	adds	r3, #11
 800dc04:	78db      	ldrb	r3, [r3, #3]
}
 800dc06:	4618      	mov	r0, r3
 800dc08:	3720      	adds	r7, #32
 800dc0a:	46bd      	mov	sp, r7
 800dc0c:	bd80      	pop	{r7, pc}

0800dc0e <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 800dc0e:	b580      	push	{r7, lr}
 800dc10:	b088      	sub	sp, #32
 800dc12:	af00      	add	r7, sp, #0
 800dc14:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800dc16:	f107 030c 	add.w	r3, r7, #12
 800dc1a:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 800dc22:	69fb      	ldr	r3, [r7, #28]
 800dc24:	210f      	movs	r1, #15
 800dc26:	f64f 4068 	movw	r0, #64616	@ 0xfc68
 800dc2a:	f000 fad1 	bl	800e1d0 <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800dc2e:	69fb      	ldr	r3, [r7, #28]
 800dc30:	330b      	adds	r3, #11
 800dc32:	78db      	ldrb	r3, [r3, #3]
}
 800dc34:	4618      	mov	r0, r3
 800dc36:	3720      	adds	r7, #32
 800dc38:	46bd      	mov	sp, r7
 800dc3a:	bd80      	pop	{r7, pc}

0800dc3c <SHCI_C2_Config>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_Config(SHCI_C2_CONFIG_Cmd_Param_t *pCmdPacket)
{
 800dc3c:	b580      	push	{r7, lr}
 800dc3e:	b088      	sub	sp, #32
 800dc40:	af00      	add	r7, sp, #0
 800dc42:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800dc44:	f107 030c 	add.w	r3, r7, #12
 800dc48:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_CONFIG,
 800dc4a:	69fb      	ldr	r3, [r7, #28]
 800dc4c:	687a      	ldr	r2, [r7, #4]
 800dc4e:	2110      	movs	r1, #16
 800dc50:	f64f 4075 	movw	r0, #64629	@ 0xfc75
 800dc54:	f000 fabc 	bl	800e1d0 <shci_send>
             sizeof(SHCI_C2_CONFIG_Cmd_Param_t),
             (uint8_t*)pCmdPacket,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800dc58:	69fb      	ldr	r3, [r7, #28]
 800dc5a:	330b      	adds	r3, #11
 800dc5c:	78db      	ldrb	r3, [r3, #3]
}
 800dc5e:	4618      	mov	r0, r3
 800dc60:	3720      	adds	r7, #32
 800dc62:	46bd      	mov	sp, r7
 800dc64:	bd80      	pop	{r7, pc}
	...

0800dc68 <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 800dc68:	b480      	push	{r7}
 800dc6a:	b08b      	sub	sp, #44	@ 0x2c
 800dc6c:	af00      	add	r7, sp, #0
 800dc6e:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 800dc70:	2300      	movs	r3, #0
 800dc72:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 800dc74:	2300      	movs	r3, #0
 800dc76:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 800dc78:	2300      	movs	r3, #0
 800dc7a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t wireless_firmware_memorySize = 0;
 800dc7c:	2300      	movs	r3, #0
 800dc7e:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 800dc80:	2300      	movs	r3, #0
 800dc82:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 800dc84:	2300      	movs	r3, #0
 800dc86:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 800dc88:	2300      	movs	r3, #0
 800dc8a:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 800dc8c:	2300      	movs	r3, #0
 800dc8e:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 800dc90:	4b4a      	ldr	r3, [pc, #296]	@ (800ddbc <SHCI_GetWirelessFwInfo+0x154>)
 800dc92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800dc94:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800dc98:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 800dc9a:	693b      	ldr	r3, [r7, #16]
 800dc9c:	009b      	lsls	r3, r3, #2
 800dc9e:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 800dca2:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 800dca6:	681b      	ldr	r3, [r3, #0]
 800dca8:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 800dcaa:	68bb      	ldr	r3, [r7, #8]
 800dcac:	681b      	ldr	r3, [r3, #0]
 800dcae:	4a44      	ldr	r2, [pc, #272]	@ (800ddc0 <SHCI_GetWirelessFwInfo+0x158>)
 800dcb0:	4293      	cmp	r3, r2
 800dcb2:	d10f      	bne.n	800dcd4 <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 800dcb4:	68bb      	ldr	r3, [r7, #8]
 800dcb6:	695b      	ldr	r3, [r3, #20]
 800dcb8:	627b      	str	r3, [r7, #36]	@ 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 800dcba:	68bb      	ldr	r3, [r7, #8]
 800dcbc:	699b      	ldr	r3, [r3, #24]
 800dcbe:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 800dcc0:	68bb      	ldr	r3, [r7, #8]
 800dcc2:	69db      	ldr	r3, [r3, #28]
 800dcc4:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 800dcc6:	68bb      	ldr	r3, [r7, #8]
 800dcc8:	68db      	ldr	r3, [r3, #12]
 800dcca:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 800dccc:	68bb      	ldr	r3, [r7, #8]
 800dcce:	691b      	ldr	r3, [r3, #16]
 800dcd0:	617b      	str	r3, [r7, #20]
 800dcd2:	e01a      	b.n	800dd0a <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 800dcd4:	693b      	ldr	r3, [r7, #16]
 800dcd6:	009b      	lsls	r3, r3, #2
 800dcd8:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 800dcdc:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 800dce0:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 800dce2:	68fb      	ldr	r3, [r7, #12]
 800dce4:	681b      	ldr	r3, [r3, #0]
 800dce6:	691b      	ldr	r3, [r3, #16]
 800dce8:	627b      	str	r3, [r7, #36]	@ 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 800dcea:	68fb      	ldr	r3, [r7, #12]
 800dcec:	681b      	ldr	r3, [r3, #0]
 800dcee:	695b      	ldr	r3, [r3, #20]
 800dcf0:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 800dcf2:	68fb      	ldr	r3, [r7, #12]
 800dcf4:	681b      	ldr	r3, [r3, #0]
 800dcf6:	699b      	ldr	r3, [r3, #24]
 800dcf8:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 800dcfa:	68fb      	ldr	r3, [r7, #12]
 800dcfc:	681b      	ldr	r3, [r3, #0]
 800dcfe:	685b      	ldr	r3, [r3, #4]
 800dd00:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 800dd02:	68fb      	ldr	r3, [r7, #12]
 800dd04:	681b      	ldr	r3, [r3, #0]
 800dd06:	689b      	ldr	r3, [r3, #8]
 800dd08:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 800dd0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd0c:	0e1b      	lsrs	r3, r3, #24
 800dd0e:	b2da      	uxtb	r2, r3
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 800dd14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd16:	0c1b      	lsrs	r3, r3, #16
 800dd18:	b2da      	uxtb	r2, r3
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 800dd1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd20:	0a1b      	lsrs	r3, r3, #8
 800dd22:	b2da      	uxtb	r2, r3
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 800dd28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd2a:	091b      	lsrs	r3, r3, #4
 800dd2c:	b2db      	uxtb	r3, r3
 800dd2e:	f003 030f 	and.w	r3, r3, #15
 800dd32:	b2da      	uxtb	r2, r3
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 800dd38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd3a:	b2db      	uxtb	r3, r3
 800dd3c:	f003 030f 	and.w	r3, r3, #15
 800dd40:	b2da      	uxtb	r2, r3
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800dd46:	6a3b      	ldr	r3, [r7, #32]
 800dd48:	0e1b      	lsrs	r3, r3, #24
 800dd4a:	b2da      	uxtb	r2, r3
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 800dd50:	6a3b      	ldr	r3, [r7, #32]
 800dd52:	0c1b      	lsrs	r3, r3, #16
 800dd54:	b2da      	uxtb	r2, r3
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 800dd5a:	6a3b      	ldr	r3, [r7, #32]
 800dd5c:	0a1b      	lsrs	r3, r3, #8
 800dd5e:	b2da      	uxtb	r2, r3
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 800dd64:	6a3b      	ldr	r3, [r7, #32]
 800dd66:	b2da      	uxtb	r2, r3
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 800dd6c:	69fb      	ldr	r3, [r7, #28]
 800dd6e:	b2da      	uxtb	r2, r3
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 800dd74:	69bb      	ldr	r3, [r7, #24]
 800dd76:	0e1b      	lsrs	r3, r3, #24
 800dd78:	b2da      	uxtb	r2, r3
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 800dd7e:	69bb      	ldr	r3, [r7, #24]
 800dd80:	0c1b      	lsrs	r3, r3, #16
 800dd82:	b2da      	uxtb	r2, r3
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 800dd88:	69bb      	ldr	r3, [r7, #24]
 800dd8a:	0a1b      	lsrs	r3, r3, #8
 800dd8c:	b2da      	uxtb	r2, r3
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800dd92:	697b      	ldr	r3, [r7, #20]
 800dd94:	0e1b      	lsrs	r3, r3, #24
 800dd96:	b2da      	uxtb	r2, r3
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 800dd9c:	697b      	ldr	r3, [r7, #20]
 800dd9e:	0c1b      	lsrs	r3, r3, #16
 800dda0:	b2da      	uxtb	r2, r3
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 800dda6:	697b      	ldr	r3, [r7, #20]
 800dda8:	b2da      	uxtb	r2, r3
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 800ddae:	2300      	movs	r3, #0
}
 800ddb0:	4618      	mov	r0, r3
 800ddb2:	372c      	adds	r7, #44	@ 0x2c
 800ddb4:	46bd      	mov	sp, r7
 800ddb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddba:	4770      	bx	lr
 800ddbc:	58004000 	.word	0x58004000
 800ddc0:	a94656b9 	.word	0xa94656b9

0800ddc4 <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800ddc4:	b580      	push	{r7, lr}
 800ddc6:	b082      	sub	sp, #8
 800ddc8:	af00      	add	r7, sp, #0
 800ddca:	6078      	str	r0, [r7, #4]
 800ddcc:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800ddce:	683b      	ldr	r3, [r7, #0]
 800ddd0:	685b      	ldr	r3, [r3, #4]
 800ddd2:	4a08      	ldr	r2, [pc, #32]	@ (800ddf4 <hci_init+0x30>)
 800ddd4:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 800ddd6:	4a08      	ldr	r2, [pc, #32]	@ (800ddf8 <hci_init+0x34>)
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 800dddc:	4806      	ldr	r0, [pc, #24]	@ (800ddf8 <hci_init+0x34>)
 800ddde:	f000 f979 	bl	800e0d4 <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800dde2:	683b      	ldr	r3, [r7, #0]
 800dde4:	681b      	ldr	r3, [r3, #0]
 800dde6:	4618      	mov	r0, r3
 800dde8:	f000 f8da 	bl	800dfa0 <TlInit>

  return;
 800ddec:	bf00      	nop
}
 800ddee:	3708      	adds	r7, #8
 800ddf0:	46bd      	mov	sp, r7
 800ddf2:	bd80      	pop	{r7, pc}
 800ddf4:	20001cf4 	.word	0x20001cf4
 800ddf8:	20001ccc 	.word	0x20001ccc

0800ddfc <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 800ddfc:	b580      	push	{r7, lr}
 800ddfe:	b084      	sub	sp, #16
 800de00:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800de02:	4822      	ldr	r0, [pc, #136]	@ (800de8c <hci_user_evt_proc+0x90>)
 800de04:	f000 fd32 	bl	800e86c <LST_is_empty>
 800de08:	4603      	mov	r3, r0
 800de0a:	2b00      	cmp	r3, #0
 800de0c:	d12b      	bne.n	800de66 <hci_user_evt_proc+0x6a>
 800de0e:	4b20      	ldr	r3, [pc, #128]	@ (800de90 <hci_user_evt_proc+0x94>)
 800de10:	781b      	ldrb	r3, [r3, #0]
 800de12:	2b00      	cmp	r3, #0
 800de14:	d027      	beq.n	800de66 <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800de16:	f107 030c 	add.w	r3, r7, #12
 800de1a:	4619      	mov	r1, r3
 800de1c:	481b      	ldr	r0, [pc, #108]	@ (800de8c <hci_user_evt_proc+0x90>)
 800de1e:	f000 fdb4 	bl	800e98a <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 800de22:	4b1c      	ldr	r3, [pc, #112]	@ (800de94 <hci_user_evt_proc+0x98>)
 800de24:	69db      	ldr	r3, [r3, #28]
 800de26:	2b00      	cmp	r3, #0
 800de28:	d00c      	beq.n	800de44 <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800de2a:	68fb      	ldr	r3, [r7, #12]
 800de2c:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 800de2e:	2301      	movs	r3, #1
 800de30:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 800de32:	4b18      	ldr	r3, [pc, #96]	@ (800de94 <hci_user_evt_proc+0x98>)
 800de34:	69db      	ldr	r3, [r3, #28]
 800de36:	1d3a      	adds	r2, r7, #4
 800de38:	4610      	mov	r0, r2
 800de3a:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 800de3c:	793a      	ldrb	r2, [r7, #4]
 800de3e:	4b14      	ldr	r3, [pc, #80]	@ (800de90 <hci_user_evt_proc+0x94>)
 800de40:	701a      	strb	r2, [r3, #0]
 800de42:	e002      	b.n	800de4a <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800de44:	4b12      	ldr	r3, [pc, #72]	@ (800de90 <hci_user_evt_proc+0x94>)
 800de46:	2201      	movs	r2, #1
 800de48:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 800de4a:	4b11      	ldr	r3, [pc, #68]	@ (800de90 <hci_user_evt_proc+0x94>)
 800de4c:	781b      	ldrb	r3, [r3, #0]
 800de4e:	2b00      	cmp	r3, #0
 800de50:	d004      	beq.n	800de5c <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800de52:	68fb      	ldr	r3, [r7, #12]
 800de54:	4618      	mov	r0, r3
 800de56:	f000 fc0d 	bl	800e674 <TL_MM_EvtDone>
 800de5a:	e004      	b.n	800de66 <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800de5c:	68fb      	ldr	r3, [r7, #12]
 800de5e:	4619      	mov	r1, r3
 800de60:	480a      	ldr	r0, [pc, #40]	@ (800de8c <hci_user_evt_proc+0x90>)
 800de62:	f000 fd25 	bl	800e8b0 <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800de66:	4809      	ldr	r0, [pc, #36]	@ (800de8c <hci_user_evt_proc+0x90>)
 800de68:	f000 fd00 	bl	800e86c <LST_is_empty>
 800de6c:	4603      	mov	r3, r0
 800de6e:	2b00      	cmp	r3, #0
 800de70:	d107      	bne.n	800de82 <hci_user_evt_proc+0x86>
 800de72:	4b07      	ldr	r3, [pc, #28]	@ (800de90 <hci_user_evt_proc+0x94>)
 800de74:	781b      	ldrb	r3, [r3, #0]
 800de76:	2b00      	cmp	r3, #0
 800de78:	d003      	beq.n	800de82 <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 800de7a:	4804      	ldr	r0, [pc, #16]	@ (800de8c <hci_user_evt_proc+0x90>)
 800de7c:	f001 f85e 	bl	800ef3c <hci_notify_asynch_evt>
  }


  return;
 800de80:	bf00      	nop
 800de82:	bf00      	nop
}
 800de84:	3710      	adds	r7, #16
 800de86:	46bd      	mov	sp, r7
 800de88:	bd80      	pop	{r7, pc}
 800de8a:	bf00      	nop
 800de8c:	20000108 	.word	0x20000108
 800de90:	20000114 	.word	0x20000114
 800de94:	20001ccc 	.word	0x20001ccc

0800de98 <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 800de98:	b580      	push	{r7, lr}
 800de9a:	b088      	sub	sp, #32
 800de9c:	af00      	add	r7, sp, #0
 800de9e:	6078      	str	r0, [r7, #4]
 800dea0:	460b      	mov	r3, r1
 800dea2:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 800dea4:	2000      	movs	r0, #0
 800dea6:	f000 f8d1 	bl	800e04c <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 800deaa:	2300      	movs	r3, #0
 800deac:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	885b      	ldrh	r3, [r3, #2]
 800deb2:	b21b      	sxth	r3, r3
 800deb4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800deb8:	b21a      	sxth	r2, r3
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	881b      	ldrh	r3, [r3, #0]
 800debe:	029b      	lsls	r3, r3, #10
 800dec0:	b21b      	sxth	r3, r3
 800dec2:	4313      	orrs	r3, r2
 800dec4:	b21b      	sxth	r3, r3
 800dec6:	83bb      	strh	r3, [r7, #28]
  
  CmdRspStatusFlag = HCI_TL_CMD_RESP_WAIT;
 800dec8:	4b33      	ldr	r3, [pc, #204]	@ (800df98 <hci_send_req+0x100>)
 800deca:	2201      	movs	r2, #1
 800decc:	701a      	strb	r2, [r3, #0]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	68db      	ldr	r3, [r3, #12]
 800ded2:	b2d9      	uxtb	r1, r3
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	689a      	ldr	r2, [r3, #8]
 800ded8:	8bbb      	ldrh	r3, [r7, #28]
 800deda:	4618      	mov	r0, r3
 800dedc:	f000 f890 	bl	800e000 <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 800dee0:	e04e      	b.n	800df80 <hci_send_req+0xe8>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 800dee2:	f248 00e8 	movw	r0, #33000	@ 0x80e8
 800dee6:	f001 f840 	bl	800ef6a <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800deea:	e043      	b.n	800df74 <hci_send_req+0xdc>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 800deec:	f107 030c 	add.w	r3, r7, #12
 800def0:	4619      	mov	r1, r3
 800def2:	482a      	ldr	r0, [pc, #168]	@ (800df9c <hci_send_req+0x104>)
 800def4:	f000 fd49 	bl	800e98a <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 800def8:	68fb      	ldr	r3, [r7, #12]
 800defa:	7a5b      	ldrb	r3, [r3, #9]
 800defc:	2b0f      	cmp	r3, #15
 800defe:	d114      	bne.n	800df2a <hci_send_req+0x92>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 800df00:	68fb      	ldr	r3, [r7, #12]
 800df02:	330b      	adds	r3, #11
 800df04:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 800df06:	693b      	ldr	r3, [r7, #16]
 800df08:	885b      	ldrh	r3, [r3, #2]
 800df0a:	b29b      	uxth	r3, r3
 800df0c:	8bba      	ldrh	r2, [r7, #28]
 800df0e:	429a      	cmp	r2, r3
 800df10:	d104      	bne.n	800df1c <hci_send_req+0x84>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	691b      	ldr	r3, [r3, #16]
 800df16:	693a      	ldr	r2, [r7, #16]
 800df18:	7812      	ldrb	r2, [r2, #0]
 800df1a:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 800df1c:	693b      	ldr	r3, [r7, #16]
 800df1e:	785b      	ldrb	r3, [r3, #1]
 800df20:	2b00      	cmp	r3, #0
 800df22:	d027      	beq.n	800df74 <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800df24:	2301      	movs	r3, #1
 800df26:	77fb      	strb	r3, [r7, #31]
 800df28:	e024      	b.n	800df74 <hci_send_req+0xdc>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 800df2a:	68fb      	ldr	r3, [r7, #12]
 800df2c:	330b      	adds	r3, #11
 800df2e:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 800df30:	69bb      	ldr	r3, [r7, #24]
 800df32:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800df36:	b29b      	uxth	r3, r3
 800df38:	8bba      	ldrh	r2, [r7, #28]
 800df3a:	429a      	cmp	r2, r3
 800df3c:	d114      	bne.n	800df68 <hci_send_req+0xd0>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 800df3e:	68fb      	ldr	r3, [r7, #12]
 800df40:	7a9b      	ldrb	r3, [r3, #10]
 800df42:	3b03      	subs	r3, #3
 800df44:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	695a      	ldr	r2, [r3, #20]
 800df4a:	7dfb      	ldrb	r3, [r7, #23]
 800df4c:	429a      	cmp	r2, r3
 800df4e:	bfa8      	it	ge
 800df50:	461a      	movge	r2, r3
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	6918      	ldr	r0, [r3, #16]
 800df5a:	69bb      	ldr	r3, [r7, #24]
 800df5c:	1cd9      	adds	r1, r3, #3
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	695b      	ldr	r3, [r3, #20]
 800df62:	461a      	mov	r2, r3
 800df64:	f002 f9c5 	bl	80102f2 <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 800df68:	69bb      	ldr	r3, [r7, #24]
 800df6a:	781b      	ldrb	r3, [r3, #0]
 800df6c:	2b00      	cmp	r3, #0
 800df6e:	d001      	beq.n	800df74 <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800df70:	2301      	movs	r3, #1
 800df72:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800df74:	4809      	ldr	r0, [pc, #36]	@ (800df9c <hci_send_req+0x104>)
 800df76:	f000 fc79 	bl	800e86c <LST_is_empty>
 800df7a:	4603      	mov	r3, r0
 800df7c:	2b00      	cmp	r3, #0
 800df7e:	d0b5      	beq.n	800deec <hci_send_req+0x54>
  while(local_cmd_status == HCI_TL_CmdBusy)
 800df80:	7ffb      	ldrb	r3, [r7, #31]
 800df82:	2b00      	cmp	r3, #0
 800df84:	d0ad      	beq.n	800dee2 <hci_send_req+0x4a>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 800df86:	2001      	movs	r0, #1
 800df88:	f000 f860 	bl	800e04c <NotifyCmdStatus>

  return 0;
 800df8c:	2300      	movs	r3, #0
}
 800df8e:	4618      	mov	r0, r3
 800df90:	3720      	adds	r7, #32
 800df92:	46bd      	mov	sp, r7
 800df94:	bd80      	pop	{r7, pc}
 800df96:	bf00      	nop
 800df98:	20001cf8 	.word	0x20001cf8
 800df9c:	20001cec 	.word	0x20001cec

0800dfa0 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800dfa0:	b580      	push	{r7, lr}
 800dfa2:	b086      	sub	sp, #24
 800dfa4:	af00      	add	r7, sp, #0
 800dfa6:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 800dfa8:	480f      	ldr	r0, [pc, #60]	@ (800dfe8 <TlInit+0x48>)
 800dfaa:	f000 fc4f 	bl	800e84c <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 800dfae:	4a0f      	ldr	r2, [pc, #60]	@ (800dfec <TlInit+0x4c>)
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 800dfb4:	480e      	ldr	r0, [pc, #56]	@ (800dff0 <TlInit+0x50>)
 800dfb6:	f000 fc49 	bl	800e84c <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800dfba:	4b0e      	ldr	r3, [pc, #56]	@ (800dff4 <TlInit+0x54>)
 800dfbc:	2201      	movs	r2, #1
 800dfbe:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 800dfc0:	4b0d      	ldr	r3, [pc, #52]	@ (800dff8 <TlInit+0x58>)
 800dfc2:	681b      	ldr	r3, [r3, #0]
 800dfc4:	2b00      	cmp	r3, #0
 800dfc6:	d00a      	beq.n	800dfde <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 800dfcc:	4b0b      	ldr	r3, [pc, #44]	@ (800dffc <TlInit+0x5c>)
 800dfce:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 800dfd0:	4b09      	ldr	r3, [pc, #36]	@ (800dff8 <TlInit+0x58>)
 800dfd2:	681b      	ldr	r3, [r3, #0]
 800dfd4:	f107 0208 	add.w	r2, r7, #8
 800dfd8:	4610      	mov	r0, r2
 800dfda:	4798      	blx	r3
  }

  return;
 800dfdc:	bf00      	nop
 800dfde:	bf00      	nop
}
 800dfe0:	3718      	adds	r7, #24
 800dfe2:	46bd      	mov	sp, r7
 800dfe4:	bd80      	pop	{r7, pc}
 800dfe6:	bf00      	nop
 800dfe8:	20001cec 	.word	0x20001cec
 800dfec:	20000110 	.word	0x20000110
 800dff0:	20000108 	.word	0x20000108
 800dff4:	20000114 	.word	0x20000114
 800dff8:	20001ccc 	.word	0x20001ccc
 800dffc:	0800e08d 	.word	0x0800e08d

0800e000 <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 800e000:	b580      	push	{r7, lr}
 800e002:	b082      	sub	sp, #8
 800e004:	af00      	add	r7, sp, #0
 800e006:	4603      	mov	r3, r0
 800e008:	603a      	str	r2, [r7, #0]
 800e00a:	80fb      	strh	r3, [r7, #6]
 800e00c:	460b      	mov	r3, r1
 800e00e:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 800e010:	4b0c      	ldr	r3, [pc, #48]	@ (800e044 <SendCmd+0x44>)
 800e012:	681b      	ldr	r3, [r3, #0]
 800e014:	88fa      	ldrh	r2, [r7, #6]
 800e016:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 800e01a:	4b0a      	ldr	r3, [pc, #40]	@ (800e044 <SendCmd+0x44>)
 800e01c:	681b      	ldr	r3, [r3, #0]
 800e01e:	797a      	ldrb	r2, [r7, #5]
 800e020:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 800e022:	4b08      	ldr	r3, [pc, #32]	@ (800e044 <SendCmd+0x44>)
 800e024:	681b      	ldr	r3, [r3, #0]
 800e026:	330c      	adds	r3, #12
 800e028:	797a      	ldrb	r2, [r7, #5]
 800e02a:	6839      	ldr	r1, [r7, #0]
 800e02c:	4618      	mov	r0, r3
 800e02e:	f002 f960 	bl	80102f2 <memcpy>

  hciContext.io.Send(0,0);
 800e032:	4b05      	ldr	r3, [pc, #20]	@ (800e048 <SendCmd+0x48>)
 800e034:	691b      	ldr	r3, [r3, #16]
 800e036:	2100      	movs	r1, #0
 800e038:	2000      	movs	r0, #0
 800e03a:	4798      	blx	r3

  return;
 800e03c:	bf00      	nop
}
 800e03e:	3708      	adds	r7, #8
 800e040:	46bd      	mov	sp, r7
 800e042:	bd80      	pop	{r7, pc}
 800e044:	20000110 	.word	0x20000110
 800e048:	20001ccc 	.word	0x20001ccc

0800e04c <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 800e04c:	b580      	push	{r7, lr}
 800e04e:	b082      	sub	sp, #8
 800e050:	af00      	add	r7, sp, #0
 800e052:	4603      	mov	r3, r0
 800e054:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 800e056:	79fb      	ldrb	r3, [r7, #7]
 800e058:	2b00      	cmp	r3, #0
 800e05a:	d108      	bne.n	800e06e <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 800e05c:	4b0a      	ldr	r3, [pc, #40]	@ (800e088 <NotifyCmdStatus+0x3c>)
 800e05e:	681b      	ldr	r3, [r3, #0]
 800e060:	2b00      	cmp	r3, #0
 800e062:	d00d      	beq.n	800e080 <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 800e064:	4b08      	ldr	r3, [pc, #32]	@ (800e088 <NotifyCmdStatus+0x3c>)
 800e066:	681b      	ldr	r3, [r3, #0]
 800e068:	2000      	movs	r0, #0
 800e06a:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 800e06c:	e008      	b.n	800e080 <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 800e06e:	4b06      	ldr	r3, [pc, #24]	@ (800e088 <NotifyCmdStatus+0x3c>)
 800e070:	681b      	ldr	r3, [r3, #0]
 800e072:	2b00      	cmp	r3, #0
 800e074:	d004      	beq.n	800e080 <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 800e076:	4b04      	ldr	r3, [pc, #16]	@ (800e088 <NotifyCmdStatus+0x3c>)
 800e078:	681b      	ldr	r3, [r3, #0]
 800e07a:	2001      	movs	r0, #1
 800e07c:	4798      	blx	r3
  return;
 800e07e:	bf00      	nop
 800e080:	bf00      	nop
}
 800e082:	3708      	adds	r7, #8
 800e084:	46bd      	mov	sp, r7
 800e086:	bd80      	pop	{r7, pc}
 800e088:	20001cf4 	.word	0x20001cf4

0800e08c <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 800e08c:	b580      	push	{r7, lr}
 800e08e:	b082      	sub	sp, #8
 800e090:	af00      	add	r7, sp, #0
 800e092:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	7a5b      	ldrb	r3, [r3, #9]
 800e098:	2b0f      	cmp	r3, #15
 800e09a:	d003      	beq.n	800e0a4 <TlEvtReceived+0x18>
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	7a5b      	ldrb	r3, [r3, #9]
 800e0a0:	2b0e      	cmp	r3, #14
 800e0a2:	d107      	bne.n	800e0b4 <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 800e0a4:	6879      	ldr	r1, [r7, #4]
 800e0a6:	4809      	ldr	r0, [pc, #36]	@ (800e0cc <TlEvtReceived+0x40>)
 800e0a8:	f000 fc28 	bl	800e8fc <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 800e0ac:	2000      	movs	r0, #0
 800e0ae:	f000 ff51 	bl	800ef54 <hci_cmd_resp_release>
 800e0b2:	e006      	b.n	800e0c2 <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 800e0b4:	6879      	ldr	r1, [r7, #4]
 800e0b6:	4806      	ldr	r0, [pc, #24]	@ (800e0d0 <TlEvtReceived+0x44>)
 800e0b8:	f000 fc20 	bl	800e8fc <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800e0bc:	4804      	ldr	r0, [pc, #16]	@ (800e0d0 <TlEvtReceived+0x44>)
 800e0be:	f000 ff3d 	bl	800ef3c <hci_notify_asynch_evt>
  }

  return;
 800e0c2:	bf00      	nop
}
 800e0c4:	3708      	adds	r7, #8
 800e0c6:	46bd      	mov	sp, r7
 800e0c8:	bd80      	pop	{r7, pc}
 800e0ca:	bf00      	nop
 800e0cc:	20001cec 	.word	0x20001cec
 800e0d0:	20000108 	.word	0x20000108

0800e0d4 <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 800e0d4:	b480      	push	{r7}
 800e0d6:	b083      	sub	sp, #12
 800e0d8:	af00      	add	r7, sp, #0
 800e0da:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	4a05      	ldr	r2, [pc, #20]	@ (800e0f4 <hci_register_io_bus+0x20>)
 800e0e0:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	4a04      	ldr	r2, [pc, #16]	@ (800e0f8 <hci_register_io_bus+0x24>)
 800e0e6:	611a      	str	r2, [r3, #16]

  return;
 800e0e8:	bf00      	nop
}
 800e0ea:	370c      	adds	r7, #12
 800e0ec:	46bd      	mov	sp, r7
 800e0ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0f2:	4770      	bx	lr
 800e0f4:	0800e3ed 	.word	0x0800e3ed
 800e0f8:	0800e455 	.word	0x0800e455

0800e0fc <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800e0fc:	b580      	push	{r7, lr}
 800e0fe:	b082      	sub	sp, #8
 800e100:	af00      	add	r7, sp, #0
 800e102:	6078      	str	r0, [r7, #4]
 800e104:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800e106:	683b      	ldr	r3, [r7, #0]
 800e108:	685b      	ldr	r3, [r3, #4]
 800e10a:	4a08      	ldr	r2, [pc, #32]	@ (800e12c <shci_init+0x30>)
 800e10c:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 800e10e:	4a08      	ldr	r2, [pc, #32]	@ (800e130 <shci_init+0x34>)
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 800e114:	4806      	ldr	r0, [pc, #24]	@ (800e130 <shci_init+0x34>)
 800e116:	f000 f915 	bl	800e344 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800e11a:	683b      	ldr	r3, [r7, #0]
 800e11c:	681b      	ldr	r3, [r3, #0]
 800e11e:	4618      	mov	r0, r3
 800e120:	f000 f898 	bl	800e254 <TlInit>

  return;
 800e124:	bf00      	nop
}
 800e126:	3708      	adds	r7, #8
 800e128:	46bd      	mov	sp, r7
 800e12a:	bd80      	pop	{r7, pc}
 800e12c:	20001d1c 	.word	0x20001d1c
 800e130:	20001cfc 	.word	0x20001cfc

0800e134 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 800e134:	b580      	push	{r7, lr}
 800e136:	b084      	sub	sp, #16
 800e138:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800e13a:	4822      	ldr	r0, [pc, #136]	@ (800e1c4 <shci_user_evt_proc+0x90>)
 800e13c:	f000 fb96 	bl	800e86c <LST_is_empty>
 800e140:	4603      	mov	r3, r0
 800e142:	2b00      	cmp	r3, #0
 800e144:	d12b      	bne.n	800e19e <shci_user_evt_proc+0x6a>
 800e146:	4b20      	ldr	r3, [pc, #128]	@ (800e1c8 <shci_user_evt_proc+0x94>)
 800e148:	781b      	ldrb	r3, [r3, #0]
 800e14a:	2b00      	cmp	r3, #0
 800e14c:	d027      	beq.n	800e19e <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800e14e:	f107 030c 	add.w	r3, r7, #12
 800e152:	4619      	mov	r1, r3
 800e154:	481b      	ldr	r0, [pc, #108]	@ (800e1c4 <shci_user_evt_proc+0x90>)
 800e156:	f000 fc18 	bl	800e98a <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 800e15a:	4b1c      	ldr	r3, [pc, #112]	@ (800e1cc <shci_user_evt_proc+0x98>)
 800e15c:	69db      	ldr	r3, [r3, #28]
 800e15e:	2b00      	cmp	r3, #0
 800e160:	d00c      	beq.n	800e17c <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800e162:	68fb      	ldr	r3, [r7, #12]
 800e164:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 800e166:	2301      	movs	r3, #1
 800e168:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 800e16a:	4b18      	ldr	r3, [pc, #96]	@ (800e1cc <shci_user_evt_proc+0x98>)
 800e16c:	69db      	ldr	r3, [r3, #28]
 800e16e:	1d3a      	adds	r2, r7, #4
 800e170:	4610      	mov	r0, r2
 800e172:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 800e174:	793a      	ldrb	r2, [r7, #4]
 800e176:	4b14      	ldr	r3, [pc, #80]	@ (800e1c8 <shci_user_evt_proc+0x94>)
 800e178:	701a      	strb	r2, [r3, #0]
 800e17a:	e002      	b.n	800e182 <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800e17c:	4b12      	ldr	r3, [pc, #72]	@ (800e1c8 <shci_user_evt_proc+0x94>)
 800e17e:	2201      	movs	r2, #1
 800e180:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 800e182:	4b11      	ldr	r3, [pc, #68]	@ (800e1c8 <shci_user_evt_proc+0x94>)
 800e184:	781b      	ldrb	r3, [r3, #0]
 800e186:	2b00      	cmp	r3, #0
 800e188:	d004      	beq.n	800e194 <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800e18a:	68fb      	ldr	r3, [r7, #12]
 800e18c:	4618      	mov	r0, r3
 800e18e:	f000 fa71 	bl	800e674 <TL_MM_EvtDone>
 800e192:	e004      	b.n	800e19e <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800e194:	68fb      	ldr	r3, [r7, #12]
 800e196:	4619      	mov	r1, r3
 800e198:	480a      	ldr	r0, [pc, #40]	@ (800e1c4 <shci_user_evt_proc+0x90>)
 800e19a:	f000 fb89 	bl	800e8b0 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800e19e:	4809      	ldr	r0, [pc, #36]	@ (800e1c4 <shci_user_evt_proc+0x90>)
 800e1a0:	f000 fb64 	bl	800e86c <LST_is_empty>
 800e1a4:	4603      	mov	r3, r0
 800e1a6:	2b00      	cmp	r3, #0
 800e1a8:	d107      	bne.n	800e1ba <shci_user_evt_proc+0x86>
 800e1aa:	4b07      	ldr	r3, [pc, #28]	@ (800e1c8 <shci_user_evt_proc+0x94>)
 800e1ac:	781b      	ldrb	r3, [r3, #0]
 800e1ae:	2b00      	cmp	r3, #0
 800e1b0:	d003      	beq.n	800e1ba <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 800e1b2:	4804      	ldr	r0, [pc, #16]	@ (800e1c4 <shci_user_evt_proc+0x90>)
 800e1b4:	f7f2 ff48 	bl	8001048 <shci_notify_asynch_evt>
  }


  return;
 800e1b8:	bf00      	nop
 800e1ba:	bf00      	nop
}
 800e1bc:	3710      	adds	r7, #16
 800e1be:	46bd      	mov	sp, r7
 800e1c0:	bd80      	pop	{r7, pc}
 800e1c2:	bf00      	nop
 800e1c4:	20000118 	.word	0x20000118
 800e1c8:	20000128 	.word	0x20000128
 800e1cc:	20001cfc 	.word	0x20001cfc

0800e1d0 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 800e1d0:	b580      	push	{r7, lr}
 800e1d2:	b084      	sub	sp, #16
 800e1d4:	af00      	add	r7, sp, #0
 800e1d6:	60ba      	str	r2, [r7, #8]
 800e1d8:	607b      	str	r3, [r7, #4]
 800e1da:	4603      	mov	r3, r0
 800e1dc:	81fb      	strh	r3, [r7, #14]
 800e1de:	460b      	mov	r3, r1
 800e1e0:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 800e1e2:	2000      	movs	r0, #0
 800e1e4:	f000 f868 	bl	800e2b8 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 800e1e8:	4b17      	ldr	r3, [pc, #92]	@ (800e248 <shci_send+0x78>)
 800e1ea:	681b      	ldr	r3, [r3, #0]
 800e1ec:	89fa      	ldrh	r2, [r7, #14]
 800e1ee:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 800e1f2:	4b15      	ldr	r3, [pc, #84]	@ (800e248 <shci_send+0x78>)
 800e1f4:	681b      	ldr	r3, [r3, #0]
 800e1f6:	7b7a      	ldrb	r2, [r7, #13]
 800e1f8:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 800e1fa:	4b13      	ldr	r3, [pc, #76]	@ (800e248 <shci_send+0x78>)
 800e1fc:	681b      	ldr	r3, [r3, #0]
 800e1fe:	330c      	adds	r3, #12
 800e200:	7b7a      	ldrb	r2, [r7, #13]
 800e202:	68b9      	ldr	r1, [r7, #8]
 800e204:	4618      	mov	r0, r3
 800e206:	f002 f874 	bl	80102f2 <memcpy>
  CmdRspStatusFlag = SHCI_TL_CMD_RESP_WAIT;
 800e20a:	4b10      	ldr	r3, [pc, #64]	@ (800e24c <shci_send+0x7c>)
 800e20c:	2201      	movs	r2, #1
 800e20e:	701a      	strb	r2, [r3, #0]
  shciContext.io.Send(0,0);
 800e210:	4b0f      	ldr	r3, [pc, #60]	@ (800e250 <shci_send+0x80>)
 800e212:	691b      	ldr	r3, [r3, #16]
 800e214:	2100      	movs	r1, #0
 800e216:	2000      	movs	r0, #0
 800e218:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 800e21a:	f248 00e8 	movw	r0, #33000	@ 0x80e8
 800e21e:	f7f2 ff2a 	bl	8001076 <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 800e222:	687b      	ldr	r3, [r7, #4]
 800e224:	f103 0008 	add.w	r0, r3, #8
 800e228:	4b07      	ldr	r3, [pc, #28]	@ (800e248 <shci_send+0x78>)
 800e22a:	6819      	ldr	r1, [r3, #0]
 800e22c:	4b06      	ldr	r3, [pc, #24]	@ (800e248 <shci_send+0x78>)
 800e22e:	681b      	ldr	r3, [r3, #0]
 800e230:	789b      	ldrb	r3, [r3, #2]
 800e232:	3303      	adds	r3, #3
 800e234:	461a      	mov	r2, r3
 800e236:	f002 f85c 	bl	80102f2 <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800e23a:	2001      	movs	r0, #1
 800e23c:	f000 f83c 	bl	800e2b8 <Cmd_SetStatus>

  return;
 800e240:	bf00      	nop
}
 800e242:	3710      	adds	r7, #16
 800e244:	46bd      	mov	sp, r7
 800e246:	bd80      	pop	{r7, pc}
 800e248:	20000124 	.word	0x20000124
 800e24c:	20001d20 	.word	0x20001d20
 800e250:	20001cfc 	.word	0x20001cfc

0800e254 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800e254:	b580      	push	{r7, lr}
 800e256:	b086      	sub	sp, #24
 800e258:	af00      	add	r7, sp, #0
 800e25a:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 800e25c:	4a10      	ldr	r2, [pc, #64]	@ (800e2a0 <TlInit+0x4c>)
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 800e262:	4810      	ldr	r0, [pc, #64]	@ (800e2a4 <TlInit+0x50>)
 800e264:	f000 faf2 	bl	800e84c <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800e268:	2001      	movs	r0, #1
 800e26a:	f000 f825 	bl	800e2b8 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800e26e:	4b0e      	ldr	r3, [pc, #56]	@ (800e2a8 <TlInit+0x54>)
 800e270:	2201      	movs	r2, #1
 800e272:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 800e274:	4b0d      	ldr	r3, [pc, #52]	@ (800e2ac <TlInit+0x58>)
 800e276:	681b      	ldr	r3, [r3, #0]
 800e278:	2b00      	cmp	r3, #0
 800e27a:	d00c      	beq.n	800e296 <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 800e280:	4b0b      	ldr	r3, [pc, #44]	@ (800e2b0 <TlInit+0x5c>)
 800e282:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 800e284:	4b0b      	ldr	r3, [pc, #44]	@ (800e2b4 <TlInit+0x60>)
 800e286:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 800e288:	4b08      	ldr	r3, [pc, #32]	@ (800e2ac <TlInit+0x58>)
 800e28a:	681b      	ldr	r3, [r3, #0]
 800e28c:	f107 020c 	add.w	r2, r7, #12
 800e290:	4610      	mov	r0, r2
 800e292:	4798      	blx	r3
  }

  return;
 800e294:	bf00      	nop
 800e296:	bf00      	nop
}
 800e298:	3718      	adds	r7, #24
 800e29a:	46bd      	mov	sp, r7
 800e29c:	bd80      	pop	{r7, pc}
 800e29e:	bf00      	nop
 800e2a0:	20000124 	.word	0x20000124
 800e2a4:	20000118 	.word	0x20000118
 800e2a8:	20000128 	.word	0x20000128
 800e2ac:	20001cfc 	.word	0x20001cfc
 800e2b0:	0800e309 	.word	0x0800e309
 800e2b4:	0800e321 	.word	0x0800e321

0800e2b8 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 800e2b8:	b580      	push	{r7, lr}
 800e2ba:	b082      	sub	sp, #8
 800e2bc:	af00      	add	r7, sp, #0
 800e2be:	4603      	mov	r3, r0
 800e2c0:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 800e2c2:	79fb      	ldrb	r3, [r7, #7]
 800e2c4:	2b00      	cmp	r3, #0
 800e2c6:	d10b      	bne.n	800e2e0 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 800e2c8:	4b0d      	ldr	r3, [pc, #52]	@ (800e300 <Cmd_SetStatus+0x48>)
 800e2ca:	681b      	ldr	r3, [r3, #0]
 800e2cc:	2b00      	cmp	r3, #0
 800e2ce:	d003      	beq.n	800e2d8 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 800e2d0:	4b0b      	ldr	r3, [pc, #44]	@ (800e300 <Cmd_SetStatus+0x48>)
 800e2d2:	681b      	ldr	r3, [r3, #0]
 800e2d4:	2000      	movs	r0, #0
 800e2d6:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 800e2d8:	4b0a      	ldr	r3, [pc, #40]	@ (800e304 <Cmd_SetStatus+0x4c>)
 800e2da:	2200      	movs	r2, #0
 800e2dc:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 800e2de:	e00b      	b.n	800e2f8 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 800e2e0:	4b08      	ldr	r3, [pc, #32]	@ (800e304 <Cmd_SetStatus+0x4c>)
 800e2e2:	2201      	movs	r2, #1
 800e2e4:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 800e2e6:	4b06      	ldr	r3, [pc, #24]	@ (800e300 <Cmd_SetStatus+0x48>)
 800e2e8:	681b      	ldr	r3, [r3, #0]
 800e2ea:	2b00      	cmp	r3, #0
 800e2ec:	d004      	beq.n	800e2f8 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 800e2ee:	4b04      	ldr	r3, [pc, #16]	@ (800e300 <Cmd_SetStatus+0x48>)
 800e2f0:	681b      	ldr	r3, [r3, #0]
 800e2f2:	2001      	movs	r0, #1
 800e2f4:	4798      	blx	r3
  return;
 800e2f6:	bf00      	nop
 800e2f8:	bf00      	nop
}
 800e2fa:	3708      	adds	r7, #8
 800e2fc:	46bd      	mov	sp, r7
 800e2fe:	bd80      	pop	{r7, pc}
 800e300:	20001d1c 	.word	0x20001d1c
 800e304:	20000120 	.word	0x20000120

0800e308 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 800e308:	b580      	push	{r7, lr}
 800e30a:	b082      	sub	sp, #8
 800e30c:	af00      	add	r7, sp, #0
 800e30e:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 800e310:	2000      	movs	r0, #0
 800e312:	f7f2 fea5 	bl	8001060 <shci_cmd_resp_release>

  return;
 800e316:	bf00      	nop
}
 800e318:	3708      	adds	r7, #8
 800e31a:	46bd      	mov	sp, r7
 800e31c:	bd80      	pop	{r7, pc}
	...

0800e320 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 800e320:	b580      	push	{r7, lr}
 800e322:	b082      	sub	sp, #8
 800e324:	af00      	add	r7, sp, #0
 800e326:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 800e328:	6879      	ldr	r1, [r7, #4]
 800e32a:	4805      	ldr	r0, [pc, #20]	@ (800e340 <TlUserEvtReceived+0x20>)
 800e32c:	f000 fae6 	bl	800e8fc <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800e330:	4803      	ldr	r0, [pc, #12]	@ (800e340 <TlUserEvtReceived+0x20>)
 800e332:	f7f2 fe89 	bl	8001048 <shci_notify_asynch_evt>

  return;
 800e336:	bf00      	nop
}
 800e338:	3708      	adds	r7, #8
 800e33a:	46bd      	mov	sp, r7
 800e33c:	bd80      	pop	{r7, pc}
 800e33e:	bf00      	nop
 800e340:	20000118 	.word	0x20000118

0800e344 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 800e344:	b480      	push	{r7}
 800e346:	b083      	sub	sp, #12
 800e348:	af00      	add	r7, sp, #0
 800e34a:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	4a05      	ldr	r2, [pc, #20]	@ (800e364 <shci_register_io_bus+0x20>)
 800e350:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	4a04      	ldr	r2, [pc, #16]	@ (800e368 <shci_register_io_bus+0x24>)
 800e356:	611a      	str	r2, [r3, #16]

  return;
 800e358:	bf00      	nop
}
 800e35a:	370c      	adds	r7, #12
 800e35c:	46bd      	mov	sp, r7
 800e35e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e362:	4770      	bx	lr
 800e364:	0800e501 	.word	0x0800e501
 800e368:	0800e555 	.word	0x0800e555

0800e36c <TL_Enable>:

/******************************************************************************
 * GENERAL - refer to AN5289 for functions description.
 ******************************************************************************/
void TL_Enable( void )
{
 800e36c:	b580      	push	{r7, lr}
 800e36e:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 800e370:	f001 fab2 	bl	800f8d8 <HW_IPCC_Enable>

  return;
 800e374:	bf00      	nop
}
 800e376:	bd80      	pop	{r7, pc}

0800e378 <TL_Init>:


void TL_Init( void )
{
 800e378:	b580      	push	{r7, lr}
 800e37a:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 800e37c:	4b10      	ldr	r3, [pc, #64]	@ (800e3c0 <TL_Init+0x48>)
 800e37e:	4a11      	ldr	r2, [pc, #68]	@ (800e3c4 <TL_Init+0x4c>)
 800e380:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 800e382:	4b0f      	ldr	r3, [pc, #60]	@ (800e3c0 <TL_Init+0x48>)
 800e384:	4a10      	ldr	r2, [pc, #64]	@ (800e3c8 <TL_Init+0x50>)
 800e386:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 800e388:	4b0d      	ldr	r3, [pc, #52]	@ (800e3c0 <TL_Init+0x48>)
 800e38a:	4a10      	ldr	r2, [pc, #64]	@ (800e3cc <TL_Init+0x54>)
 800e38c:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 800e38e:	4b0c      	ldr	r3, [pc, #48]	@ (800e3c0 <TL_Init+0x48>)
 800e390:	4a0f      	ldr	r2, [pc, #60]	@ (800e3d0 <TL_Init+0x58>)
 800e392:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 800e394:	4b0a      	ldr	r3, [pc, #40]	@ (800e3c0 <TL_Init+0x48>)
 800e396:	4a0f      	ldr	r2, [pc, #60]	@ (800e3d4 <TL_Init+0x5c>)
 800e398:	625a      	str	r2, [r3, #36]	@ 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 800e39a:	4b09      	ldr	r3, [pc, #36]	@ (800e3c0 <TL_Init+0x48>)
 800e39c:	4a0e      	ldr	r2, [pc, #56]	@ (800e3d8 <TL_Init+0x60>)
 800e39e:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 800e3a0:	4b07      	ldr	r3, [pc, #28]	@ (800e3c0 <TL_Init+0x48>)
 800e3a2:	4a0e      	ldr	r2, [pc, #56]	@ (800e3dc <TL_Init+0x64>)
 800e3a4:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 800e3a6:	4b06      	ldr	r3, [pc, #24]	@ (800e3c0 <TL_Init+0x48>)
 800e3a8:	4a0d      	ldr	r2, [pc, #52]	@ (800e3e0 <TL_Init+0x68>)
 800e3aa:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 800e3ac:	4b04      	ldr	r3, [pc, #16]	@ (800e3c0 <TL_Init+0x48>)
 800e3ae:	4a0d      	ldr	r2, [pc, #52]	@ (800e3e4 <TL_Init+0x6c>)
 800e3b0:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 800e3b2:	4b03      	ldr	r3, [pc, #12]	@ (800e3c0 <TL_Init+0x48>)
 800e3b4:	4a0c      	ldr	r2, [pc, #48]	@ (800e3e8 <TL_Init+0x70>)
 800e3b6:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 800e3b8:	f001 faa2 	bl	800f900 <HW_IPCC_Init>

  return;
 800e3bc:	bf00      	nop
}
 800e3be:	bd80      	pop	{r7, pc}
 800e3c0:	20030000 	.word	0x20030000
 800e3c4:	20030028 	.word	0x20030028
 800e3c8:	20030048 	.word	0x20030048
 800e3cc:	20030058 	.word	0x20030058
 800e3d0:	20030068 	.word	0x20030068
 800e3d4:	20030070 	.word	0x20030070
 800e3d8:	20030078 	.word	0x20030078
 800e3dc:	20030080 	.word	0x20030080
 800e3e0:	2003009c 	.word	0x2003009c
 800e3e4:	200300a0 	.word	0x200300a0
 800e3e8:	200300ac 	.word	0x200300ac

0800e3ec <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 800e3ec:	b580      	push	{r7, lr}
 800e3ee:	b084      	sub	sp, #16
 800e3f0:	af00      	add	r7, sp, #0
 800e3f2:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 800e3f8:	4811      	ldr	r0, [pc, #68]	@ (800e440 <TL_BLE_Init+0x54>)
 800e3fa:	f000 fa27 	bl	800e84c <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 800e3fe:	4b11      	ldr	r3, [pc, #68]	@ (800e444 <TL_BLE_Init+0x58>)
 800e400:	685b      	ldr	r3, [r3, #4]
 800e402:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800e404:	68fb      	ldr	r3, [r7, #12]
 800e406:	689a      	ldr	r2, [r3, #8]
 800e408:	68bb      	ldr	r3, [r7, #8]
 800e40a:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 800e40c:	68fb      	ldr	r3, [r7, #12]
 800e40e:	68da      	ldr	r2, [r3, #12]
 800e410:	68bb      	ldr	r3, [r7, #8]
 800e412:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 800e414:	68bb      	ldr	r3, [r7, #8]
 800e416:	4a0c      	ldr	r2, [pc, #48]	@ (800e448 <TL_BLE_Init+0x5c>)
 800e418:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 800e41a:	68bb      	ldr	r3, [r7, #8]
 800e41c:	4a08      	ldr	r2, [pc, #32]	@ (800e440 <TL_BLE_Init+0x54>)
 800e41e:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 800e420:	f001 fa84 	bl	800f92c <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 800e424:	68fb      	ldr	r3, [r7, #12]
 800e426:	681b      	ldr	r3, [r3, #0]
 800e428:	4a08      	ldr	r2, [pc, #32]	@ (800e44c <TL_BLE_Init+0x60>)
 800e42a:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 800e42c:	68fb      	ldr	r3, [r7, #12]
 800e42e:	685b      	ldr	r3, [r3, #4]
 800e430:	4a07      	ldr	r2, [pc, #28]	@ (800e450 <TL_BLE_Init+0x64>)
 800e432:	6013      	str	r3, [r2, #0]

  return 0;
 800e434:	2300      	movs	r3, #0
}
 800e436:	4618      	mov	r0, r3
 800e438:	3710      	adds	r7, #16
 800e43a:	46bd      	mov	sp, r7
 800e43c:	bd80      	pop	{r7, pc}
 800e43e:	bf00      	nop
 800e440:	200300c8 	.word	0x200300c8
 800e444:	20030000 	.word	0x20030000
 800e448:	20030a58 	.word	0x20030a58
 800e44c:	20001d2c 	.word	0x20001d2c
 800e450:	20001d30 	.word	0x20001d30

0800e454 <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 800e454:	b580      	push	{r7, lr}
 800e456:	b082      	sub	sp, #8
 800e458:	af00      	add	r7, sp, #0
 800e45a:	6078      	str	r0, [r7, #4]
 800e45c:	460b      	mov	r3, r1
 800e45e:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 800e460:	4b09      	ldr	r3, [pc, #36]	@ (800e488 <TL_BLE_SendCmd+0x34>)
 800e462:	685b      	ldr	r3, [r3, #4]
 800e464:	681b      	ldr	r3, [r3, #0]
 800e466:	2201      	movs	r2, #1
 800e468:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 800e46a:	4b07      	ldr	r3, [pc, #28]	@ (800e488 <TL_BLE_SendCmd+0x34>)
 800e46c:	685b      	ldr	r3, [r3, #4]
 800e46e:	681b      	ldr	r3, [r3, #0]
 800e470:	4619      	mov	r1, r3
 800e472:	2001      	movs	r0, #1
 800e474:	f000 f96c 	bl	800e750 <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 800e478:	f001 fa62 	bl	800f940 <HW_IPCC_BLE_SendCmd>

  return 0;
 800e47c:	2300      	movs	r3, #0
}
 800e47e:	4618      	mov	r0, r3
 800e480:	3708      	adds	r7, #8
 800e482:	46bd      	mov	sp, r7
 800e484:	bd80      	pop	{r7, pc}
 800e486:	bf00      	nop
 800e488:	20030000 	.word	0x20030000

0800e48c <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 800e48c:	b580      	push	{r7, lr}
 800e48e:	b082      	sub	sp, #8
 800e490:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 800e492:	e01c      	b.n	800e4ce <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 800e494:	1d3b      	adds	r3, r7, #4
 800e496:	4619      	mov	r1, r3
 800e498:	4812      	ldr	r0, [pc, #72]	@ (800e4e4 <HW_IPCC_BLE_RxEvtNot+0x58>)
 800e49a:	f000 fa76 	bl	800e98a <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	7a5b      	ldrb	r3, [r3, #9]
 800e4a2:	2b0f      	cmp	r3, #15
 800e4a4:	d003      	beq.n	800e4ae <HW_IPCC_BLE_RxEvtNot+0x22>
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	7a5b      	ldrb	r3, [r3, #9]
 800e4aa:	2b0e      	cmp	r3, #14
 800e4ac:	d105      	bne.n	800e4ba <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 800e4ae:	687b      	ldr	r3, [r7, #4]
 800e4b0:	4619      	mov	r1, r3
 800e4b2:	2002      	movs	r0, #2
 800e4b4:	f000 f94c 	bl	800e750 <OutputDbgTrace>
 800e4b8:	e004      	b.n	800e4c4 <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	4619      	mov	r1, r3
 800e4be:	2003      	movs	r0, #3
 800e4c0:	f000 f946 	bl	800e750 <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 800e4c4:	4b08      	ldr	r3, [pc, #32]	@ (800e4e8 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 800e4c6:	681b      	ldr	r3, [r3, #0]
 800e4c8:	687a      	ldr	r2, [r7, #4]
 800e4ca:	4610      	mov	r0, r2
 800e4cc:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 800e4ce:	4805      	ldr	r0, [pc, #20]	@ (800e4e4 <HW_IPCC_BLE_RxEvtNot+0x58>)
 800e4d0:	f000 f9cc 	bl	800e86c <LST_is_empty>
 800e4d4:	4603      	mov	r3, r0
 800e4d6:	2b00      	cmp	r3, #0
 800e4d8:	d0dc      	beq.n	800e494 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 800e4da:	bf00      	nop
}
 800e4dc:	3708      	adds	r7, #8
 800e4de:	46bd      	mov	sp, r7
 800e4e0:	bd80      	pop	{r7, pc}
 800e4e2:	bf00      	nop
 800e4e4:	200300c8 	.word	0x200300c8
 800e4e8:	20001d2c 	.word	0x20001d2c

0800e4ec <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 800e4ec:	b580      	push	{r7, lr}
 800e4ee:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 800e4f0:	4b02      	ldr	r3, [pc, #8]	@ (800e4fc <HW_IPCC_BLE_AclDataAckNot+0x10>)
 800e4f2:	681b      	ldr	r3, [r3, #0]
 800e4f4:	4798      	blx	r3

  return;
 800e4f6:	bf00      	nop
}
 800e4f8:	bd80      	pop	{r7, pc}
 800e4fa:	bf00      	nop
 800e4fc:	20001d30 	.word	0x20001d30

0800e500 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 800e500:	b580      	push	{r7, lr}
 800e502:	b084      	sub	sp, #16
 800e504:	af00      	add	r7, sp, #0
 800e506:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 800e50c:	480d      	ldr	r0, [pc, #52]	@ (800e544 <TL_SYS_Init+0x44>)
 800e50e:	f000 f99d 	bl	800e84c <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 800e512:	4b0d      	ldr	r3, [pc, #52]	@ (800e548 <TL_SYS_Init+0x48>)
 800e514:	68db      	ldr	r3, [r3, #12]
 800e516:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800e518:	68fb      	ldr	r3, [r7, #12]
 800e51a:	689a      	ldr	r2, [r3, #8]
 800e51c:	68bb      	ldr	r3, [r7, #8]
 800e51e:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 800e520:	68bb      	ldr	r3, [r7, #8]
 800e522:	4a08      	ldr	r2, [pc, #32]	@ (800e544 <TL_SYS_Init+0x44>)
 800e524:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 800e526:	f001 fa2d 	bl	800f984 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 800e52a:	68fb      	ldr	r3, [r7, #12]
 800e52c:	681b      	ldr	r3, [r3, #0]
 800e52e:	4a07      	ldr	r2, [pc, #28]	@ (800e54c <TL_SYS_Init+0x4c>)
 800e530:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 800e532:	68fb      	ldr	r3, [r7, #12]
 800e534:	685b      	ldr	r3, [r3, #4]
 800e536:	4a06      	ldr	r2, [pc, #24]	@ (800e550 <TL_SYS_Init+0x50>)
 800e538:	6013      	str	r3, [r2, #0]

  return 0;
 800e53a:	2300      	movs	r3, #0
}
 800e53c:	4618      	mov	r0, r3
 800e53e:	3710      	adds	r7, #16
 800e540:	46bd      	mov	sp, r7
 800e542:	bd80      	pop	{r7, pc}
 800e544:	200300d0 	.word	0x200300d0
 800e548:	20030000 	.word	0x20030000
 800e54c:	20001d34 	.word	0x20001d34
 800e550:	20001d38 	.word	0x20001d38

0800e554 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 800e554:	b580      	push	{r7, lr}
 800e556:	b082      	sub	sp, #8
 800e558:	af00      	add	r7, sp, #0
 800e55a:	6078      	str	r0, [r7, #4]
 800e55c:	460b      	mov	r3, r1
 800e55e:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 800e560:	4b09      	ldr	r3, [pc, #36]	@ (800e588 <TL_SYS_SendCmd+0x34>)
 800e562:	68db      	ldr	r3, [r3, #12]
 800e564:	681b      	ldr	r3, [r3, #0]
 800e566:	2210      	movs	r2, #16
 800e568:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 800e56a:	4b07      	ldr	r3, [pc, #28]	@ (800e588 <TL_SYS_SendCmd+0x34>)
 800e56c:	68db      	ldr	r3, [r3, #12]
 800e56e:	681b      	ldr	r3, [r3, #0]
 800e570:	4619      	mov	r1, r3
 800e572:	2004      	movs	r0, #4
 800e574:	f000 f8ec 	bl	800e750 <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 800e578:	f001 fa0e 	bl	800f998 <HW_IPCC_SYS_SendCmd>

  return 0;
 800e57c:	2300      	movs	r3, #0
}
 800e57e:	4618      	mov	r0, r3
 800e580:	3708      	adds	r7, #8
 800e582:	46bd      	mov	sp, r7
 800e584:	bd80      	pop	{r7, pc}
 800e586:	bf00      	nop
 800e588:	20030000 	.word	0x20030000

0800e58c <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 800e58c:	b580      	push	{r7, lr}
 800e58e:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800e590:	4b07      	ldr	r3, [pc, #28]	@ (800e5b0 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800e592:	68db      	ldr	r3, [r3, #12]
 800e594:	681b      	ldr	r3, [r3, #0]
 800e596:	4619      	mov	r1, r3
 800e598:	2005      	movs	r0, #5
 800e59a:	f000 f8d9 	bl	800e750 <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800e59e:	4b05      	ldr	r3, [pc, #20]	@ (800e5b4 <HW_IPCC_SYS_CmdEvtNot+0x28>)
 800e5a0:	681b      	ldr	r3, [r3, #0]
 800e5a2:	4a03      	ldr	r2, [pc, #12]	@ (800e5b0 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800e5a4:	68d2      	ldr	r2, [r2, #12]
 800e5a6:	6812      	ldr	r2, [r2, #0]
 800e5a8:	4610      	mov	r0, r2
 800e5aa:	4798      	blx	r3

  return;
 800e5ac:	bf00      	nop
}
 800e5ae:	bd80      	pop	{r7, pc}
 800e5b0:	20030000 	.word	0x20030000
 800e5b4:	20001d34 	.word	0x20001d34

0800e5b8 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 800e5b8:	b580      	push	{r7, lr}
 800e5ba:	b082      	sub	sp, #8
 800e5bc:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800e5be:	e00e      	b.n	800e5de <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 800e5c0:	1d3b      	adds	r3, r7, #4
 800e5c2:	4619      	mov	r1, r3
 800e5c4:	480b      	ldr	r0, [pc, #44]	@ (800e5f4 <HW_IPCC_SYS_EvtNot+0x3c>)
 800e5c6:	f000 f9e0 	bl	800e98a <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	4619      	mov	r1, r3
 800e5ce:	2006      	movs	r0, #6
 800e5d0:	f000 f8be 	bl	800e750 <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 800e5d4:	4b08      	ldr	r3, [pc, #32]	@ (800e5f8 <HW_IPCC_SYS_EvtNot+0x40>)
 800e5d6:	681b      	ldr	r3, [r3, #0]
 800e5d8:	687a      	ldr	r2, [r7, #4]
 800e5da:	4610      	mov	r0, r2
 800e5dc:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800e5de:	4805      	ldr	r0, [pc, #20]	@ (800e5f4 <HW_IPCC_SYS_EvtNot+0x3c>)
 800e5e0:	f000 f944 	bl	800e86c <LST_is_empty>
 800e5e4:	4603      	mov	r3, r0
 800e5e6:	2b00      	cmp	r3, #0
 800e5e8:	d0ea      	beq.n	800e5c0 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 800e5ea:	bf00      	nop
}
 800e5ec:	3708      	adds	r7, #8
 800e5ee:	46bd      	mov	sp, r7
 800e5f0:	bd80      	pop	{r7, pc}
 800e5f2:	bf00      	nop
 800e5f4:	200300d0 	.word	0x200300d0
 800e5f8:	20001d38 	.word	0x20001d38

0800e5fc <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 800e5fc:	b580      	push	{r7, lr}
 800e5fe:	b082      	sub	sp, #8
 800e600:	af00      	add	r7, sp, #0
 800e602:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 800e604:	4817      	ldr	r0, [pc, #92]	@ (800e664 <TL_MM_Init+0x68>)
 800e606:	f000 f921 	bl	800e84c <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 800e60a:	4817      	ldr	r0, [pc, #92]	@ (800e668 <TL_MM_Init+0x6c>)
 800e60c:	f000 f91e 	bl	800e84c <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 800e610:	4b16      	ldr	r3, [pc, #88]	@ (800e66c <TL_MM_Init+0x70>)
 800e612:	691b      	ldr	r3, [r3, #16]
 800e614:	4a16      	ldr	r2, [pc, #88]	@ (800e670 <TL_MM_Init+0x74>)
 800e616:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 800e618:	4b15      	ldr	r3, [pc, #84]	@ (800e670 <TL_MM_Init+0x74>)
 800e61a:	681b      	ldr	r3, [r3, #0]
 800e61c:	687a      	ldr	r2, [r7, #4]
 800e61e:	6892      	ldr	r2, [r2, #8]
 800e620:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 800e622:	4b13      	ldr	r3, [pc, #76]	@ (800e670 <TL_MM_Init+0x74>)
 800e624:	681b      	ldr	r3, [r3, #0]
 800e626:	687a      	ldr	r2, [r7, #4]
 800e628:	68d2      	ldr	r2, [r2, #12]
 800e62a:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 800e62c:	4b10      	ldr	r3, [pc, #64]	@ (800e670 <TL_MM_Init+0x74>)
 800e62e:	681b      	ldr	r3, [r3, #0]
 800e630:	4a0c      	ldr	r2, [pc, #48]	@ (800e664 <TL_MM_Init+0x68>)
 800e632:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 800e634:	4b0e      	ldr	r3, [pc, #56]	@ (800e670 <TL_MM_Init+0x74>)
 800e636:	681b      	ldr	r3, [r3, #0]
 800e638:	687a      	ldr	r2, [r7, #4]
 800e63a:	6812      	ldr	r2, [r2, #0]
 800e63c:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 800e63e:	4b0c      	ldr	r3, [pc, #48]	@ (800e670 <TL_MM_Init+0x74>)
 800e640:	681b      	ldr	r3, [r3, #0]
 800e642:	687a      	ldr	r2, [r7, #4]
 800e644:	6852      	ldr	r2, [r2, #4]
 800e646:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 800e648:	4b09      	ldr	r3, [pc, #36]	@ (800e670 <TL_MM_Init+0x74>)
 800e64a:	681b      	ldr	r3, [r3, #0]
 800e64c:	687a      	ldr	r2, [r7, #4]
 800e64e:	6912      	ldr	r2, [r2, #16]
 800e650:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 800e652:	4b07      	ldr	r3, [pc, #28]	@ (800e670 <TL_MM_Init+0x74>)
 800e654:	681b      	ldr	r3, [r3, #0]
 800e656:	687a      	ldr	r2, [r7, #4]
 800e658:	6952      	ldr	r2, [r2, #20]
 800e65a:	619a      	str	r2, [r3, #24]

  return;
 800e65c:	bf00      	nop
}
 800e65e:	3708      	adds	r7, #8
 800e660:	46bd      	mov	sp, r7
 800e662:	bd80      	pop	{r7, pc}
 800e664:	200300b8 	.word	0x200300b8
 800e668:	20001d24 	.word	0x20001d24
 800e66c:	20030000 	.word	0x20030000
 800e670:	20001d3c 	.word	0x20001d3c

0800e674 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 800e674:	b580      	push	{r7, lr}
 800e676:	b082      	sub	sp, #8
 800e678:	af00      	add	r7, sp, #0
 800e67a:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 800e67c:	6879      	ldr	r1, [r7, #4]
 800e67e:	4807      	ldr	r0, [pc, #28]	@ (800e69c <TL_MM_EvtDone+0x28>)
 800e680:	f000 f93c 	bl	800e8fc <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 800e684:	6879      	ldr	r1, [r7, #4]
 800e686:	2000      	movs	r0, #0
 800e688:	f000 f862 	bl	800e750 <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 800e68c:	4804      	ldr	r0, [pc, #16]	@ (800e6a0 <TL_MM_EvtDone+0x2c>)
 800e68e:	f001 f9a9 	bl	800f9e4 <HW_IPCC_MM_SendFreeBuf>

  return;
 800e692:	bf00      	nop
}
 800e694:	3708      	adds	r7, #8
 800e696:	46bd      	mov	sp, r7
 800e698:	bd80      	pop	{r7, pc}
 800e69a:	bf00      	nop
 800e69c:	20001d24 	.word	0x20001d24
 800e6a0:	0800e6a5 	.word	0x0800e6a5

0800e6a4 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 800e6a4:	b580      	push	{r7, lr}
 800e6a6:	b082      	sub	sp, #8
 800e6a8:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800e6aa:	e00c      	b.n	800e6c6 <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 800e6ac:	1d3b      	adds	r3, r7, #4
 800e6ae:	4619      	mov	r1, r3
 800e6b0:	480a      	ldr	r0, [pc, #40]	@ (800e6dc <SendFreeBuf+0x38>)
 800e6b2:	f000 f96a 	bl	800e98a <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 800e6b6:	4b0a      	ldr	r3, [pc, #40]	@ (800e6e0 <SendFreeBuf+0x3c>)
 800e6b8:	691b      	ldr	r3, [r3, #16]
 800e6ba:	691b      	ldr	r3, [r3, #16]
 800e6bc:	687a      	ldr	r2, [r7, #4]
 800e6be:	4611      	mov	r1, r2
 800e6c0:	4618      	mov	r0, r3
 800e6c2:	f000 f91b 	bl	800e8fc <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800e6c6:	4805      	ldr	r0, [pc, #20]	@ (800e6dc <SendFreeBuf+0x38>)
 800e6c8:	f000 f8d0 	bl	800e86c <LST_is_empty>
 800e6cc:	4603      	mov	r3, r0
 800e6ce:	2b00      	cmp	r3, #0
 800e6d0:	d0ec      	beq.n	800e6ac <SendFreeBuf+0x8>
  }

  return;
 800e6d2:	bf00      	nop
}
 800e6d4:	3708      	adds	r7, #8
 800e6d6:	46bd      	mov	sp, r7
 800e6d8:	bd80      	pop	{r7, pc}
 800e6da:	bf00      	nop
 800e6dc:	20001d24 	.word	0x20001d24
 800e6e0:	20030000 	.word	0x20030000

0800e6e4 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 800e6e4:	b580      	push	{r7, lr}
 800e6e6:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 800e6e8:	4805      	ldr	r0, [pc, #20]	@ (800e700 <TL_TRACES_Init+0x1c>)
 800e6ea:	f000 f8af 	bl	800e84c <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 800e6ee:	4b05      	ldr	r3, [pc, #20]	@ (800e704 <TL_TRACES_Init+0x20>)
 800e6f0:	695b      	ldr	r3, [r3, #20]
 800e6f2:	4a03      	ldr	r2, [pc, #12]	@ (800e700 <TL_TRACES_Init+0x1c>)
 800e6f4:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 800e6f6:	f001 f9ab 	bl	800fa50 <HW_IPCC_TRACES_Init>

  return;
 800e6fa:	bf00      	nop
}
 800e6fc:	bd80      	pop	{r7, pc}
 800e6fe:	bf00      	nop
 800e700:	200300c0 	.word	0x200300c0
 800e704:	20030000 	.word	0x20030000

0800e708 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 800e708:	b580      	push	{r7, lr}
 800e70a:	b082      	sub	sp, #8
 800e70c:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800e70e:	e008      	b.n	800e722 <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 800e710:	1d3b      	adds	r3, r7, #4
 800e712:	4619      	mov	r1, r3
 800e714:	4808      	ldr	r0, [pc, #32]	@ (800e738 <HW_IPCC_TRACES_EvtNot+0x30>)
 800e716:	f000 f938 	bl	800e98a <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	4618      	mov	r0, r3
 800e71e:	f000 f80d 	bl	800e73c <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800e722:	4805      	ldr	r0, [pc, #20]	@ (800e738 <HW_IPCC_TRACES_EvtNot+0x30>)
 800e724:	f000 f8a2 	bl	800e86c <LST_is_empty>
 800e728:	4603      	mov	r3, r0
 800e72a:	2b00      	cmp	r3, #0
 800e72c:	d0f0      	beq.n	800e710 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 800e72e:	bf00      	nop
}
 800e730:	3708      	adds	r7, #8
 800e732:	46bd      	mov	sp, r7
 800e734:	bd80      	pop	{r7, pc}
 800e736:	bf00      	nop
 800e738:	200300c0 	.word	0x200300c0

0800e73c <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 800e73c:	b480      	push	{r7}
 800e73e:	b083      	sub	sp, #12
 800e740:	af00      	add	r7, sp, #0
 800e742:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 800e744:	bf00      	nop
 800e746:	370c      	adds	r7, #12
 800e748:	46bd      	mov	sp, r7
 800e74a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e74e:	4770      	bx	lr

0800e750 <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 800e750:	b480      	push	{r7}
 800e752:	b085      	sub	sp, #20
 800e754:	af00      	add	r7, sp, #0
 800e756:	4603      	mov	r3, r0
 800e758:	6039      	str	r1, [r7, #0]
 800e75a:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 800e75c:	79fb      	ldrb	r3, [r7, #7]
 800e75e:	2b06      	cmp	r3, #6
 800e760:	d845      	bhi.n	800e7ee <OutputDbgTrace+0x9e>
 800e762:	a201      	add	r2, pc, #4	@ (adr r2, 800e768 <OutputDbgTrace+0x18>)
 800e764:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e768:	0800e785 	.word	0x0800e785
 800e76c:	0800e7a9 	.word	0x0800e7a9
 800e770:	0800e7af 	.word	0x0800e7af
 800e774:	0800e7c3 	.word	0x0800e7c3
 800e778:	0800e7cf 	.word	0x0800e7cf
 800e77c:	0800e7d5 	.word	0x0800e7d5
 800e780:	0800e7e3 	.word	0x0800e7e3
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800e784:	683b      	ldr	r3, [r7, #0]
 800e786:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800e788:	68fb      	ldr	r3, [r7, #12]
 800e78a:	7a5b      	ldrb	r3, [r3, #9]
 800e78c:	2bff      	cmp	r3, #255	@ 0xff
 800e78e:	d005      	beq.n	800e79c <OutputDbgTrace+0x4c>
 800e790:	2bff      	cmp	r3, #255	@ 0xff
 800e792:	dc05      	bgt.n	800e7a0 <OutputDbgTrace+0x50>
 800e794:	2b0e      	cmp	r3, #14
 800e796:	d005      	beq.n	800e7a4 <OutputDbgTrace+0x54>
 800e798:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 800e79a:	e001      	b.n	800e7a0 <OutputDbgTrace+0x50>
          break;
 800e79c:	bf00      	nop
 800e79e:	e027      	b.n	800e7f0 <OutputDbgTrace+0xa0>
          break;
 800e7a0:	bf00      	nop
 800e7a2:	e025      	b.n	800e7f0 <OutputDbgTrace+0xa0>
          break;
 800e7a4:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 800e7a6:	e023      	b.n	800e7f0 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800e7a8:	683b      	ldr	r3, [r7, #0]
 800e7aa:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800e7ac:	e020      	b.n	800e7f0 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800e7ae:	683b      	ldr	r3, [r7, #0]
 800e7b0:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800e7b2:	68fb      	ldr	r3, [r7, #12]
 800e7b4:	7a5b      	ldrb	r3, [r3, #9]
 800e7b6:	2b0e      	cmp	r3, #14
 800e7b8:	d001      	beq.n	800e7be <OutputDbgTrace+0x6e>
 800e7ba:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800e7bc:	e000      	b.n	800e7c0 <OutputDbgTrace+0x70>
          break;
 800e7be:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800e7c0:	e016      	b.n	800e7f0 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800e7c2:	683b      	ldr	r3, [r7, #0]
 800e7c4:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800e7c6:	68fb      	ldr	r3, [r7, #12]
 800e7c8:	7a5b      	ldrb	r3, [r3, #9]
 800e7ca:	2bff      	cmp	r3, #255	@ 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800e7cc:	e010      	b.n	800e7f0 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800e7ce:	683b      	ldr	r3, [r7, #0]
 800e7d0:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800e7d2:	e00d      	b.n	800e7f0 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800e7d4:	683b      	ldr	r3, [r7, #0]
 800e7d6:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800e7d8:	68fb      	ldr	r3, [r7, #12]
 800e7da:	7a5b      	ldrb	r3, [r3, #9]
 800e7dc:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800e7de:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800e7e0:	e006      	b.n	800e7f0 <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800e7e2:	683b      	ldr	r3, [r7, #0]
 800e7e4:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800e7e6:	68fb      	ldr	r3, [r7, #12]
 800e7e8:	7a5b      	ldrb	r3, [r3, #9]
 800e7ea:	2bff      	cmp	r3, #255	@ 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800e7ec:	e000      	b.n	800e7f0 <OutputDbgTrace+0xa0>

    default:
      break;
 800e7ee:	bf00      	nop
  }

  return;
 800e7f0:	bf00      	nop
}
 800e7f2:	3714      	adds	r7, #20
 800e7f4:	46bd      	mov	sp, r7
 800e7f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7fa:	4770      	bx	lr

0800e7fc <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 800e7fc:	b480      	push	{r7}
 800e7fe:	b085      	sub	sp, #20
 800e800:	af00      	add	r7, sp, #0
 800e802:	4603      	mov	r3, r0
 800e804:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 800e806:	4b0f      	ldr	r3, [pc, #60]	@ (800e844 <OTP_Read+0x48>)
 800e808:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800e80a:	e002      	b.n	800e812 <OTP_Read+0x16>
  {
    p_id -= 8 ;
 800e80c:	68fb      	ldr	r3, [r7, #12]
 800e80e:	3b08      	subs	r3, #8
 800e810:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800e812:	68fb      	ldr	r3, [r7, #12]
 800e814:	3307      	adds	r3, #7
 800e816:	781b      	ldrb	r3, [r3, #0]
 800e818:	79fa      	ldrb	r2, [r7, #7]
 800e81a:	429a      	cmp	r2, r3
 800e81c:	d003      	beq.n	800e826 <OTP_Read+0x2a>
 800e81e:	68fb      	ldr	r3, [r7, #12]
 800e820:	4a09      	ldr	r2, [pc, #36]	@ (800e848 <OTP_Read+0x4c>)
 800e822:	4293      	cmp	r3, r2
 800e824:	d1f2      	bne.n	800e80c <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 800e826:	68fb      	ldr	r3, [r7, #12]
 800e828:	3307      	adds	r3, #7
 800e82a:	781b      	ldrb	r3, [r3, #0]
 800e82c:	79fa      	ldrb	r2, [r7, #7]
 800e82e:	429a      	cmp	r2, r3
 800e830:	d001      	beq.n	800e836 <OTP_Read+0x3a>
  {
    p_id = 0 ;
 800e832:	2300      	movs	r3, #0
 800e834:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 800e836:	68fb      	ldr	r3, [r7, #12]
}
 800e838:	4618      	mov	r0, r3
 800e83a:	3714      	adds	r7, #20
 800e83c:	46bd      	mov	sp, r7
 800e83e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e842:	4770      	bx	lr
 800e844:	1fff73f8 	.word	0x1fff73f8
 800e848:	1fff7000 	.word	0x1fff7000

0800e84c <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 800e84c:	b480      	push	{r7}
 800e84e:	b083      	sub	sp, #12
 800e850:	af00      	add	r7, sp, #0
 800e852:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	687a      	ldr	r2, [r7, #4]
 800e858:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 800e85a:	687b      	ldr	r3, [r7, #4]
 800e85c:	687a      	ldr	r2, [r7, #4]
 800e85e:	605a      	str	r2, [r3, #4]
}
 800e860:	bf00      	nop
 800e862:	370c      	adds	r7, #12
 800e864:	46bd      	mov	sp, r7
 800e866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e86a:	4770      	bx	lr

0800e86c <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 800e86c:	b480      	push	{r7}
 800e86e:	b087      	sub	sp, #28
 800e870:	af00      	add	r7, sp, #0
 800e872:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e874:	f3ef 8310 	mrs	r3, PRIMASK
 800e878:	60fb      	str	r3, [r7, #12]
  return(result);
 800e87a:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800e87c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800e87e:	b672      	cpsid	i
}
 800e880:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	681b      	ldr	r3, [r3, #0]
 800e886:	687a      	ldr	r2, [r7, #4]
 800e888:	429a      	cmp	r2, r3
 800e88a:	d102      	bne.n	800e892 <LST_is_empty+0x26>
  {
    return_value = TRUE;
 800e88c:	2301      	movs	r3, #1
 800e88e:	75fb      	strb	r3, [r7, #23]
 800e890:	e001      	b.n	800e896 <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 800e892:	2300      	movs	r3, #0
 800e894:	75fb      	strb	r3, [r7, #23]
 800e896:	693b      	ldr	r3, [r7, #16]
 800e898:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e89a:	68bb      	ldr	r3, [r7, #8]
 800e89c:	f383 8810 	msr	PRIMASK, r3
}
 800e8a0:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 800e8a2:	7dfb      	ldrb	r3, [r7, #23]
}
 800e8a4:	4618      	mov	r0, r3
 800e8a6:	371c      	adds	r7, #28
 800e8a8:	46bd      	mov	sp, r7
 800e8aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8ae:	4770      	bx	lr

0800e8b0 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 800e8b0:	b480      	push	{r7}
 800e8b2:	b087      	sub	sp, #28
 800e8b4:	af00      	add	r7, sp, #0
 800e8b6:	6078      	str	r0, [r7, #4]
 800e8b8:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e8ba:	f3ef 8310 	mrs	r3, PRIMASK
 800e8be:	60fb      	str	r3, [r7, #12]
  return(result);
 800e8c0:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800e8c2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800e8c4:	b672      	cpsid	i
}
 800e8c6:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 800e8c8:	687b      	ldr	r3, [r7, #4]
 800e8ca:	681a      	ldr	r2, [r3, #0]
 800e8cc:	683b      	ldr	r3, [r7, #0]
 800e8ce:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 800e8d0:	683b      	ldr	r3, [r7, #0]
 800e8d2:	687a      	ldr	r2, [r7, #4]
 800e8d4:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	683a      	ldr	r2, [r7, #0]
 800e8da:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 800e8dc:	683b      	ldr	r3, [r7, #0]
 800e8de:	681b      	ldr	r3, [r3, #0]
 800e8e0:	683a      	ldr	r2, [r7, #0]
 800e8e2:	605a      	str	r2, [r3, #4]
 800e8e4:	697b      	ldr	r3, [r7, #20]
 800e8e6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e8e8:	693b      	ldr	r3, [r7, #16]
 800e8ea:	f383 8810 	msr	PRIMASK, r3
}
 800e8ee:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800e8f0:	bf00      	nop
 800e8f2:	371c      	adds	r7, #28
 800e8f4:	46bd      	mov	sp, r7
 800e8f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8fa:	4770      	bx	lr

0800e8fc <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 800e8fc:	b480      	push	{r7}
 800e8fe:	b087      	sub	sp, #28
 800e900:	af00      	add	r7, sp, #0
 800e902:	6078      	str	r0, [r7, #4]
 800e904:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e906:	f3ef 8310 	mrs	r3, PRIMASK
 800e90a:	60fb      	str	r3, [r7, #12]
  return(result);
 800e90c:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800e90e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800e910:	b672      	cpsid	i
}
 800e912:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 800e914:	683b      	ldr	r3, [r7, #0]
 800e916:	687a      	ldr	r2, [r7, #4]
 800e918:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	685a      	ldr	r2, [r3, #4]
 800e91e:	683b      	ldr	r3, [r7, #0]
 800e920:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 800e922:	687b      	ldr	r3, [r7, #4]
 800e924:	683a      	ldr	r2, [r7, #0]
 800e926:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 800e928:	683b      	ldr	r3, [r7, #0]
 800e92a:	685b      	ldr	r3, [r3, #4]
 800e92c:	683a      	ldr	r2, [r7, #0]
 800e92e:	601a      	str	r2, [r3, #0]
 800e930:	697b      	ldr	r3, [r7, #20]
 800e932:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e934:	693b      	ldr	r3, [r7, #16]
 800e936:	f383 8810 	msr	PRIMASK, r3
}
 800e93a:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800e93c:	bf00      	nop
 800e93e:	371c      	adds	r7, #28
 800e940:	46bd      	mov	sp, r7
 800e942:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e946:	4770      	bx	lr

0800e948 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 800e948:	b480      	push	{r7}
 800e94a:	b087      	sub	sp, #28
 800e94c:	af00      	add	r7, sp, #0
 800e94e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e950:	f3ef 8310 	mrs	r3, PRIMASK
 800e954:	60fb      	str	r3, [r7, #12]
  return(result);
 800e956:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800e958:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800e95a:	b672      	cpsid	i
}
 800e95c:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	685b      	ldr	r3, [r3, #4]
 800e962:	687a      	ldr	r2, [r7, #4]
 800e964:	6812      	ldr	r2, [r2, #0]
 800e966:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	681b      	ldr	r3, [r3, #0]
 800e96c:	687a      	ldr	r2, [r7, #4]
 800e96e:	6852      	ldr	r2, [r2, #4]
 800e970:	605a      	str	r2, [r3, #4]
 800e972:	697b      	ldr	r3, [r7, #20]
 800e974:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e976:	693b      	ldr	r3, [r7, #16]
 800e978:	f383 8810 	msr	PRIMASK, r3
}
 800e97c:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800e97e:	bf00      	nop
 800e980:	371c      	adds	r7, #28
 800e982:	46bd      	mov	sp, r7
 800e984:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e988:	4770      	bx	lr

0800e98a <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 800e98a:	b580      	push	{r7, lr}
 800e98c:	b086      	sub	sp, #24
 800e98e:	af00      	add	r7, sp, #0
 800e990:	6078      	str	r0, [r7, #4]
 800e992:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e994:	f3ef 8310 	mrs	r3, PRIMASK
 800e998:	60fb      	str	r3, [r7, #12]
  return(result);
 800e99a:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800e99c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800e99e:	b672      	cpsid	i
}
 800e9a0:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	681a      	ldr	r2, [r3, #0]
 800e9a6:	683b      	ldr	r3, [r7, #0]
 800e9a8:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 800e9aa:	687b      	ldr	r3, [r7, #4]
 800e9ac:	681b      	ldr	r3, [r3, #0]
 800e9ae:	4618      	mov	r0, r3
 800e9b0:	f7ff ffca 	bl	800e948 <LST_remove_node>
 800e9b4:	697b      	ldr	r3, [r7, #20]
 800e9b6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e9b8:	693b      	ldr	r3, [r7, #16]
 800e9ba:	f383 8810 	msr	PRIMASK, r3
}
 800e9be:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800e9c0:	bf00      	nop
 800e9c2:	3718      	adds	r7, #24
 800e9c4:	46bd      	mov	sp, r7
 800e9c6:	bd80      	pop	{r7, pc}

0800e9c8 <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 800e9c8:	b480      	push	{r7}
 800e9ca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 800e9cc:	4b03      	ldr	r3, [pc, #12]	@ (800e9dc <LL_FLASH_GetUDN+0x14>)
 800e9ce:	681b      	ldr	r3, [r3, #0]
}
 800e9d0:	4618      	mov	r0, r3
 800e9d2:	46bd      	mov	sp, r7
 800e9d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9d8:	4770      	bx	lr
 800e9da:	bf00      	nop
 800e9dc:	1fff7580 	.word	0x1fff7580

0800e9e0 <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 for STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 800e9e0:	b480      	push	{r7}
 800e9e2:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 800e9e4:	4b03      	ldr	r3, [pc, #12]	@ (800e9f4 <LL_FLASH_GetDeviceID+0x14>)
 800e9e6:	681b      	ldr	r3, [r3, #0]
 800e9e8:	b2db      	uxtb	r3, r3
}
 800e9ea:	4618      	mov	r0, r3
 800e9ec:	46bd      	mov	sp, r7
 800e9ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9f2:	4770      	bx	lr
 800e9f4:	1fff7584 	.word	0x1fff7584

0800e9f8 <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 800e9f8:	b480      	push	{r7}
 800e9fa:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 800e9fc:	4b03      	ldr	r3, [pc, #12]	@ (800ea0c <LL_FLASH_GetSTCompanyID+0x14>)
 800e9fe:	681b      	ldr	r3, [r3, #0]
 800ea00:	0a1b      	lsrs	r3, r3, #8
}
 800ea02:	4618      	mov	r0, r3
 800ea04:	46bd      	mov	sp, r7
 800ea06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea0a:	4770      	bx	lr
 800ea0c:	1fff7584 	.word	0x1fff7584

0800ea10 <APP_BLE_Init>:

/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init(void)
{
 800ea10:	b5b0      	push	{r4, r5, r7, lr}
 800ea12:	b090      	sub	sp, #64	@ 0x40
 800ea14:	af00      	add	r7, sp, #0
  SHCI_CmdStatus_t status;
#if (RADIO_ACTIVITY_EVENT != 0)
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800ea16:	2392      	movs	r3, #146	@ 0x92
 800ea18:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#endif /* RADIO_ACTIVITY_EVENT != 0 */
  /* USER CODE BEGIN APP_BLE_Init_1 */

  UTIL_SEQ_RegTask( 1<<CFG_TASK_MY_TASK_BLE, UTIL_SEQ_RFU, myTask_BLE);
 800ea1c:	4a2e      	ldr	r2, [pc, #184]	@ (800ead8 <APP_BLE_Init+0xc8>)
 800ea1e:	2100      	movs	r1, #0
 800ea20:	2004      	movs	r0, #4
 800ea22:	f001 f969 	bl	800fcf8 <UTIL_SEQ_RegTask>
  UTIL_SEQ_SetTask(1 << CFG_TASK_MY_TASK_BLE, CFG_SCH_PRIO_0);
 800ea26:	2100      	movs	r1, #0
 800ea28:	2004      	movs	r0, #4
 800ea2a:	f001 f987 	bl	800fd3c <UTIL_SEQ_SetTask>

  UTIL_SEQ_RegTask( 1<<CFG_TASK_MY_TASK_IMU, UTIL_SEQ_RFU, myTask_IMU);
 800ea2e:	4a2b      	ldr	r2, [pc, #172]	@ (800eadc <APP_BLE_Init+0xcc>)
 800ea30:	2100      	movs	r1, #0
 800ea32:	2008      	movs	r0, #8
 800ea34:	f001 f960 	bl	800fcf8 <UTIL_SEQ_RegTask>
  UTIL_SEQ_SetTask(1 << CFG_TASK_MY_TASK_IMU, CFG_SCH_PRIO_0);
 800ea38:	2100      	movs	r1, #0
 800ea3a:	2008      	movs	r0, #8
 800ea3c:	f001 f97e 	bl	800fd3c <UTIL_SEQ_SetTask>

  /* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 800ea40:	4b27      	ldr	r3, [pc, #156]	@ (800eae0 <APP_BLE_Init+0xd0>)
 800ea42:	1d3c      	adds	r4, r7, #4
 800ea44:	461d      	mov	r5, r3
 800ea46:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ea48:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ea4a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ea4c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ea4e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ea50:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ea52:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800ea56:	c403      	stmia	r4!, {r0, r1}
 800ea58:	8022      	strh	r2, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init();
 800ea5a:	f000 f917 	bl	800ec8c <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 800ea5e:	2101      	movs	r1, #1
 800ea60:	2002      	movs	r0, #2
 800ea62:	f001 f81d 	bl	800faa0 <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 800ea66:	4a1f      	ldr	r2, [pc, #124]	@ (800eae4 <APP_BLE_Init+0xd4>)
 800ea68:	2100      	movs	r1, #0
 800ea6a:	2002      	movs	r0, #2
 800ea6c:	f001 f944 	bl	800fcf8 <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  status = SHCI_C2_BLE_Init(&ble_init_cmd_packet);
 800ea70:	1d3b      	adds	r3, r7, #4
 800ea72:	4618      	mov	r0, r3
 800ea74:	f7ff f8b4 	bl	800dbe0 <SHCI_C2_BLE_Init>
 800ea78:	4603      	mov	r3, r0
 800ea7a:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  if (status != SHCI_Success)
 800ea7e:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800ea82:	2b00      	cmp	r3, #0
 800ea84:	d001      	beq.n	800ea8a <APP_BLE_Init+0x7a>
  {
    APP_DBG_MSG("  Fail   : SHCI_C2_BLE_Init command, result: 0x%02x\n\r", status);
    /* if you are here, maybe CPU2 doesn't contain STM32WB_Copro_Wireless_Binaries, see Release_Notes.html */
    Error_Handler();
 800ea86:	f7f7 f82d 	bl	8005ae4 <Error_Handler>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 800ea8a:	f000 f915 	bl	800ecb8 <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 800ea8e:	f7ff f801 	bl	800da94 <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800ea92:	4b15      	ldr	r3, [pc, #84]	@ (800eae8 <APP_BLE_Init+0xd8>)
 800ea94:	2200      	movs	r2, #0
 800ea96:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 800ea9a:	4b13      	ldr	r3, [pc, #76]	@ (800eae8 <APP_BLE_Init+0xd8>)
 800ea9c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800eaa0:	82da      	strh	r2, [r3, #22]

  /**
   * From here, all initialization are BLE application specific
   */

  UTIL_SEQ_RegTask(1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 800eaa2:	4a12      	ldr	r2, [pc, #72]	@ (800eaec <APP_BLE_Init+0xdc>)
 800eaa4:	2100      	movs	r1, #0
 800eaa6:	2001      	movs	r0, #1
 800eaa8:	f001 f926 	bl	800fcf8 <UTIL_SEQ_RegTask>

  /**
   * Initialization of ADV - Ad Manufacturer Element - Support OTA Bit Mask
   */
#if (RADIO_ACTIVITY_EVENT != 0)
  ret = aci_hal_set_radio_activity_mask(0x0006);
 800eaac:	2006      	movs	r0, #6
 800eaae:	f7fe fe65 	bl	800d77c <aci_hal_set_radio_activity_mask>
 800eab2:	4603      	mov	r3, r0
 800eab4:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#endif /* L2CAP_REQUEST_NEW_CONN_PARAM != 0 */

  /**
   * Initialize Custom Template Application
   */
  Custom_APP_Init();
 800eab8:	f000 fbdc 	bl	800f274 <Custom_APP_Init>
  /* USER CODE END APP_BLE_Init_3 */

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 800eabc:	4b0a      	ldr	r3, [pc, #40]	@ (800eae8 <APP_BLE_Init+0xd8>)
 800eabe:	2200      	movs	r2, #0
 800eac0:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 800eac2:	4b09      	ldr	r3, [pc, #36]	@ (800eae8 <APP_BLE_Init+0xd8>)
 800eac4:	2200      	movs	r2, #0
 800eac6:	761a      	strb	r2, [r3, #24]

  /**
   * Start to Advertise to be connected by a Client
   */
  Adv_Request(APP_BLE_FAST_ADV);
 800eac8:	2001      	movs	r0, #1
 800eaca:	f000 f9a9 	bl	800ee20 <Adv_Request>

  /* USER CODE BEGIN APP_BLE_Init_2 */

  /* USER CODE END APP_BLE_Init_2 */

  return;
 800eace:	bf00      	nop
}
 800ead0:	3740      	adds	r7, #64	@ 0x40
 800ead2:	46bd      	mov	sp, r7
 800ead4:	bdb0      	pop	{r4, r5, r7, pc}
 800ead6:	bf00      	nop
 800ead8:	0800effd 	.word	0x0800effd
 800eadc:	0800efef 	.word	0x0800efef
 800eae0:	0801198c 	.word	0x0801198c
 800eae4:	0800ddfd 	.word	0x0800ddfd
 800eae8:	20001d48 	.word	0x20001d48
 800eaec:	0800ef09 	.word	0x0800ef09

0800eaf0 <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification(void *p_Pckt)
{
 800eaf0:	b580      	push	{r7, lr}
 800eaf2:	b08a      	sub	sp, #40	@ 0x28
 800eaf4:	af00      	add	r7, sp, #0
 800eaf6:	6078      	str	r0, [r7, #4]
  hci_event_pckt    *p_event_pckt;
  evt_le_meta_event *p_meta_evt;
  evt_blecore_aci   *p_blecore_evt;
  tBleStatus        ret = BLE_STATUS_INVALID_PARAMS;
 800eaf8:	2392      	movs	r3, #146	@ 0x92
 800eafa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  p_event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) p_Pckt)->data;
 800eafe:	687b      	ldr	r3, [r7, #4]
 800eb00:	3301      	adds	r3, #1
 800eb02:	623b      	str	r3, [r7, #32]

  switch (p_event_pckt->evt)
 800eb04:	6a3b      	ldr	r3, [r7, #32]
 800eb06:	781b      	ldrb	r3, [r3, #0]
 800eb08:	2bff      	cmp	r3, #255	@ 0xff
 800eb0a:	d053      	beq.n	800ebb4 <SVCCTL_App_Notification+0xc4>
 800eb0c:	2bff      	cmp	r3, #255	@ 0xff
 800eb0e:	f300 80af 	bgt.w	800ec70 <SVCCTL_App_Notification+0x180>
 800eb12:	2b05      	cmp	r3, #5
 800eb14:	d002      	beq.n	800eb1c <SVCCTL_App_Notification+0x2c>
 800eb16:	2b3e      	cmp	r3, #62	@ 0x3e
 800eb18:	d020      	beq.n	800eb5c <SVCCTL_App_Notification+0x6c>

    default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
      break;
 800eb1a:	e0a9      	b.n	800ec70 <SVCCTL_App_Notification+0x180>
      p_disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) p_event_pckt->data;
 800eb1c:	6a3b      	ldr	r3, [r7, #32]
 800eb1e:	3302      	adds	r3, #2
 800eb20:	60fb      	str	r3, [r7, #12]
      if (p_disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 800eb22:	68fb      	ldr	r3, [r7, #12]
 800eb24:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800eb28:	b29a      	uxth	r2, r3
 800eb2a:	4b55      	ldr	r3, [pc, #340]	@ (800ec80 <SVCCTL_App_Notification+0x190>)
 800eb2c:	8adb      	ldrh	r3, [r3, #22]
 800eb2e:	429a      	cmp	r2, r3
 800eb30:	d106      	bne.n	800eb40 <SVCCTL_App_Notification+0x50>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 800eb32:	4b53      	ldr	r3, [pc, #332]	@ (800ec80 <SVCCTL_App_Notification+0x190>)
 800eb34:	2200      	movs	r2, #0
 800eb36:	82da      	strh	r2, [r3, #22]
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800eb38:	4b51      	ldr	r3, [pc, #324]	@ (800ec80 <SVCCTL_App_Notification+0x190>)
 800eb3a:	2200      	movs	r2, #0
 800eb3c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
      Adv_Request(APP_BLE_FAST_ADV);
 800eb40:	2001      	movs	r0, #1
 800eb42:	f000 f96d 	bl	800ee20 <Adv_Request>
      HandleNotification.Custom_Evt_Opcode = CUSTOM_DISCON_HANDLE_EVT;
 800eb46:	4b4f      	ldr	r3, [pc, #316]	@ (800ec84 <SVCCTL_App_Notification+0x194>)
 800eb48:	2201      	movs	r2, #1
 800eb4a:	701a      	strb	r2, [r3, #0]
      HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 800eb4c:	4b4c      	ldr	r3, [pc, #304]	@ (800ec80 <SVCCTL_App_Notification+0x190>)
 800eb4e:	8ada      	ldrh	r2, [r3, #22]
 800eb50:	4b4c      	ldr	r3, [pc, #304]	@ (800ec84 <SVCCTL_App_Notification+0x194>)
 800eb52:	805a      	strh	r2, [r3, #2]
      Custom_APP_Notification(&HandleNotification);
 800eb54:	484b      	ldr	r0, [pc, #300]	@ (800ec84 <SVCCTL_App_Notification+0x194>)
 800eb56:	f000 fb79 	bl	800f24c <Custom_APP_Notification>
      break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 800eb5a:	e08c      	b.n	800ec76 <SVCCTL_App_Notification+0x186>
      p_meta_evt = (evt_le_meta_event*) p_event_pckt->data;
 800eb5c:	6a3b      	ldr	r3, [r7, #32]
 800eb5e:	3302      	adds	r3, #2
 800eb60:	617b      	str	r3, [r7, #20]
      switch (p_meta_evt->subevent)
 800eb62:	697b      	ldr	r3, [r7, #20]
 800eb64:	781b      	ldrb	r3, [r3, #0]
 800eb66:	2b01      	cmp	r3, #1
 800eb68:	d001      	beq.n	800eb6e <SVCCTL_App_Notification+0x7e>
 800eb6a:	2b03      	cmp	r3, #3
          break;
 800eb6c:	e021      	b.n	800ebb2 <SVCCTL_App_Notification+0xc2>
          p_connection_complete_event = (hci_le_connection_complete_event_rp0 *) p_meta_evt->data;
 800eb6e:	697b      	ldr	r3, [r7, #20]
 800eb70:	3301      	adds	r3, #1
 800eb72:	613b      	str	r3, [r7, #16]
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 800eb74:	4b42      	ldr	r3, [pc, #264]	@ (800ec80 <SVCCTL_App_Notification+0x190>)
 800eb76:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800eb7a:	2b04      	cmp	r3, #4
 800eb7c:	d104      	bne.n	800eb88 <SVCCTL_App_Notification+0x98>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 800eb7e:	4b40      	ldr	r3, [pc, #256]	@ (800ec80 <SVCCTL_App_Notification+0x190>)
 800eb80:	2206      	movs	r2, #6
 800eb82:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
 800eb86:	e003      	b.n	800eb90 <SVCCTL_App_Notification+0xa0>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 800eb88:	4b3d      	ldr	r3, [pc, #244]	@ (800ec80 <SVCCTL_App_Notification+0x190>)
 800eb8a:	2205      	movs	r2, #5
 800eb8c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = p_connection_complete_event->Connection_Handle;
 800eb90:	693b      	ldr	r3, [r7, #16]
 800eb92:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800eb96:	b29a      	uxth	r2, r3
 800eb98:	4b39      	ldr	r3, [pc, #228]	@ (800ec80 <SVCCTL_App_Notification+0x190>)
 800eb9a:	82da      	strh	r2, [r3, #22]
          HandleNotification.Custom_Evt_Opcode = CUSTOM_CONN_HANDLE_EVT;
 800eb9c:	4b39      	ldr	r3, [pc, #228]	@ (800ec84 <SVCCTL_App_Notification+0x194>)
 800eb9e:	2200      	movs	r2, #0
 800eba0:	701a      	strb	r2, [r3, #0]
          HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 800eba2:	4b37      	ldr	r3, [pc, #220]	@ (800ec80 <SVCCTL_App_Notification+0x190>)
 800eba4:	8ada      	ldrh	r2, [r3, #22]
 800eba6:	4b37      	ldr	r3, [pc, #220]	@ (800ec84 <SVCCTL_App_Notification+0x194>)
 800eba8:	805a      	strh	r2, [r3, #2]
          Custom_APP_Notification(&HandleNotification);
 800ebaa:	4836      	ldr	r0, [pc, #216]	@ (800ec84 <SVCCTL_App_Notification+0x194>)
 800ebac:	f000 fb4e 	bl	800f24c <Custom_APP_Notification>
          break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 800ebb0:	bf00      	nop
      break; /* HCI_LE_META_EVT_CODE */
 800ebb2:	e060      	b.n	800ec76 <SVCCTL_App_Notification+0x186>
      p_blecore_evt = (evt_blecore_aci*) p_event_pckt->data;
 800ebb4:	6a3b      	ldr	r3, [r7, #32]
 800ebb6:	3302      	adds	r3, #2
 800ebb8:	61fb      	str	r3, [r7, #28]
      switch (p_blecore_evt->ecode)
 800ebba:	69fb      	ldr	r3, [r7, #28]
 800ebbc:	881b      	ldrh	r3, [r3, #0]
 800ebbe:	b29b      	uxth	r3, r3
 800ebc0:	f640 420e 	movw	r2, #3086	@ 0xc0e
 800ebc4:	4293      	cmp	r3, r2
 800ebc6:	d047      	beq.n	800ec58 <SVCCTL_App_Notification+0x168>
 800ebc8:	f640 420e 	movw	r2, #3086	@ 0xc0e
 800ebcc:	4293      	cmp	r3, r2
 800ebce:	dc51      	bgt.n	800ec74 <SVCCTL_App_Notification+0x184>
 800ebd0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ebd4:	d046      	beq.n	800ec64 <SVCCTL_App_Notification+0x174>
 800ebd6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ebda:	dc4b      	bgt.n	800ec74 <SVCCTL_App_Notification+0x184>
 800ebdc:	2b04      	cmp	r3, #4
 800ebde:	d043      	beq.n	800ec68 <SVCCTL_App_Notification+0x178>
 800ebe0:	2b04      	cmp	r3, #4
 800ebe2:	db47      	blt.n	800ec74 <SVCCTL_App_Notification+0x184>
 800ebe4:	f240 420a 	movw	r2, #1034	@ 0x40a
 800ebe8:	4293      	cmp	r3, r2
 800ebea:	dc43      	bgt.n	800ec74 <SVCCTL_App_Notification+0x184>
 800ebec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ebf0:	dd40      	ble.n	800ec74 <SVCCTL_App_Notification+0x184>
 800ebf2:	f2a3 4301 	subw	r3, r3, #1025	@ 0x401
 800ebf6:	2b09      	cmp	r3, #9
 800ebf8:	d83c      	bhi.n	800ec74 <SVCCTL_App_Notification+0x184>
 800ebfa:	a201      	add	r2, pc, #4	@ (adr r2, 800ec00 <SVCCTL_App_Notification+0x110>)
 800ebfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec00:	0800ec51 	.word	0x0800ec51
 800ec04:	0800ec29 	.word	0x0800ec29
 800ec08:	0800ec75 	.word	0x0800ec75
 800ec0c:	0800ec75 	.word	0x0800ec75
 800ec10:	0800ec75 	.word	0x0800ec75
 800ec14:	0800ec75 	.word	0x0800ec75
 800ec18:	0800ec6d 	.word	0x0800ec6d
 800ec1c:	0800ec75 	.word	0x0800ec75
 800ec20:	0800ec3d 	.word	0x0800ec3d
 800ec24:	0800ec6d 	.word	0x0800ec6d
          ret = aci_gap_pass_key_resp(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, CFG_FIXED_PIN);
 800ec28:	4b15      	ldr	r3, [pc, #84]	@ (800ec80 <SVCCTL_App_Notification+0x190>)
 800ec2a:	8adb      	ldrh	r3, [r3, #22]
 800ec2c:	4916      	ldr	r1, [pc, #88]	@ (800ec88 <SVCCTL_App_Notification+0x198>)
 800ec2e:	4618      	mov	r0, r3
 800ec30:	f7fd ffa6 	bl	800cb80 <aci_gap_pass_key_resp>
 800ec34:	4603      	mov	r3, r0
 800ec36:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
          break;
 800ec3a:	e018      	b.n	800ec6e <SVCCTL_App_Notification+0x17e>
          ret = aci_gap_numeric_comparison_value_confirm_yesno(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, YES);
 800ec3c:	4b10      	ldr	r3, [pc, #64]	@ (800ec80 <SVCCTL_App_Notification+0x190>)
 800ec3e:	8adb      	ldrh	r3, [r3, #22]
 800ec40:	2101      	movs	r1, #1
 800ec42:	4618      	mov	r0, r3
 800ec44:	f7fe f946 	bl	800ced4 <aci_gap_numeric_comparison_value_confirm_yesno>
 800ec48:	4603      	mov	r3, r0
 800ec4a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
          break;
 800ec4e:	e00e      	b.n	800ec6e <SVCCTL_App_Notification+0x17e>
          p_pairing_complete = (aci_gap_pairing_complete_event_rp0*)p_blecore_evt->data;
 800ec50:	69fb      	ldr	r3, [r7, #28]
 800ec52:	3302      	adds	r3, #2
 800ec54:	61bb      	str	r3, [r7, #24]
          break;
 800ec56:	e00a      	b.n	800ec6e <SVCCTL_App_Notification+0x17e>
          aci_gatt_confirm_indication(BleApplicationContext.BleApplicationContext_legacy.connectionHandle);
 800ec58:	4b09      	ldr	r3, [pc, #36]	@ (800ec80 <SVCCTL_App_Notification+0x190>)
 800ec5a:	8adb      	ldrh	r3, [r3, #22]
 800ec5c:	4618      	mov	r0, r3
 800ec5e:	f7fe fc4c 	bl	800d4fa <aci_gatt_confirm_indication>
        break;
 800ec62:	e004      	b.n	800ec6e <SVCCTL_App_Notification+0x17e>
          break;
 800ec64:	bf00      	nop
 800ec66:	e005      	b.n	800ec74 <SVCCTL_App_Notification+0x184>
          break; /* ACI_HAL_END_OF_RADIO_ACTIVITY_VSEVT_CODE */
 800ec68:	bf00      	nop
 800ec6a:	e003      	b.n	800ec74 <SVCCTL_App_Notification+0x184>
          break; /* ACI_GAP_PROC_COMPLETE_VSEVT_CODE */
 800ec6c:	bf00      	nop
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800ec6e:	e001      	b.n	800ec74 <SVCCTL_App_Notification+0x184>
      break;
 800ec70:	bf00      	nop
 800ec72:	e000      	b.n	800ec76 <SVCCTL_App_Notification+0x186>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800ec74:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 800ec76:	2301      	movs	r3, #1
}
 800ec78:	4618      	mov	r0, r3
 800ec7a:	3728      	adds	r7, #40	@ 0x28
 800ec7c:	46bd      	mov	sp, r7
 800ec7e:	bd80      	pop	{r7, pc}
 800ec80:	20001d48 	.word	0x20001d48
 800ec84:	20001dcc 	.word	0x20001dcc
 800ec88:	0001b207 	.word	0x0001b207

0800ec8c <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init(void)
{
 800ec8c:	b580      	push	{r7, lr}
 800ec8e:	b082      	sub	sp, #8
 800ec90:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 800ec92:	4b06      	ldr	r3, [pc, #24]	@ (800ecac <Ble_Tl_Init+0x20>)
 800ec94:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 800ec96:	4b06      	ldr	r3, [pc, #24]	@ (800ecb0 <Ble_Tl_Init+0x24>)
 800ec98:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 800ec9a:	463b      	mov	r3, r7
 800ec9c:	4619      	mov	r1, r3
 800ec9e:	4805      	ldr	r0, [pc, #20]	@ (800ecb4 <Ble_Tl_Init+0x28>)
 800eca0:	f7ff f890 	bl	800ddc4 <hci_init>

  return;
 800eca4:	bf00      	nop
}
 800eca6:	3708      	adds	r7, #8
 800eca8:	46bd      	mov	sp, r7
 800ecaa:	bd80      	pop	{r7, pc}
 800ecac:	200300d8 	.word	0x200300d8
 800ecb0:	0800efb9 	.word	0x0800efb9
 800ecb4:	0800ef81 	.word	0x0800ef81

0800ecb8 <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void)
{
 800ecb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ecba:	b08d      	sub	sp, #52	@ 0x34
 800ecbc:	af06      	add	r7, sp, #24
  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *p_bd_addr;
  uint16_t a_appearance[1] = {BLE_CFG_GAP_APPEARANCE};
 800ecbe:	2300      	movs	r3, #0
 800ecc0:	803b      	strh	r3, [r7, #0]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800ecc2:	2392      	movs	r3, #146	@ 0x92
 800ecc4:	75fb      	strb	r3, [r7, #23]

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  ret = hci_reset();
 800ecc6:	f7fe fdad 	bl	800d824 <hci_reset>
 800ecca:	4603      	mov	r3, r0
 800eccc:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write the BD Address
   */
  p_bd_addr = BleGetBdAddress();
 800ecce:	f000 f8d7 	bl	800ee80 <BleGetBdAddress>
 800ecd2:	6138      	str	r0, [r7, #16]
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET, CONFIG_DATA_PUBADDR_LEN, (uint8_t*) p_bd_addr);
 800ecd4:	693a      	ldr	r2, [r7, #16]
 800ecd6:	2106      	movs	r1, #6
 800ecd8:	2000      	movs	r0, #0
 800ecda:	f7fe fc63 	bl	800d5a4 <aci_hal_write_config_data>
 800ecde:	4603      	mov	r3, r0
 800ece0:	75fb      	strb	r3, [r7, #23]
#endif /* CFG_BLE_ADDRESS_TYPE != GAP_PUBLIC_ADDR */

  /**
   * Write Identity root key used to derive IRK and DHK(Legacy)
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)a_BLE_CfgIrValue);
 800ece2:	4a4a      	ldr	r2, [pc, #296]	@ (800ee0c <Ble_Hci_Gap_Gatt_Init+0x154>)
 800ece4:	2110      	movs	r1, #16
 800ece6:	2018      	movs	r0, #24
 800ece8:	f7fe fc5c 	bl	800d5a4 <aci_hal_write_config_data>
 800ecec:	4603      	mov	r3, r0
 800ecee:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write Encryption root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)a_BLE_CfgErValue);
 800ecf0:	4a47      	ldr	r2, [pc, #284]	@ (800ee10 <Ble_Hci_Gap_Gatt_Init+0x158>)
 800ecf2:	2110      	movs	r1, #16
 800ecf4:	2008      	movs	r0, #8
 800ecf6:	f7fe fc55 	bl	800d5a4 <aci_hal_write_config_data>
 800ecfa:	4603      	mov	r3, r0
 800ecfc:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Set TX Power.
   */
  ret = aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 800ecfe:	2118      	movs	r1, #24
 800ed00:	2001      	movs	r0, #1
 800ed02:	f7fe fcd4 	bl	800d6ae <aci_hal_set_tx_power_level>
 800ed06:	4603      	mov	r3, r0
 800ed08:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GATT interface
   */
  ret = aci_gatt_init();
 800ed0a:	f7fe f94a 	bl	800cfa2 <aci_gatt_init>
 800ed0e:	4603      	mov	r3, r0
 800ed10:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GAP interface
   */
  role = 0;
 800ed12:	2300      	movs	r3, #0
 800ed14:	73fb      	strb	r3, [r7, #15]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 800ed16:	7bfb      	ldrb	r3, [r7, #15]
 800ed18:	f043 0301 	orr.w	r3, r3, #1
 800ed1c:	73fb      	strb	r3, [r7, #15]

/* USER CODE BEGIN Role_Mngt*/

/* USER CODE END Role_Mngt */

  if (role > 0)
 800ed1e:	7bfb      	ldrb	r3, [r7, #15]
 800ed20:	2b00      	cmp	r3, #0
 800ed22:	d01f      	beq.n	800ed64 <Ble_Hci_Gap_Gatt_Init+0xac>
  {
    const char *name = CFG_GAP_DEVICE_NAME;
 800ed24:	4b3b      	ldr	r3, [pc, #236]	@ (800ee14 <Ble_Hci_Gap_Gatt_Init+0x15c>)
 800ed26:	60bb      	str	r3, [r7, #8]
    ret = aci_gap_init(role,
 800ed28:	1dba      	adds	r2, r7, #6
 800ed2a:	7bf8      	ldrb	r0, [r7, #15]
 800ed2c:	1cbb      	adds	r3, r7, #2
 800ed2e:	9301      	str	r3, [sp, #4]
 800ed30:	1d3b      	adds	r3, r7, #4
 800ed32:	9300      	str	r3, [sp, #0]
 800ed34:	4613      	mov	r3, r2
 800ed36:	2208      	movs	r2, #8
 800ed38:	2100      	movs	r1, #0
 800ed3a:	f7fd ff88 	bl	800cc4e <aci_gap_init>
 800ed3e:	4603      	mov	r3, r0
 800ed40:	75fb      	strb	r3, [r7, #23]
    else
    {
      APP_DBG_MSG("  Success: aci_gap_init command\n");
    }

    ret = aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name);
 800ed42:	88fc      	ldrh	r4, [r7, #6]
 800ed44:	88bd      	ldrh	r5, [r7, #4]
 800ed46:	68b8      	ldr	r0, [r7, #8]
 800ed48:	f7f1 fa1a 	bl	8000180 <strlen>
 800ed4c:	4603      	mov	r3, r0
 800ed4e:	b2da      	uxtb	r2, r3
 800ed50:	68bb      	ldr	r3, [r7, #8]
 800ed52:	9300      	str	r3, [sp, #0]
 800ed54:	4613      	mov	r3, r2
 800ed56:	2200      	movs	r2, #0
 800ed58:	4629      	mov	r1, r5
 800ed5a:	4620      	mov	r0, r4
 800ed5c:	f7fe fb24 	bl	800d3a8 <aci_gatt_update_char_value>
 800ed60:	4603      	mov	r3, r0
 800ed62:	75fb      	strb	r3, [r7, #23]
    {
      BLE_DBG_SVCCTL_MSG("  Success: aci_gatt_update_char_value - Device Name\n");
    }
  }

  ret = aci_gatt_update_char_value(gap_service_handle,
 800ed64:	88f8      	ldrh	r0, [r7, #6]
 800ed66:	8879      	ldrh	r1, [r7, #2]
 800ed68:	463b      	mov	r3, r7
 800ed6a:	9300      	str	r3, [sp, #0]
 800ed6c:	2302      	movs	r3, #2
 800ed6e:	2200      	movs	r2, #0
 800ed70:	f7fe fb1a 	bl	800d3a8 <aci_gatt_update_char_value>
 800ed74:	4603      	mov	r3, r0
 800ed76:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize Default PHY
   */
  ret = hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 800ed78:	2202      	movs	r2, #2
 800ed7a:	2102      	movs	r1, #2
 800ed7c:	2000      	movs	r0, #0
 800ed7e:	f7fe fd75 	bl	800d86c <hci_le_set_default_phy>
 800ed82:	4603      	mov	r3, r0
 800ed84:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 800ed86:	4b24      	ldr	r3, [pc, #144]	@ (800ee18 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800ed88:	2201      	movs	r2, #1
 800ed8a:	701a      	strb	r2, [r3, #0]
  ret = aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 800ed8c:	4b22      	ldr	r3, [pc, #136]	@ (800ee18 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800ed8e:	781b      	ldrb	r3, [r3, #0]
 800ed90:	4618      	mov	r0, r3
 800ed92:	f7fd fddd 	bl	800c950 <aci_gap_set_io_capability>
 800ed96:	4603      	mov	r3, r0
 800ed98:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 800ed9a:	4b1f      	ldr	r3, [pc, #124]	@ (800ee18 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800ed9c:	2201      	movs	r2, #1
 800ed9e:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 800eda0:	4b1d      	ldr	r3, [pc, #116]	@ (800ee18 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800eda2:	2208      	movs	r2, #8
 800eda4:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 800eda6:	4b1c      	ldr	r3, [pc, #112]	@ (800ee18 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800eda8:	2210      	movs	r2, #16
 800edaa:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 800edac:	4b1a      	ldr	r3, [pc, #104]	@ (800ee18 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800edae:	2200      	movs	r2, #0
 800edb0:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 800edb2:	4b19      	ldr	r3, [pc, #100]	@ (800ee18 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800edb4:	4a19      	ldr	r2, [pc, #100]	@ (800ee1c <Ble_Hci_Gap_Gatt_Init+0x164>)
 800edb6:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 800edb8:	4b17      	ldr	r3, [pc, #92]	@ (800ee18 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800edba:	2200      	movs	r2, #0
 800edbc:	709a      	strb	r2, [r3, #2]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init_1*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init_1*/

  ret = aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 800edbe:	4b16      	ldr	r3, [pc, #88]	@ (800ee18 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800edc0:	789c      	ldrb	r4, [r3, #2]
 800edc2:	4b15      	ldr	r3, [pc, #84]	@ (800ee18 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800edc4:	785d      	ldrb	r5, [r3, #1]
 800edc6:	4b14      	ldr	r3, [pc, #80]	@ (800ee18 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800edc8:	791b      	ldrb	r3, [r3, #4]
 800edca:	4a13      	ldr	r2, [pc, #76]	@ (800ee18 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800edcc:	7952      	ldrb	r2, [r2, #5]
 800edce:	4912      	ldr	r1, [pc, #72]	@ (800ee18 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800edd0:	78c9      	ldrb	r1, [r1, #3]
 800edd2:	4811      	ldr	r0, [pc, #68]	@ (800ee18 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800edd4:	6880      	ldr	r0, [r0, #8]
 800edd6:	2600      	movs	r6, #0
 800edd8:	9604      	str	r6, [sp, #16]
 800edda:	9003      	str	r0, [sp, #12]
 800eddc:	9102      	str	r1, [sp, #8]
 800edde:	9201      	str	r2, [sp, #4]
 800ede0:	9300      	str	r3, [sp, #0]
 800ede2:	2300      	movs	r3, #0
 800ede4:	2201      	movs	r2, #1
 800ede6:	4629      	mov	r1, r5
 800ede8:	4620      	mov	r0, r4
 800edea:	f7fd fe05 	bl	800c9f8 <aci_gap_set_authentication_requirement>
 800edee:	4603      	mov	r3, r0
 800edf0:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize whitelist
   */
  if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 800edf2:	4b09      	ldr	r3, [pc, #36]	@ (800ee18 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800edf4:	789b      	ldrb	r3, [r3, #2]
 800edf6:	2b00      	cmp	r3, #0
 800edf8:	d003      	beq.n	800ee02 <Ble_Hci_Gap_Gatt_Init+0x14a>
  {
    ret = aci_gap_configure_whitelist();
 800edfa:	f7fe f847 	bl	800ce8c <aci_gap_configure_filter_accept_list>
 800edfe:	4603      	mov	r3, r0
 800ee00:	75fb      	strb	r3, [r7, #23]
    {
      APP_DBG_MSG("  Success: aci_gap_configure_whitelist command\n");
    }
  }
  APP_DBG_MSG("==>> End Ble_Hci_Gap_Gatt_Init function\n\r");
}
 800ee02:	bf00      	nop
 800ee04:	371c      	adds	r7, #28
 800ee06:	46bd      	mov	sp, r7
 800ee08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ee0a:	bf00      	nop
 800ee0c:	08011b8c 	.word	0x08011b8c
 800ee10:	08011b9c 	.word	0x08011b9c
 800ee14:	080119c8 	.word	0x080119c8
 800ee18:	20001d48 	.word	0x20001d48
 800ee1c:	0001b207 	.word	0x0001b207

0800ee20 <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t NewStatus)
{
 800ee20:	b580      	push	{r7, lr}
 800ee22:	b08c      	sub	sp, #48	@ 0x30
 800ee24:	af08      	add	r7, sp, #32
 800ee26:	4603      	mov	r3, r0
 800ee28:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800ee2a:	2392      	movs	r3, #146	@ 0x92
 800ee2c:	73fb      	strb	r3, [r7, #15]

  BleApplicationContext.Device_Connection_Status = NewStatus;
 800ee2e:	4a12      	ldr	r2, [pc, #72]	@ (800ee78 <Adv_Request+0x58>)
 800ee30:	79fb      	ldrb	r3, [r7, #7]
 800ee32:	f882 3080 	strb.w	r3, [r2, #128]	@ 0x80
  /* Start Fast or Low Power Advertising */
  ret = aci_gap_set_discoverable(ADV_TYPE,
 800ee36:	2300      	movs	r3, #0
 800ee38:	9306      	str	r3, [sp, #24]
 800ee3a:	2300      	movs	r3, #0
 800ee3c:	9305      	str	r3, [sp, #20]
 800ee3e:	2300      	movs	r3, #0
 800ee40:	9304      	str	r3, [sp, #16]
 800ee42:	2300      	movs	r3, #0
 800ee44:	9303      	str	r3, [sp, #12]
 800ee46:	2300      	movs	r3, #0
 800ee48:	9302      	str	r3, [sp, #8]
 800ee4a:	2300      	movs	r3, #0
 800ee4c:	9301      	str	r3, [sp, #4]
 800ee4e:	2300      	movs	r3, #0
 800ee50:	9300      	str	r3, [sp, #0]
 800ee52:	2300      	movs	r3, #0
 800ee54:	22a0      	movs	r2, #160	@ 0xa0
 800ee56:	2180      	movs	r1, #128	@ 0x80
 800ee58:	2000      	movs	r0, #0
 800ee5a:	f7fd fc7f 	bl	800c75c <aci_gap_set_discoverable>
 800ee5e:	4603      	mov	r3, r0
 800ee60:	73fb      	strb	r3, [r7, #15]
/* USER CODE BEGIN Adv_Request_1*/

/* USER CODE END Adv_Request_1*/

  /* Update Advertising data */
  ret = aci_gap_update_adv_data(sizeof(a_AdvData), (uint8_t*) a_AdvData);
 800ee62:	4906      	ldr	r1, [pc, #24]	@ (800ee7c <Adv_Request+0x5c>)
 800ee64:	200a      	movs	r0, #10
 800ee66:	f7fd ff9f 	bl	800cda8 <aci_gap_update_adv_data>
 800ee6a:	4603      	mov	r3, r0
 800ee6c:	73fb      	strb	r3, [r7, #15]
  else
  {
      APP_DBG_MSG("==>> Success: Start Fast Advertising \n\r");
  }

  return;
 800ee6e:	bf00      	nop
}
 800ee70:	3710      	adds	r7, #16
 800ee72:	46bd      	mov	sp, r7
 800ee74:	bd80      	pop	{r7, pc}
 800ee76:	bf00      	nop
 800ee78:	20001d48 	.word	0x20001d48
 800ee7c:	2000005c 	.word	0x2000005c

0800ee80 <BleGetBdAddress>:

const uint8_t* BleGetBdAddress(void)
{
 800ee80:	b580      	push	{r7, lr}
 800ee82:	b086      	sub	sp, #24
 800ee84:	af00      	add	r7, sp, #0
  const uint8_t *p_bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 800ee86:	f7ff fd9f 	bl	800e9c8 <LL_FLASH_GetUDN>
 800ee8a:	6138      	str	r0, [r7, #16]

  if (udn != 0xFFFFFFFF)
 800ee8c:	693b      	ldr	r3, [r7, #16]
 800ee8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ee92:	d023      	beq.n	800eedc <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 800ee94:	f7ff fdb0 	bl	800e9f8 <LL_FLASH_GetSTCompanyID>
 800ee98:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 800ee9a:	f7ff fda1 	bl	800e9e0 <LL_FLASH_GetDeviceID>
 800ee9e:	6078      	str	r0, [r7, #4]
     * bit[23:16] : Device ID.
     * bit[15:0] : The last 16bits from the UDN
     * Note: In order to use the Public Address in a final product, a dedicated
     * 24bits company ID (OUI) shall be bought.
     */
    a_BdAddrUdn[0] = (uint8_t)(udn & 0x000000FF);
 800eea0:	693b      	ldr	r3, [r7, #16]
 800eea2:	b2da      	uxtb	r2, r3
 800eea4:	4b16      	ldr	r3, [pc, #88]	@ (800ef00 <BleGetBdAddress+0x80>)
 800eea6:	701a      	strb	r2, [r3, #0]
    a_BdAddrUdn[1] = (uint8_t)((udn & 0x0000FF00) >> 8);
 800eea8:	693b      	ldr	r3, [r7, #16]
 800eeaa:	0a1b      	lsrs	r3, r3, #8
 800eeac:	b2da      	uxtb	r2, r3
 800eeae:	4b14      	ldr	r3, [pc, #80]	@ (800ef00 <BleGetBdAddress+0x80>)
 800eeb0:	705a      	strb	r2, [r3, #1]
    a_BdAddrUdn[2] = (uint8_t)device_id;
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	b2da      	uxtb	r2, r3
 800eeb6:	4b12      	ldr	r3, [pc, #72]	@ (800ef00 <BleGetBdAddress+0x80>)
 800eeb8:	709a      	strb	r2, [r3, #2]
    a_BdAddrUdn[3] = (uint8_t)(company_id & 0x000000FF);
 800eeba:	68bb      	ldr	r3, [r7, #8]
 800eebc:	b2da      	uxtb	r2, r3
 800eebe:	4b10      	ldr	r3, [pc, #64]	@ (800ef00 <BleGetBdAddress+0x80>)
 800eec0:	70da      	strb	r2, [r3, #3]
    a_BdAddrUdn[4] = (uint8_t)((company_id & 0x0000FF00) >> 8);
 800eec2:	68bb      	ldr	r3, [r7, #8]
 800eec4:	0a1b      	lsrs	r3, r3, #8
 800eec6:	b2da      	uxtb	r2, r3
 800eec8:	4b0d      	ldr	r3, [pc, #52]	@ (800ef00 <BleGetBdAddress+0x80>)
 800eeca:	711a      	strb	r2, [r3, #4]
    a_BdAddrUdn[5] = (uint8_t)((company_id & 0x00FF0000) >> 16);
 800eecc:	68bb      	ldr	r3, [r7, #8]
 800eece:	0c1b      	lsrs	r3, r3, #16
 800eed0:	b2da      	uxtb	r2, r3
 800eed2:	4b0b      	ldr	r3, [pc, #44]	@ (800ef00 <BleGetBdAddress+0x80>)
 800eed4:	715a      	strb	r2, [r3, #5]

    p_bd_addr = (const uint8_t *)a_BdAddrUdn;
 800eed6:	4b0a      	ldr	r3, [pc, #40]	@ (800ef00 <BleGetBdAddress+0x80>)
 800eed8:	617b      	str	r3, [r7, #20]
 800eeda:	e00b      	b.n	800eef4 <BleGetBdAddress+0x74>
  }
  else
  {
    p_otp_addr = OTP_Read(0);
 800eedc:	2000      	movs	r0, #0
 800eede:	f7ff fc8d 	bl	800e7fc <OTP_Read>
 800eee2:	60f8      	str	r0, [r7, #12]
    if (p_otp_addr)
 800eee4:	68fb      	ldr	r3, [r7, #12]
 800eee6:	2b00      	cmp	r3, #0
 800eee8:	d002      	beq.n	800eef0 <BleGetBdAddress+0x70>
    {
      p_bd_addr = ((OTP_ID0_t*)p_otp_addr)->bd_address;
 800eeea:	68fb      	ldr	r3, [r7, #12]
 800eeec:	617b      	str	r3, [r7, #20]
 800eeee:	e001      	b.n	800eef4 <BleGetBdAddress+0x74>
    }
    else
    {
      p_bd_addr = a_MBdAddr;
 800eef0:	4b04      	ldr	r3, [pc, #16]	@ (800ef04 <BleGetBdAddress+0x84>)
 800eef2:	617b      	str	r3, [r7, #20]
    }
  }

  return p_bd_addr;
 800eef4:	697b      	ldr	r3, [r7, #20]
}
 800eef6:	4618      	mov	r0, r3
 800eef8:	3718      	adds	r7, #24
 800eefa:	46bd      	mov	sp, r7
 800eefc:	bd80      	pop	{r7, pc}
 800eefe:	bf00      	nop
 800ef00:	20001d40 	.word	0x20001d40
 800ef04:	08011b84 	.word	0x08011b84

0800ef08 <Adv_Cancel>:
 *
 * SPECIFIC FUNCTIONS FOR CUSTOM
 *
 *************************************************************/
static void Adv_Cancel(void)
{
 800ef08:	b580      	push	{r7, lr}
 800ef0a:	b082      	sub	sp, #8
 800ef0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Adv_Cancel_1 */

  /* USER CODE END Adv_Cancel_1 */

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 800ef0e:	4b0a      	ldr	r3, [pc, #40]	@ (800ef38 <Adv_Cancel+0x30>)
 800ef10:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800ef14:	2b05      	cmp	r3, #5
 800ef16:	d00a      	beq.n	800ef2e <Adv_Cancel+0x26>
  {
    tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800ef18:	2392      	movs	r3, #146	@ 0x92
 800ef1a:	71fb      	strb	r3, [r7, #7]

    ret = aci_gap_set_non_discoverable();
 800ef1c:	f7fd fbfa 	bl	800c714 <aci_gap_set_non_discoverable>
 800ef20:	4603      	mov	r3, r0
 800ef22:	71fb      	strb	r3, [r7, #7]

    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800ef24:	4b04      	ldr	r3, [pc, #16]	@ (800ef38 <Adv_Cancel+0x30>)
 800ef26:	2200      	movs	r2, #0
 800ef28:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* USER CODE BEGIN Adv_Cancel_2 */

  /* USER CODE END Adv_Cancel_2 */

  return;
 800ef2c:	bf00      	nop
 800ef2e:	bf00      	nop
}
 800ef30:	3708      	adds	r7, #8
 800ef32:	46bd      	mov	sp, r7
 800ef34:	bd80      	pop	{r7, pc}
 800ef36:	bf00      	nop
 800ef38:	20001d48 	.word	0x20001d48

0800ef3c <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* p_Data)
{
 800ef3c:	b580      	push	{r7, lr}
 800ef3e:	b082      	sub	sp, #8
 800ef40:	af00      	add	r7, sp, #0
 800ef42:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 800ef44:	2100      	movs	r1, #0
 800ef46:	2002      	movs	r0, #2
 800ef48:	f000 fef8 	bl	800fd3c <UTIL_SEQ_SetTask>

  return;
 800ef4c:	bf00      	nop
}
 800ef4e:	3708      	adds	r7, #8
 800ef50:	46bd      	mov	sp, r7
 800ef52:	bd80      	pop	{r7, pc}

0800ef54 <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t Flag)
{
 800ef54:	b580      	push	{r7, lr}
 800ef56:	b082      	sub	sp, #8
 800ef58:	af00      	add	r7, sp, #0
 800ef5a:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800ef5c:	2001      	movs	r0, #1
 800ef5e:	f000 ff59 	bl	800fe14 <UTIL_SEQ_SetEvt>

  return;
 800ef62:	bf00      	nop
}
 800ef64:	3708      	adds	r7, #8
 800ef66:	46bd      	mov	sp, r7
 800ef68:	bd80      	pop	{r7, pc}

0800ef6a <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t Timeout)
{
 800ef6a:	b580      	push	{r7, lr}
 800ef6c:	b082      	sub	sp, #8
 800ef6e:	af00      	add	r7, sp, #0
 800ef70:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800ef72:	2001      	movs	r0, #1
 800ef74:	f000 ff6e 	bl	800fe54 <UTIL_SEQ_WaitEvt>

  return;
 800ef78:	bf00      	nop
}
 800ef7a:	3708      	adds	r7, #8
 800ef7c:	46bd      	mov	sp, r7
 800ef7e:	bd80      	pop	{r7, pc}

0800ef80 <BLE_UserEvtRx>:

static void BLE_UserEvtRx(void *p_Payload)
{
 800ef80:	b580      	push	{r7, lr}
 800ef82:	b084      	sub	sp, #16
 800ef84:	af00      	add	r7, sp, #0
 800ef86:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *p_param;

  p_param = (tHCI_UserEvtRxParam *)p_Payload;
 800ef88:	687b      	ldr	r3, [r7, #4]
 800ef8a:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(p_param->pckt->evtserial));
 800ef8c:	68fb      	ldr	r3, [r7, #12]
 800ef8e:	685b      	ldr	r3, [r3, #4]
 800ef90:	3308      	adds	r3, #8
 800ef92:	4618      	mov	r0, r3
 800ef94:	f7fe fdd0 	bl	800db38 <SVCCTL_UserEvtRx>
 800ef98:	4603      	mov	r3, r0
 800ef9a:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 800ef9c:	7afb      	ldrb	r3, [r7, #11]
 800ef9e:	2b00      	cmp	r3, #0
 800efa0:	d003      	beq.n	800efaa <BLE_UserEvtRx+0x2a>
  {
    p_param->status = HCI_TL_UserEventFlow_Enable;
 800efa2:	68fb      	ldr	r3, [r7, #12]
 800efa4:	2201      	movs	r2, #1
 800efa6:	701a      	strb	r2, [r3, #0]
  else
  {
    p_param->status = HCI_TL_UserEventFlow_Disable;
  }

  return;
 800efa8:	e003      	b.n	800efb2 <BLE_UserEvtRx+0x32>
    p_param->status = HCI_TL_UserEventFlow_Disable;
 800efaa:	68fb      	ldr	r3, [r7, #12]
 800efac:	2200      	movs	r2, #0
 800efae:	701a      	strb	r2, [r3, #0]
  return;
 800efb0:	bf00      	nop
}
 800efb2:	3710      	adds	r7, #16
 800efb4:	46bd      	mov	sp, r7
 800efb6:	bd80      	pop	{r7, pc}

0800efb8 <BLE_StatusNot>:

static void BLE_StatusNot(HCI_TL_CmdStatus_t Status)
{
 800efb8:	b580      	push	{r7, lr}
 800efba:	b084      	sub	sp, #16
 800efbc:	af00      	add	r7, sp, #0
 800efbe:	4603      	mov	r3, r0
 800efc0:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (Status)
 800efc2:	79fb      	ldrb	r3, [r7, #7]
 800efc4:	2b00      	cmp	r3, #0
 800efc6:	d002      	beq.n	800efce <BLE_StatusNot+0x16>
 800efc8:	2b01      	cmp	r3, #1
 800efca:	d006      	beq.n	800efda <BLE_StatusNot+0x22>

    default:
      /* USER CODE BEGIN Status */

      /* USER CODE END Status */
      break;
 800efcc:	e00b      	b.n	800efe6 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800efce:	230f      	movs	r3, #15
 800efd0:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 800efd2:	68f8      	ldr	r0, [r7, #12]
 800efd4:	f000 fede 	bl	800fd94 <UTIL_SEQ_PauseTask>
      break;
 800efd8:	e005      	b.n	800efe6 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800efda:	230f      	movs	r3, #15
 800efdc:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 800efde:	68f8      	ldr	r0, [r7, #12]
 800efe0:	f000 fef8 	bl	800fdd4 <UTIL_SEQ_ResumeTask>
      break;
 800efe4:	bf00      	nop
  }

  return;
 800efe6:	bf00      	nop
}
 800efe8:	3710      	adds	r7, #16
 800efea:	46bd      	mov	sp, r7
 800efec:	bd80      	pop	{r7, pc}

0800efee <myTask_IMU>:
/* mySVC */
static void Custom_Mycharnotify_Update_Char(void);
static void Custom_Mycharnotify_Send_Notification(void);

/* USER CODE BEGIN PFP */
void myTask_IMU(void) {
 800efee:	b480      	push	{r7}
 800eff0:	af00      	add	r7, sp, #0

	//nomal_power_code
//	LSM9DS1_ReadGyro();
//	LSM9DS1_ReadAccel();
//	LSM9DS1_ReadMag();
}
 800eff2:	bf00      	nop
 800eff4:	46bd      	mov	sp, r7
 800eff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800effa:	4770      	bx	lr

0800effc <myTask_BLE>:

void myTask_BLE(void) {
 800effc:	b580      	push	{r7, lr}
 800effe:	b086      	sub	sp, #24
 800f000:	af00      	add	r7, sp, #0

	int16_t accel_x_int = (int16_t) (accel_x * 1000);
 800f002:	4b78      	ldr	r3, [pc, #480]	@ (800f1e4 <myTask_BLE+0x1e8>)
 800f004:	edd3 7a00 	vldr	s15, [r3]
 800f008:	ed9f 7a77 	vldr	s14, [pc, #476]	@ 800f1e8 <myTask_BLE+0x1ec>
 800f00c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f010:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f014:	ee17 3a90 	vmov	r3, s15
 800f018:	82fb      	strh	r3, [r7, #22]
	int16_t accel_y_int = (int16_t) (accel_y * 1000);
 800f01a:	4b74      	ldr	r3, [pc, #464]	@ (800f1ec <myTask_BLE+0x1f0>)
 800f01c:	edd3 7a00 	vldr	s15, [r3]
 800f020:	ed9f 7a71 	vldr	s14, [pc, #452]	@ 800f1e8 <myTask_BLE+0x1ec>
 800f024:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f028:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f02c:	ee17 3a90 	vmov	r3, s15
 800f030:	82bb      	strh	r3, [r7, #20]
	int16_t accel_z_int = (int16_t) (accel_z * 1000);
 800f032:	4b6f      	ldr	r3, [pc, #444]	@ (800f1f0 <myTask_BLE+0x1f4>)
 800f034:	edd3 7a00 	vldr	s15, [r3]
 800f038:	ed9f 7a6b 	vldr	s14, [pc, #428]	@ 800f1e8 <myTask_BLE+0x1ec>
 800f03c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f040:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f044:	ee17 3a90 	vmov	r3, s15
 800f048:	827b      	strh	r3, [r7, #18]

	int16_t gyro_x_int = (int16_t) (gyro_x * 1000);
 800f04a:	4b6a      	ldr	r3, [pc, #424]	@ (800f1f4 <myTask_BLE+0x1f8>)
 800f04c:	edd3 7a00 	vldr	s15, [r3]
 800f050:	ed9f 7a65 	vldr	s14, [pc, #404]	@ 800f1e8 <myTask_BLE+0x1ec>
 800f054:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f058:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f05c:	ee17 3a90 	vmov	r3, s15
 800f060:	823b      	strh	r3, [r7, #16]
	int16_t gyro_y_int = (int16_t) (gyro_y * 1000);
 800f062:	4b65      	ldr	r3, [pc, #404]	@ (800f1f8 <myTask_BLE+0x1fc>)
 800f064:	edd3 7a00 	vldr	s15, [r3]
 800f068:	ed9f 7a5f 	vldr	s14, [pc, #380]	@ 800f1e8 <myTask_BLE+0x1ec>
 800f06c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f070:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f074:	ee17 3a90 	vmov	r3, s15
 800f078:	81fb      	strh	r3, [r7, #14]
	int16_t gyro_z_int = (int16_t) (gyro_z * 1000);
 800f07a:	4b60      	ldr	r3, [pc, #384]	@ (800f1fc <myTask_BLE+0x200>)
 800f07c:	edd3 7a00 	vldr	s15, [r3]
 800f080:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 800f1e8 <myTask_BLE+0x1ec>
 800f084:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f088:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f08c:	ee17 3a90 	vmov	r3, s15
 800f090:	81bb      	strh	r3, [r7, #12]

//	int16_t mag_x_int = (int16_t) (mag_x * 1000);
//	int16_t mag_y_int = (int16_t) (mag_y * 1000);
//	int16_t mag_z_int = (int16_t) (mag_z * 1000);

	int16_t q0_int = (int16_t) (q0 * 1000);
 800f092:	4b5b      	ldr	r3, [pc, #364]	@ (800f200 <myTask_BLE+0x204>)
 800f094:	edd3 7a00 	vldr	s15, [r3]
 800f098:	ed9f 7a53 	vldr	s14, [pc, #332]	@ 800f1e8 <myTask_BLE+0x1ec>
 800f09c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f0a0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f0a4:	ee17 3a90 	vmov	r3, s15
 800f0a8:	817b      	strh	r3, [r7, #10]
	int16_t q1_int = (int16_t) (q1 * 1000);
 800f0aa:	4b56      	ldr	r3, [pc, #344]	@ (800f204 <myTask_BLE+0x208>)
 800f0ac:	edd3 7a00 	vldr	s15, [r3]
 800f0b0:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 800f1e8 <myTask_BLE+0x1ec>
 800f0b4:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f0b8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f0bc:	ee17 3a90 	vmov	r3, s15
 800f0c0:	813b      	strh	r3, [r7, #8]
	int16_t q2_int = (int16_t) (q2 * 1000);
 800f0c2:	4b51      	ldr	r3, [pc, #324]	@ (800f208 <myTask_BLE+0x20c>)
 800f0c4:	edd3 7a00 	vldr	s15, [r3]
 800f0c8:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 800f1e8 <myTask_BLE+0x1ec>
 800f0cc:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f0d0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f0d4:	ee17 3a90 	vmov	r3, s15
 800f0d8:	80fb      	strh	r3, [r7, #6]
	int16_t q3_int = (int16_t) (q3 * 1000);
 800f0da:	4b4c      	ldr	r3, [pc, #304]	@ (800f20c <myTask_BLE+0x210>)
 800f0dc:	edd3 7a00 	vldr	s15, [r3]
 800f0e0:	ed9f 7a41 	vldr	s14, [pc, #260]	@ 800f1e8 <myTask_BLE+0x1ec>
 800f0e4:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f0e8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f0ec:	ee17 3a90 	vmov	r3, s15
 800f0f0:	80bb      	strh	r3, [r7, #4]

	UpdateCharData[0] = (uint8_t) (accel_x_int >> 8);
 800f0f2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800f0f6:	121b      	asrs	r3, r3, #8
 800f0f8:	b21b      	sxth	r3, r3
 800f0fa:	b2da      	uxtb	r2, r3
 800f0fc:	4b44      	ldr	r3, [pc, #272]	@ (800f210 <myTask_BLE+0x214>)
 800f0fe:	701a      	strb	r2, [r3, #0]
	UpdateCharData[1] = (uint8_t) (accel_x_int & 0xFF);
 800f100:	8afb      	ldrh	r3, [r7, #22]
 800f102:	b2da      	uxtb	r2, r3
 800f104:	4b42      	ldr	r3, [pc, #264]	@ (800f210 <myTask_BLE+0x214>)
 800f106:	705a      	strb	r2, [r3, #1]
	UpdateCharData[2] = (uint8_t) (accel_y_int >> 8);
 800f108:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800f10c:	121b      	asrs	r3, r3, #8
 800f10e:	b21b      	sxth	r3, r3
 800f110:	b2da      	uxtb	r2, r3
 800f112:	4b3f      	ldr	r3, [pc, #252]	@ (800f210 <myTask_BLE+0x214>)
 800f114:	709a      	strb	r2, [r3, #2]
	UpdateCharData[3] = (uint8_t) (accel_y_int & 0xFF);
 800f116:	8abb      	ldrh	r3, [r7, #20]
 800f118:	b2da      	uxtb	r2, r3
 800f11a:	4b3d      	ldr	r3, [pc, #244]	@ (800f210 <myTask_BLE+0x214>)
 800f11c:	70da      	strb	r2, [r3, #3]
	UpdateCharData[4] = (uint8_t) (accel_z_int >> 8);
 800f11e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f122:	121b      	asrs	r3, r3, #8
 800f124:	b21b      	sxth	r3, r3
 800f126:	b2da      	uxtb	r2, r3
 800f128:	4b39      	ldr	r3, [pc, #228]	@ (800f210 <myTask_BLE+0x214>)
 800f12a:	711a      	strb	r2, [r3, #4]
	UpdateCharData[5] = (uint8_t) (accel_z_int & 0xFF);
 800f12c:	8a7b      	ldrh	r3, [r7, #18]
 800f12e:	b2da      	uxtb	r2, r3
 800f130:	4b37      	ldr	r3, [pc, #220]	@ (800f210 <myTask_BLE+0x214>)
 800f132:	715a      	strb	r2, [r3, #5]

	UpdateCharData[6] = (uint8_t) (gyro_x_int >> 8);
 800f134:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800f138:	121b      	asrs	r3, r3, #8
 800f13a:	b21b      	sxth	r3, r3
 800f13c:	b2da      	uxtb	r2, r3
 800f13e:	4b34      	ldr	r3, [pc, #208]	@ (800f210 <myTask_BLE+0x214>)
 800f140:	719a      	strb	r2, [r3, #6]
	UpdateCharData[7] = (uint8_t) (gyro_x_int & 0xFF);
 800f142:	8a3b      	ldrh	r3, [r7, #16]
 800f144:	b2da      	uxtb	r2, r3
 800f146:	4b32      	ldr	r3, [pc, #200]	@ (800f210 <myTask_BLE+0x214>)
 800f148:	71da      	strb	r2, [r3, #7]
	UpdateCharData[8] = (uint8_t) (gyro_y_int >> 8);
 800f14a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800f14e:	121b      	asrs	r3, r3, #8
 800f150:	b21b      	sxth	r3, r3
 800f152:	b2da      	uxtb	r2, r3
 800f154:	4b2e      	ldr	r3, [pc, #184]	@ (800f210 <myTask_BLE+0x214>)
 800f156:	721a      	strb	r2, [r3, #8]

	UpdateCharData[9] = (uint8_t) (gyro_y_int & 0xFF);
 800f158:	89fb      	ldrh	r3, [r7, #14]
 800f15a:	b2da      	uxtb	r2, r3
 800f15c:	4b2c      	ldr	r3, [pc, #176]	@ (800f210 <myTask_BLE+0x214>)
 800f15e:	725a      	strb	r2, [r3, #9]
	UpdateCharData[10] = (uint8_t) (gyro_z_int >> 8);
 800f160:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800f164:	121b      	asrs	r3, r3, #8
 800f166:	b21b      	sxth	r3, r3
 800f168:	b2da      	uxtb	r2, r3
 800f16a:	4b29      	ldr	r3, [pc, #164]	@ (800f210 <myTask_BLE+0x214>)
 800f16c:	729a      	strb	r2, [r3, #10]
	UpdateCharData[11] = (uint8_t) (gyro_z_int & 0xFF);
 800f16e:	89bb      	ldrh	r3, [r7, #12]
 800f170:	b2da      	uxtb	r2, r3
 800f172:	4b27      	ldr	r3, [pc, #156]	@ (800f210 <myTask_BLE+0x214>)
 800f174:	72da      	strb	r2, [r3, #11]

	UpdateCharData[12] = (uint8_t) (q0_int >> 8);
 800f176:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800f17a:	121b      	asrs	r3, r3, #8
 800f17c:	b21b      	sxth	r3, r3
 800f17e:	b2da      	uxtb	r2, r3
 800f180:	4b23      	ldr	r3, [pc, #140]	@ (800f210 <myTask_BLE+0x214>)
 800f182:	731a      	strb	r2, [r3, #12]
	UpdateCharData[13] = (uint8_t) (q0_int & 0xFF);
 800f184:	897b      	ldrh	r3, [r7, #10]
 800f186:	b2da      	uxtb	r2, r3
 800f188:	4b21      	ldr	r3, [pc, #132]	@ (800f210 <myTask_BLE+0x214>)
 800f18a:	735a      	strb	r2, [r3, #13]
	UpdateCharData[14] = (uint8_t) (q1_int >> 8);
 800f18c:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800f190:	121b      	asrs	r3, r3, #8
 800f192:	b21b      	sxth	r3, r3
 800f194:	b2da      	uxtb	r2, r3
 800f196:	4b1e      	ldr	r3, [pc, #120]	@ (800f210 <myTask_BLE+0x214>)
 800f198:	739a      	strb	r2, [r3, #14]
	UpdateCharData[15] = (uint8_t) (q1_int & 0xFF);
 800f19a:	893b      	ldrh	r3, [r7, #8]
 800f19c:	b2da      	uxtb	r2, r3
 800f19e:	4b1c      	ldr	r3, [pc, #112]	@ (800f210 <myTask_BLE+0x214>)
 800f1a0:	73da      	strb	r2, [r3, #15]
	UpdateCharData[16] = (uint8_t) (q2_int >> 8);
 800f1a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800f1a6:	121b      	asrs	r3, r3, #8
 800f1a8:	b21b      	sxth	r3, r3
 800f1aa:	b2da      	uxtb	r2, r3
 800f1ac:	4b18      	ldr	r3, [pc, #96]	@ (800f210 <myTask_BLE+0x214>)
 800f1ae:	741a      	strb	r2, [r3, #16]
	UpdateCharData[17] = (uint8_t) (q2_int & 0xFF);
 800f1b0:	88fb      	ldrh	r3, [r7, #6]
 800f1b2:	b2da      	uxtb	r2, r3
 800f1b4:	4b16      	ldr	r3, [pc, #88]	@ (800f210 <myTask_BLE+0x214>)
 800f1b6:	745a      	strb	r2, [r3, #17]
	UpdateCharData[18] = (uint8_t) (q3_int >> 8);
 800f1b8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800f1bc:	121b      	asrs	r3, r3, #8
 800f1be:	b21b      	sxth	r3, r3
 800f1c0:	b2da      	uxtb	r2, r3
 800f1c2:	4b13      	ldr	r3, [pc, #76]	@ (800f210 <myTask_BLE+0x214>)
 800f1c4:	749a      	strb	r2, [r3, #18]
	UpdateCharData[19] = (uint8_t) (q3_int & 0xFF);
 800f1c6:	88bb      	ldrh	r3, [r7, #4]
 800f1c8:	b2da      	uxtb	r2, r3
 800f1ca:	4b11      	ldr	r3, [pc, #68]	@ (800f210 <myTask_BLE+0x214>)
 800f1cc:	74da      	strb	r2, [r3, #19]

	Custom_Mycharnotify_Update_Char();
 800f1ce:	f000 f859 	bl	800f284 <Custom_Mycharnotify_Update_Char>

	UTIL_SEQ_SetTask(1 << CFG_TASK_MY_TASK_IMU, CFG_SCH_PRIO_0);
 800f1d2:	2100      	movs	r1, #0
 800f1d4:	2008      	movs	r0, #8
 800f1d6:	f000 fdb1 	bl	800fd3c <UTIL_SEQ_SetTask>
//	UTIL_SEQ_SetTask(1 << CFG_TASK_MY_TASK_BLE, CFG_SCH_PRIO_0);
}
 800f1da:	bf00      	nop
 800f1dc:	3718      	adds	r7, #24
 800f1de:	46bd      	mov	sp, r7
 800f1e0:	bd80      	pop	{r7, pc}
 800f1e2:	bf00      	nop
 800f1e4:	20000378 	.word	0x20000378
 800f1e8:	447a0000 	.word	0x447a0000
 800f1ec:	2000037c 	.word	0x2000037c
 800f1f0:	20000380 	.word	0x20000380
 800f1f4:	20000384 	.word	0x20000384
 800f1f8:	20000388 	.word	0x20000388
 800f1fc:	2000038c 	.word	0x2000038c
 800f200:	20000008 	.word	0x20000008
 800f204:	20000478 	.word	0x20000478
 800f208:	2000047c 	.word	0x2000047c
 800f20c:	20000480 	.word	0x20000480
 800f210:	20001dd0 	.word	0x20001dd0

0800f214 <Custom_STM_App_Notification>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void Custom_STM_App_Notification(Custom_STM_App_Notification_evt_t *pNotification)
{
 800f214:	b480      	push	{r7}
 800f216:	b083      	sub	sp, #12
 800f218:	af00      	add	r7, sp, #0
 800f21a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_1 */

  /* USER CODE END CUSTOM_STM_App_Notification_1 */
  switch (pNotification->Custom_Evt_Opcode)
 800f21c:	687b      	ldr	r3, [r7, #4]
 800f21e:	781b      	ldrb	r3, [r3, #0]
 800f220:	2b03      	cmp	r3, #3
 800f222:	d80b      	bhi.n	800f23c <Custom_STM_App_Notification+0x28>
 800f224:	a201      	add	r2, pc, #4	@ (adr r2, 800f22c <Custom_STM_App_Notification+0x18>)
 800f226:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f22a:	bf00      	nop
 800f22c:	0800f23d 	.word	0x0800f23d
 800f230:	0800f23d 	.word	0x0800f23d
 800f234:	0800f23d 	.word	0x0800f23d
 800f238:	0800f23d 	.word	0x0800f23d

    default:
      /* USER CODE BEGIN CUSTOM_STM_App_Notification_default */

      /* USER CODE END CUSTOM_STM_App_Notification_default */
      break;
 800f23c:	bf00      	nop
  }
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_2 */

  /* USER CODE END CUSTOM_STM_App_Notification_2 */
  return;
 800f23e:	bf00      	nop
}
 800f240:	370c      	adds	r7, #12
 800f242:	46bd      	mov	sp, r7
 800f244:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f248:	4770      	bx	lr
 800f24a:	bf00      	nop

0800f24c <Custom_APP_Notification>:

void Custom_APP_Notification(Custom_App_ConnHandle_Not_evt_t *pNotification)
{
 800f24c:	b480      	push	{r7}
 800f24e:	b083      	sub	sp, #12
 800f250:	af00      	add	r7, sp, #0
 800f252:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_APP_Notification_1 */

  /* USER CODE END CUSTOM_APP_Notification_1 */

  switch (pNotification->Custom_Evt_Opcode)
 800f254:	687b      	ldr	r3, [r7, #4]
 800f256:	781b      	ldrb	r3, [r3, #0]
 800f258:	2b00      	cmp	r3, #0
 800f25a:	d002      	beq.n	800f262 <Custom_APP_Notification+0x16>
 800f25c:	2b01      	cmp	r3, #1
 800f25e:	d002      	beq.n	800f266 <Custom_APP_Notification+0x1a>

    default:
      /* USER CODE BEGIN CUSTOM_APP_Notification_default */

      /* USER CODE END CUSTOM_APP_Notification_default */
      break;
 800f260:	e002      	b.n	800f268 <Custom_APP_Notification+0x1c>
      break;
 800f262:	bf00      	nop
 800f264:	e000      	b.n	800f268 <Custom_APP_Notification+0x1c>
      break;
 800f266:	bf00      	nop

  /* USER CODE BEGIN CUSTOM_APP_Notification_2 */

  /* USER CODE END CUSTOM_APP_Notification_2 */

  return;
 800f268:	bf00      	nop
}
 800f26a:	370c      	adds	r7, #12
 800f26c:	46bd      	mov	sp, r7
 800f26e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f272:	4770      	bx	lr

0800f274 <Custom_APP_Init>:

void Custom_APP_Init(void)
{
 800f274:	b480      	push	{r7}
 800f276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CUSTOM_APP_Init */

  /* USER CODE END CUSTOM_APP_Init */
  return;
 800f278:	bf00      	nop
}
 800f27a:	46bd      	mov	sp, r7
 800f27c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f280:	4770      	bx	lr
	...

0800f284 <Custom_Mycharnotify_Update_Char>:
 *
 *************************************************************/

/* mySVC */
__USED void Custom_Mycharnotify_Update_Char(void) /* Property Read */
{
 800f284:	b580      	push	{r7, lr}
 800f286:	b082      	sub	sp, #8
 800f288:	af00      	add	r7, sp, #0
  uint8_t updateflag = 0;
 800f28a:	2300      	movs	r3, #0
 800f28c:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN Mycharnotify_UC_1*/
	updateflag = 1;
 800f28e:	2301      	movs	r3, #1
 800f290:	71fb      	strb	r3, [r7, #7]
  /* USER CODE END Mycharnotify_UC_1*/

  if (updateflag != 0)
 800f292:	79fb      	ldrb	r3, [r7, #7]
 800f294:	2b00      	cmp	r3, #0
 800f296:	d004      	beq.n	800f2a2 <Custom_Mycharnotify_Update_Char+0x1e>
  {
    Custom_STM_App_Update_Char(CUSTOM_STM_MYCHARNOTIFY, (uint8_t *)UpdateCharData);
 800f298:	4904      	ldr	r1, [pc, #16]	@ (800f2ac <Custom_Mycharnotify_Update_Char+0x28>)
 800f29a:	2001      	movs	r0, #1
 800f29c:	f000 f960 	bl	800f560 <Custom_STM_App_Update_Char>
  }

  /* USER CODE BEGIN Mycharnotify_UC_Last*/

  /* USER CODE END Mycharnotify_UC_Last*/
  return;
 800f2a0:	bf00      	nop
 800f2a2:	bf00      	nop
}
 800f2a4:	3708      	adds	r7, #8
 800f2a6:	46bd      	mov	sp, r7
 800f2a8:	bd80      	pop	{r7, pc}
 800f2aa:	bf00      	nop
 800f2ac:	20001dd0 	.word	0x20001dd0

0800f2b0 <Custom_STM_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t Custom_STM_Event_Handler(void *Event)
{
 800f2b0:	b580      	push	{r7, lr}
 800f2b2:	b08c      	sub	sp, #48	@ 0x30
 800f2b4:	af00      	add	r7, sp, #0
 800f2b6:	6078      	str	r0, [r7, #4]
  Custom_STM_App_Notification_evt_t     Notification;
  /* USER CODE BEGIN Custom_STM_Event_Handler_1 */

  /* USER CODE END Custom_STM_Event_Handler_1 */

  return_value = SVCCTL_EvtNotAck;
 800f2b8:	2300      	movs	r3, #0
 800f2ba:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 800f2be:	687b      	ldr	r3, [r7, #4]
 800f2c0:	3301      	adds	r3, #1
 800f2c2:	62bb      	str	r3, [r7, #40]	@ 0x28

  switch (event_pckt->evt)
 800f2c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f2c6:	781b      	ldrb	r3, [r3, #0]
 800f2c8:	2bff      	cmp	r3, #255	@ 0xff
 800f2ca:	f040 808e 	bne.w	800f3ea <Custom_STM_Event_Handler+0x13a>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
      blecore_evt = (evt_blecore_aci*)event_pckt->data;
 800f2ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f2d0:	3302      	adds	r3, #2
 800f2d2:	627b      	str	r3, [r7, #36]	@ 0x24
      switch (blecore_evt->ecode)
 800f2d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f2d6:	881b      	ldrh	r3, [r3, #0]
 800f2d8:	b29b      	uxth	r3, r3
 800f2da:	f6a3 4301 	subw	r3, r3, #3073	@ 0xc01
 800f2de:	2b1a      	cmp	r3, #26
 800f2e0:	d87f      	bhi.n	800f3e2 <Custom_STM_Event_Handler+0x132>
 800f2e2:	a201      	add	r2, pc, #4	@ (adr r2, 800f2e8 <Custom_STM_Event_Handler+0x38>)
 800f2e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f2e8:	0800f355 	.word	0x0800f355
 800f2ec:	0800f3e3 	.word	0x0800f3e3
 800f2f0:	0800f3e3 	.word	0x0800f3e3
 800f2f4:	0800f3e3 	.word	0x0800f3e3
 800f2f8:	0800f3e3 	.word	0x0800f3e3
 800f2fc:	0800f3e3 	.word	0x0800f3e3
 800f300:	0800f3e3 	.word	0x0800f3e3
 800f304:	0800f3e3 	.word	0x0800f3e3
 800f308:	0800f3e3 	.word	0x0800f3e3
 800f30c:	0800f3e3 	.word	0x0800f3e3
 800f310:	0800f3e3 	.word	0x0800f3e3
 800f314:	0800f3e3 	.word	0x0800f3e3
 800f318:	0800f3e3 	.word	0x0800f3e3
 800f31c:	0800f3e3 	.word	0x0800f3e3
 800f320:	0800f3e3 	.word	0x0800f3e3
 800f324:	0800f3e3 	.word	0x0800f3e3
 800f328:	0800f3e3 	.word	0x0800f3e3
 800f32c:	0800f3e3 	.word	0x0800f3e3
 800f330:	0800f3e3 	.word	0x0800f3e3
 800f334:	0800f3e3 	.word	0x0800f3e3
 800f338:	0800f3e3 	.word	0x0800f3e3
 800f33c:	0800f3e3 	.word	0x0800f3e3
 800f340:	0800f3e3 	.word	0x0800f3e3
 800f344:	0800f3e3 	.word	0x0800f3e3
 800f348:	0800f3e3 	.word	0x0800f3e3
 800f34c:	0800f3e3 	.word	0x0800f3e3
 800f350:	0800f3c5 	.word	0x0800f3c5
      {
        case ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE:
          /* USER CODE BEGIN EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_BEGIN */

          /* USER CODE END EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_BEGIN */
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blecore_evt->data;
 800f354:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f356:	3302      	adds	r3, #2
 800f358:	61fb      	str	r3, [r7, #28]
          if (attribute_modified->Attr_Handle == (CustomContext.CustomMycharnotifyHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))
 800f35a:	69fb      	ldr	r3, [r7, #28]
 800f35c:	885b      	ldrh	r3, [r3, #2]
 800f35e:	b29b      	uxth	r3, r3
 800f360:	461a      	mov	r2, r3
 800f362:	4b25      	ldr	r3, [pc, #148]	@ (800f3f8 <Custom_STM_Event_Handler+0x148>)
 800f364:	889b      	ldrh	r3, [r3, #4]
 800f366:	3302      	adds	r3, #2
 800f368:	429a      	cmp	r2, r3
 800f36a:	d119      	bne.n	800f3a0 <Custom_STM_Event_Handler+0xf0>
          {
            return_value = SVCCTL_EvtAckFlowEnable;
 800f36c:	2301      	movs	r3, #1
 800f36e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            /* USER CODE BEGIN CUSTOM_STM_Service_1_Char_2 */
            /* USER CODE END CUSTOM_STM_Service_1_Char_2 */
            switch (attribute_modified->Attr_Data[0])
 800f372:	69fb      	ldr	r3, [r7, #28]
 800f374:	7a1b      	ldrb	r3, [r3, #8]
 800f376:	2b00      	cmp	r3, #0
 800f378:	d002      	beq.n	800f380 <Custom_STM_Event_Handler+0xd0>
 800f37a:	2b01      	cmp	r3, #1
 800f37c:	d008      	beq.n	800f390 <Custom_STM_Event_Handler+0xe0>

              default:
                /* USER CODE BEGIN CUSTOM_STM_Service_1_Char_2_default */

                /* USER CODE END CUSTOM_STM_Service_1_Char_2_default */
              break;
 800f37e:	e020      	b.n	800f3c2 <Custom_STM_Event_Handler+0x112>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_MYCHARNOTIFY_NOTIFY_DISABLED_EVT;
 800f380:	2302      	movs	r3, #2
 800f382:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 800f384:	f107 0308 	add.w	r3, r7, #8
 800f388:	4618      	mov	r0, r3
 800f38a:	f7ff ff43 	bl	800f214 <Custom_STM_App_Notification>
                break;
 800f38e:	e018      	b.n	800f3c2 <Custom_STM_Event_Handler+0x112>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_MYCHARNOTIFY_NOTIFY_ENABLED_EVT;
 800f390:	2301      	movs	r3, #1
 800f392:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 800f394:	f107 0308 	add.w	r3, r7, #8
 800f398:	4618      	mov	r0, r3
 800f39a:	f7ff ff3b 	bl	800f214 <Custom_STM_App_Notification>
                break;
 800f39e:	e010      	b.n	800f3c2 <Custom_STM_Event_Handler+0x112>
            }
          }  /* if (attribute_modified->Attr_Handle == (CustomContext.CustomMycharnotifyHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))*/

          else if (attribute_modified->Attr_Handle == (CustomContext.CustomMycharwriteHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 800f3a0:	69fb      	ldr	r3, [r7, #28]
 800f3a2:	885b      	ldrh	r3, [r3, #2]
 800f3a4:	b29b      	uxth	r3, r3
 800f3a6:	461a      	mov	r2, r3
 800f3a8:	4b13      	ldr	r3, [pc, #76]	@ (800f3f8 <Custom_STM_Event_Handler+0x148>)
 800f3aa:	885b      	ldrh	r3, [r3, #2]
 800f3ac:	3301      	adds	r3, #1
 800f3ae:	429a      	cmp	r2, r3
 800f3b0:	d119      	bne.n	800f3e6 <Custom_STM_Event_Handler+0x136>
          {
            return_value = SVCCTL_EvtAckFlowEnable;
 800f3b2:	2301      	movs	r3, #1
 800f3b4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            /* USER CODE BEGIN CUSTOM_STM_Service_1_Char_1_ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE */
            HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800f3b8:	2101      	movs	r1, #1
 800f3ba:	4810      	ldr	r0, [pc, #64]	@ (800f3fc <Custom_STM_Event_Handler+0x14c>)
 800f3bc:	f7f8 fe66 	bl	800808c <HAL_GPIO_TogglePin>
            /* USER CODE END CUSTOM_STM_Service_1_Char_1_ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE */
          } /* if (attribute_modified->Attr_Handle == (CustomContext.CustomMycharwriteHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))*/
          /* USER CODE BEGIN EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_END */

          /* USER CODE END EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_END */
          break;
 800f3c0:	e011      	b.n	800f3e6 <Custom_STM_Event_Handler+0x136>
 800f3c2:	e010      	b.n	800f3e6 <Custom_STM_Event_Handler+0x136>
		case ACI_GATT_NOTIFICATION_COMPLETE_VSEVT_CODE:
        {
          /* USER CODE BEGIN EVT_BLUE_GATT_NOTIFICATION_COMPLETE_BEGIN */

          /* USER CODE END EVT_BLUE_GATT_NOTIFICATION_COMPLETE_BEGIN */
          notification_complete = (aci_gatt_notification_complete_event_rp0*)blecore_evt->data;
 800f3c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f3c6:	3302      	adds	r3, #2
 800f3c8:	623b      	str	r3, [r7, #32]
          Notification.Custom_Evt_Opcode = CUSTOM_STM_NOTIFICATION_COMPLETE_EVT;
 800f3ca:	2303      	movs	r3, #3
 800f3cc:	723b      	strb	r3, [r7, #8]
          Notification.AttrHandle = notification_complete->Attr_Handle;
 800f3ce:	6a3b      	ldr	r3, [r7, #32]
 800f3d0:	881b      	ldrh	r3, [r3, #0]
 800f3d2:	b29b      	uxth	r3, r3
 800f3d4:	833b      	strh	r3, [r7, #24]
          Custom_STM_App_Notification(&Notification);
 800f3d6:	f107 0308 	add.w	r3, r7, #8
 800f3da:	4618      	mov	r0, r3
 800f3dc:	f7ff ff1a 	bl	800f214 <Custom_STM_App_Notification>
          /* USER CODE BEGIN EVT_BLUE_GATT_NOTIFICATION_COMPLETE_END */

          /* USER CODE END EVT_BLUE_GATT_NOTIFICATION_COMPLETE_END */
          break;
 800f3e0:	e002      	b.n	800f3e8 <Custom_STM_Event_Handler+0x138>
        /* USER CODE END BLECORE_EVT */
        default:
          /* USER CODE BEGIN EVT_DEFAULT */

          /* USER CODE END EVT_DEFAULT */
          break;
 800f3e2:	bf00      	nop
 800f3e4:	e002      	b.n	800f3ec <Custom_STM_Event_Handler+0x13c>
          break;
 800f3e6:	bf00      	nop
      }
      /* USER CODE BEGIN EVT_VENDOR*/

      /* USER CODE END EVT_VENDOR*/
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800f3e8:	e000      	b.n	800f3ec <Custom_STM_Event_Handler+0x13c>

    default:
      /* USER CODE BEGIN EVENT_PCKT*/

      /* USER CODE END EVENT_PCKT*/
      break;
 800f3ea:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_Event_Handler_2 */

  /* USER CODE END Custom_STM_Event_Handler_2 */

  return(return_value);
 800f3ec:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}/* end Custom_STM_Event_Handler */
 800f3f0:	4618      	mov	r0, r3
 800f3f2:	3730      	adds	r7, #48	@ 0x30
 800f3f4:	46bd      	mov	sp, r7
 800f3f6:	bd80      	pop	{r7, pc}
 800f3f8:	20001fd0 	.word	0x20001fd0
 800f3fc:	48000400 	.word	0x48000400

0800f400 <SVCCTL_InitCustomSvc>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void SVCCTL_InitCustomSvc(void)
{
 800f400:	b580      	push	{r7, lr}
 800f402:	b08c      	sub	sp, #48	@ 0x30
 800f404:	af06      	add	r7, sp, #24

  Char_UUID_t  uuid;
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800f406:	2392      	movs	r3, #146	@ 0x92
 800f408:	75fb      	strb	r3, [r7, #23]
  /* USER CODE END SVCCTL_InitCustomSvc_1 */

  /**
   *  Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(Custom_STM_Event_Handler);
 800f40a:	484f      	ldr	r0, [pc, #316]	@ (800f548 <SVCCTL_InitCustomSvc+0x148>)
 800f40c:	f7fe fb7a 	bl	800db04 <SVCCTL_RegisterSvcHandler>
   *                              = 6
   *
   * This value doesn't take into account number of descriptors manually added
   * In case of descriptors added, please update the max_attr_record value accordingly in the next SVCCTL_InitService User Section
   */
  max_attr_record = 6;
 800f410:	2306      	movs	r3, #6
 800f412:	75bb      	strb	r3, [r7, #22]
  /* USER CODE BEGIN SVCCTL_InitService */
  /* max_attr_record to be updated if descriptors have been added */

  /* USER CODE END SVCCTL_InitService */

  COPY_MYSVC_UUID(uuid.Char_UUID_128);
 800f414:	238f      	movs	r3, #143	@ 0x8f
 800f416:	713b      	strb	r3, [r7, #4]
 800f418:	23e5      	movs	r3, #229	@ 0xe5
 800f41a:	717b      	strb	r3, [r7, #5]
 800f41c:	23b3      	movs	r3, #179	@ 0xb3
 800f41e:	71bb      	strb	r3, [r7, #6]
 800f420:	23d5      	movs	r3, #213	@ 0xd5
 800f422:	71fb      	strb	r3, [r7, #7]
 800f424:	232e      	movs	r3, #46	@ 0x2e
 800f426:	723b      	strb	r3, [r7, #8]
 800f428:	237f      	movs	r3, #127	@ 0x7f
 800f42a:	727b      	strb	r3, [r7, #9]
 800f42c:	234a      	movs	r3, #74	@ 0x4a
 800f42e:	72bb      	strb	r3, [r7, #10]
 800f430:	2398      	movs	r3, #152	@ 0x98
 800f432:	72fb      	strb	r3, [r7, #11]
 800f434:	232a      	movs	r3, #42	@ 0x2a
 800f436:	733b      	strb	r3, [r7, #12]
 800f438:	2348      	movs	r3, #72	@ 0x48
 800f43a:	737b      	strb	r3, [r7, #13]
 800f43c:	237a      	movs	r3, #122	@ 0x7a
 800f43e:	73bb      	strb	r3, [r7, #14]
 800f440:	23cc      	movs	r3, #204	@ 0xcc
 800f442:	73fb      	strb	r3, [r7, #15]
 800f444:	2300      	movs	r3, #0
 800f446:	743b      	strb	r3, [r7, #16]
 800f448:	2300      	movs	r3, #0
 800f44a:	747b      	strb	r3, [r7, #17]
 800f44c:	2300      	movs	r3, #0
 800f44e:	74bb      	strb	r3, [r7, #18]
 800f450:	2300      	movs	r3, #0
 800f452:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_service(UUID_TYPE_128,
 800f454:	7dbb      	ldrb	r3, [r7, #22]
 800f456:	1d39      	adds	r1, r7, #4
 800f458:	4a3c      	ldr	r2, [pc, #240]	@ (800f54c <SVCCTL_InitCustomSvc+0x14c>)
 800f45a:	9200      	str	r2, [sp, #0]
 800f45c:	2201      	movs	r2, #1
 800f45e:	2002      	movs	r0, #2
 800f460:	f7fd fdc4 	bl	800cfec <aci_gatt_add_service>
 800f464:	4603      	mov	r3, r0
 800f466:	75fb      	strb	r3, [r7, #23]
  }

  /**
   *  myCharWrite
   */
  COPY_MYCHARWRITE_UUID(uuid.Char_UUID_128);
 800f468:	2319      	movs	r3, #25
 800f46a:	713b      	strb	r3, [r7, #4]
 800f46c:	23ed      	movs	r3, #237	@ 0xed
 800f46e:	717b      	strb	r3, [r7, #5]
 800f470:	2382      	movs	r3, #130	@ 0x82
 800f472:	71bb      	strb	r3, [r7, #6]
 800f474:	23ae      	movs	r3, #174	@ 0xae
 800f476:	71fb      	strb	r3, [r7, #7]
 800f478:	23ed      	movs	r3, #237	@ 0xed
 800f47a:	723b      	strb	r3, [r7, #8]
 800f47c:	2321      	movs	r3, #33	@ 0x21
 800f47e:	727b      	strb	r3, [r7, #9]
 800f480:	234c      	movs	r3, #76	@ 0x4c
 800f482:	72bb      	strb	r3, [r7, #10]
 800f484:	239d      	movs	r3, #157	@ 0x9d
 800f486:	72fb      	strb	r3, [r7, #11]
 800f488:	2341      	movs	r3, #65	@ 0x41
 800f48a:	733b      	strb	r3, [r7, #12]
 800f48c:	2345      	movs	r3, #69	@ 0x45
 800f48e:	737b      	strb	r3, [r7, #13]
 800f490:	2322      	movs	r3, #34	@ 0x22
 800f492:	73bb      	strb	r3, [r7, #14]
 800f494:	238e      	movs	r3, #142	@ 0x8e
 800f496:	73fb      	strb	r3, [r7, #15]
 800f498:	2300      	movs	r3, #0
 800f49a:	743b      	strb	r3, [r7, #16]
 800f49c:	2300      	movs	r3, #0
 800f49e:	747b      	strb	r3, [r7, #17]
 800f4a0:	2300      	movs	r3, #0
 800f4a2:	74bb      	strb	r3, [r7, #18]
 800f4a4:	2300      	movs	r3, #0
 800f4a6:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomMysvcHdle,
 800f4a8:	4b28      	ldr	r3, [pc, #160]	@ (800f54c <SVCCTL_InitCustomSvc+0x14c>)
 800f4aa:	8818      	ldrh	r0, [r3, #0]
 800f4ac:	4b28      	ldr	r3, [pc, #160]	@ (800f550 <SVCCTL_InitCustomSvc+0x150>)
 800f4ae:	881b      	ldrh	r3, [r3, #0]
 800f4b0:	1d3a      	adds	r2, r7, #4
 800f4b2:	4928      	ldr	r1, [pc, #160]	@ (800f554 <SVCCTL_InitCustomSvc+0x154>)
 800f4b4:	9105      	str	r1, [sp, #20]
 800f4b6:	2100      	movs	r1, #0
 800f4b8:	9104      	str	r1, [sp, #16]
 800f4ba:	2110      	movs	r1, #16
 800f4bc:	9103      	str	r1, [sp, #12]
 800f4be:	2101      	movs	r1, #1
 800f4c0:	9102      	str	r1, [sp, #8]
 800f4c2:	2100      	movs	r1, #0
 800f4c4:	9101      	str	r1, [sp, #4]
 800f4c6:	2108      	movs	r1, #8
 800f4c8:	9100      	str	r1, [sp, #0]
 800f4ca:	2102      	movs	r1, #2
 800f4cc:	f7fd fe64 	bl	800d198 <aci_gatt_add_char>
 800f4d0:	4603      	mov	r3, r0
 800f4d2:	75fb      	strb	r3, [r7, #23]

  /* USER CODE END SVCCTL_Init_Service1_Char1 */
  /**
   *  myCharNotify
   */
  COPY_MYCHARNOTIFY_UUID(uuid.Char_UUID_128);
 800f4d4:	2300      	movs	r3, #0
 800f4d6:	713b      	strb	r3, [r7, #4]
 800f4d8:	2300      	movs	r3, #0
 800f4da:	717b      	strb	r3, [r7, #5]
 800f4dc:	2300      	movs	r3, #0
 800f4de:	71bb      	strb	r3, [r7, #6]
 800f4e0:	2300      	movs	r3, #0
 800f4e2:	71fb      	strb	r3, [r7, #7]
 800f4e4:	2300      	movs	r3, #0
 800f4e6:	723b      	strb	r3, [r7, #8]
 800f4e8:	2300      	movs	r3, #0
 800f4ea:	727b      	strb	r3, [r7, #9]
 800f4ec:	2300      	movs	r3, #0
 800f4ee:	72bb      	strb	r3, [r7, #10]
 800f4f0:	2300      	movs	r3, #0
 800f4f2:	72fb      	strb	r3, [r7, #11]
 800f4f4:	2300      	movs	r3, #0
 800f4f6:	733b      	strb	r3, [r7, #12]
 800f4f8:	2300      	movs	r3, #0
 800f4fa:	737b      	strb	r3, [r7, #13]
 800f4fc:	2300      	movs	r3, #0
 800f4fe:	73bb      	strb	r3, [r7, #14]
 800f500:	2300      	movs	r3, #0
 800f502:	73fb      	strb	r3, [r7, #15]
 800f504:	2300      	movs	r3, #0
 800f506:	743b      	strb	r3, [r7, #16]
 800f508:	2300      	movs	r3, #0
 800f50a:	747b      	strb	r3, [r7, #17]
 800f50c:	2301      	movs	r3, #1
 800f50e:	74bb      	strb	r3, [r7, #18]
 800f510:	2300      	movs	r3, #0
 800f512:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomMysvcHdle,
 800f514:	4b0d      	ldr	r3, [pc, #52]	@ (800f54c <SVCCTL_InitCustomSvc+0x14c>)
 800f516:	8818      	ldrh	r0, [r3, #0]
 800f518:	4b0f      	ldr	r3, [pc, #60]	@ (800f558 <SVCCTL_InitCustomSvc+0x158>)
 800f51a:	881b      	ldrh	r3, [r3, #0]
 800f51c:	1d3a      	adds	r2, r7, #4
 800f51e:	490f      	ldr	r1, [pc, #60]	@ (800f55c <SVCCTL_InitCustomSvc+0x15c>)
 800f520:	9105      	str	r1, [sp, #20]
 800f522:	2100      	movs	r1, #0
 800f524:	9104      	str	r1, [sp, #16]
 800f526:	2110      	movs	r1, #16
 800f528:	9103      	str	r1, [sp, #12]
 800f52a:	2107      	movs	r1, #7
 800f52c:	9102      	str	r1, [sp, #8]
 800f52e:	2100      	movs	r1, #0
 800f530:	9101      	str	r1, [sp, #4]
 800f532:	2110      	movs	r1, #16
 800f534:	9100      	str	r1, [sp, #0]
 800f536:	2102      	movs	r1, #2
 800f538:	f7fd fe2e 	bl	800d198 <aci_gatt_add_char>
 800f53c:	4603      	mov	r3, r0
 800f53e:	75fb      	strb	r3, [r7, #23]

  /* USER CODE BEGIN SVCCTL_InitCustomSvc_2 */

  /* USER CODE END SVCCTL_InitCustomSvc_2 */

  return;
 800f540:	bf00      	nop
}
 800f542:	3718      	adds	r7, #24
 800f544:	46bd      	mov	sp, r7
 800f546:	bd80      	pop	{r7, pc}
 800f548:	0800f2b1 	.word	0x0800f2b1
 800f54c:	20001fd0 	.word	0x20001fd0
 800f550:	20000066 	.word	0x20000066
 800f554:	20001fd2 	.word	0x20001fd2
 800f558:	20000068 	.word	0x20000068
 800f55c:	20001fd4 	.word	0x20001fd4

0800f560 <Custom_STM_App_Update_Char>:
 * @param  CharOpcode: Characteristic identifier
 * @param  Service_Instance: Instance of the service to which the characteristic belongs
 *
 */
tBleStatus Custom_STM_App_Update_Char(Custom_STM_Char_Opcode_t CharOpcode, uint8_t *pPayload)
{
 800f560:	b580      	push	{r7, lr}
 800f562:	b086      	sub	sp, #24
 800f564:	af02      	add	r7, sp, #8
 800f566:	4603      	mov	r3, r0
 800f568:	6039      	str	r1, [r7, #0]
 800f56a:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800f56c:	2392      	movs	r3, #146	@ 0x92
 800f56e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN Custom_STM_App_Update_Char_1 */

  /* USER CODE END Custom_STM_App_Update_Char_1 */

  switch (CharOpcode)
 800f570:	79fb      	ldrb	r3, [r7, #7]
 800f572:	2b00      	cmp	r3, #0
 800f574:	d002      	beq.n	800f57c <Custom_STM_App_Update_Char+0x1c>
 800f576:	2b01      	cmp	r3, #1
 800f578:	d01a      	beq.n	800f5b0 <Custom_STM_App_Update_Char+0x50>

      /* USER CODE END CUSTOM_STM_App_Update_Service_1_Char_2*/
      break;

    default:
      break;
 800f57a:	e029      	b.n	800f5d0 <Custom_STM_App_Update_Char+0x70>
      ret = aci_gatt_update_char_value(CustomContext.CustomMysvcHdle,
 800f57c:	4b17      	ldr	r3, [pc, #92]	@ (800f5dc <Custom_STM_App_Update_Char+0x7c>)
 800f57e:	8818      	ldrh	r0, [r3, #0]
 800f580:	4b16      	ldr	r3, [pc, #88]	@ (800f5dc <Custom_STM_App_Update_Char+0x7c>)
 800f582:	8859      	ldrh	r1, [r3, #2]
 800f584:	4b16      	ldr	r3, [pc, #88]	@ (800f5e0 <Custom_STM_App_Update_Char+0x80>)
 800f586:	881b      	ldrh	r3, [r3, #0]
 800f588:	b2da      	uxtb	r2, r3
 800f58a:	683b      	ldr	r3, [r7, #0]
 800f58c:	9300      	str	r3, [sp, #0]
 800f58e:	4613      	mov	r3, r2
 800f590:	2200      	movs	r2, #0
 800f592:	f7fd ff09 	bl	800d3a8 <aci_gatt_update_char_value>
 800f596:	4603      	mov	r3, r0
 800f598:	73fb      	strb	r3, [r7, #15]
      test4 = test4+1;
 800f59a:	4b12      	ldr	r3, [pc, #72]	@ (800f5e4 <Custom_STM_App_Update_Char+0x84>)
 800f59c:	edd3 7a00 	vldr	s15, [r3]
 800f5a0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800f5a4:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f5a8:	4b0e      	ldr	r3, [pc, #56]	@ (800f5e4 <Custom_STM_App_Update_Char+0x84>)
 800f5aa:	edc3 7a00 	vstr	s15, [r3]
      break;
 800f5ae:	e00f      	b.n	800f5d0 <Custom_STM_App_Update_Char+0x70>
      ret = aci_gatt_update_char_value(CustomContext.CustomMysvcHdle,
 800f5b0:	4b0a      	ldr	r3, [pc, #40]	@ (800f5dc <Custom_STM_App_Update_Char+0x7c>)
 800f5b2:	8818      	ldrh	r0, [r3, #0]
 800f5b4:	4b09      	ldr	r3, [pc, #36]	@ (800f5dc <Custom_STM_App_Update_Char+0x7c>)
 800f5b6:	8899      	ldrh	r1, [r3, #4]
 800f5b8:	4b0b      	ldr	r3, [pc, #44]	@ (800f5e8 <Custom_STM_App_Update_Char+0x88>)
 800f5ba:	881b      	ldrh	r3, [r3, #0]
 800f5bc:	b2da      	uxtb	r2, r3
 800f5be:	683b      	ldr	r3, [r7, #0]
 800f5c0:	9300      	str	r3, [sp, #0]
 800f5c2:	4613      	mov	r3, r2
 800f5c4:	2200      	movs	r2, #0
 800f5c6:	f7fd feef 	bl	800d3a8 <aci_gatt_update_char_value>
 800f5ca:	4603      	mov	r3, r0
 800f5cc:	73fb      	strb	r3, [r7, #15]
      break;
 800f5ce:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_App_Update_Char_2 */

  /* USER CODE END Custom_STM_App_Update_Char_2 */

  return ret;
 800f5d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800f5d2:	4618      	mov	r0, r3
 800f5d4:	3710      	adds	r7, #16
 800f5d6:	46bd      	mov	sp, r7
 800f5d8:	bd80      	pop	{r7, pc}
 800f5da:	bf00      	nop
 800f5dc:	20001fd0 	.word	0x20001fd0
 800f5e0:	20000066 	.word	0x20000066
 800f5e4:	20001fd8 	.word	0x20001fd8
 800f5e8:	20000068 	.word	0x20000068

0800f5ec <LL_PWR_EnableBootC2>:
{
 800f5ec:	b480      	push	{r7}
 800f5ee:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 800f5f0:	4b05      	ldr	r3, [pc, #20]	@ (800f608 <LL_PWR_EnableBootC2+0x1c>)
 800f5f2:	68db      	ldr	r3, [r3, #12]
 800f5f4:	4a04      	ldr	r2, [pc, #16]	@ (800f608 <LL_PWR_EnableBootC2+0x1c>)
 800f5f6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800f5fa:	60d3      	str	r3, [r2, #12]
}
 800f5fc:	bf00      	nop
 800f5fe:	46bd      	mov	sp, r7
 800f600:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f604:	4770      	bx	lr
 800f606:	bf00      	nop
 800f608:	58000400 	.word	0x58000400

0800f60c <LL_C2_EXTI_EnableEvent_32_63>:
{
 800f60c:	b480      	push	{r7}
 800f60e:	b083      	sub	sp, #12
 800f610:	af00      	add	r7, sp, #0
 800f612:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 800f614:	4b06      	ldr	r3, [pc, #24]	@ (800f630 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800f616:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 800f61a:	4905      	ldr	r1, [pc, #20]	@ (800f630 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800f61c:	687b      	ldr	r3, [r7, #4]
 800f61e:	4313      	orrs	r3, r2
 800f620:	f8c1 30d4 	str.w	r3, [r1, #212]	@ 0xd4
}
 800f624:	bf00      	nop
 800f626:	370c      	adds	r7, #12
 800f628:	46bd      	mov	sp, r7
 800f62a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f62e:	4770      	bx	lr
 800f630:	58000800 	.word	0x58000800

0800f634 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 800f634:	b480      	push	{r7}
 800f636:	b083      	sub	sp, #12
 800f638:	af00      	add	r7, sp, #0
 800f63a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 800f63c:	4b05      	ldr	r3, [pc, #20]	@ (800f654 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800f63e:	6a1a      	ldr	r2, [r3, #32]
 800f640:	4904      	ldr	r1, [pc, #16]	@ (800f654 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800f642:	687b      	ldr	r3, [r7, #4]
 800f644:	4313      	orrs	r3, r2
 800f646:	620b      	str	r3, [r1, #32]
}
 800f648:	bf00      	nop
 800f64a:	370c      	adds	r7, #12
 800f64c:	46bd      	mov	sp, r7
 800f64e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f652:	4770      	bx	lr
 800f654:	58000800 	.word	0x58000800

0800f658 <LL_AHB3_GRP1_EnableClock>:
{
 800f658:	b480      	push	{r7}
 800f65a:	b085      	sub	sp, #20
 800f65c:	af00      	add	r7, sp, #0
 800f65e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 800f660:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f664:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800f666:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800f66a:	687b      	ldr	r3, [r7, #4]
 800f66c:	4313      	orrs	r3, r2
 800f66e:	650b      	str	r3, [r1, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800f670:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f674:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800f676:	687b      	ldr	r3, [r7, #4]
 800f678:	4013      	ands	r3, r2
 800f67a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800f67c:	68fb      	ldr	r3, [r7, #12]
}
 800f67e:	bf00      	nop
 800f680:	3714      	adds	r7, #20
 800f682:	46bd      	mov	sp, r7
 800f684:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f688:	4770      	bx	lr

0800f68a <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 800f68a:	b480      	push	{r7}
 800f68c:	b085      	sub	sp, #20
 800f68e:	af00      	add	r7, sp, #0
 800f690:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 800f692:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f696:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 800f69a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800f69e:	687b      	ldr	r3, [r7, #4]
 800f6a0:	4313      	orrs	r3, r2
 800f6a2:	f8c1 3150 	str.w	r3, [r1, #336]	@ 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 800f6a6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f6aa:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 800f6ae:	687b      	ldr	r3, [r7, #4]
 800f6b0:	4013      	ands	r3, r2
 800f6b2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800f6b4:	68fb      	ldr	r3, [r7, #12]
}
 800f6b6:	bf00      	nop
 800f6b8:	3714      	adds	r7, #20
 800f6ba:	46bd      	mov	sp, r7
 800f6bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6c0:	4770      	bx	lr

0800f6c2 <LL_C1_IPCC_EnableIT_TXF>:
  * @rmtoll C1CR          TXFIE         LL_C1_IPCC_EnableIT_TXF
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_TXF(IPCC_TypeDef *IPCCx)
{
 800f6c2:	b480      	push	{r7}
 800f6c4:	b083      	sub	sp, #12
 800f6c6:	af00      	add	r7, sp, #0
 800f6c8:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 800f6ca:	687b      	ldr	r3, [r7, #4]
 800f6cc:	681b      	ldr	r3, [r3, #0]
 800f6ce:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800f6d2:	687b      	ldr	r3, [r7, #4]
 800f6d4:	601a      	str	r2, [r3, #0]
}
 800f6d6:	bf00      	nop
 800f6d8:	370c      	adds	r7, #12
 800f6da:	46bd      	mov	sp, r7
 800f6dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6e0:	4770      	bx	lr

0800f6e2 <LL_C1_IPCC_EnableIT_RXO>:
  * @rmtoll C1CR          RXOIE         LL_C1_IPCC_EnableIT_RXO
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_RXO(IPCC_TypeDef *IPCCx)
{
 800f6e2:	b480      	push	{r7}
 800f6e4:	b083      	sub	sp, #12
 800f6e6:	af00      	add	r7, sp, #0
 800f6e8:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 800f6ea:	687b      	ldr	r3, [r7, #4]
 800f6ec:	681b      	ldr	r3, [r3, #0]
 800f6ee:	f043 0201 	orr.w	r2, r3, #1
 800f6f2:	687b      	ldr	r3, [r7, #4]
 800f6f4:	601a      	str	r2, [r3, #0]
}
 800f6f6:	bf00      	nop
 800f6f8:	370c      	adds	r7, #12
 800f6fa:	46bd      	mov	sp, r7
 800f6fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f700:	4770      	bx	lr

0800f702 <LL_C1_IPCC_EnableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800f702:	b480      	push	{r7}
 800f704:	b083      	sub	sp, #12
 800f706:	af00      	add	r7, sp, #0
 800f708:	6078      	str	r0, [r7, #4]
 800f70a:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800f70c:	687b      	ldr	r3, [r7, #4]
 800f70e:	685a      	ldr	r2, [r3, #4]
 800f710:	683b      	ldr	r3, [r7, #0]
 800f712:	041b      	lsls	r3, r3, #16
 800f714:	43db      	mvns	r3, r3
 800f716:	401a      	ands	r2, r3
 800f718:	687b      	ldr	r3, [r7, #4]
 800f71a:	605a      	str	r2, [r3, #4]
}
 800f71c:	bf00      	nop
 800f71e:	370c      	adds	r7, #12
 800f720:	46bd      	mov	sp, r7
 800f722:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f726:	4770      	bx	lr

0800f728 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800f728:	b480      	push	{r7}
 800f72a:	b083      	sub	sp, #12
 800f72c:	af00      	add	r7, sp, #0
 800f72e:	6078      	str	r0, [r7, #4]
 800f730:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800f732:	687b      	ldr	r3, [r7, #4]
 800f734:	685a      	ldr	r2, [r3, #4]
 800f736:	683b      	ldr	r3, [r7, #0]
 800f738:	041b      	lsls	r3, r3, #16
 800f73a:	431a      	orrs	r2, r3
 800f73c:	687b      	ldr	r3, [r7, #4]
 800f73e:	605a      	str	r2, [r3, #4]
}
 800f740:	bf00      	nop
 800f742:	370c      	adds	r7, #12
 800f744:	46bd      	mov	sp, r7
 800f746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f74a:	4770      	bx	lr

0800f74c <LL_C1_IPCC_EnableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800f74c:	b480      	push	{r7}
 800f74e:	b083      	sub	sp, #12
 800f750:	af00      	add	r7, sp, #0
 800f752:	6078      	str	r0, [r7, #4]
 800f754:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 800f756:	687b      	ldr	r3, [r7, #4]
 800f758:	685a      	ldr	r2, [r3, #4]
 800f75a:	683b      	ldr	r3, [r7, #0]
 800f75c:	43db      	mvns	r3, r3
 800f75e:	401a      	ands	r2, r3
 800f760:	687b      	ldr	r3, [r7, #4]
 800f762:	605a      	str	r2, [r3, #4]
}
 800f764:	bf00      	nop
 800f766:	370c      	adds	r7, #12
 800f768:	46bd      	mov	sp, r7
 800f76a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f76e:	4770      	bx	lr

0800f770 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800f770:	b480      	push	{r7}
 800f772:	b083      	sub	sp, #12
 800f774:	af00      	add	r7, sp, #0
 800f776:	6078      	str	r0, [r7, #4]
 800f778:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 800f77a:	687b      	ldr	r3, [r7, #4]
 800f77c:	683a      	ldr	r2, [r7, #0]
 800f77e:	609a      	str	r2, [r3, #8]
}
 800f780:	bf00      	nop
 800f782:	370c      	adds	r7, #12
 800f784:	46bd      	mov	sp, r7
 800f786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f78a:	4770      	bx	lr

0800f78c <LL_C1_IPCC_SetFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_SetFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800f78c:	b480      	push	{r7}
 800f78e:	b083      	sub	sp, #12
 800f790:	af00      	add	r7, sp, #0
 800f792:	6078      	str	r0, [r7, #4]
 800f794:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 800f796:	683b      	ldr	r3, [r7, #0]
 800f798:	041a      	lsls	r2, r3, #16
 800f79a:	687b      	ldr	r3, [r7, #4]
 800f79c:	609a      	str	r2, [r3, #8]
}
 800f79e:	bf00      	nop
 800f7a0:	370c      	adds	r7, #12
 800f7a2:	46bd      	mov	sp, r7
 800f7a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7a8:	4770      	bx	lr

0800f7aa <LL_C1_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C1_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 800f7aa:	b480      	push	{r7}
 800f7ac:	b083      	sub	sp, #12
 800f7ae:	af00      	add	r7, sp, #0
 800f7b0:	6078      	str	r0, [r7, #4]
 800f7b2:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 800f7b4:	687b      	ldr	r3, [r7, #4]
 800f7b6:	68da      	ldr	r2, [r3, #12]
 800f7b8:	683b      	ldr	r3, [r7, #0]
 800f7ba:	4013      	ands	r3, r2
 800f7bc:	683a      	ldr	r2, [r7, #0]
 800f7be:	429a      	cmp	r2, r3
 800f7c0:	d101      	bne.n	800f7c6 <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 800f7c2:	2301      	movs	r3, #1
 800f7c4:	e000      	b.n	800f7c8 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 800f7c6:	2300      	movs	r3, #0
}
 800f7c8:	4618      	mov	r0, r3
 800f7ca:	370c      	adds	r7, #12
 800f7cc:	46bd      	mov	sp, r7
 800f7ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7d2:	4770      	bx	lr

0800f7d4 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 800f7d4:	b480      	push	{r7}
 800f7d6:	b083      	sub	sp, #12
 800f7d8:	af00      	add	r7, sp, #0
 800f7da:	6078      	str	r0, [r7, #4]
 800f7dc:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 800f7de:	687b      	ldr	r3, [r7, #4]
 800f7e0:	69da      	ldr	r2, [r3, #28]
 800f7e2:	683b      	ldr	r3, [r7, #0]
 800f7e4:	4013      	ands	r3, r2
 800f7e6:	683a      	ldr	r2, [r7, #0]
 800f7e8:	429a      	cmp	r2, r3
 800f7ea:	d101      	bne.n	800f7f0 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 800f7ec:	2301      	movs	r3, #1
 800f7ee:	e000      	b.n	800f7f2 <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 800f7f0:	2300      	movs	r3, #0
}
 800f7f2:	4618      	mov	r0, r3
 800f7f4:	370c      	adds	r7, #12
 800f7f6:	46bd      	mov	sp, r7
 800f7f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7fc:	4770      	bx	lr
	...

0800f800 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 800f800:	b580      	push	{r7, lr}
 800f802:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 800f804:	2102      	movs	r1, #2
 800f806:	4818      	ldr	r0, [pc, #96]	@ (800f868 <HW_IPCC_Rx_Handler+0x68>)
 800f808:	f7ff ffe4 	bl	800f7d4 <LL_C2_IPCC_IsActiveFlag_CHx>
 800f80c:	4603      	mov	r3, r0
 800f80e:	2b00      	cmp	r3, #0
 800f810:	d008      	beq.n	800f824 <HW_IPCC_Rx_Handler+0x24>
 800f812:	4b15      	ldr	r3, [pc, #84]	@ (800f868 <HW_IPCC_Rx_Handler+0x68>)
 800f814:	685b      	ldr	r3, [r3, #4]
 800f816:	f003 0302 	and.w	r3, r3, #2
 800f81a:	2b00      	cmp	r3, #0
 800f81c:	d102      	bne.n	800f824 <HW_IPCC_Rx_Handler+0x24>
  {
      HW_IPCC_SYS_EvtHandler();
 800f81e:	f000 f8d5 	bl	800f9cc <HW_IPCC_SYS_EvtHandler>
 800f822:	e01e      	b.n	800f862 <HW_IPCC_Rx_Handler+0x62>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 800f824:	2101      	movs	r1, #1
 800f826:	4810      	ldr	r0, [pc, #64]	@ (800f868 <HW_IPCC_Rx_Handler+0x68>)
 800f828:	f7ff ffd4 	bl	800f7d4 <LL_C2_IPCC_IsActiveFlag_CHx>
 800f82c:	4603      	mov	r3, r0
 800f82e:	2b00      	cmp	r3, #0
 800f830:	d008      	beq.n	800f844 <HW_IPCC_Rx_Handler+0x44>
 800f832:	4b0d      	ldr	r3, [pc, #52]	@ (800f868 <HW_IPCC_Rx_Handler+0x68>)
 800f834:	685b      	ldr	r3, [r3, #4]
 800f836:	f003 0301 	and.w	r3, r3, #1
 800f83a:	2b00      	cmp	r3, #0
 800f83c:	d102      	bne.n	800f844 <HW_IPCC_Rx_Handler+0x44>
  {
    HW_IPCC_BLE_EvtHandler();
 800f83e:	f000 f889 	bl	800f954 <HW_IPCC_BLE_EvtHandler>
 800f842:	e00e      	b.n	800f862 <HW_IPCC_Rx_Handler+0x62>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 800f844:	2108      	movs	r1, #8
 800f846:	4808      	ldr	r0, [pc, #32]	@ (800f868 <HW_IPCC_Rx_Handler+0x68>)
 800f848:	f7ff ffc4 	bl	800f7d4 <LL_C2_IPCC_IsActiveFlag_CHx>
 800f84c:	4603      	mov	r3, r0
 800f84e:	2b00      	cmp	r3, #0
 800f850:	d008      	beq.n	800f864 <HW_IPCC_Rx_Handler+0x64>
 800f852:	4b05      	ldr	r3, [pc, #20]	@ (800f868 <HW_IPCC_Rx_Handler+0x68>)
 800f854:	685b      	ldr	r3, [r3, #4]
 800f856:	f003 0308 	and.w	r3, r3, #8
 800f85a:	2b00      	cmp	r3, #0
 800f85c:	d102      	bne.n	800f864 <HW_IPCC_Rx_Handler+0x64>
  {
    HW_IPCC_TRACES_EvtHandler();
 800f85e:	f000 f901 	bl	800fa64 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 800f862:	bf00      	nop
 800f864:	bf00      	nop
}
 800f866:	bd80      	pop	{r7, pc}
 800f868:	58000c00 	.word	0x58000c00

0800f86c <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 800f86c:	b580      	push	{r7, lr}
 800f86e:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 800f870:	2102      	movs	r1, #2
 800f872:	4818      	ldr	r0, [pc, #96]	@ (800f8d4 <HW_IPCC_Tx_Handler+0x68>)
 800f874:	f7ff ff99 	bl	800f7aa <LL_C1_IPCC_IsActiveFlag_CHx>
 800f878:	4603      	mov	r3, r0
 800f87a:	2b00      	cmp	r3, #0
 800f87c:	d108      	bne.n	800f890 <HW_IPCC_Tx_Handler+0x24>
 800f87e:	4b15      	ldr	r3, [pc, #84]	@ (800f8d4 <HW_IPCC_Tx_Handler+0x68>)
 800f880:	685b      	ldr	r3, [r3, #4]
 800f882:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f886:	2b00      	cmp	r3, #0
 800f888:	d102      	bne.n	800f890 <HW_IPCC_Tx_Handler+0x24>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 800f88a:	f000 f893 	bl	800f9b4 <HW_IPCC_SYS_CmdEvtHandler>
 800f88e:	e01e      	b.n	800f8ce <HW_IPCC_Tx_Handler+0x62>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 800f890:	2108      	movs	r1, #8
 800f892:	4810      	ldr	r0, [pc, #64]	@ (800f8d4 <HW_IPCC_Tx_Handler+0x68>)
 800f894:	f7ff ff89 	bl	800f7aa <LL_C1_IPCC_IsActiveFlag_CHx>
 800f898:	4603      	mov	r3, r0
 800f89a:	2b00      	cmp	r3, #0
 800f89c:	d108      	bne.n	800f8b0 <HW_IPCC_Tx_Handler+0x44>
 800f89e:	4b0d      	ldr	r3, [pc, #52]	@ (800f8d4 <HW_IPCC_Tx_Handler+0x68>)
 800f8a0:	685b      	ldr	r3, [r3, #4]
 800f8a2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800f8a6:	2b00      	cmp	r3, #0
 800f8a8:	d102      	bne.n	800f8b0 <HW_IPCC_Tx_Handler+0x44>
  {
    HW_IPCC_MM_FreeBufHandler();
 800f8aa:	f000 f8bd 	bl	800fa28 <HW_IPCC_MM_FreeBufHandler>
 800f8ae:	e00e      	b.n	800f8ce <HW_IPCC_Tx_Handler+0x62>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 800f8b0:	2120      	movs	r1, #32
 800f8b2:	4808      	ldr	r0, [pc, #32]	@ (800f8d4 <HW_IPCC_Tx_Handler+0x68>)
 800f8b4:	f7ff ff79 	bl	800f7aa <LL_C1_IPCC_IsActiveFlag_CHx>
 800f8b8:	4603      	mov	r3, r0
 800f8ba:	2b00      	cmp	r3, #0
 800f8bc:	d108      	bne.n	800f8d0 <HW_IPCC_Tx_Handler+0x64>
 800f8be:	4b05      	ldr	r3, [pc, #20]	@ (800f8d4 <HW_IPCC_Tx_Handler+0x68>)
 800f8c0:	685b      	ldr	r3, [r3, #4]
 800f8c2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800f8c6:	2b00      	cmp	r3, #0
 800f8c8:	d102      	bne.n	800f8d0 <HW_IPCC_Tx_Handler+0x64>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 800f8ca:	f000 f84f 	bl	800f96c <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 800f8ce:	bf00      	nop
 800f8d0:	bf00      	nop
}
 800f8d2:	bd80      	pop	{r7, pc}
 800f8d4:	58000c00 	.word	0x58000c00

0800f8d8 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 800f8d8:	b580      	push	{r7, lr}
 800f8da:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
  * when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 800f8dc:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800f8e0:	f7ff fed3 	bl	800f68a <LL_C2_AHB3_GRP1_EnableClock>

  /**
  * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
  */
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 800f8e4:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800f8e8:	f7ff fea4 	bl	800f634 <LL_EXTI_EnableRisingTrig_32_63>
  /* It is required to have at least a system clock cycle before a SEV after LL_EXTI_EnableRisingTrig_32_63() */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 800f8ec:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800f8f0:	f7ff fe8c 	bl	800f60c <LL_C2_EXTI_EnableEvent_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 800f8f4:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 800f8f6:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 800f8f8:	f7ff fe78 	bl	800f5ec <LL_PWR_EnableBootC2>

  return;
 800f8fc:	bf00      	nop
}
 800f8fe:	bd80      	pop	{r7, pc}

0800f900 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 800f900:	b580      	push	{r7, lr}
 800f902:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 800f904:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800f908:	f7ff fea6 	bl	800f658 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 800f90c:	4806      	ldr	r0, [pc, #24]	@ (800f928 <HW_IPCC_Init+0x28>)
 800f90e:	f7ff fee8 	bl	800f6e2 <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 800f912:	4805      	ldr	r0, [pc, #20]	@ (800f928 <HW_IPCC_Init+0x28>)
 800f914:	f7ff fed5 	bl	800f6c2 <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 800f918:	202c      	movs	r0, #44	@ 0x2c
 800f91a:	f7f7 ff08 	bl	800772e <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 800f91e:	202d      	movs	r0, #45	@ 0x2d
 800f920:	f7f7 ff05 	bl	800772e <HAL_NVIC_EnableIRQ>

  return;
 800f924:	bf00      	nop
}
 800f926:	bd80      	pop	{r7, pc}
 800f928:	58000c00 	.word	0x58000c00

0800f92c <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 800f92c:	b580      	push	{r7, lr}
 800f92e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800f930:	2101      	movs	r1, #1
 800f932:	4802      	ldr	r0, [pc, #8]	@ (800f93c <HW_IPCC_BLE_Init+0x10>)
 800f934:	f7ff ff0a 	bl	800f74c <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800f938:	bf00      	nop
}
 800f93a:	bd80      	pop	{r7, pc}
 800f93c:	58000c00 	.word	0x58000c00

0800f940 <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 800f940:	b580      	push	{r7, lr}
 800f942:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 800f944:	2101      	movs	r1, #1
 800f946:	4802      	ldr	r0, [pc, #8]	@ (800f950 <HW_IPCC_BLE_SendCmd+0x10>)
 800f948:	f7ff ff20 	bl	800f78c <LL_C1_IPCC_SetFlag_CHx>

  return;
 800f94c:	bf00      	nop
}
 800f94e:	bd80      	pop	{r7, pc}
 800f950:	58000c00 	.word	0x58000c00

0800f954 <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 800f954:	b580      	push	{r7, lr}
 800f956:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 800f958:	f7fe fd98 	bl	800e48c <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800f95c:	2101      	movs	r1, #1
 800f95e:	4802      	ldr	r0, [pc, #8]	@ (800f968 <HW_IPCC_BLE_EvtHandler+0x14>)
 800f960:	f7ff ff06 	bl	800f770 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800f964:	bf00      	nop
}
 800f966:	bd80      	pop	{r7, pc}
 800f968:	58000c00 	.word	0x58000c00

0800f96c <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 800f96c:	b580      	push	{r7, lr}
 800f96e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 800f970:	2120      	movs	r1, #32
 800f972:	4803      	ldr	r0, [pc, #12]	@ (800f980 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 800f974:	f7ff fed8 	bl	800f728 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 800f978:	f7fe fdb8 	bl	800e4ec <HW_IPCC_BLE_AclDataAckNot>

  return;
 800f97c:	bf00      	nop
}
 800f97e:	bd80      	pop	{r7, pc}
 800f980:	58000c00 	.word	0x58000c00

0800f984 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 800f984:	b580      	push	{r7, lr}
 800f986:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800f988:	2102      	movs	r1, #2
 800f98a:	4802      	ldr	r0, [pc, #8]	@ (800f994 <HW_IPCC_SYS_Init+0x10>)
 800f98c:	f7ff fede 	bl	800f74c <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800f990:	bf00      	nop
}
 800f992:	bd80      	pop	{r7, pc}
 800f994:	58000c00 	.word	0x58000c00

0800f998 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 800f998:	b580      	push	{r7, lr}
 800f99a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800f99c:	2102      	movs	r1, #2
 800f99e:	4804      	ldr	r0, [pc, #16]	@ (800f9b0 <HW_IPCC_SYS_SendCmd+0x18>)
 800f9a0:	f7ff fef4 	bl	800f78c <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800f9a4:	2102      	movs	r1, #2
 800f9a6:	4802      	ldr	r0, [pc, #8]	@ (800f9b0 <HW_IPCC_SYS_SendCmd+0x18>)
 800f9a8:	f7ff feab 	bl	800f702 <LL_C1_IPCC_EnableTransmitChannel>

  return;
 800f9ac:	bf00      	nop
}
 800f9ae:	bd80      	pop	{r7, pc}
 800f9b0:	58000c00 	.word	0x58000c00

0800f9b4 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 800f9b4:	b580      	push	{r7, lr}
 800f9b6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800f9b8:	2102      	movs	r1, #2
 800f9ba:	4803      	ldr	r0, [pc, #12]	@ (800f9c8 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 800f9bc:	f7ff feb4 	bl	800f728 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 800f9c0:	f7fe fde4 	bl	800e58c <HW_IPCC_SYS_CmdEvtNot>

  return;
 800f9c4:	bf00      	nop
}
 800f9c6:	bd80      	pop	{r7, pc}
 800f9c8:	58000c00 	.word	0x58000c00

0800f9cc <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 800f9cc:	b580      	push	{r7, lr}
 800f9ce:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 800f9d0:	f7fe fdf2 	bl	800e5b8 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800f9d4:	2102      	movs	r1, #2
 800f9d6:	4802      	ldr	r0, [pc, #8]	@ (800f9e0 <HW_IPCC_SYS_EvtHandler+0x14>)
 800f9d8:	f7ff feca 	bl	800f770 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800f9dc:	bf00      	nop
}
 800f9de:	bd80      	pop	{r7, pc}
 800f9e0:	58000c00 	.word	0x58000c00

0800f9e4 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 800f9e4:	b580      	push	{r7, lr}
 800f9e6:	b082      	sub	sp, #8
 800f9e8:	af00      	add	r7, sp, #0
 800f9ea:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 800f9ec:	2108      	movs	r1, #8
 800f9ee:	480c      	ldr	r0, [pc, #48]	@ (800fa20 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800f9f0:	f7ff fedb 	bl	800f7aa <LL_C1_IPCC_IsActiveFlag_CHx>
 800f9f4:	4603      	mov	r3, r0
 800f9f6:	2b00      	cmp	r3, #0
 800f9f8:	d007      	beq.n	800fa0a <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 800f9fa:	4a0a      	ldr	r2, [pc, #40]	@ (800fa24 <HW_IPCC_MM_SendFreeBuf+0x40>)
 800f9fc:	687b      	ldr	r3, [r7, #4]
 800f9fe:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800fa00:	2108      	movs	r1, #8
 800fa02:	4807      	ldr	r0, [pc, #28]	@ (800fa20 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800fa04:	f7ff fe7d 	bl	800f702 <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 800fa08:	e006      	b.n	800fa18 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 800fa0a:	687b      	ldr	r3, [r7, #4]
 800fa0c:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800fa0e:	2108      	movs	r1, #8
 800fa10:	4803      	ldr	r0, [pc, #12]	@ (800fa20 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800fa12:	f7ff febb 	bl	800f78c <LL_C1_IPCC_SetFlag_CHx>
  return;
 800fa16:	bf00      	nop
}
 800fa18:	3708      	adds	r7, #8
 800fa1a:	46bd      	mov	sp, r7
 800fa1c:	bd80      	pop	{r7, pc}
 800fa1e:	bf00      	nop
 800fa20:	58000c00 	.word	0x58000c00
 800fa24:	20001fdc 	.word	0x20001fdc

0800fa28 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 800fa28:	b580      	push	{r7, lr}
 800fa2a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800fa2c:	2108      	movs	r1, #8
 800fa2e:	4806      	ldr	r0, [pc, #24]	@ (800fa48 <HW_IPCC_MM_FreeBufHandler+0x20>)
 800fa30:	f7ff fe7a 	bl	800f728 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 800fa34:	4b05      	ldr	r3, [pc, #20]	@ (800fa4c <HW_IPCC_MM_FreeBufHandler+0x24>)
 800fa36:	681b      	ldr	r3, [r3, #0]
 800fa38:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800fa3a:	2108      	movs	r1, #8
 800fa3c:	4802      	ldr	r0, [pc, #8]	@ (800fa48 <HW_IPCC_MM_FreeBufHandler+0x20>)
 800fa3e:	f7ff fea5 	bl	800f78c <LL_C1_IPCC_SetFlag_CHx>

  return;
 800fa42:	bf00      	nop
}
 800fa44:	bd80      	pop	{r7, pc}
 800fa46:	bf00      	nop
 800fa48:	58000c00 	.word	0x58000c00
 800fa4c:	20001fdc 	.word	0x20001fdc

0800fa50 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 800fa50:	b580      	push	{r7, lr}
 800fa52:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 800fa54:	2108      	movs	r1, #8
 800fa56:	4802      	ldr	r0, [pc, #8]	@ (800fa60 <HW_IPCC_TRACES_Init+0x10>)
 800fa58:	f7ff fe78 	bl	800f74c <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800fa5c:	bf00      	nop
}
 800fa5e:	bd80      	pop	{r7, pc}
 800fa60:	58000c00 	.word	0x58000c00

0800fa64 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 800fa64:	b580      	push	{r7, lr}
 800fa66:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 800fa68:	f7fe fe4e 	bl	800e708 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 800fa6c:	2108      	movs	r1, #8
 800fa6e:	4802      	ldr	r0, [pc, #8]	@ (800fa78 <HW_IPCC_TRACES_EvtHandler+0x14>)
 800fa70:	f7ff fe7e 	bl	800f770 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800fa74:	bf00      	nop
}
 800fa76:	bd80      	pop	{r7, pc}
 800fa78:	58000c00 	.word	0x58000c00

0800fa7c <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 800fa7c:	b480      	push	{r7}
 800fa7e:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 800fa80:	4b05      	ldr	r3, [pc, #20]	@ (800fa98 <UTIL_LPM_Init+0x1c>)
 800fa82:	2200      	movs	r2, #0
 800fa84:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 800fa86:	4b05      	ldr	r3, [pc, #20]	@ (800fa9c <UTIL_LPM_Init+0x20>)
 800fa88:	2200      	movs	r2, #0
 800fa8a:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 800fa8c:	bf00      	nop
 800fa8e:	46bd      	mov	sp, r7
 800fa90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa94:	4770      	bx	lr
 800fa96:	bf00      	nop
 800fa98:	20001fe0 	.word	0x20001fe0
 800fa9c:	20001fe4 	.word	0x20001fe4

0800faa0 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800faa0:	b480      	push	{r7}
 800faa2:	b087      	sub	sp, #28
 800faa4:	af00      	add	r7, sp, #0
 800faa6:	6078      	str	r0, [r7, #4]
 800faa8:	460b      	mov	r3, r1
 800faaa:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800faac:	f3ef 8310 	mrs	r3, PRIMASK
 800fab0:	613b      	str	r3, [r7, #16]
  return(result);
 800fab2:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 800fab4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800fab6:	b672      	cpsid	i
}
 800fab8:	bf00      	nop
  
  switch(state)
 800faba:	78fb      	ldrb	r3, [r7, #3]
 800fabc:	2b00      	cmp	r3, #0
 800fabe:	d008      	beq.n	800fad2 <UTIL_LPM_SetOffMode+0x32>
 800fac0:	2b01      	cmp	r3, #1
 800fac2:	d10e      	bne.n	800fae2 <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 800fac4:	4b0d      	ldr	r3, [pc, #52]	@ (800fafc <UTIL_LPM_SetOffMode+0x5c>)
 800fac6:	681a      	ldr	r2, [r3, #0]
 800fac8:	687b      	ldr	r3, [r7, #4]
 800faca:	4313      	orrs	r3, r2
 800facc:	4a0b      	ldr	r2, [pc, #44]	@ (800fafc <UTIL_LPM_SetOffMode+0x5c>)
 800face:	6013      	str	r3, [r2, #0]
      break;
 800fad0:	e008      	b.n	800fae4 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 800fad2:	687b      	ldr	r3, [r7, #4]
 800fad4:	43da      	mvns	r2, r3
 800fad6:	4b09      	ldr	r3, [pc, #36]	@ (800fafc <UTIL_LPM_SetOffMode+0x5c>)
 800fad8:	681b      	ldr	r3, [r3, #0]
 800fada:	4013      	ands	r3, r2
 800fadc:	4a07      	ldr	r2, [pc, #28]	@ (800fafc <UTIL_LPM_SetOffMode+0x5c>)
 800fade:	6013      	str	r3, [r2, #0]
      break;
 800fae0:	e000      	b.n	800fae4 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 800fae2:	bf00      	nop
 800fae4:	697b      	ldr	r3, [r7, #20]
 800fae6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800fae8:	68fb      	ldr	r3, [r7, #12]
 800faea:	f383 8810 	msr	PRIMASK, r3
}
 800faee:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800faf0:	bf00      	nop
 800faf2:	371c      	adds	r7, #28
 800faf4:	46bd      	mov	sp, r7
 800faf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fafa:	4770      	bx	lr
 800fafc:	20001fe4 	.word	0x20001fe4

0800fb00 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 800fb00:	b580      	push	{r7, lr}
 800fb02:	b090      	sub	sp, #64	@ 0x40
 800fb04:	af00      	add	r7, sp, #0
 800fb06:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 800fb08:	4b73      	ldr	r3, [pc, #460]	@ (800fcd8 <UTIL_SEQ_Run+0x1d8>)
 800fb0a:	681b      	ldr	r3, [r3, #0]
 800fb0c:	62bb      	str	r3, [r7, #40]	@ 0x28
  SuperMask &= Mask_bm;
 800fb0e:	4b72      	ldr	r3, [pc, #456]	@ (800fcd8 <UTIL_SEQ_Run+0x1d8>)
 800fb10:	681a      	ldr	r2, [r3, #0]
 800fb12:	687b      	ldr	r3, [r7, #4]
 800fb14:	4013      	ands	r3, r2
 800fb16:	4a70      	ldr	r2, [pc, #448]	@ (800fcd8 <UTIL_SEQ_Run+0x1d8>)
 800fb18:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 800fb1a:	4b70      	ldr	r3, [pc, #448]	@ (800fcdc <UTIL_SEQ_Run+0x1dc>)
 800fb1c:	681b      	ldr	r3, [r3, #0]
 800fb1e:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 800fb20:	4b6f      	ldr	r3, [pc, #444]	@ (800fce0 <UTIL_SEQ_Run+0x1e0>)
 800fb22:	681b      	ldr	r3, [r3, #0]
 800fb24:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 800fb26:	4b6f      	ldr	r3, [pc, #444]	@ (800fce4 <UTIL_SEQ_Run+0x1e4>)
 800fb28:	681b      	ldr	r3, [r3, #0]
 800fb2a:	633b      	str	r3, [r7, #48]	@ 0x30
  local_evtwaited =  EvtWaited;
 800fb2c:	4b6e      	ldr	r3, [pc, #440]	@ (800fce8 <UTIL_SEQ_Run+0x1e8>)
 800fb2e:	681b      	ldr	r3, [r3, #0]
 800fb30:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800fb32:	e08d      	b.n	800fc50 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 800fb34:	2300      	movs	r3, #0
 800fb36:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800fb38:	e002      	b.n	800fb40 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 800fb3a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fb3c:	3301      	adds	r3, #1
 800fb3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800fb40:	4a6a      	ldr	r2, [pc, #424]	@ (800fcec <UTIL_SEQ_Run+0x1ec>)
 800fb42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fb44:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800fb48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fb4a:	401a      	ands	r2, r3
 800fb4c:	4b62      	ldr	r3, [pc, #392]	@ (800fcd8 <UTIL_SEQ_Run+0x1d8>)
 800fb4e:	681b      	ldr	r3, [r3, #0]
 800fb50:	4013      	ands	r3, r2
 800fb52:	2b00      	cmp	r3, #0
 800fb54:	d0f1      	beq.n	800fb3a <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 800fb56:	4a65      	ldr	r2, [pc, #404]	@ (800fcec <UTIL_SEQ_Run+0x1ec>)
 800fb58:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fb5a:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800fb5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fb60:	401a      	ands	r2, r3
 800fb62:	4b5d      	ldr	r3, [pc, #372]	@ (800fcd8 <UTIL_SEQ_Run+0x1d8>)
 800fb64:	681b      	ldr	r3, [r3, #0]
 800fb66:	4013      	ands	r3, r2
 800fb68:	627b      	str	r3, [r7, #36]	@ 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 800fb6a:	4a60      	ldr	r2, [pc, #384]	@ (800fcec <UTIL_SEQ_Run+0x1ec>)
 800fb6c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fb6e:	00db      	lsls	r3, r3, #3
 800fb70:	4413      	add	r3, r2
 800fb72:	685a      	ldr	r2, [r3, #4]
 800fb74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fb76:	4013      	ands	r3, r2
 800fb78:	2b00      	cmp	r3, #0
 800fb7a:	d106      	bne.n	800fb8a <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 800fb7c:	4a5b      	ldr	r2, [pc, #364]	@ (800fcec <UTIL_SEQ_Run+0x1ec>)
 800fb7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fb80:	00db      	lsls	r3, r3, #3
 800fb82:	4413      	add	r3, r2
 800fb84:	f04f 32ff 	mov.w	r2, #4294967295
 800fb88:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 800fb8a:	4a58      	ldr	r2, [pc, #352]	@ (800fcec <UTIL_SEQ_Run+0x1ec>)
 800fb8c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fb8e:	00db      	lsls	r3, r3, #3
 800fb90:	4413      	add	r3, r2
 800fb92:	685a      	ldr	r2, [r3, #4]
 800fb94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fb96:	4013      	ands	r3, r2
 800fb98:	4618      	mov	r0, r3
 800fb9a:	f000 f9b3 	bl	800ff04 <SEQ_BitPosition>
 800fb9e:	4603      	mov	r3, r0
 800fba0:	461a      	mov	r2, r3
 800fba2:	4b53      	ldr	r3, [pc, #332]	@ (800fcf0 <UTIL_SEQ_Run+0x1f0>)
 800fba4:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 800fba6:	4a51      	ldr	r2, [pc, #324]	@ (800fcec <UTIL_SEQ_Run+0x1ec>)
 800fba8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fbaa:	00db      	lsls	r3, r3, #3
 800fbac:	4413      	add	r3, r2
 800fbae:	685a      	ldr	r2, [r3, #4]
 800fbb0:	4b4f      	ldr	r3, [pc, #316]	@ (800fcf0 <UTIL_SEQ_Run+0x1f0>)
 800fbb2:	681b      	ldr	r3, [r3, #0]
 800fbb4:	2101      	movs	r1, #1
 800fbb6:	fa01 f303 	lsl.w	r3, r1, r3
 800fbba:	43db      	mvns	r3, r3
 800fbbc:	401a      	ands	r2, r3
 800fbbe:	494b      	ldr	r1, [pc, #300]	@ (800fcec <UTIL_SEQ_Run+0x1ec>)
 800fbc0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fbc2:	00db      	lsls	r3, r3, #3
 800fbc4:	440b      	add	r3, r1
 800fbc6:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800fbc8:	f3ef 8310 	mrs	r3, PRIMASK
 800fbcc:	61bb      	str	r3, [r7, #24]
  return(result);
 800fbce:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800fbd0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 800fbd2:	b672      	cpsid	i
}
 800fbd4:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 800fbd6:	4b46      	ldr	r3, [pc, #280]	@ (800fcf0 <UTIL_SEQ_Run+0x1f0>)
 800fbd8:	681b      	ldr	r3, [r3, #0]
 800fbda:	2201      	movs	r2, #1
 800fbdc:	fa02 f303 	lsl.w	r3, r2, r3
 800fbe0:	43da      	mvns	r2, r3
 800fbe2:	4b3e      	ldr	r3, [pc, #248]	@ (800fcdc <UTIL_SEQ_Run+0x1dc>)
 800fbe4:	681b      	ldr	r3, [r3, #0]
 800fbe6:	4013      	ands	r3, r2
 800fbe8:	4a3c      	ldr	r2, [pc, #240]	@ (800fcdc <UTIL_SEQ_Run+0x1dc>)
 800fbea:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800fbec:	2302      	movs	r3, #2
 800fbee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800fbf0:	e013      	b.n	800fc1a <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 800fbf2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fbf4:	3b01      	subs	r3, #1
 800fbf6:	4a3d      	ldr	r2, [pc, #244]	@ (800fcec <UTIL_SEQ_Run+0x1ec>)
 800fbf8:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 800fbfc:	4b3c      	ldr	r3, [pc, #240]	@ (800fcf0 <UTIL_SEQ_Run+0x1f0>)
 800fbfe:	681b      	ldr	r3, [r3, #0]
 800fc00:	2201      	movs	r2, #1
 800fc02:	fa02 f303 	lsl.w	r3, r2, r3
 800fc06:	43da      	mvns	r2, r3
 800fc08:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fc0a:	3b01      	subs	r3, #1
 800fc0c:	400a      	ands	r2, r1
 800fc0e:	4937      	ldr	r1, [pc, #220]	@ (800fcec <UTIL_SEQ_Run+0x1ec>)
 800fc10:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800fc14:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fc16:	3b01      	subs	r3, #1
 800fc18:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800fc1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fc1c:	2b00      	cmp	r3, #0
 800fc1e:	d1e8      	bne.n	800fbf2 <UTIL_SEQ_Run+0xf2>
 800fc20:	6a3b      	ldr	r3, [r7, #32]
 800fc22:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800fc24:	697b      	ldr	r3, [r7, #20]
 800fc26:	f383 8810 	msr	PRIMASK, r3
}
 800fc2a:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 800fc2c:	4b30      	ldr	r3, [pc, #192]	@ (800fcf0 <UTIL_SEQ_Run+0x1f0>)
 800fc2e:	681b      	ldr	r3, [r3, #0]
 800fc30:	4a30      	ldr	r2, [pc, #192]	@ (800fcf4 <UTIL_SEQ_Run+0x1f4>)
 800fc32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fc36:	4798      	blx	r3

    local_taskset = TaskSet;
 800fc38:	4b28      	ldr	r3, [pc, #160]	@ (800fcdc <UTIL_SEQ_Run+0x1dc>)
 800fc3a:	681b      	ldr	r3, [r3, #0]
 800fc3c:	63bb      	str	r3, [r7, #56]	@ 0x38
    local_evtset = EvtSet;
 800fc3e:	4b28      	ldr	r3, [pc, #160]	@ (800fce0 <UTIL_SEQ_Run+0x1e0>)
 800fc40:	681b      	ldr	r3, [r3, #0]
 800fc42:	637b      	str	r3, [r7, #52]	@ 0x34
    local_taskmask = TaskMask;
 800fc44:	4b27      	ldr	r3, [pc, #156]	@ (800fce4 <UTIL_SEQ_Run+0x1e4>)
 800fc46:	681b      	ldr	r3, [r3, #0]
 800fc48:	633b      	str	r3, [r7, #48]	@ 0x30
    local_evtwaited = EvtWaited;
 800fc4a:	4b27      	ldr	r3, [pc, #156]	@ (800fce8 <UTIL_SEQ_Run+0x1e8>)
 800fc4c:	681b      	ldr	r3, [r3, #0]
 800fc4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800fc50:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800fc52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fc54:	401a      	ands	r2, r3
 800fc56:	4b20      	ldr	r3, [pc, #128]	@ (800fcd8 <UTIL_SEQ_Run+0x1d8>)
 800fc58:	681b      	ldr	r3, [r3, #0]
 800fc5a:	4013      	ands	r3, r2
 800fc5c:	2b00      	cmp	r3, #0
 800fc5e:	d005      	beq.n	800fc6c <UTIL_SEQ_Run+0x16c>
 800fc60:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800fc62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fc64:	4013      	ands	r3, r2
 800fc66:	2b00      	cmp	r3, #0
 800fc68:	f43f af64 	beq.w	800fb34 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 800fc6c:	4b20      	ldr	r3, [pc, #128]	@ (800fcf0 <UTIL_SEQ_Run+0x1f0>)
 800fc6e:	f04f 32ff 	mov.w	r2, #4294967295
 800fc72:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 800fc74:	f000 f938 	bl	800fee8 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800fc78:	f3ef 8310 	mrs	r3, PRIMASK
 800fc7c:	613b      	str	r3, [r7, #16]
  return(result);
 800fc7e:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 800fc80:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800fc82:	b672      	cpsid	i
}
 800fc84:	bf00      	nop
  local_taskset = TaskSet;
 800fc86:	4b15      	ldr	r3, [pc, #84]	@ (800fcdc <UTIL_SEQ_Run+0x1dc>)
 800fc88:	681b      	ldr	r3, [r3, #0]
 800fc8a:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 800fc8c:	4b14      	ldr	r3, [pc, #80]	@ (800fce0 <UTIL_SEQ_Run+0x1e0>)
 800fc8e:	681b      	ldr	r3, [r3, #0]
 800fc90:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 800fc92:	4b14      	ldr	r3, [pc, #80]	@ (800fce4 <UTIL_SEQ_Run+0x1e4>)
 800fc94:	681b      	ldr	r3, [r3, #0]
 800fc96:	633b      	str	r3, [r7, #48]	@ 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 800fc98:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800fc9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fc9c:	401a      	ands	r2, r3
 800fc9e:	4b0e      	ldr	r3, [pc, #56]	@ (800fcd8 <UTIL_SEQ_Run+0x1d8>)
 800fca0:	681b      	ldr	r3, [r3, #0]
 800fca2:	4013      	ands	r3, r2
 800fca4:	2b00      	cmp	r3, #0
 800fca6:	d107      	bne.n	800fcb8 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 800fca8:	4b0f      	ldr	r3, [pc, #60]	@ (800fce8 <UTIL_SEQ_Run+0x1e8>)
 800fcaa:	681a      	ldr	r2, [r3, #0]
 800fcac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fcae:	4013      	ands	r3, r2
 800fcb0:	2b00      	cmp	r3, #0
 800fcb2:	d101      	bne.n	800fcb8 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 800fcb4:	f7f1 f9b4 	bl	8001020 <UTIL_SEQ_Idle>
 800fcb8:	69fb      	ldr	r3, [r7, #28]
 800fcba:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800fcbc:	68fb      	ldr	r3, [r7, #12]
 800fcbe:	f383 8810 	msr	PRIMASK, r3
}
 800fcc2:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 800fcc4:	f000 f917 	bl	800fef6 <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 800fcc8:	4a03      	ldr	r2, [pc, #12]	@ (800fcd8 <UTIL_SEQ_Run+0x1d8>)
 800fcca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fccc:	6013      	str	r3, [r2, #0]

  return;
 800fcce:	bf00      	nop
}
 800fcd0:	3740      	adds	r7, #64	@ 0x40
 800fcd2:	46bd      	mov	sp, r7
 800fcd4:	bd80      	pop	{r7, pc}
 800fcd6:	bf00      	nop
 800fcd8:	20000070 	.word	0x20000070
 800fcdc:	20001fe8 	.word	0x20001fe8
 800fce0:	20001fec 	.word	0x20001fec
 800fce4:	2000006c 	.word	0x2000006c
 800fce8:	20001ff0 	.word	0x20001ff0
 800fcec:	20002078 	.word	0x20002078
 800fcf0:	20001ff4 	.word	0x20001ff4
 800fcf4:	20001ff8 	.word	0x20001ff8

0800fcf8 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 800fcf8:	b580      	push	{r7, lr}
 800fcfa:	b088      	sub	sp, #32
 800fcfc:	af00      	add	r7, sp, #0
 800fcfe:	60f8      	str	r0, [r7, #12]
 800fd00:	60b9      	str	r1, [r7, #8]
 800fd02:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800fd04:	f3ef 8310 	mrs	r3, PRIMASK
 800fd08:	617b      	str	r3, [r7, #20]
  return(result);
 800fd0a:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 800fd0c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800fd0e:	b672      	cpsid	i
}
 800fd10:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 800fd12:	68f8      	ldr	r0, [r7, #12]
 800fd14:	f000 f8f6 	bl	800ff04 <SEQ_BitPosition>
 800fd18:	4603      	mov	r3, r0
 800fd1a:	4619      	mov	r1, r3
 800fd1c:	4a06      	ldr	r2, [pc, #24]	@ (800fd38 <UTIL_SEQ_RegTask+0x40>)
 800fd1e:	687b      	ldr	r3, [r7, #4]
 800fd20:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800fd24:	69fb      	ldr	r3, [r7, #28]
 800fd26:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800fd28:	69bb      	ldr	r3, [r7, #24]
 800fd2a:	f383 8810 	msr	PRIMASK, r3
}
 800fd2e:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 800fd30:	bf00      	nop
}
 800fd32:	3720      	adds	r7, #32
 800fd34:	46bd      	mov	sp, r7
 800fd36:	bd80      	pop	{r7, pc}
 800fd38:	20001ff8 	.word	0x20001ff8

0800fd3c <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 800fd3c:	b480      	push	{r7}
 800fd3e:	b087      	sub	sp, #28
 800fd40:	af00      	add	r7, sp, #0
 800fd42:	6078      	str	r0, [r7, #4]
 800fd44:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800fd46:	f3ef 8310 	mrs	r3, PRIMASK
 800fd4a:	60fb      	str	r3, [r7, #12]
  return(result);
 800fd4c:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800fd4e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800fd50:	b672      	cpsid	i
}
 800fd52:	bf00      	nop

  TaskSet |= TaskId_bm;
 800fd54:	4b0d      	ldr	r3, [pc, #52]	@ (800fd8c <UTIL_SEQ_SetTask+0x50>)
 800fd56:	681a      	ldr	r2, [r3, #0]
 800fd58:	687b      	ldr	r3, [r7, #4]
 800fd5a:	4313      	orrs	r3, r2
 800fd5c:	4a0b      	ldr	r2, [pc, #44]	@ (800fd8c <UTIL_SEQ_SetTask+0x50>)
 800fd5e:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 800fd60:	4a0b      	ldr	r2, [pc, #44]	@ (800fd90 <UTIL_SEQ_SetTask+0x54>)
 800fd62:	683b      	ldr	r3, [r7, #0]
 800fd64:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800fd68:	687b      	ldr	r3, [r7, #4]
 800fd6a:	431a      	orrs	r2, r3
 800fd6c:	4908      	ldr	r1, [pc, #32]	@ (800fd90 <UTIL_SEQ_SetTask+0x54>)
 800fd6e:	683b      	ldr	r3, [r7, #0]
 800fd70:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 800fd74:	697b      	ldr	r3, [r7, #20]
 800fd76:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800fd78:	693b      	ldr	r3, [r7, #16]
 800fd7a:	f383 8810 	msr	PRIMASK, r3
}
 800fd7e:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800fd80:	bf00      	nop
}
 800fd82:	371c      	adds	r7, #28
 800fd84:	46bd      	mov	sp, r7
 800fd86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd8a:	4770      	bx	lr
 800fd8c:	20001fe8 	.word	0x20001fe8
 800fd90:	20002078 	.word	0x20002078

0800fd94 <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800fd94:	b480      	push	{r7}
 800fd96:	b087      	sub	sp, #28
 800fd98:	af00      	add	r7, sp, #0
 800fd9a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800fd9c:	f3ef 8310 	mrs	r3, PRIMASK
 800fda0:	60fb      	str	r3, [r7, #12]
  return(result);
 800fda2:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800fda4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800fda6:	b672      	cpsid	i
}
 800fda8:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 800fdaa:	687b      	ldr	r3, [r7, #4]
 800fdac:	43da      	mvns	r2, r3
 800fdae:	4b08      	ldr	r3, [pc, #32]	@ (800fdd0 <UTIL_SEQ_PauseTask+0x3c>)
 800fdb0:	681b      	ldr	r3, [r3, #0]
 800fdb2:	4013      	ands	r3, r2
 800fdb4:	4a06      	ldr	r2, [pc, #24]	@ (800fdd0 <UTIL_SEQ_PauseTask+0x3c>)
 800fdb6:	6013      	str	r3, [r2, #0]
 800fdb8:	697b      	ldr	r3, [r7, #20]
 800fdba:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800fdbc:	693b      	ldr	r3, [r7, #16]
 800fdbe:	f383 8810 	msr	PRIMASK, r3
}
 800fdc2:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800fdc4:	bf00      	nop
}
 800fdc6:	371c      	adds	r7, #28
 800fdc8:	46bd      	mov	sp, r7
 800fdca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdce:	4770      	bx	lr
 800fdd0:	2000006c 	.word	0x2000006c

0800fdd4 <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800fdd4:	b480      	push	{r7}
 800fdd6:	b087      	sub	sp, #28
 800fdd8:	af00      	add	r7, sp, #0
 800fdda:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800fddc:	f3ef 8310 	mrs	r3, PRIMASK
 800fde0:	60fb      	str	r3, [r7, #12]
  return(result);
 800fde2:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800fde4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800fde6:	b672      	cpsid	i
}
 800fde8:	bf00      	nop

  TaskMask |= TaskId_bm;
 800fdea:	4b09      	ldr	r3, [pc, #36]	@ (800fe10 <UTIL_SEQ_ResumeTask+0x3c>)
 800fdec:	681a      	ldr	r2, [r3, #0]
 800fdee:	687b      	ldr	r3, [r7, #4]
 800fdf0:	4313      	orrs	r3, r2
 800fdf2:	4a07      	ldr	r2, [pc, #28]	@ (800fe10 <UTIL_SEQ_ResumeTask+0x3c>)
 800fdf4:	6013      	str	r3, [r2, #0]
 800fdf6:	697b      	ldr	r3, [r7, #20]
 800fdf8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800fdfa:	693b      	ldr	r3, [r7, #16]
 800fdfc:	f383 8810 	msr	PRIMASK, r3
}
 800fe00:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800fe02:	bf00      	nop
}
 800fe04:	371c      	adds	r7, #28
 800fe06:	46bd      	mov	sp, r7
 800fe08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe0c:	4770      	bx	lr
 800fe0e:	bf00      	nop
 800fe10:	2000006c 	.word	0x2000006c

0800fe14 <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 800fe14:	b480      	push	{r7}
 800fe16:	b087      	sub	sp, #28
 800fe18:	af00      	add	r7, sp, #0
 800fe1a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800fe1c:	f3ef 8310 	mrs	r3, PRIMASK
 800fe20:	60fb      	str	r3, [r7, #12]
  return(result);
 800fe22:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800fe24:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800fe26:	b672      	cpsid	i
}
 800fe28:	bf00      	nop

  EvtSet |= EvtId_bm;
 800fe2a:	4b09      	ldr	r3, [pc, #36]	@ (800fe50 <UTIL_SEQ_SetEvt+0x3c>)
 800fe2c:	681a      	ldr	r2, [r3, #0]
 800fe2e:	687b      	ldr	r3, [r7, #4]
 800fe30:	4313      	orrs	r3, r2
 800fe32:	4a07      	ldr	r2, [pc, #28]	@ (800fe50 <UTIL_SEQ_SetEvt+0x3c>)
 800fe34:	6013      	str	r3, [r2, #0]
 800fe36:	697b      	ldr	r3, [r7, #20]
 800fe38:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800fe3a:	693b      	ldr	r3, [r7, #16]
 800fe3c:	f383 8810 	msr	PRIMASK, r3
}
 800fe40:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800fe42:	bf00      	nop
}
 800fe44:	371c      	adds	r7, #28
 800fe46:	46bd      	mov	sp, r7
 800fe48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe4c:	4770      	bx	lr
 800fe4e:	bf00      	nop
 800fe50:	20001fec 	.word	0x20001fec

0800fe54 <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 800fe54:	b580      	push	{r7, lr}
 800fe56:	b088      	sub	sp, #32
 800fe58:	af00      	add	r7, sp, #0
 800fe5a:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 800fe5c:	4b1f      	ldr	r3, [pc, #124]	@ (800fedc <UTIL_SEQ_WaitEvt+0x88>)
 800fe5e:	681b      	ldr	r3, [r3, #0]
 800fe60:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 800fe62:	4b1e      	ldr	r3, [pc, #120]	@ (800fedc <UTIL_SEQ_WaitEvt+0x88>)
 800fe64:	681b      	ldr	r3, [r3, #0]
 800fe66:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fe6a:	d102      	bne.n	800fe72 <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0u;
 800fe6c:	2300      	movs	r3, #0
 800fe6e:	61fb      	str	r3, [r7, #28]
 800fe70:	e005      	b.n	800fe7e <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
 800fe72:	4b1a      	ldr	r3, [pc, #104]	@ (800fedc <UTIL_SEQ_WaitEvt+0x88>)
 800fe74:	681b      	ldr	r3, [r3, #0]
 800fe76:	2201      	movs	r2, #1
 800fe78:	fa02 f303 	lsl.w	r3, r2, r3
 800fe7c:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 800fe7e:	4b18      	ldr	r3, [pc, #96]	@ (800fee0 <UTIL_SEQ_WaitEvt+0x8c>)
 800fe80:	681b      	ldr	r3, [r3, #0]
 800fe82:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 800fe84:	4a16      	ldr	r2, [pc, #88]	@ (800fee0 <UTIL_SEQ_WaitEvt+0x8c>)
 800fe86:	687b      	ldr	r3, [r7, #4]
 800fe88:	6013      	str	r3, [r2, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
 800fe8a:	e003      	b.n	800fe94 <UTIL_SEQ_WaitEvt+0x40>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
 800fe8c:	6879      	ldr	r1, [r7, #4]
 800fe8e:	69f8      	ldr	r0, [r7, #28]
 800fe90:	f7f1 f8cd 	bl	800102e <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
 800fe94:	4b13      	ldr	r3, [pc, #76]	@ (800fee4 <UTIL_SEQ_WaitEvt+0x90>)
 800fe96:	681a      	ldr	r2, [r3, #0]
 800fe98:	687b      	ldr	r3, [r7, #4]
 800fe9a:	4013      	ands	r3, r2
 800fe9c:	2b00      	cmp	r3, #0
 800fe9e:	d0f5      	beq.n	800fe8c <UTIL_SEQ_WaitEvt+0x38>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 800fea0:	4a0e      	ldr	r2, [pc, #56]	@ (800fedc <UTIL_SEQ_WaitEvt+0x88>)
 800fea2:	69bb      	ldr	r3, [r7, #24]
 800fea4:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800fea6:	f3ef 8310 	mrs	r3, PRIMASK
 800feaa:	60bb      	str	r3, [r7, #8]
  return(result);
 800feac:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800feae:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800feb0:	b672      	cpsid	i
}
 800feb2:	bf00      	nop

  EvtSet &= (~EvtId_bm);
 800feb4:	687b      	ldr	r3, [r7, #4]
 800feb6:	43da      	mvns	r2, r3
 800feb8:	4b0a      	ldr	r3, [pc, #40]	@ (800fee4 <UTIL_SEQ_WaitEvt+0x90>)
 800feba:	681b      	ldr	r3, [r3, #0]
 800febc:	4013      	ands	r3, r2
 800febe:	4a09      	ldr	r2, [pc, #36]	@ (800fee4 <UTIL_SEQ_WaitEvt+0x90>)
 800fec0:	6013      	str	r3, [r2, #0]
 800fec2:	693b      	ldr	r3, [r7, #16]
 800fec4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800fec6:	68fb      	ldr	r3, [r7, #12]
 800fec8:	f383 8810 	msr	PRIMASK, r3
}
 800fecc:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 800fece:	4a04      	ldr	r2, [pc, #16]	@ (800fee0 <UTIL_SEQ_WaitEvt+0x8c>)
 800fed0:	697b      	ldr	r3, [r7, #20]
 800fed2:	6013      	str	r3, [r2, #0]
  return;
 800fed4:	bf00      	nop
}
 800fed6:	3720      	adds	r7, #32
 800fed8:	46bd      	mov	sp, r7
 800feda:	bd80      	pop	{r7, pc}
 800fedc:	20001ff4 	.word	0x20001ff4
 800fee0:	20001ff0 	.word	0x20001ff0
 800fee4:	20001fec 	.word	0x20001fec

0800fee8 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 800fee8:	b480      	push	{r7}
 800feea:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800feec:	bf00      	nop
}
 800feee:	46bd      	mov	sp, r7
 800fef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fef4:	4770      	bx	lr

0800fef6 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 800fef6:	b480      	push	{r7}
 800fef8:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800fefa:	bf00      	nop
}
 800fefc:	46bd      	mov	sp, r7
 800fefe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff02:	4770      	bx	lr

0800ff04 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 800ff04:	b480      	push	{r7}
 800ff06:	b085      	sub	sp, #20
 800ff08:	af00      	add	r7, sp, #0
 800ff0a:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 800ff0c:	2300      	movs	r3, #0
 800ff0e:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 800ff10:	687b      	ldr	r3, [r7, #4]
 800ff12:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 800ff14:	68bb      	ldr	r3, [r7, #8]
 800ff16:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ff1a:	d204      	bcs.n	800ff26 <SEQ_BitPosition+0x22>
 800ff1c:	2310      	movs	r3, #16
 800ff1e:	73fb      	strb	r3, [r7, #15]
 800ff20:	68bb      	ldr	r3, [r7, #8]
 800ff22:	041b      	lsls	r3, r3, #16
 800ff24:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 800ff26:	68bb      	ldr	r3, [r7, #8]
 800ff28:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ff2c:	d205      	bcs.n	800ff3a <SEQ_BitPosition+0x36>
 800ff2e:	7bfb      	ldrb	r3, [r7, #15]
 800ff30:	3308      	adds	r3, #8
 800ff32:	73fb      	strb	r3, [r7, #15]
 800ff34:	68bb      	ldr	r3, [r7, #8]
 800ff36:	021b      	lsls	r3, r3, #8
 800ff38:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 800ff3a:	68bb      	ldr	r3, [r7, #8]
 800ff3c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ff40:	d205      	bcs.n	800ff4e <SEQ_BitPosition+0x4a>
 800ff42:	7bfb      	ldrb	r3, [r7, #15]
 800ff44:	3304      	adds	r3, #4
 800ff46:	73fb      	strb	r3, [r7, #15]
 800ff48:	68bb      	ldr	r3, [r7, #8]
 800ff4a:	011b      	lsls	r3, r3, #4
 800ff4c:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 800ff4e:	68bb      	ldr	r3, [r7, #8]
 800ff50:	0f1b      	lsrs	r3, r3, #28
 800ff52:	4a07      	ldr	r2, [pc, #28]	@ (800ff70 <SEQ_BitPosition+0x6c>)
 800ff54:	5cd2      	ldrb	r2, [r2, r3]
 800ff56:	7bfb      	ldrb	r3, [r7, #15]
 800ff58:	4413      	add	r3, r2
 800ff5a:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 800ff5c:	7bfb      	ldrb	r3, [r7, #15]
 800ff5e:	f1c3 031f 	rsb	r3, r3, #31
 800ff62:	b2db      	uxtb	r3, r3
}
 800ff64:	4618      	mov	r0, r3
 800ff66:	3714      	adds	r7, #20
 800ff68:	46bd      	mov	sp, r7
 800ff6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff6e:	4770      	bx	lr
 800ff70:	08011bac 	.word	0x08011bac

0800ff74 <random>:
 800ff74:	4b16      	ldr	r3, [pc, #88]	@ (800ffd0 <random+0x5c>)
 800ff76:	b510      	push	{r4, lr}
 800ff78:	681c      	ldr	r4, [r3, #0]
 800ff7a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800ff7c:	b9b3      	cbnz	r3, 800ffac <random+0x38>
 800ff7e:	2018      	movs	r0, #24
 800ff80:	f000 fa2e 	bl	80103e0 <malloc>
 800ff84:	4602      	mov	r2, r0
 800ff86:	6320      	str	r0, [r4, #48]	@ 0x30
 800ff88:	b920      	cbnz	r0, 800ff94 <random+0x20>
 800ff8a:	4b12      	ldr	r3, [pc, #72]	@ (800ffd4 <random+0x60>)
 800ff8c:	4812      	ldr	r0, [pc, #72]	@ (800ffd8 <random+0x64>)
 800ff8e:	214c      	movs	r1, #76	@ 0x4c
 800ff90:	f000 f9be 	bl	8010310 <__assert_func>
 800ff94:	4911      	ldr	r1, [pc, #68]	@ (800ffdc <random+0x68>)
 800ff96:	4b12      	ldr	r3, [pc, #72]	@ (800ffe0 <random+0x6c>)
 800ff98:	e9c0 1300 	strd	r1, r3, [r0]
 800ff9c:	4b11      	ldr	r3, [pc, #68]	@ (800ffe4 <random+0x70>)
 800ff9e:	6083      	str	r3, [r0, #8]
 800ffa0:	230b      	movs	r3, #11
 800ffa2:	8183      	strh	r3, [r0, #12]
 800ffa4:	2100      	movs	r1, #0
 800ffa6:	2001      	movs	r0, #1
 800ffa8:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800ffac:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800ffae:	480e      	ldr	r0, [pc, #56]	@ (800ffe8 <random+0x74>)
 800ffb0:	690b      	ldr	r3, [r1, #16]
 800ffb2:	694c      	ldr	r4, [r1, #20]
 800ffb4:	4a0d      	ldr	r2, [pc, #52]	@ (800ffec <random+0x78>)
 800ffb6:	4358      	muls	r0, r3
 800ffb8:	fb02 0004 	mla	r0, r2, r4, r0
 800ffbc:	fba3 3202 	umull	r3, r2, r3, r2
 800ffc0:	3301      	adds	r3, #1
 800ffc2:	eb40 0002 	adc.w	r0, r0, r2
 800ffc6:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800ffca:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800ffce:	bd10      	pop	{r4, pc}
 800ffd0:	20000080 	.word	0x20000080
 800ffd4:	08011bbc 	.word	0x08011bbc
 800ffd8:	08011bd3 	.word	0x08011bd3
 800ffdc:	abcd330e 	.word	0xabcd330e
 800ffe0:	e66d1234 	.word	0xe66d1234
 800ffe4:	0005deec 	.word	0x0005deec
 800ffe8:	5851f42d 	.word	0x5851f42d
 800ffec:	4c957f2d 	.word	0x4c957f2d

0800fff0 <std>:
 800fff0:	2300      	movs	r3, #0
 800fff2:	b510      	push	{r4, lr}
 800fff4:	4604      	mov	r4, r0
 800fff6:	e9c0 3300 	strd	r3, r3, [r0]
 800fffa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800fffe:	6083      	str	r3, [r0, #8]
 8010000:	8181      	strh	r1, [r0, #12]
 8010002:	6643      	str	r3, [r0, #100]	@ 0x64
 8010004:	81c2      	strh	r2, [r0, #14]
 8010006:	6183      	str	r3, [r0, #24]
 8010008:	4619      	mov	r1, r3
 801000a:	2208      	movs	r2, #8
 801000c:	305c      	adds	r0, #92	@ 0x5c
 801000e:	f000 f8f4 	bl	80101fa <memset>
 8010012:	4b0d      	ldr	r3, [pc, #52]	@ (8010048 <std+0x58>)
 8010014:	6263      	str	r3, [r4, #36]	@ 0x24
 8010016:	4b0d      	ldr	r3, [pc, #52]	@ (801004c <std+0x5c>)
 8010018:	62a3      	str	r3, [r4, #40]	@ 0x28
 801001a:	4b0d      	ldr	r3, [pc, #52]	@ (8010050 <std+0x60>)
 801001c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801001e:	4b0d      	ldr	r3, [pc, #52]	@ (8010054 <std+0x64>)
 8010020:	6323      	str	r3, [r4, #48]	@ 0x30
 8010022:	4b0d      	ldr	r3, [pc, #52]	@ (8010058 <std+0x68>)
 8010024:	6224      	str	r4, [r4, #32]
 8010026:	429c      	cmp	r4, r3
 8010028:	d006      	beq.n	8010038 <std+0x48>
 801002a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801002e:	4294      	cmp	r4, r2
 8010030:	d002      	beq.n	8010038 <std+0x48>
 8010032:	33d0      	adds	r3, #208	@ 0xd0
 8010034:	429c      	cmp	r4, r3
 8010036:	d105      	bne.n	8010044 <std+0x54>
 8010038:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801003c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010040:	f000 b954 	b.w	80102ec <__retarget_lock_init_recursive>
 8010044:	bd10      	pop	{r4, pc}
 8010046:	bf00      	nop
 8010048:	08010175 	.word	0x08010175
 801004c:	08010197 	.word	0x08010197
 8010050:	080101cf 	.word	0x080101cf
 8010054:	080101f3 	.word	0x080101f3
 8010058:	20002088 	.word	0x20002088

0801005c <stdio_exit_handler>:
 801005c:	4a02      	ldr	r2, [pc, #8]	@ (8010068 <stdio_exit_handler+0xc>)
 801005e:	4903      	ldr	r1, [pc, #12]	@ (801006c <stdio_exit_handler+0x10>)
 8010060:	4803      	ldr	r0, [pc, #12]	@ (8010070 <stdio_exit_handler+0x14>)
 8010062:	f000 b869 	b.w	8010138 <_fwalk_sglue>
 8010066:	bf00      	nop
 8010068:	20000074 	.word	0x20000074
 801006c:	08010bf5 	.word	0x08010bf5
 8010070:	20000084 	.word	0x20000084

08010074 <cleanup_stdio>:
 8010074:	6841      	ldr	r1, [r0, #4]
 8010076:	4b0c      	ldr	r3, [pc, #48]	@ (80100a8 <cleanup_stdio+0x34>)
 8010078:	4299      	cmp	r1, r3
 801007a:	b510      	push	{r4, lr}
 801007c:	4604      	mov	r4, r0
 801007e:	d001      	beq.n	8010084 <cleanup_stdio+0x10>
 8010080:	f000 fdb8 	bl	8010bf4 <_fflush_r>
 8010084:	68a1      	ldr	r1, [r4, #8]
 8010086:	4b09      	ldr	r3, [pc, #36]	@ (80100ac <cleanup_stdio+0x38>)
 8010088:	4299      	cmp	r1, r3
 801008a:	d002      	beq.n	8010092 <cleanup_stdio+0x1e>
 801008c:	4620      	mov	r0, r4
 801008e:	f000 fdb1 	bl	8010bf4 <_fflush_r>
 8010092:	68e1      	ldr	r1, [r4, #12]
 8010094:	4b06      	ldr	r3, [pc, #24]	@ (80100b0 <cleanup_stdio+0x3c>)
 8010096:	4299      	cmp	r1, r3
 8010098:	d004      	beq.n	80100a4 <cleanup_stdio+0x30>
 801009a:	4620      	mov	r0, r4
 801009c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80100a0:	f000 bda8 	b.w	8010bf4 <_fflush_r>
 80100a4:	bd10      	pop	{r4, pc}
 80100a6:	bf00      	nop
 80100a8:	20002088 	.word	0x20002088
 80100ac:	200020f0 	.word	0x200020f0
 80100b0:	20002158 	.word	0x20002158

080100b4 <global_stdio_init.part.0>:
 80100b4:	b510      	push	{r4, lr}
 80100b6:	4b0b      	ldr	r3, [pc, #44]	@ (80100e4 <global_stdio_init.part.0+0x30>)
 80100b8:	4c0b      	ldr	r4, [pc, #44]	@ (80100e8 <global_stdio_init.part.0+0x34>)
 80100ba:	4a0c      	ldr	r2, [pc, #48]	@ (80100ec <global_stdio_init.part.0+0x38>)
 80100bc:	601a      	str	r2, [r3, #0]
 80100be:	4620      	mov	r0, r4
 80100c0:	2200      	movs	r2, #0
 80100c2:	2104      	movs	r1, #4
 80100c4:	f7ff ff94 	bl	800fff0 <std>
 80100c8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80100cc:	2201      	movs	r2, #1
 80100ce:	2109      	movs	r1, #9
 80100d0:	f7ff ff8e 	bl	800fff0 <std>
 80100d4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80100d8:	2202      	movs	r2, #2
 80100da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80100de:	2112      	movs	r1, #18
 80100e0:	f7ff bf86 	b.w	800fff0 <std>
 80100e4:	200021c0 	.word	0x200021c0
 80100e8:	20002088 	.word	0x20002088
 80100ec:	0801005d 	.word	0x0801005d

080100f0 <__sfp_lock_acquire>:
 80100f0:	4801      	ldr	r0, [pc, #4]	@ (80100f8 <__sfp_lock_acquire+0x8>)
 80100f2:	f000 b8fc 	b.w	80102ee <__retarget_lock_acquire_recursive>
 80100f6:	bf00      	nop
 80100f8:	200021c9 	.word	0x200021c9

080100fc <__sfp_lock_release>:
 80100fc:	4801      	ldr	r0, [pc, #4]	@ (8010104 <__sfp_lock_release+0x8>)
 80100fe:	f000 b8f7 	b.w	80102f0 <__retarget_lock_release_recursive>
 8010102:	bf00      	nop
 8010104:	200021c9 	.word	0x200021c9

08010108 <__sinit>:
 8010108:	b510      	push	{r4, lr}
 801010a:	4604      	mov	r4, r0
 801010c:	f7ff fff0 	bl	80100f0 <__sfp_lock_acquire>
 8010110:	6a23      	ldr	r3, [r4, #32]
 8010112:	b11b      	cbz	r3, 801011c <__sinit+0x14>
 8010114:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010118:	f7ff bff0 	b.w	80100fc <__sfp_lock_release>
 801011c:	4b04      	ldr	r3, [pc, #16]	@ (8010130 <__sinit+0x28>)
 801011e:	6223      	str	r3, [r4, #32]
 8010120:	4b04      	ldr	r3, [pc, #16]	@ (8010134 <__sinit+0x2c>)
 8010122:	681b      	ldr	r3, [r3, #0]
 8010124:	2b00      	cmp	r3, #0
 8010126:	d1f5      	bne.n	8010114 <__sinit+0xc>
 8010128:	f7ff ffc4 	bl	80100b4 <global_stdio_init.part.0>
 801012c:	e7f2      	b.n	8010114 <__sinit+0xc>
 801012e:	bf00      	nop
 8010130:	08010075 	.word	0x08010075
 8010134:	200021c0 	.word	0x200021c0

08010138 <_fwalk_sglue>:
 8010138:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801013c:	4607      	mov	r7, r0
 801013e:	4688      	mov	r8, r1
 8010140:	4614      	mov	r4, r2
 8010142:	2600      	movs	r6, #0
 8010144:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010148:	f1b9 0901 	subs.w	r9, r9, #1
 801014c:	d505      	bpl.n	801015a <_fwalk_sglue+0x22>
 801014e:	6824      	ldr	r4, [r4, #0]
 8010150:	2c00      	cmp	r4, #0
 8010152:	d1f7      	bne.n	8010144 <_fwalk_sglue+0xc>
 8010154:	4630      	mov	r0, r6
 8010156:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801015a:	89ab      	ldrh	r3, [r5, #12]
 801015c:	2b01      	cmp	r3, #1
 801015e:	d907      	bls.n	8010170 <_fwalk_sglue+0x38>
 8010160:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010164:	3301      	adds	r3, #1
 8010166:	d003      	beq.n	8010170 <_fwalk_sglue+0x38>
 8010168:	4629      	mov	r1, r5
 801016a:	4638      	mov	r0, r7
 801016c:	47c0      	blx	r8
 801016e:	4306      	orrs	r6, r0
 8010170:	3568      	adds	r5, #104	@ 0x68
 8010172:	e7e9      	b.n	8010148 <_fwalk_sglue+0x10>

08010174 <__sread>:
 8010174:	b510      	push	{r4, lr}
 8010176:	460c      	mov	r4, r1
 8010178:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801017c:	f000 f868 	bl	8010250 <_read_r>
 8010180:	2800      	cmp	r0, #0
 8010182:	bfab      	itete	ge
 8010184:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8010186:	89a3      	ldrhlt	r3, [r4, #12]
 8010188:	181b      	addge	r3, r3, r0
 801018a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801018e:	bfac      	ite	ge
 8010190:	6563      	strge	r3, [r4, #84]	@ 0x54
 8010192:	81a3      	strhlt	r3, [r4, #12]
 8010194:	bd10      	pop	{r4, pc}

08010196 <__swrite>:
 8010196:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801019a:	461f      	mov	r7, r3
 801019c:	898b      	ldrh	r3, [r1, #12]
 801019e:	05db      	lsls	r3, r3, #23
 80101a0:	4605      	mov	r5, r0
 80101a2:	460c      	mov	r4, r1
 80101a4:	4616      	mov	r6, r2
 80101a6:	d505      	bpl.n	80101b4 <__swrite+0x1e>
 80101a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80101ac:	2302      	movs	r3, #2
 80101ae:	2200      	movs	r2, #0
 80101b0:	f000 f83c 	bl	801022c <_lseek_r>
 80101b4:	89a3      	ldrh	r3, [r4, #12]
 80101b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80101ba:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80101be:	81a3      	strh	r3, [r4, #12]
 80101c0:	4632      	mov	r2, r6
 80101c2:	463b      	mov	r3, r7
 80101c4:	4628      	mov	r0, r5
 80101c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80101ca:	f000 b853 	b.w	8010274 <_write_r>

080101ce <__sseek>:
 80101ce:	b510      	push	{r4, lr}
 80101d0:	460c      	mov	r4, r1
 80101d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80101d6:	f000 f829 	bl	801022c <_lseek_r>
 80101da:	1c43      	adds	r3, r0, #1
 80101dc:	89a3      	ldrh	r3, [r4, #12]
 80101de:	bf15      	itete	ne
 80101e0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80101e2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80101e6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80101ea:	81a3      	strheq	r3, [r4, #12]
 80101ec:	bf18      	it	ne
 80101ee:	81a3      	strhne	r3, [r4, #12]
 80101f0:	bd10      	pop	{r4, pc}

080101f2 <__sclose>:
 80101f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80101f6:	f000 b809 	b.w	801020c <_close_r>

080101fa <memset>:
 80101fa:	4402      	add	r2, r0
 80101fc:	4603      	mov	r3, r0
 80101fe:	4293      	cmp	r3, r2
 8010200:	d100      	bne.n	8010204 <memset+0xa>
 8010202:	4770      	bx	lr
 8010204:	f803 1b01 	strb.w	r1, [r3], #1
 8010208:	e7f9      	b.n	80101fe <memset+0x4>
	...

0801020c <_close_r>:
 801020c:	b538      	push	{r3, r4, r5, lr}
 801020e:	4d06      	ldr	r5, [pc, #24]	@ (8010228 <_close_r+0x1c>)
 8010210:	2300      	movs	r3, #0
 8010212:	4604      	mov	r4, r0
 8010214:	4608      	mov	r0, r1
 8010216:	602b      	str	r3, [r5, #0]
 8010218:	f7f6 ffab 	bl	8007172 <_close>
 801021c:	1c43      	adds	r3, r0, #1
 801021e:	d102      	bne.n	8010226 <_close_r+0x1a>
 8010220:	682b      	ldr	r3, [r5, #0]
 8010222:	b103      	cbz	r3, 8010226 <_close_r+0x1a>
 8010224:	6023      	str	r3, [r4, #0]
 8010226:	bd38      	pop	{r3, r4, r5, pc}
 8010228:	200021c4 	.word	0x200021c4

0801022c <_lseek_r>:
 801022c:	b538      	push	{r3, r4, r5, lr}
 801022e:	4d07      	ldr	r5, [pc, #28]	@ (801024c <_lseek_r+0x20>)
 8010230:	4604      	mov	r4, r0
 8010232:	4608      	mov	r0, r1
 8010234:	4611      	mov	r1, r2
 8010236:	2200      	movs	r2, #0
 8010238:	602a      	str	r2, [r5, #0]
 801023a:	461a      	mov	r2, r3
 801023c:	f7f6 ffc0 	bl	80071c0 <_lseek>
 8010240:	1c43      	adds	r3, r0, #1
 8010242:	d102      	bne.n	801024a <_lseek_r+0x1e>
 8010244:	682b      	ldr	r3, [r5, #0]
 8010246:	b103      	cbz	r3, 801024a <_lseek_r+0x1e>
 8010248:	6023      	str	r3, [r4, #0]
 801024a:	bd38      	pop	{r3, r4, r5, pc}
 801024c:	200021c4 	.word	0x200021c4

08010250 <_read_r>:
 8010250:	b538      	push	{r3, r4, r5, lr}
 8010252:	4d07      	ldr	r5, [pc, #28]	@ (8010270 <_read_r+0x20>)
 8010254:	4604      	mov	r4, r0
 8010256:	4608      	mov	r0, r1
 8010258:	4611      	mov	r1, r2
 801025a:	2200      	movs	r2, #0
 801025c:	602a      	str	r2, [r5, #0]
 801025e:	461a      	mov	r2, r3
 8010260:	f7f6 ff4e 	bl	8007100 <_read>
 8010264:	1c43      	adds	r3, r0, #1
 8010266:	d102      	bne.n	801026e <_read_r+0x1e>
 8010268:	682b      	ldr	r3, [r5, #0]
 801026a:	b103      	cbz	r3, 801026e <_read_r+0x1e>
 801026c:	6023      	str	r3, [r4, #0]
 801026e:	bd38      	pop	{r3, r4, r5, pc}
 8010270:	200021c4 	.word	0x200021c4

08010274 <_write_r>:
 8010274:	b538      	push	{r3, r4, r5, lr}
 8010276:	4d07      	ldr	r5, [pc, #28]	@ (8010294 <_write_r+0x20>)
 8010278:	4604      	mov	r4, r0
 801027a:	4608      	mov	r0, r1
 801027c:	4611      	mov	r1, r2
 801027e:	2200      	movs	r2, #0
 8010280:	602a      	str	r2, [r5, #0]
 8010282:	461a      	mov	r2, r3
 8010284:	f7f6 ff59 	bl	800713a <_write>
 8010288:	1c43      	adds	r3, r0, #1
 801028a:	d102      	bne.n	8010292 <_write_r+0x1e>
 801028c:	682b      	ldr	r3, [r5, #0]
 801028e:	b103      	cbz	r3, 8010292 <_write_r+0x1e>
 8010290:	6023      	str	r3, [r4, #0]
 8010292:	bd38      	pop	{r3, r4, r5, pc}
 8010294:	200021c4 	.word	0x200021c4

08010298 <__errno>:
 8010298:	4b01      	ldr	r3, [pc, #4]	@ (80102a0 <__errno+0x8>)
 801029a:	6818      	ldr	r0, [r3, #0]
 801029c:	4770      	bx	lr
 801029e:	bf00      	nop
 80102a0:	20000080 	.word	0x20000080

080102a4 <__libc_init_array>:
 80102a4:	b570      	push	{r4, r5, r6, lr}
 80102a6:	4d0d      	ldr	r5, [pc, #52]	@ (80102dc <__libc_init_array+0x38>)
 80102a8:	4c0d      	ldr	r4, [pc, #52]	@ (80102e0 <__libc_init_array+0x3c>)
 80102aa:	1b64      	subs	r4, r4, r5
 80102ac:	10a4      	asrs	r4, r4, #2
 80102ae:	2600      	movs	r6, #0
 80102b0:	42a6      	cmp	r6, r4
 80102b2:	d109      	bne.n	80102c8 <__libc_init_array+0x24>
 80102b4:	4d0b      	ldr	r5, [pc, #44]	@ (80102e4 <__libc_init_array+0x40>)
 80102b6:	4c0c      	ldr	r4, [pc, #48]	@ (80102e8 <__libc_init_array+0x44>)
 80102b8:	f001 fb38 	bl	801192c <_init>
 80102bc:	1b64      	subs	r4, r4, r5
 80102be:	10a4      	asrs	r4, r4, #2
 80102c0:	2600      	movs	r6, #0
 80102c2:	42a6      	cmp	r6, r4
 80102c4:	d105      	bne.n	80102d2 <__libc_init_array+0x2e>
 80102c6:	bd70      	pop	{r4, r5, r6, pc}
 80102c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80102cc:	4798      	blx	r3
 80102ce:	3601      	adds	r6, #1
 80102d0:	e7ee      	b.n	80102b0 <__libc_init_array+0xc>
 80102d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80102d6:	4798      	blx	r3
 80102d8:	3601      	adds	r6, #1
 80102da:	e7f2      	b.n	80102c2 <__libc_init_array+0x1e>
 80102dc:	08011cbc 	.word	0x08011cbc
 80102e0:	08011cbc 	.word	0x08011cbc
 80102e4:	08011cbc 	.word	0x08011cbc
 80102e8:	08011cc0 	.word	0x08011cc0

080102ec <__retarget_lock_init_recursive>:
 80102ec:	4770      	bx	lr

080102ee <__retarget_lock_acquire_recursive>:
 80102ee:	4770      	bx	lr

080102f0 <__retarget_lock_release_recursive>:
 80102f0:	4770      	bx	lr

080102f2 <memcpy>:
 80102f2:	440a      	add	r2, r1
 80102f4:	4291      	cmp	r1, r2
 80102f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80102fa:	d100      	bne.n	80102fe <memcpy+0xc>
 80102fc:	4770      	bx	lr
 80102fe:	b510      	push	{r4, lr}
 8010300:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010304:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010308:	4291      	cmp	r1, r2
 801030a:	d1f9      	bne.n	8010300 <memcpy+0xe>
 801030c:	bd10      	pop	{r4, pc}
	...

08010310 <__assert_func>:
 8010310:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010312:	4614      	mov	r4, r2
 8010314:	461a      	mov	r2, r3
 8010316:	4b09      	ldr	r3, [pc, #36]	@ (801033c <__assert_func+0x2c>)
 8010318:	681b      	ldr	r3, [r3, #0]
 801031a:	4605      	mov	r5, r0
 801031c:	68d8      	ldr	r0, [r3, #12]
 801031e:	b954      	cbnz	r4, 8010336 <__assert_func+0x26>
 8010320:	4b07      	ldr	r3, [pc, #28]	@ (8010340 <__assert_func+0x30>)
 8010322:	461c      	mov	r4, r3
 8010324:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010328:	9100      	str	r1, [sp, #0]
 801032a:	462b      	mov	r3, r5
 801032c:	4905      	ldr	r1, [pc, #20]	@ (8010344 <__assert_func+0x34>)
 801032e:	f000 fc89 	bl	8010c44 <fiprintf>
 8010332:	f000 fd3d 	bl	8010db0 <abort>
 8010336:	4b04      	ldr	r3, [pc, #16]	@ (8010348 <__assert_func+0x38>)
 8010338:	e7f4      	b.n	8010324 <__assert_func+0x14>
 801033a:	bf00      	nop
 801033c:	20000080 	.word	0x20000080
 8010340:	08011c68 	.word	0x08011c68
 8010344:	08011c3a 	.word	0x08011c3a
 8010348:	08011c2d 	.word	0x08011c2d

0801034c <_free_r>:
 801034c:	b538      	push	{r3, r4, r5, lr}
 801034e:	4605      	mov	r5, r0
 8010350:	2900      	cmp	r1, #0
 8010352:	d041      	beq.n	80103d8 <_free_r+0x8c>
 8010354:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010358:	1f0c      	subs	r4, r1, #4
 801035a:	2b00      	cmp	r3, #0
 801035c:	bfb8      	it	lt
 801035e:	18e4      	addlt	r4, r4, r3
 8010360:	f000 f8e8 	bl	8010534 <__malloc_lock>
 8010364:	4a1d      	ldr	r2, [pc, #116]	@ (80103dc <_free_r+0x90>)
 8010366:	6813      	ldr	r3, [r2, #0]
 8010368:	b933      	cbnz	r3, 8010378 <_free_r+0x2c>
 801036a:	6063      	str	r3, [r4, #4]
 801036c:	6014      	str	r4, [r2, #0]
 801036e:	4628      	mov	r0, r5
 8010370:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010374:	f000 b8e4 	b.w	8010540 <__malloc_unlock>
 8010378:	42a3      	cmp	r3, r4
 801037a:	d908      	bls.n	801038e <_free_r+0x42>
 801037c:	6820      	ldr	r0, [r4, #0]
 801037e:	1821      	adds	r1, r4, r0
 8010380:	428b      	cmp	r3, r1
 8010382:	bf01      	itttt	eq
 8010384:	6819      	ldreq	r1, [r3, #0]
 8010386:	685b      	ldreq	r3, [r3, #4]
 8010388:	1809      	addeq	r1, r1, r0
 801038a:	6021      	streq	r1, [r4, #0]
 801038c:	e7ed      	b.n	801036a <_free_r+0x1e>
 801038e:	461a      	mov	r2, r3
 8010390:	685b      	ldr	r3, [r3, #4]
 8010392:	b10b      	cbz	r3, 8010398 <_free_r+0x4c>
 8010394:	42a3      	cmp	r3, r4
 8010396:	d9fa      	bls.n	801038e <_free_r+0x42>
 8010398:	6811      	ldr	r1, [r2, #0]
 801039a:	1850      	adds	r0, r2, r1
 801039c:	42a0      	cmp	r0, r4
 801039e:	d10b      	bne.n	80103b8 <_free_r+0x6c>
 80103a0:	6820      	ldr	r0, [r4, #0]
 80103a2:	4401      	add	r1, r0
 80103a4:	1850      	adds	r0, r2, r1
 80103a6:	4283      	cmp	r3, r0
 80103a8:	6011      	str	r1, [r2, #0]
 80103aa:	d1e0      	bne.n	801036e <_free_r+0x22>
 80103ac:	6818      	ldr	r0, [r3, #0]
 80103ae:	685b      	ldr	r3, [r3, #4]
 80103b0:	6053      	str	r3, [r2, #4]
 80103b2:	4408      	add	r0, r1
 80103b4:	6010      	str	r0, [r2, #0]
 80103b6:	e7da      	b.n	801036e <_free_r+0x22>
 80103b8:	d902      	bls.n	80103c0 <_free_r+0x74>
 80103ba:	230c      	movs	r3, #12
 80103bc:	602b      	str	r3, [r5, #0]
 80103be:	e7d6      	b.n	801036e <_free_r+0x22>
 80103c0:	6820      	ldr	r0, [r4, #0]
 80103c2:	1821      	adds	r1, r4, r0
 80103c4:	428b      	cmp	r3, r1
 80103c6:	bf04      	itt	eq
 80103c8:	6819      	ldreq	r1, [r3, #0]
 80103ca:	685b      	ldreq	r3, [r3, #4]
 80103cc:	6063      	str	r3, [r4, #4]
 80103ce:	bf04      	itt	eq
 80103d0:	1809      	addeq	r1, r1, r0
 80103d2:	6021      	streq	r1, [r4, #0]
 80103d4:	6054      	str	r4, [r2, #4]
 80103d6:	e7ca      	b.n	801036e <_free_r+0x22>
 80103d8:	bd38      	pop	{r3, r4, r5, pc}
 80103da:	bf00      	nop
 80103dc:	200021d0 	.word	0x200021d0

080103e0 <malloc>:
 80103e0:	4b02      	ldr	r3, [pc, #8]	@ (80103ec <malloc+0xc>)
 80103e2:	4601      	mov	r1, r0
 80103e4:	6818      	ldr	r0, [r3, #0]
 80103e6:	f000 b825 	b.w	8010434 <_malloc_r>
 80103ea:	bf00      	nop
 80103ec:	20000080 	.word	0x20000080

080103f0 <sbrk_aligned>:
 80103f0:	b570      	push	{r4, r5, r6, lr}
 80103f2:	4e0f      	ldr	r6, [pc, #60]	@ (8010430 <sbrk_aligned+0x40>)
 80103f4:	460c      	mov	r4, r1
 80103f6:	6831      	ldr	r1, [r6, #0]
 80103f8:	4605      	mov	r5, r0
 80103fa:	b911      	cbnz	r1, 8010402 <sbrk_aligned+0x12>
 80103fc:	f000 fcc8 	bl	8010d90 <_sbrk_r>
 8010400:	6030      	str	r0, [r6, #0]
 8010402:	4621      	mov	r1, r4
 8010404:	4628      	mov	r0, r5
 8010406:	f000 fcc3 	bl	8010d90 <_sbrk_r>
 801040a:	1c43      	adds	r3, r0, #1
 801040c:	d103      	bne.n	8010416 <sbrk_aligned+0x26>
 801040e:	f04f 34ff 	mov.w	r4, #4294967295
 8010412:	4620      	mov	r0, r4
 8010414:	bd70      	pop	{r4, r5, r6, pc}
 8010416:	1cc4      	adds	r4, r0, #3
 8010418:	f024 0403 	bic.w	r4, r4, #3
 801041c:	42a0      	cmp	r0, r4
 801041e:	d0f8      	beq.n	8010412 <sbrk_aligned+0x22>
 8010420:	1a21      	subs	r1, r4, r0
 8010422:	4628      	mov	r0, r5
 8010424:	f000 fcb4 	bl	8010d90 <_sbrk_r>
 8010428:	3001      	adds	r0, #1
 801042a:	d1f2      	bne.n	8010412 <sbrk_aligned+0x22>
 801042c:	e7ef      	b.n	801040e <sbrk_aligned+0x1e>
 801042e:	bf00      	nop
 8010430:	200021cc 	.word	0x200021cc

08010434 <_malloc_r>:
 8010434:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010438:	1ccd      	adds	r5, r1, #3
 801043a:	f025 0503 	bic.w	r5, r5, #3
 801043e:	3508      	adds	r5, #8
 8010440:	2d0c      	cmp	r5, #12
 8010442:	bf38      	it	cc
 8010444:	250c      	movcc	r5, #12
 8010446:	2d00      	cmp	r5, #0
 8010448:	4606      	mov	r6, r0
 801044a:	db01      	blt.n	8010450 <_malloc_r+0x1c>
 801044c:	42a9      	cmp	r1, r5
 801044e:	d904      	bls.n	801045a <_malloc_r+0x26>
 8010450:	230c      	movs	r3, #12
 8010452:	6033      	str	r3, [r6, #0]
 8010454:	2000      	movs	r0, #0
 8010456:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801045a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8010530 <_malloc_r+0xfc>
 801045e:	f000 f869 	bl	8010534 <__malloc_lock>
 8010462:	f8d8 3000 	ldr.w	r3, [r8]
 8010466:	461c      	mov	r4, r3
 8010468:	bb44      	cbnz	r4, 80104bc <_malloc_r+0x88>
 801046a:	4629      	mov	r1, r5
 801046c:	4630      	mov	r0, r6
 801046e:	f7ff ffbf 	bl	80103f0 <sbrk_aligned>
 8010472:	1c43      	adds	r3, r0, #1
 8010474:	4604      	mov	r4, r0
 8010476:	d158      	bne.n	801052a <_malloc_r+0xf6>
 8010478:	f8d8 4000 	ldr.w	r4, [r8]
 801047c:	4627      	mov	r7, r4
 801047e:	2f00      	cmp	r7, #0
 8010480:	d143      	bne.n	801050a <_malloc_r+0xd6>
 8010482:	2c00      	cmp	r4, #0
 8010484:	d04b      	beq.n	801051e <_malloc_r+0xea>
 8010486:	6823      	ldr	r3, [r4, #0]
 8010488:	4639      	mov	r1, r7
 801048a:	4630      	mov	r0, r6
 801048c:	eb04 0903 	add.w	r9, r4, r3
 8010490:	f000 fc7e 	bl	8010d90 <_sbrk_r>
 8010494:	4581      	cmp	r9, r0
 8010496:	d142      	bne.n	801051e <_malloc_r+0xea>
 8010498:	6821      	ldr	r1, [r4, #0]
 801049a:	1a6d      	subs	r5, r5, r1
 801049c:	4629      	mov	r1, r5
 801049e:	4630      	mov	r0, r6
 80104a0:	f7ff ffa6 	bl	80103f0 <sbrk_aligned>
 80104a4:	3001      	adds	r0, #1
 80104a6:	d03a      	beq.n	801051e <_malloc_r+0xea>
 80104a8:	6823      	ldr	r3, [r4, #0]
 80104aa:	442b      	add	r3, r5
 80104ac:	6023      	str	r3, [r4, #0]
 80104ae:	f8d8 3000 	ldr.w	r3, [r8]
 80104b2:	685a      	ldr	r2, [r3, #4]
 80104b4:	bb62      	cbnz	r2, 8010510 <_malloc_r+0xdc>
 80104b6:	f8c8 7000 	str.w	r7, [r8]
 80104ba:	e00f      	b.n	80104dc <_malloc_r+0xa8>
 80104bc:	6822      	ldr	r2, [r4, #0]
 80104be:	1b52      	subs	r2, r2, r5
 80104c0:	d420      	bmi.n	8010504 <_malloc_r+0xd0>
 80104c2:	2a0b      	cmp	r2, #11
 80104c4:	d917      	bls.n	80104f6 <_malloc_r+0xc2>
 80104c6:	1961      	adds	r1, r4, r5
 80104c8:	42a3      	cmp	r3, r4
 80104ca:	6025      	str	r5, [r4, #0]
 80104cc:	bf18      	it	ne
 80104ce:	6059      	strne	r1, [r3, #4]
 80104d0:	6863      	ldr	r3, [r4, #4]
 80104d2:	bf08      	it	eq
 80104d4:	f8c8 1000 	streq.w	r1, [r8]
 80104d8:	5162      	str	r2, [r4, r5]
 80104da:	604b      	str	r3, [r1, #4]
 80104dc:	4630      	mov	r0, r6
 80104de:	f000 f82f 	bl	8010540 <__malloc_unlock>
 80104e2:	f104 000b 	add.w	r0, r4, #11
 80104e6:	1d23      	adds	r3, r4, #4
 80104e8:	f020 0007 	bic.w	r0, r0, #7
 80104ec:	1ac2      	subs	r2, r0, r3
 80104ee:	bf1c      	itt	ne
 80104f0:	1a1b      	subne	r3, r3, r0
 80104f2:	50a3      	strne	r3, [r4, r2]
 80104f4:	e7af      	b.n	8010456 <_malloc_r+0x22>
 80104f6:	6862      	ldr	r2, [r4, #4]
 80104f8:	42a3      	cmp	r3, r4
 80104fa:	bf0c      	ite	eq
 80104fc:	f8c8 2000 	streq.w	r2, [r8]
 8010500:	605a      	strne	r2, [r3, #4]
 8010502:	e7eb      	b.n	80104dc <_malloc_r+0xa8>
 8010504:	4623      	mov	r3, r4
 8010506:	6864      	ldr	r4, [r4, #4]
 8010508:	e7ae      	b.n	8010468 <_malloc_r+0x34>
 801050a:	463c      	mov	r4, r7
 801050c:	687f      	ldr	r7, [r7, #4]
 801050e:	e7b6      	b.n	801047e <_malloc_r+0x4a>
 8010510:	461a      	mov	r2, r3
 8010512:	685b      	ldr	r3, [r3, #4]
 8010514:	42a3      	cmp	r3, r4
 8010516:	d1fb      	bne.n	8010510 <_malloc_r+0xdc>
 8010518:	2300      	movs	r3, #0
 801051a:	6053      	str	r3, [r2, #4]
 801051c:	e7de      	b.n	80104dc <_malloc_r+0xa8>
 801051e:	230c      	movs	r3, #12
 8010520:	6033      	str	r3, [r6, #0]
 8010522:	4630      	mov	r0, r6
 8010524:	f000 f80c 	bl	8010540 <__malloc_unlock>
 8010528:	e794      	b.n	8010454 <_malloc_r+0x20>
 801052a:	6005      	str	r5, [r0, #0]
 801052c:	e7d6      	b.n	80104dc <_malloc_r+0xa8>
 801052e:	bf00      	nop
 8010530:	200021d0 	.word	0x200021d0

08010534 <__malloc_lock>:
 8010534:	4801      	ldr	r0, [pc, #4]	@ (801053c <__malloc_lock+0x8>)
 8010536:	f7ff beda 	b.w	80102ee <__retarget_lock_acquire_recursive>
 801053a:	bf00      	nop
 801053c:	200021c8 	.word	0x200021c8

08010540 <__malloc_unlock>:
 8010540:	4801      	ldr	r0, [pc, #4]	@ (8010548 <__malloc_unlock+0x8>)
 8010542:	f7ff bed5 	b.w	80102f0 <__retarget_lock_release_recursive>
 8010546:	bf00      	nop
 8010548:	200021c8 	.word	0x200021c8

0801054c <__sfputc_r>:
 801054c:	6893      	ldr	r3, [r2, #8]
 801054e:	3b01      	subs	r3, #1
 8010550:	2b00      	cmp	r3, #0
 8010552:	b410      	push	{r4}
 8010554:	6093      	str	r3, [r2, #8]
 8010556:	da08      	bge.n	801056a <__sfputc_r+0x1e>
 8010558:	6994      	ldr	r4, [r2, #24]
 801055a:	42a3      	cmp	r3, r4
 801055c:	db01      	blt.n	8010562 <__sfputc_r+0x16>
 801055e:	290a      	cmp	r1, #10
 8010560:	d103      	bne.n	801056a <__sfputc_r+0x1e>
 8010562:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010566:	f000 bb7f 	b.w	8010c68 <__swbuf_r>
 801056a:	6813      	ldr	r3, [r2, #0]
 801056c:	1c58      	adds	r0, r3, #1
 801056e:	6010      	str	r0, [r2, #0]
 8010570:	7019      	strb	r1, [r3, #0]
 8010572:	4608      	mov	r0, r1
 8010574:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010578:	4770      	bx	lr

0801057a <__sfputs_r>:
 801057a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801057c:	4606      	mov	r6, r0
 801057e:	460f      	mov	r7, r1
 8010580:	4614      	mov	r4, r2
 8010582:	18d5      	adds	r5, r2, r3
 8010584:	42ac      	cmp	r4, r5
 8010586:	d101      	bne.n	801058c <__sfputs_r+0x12>
 8010588:	2000      	movs	r0, #0
 801058a:	e007      	b.n	801059c <__sfputs_r+0x22>
 801058c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010590:	463a      	mov	r2, r7
 8010592:	4630      	mov	r0, r6
 8010594:	f7ff ffda 	bl	801054c <__sfputc_r>
 8010598:	1c43      	adds	r3, r0, #1
 801059a:	d1f3      	bne.n	8010584 <__sfputs_r+0xa>
 801059c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080105a0 <_vfiprintf_r>:
 80105a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80105a4:	460d      	mov	r5, r1
 80105a6:	b09d      	sub	sp, #116	@ 0x74
 80105a8:	4614      	mov	r4, r2
 80105aa:	4698      	mov	r8, r3
 80105ac:	4606      	mov	r6, r0
 80105ae:	b118      	cbz	r0, 80105b8 <_vfiprintf_r+0x18>
 80105b0:	6a03      	ldr	r3, [r0, #32]
 80105b2:	b90b      	cbnz	r3, 80105b8 <_vfiprintf_r+0x18>
 80105b4:	f7ff fda8 	bl	8010108 <__sinit>
 80105b8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80105ba:	07d9      	lsls	r1, r3, #31
 80105bc:	d405      	bmi.n	80105ca <_vfiprintf_r+0x2a>
 80105be:	89ab      	ldrh	r3, [r5, #12]
 80105c0:	059a      	lsls	r2, r3, #22
 80105c2:	d402      	bmi.n	80105ca <_vfiprintf_r+0x2a>
 80105c4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80105c6:	f7ff fe92 	bl	80102ee <__retarget_lock_acquire_recursive>
 80105ca:	89ab      	ldrh	r3, [r5, #12]
 80105cc:	071b      	lsls	r3, r3, #28
 80105ce:	d501      	bpl.n	80105d4 <_vfiprintf_r+0x34>
 80105d0:	692b      	ldr	r3, [r5, #16]
 80105d2:	b99b      	cbnz	r3, 80105fc <_vfiprintf_r+0x5c>
 80105d4:	4629      	mov	r1, r5
 80105d6:	4630      	mov	r0, r6
 80105d8:	f000 fb84 	bl	8010ce4 <__swsetup_r>
 80105dc:	b170      	cbz	r0, 80105fc <_vfiprintf_r+0x5c>
 80105de:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80105e0:	07dc      	lsls	r4, r3, #31
 80105e2:	d504      	bpl.n	80105ee <_vfiprintf_r+0x4e>
 80105e4:	f04f 30ff 	mov.w	r0, #4294967295
 80105e8:	b01d      	add	sp, #116	@ 0x74
 80105ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80105ee:	89ab      	ldrh	r3, [r5, #12]
 80105f0:	0598      	lsls	r0, r3, #22
 80105f2:	d4f7      	bmi.n	80105e4 <_vfiprintf_r+0x44>
 80105f4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80105f6:	f7ff fe7b 	bl	80102f0 <__retarget_lock_release_recursive>
 80105fa:	e7f3      	b.n	80105e4 <_vfiprintf_r+0x44>
 80105fc:	2300      	movs	r3, #0
 80105fe:	9309      	str	r3, [sp, #36]	@ 0x24
 8010600:	2320      	movs	r3, #32
 8010602:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8010606:	f8cd 800c 	str.w	r8, [sp, #12]
 801060a:	2330      	movs	r3, #48	@ 0x30
 801060c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80107bc <_vfiprintf_r+0x21c>
 8010610:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8010614:	f04f 0901 	mov.w	r9, #1
 8010618:	4623      	mov	r3, r4
 801061a:	469a      	mov	sl, r3
 801061c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010620:	b10a      	cbz	r2, 8010626 <_vfiprintf_r+0x86>
 8010622:	2a25      	cmp	r2, #37	@ 0x25
 8010624:	d1f9      	bne.n	801061a <_vfiprintf_r+0x7a>
 8010626:	ebba 0b04 	subs.w	fp, sl, r4
 801062a:	d00b      	beq.n	8010644 <_vfiprintf_r+0xa4>
 801062c:	465b      	mov	r3, fp
 801062e:	4622      	mov	r2, r4
 8010630:	4629      	mov	r1, r5
 8010632:	4630      	mov	r0, r6
 8010634:	f7ff ffa1 	bl	801057a <__sfputs_r>
 8010638:	3001      	adds	r0, #1
 801063a:	f000 80a7 	beq.w	801078c <_vfiprintf_r+0x1ec>
 801063e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010640:	445a      	add	r2, fp
 8010642:	9209      	str	r2, [sp, #36]	@ 0x24
 8010644:	f89a 3000 	ldrb.w	r3, [sl]
 8010648:	2b00      	cmp	r3, #0
 801064a:	f000 809f 	beq.w	801078c <_vfiprintf_r+0x1ec>
 801064e:	2300      	movs	r3, #0
 8010650:	f04f 32ff 	mov.w	r2, #4294967295
 8010654:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010658:	f10a 0a01 	add.w	sl, sl, #1
 801065c:	9304      	str	r3, [sp, #16]
 801065e:	9307      	str	r3, [sp, #28]
 8010660:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8010664:	931a      	str	r3, [sp, #104]	@ 0x68
 8010666:	4654      	mov	r4, sl
 8010668:	2205      	movs	r2, #5
 801066a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801066e:	4853      	ldr	r0, [pc, #332]	@ (80107bc <_vfiprintf_r+0x21c>)
 8010670:	f7ef fd8e 	bl	8000190 <memchr>
 8010674:	9a04      	ldr	r2, [sp, #16]
 8010676:	b9d8      	cbnz	r0, 80106b0 <_vfiprintf_r+0x110>
 8010678:	06d1      	lsls	r1, r2, #27
 801067a:	bf44      	itt	mi
 801067c:	2320      	movmi	r3, #32
 801067e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010682:	0713      	lsls	r3, r2, #28
 8010684:	bf44      	itt	mi
 8010686:	232b      	movmi	r3, #43	@ 0x2b
 8010688:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801068c:	f89a 3000 	ldrb.w	r3, [sl]
 8010690:	2b2a      	cmp	r3, #42	@ 0x2a
 8010692:	d015      	beq.n	80106c0 <_vfiprintf_r+0x120>
 8010694:	9a07      	ldr	r2, [sp, #28]
 8010696:	4654      	mov	r4, sl
 8010698:	2000      	movs	r0, #0
 801069a:	f04f 0c0a 	mov.w	ip, #10
 801069e:	4621      	mov	r1, r4
 80106a0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80106a4:	3b30      	subs	r3, #48	@ 0x30
 80106a6:	2b09      	cmp	r3, #9
 80106a8:	d94b      	bls.n	8010742 <_vfiprintf_r+0x1a2>
 80106aa:	b1b0      	cbz	r0, 80106da <_vfiprintf_r+0x13a>
 80106ac:	9207      	str	r2, [sp, #28]
 80106ae:	e014      	b.n	80106da <_vfiprintf_r+0x13a>
 80106b0:	eba0 0308 	sub.w	r3, r0, r8
 80106b4:	fa09 f303 	lsl.w	r3, r9, r3
 80106b8:	4313      	orrs	r3, r2
 80106ba:	9304      	str	r3, [sp, #16]
 80106bc:	46a2      	mov	sl, r4
 80106be:	e7d2      	b.n	8010666 <_vfiprintf_r+0xc6>
 80106c0:	9b03      	ldr	r3, [sp, #12]
 80106c2:	1d19      	adds	r1, r3, #4
 80106c4:	681b      	ldr	r3, [r3, #0]
 80106c6:	9103      	str	r1, [sp, #12]
 80106c8:	2b00      	cmp	r3, #0
 80106ca:	bfbb      	ittet	lt
 80106cc:	425b      	neglt	r3, r3
 80106ce:	f042 0202 	orrlt.w	r2, r2, #2
 80106d2:	9307      	strge	r3, [sp, #28]
 80106d4:	9307      	strlt	r3, [sp, #28]
 80106d6:	bfb8      	it	lt
 80106d8:	9204      	strlt	r2, [sp, #16]
 80106da:	7823      	ldrb	r3, [r4, #0]
 80106dc:	2b2e      	cmp	r3, #46	@ 0x2e
 80106de:	d10a      	bne.n	80106f6 <_vfiprintf_r+0x156>
 80106e0:	7863      	ldrb	r3, [r4, #1]
 80106e2:	2b2a      	cmp	r3, #42	@ 0x2a
 80106e4:	d132      	bne.n	801074c <_vfiprintf_r+0x1ac>
 80106e6:	9b03      	ldr	r3, [sp, #12]
 80106e8:	1d1a      	adds	r2, r3, #4
 80106ea:	681b      	ldr	r3, [r3, #0]
 80106ec:	9203      	str	r2, [sp, #12]
 80106ee:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80106f2:	3402      	adds	r4, #2
 80106f4:	9305      	str	r3, [sp, #20]
 80106f6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80107cc <_vfiprintf_r+0x22c>
 80106fa:	7821      	ldrb	r1, [r4, #0]
 80106fc:	2203      	movs	r2, #3
 80106fe:	4650      	mov	r0, sl
 8010700:	f7ef fd46 	bl	8000190 <memchr>
 8010704:	b138      	cbz	r0, 8010716 <_vfiprintf_r+0x176>
 8010706:	9b04      	ldr	r3, [sp, #16]
 8010708:	eba0 000a 	sub.w	r0, r0, sl
 801070c:	2240      	movs	r2, #64	@ 0x40
 801070e:	4082      	lsls	r2, r0
 8010710:	4313      	orrs	r3, r2
 8010712:	3401      	adds	r4, #1
 8010714:	9304      	str	r3, [sp, #16]
 8010716:	f814 1b01 	ldrb.w	r1, [r4], #1
 801071a:	4829      	ldr	r0, [pc, #164]	@ (80107c0 <_vfiprintf_r+0x220>)
 801071c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8010720:	2206      	movs	r2, #6
 8010722:	f7ef fd35 	bl	8000190 <memchr>
 8010726:	2800      	cmp	r0, #0
 8010728:	d03f      	beq.n	80107aa <_vfiprintf_r+0x20a>
 801072a:	4b26      	ldr	r3, [pc, #152]	@ (80107c4 <_vfiprintf_r+0x224>)
 801072c:	bb1b      	cbnz	r3, 8010776 <_vfiprintf_r+0x1d6>
 801072e:	9b03      	ldr	r3, [sp, #12]
 8010730:	3307      	adds	r3, #7
 8010732:	f023 0307 	bic.w	r3, r3, #7
 8010736:	3308      	adds	r3, #8
 8010738:	9303      	str	r3, [sp, #12]
 801073a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801073c:	443b      	add	r3, r7
 801073e:	9309      	str	r3, [sp, #36]	@ 0x24
 8010740:	e76a      	b.n	8010618 <_vfiprintf_r+0x78>
 8010742:	fb0c 3202 	mla	r2, ip, r2, r3
 8010746:	460c      	mov	r4, r1
 8010748:	2001      	movs	r0, #1
 801074a:	e7a8      	b.n	801069e <_vfiprintf_r+0xfe>
 801074c:	2300      	movs	r3, #0
 801074e:	3401      	adds	r4, #1
 8010750:	9305      	str	r3, [sp, #20]
 8010752:	4619      	mov	r1, r3
 8010754:	f04f 0c0a 	mov.w	ip, #10
 8010758:	4620      	mov	r0, r4
 801075a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801075e:	3a30      	subs	r2, #48	@ 0x30
 8010760:	2a09      	cmp	r2, #9
 8010762:	d903      	bls.n	801076c <_vfiprintf_r+0x1cc>
 8010764:	2b00      	cmp	r3, #0
 8010766:	d0c6      	beq.n	80106f6 <_vfiprintf_r+0x156>
 8010768:	9105      	str	r1, [sp, #20]
 801076a:	e7c4      	b.n	80106f6 <_vfiprintf_r+0x156>
 801076c:	fb0c 2101 	mla	r1, ip, r1, r2
 8010770:	4604      	mov	r4, r0
 8010772:	2301      	movs	r3, #1
 8010774:	e7f0      	b.n	8010758 <_vfiprintf_r+0x1b8>
 8010776:	ab03      	add	r3, sp, #12
 8010778:	9300      	str	r3, [sp, #0]
 801077a:	462a      	mov	r2, r5
 801077c:	4b12      	ldr	r3, [pc, #72]	@ (80107c8 <_vfiprintf_r+0x228>)
 801077e:	a904      	add	r1, sp, #16
 8010780:	4630      	mov	r0, r6
 8010782:	f3af 8000 	nop.w
 8010786:	4607      	mov	r7, r0
 8010788:	1c78      	adds	r0, r7, #1
 801078a:	d1d6      	bne.n	801073a <_vfiprintf_r+0x19a>
 801078c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801078e:	07d9      	lsls	r1, r3, #31
 8010790:	d405      	bmi.n	801079e <_vfiprintf_r+0x1fe>
 8010792:	89ab      	ldrh	r3, [r5, #12]
 8010794:	059a      	lsls	r2, r3, #22
 8010796:	d402      	bmi.n	801079e <_vfiprintf_r+0x1fe>
 8010798:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801079a:	f7ff fda9 	bl	80102f0 <__retarget_lock_release_recursive>
 801079e:	89ab      	ldrh	r3, [r5, #12]
 80107a0:	065b      	lsls	r3, r3, #25
 80107a2:	f53f af1f 	bmi.w	80105e4 <_vfiprintf_r+0x44>
 80107a6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80107a8:	e71e      	b.n	80105e8 <_vfiprintf_r+0x48>
 80107aa:	ab03      	add	r3, sp, #12
 80107ac:	9300      	str	r3, [sp, #0]
 80107ae:	462a      	mov	r2, r5
 80107b0:	4b05      	ldr	r3, [pc, #20]	@ (80107c8 <_vfiprintf_r+0x228>)
 80107b2:	a904      	add	r1, sp, #16
 80107b4:	4630      	mov	r0, r6
 80107b6:	f000 f879 	bl	80108ac <_printf_i>
 80107ba:	e7e4      	b.n	8010786 <_vfiprintf_r+0x1e6>
 80107bc:	08011c69 	.word	0x08011c69
 80107c0:	08011c73 	.word	0x08011c73
 80107c4:	00000000 	.word	0x00000000
 80107c8:	0801057b 	.word	0x0801057b
 80107cc:	08011c6f 	.word	0x08011c6f

080107d0 <_printf_common>:
 80107d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80107d4:	4616      	mov	r6, r2
 80107d6:	4698      	mov	r8, r3
 80107d8:	688a      	ldr	r2, [r1, #8]
 80107da:	690b      	ldr	r3, [r1, #16]
 80107dc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80107e0:	4293      	cmp	r3, r2
 80107e2:	bfb8      	it	lt
 80107e4:	4613      	movlt	r3, r2
 80107e6:	6033      	str	r3, [r6, #0]
 80107e8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80107ec:	4607      	mov	r7, r0
 80107ee:	460c      	mov	r4, r1
 80107f0:	b10a      	cbz	r2, 80107f6 <_printf_common+0x26>
 80107f2:	3301      	adds	r3, #1
 80107f4:	6033      	str	r3, [r6, #0]
 80107f6:	6823      	ldr	r3, [r4, #0]
 80107f8:	0699      	lsls	r1, r3, #26
 80107fa:	bf42      	ittt	mi
 80107fc:	6833      	ldrmi	r3, [r6, #0]
 80107fe:	3302      	addmi	r3, #2
 8010800:	6033      	strmi	r3, [r6, #0]
 8010802:	6825      	ldr	r5, [r4, #0]
 8010804:	f015 0506 	ands.w	r5, r5, #6
 8010808:	d106      	bne.n	8010818 <_printf_common+0x48>
 801080a:	f104 0a19 	add.w	sl, r4, #25
 801080e:	68e3      	ldr	r3, [r4, #12]
 8010810:	6832      	ldr	r2, [r6, #0]
 8010812:	1a9b      	subs	r3, r3, r2
 8010814:	42ab      	cmp	r3, r5
 8010816:	dc26      	bgt.n	8010866 <_printf_common+0x96>
 8010818:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801081c:	6822      	ldr	r2, [r4, #0]
 801081e:	3b00      	subs	r3, #0
 8010820:	bf18      	it	ne
 8010822:	2301      	movne	r3, #1
 8010824:	0692      	lsls	r2, r2, #26
 8010826:	d42b      	bmi.n	8010880 <_printf_common+0xb0>
 8010828:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801082c:	4641      	mov	r1, r8
 801082e:	4638      	mov	r0, r7
 8010830:	47c8      	blx	r9
 8010832:	3001      	adds	r0, #1
 8010834:	d01e      	beq.n	8010874 <_printf_common+0xa4>
 8010836:	6823      	ldr	r3, [r4, #0]
 8010838:	6922      	ldr	r2, [r4, #16]
 801083a:	f003 0306 	and.w	r3, r3, #6
 801083e:	2b04      	cmp	r3, #4
 8010840:	bf02      	ittt	eq
 8010842:	68e5      	ldreq	r5, [r4, #12]
 8010844:	6833      	ldreq	r3, [r6, #0]
 8010846:	1aed      	subeq	r5, r5, r3
 8010848:	68a3      	ldr	r3, [r4, #8]
 801084a:	bf0c      	ite	eq
 801084c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010850:	2500      	movne	r5, #0
 8010852:	4293      	cmp	r3, r2
 8010854:	bfc4      	itt	gt
 8010856:	1a9b      	subgt	r3, r3, r2
 8010858:	18ed      	addgt	r5, r5, r3
 801085a:	2600      	movs	r6, #0
 801085c:	341a      	adds	r4, #26
 801085e:	42b5      	cmp	r5, r6
 8010860:	d11a      	bne.n	8010898 <_printf_common+0xc8>
 8010862:	2000      	movs	r0, #0
 8010864:	e008      	b.n	8010878 <_printf_common+0xa8>
 8010866:	2301      	movs	r3, #1
 8010868:	4652      	mov	r2, sl
 801086a:	4641      	mov	r1, r8
 801086c:	4638      	mov	r0, r7
 801086e:	47c8      	blx	r9
 8010870:	3001      	adds	r0, #1
 8010872:	d103      	bne.n	801087c <_printf_common+0xac>
 8010874:	f04f 30ff 	mov.w	r0, #4294967295
 8010878:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801087c:	3501      	adds	r5, #1
 801087e:	e7c6      	b.n	801080e <_printf_common+0x3e>
 8010880:	18e1      	adds	r1, r4, r3
 8010882:	1c5a      	adds	r2, r3, #1
 8010884:	2030      	movs	r0, #48	@ 0x30
 8010886:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801088a:	4422      	add	r2, r4
 801088c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8010890:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8010894:	3302      	adds	r3, #2
 8010896:	e7c7      	b.n	8010828 <_printf_common+0x58>
 8010898:	2301      	movs	r3, #1
 801089a:	4622      	mov	r2, r4
 801089c:	4641      	mov	r1, r8
 801089e:	4638      	mov	r0, r7
 80108a0:	47c8      	blx	r9
 80108a2:	3001      	adds	r0, #1
 80108a4:	d0e6      	beq.n	8010874 <_printf_common+0xa4>
 80108a6:	3601      	adds	r6, #1
 80108a8:	e7d9      	b.n	801085e <_printf_common+0x8e>
	...

080108ac <_printf_i>:
 80108ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80108b0:	7e0f      	ldrb	r7, [r1, #24]
 80108b2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80108b4:	2f78      	cmp	r7, #120	@ 0x78
 80108b6:	4691      	mov	r9, r2
 80108b8:	4680      	mov	r8, r0
 80108ba:	460c      	mov	r4, r1
 80108bc:	469a      	mov	sl, r3
 80108be:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80108c2:	d807      	bhi.n	80108d4 <_printf_i+0x28>
 80108c4:	2f62      	cmp	r7, #98	@ 0x62
 80108c6:	d80a      	bhi.n	80108de <_printf_i+0x32>
 80108c8:	2f00      	cmp	r7, #0
 80108ca:	f000 80d2 	beq.w	8010a72 <_printf_i+0x1c6>
 80108ce:	2f58      	cmp	r7, #88	@ 0x58
 80108d0:	f000 80b9 	beq.w	8010a46 <_printf_i+0x19a>
 80108d4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80108d8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80108dc:	e03a      	b.n	8010954 <_printf_i+0xa8>
 80108de:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80108e2:	2b15      	cmp	r3, #21
 80108e4:	d8f6      	bhi.n	80108d4 <_printf_i+0x28>
 80108e6:	a101      	add	r1, pc, #4	@ (adr r1, 80108ec <_printf_i+0x40>)
 80108e8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80108ec:	08010945 	.word	0x08010945
 80108f0:	08010959 	.word	0x08010959
 80108f4:	080108d5 	.word	0x080108d5
 80108f8:	080108d5 	.word	0x080108d5
 80108fc:	080108d5 	.word	0x080108d5
 8010900:	080108d5 	.word	0x080108d5
 8010904:	08010959 	.word	0x08010959
 8010908:	080108d5 	.word	0x080108d5
 801090c:	080108d5 	.word	0x080108d5
 8010910:	080108d5 	.word	0x080108d5
 8010914:	080108d5 	.word	0x080108d5
 8010918:	08010a59 	.word	0x08010a59
 801091c:	08010983 	.word	0x08010983
 8010920:	08010a13 	.word	0x08010a13
 8010924:	080108d5 	.word	0x080108d5
 8010928:	080108d5 	.word	0x080108d5
 801092c:	08010a7b 	.word	0x08010a7b
 8010930:	080108d5 	.word	0x080108d5
 8010934:	08010983 	.word	0x08010983
 8010938:	080108d5 	.word	0x080108d5
 801093c:	080108d5 	.word	0x080108d5
 8010940:	08010a1b 	.word	0x08010a1b
 8010944:	6833      	ldr	r3, [r6, #0]
 8010946:	1d1a      	adds	r2, r3, #4
 8010948:	681b      	ldr	r3, [r3, #0]
 801094a:	6032      	str	r2, [r6, #0]
 801094c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010950:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8010954:	2301      	movs	r3, #1
 8010956:	e09d      	b.n	8010a94 <_printf_i+0x1e8>
 8010958:	6833      	ldr	r3, [r6, #0]
 801095a:	6820      	ldr	r0, [r4, #0]
 801095c:	1d19      	adds	r1, r3, #4
 801095e:	6031      	str	r1, [r6, #0]
 8010960:	0606      	lsls	r6, r0, #24
 8010962:	d501      	bpl.n	8010968 <_printf_i+0xbc>
 8010964:	681d      	ldr	r5, [r3, #0]
 8010966:	e003      	b.n	8010970 <_printf_i+0xc4>
 8010968:	0645      	lsls	r5, r0, #25
 801096a:	d5fb      	bpl.n	8010964 <_printf_i+0xb8>
 801096c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8010970:	2d00      	cmp	r5, #0
 8010972:	da03      	bge.n	801097c <_printf_i+0xd0>
 8010974:	232d      	movs	r3, #45	@ 0x2d
 8010976:	426d      	negs	r5, r5
 8010978:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801097c:	4859      	ldr	r0, [pc, #356]	@ (8010ae4 <_printf_i+0x238>)
 801097e:	230a      	movs	r3, #10
 8010980:	e011      	b.n	80109a6 <_printf_i+0xfa>
 8010982:	6821      	ldr	r1, [r4, #0]
 8010984:	6833      	ldr	r3, [r6, #0]
 8010986:	0608      	lsls	r0, r1, #24
 8010988:	f853 5b04 	ldr.w	r5, [r3], #4
 801098c:	d402      	bmi.n	8010994 <_printf_i+0xe8>
 801098e:	0649      	lsls	r1, r1, #25
 8010990:	bf48      	it	mi
 8010992:	b2ad      	uxthmi	r5, r5
 8010994:	2f6f      	cmp	r7, #111	@ 0x6f
 8010996:	4853      	ldr	r0, [pc, #332]	@ (8010ae4 <_printf_i+0x238>)
 8010998:	6033      	str	r3, [r6, #0]
 801099a:	bf14      	ite	ne
 801099c:	230a      	movne	r3, #10
 801099e:	2308      	moveq	r3, #8
 80109a0:	2100      	movs	r1, #0
 80109a2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80109a6:	6866      	ldr	r6, [r4, #4]
 80109a8:	60a6      	str	r6, [r4, #8]
 80109aa:	2e00      	cmp	r6, #0
 80109ac:	bfa2      	ittt	ge
 80109ae:	6821      	ldrge	r1, [r4, #0]
 80109b0:	f021 0104 	bicge.w	r1, r1, #4
 80109b4:	6021      	strge	r1, [r4, #0]
 80109b6:	b90d      	cbnz	r5, 80109bc <_printf_i+0x110>
 80109b8:	2e00      	cmp	r6, #0
 80109ba:	d04b      	beq.n	8010a54 <_printf_i+0x1a8>
 80109bc:	4616      	mov	r6, r2
 80109be:	fbb5 f1f3 	udiv	r1, r5, r3
 80109c2:	fb03 5711 	mls	r7, r3, r1, r5
 80109c6:	5dc7      	ldrb	r7, [r0, r7]
 80109c8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80109cc:	462f      	mov	r7, r5
 80109ce:	42bb      	cmp	r3, r7
 80109d0:	460d      	mov	r5, r1
 80109d2:	d9f4      	bls.n	80109be <_printf_i+0x112>
 80109d4:	2b08      	cmp	r3, #8
 80109d6:	d10b      	bne.n	80109f0 <_printf_i+0x144>
 80109d8:	6823      	ldr	r3, [r4, #0]
 80109da:	07df      	lsls	r7, r3, #31
 80109dc:	d508      	bpl.n	80109f0 <_printf_i+0x144>
 80109de:	6923      	ldr	r3, [r4, #16]
 80109e0:	6861      	ldr	r1, [r4, #4]
 80109e2:	4299      	cmp	r1, r3
 80109e4:	bfde      	ittt	le
 80109e6:	2330      	movle	r3, #48	@ 0x30
 80109e8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80109ec:	f106 36ff 	addle.w	r6, r6, #4294967295
 80109f0:	1b92      	subs	r2, r2, r6
 80109f2:	6122      	str	r2, [r4, #16]
 80109f4:	f8cd a000 	str.w	sl, [sp]
 80109f8:	464b      	mov	r3, r9
 80109fa:	aa03      	add	r2, sp, #12
 80109fc:	4621      	mov	r1, r4
 80109fe:	4640      	mov	r0, r8
 8010a00:	f7ff fee6 	bl	80107d0 <_printf_common>
 8010a04:	3001      	adds	r0, #1
 8010a06:	d14a      	bne.n	8010a9e <_printf_i+0x1f2>
 8010a08:	f04f 30ff 	mov.w	r0, #4294967295
 8010a0c:	b004      	add	sp, #16
 8010a0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010a12:	6823      	ldr	r3, [r4, #0]
 8010a14:	f043 0320 	orr.w	r3, r3, #32
 8010a18:	6023      	str	r3, [r4, #0]
 8010a1a:	4833      	ldr	r0, [pc, #204]	@ (8010ae8 <_printf_i+0x23c>)
 8010a1c:	2778      	movs	r7, #120	@ 0x78
 8010a1e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8010a22:	6823      	ldr	r3, [r4, #0]
 8010a24:	6831      	ldr	r1, [r6, #0]
 8010a26:	061f      	lsls	r7, r3, #24
 8010a28:	f851 5b04 	ldr.w	r5, [r1], #4
 8010a2c:	d402      	bmi.n	8010a34 <_printf_i+0x188>
 8010a2e:	065f      	lsls	r7, r3, #25
 8010a30:	bf48      	it	mi
 8010a32:	b2ad      	uxthmi	r5, r5
 8010a34:	6031      	str	r1, [r6, #0]
 8010a36:	07d9      	lsls	r1, r3, #31
 8010a38:	bf44      	itt	mi
 8010a3a:	f043 0320 	orrmi.w	r3, r3, #32
 8010a3e:	6023      	strmi	r3, [r4, #0]
 8010a40:	b11d      	cbz	r5, 8010a4a <_printf_i+0x19e>
 8010a42:	2310      	movs	r3, #16
 8010a44:	e7ac      	b.n	80109a0 <_printf_i+0xf4>
 8010a46:	4827      	ldr	r0, [pc, #156]	@ (8010ae4 <_printf_i+0x238>)
 8010a48:	e7e9      	b.n	8010a1e <_printf_i+0x172>
 8010a4a:	6823      	ldr	r3, [r4, #0]
 8010a4c:	f023 0320 	bic.w	r3, r3, #32
 8010a50:	6023      	str	r3, [r4, #0]
 8010a52:	e7f6      	b.n	8010a42 <_printf_i+0x196>
 8010a54:	4616      	mov	r6, r2
 8010a56:	e7bd      	b.n	80109d4 <_printf_i+0x128>
 8010a58:	6833      	ldr	r3, [r6, #0]
 8010a5a:	6825      	ldr	r5, [r4, #0]
 8010a5c:	6961      	ldr	r1, [r4, #20]
 8010a5e:	1d18      	adds	r0, r3, #4
 8010a60:	6030      	str	r0, [r6, #0]
 8010a62:	062e      	lsls	r6, r5, #24
 8010a64:	681b      	ldr	r3, [r3, #0]
 8010a66:	d501      	bpl.n	8010a6c <_printf_i+0x1c0>
 8010a68:	6019      	str	r1, [r3, #0]
 8010a6a:	e002      	b.n	8010a72 <_printf_i+0x1c6>
 8010a6c:	0668      	lsls	r0, r5, #25
 8010a6e:	d5fb      	bpl.n	8010a68 <_printf_i+0x1bc>
 8010a70:	8019      	strh	r1, [r3, #0]
 8010a72:	2300      	movs	r3, #0
 8010a74:	6123      	str	r3, [r4, #16]
 8010a76:	4616      	mov	r6, r2
 8010a78:	e7bc      	b.n	80109f4 <_printf_i+0x148>
 8010a7a:	6833      	ldr	r3, [r6, #0]
 8010a7c:	1d1a      	adds	r2, r3, #4
 8010a7e:	6032      	str	r2, [r6, #0]
 8010a80:	681e      	ldr	r6, [r3, #0]
 8010a82:	6862      	ldr	r2, [r4, #4]
 8010a84:	2100      	movs	r1, #0
 8010a86:	4630      	mov	r0, r6
 8010a88:	f7ef fb82 	bl	8000190 <memchr>
 8010a8c:	b108      	cbz	r0, 8010a92 <_printf_i+0x1e6>
 8010a8e:	1b80      	subs	r0, r0, r6
 8010a90:	6060      	str	r0, [r4, #4]
 8010a92:	6863      	ldr	r3, [r4, #4]
 8010a94:	6123      	str	r3, [r4, #16]
 8010a96:	2300      	movs	r3, #0
 8010a98:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010a9c:	e7aa      	b.n	80109f4 <_printf_i+0x148>
 8010a9e:	6923      	ldr	r3, [r4, #16]
 8010aa0:	4632      	mov	r2, r6
 8010aa2:	4649      	mov	r1, r9
 8010aa4:	4640      	mov	r0, r8
 8010aa6:	47d0      	blx	sl
 8010aa8:	3001      	adds	r0, #1
 8010aaa:	d0ad      	beq.n	8010a08 <_printf_i+0x15c>
 8010aac:	6823      	ldr	r3, [r4, #0]
 8010aae:	079b      	lsls	r3, r3, #30
 8010ab0:	d413      	bmi.n	8010ada <_printf_i+0x22e>
 8010ab2:	68e0      	ldr	r0, [r4, #12]
 8010ab4:	9b03      	ldr	r3, [sp, #12]
 8010ab6:	4298      	cmp	r0, r3
 8010ab8:	bfb8      	it	lt
 8010aba:	4618      	movlt	r0, r3
 8010abc:	e7a6      	b.n	8010a0c <_printf_i+0x160>
 8010abe:	2301      	movs	r3, #1
 8010ac0:	4632      	mov	r2, r6
 8010ac2:	4649      	mov	r1, r9
 8010ac4:	4640      	mov	r0, r8
 8010ac6:	47d0      	blx	sl
 8010ac8:	3001      	adds	r0, #1
 8010aca:	d09d      	beq.n	8010a08 <_printf_i+0x15c>
 8010acc:	3501      	adds	r5, #1
 8010ace:	68e3      	ldr	r3, [r4, #12]
 8010ad0:	9903      	ldr	r1, [sp, #12]
 8010ad2:	1a5b      	subs	r3, r3, r1
 8010ad4:	42ab      	cmp	r3, r5
 8010ad6:	dcf2      	bgt.n	8010abe <_printf_i+0x212>
 8010ad8:	e7eb      	b.n	8010ab2 <_printf_i+0x206>
 8010ada:	2500      	movs	r5, #0
 8010adc:	f104 0619 	add.w	r6, r4, #25
 8010ae0:	e7f5      	b.n	8010ace <_printf_i+0x222>
 8010ae2:	bf00      	nop
 8010ae4:	08011c7a 	.word	0x08011c7a
 8010ae8:	08011c8b 	.word	0x08011c8b

08010aec <__sflush_r>:
 8010aec:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8010af0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010af4:	0716      	lsls	r6, r2, #28
 8010af6:	4605      	mov	r5, r0
 8010af8:	460c      	mov	r4, r1
 8010afa:	d454      	bmi.n	8010ba6 <__sflush_r+0xba>
 8010afc:	684b      	ldr	r3, [r1, #4]
 8010afe:	2b00      	cmp	r3, #0
 8010b00:	dc02      	bgt.n	8010b08 <__sflush_r+0x1c>
 8010b02:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8010b04:	2b00      	cmp	r3, #0
 8010b06:	dd48      	ble.n	8010b9a <__sflush_r+0xae>
 8010b08:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8010b0a:	2e00      	cmp	r6, #0
 8010b0c:	d045      	beq.n	8010b9a <__sflush_r+0xae>
 8010b0e:	2300      	movs	r3, #0
 8010b10:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8010b14:	682f      	ldr	r7, [r5, #0]
 8010b16:	6a21      	ldr	r1, [r4, #32]
 8010b18:	602b      	str	r3, [r5, #0]
 8010b1a:	d030      	beq.n	8010b7e <__sflush_r+0x92>
 8010b1c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8010b1e:	89a3      	ldrh	r3, [r4, #12]
 8010b20:	0759      	lsls	r1, r3, #29
 8010b22:	d505      	bpl.n	8010b30 <__sflush_r+0x44>
 8010b24:	6863      	ldr	r3, [r4, #4]
 8010b26:	1ad2      	subs	r2, r2, r3
 8010b28:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8010b2a:	b10b      	cbz	r3, 8010b30 <__sflush_r+0x44>
 8010b2c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8010b2e:	1ad2      	subs	r2, r2, r3
 8010b30:	2300      	movs	r3, #0
 8010b32:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8010b34:	6a21      	ldr	r1, [r4, #32]
 8010b36:	4628      	mov	r0, r5
 8010b38:	47b0      	blx	r6
 8010b3a:	1c43      	adds	r3, r0, #1
 8010b3c:	89a3      	ldrh	r3, [r4, #12]
 8010b3e:	d106      	bne.n	8010b4e <__sflush_r+0x62>
 8010b40:	6829      	ldr	r1, [r5, #0]
 8010b42:	291d      	cmp	r1, #29
 8010b44:	d82b      	bhi.n	8010b9e <__sflush_r+0xb2>
 8010b46:	4a2a      	ldr	r2, [pc, #168]	@ (8010bf0 <__sflush_r+0x104>)
 8010b48:	410a      	asrs	r2, r1
 8010b4a:	07d6      	lsls	r6, r2, #31
 8010b4c:	d427      	bmi.n	8010b9e <__sflush_r+0xb2>
 8010b4e:	2200      	movs	r2, #0
 8010b50:	6062      	str	r2, [r4, #4]
 8010b52:	04d9      	lsls	r1, r3, #19
 8010b54:	6922      	ldr	r2, [r4, #16]
 8010b56:	6022      	str	r2, [r4, #0]
 8010b58:	d504      	bpl.n	8010b64 <__sflush_r+0x78>
 8010b5a:	1c42      	adds	r2, r0, #1
 8010b5c:	d101      	bne.n	8010b62 <__sflush_r+0x76>
 8010b5e:	682b      	ldr	r3, [r5, #0]
 8010b60:	b903      	cbnz	r3, 8010b64 <__sflush_r+0x78>
 8010b62:	6560      	str	r0, [r4, #84]	@ 0x54
 8010b64:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010b66:	602f      	str	r7, [r5, #0]
 8010b68:	b1b9      	cbz	r1, 8010b9a <__sflush_r+0xae>
 8010b6a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010b6e:	4299      	cmp	r1, r3
 8010b70:	d002      	beq.n	8010b78 <__sflush_r+0x8c>
 8010b72:	4628      	mov	r0, r5
 8010b74:	f7ff fbea 	bl	801034c <_free_r>
 8010b78:	2300      	movs	r3, #0
 8010b7a:	6363      	str	r3, [r4, #52]	@ 0x34
 8010b7c:	e00d      	b.n	8010b9a <__sflush_r+0xae>
 8010b7e:	2301      	movs	r3, #1
 8010b80:	4628      	mov	r0, r5
 8010b82:	47b0      	blx	r6
 8010b84:	4602      	mov	r2, r0
 8010b86:	1c50      	adds	r0, r2, #1
 8010b88:	d1c9      	bne.n	8010b1e <__sflush_r+0x32>
 8010b8a:	682b      	ldr	r3, [r5, #0]
 8010b8c:	2b00      	cmp	r3, #0
 8010b8e:	d0c6      	beq.n	8010b1e <__sflush_r+0x32>
 8010b90:	2b1d      	cmp	r3, #29
 8010b92:	d001      	beq.n	8010b98 <__sflush_r+0xac>
 8010b94:	2b16      	cmp	r3, #22
 8010b96:	d11e      	bne.n	8010bd6 <__sflush_r+0xea>
 8010b98:	602f      	str	r7, [r5, #0]
 8010b9a:	2000      	movs	r0, #0
 8010b9c:	e022      	b.n	8010be4 <__sflush_r+0xf8>
 8010b9e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010ba2:	b21b      	sxth	r3, r3
 8010ba4:	e01b      	b.n	8010bde <__sflush_r+0xf2>
 8010ba6:	690f      	ldr	r7, [r1, #16]
 8010ba8:	2f00      	cmp	r7, #0
 8010baa:	d0f6      	beq.n	8010b9a <__sflush_r+0xae>
 8010bac:	0793      	lsls	r3, r2, #30
 8010bae:	680e      	ldr	r6, [r1, #0]
 8010bb0:	bf08      	it	eq
 8010bb2:	694b      	ldreq	r3, [r1, #20]
 8010bb4:	600f      	str	r7, [r1, #0]
 8010bb6:	bf18      	it	ne
 8010bb8:	2300      	movne	r3, #0
 8010bba:	eba6 0807 	sub.w	r8, r6, r7
 8010bbe:	608b      	str	r3, [r1, #8]
 8010bc0:	f1b8 0f00 	cmp.w	r8, #0
 8010bc4:	dde9      	ble.n	8010b9a <__sflush_r+0xae>
 8010bc6:	6a21      	ldr	r1, [r4, #32]
 8010bc8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8010bca:	4643      	mov	r3, r8
 8010bcc:	463a      	mov	r2, r7
 8010bce:	4628      	mov	r0, r5
 8010bd0:	47b0      	blx	r6
 8010bd2:	2800      	cmp	r0, #0
 8010bd4:	dc08      	bgt.n	8010be8 <__sflush_r+0xfc>
 8010bd6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010bda:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010bde:	81a3      	strh	r3, [r4, #12]
 8010be0:	f04f 30ff 	mov.w	r0, #4294967295
 8010be4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010be8:	4407      	add	r7, r0
 8010bea:	eba8 0800 	sub.w	r8, r8, r0
 8010bee:	e7e7      	b.n	8010bc0 <__sflush_r+0xd4>
 8010bf0:	dfbffffe 	.word	0xdfbffffe

08010bf4 <_fflush_r>:
 8010bf4:	b538      	push	{r3, r4, r5, lr}
 8010bf6:	690b      	ldr	r3, [r1, #16]
 8010bf8:	4605      	mov	r5, r0
 8010bfa:	460c      	mov	r4, r1
 8010bfc:	b913      	cbnz	r3, 8010c04 <_fflush_r+0x10>
 8010bfe:	2500      	movs	r5, #0
 8010c00:	4628      	mov	r0, r5
 8010c02:	bd38      	pop	{r3, r4, r5, pc}
 8010c04:	b118      	cbz	r0, 8010c0e <_fflush_r+0x1a>
 8010c06:	6a03      	ldr	r3, [r0, #32]
 8010c08:	b90b      	cbnz	r3, 8010c0e <_fflush_r+0x1a>
 8010c0a:	f7ff fa7d 	bl	8010108 <__sinit>
 8010c0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010c12:	2b00      	cmp	r3, #0
 8010c14:	d0f3      	beq.n	8010bfe <_fflush_r+0xa>
 8010c16:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8010c18:	07d0      	lsls	r0, r2, #31
 8010c1a:	d404      	bmi.n	8010c26 <_fflush_r+0x32>
 8010c1c:	0599      	lsls	r1, r3, #22
 8010c1e:	d402      	bmi.n	8010c26 <_fflush_r+0x32>
 8010c20:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010c22:	f7ff fb64 	bl	80102ee <__retarget_lock_acquire_recursive>
 8010c26:	4628      	mov	r0, r5
 8010c28:	4621      	mov	r1, r4
 8010c2a:	f7ff ff5f 	bl	8010aec <__sflush_r>
 8010c2e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8010c30:	07da      	lsls	r2, r3, #31
 8010c32:	4605      	mov	r5, r0
 8010c34:	d4e4      	bmi.n	8010c00 <_fflush_r+0xc>
 8010c36:	89a3      	ldrh	r3, [r4, #12]
 8010c38:	059b      	lsls	r3, r3, #22
 8010c3a:	d4e1      	bmi.n	8010c00 <_fflush_r+0xc>
 8010c3c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010c3e:	f7ff fb57 	bl	80102f0 <__retarget_lock_release_recursive>
 8010c42:	e7dd      	b.n	8010c00 <_fflush_r+0xc>

08010c44 <fiprintf>:
 8010c44:	b40e      	push	{r1, r2, r3}
 8010c46:	b503      	push	{r0, r1, lr}
 8010c48:	4601      	mov	r1, r0
 8010c4a:	ab03      	add	r3, sp, #12
 8010c4c:	4805      	ldr	r0, [pc, #20]	@ (8010c64 <fiprintf+0x20>)
 8010c4e:	f853 2b04 	ldr.w	r2, [r3], #4
 8010c52:	6800      	ldr	r0, [r0, #0]
 8010c54:	9301      	str	r3, [sp, #4]
 8010c56:	f7ff fca3 	bl	80105a0 <_vfiprintf_r>
 8010c5a:	b002      	add	sp, #8
 8010c5c:	f85d eb04 	ldr.w	lr, [sp], #4
 8010c60:	b003      	add	sp, #12
 8010c62:	4770      	bx	lr
 8010c64:	20000080 	.word	0x20000080

08010c68 <__swbuf_r>:
 8010c68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010c6a:	460e      	mov	r6, r1
 8010c6c:	4614      	mov	r4, r2
 8010c6e:	4605      	mov	r5, r0
 8010c70:	b118      	cbz	r0, 8010c7a <__swbuf_r+0x12>
 8010c72:	6a03      	ldr	r3, [r0, #32]
 8010c74:	b90b      	cbnz	r3, 8010c7a <__swbuf_r+0x12>
 8010c76:	f7ff fa47 	bl	8010108 <__sinit>
 8010c7a:	69a3      	ldr	r3, [r4, #24]
 8010c7c:	60a3      	str	r3, [r4, #8]
 8010c7e:	89a3      	ldrh	r3, [r4, #12]
 8010c80:	071a      	lsls	r2, r3, #28
 8010c82:	d501      	bpl.n	8010c88 <__swbuf_r+0x20>
 8010c84:	6923      	ldr	r3, [r4, #16]
 8010c86:	b943      	cbnz	r3, 8010c9a <__swbuf_r+0x32>
 8010c88:	4621      	mov	r1, r4
 8010c8a:	4628      	mov	r0, r5
 8010c8c:	f000 f82a 	bl	8010ce4 <__swsetup_r>
 8010c90:	b118      	cbz	r0, 8010c9a <__swbuf_r+0x32>
 8010c92:	f04f 37ff 	mov.w	r7, #4294967295
 8010c96:	4638      	mov	r0, r7
 8010c98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010c9a:	6823      	ldr	r3, [r4, #0]
 8010c9c:	6922      	ldr	r2, [r4, #16]
 8010c9e:	1a98      	subs	r0, r3, r2
 8010ca0:	6963      	ldr	r3, [r4, #20]
 8010ca2:	b2f6      	uxtb	r6, r6
 8010ca4:	4283      	cmp	r3, r0
 8010ca6:	4637      	mov	r7, r6
 8010ca8:	dc05      	bgt.n	8010cb6 <__swbuf_r+0x4e>
 8010caa:	4621      	mov	r1, r4
 8010cac:	4628      	mov	r0, r5
 8010cae:	f7ff ffa1 	bl	8010bf4 <_fflush_r>
 8010cb2:	2800      	cmp	r0, #0
 8010cb4:	d1ed      	bne.n	8010c92 <__swbuf_r+0x2a>
 8010cb6:	68a3      	ldr	r3, [r4, #8]
 8010cb8:	3b01      	subs	r3, #1
 8010cba:	60a3      	str	r3, [r4, #8]
 8010cbc:	6823      	ldr	r3, [r4, #0]
 8010cbe:	1c5a      	adds	r2, r3, #1
 8010cc0:	6022      	str	r2, [r4, #0]
 8010cc2:	701e      	strb	r6, [r3, #0]
 8010cc4:	6962      	ldr	r2, [r4, #20]
 8010cc6:	1c43      	adds	r3, r0, #1
 8010cc8:	429a      	cmp	r2, r3
 8010cca:	d004      	beq.n	8010cd6 <__swbuf_r+0x6e>
 8010ccc:	89a3      	ldrh	r3, [r4, #12]
 8010cce:	07db      	lsls	r3, r3, #31
 8010cd0:	d5e1      	bpl.n	8010c96 <__swbuf_r+0x2e>
 8010cd2:	2e0a      	cmp	r6, #10
 8010cd4:	d1df      	bne.n	8010c96 <__swbuf_r+0x2e>
 8010cd6:	4621      	mov	r1, r4
 8010cd8:	4628      	mov	r0, r5
 8010cda:	f7ff ff8b 	bl	8010bf4 <_fflush_r>
 8010cde:	2800      	cmp	r0, #0
 8010ce0:	d0d9      	beq.n	8010c96 <__swbuf_r+0x2e>
 8010ce2:	e7d6      	b.n	8010c92 <__swbuf_r+0x2a>

08010ce4 <__swsetup_r>:
 8010ce4:	b538      	push	{r3, r4, r5, lr}
 8010ce6:	4b29      	ldr	r3, [pc, #164]	@ (8010d8c <__swsetup_r+0xa8>)
 8010ce8:	4605      	mov	r5, r0
 8010cea:	6818      	ldr	r0, [r3, #0]
 8010cec:	460c      	mov	r4, r1
 8010cee:	b118      	cbz	r0, 8010cf8 <__swsetup_r+0x14>
 8010cf0:	6a03      	ldr	r3, [r0, #32]
 8010cf2:	b90b      	cbnz	r3, 8010cf8 <__swsetup_r+0x14>
 8010cf4:	f7ff fa08 	bl	8010108 <__sinit>
 8010cf8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010cfc:	0719      	lsls	r1, r3, #28
 8010cfe:	d422      	bmi.n	8010d46 <__swsetup_r+0x62>
 8010d00:	06da      	lsls	r2, r3, #27
 8010d02:	d407      	bmi.n	8010d14 <__swsetup_r+0x30>
 8010d04:	2209      	movs	r2, #9
 8010d06:	602a      	str	r2, [r5, #0]
 8010d08:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010d0c:	81a3      	strh	r3, [r4, #12]
 8010d0e:	f04f 30ff 	mov.w	r0, #4294967295
 8010d12:	e033      	b.n	8010d7c <__swsetup_r+0x98>
 8010d14:	0758      	lsls	r0, r3, #29
 8010d16:	d512      	bpl.n	8010d3e <__swsetup_r+0x5a>
 8010d18:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010d1a:	b141      	cbz	r1, 8010d2e <__swsetup_r+0x4a>
 8010d1c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010d20:	4299      	cmp	r1, r3
 8010d22:	d002      	beq.n	8010d2a <__swsetup_r+0x46>
 8010d24:	4628      	mov	r0, r5
 8010d26:	f7ff fb11 	bl	801034c <_free_r>
 8010d2a:	2300      	movs	r3, #0
 8010d2c:	6363      	str	r3, [r4, #52]	@ 0x34
 8010d2e:	89a3      	ldrh	r3, [r4, #12]
 8010d30:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8010d34:	81a3      	strh	r3, [r4, #12]
 8010d36:	2300      	movs	r3, #0
 8010d38:	6063      	str	r3, [r4, #4]
 8010d3a:	6923      	ldr	r3, [r4, #16]
 8010d3c:	6023      	str	r3, [r4, #0]
 8010d3e:	89a3      	ldrh	r3, [r4, #12]
 8010d40:	f043 0308 	orr.w	r3, r3, #8
 8010d44:	81a3      	strh	r3, [r4, #12]
 8010d46:	6923      	ldr	r3, [r4, #16]
 8010d48:	b94b      	cbnz	r3, 8010d5e <__swsetup_r+0x7a>
 8010d4a:	89a3      	ldrh	r3, [r4, #12]
 8010d4c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8010d50:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010d54:	d003      	beq.n	8010d5e <__swsetup_r+0x7a>
 8010d56:	4621      	mov	r1, r4
 8010d58:	4628      	mov	r0, r5
 8010d5a:	f000 f856 	bl	8010e0a <__smakebuf_r>
 8010d5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010d62:	f013 0201 	ands.w	r2, r3, #1
 8010d66:	d00a      	beq.n	8010d7e <__swsetup_r+0x9a>
 8010d68:	2200      	movs	r2, #0
 8010d6a:	60a2      	str	r2, [r4, #8]
 8010d6c:	6962      	ldr	r2, [r4, #20]
 8010d6e:	4252      	negs	r2, r2
 8010d70:	61a2      	str	r2, [r4, #24]
 8010d72:	6922      	ldr	r2, [r4, #16]
 8010d74:	b942      	cbnz	r2, 8010d88 <__swsetup_r+0xa4>
 8010d76:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8010d7a:	d1c5      	bne.n	8010d08 <__swsetup_r+0x24>
 8010d7c:	bd38      	pop	{r3, r4, r5, pc}
 8010d7e:	0799      	lsls	r1, r3, #30
 8010d80:	bf58      	it	pl
 8010d82:	6962      	ldrpl	r2, [r4, #20]
 8010d84:	60a2      	str	r2, [r4, #8]
 8010d86:	e7f4      	b.n	8010d72 <__swsetup_r+0x8e>
 8010d88:	2000      	movs	r0, #0
 8010d8a:	e7f7      	b.n	8010d7c <__swsetup_r+0x98>
 8010d8c:	20000080 	.word	0x20000080

08010d90 <_sbrk_r>:
 8010d90:	b538      	push	{r3, r4, r5, lr}
 8010d92:	4d06      	ldr	r5, [pc, #24]	@ (8010dac <_sbrk_r+0x1c>)
 8010d94:	2300      	movs	r3, #0
 8010d96:	4604      	mov	r4, r0
 8010d98:	4608      	mov	r0, r1
 8010d9a:	602b      	str	r3, [r5, #0]
 8010d9c:	f7f6 fa1e 	bl	80071dc <_sbrk>
 8010da0:	1c43      	adds	r3, r0, #1
 8010da2:	d102      	bne.n	8010daa <_sbrk_r+0x1a>
 8010da4:	682b      	ldr	r3, [r5, #0]
 8010da6:	b103      	cbz	r3, 8010daa <_sbrk_r+0x1a>
 8010da8:	6023      	str	r3, [r4, #0]
 8010daa:	bd38      	pop	{r3, r4, r5, pc}
 8010dac:	200021c4 	.word	0x200021c4

08010db0 <abort>:
 8010db0:	b508      	push	{r3, lr}
 8010db2:	2006      	movs	r0, #6
 8010db4:	f000 f88e 	bl	8010ed4 <raise>
 8010db8:	2001      	movs	r0, #1
 8010dba:	f7f6 f996 	bl	80070ea <_exit>

08010dbe <__swhatbuf_r>:
 8010dbe:	b570      	push	{r4, r5, r6, lr}
 8010dc0:	460c      	mov	r4, r1
 8010dc2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010dc6:	2900      	cmp	r1, #0
 8010dc8:	b096      	sub	sp, #88	@ 0x58
 8010dca:	4615      	mov	r5, r2
 8010dcc:	461e      	mov	r6, r3
 8010dce:	da0d      	bge.n	8010dec <__swhatbuf_r+0x2e>
 8010dd0:	89a3      	ldrh	r3, [r4, #12]
 8010dd2:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8010dd6:	f04f 0100 	mov.w	r1, #0
 8010dda:	bf14      	ite	ne
 8010ddc:	2340      	movne	r3, #64	@ 0x40
 8010dde:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8010de2:	2000      	movs	r0, #0
 8010de4:	6031      	str	r1, [r6, #0]
 8010de6:	602b      	str	r3, [r5, #0]
 8010de8:	b016      	add	sp, #88	@ 0x58
 8010dea:	bd70      	pop	{r4, r5, r6, pc}
 8010dec:	466a      	mov	r2, sp
 8010dee:	f000 f879 	bl	8010ee4 <_fstat_r>
 8010df2:	2800      	cmp	r0, #0
 8010df4:	dbec      	blt.n	8010dd0 <__swhatbuf_r+0x12>
 8010df6:	9901      	ldr	r1, [sp, #4]
 8010df8:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8010dfc:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8010e00:	4259      	negs	r1, r3
 8010e02:	4159      	adcs	r1, r3
 8010e04:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010e08:	e7eb      	b.n	8010de2 <__swhatbuf_r+0x24>

08010e0a <__smakebuf_r>:
 8010e0a:	898b      	ldrh	r3, [r1, #12]
 8010e0c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010e0e:	079d      	lsls	r5, r3, #30
 8010e10:	4606      	mov	r6, r0
 8010e12:	460c      	mov	r4, r1
 8010e14:	d507      	bpl.n	8010e26 <__smakebuf_r+0x1c>
 8010e16:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8010e1a:	6023      	str	r3, [r4, #0]
 8010e1c:	6123      	str	r3, [r4, #16]
 8010e1e:	2301      	movs	r3, #1
 8010e20:	6163      	str	r3, [r4, #20]
 8010e22:	b003      	add	sp, #12
 8010e24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010e26:	ab01      	add	r3, sp, #4
 8010e28:	466a      	mov	r2, sp
 8010e2a:	f7ff ffc8 	bl	8010dbe <__swhatbuf_r>
 8010e2e:	9f00      	ldr	r7, [sp, #0]
 8010e30:	4605      	mov	r5, r0
 8010e32:	4639      	mov	r1, r7
 8010e34:	4630      	mov	r0, r6
 8010e36:	f7ff fafd 	bl	8010434 <_malloc_r>
 8010e3a:	b948      	cbnz	r0, 8010e50 <__smakebuf_r+0x46>
 8010e3c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010e40:	059a      	lsls	r2, r3, #22
 8010e42:	d4ee      	bmi.n	8010e22 <__smakebuf_r+0x18>
 8010e44:	f023 0303 	bic.w	r3, r3, #3
 8010e48:	f043 0302 	orr.w	r3, r3, #2
 8010e4c:	81a3      	strh	r3, [r4, #12]
 8010e4e:	e7e2      	b.n	8010e16 <__smakebuf_r+0xc>
 8010e50:	89a3      	ldrh	r3, [r4, #12]
 8010e52:	6020      	str	r0, [r4, #0]
 8010e54:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010e58:	81a3      	strh	r3, [r4, #12]
 8010e5a:	9b01      	ldr	r3, [sp, #4]
 8010e5c:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8010e60:	b15b      	cbz	r3, 8010e7a <__smakebuf_r+0x70>
 8010e62:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010e66:	4630      	mov	r0, r6
 8010e68:	f000 f84e 	bl	8010f08 <_isatty_r>
 8010e6c:	b128      	cbz	r0, 8010e7a <__smakebuf_r+0x70>
 8010e6e:	89a3      	ldrh	r3, [r4, #12]
 8010e70:	f023 0303 	bic.w	r3, r3, #3
 8010e74:	f043 0301 	orr.w	r3, r3, #1
 8010e78:	81a3      	strh	r3, [r4, #12]
 8010e7a:	89a3      	ldrh	r3, [r4, #12]
 8010e7c:	431d      	orrs	r5, r3
 8010e7e:	81a5      	strh	r5, [r4, #12]
 8010e80:	e7cf      	b.n	8010e22 <__smakebuf_r+0x18>

08010e82 <_raise_r>:
 8010e82:	291f      	cmp	r1, #31
 8010e84:	b538      	push	{r3, r4, r5, lr}
 8010e86:	4605      	mov	r5, r0
 8010e88:	460c      	mov	r4, r1
 8010e8a:	d904      	bls.n	8010e96 <_raise_r+0x14>
 8010e8c:	2316      	movs	r3, #22
 8010e8e:	6003      	str	r3, [r0, #0]
 8010e90:	f04f 30ff 	mov.w	r0, #4294967295
 8010e94:	bd38      	pop	{r3, r4, r5, pc}
 8010e96:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8010e98:	b112      	cbz	r2, 8010ea0 <_raise_r+0x1e>
 8010e9a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010e9e:	b94b      	cbnz	r3, 8010eb4 <_raise_r+0x32>
 8010ea0:	4628      	mov	r0, r5
 8010ea2:	f000 f853 	bl	8010f4c <_getpid_r>
 8010ea6:	4622      	mov	r2, r4
 8010ea8:	4601      	mov	r1, r0
 8010eaa:	4628      	mov	r0, r5
 8010eac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010eb0:	f000 b83a 	b.w	8010f28 <_kill_r>
 8010eb4:	2b01      	cmp	r3, #1
 8010eb6:	d00a      	beq.n	8010ece <_raise_r+0x4c>
 8010eb8:	1c59      	adds	r1, r3, #1
 8010eba:	d103      	bne.n	8010ec4 <_raise_r+0x42>
 8010ebc:	2316      	movs	r3, #22
 8010ebe:	6003      	str	r3, [r0, #0]
 8010ec0:	2001      	movs	r0, #1
 8010ec2:	e7e7      	b.n	8010e94 <_raise_r+0x12>
 8010ec4:	2100      	movs	r1, #0
 8010ec6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8010eca:	4620      	mov	r0, r4
 8010ecc:	4798      	blx	r3
 8010ece:	2000      	movs	r0, #0
 8010ed0:	e7e0      	b.n	8010e94 <_raise_r+0x12>
	...

08010ed4 <raise>:
 8010ed4:	4b02      	ldr	r3, [pc, #8]	@ (8010ee0 <raise+0xc>)
 8010ed6:	4601      	mov	r1, r0
 8010ed8:	6818      	ldr	r0, [r3, #0]
 8010eda:	f7ff bfd2 	b.w	8010e82 <_raise_r>
 8010ede:	bf00      	nop
 8010ee0:	20000080 	.word	0x20000080

08010ee4 <_fstat_r>:
 8010ee4:	b538      	push	{r3, r4, r5, lr}
 8010ee6:	4d07      	ldr	r5, [pc, #28]	@ (8010f04 <_fstat_r+0x20>)
 8010ee8:	2300      	movs	r3, #0
 8010eea:	4604      	mov	r4, r0
 8010eec:	4608      	mov	r0, r1
 8010eee:	4611      	mov	r1, r2
 8010ef0:	602b      	str	r3, [r5, #0]
 8010ef2:	f7f6 f94a 	bl	800718a <_fstat>
 8010ef6:	1c43      	adds	r3, r0, #1
 8010ef8:	d102      	bne.n	8010f00 <_fstat_r+0x1c>
 8010efa:	682b      	ldr	r3, [r5, #0]
 8010efc:	b103      	cbz	r3, 8010f00 <_fstat_r+0x1c>
 8010efe:	6023      	str	r3, [r4, #0]
 8010f00:	bd38      	pop	{r3, r4, r5, pc}
 8010f02:	bf00      	nop
 8010f04:	200021c4 	.word	0x200021c4

08010f08 <_isatty_r>:
 8010f08:	b538      	push	{r3, r4, r5, lr}
 8010f0a:	4d06      	ldr	r5, [pc, #24]	@ (8010f24 <_isatty_r+0x1c>)
 8010f0c:	2300      	movs	r3, #0
 8010f0e:	4604      	mov	r4, r0
 8010f10:	4608      	mov	r0, r1
 8010f12:	602b      	str	r3, [r5, #0]
 8010f14:	f7f6 f949 	bl	80071aa <_isatty>
 8010f18:	1c43      	adds	r3, r0, #1
 8010f1a:	d102      	bne.n	8010f22 <_isatty_r+0x1a>
 8010f1c:	682b      	ldr	r3, [r5, #0]
 8010f1e:	b103      	cbz	r3, 8010f22 <_isatty_r+0x1a>
 8010f20:	6023      	str	r3, [r4, #0]
 8010f22:	bd38      	pop	{r3, r4, r5, pc}
 8010f24:	200021c4 	.word	0x200021c4

08010f28 <_kill_r>:
 8010f28:	b538      	push	{r3, r4, r5, lr}
 8010f2a:	4d07      	ldr	r5, [pc, #28]	@ (8010f48 <_kill_r+0x20>)
 8010f2c:	2300      	movs	r3, #0
 8010f2e:	4604      	mov	r4, r0
 8010f30:	4608      	mov	r0, r1
 8010f32:	4611      	mov	r1, r2
 8010f34:	602b      	str	r3, [r5, #0]
 8010f36:	f7f6 f8c8 	bl	80070ca <_kill>
 8010f3a:	1c43      	adds	r3, r0, #1
 8010f3c:	d102      	bne.n	8010f44 <_kill_r+0x1c>
 8010f3e:	682b      	ldr	r3, [r5, #0]
 8010f40:	b103      	cbz	r3, 8010f44 <_kill_r+0x1c>
 8010f42:	6023      	str	r3, [r4, #0]
 8010f44:	bd38      	pop	{r3, r4, r5, pc}
 8010f46:	bf00      	nop
 8010f48:	200021c4 	.word	0x200021c4

08010f4c <_getpid_r>:
 8010f4c:	f7f6 b8b5 	b.w	80070ba <_getpid>

08010f50 <sqrt>:
 8010f50:	b538      	push	{r3, r4, r5, lr}
 8010f52:	ed2d 8b02 	vpush	{d8}
 8010f56:	ec55 4b10 	vmov	r4, r5, d0
 8010f5a:	f000 f8a5 	bl	80110a8 <__ieee754_sqrt>
 8010f5e:	4622      	mov	r2, r4
 8010f60:	462b      	mov	r3, r5
 8010f62:	4620      	mov	r0, r4
 8010f64:	4629      	mov	r1, r5
 8010f66:	eeb0 8a40 	vmov.f32	s16, s0
 8010f6a:	eef0 8a60 	vmov.f32	s17, s1
 8010f6e:	f7ef fdb5 	bl	8000adc <__aeabi_dcmpun>
 8010f72:	b990      	cbnz	r0, 8010f9a <sqrt+0x4a>
 8010f74:	2200      	movs	r2, #0
 8010f76:	2300      	movs	r3, #0
 8010f78:	4620      	mov	r0, r4
 8010f7a:	4629      	mov	r1, r5
 8010f7c:	f7ef fd86 	bl	8000a8c <__aeabi_dcmplt>
 8010f80:	b158      	cbz	r0, 8010f9a <sqrt+0x4a>
 8010f82:	f7ff f989 	bl	8010298 <__errno>
 8010f86:	2321      	movs	r3, #33	@ 0x21
 8010f88:	6003      	str	r3, [r0, #0]
 8010f8a:	2200      	movs	r2, #0
 8010f8c:	2300      	movs	r3, #0
 8010f8e:	4610      	mov	r0, r2
 8010f90:	4619      	mov	r1, r3
 8010f92:	f7ef fc33 	bl	80007fc <__aeabi_ddiv>
 8010f96:	ec41 0b18 	vmov	d8, r0, r1
 8010f9a:	eeb0 0a48 	vmov.f32	s0, s16
 8010f9e:	eef0 0a68 	vmov.f32	s1, s17
 8010fa2:	ecbd 8b02 	vpop	{d8}
 8010fa6:	bd38      	pop	{r3, r4, r5, pc}

08010fa8 <powf>:
 8010fa8:	b508      	push	{r3, lr}
 8010faa:	ed2d 8b04 	vpush	{d8-d9}
 8010fae:	eeb0 8a60 	vmov.f32	s16, s1
 8010fb2:	eeb0 9a40 	vmov.f32	s18, s0
 8010fb6:	f000 f955 	bl	8011264 <__ieee754_powf>
 8010fba:	eeb4 8a48 	vcmp.f32	s16, s16
 8010fbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010fc2:	eef0 8a40 	vmov.f32	s17, s0
 8010fc6:	d63e      	bvs.n	8011046 <powf+0x9e>
 8010fc8:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8010fcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010fd0:	d112      	bne.n	8010ff8 <powf+0x50>
 8010fd2:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8010fd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010fda:	d039      	beq.n	8011050 <powf+0xa8>
 8010fdc:	eeb0 0a48 	vmov.f32	s0, s16
 8010fe0:	f000 f858 	bl	8011094 <finitef>
 8010fe4:	b378      	cbz	r0, 8011046 <powf+0x9e>
 8010fe6:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8010fea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010fee:	d52a      	bpl.n	8011046 <powf+0x9e>
 8010ff0:	f7ff f952 	bl	8010298 <__errno>
 8010ff4:	2322      	movs	r3, #34	@ 0x22
 8010ff6:	e014      	b.n	8011022 <powf+0x7a>
 8010ff8:	f000 f84c 	bl	8011094 <finitef>
 8010ffc:	b998      	cbnz	r0, 8011026 <powf+0x7e>
 8010ffe:	eeb0 0a49 	vmov.f32	s0, s18
 8011002:	f000 f847 	bl	8011094 <finitef>
 8011006:	b170      	cbz	r0, 8011026 <powf+0x7e>
 8011008:	eeb0 0a48 	vmov.f32	s0, s16
 801100c:	f000 f842 	bl	8011094 <finitef>
 8011010:	b148      	cbz	r0, 8011026 <powf+0x7e>
 8011012:	eef4 8a68 	vcmp.f32	s17, s17
 8011016:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801101a:	d7e9      	bvc.n	8010ff0 <powf+0x48>
 801101c:	f7ff f93c 	bl	8010298 <__errno>
 8011020:	2321      	movs	r3, #33	@ 0x21
 8011022:	6003      	str	r3, [r0, #0]
 8011024:	e00f      	b.n	8011046 <powf+0x9e>
 8011026:	eef5 8a40 	vcmp.f32	s17, #0.0
 801102a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801102e:	d10a      	bne.n	8011046 <powf+0x9e>
 8011030:	eeb0 0a49 	vmov.f32	s0, s18
 8011034:	f000 f82e 	bl	8011094 <finitef>
 8011038:	b128      	cbz	r0, 8011046 <powf+0x9e>
 801103a:	eeb0 0a48 	vmov.f32	s0, s16
 801103e:	f000 f829 	bl	8011094 <finitef>
 8011042:	2800      	cmp	r0, #0
 8011044:	d1d4      	bne.n	8010ff0 <powf+0x48>
 8011046:	eeb0 0a68 	vmov.f32	s0, s17
 801104a:	ecbd 8b04 	vpop	{d8-d9}
 801104e:	bd08      	pop	{r3, pc}
 8011050:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 8011054:	e7f7      	b.n	8011046 <powf+0x9e>
	...

08011058 <sqrtf>:
 8011058:	b508      	push	{r3, lr}
 801105a:	ed2d 8b02 	vpush	{d8}
 801105e:	eeb0 8a40 	vmov.f32	s16, s0
 8011062:	f000 f8fb 	bl	801125c <__ieee754_sqrtf>
 8011066:	eeb4 8a48 	vcmp.f32	s16, s16
 801106a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801106e:	d60c      	bvs.n	801108a <sqrtf+0x32>
 8011070:	eddf 8a07 	vldr	s17, [pc, #28]	@ 8011090 <sqrtf+0x38>
 8011074:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8011078:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801107c:	d505      	bpl.n	801108a <sqrtf+0x32>
 801107e:	f7ff f90b 	bl	8010298 <__errno>
 8011082:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8011086:	2321      	movs	r3, #33	@ 0x21
 8011088:	6003      	str	r3, [r0, #0]
 801108a:	ecbd 8b02 	vpop	{d8}
 801108e:	bd08      	pop	{r3, pc}
 8011090:	00000000 	.word	0x00000000

08011094 <finitef>:
 8011094:	ee10 3a10 	vmov	r3, s0
 8011098:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 801109c:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 80110a0:	bfac      	ite	ge
 80110a2:	2000      	movge	r0, #0
 80110a4:	2001      	movlt	r0, #1
 80110a6:	4770      	bx	lr

080110a8 <__ieee754_sqrt>:
 80110a8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80110ac:	4a68      	ldr	r2, [pc, #416]	@ (8011250 <__ieee754_sqrt+0x1a8>)
 80110ae:	ec55 4b10 	vmov	r4, r5, d0
 80110b2:	43aa      	bics	r2, r5
 80110b4:	462b      	mov	r3, r5
 80110b6:	4621      	mov	r1, r4
 80110b8:	d110      	bne.n	80110dc <__ieee754_sqrt+0x34>
 80110ba:	4622      	mov	r2, r4
 80110bc:	4620      	mov	r0, r4
 80110be:	4629      	mov	r1, r5
 80110c0:	f7ef fa72 	bl	80005a8 <__aeabi_dmul>
 80110c4:	4602      	mov	r2, r0
 80110c6:	460b      	mov	r3, r1
 80110c8:	4620      	mov	r0, r4
 80110ca:	4629      	mov	r1, r5
 80110cc:	f7ef f8b6 	bl	800023c <__adddf3>
 80110d0:	4604      	mov	r4, r0
 80110d2:	460d      	mov	r5, r1
 80110d4:	ec45 4b10 	vmov	d0, r4, r5
 80110d8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80110dc:	2d00      	cmp	r5, #0
 80110de:	dc0e      	bgt.n	80110fe <__ieee754_sqrt+0x56>
 80110e0:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 80110e4:	4322      	orrs	r2, r4
 80110e6:	d0f5      	beq.n	80110d4 <__ieee754_sqrt+0x2c>
 80110e8:	b19d      	cbz	r5, 8011112 <__ieee754_sqrt+0x6a>
 80110ea:	4622      	mov	r2, r4
 80110ec:	4620      	mov	r0, r4
 80110ee:	4629      	mov	r1, r5
 80110f0:	f7ef f8a2 	bl	8000238 <__aeabi_dsub>
 80110f4:	4602      	mov	r2, r0
 80110f6:	460b      	mov	r3, r1
 80110f8:	f7ef fb80 	bl	80007fc <__aeabi_ddiv>
 80110fc:	e7e8      	b.n	80110d0 <__ieee754_sqrt+0x28>
 80110fe:	152a      	asrs	r2, r5, #20
 8011100:	d115      	bne.n	801112e <__ieee754_sqrt+0x86>
 8011102:	2000      	movs	r0, #0
 8011104:	e009      	b.n	801111a <__ieee754_sqrt+0x72>
 8011106:	0acb      	lsrs	r3, r1, #11
 8011108:	3a15      	subs	r2, #21
 801110a:	0549      	lsls	r1, r1, #21
 801110c:	2b00      	cmp	r3, #0
 801110e:	d0fa      	beq.n	8011106 <__ieee754_sqrt+0x5e>
 8011110:	e7f7      	b.n	8011102 <__ieee754_sqrt+0x5a>
 8011112:	462a      	mov	r2, r5
 8011114:	e7fa      	b.n	801110c <__ieee754_sqrt+0x64>
 8011116:	005b      	lsls	r3, r3, #1
 8011118:	3001      	adds	r0, #1
 801111a:	02dc      	lsls	r4, r3, #11
 801111c:	d5fb      	bpl.n	8011116 <__ieee754_sqrt+0x6e>
 801111e:	1e44      	subs	r4, r0, #1
 8011120:	1b12      	subs	r2, r2, r4
 8011122:	f1c0 0420 	rsb	r4, r0, #32
 8011126:	fa21 f404 	lsr.w	r4, r1, r4
 801112a:	4323      	orrs	r3, r4
 801112c:	4081      	lsls	r1, r0
 801112e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011132:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 8011136:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801113a:	07d2      	lsls	r2, r2, #31
 801113c:	bf5c      	itt	pl
 801113e:	005b      	lslpl	r3, r3, #1
 8011140:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8011144:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8011148:	bf58      	it	pl
 801114a:	0049      	lslpl	r1, r1, #1
 801114c:	2600      	movs	r6, #0
 801114e:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8011152:	106d      	asrs	r5, r5, #1
 8011154:	0049      	lsls	r1, r1, #1
 8011156:	2016      	movs	r0, #22
 8011158:	4632      	mov	r2, r6
 801115a:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 801115e:	1917      	adds	r7, r2, r4
 8011160:	429f      	cmp	r7, r3
 8011162:	bfde      	ittt	le
 8011164:	193a      	addle	r2, r7, r4
 8011166:	1bdb      	suble	r3, r3, r7
 8011168:	1936      	addle	r6, r6, r4
 801116a:	0fcf      	lsrs	r7, r1, #31
 801116c:	3801      	subs	r0, #1
 801116e:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8011172:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8011176:	ea4f 0454 	mov.w	r4, r4, lsr #1
 801117a:	d1f0      	bne.n	801115e <__ieee754_sqrt+0xb6>
 801117c:	4604      	mov	r4, r0
 801117e:	2720      	movs	r7, #32
 8011180:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8011184:	429a      	cmp	r2, r3
 8011186:	eb00 0e0c 	add.w	lr, r0, ip
 801118a:	db02      	blt.n	8011192 <__ieee754_sqrt+0xea>
 801118c:	d113      	bne.n	80111b6 <__ieee754_sqrt+0x10e>
 801118e:	458e      	cmp	lr, r1
 8011190:	d811      	bhi.n	80111b6 <__ieee754_sqrt+0x10e>
 8011192:	f1be 0f00 	cmp.w	lr, #0
 8011196:	eb0e 000c 	add.w	r0, lr, ip
 801119a:	da42      	bge.n	8011222 <__ieee754_sqrt+0x17a>
 801119c:	2800      	cmp	r0, #0
 801119e:	db40      	blt.n	8011222 <__ieee754_sqrt+0x17a>
 80111a0:	f102 0801 	add.w	r8, r2, #1
 80111a4:	1a9b      	subs	r3, r3, r2
 80111a6:	458e      	cmp	lr, r1
 80111a8:	bf88      	it	hi
 80111aa:	f103 33ff 	addhi.w	r3, r3, #4294967295
 80111ae:	eba1 010e 	sub.w	r1, r1, lr
 80111b2:	4464      	add	r4, ip
 80111b4:	4642      	mov	r2, r8
 80111b6:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 80111ba:	3f01      	subs	r7, #1
 80111bc:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 80111c0:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80111c4:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 80111c8:	d1dc      	bne.n	8011184 <__ieee754_sqrt+0xdc>
 80111ca:	4319      	orrs	r1, r3
 80111cc:	d01b      	beq.n	8011206 <__ieee754_sqrt+0x15e>
 80111ce:	f8df a084 	ldr.w	sl, [pc, #132]	@ 8011254 <__ieee754_sqrt+0x1ac>
 80111d2:	f8df b084 	ldr.w	fp, [pc, #132]	@ 8011258 <__ieee754_sqrt+0x1b0>
 80111d6:	e9da 0100 	ldrd	r0, r1, [sl]
 80111da:	e9db 2300 	ldrd	r2, r3, [fp]
 80111de:	f7ef f82b 	bl	8000238 <__aeabi_dsub>
 80111e2:	e9da 8900 	ldrd	r8, r9, [sl]
 80111e6:	4602      	mov	r2, r0
 80111e8:	460b      	mov	r3, r1
 80111ea:	4640      	mov	r0, r8
 80111ec:	4649      	mov	r1, r9
 80111ee:	f7ef fc57 	bl	8000aa0 <__aeabi_dcmple>
 80111f2:	b140      	cbz	r0, 8011206 <__ieee754_sqrt+0x15e>
 80111f4:	f1b4 3fff 	cmp.w	r4, #4294967295
 80111f8:	e9da 0100 	ldrd	r0, r1, [sl]
 80111fc:	e9db 2300 	ldrd	r2, r3, [fp]
 8011200:	d111      	bne.n	8011226 <__ieee754_sqrt+0x17e>
 8011202:	3601      	adds	r6, #1
 8011204:	463c      	mov	r4, r7
 8011206:	1072      	asrs	r2, r6, #1
 8011208:	0863      	lsrs	r3, r4, #1
 801120a:	07f1      	lsls	r1, r6, #31
 801120c:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8011210:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8011214:	bf48      	it	mi
 8011216:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 801121a:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 801121e:	4618      	mov	r0, r3
 8011220:	e756      	b.n	80110d0 <__ieee754_sqrt+0x28>
 8011222:	4690      	mov	r8, r2
 8011224:	e7be      	b.n	80111a4 <__ieee754_sqrt+0xfc>
 8011226:	f7ef f809 	bl	800023c <__adddf3>
 801122a:	e9da 8900 	ldrd	r8, r9, [sl]
 801122e:	4602      	mov	r2, r0
 8011230:	460b      	mov	r3, r1
 8011232:	4640      	mov	r0, r8
 8011234:	4649      	mov	r1, r9
 8011236:	f7ef fc29 	bl	8000a8c <__aeabi_dcmplt>
 801123a:	b120      	cbz	r0, 8011246 <__ieee754_sqrt+0x19e>
 801123c:	1ca0      	adds	r0, r4, #2
 801123e:	bf08      	it	eq
 8011240:	3601      	addeq	r6, #1
 8011242:	3402      	adds	r4, #2
 8011244:	e7df      	b.n	8011206 <__ieee754_sqrt+0x15e>
 8011246:	1c63      	adds	r3, r4, #1
 8011248:	f023 0401 	bic.w	r4, r3, #1
 801124c:	e7db      	b.n	8011206 <__ieee754_sqrt+0x15e>
 801124e:	bf00      	nop
 8011250:	7ff00000 	.word	0x7ff00000
 8011254:	200000d8 	.word	0x200000d8
 8011258:	200000d0 	.word	0x200000d0

0801125c <__ieee754_sqrtf>:
 801125c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8011260:	4770      	bx	lr
	...

08011264 <__ieee754_powf>:
 8011264:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011268:	ee10 4a90 	vmov	r4, s1
 801126c:	f034 4900 	bics.w	r9, r4, #2147483648	@ 0x80000000
 8011270:	ed2d 8b02 	vpush	{d8}
 8011274:	ee10 6a10 	vmov	r6, s0
 8011278:	eeb0 8a40 	vmov.f32	s16, s0
 801127c:	eef0 8a60 	vmov.f32	s17, s1
 8011280:	d10c      	bne.n	801129c <__ieee754_powf+0x38>
 8011282:	f486 0680 	eor.w	r6, r6, #4194304	@ 0x400000
 8011286:	0076      	lsls	r6, r6, #1
 8011288:	f516 0f00 	cmn.w	r6, #8388608	@ 0x800000
 801128c:	f240 829c 	bls.w	80117c8 <__ieee754_powf+0x564>
 8011290:	ee38 0a28 	vadd.f32	s0, s16, s17
 8011294:	ecbd 8b02 	vpop	{d8}
 8011298:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801129c:	f026 4800 	bic.w	r8, r6, #2147483648	@ 0x80000000
 80112a0:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 80112a4:	d802      	bhi.n	80112ac <__ieee754_powf+0x48>
 80112a6:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 80112aa:	d908      	bls.n	80112be <__ieee754_powf+0x5a>
 80112ac:	f1b6 5f7e 	cmp.w	r6, #1065353216	@ 0x3f800000
 80112b0:	d1ee      	bne.n	8011290 <__ieee754_powf+0x2c>
 80112b2:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 80112b6:	0064      	lsls	r4, r4, #1
 80112b8:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 80112bc:	e7e6      	b.n	801128c <__ieee754_powf+0x28>
 80112be:	2e00      	cmp	r6, #0
 80112c0:	da1e      	bge.n	8011300 <__ieee754_powf+0x9c>
 80112c2:	f1b9 4f97 	cmp.w	r9, #1266679808	@ 0x4b800000
 80112c6:	d22b      	bcs.n	8011320 <__ieee754_powf+0xbc>
 80112c8:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 80112cc:	d332      	bcc.n	8011334 <__ieee754_powf+0xd0>
 80112ce:	ea4f 53e9 	mov.w	r3, r9, asr #23
 80112d2:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 80112d6:	fa49 f503 	asr.w	r5, r9, r3
 80112da:	fa05 f303 	lsl.w	r3, r5, r3
 80112de:	454b      	cmp	r3, r9
 80112e0:	d126      	bne.n	8011330 <__ieee754_powf+0xcc>
 80112e2:	f005 0501 	and.w	r5, r5, #1
 80112e6:	f1c5 0502 	rsb	r5, r5, #2
 80112ea:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 80112ee:	d122      	bne.n	8011336 <__ieee754_powf+0xd2>
 80112f0:	2c00      	cmp	r4, #0
 80112f2:	f280 826f 	bge.w	80117d4 <__ieee754_powf+0x570>
 80112f6:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80112fa:	ee87 0a88 	vdiv.f32	s0, s15, s16
 80112fe:	e7c9      	b.n	8011294 <__ieee754_powf+0x30>
 8011300:	2500      	movs	r5, #0
 8011302:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 8011306:	d1f0      	bne.n	80112ea <__ieee754_powf+0x86>
 8011308:	f1b8 5f7e 	cmp.w	r8, #1065353216	@ 0x3f800000
 801130c:	f000 825c 	beq.w	80117c8 <__ieee754_powf+0x564>
 8011310:	d908      	bls.n	8011324 <__ieee754_powf+0xc0>
 8011312:	ed9f 0ad8 	vldr	s0, [pc, #864]	@ 8011674 <__ieee754_powf+0x410>
 8011316:	2c00      	cmp	r4, #0
 8011318:	bfa8      	it	ge
 801131a:	eeb0 0a68 	vmovge.f32	s0, s17
 801131e:	e7b9      	b.n	8011294 <__ieee754_powf+0x30>
 8011320:	2502      	movs	r5, #2
 8011322:	e7ee      	b.n	8011302 <__ieee754_powf+0x9e>
 8011324:	2c00      	cmp	r4, #0
 8011326:	f280 8252 	bge.w	80117ce <__ieee754_powf+0x56a>
 801132a:	eeb1 0a68 	vneg.f32	s0, s17
 801132e:	e7b1      	b.n	8011294 <__ieee754_powf+0x30>
 8011330:	2500      	movs	r5, #0
 8011332:	e7da      	b.n	80112ea <__ieee754_powf+0x86>
 8011334:	2500      	movs	r5, #0
 8011336:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 801133a:	d102      	bne.n	8011342 <__ieee754_powf+0xde>
 801133c:	ee28 0a08 	vmul.f32	s0, s16, s16
 8011340:	e7a8      	b.n	8011294 <__ieee754_powf+0x30>
 8011342:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 8011346:	d109      	bne.n	801135c <__ieee754_powf+0xf8>
 8011348:	2e00      	cmp	r6, #0
 801134a:	db07      	blt.n	801135c <__ieee754_powf+0xf8>
 801134c:	eeb0 0a48 	vmov.f32	s0, s16
 8011350:	ecbd 8b02 	vpop	{d8}
 8011354:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011358:	f7ff bf80 	b.w	801125c <__ieee754_sqrtf>
 801135c:	eeb0 0a48 	vmov.f32	s0, s16
 8011360:	f000 fa50 	bl	8011804 <fabsf>
 8011364:	f026 4340 	bic.w	r3, r6, #3221225472	@ 0xc0000000
 8011368:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 801136c:	4647      	mov	r7, r8
 801136e:	d002      	beq.n	8011376 <__ieee754_powf+0x112>
 8011370:	f1b8 0f00 	cmp.w	r8, #0
 8011374:	d117      	bne.n	80113a6 <__ieee754_powf+0x142>
 8011376:	2c00      	cmp	r4, #0
 8011378:	bfbc      	itt	lt
 801137a:	eef7 7a00 	vmovlt.f32	s15, #112	@ 0x3f800000  1.0
 801137e:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 8011382:	2e00      	cmp	r6, #0
 8011384:	da86      	bge.n	8011294 <__ieee754_powf+0x30>
 8011386:	f1a8 587e 	sub.w	r8, r8, #1065353216	@ 0x3f800000
 801138a:	ea58 0805 	orrs.w	r8, r8, r5
 801138e:	d104      	bne.n	801139a <__ieee754_powf+0x136>
 8011390:	ee70 7a40 	vsub.f32	s15, s0, s0
 8011394:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8011398:	e77c      	b.n	8011294 <__ieee754_powf+0x30>
 801139a:	2d01      	cmp	r5, #1
 801139c:	f47f af7a 	bne.w	8011294 <__ieee754_powf+0x30>
 80113a0:	eeb1 0a40 	vneg.f32	s0, s0
 80113a4:	e776      	b.n	8011294 <__ieee754_powf+0x30>
 80113a6:	0ff0      	lsrs	r0, r6, #31
 80113a8:	3801      	subs	r0, #1
 80113aa:	ea55 0300 	orrs.w	r3, r5, r0
 80113ae:	d104      	bne.n	80113ba <__ieee754_powf+0x156>
 80113b0:	ee38 8a48 	vsub.f32	s16, s16, s16
 80113b4:	ee88 0a08 	vdiv.f32	s0, s16, s16
 80113b8:	e76c      	b.n	8011294 <__ieee754_powf+0x30>
 80113ba:	f1b9 4f9a 	cmp.w	r9, #1291845632	@ 0x4d000000
 80113be:	d973      	bls.n	80114a8 <__ieee754_powf+0x244>
 80113c0:	4bad      	ldr	r3, [pc, #692]	@ (8011678 <__ieee754_powf+0x414>)
 80113c2:	4598      	cmp	r8, r3
 80113c4:	d808      	bhi.n	80113d8 <__ieee754_powf+0x174>
 80113c6:	2c00      	cmp	r4, #0
 80113c8:	da0b      	bge.n	80113e2 <__ieee754_powf+0x17e>
 80113ca:	2000      	movs	r0, #0
 80113cc:	ecbd 8b02 	vpop	{d8}
 80113d0:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80113d4:	f000 baa4 	b.w	8011920 <__math_oflowf>
 80113d8:	4ba8      	ldr	r3, [pc, #672]	@ (801167c <__ieee754_powf+0x418>)
 80113da:	4598      	cmp	r8, r3
 80113dc:	d908      	bls.n	80113f0 <__ieee754_powf+0x18c>
 80113de:	2c00      	cmp	r4, #0
 80113e0:	dcf3      	bgt.n	80113ca <__ieee754_powf+0x166>
 80113e2:	2000      	movs	r0, #0
 80113e4:	ecbd 8b02 	vpop	{d8}
 80113e8:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80113ec:	f000 ba92 	b.w	8011914 <__math_uflowf>
 80113f0:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80113f4:	ee30 0a67 	vsub.f32	s0, s0, s15
 80113f8:	eddf 6aa1 	vldr	s13, [pc, #644]	@ 8011680 <__ieee754_powf+0x41c>
 80113fc:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 8011400:	eee0 6a67 	vfms.f32	s13, s0, s15
 8011404:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8011408:	eee6 7ac0 	vfms.f32	s15, s13, s0
 801140c:	ee20 7a00 	vmul.f32	s14, s0, s0
 8011410:	ee27 7a27 	vmul.f32	s14, s14, s15
 8011414:	eddf 7a9b 	vldr	s15, [pc, #620]	@ 8011684 <__ieee754_powf+0x420>
 8011418:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 801141c:	ed9f 7a9a 	vldr	s14, [pc, #616]	@ 8011688 <__ieee754_powf+0x424>
 8011420:	eee0 7a07 	vfma.f32	s15, s0, s14
 8011424:	ed9f 7a99 	vldr	s14, [pc, #612]	@ 801168c <__ieee754_powf+0x428>
 8011428:	eef0 6a67 	vmov.f32	s13, s15
 801142c:	eee0 6a07 	vfma.f32	s13, s0, s14
 8011430:	ee16 3a90 	vmov	r3, s13
 8011434:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8011438:	f023 030f 	bic.w	r3, r3, #15
 801143c:	ee06 3a90 	vmov	s13, r3
 8011440:	eee0 6a47 	vfms.f32	s13, s0, s14
 8011444:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8011448:	3d01      	subs	r5, #1
 801144a:	f424 647f 	bic.w	r4, r4, #4080	@ 0xff0
 801144e:	4305      	orrs	r5, r0
 8011450:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8011454:	f024 040f 	bic.w	r4, r4, #15
 8011458:	eebf 8a00 	vmov.f32	s16, #240	@ 0xbf800000 -1.0
 801145c:	bf18      	it	ne
 801145e:	eeb0 8a47 	vmovne.f32	s16, s14
 8011462:	ee07 4a10 	vmov	s14, r4
 8011466:	ee67 0aa8 	vmul.f32	s1, s15, s17
 801146a:	ee38 7ac7 	vsub.f32	s14, s17, s14
 801146e:	ee07 3a90 	vmov	s15, r3
 8011472:	eee7 0a27 	vfma.f32	s1, s14, s15
 8011476:	ee07 4a10 	vmov	s14, r4
 801147a:	ee67 7a87 	vmul.f32	s15, s15, s14
 801147e:	ee30 7aa7 	vadd.f32	s14, s1, s15
 8011482:	ee17 1a10 	vmov	r1, s14
 8011486:	2900      	cmp	r1, #0
 8011488:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 801148c:	f340 80dd 	ble.w	801164a <__ieee754_powf+0x3e6>
 8011490:	f1b3 4f86 	cmp.w	r3, #1124073472	@ 0x43000000
 8011494:	f240 80ca 	bls.w	801162c <__ieee754_powf+0x3c8>
 8011498:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 801149c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80114a0:	bf4c      	ite	mi
 80114a2:	2001      	movmi	r0, #1
 80114a4:	2000      	movpl	r0, #0
 80114a6:	e791      	b.n	80113cc <__ieee754_powf+0x168>
 80114a8:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 80114ac:	bf01      	itttt	eq
 80114ae:	eddf 7a78 	vldreq	s15, [pc, #480]	@ 8011690 <__ieee754_powf+0x42c>
 80114b2:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 80114b6:	f06f 0317 	mvneq.w	r3, #23
 80114ba:	ee17 7a90 	vmoveq	r7, s15
 80114be:	ea4f 52e7 	mov.w	r2, r7, asr #23
 80114c2:	bf18      	it	ne
 80114c4:	2300      	movne	r3, #0
 80114c6:	3a7f      	subs	r2, #127	@ 0x7f
 80114c8:	441a      	add	r2, r3
 80114ca:	4b72      	ldr	r3, [pc, #456]	@ (8011694 <__ieee754_powf+0x430>)
 80114cc:	f3c7 0716 	ubfx	r7, r7, #0, #23
 80114d0:	429f      	cmp	r7, r3
 80114d2:	f047 517e 	orr.w	r1, r7, #1065353216	@ 0x3f800000
 80114d6:	dd06      	ble.n	80114e6 <__ieee754_powf+0x282>
 80114d8:	4b6f      	ldr	r3, [pc, #444]	@ (8011698 <__ieee754_powf+0x434>)
 80114da:	429f      	cmp	r7, r3
 80114dc:	f340 80a4 	ble.w	8011628 <__ieee754_powf+0x3c4>
 80114e0:	3201      	adds	r2, #1
 80114e2:	f5a1 0100 	sub.w	r1, r1, #8388608	@ 0x800000
 80114e6:	2600      	movs	r6, #0
 80114e8:	4b6c      	ldr	r3, [pc, #432]	@ (801169c <__ieee754_powf+0x438>)
 80114ea:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 80114ee:	ee07 1a10 	vmov	s14, r1
 80114f2:	edd3 5a00 	vldr	s11, [r3]
 80114f6:	4b6a      	ldr	r3, [pc, #424]	@ (80116a0 <__ieee754_powf+0x43c>)
 80114f8:	ee75 7a87 	vadd.f32	s15, s11, s14
 80114fc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8011500:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 8011504:	1049      	asrs	r1, r1, #1
 8011506:	f041 5100 	orr.w	r1, r1, #536870912	@ 0x20000000
 801150a:	f501 2180 	add.w	r1, r1, #262144	@ 0x40000
 801150e:	eb01 5146 	add.w	r1, r1, r6, lsl #21
 8011512:	ee37 6a65 	vsub.f32	s12, s14, s11
 8011516:	ee07 1a90 	vmov	s15, r1
 801151a:	ee26 5a24 	vmul.f32	s10, s12, s9
 801151e:	ee77 5ae5 	vsub.f32	s11, s15, s11
 8011522:	ee15 7a10 	vmov	r7, s10
 8011526:	401f      	ands	r7, r3
 8011528:	ee06 7a90 	vmov	s13, r7
 801152c:	eea6 6ae7 	vfms.f32	s12, s13, s15
 8011530:	ee37 7a65 	vsub.f32	s14, s14, s11
 8011534:	ee65 7a05 	vmul.f32	s15, s10, s10
 8011538:	eea6 6ac7 	vfms.f32	s12, s13, s14
 801153c:	eddf 5a59 	vldr	s11, [pc, #356]	@ 80116a4 <__ieee754_powf+0x440>
 8011540:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 80116a8 <__ieee754_powf+0x444>
 8011544:	eee7 5a87 	vfma.f32	s11, s15, s14
 8011548:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 80116ac <__ieee754_powf+0x448>
 801154c:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8011550:	eddf 5a4b 	vldr	s11, [pc, #300]	@ 8011680 <__ieee754_powf+0x41c>
 8011554:	eee7 5a27 	vfma.f32	s11, s14, s15
 8011558:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 80116b0 <__ieee754_powf+0x44c>
 801155c:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8011560:	eddf 5a54 	vldr	s11, [pc, #336]	@ 80116b4 <__ieee754_powf+0x450>
 8011564:	ee26 6a24 	vmul.f32	s12, s12, s9
 8011568:	eee7 5a27 	vfma.f32	s11, s14, s15
 801156c:	ee35 7a26 	vadd.f32	s14, s10, s13
 8011570:	ee67 4aa7 	vmul.f32	s9, s15, s15
 8011574:	ee27 7a06 	vmul.f32	s14, s14, s12
 8011578:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 801157c:	eea4 7aa5 	vfma.f32	s14, s9, s11
 8011580:	eef0 5a67 	vmov.f32	s11, s15
 8011584:	eee6 5aa6 	vfma.f32	s11, s13, s13
 8011588:	ee75 5a87 	vadd.f32	s11, s11, s14
 801158c:	ee15 1a90 	vmov	r1, s11
 8011590:	4019      	ands	r1, r3
 8011592:	ee05 1a90 	vmov	s11, r1
 8011596:	ee75 7ae7 	vsub.f32	s15, s11, s15
 801159a:	eee6 7ae6 	vfms.f32	s15, s13, s13
 801159e:	ee77 7a67 	vsub.f32	s15, s14, s15
 80115a2:	ee67 7a85 	vmul.f32	s15, s15, s10
 80115a6:	eee6 7a25 	vfma.f32	s15, s12, s11
 80115aa:	eeb0 6a67 	vmov.f32	s12, s15
 80115ae:	eea6 6aa5 	vfma.f32	s12, s13, s11
 80115b2:	ee16 1a10 	vmov	r1, s12
 80115b6:	4019      	ands	r1, r3
 80115b8:	ee06 1a10 	vmov	s12, r1
 80115bc:	eeb0 7a46 	vmov.f32	s14, s12
 80115c0:	eea6 7ae5 	vfms.f32	s14, s13, s11
 80115c4:	493c      	ldr	r1, [pc, #240]	@ (80116b8 <__ieee754_powf+0x454>)
 80115c6:	eb01 0186 	add.w	r1, r1, r6, lsl #2
 80115ca:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80115ce:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 80116bc <__ieee754_powf+0x458>
 80115d2:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 80116c0 <__ieee754_powf+0x45c>
 80115d6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80115da:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 80116c4 <__ieee754_powf+0x460>
 80115de:	eee6 7a07 	vfma.f32	s15, s12, s14
 80115e2:	ed91 7a00 	vldr	s14, [r1]
 80115e6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80115ea:	ee07 2a10 	vmov	s14, r2
 80115ee:	eef0 6a67 	vmov.f32	s13, s15
 80115f2:	4a35      	ldr	r2, [pc, #212]	@ (80116c8 <__ieee754_powf+0x464>)
 80115f4:	eee6 6a25 	vfma.f32	s13, s12, s11
 80115f8:	eb02 0286 	add.w	r2, r2, r6, lsl #2
 80115fc:	ed92 5a00 	vldr	s10, [r2]
 8011600:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8011604:	ee76 6a85 	vadd.f32	s13, s13, s10
 8011608:	ee76 6a87 	vadd.f32	s13, s13, s14
 801160c:	ee16 2a90 	vmov	r2, s13
 8011610:	4013      	ands	r3, r2
 8011612:	ee06 3a90 	vmov	s13, r3
 8011616:	ee36 7ac7 	vsub.f32	s14, s13, s14
 801161a:	ee37 7a45 	vsub.f32	s14, s14, s10
 801161e:	eea6 7a65 	vfms.f32	s14, s12, s11
 8011622:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011626:	e70f      	b.n	8011448 <__ieee754_powf+0x1e4>
 8011628:	2601      	movs	r6, #1
 801162a:	e75d      	b.n	80114e8 <__ieee754_powf+0x284>
 801162c:	d152      	bne.n	80116d4 <__ieee754_powf+0x470>
 801162e:	eddf 6a27 	vldr	s13, [pc, #156]	@ 80116cc <__ieee754_powf+0x468>
 8011632:	ee37 7a67 	vsub.f32	s14, s14, s15
 8011636:	ee70 6aa6 	vadd.f32	s13, s1, s13
 801163a:	eef4 6ac7 	vcmpe.f32	s13, s14
 801163e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011642:	f73f af29 	bgt.w	8011498 <__ieee754_powf+0x234>
 8011646:	2386      	movs	r3, #134	@ 0x86
 8011648:	e048      	b.n	80116dc <__ieee754_powf+0x478>
 801164a:	4a21      	ldr	r2, [pc, #132]	@ (80116d0 <__ieee754_powf+0x46c>)
 801164c:	4293      	cmp	r3, r2
 801164e:	d907      	bls.n	8011660 <__ieee754_powf+0x3fc>
 8011650:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8011654:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011658:	bf4c      	ite	mi
 801165a:	2001      	movmi	r0, #1
 801165c:	2000      	movpl	r0, #0
 801165e:	e6c1      	b.n	80113e4 <__ieee754_powf+0x180>
 8011660:	d138      	bne.n	80116d4 <__ieee754_powf+0x470>
 8011662:	ee37 7a67 	vsub.f32	s14, s14, s15
 8011666:	eeb4 7ae0 	vcmpe.f32	s14, s1
 801166a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801166e:	dbea      	blt.n	8011646 <__ieee754_powf+0x3e2>
 8011670:	e7ee      	b.n	8011650 <__ieee754_powf+0x3ec>
 8011672:	bf00      	nop
 8011674:	00000000 	.word	0x00000000
 8011678:	3f7ffff3 	.word	0x3f7ffff3
 801167c:	3f800007 	.word	0x3f800007
 8011680:	3eaaaaab 	.word	0x3eaaaaab
 8011684:	3fb8aa3b 	.word	0x3fb8aa3b
 8011688:	36eca570 	.word	0x36eca570
 801168c:	3fb8aa00 	.word	0x3fb8aa00
 8011690:	4b800000 	.word	0x4b800000
 8011694:	001cc471 	.word	0x001cc471
 8011698:	005db3d6 	.word	0x005db3d6
 801169c:	08011cac 	.word	0x08011cac
 80116a0:	fffff000 	.word	0xfffff000
 80116a4:	3e6c3255 	.word	0x3e6c3255
 80116a8:	3e53f142 	.word	0x3e53f142
 80116ac:	3e8ba305 	.word	0x3e8ba305
 80116b0:	3edb6db7 	.word	0x3edb6db7
 80116b4:	3f19999a 	.word	0x3f19999a
 80116b8:	08011c9c 	.word	0x08011c9c
 80116bc:	3f76384f 	.word	0x3f76384f
 80116c0:	3f763800 	.word	0x3f763800
 80116c4:	369dc3a0 	.word	0x369dc3a0
 80116c8:	08011ca4 	.word	0x08011ca4
 80116cc:	3338aa3c 	.word	0x3338aa3c
 80116d0:	43160000 	.word	0x43160000
 80116d4:	f1b3 5f7c 	cmp.w	r3, #1056964608	@ 0x3f000000
 80116d8:	d971      	bls.n	80117be <__ieee754_powf+0x55a>
 80116da:	15db      	asrs	r3, r3, #23
 80116dc:	3b7e      	subs	r3, #126	@ 0x7e
 80116de:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 80116e2:	4118      	asrs	r0, r3
 80116e4:	4408      	add	r0, r1
 80116e6:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 80116ea:	4a3c      	ldr	r2, [pc, #240]	@ (80117dc <__ieee754_powf+0x578>)
 80116ec:	3b7f      	subs	r3, #127	@ 0x7f
 80116ee:	411a      	asrs	r2, r3
 80116f0:	4002      	ands	r2, r0
 80116f2:	ee07 2a10 	vmov	s14, r2
 80116f6:	f3c0 0016 	ubfx	r0, r0, #0, #23
 80116fa:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80116fe:	f1c3 0317 	rsb	r3, r3, #23
 8011702:	4118      	asrs	r0, r3
 8011704:	2900      	cmp	r1, #0
 8011706:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801170a:	bfb8      	it	lt
 801170c:	4240      	neglt	r0, r0
 801170e:	ee37 7aa0 	vadd.f32	s14, s15, s1
 8011712:	eddf 6a33 	vldr	s13, [pc, #204]	@ 80117e0 <__ieee754_powf+0x57c>
 8011716:	ed9f 6a33 	vldr	s12, [pc, #204]	@ 80117e4 <__ieee754_powf+0x580>
 801171a:	ee17 3a10 	vmov	r3, s14
 801171e:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8011722:	f023 030f 	bic.w	r3, r3, #15
 8011726:	ee07 3a10 	vmov	s14, r3
 801172a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801172e:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8011732:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8011736:	eddf 7a2c 	vldr	s15, [pc, #176]	@ 80117e8 <__ieee754_powf+0x584>
 801173a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801173e:	eee0 7aa6 	vfma.f32	s15, s1, s13
 8011742:	eef0 6a67 	vmov.f32	s13, s15
 8011746:	eee7 6a06 	vfma.f32	s13, s14, s12
 801174a:	eef0 5a66 	vmov.f32	s11, s13
 801174e:	eee7 5a46 	vfms.f32	s11, s14, s12
 8011752:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8011756:	ee77 7ae5 	vsub.f32	s15, s15, s11
 801175a:	ed9f 6a24 	vldr	s12, [pc, #144]	@ 80117ec <__ieee754_powf+0x588>
 801175e:	eddf 5a24 	vldr	s11, [pc, #144]	@ 80117f0 <__ieee754_powf+0x58c>
 8011762:	eea7 6a25 	vfma.f32	s12, s14, s11
 8011766:	eddf 5a23 	vldr	s11, [pc, #140]	@ 80117f4 <__ieee754_powf+0x590>
 801176a:	eee6 5a07 	vfma.f32	s11, s12, s14
 801176e:	ed9f 6a22 	vldr	s12, [pc, #136]	@ 80117f8 <__ieee754_powf+0x594>
 8011772:	eea5 6a87 	vfma.f32	s12, s11, s14
 8011776:	eddf 5a21 	vldr	s11, [pc, #132]	@ 80117fc <__ieee754_powf+0x598>
 801177a:	eee6 5a07 	vfma.f32	s11, s12, s14
 801177e:	eeb0 6a66 	vmov.f32	s12, s13
 8011782:	eea5 6ac7 	vfms.f32	s12, s11, s14
 8011786:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 801178a:	ee66 5a86 	vmul.f32	s11, s13, s12
 801178e:	ee36 6a47 	vsub.f32	s12, s12, s14
 8011792:	eee6 7aa7 	vfma.f32	s15, s13, s15
 8011796:	ee85 7a86 	vdiv.f32	s14, s11, s12
 801179a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801179e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80117a2:	ee30 0a67 	vsub.f32	s0, s0, s15
 80117a6:	ee10 3a10 	vmov	r3, s0
 80117aa:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 80117ae:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80117b2:	da06      	bge.n	80117c2 <__ieee754_powf+0x55e>
 80117b4:	f000 f82e 	bl	8011814 <scalbnf>
 80117b8:	ee20 0a08 	vmul.f32	s0, s0, s16
 80117bc:	e56a      	b.n	8011294 <__ieee754_powf+0x30>
 80117be:	2000      	movs	r0, #0
 80117c0:	e7a5      	b.n	801170e <__ieee754_powf+0x4aa>
 80117c2:	ee00 3a10 	vmov	s0, r3
 80117c6:	e7f7      	b.n	80117b8 <__ieee754_powf+0x554>
 80117c8:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80117cc:	e562      	b.n	8011294 <__ieee754_powf+0x30>
 80117ce:	ed9f 0a0c 	vldr	s0, [pc, #48]	@ 8011800 <__ieee754_powf+0x59c>
 80117d2:	e55f      	b.n	8011294 <__ieee754_powf+0x30>
 80117d4:	eeb0 0a48 	vmov.f32	s0, s16
 80117d8:	e55c      	b.n	8011294 <__ieee754_powf+0x30>
 80117da:	bf00      	nop
 80117dc:	ff800000 	.word	0xff800000
 80117e0:	3f317218 	.word	0x3f317218
 80117e4:	3f317200 	.word	0x3f317200
 80117e8:	35bfbe8c 	.word	0x35bfbe8c
 80117ec:	b5ddea0e 	.word	0xb5ddea0e
 80117f0:	3331bb4c 	.word	0x3331bb4c
 80117f4:	388ab355 	.word	0x388ab355
 80117f8:	bb360b61 	.word	0xbb360b61
 80117fc:	3e2aaaab 	.word	0x3e2aaaab
 8011800:	00000000 	.word	0x00000000

08011804 <fabsf>:
 8011804:	ee10 3a10 	vmov	r3, s0
 8011808:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801180c:	ee00 3a10 	vmov	s0, r3
 8011810:	4770      	bx	lr
	...

08011814 <scalbnf>:
 8011814:	ee10 3a10 	vmov	r3, s0
 8011818:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 801181c:	d02b      	beq.n	8011876 <scalbnf+0x62>
 801181e:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8011822:	d302      	bcc.n	801182a <scalbnf+0x16>
 8011824:	ee30 0a00 	vadd.f32	s0, s0, s0
 8011828:	4770      	bx	lr
 801182a:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 801182e:	d123      	bne.n	8011878 <scalbnf+0x64>
 8011830:	4b24      	ldr	r3, [pc, #144]	@ (80118c4 <scalbnf+0xb0>)
 8011832:	eddf 7a25 	vldr	s15, [pc, #148]	@ 80118c8 <scalbnf+0xb4>
 8011836:	4298      	cmp	r0, r3
 8011838:	ee20 0a27 	vmul.f32	s0, s0, s15
 801183c:	db17      	blt.n	801186e <scalbnf+0x5a>
 801183e:	ee10 3a10 	vmov	r3, s0
 8011842:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8011846:	3a19      	subs	r2, #25
 8011848:	f24c 3150 	movw	r1, #50000	@ 0xc350
 801184c:	4288      	cmp	r0, r1
 801184e:	dd15      	ble.n	801187c <scalbnf+0x68>
 8011850:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 80118cc <scalbnf+0xb8>
 8011854:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 80118d0 <scalbnf+0xbc>
 8011858:	ee10 3a10 	vmov	r3, s0
 801185c:	eeb0 7a67 	vmov.f32	s14, s15
 8011860:	2b00      	cmp	r3, #0
 8011862:	bfb8      	it	lt
 8011864:	eef0 7a66 	vmovlt.f32	s15, s13
 8011868:	ee27 0a87 	vmul.f32	s0, s15, s14
 801186c:	4770      	bx	lr
 801186e:	eddf 7a19 	vldr	s15, [pc, #100]	@ 80118d4 <scalbnf+0xc0>
 8011872:	ee27 0a80 	vmul.f32	s0, s15, s0
 8011876:	4770      	bx	lr
 8011878:	0dd2      	lsrs	r2, r2, #23
 801187a:	e7e5      	b.n	8011848 <scalbnf+0x34>
 801187c:	4410      	add	r0, r2
 801187e:	28fe      	cmp	r0, #254	@ 0xfe
 8011880:	dce6      	bgt.n	8011850 <scalbnf+0x3c>
 8011882:	2800      	cmp	r0, #0
 8011884:	dd06      	ble.n	8011894 <scalbnf+0x80>
 8011886:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 801188a:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 801188e:	ee00 3a10 	vmov	s0, r3
 8011892:	4770      	bx	lr
 8011894:	f110 0f16 	cmn.w	r0, #22
 8011898:	da09      	bge.n	80118ae <scalbnf+0x9a>
 801189a:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 80118d4 <scalbnf+0xc0>
 801189e:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 80118d8 <scalbnf+0xc4>
 80118a2:	ee10 3a10 	vmov	r3, s0
 80118a6:	eeb0 7a67 	vmov.f32	s14, s15
 80118aa:	2b00      	cmp	r3, #0
 80118ac:	e7d9      	b.n	8011862 <scalbnf+0x4e>
 80118ae:	3019      	adds	r0, #25
 80118b0:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80118b4:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 80118b8:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 80118dc <scalbnf+0xc8>
 80118bc:	ee07 3a90 	vmov	s15, r3
 80118c0:	e7d7      	b.n	8011872 <scalbnf+0x5e>
 80118c2:	bf00      	nop
 80118c4:	ffff3cb0 	.word	0xffff3cb0
 80118c8:	4c000000 	.word	0x4c000000
 80118cc:	7149f2ca 	.word	0x7149f2ca
 80118d0:	f149f2ca 	.word	0xf149f2ca
 80118d4:	0da24260 	.word	0x0da24260
 80118d8:	8da24260 	.word	0x8da24260
 80118dc:	33000000 	.word	0x33000000

080118e0 <with_errnof>:
 80118e0:	b510      	push	{r4, lr}
 80118e2:	ed2d 8b02 	vpush	{d8}
 80118e6:	eeb0 8a40 	vmov.f32	s16, s0
 80118ea:	4604      	mov	r4, r0
 80118ec:	f7fe fcd4 	bl	8010298 <__errno>
 80118f0:	eeb0 0a48 	vmov.f32	s0, s16
 80118f4:	ecbd 8b02 	vpop	{d8}
 80118f8:	6004      	str	r4, [r0, #0]
 80118fa:	bd10      	pop	{r4, pc}

080118fc <xflowf>:
 80118fc:	b130      	cbz	r0, 801190c <xflowf+0x10>
 80118fe:	eef1 7a40 	vneg.f32	s15, s0
 8011902:	ee27 0a80 	vmul.f32	s0, s15, s0
 8011906:	2022      	movs	r0, #34	@ 0x22
 8011908:	f7ff bfea 	b.w	80118e0 <with_errnof>
 801190c:	eef0 7a40 	vmov.f32	s15, s0
 8011910:	e7f7      	b.n	8011902 <xflowf+0x6>
	...

08011914 <__math_uflowf>:
 8011914:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 801191c <__math_uflowf+0x8>
 8011918:	f7ff bff0 	b.w	80118fc <xflowf>
 801191c:	10000000 	.word	0x10000000

08011920 <__math_oflowf>:
 8011920:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8011928 <__math_oflowf+0x8>
 8011924:	f7ff bfea 	b.w	80118fc <xflowf>
 8011928:	70000000 	.word	0x70000000

0801192c <_init>:
 801192c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801192e:	bf00      	nop
 8011930:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011932:	bc08      	pop	{r3}
 8011934:	469e      	mov	lr, r3
 8011936:	4770      	bx	lr

08011938 <_fini>:
 8011938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801193a:	bf00      	nop
 801193c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801193e:	bc08      	pop	{r3}
 8011940:	469e      	mov	lr, r3
 8011942:	4770      	bx	lr
