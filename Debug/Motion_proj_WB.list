
Motion_proj_WB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000122a0  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003a8  080123e0  080123e0  000133e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08012788  08012788  00013788  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08012790  08012790  00013790  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08012794  08012794  00013794  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000000e0  20000008  08012798  00014008  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 BLE_DRIVER_CONTEXT 00000035  200000e8  08012878  000140e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 SYSTEM_DRIVER_CONTEXT 00000011  20000120  080128ad  00014120  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000024bc  20000138  080128be  00014138  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200025f4  080128be  000145f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00014a67  2**0
                  CONTENTS, READONLY
 12 MAPPING_TABLE 00000028  20030000  20030000  00015000  2**2
                  ALLOC
 13 MB_MEM1       000001bb  20030028  20030028  00015000  2**2
                  ALLOC
 14 .MB_MEM2      00000883  200301e4  080128be  000141e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 15 .debug_info   0002fa71  00000000  00000000  00014a97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 0000691c  00000000  00000000  00044508  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00002e40  00000000  00000000  0004ae28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 0000238a  00000000  00000000  0004dc68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0002ee24  00000000  00000000  0004fff2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   00036316  00000000  00000000  0007ee16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    00102d02  00000000  00000000  000b512c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      00000043  00000000  00000000  001b7e2e  2**0
                  CONTENTS, READONLY
 23 .debug_frame  0000d0fc  00000000  00000000  001b7e74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 0000006e  00000000  00000000  001c4f70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000138 	.word	0x20000138
 800015c:	00000000 	.word	0x00000000
 8000160:	080123c8 	.word	0x080123c8

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	2000013c 	.word	0x2000013c
 800017c:	080123c8 	.word	0x080123c8

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	@ 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2f>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b10:	bf24      	itt	cs
 8000b12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b1a:	d90d      	bls.n	8000b38 <__aeabi_d2f+0x30>
 8000b1c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b28:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b30:	bf08      	it	eq
 8000b32:	f020 0001 	biceq.w	r0, r0, #1
 8000b36:	4770      	bx	lr
 8000b38:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b3c:	d121      	bne.n	8000b82 <__aeabi_d2f+0x7a>
 8000b3e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b42:	bfbc      	itt	lt
 8000b44:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b48:	4770      	bxlt	lr
 8000b4a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b52:	f1c2 0218 	rsb	r2, r2, #24
 8000b56:	f1c2 0c20 	rsb	ip, r2, #32
 8000b5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b62:	bf18      	it	ne
 8000b64:	f040 0001 	orrne.w	r0, r0, #1
 8000b68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b74:	ea40 000c 	orr.w	r0, r0, ip
 8000b78:	fa23 f302 	lsr.w	r3, r3, r2
 8000b7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b80:	e7cc      	b.n	8000b1c <__aeabi_d2f+0x14>
 8000b82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b86:	d107      	bne.n	8000b98 <__aeabi_d2f+0x90>
 8000b88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b8c:	bf1e      	ittt	ne
 8000b8e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b92:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b96:	4770      	bxne	lr
 8000b98:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b9c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ba0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <APPD_EnableCPU2>:
/* USER CODE END APPD_Init */
  return;
}

void APPD_EnableCPU2( void )
{
 8000ba8:	b5b0      	push	{r4, r5, r7, lr}
 8000baa:	b088      	sub	sp, #32
 8000bac:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 8000bae:	4b0b      	ldr	r3, [pc, #44]	@ (8000bdc <APPD_EnableCPU2+0x34>)
 8000bb0:	1d3c      	adds	r4, r7, #4
 8000bb2:	461d      	mov	r5, r3
 8000bb4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bb6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bb8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000bbc:	c403      	stmia	r4!, {r0, r1}
 8000bbe:	8022      	strh	r2, [r4, #0]
 8000bc0:	3402      	adds	r4, #2
 8000bc2:	0c13      	lsrs	r3, r2, #16
 8000bc4:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 8000bc6:	f00e f8d3 	bl	800ed70 <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 8000bca:	1d3b      	adds	r3, r7, #4
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f00d fb64 	bl	800e29a <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 8000bd2:	bf00      	nop
}
 8000bd4:	3720      	adds	r7, #32
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bdb0      	pop	{r4, r5, r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	080123e0 	.word	0x080123e0

08000be0 <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 8000be0:	b480      	push	{r7}
 8000be2:	b083      	sub	sp, #12
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 8000be8:	4b07      	ldr	r3, [pc, #28]	@ (8000c08 <LL_C2_PWR_SetPowerMode+0x28>)
 8000bea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000bee:	f023 0207 	bic.w	r2, r3, #7
 8000bf2:	4905      	ldr	r1, [pc, #20]	@ (8000c08 <LL_C2_PWR_SetPowerMode+0x28>)
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	4313      	orrs	r3, r2
 8000bf8:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 8000bfc:	bf00      	nop
 8000bfe:	370c      	adds	r7, #12
 8000c00:	46bd      	mov	sp, r7
 8000c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c06:	4770      	bx	lr
 8000c08:	58000400 	.word	0x58000400

08000c0c <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	b083      	sub	sp, #12
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8000c14:	4b06      	ldr	r3, [pc, #24]	@ (8000c30 <LL_EXTI_EnableIT_32_63+0x24>)
 8000c16:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8000c1a:	4905      	ldr	r1, [pc, #20]	@ (8000c30 <LL_EXTI_EnableIT_32_63+0x24>)
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	4313      	orrs	r3, r2
 8000c20:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8000c24:	bf00      	nop
 8000c26:	370c      	adds	r7, #12
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2e:	4770      	bx	lr
 8000c30:	58000800 	.word	0x58000800

08000c34 <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 8000c34:	b480      	push	{r7}
 8000c36:	b083      	sub	sp, #12
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 8000c3c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000c40:	4a0a      	ldr	r2, [pc, #40]	@ (8000c6c <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 8000c42:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 8000c46:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000c4a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000c4e:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	021b      	lsls	r3, r3, #8
 8000c56:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000c5a:	4313      	orrs	r3, r2
 8000c5c:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
}
 8000c60:	bf00      	nop
 8000c62:	370c      	adds	r7, #12
 8000c64:	46bd      	mov	sp, r7
 8000c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6a:	4770      	bx	lr
 8000c6c:	cafecafe 	.word	0xcafecafe

08000c70 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8000c70:	b480      	push	{r7}
 8000c72:	b083      	sub	sp, #12
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8000c78:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000c7c:	689b      	ldr	r3, [r3, #8]
 8000c7e:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8000c82:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	4313      	orrs	r3, r2
 8000c8a:	608b      	str	r3, [r1, #8]
}
 8000c8c:	bf00      	nop
 8000c8e:	370c      	adds	r7, #12
 8000c90:	46bd      	mov	sp, r7
 8000c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c96:	4770      	bx	lr

08000c98 <LL_DBGMCU_GetDeviceID>:
  * @note   For STM32WBxxxx devices, the device ID is 0x495
  * @rmtoll DBGMCU_IDCODE DEV_ID        LL_DBGMCU_GetDeviceID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFF (ex: device ID is 0x495)
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetDeviceID(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_DEV_ID));
 8000c9c:	4b04      	ldr	r3, [pc, #16]	@ (8000cb0 <LL_DBGMCU_GetDeviceID+0x18>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop
 8000cb0:	e0042000 	.word	0xe0042000

08000cb4 <LL_DBGMCU_GetRevisionID>:
  * @note   This field indicates the revision of the device.
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 8000cb8:	4b04      	ldr	r3, [pc, #16]	@ (8000ccc <LL_DBGMCU_GetRevisionID+0x18>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	0c1b      	lsrs	r3, r3, #16
 8000cbe:	b29b      	uxth	r3, r3
}
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc8:	4770      	bx	lr
 8000cca:	bf00      	nop
 8000ccc:	e0042000 	.word	0xe0042000

08000cd0 <LL_LPM_EnableSleep>:
  * @brief  Processor uses sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8000cd4:	4b05      	ldr	r3, [pc, #20]	@ (8000cec <LL_LPM_EnableSleep+0x1c>)
 8000cd6:	691b      	ldr	r3, [r3, #16]
 8000cd8:	4a04      	ldr	r2, [pc, #16]	@ (8000cec <LL_LPM_EnableSleep+0x1c>)
 8000cda:	f023 0304 	bic.w	r3, r3, #4
 8000cde:	6113      	str	r3, [r2, #16]
}
 8000ce0:	bf00      	nop
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce8:	4770      	bx	lr
 8000cea:	bf00      	nop
 8000cec:	e000ed00 	.word	0xe000ed00

08000cf0 <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	b083      	sub	sp, #12
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	22ff      	movs	r2, #255	@ 0xff
 8000cfc:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8000cfe:	bf00      	nop
 8000d00:	370c      	adds	r7, #12
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr

08000d0a <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 8000d0a:	b480      	push	{r7}
 8000d0c:	b083      	sub	sp, #12
 8000d0e:	af00      	add	r7, sp, #0
 8000d10:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	22ca      	movs	r2, #202	@ 0xca
 8000d16:	625a      	str	r2, [r3, #36]	@ 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	2253      	movs	r2, #83	@ 0x53
 8000d1c:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8000d1e:	bf00      	nop
 8000d20:	370c      	adds	r7, #12
 8000d22:	46bd      	mov	sp, r7
 8000d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d28:	4770      	bx	lr

08000d2a <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 8000d2a:	b480      	push	{r7}
 8000d2c:	b083      	sub	sp, #12
 8000d2e:	af00      	add	r7, sp, #0
 8000d30:	6078      	str	r0, [r7, #4]
 8000d32:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	689b      	ldr	r3, [r3, #8]
 8000d38:	f023 0207 	bic.w	r2, r3, #7
 8000d3c:	683b      	ldr	r3, [r7, #0]
 8000d3e:	431a      	orrs	r2, r3
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	609a      	str	r2, [r3, #8]
}
 8000d44:	bf00      	nop
 8000d46:	370c      	adds	r7, #12
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4e:	4770      	bx	lr

08000d50 <MX_APPE_Config>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8000d54:	4b04      	ldr	r3, [pc, #16]	@ (8000d68 <MX_APPE_Config+0x18>)
 8000d56:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000d5a:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device();
 8000d5c:	f000 f824 	bl	8000da8 <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 8000d60:	f000 f829 	bl	8000db6 <Config_HSE>

  return;
 8000d64:	bf00      	nop
}
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	58004000 	.word	0x58004000

08000d6c <MX_APPE_Init>:

void MX_APPE_Init(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	af00      	add	r7, sp, #0
  System_Init();       /**< System initialization */
 8000d70:	f000 f835 	bl	8000dde <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 8000d74:	f000 f84e 	bl	8000e14 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 8000d78:	4903      	ldr	r1, [pc, #12]	@ (8000d88 <MX_APPE_Init+0x1c>)
 8000d7a:	2000      	movs	r0, #0
 8000d7c:	f000 fd9a 	bl	80018b4 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 8000d80:	f000 f856 	bl	8000e30 <appe_Tl_Init>
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */

   return;
 8000d84:	bf00      	nop
}
 8000d86:	bd80      	pop	{r7, pc}
 8000d88:	200002ec 	.word	0x200002ec

08000d8c <Init_Smps>:

void Init_Smps(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif /* CFG_USE_SMPS != 0 */

  return;
 8000d90:	bf00      	nop
}
 8000d92:	46bd      	mov	sp, r7
 8000d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d98:	4770      	bx	lr

08000d9a <Init_Exti>:

void Init_Exti(void)
{
 8000d9a:	b580      	push	{r7, lr}
 8000d9c:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_36 | LL_EXTI_LINE_38);
 8000d9e:	2050      	movs	r0, #80	@ 0x50
 8000da0:	f7ff ff34 	bl	8000c0c <LL_EXTI_EnableIT_32_63>

  return;
 8000da4:	bf00      	nop
}
 8000da6:	bd80      	pop	{r7, pc}

08000da8 <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
  Reset_BackupDomain();

  Reset_IPCC();
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 8000dac:	bf00      	nop
}
 8000dae:	46bd      	mov	sp, r7
 8000db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db4:	4770      	bx	lr

08000db6 <Config_HSE>:
  return;
}
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 8000db6:	b580      	push	{r7, lr}
 8000db8:	b082      	sub	sp, #8
 8000dba:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 8000dbc:	2000      	movs	r0, #0
 8000dbe:	f00e f863 	bl	800ee88 <OTP_Read>
 8000dc2:	6078      	str	r0, [r7, #4]
  if (p_otp)
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d005      	beq.n	8000dd6 <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	799b      	ldrb	r3, [r3, #6]
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f7ff ff30 	bl	8000c34 <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 8000dd4:	bf00      	nop
 8000dd6:	bf00      	nop
}
 8000dd8:	3708      	adds	r7, #8
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}

08000dde <System_Init>:

static void System_Init(void)
{
 8000dde:	b580      	push	{r7, lr}
 8000de0:	af00      	add	r7, sp, #0
  Init_Smps();
 8000de2:	f7ff ffd3 	bl	8000d8c <Init_Smps>

  Init_Exti();
 8000de6:	f7ff ffd8 	bl	8000d9a <Init_Exti>

  Init_Rtc();
 8000dea:	f000 f803 	bl	8000df4 <Init_Rtc>

  return;
 8000dee:	bf00      	nop
}
 8000df0:	bd80      	pop	{r7, pc}
	...

08000df4 <Init_Rtc>:

static void Init_Rtc(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 8000df8:	4805      	ldr	r0, [pc, #20]	@ (8000e10 <Init_Rtc+0x1c>)
 8000dfa:	f7ff ff86 	bl	8000d0a <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 8000dfe:	2100      	movs	r1, #0
 8000e00:	4803      	ldr	r0, [pc, #12]	@ (8000e10 <Init_Rtc+0x1c>)
 8000e02:	f7ff ff92 	bl	8000d2a <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 8000e06:	4802      	ldr	r0, [pc, #8]	@ (8000e10 <Init_Rtc+0x1c>)
 8000e08:	f7ff ff72 	bl	8000cf0 <LL_RTC_EnableWriteProtection>

  return;
 8000e0c:	bf00      	nop
}
 8000e0e:	bd80      	pop	{r7, pc}
 8000e10:	40002800 	.word	0x40002800

08000e14 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8000e18:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8000e1c:	f7ff ff28 	bl	8000c70 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 8000e20:	f00f f9c0 	bl	80101a4 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 8000e24:	2004      	movs	r0, #4
 8000e26:	f7ff fedb 	bl	8000be0 <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif /* CFG_USB_INTERFACE_ENABLE != 0 */

  return;
 8000e2a:	bf00      	nop
}
 8000e2c:	bd80      	pop	{r7, pc}
	...

08000e30 <appe_Tl_Init>:

static void appe_Tl_Init(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b088      	sub	sp, #32
 8000e34:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 8000e36:	f00d fde5 	bl	800ea04 <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask(1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc);
 8000e3a:	4a11      	ldr	r2, [pc, #68]	@ (8000e80 <appe_Tl_Init+0x50>)
 8000e3c:	2100      	movs	r1, #0
 8000e3e:	2010      	movs	r0, #16
 8000e40:	f00f faee 	bl	8010420 <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 8000e44:	4b0f      	ldr	r3, [pc, #60]	@ (8000e84 <appe_Tl_Init+0x54>)
 8000e46:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 8000e48:	4b0f      	ldr	r3, [pc, #60]	@ (8000e88 <appe_Tl_Init+0x58>)
 8000e4a:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 8000e4c:	463b      	mov	r3, r7
 8000e4e:	4619      	mov	r1, r3
 8000e50:	480e      	ldr	r0, [pc, #56]	@ (8000e8c <appe_Tl_Init+0x5c>)
 8000e52:	f00d fc99 	bl	800e788 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 8000e56:	4b0e      	ldr	r3, [pc, #56]	@ (8000e90 <appe_Tl_Init+0x60>)
 8000e58:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 8000e5a:	4b0e      	ldr	r3, [pc, #56]	@ (8000e94 <appe_Tl_Init+0x64>)
 8000e5c:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 8000e5e:	4b0e      	ldr	r3, [pc, #56]	@ (8000e98 <appe_Tl_Init+0x68>)
 8000e60:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 8000e62:	f240 533c 	movw	r3, #1340	@ 0x53c
 8000e66:	617b      	str	r3, [r7, #20]
  TL_MM_Init(&tl_mm_config);
 8000e68:	f107 0308 	add.w	r3, r7, #8
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f00d ff0b 	bl	800ec88 <TL_MM_Init>

  TL_Enable();
 8000e72:	f00d fdc1 	bl	800e9f8 <TL_Enable>

  return;
 8000e76:	bf00      	nop
}
 8000e78:	3720      	adds	r7, #32
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	0800e7c1 	.word	0x0800e7c1
 8000e84:	20030734 	.word	0x20030734
 8000e88:	08000e9d 	.word	0x08000e9d
 8000e8c:	08000eb5 	.word	0x08000eb5
 8000e90:	2003094c 	.word	0x2003094c
 8000e94:	20030840 	.word	0x20030840
 8000e98:	200301f8 	.word	0x200301f8

08000e9c <APPE_SysStatusNot>:

static void APPE_SysStatusNot(SHCI_TL_CmdStatus_t status)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	b083      	sub	sp, #12
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 8000ea6:	bf00      	nop
}
 8000ea8:	370c      	adds	r7, #12
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb0:	4770      	bx	lr
	...

08000eb4 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * (eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable)
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx(void * pPayload)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b088      	sub	sp, #32
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  WirelessFwInfo_t WirelessInfo;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	685b      	ldr	r3, [r3, #4]
 8000ec0:	330b      	adds	r3, #11
 8000ec2:	61fb      	str	r3, [r7, #28]

  switch(p_sys_event->subevtcode)
 8000ec4:	69fb      	ldr	r3, [r7, #28]
 8000ec6:	881b      	ldrh	r3, [r3, #0]
 8000ec8:	b29b      	uxth	r3, r3
 8000eca:	f5a3 4312 	sub.w	r3, r3, #37376	@ 0x9200
 8000ece:	2b07      	cmp	r3, #7
 8000ed0:	d81f      	bhi.n	8000f12 <APPE_SysUserEvtRx+0x5e>
 8000ed2:	a201      	add	r2, pc, #4	@ (adr r2, 8000ed8 <APPE_SysUserEvtRx+0x24>)
 8000ed4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ed8:	08000ef9 	.word	0x08000ef9
 8000edc:	08000f0b 	.word	0x08000f0b
 8000ee0:	08000f13 	.word	0x08000f13
 8000ee4:	08000f13 	.word	0x08000f13
 8000ee8:	08000f13 	.word	0x08000f13
 8000eec:	08000f13 	.word	0x08000f13
 8000ef0:	08000f13 	.word	0x08000f13
 8000ef4:	08000f13 	.word	0x08000f13
  {
  case SHCI_SUB_EVT_CODE_READY:
    /* Read the firmware version of both the wireless firmware and the FUS */
    SHCI_GetWirelessFwInfo(&WirelessInfo);
 8000ef8:	f107 030c 	add.w	r3, r7, #12
 8000efc:	4618      	mov	r0, r3
 8000efe:	f00d f9f9 	bl	800e2f4 <SHCI_GetWirelessFwInfo>
    APP_DBG_MSG("Wireless Firmware version %d.%d.%d\n", WirelessInfo.VersionMajor, WirelessInfo.VersionMinor, WirelessInfo.VersionSub);
    APP_DBG_MSG("Wireless Firmware build %d\n", WirelessInfo.VersionReleaseType);
    APP_DBG_MSG("FUS version %d.%d.%d\n", WirelessInfo.FusVersionMajor, WirelessInfo.FusVersionMinor, WirelessInfo.FusVersionSub);

    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY\n\r");
    APPE_SysEvtReadyProcessing(pPayload);
 8000f02:	6878      	ldr	r0, [r7, #4]
 8000f04:	f000 f81b 	bl	8000f3e <APPE_SysEvtReadyProcessing>
    break;
 8000f08:	e004      	b.n	8000f14 <APPE_SysUserEvtRx+0x60>

  case SHCI_SUB_EVT_ERROR_NOTIF:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF \n\r");
    APPE_SysEvtError(pPayload);
 8000f0a:	6878      	ldr	r0, [r7, #4]
 8000f0c:	f000 f806 	bl	8000f1c <APPE_SysEvtError>
    break;
 8000f10:	e000      	b.n	8000f14 <APPE_SysUserEvtRx+0x60>
  case SHCI_SUB_EVT_NVM_END_ERASE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_ERASE\n\r");
    break;

  default:
    break;
 8000f12:	bf00      	nop
  }

  return;
 8000f14:	bf00      	nop
}
 8000f16:	3720      	adds	r7, #32
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}

08000f1c <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError(void * pPayload)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b085      	sub	sp, #20
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SCHI_SystemErrCode_t *p_sys_error_code;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	685b      	ldr	r3, [r3, #4]
 8000f28:	330b      	adds	r3, #11
 8000f2a:	60fb      	str	r3, [r7, #12]
  p_sys_error_code = (SCHI_SystemErrCode_t*) p_sys_event->payload;
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	3302      	adds	r3, #2
 8000f30:	60bb      	str	r3, [r7, #8]
  }
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
  }
  return;
 8000f32:	bf00      	nop
}
 8000f34:	3714      	adds	r7, #20
 8000f36:	46bd      	mov	sp, r7
 8000f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3c:	4770      	bx	lr

08000f3e <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing(void * pPayload)
{
 8000f3e:	b580      	push	{r7, lr}
 8000f40:	b08a      	sub	sp, #40	@ 0x28
 8000f42:	af00      	add	r7, sp, #0
 8000f44:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SHCI_C2_Ready_Evt_t *p_sys_ready_event;

  SHCI_C2_CONFIG_Cmd_Param_t config_param = {0};
 8000f46:	f107 0308 	add.w	r3, r7, #8
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	601a      	str	r2, [r3, #0]
 8000f4e:	605a      	str	r2, [r3, #4]
 8000f50:	609a      	str	r2, [r3, #8]
 8000f52:	60da      	str	r2, [r3, #12]
  uint32_t RevisionID=0;
 8000f54:	2300      	movs	r3, #0
 8000f56:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t DeviceID=0;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	623b      	str	r3, [r7, #32]

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	685b      	ldr	r3, [r3, #4]
 8000f60:	330b      	adds	r3, #11
 8000f62:	61fb      	str	r3, [r7, #28]
  p_sys_ready_event = (SHCI_C2_Ready_Evt_t*) p_sys_event->payload;
 8000f64:	69fb      	ldr	r3, [r7, #28]
 8000f66:	3302      	adds	r3, #2
 8000f68:	61bb      	str	r3, [r7, #24]

  if (p_sys_ready_event->sysevt_ready_rsp == WIRELESS_FW_RUNNING)
 8000f6a:	69bb      	ldr	r3, [r7, #24]
 8000f6c:	781b      	ldrb	r3, [r3, #0]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d11d      	bne.n	8000fae <APPE_SysEvtReadyProcessing+0x70>
    * The wireless firmware is running on the CPU2
    */
    APP_DBG_MSG(">>== WIRELESS_FW_RUNNING \n");

    /* Traces channel initialization */
    APPD_EnableCPU2();
 8000f72:	f7ff fe19 	bl	8000ba8 <APPD_EnableCPU2>

    /* Enable all events Notification */
    config_param.PayloadCmdSize = SHCI_C2_CONFIG_PAYLOAD_CMD_SIZE;
 8000f76:	230f      	movs	r3, #15
 8000f78:	723b      	strb	r3, [r7, #8]
    config_param.EvtMask1 = SHCI_C2_CONFIG_EVTMASK1_BIT0_ERROR_NOTIF_ENABLE
 8000f7a:	237f      	movs	r3, #127	@ 0x7f
 8000f7c:	72bb      	strb	r3, [r7, #10]
    * @brief  Return the device revision identifier
    * @note   This field indicates the revision of the device.
    * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
    * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
    */
    RevisionID = LL_DBGMCU_GetRevisionID();
 8000f7e:	f7ff fe99 	bl	8000cb4 <LL_DBGMCU_GetRevisionID>
 8000f82:	6278      	str	r0, [r7, #36]	@ 0x24

    APP_DBG_MSG(">>== DBGMCU_GetRevisionID= %lx \n\r", RevisionID);

    config_param.RevisionID = (uint16_t)RevisionID;
 8000f84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f86:	b29b      	uxth	r3, r3
 8000f88:	82bb      	strh	r3, [r7, #20]

    DeviceID = LL_DBGMCU_GetDeviceID();
 8000f8a:	f7ff fe85 	bl	8000c98 <LL_DBGMCU_GetDeviceID>
 8000f8e:	6238      	str	r0, [r7, #32]
    APP_DBG_MSG(">>== DBGMCU_GetDeviceID= %lx \n\r", DeviceID);
    config_param.DeviceID = (uint16_t)DeviceID;
 8000f90:	6a3b      	ldr	r3, [r7, #32]
 8000f92:	b29b      	uxth	r3, r3
 8000f94:	82fb      	strh	r3, [r7, #22]
    (void)SHCI_C2_Config(&config_param);
 8000f96:	f107 0308 	add.w	r3, r7, #8
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f00d f994 	bl	800e2c8 <SHCI_C2_Config>

    APP_BLE_Init();
 8000fa0:	f00e f87c 	bl	800f09c <APP_BLE_Init>
    UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 8000fa4:	2100      	movs	r1, #0
 8000fa6:	2001      	movs	r0, #1
 8000fa8:	f00f f90e 	bl	80101c8 <UTIL_LPM_SetOffMode>
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
  }

  return;
 8000fac:	e007      	b.n	8000fbe <APPE_SysEvtReadyProcessing+0x80>
  else if (p_sys_ready_event->sysevt_ready_rsp == FUS_FW_RUNNING)
 8000fae:	69bb      	ldr	r3, [r7, #24]
 8000fb0:	781b      	ldrb	r3, [r3, #0]
 8000fb2:	2b01      	cmp	r3, #1
 8000fb4:	d103      	bne.n	8000fbe <APPE_SysEvtReadyProcessing+0x80>
    ((tSHCI_UserEvtRxParam*)pPayload)->status = SHCI_TL_UserEventFlow_Disable;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	2200      	movs	r2, #0
 8000fba:	701a      	strb	r2, [r3, #0]
  return;
 8000fbc:	bf00      	nop
 8000fbe:	bf00      	nop
}
 8000fc0:	3728      	adds	r7, #40	@ 0x28
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}

08000fc6 <HAL_Delay>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void HAL_Delay(uint32_t Delay)
{
 8000fc6:	b580      	push	{r7, lr}
 8000fc8:	b084      	sub	sp, #16
 8000fca:	af00      	add	r7, sp, #0
 8000fcc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fce:	f006 fd7b 	bl	8007ac8 <HAL_GetTick>
 8000fd2:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fde:	d00a      	beq.n	8000ff6 <HAL_Delay+0x30>
  {
    wait += HAL_GetTickFreq();
 8000fe0:	f006 fd8a 	bl	8007af8 <HAL_GetTickFreq>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	461a      	mov	r2, r3
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	4413      	add	r3, r2
 8000fec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000fee:	e002      	b.n	8000ff6 <HAL_Delay+0x30>
  {
    /************************************************************************************
     * ENTER SLEEP MODE
     ***********************************************************************************/
    LL_LPM_EnableSleep(); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 8000ff0:	f7ff fe6e 	bl	8000cd0 <LL_LPM_EnableSleep>
     */
  #if defined (__CC_ARM) || defined (__ARMCC_VERSION)
    __force_stores();
  #endif /* __ARMCC_VERSION */

    __WFI();
 8000ff4:	bf30      	wfi
  while ((HAL_GetTick() - tickstart) < wait)
 8000ff6:	f006 fd67 	bl	8007ac8 <HAL_GetTick>
 8000ffa:	4602      	mov	r2, r0
 8000ffc:	68bb      	ldr	r3, [r7, #8]
 8000ffe:	1ad3      	subs	r3, r2, r3
 8001000:	68fa      	ldr	r2, [r7, #12]
 8001002:	429a      	cmp	r2, r3
 8001004:	d8f4      	bhi.n	8000ff0 <HAL_Delay+0x2a>
  }
}
 8001006:	bf00      	nop
 8001008:	bf00      	nop
 800100a:	3710      	adds	r7, #16
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}

08001010 <MX_APPE_Process>:

void MX_APPE_Process(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8001014:	f04f 30ff 	mov.w	r0, #4294967295
 8001018:	f00f f906 	bl	8010228 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 800101c:	bf00      	nop
 800101e:	bd80      	pop	{r7, pc}

08001020 <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
#endif /* CFG_LPM_SUPPORTED == 1 */
  return;
 8001024:	bf00      	nop
}
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr

0800102e <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle(UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm)
{
 800102e:	b580      	push	{r7, lr}
 8001030:	b082      	sub	sp, #8
 8001032:	af00      	add	r7, sp, #0
 8001034:	6078      	str	r0, [r7, #4]
 8001036:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8001038:	f04f 30ff 	mov.w	r0, #4294967295
 800103c:	f00f f8f4 	bl	8010228 <UTIL_SEQ_Run>
  return;
 8001040:	bf00      	nop
}
 8001042:	3708      	adds	r7, #8
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}

08001048 <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8001050:	2100      	movs	r1, #0
 8001052:	2010      	movs	r0, #16
 8001054:	f00f fa06 	bl	8010464 <UTIL_SEQ_SetTask>
  return;
 8001058:	bf00      	nop
}
 800105a:	3708      	adds	r7, #8
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}

08001060 <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b082      	sub	sp, #8
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 8001068:	2002      	movs	r0, #2
 800106a:	f00f fa67 	bl	801053c <UTIL_SEQ_SetEvt>
  return;
 800106e:	bf00      	nop
}
 8001070:	3708      	adds	r7, #8
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}

08001076 <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 8001076:	b580      	push	{r7, lr}
 8001078:	b082      	sub	sp, #8
 800107a:	af00      	add	r7, sp, #0
 800107c:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 800107e:	2002      	movs	r0, #2
 8001080:	f00f fa7c 	bl	801057c <UTIL_SEQ_WaitEvt>
  return;
 8001084:	bf00      	nop
}
 8001086:	3708      	adds	r7, #8
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}

0800108c <LL_EXTI_EnableIT_0_31>:
{
 800108c:	b480      	push	{r7}
 800108e:	b083      	sub	sp, #12
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8001094:	4b06      	ldr	r3, [pc, #24]	@ (80010b0 <LL_EXTI_EnableIT_0_31+0x24>)
 8001096:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 800109a:	4905      	ldr	r1, [pc, #20]	@ (80010b0 <LL_EXTI_EnableIT_0_31+0x24>)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	4313      	orrs	r3, r2
 80010a0:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 80010a4:	bf00      	nop
 80010a6:	370c      	adds	r7, #12
 80010a8:	46bd      	mov	sp, r7
 80010aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ae:	4770      	bx	lr
 80010b0:	58000800 	.word	0x58000800

080010b4 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b083      	sub	sp, #12
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 80010bc:	4b05      	ldr	r3, [pc, #20]	@ (80010d4 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80010be:	681a      	ldr	r2, [r3, #0]
 80010c0:	4904      	ldr	r1, [pc, #16]	@ (80010d4 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	4313      	orrs	r3, r2
 80010c6:	600b      	str	r3, [r1, #0]

}
 80010c8:	bf00      	nop
 80010ca:	370c      	adds	r7, #12
 80010cc:	46bd      	mov	sp, r7
 80010ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d2:	4770      	bx	lr
 80010d4:	58000800 	.word	0x58000800

080010d8 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	b083      	sub	sp, #12
 80010dc:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80010de:	4b0d      	ldr	r3, [pc, #52]	@ (8001114 <ReadRtcSsrValue+0x3c>)
 80010e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80010e2:	b29b      	uxth	r3, r3
 80010e4:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80010e6:	4b0b      	ldr	r3, [pc, #44]	@ (8001114 <ReadRtcSsrValue+0x3c>)
 80010e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80010ea:	b29b      	uxth	r3, r3
 80010ec:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 80010ee:	e005      	b.n	80010fc <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80010f4:	4b07      	ldr	r3, [pc, #28]	@ (8001114 <ReadRtcSsrValue+0x3c>)
 80010f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80010f8:	b29b      	uxth	r3, r3
 80010fa:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 80010fc:	687a      	ldr	r2, [r7, #4]
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	429a      	cmp	r2, r3
 8001102:	d1f5      	bne.n	80010f0 <ReadRtcSsrValue+0x18>
  }

  return second_read;
 8001104:	683b      	ldr	r3, [r7, #0]
}
 8001106:	4618      	mov	r0, r3
 8001108:	370c      	adds	r7, #12
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr
 8001112:	bf00      	nop
 8001114:	40002800 	.word	0x40002800

08001118 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8001118:	b480      	push	{r7}
 800111a:	b085      	sub	sp, #20
 800111c:	af00      	add	r7, sp, #0
 800111e:	4603      	mov	r3, r0
 8001120:	460a      	mov	r2, r1
 8001122:	71fb      	strb	r3, [r7, #7]
 8001124:	4613      	mov	r3, r2
 8001126:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 8001128:	79ba      	ldrb	r2, [r7, #6]
 800112a:	491d      	ldr	r1, [pc, #116]	@ (80011a0 <LinkTimerAfter+0x88>)
 800112c:	4613      	mov	r3, r2
 800112e:	005b      	lsls	r3, r3, #1
 8001130:	4413      	add	r3, r2
 8001132:	00db      	lsls	r3, r3, #3
 8001134:	440b      	add	r3, r1
 8001136:	3315      	adds	r3, #21
 8001138:	781b      	ldrb	r3, [r3, #0]
 800113a:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800113c:	7bfb      	ldrb	r3, [r7, #15]
 800113e:	2b06      	cmp	r3, #6
 8001140:	d009      	beq.n	8001156 <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 8001142:	7bfa      	ldrb	r2, [r7, #15]
 8001144:	4916      	ldr	r1, [pc, #88]	@ (80011a0 <LinkTimerAfter+0x88>)
 8001146:	4613      	mov	r3, r2
 8001148:	005b      	lsls	r3, r3, #1
 800114a:	4413      	add	r3, r2
 800114c:	00db      	lsls	r3, r3, #3
 800114e:	440b      	add	r3, r1
 8001150:	3314      	adds	r3, #20
 8001152:	79fa      	ldrb	r2, [r7, #7]
 8001154:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 8001156:	79fa      	ldrb	r2, [r7, #7]
 8001158:	4911      	ldr	r1, [pc, #68]	@ (80011a0 <LinkTimerAfter+0x88>)
 800115a:	4613      	mov	r3, r2
 800115c:	005b      	lsls	r3, r3, #1
 800115e:	4413      	add	r3, r2
 8001160:	00db      	lsls	r3, r3, #3
 8001162:	440b      	add	r3, r1
 8001164:	3315      	adds	r3, #21
 8001166:	7bfa      	ldrb	r2, [r7, #15]
 8001168:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 800116a:	79fa      	ldrb	r2, [r7, #7]
 800116c:	490c      	ldr	r1, [pc, #48]	@ (80011a0 <LinkTimerAfter+0x88>)
 800116e:	4613      	mov	r3, r2
 8001170:	005b      	lsls	r3, r3, #1
 8001172:	4413      	add	r3, r2
 8001174:	00db      	lsls	r3, r3, #3
 8001176:	440b      	add	r3, r1
 8001178:	3314      	adds	r3, #20
 800117a:	79ba      	ldrb	r2, [r7, #6]
 800117c:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 800117e:	79ba      	ldrb	r2, [r7, #6]
 8001180:	4907      	ldr	r1, [pc, #28]	@ (80011a0 <LinkTimerAfter+0x88>)
 8001182:	4613      	mov	r3, r2
 8001184:	005b      	lsls	r3, r3, #1
 8001186:	4413      	add	r3, r2
 8001188:	00db      	lsls	r3, r3, #3
 800118a:	440b      	add	r3, r1
 800118c:	3315      	adds	r3, #21
 800118e:	79fa      	ldrb	r2, [r7, #7]
 8001190:	701a      	strb	r2, [r3, #0]

  return;
 8001192:	bf00      	nop
}
 8001194:	3714      	adds	r7, #20
 8001196:	46bd      	mov	sp, r7
 8001198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119c:	4770      	bx	lr
 800119e:	bf00      	nop
 80011a0:	20000154 	.word	0x20000154

080011a4 <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 80011a4:	b480      	push	{r7}
 80011a6:	b085      	sub	sp, #20
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	4603      	mov	r3, r0
 80011ac:	460a      	mov	r2, r1
 80011ae:	71fb      	strb	r3, [r7, #7]
 80011b0:	4613      	mov	r3, r2
 80011b2:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 80011b4:	4b29      	ldr	r3, [pc, #164]	@ (800125c <LinkTimerBefore+0xb8>)
 80011b6:	781b      	ldrb	r3, [r3, #0]
 80011b8:	b2db      	uxtb	r3, r3
 80011ba:	79ba      	ldrb	r2, [r7, #6]
 80011bc:	429a      	cmp	r2, r3
 80011be:	d032      	beq.n	8001226 <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 80011c0:	79ba      	ldrb	r2, [r7, #6]
 80011c2:	4927      	ldr	r1, [pc, #156]	@ (8001260 <LinkTimerBefore+0xbc>)
 80011c4:	4613      	mov	r3, r2
 80011c6:	005b      	lsls	r3, r3, #1
 80011c8:	4413      	add	r3, r2
 80011ca:	00db      	lsls	r3, r3, #3
 80011cc:	440b      	add	r3, r1
 80011ce:	3314      	adds	r3, #20
 80011d0:	781b      	ldrb	r3, [r3, #0]
 80011d2:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 80011d4:	7bfa      	ldrb	r2, [r7, #15]
 80011d6:	4922      	ldr	r1, [pc, #136]	@ (8001260 <LinkTimerBefore+0xbc>)
 80011d8:	4613      	mov	r3, r2
 80011da:	005b      	lsls	r3, r3, #1
 80011dc:	4413      	add	r3, r2
 80011de:	00db      	lsls	r3, r3, #3
 80011e0:	440b      	add	r3, r1
 80011e2:	3315      	adds	r3, #21
 80011e4:	79fa      	ldrb	r2, [r7, #7]
 80011e6:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 80011e8:	79fa      	ldrb	r2, [r7, #7]
 80011ea:	491d      	ldr	r1, [pc, #116]	@ (8001260 <LinkTimerBefore+0xbc>)
 80011ec:	4613      	mov	r3, r2
 80011ee:	005b      	lsls	r3, r3, #1
 80011f0:	4413      	add	r3, r2
 80011f2:	00db      	lsls	r3, r3, #3
 80011f4:	440b      	add	r3, r1
 80011f6:	3315      	adds	r3, #21
 80011f8:	79ba      	ldrb	r2, [r7, #6]
 80011fa:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 80011fc:	79fa      	ldrb	r2, [r7, #7]
 80011fe:	4918      	ldr	r1, [pc, #96]	@ (8001260 <LinkTimerBefore+0xbc>)
 8001200:	4613      	mov	r3, r2
 8001202:	005b      	lsls	r3, r3, #1
 8001204:	4413      	add	r3, r2
 8001206:	00db      	lsls	r3, r3, #3
 8001208:	440b      	add	r3, r1
 800120a:	3314      	adds	r3, #20
 800120c:	7bfa      	ldrb	r2, [r7, #15]
 800120e:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8001210:	79ba      	ldrb	r2, [r7, #6]
 8001212:	4913      	ldr	r1, [pc, #76]	@ (8001260 <LinkTimerBefore+0xbc>)
 8001214:	4613      	mov	r3, r2
 8001216:	005b      	lsls	r3, r3, #1
 8001218:	4413      	add	r3, r2
 800121a:	00db      	lsls	r3, r3, #3
 800121c:	440b      	add	r3, r1
 800121e:	3314      	adds	r3, #20
 8001220:	79fa      	ldrb	r2, [r7, #7]
 8001222:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 8001224:	e014      	b.n	8001250 <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 8001226:	79fa      	ldrb	r2, [r7, #7]
 8001228:	490d      	ldr	r1, [pc, #52]	@ (8001260 <LinkTimerBefore+0xbc>)
 800122a:	4613      	mov	r3, r2
 800122c:	005b      	lsls	r3, r3, #1
 800122e:	4413      	add	r3, r2
 8001230:	00db      	lsls	r3, r3, #3
 8001232:	440b      	add	r3, r1
 8001234:	3315      	adds	r3, #21
 8001236:	79ba      	ldrb	r2, [r7, #6]
 8001238:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 800123a:	79ba      	ldrb	r2, [r7, #6]
 800123c:	4908      	ldr	r1, [pc, #32]	@ (8001260 <LinkTimerBefore+0xbc>)
 800123e:	4613      	mov	r3, r2
 8001240:	005b      	lsls	r3, r3, #1
 8001242:	4413      	add	r3, r2
 8001244:	00db      	lsls	r3, r3, #3
 8001246:	440b      	add	r3, r1
 8001248:	3314      	adds	r3, #20
 800124a:	79fa      	ldrb	r2, [r7, #7]
 800124c:	701a      	strb	r2, [r3, #0]
  return;
 800124e:	bf00      	nop
}
 8001250:	3714      	adds	r7, #20
 8001252:	46bd      	mov	sp, r7
 8001254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001258:	4770      	bx	lr
 800125a:	bf00      	nop
 800125c:	200001e4 	.word	0x200001e4
 8001260:	20000154 	.word	0x20000154

08001264 <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b084      	sub	sp, #16
 8001268:	af00      	add	r7, sp, #0
 800126a:	4603      	mov	r3, r0
 800126c:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800126e:	4b4e      	ldr	r3, [pc, #312]	@ (80013a8 <linkTimer+0x144>)
 8001270:	781b      	ldrb	r3, [r3, #0]
 8001272:	b2db      	uxtb	r3, r3
 8001274:	2b06      	cmp	r3, #6
 8001276:	d118      	bne.n	80012aa <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8001278:	4b4b      	ldr	r3, [pc, #300]	@ (80013a8 <linkTimer+0x144>)
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	b2da      	uxtb	r2, r3
 800127e:	4b4b      	ldr	r3, [pc, #300]	@ (80013ac <linkTimer+0x148>)
 8001280:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 8001282:	4a49      	ldr	r2, [pc, #292]	@ (80013a8 <linkTimer+0x144>)
 8001284:	79fb      	ldrb	r3, [r7, #7]
 8001286:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8001288:	79fa      	ldrb	r2, [r7, #7]
 800128a:	4949      	ldr	r1, [pc, #292]	@ (80013b0 <linkTimer+0x14c>)
 800128c:	4613      	mov	r3, r2
 800128e:	005b      	lsls	r3, r3, #1
 8001290:	4413      	add	r3, r2
 8001292:	00db      	lsls	r3, r3, #3
 8001294:	440b      	add	r3, r1
 8001296:	3315      	adds	r3, #21
 8001298:	2206      	movs	r2, #6
 800129a:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 800129c:	4b45      	ldr	r3, [pc, #276]	@ (80013b4 <linkTimer+0x150>)
 800129e:	f04f 32ff 	mov.w	r2, #4294967295
 80012a2:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 80012a4:	2300      	movs	r3, #0
 80012a6:	81fb      	strh	r3, [r7, #14]
 80012a8:	e078      	b.n	800139c <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 80012aa:	f000 f909 	bl	80014c0 <ReturnTimeElapsed>
 80012ae:	4603      	mov	r3, r0
 80012b0:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 80012b2:	79fa      	ldrb	r2, [r7, #7]
 80012b4:	493e      	ldr	r1, [pc, #248]	@ (80013b0 <linkTimer+0x14c>)
 80012b6:	4613      	mov	r3, r2
 80012b8:	005b      	lsls	r3, r3, #1
 80012ba:	4413      	add	r3, r2
 80012bc:	00db      	lsls	r3, r3, #3
 80012be:	440b      	add	r3, r1
 80012c0:	3308      	adds	r3, #8
 80012c2:	6819      	ldr	r1, [r3, #0]
 80012c4:	89fb      	ldrh	r3, [r7, #14]
 80012c6:	79fa      	ldrb	r2, [r7, #7]
 80012c8:	4419      	add	r1, r3
 80012ca:	4839      	ldr	r0, [pc, #228]	@ (80013b0 <linkTimer+0x14c>)
 80012cc:	4613      	mov	r3, r2
 80012ce:	005b      	lsls	r3, r3, #1
 80012d0:	4413      	add	r3, r2
 80012d2:	00db      	lsls	r3, r3, #3
 80012d4:	4403      	add	r3, r0
 80012d6:	3308      	adds	r3, #8
 80012d8:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 80012da:	79fa      	ldrb	r2, [r7, #7]
 80012dc:	4934      	ldr	r1, [pc, #208]	@ (80013b0 <linkTimer+0x14c>)
 80012de:	4613      	mov	r3, r2
 80012e0:	005b      	lsls	r3, r3, #1
 80012e2:	4413      	add	r3, r2
 80012e4:	00db      	lsls	r3, r3, #3
 80012e6:	440b      	add	r3, r1
 80012e8:	3308      	adds	r3, #8
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 80012ee:	4b2e      	ldr	r3, [pc, #184]	@ (80013a8 <linkTimer+0x144>)
 80012f0:	781b      	ldrb	r3, [r3, #0]
 80012f2:	b2db      	uxtb	r3, r3
 80012f4:	4619      	mov	r1, r3
 80012f6:	4a2e      	ldr	r2, [pc, #184]	@ (80013b0 <linkTimer+0x14c>)
 80012f8:	460b      	mov	r3, r1
 80012fa:	005b      	lsls	r3, r3, #1
 80012fc:	440b      	add	r3, r1
 80012fe:	00db      	lsls	r3, r3, #3
 8001300:	4413      	add	r3, r2
 8001302:	3308      	adds	r3, #8
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	68ba      	ldr	r2, [r7, #8]
 8001308:	429a      	cmp	r2, r3
 800130a:	d337      	bcc.n	800137c <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 800130c:	4b26      	ldr	r3, [pc, #152]	@ (80013a8 <linkTimer+0x144>)
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 8001312:	7b7a      	ldrb	r2, [r7, #13]
 8001314:	4926      	ldr	r1, [pc, #152]	@ (80013b0 <linkTimer+0x14c>)
 8001316:	4613      	mov	r3, r2
 8001318:	005b      	lsls	r3, r3, #1
 800131a:	4413      	add	r3, r2
 800131c:	00db      	lsls	r3, r3, #3
 800131e:	440b      	add	r3, r1
 8001320:	3315      	adds	r3, #21
 8001322:	781b      	ldrb	r3, [r3, #0]
 8001324:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8001326:	e013      	b.n	8001350 <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8001328:	7b7a      	ldrb	r2, [r7, #13]
 800132a:	4921      	ldr	r1, [pc, #132]	@ (80013b0 <linkTimer+0x14c>)
 800132c:	4613      	mov	r3, r2
 800132e:	005b      	lsls	r3, r3, #1
 8001330:	4413      	add	r3, r2
 8001332:	00db      	lsls	r3, r3, #3
 8001334:	440b      	add	r3, r1
 8001336:	3315      	adds	r3, #21
 8001338:	781b      	ldrb	r3, [r3, #0]
 800133a:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 800133c:	7b7a      	ldrb	r2, [r7, #13]
 800133e:	491c      	ldr	r1, [pc, #112]	@ (80013b0 <linkTimer+0x14c>)
 8001340:	4613      	mov	r3, r2
 8001342:	005b      	lsls	r3, r3, #1
 8001344:	4413      	add	r3, r2
 8001346:	00db      	lsls	r3, r3, #3
 8001348:	440b      	add	r3, r1
 800134a:	3315      	adds	r3, #21
 800134c:	781b      	ldrb	r3, [r3, #0]
 800134e:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8001350:	7b3b      	ldrb	r3, [r7, #12]
 8001352:	2b06      	cmp	r3, #6
 8001354:	d00b      	beq.n	800136e <linkTimer+0x10a>
 8001356:	7b3a      	ldrb	r2, [r7, #12]
 8001358:	4915      	ldr	r1, [pc, #84]	@ (80013b0 <linkTimer+0x14c>)
 800135a:	4613      	mov	r3, r2
 800135c:	005b      	lsls	r3, r3, #1
 800135e:	4413      	add	r3, r2
 8001360:	00db      	lsls	r3, r3, #3
 8001362:	440b      	add	r3, r1
 8001364:	3308      	adds	r3, #8
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	68ba      	ldr	r2, [r7, #8]
 800136a:	429a      	cmp	r2, r3
 800136c:	d2dc      	bcs.n	8001328 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 800136e:	7b7a      	ldrb	r2, [r7, #13]
 8001370:	79fb      	ldrb	r3, [r7, #7]
 8001372:	4611      	mov	r1, r2
 8001374:	4618      	mov	r0, r3
 8001376:	f7ff fecf 	bl	8001118 <LinkTimerAfter>
 800137a:	e00f      	b.n	800139c <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 800137c:	4b0a      	ldr	r3, [pc, #40]	@ (80013a8 <linkTimer+0x144>)
 800137e:	781b      	ldrb	r3, [r3, #0]
 8001380:	b2da      	uxtb	r2, r3
 8001382:	79fb      	ldrb	r3, [r7, #7]
 8001384:	4611      	mov	r1, r2
 8001386:	4618      	mov	r0, r3
 8001388:	f7ff ff0c 	bl	80011a4 <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 800138c:	4b06      	ldr	r3, [pc, #24]	@ (80013a8 <linkTimer+0x144>)
 800138e:	781b      	ldrb	r3, [r3, #0]
 8001390:	b2da      	uxtb	r2, r3
 8001392:	4b06      	ldr	r3, [pc, #24]	@ (80013ac <linkTimer+0x148>)
 8001394:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 8001396:	4a04      	ldr	r2, [pc, #16]	@ (80013a8 <linkTimer+0x144>)
 8001398:	79fb      	ldrb	r3, [r7, #7]
 800139a:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 800139c:	89fb      	ldrh	r3, [r7, #14]
}
 800139e:	4618      	mov	r0, r3
 80013a0:	3710      	adds	r7, #16
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	200001e4 	.word	0x200001e4
 80013ac:	200001e5 	.word	0x200001e5
 80013b0:	20000154 	.word	0x20000154
 80013b4:	200001e8 	.word	0x200001e8

080013b8 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b085      	sub	sp, #20
 80013bc:	af00      	add	r7, sp, #0
 80013be:	4603      	mov	r3, r0
 80013c0:	460a      	mov	r2, r1
 80013c2:	71fb      	strb	r3, [r7, #7]
 80013c4:	4613      	mov	r3, r2
 80013c6:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 80013c8:	4b39      	ldr	r3, [pc, #228]	@ (80014b0 <UnlinkTimer+0xf8>)
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	b2db      	uxtb	r3, r3
 80013ce:	79fa      	ldrb	r2, [r7, #7]
 80013d0:	429a      	cmp	r2, r3
 80013d2:	d111      	bne.n	80013f8 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 80013d4:	4b36      	ldr	r3, [pc, #216]	@ (80014b0 <UnlinkTimer+0xf8>)
 80013d6:	781b      	ldrb	r3, [r3, #0]
 80013d8:	b2da      	uxtb	r2, r3
 80013da:	4b36      	ldr	r3, [pc, #216]	@ (80014b4 <UnlinkTimer+0xfc>)
 80013dc:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 80013de:	79fa      	ldrb	r2, [r7, #7]
 80013e0:	4935      	ldr	r1, [pc, #212]	@ (80014b8 <UnlinkTimer+0x100>)
 80013e2:	4613      	mov	r3, r2
 80013e4:	005b      	lsls	r3, r3, #1
 80013e6:	4413      	add	r3, r2
 80013e8:	00db      	lsls	r3, r3, #3
 80013ea:	440b      	add	r3, r1
 80013ec:	3315      	adds	r3, #21
 80013ee:	781b      	ldrb	r3, [r3, #0]
 80013f0:	b2da      	uxtb	r2, r3
 80013f2:	4b2f      	ldr	r3, [pc, #188]	@ (80014b0 <UnlinkTimer+0xf8>)
 80013f4:	701a      	strb	r2, [r3, #0]
 80013f6:	e03e      	b.n	8001476 <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 80013f8:	79fa      	ldrb	r2, [r7, #7]
 80013fa:	492f      	ldr	r1, [pc, #188]	@ (80014b8 <UnlinkTimer+0x100>)
 80013fc:	4613      	mov	r3, r2
 80013fe:	005b      	lsls	r3, r3, #1
 8001400:	4413      	add	r3, r2
 8001402:	00db      	lsls	r3, r3, #3
 8001404:	440b      	add	r3, r1
 8001406:	3314      	adds	r3, #20
 8001408:	781b      	ldrb	r3, [r3, #0]
 800140a:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 800140c:	79fa      	ldrb	r2, [r7, #7]
 800140e:	492a      	ldr	r1, [pc, #168]	@ (80014b8 <UnlinkTimer+0x100>)
 8001410:	4613      	mov	r3, r2
 8001412:	005b      	lsls	r3, r3, #1
 8001414:	4413      	add	r3, r2
 8001416:	00db      	lsls	r3, r3, #3
 8001418:	440b      	add	r3, r1
 800141a:	3315      	adds	r3, #21
 800141c:	781b      	ldrb	r3, [r3, #0]
 800141e:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8001420:	79f9      	ldrb	r1, [r7, #7]
 8001422:	7bfa      	ldrb	r2, [r7, #15]
 8001424:	4824      	ldr	r0, [pc, #144]	@ (80014b8 <UnlinkTimer+0x100>)
 8001426:	460b      	mov	r3, r1
 8001428:	005b      	lsls	r3, r3, #1
 800142a:	440b      	add	r3, r1
 800142c:	00db      	lsls	r3, r3, #3
 800142e:	4403      	add	r3, r0
 8001430:	3315      	adds	r3, #21
 8001432:	781b      	ldrb	r3, [r3, #0]
 8001434:	b2d8      	uxtb	r0, r3
 8001436:	4920      	ldr	r1, [pc, #128]	@ (80014b8 <UnlinkTimer+0x100>)
 8001438:	4613      	mov	r3, r2
 800143a:	005b      	lsls	r3, r3, #1
 800143c:	4413      	add	r3, r2
 800143e:	00db      	lsls	r3, r3, #3
 8001440:	440b      	add	r3, r1
 8001442:	3315      	adds	r3, #21
 8001444:	4602      	mov	r2, r0
 8001446:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001448:	7bbb      	ldrb	r3, [r7, #14]
 800144a:	2b06      	cmp	r3, #6
 800144c:	d013      	beq.n	8001476 <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 800144e:	79f9      	ldrb	r1, [r7, #7]
 8001450:	7bba      	ldrb	r2, [r7, #14]
 8001452:	4819      	ldr	r0, [pc, #100]	@ (80014b8 <UnlinkTimer+0x100>)
 8001454:	460b      	mov	r3, r1
 8001456:	005b      	lsls	r3, r3, #1
 8001458:	440b      	add	r3, r1
 800145a:	00db      	lsls	r3, r3, #3
 800145c:	4403      	add	r3, r0
 800145e:	3314      	adds	r3, #20
 8001460:	781b      	ldrb	r3, [r3, #0]
 8001462:	b2d8      	uxtb	r0, r3
 8001464:	4914      	ldr	r1, [pc, #80]	@ (80014b8 <UnlinkTimer+0x100>)
 8001466:	4613      	mov	r3, r2
 8001468:	005b      	lsls	r3, r3, #1
 800146a:	4413      	add	r3, r2
 800146c:	00db      	lsls	r3, r3, #3
 800146e:	440b      	add	r3, r1
 8001470:	3314      	adds	r3, #20
 8001472:	4602      	mov	r2, r0
 8001474:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 8001476:	79fa      	ldrb	r2, [r7, #7]
 8001478:	490f      	ldr	r1, [pc, #60]	@ (80014b8 <UnlinkTimer+0x100>)
 800147a:	4613      	mov	r3, r2
 800147c:	005b      	lsls	r3, r3, #1
 800147e:	4413      	add	r3, r2
 8001480:	00db      	lsls	r3, r3, #3
 8001482:	440b      	add	r3, r1
 8001484:	330c      	adds	r3, #12
 8001486:	2201      	movs	r2, #1
 8001488:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 800148a:	4b09      	ldr	r3, [pc, #36]	@ (80014b0 <UnlinkTimer+0xf8>)
 800148c:	781b      	ldrb	r3, [r3, #0]
 800148e:	b2db      	uxtb	r3, r3
 8001490:	2b06      	cmp	r3, #6
 8001492:	d107      	bne.n	80014a4 <UnlinkTimer+0xec>
 8001494:	79bb      	ldrb	r3, [r7, #6]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d104      	bne.n	80014a4 <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 800149a:	4b08      	ldr	r3, [pc, #32]	@ (80014bc <UnlinkTimer+0x104>)
 800149c:	f04f 32ff 	mov.w	r2, #4294967295
 80014a0:	601a      	str	r2, [r3, #0]
  }

  return;
 80014a2:	bf00      	nop
 80014a4:	bf00      	nop
}
 80014a6:	3714      	adds	r7, #20
 80014a8:	46bd      	mov	sp, r7
 80014aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ae:	4770      	bx	lr
 80014b0:	200001e4 	.word	0x200001e4
 80014b4:	200001e5 	.word	0x200001e5
 80014b8:	20000154 	.word	0x20000154
 80014bc:	200001e8 	.word	0x200001e8

080014c0 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b082      	sub	sp, #8
 80014c4:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 80014c6:	4b1a      	ldr	r3, [pc, #104]	@ (8001530 <ReturnTimeElapsed+0x70>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014ce:	d026      	beq.n	800151e <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 80014d0:	f7ff fe02 	bl	80010d8 <ReadRtcSsrValue>
 80014d4:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 80014d6:	4b16      	ldr	r3, [pc, #88]	@ (8001530 <ReturnTimeElapsed+0x70>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	687a      	ldr	r2, [r7, #4]
 80014dc:	429a      	cmp	r2, r3
 80014de:	d805      	bhi.n	80014ec <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 80014e0:	4b13      	ldr	r3, [pc, #76]	@ (8001530 <ReturnTimeElapsed+0x70>)
 80014e2:	681a      	ldr	r2, [r3, #0]
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	1ad3      	subs	r3, r2, r3
 80014e8:	607b      	str	r3, [r7, #4]
 80014ea:	e00a      	b.n	8001502 <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 80014ec:	4b11      	ldr	r3, [pc, #68]	@ (8001534 <ReturnTimeElapsed+0x74>)
 80014ee:	881b      	ldrh	r3, [r3, #0]
 80014f0:	461a      	mov	r2, r3
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	1ad3      	subs	r3, r2, r3
 80014f6:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 80014f8:	4b0d      	ldr	r3, [pc, #52]	@ (8001530 <ReturnTimeElapsed+0x70>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	683a      	ldr	r2, [r7, #0]
 80014fe:	4413      	add	r3, r2
 8001500:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 8001502:	4b0d      	ldr	r3, [pc, #52]	@ (8001538 <ReturnTimeElapsed+0x78>)
 8001504:	781b      	ldrb	r3, [r3, #0]
 8001506:	461a      	mov	r2, r3
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	fb02 f303 	mul.w	r3, r2, r3
 800150e:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8001510:	4b0a      	ldr	r3, [pc, #40]	@ (800153c <ReturnTimeElapsed+0x7c>)
 8001512:	781b      	ldrb	r3, [r3, #0]
 8001514:	461a      	mov	r2, r3
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	40d3      	lsrs	r3, r2
 800151a:	607b      	str	r3, [r7, #4]
 800151c:	e001      	b.n	8001522 <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 800151e:	2300      	movs	r3, #0
 8001520:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	b29b      	uxth	r3, r3
}
 8001526:	4618      	mov	r0, r3
 8001528:	3708      	adds	r7, #8
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	200001e8 	.word	0x200001e8
 8001534:	200001f0 	.word	0x200001f0
 8001538:	200001ee 	.word	0x200001ee
 800153c:	200001ed 	.word	0x200001ed

08001540 <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b082      	sub	sp, #8
 8001544:	af00      	add	r7, sp, #0
 8001546:	4603      	mov	r3, r0
 8001548:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
   */

  if(Value == 0)
 800154a:	88fb      	ldrh	r3, [r7, #6]
 800154c:	2b00      	cmp	r3, #0
 800154e:	d108      	bne.n	8001562 <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8001550:	f7ff fdc2 	bl	80010d8 <ReadRtcSsrValue>
 8001554:	4603      	mov	r3, r0
 8001556:	4a21      	ldr	r2, [pc, #132]	@ (80015dc <RestartWakeupCounter+0x9c>)
 8001558:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 800155a:	2003      	movs	r0, #3
 800155c:	f006 fc55 	bl	8007e0a <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8001560:	e039      	b.n	80015d6 <RestartWakeupCounter+0x96>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 8001562:	88fb      	ldrh	r3, [r7, #6]
 8001564:	2b01      	cmp	r3, #1
 8001566:	d803      	bhi.n	8001570 <RestartWakeupCounter+0x30>
 8001568:	4b1d      	ldr	r3, [pc, #116]	@ (80015e0 <RestartWakeupCounter+0xa0>)
 800156a:	781b      	ldrb	r3, [r3, #0]
 800156c:	2b01      	cmp	r3, #1
 800156e:	d002      	beq.n	8001576 <RestartWakeupCounter+0x36>
      Value -= 1;
 8001570:	88fb      	ldrh	r3, [r7, #6]
 8001572:	3b01      	subs	r3, #1
 8001574:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8001576:	bf00      	nop
 8001578:	4b1a      	ldr	r3, [pc, #104]	@ (80015e4 <RestartWakeupCounter+0xa4>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	68db      	ldr	r3, [r3, #12]
 800157e:	f003 0304 	and.w	r3, r3, #4
 8001582:	2b00      	cmp	r3, #0
 8001584:	d0f8      	beq.n	8001578 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001586:	4b17      	ldr	r3, [pc, #92]	@ (80015e4 <RestartWakeupCounter+0xa4>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	68db      	ldr	r3, [r3, #12]
 800158c:	b2da      	uxtb	r2, r3
 800158e:	4b15      	ldr	r3, [pc, #84]	@ (80015e4 <RestartWakeupCounter+0xa4>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8001596:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001598:	4b13      	ldr	r3, [pc, #76]	@ (80015e8 <RestartWakeupCounter+0xa8>)
 800159a:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800159e:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 80015a0:	2003      	movs	r0, #3
 80015a2:	f006 fc40 	bl	8007e26 <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 80015a6:	4b11      	ldr	r3, [pc, #68]	@ (80015ec <RestartWakeupCounter+0xac>)
 80015a8:	695b      	ldr	r3, [r3, #20]
 80015aa:	0c1b      	lsrs	r3, r3, #16
 80015ac:	041b      	lsls	r3, r3, #16
 80015ae:	88fa      	ldrh	r2, [r7, #6]
 80015b0:	490e      	ldr	r1, [pc, #56]	@ (80015ec <RestartWakeupCounter+0xac>)
 80015b2:	4313      	orrs	r3, r2
 80015b4:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 80015b6:	f7ff fd8f 	bl	80010d8 <ReadRtcSsrValue>
 80015ba:	4603      	mov	r3, r0
 80015bc:	4a07      	ldr	r2, [pc, #28]	@ (80015dc <RestartWakeupCounter+0x9c>)
 80015be:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */
 80015c0:	4b08      	ldr	r3, [pc, #32]	@ (80015e4 <RestartWakeupCounter+0xa4>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	689a      	ldr	r2, [r3, #8]
 80015c6:	4b07      	ldr	r3, [pc, #28]	@ (80015e4 <RestartWakeupCounter+0xa4>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80015ce:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 80015d0:	f3af 8000 	nop.w
  return ;
 80015d4:	bf00      	nop
}
 80015d6:	3708      	adds	r7, #8
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	200001e8 	.word	0x200001e8
 80015e0:	200001ed 	.word	0x200001ed
 80015e4:	200002ec 	.word	0x200002ec
 80015e8:	58000800 	.word	0x58000800
 80015ec:	40002800 	.word	0x40002800

080015f0 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b084      	sub	sp, #16
 80015f4:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 80015f6:	4b45      	ldr	r3, [pc, #276]	@ (800170c <RescheduleTimerList+0x11c>)
 80015f8:	689b      	ldr	r3, [r3, #8]
 80015fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80015fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001602:	d107      	bne.n	8001614 <RescheduleTimerList+0x24>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8001604:	bf00      	nop
 8001606:	4b42      	ldr	r3, [pc, #264]	@ (8001710 <RescheduleTimerList+0x120>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	68db      	ldr	r3, [r3, #12]
 800160c:	f003 0304 	and.w	r3, r3, #4
 8001610:	2b00      	cmp	r3, #0
 8001612:	d1f8      	bne.n	8001606 <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8001614:	4b3e      	ldr	r3, [pc, #248]	@ (8001710 <RescheduleTimerList+0x120>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	689a      	ldr	r2, [r3, #8]
 800161a:	4b3d      	ldr	r3, [pc, #244]	@ (8001710 <RescheduleTimerList+0x120>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001622:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 8001624:	4b3b      	ldr	r3, [pc, #236]	@ (8001714 <RescheduleTimerList+0x124>)
 8001626:	781b      	ldrb	r3, [r3, #0]
 8001628:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 800162a:	7bfa      	ldrb	r2, [r7, #15]
 800162c:	493a      	ldr	r1, [pc, #232]	@ (8001718 <RescheduleTimerList+0x128>)
 800162e:	4613      	mov	r3, r2
 8001630:	005b      	lsls	r3, r3, #1
 8001632:	4413      	add	r3, r2
 8001634:	00db      	lsls	r3, r3, #3
 8001636:	440b      	add	r3, r1
 8001638:	3308      	adds	r3, #8
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 800163e:	f7ff ff3f 	bl	80014c0 <ReturnTimeElapsed>
 8001642:	4603      	mov	r3, r0
 8001644:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 8001646:	88fb      	ldrh	r3, [r7, #6]
 8001648:	68ba      	ldr	r2, [r7, #8]
 800164a:	429a      	cmp	r2, r3
 800164c:	d205      	bcs.n	800165a <RescheduleTimerList+0x6a>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 800164e:	2300      	movs	r3, #0
 8001650:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001652:	4b32      	ldr	r3, [pc, #200]	@ (800171c <RescheduleTimerList+0x12c>)
 8001654:	2201      	movs	r2, #1
 8001656:	701a      	strb	r2, [r3, #0]
 8001658:	e04d      	b.n	80016f6 <RescheduleTimerList+0x106>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 800165a:	88fb      	ldrh	r3, [r7, #6]
 800165c:	4a30      	ldr	r2, [pc, #192]	@ (8001720 <RescheduleTimerList+0x130>)
 800165e:	8812      	ldrh	r2, [r2, #0]
 8001660:	b292      	uxth	r2, r2
 8001662:	4413      	add	r3, r2
 8001664:	461a      	mov	r2, r3
 8001666:	68bb      	ldr	r3, [r7, #8]
 8001668:	4293      	cmp	r3, r2
 800166a:	d906      	bls.n	800167a <RescheduleTimerList+0x8a>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 800166c:	4b2c      	ldr	r3, [pc, #176]	@ (8001720 <RescheduleTimerList+0x130>)
 800166e:	881b      	ldrh	r3, [r3, #0]
 8001670:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 8001672:	4b2a      	ldr	r3, [pc, #168]	@ (800171c <RescheduleTimerList+0x12c>)
 8001674:	2200      	movs	r2, #0
 8001676:	701a      	strb	r2, [r3, #0]
 8001678:	e03d      	b.n	80016f6 <RescheduleTimerList+0x106>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 800167a:	68bb      	ldr	r3, [r7, #8]
 800167c:	b29a      	uxth	r2, r3
 800167e:	88fb      	ldrh	r3, [r7, #6]
 8001680:	1ad3      	subs	r3, r2, r3
 8001682:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001684:	4b25      	ldr	r3, [pc, #148]	@ (800171c <RescheduleTimerList+0x12c>)
 8001686:	2201      	movs	r2, #1
 8001688:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800168a:	e034      	b.n	80016f6 <RescheduleTimerList+0x106>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 800168c:	7bfa      	ldrb	r2, [r7, #15]
 800168e:	4922      	ldr	r1, [pc, #136]	@ (8001718 <RescheduleTimerList+0x128>)
 8001690:	4613      	mov	r3, r2
 8001692:	005b      	lsls	r3, r3, #1
 8001694:	4413      	add	r3, r2
 8001696:	00db      	lsls	r3, r3, #3
 8001698:	440b      	add	r3, r1
 800169a:	3308      	adds	r3, #8
 800169c:	681a      	ldr	r2, [r3, #0]
 800169e:	88fb      	ldrh	r3, [r7, #6]
 80016a0:	429a      	cmp	r2, r3
 80016a2:	d20a      	bcs.n	80016ba <RescheduleTimerList+0xca>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 80016a4:	7bfa      	ldrb	r2, [r7, #15]
 80016a6:	491c      	ldr	r1, [pc, #112]	@ (8001718 <RescheduleTimerList+0x128>)
 80016a8:	4613      	mov	r3, r2
 80016aa:	005b      	lsls	r3, r3, #1
 80016ac:	4413      	add	r3, r2
 80016ae:	00db      	lsls	r3, r3, #3
 80016b0:	440b      	add	r3, r1
 80016b2:	3308      	adds	r3, #8
 80016b4:	2200      	movs	r2, #0
 80016b6:	601a      	str	r2, [r3, #0]
 80016b8:	e013      	b.n	80016e2 <RescheduleTimerList+0xf2>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 80016ba:	7bfa      	ldrb	r2, [r7, #15]
 80016bc:	4916      	ldr	r1, [pc, #88]	@ (8001718 <RescheduleTimerList+0x128>)
 80016be:	4613      	mov	r3, r2
 80016c0:	005b      	lsls	r3, r3, #1
 80016c2:	4413      	add	r3, r2
 80016c4:	00db      	lsls	r3, r3, #3
 80016c6:	440b      	add	r3, r1
 80016c8:	3308      	adds	r3, #8
 80016ca:	6819      	ldr	r1, [r3, #0]
 80016cc:	88fb      	ldrh	r3, [r7, #6]
 80016ce:	7bfa      	ldrb	r2, [r7, #15]
 80016d0:	1ac9      	subs	r1, r1, r3
 80016d2:	4811      	ldr	r0, [pc, #68]	@ (8001718 <RescheduleTimerList+0x128>)
 80016d4:	4613      	mov	r3, r2
 80016d6:	005b      	lsls	r3, r3, #1
 80016d8:	4413      	add	r3, r2
 80016da:	00db      	lsls	r3, r3, #3
 80016dc:	4403      	add	r3, r0
 80016de:	3308      	adds	r3, #8
 80016e0:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 80016e2:	7bfa      	ldrb	r2, [r7, #15]
 80016e4:	490c      	ldr	r1, [pc, #48]	@ (8001718 <RescheduleTimerList+0x128>)
 80016e6:	4613      	mov	r3, r2
 80016e8:	005b      	lsls	r3, r3, #1
 80016ea:	4413      	add	r3, r2
 80016ec:	00db      	lsls	r3, r3, #3
 80016ee:	440b      	add	r3, r1
 80016f0:	3315      	adds	r3, #21
 80016f2:	781b      	ldrb	r3, [r3, #0]
 80016f4:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80016f6:	7bfb      	ldrb	r3, [r7, #15]
 80016f8:	2b06      	cmp	r3, #6
 80016fa:	d1c7      	bne.n	800168c <RescheduleTimerList+0x9c>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 80016fc:	89bb      	ldrh	r3, [r7, #12]
 80016fe:	4618      	mov	r0, r3
 8001700:	f7ff ff1e 	bl	8001540 <RestartWakeupCounter>

  return ;
 8001704:	bf00      	nop
}
 8001706:	3710      	adds	r7, #16
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}
 800170c:	40002800 	.word	0x40002800
 8001710:	200002ec 	.word	0x200002ec
 8001714:	200001e4 	.word	0x200001e4
 8001718:	20000154 	.word	0x20000154
 800171c:	200001ec 	.word	0x200001ec
 8001720:	200001f2 	.word	0x200001f2

08001724 <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b08a      	sub	sp, #40	@ 0x28
 8001728:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800172a:	f3ef 8310 	mrs	r3, PRIMASK
 800172e:	617b      	str	r3, [r7, #20]
  return(result);
 8001730:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001732:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8001734:	b672      	cpsid	i
}
 8001736:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001738:	4b59      	ldr	r3, [pc, #356]	@ (80018a0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	22ca      	movs	r2, #202	@ 0xca
 800173e:	625a      	str	r2, [r3, #36]	@ 0x24
 8001740:	4b57      	ldr	r3, [pc, #348]	@ (80018a0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	2253      	movs	r2, #83	@ 0x53
 8001746:	625a      	str	r2, [r3, #36]	@ 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
 8001748:	4b55      	ldr	r3, [pc, #340]	@ (80018a0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	689a      	ldr	r2, [r3, #8]
 800174e:	4b54      	ldr	r3, [pc, #336]	@ (80018a0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001756:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 8001758:	4b52      	ldr	r3, [pc, #328]	@ (80018a4 <HW_TS_RTC_Wakeup_Handler+0x180>)
 800175a:	781b      	ldrb	r3, [r3, #0]
 800175c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 8001760:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8001764:	4950      	ldr	r1, [pc, #320]	@ (80018a8 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001766:	4613      	mov	r3, r2
 8001768:	005b      	lsls	r3, r3, #1
 800176a:	4413      	add	r3, r2
 800176c:	00db      	lsls	r3, r3, #3
 800176e:	440b      	add	r3, r1
 8001770:	330c      	adds	r3, #12
 8001772:	781b      	ldrb	r3, [r3, #0]
 8001774:	b2db      	uxtb	r3, r3
 8001776:	2b02      	cmp	r3, #2
 8001778:	d16e      	bne.n	8001858 <HW_TS_RTC_Wakeup_Handler+0x134>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 800177a:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800177e:	494a      	ldr	r1, [pc, #296]	@ (80018a8 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001780:	4613      	mov	r3, r2
 8001782:	005b      	lsls	r3, r3, #1
 8001784:	4413      	add	r3, r2
 8001786:	00db      	lsls	r3, r3, #3
 8001788:	440b      	add	r3, r1
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 800178e:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8001792:	4945      	ldr	r1, [pc, #276]	@ (80018a8 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001794:	4613      	mov	r3, r2
 8001796:	005b      	lsls	r3, r3, #1
 8001798:	4413      	add	r3, r2
 800179a:	00db      	lsls	r3, r3, #3
 800179c:	440b      	add	r3, r1
 800179e:	3310      	adds	r3, #16
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 80017a4:	4b41      	ldr	r3, [pc, #260]	@ (80018ac <HW_TS_RTC_Wakeup_Handler+0x188>)
 80017a6:	781b      	ldrb	r3, [r3, #0]
 80017a8:	b2db      	uxtb	r3, r3
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d04c      	beq.n	8001848 <HW_TS_RTC_Wakeup_Handler+0x124>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 80017ae:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 80017b2:	493d      	ldr	r1, [pc, #244]	@ (80018a8 <HW_TS_RTC_Wakeup_Handler+0x184>)
 80017b4:	4613      	mov	r3, r2
 80017b6:	005b      	lsls	r3, r3, #1
 80017b8:	4413      	add	r3, r2
 80017ba:	00db      	lsls	r3, r3, #3
 80017bc:	440b      	add	r3, r1
 80017be:	330d      	adds	r3, #13
 80017c0:	781b      	ldrb	r3, [r3, #0]
 80017c2:	b2db      	uxtb	r3, r3
 80017c4:	2b01      	cmp	r3, #1
 80017c6:	d124      	bne.n	8001812 <HW_TS_RTC_Wakeup_Handler+0xee>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 80017c8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80017cc:	2101      	movs	r1, #1
 80017ce:	4618      	mov	r0, r3
 80017d0:	f7ff fdf2 	bl	80013b8 <UnlinkTimer>
 80017d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017d6:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80017d8:	693b      	ldr	r3, [r7, #16]
 80017da:	f383 8810 	msr	PRIMASK, r3
}
 80017de:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 80017e0:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 80017e4:	4930      	ldr	r1, [pc, #192]	@ (80018a8 <HW_TS_RTC_Wakeup_Handler+0x184>)
 80017e6:	4613      	mov	r3, r2
 80017e8:	005b      	lsls	r3, r3, #1
 80017ea:	4413      	add	r3, r2
 80017ec:	00db      	lsls	r3, r3, #3
 80017ee:	440b      	add	r3, r1
 80017f0:	3304      	adds	r3, #4
 80017f2:	681a      	ldr	r2, [r3, #0]
 80017f4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80017f8:	4611      	mov	r1, r2
 80017fa:	4618      	mov	r0, r3
 80017fc:	f000 f9b8 	bl	8001b70 <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001800:	4b27      	ldr	r3, [pc, #156]	@ (80018a0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	22ca      	movs	r2, #202	@ 0xca
 8001806:	625a      	str	r2, [r3, #36]	@ 0x24
 8001808:	4b25      	ldr	r3, [pc, #148]	@ (80018a0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	2253      	movs	r2, #83	@ 0x53
 800180e:	625a      	str	r2, [r3, #36]	@ 0x24
 8001810:	e012      	b.n	8001838 <HW_TS_RTC_Wakeup_Handler+0x114>
 8001812:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001814:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	f383 8810 	msr	PRIMASK, r3
}
 800181c:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 800181e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001822:	4618      	mov	r0, r3
 8001824:	f000 f920 	bl	8001a68 <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001828:	4b1d      	ldr	r3, [pc, #116]	@ (80018a0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	22ca      	movs	r2, #202	@ 0xca
 800182e:	625a      	str	r2, [r3, #36]	@ 0x24
 8001830:	4b1b      	ldr	r3, [pc, #108]	@ (80018a0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	2253      	movs	r2, #83	@ 0x53
 8001836:	625a      	str	r2, [r3, #36]	@ 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 8001838:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800183c:	69fa      	ldr	r2, [r7, #28]
 800183e:	4619      	mov	r1, r3
 8001840:	69b8      	ldr	r0, [r7, #24]
 8001842:	f000 fa1b 	bl	8001c7c <HW_TS_RTC_Int_AppNot>
 8001846:	e022      	b.n	800188e <HW_TS_RTC_Wakeup_Handler+0x16a>
    }
    else
    {
      RescheduleTimerList();
 8001848:	f7ff fed2 	bl	80015f0 <RescheduleTimerList>
 800184c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800184e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001850:	68bb      	ldr	r3, [r7, #8]
 8001852:	f383 8810 	msr	PRIMASK, r3
}
 8001856:	e01a      	b.n	800188e <HW_TS_RTC_Wakeup_Handler+0x16a>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8001858:	bf00      	nop
 800185a:	4b11      	ldr	r3, [pc, #68]	@ (80018a0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	68db      	ldr	r3, [r3, #12]
 8001860:	f003 0304 	and.w	r3, r3, #4
 8001864:	2b00      	cmp	r3, #0
 8001866:	d0f8      	beq.n	800185a <HW_TS_RTC_Wakeup_Handler+0x136>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001868:	4b0d      	ldr	r3, [pc, #52]	@ (80018a0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	68db      	ldr	r3, [r3, #12]
 800186e:	b2da      	uxtb	r2, r3
 8001870:	4b0b      	ldr	r3, [pc, #44]	@ (80018a0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8001878:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 800187a:	4b0d      	ldr	r3, [pc, #52]	@ (80018b0 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 800187c:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001880:	60da      	str	r2, [r3, #12]
 8001882:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001884:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	f383 8810 	msr	PRIMASK, r3
}
 800188c:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 800188e:	4b04      	ldr	r3, [pc, #16]	@ (80018a0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	22ff      	movs	r2, #255	@ 0xff
 8001894:	625a      	str	r2, [r3, #36]	@ 0x24

  return;
 8001896:	bf00      	nop
}
 8001898:	3728      	adds	r7, #40	@ 0x28
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	200002ec 	.word	0x200002ec
 80018a4:	200001e4 	.word	0x200001e4
 80018a8:	20000154 	.word	0x20000154
 80018ac:	200001ec 	.word	0x200001ec
 80018b0:	58000800 	.word	0x58000800

080018b4 <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *phrtc)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b088      	sub	sp, #32
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	4603      	mov	r3, r0
 80018bc:	6039      	str	r1, [r7, #0]
 80018be:	71fb      	strb	r3, [r7, #7]
  uint8_t loop;
  uint32_t localmaxwakeuptimersetup;

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80018c0:	4b5e      	ldr	r3, [pc, #376]	@ (8001a3c <HW_TS_Init+0x188>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	22ca      	movs	r2, #202	@ 0xca
 80018c6:	625a      	str	r2, [r3, #36]	@ 0x24
 80018c8:	4b5c      	ldr	r3, [pc, #368]	@ (8001a3c <HW_TS_Init+0x188>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	2253      	movs	r2, #83	@ 0x53
 80018ce:	625a      	str	r2, [r3, #36]	@ 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80018d0:	4b5b      	ldr	r3, [pc, #364]	@ (8001a40 <HW_TS_Init+0x18c>)
 80018d2:	689b      	ldr	r3, [r3, #8]
 80018d4:	4a5a      	ldr	r2, [pc, #360]	@ (8001a40 <HW_TS_Init+0x18c>)
 80018d6:	f043 0320 	orr.w	r3, r3, #32
 80018da:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 80018dc:	4b58      	ldr	r3, [pc, #352]	@ (8001a40 <HW_TS_Init+0x18c>)
 80018de:	689b      	ldr	r3, [r3, #8]
 80018e0:	b2db      	uxtb	r3, r3
 80018e2:	f003 0307 	and.w	r3, r3, #7
 80018e6:	b2db      	uxtb	r3, r3
 80018e8:	f1c3 0304 	rsb	r3, r3, #4
 80018ec:	b2da      	uxtb	r2, r3
 80018ee:	4b55      	ldr	r3, [pc, #340]	@ (8001a44 <HW_TS_Init+0x190>)
 80018f0:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 80018f2:	4b53      	ldr	r3, [pc, #332]	@ (8001a40 <HW_TS_Init+0x18c>)
 80018f4:	691b      	ldr	r3, [r3, #16]
 80018f6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80018fa:	f44f 02fe 	mov.w	r2, #8323072	@ 0x7f0000
 80018fe:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001900:	693a      	ldr	r2, [r7, #16]
 8001902:	fa92 f2a2 	rbit	r2, r2
 8001906:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001908:	68fa      	ldr	r2, [r7, #12]
 800190a:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800190c:	697a      	ldr	r2, [r7, #20]
 800190e:	2a00      	cmp	r2, #0
 8001910:	d101      	bne.n	8001916 <HW_TS_Init+0x62>
  {
    return 32U;
 8001912:	2220      	movs	r2, #32
 8001914:	e003      	b.n	800191e <HW_TS_Init+0x6a>
  }
  return __builtin_clz(value);
 8001916:	697a      	ldr	r2, [r7, #20]
 8001918:	fab2 f282 	clz	r2, r2
 800191c:	b2d2      	uxtb	r2, r2
 800191e:	40d3      	lsrs	r3, r2
 8001920:	b2db      	uxtb	r3, r3
 8001922:	3301      	adds	r3, #1
 8001924:	b2da      	uxtb	r2, r3
 8001926:	4b48      	ldr	r3, [pc, #288]	@ (8001a48 <HW_TS_Init+0x194>)
 8001928:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 800192a:	4b45      	ldr	r3, [pc, #276]	@ (8001a40 <HW_TS_Init+0x18c>)
 800192c:	691b      	ldr	r3, [r3, #16]
 800192e:	b29b      	uxth	r3, r3
 8001930:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001934:	b29b      	uxth	r3, r3
 8001936:	3301      	adds	r3, #1
 8001938:	b29a      	uxth	r2, r3
 800193a:	4b44      	ldr	r3, [pc, #272]	@ (8001a4c <HW_TS_Init+0x198>)
 800193c:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 800193e:	4b43      	ldr	r3, [pc, #268]	@ (8001a4c <HW_TS_Init+0x198>)
 8001940:	881b      	ldrh	r3, [r3, #0]
 8001942:	3b01      	subs	r3, #1
 8001944:	4a40      	ldr	r2, [pc, #256]	@ (8001a48 <HW_TS_Init+0x194>)
 8001946:	7812      	ldrb	r2, [r2, #0]
 8001948:	fb02 f303 	mul.w	r3, r2, r3
 800194c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001950:	4a3c      	ldr	r2, [pc, #240]	@ (8001a44 <HW_TS_Init+0x190>)
 8001952:	7812      	ldrb	r2, [r2, #0]
 8001954:	40d3      	lsrs	r3, r2
 8001956:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 8001958:	69bb      	ldr	r3, [r7, #24]
 800195a:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800195e:	4293      	cmp	r3, r2
 8001960:	d904      	bls.n	800196c <HW_TS_Init+0xb8>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 8001962:	4b3b      	ldr	r3, [pc, #236]	@ (8001a50 <HW_TS_Init+0x19c>)
 8001964:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001968:	801a      	strh	r2, [r3, #0]
 800196a:	e003      	b.n	8001974 <HW_TS_Init+0xc0>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 800196c:	69bb      	ldr	r3, [r7, #24]
 800196e:	b29a      	uxth	r2, r3
 8001970:	4b37      	ldr	r3, [pc, #220]	@ (8001a50 <HW_TS_Init+0x19c>)
 8001972:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8001974:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8001978:	f7ff fb9c 	bl	80010b4 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 800197c:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8001980:	f7ff fb84 	bl	800108c <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 8001984:	79fb      	ldrb	r3, [r7, #7]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d13d      	bne.n	8001a06 <HW_TS_Init+0x152>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 800198a:	4b32      	ldr	r3, [pc, #200]	@ (8001a54 <HW_TS_Init+0x1a0>)
 800198c:	2201      	movs	r2, #1
 800198e:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001990:	4b31      	ldr	r3, [pc, #196]	@ (8001a58 <HW_TS_Init+0x1a4>)
 8001992:	f04f 32ff 	mov.w	r2, #4294967295
 8001996:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8001998:	2300      	movs	r3, #0
 800199a:	77fb      	strb	r3, [r7, #31]
 800199c:	e00c      	b.n	80019b8 <HW_TS_Init+0x104>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 800199e:	7ffa      	ldrb	r2, [r7, #31]
 80019a0:	492e      	ldr	r1, [pc, #184]	@ (8001a5c <HW_TS_Init+0x1a8>)
 80019a2:	4613      	mov	r3, r2
 80019a4:	005b      	lsls	r3, r3, #1
 80019a6:	4413      	add	r3, r2
 80019a8:	00db      	lsls	r3, r3, #3
 80019aa:	440b      	add	r3, r1
 80019ac:	330c      	adds	r3, #12
 80019ae:	2200      	movs	r2, #0
 80019b0:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 80019b2:	7ffb      	ldrb	r3, [r7, #31]
 80019b4:	3301      	adds	r3, #1
 80019b6:	77fb      	strb	r3, [r7, #31]
 80019b8:	7ffb      	ldrb	r3, [r7, #31]
 80019ba:	2b05      	cmp	r3, #5
 80019bc:	d9ef      	bls.n	800199e <HW_TS_Init+0xea>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 80019be:	4b28      	ldr	r3, [pc, #160]	@ (8001a60 <HW_TS_Init+0x1ac>)
 80019c0:	2206      	movs	r2, #6
 80019c2:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);                       /**<  Disable the Wakeup Timer */
 80019c4:	4b1d      	ldr	r3, [pc, #116]	@ (8001a3c <HW_TS_Init+0x188>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	689a      	ldr	r2, [r3, #8]
 80019ca:	4b1c      	ldr	r3, [pc, #112]	@ (8001a3c <HW_TS_Init+0x188>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80019d2:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 80019d4:	4b19      	ldr	r3, [pc, #100]	@ (8001a3c <HW_TS_Init+0x188>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	68db      	ldr	r3, [r3, #12]
 80019da:	b2da      	uxtb	r2, r3
 80019dc:	4b17      	ldr	r3, [pc, #92]	@ (8001a3c <HW_TS_Init+0x188>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 80019e4:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 80019e6:	4b1f      	ldr	r3, [pc, #124]	@ (8001a64 <HW_TS_Init+0x1b0>)
 80019e8:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80019ec:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 80019ee:	2003      	movs	r0, #3
 80019f0:	f006 fa19 	bl	8007e26 <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(&hrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 80019f4:	4b11      	ldr	r3, [pc, #68]	@ (8001a3c <HW_TS_Init+0x188>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	689a      	ldr	r2, [r3, #8]
 80019fa:	4b10      	ldr	r3, [pc, #64]	@ (8001a3c <HW_TS_Init+0x188>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001a02:	609a      	str	r2, [r3, #8]
 8001a04:	e009      	b.n	8001a1a <HW_TS_Init+0x166>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTF) != RESET)
 8001a06:	4b0d      	ldr	r3, [pc, #52]	@ (8001a3c <HW_TS_Init+0x188>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	68db      	ldr	r3, [r3, #12]
 8001a0c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d002      	beq.n	8001a1a <HW_TS_Init+0x166>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8001a14:	2003      	movs	r0, #3
 8001a16:	f006 f9f8 	bl	8007e0a <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8001a1a:	4b08      	ldr	r3, [pc, #32]	@ (8001a3c <HW_TS_Init+0x188>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	22ff      	movs	r2, #255	@ 0xff
 8001a20:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 8001a22:	2200      	movs	r2, #0
 8001a24:	2103      	movs	r1, #3
 8001a26:	2003      	movs	r0, #3
 8001a28:	f006 f9ad 	bl	8007d86 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001a2c:	2003      	movs	r0, #3
 8001a2e:	f006 f9c4 	bl	8007dba <HAL_NVIC_EnableIRQ>

  return;
 8001a32:	bf00      	nop
}
 8001a34:	3720      	adds	r7, #32
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	200002ec 	.word	0x200002ec
 8001a40:	40002800 	.word	0x40002800
 8001a44:	200001ed 	.word	0x200001ed
 8001a48:	200001ee 	.word	0x200001ee
 8001a4c:	200001f0 	.word	0x200001f0
 8001a50:	200001f2 	.word	0x200001f2
 8001a54:	200001ec 	.word	0x200001ec
 8001a58:	200001e8 	.word	0x200001e8
 8001a5c:	20000154 	.word	0x20000154
 8001a60:	200001e4 	.word	0x200001e4
 8001a64:	58000800 	.word	0x58000800

08001a68 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b086      	sub	sp, #24
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	4603      	mov	r3, r0
 8001a70:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001a72:	f3ef 8310 	mrs	r3, PRIMASK
 8001a76:	60fb      	str	r3, [r7, #12]
  return(result);
 8001a78:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001a7a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001a7c:	b672      	cpsid	i
}
 8001a7e:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8001a80:	2003      	movs	r0, #3
 8001a82:	f006 f9a8 	bl	8007dd6 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001a86:	4b34      	ldr	r3, [pc, #208]	@ (8001b58 <HW_TS_Stop+0xf0>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	22ca      	movs	r2, #202	@ 0xca
 8001a8c:	625a      	str	r2, [r3, #36]	@ 0x24
 8001a8e:	4b32      	ldr	r3, [pc, #200]	@ (8001b58 <HW_TS_Stop+0xf0>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	2253      	movs	r2, #83	@ 0x53
 8001a94:	625a      	str	r2, [r3, #36]	@ 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8001a96:	79fa      	ldrb	r2, [r7, #7]
 8001a98:	4930      	ldr	r1, [pc, #192]	@ (8001b5c <HW_TS_Stop+0xf4>)
 8001a9a:	4613      	mov	r3, r2
 8001a9c:	005b      	lsls	r3, r3, #1
 8001a9e:	4413      	add	r3, r2
 8001aa0:	00db      	lsls	r3, r3, #3
 8001aa2:	440b      	add	r3, r1
 8001aa4:	330c      	adds	r3, #12
 8001aa6:	781b      	ldrb	r3, [r3, #0]
 8001aa8:	b2db      	uxtb	r3, r3
 8001aaa:	2b02      	cmp	r3, #2
 8001aac:	d142      	bne.n	8001b34 <HW_TS_Stop+0xcc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 8001aae:	79fb      	ldrb	r3, [r7, #7]
 8001ab0:	2100      	movs	r1, #0
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f7ff fc80 	bl	80013b8 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 8001ab8:	4b29      	ldr	r3, [pc, #164]	@ (8001b60 <HW_TS_Stop+0xf8>)
 8001aba:	781b      	ldrb	r3, [r3, #0]
 8001abc:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001abe:	7cfb      	ldrb	r3, [r7, #19]
 8001ac0:	2b06      	cmp	r3, #6
 8001ac2:	d12f      	bne.n	8001b24 <HW_TS_Stop+0xbc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8001ac4:	4b27      	ldr	r3, [pc, #156]	@ (8001b64 <HW_TS_Stop+0xfc>)
 8001ac6:	689b      	ldr	r3, [r3, #8]
 8001ac8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001acc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001ad0:	d107      	bne.n	8001ae2 <HW_TS_Stop+0x7a>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8001ad2:	bf00      	nop
 8001ad4:	4b20      	ldr	r3, [pc, #128]	@ (8001b58 <HW_TS_Stop+0xf0>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	68db      	ldr	r3, [r3, #12]
 8001ada:	f003 0304 	and.w	r3, r3, #4
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d1f8      	bne.n	8001ad4 <HW_TS_Stop+0x6c>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8001ae2:	4b1d      	ldr	r3, [pc, #116]	@ (8001b58 <HW_TS_Stop+0xf0>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	689a      	ldr	r2, [r3, #8]
 8001ae8:	4b1b      	ldr	r3, [pc, #108]	@ (8001b58 <HW_TS_Stop+0xf0>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001af0:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8001af2:	bf00      	nop
 8001af4:	4b18      	ldr	r3, [pc, #96]	@ (8001b58 <HW_TS_Stop+0xf0>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	68db      	ldr	r3, [r3, #12]
 8001afa:	f003 0304 	and.w	r3, r3, #4
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d0f8      	beq.n	8001af4 <HW_TS_Stop+0x8c>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001b02:	4b15      	ldr	r3, [pc, #84]	@ (8001b58 <HW_TS_Stop+0xf0>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	68db      	ldr	r3, [r3, #12]
 8001b08:	b2da      	uxtb	r2, r3
 8001b0a:	4b13      	ldr	r3, [pc, #76]	@ (8001b58 <HW_TS_Stop+0xf0>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8001b12:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001b14:	4b14      	ldr	r3, [pc, #80]	@ (8001b68 <HW_TS_Stop+0x100>)
 8001b16:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001b1a:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8001b1c:	2003      	movs	r0, #3
 8001b1e:	f006 f982 	bl	8007e26 <HAL_NVIC_ClearPendingIRQ>
 8001b22:	e007      	b.n	8001b34 <HW_TS_Stop+0xcc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8001b24:	4b11      	ldr	r3, [pc, #68]	@ (8001b6c <HW_TS_Stop+0x104>)
 8001b26:	781b      	ldrb	r3, [r3, #0]
 8001b28:	b2db      	uxtb	r3, r3
 8001b2a:	7cfa      	ldrb	r2, [r7, #19]
 8001b2c:	429a      	cmp	r2, r3
 8001b2e:	d001      	beq.n	8001b34 <HW_TS_Stop+0xcc>
    {
      RescheduleTimerList();
 8001b30:	f7ff fd5e 	bl	80015f0 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8001b34:	4b08      	ldr	r3, [pc, #32]	@ (8001b58 <HW_TS_Stop+0xf0>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	22ff      	movs	r2, #255	@ 0xff
 8001b3a:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001b3c:	2003      	movs	r0, #3
 8001b3e:	f006 f93c 	bl	8007dba <HAL_NVIC_EnableIRQ>
 8001b42:	697b      	ldr	r3, [r7, #20]
 8001b44:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001b46:	68bb      	ldr	r3, [r7, #8]
 8001b48:	f383 8810 	msr	PRIMASK, r3
}
 8001b4c:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8001b4e:	bf00      	nop
}
 8001b50:	3718      	adds	r7, #24
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	200002ec 	.word	0x200002ec
 8001b5c:	20000154 	.word	0x20000154
 8001b60:	200001e4 	.word	0x200001e4
 8001b64:	40002800 	.word	0x40002800
 8001b68:	58000800 	.word	0x58000800
 8001b6c:	200001e5 	.word	0x200001e5

08001b70 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b086      	sub	sp, #24
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	4603      	mov	r3, r0
 8001b78:	6039      	str	r1, [r7, #0]
 8001b7a:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8001b7c:	79fa      	ldrb	r2, [r7, #7]
 8001b7e:	493b      	ldr	r1, [pc, #236]	@ (8001c6c <HW_TS_Start+0xfc>)
 8001b80:	4613      	mov	r3, r2
 8001b82:	005b      	lsls	r3, r3, #1
 8001b84:	4413      	add	r3, r2
 8001b86:	00db      	lsls	r3, r3, #3
 8001b88:	440b      	add	r3, r1
 8001b8a:	330c      	adds	r3, #12
 8001b8c:	781b      	ldrb	r3, [r3, #0]
 8001b8e:	b2db      	uxtb	r3, r3
 8001b90:	2b02      	cmp	r3, #2
 8001b92:	d103      	bne.n	8001b9c <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 8001b94:	79fb      	ldrb	r3, [r7, #7]
 8001b96:	4618      	mov	r0, r3
 8001b98:	f7ff ff66 	bl	8001a68 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001b9c:	f3ef 8310 	mrs	r3, PRIMASK
 8001ba0:	60fb      	str	r3, [r7, #12]
  return(result);
 8001ba2:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001ba4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001ba6:	b672      	cpsid	i
}
 8001ba8:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8001baa:	2003      	movs	r0, #3
 8001bac:	f006 f913 	bl	8007dd6 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001bb0:	4b2f      	ldr	r3, [pc, #188]	@ (8001c70 <HW_TS_Start+0x100>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	22ca      	movs	r2, #202	@ 0xca
 8001bb6:	625a      	str	r2, [r3, #36]	@ 0x24
 8001bb8:	4b2d      	ldr	r3, [pc, #180]	@ (8001c70 <HW_TS_Start+0x100>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	2253      	movs	r2, #83	@ 0x53
 8001bbe:	625a      	str	r2, [r3, #36]	@ 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 8001bc0:	79fa      	ldrb	r2, [r7, #7]
 8001bc2:	492a      	ldr	r1, [pc, #168]	@ (8001c6c <HW_TS_Start+0xfc>)
 8001bc4:	4613      	mov	r3, r2
 8001bc6:	005b      	lsls	r3, r3, #1
 8001bc8:	4413      	add	r3, r2
 8001bca:	00db      	lsls	r3, r3, #3
 8001bcc:	440b      	add	r3, r1
 8001bce:	330c      	adds	r3, #12
 8001bd0:	2202      	movs	r2, #2
 8001bd2:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 8001bd4:	79fa      	ldrb	r2, [r7, #7]
 8001bd6:	4925      	ldr	r1, [pc, #148]	@ (8001c6c <HW_TS_Start+0xfc>)
 8001bd8:	4613      	mov	r3, r2
 8001bda:	005b      	lsls	r3, r3, #1
 8001bdc:	4413      	add	r3, r2
 8001bde:	00db      	lsls	r3, r3, #3
 8001be0:	440b      	add	r3, r1
 8001be2:	3308      	adds	r3, #8
 8001be4:	683a      	ldr	r2, [r7, #0]
 8001be6:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 8001be8:	79fa      	ldrb	r2, [r7, #7]
 8001bea:	4920      	ldr	r1, [pc, #128]	@ (8001c6c <HW_TS_Start+0xfc>)
 8001bec:	4613      	mov	r3, r2
 8001bee:	005b      	lsls	r3, r3, #1
 8001bf0:	4413      	add	r3, r2
 8001bf2:	00db      	lsls	r3, r3, #3
 8001bf4:	440b      	add	r3, r1
 8001bf6:	3304      	adds	r3, #4
 8001bf8:	683a      	ldr	r2, [r7, #0]
 8001bfa:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 8001bfc:	79fb      	ldrb	r3, [r7, #7]
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f7ff fb30 	bl	8001264 <linkTimer>
 8001c04:	4603      	mov	r3, r0
 8001c06:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 8001c08:	4b1a      	ldr	r3, [pc, #104]	@ (8001c74 <HW_TS_Start+0x104>)
 8001c0a:	781b      	ldrb	r3, [r3, #0]
 8001c0c:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8001c0e:	4b1a      	ldr	r3, [pc, #104]	@ (8001c78 <HW_TS_Start+0x108>)
 8001c10:	781b      	ldrb	r3, [r3, #0]
 8001c12:	b2db      	uxtb	r3, r3
 8001c14:	7c7a      	ldrb	r2, [r7, #17]
 8001c16:	429a      	cmp	r2, r3
 8001c18:	d002      	beq.n	8001c20 <HW_TS_Start+0xb0>
  {
    RescheduleTimerList();
 8001c1a:	f7ff fce9 	bl	80015f0 <RescheduleTimerList>
 8001c1e:	e013      	b.n	8001c48 <HW_TS_Start+0xd8>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 8001c20:	79fa      	ldrb	r2, [r7, #7]
 8001c22:	4912      	ldr	r1, [pc, #72]	@ (8001c6c <HW_TS_Start+0xfc>)
 8001c24:	4613      	mov	r3, r2
 8001c26:	005b      	lsls	r3, r3, #1
 8001c28:	4413      	add	r3, r2
 8001c2a:	00db      	lsls	r3, r3, #3
 8001c2c:	440b      	add	r3, r1
 8001c2e:	3308      	adds	r3, #8
 8001c30:	6819      	ldr	r1, [r3, #0]
 8001c32:	8a7b      	ldrh	r3, [r7, #18]
 8001c34:	79fa      	ldrb	r2, [r7, #7]
 8001c36:	1ac9      	subs	r1, r1, r3
 8001c38:	480c      	ldr	r0, [pc, #48]	@ (8001c6c <HW_TS_Start+0xfc>)
 8001c3a:	4613      	mov	r3, r2
 8001c3c:	005b      	lsls	r3, r3, #1
 8001c3e:	4413      	add	r3, r2
 8001c40:	00db      	lsls	r3, r3, #3
 8001c42:	4403      	add	r3, r0
 8001c44:	3308      	adds	r3, #8
 8001c46:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8001c48:	4b09      	ldr	r3, [pc, #36]	@ (8001c70 <HW_TS_Start+0x100>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	22ff      	movs	r2, #255	@ 0xff
 8001c4e:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001c50:	2003      	movs	r0, #3
 8001c52:	f006 f8b2 	bl	8007dba <HAL_NVIC_EnableIRQ>
 8001c56:	697b      	ldr	r3, [r7, #20]
 8001c58:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001c5a:	68bb      	ldr	r3, [r7, #8]
 8001c5c:	f383 8810 	msr	PRIMASK, r3
}
 8001c60:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8001c62:	bf00      	nop
}
 8001c64:	3718      	adds	r7, #24
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}
 8001c6a:	bf00      	nop
 8001c6c:	20000154 	.word	0x20000154
 8001c70:	200002ec 	.word	0x200002ec
 8001c74:	200001e4 	.word	0x200001e4
 8001c78:	200001e5 	.word	0x200001e5

08001c7c <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b084      	sub	sp, #16
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	60f8      	str	r0, [r7, #12]
 8001c84:	460b      	mov	r3, r1
 8001c86:	607a      	str	r2, [r7, #4]
 8001c88:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	4798      	blx	r3

  return;
 8001c8e:	bf00      	nop
}
 8001c90:	3710      	adds	r7, #16
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}
	...

08001c98 <MagCal_Run>:
static void fUpdateCalibration10EIG(MagCalibration_t *MagCal);

int magcal_type = 0;
int magcal_cnt = 0;

int MagCal_Run(void) {
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b084      	sub	sp, #16
 8001c9c:	af00      	add	r7, sp, #0
	int i, j;			// loop counters
	int isolver;		// magnetic solver used
	int count = 0;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	603b      	str	r3, [r7, #0]
	// only do the calibration occasionally
//	if (++waitcount < 20) return 0;
//	waitcount = 0;

	// count number of data points
	for (i = 0; i < MAGBUFFSIZE; i++) {
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	60fb      	str	r3, [r7, #12]
 8001ca6:	e00e      	b.n	8001cc6 <MagCal_Run+0x2e>
		if (magcal.valid[i])
 8001ca8:	4a91      	ldr	r2, [pc, #580]	@ (8001ef0 <MagCal_Run+0x258>)
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	4413      	add	r3, r2
 8001cae:	f603 537a 	addw	r3, r3, #3450	@ 0xd7a
 8001cb2:	f993 3000 	ldrsb.w	r3, [r3]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d002      	beq.n	8001cc0 <MagCal_Run+0x28>
			count++;
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	3301      	adds	r3, #1
 8001cbe:	603b      	str	r3, [r7, #0]
	for (i = 0; i < MAGBUFFSIZE; i++) {
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	3301      	adds	r3, #1
 8001cc4:	60fb      	str	r3, [r7, #12]
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8001ccc:	dbec      	blt.n	8001ca8 <MagCal_Run+0x10>
	}

	magcal_cnt = count;
 8001cce:	4a89      	ldr	r2, [pc, #548]	@ (8001ef4 <MagCal_Run+0x25c>)
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	6013      	str	r3, [r2, #0]

	if (count < MINMEASUREMENTS4CAL)
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	2b27      	cmp	r3, #39	@ 0x27
 8001cd8:	dc01      	bgt.n	8001cde <MagCal_Run+0x46>
		return 0;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	e103      	b.n	8001ee6 <MagCal_Run+0x24e>

	if (magcal.ValidMagCal) {
 8001cde:	4b84      	ldr	r3, [pc, #528]	@ (8001ef0 <MagCal_Run+0x258>)
 8001ce0:	f993 3418 	ldrsb.w	r3, [r3, #1048]	@ 0x418
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d009      	beq.n	8001cfc <MagCal_Run+0x64>
		// age the existing fit error to avoid one good calibration locking out future updates
		magcal.FitErrorAge *= 1.02f;
 8001ce8:	4b81      	ldr	r3, [pc, #516]	@ (8001ef0 <MagCal_Run+0x258>)
 8001cea:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 8001cee:	ed9f 7a82 	vldr	s14, [pc, #520]	@ 8001ef8 <MagCal_Run+0x260>
 8001cf2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001cf6:	4b7e      	ldr	r3, [pc, #504]	@ (8001ef0 <MagCal_Run+0x258>)
 8001cf8:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
	}

	if (count < MINMEASUREMENTS7CAL) {
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	2b63      	cmp	r3, #99	@ 0x63
 8001d00:	dc12      	bgt.n	8001d28 <MagCal_Run+0x90>
		isolver = 4;
 8001d02:	2304      	movs	r3, #4
 8001d04:	607b      	str	r3, [r7, #4]
		fUpdateCalibration4INV(&magcal); // 4 element matrix inversion calibration
 8001d06:	487a      	ldr	r0, [pc, #488]	@ (8001ef0 <MagCal_Run+0x258>)
 8001d08:	f000 f900 	bl	8001f0c <fUpdateCalibration4INV>
		if (magcal.trFitErrorpc < 12.0f)
 8001d0c:	4b78      	ldr	r3, [pc, #480]	@ (8001ef0 <MagCal_Run+0x258>)
 8001d0e:	edd3 7a1d 	vldr	s15, [r3, #116]	@ 0x74
 8001d12:	eeb2 7a08 	vmov.f32	s14, #40	@ 0x41400000  12.0
 8001d16:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d1e:	d51e      	bpl.n	8001d5e <MagCal_Run+0xc6>
			magcal.trFitErrorpc = 12.0f;
 8001d20:	4b73      	ldr	r3, [pc, #460]	@ (8001ef0 <MagCal_Run+0x258>)
 8001d22:	4a76      	ldr	r2, [pc, #472]	@ (8001efc <MagCal_Run+0x264>)
 8001d24:	675a      	str	r2, [r3, #116]	@ 0x74
 8001d26:	e01a      	b.n	8001d5e <MagCal_Run+0xc6>
	} else if (count < MINMEASUREMENTS10CAL) {
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	2b95      	cmp	r3, #149	@ 0x95
 8001d2c:	dc12      	bgt.n	8001d54 <MagCal_Run+0xbc>
		isolver = 7;
 8001d2e:	2307      	movs	r3, #7
 8001d30:	607b      	str	r3, [r7, #4]
		fUpdateCalibration7EIG(&magcal); // 7 element eigenpair calibration
 8001d32:	486f      	ldr	r0, [pc, #444]	@ (8001ef0 <MagCal_Run+0x258>)
 8001d34:	f000 fc7c 	bl	8002630 <fUpdateCalibration7EIG>
		if (magcal.trFitErrorpc < 7.5f)
 8001d38:	4b6d      	ldr	r3, [pc, #436]	@ (8001ef0 <MagCal_Run+0x258>)
 8001d3a:	edd3 7a1d 	vldr	s15, [r3, #116]	@ 0x74
 8001d3e:	eeb1 7a0e 	vmov.f32	s14, #30	@ 0x40f00000  7.5
 8001d42:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d4a:	d508      	bpl.n	8001d5e <MagCal_Run+0xc6>
			magcal.trFitErrorpc = 7.5f;
 8001d4c:	4b68      	ldr	r3, [pc, #416]	@ (8001ef0 <MagCal_Run+0x258>)
 8001d4e:	4a6c      	ldr	r2, [pc, #432]	@ (8001f00 <MagCal_Run+0x268>)
 8001d50:	675a      	str	r2, [r3, #116]	@ 0x74
 8001d52:	e004      	b.n	8001d5e <MagCal_Run+0xc6>
	} else {
		isolver = 10;
 8001d54:	230a      	movs	r3, #10
 8001d56:	607b      	str	r3, [r7, #4]
		fUpdateCalibration10EIG(&magcal); // 10 element eigenpair calibration
 8001d58:	4865      	ldr	r0, [pc, #404]	@ (8001ef0 <MagCal_Run+0x258>)
 8001d5a:	f000 ff53 	bl	8002c04 <fUpdateCalibration10EIG>
	}

	// the trial geomagnetic field must be in range (earth is 22uT to 67uT)
	if ((magcal.trB >= MINBFITUT) && (magcal.trB <= MAXBFITUT)) {
 8001d5e:	4b64      	ldr	r3, [pc, #400]	@ (8001ef0 <MagCal_Run+0x258>)
 8001d60:	edd3 7a1c 	vldr	s15, [r3, #112]	@ 0x70
 8001d64:	eeb3 7a06 	vmov.f32	s14, #54	@ 0x41b00000  22.0
 8001d68:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d70:	f2c0 80b8 	blt.w	8001ee4 <MagCal_Run+0x24c>
 8001d74:	4b5e      	ldr	r3, [pc, #376]	@ (8001ef0 <MagCal_Run+0x258>)
 8001d76:	edd3 7a1c 	vldr	s15, [r3, #112]	@ 0x70
 8001d7a:	ed9f 7a62 	vldr	s14, [pc, #392]	@ 8001f04 <MagCal_Run+0x26c>
 8001d7e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d86:	f200 80ad 	bhi.w	8001ee4 <MagCal_Run+0x24c>
		// always accept the calibration if
		//  1: no previous calibration exists
		//  2: the calibration fit is reduced or
		//  3: an improved solver was used giving a good trial calibration (4% or under)
		if ((magcal.ValidMagCal == 0)
 8001d8a:	4b59      	ldr	r3, [pc, #356]	@ (8001ef0 <MagCal_Run+0x258>)
 8001d8c:	f993 3418 	ldrsb.w	r3, [r3, #1048]	@ 0x418
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d01d      	beq.n	8001dd0 <MagCal_Run+0x138>
				|| (magcal.trFitErrorpc <= magcal.FitErrorAge)
 8001d94:	4b56      	ldr	r3, [pc, #344]	@ (8001ef0 <MagCal_Run+0x258>)
 8001d96:	ed93 7a1d 	vldr	s14, [r3, #116]	@ 0x74
 8001d9a:	4b55      	ldr	r3, [pc, #340]	@ (8001ef0 <MagCal_Run+0x258>)
 8001d9c:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 8001da0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001da4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001da8:	d912      	bls.n	8001dd0 <MagCal_Run+0x138>
				|| ((isolver > magcal.ValidMagCal)
 8001daa:	4b51      	ldr	r3, [pc, #324]	@ (8001ef0 <MagCal_Run+0x258>)
 8001dac:	f993 3418 	ldrsb.w	r3, [r3, #1048]	@ 0x418
 8001db0:	461a      	mov	r2, r3
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	4293      	cmp	r3, r2
 8001db6:	f340 8095 	ble.w	8001ee4 <MagCal_Run+0x24c>
						&& (magcal.trFitErrorpc <= 4.0F))) {
 8001dba:	4b4d      	ldr	r3, [pc, #308]	@ (8001ef0 <MagCal_Run+0x258>)
 8001dbc:	edd3 7a1d 	vldr	s15, [r3, #116]	@ 0x74
 8001dc0:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8001dc4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001dc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dcc:	f200 808a 	bhi.w	8001ee4 <MagCal_Run+0x24c>
			// accept the new calibration solution
			//printf("new magnetic cal, B=%.2f uT\n", magcal.trB);
			magcal.ValidMagCal = isolver;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	b25a      	sxtb	r2, r3
 8001dd4:	4b46      	ldr	r3, [pc, #280]	@ (8001ef0 <MagCal_Run+0x258>)
 8001dd6:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
			magcal.FitError = magcal.trFitErrorpc;
 8001dda:	4b45      	ldr	r3, [pc, #276]	@ (8001ef0 <MagCal_Run+0x258>)
 8001ddc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001dde:	4a44      	ldr	r2, [pc, #272]	@ (8001ef0 <MagCal_Run+0x258>)
 8001de0:	6393      	str	r3, [r2, #56]	@ 0x38
			if (magcal.trFitErrorpc > 2.0f) {
 8001de2:	4b43      	ldr	r3, [pc, #268]	@ (8001ef0 <MagCal_Run+0x258>)
 8001de4:	edd3 7a1d 	vldr	s15, [r3, #116]	@ 0x74
 8001de8:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8001dec:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001df0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001df4:	dd04      	ble.n	8001e00 <MagCal_Run+0x168>
				magcal.FitErrorAge = magcal.trFitErrorpc;
 8001df6:	4b3e      	ldr	r3, [pc, #248]	@ (8001ef0 <MagCal_Run+0x258>)
 8001df8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001dfa:	4a3d      	ldr	r2, [pc, #244]	@ (8001ef0 <MagCal_Run+0x258>)
 8001dfc:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8001dfe:	e003      	b.n	8001e08 <MagCal_Run+0x170>
			} else {
				magcal.FitErrorAge = 2.0f;
 8001e00:	4b3b      	ldr	r3, [pc, #236]	@ (8001ef0 <MagCal_Run+0x258>)
 8001e02:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001e06:	63da      	str	r2, [r3, #60]	@ 0x3c
			}
			magcal.B = magcal.trB;
 8001e08:	4b39      	ldr	r3, [pc, #228]	@ (8001ef0 <MagCal_Run+0x258>)
 8001e0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e0c:	4a38      	ldr	r2, [pc, #224]	@ (8001ef0 <MagCal_Run+0x258>)
 8001e0e:	6313      	str	r3, [r2, #48]	@ 0x30
			magcal.FourBsq = 4.0F * magcal.trB * magcal.trB;
 8001e10:	4b37      	ldr	r3, [pc, #220]	@ (8001ef0 <MagCal_Run+0x258>)
 8001e12:	edd3 7a1c 	vldr	s15, [r3, #112]	@ 0x70
 8001e16:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8001e1a:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001e1e:	4b34      	ldr	r3, [pc, #208]	@ (8001ef0 <MagCal_Run+0x258>)
 8001e20:	edd3 7a1c 	vldr	s15, [r3, #112]	@ 0x70
 8001e24:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e28:	4b31      	ldr	r3, [pc, #196]	@ (8001ef0 <MagCal_Run+0x258>)
 8001e2a:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
			if (fabs(magcal.trV[X]) <= 50.0f && fabs(magcal.trV[Y]) <= 50.0f
 8001e2e:	4b30      	ldr	r3, [pc, #192]	@ (8001ef0 <MagCal_Run+0x258>)
 8001e30:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8001e34:	eef0 7ae7 	vabs.f32	s15, s15
 8001e38:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 8001f08 <MagCal_Run+0x270>
 8001e3c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e44:	d84e      	bhi.n	8001ee4 <MagCal_Run+0x24c>
 8001e46:	4b2a      	ldr	r3, [pc, #168]	@ (8001ef0 <MagCal_Run+0x258>)
 8001e48:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 8001e4c:	eef0 7ae7 	vabs.f32	s15, s15
 8001e50:	ed9f 7a2d 	vldr	s14, [pc, #180]	@ 8001f08 <MagCal_Run+0x270>
 8001e54:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e5c:	d842      	bhi.n	8001ee4 <MagCal_Run+0x24c>
					&& fabs(magcal.trV[Z]) <= 50.0f) {
 8001e5e:	4b24      	ldr	r3, [pc, #144]	@ (8001ef0 <MagCal_Run+0x258>)
 8001e60:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 8001e64:	eef0 7ae7 	vabs.f32	s15, s15
 8001e68:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 8001f08 <MagCal_Run+0x270>
 8001e6c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e74:	d836      	bhi.n	8001ee4 <MagCal_Run+0x24c>
				for (i = X; i <= Z; i++) {
 8001e76:	2300      	movs	r3, #0
 8001e78:	60fb      	str	r3, [r7, #12]
 8001e7a:	e02e      	b.n	8001eda <MagCal_Run+0x242>
					magcal.V[i] = magcal.trV[i];
 8001e7c:	4a1c      	ldr	r2, [pc, #112]	@ (8001ef0 <MagCal_Run+0x258>)
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	3310      	adds	r3, #16
 8001e82:	009b      	lsls	r3, r3, #2
 8001e84:	4413      	add	r3, r2
 8001e86:	681a      	ldr	r2, [r3, #0]
 8001e88:	4919      	ldr	r1, [pc, #100]	@ (8001ef0 <MagCal_Run+0x258>)
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	009b      	lsls	r3, r3, #2
 8001e8e:	440b      	add	r3, r1
 8001e90:	601a      	str	r2, [r3, #0]
					for (j = X; j <= Z; j++) {
 8001e92:	2300      	movs	r3, #0
 8001e94:	60bb      	str	r3, [r7, #8]
 8001e96:	e01a      	b.n	8001ece <MagCal_Run+0x236>
						magcal.invW[i][j] = magcal.trinvW[i][j];
 8001e98:	4915      	ldr	r1, [pc, #84]	@ (8001ef0 <MagCal_Run+0x258>)
 8001e9a:	68fa      	ldr	r2, [r7, #12]
 8001e9c:	4613      	mov	r3, r2
 8001e9e:	005b      	lsls	r3, r3, #1
 8001ea0:	4413      	add	r3, r2
 8001ea2:	68ba      	ldr	r2, [r7, #8]
 8001ea4:	4413      	add	r3, r2
 8001ea6:	3312      	adds	r3, #18
 8001ea8:	009b      	lsls	r3, r3, #2
 8001eaa:	440b      	add	r3, r1
 8001eac:	3304      	adds	r3, #4
 8001eae:	6819      	ldr	r1, [r3, #0]
 8001eb0:	480f      	ldr	r0, [pc, #60]	@ (8001ef0 <MagCal_Run+0x258>)
 8001eb2:	68fa      	ldr	r2, [r7, #12]
 8001eb4:	4613      	mov	r3, r2
 8001eb6:	005b      	lsls	r3, r3, #1
 8001eb8:	4413      	add	r3, r2
 8001eba:	68ba      	ldr	r2, [r7, #8]
 8001ebc:	4413      	add	r3, r2
 8001ebe:	3302      	adds	r3, #2
 8001ec0:	009b      	lsls	r3, r3, #2
 8001ec2:	4403      	add	r3, r0
 8001ec4:	3304      	adds	r3, #4
 8001ec6:	6019      	str	r1, [r3, #0]
					for (j = X; j <= Z; j++) {
 8001ec8:	68bb      	ldr	r3, [r7, #8]
 8001eca:	3301      	adds	r3, #1
 8001ecc:	60bb      	str	r3, [r7, #8]
 8001ece:	68bb      	ldr	r3, [r7, #8]
 8001ed0:	2b02      	cmp	r3, #2
 8001ed2:	dde1      	ble.n	8001e98 <MagCal_Run+0x200>
				for (i = X; i <= Z; i++) {
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	3301      	adds	r3, #1
 8001ed8:	60fb      	str	r3, [r7, #12]
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	2b02      	cmp	r3, #2
 8001ede:	ddcd      	ble.n	8001e7c <MagCal_Run+0x1e4>
					}
				}
				return 1; // indicates new calibration applied
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	e000      	b.n	8001ee6 <MagCal_Run+0x24e>
			}

		}
	}

	return 0;
 8001ee4:	2300      	movs	r3, #0
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	3710      	adds	r7, #16
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	200004d8 	.word	0x200004d8
 8001ef4:	200001f8 	.word	0x200001f8
 8001ef8:	3f828f5c 	.word	0x3f828f5c
 8001efc:	41400000 	.word	0x41400000
 8001f00:	40f00000 	.word	0x40f00000
 8001f04:	42860000 	.word	0x42860000
 8001f08:	42480000 	.word	0x42480000

08001f0c <fUpdateCalibration4INV>:

static void fUpdateCalibration4INV(MagCalibration_t *MagCal) {
 8001f0c:	b590      	push	{r4, r7, lr}
 8001f0e:	b097      	sub	sp, #92	@ 0x5c
 8001f10:	af02      	add	r7, sp, #8
 8001f12:	6078      	str	r0, [r7, #4]
	float *pfRows[4];
	int8_t iColInd[4];
	int8_t iRowInd[4];
	int8_t iPivot[4];

	magcal_type = 1;
 8001f14:	4b68      	ldr	r3, [pc, #416]	@ (80020b8 <fUpdateCalibration4INV+0x1ac>)
 8001f16:	2201      	movs	r2, #1
 8001f18:	601a      	str	r2, [r3, #0]
	// compute fscaling to reduce multiplications later
	fscaling = FXOS8700_UTPERCOUNT / DEFAULTB;
 8001f1a:	4b68      	ldr	r3, [pc, #416]	@ (80020bc <fUpdateCalibration4INV+0x1b0>)
 8001f1c:	637b      	str	r3, [r7, #52]	@ 0x34

	// the trial inverse soft iron matrix invW always equals
	// the identity matrix for 4 element calibration
	f3x3matrixAeqI(MagCal->trinvW);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	334c      	adds	r3, #76	@ 0x4c
 8001f22:	4618      	mov	r0, r3
 8001f24:	f003 ffb6 	bl	8005e94 <f3x3matrixAeqI>

	// zero fSumBp4=Y^T.Y, vecB=X^T.Y (4x1) and on and above
	// diagonal elements of matA=X^T*X (4x4)
	fSumBp4 = 0.0F;
 8001f28:	f04f 0300 	mov.w	r3, #0
 8001f2c:	64fb      	str	r3, [r7, #76]	@ 0x4c
	for (i = 0; i < 4; i++) {
 8001f2e:	2300      	movs	r3, #0
 8001f30:	643b      	str	r3, [r7, #64]	@ 0x40
 8001f32:	e022      	b.n	8001f7a <fUpdateCalibration4INV+0x6e>
		MagCal->vecB[i] = 0.0F;
 8001f34:	687a      	ldr	r2, [r7, #4]
 8001f36:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001f38:	f503 7381 	add.w	r3, r3, #258	@ 0x102
 8001f3c:	009b      	lsls	r3, r3, #2
 8001f3e:	4413      	add	r3, r2
 8001f40:	f04f 0200 	mov.w	r2, #0
 8001f44:	601a      	str	r2, [r3, #0]
		for (j = i; j < 4; j++) {
 8001f46:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001f48:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001f4a:	e010      	b.n	8001f6e <fUpdateCalibration4INV+0x62>
			MagCal->matA[i][j] = 0.0F;
 8001f4c:	6879      	ldr	r1, [r7, #4]
 8001f4e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001f50:	4613      	mov	r3, r2
 8001f52:	009b      	lsls	r3, r3, #2
 8001f54:	4413      	add	r3, r2
 8001f56:	005b      	lsls	r3, r3, #1
 8001f58:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001f5a:	4413      	add	r3, r2
 8001f5c:	3330      	adds	r3, #48	@ 0x30
 8001f5e:	009b      	lsls	r3, r3, #2
 8001f60:	440b      	add	r3, r1
 8001f62:	f04f 0200 	mov.w	r2, #0
 8001f66:	601a      	str	r2, [r3, #0]
		for (j = i; j < 4; j++) {
 8001f68:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001f6a:	3301      	adds	r3, #1
 8001f6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001f6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001f70:	2b03      	cmp	r3, #3
 8001f72:	ddeb      	ble.n	8001f4c <fUpdateCalibration4INV+0x40>
	for (i = 0; i < 4; i++) {
 8001f74:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001f76:	3301      	adds	r3, #1
 8001f78:	643b      	str	r3, [r7, #64]	@ 0x40
 8001f7a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001f7c:	2b03      	cmp	r3, #3
 8001f7e:	ddd9      	ble.n	8001f34 <fUpdateCalibration4INV+0x28>
		}
	}

	// the offsets are guaranteed to be set from the first element but to avoid compiler error
	iOffset[X] = iOffset[Y] = iOffset[Z] = 0;
 8001f80:	2300      	movs	r3, #0
 8001f82:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8001f84:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 8001f88:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8001f8a:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 8001f8e:	853b      	strh	r3, [r7, #40]	@ 0x28

	// use from MINEQUATIONS up to MAXEQUATIONS entries from magnetic buffer to compute matrices
	iCount = 0;
 8001f90:	2300      	movs	r3, #0
 8001f92:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
	for (j = 0; j < MAGBUFFSIZE; j++) {
 8001f96:	2300      	movs	r3, #0
 8001f98:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001f9a:	e13e      	b.n	800221a <fUpdateCalibration4INV+0x30e>
		if (MagCal->valid[j]) {
 8001f9c:	687a      	ldr	r2, [r7, #4]
 8001f9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001fa0:	4413      	add	r3, r2
 8001fa2:	f603 537a 	addw	r3, r3, #3450	@ 0xd7a
 8001fa6:	f993 3000 	ldrsb.w	r3, [r3]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	f000 8132 	beq.w	8002214 <fUpdateCalibration4INV+0x308>
			// use first valid magnetic buffer entry as estimate (in counts) for offset
			if (iCount == 0) {
 8001fb0:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	@ 0x46
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d11c      	bne.n	8001ff2 <fUpdateCalibration4INV+0xe6>
				for (k = X; k <= Z; k++) {
 8001fb8:	2300      	movs	r3, #0
 8001fba:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001fbc:	e016      	b.n	8001fec <fUpdateCalibration4INV+0xe0>
					iOffset[k] = MagCal->BpFast[k][j];
 8001fbe:	687a      	ldr	r2, [r7, #4]
 8001fc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001fc2:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8001fc6:	fb03 f101 	mul.w	r1, r3, r1
 8001fca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001fcc:	440b      	add	r3, r1
 8001fce:	f503 7303 	add.w	r3, r3, #524	@ 0x20c
 8001fd2:	005b      	lsls	r3, r3, #1
 8001fd4:	4413      	add	r3, r2
 8001fd6:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8001fda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001fdc:	005b      	lsls	r3, r3, #1
 8001fde:	3350      	adds	r3, #80	@ 0x50
 8001fe0:	443b      	add	r3, r7
 8001fe2:	f823 2c28 	strh.w	r2, [r3, #-40]
				for (k = X; k <= Z; k++) {
 8001fe6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001fe8:	3301      	adds	r3, #1
 8001fea:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001fec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001fee:	2b02      	cmp	r3, #2
 8001ff0:	dde5      	ble.n	8001fbe <fUpdateCalibration4INV+0xb2>
				}
			}

			// store scaled and offset fBp[XYZ] in vecA[0-2] and fBp[XYZ]^2 in vecA[3-5]
			for (k = X; k <= Z; k++) {
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001ff6:	e03f      	b.n	8002078 <fUpdateCalibration4INV+0x16c>
				MagCal->vecA[k] = (float) ((int32_t) MagCal->BpFast[k][j]
 8001ff8:	687a      	ldr	r2, [r7, #4]
 8001ffa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001ffc:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8002000:	fb03 f101 	mul.w	r1, r3, r1
 8002004:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002006:	440b      	add	r3, r1
 8002008:	f503 7303 	add.w	r3, r3, #524	@ 0x20c
 800200c:	005b      	lsls	r3, r3, #1
 800200e:	4413      	add	r3, r2
 8002010:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002014:	461a      	mov	r2, r3
						- (int32_t) iOffset[k]) * fscaling;
 8002016:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002018:	005b      	lsls	r3, r3, #1
 800201a:	3350      	adds	r3, #80	@ 0x50
 800201c:	443b      	add	r3, r7
 800201e:	f933 3c28 	ldrsh.w	r3, [r3, #-40]
 8002022:	1ad3      	subs	r3, r2, r3
				MagCal->vecA[k] = (float) ((int32_t) MagCal->BpFast[k][j]
 8002024:	ee07 3a90 	vmov	s15, r3
 8002028:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
						- (int32_t) iOffset[k]) * fscaling;
 800202c:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8002030:	ee67 7a27 	vmul.f32	s15, s14, s15
				MagCal->vecA[k] = (float) ((int32_t) MagCal->BpFast[k][j]
 8002034:	687a      	ldr	r2, [r7, #4]
 8002036:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002038:	33f8      	adds	r3, #248	@ 0xf8
 800203a:	009b      	lsls	r3, r3, #2
 800203c:	4413      	add	r3, r2
 800203e:	edc3 7a00 	vstr	s15, [r3]
				MagCal->vecA[k + 3] = MagCal->vecA[k] * MagCal->vecA[k];
 8002042:	687a      	ldr	r2, [r7, #4]
 8002044:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002046:	33f8      	adds	r3, #248	@ 0xf8
 8002048:	009b      	lsls	r3, r3, #2
 800204a:	4413      	add	r3, r2
 800204c:	ed93 7a00 	vldr	s14, [r3]
 8002050:	687a      	ldr	r2, [r7, #4]
 8002052:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002054:	33f8      	adds	r3, #248	@ 0xf8
 8002056:	009b      	lsls	r3, r3, #2
 8002058:	4413      	add	r3, r2
 800205a:	edd3 7a00 	vldr	s15, [r3]
 800205e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002060:	3303      	adds	r3, #3
 8002062:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002066:	687a      	ldr	r2, [r7, #4]
 8002068:	33f8      	adds	r3, #248	@ 0xf8
 800206a:	009b      	lsls	r3, r3, #2
 800206c:	4413      	add	r3, r2
 800206e:	edc3 7a00 	vstr	s15, [r3]
			for (k = X; k <= Z; k++) {
 8002072:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002074:	3301      	adds	r3, #1
 8002076:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002078:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800207a:	2b02      	cmp	r3, #2
 800207c:	ddbc      	ble.n	8001ff8 <fUpdateCalibration4INV+0xec>
			}

			// calculate fBp2 = Bp[X]^2 + Bp[Y]^2 + Bp[Z]^2 (scaled uT^2)
			fBp2 = MagCal->vecA[3] + MagCal->vecA[4] + MagCal->vecA[5];
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	ed93 7afb 	vldr	s14, [r3, #1004]	@ 0x3ec
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	edd3 7afc 	vldr	s15, [r3, #1008]	@ 0x3f0
 800208a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	edd3 7afd 	vldr	s15, [r3, #1012]	@ 0x3f4
 8002094:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002098:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30

			// accumulate fBp^4 over all measurements into fSumBp4=Y^T.Y
			fSumBp4 += fBp2 * fBp2;
 800209c:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80020a0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80020a4:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 80020a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020ac:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c

			// now we have fBp2, accumulate vecB[0-2] = X^T.Y =sum(Bp2.Bp[XYZ])
			for (k = X; k <= Z; k++) {
 80020b0:	2300      	movs	r3, #0
 80020b2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80020b4:	e024      	b.n	8002100 <fUpdateCalibration4INV+0x1f4>
 80020b6:	bf00      	nop
 80020b8:	200001f4 	.word	0x200001f4
 80020bc:	3b03126f 	.word	0x3b03126f
				MagCal->vecB[k] += MagCal->vecA[k] * fBp2;
 80020c0:	687a      	ldr	r2, [r7, #4]
 80020c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80020c4:	f503 7381 	add.w	r3, r3, #258	@ 0x102
 80020c8:	009b      	lsls	r3, r3, #2
 80020ca:	4413      	add	r3, r2
 80020cc:	ed93 7a00 	vldr	s14, [r3]
 80020d0:	687a      	ldr	r2, [r7, #4]
 80020d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80020d4:	33f8      	adds	r3, #248	@ 0xf8
 80020d6:	009b      	lsls	r3, r3, #2
 80020d8:	4413      	add	r3, r2
 80020da:	edd3 6a00 	vldr	s13, [r3]
 80020de:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80020e2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80020e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020ea:	687a      	ldr	r2, [r7, #4]
 80020ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80020ee:	f503 7381 	add.w	r3, r3, #258	@ 0x102
 80020f2:	009b      	lsls	r3, r3, #2
 80020f4:	4413      	add	r3, r2
 80020f6:	edc3 7a00 	vstr	s15, [r3]
			for (k = X; k <= Z; k++) {
 80020fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80020fc:	3301      	adds	r3, #1
 80020fe:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002100:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002102:	2b02      	cmp	r3, #2
 8002104:	dddc      	ble.n	80020c0 <fUpdateCalibration4INV+0x1b4>
			}

			//accumulate vecB[3] = X^T.Y =sum(fBp2)
			MagCal->vecB[3] += fBp2;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	f203 4314 	addw	r3, r3, #1044	@ 0x414
 800210c:	ed93 7a00 	vldr	s14, [r3]
 8002110:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8002114:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	f203 4314 	addw	r3, r3, #1044	@ 0x414
 800211e:	edc3 7a00 	vstr	s15, [r3]

			// accumulate on and above-diagonal terms of matA = X^T.X ignoring matA[3][3]
			MagCal->matA[0][0] += MagCal->vecA[X + 3];
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	ed93 7a30 	vldr	s14, [r3, #192]	@ 0xc0
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	edd3 7afb 	vldr	s15, [r3, #1004]	@ 0x3ec
 800212e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	edc3 7a30 	vstr	s15, [r3, #192]	@ 0xc0
			MagCal->matA[0][1] += MagCal->vecA[X] * MagCal->vecA[Y];
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	ed93 7a31 	vldr	s14, [r3, #196]	@ 0xc4
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	edd3 6af8 	vldr	s13, [r3, #992]	@ 0x3e0
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	edd3 7af9 	vldr	s15, [r3, #996]	@ 0x3e4
 800214a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800214e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	edc3 7a31 	vstr	s15, [r3, #196]	@ 0xc4
			MagCal->matA[0][2] += MagCal->vecA[X] * MagCal->vecA[Z];
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	ed93 7a32 	vldr	s14, [r3, #200]	@ 0xc8
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	edd3 6af8 	vldr	s13, [r3, #992]	@ 0x3e0
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	edd3 7afa 	vldr	s15, [r3, #1000]	@ 0x3e8
 800216a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800216e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	edc3 7a32 	vstr	s15, [r3, #200]	@ 0xc8
			MagCal->matA[0][3] += MagCal->vecA[X];
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	ed93 7a33 	vldr	s14, [r3, #204]	@ 0xcc
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	edd3 7af8 	vldr	s15, [r3, #992]	@ 0x3e0
 8002184:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	edc3 7a33 	vstr	s15, [r3, #204]	@ 0xcc
			MagCal->matA[1][1] += MagCal->vecA[Y + 3];
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	ed93 7a3b 	vldr	s14, [r3, #236]	@ 0xec
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	edd3 7afc 	vldr	s15, [r3, #1008]	@ 0x3f0
 800219a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	edc3 7a3b 	vstr	s15, [r3, #236]	@ 0xec
			MagCal->matA[1][2] += MagCal->vecA[Y] * MagCal->vecA[Z];
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	ed93 7a3c 	vldr	s14, [r3, #240]	@ 0xf0
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	edd3 6af9 	vldr	s13, [r3, #996]	@ 0x3e4
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	edd3 7afa 	vldr	s15, [r3, #1000]	@ 0x3e8
 80021b6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80021ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	edc3 7a3c 	vstr	s15, [r3, #240]	@ 0xf0
			MagCal->matA[1][3] += MagCal->vecA[Y];
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	ed93 7a3d 	vldr	s14, [r3, #244]	@ 0xf4
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	edd3 7af9 	vldr	s15, [r3, #996]	@ 0x3e4
 80021d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	edc3 7a3d 	vstr	s15, [r3, #244]	@ 0xf4
			MagCal->matA[2][2] += MagCal->vecA[Z + 3];
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	ed93 7a46 	vldr	s14, [r3, #280]	@ 0x118
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	edd3 7afd 	vldr	s15, [r3, #1012]	@ 0x3f4
 80021e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	edc3 7a46 	vstr	s15, [r3, #280]	@ 0x118
			MagCal->matA[2][3] += MagCal->vecA[Z];
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	ed93 7a47 	vldr	s14, [r3, #284]	@ 0x11c
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	edd3 7afa 	vldr	s15, [r3, #1000]	@ 0x3e8
 80021fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	edc3 7a47 	vstr	s15, [r3, #284]	@ 0x11c

			// increment the counter for next iteration
			iCount++;
 8002206:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	@ 0x46
 800220a:	b29b      	uxth	r3, r3
 800220c:	3301      	adds	r3, #1
 800220e:	b29b      	uxth	r3, r3
 8002210:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
	for (j = 0; j < MAGBUFFSIZE; j++) {
 8002214:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002216:	3301      	adds	r3, #1
 8002218:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800221a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800221c:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8002220:	f6ff aebc 	blt.w	8001f9c <fUpdateCalibration4INV+0x90>
		}
	}

	// set the last element of the measurement matrix to the number of buffer elements used
	MagCal->matA[3][3] = (float) iCount;
 8002224:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	@ 0x46
 8002228:	ee07 3a90 	vmov	s15, r3
 800222c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	edc3 7a51 	vstr	s15, [r3, #324]	@ 0x144

	// store the number of measurements accumulated
	MagCal->MagBufferCount = iCount;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 800223c:	f8a3 2f0a 	strh.w	r2, [r3, #3850]	@ 0xf0a

	// use above diagonal elements of symmetric matA to set both matB and matA to X^T.X
	for (i = 0; i < 4; i++) {
 8002240:	2300      	movs	r3, #0
 8002242:	643b      	str	r3, [r7, #64]	@ 0x40
 8002244:	e053      	b.n	80022ee <fUpdateCalibration4INV+0x3e2>
		for (j = i; j < 4; j++) {
 8002246:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002248:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800224a:	e04a      	b.n	80022e2 <fUpdateCalibration4INV+0x3d6>
			MagCal->matB[i][j] = MagCal->matB[j][i] = MagCal->matA[j][i] =
					MagCal->matA[i][j];
 800224c:	6879      	ldr	r1, [r7, #4]
 800224e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002250:	4613      	mov	r3, r2
 8002252:	009b      	lsls	r3, r3, #2
 8002254:	4413      	add	r3, r2
 8002256:	005b      	lsls	r3, r3, #1
 8002258:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800225a:	4413      	add	r3, r2
 800225c:	3330      	adds	r3, #48	@ 0x30
 800225e:	009b      	lsls	r3, r3, #2
 8002260:	440b      	add	r3, r1
 8002262:	6819      	ldr	r1, [r3, #0]
			MagCal->matB[i][j] = MagCal->matB[j][i] = MagCal->matA[j][i] =
 8002264:	6878      	ldr	r0, [r7, #4]
 8002266:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002268:	4613      	mov	r3, r2
 800226a:	009b      	lsls	r3, r3, #2
 800226c:	4413      	add	r3, r2
 800226e:	005b      	lsls	r3, r3, #1
 8002270:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002272:	4413      	add	r3, r2
 8002274:	3330      	adds	r3, #48	@ 0x30
 8002276:	009b      	lsls	r3, r3, #2
 8002278:	4403      	add	r3, r0
 800227a:	6019      	str	r1, [r3, #0]
 800227c:	6879      	ldr	r1, [r7, #4]
 800227e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002280:	4613      	mov	r3, r2
 8002282:	009b      	lsls	r3, r3, #2
 8002284:	4413      	add	r3, r2
 8002286:	005b      	lsls	r3, r3, #1
 8002288:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800228a:	4413      	add	r3, r2
 800228c:	3330      	adds	r3, #48	@ 0x30
 800228e:	009b      	lsls	r3, r3, #2
 8002290:	440b      	add	r3, r1
 8002292:	6819      	ldr	r1, [r3, #0]
 8002294:	6878      	ldr	r0, [r7, #4]
 8002296:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002298:	4613      	mov	r3, r2
 800229a:	009b      	lsls	r3, r3, #2
 800229c:	4413      	add	r3, r2
 800229e:	005b      	lsls	r3, r3, #1
 80022a0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80022a2:	4413      	add	r3, r2
 80022a4:	3394      	adds	r3, #148	@ 0x94
 80022a6:	009b      	lsls	r3, r3, #2
 80022a8:	4403      	add	r3, r0
 80022aa:	6019      	str	r1, [r3, #0]
 80022ac:	6879      	ldr	r1, [r7, #4]
 80022ae:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80022b0:	4613      	mov	r3, r2
 80022b2:	009b      	lsls	r3, r3, #2
 80022b4:	4413      	add	r3, r2
 80022b6:	005b      	lsls	r3, r3, #1
 80022b8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80022ba:	4413      	add	r3, r2
 80022bc:	3394      	adds	r3, #148	@ 0x94
 80022be:	009b      	lsls	r3, r3, #2
 80022c0:	440b      	add	r3, r1
 80022c2:	6819      	ldr	r1, [r3, #0]
 80022c4:	6878      	ldr	r0, [r7, #4]
 80022c6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80022c8:	4613      	mov	r3, r2
 80022ca:	009b      	lsls	r3, r3, #2
 80022cc:	4413      	add	r3, r2
 80022ce:	005b      	lsls	r3, r3, #1
 80022d0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80022d2:	4413      	add	r3, r2
 80022d4:	3394      	adds	r3, #148	@ 0x94
 80022d6:	009b      	lsls	r3, r3, #2
 80022d8:	4403      	add	r3, r0
 80022da:	6019      	str	r1, [r3, #0]
		for (j = i; j < 4; j++) {
 80022dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80022de:	3301      	adds	r3, #1
 80022e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80022e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80022e4:	2b03      	cmp	r3, #3
 80022e6:	ddb1      	ble.n	800224c <fUpdateCalibration4INV+0x340>
	for (i = 0; i < 4; i++) {
 80022e8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80022ea:	3301      	adds	r3, #1
 80022ec:	643b      	str	r3, [r7, #64]	@ 0x40
 80022ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80022f0:	2b03      	cmp	r3, #3
 80022f2:	dda8      	ble.n	8002246 <fUpdateCalibration4INV+0x33a>
		}
	}

	// calculate in situ inverse of matB = inv(X^T.X) (4x4) while matA still holds X^T.X
	for (i = 0; i < 4; i++) {
 80022f4:	2300      	movs	r3, #0
 80022f6:	643b      	str	r3, [r7, #64]	@ 0x40
 80022f8:	e011      	b.n	800231e <fUpdateCalibration4INV+0x412>
		pfRows[i] = MagCal->matB[i];
 80022fa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80022fc:	4613      	mov	r3, r2
 80022fe:	009b      	lsls	r3, r3, #2
 8002300:	4413      	add	r3, r2
 8002302:	00db      	lsls	r3, r3, #3
 8002304:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002308:	687a      	ldr	r2, [r7, #4]
 800230a:	441a      	add	r2, r3
 800230c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800230e:	009b      	lsls	r3, r3, #2
 8002310:	3350      	adds	r3, #80	@ 0x50
 8002312:	443b      	add	r3, r7
 8002314:	f843 2c38 	str.w	r2, [r3, #-56]
	for (i = 0; i < 4; i++) {
 8002318:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800231a:	3301      	adds	r3, #1
 800231c:	643b      	str	r3, [r7, #64]	@ 0x40
 800231e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002320:	2b03      	cmp	r3, #3
 8002322:	ddea      	ble.n	80022fa <fUpdateCalibration4INV+0x3ee>
	}
	fmatrixAeqInvA(pfRows, iColInd, iRowInd, iPivot, 4);
 8002324:	f107 030c 	add.w	r3, r7, #12
 8002328:	f107 0210 	add.w	r2, r7, #16
 800232c:	f107 0114 	add.w	r1, r7, #20
 8002330:	f107 0018 	add.w	r0, r7, #24
 8002334:	2404      	movs	r4, #4
 8002336:	9400      	str	r4, [sp, #0]
 8002338:	f004 fc3c 	bl	8006bb4 <fmatrixAeqInvA>

	// calculate vecA = solution beta (4x1) = inv(X^T.X).X^T.Y = matB * vecB
	for (i = 0; i < 4; i++) {
 800233c:	2300      	movs	r3, #0
 800233e:	643b      	str	r3, [r7, #64]	@ 0x40
 8002340:	e03a      	b.n	80023b8 <fUpdateCalibration4INV+0x4ac>
		MagCal->vecA[i] = 0.0F;
 8002342:	687a      	ldr	r2, [r7, #4]
 8002344:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002346:	33f8      	adds	r3, #248	@ 0xf8
 8002348:	009b      	lsls	r3, r3, #2
 800234a:	4413      	add	r3, r2
 800234c:	f04f 0200 	mov.w	r2, #0
 8002350:	601a      	str	r2, [r3, #0]
		for (k = 0; k < 4; k++) {
 8002352:	2300      	movs	r3, #0
 8002354:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002356:	e029      	b.n	80023ac <fUpdateCalibration4INV+0x4a0>
			MagCal->vecA[i] += MagCal->matB[i][k] * MagCal->vecB[k];
 8002358:	687a      	ldr	r2, [r7, #4]
 800235a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800235c:	33f8      	adds	r3, #248	@ 0xf8
 800235e:	009b      	lsls	r3, r3, #2
 8002360:	4413      	add	r3, r2
 8002362:	ed93 7a00 	vldr	s14, [r3]
 8002366:	6879      	ldr	r1, [r7, #4]
 8002368:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800236a:	4613      	mov	r3, r2
 800236c:	009b      	lsls	r3, r3, #2
 800236e:	4413      	add	r3, r2
 8002370:	005b      	lsls	r3, r3, #1
 8002372:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002374:	4413      	add	r3, r2
 8002376:	3394      	adds	r3, #148	@ 0x94
 8002378:	009b      	lsls	r3, r3, #2
 800237a:	440b      	add	r3, r1
 800237c:	edd3 6a00 	vldr	s13, [r3]
 8002380:	687a      	ldr	r2, [r7, #4]
 8002382:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002384:	f503 7381 	add.w	r3, r3, #258	@ 0x102
 8002388:	009b      	lsls	r3, r3, #2
 800238a:	4413      	add	r3, r2
 800238c:	edd3 7a00 	vldr	s15, [r3]
 8002390:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002394:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002398:	687a      	ldr	r2, [r7, #4]
 800239a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800239c:	33f8      	adds	r3, #248	@ 0xf8
 800239e:	009b      	lsls	r3, r3, #2
 80023a0:	4413      	add	r3, r2
 80023a2:	edc3 7a00 	vstr	s15, [r3]
		for (k = 0; k < 4; k++) {
 80023a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80023a8:	3301      	adds	r3, #1
 80023aa:	63bb      	str	r3, [r7, #56]	@ 0x38
 80023ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80023ae:	2b03      	cmp	r3, #3
 80023b0:	ddd2      	ble.n	8002358 <fUpdateCalibration4INV+0x44c>
	for (i = 0; i < 4; i++) {
 80023b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80023b4:	3301      	adds	r3, #1
 80023b6:	643b      	str	r3, [r7, #64]	@ 0x40
 80023b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80023ba:	2b03      	cmp	r3, #3
 80023bc:	ddc1      	ble.n	8002342 <fUpdateCalibration4INV+0x436>
	}

	// calculate P = r^T.r = Y^T.Y - 2 * beta^T.(X^T.Y) + beta^T.(X^T.X).beta
	// = fSumBp4 - 2 * vecA^T.vecB + vecA^T.matA.vecA
	// first set P = Y^T.Y - 2 * beta^T.(X^T.Y) = SumBp4 - 2 * vecA^T.vecB
	fE = 0.0F;
 80023be:	f04f 0300 	mov.w	r3, #0
 80023c2:	64bb      	str	r3, [r7, #72]	@ 0x48
	for (i = 0; i < 4; i++) {
 80023c4:	2300      	movs	r3, #0
 80023c6:	643b      	str	r3, [r7, #64]	@ 0x40
 80023c8:	e019      	b.n	80023fe <fUpdateCalibration4INV+0x4f2>
		fE += MagCal->vecA[i] * MagCal->vecB[i];
 80023ca:	687a      	ldr	r2, [r7, #4]
 80023cc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80023ce:	33f8      	adds	r3, #248	@ 0xf8
 80023d0:	009b      	lsls	r3, r3, #2
 80023d2:	4413      	add	r3, r2
 80023d4:	ed93 7a00 	vldr	s14, [r3]
 80023d8:	687a      	ldr	r2, [r7, #4]
 80023da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80023dc:	f503 7381 	add.w	r3, r3, #258	@ 0x102
 80023e0:	009b      	lsls	r3, r3, #2
 80023e2:	4413      	add	r3, r2
 80023e4:	edd3 7a00 	vldr	s15, [r3]
 80023e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023ec:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 80023f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023f4:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
	for (i = 0; i < 4; i++) {
 80023f8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80023fa:	3301      	adds	r3, #1
 80023fc:	643b      	str	r3, [r7, #64]	@ 0x40
 80023fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002400:	2b03      	cmp	r3, #3
 8002402:	dde2      	ble.n	80023ca <fUpdateCalibration4INV+0x4be>
	}
	fE = fSumBp4 - 2.0F * fE;
 8002404:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8002408:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800240c:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8002410:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002414:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48

	// set vecB = (X^T.X).beta = matA.vecA
	for (i = 0; i < 4; i++) {
 8002418:	2300      	movs	r3, #0
 800241a:	643b      	str	r3, [r7, #64]	@ 0x40
 800241c:	e03c      	b.n	8002498 <fUpdateCalibration4INV+0x58c>
		MagCal->vecB[i] = 0.0F;
 800241e:	687a      	ldr	r2, [r7, #4]
 8002420:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002422:	f503 7381 	add.w	r3, r3, #258	@ 0x102
 8002426:	009b      	lsls	r3, r3, #2
 8002428:	4413      	add	r3, r2
 800242a:	f04f 0200 	mov.w	r2, #0
 800242e:	601a      	str	r2, [r3, #0]
		for (k = 0; k < 4; k++) {
 8002430:	2300      	movs	r3, #0
 8002432:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002434:	e02a      	b.n	800248c <fUpdateCalibration4INV+0x580>
			MagCal->vecB[i] += MagCal->matA[i][k] * MagCal->vecA[k];
 8002436:	687a      	ldr	r2, [r7, #4]
 8002438:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800243a:	f503 7381 	add.w	r3, r3, #258	@ 0x102
 800243e:	009b      	lsls	r3, r3, #2
 8002440:	4413      	add	r3, r2
 8002442:	ed93 7a00 	vldr	s14, [r3]
 8002446:	6879      	ldr	r1, [r7, #4]
 8002448:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800244a:	4613      	mov	r3, r2
 800244c:	009b      	lsls	r3, r3, #2
 800244e:	4413      	add	r3, r2
 8002450:	005b      	lsls	r3, r3, #1
 8002452:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002454:	4413      	add	r3, r2
 8002456:	3330      	adds	r3, #48	@ 0x30
 8002458:	009b      	lsls	r3, r3, #2
 800245a:	440b      	add	r3, r1
 800245c:	edd3 6a00 	vldr	s13, [r3]
 8002460:	687a      	ldr	r2, [r7, #4]
 8002462:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002464:	33f8      	adds	r3, #248	@ 0xf8
 8002466:	009b      	lsls	r3, r3, #2
 8002468:	4413      	add	r3, r2
 800246a:	edd3 7a00 	vldr	s15, [r3]
 800246e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002472:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002476:	687a      	ldr	r2, [r7, #4]
 8002478:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800247a:	f503 7381 	add.w	r3, r3, #258	@ 0x102
 800247e:	009b      	lsls	r3, r3, #2
 8002480:	4413      	add	r3, r2
 8002482:	edc3 7a00 	vstr	s15, [r3]
		for (k = 0; k < 4; k++) {
 8002486:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002488:	3301      	adds	r3, #1
 800248a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800248c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800248e:	2b03      	cmp	r3, #3
 8002490:	ddd1      	ble.n	8002436 <fUpdateCalibration4INV+0x52a>
	for (i = 0; i < 4; i++) {
 8002492:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002494:	3301      	adds	r3, #1
 8002496:	643b      	str	r3, [r7, #64]	@ 0x40
 8002498:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800249a:	2b03      	cmp	r3, #3
 800249c:	ddbf      	ble.n	800241e <fUpdateCalibration4INV+0x512>
		}
	}

	// complete calculation of P by adding beta^T.(X^T.X).beta = vecA^T * vecB
	for (i = 0; i < 4; i++) {
 800249e:	2300      	movs	r3, #0
 80024a0:	643b      	str	r3, [r7, #64]	@ 0x40
 80024a2:	e019      	b.n	80024d8 <fUpdateCalibration4INV+0x5cc>
		fE += MagCal->vecB[i] * MagCal->vecA[i];
 80024a4:	687a      	ldr	r2, [r7, #4]
 80024a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80024a8:	f503 7381 	add.w	r3, r3, #258	@ 0x102
 80024ac:	009b      	lsls	r3, r3, #2
 80024ae:	4413      	add	r3, r2
 80024b0:	ed93 7a00 	vldr	s14, [r3]
 80024b4:	687a      	ldr	r2, [r7, #4]
 80024b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80024b8:	33f8      	adds	r3, #248	@ 0xf8
 80024ba:	009b      	lsls	r3, r3, #2
 80024bc:	4413      	add	r3, r2
 80024be:	edd3 7a00 	vldr	s15, [r3]
 80024c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024c6:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 80024ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024ce:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
	for (i = 0; i < 4; i++) {
 80024d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80024d4:	3301      	adds	r3, #1
 80024d6:	643b      	str	r3, [r7, #64]	@ 0x40
 80024d8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80024da:	2b03      	cmp	r3, #3
 80024dc:	dde2      	ble.n	80024a4 <fUpdateCalibration4INV+0x598>
	}

	// compute the hard iron vector (in uT but offset and scaled by FMATRIXSCALING)
	for (k = X; k <= Z; k++) {
 80024de:	2300      	movs	r3, #0
 80024e0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80024e2:	e014      	b.n	800250e <fUpdateCalibration4INV+0x602>
		MagCal->trV[k] = 0.5F * MagCal->vecA[k];
 80024e4:	687a      	ldr	r2, [r7, #4]
 80024e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80024e8:	33f8      	adds	r3, #248	@ 0xf8
 80024ea:	009b      	lsls	r3, r3, #2
 80024ec:	4413      	add	r3, r2
 80024ee:	edd3 7a00 	vldr	s15, [r3]
 80024f2:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80024f6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80024fa:	687a      	ldr	r2, [r7, #4]
 80024fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80024fe:	3310      	adds	r3, #16
 8002500:	009b      	lsls	r3, r3, #2
 8002502:	4413      	add	r3, r2
 8002504:	edc3 7a00 	vstr	s15, [r3]
	for (k = X; k <= Z; k++) {
 8002508:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800250a:	3301      	adds	r3, #1
 800250c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800250e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002510:	2b02      	cmp	r3, #2
 8002512:	dde7      	ble.n	80024e4 <fUpdateCalibration4INV+0x5d8>
	}

	// compute the scaled geomagnetic field strength B (in uT but scaled by FMATRIXSCALING)
	MagCal->trB = sqrtf(
			MagCal->vecA[3] + MagCal->trV[X] * MagCal->trV[X]
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	ed93 7afb 	vldr	s14, [r3, #1004]	@ 0x3ec
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	edd3 6a10 	vldr	s13, [r3, #64]	@ 0x40
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8002526:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800252a:	ee37 7a27 	vadd.f32	s14, s14, s15
					+ MagCal->trV[Y] * MagCal->trV[Y]
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	edd3 6a11 	vldr	s13, [r3, #68]	@ 0x44
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 800253a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800253e:	ee37 7a27 	vadd.f32	s14, s14, s15
					+ MagCal->trV[Z] * MagCal->trV[Z]);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	edd3 6a12 	vldr	s13, [r3, #72]	@ 0x48
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 800254e:	ee66 7aa7 	vmul.f32	s15, s13, s15
	MagCal->trB = sqrtf(
 8002552:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002556:	eeb0 0a67 	vmov.f32	s0, s15
 800255a:	f00f f913 	bl	8011784 <sqrtf>
 800255e:	eef0 7a40 	vmov.f32	s15, s0
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	edc3 7a1c 	vstr	s15, [r3, #112]	@ 0x70

	// calculate the trial fit error (percent) normalized to number of measurements
	// and scaled geomagnetic field strength
	MagCal->trFitErrorpc = sqrtf(fE / (float) MagCal->MagBufferCount) * 100.0F
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	f9b3 3f0a 	ldrsh.w	r3, [r3, #3850]	@ 0xf0a
 800256e:	ee07 3a90 	vmov	s15, r3
 8002572:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002576:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 800257a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800257e:	eeb0 0a66 	vmov.f32	s0, s13
 8002582:	f00f f8ff 	bl	8011784 <sqrtf>
 8002586:	eef0 7a40 	vmov.f32	s15, s0
 800258a:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8002624 <fUpdateCalibration4INV+0x718>
 800258e:	ee67 6a87 	vmul.f32	s13, s15, s14
			/ (2.0F * MagCal->trB * MagCal->trB);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	edd3 7a1c 	vldr	s15, [r3, #112]	@ 0x70
 8002598:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	edd3 7a1c 	vldr	s15, [r3, #112]	@ 0x70
 80025a2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80025a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
	MagCal->trFitErrorpc = sqrtf(fE / (float) MagCal->MagBufferCount) * 100.0F
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	edc3 7a1d 	vstr	s15, [r3, #116]	@ 0x74

	// correct the hard iron estimate for FMATRIXSCALING and the offsets applied (result in uT)
	for (k = X; k <= Z; k++) {
 80025b0:	2300      	movs	r3, #0
 80025b2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80025b4:	e024      	b.n	8002600 <fUpdateCalibration4INV+0x6f4>
		MagCal->trV[k] = MagCal->trV[k] * DEFAULTB
 80025b6:	687a      	ldr	r2, [r7, #4]
 80025b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025ba:	3310      	adds	r3, #16
 80025bc:	009b      	lsls	r3, r3, #2
 80025be:	4413      	add	r3, r2
 80025c0:	edd3 7a00 	vldr	s15, [r3]
 80025c4:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8002628 <fUpdateCalibration4INV+0x71c>
 80025c8:	ee27 7a87 	vmul.f32	s14, s15, s14
				+ (float) iOffset[k] * FXOS8700_UTPERCOUNT;
 80025cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025ce:	005b      	lsls	r3, r3, #1
 80025d0:	3350      	adds	r3, #80	@ 0x50
 80025d2:	443b      	add	r3, r7
 80025d4:	f933 3c28 	ldrsh.w	r3, [r3, #-40]
 80025d8:	ee07 3a90 	vmov	s15, r3
 80025dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80025e0:	eddf 6a12 	vldr	s13, [pc, #72]	@ 800262c <fUpdateCalibration4INV+0x720>
 80025e4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80025e8:	ee77 7a27 	vadd.f32	s15, s14, s15
		MagCal->trV[k] = MagCal->trV[k] * DEFAULTB
 80025ec:	687a      	ldr	r2, [r7, #4]
 80025ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025f0:	3310      	adds	r3, #16
 80025f2:	009b      	lsls	r3, r3, #2
 80025f4:	4413      	add	r3, r2
 80025f6:	edc3 7a00 	vstr	s15, [r3]
	for (k = X; k <= Z; k++) {
 80025fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025fc:	3301      	adds	r3, #1
 80025fe:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002600:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002602:	2b02      	cmp	r3, #2
 8002604:	ddd7      	ble.n	80025b6 <fUpdateCalibration4INV+0x6aa>
	}

	// correct the geomagnetic field strength B to correct scaling (result in uT)
	MagCal->trB *= DEFAULTB;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	edd3 7a1c 	vldr	s15, [r3, #112]	@ 0x70
 800260c:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 8002628 <fUpdateCalibration4INV+0x71c>
 8002610:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	edc3 7a1c 	vstr	s15, [r3, #112]	@ 0x70

}
 800261a:	bf00      	nop
 800261c:	3754      	adds	r7, #84	@ 0x54
 800261e:	46bd      	mov	sp, r7
 8002620:	bd90      	pop	{r4, r7, pc}
 8002622:	bf00      	nop
 8002624:	42c80000 	.word	0x42c80000
 8002628:	42480000 	.word	0x42480000
 800262c:	3dcccccd 	.word	0x3dcccccd

08002630 <fUpdateCalibration7EIG>:

static void fUpdateCalibration7EIG(MagCalibration_t *MagCal) {
 8002630:	b5b0      	push	{r4, r5, r7, lr}
 8002632:	ed2d 8b02 	vpush	{d8}
 8002636:	b08e      	sub	sp, #56	@ 0x38
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
	float ftmp;					// scratch variable
	int16_t iOffset[3];			// offset to remove large DC hard iron bias
	int16_t iCount;				// number of measurements counted
	int i, j, k, m, n;			// loop counters

	magcal_type = 2;
 800263c:	4baf      	ldr	r3, [pc, #700]	@ (80028fc <fUpdateCalibration7EIG+0x2cc>)
 800263e:	2202      	movs	r2, #2
 8002640:	601a      	str	r2, [r3, #0]

	// compute fscaling to reduce multiplications later
	fscaling = FXOS8700_UTPERCOUNT / DEFAULTB;
 8002642:	4baf      	ldr	r3, [pc, #700]	@ (8002900 <fUpdateCalibration7EIG+0x2d0>)
 8002644:	617b      	str	r3, [r7, #20]

	// the offsets are guaranteed to be set from the first element but to avoid compiler error
	iOffset[X] = iOffset[Y] = iOffset[Z] = 0;
 8002646:	2300      	movs	r3, #0
 8002648:	823b      	strh	r3, [r7, #16]
 800264a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800264e:	81fb      	strh	r3, [r7, #14]
 8002650:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002654:	81bb      	strh	r3, [r7, #12]

	// zero the on and above diagonal elements of the 7x7 symmetric measurement matrix matA
	for (m = 0; m < 7; m++) {
 8002656:	2300      	movs	r3, #0
 8002658:	61fb      	str	r3, [r7, #28]
 800265a:	e019      	b.n	8002690 <fUpdateCalibration7EIG+0x60>
		for (n = m; n < 7; n++) {
 800265c:	69fb      	ldr	r3, [r7, #28]
 800265e:	61bb      	str	r3, [r7, #24]
 8002660:	e010      	b.n	8002684 <fUpdateCalibration7EIG+0x54>
			MagCal->matA[m][n] = 0.0F;
 8002662:	6879      	ldr	r1, [r7, #4]
 8002664:	69fa      	ldr	r2, [r7, #28]
 8002666:	4613      	mov	r3, r2
 8002668:	009b      	lsls	r3, r3, #2
 800266a:	4413      	add	r3, r2
 800266c:	005b      	lsls	r3, r3, #1
 800266e:	69ba      	ldr	r2, [r7, #24]
 8002670:	4413      	add	r3, r2
 8002672:	3330      	adds	r3, #48	@ 0x30
 8002674:	009b      	lsls	r3, r3, #2
 8002676:	440b      	add	r3, r1
 8002678:	f04f 0200 	mov.w	r2, #0
 800267c:	601a      	str	r2, [r3, #0]
		for (n = m; n < 7; n++) {
 800267e:	69bb      	ldr	r3, [r7, #24]
 8002680:	3301      	adds	r3, #1
 8002682:	61bb      	str	r3, [r7, #24]
 8002684:	69bb      	ldr	r3, [r7, #24]
 8002686:	2b06      	cmp	r3, #6
 8002688:	ddeb      	ble.n	8002662 <fUpdateCalibration7EIG+0x32>
	for (m = 0; m < 7; m++) {
 800268a:	69fb      	ldr	r3, [r7, #28]
 800268c:	3301      	adds	r3, #1
 800268e:	61fb      	str	r3, [r7, #28]
 8002690:	69fb      	ldr	r3, [r7, #28]
 8002692:	2b06      	cmp	r3, #6
 8002694:	dde2      	ble.n	800265c <fUpdateCalibration7EIG+0x2c>
		}
	}

	// place from MINEQUATIONS to MAXEQUATIONS entries into product matrix matA
	iCount = 0;
 8002696:	2300      	movs	r3, #0
 8002698:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	for (j = 0; j < MAGBUFFSIZE; j++) {
 800269a:	2300      	movs	r3, #0
 800269c:	627b      	str	r3, [r7, #36]	@ 0x24
 800269e:	e0df      	b.n	8002860 <fUpdateCalibration7EIG+0x230>
		if (MagCal->valid[j]) {
 80026a0:	687a      	ldr	r2, [r7, #4]
 80026a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026a4:	4413      	add	r3, r2
 80026a6:	f603 537a 	addw	r3, r3, #3450	@ 0xd7a
 80026aa:	f993 3000 	ldrsb.w	r3, [r3]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	f000 80d3 	beq.w	800285a <fUpdateCalibration7EIG+0x22a>
			// use first valid magnetic buffer entry as offset estimate (bit counts)
			if (iCount == 0) {
 80026b4:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d11c      	bne.n	80026f6 <fUpdateCalibration7EIG+0xc6>
				for (k = X; k <= Z; k++) {
 80026bc:	2300      	movs	r3, #0
 80026be:	623b      	str	r3, [r7, #32]
 80026c0:	e016      	b.n	80026f0 <fUpdateCalibration7EIG+0xc0>
					iOffset[k] = MagCal->BpFast[k][j];
 80026c2:	687a      	ldr	r2, [r7, #4]
 80026c4:	6a3b      	ldr	r3, [r7, #32]
 80026c6:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 80026ca:	fb03 f101 	mul.w	r1, r3, r1
 80026ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026d0:	440b      	add	r3, r1
 80026d2:	f503 7303 	add.w	r3, r3, #524	@ 0x20c
 80026d6:	005b      	lsls	r3, r3, #1
 80026d8:	4413      	add	r3, r2
 80026da:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80026de:	6a3b      	ldr	r3, [r7, #32]
 80026e0:	005b      	lsls	r3, r3, #1
 80026e2:	3338      	adds	r3, #56	@ 0x38
 80026e4:	443b      	add	r3, r7
 80026e6:	f823 2c2c 	strh.w	r2, [r3, #-44]
				for (k = X; k <= Z; k++) {
 80026ea:	6a3b      	ldr	r3, [r7, #32]
 80026ec:	3301      	adds	r3, #1
 80026ee:	623b      	str	r3, [r7, #32]
 80026f0:	6a3b      	ldr	r3, [r7, #32]
 80026f2:	2b02      	cmp	r3, #2
 80026f4:	dde5      	ble.n	80026c2 <fUpdateCalibration7EIG+0x92>
				}
			}

			// apply the offset and scaling and store in vecA
			for (k = X; k <= Z; k++) {
 80026f6:	2300      	movs	r3, #0
 80026f8:	623b      	str	r3, [r7, #32]
 80026fa:	e041      	b.n	8002780 <fUpdateCalibration7EIG+0x150>
				MagCal->vecA[k + 3] = (float) ((int32_t) MagCal->BpFast[k][j]
 80026fc:	687a      	ldr	r2, [r7, #4]
 80026fe:	6a3b      	ldr	r3, [r7, #32]
 8002700:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8002704:	fb03 f101 	mul.w	r1, r3, r1
 8002708:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800270a:	440b      	add	r3, r1
 800270c:	f503 7303 	add.w	r3, r3, #524	@ 0x20c
 8002710:	005b      	lsls	r3, r3, #1
 8002712:	4413      	add	r3, r2
 8002714:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002718:	461a      	mov	r2, r3
						- (int32_t) iOffset[k]) * fscaling;
 800271a:	6a3b      	ldr	r3, [r7, #32]
 800271c:	005b      	lsls	r3, r3, #1
 800271e:	3338      	adds	r3, #56	@ 0x38
 8002720:	443b      	add	r3, r7
 8002722:	f933 3c2c 	ldrsh.w	r3, [r3, #-44]
 8002726:	1ad3      	subs	r3, r2, r3
				MagCal->vecA[k + 3] = (float) ((int32_t) MagCal->BpFast[k][j]
 8002728:	ee07 3a90 	vmov	s15, r3
 800272c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002730:	6a3b      	ldr	r3, [r7, #32]
 8002732:	3303      	adds	r3, #3
						- (int32_t) iOffset[k]) * fscaling;
 8002734:	edd7 7a05 	vldr	s15, [r7, #20]
 8002738:	ee67 7a27 	vmul.f32	s15, s14, s15
				MagCal->vecA[k + 3] = (float) ((int32_t) MagCal->BpFast[k][j]
 800273c:	687a      	ldr	r2, [r7, #4]
 800273e:	33f8      	adds	r3, #248	@ 0xf8
 8002740:	009b      	lsls	r3, r3, #2
 8002742:	4413      	add	r3, r2
 8002744:	edc3 7a00 	vstr	s15, [r3]
				MagCal->vecA[k] = MagCal->vecA[k + 3] * MagCal->vecA[k + 3];
 8002748:	6a3b      	ldr	r3, [r7, #32]
 800274a:	3303      	adds	r3, #3
 800274c:	687a      	ldr	r2, [r7, #4]
 800274e:	33f8      	adds	r3, #248	@ 0xf8
 8002750:	009b      	lsls	r3, r3, #2
 8002752:	4413      	add	r3, r2
 8002754:	ed93 7a00 	vldr	s14, [r3]
 8002758:	6a3b      	ldr	r3, [r7, #32]
 800275a:	3303      	adds	r3, #3
 800275c:	687a      	ldr	r2, [r7, #4]
 800275e:	33f8      	adds	r3, #248	@ 0xf8
 8002760:	009b      	lsls	r3, r3, #2
 8002762:	4413      	add	r3, r2
 8002764:	edd3 7a00 	vldr	s15, [r3]
 8002768:	ee67 7a27 	vmul.f32	s15, s14, s15
 800276c:	687a      	ldr	r2, [r7, #4]
 800276e:	6a3b      	ldr	r3, [r7, #32]
 8002770:	33f8      	adds	r3, #248	@ 0xf8
 8002772:	009b      	lsls	r3, r3, #2
 8002774:	4413      	add	r3, r2
 8002776:	edc3 7a00 	vstr	s15, [r3]
			for (k = X; k <= Z; k++) {
 800277a:	6a3b      	ldr	r3, [r7, #32]
 800277c:	3301      	adds	r3, #1
 800277e:	623b      	str	r3, [r7, #32]
 8002780:	6a3b      	ldr	r3, [r7, #32]
 8002782:	2b02      	cmp	r3, #2
 8002784:	ddba      	ble.n	80026fc <fUpdateCalibration7EIG+0xcc>
			// accumulate the on-and above-diagonal terms of
			// MagCal->matA=Sigma{vecA^T * vecA}
			// with the exception of matA[6][6] which will sum to the number
			// of measurements and remembering that vecA[6] equals 1.0F
			// update the right hand column [6] of matA except for matA[6][6]
			for (m = 0; m < 6; m++) {
 8002786:	2300      	movs	r3, #0
 8002788:	61fb      	str	r3, [r7, #28]
 800278a:	e01f      	b.n	80027cc <fUpdateCalibration7EIG+0x19c>
				MagCal->matA[m][6] += MagCal->vecA[m];
 800278c:	6879      	ldr	r1, [r7, #4]
 800278e:	69fa      	ldr	r2, [r7, #28]
 8002790:	4613      	mov	r3, r2
 8002792:	009b      	lsls	r3, r3, #2
 8002794:	4413      	add	r3, r2
 8002796:	00db      	lsls	r3, r3, #3
 8002798:	440b      	add	r3, r1
 800279a:	33d8      	adds	r3, #216	@ 0xd8
 800279c:	ed93 7a00 	vldr	s14, [r3]
 80027a0:	687a      	ldr	r2, [r7, #4]
 80027a2:	69fb      	ldr	r3, [r7, #28]
 80027a4:	33f8      	adds	r3, #248	@ 0xf8
 80027a6:	009b      	lsls	r3, r3, #2
 80027a8:	4413      	add	r3, r2
 80027aa:	edd3 7a00 	vldr	s15, [r3]
 80027ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027b2:	6879      	ldr	r1, [r7, #4]
 80027b4:	69fa      	ldr	r2, [r7, #28]
 80027b6:	4613      	mov	r3, r2
 80027b8:	009b      	lsls	r3, r3, #2
 80027ba:	4413      	add	r3, r2
 80027bc:	00db      	lsls	r3, r3, #3
 80027be:	440b      	add	r3, r1
 80027c0:	33d8      	adds	r3, #216	@ 0xd8
 80027c2:	edc3 7a00 	vstr	s15, [r3]
			for (m = 0; m < 6; m++) {
 80027c6:	69fb      	ldr	r3, [r7, #28]
 80027c8:	3301      	adds	r3, #1
 80027ca:	61fb      	str	r3, [r7, #28]
 80027cc:	69fb      	ldr	r3, [r7, #28]
 80027ce:	2b05      	cmp	r3, #5
 80027d0:	dddc      	ble.n	800278c <fUpdateCalibration7EIG+0x15c>
			}
			// update the on and above diagonal terms except for right hand column 6
			for (m = 0; m < 6; m++) {
 80027d2:	2300      	movs	r3, #0
 80027d4:	61fb      	str	r3, [r7, #28]
 80027d6:	e037      	b.n	8002848 <fUpdateCalibration7EIG+0x218>
				for (n = m; n < 6; n++) {
 80027d8:	69fb      	ldr	r3, [r7, #28]
 80027da:	61bb      	str	r3, [r7, #24]
 80027dc:	e02e      	b.n	800283c <fUpdateCalibration7EIG+0x20c>
					MagCal->matA[m][n] += MagCal->vecA[m] * MagCal->vecA[n];
 80027de:	6879      	ldr	r1, [r7, #4]
 80027e0:	69fa      	ldr	r2, [r7, #28]
 80027e2:	4613      	mov	r3, r2
 80027e4:	009b      	lsls	r3, r3, #2
 80027e6:	4413      	add	r3, r2
 80027e8:	005b      	lsls	r3, r3, #1
 80027ea:	69ba      	ldr	r2, [r7, #24]
 80027ec:	4413      	add	r3, r2
 80027ee:	3330      	adds	r3, #48	@ 0x30
 80027f0:	009b      	lsls	r3, r3, #2
 80027f2:	440b      	add	r3, r1
 80027f4:	ed93 7a00 	vldr	s14, [r3]
 80027f8:	687a      	ldr	r2, [r7, #4]
 80027fa:	69fb      	ldr	r3, [r7, #28]
 80027fc:	33f8      	adds	r3, #248	@ 0xf8
 80027fe:	009b      	lsls	r3, r3, #2
 8002800:	4413      	add	r3, r2
 8002802:	edd3 6a00 	vldr	s13, [r3]
 8002806:	687a      	ldr	r2, [r7, #4]
 8002808:	69bb      	ldr	r3, [r7, #24]
 800280a:	33f8      	adds	r3, #248	@ 0xf8
 800280c:	009b      	lsls	r3, r3, #2
 800280e:	4413      	add	r3, r2
 8002810:	edd3 7a00 	vldr	s15, [r3]
 8002814:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002818:	ee77 7a27 	vadd.f32	s15, s14, s15
 800281c:	6879      	ldr	r1, [r7, #4]
 800281e:	69fa      	ldr	r2, [r7, #28]
 8002820:	4613      	mov	r3, r2
 8002822:	009b      	lsls	r3, r3, #2
 8002824:	4413      	add	r3, r2
 8002826:	005b      	lsls	r3, r3, #1
 8002828:	69ba      	ldr	r2, [r7, #24]
 800282a:	4413      	add	r3, r2
 800282c:	3330      	adds	r3, #48	@ 0x30
 800282e:	009b      	lsls	r3, r3, #2
 8002830:	440b      	add	r3, r1
 8002832:	edc3 7a00 	vstr	s15, [r3]
				for (n = m; n < 6; n++) {
 8002836:	69bb      	ldr	r3, [r7, #24]
 8002838:	3301      	adds	r3, #1
 800283a:	61bb      	str	r3, [r7, #24]
 800283c:	69bb      	ldr	r3, [r7, #24]
 800283e:	2b05      	cmp	r3, #5
 8002840:	ddcd      	ble.n	80027de <fUpdateCalibration7EIG+0x1ae>
			for (m = 0; m < 6; m++) {
 8002842:	69fb      	ldr	r3, [r7, #28]
 8002844:	3301      	adds	r3, #1
 8002846:	61fb      	str	r3, [r7, #28]
 8002848:	69fb      	ldr	r3, [r7, #28]
 800284a:	2b05      	cmp	r3, #5
 800284c:	ddc4      	ble.n	80027d8 <fUpdateCalibration7EIG+0x1a8>
				}
			}

			// increment the measurement counter for the next iteration
			iCount++;
 800284e:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 8002852:	b29b      	uxth	r3, r3
 8002854:	3301      	adds	r3, #1
 8002856:	b29b      	uxth	r3, r3
 8002858:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	for (j = 0; j < MAGBUFFSIZE; j++) {
 800285a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800285c:	3301      	adds	r3, #1
 800285e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002860:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002862:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8002866:	f6ff af1b 	blt.w	80026a0 <fUpdateCalibration7EIG+0x70>
		}
	}

	// finally set the last element matA[6][6] to the number of measurements
	MagCal->matA[6][6] = (float) iCount;
 800286a:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 800286e:	ee07 3a90 	vmov	s15, r3
 8002872:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	edc3 7a72 	vstr	s15, [r3, #456]	@ 0x1c8

	// store the number of measurements accumulated
	MagCal->MagBufferCount = iCount;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8002880:	f8a3 2f0a 	strh.w	r2, [r3, #3850]	@ 0xf0a

	// copy the above diagonal elements of matA to below the diagonal
	for (m = 1; m < 7; m++) {
 8002884:	2301      	movs	r3, #1
 8002886:	61fb      	str	r3, [r7, #28]
 8002888:	e024      	b.n	80028d4 <fUpdateCalibration7EIG+0x2a4>
		for (n = 0; n < m; n++) {
 800288a:	2300      	movs	r3, #0
 800288c:	61bb      	str	r3, [r7, #24]
 800288e:	e01a      	b.n	80028c6 <fUpdateCalibration7EIG+0x296>
			MagCal->matA[m][n] = MagCal->matA[n][m];
 8002890:	6879      	ldr	r1, [r7, #4]
 8002892:	69ba      	ldr	r2, [r7, #24]
 8002894:	4613      	mov	r3, r2
 8002896:	009b      	lsls	r3, r3, #2
 8002898:	4413      	add	r3, r2
 800289a:	005b      	lsls	r3, r3, #1
 800289c:	69fa      	ldr	r2, [r7, #28]
 800289e:	4413      	add	r3, r2
 80028a0:	3330      	adds	r3, #48	@ 0x30
 80028a2:	009b      	lsls	r3, r3, #2
 80028a4:	440b      	add	r3, r1
 80028a6:	6819      	ldr	r1, [r3, #0]
 80028a8:	6878      	ldr	r0, [r7, #4]
 80028aa:	69fa      	ldr	r2, [r7, #28]
 80028ac:	4613      	mov	r3, r2
 80028ae:	009b      	lsls	r3, r3, #2
 80028b0:	4413      	add	r3, r2
 80028b2:	005b      	lsls	r3, r3, #1
 80028b4:	69ba      	ldr	r2, [r7, #24]
 80028b6:	4413      	add	r3, r2
 80028b8:	3330      	adds	r3, #48	@ 0x30
 80028ba:	009b      	lsls	r3, r3, #2
 80028bc:	4403      	add	r3, r0
 80028be:	6019      	str	r1, [r3, #0]
		for (n = 0; n < m; n++) {
 80028c0:	69bb      	ldr	r3, [r7, #24]
 80028c2:	3301      	adds	r3, #1
 80028c4:	61bb      	str	r3, [r7, #24]
 80028c6:	69ba      	ldr	r2, [r7, #24]
 80028c8:	69fb      	ldr	r3, [r7, #28]
 80028ca:	429a      	cmp	r2, r3
 80028cc:	dbe0      	blt.n	8002890 <fUpdateCalibration7EIG+0x260>
	for (m = 1; m < 7; m++) {
 80028ce:	69fb      	ldr	r3, [r7, #28]
 80028d0:	3301      	adds	r3, #1
 80028d2:	61fb      	str	r3, [r7, #28]
 80028d4:	69fb      	ldr	r3, [r7, #28]
 80028d6:	2b06      	cmp	r3, #6
 80028d8:	ddd7      	ble.n	800288a <fUpdateCalibration7EIG+0x25a>
		}
	}

	// set tmpA7x1 to the unsorted eigenvalues and matB to the unsorted eigenvectors of matA
	eigencompute(MagCal->matA, MagCal->vecA, MagCal->matB, 7);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	f103 00c0 	add.w	r0, r3, #192	@ 0xc0
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	f503 7214 	add.w	r2, r3, #592	@ 0x250
 80028ec:	2307      	movs	r3, #7
 80028ee:	f003 fd5f 	bl	80063b0 <eigencompute>

	// find the smallest eigenvalue
	j = 0;
 80028f2:	2300      	movs	r3, #0
 80028f4:	627b      	str	r3, [r7, #36]	@ 0x24
	for (i = 1; i < 7; i++) {
 80028f6:	2301      	movs	r3, #1
 80028f8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80028fa:	e025      	b.n	8002948 <fUpdateCalibration7EIG+0x318>
 80028fc:	200001f4 	.word	0x200001f4
 8002900:	3b03126f 	.word	0x3b03126f
 8002904:	00000000 	.word	0x00000000
 8002908:	beaaaaab 	.word	0xbeaaaaab
 800290c:	be2aaaab 	.word	0xbe2aaaab
 8002910:	42480000 	.word	0x42480000
 8002914:	3dcccccd 	.word	0x3dcccccd
		if (MagCal->vecA[i] < MagCal->vecA[j]) {
 8002918:	687a      	ldr	r2, [r7, #4]
 800291a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800291c:	33f8      	adds	r3, #248	@ 0xf8
 800291e:	009b      	lsls	r3, r3, #2
 8002920:	4413      	add	r3, r2
 8002922:	ed93 7a00 	vldr	s14, [r3]
 8002926:	687a      	ldr	r2, [r7, #4]
 8002928:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800292a:	33f8      	adds	r3, #248	@ 0xf8
 800292c:	009b      	lsls	r3, r3, #2
 800292e:	4413      	add	r3, r2
 8002930:	edd3 7a00 	vldr	s15, [r3]
 8002934:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002938:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800293c:	d501      	bpl.n	8002942 <fUpdateCalibration7EIG+0x312>
			j = i;
 800293e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002940:	627b      	str	r3, [r7, #36]	@ 0x24
	for (i = 1; i < 7; i++) {
 8002942:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002944:	3301      	adds	r3, #1
 8002946:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002948:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800294a:	2b06      	cmp	r3, #6
 800294c:	dde4      	ble.n	8002918 <fUpdateCalibration7EIG+0x2e8>
		}
	}

	// set ellipsoid matrix A to the solution vector with smallest eigenvalue,
	// compute its determinant and the hard iron offset (scaled and offset)
	f3x3matrixAeqScalar(MagCal->A, 0.0F);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	3378      	adds	r3, #120	@ 0x78
 8002952:	ed1f 0a14 	vldr	s0, [pc, #-80]	@ 8002904 <fUpdateCalibration7EIG+0x2d4>
 8002956:	4618      	mov	r0, r3
 8002958:	f003 fb28 	bl	8005fac <f3x3matrixAeqScalar>
	det = 1.0F;
 800295c:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8002960:	637b      	str	r3, [r7, #52]	@ 0x34
	for (k = X; k <= Z; k++) {
 8002962:	2300      	movs	r3, #0
 8002964:	623b      	str	r3, [r7, #32]
 8002966:	e043      	b.n	80029f0 <fUpdateCalibration7EIG+0x3c0>
		MagCal->A[k][k] = MagCal->matB[k][j];
 8002968:	6879      	ldr	r1, [r7, #4]
 800296a:	6a3a      	ldr	r2, [r7, #32]
 800296c:	4613      	mov	r3, r2
 800296e:	009b      	lsls	r3, r3, #2
 8002970:	4413      	add	r3, r2
 8002972:	005b      	lsls	r3, r3, #1
 8002974:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002976:	4413      	add	r3, r2
 8002978:	3394      	adds	r3, #148	@ 0x94
 800297a:	009b      	lsls	r3, r3, #2
 800297c:	440b      	add	r3, r1
 800297e:	681a      	ldr	r2, [r3, #0]
 8002980:	6879      	ldr	r1, [r7, #4]
 8002982:	6a3b      	ldr	r3, [r7, #32]
 8002984:	011b      	lsls	r3, r3, #4
 8002986:	440b      	add	r3, r1
 8002988:	3378      	adds	r3, #120	@ 0x78
 800298a:	601a      	str	r2, [r3, #0]
		det *= MagCal->A[k][k];
 800298c:	687a      	ldr	r2, [r7, #4]
 800298e:	6a3b      	ldr	r3, [r7, #32]
 8002990:	011b      	lsls	r3, r3, #4
 8002992:	4413      	add	r3, r2
 8002994:	3378      	adds	r3, #120	@ 0x78
 8002996:	edd3 7a00 	vldr	s15, [r3]
 800299a:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 800299e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029a2:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
		MagCal->trV[k] = -0.5F * MagCal->matB[k + 3][j] / MagCal->A[k][k];
 80029a6:	6a3b      	ldr	r3, [r7, #32]
 80029a8:	1cda      	adds	r2, r3, #3
 80029aa:	6879      	ldr	r1, [r7, #4]
 80029ac:	4613      	mov	r3, r2
 80029ae:	009b      	lsls	r3, r3, #2
 80029b0:	4413      	add	r3, r2
 80029b2:	005b      	lsls	r3, r3, #1
 80029b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029b6:	4413      	add	r3, r2
 80029b8:	3394      	adds	r3, #148	@ 0x94
 80029ba:	009b      	lsls	r3, r3, #2
 80029bc:	440b      	add	r3, r1
 80029be:	edd3 7a00 	vldr	s15, [r3]
 80029c2:	eebe 7a00 	vmov.f32	s14, #224	@ 0xbf000000 -0.5
 80029c6:	ee67 6a87 	vmul.f32	s13, s15, s14
 80029ca:	687a      	ldr	r2, [r7, #4]
 80029cc:	6a3b      	ldr	r3, [r7, #32]
 80029ce:	011b      	lsls	r3, r3, #4
 80029d0:	4413      	add	r3, r2
 80029d2:	3378      	adds	r3, #120	@ 0x78
 80029d4:	ed93 7a00 	vldr	s14, [r3]
 80029d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80029dc:	687a      	ldr	r2, [r7, #4]
 80029de:	6a3b      	ldr	r3, [r7, #32]
 80029e0:	3310      	adds	r3, #16
 80029e2:	009b      	lsls	r3, r3, #2
 80029e4:	4413      	add	r3, r2
 80029e6:	edc3 7a00 	vstr	s15, [r3]
	for (k = X; k <= Z; k++) {
 80029ea:	6a3b      	ldr	r3, [r7, #32]
 80029ec:	3301      	adds	r3, #1
 80029ee:	623b      	str	r3, [r7, #32]
 80029f0:	6a3b      	ldr	r3, [r7, #32]
 80029f2:	2b02      	cmp	r3, #2
 80029f4:	ddb8      	ble.n	8002968 <fUpdateCalibration7EIG+0x338>
	}

	// negate A if it has negative determinant
	if (det < 0.0F) {
 80029f6:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80029fa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80029fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a02:	d51a      	bpl.n	8002a3a <fUpdateCalibration7EIG+0x40a>
		f3x3matrixAeqMinusA(MagCal->A);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	3378      	adds	r3, #120	@ 0x78
 8002a08:	4618      	mov	r0, r3
 8002a0a:	f003 fb41 	bl	8006090 <f3x3matrixAeqMinusA>
		MagCal->matB[6][j] = -MagCal->matB[6][j];
 8002a0e:	687a      	ldr	r2, [r7, #4]
 8002a10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a12:	33d0      	adds	r3, #208	@ 0xd0
 8002a14:	009b      	lsls	r3, r3, #2
 8002a16:	4413      	add	r3, r2
 8002a18:	edd3 7a00 	vldr	s15, [r3]
 8002a1c:	eef1 7a67 	vneg.f32	s15, s15
 8002a20:	687a      	ldr	r2, [r7, #4]
 8002a22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a24:	33d0      	adds	r3, #208	@ 0xd0
 8002a26:	009b      	lsls	r3, r3, #2
 8002a28:	4413      	add	r3, r2
 8002a2a:	edc3 7a00 	vstr	s15, [r3]
		det = -det;
 8002a2e:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8002a32:	eef1 7a67 	vneg.f32	s15, s15
 8002a36:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
	}

	// set ftmp to the square of the trial geomagnetic field strength B
	// (counts times FMATRIXSCALING)
	ftmp = -MagCal->matB[6][j];
 8002a3a:	687a      	ldr	r2, [r7, #4]
 8002a3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a3e:	33d0      	adds	r3, #208	@ 0xd0
 8002a40:	009b      	lsls	r3, r3, #2
 8002a42:	4413      	add	r3, r2
 8002a44:	edd3 7a00 	vldr	s15, [r3]
 8002a48:	eef1 7a67 	vneg.f32	s15, s15
 8002a4c:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
	for (k = X; k <= Z; k++) {
 8002a50:	2300      	movs	r3, #0
 8002a52:	623b      	str	r3, [r7, #32]
 8002a54:	e021      	b.n	8002a9a <fUpdateCalibration7EIG+0x46a>
		ftmp += MagCal->A[k][k] * MagCal->trV[k] * MagCal->trV[k];
 8002a56:	687a      	ldr	r2, [r7, #4]
 8002a58:	6a3b      	ldr	r3, [r7, #32]
 8002a5a:	011b      	lsls	r3, r3, #4
 8002a5c:	4413      	add	r3, r2
 8002a5e:	3378      	adds	r3, #120	@ 0x78
 8002a60:	ed93 7a00 	vldr	s14, [r3]
 8002a64:	687a      	ldr	r2, [r7, #4]
 8002a66:	6a3b      	ldr	r3, [r7, #32]
 8002a68:	3310      	adds	r3, #16
 8002a6a:	009b      	lsls	r3, r3, #2
 8002a6c:	4413      	add	r3, r2
 8002a6e:	edd3 7a00 	vldr	s15, [r3]
 8002a72:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a76:	687a      	ldr	r2, [r7, #4]
 8002a78:	6a3b      	ldr	r3, [r7, #32]
 8002a7a:	3310      	adds	r3, #16
 8002a7c:	009b      	lsls	r3, r3, #2
 8002a7e:	4413      	add	r3, r2
 8002a80:	edd3 7a00 	vldr	s15, [r3]
 8002a84:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a88:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8002a8c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a90:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
	for (k = X; k <= Z; k++) {
 8002a94:	6a3b      	ldr	r3, [r7, #32]
 8002a96:	3301      	adds	r3, #1
 8002a98:	623b      	str	r3, [r7, #32]
 8002a9a:	6a3b      	ldr	r3, [r7, #32]
 8002a9c:	2b02      	cmp	r3, #2
 8002a9e:	ddda      	ble.n	8002a56 <fUpdateCalibration7EIG+0x426>
	}

	// calculate the trial normalized fit error as a percentage
	MagCal->trFitErrorpc = 50.0F
			* sqrtf(fabs(MagCal->vecA[j]) / (float) MagCal->MagBufferCount)
 8002aa0:	687a      	ldr	r2, [r7, #4]
 8002aa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aa4:	33f8      	adds	r3, #248	@ 0xf8
 8002aa6:	009b      	lsls	r3, r3, #2
 8002aa8:	4413      	add	r3, r2
 8002aaa:	edd3 7a00 	vldr	s15, [r3]
 8002aae:	eeb0 7ae7 	vabs.f32	s14, s15
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	f9b3 3f0a 	ldrsh.w	r3, [r3, #3850]	@ 0xf0a
 8002ab8:	ee07 3a90 	vmov	s15, r3
 8002abc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ac0:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002ac4:	eeb0 0a66 	vmov.f32	s0, s13
 8002ac8:	f00e fe5c 	bl	8011784 <sqrtf>
 8002acc:	eef0 7a40 	vmov.f32	s15, s0
 8002ad0:	ed1f 7a71 	vldr	s14, [pc, #-452]	@ 8002910 <fUpdateCalibration7EIG+0x2e0>
 8002ad4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002ad8:	ee17 0a90 	vmov	r0, s15
 8002adc:	f7fd fd0c 	bl	80004f8 <__aeabi_f2d>
 8002ae0:	4604      	mov	r4, r0
 8002ae2:	460d      	mov	r5, r1
			/ fabs(ftmp);
 8002ae4:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8002ae8:	eef0 7ae7 	vabs.f32	s15, s15
 8002aec:	ee17 0a90 	vmov	r0, s15
 8002af0:	f7fd fd02 	bl	80004f8 <__aeabi_f2d>
 8002af4:	4602      	mov	r2, r0
 8002af6:	460b      	mov	r3, r1
 8002af8:	4620      	mov	r0, r4
 8002afa:	4629      	mov	r1, r5
 8002afc:	f7fd fe7e 	bl	80007fc <__aeabi_ddiv>
 8002b00:	4602      	mov	r2, r0
 8002b02:	460b      	mov	r3, r1
 8002b04:	4610      	mov	r0, r2
 8002b06:	4619      	mov	r1, r3
 8002b08:	f7fd fffe 	bl	8000b08 <__aeabi_d2f>
 8002b0c:	4602      	mov	r2, r0
	MagCal->trFitErrorpc = 50.0F
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	675a      	str	r2, [r3, #116]	@ 0x74

	// normalize the ellipsoid matrix A to unit determinant
	f3x3matrixAeqAxScalar(MagCal->A, powf(det, -(ONETHIRD)));
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	f103 0478 	add.w	r4, r3, #120	@ 0x78
 8002b18:	ed5f 0a85 	vldr	s1, [pc, #-532]	@ 8002908 <fUpdateCalibration7EIG+0x2d8>
 8002b1c:	ed97 0a0d 	vldr	s0, [r7, #52]	@ 0x34
 8002b20:	f00e fdd8 	bl	80116d4 <powf>
 8002b24:	eef0 7a40 	vmov.f32	s15, s0
 8002b28:	eeb0 0a67 	vmov.f32	s0, s15
 8002b2c:	4620      	mov	r0, r4
 8002b2e:	f003 fa73 	bl	8006018 <f3x3matrixAeqAxScalar>

	// convert the geomagnetic field strength B into uT for normalized
	// soft iron matrix A and normalize
	MagCal->trB = sqrtf(fabs(ftmp)) * DEFAULTB * powf(det, -(ONESIXTH));
 8002b32:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8002b36:	eef0 7ae7 	vabs.f32	s15, s15
 8002b3a:	eeb0 0a67 	vmov.f32	s0, s15
 8002b3e:	f00e fe21 	bl	8011784 <sqrtf>
 8002b42:	eef0 7a40 	vmov.f32	s15, s0
 8002b46:	ed1f 7a8e 	vldr	s14, [pc, #-568]	@ 8002910 <fUpdateCalibration7EIG+0x2e0>
 8002b4a:	ee27 8a87 	vmul.f32	s16, s15, s14
 8002b4e:	ed5f 0a91 	vldr	s1, [pc, #-580]	@ 800290c <fUpdateCalibration7EIG+0x2dc>
 8002b52:	ed97 0a0d 	vldr	s0, [r7, #52]	@ 0x34
 8002b56:	f00e fdbd 	bl	80116d4 <powf>
 8002b5a:	eef0 7a40 	vmov.f32	s15, s0
 8002b5e:	ee68 7a27 	vmul.f32	s15, s16, s15
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	edc3 7a1c 	vstr	s15, [r3, #112]	@ 0x70

	// compute trial invW from the square root of A also with normalized
	// determinant and hard iron offset in uT
	f3x3matrixAeqI(MagCal->trinvW);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	334c      	adds	r3, #76	@ 0x4c
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	f003 f991 	bl	8005e94 <f3x3matrixAeqI>
	for (k = X; k <= Z; k++) {
 8002b72:	2300      	movs	r3, #0
 8002b74:	623b      	str	r3, [r7, #32]
 8002b76:	e03a      	b.n	8002bee <fUpdateCalibration7EIG+0x5be>
		MagCal->trinvW[k][k] = sqrtf(fabs(MagCal->A[k][k]));
 8002b78:	687a      	ldr	r2, [r7, #4]
 8002b7a:	6a3b      	ldr	r3, [r7, #32]
 8002b7c:	011b      	lsls	r3, r3, #4
 8002b7e:	4413      	add	r3, r2
 8002b80:	3378      	adds	r3, #120	@ 0x78
 8002b82:	edd3 7a00 	vldr	s15, [r3]
 8002b86:	eef0 7ae7 	vabs.f32	s15, s15
 8002b8a:	eeb0 0a67 	vmov.f32	s0, s15
 8002b8e:	f00e fdf9 	bl	8011784 <sqrtf>
 8002b92:	eef0 7a40 	vmov.f32	s15, s0
 8002b96:	687a      	ldr	r2, [r7, #4]
 8002b98:	6a3b      	ldr	r3, [r7, #32]
 8002b9a:	011b      	lsls	r3, r3, #4
 8002b9c:	4413      	add	r3, r2
 8002b9e:	334c      	adds	r3, #76	@ 0x4c
 8002ba0:	edc3 7a00 	vstr	s15, [r3]
		MagCal->trV[k] = MagCal->trV[k] * DEFAULTB
 8002ba4:	687a      	ldr	r2, [r7, #4]
 8002ba6:	6a3b      	ldr	r3, [r7, #32]
 8002ba8:	3310      	adds	r3, #16
 8002baa:	009b      	lsls	r3, r3, #2
 8002bac:	4413      	add	r3, r2
 8002bae:	edd3 7a00 	vldr	s15, [r3]
 8002bb2:	ed1f 7aa9 	vldr	s14, [pc, #-676]	@ 8002910 <fUpdateCalibration7EIG+0x2e0>
 8002bb6:	ee27 7a87 	vmul.f32	s14, s15, s14
				+ (float) iOffset[k] * FXOS8700_UTPERCOUNT;
 8002bba:	6a3b      	ldr	r3, [r7, #32]
 8002bbc:	005b      	lsls	r3, r3, #1
 8002bbe:	3338      	adds	r3, #56	@ 0x38
 8002bc0:	443b      	add	r3, r7
 8002bc2:	f933 3c2c 	ldrsh.w	r3, [r3, #-44]
 8002bc6:	ee07 3a90 	vmov	s15, r3
 8002bca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002bce:	ed5f 6aaf 	vldr	s13, [pc, #-700]	@ 8002914 <fUpdateCalibration7EIG+0x2e4>
 8002bd2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002bd6:	ee77 7a27 	vadd.f32	s15, s14, s15
		MagCal->trV[k] = MagCal->trV[k] * DEFAULTB
 8002bda:	687a      	ldr	r2, [r7, #4]
 8002bdc:	6a3b      	ldr	r3, [r7, #32]
 8002bde:	3310      	adds	r3, #16
 8002be0:	009b      	lsls	r3, r3, #2
 8002be2:	4413      	add	r3, r2
 8002be4:	edc3 7a00 	vstr	s15, [r3]
	for (k = X; k <= Z; k++) {
 8002be8:	6a3b      	ldr	r3, [r7, #32]
 8002bea:	3301      	adds	r3, #1
 8002bec:	623b      	str	r3, [r7, #32]
 8002bee:	6a3b      	ldr	r3, [r7, #32]
 8002bf0:	2b02      	cmp	r3, #2
 8002bf2:	ddc1      	ble.n	8002b78 <fUpdateCalibration7EIG+0x548>
	}
}
 8002bf4:	bf00      	nop
 8002bf6:	bf00      	nop
 8002bf8:	3738      	adds	r7, #56	@ 0x38
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	ecbd 8b02 	vpop	{d8}
 8002c00:	bdb0      	pop	{r4, r5, r7, pc}
 8002c02:	bf00      	nop

08002c04 <fUpdateCalibration10EIG>:

static void fUpdateCalibration10EIG(MagCalibration_t *MagCal) {
 8002c04:	b590      	push	{r4, r7, lr}
 8002c06:	b08f      	sub	sp, #60	@ 0x3c
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
	float ftmp;					// scratch variable
	int16_t iOffset[3];	// offset to remove large DC hard iron bias in matrix
	int16_t iCount;				// number of measurements counted
	int i, j, k, m, n;			// loop counters

	magcal_type = 3;
 8002c0c:	4bb0      	ldr	r3, [pc, #704]	@ (8002ed0 <fUpdateCalibration10EIG+0x2cc>)
 8002c0e:	2203      	movs	r2, #3
 8002c10:	601a      	str	r2, [r3, #0]

	// compute fscaling to reduce multiplications later
	fscaling = FXOS8700_UTPERCOUNT / DEFAULTB;
 8002c12:	4bb0      	ldr	r3, [pc, #704]	@ (8002ed4 <fUpdateCalibration10EIG+0x2d0>)
 8002c14:	61bb      	str	r3, [r7, #24]

	// the offsets are guaranteed to be set from the first element but to avoid compiler error
	iOffset[X] = iOffset[Y] = iOffset[Z] = 0;
 8002c16:	2300      	movs	r3, #0
 8002c18:	823b      	strh	r3, [r7, #16]
 8002c1a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002c1e:	81fb      	strh	r3, [r7, #14]
 8002c20:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002c24:	81bb      	strh	r3, [r7, #12]

	// zero the on and above diagonal elements of the 10x10 symmetric measurement matrix matA
	for (m = 0; m < 10; m++) {
 8002c26:	2300      	movs	r3, #0
 8002c28:	623b      	str	r3, [r7, #32]
 8002c2a:	e019      	b.n	8002c60 <fUpdateCalibration10EIG+0x5c>
		for (n = m; n < 10; n++) {
 8002c2c:	6a3b      	ldr	r3, [r7, #32]
 8002c2e:	61fb      	str	r3, [r7, #28]
 8002c30:	e010      	b.n	8002c54 <fUpdateCalibration10EIG+0x50>
			MagCal->matA[m][n] = 0.0F;
 8002c32:	6879      	ldr	r1, [r7, #4]
 8002c34:	6a3a      	ldr	r2, [r7, #32]
 8002c36:	4613      	mov	r3, r2
 8002c38:	009b      	lsls	r3, r3, #2
 8002c3a:	4413      	add	r3, r2
 8002c3c:	005b      	lsls	r3, r3, #1
 8002c3e:	69fa      	ldr	r2, [r7, #28]
 8002c40:	4413      	add	r3, r2
 8002c42:	3330      	adds	r3, #48	@ 0x30
 8002c44:	009b      	lsls	r3, r3, #2
 8002c46:	440b      	add	r3, r1
 8002c48:	f04f 0200 	mov.w	r2, #0
 8002c4c:	601a      	str	r2, [r3, #0]
		for (n = m; n < 10; n++) {
 8002c4e:	69fb      	ldr	r3, [r7, #28]
 8002c50:	3301      	adds	r3, #1
 8002c52:	61fb      	str	r3, [r7, #28]
 8002c54:	69fb      	ldr	r3, [r7, #28]
 8002c56:	2b09      	cmp	r3, #9
 8002c58:	ddeb      	ble.n	8002c32 <fUpdateCalibration10EIG+0x2e>
	for (m = 0; m < 10; m++) {
 8002c5a:	6a3b      	ldr	r3, [r7, #32]
 8002c5c:	3301      	adds	r3, #1
 8002c5e:	623b      	str	r3, [r7, #32]
 8002c60:	6a3b      	ldr	r3, [r7, #32]
 8002c62:	2b09      	cmp	r3, #9
 8002c64:	dde2      	ble.n	8002c2c <fUpdateCalibration10EIG+0x28>
		}
	}

	// sum between MINEQUATIONS to MAXEQUATIONS entries into the 10x10 product matrix matA
	iCount = 0;
 8002c66:	2300      	movs	r3, #0
 8002c68:	867b      	strh	r3, [r7, #50]	@ 0x32
	for (j = 0; j < MAGBUFFSIZE; j++) {
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002c6e:	e116      	b.n	8002e9e <fUpdateCalibration10EIG+0x29a>
		if (MagCal->valid[j]) {
 8002c70:	687a      	ldr	r2, [r7, #4]
 8002c72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c74:	4413      	add	r3, r2
 8002c76:	f603 537a 	addw	r3, r3, #3450	@ 0xd7a
 8002c7a:	f993 3000 	ldrsb.w	r3, [r3]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	f000 810a 	beq.w	8002e98 <fUpdateCalibration10EIG+0x294>
			// use first valid magnetic buffer entry as estimate for offset
			// to help solution (bit counts)
			if (iCount == 0) {
 8002c84:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d11c      	bne.n	8002cc6 <fUpdateCalibration10EIG+0xc2>
				for (k = X; k <= Z; k++) {
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c90:	e016      	b.n	8002cc0 <fUpdateCalibration10EIG+0xbc>
					iOffset[k] = MagCal->BpFast[k][j];
 8002c92:	687a      	ldr	r2, [r7, #4]
 8002c94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c96:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8002c9a:	fb03 f101 	mul.w	r1, r3, r1
 8002c9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ca0:	440b      	add	r3, r1
 8002ca2:	f503 7303 	add.w	r3, r3, #524	@ 0x20c
 8002ca6:	005b      	lsls	r3, r3, #1
 8002ca8:	4413      	add	r3, r2
 8002caa:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8002cae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cb0:	005b      	lsls	r3, r3, #1
 8002cb2:	3338      	adds	r3, #56	@ 0x38
 8002cb4:	443b      	add	r3, r7
 8002cb6:	f823 2c2c 	strh.w	r2, [r3, #-44]
				for (k = X; k <= Z; k++) {
 8002cba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cbc:	3301      	adds	r3, #1
 8002cbe:	627b      	str	r3, [r7, #36]	@ 0x24
 8002cc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cc2:	2b02      	cmp	r3, #2
 8002cc4:	dde5      	ble.n	8002c92 <fUpdateCalibration10EIG+0x8e>
				}
			}

			// apply the fixed offset and scaling and enter into vecA[6-8]
			for (k = X; k <= Z; k++) {
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	627b      	str	r3, [r7, #36]	@ 0x24
 8002cca:	e028      	b.n	8002d1e <fUpdateCalibration10EIG+0x11a>
				MagCal->vecA[k + 6] = (float) ((int32_t) MagCal->BpFast[k][j]
 8002ccc:	687a      	ldr	r2, [r7, #4]
 8002cce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cd0:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8002cd4:	fb03 f101 	mul.w	r1, r3, r1
 8002cd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cda:	440b      	add	r3, r1
 8002cdc:	f503 7303 	add.w	r3, r3, #524	@ 0x20c
 8002ce0:	005b      	lsls	r3, r3, #1
 8002ce2:	4413      	add	r3, r2
 8002ce4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002ce8:	461a      	mov	r2, r3
						- (int32_t) iOffset[k]) * fscaling;
 8002cea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cec:	005b      	lsls	r3, r3, #1
 8002cee:	3338      	adds	r3, #56	@ 0x38
 8002cf0:	443b      	add	r3, r7
 8002cf2:	f933 3c2c 	ldrsh.w	r3, [r3, #-44]
 8002cf6:	1ad3      	subs	r3, r2, r3
				MagCal->vecA[k + 6] = (float) ((int32_t) MagCal->BpFast[k][j]
 8002cf8:	ee07 3a90 	vmov	s15, r3
 8002cfc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002d00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d02:	3306      	adds	r3, #6
						- (int32_t) iOffset[k]) * fscaling;
 8002d04:	edd7 7a06 	vldr	s15, [r7, #24]
 8002d08:	ee67 7a27 	vmul.f32	s15, s14, s15
				MagCal->vecA[k + 6] = (float) ((int32_t) MagCal->BpFast[k][j]
 8002d0c:	687a      	ldr	r2, [r7, #4]
 8002d0e:	33f8      	adds	r3, #248	@ 0xf8
 8002d10:	009b      	lsls	r3, r3, #2
 8002d12:	4413      	add	r3, r2
 8002d14:	edc3 7a00 	vstr	s15, [r3]
			for (k = X; k <= Z; k++) {
 8002d18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d1a:	3301      	adds	r3, #1
 8002d1c:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d20:	2b02      	cmp	r3, #2
 8002d22:	ddd3      	ble.n	8002ccc <fUpdateCalibration10EIG+0xc8>
			}

			// compute measurement vector elements vecA[0-5] from vecA[6-8]
			MagCal->vecA[0] = MagCal->vecA[6] * MagCal->vecA[6];
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	ed93 7afe 	vldr	s14, [r3, #1016]	@ 0x3f8
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	edd3 7afe 	vldr	s15, [r3, #1016]	@ 0x3f8
 8002d30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	edc3 7af8 	vstr	s15, [r3, #992]	@ 0x3e0
			MagCal->vecA[1] = 2.0F * MagCal->vecA[6] * MagCal->vecA[7];
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	edd3 7afe 	vldr	s15, [r3, #1016]	@ 0x3f8
 8002d40:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	edd3 7aff 	vldr	s15, [r3, #1020]	@ 0x3fc
 8002d4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	edc3 7af9 	vstr	s15, [r3, #996]	@ 0x3e4
			MagCal->vecA[2] = 2.0F * MagCal->vecA[6] * MagCal->vecA[8];
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	edd3 7afe 	vldr	s15, [r3, #1016]	@ 0x3f8
 8002d5a:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002d64:	edd3 7a00 	vldr	s15, [r3]
 8002d68:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	edc3 7afa 	vstr	s15, [r3, #1000]	@ 0x3e8
			MagCal->vecA[3] = MagCal->vecA[7] * MagCal->vecA[7];
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	ed93 7aff 	vldr	s14, [r3, #1020]	@ 0x3fc
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	edd3 7aff 	vldr	s15, [r3, #1020]	@ 0x3fc
 8002d7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	edc3 7afb 	vstr	s15, [r3, #1004]	@ 0x3ec
			MagCal->vecA[4] = 2.0F * MagCal->vecA[7] * MagCal->vecA[8];
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	edd3 7aff 	vldr	s15, [r3, #1020]	@ 0x3fc
 8002d8e:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002d98:	edd3 7a00 	vldr	s15, [r3]
 8002d9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	edc3 7afc 	vstr	s15, [r3, #1008]	@ 0x3f0
			MagCal->vecA[5] = MagCal->vecA[8] * MagCal->vecA[8];
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002dac:	ed93 7a00 	vldr	s14, [r3]
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002db6:	edd3 7a00 	vldr	s15, [r3]
 8002dba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	edc3 7afd 	vstr	s15, [r3, #1012]	@ 0x3f4

			// accumulate the on-and above-diagonal terms of matA=Sigma{vecA^T * vecA}
			// with the exception of matA[9][9] which equals the number of measurements
			// update the right hand column [9] of matA[0-8][9] ignoring matA[9][9]
			for (m = 0; m < 9; m++) {
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	623b      	str	r3, [r7, #32]
 8002dc8:	e01f      	b.n	8002e0a <fUpdateCalibration10EIG+0x206>
				MagCal->matA[m][9] += MagCal->vecA[m];
 8002dca:	6879      	ldr	r1, [r7, #4]
 8002dcc:	6a3a      	ldr	r2, [r7, #32]
 8002dce:	4613      	mov	r3, r2
 8002dd0:	009b      	lsls	r3, r3, #2
 8002dd2:	4413      	add	r3, r2
 8002dd4:	00db      	lsls	r3, r3, #3
 8002dd6:	440b      	add	r3, r1
 8002dd8:	33e4      	adds	r3, #228	@ 0xe4
 8002dda:	ed93 7a00 	vldr	s14, [r3]
 8002dde:	687a      	ldr	r2, [r7, #4]
 8002de0:	6a3b      	ldr	r3, [r7, #32]
 8002de2:	33f8      	adds	r3, #248	@ 0xf8
 8002de4:	009b      	lsls	r3, r3, #2
 8002de6:	4413      	add	r3, r2
 8002de8:	edd3 7a00 	vldr	s15, [r3]
 8002dec:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002df0:	6879      	ldr	r1, [r7, #4]
 8002df2:	6a3a      	ldr	r2, [r7, #32]
 8002df4:	4613      	mov	r3, r2
 8002df6:	009b      	lsls	r3, r3, #2
 8002df8:	4413      	add	r3, r2
 8002dfa:	00db      	lsls	r3, r3, #3
 8002dfc:	440b      	add	r3, r1
 8002dfe:	33e4      	adds	r3, #228	@ 0xe4
 8002e00:	edc3 7a00 	vstr	s15, [r3]
			for (m = 0; m < 9; m++) {
 8002e04:	6a3b      	ldr	r3, [r7, #32]
 8002e06:	3301      	adds	r3, #1
 8002e08:	623b      	str	r3, [r7, #32]
 8002e0a:	6a3b      	ldr	r3, [r7, #32]
 8002e0c:	2b08      	cmp	r3, #8
 8002e0e:	dddc      	ble.n	8002dca <fUpdateCalibration10EIG+0x1c6>
			}
			// update the on and above diagonal terms of matA ignoring right hand column 9
			for (m = 0; m < 9; m++) {
 8002e10:	2300      	movs	r3, #0
 8002e12:	623b      	str	r3, [r7, #32]
 8002e14:	e037      	b.n	8002e86 <fUpdateCalibration10EIG+0x282>
				for (n = m; n < 9; n++) {
 8002e16:	6a3b      	ldr	r3, [r7, #32]
 8002e18:	61fb      	str	r3, [r7, #28]
 8002e1a:	e02e      	b.n	8002e7a <fUpdateCalibration10EIG+0x276>
					MagCal->matA[m][n] += MagCal->vecA[m] * MagCal->vecA[n];
 8002e1c:	6879      	ldr	r1, [r7, #4]
 8002e1e:	6a3a      	ldr	r2, [r7, #32]
 8002e20:	4613      	mov	r3, r2
 8002e22:	009b      	lsls	r3, r3, #2
 8002e24:	4413      	add	r3, r2
 8002e26:	005b      	lsls	r3, r3, #1
 8002e28:	69fa      	ldr	r2, [r7, #28]
 8002e2a:	4413      	add	r3, r2
 8002e2c:	3330      	adds	r3, #48	@ 0x30
 8002e2e:	009b      	lsls	r3, r3, #2
 8002e30:	440b      	add	r3, r1
 8002e32:	ed93 7a00 	vldr	s14, [r3]
 8002e36:	687a      	ldr	r2, [r7, #4]
 8002e38:	6a3b      	ldr	r3, [r7, #32]
 8002e3a:	33f8      	adds	r3, #248	@ 0xf8
 8002e3c:	009b      	lsls	r3, r3, #2
 8002e3e:	4413      	add	r3, r2
 8002e40:	edd3 6a00 	vldr	s13, [r3]
 8002e44:	687a      	ldr	r2, [r7, #4]
 8002e46:	69fb      	ldr	r3, [r7, #28]
 8002e48:	33f8      	adds	r3, #248	@ 0xf8
 8002e4a:	009b      	lsls	r3, r3, #2
 8002e4c:	4413      	add	r3, r2
 8002e4e:	edd3 7a00 	vldr	s15, [r3]
 8002e52:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e56:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e5a:	6879      	ldr	r1, [r7, #4]
 8002e5c:	6a3a      	ldr	r2, [r7, #32]
 8002e5e:	4613      	mov	r3, r2
 8002e60:	009b      	lsls	r3, r3, #2
 8002e62:	4413      	add	r3, r2
 8002e64:	005b      	lsls	r3, r3, #1
 8002e66:	69fa      	ldr	r2, [r7, #28]
 8002e68:	4413      	add	r3, r2
 8002e6a:	3330      	adds	r3, #48	@ 0x30
 8002e6c:	009b      	lsls	r3, r3, #2
 8002e6e:	440b      	add	r3, r1
 8002e70:	edc3 7a00 	vstr	s15, [r3]
				for (n = m; n < 9; n++) {
 8002e74:	69fb      	ldr	r3, [r7, #28]
 8002e76:	3301      	adds	r3, #1
 8002e78:	61fb      	str	r3, [r7, #28]
 8002e7a:	69fb      	ldr	r3, [r7, #28]
 8002e7c:	2b08      	cmp	r3, #8
 8002e7e:	ddcd      	ble.n	8002e1c <fUpdateCalibration10EIG+0x218>
			for (m = 0; m < 9; m++) {
 8002e80:	6a3b      	ldr	r3, [r7, #32]
 8002e82:	3301      	adds	r3, #1
 8002e84:	623b      	str	r3, [r7, #32]
 8002e86:	6a3b      	ldr	r3, [r7, #32]
 8002e88:	2b08      	cmp	r3, #8
 8002e8a:	ddc4      	ble.n	8002e16 <fUpdateCalibration10EIG+0x212>
				}
			}

			// increment the measurement counter for the next iteration
			iCount++;
 8002e8c:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 8002e90:	b29b      	uxth	r3, r3
 8002e92:	3301      	adds	r3, #1
 8002e94:	b29b      	uxth	r3, r3
 8002e96:	867b      	strh	r3, [r7, #50]	@ 0x32
	for (j = 0; j < MAGBUFFSIZE; j++) {
 8002e98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e9a:	3301      	adds	r3, #1
 8002e9c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002e9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ea0:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8002ea4:	f6ff aee4 	blt.w	8002c70 <fUpdateCalibration10EIG+0x6c>
		}
	}

	// set the last element matA[9][9] to the number of measurements
	MagCal->matA[9][9] = (float) iCount;
 8002ea8:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 8002eac:	ee07 3a90 	vmov	s15, r3
 8002eb0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	edc3 7a93 	vstr	s15, [r3, #588]	@ 0x24c

	// store the number of measurements accumulated
	MagCal->MagBufferCount = iCount;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 8002ebe:	f8a3 2f0a 	strh.w	r2, [r3, #3850]	@ 0xf0a

	// copy the above diagonal elements of symmetric product matrix matA to below the diagonal
	for (m = 1; m < 10; m++) {
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	623b      	str	r3, [r7, #32]
 8002ec6:	e029      	b.n	8002f1c <fUpdateCalibration10EIG+0x318>
		for (n = 0; n < m; n++) {
 8002ec8:	2300      	movs	r3, #0
 8002eca:	61fb      	str	r3, [r7, #28]
 8002ecc:	e01f      	b.n	8002f0e <fUpdateCalibration10EIG+0x30a>
 8002ece:	bf00      	nop
 8002ed0:	200001f4 	.word	0x200001f4
 8002ed4:	3b03126f 	.word	0x3b03126f
			MagCal->matA[m][n] = MagCal->matA[n][m];
 8002ed8:	6879      	ldr	r1, [r7, #4]
 8002eda:	69fa      	ldr	r2, [r7, #28]
 8002edc:	4613      	mov	r3, r2
 8002ede:	009b      	lsls	r3, r3, #2
 8002ee0:	4413      	add	r3, r2
 8002ee2:	005b      	lsls	r3, r3, #1
 8002ee4:	6a3a      	ldr	r2, [r7, #32]
 8002ee6:	4413      	add	r3, r2
 8002ee8:	3330      	adds	r3, #48	@ 0x30
 8002eea:	009b      	lsls	r3, r3, #2
 8002eec:	440b      	add	r3, r1
 8002eee:	6819      	ldr	r1, [r3, #0]
 8002ef0:	6878      	ldr	r0, [r7, #4]
 8002ef2:	6a3a      	ldr	r2, [r7, #32]
 8002ef4:	4613      	mov	r3, r2
 8002ef6:	009b      	lsls	r3, r3, #2
 8002ef8:	4413      	add	r3, r2
 8002efa:	005b      	lsls	r3, r3, #1
 8002efc:	69fa      	ldr	r2, [r7, #28]
 8002efe:	4413      	add	r3, r2
 8002f00:	3330      	adds	r3, #48	@ 0x30
 8002f02:	009b      	lsls	r3, r3, #2
 8002f04:	4403      	add	r3, r0
 8002f06:	6019      	str	r1, [r3, #0]
		for (n = 0; n < m; n++) {
 8002f08:	69fb      	ldr	r3, [r7, #28]
 8002f0a:	3301      	adds	r3, #1
 8002f0c:	61fb      	str	r3, [r7, #28]
 8002f0e:	69fa      	ldr	r2, [r7, #28]
 8002f10:	6a3b      	ldr	r3, [r7, #32]
 8002f12:	429a      	cmp	r2, r3
 8002f14:	dbe0      	blt.n	8002ed8 <fUpdateCalibration10EIG+0x2d4>
	for (m = 1; m < 10; m++) {
 8002f16:	6a3b      	ldr	r3, [r7, #32]
 8002f18:	3301      	adds	r3, #1
 8002f1a:	623b      	str	r3, [r7, #32]
 8002f1c:	6a3b      	ldr	r3, [r7, #32]
 8002f1e:	2b09      	cmp	r3, #9
 8002f20:	ddd2      	ble.n	8002ec8 <fUpdateCalibration10EIG+0x2c4>
		}
	}

	// set MagCal->vecA to the unsorted eigenvalues and matB to the unsorted
	// normalized eigenvectors of matA
	eigencompute(MagCal->matA, MagCal->vecA, MagCal->matB, 10);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	f103 00c0 	add.w	r0, r3, #192	@ 0xc0
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	f503 7214 	add.w	r2, r3, #592	@ 0x250
 8002f34:	230a      	movs	r3, #10
 8002f36:	f003 fa3b 	bl	80063b0 <eigencompute>

	// set ellipsoid matrix A from elements of the solution vector column j with
	// smallest eigenvalue
	j = 0;
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	62bb      	str	r3, [r7, #40]	@ 0x28
	for (i = 1; i < 10; i++) {
 8002f3e:	2301      	movs	r3, #1
 8002f40:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002f42:	e017      	b.n	8002f74 <fUpdateCalibration10EIG+0x370>
		if (MagCal->vecA[i] < MagCal->vecA[j]) {
 8002f44:	687a      	ldr	r2, [r7, #4]
 8002f46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f48:	33f8      	adds	r3, #248	@ 0xf8
 8002f4a:	009b      	lsls	r3, r3, #2
 8002f4c:	4413      	add	r3, r2
 8002f4e:	ed93 7a00 	vldr	s14, [r3]
 8002f52:	687a      	ldr	r2, [r7, #4]
 8002f54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f56:	33f8      	adds	r3, #248	@ 0xf8
 8002f58:	009b      	lsls	r3, r3, #2
 8002f5a:	4413      	add	r3, r2
 8002f5c:	edd3 7a00 	vldr	s15, [r3]
 8002f60:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002f64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f68:	d501      	bpl.n	8002f6e <fUpdateCalibration10EIG+0x36a>
			j = i;
 8002f6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f6c:	62bb      	str	r3, [r7, #40]	@ 0x28
	for (i = 1; i < 10; i++) {
 8002f6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f70:	3301      	adds	r3, #1
 8002f72:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002f74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f76:	2b09      	cmp	r3, #9
 8002f78:	dde4      	ble.n	8002f44 <fUpdateCalibration10EIG+0x340>
		}
	}
	MagCal->A[0][0] = MagCal->matB[0][j];
 8002f7a:	687a      	ldr	r2, [r7, #4]
 8002f7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f7e:	3394      	adds	r3, #148	@ 0x94
 8002f80:	009b      	lsls	r3, r3, #2
 8002f82:	4413      	add	r3, r2
 8002f84:	681a      	ldr	r2, [r3, #0]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	679a      	str	r2, [r3, #120]	@ 0x78
	MagCal->A[0][1] = MagCal->A[1][0] = MagCal->matB[1][j];
 8002f8a:	687a      	ldr	r2, [r7, #4]
 8002f8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f8e:	339e      	adds	r3, #158	@ 0x9e
 8002f90:	009b      	lsls	r3, r3, #2
 8002f92:	4413      	add	r3, r2
 8002f94:	681a      	ldr	r2, [r3, #0]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	67da      	str	r2, [r3, #124]	@ 0x7c
	MagCal->A[0][2] = MagCal->A[2][0] = MagCal->matB[2][j];
 8002fa6:	687a      	ldr	r2, [r7, #4]
 8002fa8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002faa:	33a8      	adds	r3, #168	@ 0xa8
 8002fac:	009b      	lsls	r3, r3, #2
 8002fae:	4413      	add	r3, r2
 8002fb0:	681a      	ldr	r2, [r3, #0]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
	MagCal->A[1][1] = MagCal->matB[3][j];
 8002fc4:	687a      	ldr	r2, [r7, #4]
 8002fc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fc8:	33b2      	adds	r3, #178	@ 0xb2
 8002fca:	009b      	lsls	r3, r3, #2
 8002fcc:	4413      	add	r3, r2
 8002fce:	681a      	ldr	r2, [r3, #0]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
	MagCal->A[1][2] = MagCal->A[2][1] = MagCal->matB[4][j];
 8002fd6:	687a      	ldr	r2, [r7, #4]
 8002fd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fda:	33bc      	adds	r3, #188	@ 0xbc
 8002fdc:	009b      	lsls	r3, r3, #2
 8002fde:	4413      	add	r3, r2
 8002fe0:	681a      	ldr	r2, [r3, #0]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
	MagCal->A[2][2] = MagCal->matB[5][j];
 8002ff4:	687a      	ldr	r2, [r7, #4]
 8002ff6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ff8:	33c6      	adds	r3, #198	@ 0xc6
 8002ffa:	009b      	lsls	r3, r3, #2
 8002ffc:	4413      	add	r3, r2
 8002ffe:	681a      	ldr	r2, [r3, #0]
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98

	// negate entire solution if A has negative determinant
	det = f3x3matrixDetA(MagCal->A);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	3378      	adds	r3, #120	@ 0x78
 800300a:	4618      	mov	r0, r3
 800300c:	f003 f970 	bl	80062f0 <f3x3matrixDetA>
 8003010:	ed87 0a0d 	vstr	s0, [r7, #52]	@ 0x34
	if (det < 0.0F) {
 8003014:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8003018:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800301c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003020:	d54a      	bpl.n	80030b8 <fUpdateCalibration10EIG+0x4b4>
		f3x3matrixAeqMinusA(MagCal->A);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	3378      	adds	r3, #120	@ 0x78
 8003026:	4618      	mov	r0, r3
 8003028:	f003 f832 	bl	8006090 <f3x3matrixAeqMinusA>
		MagCal->matB[6][j] = -MagCal->matB[6][j];
 800302c:	687a      	ldr	r2, [r7, #4]
 800302e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003030:	33d0      	adds	r3, #208	@ 0xd0
 8003032:	009b      	lsls	r3, r3, #2
 8003034:	4413      	add	r3, r2
 8003036:	edd3 7a00 	vldr	s15, [r3]
 800303a:	eef1 7a67 	vneg.f32	s15, s15
 800303e:	687a      	ldr	r2, [r7, #4]
 8003040:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003042:	33d0      	adds	r3, #208	@ 0xd0
 8003044:	009b      	lsls	r3, r3, #2
 8003046:	4413      	add	r3, r2
 8003048:	edc3 7a00 	vstr	s15, [r3]
		MagCal->matB[7][j] = -MagCal->matB[7][j];
 800304c:	687a      	ldr	r2, [r7, #4]
 800304e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003050:	33da      	adds	r3, #218	@ 0xda
 8003052:	009b      	lsls	r3, r3, #2
 8003054:	4413      	add	r3, r2
 8003056:	edd3 7a00 	vldr	s15, [r3]
 800305a:	eef1 7a67 	vneg.f32	s15, s15
 800305e:	687a      	ldr	r2, [r7, #4]
 8003060:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003062:	33da      	adds	r3, #218	@ 0xda
 8003064:	009b      	lsls	r3, r3, #2
 8003066:	4413      	add	r3, r2
 8003068:	edc3 7a00 	vstr	s15, [r3]
		MagCal->matB[8][j] = -MagCal->matB[8][j];
 800306c:	687a      	ldr	r2, [r7, #4]
 800306e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003070:	33e4      	adds	r3, #228	@ 0xe4
 8003072:	009b      	lsls	r3, r3, #2
 8003074:	4413      	add	r3, r2
 8003076:	edd3 7a00 	vldr	s15, [r3]
 800307a:	eef1 7a67 	vneg.f32	s15, s15
 800307e:	687a      	ldr	r2, [r7, #4]
 8003080:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003082:	33e4      	adds	r3, #228	@ 0xe4
 8003084:	009b      	lsls	r3, r3, #2
 8003086:	4413      	add	r3, r2
 8003088:	edc3 7a00 	vstr	s15, [r3]
		MagCal->matB[9][j] = -MagCal->matB[9][j];
 800308c:	687a      	ldr	r2, [r7, #4]
 800308e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003090:	33ee      	adds	r3, #238	@ 0xee
 8003092:	009b      	lsls	r3, r3, #2
 8003094:	4413      	add	r3, r2
 8003096:	edd3 7a00 	vldr	s15, [r3]
 800309a:	eef1 7a67 	vneg.f32	s15, s15
 800309e:	687a      	ldr	r2, [r7, #4]
 80030a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030a2:	33ee      	adds	r3, #238	@ 0xee
 80030a4:	009b      	lsls	r3, r3, #2
 80030a6:	4413      	add	r3, r2
 80030a8:	edc3 7a00 	vstr	s15, [r3]
		det = -det;
 80030ac:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80030b0:	eef1 7a67 	vneg.f32	s15, s15
 80030b4:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
	}

	// compute the inverse of the ellipsoid matrix
	f3x3matrixAeqInvSymB(MagCal->invA, MagCal->A);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	f103 029c 	add.w	r2, r3, #156	@ 0x9c
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	3378      	adds	r3, #120	@ 0x78
 80030c2:	4619      	mov	r1, r3
 80030c4:	4610      	mov	r0, r2
 80030c6:	f003 f81d 	bl	8006104 <f3x3matrixAeqInvSymB>

	// compute the trial hard iron vector in offset bit counts times FMATRIXSCALING
	for (k = X; k <= Z; k++) {
 80030ca:	2300      	movs	r3, #0
 80030cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80030ce:	e052      	b.n	8003176 <fUpdateCalibration10EIG+0x572>
		MagCal->trV[k] = 0.0F;
 80030d0:	687a      	ldr	r2, [r7, #4]
 80030d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030d4:	3310      	adds	r3, #16
 80030d6:	009b      	lsls	r3, r3, #2
 80030d8:	4413      	add	r3, r2
 80030da:	f04f 0200 	mov.w	r2, #0
 80030de:	601a      	str	r2, [r3, #0]
		for (m = X; m <= Z; m++) {
 80030e0:	2300      	movs	r3, #0
 80030e2:	623b      	str	r3, [r7, #32]
 80030e4:	e02f      	b.n	8003146 <fUpdateCalibration10EIG+0x542>
			MagCal->trV[k] += MagCal->invA[k][m] * MagCal->matB[m + 6][j];
 80030e6:	687a      	ldr	r2, [r7, #4]
 80030e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030ea:	3310      	adds	r3, #16
 80030ec:	009b      	lsls	r3, r3, #2
 80030ee:	4413      	add	r3, r2
 80030f0:	ed93 7a00 	vldr	s14, [r3]
 80030f4:	6879      	ldr	r1, [r7, #4]
 80030f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80030f8:	4613      	mov	r3, r2
 80030fa:	005b      	lsls	r3, r3, #1
 80030fc:	4413      	add	r3, r2
 80030fe:	6a3a      	ldr	r2, [r7, #32]
 8003100:	4413      	add	r3, r2
 8003102:	3326      	adds	r3, #38	@ 0x26
 8003104:	009b      	lsls	r3, r3, #2
 8003106:	440b      	add	r3, r1
 8003108:	3304      	adds	r3, #4
 800310a:	edd3 6a00 	vldr	s13, [r3]
 800310e:	6a3b      	ldr	r3, [r7, #32]
 8003110:	1d9a      	adds	r2, r3, #6
 8003112:	6879      	ldr	r1, [r7, #4]
 8003114:	4613      	mov	r3, r2
 8003116:	009b      	lsls	r3, r3, #2
 8003118:	4413      	add	r3, r2
 800311a:	005b      	lsls	r3, r3, #1
 800311c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800311e:	4413      	add	r3, r2
 8003120:	3394      	adds	r3, #148	@ 0x94
 8003122:	009b      	lsls	r3, r3, #2
 8003124:	440b      	add	r3, r1
 8003126:	edd3 7a00 	vldr	s15, [r3]
 800312a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800312e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003132:	687a      	ldr	r2, [r7, #4]
 8003134:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003136:	3310      	adds	r3, #16
 8003138:	009b      	lsls	r3, r3, #2
 800313a:	4413      	add	r3, r2
 800313c:	edc3 7a00 	vstr	s15, [r3]
		for (m = X; m <= Z; m++) {
 8003140:	6a3b      	ldr	r3, [r7, #32]
 8003142:	3301      	adds	r3, #1
 8003144:	623b      	str	r3, [r7, #32]
 8003146:	6a3b      	ldr	r3, [r7, #32]
 8003148:	2b02      	cmp	r3, #2
 800314a:	ddcc      	ble.n	80030e6 <fUpdateCalibration10EIG+0x4e2>
		}
		MagCal->trV[k] *= -0.5F;
 800314c:	687a      	ldr	r2, [r7, #4]
 800314e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003150:	3310      	adds	r3, #16
 8003152:	009b      	lsls	r3, r3, #2
 8003154:	4413      	add	r3, r2
 8003156:	edd3 7a00 	vldr	s15, [r3]
 800315a:	eebe 7a00 	vmov.f32	s14, #224	@ 0xbf000000 -0.5
 800315e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003162:	687a      	ldr	r2, [r7, #4]
 8003164:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003166:	3310      	adds	r3, #16
 8003168:	009b      	lsls	r3, r3, #2
 800316a:	4413      	add	r3, r2
 800316c:	edc3 7a00 	vstr	s15, [r3]
	for (k = X; k <= Z; k++) {
 8003170:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003172:	3301      	adds	r3, #1
 8003174:	627b      	str	r3, [r7, #36]	@ 0x24
 8003176:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003178:	2b02      	cmp	r3, #2
 800317a:	dda9      	ble.n	80030d0 <fUpdateCalibration10EIG+0x4cc>
	}

	// compute the trial geomagnetic field strength B in bit counts times FMATRIXSCALING
	MagCal->trB = sqrtf(
			fabs(
					MagCal->A[0][0] * MagCal->trV[X] * MagCal->trV[X]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	ed93 7a1e 	vldr	s14, [r3, #120]	@ 0x78
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8003188:	ee27 7a27 	vmul.f32	s14, s14, s15
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8003192:	ee27 7a27 	vmul.f32	s14, s14, s15
							+ 2.0F * MagCal->A[0][1] * MagCal->trV[X]
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	edd3 7a1f 	vldr	s15, [r3, #124]	@ 0x7c
 800319c:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 80031a6:	ee66 6aa7 	vmul.f32	s13, s13, s15
									* MagCal->trV[Y]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 80031b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
							+ 2.0F * MagCal->A[0][1] * MagCal->trV[X]
 80031b4:	ee37 7a27 	vadd.f32	s14, s14, s15
							+ 2.0F * MagCal->A[0][2] * MagCal->trV[X]
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	edd3 7a20 	vldr	s15, [r3, #128]	@ 0x80
 80031be:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 80031c8:	ee66 6aa7 	vmul.f32	s13, s13, s15
									* MagCal->trV[Z]
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 80031d2:	ee66 7aa7 	vmul.f32	s15, s13, s15
							+ 2.0F * MagCal->A[0][2] * MagCal->trV[X]
 80031d6:	ee37 7a27 	vadd.f32	s14, s14, s15
							+ MagCal->A[1][1] * MagCal->trV[Y] * MagCal->trV[Y]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	edd3 6a22 	vldr	s13, [r3, #136]	@ 0x88
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 80031e6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 80031f0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80031f4:	ee37 7a27 	vadd.f32	s14, s14, s15
							+ 2.0F * MagCal->A[1][2] * MagCal->trV[Y]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	edd3 7a23 	vldr	s15, [r3, #140]	@ 0x8c
 80031fe:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 8003208:	ee66 6aa7 	vmul.f32	s13, s13, s15
									* MagCal->trV[Z]
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 8003212:	ee66 7aa7 	vmul.f32	s15, s13, s15
							+ 2.0F * MagCal->A[1][2] * MagCal->trV[Y]
 8003216:	ee37 7a27 	vadd.f32	s14, s14, s15
							+ MagCal->A[2][2] * MagCal->trV[Z] * MagCal->trV[Z]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	edd3 6a26 	vldr	s13, [r3, #152]	@ 0x98
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 8003226:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 8003230:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003234:	ee37 7a27 	vadd.f32	s14, s14, s15
							- MagCal->matB[9][j]));
 8003238:	687a      	ldr	r2, [r7, #4]
 800323a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800323c:	33ee      	adds	r3, #238	@ 0xee
 800323e:	009b      	lsls	r3, r3, #2
 8003240:	4413      	add	r3, r2
 8003242:	edd3 7a00 	vldr	s15, [r3]
 8003246:	ee77 7a67 	vsub.f32	s15, s14, s15
	MagCal->trB = sqrtf(
 800324a:	eef0 7ae7 	vabs.f32	s15, s15
 800324e:	eeb0 0a67 	vmov.f32	s0, s15
 8003252:	f00e fa97 	bl	8011784 <sqrtf>
 8003256:	eef0 7a40 	vmov.f32	s15, s0
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	edc3 7a1c 	vstr	s15, [r3, #112]	@ 0x70

	// calculate the trial normalized fit error as a percentage
	MagCal->trFitErrorpc = 50.0F
			* sqrtf(fabs(MagCal->vecA[j]) / (float) MagCal->MagBufferCount)
 8003260:	687a      	ldr	r2, [r7, #4]
 8003262:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003264:	33f8      	adds	r3, #248	@ 0xf8
 8003266:	009b      	lsls	r3, r3, #2
 8003268:	4413      	add	r3, r2
 800326a:	edd3 7a00 	vldr	s15, [r3]
 800326e:	eeb0 7ae7 	vabs.f32	s14, s15
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	f9b3 3f0a 	ldrsh.w	r3, [r3, #3850]	@ 0xf0a
 8003278:	ee07 3a90 	vmov	s15, r3
 800327c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003280:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003284:	eeb0 0a66 	vmov.f32	s0, s13
 8003288:	f00e fa7c 	bl	8011784 <sqrtf>
 800328c:	eef0 7a40 	vmov.f32	s15, s0
 8003290:	ed9f 7aae 	vldr	s14, [pc, #696]	@ 800354c <fUpdateCalibration10EIG+0x948>
 8003294:	ee67 6a87 	vmul.f32	s13, s15, s14
			/ (MagCal->trB * MagCal->trB);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	ed93 7a1c 	vldr	s14, [r3, #112]	@ 0x70
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	edd3 7a1c 	vldr	s15, [r3, #112]	@ 0x70
 80032a4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80032a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
	MagCal->trFitErrorpc = 50.0F
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	edc3 7a1d 	vstr	s15, [r3, #116]	@ 0x74

	// correct for the measurement matrix offset and scaling and
	// get the computed hard iron offset in uT
	for (k = X; k <= Z; k++) {
 80032b2:	2300      	movs	r3, #0
 80032b4:	627b      	str	r3, [r7, #36]	@ 0x24
 80032b6:	e024      	b.n	8003302 <fUpdateCalibration10EIG+0x6fe>
		MagCal->trV[k] = MagCal->trV[k] * DEFAULTB
 80032b8:	687a      	ldr	r2, [r7, #4]
 80032ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032bc:	3310      	adds	r3, #16
 80032be:	009b      	lsls	r3, r3, #2
 80032c0:	4413      	add	r3, r2
 80032c2:	edd3 7a00 	vldr	s15, [r3]
 80032c6:	ed9f 7aa1 	vldr	s14, [pc, #644]	@ 800354c <fUpdateCalibration10EIG+0x948>
 80032ca:	ee27 7a87 	vmul.f32	s14, s15, s14
				+ (float) iOffset[k] * FXOS8700_UTPERCOUNT;
 80032ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032d0:	005b      	lsls	r3, r3, #1
 80032d2:	3338      	adds	r3, #56	@ 0x38
 80032d4:	443b      	add	r3, r7
 80032d6:	f933 3c2c 	ldrsh.w	r3, [r3, #-44]
 80032da:	ee07 3a90 	vmov	s15, r3
 80032de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80032e2:	eddf 6a9b 	vldr	s13, [pc, #620]	@ 8003550 <fUpdateCalibration10EIG+0x94c>
 80032e6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80032ea:	ee77 7a27 	vadd.f32	s15, s14, s15
		MagCal->trV[k] = MagCal->trV[k] * DEFAULTB
 80032ee:	687a      	ldr	r2, [r7, #4]
 80032f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032f2:	3310      	adds	r3, #16
 80032f4:	009b      	lsls	r3, r3, #2
 80032f6:	4413      	add	r3, r2
 80032f8:	edc3 7a00 	vstr	s15, [r3]
	for (k = X; k <= Z; k++) {
 80032fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032fe:	3301      	adds	r3, #1
 8003300:	627b      	str	r3, [r7, #36]	@ 0x24
 8003302:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003304:	2b02      	cmp	r3, #2
 8003306:	ddd7      	ble.n	80032b8 <fUpdateCalibration10EIG+0x6b4>
	}

	// convert the trial geomagnetic field strength B into uT for
	// un-normalized soft iron matrix A
	MagCal->trB *= DEFAULTB;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	edd3 7a1c 	vldr	s15, [r3, #112]	@ 0x70
 800330e:	ed9f 7a8f 	vldr	s14, [pc, #572]	@ 800354c <fUpdateCalibration10EIG+0x948>
 8003312:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	edc3 7a1c 	vstr	s15, [r3, #112]	@ 0x70

	// normalize the ellipsoid matrix A to unit determinant and
	// correct B by root of this multiplicative factor
	f3x3matrixAeqAxScalar(MagCal->A, powf(det, -(ONETHIRD)));
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	f103 0478 	add.w	r4, r3, #120	@ 0x78
 8003322:	eddf 0a8c 	vldr	s1, [pc, #560]	@ 8003554 <fUpdateCalibration10EIG+0x950>
 8003326:	ed97 0a0d 	vldr	s0, [r7, #52]	@ 0x34
 800332a:	f00e f9d3 	bl	80116d4 <powf>
 800332e:	eef0 7a40 	vmov.f32	s15, s0
 8003332:	eeb0 0a67 	vmov.f32	s0, s15
 8003336:	4620      	mov	r0, r4
 8003338:	f002 fe6e 	bl	8006018 <f3x3matrixAeqAxScalar>
	MagCal->trB *= powf(det, -(ONESIXTH));
 800333c:	eddf 0a86 	vldr	s1, [pc, #536]	@ 8003558 <fUpdateCalibration10EIG+0x954>
 8003340:	ed97 0a0d 	vldr	s0, [r7, #52]	@ 0x34
 8003344:	f00e f9c6 	bl	80116d4 <powf>
 8003348:	eeb0 7a40 	vmov.f32	s14, s0
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	edd3 7a1c 	vldr	s15, [r3, #112]	@ 0x70
 8003352:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	edc3 7a1c 	vstr	s15, [r3, #112]	@ 0x70

	// compute trial invW from the square root of fA (both with normalized determinant)
	// set vecA to the unsorted eigenvalues and matB to the unsorted eigenvectors of matA
	// where matA holds the 3x3 matrix fA in its top left elements
	for (i = 0; i < 3; i++) {
 800335c:	2300      	movs	r3, #0
 800335e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003360:	e022      	b.n	80033a8 <fUpdateCalibration10EIG+0x7a4>
		for (j = 0; j < 3; j++) {
 8003362:	2300      	movs	r3, #0
 8003364:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003366:	e019      	b.n	800339c <fUpdateCalibration10EIG+0x798>
			MagCal->matA[i][j] = MagCal->A[i][j];
 8003368:	6879      	ldr	r1, [r7, #4]
 800336a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800336c:	4613      	mov	r3, r2
 800336e:	005b      	lsls	r3, r3, #1
 8003370:	4413      	add	r3, r2
 8003372:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003374:	4413      	add	r3, r2
 8003376:	331e      	adds	r3, #30
 8003378:	009b      	lsls	r3, r3, #2
 800337a:	440b      	add	r3, r1
 800337c:	6819      	ldr	r1, [r3, #0]
 800337e:	6878      	ldr	r0, [r7, #4]
 8003380:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003382:	4613      	mov	r3, r2
 8003384:	009b      	lsls	r3, r3, #2
 8003386:	4413      	add	r3, r2
 8003388:	005b      	lsls	r3, r3, #1
 800338a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800338c:	4413      	add	r3, r2
 800338e:	3330      	adds	r3, #48	@ 0x30
 8003390:	009b      	lsls	r3, r3, #2
 8003392:	4403      	add	r3, r0
 8003394:	6019      	str	r1, [r3, #0]
		for (j = 0; j < 3; j++) {
 8003396:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003398:	3301      	adds	r3, #1
 800339a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800339c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800339e:	2b02      	cmp	r3, #2
 80033a0:	dde2      	ble.n	8003368 <fUpdateCalibration10EIG+0x764>
	for (i = 0; i < 3; i++) {
 80033a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033a4:	3301      	adds	r3, #1
 80033a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80033a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033aa:	2b02      	cmp	r3, #2
 80033ac:	ddd9      	ble.n	8003362 <fUpdateCalibration10EIG+0x75e>
		}
	}
	eigencompute(MagCal->matA, MagCal->vecA, MagCal->matB, 3);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	f103 00c0 	add.w	r0, r3, #192	@ 0xc0
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	f503 7214 	add.w	r2, r3, #592	@ 0x250
 80033c0:	2303      	movs	r3, #3
 80033c2:	f002 fff5 	bl	80063b0 <eigencompute>

	// set MagCal->matB to be eigenvectors . diag(sqrt(sqrt(eigenvalues))) =
	//   matB . diag(sqrt(sqrt(vecA))
	for (j = 0; j < 3; j++) { // loop over columns j
 80033c6:	2300      	movs	r3, #0
 80033c8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80033ca:	e03e      	b.n	800344a <fUpdateCalibration10EIG+0x846>
		ftmp = sqrtf(sqrtf(fabs(MagCal->vecA[j])));
 80033cc:	687a      	ldr	r2, [r7, #4]
 80033ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033d0:	33f8      	adds	r3, #248	@ 0xf8
 80033d2:	009b      	lsls	r3, r3, #2
 80033d4:	4413      	add	r3, r2
 80033d6:	edd3 7a00 	vldr	s15, [r3]
 80033da:	eef0 7ae7 	vabs.f32	s15, s15
 80033de:	eeb0 0a67 	vmov.f32	s0, s15
 80033e2:	f00e f9cf 	bl	8011784 <sqrtf>
 80033e6:	eef0 7a40 	vmov.f32	s15, s0
 80033ea:	eeb0 0a67 	vmov.f32	s0, s15
 80033ee:	f00e f9c9 	bl	8011784 <sqrtf>
 80033f2:	ed87 0a05 	vstr	s0, [r7, #20]
		for (i = 0; i < 3; i++) { // loop over rows i
 80033f6:	2300      	movs	r3, #0
 80033f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80033fa:	e020      	b.n	800343e <fUpdateCalibration10EIG+0x83a>
			MagCal->matB[i][j] *= ftmp;
 80033fc:	6879      	ldr	r1, [r7, #4]
 80033fe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003400:	4613      	mov	r3, r2
 8003402:	009b      	lsls	r3, r3, #2
 8003404:	4413      	add	r3, r2
 8003406:	005b      	lsls	r3, r3, #1
 8003408:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800340a:	4413      	add	r3, r2
 800340c:	3394      	adds	r3, #148	@ 0x94
 800340e:	009b      	lsls	r3, r3, #2
 8003410:	440b      	add	r3, r1
 8003412:	ed93 7a00 	vldr	s14, [r3]
 8003416:	edd7 7a05 	vldr	s15, [r7, #20]
 800341a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800341e:	6879      	ldr	r1, [r7, #4]
 8003420:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003422:	4613      	mov	r3, r2
 8003424:	009b      	lsls	r3, r3, #2
 8003426:	4413      	add	r3, r2
 8003428:	005b      	lsls	r3, r3, #1
 800342a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800342c:	4413      	add	r3, r2
 800342e:	3394      	adds	r3, #148	@ 0x94
 8003430:	009b      	lsls	r3, r3, #2
 8003432:	440b      	add	r3, r1
 8003434:	edc3 7a00 	vstr	s15, [r3]
		for (i = 0; i < 3; i++) { // loop over rows i
 8003438:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800343a:	3301      	adds	r3, #1
 800343c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800343e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003440:	2b02      	cmp	r3, #2
 8003442:	dddb      	ble.n	80033fc <fUpdateCalibration10EIG+0x7f8>
	for (j = 0; j < 3; j++) { // loop over columns j
 8003444:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003446:	3301      	adds	r3, #1
 8003448:	62bb      	str	r3, [r7, #40]	@ 0x28
 800344a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800344c:	2b02      	cmp	r3, #2
 800344e:	ddbd      	ble.n	80033cc <fUpdateCalibration10EIG+0x7c8>
	}

	// set trinvW to eigenvectors * diag(sqrt(eigenvalues)) * eigenvectors^T =
	//   matB * matB^T = sqrt(fA) (guaranteed symmetric)
	// loop over rows
	for (i = 0; i < 3; i++) {
 8003450:	2300      	movs	r3, #0
 8003452:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003454:	e072      	b.n	800353c <fUpdateCalibration10EIG+0x938>
		// loop over on and above diagonal columns
		for (j = i; j < 3; j++) {
 8003456:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003458:	62bb      	str	r3, [r7, #40]	@ 0x28
 800345a:	e069      	b.n	8003530 <fUpdateCalibration10EIG+0x92c>
			MagCal->trinvW[i][j] = 0.0F;
 800345c:	6879      	ldr	r1, [r7, #4]
 800345e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003460:	4613      	mov	r3, r2
 8003462:	005b      	lsls	r3, r3, #1
 8003464:	4413      	add	r3, r2
 8003466:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003468:	4413      	add	r3, r2
 800346a:	3312      	adds	r3, #18
 800346c:	009b      	lsls	r3, r3, #2
 800346e:	440b      	add	r3, r1
 8003470:	3304      	adds	r3, #4
 8003472:	f04f 0200 	mov.w	r2, #0
 8003476:	601a      	str	r2, [r3, #0]
			// accumulate the matrix product
			for (k = 0; k < 3; k++) {
 8003478:	2300      	movs	r3, #0
 800347a:	627b      	str	r3, [r7, #36]	@ 0x24
 800347c:	e03a      	b.n	80034f4 <fUpdateCalibration10EIG+0x8f0>
				MagCal->trinvW[i][j] += MagCal->matB[i][k] * MagCal->matB[j][k];
 800347e:	6879      	ldr	r1, [r7, #4]
 8003480:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003482:	4613      	mov	r3, r2
 8003484:	005b      	lsls	r3, r3, #1
 8003486:	4413      	add	r3, r2
 8003488:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800348a:	4413      	add	r3, r2
 800348c:	3312      	adds	r3, #18
 800348e:	009b      	lsls	r3, r3, #2
 8003490:	440b      	add	r3, r1
 8003492:	3304      	adds	r3, #4
 8003494:	ed93 7a00 	vldr	s14, [r3]
 8003498:	6879      	ldr	r1, [r7, #4]
 800349a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800349c:	4613      	mov	r3, r2
 800349e:	009b      	lsls	r3, r3, #2
 80034a0:	4413      	add	r3, r2
 80034a2:	005b      	lsls	r3, r3, #1
 80034a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80034a6:	4413      	add	r3, r2
 80034a8:	3394      	adds	r3, #148	@ 0x94
 80034aa:	009b      	lsls	r3, r3, #2
 80034ac:	440b      	add	r3, r1
 80034ae:	edd3 6a00 	vldr	s13, [r3]
 80034b2:	6879      	ldr	r1, [r7, #4]
 80034b4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80034b6:	4613      	mov	r3, r2
 80034b8:	009b      	lsls	r3, r3, #2
 80034ba:	4413      	add	r3, r2
 80034bc:	005b      	lsls	r3, r3, #1
 80034be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80034c0:	4413      	add	r3, r2
 80034c2:	3394      	adds	r3, #148	@ 0x94
 80034c4:	009b      	lsls	r3, r3, #2
 80034c6:	440b      	add	r3, r1
 80034c8:	edd3 7a00 	vldr	s15, [r3]
 80034cc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80034d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034d4:	6879      	ldr	r1, [r7, #4]
 80034d6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80034d8:	4613      	mov	r3, r2
 80034da:	005b      	lsls	r3, r3, #1
 80034dc:	4413      	add	r3, r2
 80034de:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80034e0:	4413      	add	r3, r2
 80034e2:	3312      	adds	r3, #18
 80034e4:	009b      	lsls	r3, r3, #2
 80034e6:	440b      	add	r3, r1
 80034e8:	3304      	adds	r3, #4
 80034ea:	edc3 7a00 	vstr	s15, [r3]
			for (k = 0; k < 3; k++) {
 80034ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034f0:	3301      	adds	r3, #1
 80034f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80034f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034f6:	2b02      	cmp	r3, #2
 80034f8:	ddc1      	ble.n	800347e <fUpdateCalibration10EIG+0x87a>
			}
			// copy to below diagonal element
			MagCal->trinvW[j][i] = MagCal->trinvW[i][j];
 80034fa:	6879      	ldr	r1, [r7, #4]
 80034fc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80034fe:	4613      	mov	r3, r2
 8003500:	005b      	lsls	r3, r3, #1
 8003502:	4413      	add	r3, r2
 8003504:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003506:	4413      	add	r3, r2
 8003508:	3312      	adds	r3, #18
 800350a:	009b      	lsls	r3, r3, #2
 800350c:	440b      	add	r3, r1
 800350e:	3304      	adds	r3, #4
 8003510:	6819      	ldr	r1, [r3, #0]
 8003512:	6878      	ldr	r0, [r7, #4]
 8003514:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003516:	4613      	mov	r3, r2
 8003518:	005b      	lsls	r3, r3, #1
 800351a:	4413      	add	r3, r2
 800351c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800351e:	4413      	add	r3, r2
 8003520:	3312      	adds	r3, #18
 8003522:	009b      	lsls	r3, r3, #2
 8003524:	4403      	add	r3, r0
 8003526:	3304      	adds	r3, #4
 8003528:	6019      	str	r1, [r3, #0]
		for (j = i; j < 3; j++) {
 800352a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800352c:	3301      	adds	r3, #1
 800352e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003530:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003532:	2b02      	cmp	r3, #2
 8003534:	dd92      	ble.n	800345c <fUpdateCalibration10EIG+0x858>
	for (i = 0; i < 3; i++) {
 8003536:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003538:	3301      	adds	r3, #1
 800353a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800353c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800353e:	2b02      	cmp	r3, #2
 8003540:	dd89      	ble.n	8003456 <fUpdateCalibration10EIG+0x852>
		}
	}
}
 8003542:	bf00      	nop
 8003544:	bf00      	nop
 8003546:	373c      	adds	r7, #60	@ 0x3c
 8003548:	46bd      	mov	sp, r7
 800354a:	bd90      	pop	{r4, r7, pc}
 800354c:	42480000 	.word	0x42480000
 8003550:	3dcccccd 	.word	0x3dcccccd
 8003554:	beaaaaab 	.word	0xbeaaaaab
 8003558:	be2aaaab 	.word	0xbe2aaaab

0800355c <LL_RCC_LSE_SetDriveCapability>:
{
 800355c:	b480      	push	{r7}
 800355e:	b083      	sub	sp, #12
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8003564:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003568:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800356c:	f023 0218 	bic.w	r2, r3, #24
 8003570:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	4313      	orrs	r3, r2
 8003578:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 800357c:	bf00      	nop
 800357e:	370c      	adds	r7, #12
 8003580:	46bd      	mov	sp, r7
 8003582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003586:	4770      	bx	lr

08003588 <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_TSC
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8003588:	b480      	push	{r7}
 800358a:	b085      	sub	sp, #20
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8003590:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003594:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003596:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	4313      	orrs	r3, r2
 800359e:	648b      	str	r3, [r1, #72]	@ 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80035a0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80035a4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	4013      	ands	r3, r2
 80035aa:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80035ac:	68fb      	ldr	r3, [r7, #12]
}
 80035ae:	bf00      	nop
 80035b0:	3714      	adds	r7, #20
 80035b2:	46bd      	mov	sp, r7
 80035b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b8:	4770      	bx	lr

080035ba <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80035ba:	b480      	push	{r7}
 80035bc:	b085      	sub	sp, #20
 80035be:	af00      	add	r7, sp, #0
 80035c0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80035c2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80035c6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80035c8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	4313      	orrs	r3, r2
 80035d0:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80035d2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80035d6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	4013      	ands	r3, r2
 80035dc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80035de:	68fb      	ldr	r3, [r7, #12]
}
 80035e0:	bf00      	nop
 80035e2:	3714      	adds	r7, #20
 80035e4:	46bd      	mov	sp, r7
 80035e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ea:	4770      	bx	lr

080035ec <LSM9DS1_WriteRegister>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void LSM9DS1_WriteRegister(uint8_t addr, uint8_t reg, uint8_t value) {
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b086      	sub	sp, #24
 80035f0:	af04      	add	r7, sp, #16
 80035f2:	4603      	mov	r3, r0
 80035f4:	71fb      	strb	r3, [r7, #7]
 80035f6:	460b      	mov	r3, r1
 80035f8:	71bb      	strb	r3, [r7, #6]
 80035fa:	4613      	mov	r3, r2
 80035fc:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Write(&hi2c1, addr, reg, I2C_MEMADD_SIZE_8BIT, &value, 1,
 80035fe:	79fb      	ldrb	r3, [r7, #7]
 8003600:	b299      	uxth	r1, r3
 8003602:	79bb      	ldrb	r3, [r7, #6]
 8003604:	b29a      	uxth	r2, r3
 8003606:	f04f 33ff 	mov.w	r3, #4294967295
 800360a:	9302      	str	r3, [sp, #8]
 800360c:	2301      	movs	r3, #1
 800360e:	9301      	str	r3, [sp, #4]
 8003610:	1d7b      	adds	r3, r7, #5
 8003612:	9300      	str	r3, [sp, #0]
 8003614:	2301      	movs	r3, #1
 8003616:	4803      	ldr	r0, [pc, #12]	@ (8003624 <LSM9DS1_WriteRegister+0x38>)
 8003618:	f005 f958 	bl	80088cc <HAL_I2C_Mem_Write>
	HAL_MAX_DELAY);
}
 800361c:	bf00      	nop
 800361e:	3708      	adds	r7, #8
 8003620:	46bd      	mov	sp, r7
 8003622:	bd80      	pop	{r7, pc}
 8003624:	200001fc 	.word	0x200001fc

08003628 <LSM9DS1_Init>:
	HAL_I2C_Mem_Read(&hi2c1, addr, reg, I2C_MEMADD_SIZE_8BIT, &value, 1,
	HAL_MAX_DELAY);
	return value;
}

void LSM9DS1_Init() {
 8003628:	b580      	push	{r7, lr}
 800362a:	af00      	add	r7, sp, #0
	//sensor reset
	LSM9DS1_WriteRegister(LSM9DS1_ADDR, CTRL_REG8, 0x05);
 800362c:	2205      	movs	r2, #5
 800362e:	2122      	movs	r1, #34	@ 0x22
 8003630:	20d4      	movs	r0, #212	@ 0xd4
 8003632:	f7ff ffdb 	bl	80035ec <LSM9DS1_WriteRegister>
	HAL_Delay(10);
 8003636:	200a      	movs	r0, #10
 8003638:	f7fd fcc5 	bl	8000fc6 <HAL_Delay>

	//low-power setting
	//gyro setting
//	LSM9DS1_WriteRegister(LSM9DS1_ADDR, CTRL_REG1_G, 0x40); //gyro ODR 59.5 Hz(low-power mode), full scale 245dps(basic)
	LSM9DS1_WriteRegister(LSM9DS1_ADDR, CTRL_REG1_G, 0x60); //ODR_G = 119Hz, FS = 245dps
 800363c:	2260      	movs	r2, #96	@ 0x60
 800363e:	2110      	movs	r1, #16
 8003640:	20d4      	movs	r0, #212	@ 0xd4
 8003642:	f7ff ffd3 	bl	80035ec <LSM9DS1_WriteRegister>
//	LSM9DS1_WriteRegister(LSM9DS1_ADDR, CTRL_REG1_G, 0x6C); //ODR_G = 119Hz, FS = 2000dps
	LSM9DS1_WriteRegister(LSM9DS1_ADDR, CTRL_REG3_G, 0x80); //gyro low-power mode activate
 8003646:	2280      	movs	r2, #128	@ 0x80
 8003648:	2112      	movs	r1, #18
 800364a:	20d4      	movs	r0, #212	@ 0xd4
 800364c:	f7ff ffce 	bl	80035ec <LSM9DS1_WriteRegister>
	HAL_Delay(10);
 8003650:	200a      	movs	r0, #10
 8003652:	f7fd fcb8 	bl	8000fc6 <HAL_Delay>

	//accel setting
//	LSM9DS1_WriteRegister(LSM9DS1_ADDR, CTRL_REG6_XL, 0x20); //accel ODR 10Hz, full scale 2g(basic)
	LSM9DS1_WriteRegister(LSM9DS1_ADDR, CTRL_REG6_XL, 0x60); // ODR_XL = 119Hz, FS = ±2g
 8003656:	2260      	movs	r2, #96	@ 0x60
 8003658:	2120      	movs	r1, #32
 800365a:	20d4      	movs	r0, #212	@ 0xd4
 800365c:	f7ff ffc6 	bl	80035ec <LSM9DS1_WriteRegister>
//	LSM9DS1_WriteRegister(LSM9DS1_ADDR, CTRL_REG6_XL, 0x58); // ODR_XL = 119Hz, FS = ±4g
//	LSM9DS1_WriteRegister(LSM9DS1_ADDR, CTRL_REG6_XL, 0x68); // ODR_XL = 119Hz, FS = ±8g
	LSM9DS1_WriteRegister(LSM9DS1_ADDR, CTRL_REG7_XL, 0x00); //accel low-power mode activate
 8003660:	2200      	movs	r2, #0
 8003662:	2121      	movs	r1, #33	@ 0x21
 8003664:	20d4      	movs	r0, #212	@ 0xd4
 8003666:	f7ff ffc1 	bl	80035ec <LSM9DS1_WriteRegister>
	HAL_Delay(10);
 800366a:	200a      	movs	r0, #10
 800366c:	f7fd fcab 	bl	8000fc6 <HAL_Delay>

	//mag setting
//	LSM9DS1_WriteRegister(MAG_ADDR, CTRL_REG1_M, 0x10); // mag ODR 10Hz, temp-comp activate
	LSM9DS1_WriteRegister(MAG_ADDR, CTRL_REG1_M, 0x7C); // OM = 11 (ultra-high), DO = 110 (80Hz)
 8003670:	227c      	movs	r2, #124	@ 0x7c
 8003672:	2120      	movs	r1, #32
 8003674:	203c      	movs	r0, #60	@ 0x3c
 8003676:	f7ff ffb9 	bl	80035ec <LSM9DS1_WriteRegister>
	LSM9DS1_WriteRegister(MAG_ADDR, CTRL_REG3_M, 0x00); // mag Continuous-conversion mode activate
 800367a:	2200      	movs	r2, #0
 800367c:	2122      	movs	r1, #34	@ 0x22
 800367e:	203c      	movs	r0, #60	@ 0x3c
 8003680:	f7ff ffb4 	bl	80035ec <LSM9DS1_WriteRegister>
	HAL_Delay(10);
 8003684:	200a      	movs	r0, #10
 8003686:	f7fd fc9e 	bl	8000fc6 <HAL_Delay>
//
//	//mag setting
//	LSM9DS1_WriteRegister(MAG_ADDR, CTRL_REG1_M, 0x70); // mag ODR 80Hz, temp-comp activate
//	LSM9DS1_WriteRegister(MAG_ADDR, CTRL_REG3_M, 0x00); // mag Continuous-conversion mode activate
//	HAL_Delay(10);
}
 800368a:	bf00      	nop
 800368c:	bd80      	pop	{r7, pc}
	...

08003690 <micros>:

uint32_t micros(void) {
 8003690:	b480      	push	{r7}
 8003692:	af00      	add	r7, sp, #0
	return micro_time = __HAL_TIM_GET_COUNTER(&htim2);
 8003694:	4b05      	ldr	r3, [pc, #20]	@ (80036ac <micros+0x1c>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800369a:	4a05      	ldr	r2, [pc, #20]	@ (80036b0 <micros+0x20>)
 800369c:	6013      	str	r3, [r2, #0]
 800369e:	4b04      	ldr	r3, [pc, #16]	@ (80036b0 <micros+0x20>)
 80036a0:	681b      	ldr	r3, [r3, #0]
}
 80036a2:	4618      	mov	r0, r3
 80036a4:	46bd      	mov	sp, r7
 80036a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036aa:	4770      	bx	lr
 80036ac:	20000310 	.word	0x20000310
 80036b0:	20000488 	.word	0x20000488

080036b4 <invSqrt>:

float invSqrt(float x) {
 80036b4:	b480      	push	{r7}
 80036b6:	b087      	sub	sp, #28
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	ed87 0a01 	vstr	s0, [r7, #4]
	float halfx = 0.5f * x;
 80036be:	edd7 7a01 	vldr	s15, [r7, #4]
 80036c2:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80036c6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80036ca:	edc7 7a05 	vstr	s15, [r7, #20]
	float y = x;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	613b      	str	r3, [r7, #16]
	long i = *(long*) &y;
 80036d2:	f107 0310 	add.w	r3, r7, #16
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	60fb      	str	r3, [r7, #12]
	i = 0x5f3759df - (i >> 1);
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	105a      	asrs	r2, r3, #1
 80036de:	4b12      	ldr	r3, [pc, #72]	@ (8003728 <invSqrt+0x74>)
 80036e0:	1a9b      	subs	r3, r3, r2
 80036e2:	60fb      	str	r3, [r7, #12]
	y = *(float*) &i;
 80036e4:	f107 030c 	add.w	r3, r7, #12
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	613b      	str	r3, [r7, #16]
	y = y * (1.5f - (halfx * y * y));
 80036ec:	ed97 7a04 	vldr	s14, [r7, #16]
 80036f0:	edd7 7a05 	vldr	s15, [r7, #20]
 80036f4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80036f8:	edd7 7a04 	vldr	s15, [r7, #16]
 80036fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003700:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 8003704:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003708:	edd7 7a04 	vldr	s15, [r7, #16]
 800370c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003710:	edc7 7a04 	vstr	s15, [r7, #16]
	return y;
 8003714:	693b      	ldr	r3, [r7, #16]
 8003716:	ee07 3a90 	vmov	s15, r3
}
 800371a:	eeb0 0a67 	vmov.f32	s0, s15
 800371e:	371c      	adds	r7, #28
 8003720:	46bd      	mov	sp, r7
 8003722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003726:	4770      	bx	lr
 8003728:	5f3759df 	.word	0x5f3759df

0800372c <vector_dot>:

float vector_dot(float a[3], float b[3]) {
 800372c:	b480      	push	{r7}
 800372e:	b083      	sub	sp, #12
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
 8003734:	6039      	str	r1, [r7, #0]
	return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	ed93 7a00 	vldr	s14, [r3]
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	edd3 7a00 	vldr	s15, [r3]
 8003742:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	3304      	adds	r3, #4
 800374a:	edd3 6a00 	vldr	s13, [r3]
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	3304      	adds	r3, #4
 8003752:	edd3 7a00 	vldr	s15, [r3]
 8003756:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800375a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	3308      	adds	r3, #8
 8003762:	edd3 6a00 	vldr	s13, [r3]
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	3308      	adds	r3, #8
 800376a:	edd3 7a00 	vldr	s15, [r3]
 800376e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003772:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8003776:	eeb0 0a67 	vmov.f32	s0, s15
 800377a:	370c      	adds	r7, #12
 800377c:	46bd      	mov	sp, r7
 800377e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003782:	4770      	bx	lr

08003784 <vector_normalize>:

void vector_normalize(float a[3]) {
 8003784:	b580      	push	{r7, lr}
 8003786:	b084      	sub	sp, #16
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
	float mag = sqrt(vector_dot(a, a));
 800378c:	6879      	ldr	r1, [r7, #4]
 800378e:	6878      	ldr	r0, [r7, #4]
 8003790:	f7ff ffcc 	bl	800372c <vector_dot>
 8003794:	ee10 3a10 	vmov	r3, s0
 8003798:	4618      	mov	r0, r3
 800379a:	f7fc fead 	bl	80004f8 <__aeabi_f2d>
 800379e:	4602      	mov	r2, r0
 80037a0:	460b      	mov	r3, r1
 80037a2:	ec43 2b10 	vmov	d0, r2, r3
 80037a6:	f00d ff67 	bl	8011678 <sqrt>
 80037aa:	ec53 2b10 	vmov	r2, r3, d0
 80037ae:	4610      	mov	r0, r2
 80037b0:	4619      	mov	r1, r3
 80037b2:	f7fd f9a9 	bl	8000b08 <__aeabi_d2f>
 80037b6:	4603      	mov	r3, r0
 80037b8:	60fb      	str	r3, [r7, #12]
	a[0] /= mag;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	edd3 6a00 	vldr	s13, [r3]
 80037c0:	ed97 7a03 	vldr	s14, [r7, #12]
 80037c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	edc3 7a00 	vstr	s15, [r3]
	a[1] /= mag;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	3304      	adds	r3, #4
 80037d2:	edd3 6a00 	vldr	s13, [r3]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	3304      	adds	r3, #4
 80037da:	ed97 7a03 	vldr	s14, [r7, #12]
 80037de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80037e2:	edc3 7a00 	vstr	s15, [r3]
	a[2] /= mag;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	3308      	adds	r3, #8
 80037ea:	edd3 6a00 	vldr	s13, [r3]
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	3308      	adds	r3, #8
 80037f2:	ed97 7a03 	vldr	s14, [r7, #12]
 80037f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80037fa:	edc3 7a00 	vstr	s15, [r3]
}
 80037fe:	bf00      	nop
 8003800:	3710      	adds	r7, #16
 8003802:	46bd      	mov	sp, r7
 8003804:	bd80      	pop	{r7, pc}
	...

08003808 <MadgwickAHRSupdate>:

void MadgwickAHRSupdate(float gx, float gy, float gz, float ax, float ay,
		float az, float mx, float my, float mz) {
 8003808:	b580      	push	{r7, lr}
 800380a:	b08a      	sub	sp, #40	@ 0x28
 800380c:	af00      	add	r7, sp, #0
 800380e:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24
 8003812:	edc7 0a08 	vstr	s1, [r7, #32]
 8003816:	ed87 1a07 	vstr	s2, [r7, #28]
 800381a:	edc7 1a06 	vstr	s3, [r7, #24]
 800381e:	ed87 2a05 	vstr	s4, [r7, #20]
 8003822:	edc7 2a04 	vstr	s5, [r7, #16]
 8003826:	ed87 3a03 	vstr	s6, [r7, #12]
 800382a:	edc7 3a02 	vstr	s7, [r7, #8]
 800382e:	ed87 4a01 	vstr	s8, [r7, #4]

	qDot1 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz);
 8003832:	4bda      	ldr	r3, [pc, #872]	@ (8003b9c <MadgwickAHRSupdate+0x394>)
 8003834:	edd3 7a00 	vldr	s15, [r3]
 8003838:	eeb1 7a67 	vneg.f32	s14, s15
 800383c:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8003840:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003844:	4bd6      	ldr	r3, [pc, #856]	@ (8003ba0 <MadgwickAHRSupdate+0x398>)
 8003846:	edd3 6a00 	vldr	s13, [r3]
 800384a:	edd7 7a08 	vldr	s15, [r7, #32]
 800384e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003852:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003856:	4bd3      	ldr	r3, [pc, #844]	@ (8003ba4 <MadgwickAHRSupdate+0x39c>)
 8003858:	edd3 6a00 	vldr	s13, [r3]
 800385c:	edd7 7a07 	vldr	s15, [r7, #28]
 8003860:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003864:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003868:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800386c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003870:	4bcd      	ldr	r3, [pc, #820]	@ (8003ba8 <MadgwickAHRSupdate+0x3a0>)
 8003872:	edc3 7a00 	vstr	s15, [r3]
	qDot2 = 0.5f * (q0 * gx + q2 * gz - q3 * gy);
 8003876:	4bcd      	ldr	r3, [pc, #820]	@ (8003bac <MadgwickAHRSupdate+0x3a4>)
 8003878:	ed93 7a00 	vldr	s14, [r3]
 800387c:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8003880:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003884:	4bc6      	ldr	r3, [pc, #792]	@ (8003ba0 <MadgwickAHRSupdate+0x398>)
 8003886:	edd3 6a00 	vldr	s13, [r3]
 800388a:	edd7 7a07 	vldr	s15, [r7, #28]
 800388e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003892:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003896:	4bc3      	ldr	r3, [pc, #780]	@ (8003ba4 <MadgwickAHRSupdate+0x39c>)
 8003898:	edd3 6a00 	vldr	s13, [r3]
 800389c:	edd7 7a08 	vldr	s15, [r7, #32]
 80038a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80038a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80038a8:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80038ac:	ee67 7a87 	vmul.f32	s15, s15, s14
 80038b0:	4bbf      	ldr	r3, [pc, #764]	@ (8003bb0 <MadgwickAHRSupdate+0x3a8>)
 80038b2:	edc3 7a00 	vstr	s15, [r3]
	qDot3 = 0.5f * (q0 * gy - q1 * gz + q3 * gx);
 80038b6:	4bbd      	ldr	r3, [pc, #756]	@ (8003bac <MadgwickAHRSupdate+0x3a4>)
 80038b8:	ed93 7a00 	vldr	s14, [r3]
 80038bc:	edd7 7a08 	vldr	s15, [r7, #32]
 80038c0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80038c4:	4bb5      	ldr	r3, [pc, #724]	@ (8003b9c <MadgwickAHRSupdate+0x394>)
 80038c6:	edd3 6a00 	vldr	s13, [r3]
 80038ca:	edd7 7a07 	vldr	s15, [r7, #28]
 80038ce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80038d2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80038d6:	4bb3      	ldr	r3, [pc, #716]	@ (8003ba4 <MadgwickAHRSupdate+0x39c>)
 80038d8:	edd3 6a00 	vldr	s13, [r3]
 80038dc:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80038e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80038e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80038e8:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80038ec:	ee67 7a87 	vmul.f32	s15, s15, s14
 80038f0:	4bb0      	ldr	r3, [pc, #704]	@ (8003bb4 <MadgwickAHRSupdate+0x3ac>)
 80038f2:	edc3 7a00 	vstr	s15, [r3]
	qDot4 = 0.5f * (q0 * gz + q1 * gy - q2 * gx);
 80038f6:	4bad      	ldr	r3, [pc, #692]	@ (8003bac <MadgwickAHRSupdate+0x3a4>)
 80038f8:	ed93 7a00 	vldr	s14, [r3]
 80038fc:	edd7 7a07 	vldr	s15, [r7, #28]
 8003900:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003904:	4ba5      	ldr	r3, [pc, #660]	@ (8003b9c <MadgwickAHRSupdate+0x394>)
 8003906:	edd3 6a00 	vldr	s13, [r3]
 800390a:	edd7 7a08 	vldr	s15, [r7, #32]
 800390e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003912:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003916:	4ba2      	ldr	r3, [pc, #648]	@ (8003ba0 <MadgwickAHRSupdate+0x398>)
 8003918:	edd3 6a00 	vldr	s13, [r3]
 800391c:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8003920:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003924:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003928:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800392c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003930:	4ba1      	ldr	r3, [pc, #644]	@ (8003bb8 <MadgwickAHRSupdate+0x3b0>)
 8003932:	edc3 7a00 	vstr	s15, [r3]

	if (!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f))) {
 8003936:	edd7 7a06 	vldr	s15, [r7, #24]
 800393a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800393e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003942:	d10e      	bne.n	8003962 <MadgwickAHRSupdate+0x15a>
 8003944:	edd7 7a05 	vldr	s15, [r7, #20]
 8003948:	eef5 7a40 	vcmp.f32	s15, #0.0
 800394c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003950:	d107      	bne.n	8003962 <MadgwickAHRSupdate+0x15a>
 8003952:	edd7 7a04 	vldr	s15, [r7, #16]
 8003956:	eef5 7a40 	vcmp.f32	s15, #0.0
 800395a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800395e:	f000 874b 	beq.w	80047f8 <MadgwickAHRSupdate+0xff0>

		recipNorm = invSqrt(ax * ax + ay * ay + az * az);
 8003962:	edd7 7a06 	vldr	s15, [r7, #24]
 8003966:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800396a:	edd7 7a05 	vldr	s15, [r7, #20]
 800396e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003972:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003976:	edd7 7a04 	vldr	s15, [r7, #16]
 800397a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800397e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003982:	eeb0 0a67 	vmov.f32	s0, s15
 8003986:	f7ff fe95 	bl	80036b4 <invSqrt>
 800398a:	eef0 7a40 	vmov.f32	s15, s0
 800398e:	4b8b      	ldr	r3, [pc, #556]	@ (8003bbc <MadgwickAHRSupdate+0x3b4>)
 8003990:	edc3 7a00 	vstr	s15, [r3]
		ax *= recipNorm;
 8003994:	4b89      	ldr	r3, [pc, #548]	@ (8003bbc <MadgwickAHRSupdate+0x3b4>)
 8003996:	edd3 7a00 	vldr	s15, [r3]
 800399a:	ed97 7a06 	vldr	s14, [r7, #24]
 800399e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039a2:	edc7 7a06 	vstr	s15, [r7, #24]
		ay *= recipNorm;
 80039a6:	4b85      	ldr	r3, [pc, #532]	@ (8003bbc <MadgwickAHRSupdate+0x3b4>)
 80039a8:	edd3 7a00 	vldr	s15, [r3]
 80039ac:	ed97 7a05 	vldr	s14, [r7, #20]
 80039b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039b4:	edc7 7a05 	vstr	s15, [r7, #20]
		az *= recipNorm;
 80039b8:	4b80      	ldr	r3, [pc, #512]	@ (8003bbc <MadgwickAHRSupdate+0x3b4>)
 80039ba:	edd3 7a00 	vldr	s15, [r3]
 80039be:	ed97 7a04 	vldr	s14, [r7, #16]
 80039c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039c6:	edc7 7a04 	vstr	s15, [r7, #16]

		recipNorm = invSqrt(mx * mx + my * my + mz * mz);
 80039ca:	edd7 7a03 	vldr	s15, [r7, #12]
 80039ce:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80039d2:	edd7 7a02 	vldr	s15, [r7, #8]
 80039d6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80039da:	ee37 7a27 	vadd.f32	s14, s14, s15
 80039de:	edd7 7a01 	vldr	s15, [r7, #4]
 80039e2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80039e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80039ea:	eeb0 0a67 	vmov.f32	s0, s15
 80039ee:	f7ff fe61 	bl	80036b4 <invSqrt>
 80039f2:	eef0 7a40 	vmov.f32	s15, s0
 80039f6:	4b71      	ldr	r3, [pc, #452]	@ (8003bbc <MadgwickAHRSupdate+0x3b4>)
 80039f8:	edc3 7a00 	vstr	s15, [r3]
		mx *= recipNorm;
 80039fc:	4b6f      	ldr	r3, [pc, #444]	@ (8003bbc <MadgwickAHRSupdate+0x3b4>)
 80039fe:	edd3 7a00 	vldr	s15, [r3]
 8003a02:	ed97 7a03 	vldr	s14, [r7, #12]
 8003a06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a0a:	edc7 7a03 	vstr	s15, [r7, #12]
		my *= recipNorm;
 8003a0e:	4b6b      	ldr	r3, [pc, #428]	@ (8003bbc <MadgwickAHRSupdate+0x3b4>)
 8003a10:	edd3 7a00 	vldr	s15, [r3]
 8003a14:	ed97 7a02 	vldr	s14, [r7, #8]
 8003a18:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a1c:	edc7 7a02 	vstr	s15, [r7, #8]
		mz *= recipNorm;
 8003a20:	4b66      	ldr	r3, [pc, #408]	@ (8003bbc <MadgwickAHRSupdate+0x3b4>)
 8003a22:	edd3 7a00 	vldr	s15, [r3]
 8003a26:	ed97 7a01 	vldr	s14, [r7, #4]
 8003a2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a2e:	edc7 7a01 	vstr	s15, [r7, #4]

		_2q0mx = 2.0f * q0 * mx;
 8003a32:	4b5e      	ldr	r3, [pc, #376]	@ (8003bac <MadgwickAHRSupdate+0x3a4>)
 8003a34:	edd3 7a00 	vldr	s15, [r3]
 8003a38:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8003a3c:	edd7 7a03 	vldr	s15, [r7, #12]
 8003a40:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a44:	4b5e      	ldr	r3, [pc, #376]	@ (8003bc0 <MadgwickAHRSupdate+0x3b8>)
 8003a46:	edc3 7a00 	vstr	s15, [r3]
		_2q0my = 2.0f * q0 * my;
 8003a4a:	4b58      	ldr	r3, [pc, #352]	@ (8003bac <MadgwickAHRSupdate+0x3a4>)
 8003a4c:	edd3 7a00 	vldr	s15, [r3]
 8003a50:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8003a54:	edd7 7a02 	vldr	s15, [r7, #8]
 8003a58:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a5c:	4b59      	ldr	r3, [pc, #356]	@ (8003bc4 <MadgwickAHRSupdate+0x3bc>)
 8003a5e:	edc3 7a00 	vstr	s15, [r3]
		_2q0mz = 2.0f * q0 * mz;
 8003a62:	4b52      	ldr	r3, [pc, #328]	@ (8003bac <MadgwickAHRSupdate+0x3a4>)
 8003a64:	edd3 7a00 	vldr	s15, [r3]
 8003a68:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8003a6c:	edd7 7a01 	vldr	s15, [r7, #4]
 8003a70:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a74:	4b54      	ldr	r3, [pc, #336]	@ (8003bc8 <MadgwickAHRSupdate+0x3c0>)
 8003a76:	edc3 7a00 	vstr	s15, [r3]
		_2q1mx = 2.0f * q1 * mx;
 8003a7a:	4b48      	ldr	r3, [pc, #288]	@ (8003b9c <MadgwickAHRSupdate+0x394>)
 8003a7c:	edd3 7a00 	vldr	s15, [r3]
 8003a80:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8003a84:	edd7 7a03 	vldr	s15, [r7, #12]
 8003a88:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a8c:	4b4f      	ldr	r3, [pc, #316]	@ (8003bcc <MadgwickAHRSupdate+0x3c4>)
 8003a8e:	edc3 7a00 	vstr	s15, [r3]
		_2q0 = 2.0f * q0;
 8003a92:	4b46      	ldr	r3, [pc, #280]	@ (8003bac <MadgwickAHRSupdate+0x3a4>)
 8003a94:	edd3 7a00 	vldr	s15, [r3]
 8003a98:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003a9c:	4b4c      	ldr	r3, [pc, #304]	@ (8003bd0 <MadgwickAHRSupdate+0x3c8>)
 8003a9e:	edc3 7a00 	vstr	s15, [r3]
		_2q1 = 2.0f * q1;
 8003aa2:	4b3e      	ldr	r3, [pc, #248]	@ (8003b9c <MadgwickAHRSupdate+0x394>)
 8003aa4:	edd3 7a00 	vldr	s15, [r3]
 8003aa8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003aac:	4b49      	ldr	r3, [pc, #292]	@ (8003bd4 <MadgwickAHRSupdate+0x3cc>)
 8003aae:	edc3 7a00 	vstr	s15, [r3]
		_2q2 = 2.0f * q2;
 8003ab2:	4b3b      	ldr	r3, [pc, #236]	@ (8003ba0 <MadgwickAHRSupdate+0x398>)
 8003ab4:	edd3 7a00 	vldr	s15, [r3]
 8003ab8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003abc:	4b46      	ldr	r3, [pc, #280]	@ (8003bd8 <MadgwickAHRSupdate+0x3d0>)
 8003abe:	edc3 7a00 	vstr	s15, [r3]
		_2q3 = 2.0f * q3;
 8003ac2:	4b38      	ldr	r3, [pc, #224]	@ (8003ba4 <MadgwickAHRSupdate+0x39c>)
 8003ac4:	edd3 7a00 	vldr	s15, [r3]
 8003ac8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003acc:	4b43      	ldr	r3, [pc, #268]	@ (8003bdc <MadgwickAHRSupdate+0x3d4>)
 8003ace:	edc3 7a00 	vstr	s15, [r3]
		_2q0q2 = 2.0f * q0 * q2;
 8003ad2:	4b36      	ldr	r3, [pc, #216]	@ (8003bac <MadgwickAHRSupdate+0x3a4>)
 8003ad4:	edd3 7a00 	vldr	s15, [r3]
 8003ad8:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8003adc:	4b30      	ldr	r3, [pc, #192]	@ (8003ba0 <MadgwickAHRSupdate+0x398>)
 8003ade:	edd3 7a00 	vldr	s15, [r3]
 8003ae2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ae6:	4b3e      	ldr	r3, [pc, #248]	@ (8003be0 <MadgwickAHRSupdate+0x3d8>)
 8003ae8:	edc3 7a00 	vstr	s15, [r3]
		_2q2q3 = 2.0f * q2 * q3;
 8003aec:	4b2c      	ldr	r3, [pc, #176]	@ (8003ba0 <MadgwickAHRSupdate+0x398>)
 8003aee:	edd3 7a00 	vldr	s15, [r3]
 8003af2:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8003af6:	4b2b      	ldr	r3, [pc, #172]	@ (8003ba4 <MadgwickAHRSupdate+0x39c>)
 8003af8:	edd3 7a00 	vldr	s15, [r3]
 8003afc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b00:	4b38      	ldr	r3, [pc, #224]	@ (8003be4 <MadgwickAHRSupdate+0x3dc>)
 8003b02:	edc3 7a00 	vstr	s15, [r3]
		q0q0 = q0 * q0;
 8003b06:	4b29      	ldr	r3, [pc, #164]	@ (8003bac <MadgwickAHRSupdate+0x3a4>)
 8003b08:	ed93 7a00 	vldr	s14, [r3]
 8003b0c:	4b27      	ldr	r3, [pc, #156]	@ (8003bac <MadgwickAHRSupdate+0x3a4>)
 8003b0e:	edd3 7a00 	vldr	s15, [r3]
 8003b12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b16:	4b34      	ldr	r3, [pc, #208]	@ (8003be8 <MadgwickAHRSupdate+0x3e0>)
 8003b18:	edc3 7a00 	vstr	s15, [r3]
		q0q1 = q0 * q1;
 8003b1c:	4b23      	ldr	r3, [pc, #140]	@ (8003bac <MadgwickAHRSupdate+0x3a4>)
 8003b1e:	ed93 7a00 	vldr	s14, [r3]
 8003b22:	4b1e      	ldr	r3, [pc, #120]	@ (8003b9c <MadgwickAHRSupdate+0x394>)
 8003b24:	edd3 7a00 	vldr	s15, [r3]
 8003b28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b2c:	4b2f      	ldr	r3, [pc, #188]	@ (8003bec <MadgwickAHRSupdate+0x3e4>)
 8003b2e:	edc3 7a00 	vstr	s15, [r3]
		q0q2 = q0 * q2;
 8003b32:	4b1e      	ldr	r3, [pc, #120]	@ (8003bac <MadgwickAHRSupdate+0x3a4>)
 8003b34:	ed93 7a00 	vldr	s14, [r3]
 8003b38:	4b19      	ldr	r3, [pc, #100]	@ (8003ba0 <MadgwickAHRSupdate+0x398>)
 8003b3a:	edd3 7a00 	vldr	s15, [r3]
 8003b3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b42:	4b2b      	ldr	r3, [pc, #172]	@ (8003bf0 <MadgwickAHRSupdate+0x3e8>)
 8003b44:	edc3 7a00 	vstr	s15, [r3]
		q0q3 = q0 * q3;
 8003b48:	4b18      	ldr	r3, [pc, #96]	@ (8003bac <MadgwickAHRSupdate+0x3a4>)
 8003b4a:	ed93 7a00 	vldr	s14, [r3]
 8003b4e:	4b15      	ldr	r3, [pc, #84]	@ (8003ba4 <MadgwickAHRSupdate+0x39c>)
 8003b50:	edd3 7a00 	vldr	s15, [r3]
 8003b54:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b58:	4b26      	ldr	r3, [pc, #152]	@ (8003bf4 <MadgwickAHRSupdate+0x3ec>)
 8003b5a:	edc3 7a00 	vstr	s15, [r3]
		q1q1 = q1 * q1;
 8003b5e:	4b0f      	ldr	r3, [pc, #60]	@ (8003b9c <MadgwickAHRSupdate+0x394>)
 8003b60:	ed93 7a00 	vldr	s14, [r3]
 8003b64:	4b0d      	ldr	r3, [pc, #52]	@ (8003b9c <MadgwickAHRSupdate+0x394>)
 8003b66:	edd3 7a00 	vldr	s15, [r3]
 8003b6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b6e:	4b22      	ldr	r3, [pc, #136]	@ (8003bf8 <MadgwickAHRSupdate+0x3f0>)
 8003b70:	edc3 7a00 	vstr	s15, [r3]
		q1q2 = q1 * q2;
 8003b74:	4b09      	ldr	r3, [pc, #36]	@ (8003b9c <MadgwickAHRSupdate+0x394>)
 8003b76:	ed93 7a00 	vldr	s14, [r3]
 8003b7a:	4b09      	ldr	r3, [pc, #36]	@ (8003ba0 <MadgwickAHRSupdate+0x398>)
 8003b7c:	edd3 7a00 	vldr	s15, [r3]
 8003b80:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b84:	4b1d      	ldr	r3, [pc, #116]	@ (8003bfc <MadgwickAHRSupdate+0x3f4>)
 8003b86:	edc3 7a00 	vstr	s15, [r3]
		q1q3 = q1 * q3;
 8003b8a:	4b04      	ldr	r3, [pc, #16]	@ (8003b9c <MadgwickAHRSupdate+0x394>)
 8003b8c:	ed93 7a00 	vldr	s14, [r3]
 8003b90:	4b04      	ldr	r3, [pc, #16]	@ (8003ba4 <MadgwickAHRSupdate+0x39c>)
 8003b92:	edd3 7a00 	vldr	s15, [r3]
 8003b96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b9a:	e031      	b.n	8003c00 <MadgwickAHRSupdate+0x3f8>
 8003b9c:	20000474 	.word	0x20000474
 8003ba0:	20000478 	.word	0x20000478
 8003ba4:	2000047c 	.word	0x2000047c
 8003ba8:	200003e4 	.word	0x200003e4
 8003bac:	2000000c 	.word	0x2000000c
 8003bb0:	200003e8 	.word	0x200003e8
 8003bb4:	200003ec 	.word	0x200003ec
 8003bb8:	200003f0 	.word	0x200003f0
 8003bbc:	200003d0 	.word	0x200003d0
 8003bc0:	200003fc 	.word	0x200003fc
 8003bc4:	20000400 	.word	0x20000400
 8003bc8:	20000404 	.word	0x20000404
 8003bcc:	20000408 	.word	0x20000408
 8003bd0:	2000041c 	.word	0x2000041c
 8003bd4:	20000420 	.word	0x20000420
 8003bd8:	20000424 	.word	0x20000424
 8003bdc:	20000428 	.word	0x20000428
 8003be0:	2000042c 	.word	0x2000042c
 8003be4:	20000430 	.word	0x20000430
 8003be8:	20000434 	.word	0x20000434
 8003bec:	20000438 	.word	0x20000438
 8003bf0:	2000043c 	.word	0x2000043c
 8003bf4:	20000440 	.word	0x20000440
 8003bf8:	20000444 	.word	0x20000444
 8003bfc:	20000448 	.word	0x20000448
 8003c00:	4bd8      	ldr	r3, [pc, #864]	@ (8003f64 <MadgwickAHRSupdate+0x75c>)
 8003c02:	edc3 7a00 	vstr	s15, [r3]
		q2q2 = q2 * q2;
 8003c06:	4bd8      	ldr	r3, [pc, #864]	@ (8003f68 <MadgwickAHRSupdate+0x760>)
 8003c08:	ed93 7a00 	vldr	s14, [r3]
 8003c0c:	4bd6      	ldr	r3, [pc, #856]	@ (8003f68 <MadgwickAHRSupdate+0x760>)
 8003c0e:	edd3 7a00 	vldr	s15, [r3]
 8003c12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c16:	4bd5      	ldr	r3, [pc, #852]	@ (8003f6c <MadgwickAHRSupdate+0x764>)
 8003c18:	edc3 7a00 	vstr	s15, [r3]
		q2q3 = q2 * q3;
 8003c1c:	4bd2      	ldr	r3, [pc, #840]	@ (8003f68 <MadgwickAHRSupdate+0x760>)
 8003c1e:	ed93 7a00 	vldr	s14, [r3]
 8003c22:	4bd3      	ldr	r3, [pc, #844]	@ (8003f70 <MadgwickAHRSupdate+0x768>)
 8003c24:	edd3 7a00 	vldr	s15, [r3]
 8003c28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c2c:	4bd1      	ldr	r3, [pc, #836]	@ (8003f74 <MadgwickAHRSupdate+0x76c>)
 8003c2e:	edc3 7a00 	vstr	s15, [r3]
		q3q3 = q3 * q3;
 8003c32:	4bcf      	ldr	r3, [pc, #828]	@ (8003f70 <MadgwickAHRSupdate+0x768>)
 8003c34:	ed93 7a00 	vldr	s14, [r3]
 8003c38:	4bcd      	ldr	r3, [pc, #820]	@ (8003f70 <MadgwickAHRSupdate+0x768>)
 8003c3a:	edd3 7a00 	vldr	s15, [r3]
 8003c3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c42:	4bcd      	ldr	r3, [pc, #820]	@ (8003f78 <MadgwickAHRSupdate+0x770>)
 8003c44:	edc3 7a00 	vstr	s15, [r3]

		hx = mx * q0q0 - _2q0my * q3 + _2q0mz * q2 + mx * q1q1 + _2q1 * my * q2
 8003c48:	4bcc      	ldr	r3, [pc, #816]	@ (8003f7c <MadgwickAHRSupdate+0x774>)
 8003c4a:	ed93 7a00 	vldr	s14, [r3]
 8003c4e:	edd7 7a03 	vldr	s15, [r7, #12]
 8003c52:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003c56:	4bca      	ldr	r3, [pc, #808]	@ (8003f80 <MadgwickAHRSupdate+0x778>)
 8003c58:	edd3 6a00 	vldr	s13, [r3]
 8003c5c:	4bc4      	ldr	r3, [pc, #784]	@ (8003f70 <MadgwickAHRSupdate+0x768>)
 8003c5e:	edd3 7a00 	vldr	s15, [r3]
 8003c62:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003c66:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003c6a:	4bc6      	ldr	r3, [pc, #792]	@ (8003f84 <MadgwickAHRSupdate+0x77c>)
 8003c6c:	edd3 6a00 	vldr	s13, [r3]
 8003c70:	4bbd      	ldr	r3, [pc, #756]	@ (8003f68 <MadgwickAHRSupdate+0x760>)
 8003c72:	edd3 7a00 	vldr	s15, [r3]
 8003c76:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003c7a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003c7e:	4bc2      	ldr	r3, [pc, #776]	@ (8003f88 <MadgwickAHRSupdate+0x780>)
 8003c80:	edd3 6a00 	vldr	s13, [r3]
 8003c84:	edd7 7a03 	vldr	s15, [r7, #12]
 8003c88:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003c8c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003c90:	4bbe      	ldr	r3, [pc, #760]	@ (8003f8c <MadgwickAHRSupdate+0x784>)
 8003c92:	edd3 6a00 	vldr	s13, [r3]
 8003c96:	edd7 7a02 	vldr	s15, [r7, #8]
 8003c9a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003c9e:	4bb2      	ldr	r3, [pc, #712]	@ (8003f68 <MadgwickAHRSupdate+0x760>)
 8003ca0:	edd3 7a00 	vldr	s15, [r3]
 8003ca4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003ca8:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ _2q1 * mz * q3 - mx * q2q2 - mx * q3q3;
 8003cac:	4bb7      	ldr	r3, [pc, #732]	@ (8003f8c <MadgwickAHRSupdate+0x784>)
 8003cae:	edd3 6a00 	vldr	s13, [r3]
 8003cb2:	edd7 7a01 	vldr	s15, [r7, #4]
 8003cb6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003cba:	4bad      	ldr	r3, [pc, #692]	@ (8003f70 <MadgwickAHRSupdate+0x768>)
 8003cbc:	edd3 7a00 	vldr	s15, [r3]
 8003cc0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003cc4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003cc8:	4ba8      	ldr	r3, [pc, #672]	@ (8003f6c <MadgwickAHRSupdate+0x764>)
 8003cca:	edd3 6a00 	vldr	s13, [r3]
 8003cce:	edd7 7a03 	vldr	s15, [r7, #12]
 8003cd2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003cd6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003cda:	4ba7      	ldr	r3, [pc, #668]	@ (8003f78 <MadgwickAHRSupdate+0x770>)
 8003cdc:	edd3 6a00 	vldr	s13, [r3]
 8003ce0:	edd7 7a03 	vldr	s15, [r7, #12]
 8003ce4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003ce8:	ee77 7a67 	vsub.f32	s15, s14, s15
		hx = mx * q0q0 - _2q0my * q3 + _2q0mz * q2 + mx * q1q1 + _2q1 * my * q2
 8003cec:	4ba8      	ldr	r3, [pc, #672]	@ (8003f90 <MadgwickAHRSupdate+0x788>)
 8003cee:	edc3 7a00 	vstr	s15, [r3]
		hy = _2q0mx * q3 + my * q0q0 - _2q0mz * q1 + _2q1mx * q2 - my * q1q1
 8003cf2:	4ba8      	ldr	r3, [pc, #672]	@ (8003f94 <MadgwickAHRSupdate+0x78c>)
 8003cf4:	ed93 7a00 	vldr	s14, [r3]
 8003cf8:	4b9d      	ldr	r3, [pc, #628]	@ (8003f70 <MadgwickAHRSupdate+0x768>)
 8003cfa:	edd3 7a00 	vldr	s15, [r3]
 8003cfe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003d02:	4b9e      	ldr	r3, [pc, #632]	@ (8003f7c <MadgwickAHRSupdate+0x774>)
 8003d04:	edd3 6a00 	vldr	s13, [r3]
 8003d08:	edd7 7a02 	vldr	s15, [r7, #8]
 8003d0c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003d10:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003d14:	4b9b      	ldr	r3, [pc, #620]	@ (8003f84 <MadgwickAHRSupdate+0x77c>)
 8003d16:	edd3 6a00 	vldr	s13, [r3]
 8003d1a:	4b9f      	ldr	r3, [pc, #636]	@ (8003f98 <MadgwickAHRSupdate+0x790>)
 8003d1c:	edd3 7a00 	vldr	s15, [r3]
 8003d20:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003d24:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003d28:	4b9c      	ldr	r3, [pc, #624]	@ (8003f9c <MadgwickAHRSupdate+0x794>)
 8003d2a:	edd3 6a00 	vldr	s13, [r3]
 8003d2e:	4b8e      	ldr	r3, [pc, #568]	@ (8003f68 <MadgwickAHRSupdate+0x760>)
 8003d30:	edd3 7a00 	vldr	s15, [r3]
 8003d34:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003d38:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003d3c:	4b92      	ldr	r3, [pc, #584]	@ (8003f88 <MadgwickAHRSupdate+0x780>)
 8003d3e:	edd3 6a00 	vldr	s13, [r3]
 8003d42:	edd7 7a02 	vldr	s15, [r7, #8]
 8003d46:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003d4a:	ee37 7a67 	vsub.f32	s14, s14, s15
				+ my * q2q2 + _2q2 * mz * q3 - my * q3q3;
 8003d4e:	4b87      	ldr	r3, [pc, #540]	@ (8003f6c <MadgwickAHRSupdate+0x764>)
 8003d50:	edd3 6a00 	vldr	s13, [r3]
 8003d54:	edd7 7a02 	vldr	s15, [r7, #8]
 8003d58:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003d5c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003d60:	4b8f      	ldr	r3, [pc, #572]	@ (8003fa0 <MadgwickAHRSupdate+0x798>)
 8003d62:	edd3 6a00 	vldr	s13, [r3]
 8003d66:	edd7 7a01 	vldr	s15, [r7, #4]
 8003d6a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003d6e:	4b80      	ldr	r3, [pc, #512]	@ (8003f70 <MadgwickAHRSupdate+0x768>)
 8003d70:	edd3 7a00 	vldr	s15, [r3]
 8003d74:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003d78:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003d7c:	4b7e      	ldr	r3, [pc, #504]	@ (8003f78 <MadgwickAHRSupdate+0x770>)
 8003d7e:	edd3 6a00 	vldr	s13, [r3]
 8003d82:	edd7 7a02 	vldr	s15, [r7, #8]
 8003d86:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003d8a:	ee77 7a67 	vsub.f32	s15, s14, s15
		hy = _2q0mx * q3 + my * q0q0 - _2q0mz * q1 + _2q1mx * q2 - my * q1q1
 8003d8e:	4b85      	ldr	r3, [pc, #532]	@ (8003fa4 <MadgwickAHRSupdate+0x79c>)
 8003d90:	edc3 7a00 	vstr	s15, [r3]
		_2bx = sqrt(hx * hx + hy * hy);
 8003d94:	4b7e      	ldr	r3, [pc, #504]	@ (8003f90 <MadgwickAHRSupdate+0x788>)
 8003d96:	ed93 7a00 	vldr	s14, [r3]
 8003d9a:	4b7d      	ldr	r3, [pc, #500]	@ (8003f90 <MadgwickAHRSupdate+0x788>)
 8003d9c:	edd3 7a00 	vldr	s15, [r3]
 8003da0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003da4:	4b7f      	ldr	r3, [pc, #508]	@ (8003fa4 <MadgwickAHRSupdate+0x79c>)
 8003da6:	edd3 6a00 	vldr	s13, [r3]
 8003daa:	4b7e      	ldr	r3, [pc, #504]	@ (8003fa4 <MadgwickAHRSupdate+0x79c>)
 8003dac:	edd3 7a00 	vldr	s15, [r3]
 8003db0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003db4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003db8:	ee17 0a90 	vmov	r0, s15
 8003dbc:	f7fc fb9c 	bl	80004f8 <__aeabi_f2d>
 8003dc0:	4602      	mov	r2, r0
 8003dc2:	460b      	mov	r3, r1
 8003dc4:	ec43 2b10 	vmov	d0, r2, r3
 8003dc8:	f00d fc56 	bl	8011678 <sqrt>
 8003dcc:	ec53 2b10 	vmov	r2, r3, d0
 8003dd0:	4610      	mov	r0, r2
 8003dd2:	4619      	mov	r1, r3
 8003dd4:	f7fc fe98 	bl	8000b08 <__aeabi_d2f>
 8003dd8:	4603      	mov	r3, r0
 8003dda:	4a73      	ldr	r2, [pc, #460]	@ (8003fa8 <MadgwickAHRSupdate+0x7a0>)
 8003ddc:	6013      	str	r3, [r2, #0]
		_2bz = -_2q0mx * q2 + _2q0my * q1 + mz * q0q0 + _2q1mx * q3 - mz * q1q1
 8003dde:	4b6d      	ldr	r3, [pc, #436]	@ (8003f94 <MadgwickAHRSupdate+0x78c>)
 8003de0:	edd3 7a00 	vldr	s15, [r3]
 8003de4:	eeb1 7a67 	vneg.f32	s14, s15
 8003de8:	4b5f      	ldr	r3, [pc, #380]	@ (8003f68 <MadgwickAHRSupdate+0x760>)
 8003dea:	edd3 7a00 	vldr	s15, [r3]
 8003dee:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003df2:	4b63      	ldr	r3, [pc, #396]	@ (8003f80 <MadgwickAHRSupdate+0x778>)
 8003df4:	edd3 6a00 	vldr	s13, [r3]
 8003df8:	4b67      	ldr	r3, [pc, #412]	@ (8003f98 <MadgwickAHRSupdate+0x790>)
 8003dfa:	edd3 7a00 	vldr	s15, [r3]
 8003dfe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003e02:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003e06:	4b5d      	ldr	r3, [pc, #372]	@ (8003f7c <MadgwickAHRSupdate+0x774>)
 8003e08:	edd3 6a00 	vldr	s13, [r3]
 8003e0c:	edd7 7a01 	vldr	s15, [r7, #4]
 8003e10:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003e14:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003e18:	4b60      	ldr	r3, [pc, #384]	@ (8003f9c <MadgwickAHRSupdate+0x794>)
 8003e1a:	edd3 6a00 	vldr	s13, [r3]
 8003e1e:	4b54      	ldr	r3, [pc, #336]	@ (8003f70 <MadgwickAHRSupdate+0x768>)
 8003e20:	edd3 7a00 	vldr	s15, [r3]
 8003e24:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003e28:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003e2c:	4b56      	ldr	r3, [pc, #344]	@ (8003f88 <MadgwickAHRSupdate+0x780>)
 8003e2e:	edd3 6a00 	vldr	s13, [r3]
 8003e32:	edd7 7a01 	vldr	s15, [r7, #4]
 8003e36:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003e3a:	ee37 7a67 	vsub.f32	s14, s14, s15
				+ _2q2 * my * q3 - mz * q2q2 + mz * q3q3;
 8003e3e:	4b58      	ldr	r3, [pc, #352]	@ (8003fa0 <MadgwickAHRSupdate+0x798>)
 8003e40:	edd3 6a00 	vldr	s13, [r3]
 8003e44:	edd7 7a02 	vldr	s15, [r7, #8]
 8003e48:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003e4c:	4b48      	ldr	r3, [pc, #288]	@ (8003f70 <MadgwickAHRSupdate+0x768>)
 8003e4e:	edd3 7a00 	vldr	s15, [r3]
 8003e52:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003e56:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003e5a:	4b44      	ldr	r3, [pc, #272]	@ (8003f6c <MadgwickAHRSupdate+0x764>)
 8003e5c:	edd3 6a00 	vldr	s13, [r3]
 8003e60:	edd7 7a01 	vldr	s15, [r7, #4]
 8003e64:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003e68:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003e6c:	4b42      	ldr	r3, [pc, #264]	@ (8003f78 <MadgwickAHRSupdate+0x770>)
 8003e6e:	edd3 6a00 	vldr	s13, [r3]
 8003e72:	edd7 7a01 	vldr	s15, [r7, #4]
 8003e76:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003e7a:	ee77 7a27 	vadd.f32	s15, s14, s15
		_2bz = -_2q0mx * q2 + _2q0my * q1 + mz * q0q0 + _2q1mx * q3 - mz * q1q1
 8003e7e:	4b4b      	ldr	r3, [pc, #300]	@ (8003fac <MadgwickAHRSupdate+0x7a4>)
 8003e80:	edc3 7a00 	vstr	s15, [r3]
		_4bx = 2.0f * _2bx;
 8003e84:	4b48      	ldr	r3, [pc, #288]	@ (8003fa8 <MadgwickAHRSupdate+0x7a0>)
 8003e86:	edd3 7a00 	vldr	s15, [r3]
 8003e8a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003e8e:	4b48      	ldr	r3, [pc, #288]	@ (8003fb0 <MadgwickAHRSupdate+0x7a8>)
 8003e90:	edc3 7a00 	vstr	s15, [r3]
		_4bz = 2.0f * _2bz;
 8003e94:	4b45      	ldr	r3, [pc, #276]	@ (8003fac <MadgwickAHRSupdate+0x7a4>)
 8003e96:	edd3 7a00 	vldr	s15, [r3]
 8003e9a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003e9e:	4b45      	ldr	r3, [pc, #276]	@ (8003fb4 <MadgwickAHRSupdate+0x7ac>)
 8003ea0:	edc3 7a00 	vstr	s15, [r3]

		s0 = -_2q2 * (2.0f * q1q3 - _2q0q2 - ax)
 8003ea4:	4b3e      	ldr	r3, [pc, #248]	@ (8003fa0 <MadgwickAHRSupdate+0x798>)
 8003ea6:	edd3 7a00 	vldr	s15, [r3]
 8003eaa:	eeb1 7a67 	vneg.f32	s14, s15
 8003eae:	4b2d      	ldr	r3, [pc, #180]	@ (8003f64 <MadgwickAHRSupdate+0x75c>)
 8003eb0:	edd3 7a00 	vldr	s15, [r3]
 8003eb4:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8003eb8:	4b3f      	ldr	r3, [pc, #252]	@ (8003fb8 <MadgwickAHRSupdate+0x7b0>)
 8003eba:	edd3 7a00 	vldr	s15, [r3]
 8003ebe:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003ec2:	edd7 7a06 	vldr	s15, [r7, #24]
 8003ec6:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003eca:	ee27 7a27 	vmul.f32	s14, s14, s15
				+ _2q1 * (2.0f * q0q1 + _2q2q3 - ay)
 8003ece:	4b3b      	ldr	r3, [pc, #236]	@ (8003fbc <MadgwickAHRSupdate+0x7b4>)
 8003ed0:	edd3 7a00 	vldr	s15, [r3]
 8003ed4:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8003ed8:	4b39      	ldr	r3, [pc, #228]	@ (8003fc0 <MadgwickAHRSupdate+0x7b8>)
 8003eda:	edd3 7a00 	vldr	s15, [r3]
 8003ede:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8003ee2:	edd7 7a05 	vldr	s15, [r7, #20]
 8003ee6:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003eea:	4b28      	ldr	r3, [pc, #160]	@ (8003f8c <MadgwickAHRSupdate+0x784>)
 8003eec:	edd3 7a00 	vldr	s15, [r3]
 8003ef0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003ef4:	ee37 7a27 	vadd.f32	s14, s14, s15
				- _2bz * q2
 8003ef8:	4b2c      	ldr	r3, [pc, #176]	@ (8003fac <MadgwickAHRSupdate+0x7a4>)
 8003efa:	edd3 6a00 	vldr	s13, [r3]
 8003efe:	4b1a      	ldr	r3, [pc, #104]	@ (8003f68 <MadgwickAHRSupdate+0x760>)
 8003f00:	edd3 7a00 	vldr	s15, [r3]
 8003f04:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2)
 8003f08:	4b18      	ldr	r3, [pc, #96]	@ (8003f6c <MadgwickAHRSupdate+0x764>)
 8003f0a:	edd3 7a00 	vldr	s15, [r3]
 8003f0e:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 8003f12:	ee36 6a67 	vsub.f32	s12, s12, s15
 8003f16:	4b18      	ldr	r3, [pc, #96]	@ (8003f78 <MadgwickAHRSupdate+0x770>)
 8003f18:	edd3 7a00 	vldr	s15, [r3]
 8003f1c:	ee36 6a67 	vsub.f32	s12, s12, s15
 8003f20:	4b21      	ldr	r3, [pc, #132]	@ (8003fa8 <MadgwickAHRSupdate+0x7a0>)
 8003f22:	edd3 7a00 	vldr	s15, [r3]
 8003f26:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003f2a:	4b0e      	ldr	r3, [pc, #56]	@ (8003f64 <MadgwickAHRSupdate+0x75c>)
 8003f2c:	edd3 5a00 	vldr	s11, [r3]
 8003f30:	4b24      	ldr	r3, [pc, #144]	@ (8003fc4 <MadgwickAHRSupdate+0x7bc>)
 8003f32:	edd3 7a00 	vldr	s15, [r3]
 8003f36:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8003f3a:	4b1c      	ldr	r3, [pc, #112]	@ (8003fac <MadgwickAHRSupdate+0x7a4>)
 8003f3c:	edd3 7a00 	vldr	s15, [r3]
 8003f40:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8003f44:	ee36 6a27 	vadd.f32	s12, s12, s15
								- mx)
 8003f48:	edd7 7a03 	vldr	s15, [r7, #12]
 8003f4c:	ee76 7a67 	vsub.f32	s15, s12, s15
						* (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2)
 8003f50:	ee66 7aa7 	vmul.f32	s15, s13, s15
				- _2bz * q2
 8003f54:	ee37 7a67 	vsub.f32	s14, s14, s15
				+ (-_2bx * q3 + _2bz * q1)
 8003f58:	4b13      	ldr	r3, [pc, #76]	@ (8003fa8 <MadgwickAHRSupdate+0x7a0>)
 8003f5a:	edd3 7a00 	vldr	s15, [r3]
 8003f5e:	eef1 6a67 	vneg.f32	s13, s15
 8003f62:	e031      	b.n	8003fc8 <MadgwickAHRSupdate+0x7c0>
 8003f64:	2000044c 	.word	0x2000044c
 8003f68:	20000478 	.word	0x20000478
 8003f6c:	20000450 	.word	0x20000450
 8003f70:	2000047c 	.word	0x2000047c
 8003f74:	20000454 	.word	0x20000454
 8003f78:	20000458 	.word	0x20000458
 8003f7c:	20000434 	.word	0x20000434
 8003f80:	20000400 	.word	0x20000400
 8003f84:	20000404 	.word	0x20000404
 8003f88:	20000444 	.word	0x20000444
 8003f8c:	20000420 	.word	0x20000420
 8003f90:	200003f4 	.word	0x200003f4
 8003f94:	200003fc 	.word	0x200003fc
 8003f98:	20000474 	.word	0x20000474
 8003f9c:	20000408 	.word	0x20000408
 8003fa0:	20000424 	.word	0x20000424
 8003fa4:	200003f8 	.word	0x200003f8
 8003fa8:	2000040c 	.word	0x2000040c
 8003fac:	20000410 	.word	0x20000410
 8003fb0:	20000414 	.word	0x20000414
 8003fb4:	20000418 	.word	0x20000418
 8003fb8:	2000042c 	.word	0x2000042c
 8003fbc:	20000438 	.word	0x20000438
 8003fc0:	20000430 	.word	0x20000430
 8003fc4:	2000043c 	.word	0x2000043c
 8003fc8:	4bda      	ldr	r3, [pc, #872]	@ (8004334 <MadgwickAHRSupdate+0xb2c>)
 8003fca:	edd3 7a00 	vldr	s15, [r3]
 8003fce:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003fd2:	4bd9      	ldr	r3, [pc, #868]	@ (8004338 <MadgwickAHRSupdate+0xb30>)
 8003fd4:	ed93 6a00 	vldr	s12, [r3]
 8003fd8:	4bd8      	ldr	r3, [pc, #864]	@ (800433c <MadgwickAHRSupdate+0xb34>)
 8003fda:	edd3 7a00 	vldr	s15, [r3]
 8003fde:	ee66 7a27 	vmul.f32	s15, s12, s15
 8003fe2:	ee76 6aa7 	vadd.f32	s13, s13, s15
						* (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my)
 8003fe6:	4bd6      	ldr	r3, [pc, #856]	@ (8004340 <MadgwickAHRSupdate+0xb38>)
 8003fe8:	ed93 6a00 	vldr	s12, [r3]
 8003fec:	4bd5      	ldr	r3, [pc, #852]	@ (8004344 <MadgwickAHRSupdate+0xb3c>)
 8003fee:	edd3 7a00 	vldr	s15, [r3]
 8003ff2:	ee36 6a67 	vsub.f32	s12, s12, s15
 8003ff6:	4bd4      	ldr	r3, [pc, #848]	@ (8004348 <MadgwickAHRSupdate+0xb40>)
 8003ff8:	edd3 7a00 	vldr	s15, [r3]
 8003ffc:	ee26 6a27 	vmul.f32	s12, s12, s15
 8004000:	4bd2      	ldr	r3, [pc, #840]	@ (800434c <MadgwickAHRSupdate+0xb44>)
 8004002:	edd3 5a00 	vldr	s11, [r3]
 8004006:	4bd2      	ldr	r3, [pc, #840]	@ (8004350 <MadgwickAHRSupdate+0xb48>)
 8004008:	edd3 7a00 	vldr	s15, [r3]
 800400c:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8004010:	4bc9      	ldr	r3, [pc, #804]	@ (8004338 <MadgwickAHRSupdate+0xb30>)
 8004012:	edd3 7a00 	vldr	s15, [r3]
 8004016:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800401a:	ee36 6a27 	vadd.f32	s12, s12, s15
 800401e:	edd7 7a02 	vldr	s15, [r7, #8]
 8004022:	ee76 7a67 	vsub.f32	s15, s12, s15
 8004026:	ee66 7aa7 	vmul.f32	s15, s13, s15
				+ (-_2bx * q3 + _2bz * q1)
 800402a:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ _2bx * q2
 800402e:	4bc6      	ldr	r3, [pc, #792]	@ (8004348 <MadgwickAHRSupdate+0xb40>)
 8004030:	edd3 6a00 	vldr	s13, [r3]
 8004034:	4bc7      	ldr	r3, [pc, #796]	@ (8004354 <MadgwickAHRSupdate+0xb4c>)
 8004036:	edd3 7a00 	vldr	s15, [r3]
 800403a:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2)
 800403e:	4bc6      	ldr	r3, [pc, #792]	@ (8004358 <MadgwickAHRSupdate+0xb50>)
 8004040:	ed93 6a00 	vldr	s12, [r3]
 8004044:	4bc5      	ldr	r3, [pc, #788]	@ (800435c <MadgwickAHRSupdate+0xb54>)
 8004046:	edd3 7a00 	vldr	s15, [r3]
 800404a:	ee36 6a27 	vadd.f32	s12, s12, s15
 800404e:	4bbe      	ldr	r3, [pc, #760]	@ (8004348 <MadgwickAHRSupdate+0xb40>)
 8004050:	edd3 7a00 	vldr	s15, [r3]
 8004054:	ee26 6a27 	vmul.f32	s12, s12, s15
 8004058:	4bc1      	ldr	r3, [pc, #772]	@ (8004360 <MadgwickAHRSupdate+0xb58>)
 800405a:	edd3 7a00 	vldr	s15, [r3]
 800405e:	eef6 5a00 	vmov.f32	s11, #96	@ 0x3f000000  0.5
 8004062:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8004066:	4bbf      	ldr	r3, [pc, #764]	@ (8004364 <MadgwickAHRSupdate+0xb5c>)
 8004068:	edd3 7a00 	vldr	s15, [r3]
 800406c:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8004070:	4bb1      	ldr	r3, [pc, #708]	@ (8004338 <MadgwickAHRSupdate+0xb30>)
 8004072:	edd3 7a00 	vldr	s15, [r3]
 8004076:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800407a:	ee36 6a27 	vadd.f32	s12, s12, s15
								- mz);
 800407e:	edd7 7a01 	vldr	s15, [r7, #4]
 8004082:	ee76 7a67 	vsub.f32	s15, s12, s15
						* (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2)
 8004086:	ee66 7aa7 	vmul.f32	s15, s13, s15
				+ _2bx * q2
 800408a:	ee77 7a27 	vadd.f32	s15, s14, s15
		s0 = -_2q2 * (2.0f * q1q3 - _2q0q2 - ax)
 800408e:	4bb6      	ldr	r3, [pc, #728]	@ (8004368 <MadgwickAHRSupdate+0xb60>)
 8004090:	edc3 7a00 	vstr	s15, [r3]
		s1 = _2q3 * (2.0f * q1q3 - _2q0q2 - ax)
 8004094:	4bb1      	ldr	r3, [pc, #708]	@ (800435c <MadgwickAHRSupdate+0xb54>)
 8004096:	edd3 7a00 	vldr	s15, [r3]
 800409a:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800409e:	4bb3      	ldr	r3, [pc, #716]	@ (800436c <MadgwickAHRSupdate+0xb64>)
 80040a0:	edd3 7a00 	vldr	s15, [r3]
 80040a4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80040a8:	edd7 7a06 	vldr	s15, [r7, #24]
 80040ac:	ee37 7a67 	vsub.f32	s14, s14, s15
 80040b0:	4baf      	ldr	r3, [pc, #700]	@ (8004370 <MadgwickAHRSupdate+0xb68>)
 80040b2:	edd3 7a00 	vldr	s15, [r3]
 80040b6:	ee27 7a27 	vmul.f32	s14, s14, s15
				+ _2q0 * (2.0f * q0q1 + _2q2q3 - ay)
 80040ba:	4ba4      	ldr	r3, [pc, #656]	@ (800434c <MadgwickAHRSupdate+0xb44>)
 80040bc:	edd3 7a00 	vldr	s15, [r3]
 80040c0:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80040c4:	4bab      	ldr	r3, [pc, #684]	@ (8004374 <MadgwickAHRSupdate+0xb6c>)
 80040c6:	edd3 7a00 	vldr	s15, [r3]
 80040ca:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80040ce:	edd7 7a05 	vldr	s15, [r7, #20]
 80040d2:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80040d6:	4ba8      	ldr	r3, [pc, #672]	@ (8004378 <MadgwickAHRSupdate+0xb70>)
 80040d8:	edd3 7a00 	vldr	s15, [r3]
 80040dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80040e0:	ee37 7a27 	vadd.f32	s14, s14, s15
				- 4.0f * q1 * (1 - 2.0f * q1q1 - 2.0f * q2q2 - az)
 80040e4:	4b95      	ldr	r3, [pc, #596]	@ (800433c <MadgwickAHRSupdate+0xb34>)
 80040e6:	edd3 7a00 	vldr	s15, [r3]
 80040ea:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 80040ee:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80040f2:	4b9b      	ldr	r3, [pc, #620]	@ (8004360 <MadgwickAHRSupdate+0xb58>)
 80040f4:	edd3 7a00 	vldr	s15, [r3]
 80040f8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80040fc:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 8004100:	ee36 6a67 	vsub.f32	s12, s12, s15
 8004104:	4b97      	ldr	r3, [pc, #604]	@ (8004364 <MadgwickAHRSupdate+0xb5c>)
 8004106:	edd3 7a00 	vldr	s15, [r3]
 800410a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800410e:	ee36 6a67 	vsub.f32	s12, s12, s15
 8004112:	edd7 7a04 	vldr	s15, [r7, #16]
 8004116:	ee76 7a67 	vsub.f32	s15, s12, s15
 800411a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800411e:	ee37 7a67 	vsub.f32	s14, s14, s15
				+ _2bz * q3
 8004122:	4b85      	ldr	r3, [pc, #532]	@ (8004338 <MadgwickAHRSupdate+0xb30>)
 8004124:	edd3 6a00 	vldr	s13, [r3]
 8004128:	4b82      	ldr	r3, [pc, #520]	@ (8004334 <MadgwickAHRSupdate+0xb2c>)
 800412a:	edd3 7a00 	vldr	s15, [r3]
 800412e:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2)
 8004132:	4b8c      	ldr	r3, [pc, #560]	@ (8004364 <MadgwickAHRSupdate+0xb5c>)
 8004134:	edd3 7a00 	vldr	s15, [r3]
 8004138:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 800413c:	ee36 6a67 	vsub.f32	s12, s12, s15
 8004140:	4b8e      	ldr	r3, [pc, #568]	@ (800437c <MadgwickAHRSupdate+0xb74>)
 8004142:	edd3 7a00 	vldr	s15, [r3]
 8004146:	ee36 6a67 	vsub.f32	s12, s12, s15
 800414a:	4b7f      	ldr	r3, [pc, #508]	@ (8004348 <MadgwickAHRSupdate+0xb40>)
 800414c:	edd3 7a00 	vldr	s15, [r3]
 8004150:	ee26 6a27 	vmul.f32	s12, s12, s15
 8004154:	4b81      	ldr	r3, [pc, #516]	@ (800435c <MadgwickAHRSupdate+0xb54>)
 8004156:	edd3 5a00 	vldr	s11, [r3]
 800415a:	4b7f      	ldr	r3, [pc, #508]	@ (8004358 <MadgwickAHRSupdate+0xb50>)
 800415c:	edd3 7a00 	vldr	s15, [r3]
 8004160:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8004164:	4b74      	ldr	r3, [pc, #464]	@ (8004338 <MadgwickAHRSupdate+0xb30>)
 8004166:	edd3 7a00 	vldr	s15, [r3]
 800416a:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800416e:	ee36 6a27 	vadd.f32	s12, s12, s15
								- mx)
 8004172:	edd7 7a03 	vldr	s15, [r7, #12]
 8004176:	ee76 7a67 	vsub.f32	s15, s12, s15
						* (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2)
 800417a:	ee66 7aa7 	vmul.f32	s15, s13, s15
				+ _2bz * q3
 800417e:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ (_2bx * q2 + _2bz * q0)
 8004182:	4b71      	ldr	r3, [pc, #452]	@ (8004348 <MadgwickAHRSupdate+0xb40>)
 8004184:	edd3 6a00 	vldr	s13, [r3]
 8004188:	4b72      	ldr	r3, [pc, #456]	@ (8004354 <MadgwickAHRSupdate+0xb4c>)
 800418a:	edd3 7a00 	vldr	s15, [r3]
 800418e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004192:	4b69      	ldr	r3, [pc, #420]	@ (8004338 <MadgwickAHRSupdate+0xb30>)
 8004194:	ed93 6a00 	vldr	s12, [r3]
 8004198:	4b79      	ldr	r3, [pc, #484]	@ (8004380 <MadgwickAHRSupdate+0xb78>)
 800419a:	edd3 7a00 	vldr	s15, [r3]
 800419e:	ee66 7a27 	vmul.f32	s15, s12, s15
 80041a2:	ee76 6aa7 	vadd.f32	s13, s13, s15
						* (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my)
 80041a6:	4b66      	ldr	r3, [pc, #408]	@ (8004340 <MadgwickAHRSupdate+0xb38>)
 80041a8:	ed93 6a00 	vldr	s12, [r3]
 80041ac:	4b65      	ldr	r3, [pc, #404]	@ (8004344 <MadgwickAHRSupdate+0xb3c>)
 80041ae:	edd3 7a00 	vldr	s15, [r3]
 80041b2:	ee36 6a67 	vsub.f32	s12, s12, s15
 80041b6:	4b64      	ldr	r3, [pc, #400]	@ (8004348 <MadgwickAHRSupdate+0xb40>)
 80041b8:	edd3 7a00 	vldr	s15, [r3]
 80041bc:	ee26 6a27 	vmul.f32	s12, s12, s15
 80041c0:	4b62      	ldr	r3, [pc, #392]	@ (800434c <MadgwickAHRSupdate+0xb44>)
 80041c2:	edd3 5a00 	vldr	s11, [r3]
 80041c6:	4b62      	ldr	r3, [pc, #392]	@ (8004350 <MadgwickAHRSupdate+0xb48>)
 80041c8:	edd3 7a00 	vldr	s15, [r3]
 80041cc:	ee75 5aa7 	vadd.f32	s11, s11, s15
 80041d0:	4b59      	ldr	r3, [pc, #356]	@ (8004338 <MadgwickAHRSupdate+0xb30>)
 80041d2:	edd3 7a00 	vldr	s15, [r3]
 80041d6:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80041da:	ee36 6a27 	vadd.f32	s12, s12, s15
 80041de:	edd7 7a02 	vldr	s15, [r7, #8]
 80041e2:	ee76 7a67 	vsub.f32	s15, s12, s15
 80041e6:	ee66 7aa7 	vmul.f32	s15, s13, s15
				+ (_2bx * q2 + _2bz * q0)
 80041ea:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ (_2bx * q3 - _4bz * q1)
 80041ee:	4b56      	ldr	r3, [pc, #344]	@ (8004348 <MadgwickAHRSupdate+0xb40>)
 80041f0:	edd3 6a00 	vldr	s13, [r3]
 80041f4:	4b4f      	ldr	r3, [pc, #316]	@ (8004334 <MadgwickAHRSupdate+0xb2c>)
 80041f6:	edd3 7a00 	vldr	s15, [r3]
 80041fa:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80041fe:	4b61      	ldr	r3, [pc, #388]	@ (8004384 <MadgwickAHRSupdate+0xb7c>)
 8004200:	ed93 6a00 	vldr	s12, [r3]
 8004204:	4b4d      	ldr	r3, [pc, #308]	@ (800433c <MadgwickAHRSupdate+0xb34>)
 8004206:	edd3 7a00 	vldr	s15, [r3]
 800420a:	ee66 7a27 	vmul.f32	s15, s12, s15
 800420e:	ee76 6ae7 	vsub.f32	s13, s13, s15
						* (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2)
 8004212:	4b51      	ldr	r3, [pc, #324]	@ (8004358 <MadgwickAHRSupdate+0xb50>)
 8004214:	ed93 6a00 	vldr	s12, [r3]
 8004218:	4b50      	ldr	r3, [pc, #320]	@ (800435c <MadgwickAHRSupdate+0xb54>)
 800421a:	edd3 7a00 	vldr	s15, [r3]
 800421e:	ee36 6a27 	vadd.f32	s12, s12, s15
 8004222:	4b49      	ldr	r3, [pc, #292]	@ (8004348 <MadgwickAHRSupdate+0xb40>)
 8004224:	edd3 7a00 	vldr	s15, [r3]
 8004228:	ee26 6a27 	vmul.f32	s12, s12, s15
 800422c:	4b4c      	ldr	r3, [pc, #304]	@ (8004360 <MadgwickAHRSupdate+0xb58>)
 800422e:	edd3 7a00 	vldr	s15, [r3]
 8004232:	eef6 5a00 	vmov.f32	s11, #96	@ 0x3f000000  0.5
 8004236:	ee75 5ae7 	vsub.f32	s11, s11, s15
 800423a:	4b4a      	ldr	r3, [pc, #296]	@ (8004364 <MadgwickAHRSupdate+0xb5c>)
 800423c:	edd3 7a00 	vldr	s15, [r3]
 8004240:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8004244:	4b3c      	ldr	r3, [pc, #240]	@ (8004338 <MadgwickAHRSupdate+0xb30>)
 8004246:	edd3 7a00 	vldr	s15, [r3]
 800424a:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800424e:	ee36 6a27 	vadd.f32	s12, s12, s15
								- mz);
 8004252:	edd7 7a01 	vldr	s15, [r7, #4]
 8004256:	ee76 7a67 	vsub.f32	s15, s12, s15
						* (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2)
 800425a:	ee66 7aa7 	vmul.f32	s15, s13, s15
				+ (_2bx * q3 - _4bz * q1)
 800425e:	ee77 7a27 	vadd.f32	s15, s14, s15
		s1 = _2q3 * (2.0f * q1q3 - _2q0q2 - ax)
 8004262:	4b49      	ldr	r3, [pc, #292]	@ (8004388 <MadgwickAHRSupdate+0xb80>)
 8004264:	edc3 7a00 	vstr	s15, [r3]
		s2 = -_2q0 * (2.0f * q1q3 - _2q0q2 - ax)
 8004268:	4b43      	ldr	r3, [pc, #268]	@ (8004378 <MadgwickAHRSupdate+0xb70>)
 800426a:	edd3 7a00 	vldr	s15, [r3]
 800426e:	eeb1 7a67 	vneg.f32	s14, s15
 8004272:	4b3a      	ldr	r3, [pc, #232]	@ (800435c <MadgwickAHRSupdate+0xb54>)
 8004274:	edd3 7a00 	vldr	s15, [r3]
 8004278:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800427c:	4b3b      	ldr	r3, [pc, #236]	@ (800436c <MadgwickAHRSupdate+0xb64>)
 800427e:	edd3 7a00 	vldr	s15, [r3]
 8004282:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8004286:	edd7 7a06 	vldr	s15, [r7, #24]
 800428a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800428e:	ee27 7a27 	vmul.f32	s14, s14, s15
				+ _2q3 * (2.0f * q0q1 + _2q2q3 - ay)
 8004292:	4b2e      	ldr	r3, [pc, #184]	@ (800434c <MadgwickAHRSupdate+0xb44>)
 8004294:	edd3 7a00 	vldr	s15, [r3]
 8004298:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800429c:	4b35      	ldr	r3, [pc, #212]	@ (8004374 <MadgwickAHRSupdate+0xb6c>)
 800429e:	edd3 7a00 	vldr	s15, [r3]
 80042a2:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80042a6:	edd7 7a05 	vldr	s15, [r7, #20]
 80042aa:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80042ae:	4b30      	ldr	r3, [pc, #192]	@ (8004370 <MadgwickAHRSupdate+0xb68>)
 80042b0:	edd3 7a00 	vldr	s15, [r3]
 80042b4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80042b8:	ee37 7a27 	vadd.f32	s14, s14, s15
				- 4.0f * q2 * (1 - 2.0f * q1q1 - 2.0f * q2q2 - az)
 80042bc:	4b25      	ldr	r3, [pc, #148]	@ (8004354 <MadgwickAHRSupdate+0xb4c>)
 80042be:	edd3 7a00 	vldr	s15, [r3]
 80042c2:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 80042c6:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80042ca:	4b25      	ldr	r3, [pc, #148]	@ (8004360 <MadgwickAHRSupdate+0xb58>)
 80042cc:	edd3 7a00 	vldr	s15, [r3]
 80042d0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80042d4:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 80042d8:	ee36 6a67 	vsub.f32	s12, s12, s15
 80042dc:	4b21      	ldr	r3, [pc, #132]	@ (8004364 <MadgwickAHRSupdate+0xb5c>)
 80042de:	edd3 7a00 	vldr	s15, [r3]
 80042e2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80042e6:	ee36 6a67 	vsub.f32	s12, s12, s15
 80042ea:	edd7 7a04 	vldr	s15, [r7, #16]
 80042ee:	ee76 7a67 	vsub.f32	s15, s12, s15
 80042f2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80042f6:	ee37 7a67 	vsub.f32	s14, s14, s15
				+ (-_4bx * q2 - _2bz * q0)
 80042fa:	4b24      	ldr	r3, [pc, #144]	@ (800438c <MadgwickAHRSupdate+0xb84>)
 80042fc:	edd3 7a00 	vldr	s15, [r3]
 8004300:	eef1 6a67 	vneg.f32	s13, s15
 8004304:	4b13      	ldr	r3, [pc, #76]	@ (8004354 <MadgwickAHRSupdate+0xb4c>)
 8004306:	edd3 7a00 	vldr	s15, [r3]
 800430a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800430e:	4b0a      	ldr	r3, [pc, #40]	@ (8004338 <MadgwickAHRSupdate+0xb30>)
 8004310:	ed93 6a00 	vldr	s12, [r3]
 8004314:	4b1a      	ldr	r3, [pc, #104]	@ (8004380 <MadgwickAHRSupdate+0xb78>)
 8004316:	edd3 7a00 	vldr	s15, [r3]
 800431a:	ee66 7a27 	vmul.f32	s15, s12, s15
 800431e:	ee76 6ae7 	vsub.f32	s13, s13, s15
						* (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2)
 8004322:	4b10      	ldr	r3, [pc, #64]	@ (8004364 <MadgwickAHRSupdate+0xb5c>)
 8004324:	edd3 7a00 	vldr	s15, [r3]
 8004328:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 800432c:	ee36 6a67 	vsub.f32	s12, s12, s15
 8004330:	e02e      	b.n	8004390 <MadgwickAHRSupdate+0xb88>
 8004332:	bf00      	nop
 8004334:	2000047c 	.word	0x2000047c
 8004338:	20000410 	.word	0x20000410
 800433c:	20000474 	.word	0x20000474
 8004340:	20000448 	.word	0x20000448
 8004344:	20000440 	.word	0x20000440
 8004348:	2000040c 	.word	0x2000040c
 800434c:	20000438 	.word	0x20000438
 8004350:	20000454 	.word	0x20000454
 8004354:	20000478 	.word	0x20000478
 8004358:	2000043c 	.word	0x2000043c
 800435c:	2000044c 	.word	0x2000044c
 8004360:	20000444 	.word	0x20000444
 8004364:	20000450 	.word	0x20000450
 8004368:	200003d4 	.word	0x200003d4
 800436c:	2000042c 	.word	0x2000042c
 8004370:	20000428 	.word	0x20000428
 8004374:	20000430 	.word	0x20000430
 8004378:	2000041c 	.word	0x2000041c
 800437c:	20000458 	.word	0x20000458
 8004380:	2000000c 	.word	0x2000000c
 8004384:	20000418 	.word	0x20000418
 8004388:	200003d8 	.word	0x200003d8
 800438c:	20000414 	.word	0x20000414
 8004390:	4bd7      	ldr	r3, [pc, #860]	@ (80046f0 <MadgwickAHRSupdate+0xee8>)
 8004392:	edd3 7a00 	vldr	s15, [r3]
 8004396:	ee36 6a67 	vsub.f32	s12, s12, s15
 800439a:	4bd6      	ldr	r3, [pc, #856]	@ (80046f4 <MadgwickAHRSupdate+0xeec>)
 800439c:	edd3 7a00 	vldr	s15, [r3]
 80043a0:	ee26 6a27 	vmul.f32	s12, s12, s15
 80043a4:	4bd4      	ldr	r3, [pc, #848]	@ (80046f8 <MadgwickAHRSupdate+0xef0>)
 80043a6:	edd3 5a00 	vldr	s11, [r3]
 80043aa:	4bd4      	ldr	r3, [pc, #848]	@ (80046fc <MadgwickAHRSupdate+0xef4>)
 80043ac:	edd3 7a00 	vldr	s15, [r3]
 80043b0:	ee75 5ae7 	vsub.f32	s11, s11, s15
 80043b4:	4bd2      	ldr	r3, [pc, #840]	@ (8004700 <MadgwickAHRSupdate+0xef8>)
 80043b6:	edd3 7a00 	vldr	s15, [r3]
 80043ba:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80043be:	ee36 6a27 	vadd.f32	s12, s12, s15
								- mx)
 80043c2:	edd7 7a03 	vldr	s15, [r7, #12]
 80043c6:	ee76 7a67 	vsub.f32	s15, s12, s15
						* (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2)
 80043ca:	ee66 7aa7 	vmul.f32	s15, s13, s15
				+ (-_4bx * q2 - _2bz * q0)
 80043ce:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ (_2bx * q1 + _2bz * q3)
 80043d2:	4bc8      	ldr	r3, [pc, #800]	@ (80046f4 <MadgwickAHRSupdate+0xeec>)
 80043d4:	edd3 6a00 	vldr	s13, [r3]
 80043d8:	4bca      	ldr	r3, [pc, #808]	@ (8004704 <MadgwickAHRSupdate+0xefc>)
 80043da:	edd3 7a00 	vldr	s15, [r3]
 80043de:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80043e2:	4bc7      	ldr	r3, [pc, #796]	@ (8004700 <MadgwickAHRSupdate+0xef8>)
 80043e4:	ed93 6a00 	vldr	s12, [r3]
 80043e8:	4bc7      	ldr	r3, [pc, #796]	@ (8004708 <MadgwickAHRSupdate+0xf00>)
 80043ea:	edd3 7a00 	vldr	s15, [r3]
 80043ee:	ee66 7a27 	vmul.f32	s15, s12, s15
 80043f2:	ee76 6aa7 	vadd.f32	s13, s13, s15
						* (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my)
 80043f6:	4bc5      	ldr	r3, [pc, #788]	@ (800470c <MadgwickAHRSupdate+0xf04>)
 80043f8:	ed93 6a00 	vldr	s12, [r3]
 80043fc:	4bc4      	ldr	r3, [pc, #784]	@ (8004710 <MadgwickAHRSupdate+0xf08>)
 80043fe:	edd3 7a00 	vldr	s15, [r3]
 8004402:	ee36 6a67 	vsub.f32	s12, s12, s15
 8004406:	4bbb      	ldr	r3, [pc, #748]	@ (80046f4 <MadgwickAHRSupdate+0xeec>)
 8004408:	edd3 7a00 	vldr	s15, [r3]
 800440c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8004410:	4bc0      	ldr	r3, [pc, #768]	@ (8004714 <MadgwickAHRSupdate+0xf0c>)
 8004412:	edd3 5a00 	vldr	s11, [r3]
 8004416:	4bc0      	ldr	r3, [pc, #768]	@ (8004718 <MadgwickAHRSupdate+0xf10>)
 8004418:	edd3 7a00 	vldr	s15, [r3]
 800441c:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8004420:	4bb7      	ldr	r3, [pc, #732]	@ (8004700 <MadgwickAHRSupdate+0xef8>)
 8004422:	edd3 7a00 	vldr	s15, [r3]
 8004426:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800442a:	ee36 6a27 	vadd.f32	s12, s12, s15
 800442e:	edd7 7a02 	vldr	s15, [r7, #8]
 8004432:	ee76 7a67 	vsub.f32	s15, s12, s15
 8004436:	ee66 7aa7 	vmul.f32	s15, s13, s15
				+ (_2bx * q1 + _2bz * q3)
 800443a:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ (_2bx * q0 - _4bz * q2)
 800443e:	4bad      	ldr	r3, [pc, #692]	@ (80046f4 <MadgwickAHRSupdate+0xeec>)
 8004440:	edd3 6a00 	vldr	s13, [r3]
 8004444:	4bb5      	ldr	r3, [pc, #724]	@ (800471c <MadgwickAHRSupdate+0xf14>)
 8004446:	edd3 7a00 	vldr	s15, [r3]
 800444a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800444e:	4bb4      	ldr	r3, [pc, #720]	@ (8004720 <MadgwickAHRSupdate+0xf18>)
 8004450:	ed93 6a00 	vldr	s12, [r3]
 8004454:	4bb3      	ldr	r3, [pc, #716]	@ (8004724 <MadgwickAHRSupdate+0xf1c>)
 8004456:	edd3 7a00 	vldr	s15, [r3]
 800445a:	ee66 7a27 	vmul.f32	s15, s12, s15
 800445e:	ee76 6ae7 	vsub.f32	s13, s13, s15
						* (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2)
 8004462:	4ba6      	ldr	r3, [pc, #664]	@ (80046fc <MadgwickAHRSupdate+0xef4>)
 8004464:	ed93 6a00 	vldr	s12, [r3]
 8004468:	4ba3      	ldr	r3, [pc, #652]	@ (80046f8 <MadgwickAHRSupdate+0xef0>)
 800446a:	edd3 7a00 	vldr	s15, [r3]
 800446e:	ee36 6a27 	vadd.f32	s12, s12, s15
 8004472:	4ba0      	ldr	r3, [pc, #640]	@ (80046f4 <MadgwickAHRSupdate+0xeec>)
 8004474:	edd3 7a00 	vldr	s15, [r3]
 8004478:	ee26 6a27 	vmul.f32	s12, s12, s15
 800447c:	4baa      	ldr	r3, [pc, #680]	@ (8004728 <MadgwickAHRSupdate+0xf20>)
 800447e:	edd3 7a00 	vldr	s15, [r3]
 8004482:	eef6 5a00 	vmov.f32	s11, #96	@ 0x3f000000  0.5
 8004486:	ee75 5ae7 	vsub.f32	s11, s11, s15
 800448a:	4ba8      	ldr	r3, [pc, #672]	@ (800472c <MadgwickAHRSupdate+0xf24>)
 800448c:	edd3 7a00 	vldr	s15, [r3]
 8004490:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8004494:	4b9a      	ldr	r3, [pc, #616]	@ (8004700 <MadgwickAHRSupdate+0xef8>)
 8004496:	edd3 7a00 	vldr	s15, [r3]
 800449a:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800449e:	ee36 6a27 	vadd.f32	s12, s12, s15
								- mz);
 80044a2:	edd7 7a01 	vldr	s15, [r7, #4]
 80044a6:	ee76 7a67 	vsub.f32	s15, s12, s15
						* (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2)
 80044aa:	ee66 7aa7 	vmul.f32	s15, s13, s15
				+ (_2bx * q0 - _4bz * q2)
 80044ae:	ee77 7a27 	vadd.f32	s15, s14, s15
		s2 = -_2q0 * (2.0f * q1q3 - _2q0q2 - ax)
 80044b2:	4b9f      	ldr	r3, [pc, #636]	@ (8004730 <MadgwickAHRSupdate+0xf28>)
 80044b4:	edc3 7a00 	vstr	s15, [r3]
		s3 = _2q1 * (2.0f * q1q3 - _2q0q2 - ax)
 80044b8:	4b8f      	ldr	r3, [pc, #572]	@ (80046f8 <MadgwickAHRSupdate+0xef0>)
 80044ba:	edd3 7a00 	vldr	s15, [r3]
 80044be:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80044c2:	4b9c      	ldr	r3, [pc, #624]	@ (8004734 <MadgwickAHRSupdate+0xf2c>)
 80044c4:	edd3 7a00 	vldr	s15, [r3]
 80044c8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80044cc:	edd7 7a06 	vldr	s15, [r7, #24]
 80044d0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80044d4:	4b98      	ldr	r3, [pc, #608]	@ (8004738 <MadgwickAHRSupdate+0xf30>)
 80044d6:	edd3 7a00 	vldr	s15, [r3]
 80044da:	ee27 7a27 	vmul.f32	s14, s14, s15
				+ _2q2 * (2.0f * q0q1 + _2q2q3 - ay)
 80044de:	4b8d      	ldr	r3, [pc, #564]	@ (8004714 <MadgwickAHRSupdate+0xf0c>)
 80044e0:	edd3 7a00 	vldr	s15, [r3]
 80044e4:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80044e8:	4b94      	ldr	r3, [pc, #592]	@ (800473c <MadgwickAHRSupdate+0xf34>)
 80044ea:	edd3 7a00 	vldr	s15, [r3]
 80044ee:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80044f2:	edd7 7a05 	vldr	s15, [r7, #20]
 80044f6:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80044fa:	4b91      	ldr	r3, [pc, #580]	@ (8004740 <MadgwickAHRSupdate+0xf38>)
 80044fc:	edd3 7a00 	vldr	s15, [r3]
 8004500:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004504:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ (-_4bx * q3 + _2bz * q1)
 8004508:	4b8e      	ldr	r3, [pc, #568]	@ (8004744 <MadgwickAHRSupdate+0xf3c>)
 800450a:	edd3 7a00 	vldr	s15, [r3]
 800450e:	eef1 6a67 	vneg.f32	s13, s15
 8004512:	4b7d      	ldr	r3, [pc, #500]	@ (8004708 <MadgwickAHRSupdate+0xf00>)
 8004514:	edd3 7a00 	vldr	s15, [r3]
 8004518:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800451c:	4b78      	ldr	r3, [pc, #480]	@ (8004700 <MadgwickAHRSupdate+0xef8>)
 800451e:	ed93 6a00 	vldr	s12, [r3]
 8004522:	4b78      	ldr	r3, [pc, #480]	@ (8004704 <MadgwickAHRSupdate+0xefc>)
 8004524:	edd3 7a00 	vldr	s15, [r3]
 8004528:	ee66 7a27 	vmul.f32	s15, s12, s15
 800452c:	ee76 6aa7 	vadd.f32	s13, s13, s15
						* (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2)
 8004530:	4b7e      	ldr	r3, [pc, #504]	@ (800472c <MadgwickAHRSupdate+0xf24>)
 8004532:	edd3 7a00 	vldr	s15, [r3]
 8004536:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 800453a:	ee36 6a67 	vsub.f32	s12, s12, s15
 800453e:	4b6c      	ldr	r3, [pc, #432]	@ (80046f0 <MadgwickAHRSupdate+0xee8>)
 8004540:	edd3 7a00 	vldr	s15, [r3]
 8004544:	ee36 6a67 	vsub.f32	s12, s12, s15
 8004548:	4b6a      	ldr	r3, [pc, #424]	@ (80046f4 <MadgwickAHRSupdate+0xeec>)
 800454a:	edd3 7a00 	vldr	s15, [r3]
 800454e:	ee26 6a27 	vmul.f32	s12, s12, s15
 8004552:	4b69      	ldr	r3, [pc, #420]	@ (80046f8 <MadgwickAHRSupdate+0xef0>)
 8004554:	edd3 5a00 	vldr	s11, [r3]
 8004558:	4b68      	ldr	r3, [pc, #416]	@ (80046fc <MadgwickAHRSupdate+0xef4>)
 800455a:	edd3 7a00 	vldr	s15, [r3]
 800455e:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8004562:	4b67      	ldr	r3, [pc, #412]	@ (8004700 <MadgwickAHRSupdate+0xef8>)
 8004564:	edd3 7a00 	vldr	s15, [r3]
 8004568:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800456c:	ee36 6a27 	vadd.f32	s12, s12, s15
								- mx)
 8004570:	edd7 7a03 	vldr	s15, [r7, #12]
 8004574:	ee76 7a67 	vsub.f32	s15, s12, s15
						* (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2)
 8004578:	ee66 7aa7 	vmul.f32	s15, s13, s15
				+ (-_4bx * q3 + _2bz * q1)
 800457c:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ (-_2bx * q0 + _2bz * q2)
 8004580:	4b5c      	ldr	r3, [pc, #368]	@ (80046f4 <MadgwickAHRSupdate+0xeec>)
 8004582:	edd3 7a00 	vldr	s15, [r3]
 8004586:	eef1 6a67 	vneg.f32	s13, s15
 800458a:	4b64      	ldr	r3, [pc, #400]	@ (800471c <MadgwickAHRSupdate+0xf14>)
 800458c:	edd3 7a00 	vldr	s15, [r3]
 8004590:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004594:	4b5a      	ldr	r3, [pc, #360]	@ (8004700 <MadgwickAHRSupdate+0xef8>)
 8004596:	ed93 6a00 	vldr	s12, [r3]
 800459a:	4b62      	ldr	r3, [pc, #392]	@ (8004724 <MadgwickAHRSupdate+0xf1c>)
 800459c:	edd3 7a00 	vldr	s15, [r3]
 80045a0:	ee66 7a27 	vmul.f32	s15, s12, s15
 80045a4:	ee76 6aa7 	vadd.f32	s13, s13, s15
						* (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my)
 80045a8:	4b58      	ldr	r3, [pc, #352]	@ (800470c <MadgwickAHRSupdate+0xf04>)
 80045aa:	ed93 6a00 	vldr	s12, [r3]
 80045ae:	4b58      	ldr	r3, [pc, #352]	@ (8004710 <MadgwickAHRSupdate+0xf08>)
 80045b0:	edd3 7a00 	vldr	s15, [r3]
 80045b4:	ee36 6a67 	vsub.f32	s12, s12, s15
 80045b8:	4b4e      	ldr	r3, [pc, #312]	@ (80046f4 <MadgwickAHRSupdate+0xeec>)
 80045ba:	edd3 7a00 	vldr	s15, [r3]
 80045be:	ee26 6a27 	vmul.f32	s12, s12, s15
 80045c2:	4b54      	ldr	r3, [pc, #336]	@ (8004714 <MadgwickAHRSupdate+0xf0c>)
 80045c4:	edd3 5a00 	vldr	s11, [r3]
 80045c8:	4b53      	ldr	r3, [pc, #332]	@ (8004718 <MadgwickAHRSupdate+0xf10>)
 80045ca:	edd3 7a00 	vldr	s15, [r3]
 80045ce:	ee75 5aa7 	vadd.f32	s11, s11, s15
 80045d2:	4b4b      	ldr	r3, [pc, #300]	@ (8004700 <MadgwickAHRSupdate+0xef8>)
 80045d4:	edd3 7a00 	vldr	s15, [r3]
 80045d8:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80045dc:	ee36 6a27 	vadd.f32	s12, s12, s15
 80045e0:	edd7 7a02 	vldr	s15, [r7, #8]
 80045e4:	ee76 7a67 	vsub.f32	s15, s12, s15
 80045e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
				+ (-_2bx * q0 + _2bz * q2)
 80045ec:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ _2bx * q1
 80045f0:	4b40      	ldr	r3, [pc, #256]	@ (80046f4 <MadgwickAHRSupdate+0xeec>)
 80045f2:	edd3 6a00 	vldr	s13, [r3]
 80045f6:	4b43      	ldr	r3, [pc, #268]	@ (8004704 <MadgwickAHRSupdate+0xefc>)
 80045f8:	edd3 7a00 	vldr	s15, [r3]
 80045fc:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2)
 8004600:	4b3e      	ldr	r3, [pc, #248]	@ (80046fc <MadgwickAHRSupdate+0xef4>)
 8004602:	ed93 6a00 	vldr	s12, [r3]
 8004606:	4b3c      	ldr	r3, [pc, #240]	@ (80046f8 <MadgwickAHRSupdate+0xef0>)
 8004608:	edd3 7a00 	vldr	s15, [r3]
 800460c:	ee36 6a27 	vadd.f32	s12, s12, s15
 8004610:	4b38      	ldr	r3, [pc, #224]	@ (80046f4 <MadgwickAHRSupdate+0xeec>)
 8004612:	edd3 7a00 	vldr	s15, [r3]
 8004616:	ee26 6a27 	vmul.f32	s12, s12, s15
 800461a:	4b43      	ldr	r3, [pc, #268]	@ (8004728 <MadgwickAHRSupdate+0xf20>)
 800461c:	edd3 7a00 	vldr	s15, [r3]
 8004620:	eef6 5a00 	vmov.f32	s11, #96	@ 0x3f000000  0.5
 8004624:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8004628:	4b40      	ldr	r3, [pc, #256]	@ (800472c <MadgwickAHRSupdate+0xf24>)
 800462a:	edd3 7a00 	vldr	s15, [r3]
 800462e:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8004632:	4b33      	ldr	r3, [pc, #204]	@ (8004700 <MadgwickAHRSupdate+0xef8>)
 8004634:	edd3 7a00 	vldr	s15, [r3]
 8004638:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800463c:	ee36 6a27 	vadd.f32	s12, s12, s15
								- mz);
 8004640:	edd7 7a01 	vldr	s15, [r7, #4]
 8004644:	ee76 7a67 	vsub.f32	s15, s12, s15
						* (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2)
 8004648:	ee66 7aa7 	vmul.f32	s15, s13, s15
				+ _2bx * q1
 800464c:	ee77 7a27 	vadd.f32	s15, s14, s15
		s3 = _2q1 * (2.0f * q1q3 - _2q0q2 - ax)
 8004650:	4b3d      	ldr	r3, [pc, #244]	@ (8004748 <MadgwickAHRSupdate+0xf40>)
 8004652:	edc3 7a00 	vstr	s15, [r3]
		recipNorm = invSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3); // normalise step magnitude
 8004656:	4b3d      	ldr	r3, [pc, #244]	@ (800474c <MadgwickAHRSupdate+0xf44>)
 8004658:	ed93 7a00 	vldr	s14, [r3]
 800465c:	4b3b      	ldr	r3, [pc, #236]	@ (800474c <MadgwickAHRSupdate+0xf44>)
 800465e:	edd3 7a00 	vldr	s15, [r3]
 8004662:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004666:	4b3a      	ldr	r3, [pc, #232]	@ (8004750 <MadgwickAHRSupdate+0xf48>)
 8004668:	edd3 6a00 	vldr	s13, [r3]
 800466c:	4b38      	ldr	r3, [pc, #224]	@ (8004750 <MadgwickAHRSupdate+0xf48>)
 800466e:	edd3 7a00 	vldr	s15, [r3]
 8004672:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004676:	ee37 7a27 	vadd.f32	s14, s14, s15
 800467a:	4b2d      	ldr	r3, [pc, #180]	@ (8004730 <MadgwickAHRSupdate+0xf28>)
 800467c:	edd3 6a00 	vldr	s13, [r3]
 8004680:	4b2b      	ldr	r3, [pc, #172]	@ (8004730 <MadgwickAHRSupdate+0xf28>)
 8004682:	edd3 7a00 	vldr	s15, [r3]
 8004686:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800468a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800468e:	4b2e      	ldr	r3, [pc, #184]	@ (8004748 <MadgwickAHRSupdate+0xf40>)
 8004690:	edd3 6a00 	vldr	s13, [r3]
 8004694:	4b2c      	ldr	r3, [pc, #176]	@ (8004748 <MadgwickAHRSupdate+0xf40>)
 8004696:	edd3 7a00 	vldr	s15, [r3]
 800469a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800469e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80046a2:	eeb0 0a67 	vmov.f32	s0, s15
 80046a6:	f7ff f805 	bl	80036b4 <invSqrt>
 80046aa:	eef0 7a40 	vmov.f32	s15, s0
 80046ae:	4b29      	ldr	r3, [pc, #164]	@ (8004754 <MadgwickAHRSupdate+0xf4c>)
 80046b0:	edc3 7a00 	vstr	s15, [r3]
		s0 *= recipNorm;
 80046b4:	4b25      	ldr	r3, [pc, #148]	@ (800474c <MadgwickAHRSupdate+0xf44>)
 80046b6:	ed93 7a00 	vldr	s14, [r3]
 80046ba:	4b26      	ldr	r3, [pc, #152]	@ (8004754 <MadgwickAHRSupdate+0xf4c>)
 80046bc:	edd3 7a00 	vldr	s15, [r3]
 80046c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046c4:	4b21      	ldr	r3, [pc, #132]	@ (800474c <MadgwickAHRSupdate+0xf44>)
 80046c6:	edc3 7a00 	vstr	s15, [r3]
		s1 *= recipNorm;
 80046ca:	4b21      	ldr	r3, [pc, #132]	@ (8004750 <MadgwickAHRSupdate+0xf48>)
 80046cc:	ed93 7a00 	vldr	s14, [r3]
 80046d0:	4b20      	ldr	r3, [pc, #128]	@ (8004754 <MadgwickAHRSupdate+0xf4c>)
 80046d2:	edd3 7a00 	vldr	s15, [r3]
 80046d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046da:	4b1d      	ldr	r3, [pc, #116]	@ (8004750 <MadgwickAHRSupdate+0xf48>)
 80046dc:	edc3 7a00 	vstr	s15, [r3]
		s2 *= recipNorm;
 80046e0:	4b13      	ldr	r3, [pc, #76]	@ (8004730 <MadgwickAHRSupdate+0xf28>)
 80046e2:	ed93 7a00 	vldr	s14, [r3]
 80046e6:	4b1b      	ldr	r3, [pc, #108]	@ (8004754 <MadgwickAHRSupdate+0xf4c>)
 80046e8:	edd3 7a00 	vldr	s15, [r3]
 80046ec:	e034      	b.n	8004758 <MadgwickAHRSupdate+0xf50>
 80046ee:	bf00      	nop
 80046f0:	20000458 	.word	0x20000458
 80046f4:	2000040c 	.word	0x2000040c
 80046f8:	2000044c 	.word	0x2000044c
 80046fc:	2000043c 	.word	0x2000043c
 8004700:	20000410 	.word	0x20000410
 8004704:	20000474 	.word	0x20000474
 8004708:	2000047c 	.word	0x2000047c
 800470c:	20000448 	.word	0x20000448
 8004710:	20000440 	.word	0x20000440
 8004714:	20000438 	.word	0x20000438
 8004718:	20000454 	.word	0x20000454
 800471c:	2000000c 	.word	0x2000000c
 8004720:	20000418 	.word	0x20000418
 8004724:	20000478 	.word	0x20000478
 8004728:	20000444 	.word	0x20000444
 800472c:	20000450 	.word	0x20000450
 8004730:	200003dc 	.word	0x200003dc
 8004734:	2000042c 	.word	0x2000042c
 8004738:	20000420 	.word	0x20000420
 800473c:	20000430 	.word	0x20000430
 8004740:	20000424 	.word	0x20000424
 8004744:	20000414 	.word	0x20000414
 8004748:	200003e0 	.word	0x200003e0
 800474c:	200003d4 	.word	0x200003d4
 8004750:	200003d8 	.word	0x200003d8
 8004754:	200003d0 	.word	0x200003d0
 8004758:	ee67 7a27 	vmul.f32	s15, s14, s15
 800475c:	4b76      	ldr	r3, [pc, #472]	@ (8004938 <MadgwickAHRSupdate+0x1130>)
 800475e:	edc3 7a00 	vstr	s15, [r3]
		s3 *= recipNorm;
 8004762:	4b76      	ldr	r3, [pc, #472]	@ (800493c <MadgwickAHRSupdate+0x1134>)
 8004764:	ed93 7a00 	vldr	s14, [r3]
 8004768:	4b75      	ldr	r3, [pc, #468]	@ (8004940 <MadgwickAHRSupdate+0x1138>)
 800476a:	edd3 7a00 	vldr	s15, [r3]
 800476e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004772:	4b72      	ldr	r3, [pc, #456]	@ (800493c <MadgwickAHRSupdate+0x1134>)
 8004774:	edc3 7a00 	vstr	s15, [r3]

		qDot1 -= beta * s0;
 8004778:	4b72      	ldr	r3, [pc, #456]	@ (8004944 <MadgwickAHRSupdate+0x113c>)
 800477a:	ed93 7a00 	vldr	s14, [r3]
 800477e:	4b72      	ldr	r3, [pc, #456]	@ (8004948 <MadgwickAHRSupdate+0x1140>)
 8004780:	edd3 7a00 	vldr	s15, [r3]
 8004784:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004788:	4b70      	ldr	r3, [pc, #448]	@ (800494c <MadgwickAHRSupdate+0x1144>)
 800478a:	ed93 7a00 	vldr	s14, [r3]
 800478e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004792:	4b6e      	ldr	r3, [pc, #440]	@ (800494c <MadgwickAHRSupdate+0x1144>)
 8004794:	edc3 7a00 	vstr	s15, [r3]
		qDot2 -= beta * s1;
 8004798:	4b6a      	ldr	r3, [pc, #424]	@ (8004944 <MadgwickAHRSupdate+0x113c>)
 800479a:	ed93 7a00 	vldr	s14, [r3]
 800479e:	4b6c      	ldr	r3, [pc, #432]	@ (8004950 <MadgwickAHRSupdate+0x1148>)
 80047a0:	edd3 7a00 	vldr	s15, [r3]
 80047a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047a8:	4b6a      	ldr	r3, [pc, #424]	@ (8004954 <MadgwickAHRSupdate+0x114c>)
 80047aa:	ed93 7a00 	vldr	s14, [r3]
 80047ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80047b2:	4b68      	ldr	r3, [pc, #416]	@ (8004954 <MadgwickAHRSupdate+0x114c>)
 80047b4:	edc3 7a00 	vstr	s15, [r3]
		qDot3 -= beta * s2;
 80047b8:	4b62      	ldr	r3, [pc, #392]	@ (8004944 <MadgwickAHRSupdate+0x113c>)
 80047ba:	ed93 7a00 	vldr	s14, [r3]
 80047be:	4b5e      	ldr	r3, [pc, #376]	@ (8004938 <MadgwickAHRSupdate+0x1130>)
 80047c0:	edd3 7a00 	vldr	s15, [r3]
 80047c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047c8:	4b63      	ldr	r3, [pc, #396]	@ (8004958 <MadgwickAHRSupdate+0x1150>)
 80047ca:	ed93 7a00 	vldr	s14, [r3]
 80047ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80047d2:	4b61      	ldr	r3, [pc, #388]	@ (8004958 <MadgwickAHRSupdate+0x1150>)
 80047d4:	edc3 7a00 	vstr	s15, [r3]
		qDot4 -= beta * s3;
 80047d8:	4b5a      	ldr	r3, [pc, #360]	@ (8004944 <MadgwickAHRSupdate+0x113c>)
 80047da:	ed93 7a00 	vldr	s14, [r3]
 80047de:	4b57      	ldr	r3, [pc, #348]	@ (800493c <MadgwickAHRSupdate+0x1134>)
 80047e0:	edd3 7a00 	vldr	s15, [r3]
 80047e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047e8:	4b5c      	ldr	r3, [pc, #368]	@ (800495c <MadgwickAHRSupdate+0x1154>)
 80047ea:	ed93 7a00 	vldr	s14, [r3]
 80047ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80047f2:	4b5a      	ldr	r3, [pc, #360]	@ (800495c <MadgwickAHRSupdate+0x1154>)
 80047f4:	edc3 7a00 	vstr	s15, [r3]
	}

	q0 += qDot1 * (deltat);
 80047f8:	4b54      	ldr	r3, [pc, #336]	@ (800494c <MadgwickAHRSupdate+0x1144>)
 80047fa:	ed93 7a00 	vldr	s14, [r3]
 80047fe:	4b58      	ldr	r3, [pc, #352]	@ (8004960 <MadgwickAHRSupdate+0x1158>)
 8004800:	edd3 7a00 	vldr	s15, [r3]
 8004804:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004808:	4b56      	ldr	r3, [pc, #344]	@ (8004964 <MadgwickAHRSupdate+0x115c>)
 800480a:	edd3 7a00 	vldr	s15, [r3]
 800480e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004812:	4b54      	ldr	r3, [pc, #336]	@ (8004964 <MadgwickAHRSupdate+0x115c>)
 8004814:	edc3 7a00 	vstr	s15, [r3]
	q1 += qDot2 * (deltat);
 8004818:	4b4e      	ldr	r3, [pc, #312]	@ (8004954 <MadgwickAHRSupdate+0x114c>)
 800481a:	ed93 7a00 	vldr	s14, [r3]
 800481e:	4b50      	ldr	r3, [pc, #320]	@ (8004960 <MadgwickAHRSupdate+0x1158>)
 8004820:	edd3 7a00 	vldr	s15, [r3]
 8004824:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004828:	4b4f      	ldr	r3, [pc, #316]	@ (8004968 <MadgwickAHRSupdate+0x1160>)
 800482a:	edd3 7a00 	vldr	s15, [r3]
 800482e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004832:	4b4d      	ldr	r3, [pc, #308]	@ (8004968 <MadgwickAHRSupdate+0x1160>)
 8004834:	edc3 7a00 	vstr	s15, [r3]
	q2 += qDot3 * (deltat);
 8004838:	4b47      	ldr	r3, [pc, #284]	@ (8004958 <MadgwickAHRSupdate+0x1150>)
 800483a:	ed93 7a00 	vldr	s14, [r3]
 800483e:	4b48      	ldr	r3, [pc, #288]	@ (8004960 <MadgwickAHRSupdate+0x1158>)
 8004840:	edd3 7a00 	vldr	s15, [r3]
 8004844:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004848:	4b48      	ldr	r3, [pc, #288]	@ (800496c <MadgwickAHRSupdate+0x1164>)
 800484a:	edd3 7a00 	vldr	s15, [r3]
 800484e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004852:	4b46      	ldr	r3, [pc, #280]	@ (800496c <MadgwickAHRSupdate+0x1164>)
 8004854:	edc3 7a00 	vstr	s15, [r3]
	q3 += qDot4 * (deltat);
 8004858:	4b40      	ldr	r3, [pc, #256]	@ (800495c <MadgwickAHRSupdate+0x1154>)
 800485a:	ed93 7a00 	vldr	s14, [r3]
 800485e:	4b40      	ldr	r3, [pc, #256]	@ (8004960 <MadgwickAHRSupdate+0x1158>)
 8004860:	edd3 7a00 	vldr	s15, [r3]
 8004864:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004868:	4b41      	ldr	r3, [pc, #260]	@ (8004970 <MadgwickAHRSupdate+0x1168>)
 800486a:	edd3 7a00 	vldr	s15, [r3]
 800486e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004872:	4b3f      	ldr	r3, [pc, #252]	@ (8004970 <MadgwickAHRSupdate+0x1168>)
 8004874:	edc3 7a00 	vstr	s15, [r3]

	recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 8004878:	4b3a      	ldr	r3, [pc, #232]	@ (8004964 <MadgwickAHRSupdate+0x115c>)
 800487a:	ed93 7a00 	vldr	s14, [r3]
 800487e:	4b39      	ldr	r3, [pc, #228]	@ (8004964 <MadgwickAHRSupdate+0x115c>)
 8004880:	edd3 7a00 	vldr	s15, [r3]
 8004884:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004888:	4b37      	ldr	r3, [pc, #220]	@ (8004968 <MadgwickAHRSupdate+0x1160>)
 800488a:	edd3 6a00 	vldr	s13, [r3]
 800488e:	4b36      	ldr	r3, [pc, #216]	@ (8004968 <MadgwickAHRSupdate+0x1160>)
 8004890:	edd3 7a00 	vldr	s15, [r3]
 8004894:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004898:	ee37 7a27 	vadd.f32	s14, s14, s15
 800489c:	4b33      	ldr	r3, [pc, #204]	@ (800496c <MadgwickAHRSupdate+0x1164>)
 800489e:	edd3 6a00 	vldr	s13, [r3]
 80048a2:	4b32      	ldr	r3, [pc, #200]	@ (800496c <MadgwickAHRSupdate+0x1164>)
 80048a4:	edd3 7a00 	vldr	s15, [r3]
 80048a8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80048ac:	ee37 7a27 	vadd.f32	s14, s14, s15
 80048b0:	4b2f      	ldr	r3, [pc, #188]	@ (8004970 <MadgwickAHRSupdate+0x1168>)
 80048b2:	edd3 6a00 	vldr	s13, [r3]
 80048b6:	4b2e      	ldr	r3, [pc, #184]	@ (8004970 <MadgwickAHRSupdate+0x1168>)
 80048b8:	edd3 7a00 	vldr	s15, [r3]
 80048bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80048c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80048c4:	eeb0 0a67 	vmov.f32	s0, s15
 80048c8:	f7fe fef4 	bl	80036b4 <invSqrt>
 80048cc:	eef0 7a40 	vmov.f32	s15, s0
 80048d0:	4b1b      	ldr	r3, [pc, #108]	@ (8004940 <MadgwickAHRSupdate+0x1138>)
 80048d2:	edc3 7a00 	vstr	s15, [r3]
	q0 *= recipNorm;
 80048d6:	4b23      	ldr	r3, [pc, #140]	@ (8004964 <MadgwickAHRSupdate+0x115c>)
 80048d8:	ed93 7a00 	vldr	s14, [r3]
 80048dc:	4b18      	ldr	r3, [pc, #96]	@ (8004940 <MadgwickAHRSupdate+0x1138>)
 80048de:	edd3 7a00 	vldr	s15, [r3]
 80048e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048e6:	4b1f      	ldr	r3, [pc, #124]	@ (8004964 <MadgwickAHRSupdate+0x115c>)
 80048e8:	edc3 7a00 	vstr	s15, [r3]
	q1 *= recipNorm;
 80048ec:	4b1e      	ldr	r3, [pc, #120]	@ (8004968 <MadgwickAHRSupdate+0x1160>)
 80048ee:	ed93 7a00 	vldr	s14, [r3]
 80048f2:	4b13      	ldr	r3, [pc, #76]	@ (8004940 <MadgwickAHRSupdate+0x1138>)
 80048f4:	edd3 7a00 	vldr	s15, [r3]
 80048f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048fc:	4b1a      	ldr	r3, [pc, #104]	@ (8004968 <MadgwickAHRSupdate+0x1160>)
 80048fe:	edc3 7a00 	vstr	s15, [r3]
	q2 *= recipNorm;
 8004902:	4b1a      	ldr	r3, [pc, #104]	@ (800496c <MadgwickAHRSupdate+0x1164>)
 8004904:	ed93 7a00 	vldr	s14, [r3]
 8004908:	4b0d      	ldr	r3, [pc, #52]	@ (8004940 <MadgwickAHRSupdate+0x1138>)
 800490a:	edd3 7a00 	vldr	s15, [r3]
 800490e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004912:	4b16      	ldr	r3, [pc, #88]	@ (800496c <MadgwickAHRSupdate+0x1164>)
 8004914:	edc3 7a00 	vstr	s15, [r3]
	q3 *= recipNorm;
 8004918:	4b15      	ldr	r3, [pc, #84]	@ (8004970 <MadgwickAHRSupdate+0x1168>)
 800491a:	ed93 7a00 	vldr	s14, [r3]
 800491e:	4b08      	ldr	r3, [pc, #32]	@ (8004940 <MadgwickAHRSupdate+0x1138>)
 8004920:	edd3 7a00 	vldr	s15, [r3]
 8004924:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004928:	4b11      	ldr	r3, [pc, #68]	@ (8004970 <MadgwickAHRSupdate+0x1168>)
 800492a:	edc3 7a00 	vstr	s15, [r3]
}
 800492e:	bf00      	nop
 8004930:	3728      	adds	r7, #40	@ 0x28
 8004932:	46bd      	mov	sp, r7
 8004934:	bd80      	pop	{r7, pc}
 8004936:	bf00      	nop
 8004938:	200003dc 	.word	0x200003dc
 800493c:	200003e0 	.word	0x200003e0
 8004940:	200003d0 	.word	0x200003d0
 8004944:	20000010 	.word	0x20000010
 8004948:	200003d4 	.word	0x200003d4
 800494c:	200003e4 	.word	0x200003e4
 8004950:	200003d8 	.word	0x200003d8
 8004954:	200003e8 	.word	0x200003e8
 8004958:	200003ec 	.word	0x200003ec
 800495c:	200003f0 	.word	0x200003f0
 8004960:	20000480 	.word	0x20000480
 8004964:	2000000c 	.word	0x2000000c
 8004968:	20000474 	.word	0x20000474
 800496c:	20000478 	.word	0x20000478
 8004970:	2000047c 	.word	0x2000047c

08004974 <LSM9DS1_ReadGyro_DMA>:

//low_power_code
void LSM9DS1_ReadGyro_DMA(void) {
 8004974:	b580      	push	{r7, lr}
 8004976:	b082      	sub	sp, #8
 8004978:	af02      	add	r7, sp, #8
	HAL_I2C_Mem_Read_DMA(&hi2c1, LSM9DS1_ADDR, OUT_X_G | 0x80,
 800497a:	2306      	movs	r3, #6
 800497c:	9301      	str	r3, [sp, #4]
 800497e:	4b05      	ldr	r3, [pc, #20]	@ (8004994 <LSM9DS1_ReadGyro_DMA+0x20>)
 8004980:	9300      	str	r3, [sp, #0]
 8004982:	2301      	movs	r3, #1
 8004984:	2298      	movs	r2, #152	@ 0x98
 8004986:	21d4      	movs	r1, #212	@ 0xd4
 8004988:	4803      	ldr	r0, [pc, #12]	@ (8004998 <LSM9DS1_ReadGyro_DMA+0x24>)
 800498a:	f004 f8b3 	bl	8008af4 <HAL_I2C_Mem_Read_DMA>
	I2C_MEMADD_SIZE_8BIT, gyro_buffer, 6);
}
 800498e:	bf00      	nop
 8004990:	46bd      	mov	sp, r7
 8004992:	bd80      	pop	{r7, pc}
 8004994:	2000035c 	.word	0x2000035c
 8004998:	200001fc 	.word	0x200001fc

0800499c <LSM9DS1_ReadAccel_DMA>:

void LSM9DS1_ReadAccel_DMA(void) {
 800499c:	b580      	push	{r7, lr}
 800499e:	b082      	sub	sp, #8
 80049a0:	af02      	add	r7, sp, #8
	HAL_I2C_Mem_Read_DMA(&hi2c1, LSM9DS1_ADDR, OUT_X_XL | 0x80,
 80049a2:	2306      	movs	r3, #6
 80049a4:	9301      	str	r3, [sp, #4]
 80049a6:	4b05      	ldr	r3, [pc, #20]	@ (80049bc <LSM9DS1_ReadAccel_DMA+0x20>)
 80049a8:	9300      	str	r3, [sp, #0]
 80049aa:	2301      	movs	r3, #1
 80049ac:	22a8      	movs	r2, #168	@ 0xa8
 80049ae:	21d4      	movs	r1, #212	@ 0xd4
 80049b0:	4803      	ldr	r0, [pc, #12]	@ (80049c0 <LSM9DS1_ReadAccel_DMA+0x24>)
 80049b2:	f004 f89f 	bl	8008af4 <HAL_I2C_Mem_Read_DMA>
	I2C_MEMADD_SIZE_8BIT, accel_buffer, 6);
}
 80049b6:	bf00      	nop
 80049b8:	46bd      	mov	sp, r7
 80049ba:	bd80      	pop	{r7, pc}
 80049bc:	20000364 	.word	0x20000364
 80049c0:	200001fc 	.word	0x200001fc

080049c4 <LSM9DS1_ReadMag_DMA>:

void LSM9DS1_ReadMag_DMA(void) {
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b082      	sub	sp, #8
 80049c8:	af02      	add	r7, sp, #8
	HAL_I2C_Mem_Read_DMA(&hi2c1, MAG_ADDR, OUT_X_M | 0x80, I2C_MEMADD_SIZE_8BIT,
 80049ca:	2306      	movs	r3, #6
 80049cc:	9301      	str	r3, [sp, #4]
 80049ce:	4b05      	ldr	r3, [pc, #20]	@ (80049e4 <LSM9DS1_ReadMag_DMA+0x20>)
 80049d0:	9300      	str	r3, [sp, #0]
 80049d2:	2301      	movs	r3, #1
 80049d4:	22a8      	movs	r2, #168	@ 0xa8
 80049d6:	213c      	movs	r1, #60	@ 0x3c
 80049d8:	4803      	ldr	r0, [pc, #12]	@ (80049e8 <LSM9DS1_ReadMag_DMA+0x24>)
 80049da:	f004 f88b 	bl	8008af4 <HAL_I2C_Mem_Read_DMA>
			mag_buffer, 6);
}
 80049de:	bf00      	nop
 80049e0:	46bd      	mov	sp, r7
 80049e2:	bd80      	pop	{r7, pc}
 80049e4:	2000036c 	.word	0x2000036c
 80049e8:	200001fc 	.word	0x200001fc

080049ec <magcal_Init>:

void magcal_Init(void) {
 80049ec:	b580      	push	{r7, lr}
 80049ee:	af00      	add	r7, sp, #0
	memset(&magcal, 0, sizeof(magcal));
 80049f0:	f640 720c 	movw	r2, #3852	@ 0xf0c
 80049f4:	2100      	movs	r1, #0
 80049f6:	480e      	ldr	r0, [pc, #56]	@ (8004a30 <magcal_Init+0x44>)
 80049f8:	f00b ff93 	bl	8010922 <memset>
	magcal.V[2] = 80.0f;
 80049fc:	4b0c      	ldr	r3, [pc, #48]	@ (8004a30 <magcal_Init+0x44>)
 80049fe:	4a0d      	ldr	r2, [pc, #52]	@ (8004a34 <magcal_Init+0x48>)
 8004a00:	609a      	str	r2, [r3, #8]
	magcal.invW[0][0] = 1.0f;
 8004a02:	4b0b      	ldr	r3, [pc, #44]	@ (8004a30 <magcal_Init+0x44>)
 8004a04:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8004a08:	60da      	str	r2, [r3, #12]
	magcal.invW[1][1] = 1.0f;
 8004a0a:	4b09      	ldr	r3, [pc, #36]	@ (8004a30 <magcal_Init+0x44>)
 8004a0c:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8004a10:	61da      	str	r2, [r3, #28]
	magcal.invW[2][2] = 1.0f;
 8004a12:	4b07      	ldr	r3, [pc, #28]	@ (8004a30 <magcal_Init+0x44>)
 8004a14:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8004a18:	62da      	str	r2, [r3, #44]	@ 0x2c
	magcal.FitError = 100.0f;
 8004a1a:	4b05      	ldr	r3, [pc, #20]	@ (8004a30 <magcal_Init+0x44>)
 8004a1c:	4a06      	ldr	r2, [pc, #24]	@ (8004a38 <magcal_Init+0x4c>)
 8004a1e:	639a      	str	r2, [r3, #56]	@ 0x38
	magcal.FitErrorAge = 100.0f;
 8004a20:	4b03      	ldr	r3, [pc, #12]	@ (8004a30 <magcal_Init+0x44>)
 8004a22:	4a05      	ldr	r2, [pc, #20]	@ (8004a38 <magcal_Init+0x4c>)
 8004a24:	63da      	str	r2, [r3, #60]	@ 0x3c
	magcal.B = 50.0f;
 8004a26:	4b02      	ldr	r3, [pc, #8]	@ (8004a30 <magcal_Init+0x44>)
 8004a28:	4a04      	ldr	r2, [pc, #16]	@ (8004a3c <magcal_Init+0x50>)
 8004a2a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004a2c:	bf00      	nop
 8004a2e:	bd80      	pop	{r7, pc}
 8004a30:	200004d8 	.word	0x200004d8
 8004a34:	42a00000 	.word	0x42a00000
 8004a38:	42c80000 	.word	0x42c80000
 8004a3c:	42480000 	.word	0x42480000

08004a40 <apply_calibration>:

static int chunk_i = 0;
static int chunk_j = 0;

void apply_calibration(int16_t rawx, int16_t rawy, int16_t rawz, Point_t *out) {
 8004a40:	b480      	push	{r7}
 8004a42:	b089      	sub	sp, #36	@ 0x24
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	607b      	str	r3, [r7, #4]
 8004a48:	4603      	mov	r3, r0
 8004a4a:	81fb      	strh	r3, [r7, #14]
 8004a4c:	460b      	mov	r3, r1
 8004a4e:	81bb      	strh	r3, [r7, #12]
 8004a50:	4613      	mov	r3, r2
 8004a52:	817b      	strh	r3, [r7, #10]
	float x, y, z;

	x = ((float) rawx * UT_PER_COUNT) - magcal.V[0];
 8004a54:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004a58:	ee07 3a90 	vmov	s15, r3
 8004a5c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004a60:	ed9f 7a43 	vldr	s14, [pc, #268]	@ 8004b70 <apply_calibration+0x130>
 8004a64:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004a68:	4b42      	ldr	r3, [pc, #264]	@ (8004b74 <apply_calibration+0x134>)
 8004a6a:	edd3 7a00 	vldr	s15, [r3]
 8004a6e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004a72:	edc7 7a07 	vstr	s15, [r7, #28]
	y = ((float) rawy * UT_PER_COUNT) - magcal.V[1];
 8004a76:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004a7a:	ee07 3a90 	vmov	s15, r3
 8004a7e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004a82:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 8004b70 <apply_calibration+0x130>
 8004a86:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004a8a:	4b3a      	ldr	r3, [pc, #232]	@ (8004b74 <apply_calibration+0x134>)
 8004a8c:	edd3 7a01 	vldr	s15, [r3, #4]
 8004a90:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004a94:	edc7 7a06 	vstr	s15, [r7, #24]
	z = ((float) rawz * UT_PER_COUNT) - magcal.V[2];
 8004a98:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8004a9c:	ee07 3a90 	vmov	s15, r3
 8004aa0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004aa4:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8004b70 <apply_calibration+0x130>
 8004aa8:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004aac:	4b31      	ldr	r3, [pc, #196]	@ (8004b74 <apply_calibration+0x134>)
 8004aae:	edd3 7a02 	vldr	s15, [r3, #8]
 8004ab2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004ab6:	edc7 7a05 	vstr	s15, [r7, #20]
	out->x = x * magcal.invW[0][0] + y * magcal.invW[0][1]
 8004aba:	4b2e      	ldr	r3, [pc, #184]	@ (8004b74 <apply_calibration+0x134>)
 8004abc:	ed93 7a03 	vldr	s14, [r3, #12]
 8004ac0:	edd7 7a07 	vldr	s15, [r7, #28]
 8004ac4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004ac8:	4b2a      	ldr	r3, [pc, #168]	@ (8004b74 <apply_calibration+0x134>)
 8004aca:	edd3 6a04 	vldr	s13, [r3, #16]
 8004ace:	edd7 7a06 	vldr	s15, [r7, #24]
 8004ad2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004ad6:	ee37 7a27 	vadd.f32	s14, s14, s15
			+ z * magcal.invW[0][2];
 8004ada:	4b26      	ldr	r3, [pc, #152]	@ (8004b74 <apply_calibration+0x134>)
 8004adc:	edd3 6a05 	vldr	s13, [r3, #20]
 8004ae0:	edd7 7a05 	vldr	s15, [r7, #20]
 8004ae4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004ae8:	ee77 7a27 	vadd.f32	s15, s14, s15
	out->x = x * magcal.invW[0][0] + y * magcal.invW[0][1]
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	edc3 7a00 	vstr	s15, [r3]
	out->y = x * magcal.invW[1][0] + y * magcal.invW[1][1]
 8004af2:	4b20      	ldr	r3, [pc, #128]	@ (8004b74 <apply_calibration+0x134>)
 8004af4:	ed93 7a06 	vldr	s14, [r3, #24]
 8004af8:	edd7 7a07 	vldr	s15, [r7, #28]
 8004afc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004b00:	4b1c      	ldr	r3, [pc, #112]	@ (8004b74 <apply_calibration+0x134>)
 8004b02:	edd3 6a07 	vldr	s13, [r3, #28]
 8004b06:	edd7 7a06 	vldr	s15, [r7, #24]
 8004b0a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004b0e:	ee37 7a27 	vadd.f32	s14, s14, s15
			+ z * magcal.invW[1][2];
 8004b12:	4b18      	ldr	r3, [pc, #96]	@ (8004b74 <apply_calibration+0x134>)
 8004b14:	edd3 6a08 	vldr	s13, [r3, #32]
 8004b18:	edd7 7a05 	vldr	s15, [r7, #20]
 8004b1c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004b20:	ee77 7a27 	vadd.f32	s15, s14, s15
	out->y = x * magcal.invW[1][0] + y * magcal.invW[1][1]
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	edc3 7a01 	vstr	s15, [r3, #4]
	out->z = x * magcal.invW[2][0] + y * magcal.invW[2][1]
 8004b2a:	4b12      	ldr	r3, [pc, #72]	@ (8004b74 <apply_calibration+0x134>)
 8004b2c:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8004b30:	edd7 7a07 	vldr	s15, [r7, #28]
 8004b34:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004b38:	4b0e      	ldr	r3, [pc, #56]	@ (8004b74 <apply_calibration+0x134>)
 8004b3a:	edd3 6a0a 	vldr	s13, [r3, #40]	@ 0x28
 8004b3e:	edd7 7a06 	vldr	s15, [r7, #24]
 8004b42:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004b46:	ee37 7a27 	vadd.f32	s14, s14, s15
			+ z * magcal.invW[2][2];
 8004b4a:	4b0a      	ldr	r3, [pc, #40]	@ (8004b74 <apply_calibration+0x134>)
 8004b4c:	edd3 6a0b 	vldr	s13, [r3, #44]	@ 0x2c
 8004b50:	edd7 7a05 	vldr	s15, [r7, #20]
 8004b54:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004b58:	ee77 7a27 	vadd.f32	s15, s14, s15
	out->z = x * magcal.invW[2][0] + y * magcal.invW[2][1]
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8004b62:	bf00      	nop
 8004b64:	3724      	adds	r7, #36	@ 0x24
 8004b66:	46bd      	mov	sp, r7
 8004b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6c:	4770      	bx	lr
 8004b6e:	bf00      	nop
 8004b70:	3dcccccd 	.word	0x3dcccccd
 8004b74:	200004d8 	.word	0x200004d8

08004b78 <choose_discard_magcal>:

static int choose_discard_magcal(void) {
 8004b78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b7c:	b092      	sub	sp, #72	@ 0x48
 8004b7e:	af00      	add	r7, sp, #0
	choose_flag = 1;
 8004b80:	4a77      	ldr	r2, [pc, #476]	@ (8004d60 <choose_discard_magcal+0x1e8>)
 8004b82:	2301      	movs	r3, #1
 8004b84:	6013      	str	r3, [r2, #0]
	// When enough data is collected (gaps error is low), assume we
	// have a pretty good coverage and the field stregth is known.
	gaps = quality_surface_gap_error();
 8004b86:	f002 fbc1 	bl	800730c <quality_surface_gap_error>
 8004b8a:	eef0 7a40 	vmov.f32	s15, s0
 8004b8e:	4b75      	ldr	r3, [pc, #468]	@ (8004d64 <choose_discard_magcal+0x1ec>)
 8004b90:	edc3 7a00 	vstr	s15, [r3]
	if (gaps < 25.0f) {
 8004b94:	4b73      	ldr	r3, [pc, #460]	@ (8004d64 <choose_discard_magcal+0x1ec>)
 8004b96:	edd3 7a00 	vldr	s15, [r3]
 8004b9a:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 8004b9e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004ba2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ba6:	f140 80b9 	bpl.w	8004d1c <choose_discard_magcal+0x1a4>
		// occasionally look for points farthest from average field strength
		// always rate limit assumption-based data purging, but allow the
		// rate to increase as the angular coverage improves.
		if (gaps < 1.0f)
 8004baa:	4b6e      	ldr	r3, [pc, #440]	@ (8004d64 <choose_discard_magcal+0x1ec>)
 8004bac:	edd3 7a00 	vldr	s15, [r3]
 8004bb0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004bb4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004bb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bbc:	d503      	bpl.n	8004bc6 <choose_discard_magcal+0x4e>
			gaps = 1.0f;
 8004bbe:	4a69      	ldr	r2, [pc, #420]	@ (8004d64 <choose_discard_magcal+0x1ec>)
 8004bc0:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8004bc4:	6013      	str	r3, [r2, #0]
		if (++runcount > (int) (gaps * 10.0f)) {
 8004bc6:	4b68      	ldr	r3, [pc, #416]	@ (8004d68 <choose_discard_magcal+0x1f0>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	1c5a      	adds	r2, r3, #1
 8004bcc:	4b66      	ldr	r3, [pc, #408]	@ (8004d68 <choose_discard_magcal+0x1f0>)
 8004bce:	601a      	str	r2, [r3, #0]
 8004bd0:	4b65      	ldr	r3, [pc, #404]	@ (8004d68 <choose_discard_magcal+0x1f0>)
 8004bd2:	681a      	ldr	r2, [r3, #0]
 8004bd4:	4b63      	ldr	r3, [pc, #396]	@ (8004d64 <choose_discard_magcal+0x1ec>)
 8004bd6:	edd3 7a00 	vldr	s15, [r3]
 8004bda:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8004bde:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004be2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004be6:	ee17 3a90 	vmov	r3, s15
 8004bea:	429a      	cmp	r2, r3
 8004bec:	f340 8099 	ble.w	8004d22 <choose_discard_magcal+0x1aa>
			j = MAGBUFFSIZE;
 8004bf0:	4a5e      	ldr	r2, [pc, #376]	@ (8004d6c <choose_discard_magcal+0x1f4>)
 8004bf2:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8004bf6:	6013      	str	r3, [r2, #0]
			errormax = 0.0f;
 8004bf8:	4a5d      	ldr	r2, [pc, #372]	@ (8004d70 <choose_discard_magcal+0x1f8>)
 8004bfa:	f04f 0300 	mov.w	r3, #0
 8004bfe:	6013      	str	r3, [r2, #0]
			for (i = 0; i < MAGBUFFSIZE; i++) {
 8004c00:	4a5c      	ldr	r2, [pc, #368]	@ (8004d74 <choose_discard_magcal+0x1fc>)
 8004c02:	2300      	movs	r3, #0
 8004c04:	6013      	str	r3, [r2, #0]
 8004c06:	e079      	b.n	8004cfc <choose_discard_magcal+0x184>
				rawx = magcal.BpFast[0][i];
 8004c08:	4b5a      	ldr	r3, [pc, #360]	@ (8004d74 <choose_discard_magcal+0x1fc>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4a5a      	ldr	r2, [pc, #360]	@ (8004d78 <choose_discard_magcal+0x200>)
 8004c0e:	f503 7303 	add.w	r3, r3, #524	@ 0x20c
 8004c12:	005b      	lsls	r3, r3, #1
 8004c14:	4413      	add	r3, r2
 8004c16:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004c1a:	461a      	mov	r2, r3
 8004c1c:	4b57      	ldr	r3, [pc, #348]	@ (8004d7c <choose_discard_magcal+0x204>)
 8004c1e:	601a      	str	r2, [r3, #0]
				rawy = magcal.BpFast[1][i];
 8004c20:	4b54      	ldr	r3, [pc, #336]	@ (8004d74 <choose_discard_magcal+0x1fc>)
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4a54      	ldr	r2, [pc, #336]	@ (8004d78 <choose_discard_magcal+0x200>)
 8004c26:	f503 7367 	add.w	r3, r3, #924	@ 0x39c
 8004c2a:	005b      	lsls	r3, r3, #1
 8004c2c:	4413      	add	r3, r2
 8004c2e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004c32:	461a      	mov	r2, r3
 8004c34:	4b52      	ldr	r3, [pc, #328]	@ (8004d80 <choose_discard_magcal+0x208>)
 8004c36:	601a      	str	r2, [r3, #0]
				rawz = magcal.BpFast[2][i];
 8004c38:	4b4e      	ldr	r3, [pc, #312]	@ (8004d74 <choose_discard_magcal+0x1fc>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4a4e      	ldr	r2, [pc, #312]	@ (8004d78 <choose_discard_magcal+0x200>)
 8004c3e:	f203 532c 	addw	r3, r3, #1324	@ 0x52c
 8004c42:	005b      	lsls	r3, r3, #1
 8004c44:	4413      	add	r3, r2
 8004c46:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004c4a:	461a      	mov	r2, r3
 8004c4c:	4b4d      	ldr	r3, [pc, #308]	@ (8004d84 <choose_discard_magcal+0x20c>)
 8004c4e:	601a      	str	r2, [r3, #0]
//				apply_calibration(rawx, rawy, rawz, &point);
				x = point.x;
 8004c50:	4b4d      	ldr	r3, [pc, #308]	@ (8004d88 <choose_discard_magcal+0x210>)
 8004c52:	681a      	ldr	r2, [r3, #0]
 8004c54:	4b4d      	ldr	r3, [pc, #308]	@ (8004d8c <choose_discard_magcal+0x214>)
 8004c56:	601a      	str	r2, [r3, #0]
				y = point.y;
 8004c58:	4b4b      	ldr	r3, [pc, #300]	@ (8004d88 <choose_discard_magcal+0x210>)
 8004c5a:	685a      	ldr	r2, [r3, #4]
 8004c5c:	4b4c      	ldr	r3, [pc, #304]	@ (8004d90 <choose_discard_magcal+0x218>)
 8004c5e:	601a      	str	r2, [r3, #0]
				z = point.z;
 8004c60:	4b49      	ldr	r3, [pc, #292]	@ (8004d88 <choose_discard_magcal+0x210>)
 8004c62:	689a      	ldr	r2, [r3, #8]
 8004c64:	4b4b      	ldr	r3, [pc, #300]	@ (8004d94 <choose_discard_magcal+0x21c>)
 8004c66:	601a      	str	r2, [r3, #0]
				field = sqrtf(x * x + y * y + z * z);
 8004c68:	4b48      	ldr	r3, [pc, #288]	@ (8004d8c <choose_discard_magcal+0x214>)
 8004c6a:	ed93 7a00 	vldr	s14, [r3]
 8004c6e:	4b47      	ldr	r3, [pc, #284]	@ (8004d8c <choose_discard_magcal+0x214>)
 8004c70:	edd3 7a00 	vldr	s15, [r3]
 8004c74:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004c78:	4b45      	ldr	r3, [pc, #276]	@ (8004d90 <choose_discard_magcal+0x218>)
 8004c7a:	edd3 6a00 	vldr	s13, [r3]
 8004c7e:	4b44      	ldr	r3, [pc, #272]	@ (8004d90 <choose_discard_magcal+0x218>)
 8004c80:	edd3 7a00 	vldr	s15, [r3]
 8004c84:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004c88:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004c8c:	4b41      	ldr	r3, [pc, #260]	@ (8004d94 <choose_discard_magcal+0x21c>)
 8004c8e:	edd3 6a00 	vldr	s13, [r3]
 8004c92:	4b40      	ldr	r3, [pc, #256]	@ (8004d94 <choose_discard_magcal+0x21c>)
 8004c94:	edd3 7a00 	vldr	s15, [r3]
 8004c98:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004c9c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004ca0:	eeb0 0a67 	vmov.f32	s0, s15
 8004ca4:	f00c fd6e 	bl	8011784 <sqrtf>
 8004ca8:	eef0 7a40 	vmov.f32	s15, s0
 8004cac:	4b3a      	ldr	r3, [pc, #232]	@ (8004d98 <choose_discard_magcal+0x220>)
 8004cae:	edc3 7a00 	vstr	s15, [r3]
				// if magcal.B is bad, things could go horribly wrong
				error = fabsf(field - magcal.B);
 8004cb2:	4b39      	ldr	r3, [pc, #228]	@ (8004d98 <choose_discard_magcal+0x220>)
 8004cb4:	ed93 7a00 	vldr	s14, [r3]
 8004cb8:	4b2f      	ldr	r3, [pc, #188]	@ (8004d78 <choose_discard_magcal+0x200>)
 8004cba:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8004cbe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004cc2:	eef0 7ae7 	vabs.f32	s15, s15
 8004cc6:	4b35      	ldr	r3, [pc, #212]	@ (8004d9c <choose_discard_magcal+0x224>)
 8004cc8:	edc3 7a00 	vstr	s15, [r3]
				if (error > errormax) {
 8004ccc:	4b33      	ldr	r3, [pc, #204]	@ (8004d9c <choose_discard_magcal+0x224>)
 8004cce:	ed93 7a00 	vldr	s14, [r3]
 8004cd2:	4b27      	ldr	r3, [pc, #156]	@ (8004d70 <choose_discard_magcal+0x1f8>)
 8004cd4:	edd3 7a00 	vldr	s15, [r3]
 8004cd8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004cdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ce0:	dd07      	ble.n	8004cf2 <choose_discard_magcal+0x17a>
					errormax = error;
 8004ce2:	4b2e      	ldr	r3, [pc, #184]	@ (8004d9c <choose_discard_magcal+0x224>)
 8004ce4:	681a      	ldr	r2, [r3, #0]
 8004ce6:	4b22      	ldr	r3, [pc, #136]	@ (8004d70 <choose_discard_magcal+0x1f8>)
 8004ce8:	601a      	str	r2, [r3, #0]
					j = i;
 8004cea:	4b22      	ldr	r3, [pc, #136]	@ (8004d74 <choose_discard_magcal+0x1fc>)
 8004cec:	681a      	ldr	r2, [r3, #0]
 8004cee:	4b1f      	ldr	r3, [pc, #124]	@ (8004d6c <choose_discard_magcal+0x1f4>)
 8004cf0:	601a      	str	r2, [r3, #0]
			for (i = 0; i < MAGBUFFSIZE; i++) {
 8004cf2:	4b20      	ldr	r3, [pc, #128]	@ (8004d74 <choose_discard_magcal+0x1fc>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	1c5a      	adds	r2, r3, #1
 8004cf8:	4b1e      	ldr	r3, [pc, #120]	@ (8004d74 <choose_discard_magcal+0x1fc>)
 8004cfa:	601a      	str	r2, [r3, #0]
 8004cfc:	4b1d      	ldr	r3, [pc, #116]	@ (8004d74 <choose_discard_magcal+0x1fc>)
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8004d04:	db80      	blt.n	8004c08 <choose_discard_magcal+0x90>
				}
			}
			runcount = 0;
 8004d06:	4a18      	ldr	r2, [pc, #96]	@ (8004d68 <choose_discard_magcal+0x1f0>)
 8004d08:	2300      	movs	r3, #0
 8004d0a:	6013      	str	r3, [r2, #0]
			if (j < MAGBUFFSIZE) {
 8004d0c:	4b17      	ldr	r3, [pc, #92]	@ (8004d6c <choose_discard_magcal+0x1f4>)
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8004d14:	da05      	bge.n	8004d22 <choose_discard_magcal+0x1aa>
				//printf("worst error at %d\n", j);
				return j;
 8004d16:	4b15      	ldr	r3, [pc, #84]	@ (8004d6c <choose_discard_magcal+0x1f4>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	e11f      	b.n	8004f5c <choose_discard_magcal+0x3e4>
			}
		}
	} else {
		runcount = 0;
 8004d1c:	4a12      	ldr	r2, [pc, #72]	@ (8004d68 <choose_discard_magcal+0x1f0>)
 8004d1e:	2300      	movs	r3, #0
 8004d20:	6013      	str	r3, [r2, #0]
//				minindex = (random() & 1) ? i : j;
//			}
//		}
//	}

	for (int cnt = 0; cnt < 10; cnt++) {
 8004d22:	2300      	movs	r3, #0
 8004d24:	647b      	str	r3, [r7, #68]	@ 0x44
 8004d26:	e113      	b.n	8004f50 <choose_discard_magcal+0x3d8>
		if (chunk_i >= MAGBUFFSIZE) {
 8004d28:	4b1d      	ldr	r3, [pc, #116]	@ (8004da0 <choose_discard_magcal+0x228>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8004d30:	db06      	blt.n	8004d40 <choose_discard_magcal+0x1c8>
			chunk_i = 0;
 8004d32:	4b1b      	ldr	r3, [pc, #108]	@ (8004da0 <choose_discard_magcal+0x228>)
 8004d34:	2200      	movs	r2, #0
 8004d36:	601a      	str	r2, [r3, #0]
			chunk_j = 0;
 8004d38:	4b1a      	ldr	r3, [pc, #104]	@ (8004da4 <choose_discard_magcal+0x22c>)
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	601a      	str	r2, [r3, #0]
			break;
 8004d3e:	e10b      	b.n	8004f58 <choose_discard_magcal+0x3e0>
		}

		if (chunk_j >= MAGBUFFSIZE) {
 8004d40:	4b18      	ldr	r3, [pc, #96]	@ (8004da4 <choose_discard_magcal+0x22c>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8004d48:	db2e      	blt.n	8004da8 <choose_discard_magcal+0x230>
			chunk_i++;
 8004d4a:	4b15      	ldr	r3, [pc, #84]	@ (8004da0 <choose_discard_magcal+0x228>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	1c5a      	adds	r2, r3, #1
 8004d50:	4b13      	ldr	r3, [pc, #76]	@ (8004da0 <choose_discard_magcal+0x228>)
 8004d52:	601a      	str	r2, [r3, #0]
			chunk_j = chunk_i + 1;
 8004d54:	4b12      	ldr	r3, [pc, #72]	@ (8004da0 <choose_discard_magcal+0x228>)
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	1c5a      	adds	r2, r3, #1
 8004d5a:	4b12      	ldr	r3, [pc, #72]	@ (8004da4 <choose_discard_magcal+0x22c>)
 8004d5c:	601a      	str	r2, [r3, #0]
			continue;
 8004d5e:	e0f4      	b.n	8004f4a <choose_discard_magcal+0x3d2>
 8004d60:	20001440 	.word	0x20001440
 8004d64:	20000050 	.word	0x20000050
 8004d68:	20001418 	.word	0x20001418
 8004d6c:	20001420 	.word	0x20001420
 8004d70:	2000143c 	.word	0x2000143c
 8004d74:	2000141c 	.word	0x2000141c
 8004d78:	200004d8 	.word	0x200004d8
 8004d7c:	200013ec 	.word	0x200013ec
 8004d80:	200013f0 	.word	0x200013f0
 8004d84:	200013f4 	.word	0x200013f4
 8004d88:	20001428 	.word	0x20001428
 8004d8c:	20001404 	.word	0x20001404
 8004d90:	20001408 	.word	0x20001408
 8004d94:	2000140c 	.word	0x2000140c
 8004d98:	20001434 	.word	0x20001434
 8004d9c:	20001438 	.word	0x20001438
 8004da0:	20001448 	.word	0x20001448
 8004da4:	2000144c 	.word	0x2000144c
		}

		dx = magcal.BpFast[0][chunk_i] - magcal.BpFast[0][chunk_j];
 8004da8:	4b6f      	ldr	r3, [pc, #444]	@ (8004f68 <choose_discard_magcal+0x3f0>)
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	4a6f      	ldr	r2, [pc, #444]	@ (8004f6c <choose_discard_magcal+0x3f4>)
 8004dae:	f503 7303 	add.w	r3, r3, #524	@ 0x20c
 8004db2:	005b      	lsls	r3, r3, #1
 8004db4:	4413      	add	r3, r2
 8004db6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004dba:	4619      	mov	r1, r3
 8004dbc:	4b6c      	ldr	r3, [pc, #432]	@ (8004f70 <choose_discard_magcal+0x3f8>)
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	4a6a      	ldr	r2, [pc, #424]	@ (8004f6c <choose_discard_magcal+0x3f4>)
 8004dc2:	f503 7303 	add.w	r3, r3, #524	@ 0x20c
 8004dc6:	005b      	lsls	r3, r3, #1
 8004dc8:	4413      	add	r3, r2
 8004dca:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004dce:	1aca      	subs	r2, r1, r3
 8004dd0:	4b68      	ldr	r3, [pc, #416]	@ (8004f74 <choose_discard_magcal+0x3fc>)
 8004dd2:	601a      	str	r2, [r3, #0]
		dy = magcal.BpFast[1][chunk_i] - magcal.BpFast[1][chunk_j];
 8004dd4:	4b64      	ldr	r3, [pc, #400]	@ (8004f68 <choose_discard_magcal+0x3f0>)
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	4a64      	ldr	r2, [pc, #400]	@ (8004f6c <choose_discard_magcal+0x3f4>)
 8004dda:	f503 7367 	add.w	r3, r3, #924	@ 0x39c
 8004dde:	005b      	lsls	r3, r3, #1
 8004de0:	4413      	add	r3, r2
 8004de2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004de6:	4619      	mov	r1, r3
 8004de8:	4b61      	ldr	r3, [pc, #388]	@ (8004f70 <choose_discard_magcal+0x3f8>)
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	4a5f      	ldr	r2, [pc, #380]	@ (8004f6c <choose_discard_magcal+0x3f4>)
 8004dee:	f503 7367 	add.w	r3, r3, #924	@ 0x39c
 8004df2:	005b      	lsls	r3, r3, #1
 8004df4:	4413      	add	r3, r2
 8004df6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004dfa:	1aca      	subs	r2, r1, r3
 8004dfc:	4b5e      	ldr	r3, [pc, #376]	@ (8004f78 <choose_discard_magcal+0x400>)
 8004dfe:	601a      	str	r2, [r3, #0]
		dz = magcal.BpFast[2][chunk_i] - magcal.BpFast[2][chunk_j];
 8004e00:	4b59      	ldr	r3, [pc, #356]	@ (8004f68 <choose_discard_magcal+0x3f0>)
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	4a59      	ldr	r2, [pc, #356]	@ (8004f6c <choose_discard_magcal+0x3f4>)
 8004e06:	f203 532c 	addw	r3, r3, #1324	@ 0x52c
 8004e0a:	005b      	lsls	r3, r3, #1
 8004e0c:	4413      	add	r3, r2
 8004e0e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004e12:	4619      	mov	r1, r3
 8004e14:	4b56      	ldr	r3, [pc, #344]	@ (8004f70 <choose_discard_magcal+0x3f8>)
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	4a54      	ldr	r2, [pc, #336]	@ (8004f6c <choose_discard_magcal+0x3f4>)
 8004e1a:	f203 532c 	addw	r3, r3, #1324	@ 0x52c
 8004e1e:	005b      	lsls	r3, r3, #1
 8004e20:	4413      	add	r3, r2
 8004e22:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004e26:	1aca      	subs	r2, r1, r3
 8004e28:	4b54      	ldr	r3, [pc, #336]	@ (8004f7c <choose_discard_magcal+0x404>)
 8004e2a:	601a      	str	r2, [r3, #0]
		distsq = (int64_t) dx * (int64_t) dx + (int64_t) dy * (int64_t) dy
 8004e2c:	4b51      	ldr	r3, [pc, #324]	@ (8004f74 <choose_discard_magcal+0x3fc>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	17da      	asrs	r2, r3, #31
 8004e32:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004e34:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004e36:	4b4f      	ldr	r3, [pc, #316]	@ (8004f74 <choose_discard_magcal+0x3fc>)
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	17da      	asrs	r2, r3, #31
 8004e3c:	633b      	str	r3, [r7, #48]	@ 0x30
 8004e3e:	637a      	str	r2, [r7, #52]	@ 0x34
 8004e40:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8004e44:	460b      	mov	r3, r1
 8004e46:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004e48:	fb02 f203 	mul.w	r2, r2, r3
 8004e4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e4e:	e9c7 010e 	strd	r0, r1, [r7, #56]	@ 0x38
 8004e52:	4601      	mov	r1, r0
 8004e54:	fb01 f303 	mul.w	r3, r1, r3
 8004e58:	4413      	add	r3, r2
 8004e5a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004e5c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004e5e:	fba2 4501 	umull	r4, r5, r2, r1
 8004e62:	442b      	add	r3, r5
 8004e64:	461d      	mov	r5, r3
 8004e66:	4b44      	ldr	r3, [pc, #272]	@ (8004f78 <choose_discard_magcal+0x400>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	17da      	asrs	r2, r3, #31
 8004e6c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004e6e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004e70:	4b41      	ldr	r3, [pc, #260]	@ (8004f78 <choose_discard_magcal+0x400>)
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	17da      	asrs	r2, r3, #31
 8004e76:	623b      	str	r3, [r7, #32]
 8004e78:	627a      	str	r2, [r7, #36]	@ 0x24
 8004e7a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8004e7e:	460b      	mov	r3, r1
 8004e80:	6a3a      	ldr	r2, [r7, #32]
 8004e82:	fb02 f203 	mul.w	r2, r2, r3
 8004e86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e88:	e9c7 010a 	strd	r0, r1, [r7, #40]	@ 0x28
 8004e8c:	4601      	mov	r1, r0
 8004e8e:	fb01 f303 	mul.w	r3, r1, r3
 8004e92:	4413      	add	r3, r2
 8004e94:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004e96:	6a39      	ldr	r1, [r7, #32]
 8004e98:	fba2 ab01 	umull	sl, fp, r2, r1
 8004e9c:	445b      	add	r3, fp
 8004e9e:	469b      	mov	fp, r3
 8004ea0:	eb14 030a 	adds.w	r3, r4, sl
 8004ea4:	60bb      	str	r3, [r7, #8]
 8004ea6:	eb45 030b 	adc.w	r3, r5, fp
 8004eaa:	60fb      	str	r3, [r7, #12]
				+ (int64_t) dz * (int64_t) dz;
 8004eac:	4b33      	ldr	r3, [pc, #204]	@ (8004f7c <choose_discard_magcal+0x404>)
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	17da      	asrs	r2, r3, #31
 8004eb2:	61bb      	str	r3, [r7, #24]
 8004eb4:	61fa      	str	r2, [r7, #28]
 8004eb6:	4b31      	ldr	r3, [pc, #196]	@ (8004f7c <choose_discard_magcal+0x404>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	17da      	asrs	r2, r3, #31
 8004ebc:	613b      	str	r3, [r7, #16]
 8004ebe:	617a      	str	r2, [r7, #20]
 8004ec0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004ec4:	460b      	mov	r3, r1
 8004ec6:	693a      	ldr	r2, [r7, #16]
 8004ec8:	fb02 f203 	mul.w	r2, r2, r3
 8004ecc:	697b      	ldr	r3, [r7, #20]
 8004ece:	e9c7 0106 	strd	r0, r1, [r7, #24]
 8004ed2:	4601      	mov	r1, r0
 8004ed4:	fb01 f303 	mul.w	r3, r1, r3
 8004ed8:	4413      	add	r3, r2
 8004eda:	69ba      	ldr	r2, [r7, #24]
 8004edc:	6939      	ldr	r1, [r7, #16]
 8004ede:	fba2 8901 	umull	r8, r9, r2, r1
 8004ee2:	444b      	add	r3, r9
 8004ee4:	4699      	mov	r9, r3
 8004ee6:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004eea:	460b      	mov	r3, r1
 8004eec:	eb13 0308 	adds.w	r3, r3, r8
 8004ef0:	603b      	str	r3, [r7, #0]
 8004ef2:	4613      	mov	r3, r2
 8004ef4:	eb43 0309 	adc.w	r3, r3, r9
 8004ef8:	607b      	str	r3, [r7, #4]
 8004efa:	e9d7 0100 	ldrd	r0, r1, [r7]
		distsq = (int64_t) dx * (int64_t) dx + (int64_t) dy * (int64_t) dy
 8004efe:	4b20      	ldr	r3, [pc, #128]	@ (8004f80 <choose_discard_magcal+0x408>)
 8004f00:	e9c3 0100 	strd	r0, r1, [r3]

		if (distsq < minsum) {
 8004f04:	4b1e      	ldr	r3, [pc, #120]	@ (8004f80 <choose_discard_magcal+0x408>)
 8004f06:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004f0a:	4b1e      	ldr	r3, [pc, #120]	@ (8004f84 <choose_discard_magcal+0x40c>)
 8004f0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f10:	4290      	cmp	r0, r2
 8004f12:	eb71 0303 	sbcs.w	r3, r1, r3
 8004f16:	d213      	bcs.n	8004f40 <choose_discard_magcal+0x3c8>
			minsum = distsq;
 8004f18:	4b19      	ldr	r3, [pc, #100]	@ (8004f80 <choose_discard_magcal+0x408>)
 8004f1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f1e:	4919      	ldr	r1, [pc, #100]	@ (8004f84 <choose_discard_magcal+0x40c>)
 8004f20:	e9c1 2300 	strd	r2, r3, [r1]
			minindex = (random() & 1) ? chunk_i : chunk_j;
 8004f24:	f00b fbba 	bl	801069c <random>
 8004f28:	4603      	mov	r3, r0
 8004f2a:	f003 0301 	and.w	r3, r3, #1
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d002      	beq.n	8004f38 <choose_discard_magcal+0x3c0>
 8004f32:	4b0d      	ldr	r3, [pc, #52]	@ (8004f68 <choose_discard_magcal+0x3f0>)
 8004f34:	681a      	ldr	r2, [r3, #0]
 8004f36:	e001      	b.n	8004f3c <choose_discard_magcal+0x3c4>
 8004f38:	4b0d      	ldr	r3, [pc, #52]	@ (8004f70 <choose_discard_magcal+0x3f8>)
 8004f3a:	681a      	ldr	r2, [r3, #0]
 8004f3c:	4b12      	ldr	r3, [pc, #72]	@ (8004f88 <choose_discard_magcal+0x410>)
 8004f3e:	601a      	str	r2, [r3, #0]
		}

		chunk_j++;
 8004f40:	4b0b      	ldr	r3, [pc, #44]	@ (8004f70 <choose_discard_magcal+0x3f8>)
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	1c5a      	adds	r2, r3, #1
 8004f46:	4b0a      	ldr	r3, [pc, #40]	@ (8004f70 <choose_discard_magcal+0x3f8>)
 8004f48:	601a      	str	r2, [r3, #0]
	for (int cnt = 0; cnt < 10; cnt++) {
 8004f4a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004f4c:	3301      	adds	r3, #1
 8004f4e:	647b      	str	r3, [r7, #68]	@ 0x44
 8004f50:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004f52:	2b09      	cmp	r3, #9
 8004f54:	f77f aee8 	ble.w	8004d28 <choose_discard_magcal+0x1b0>
	}

	return minindex;
 8004f58:	4b0b      	ldr	r3, [pc, #44]	@ (8004f88 <choose_discard_magcal+0x410>)
 8004f5a:	681b      	ldr	r3, [r3, #0]
}
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	3748      	adds	r7, #72	@ 0x48
 8004f60:	46bd      	mov	sp, r7
 8004f62:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004f66:	bf00      	nop
 8004f68:	20001448 	.word	0x20001448
 8004f6c:	200004d8 	.word	0x200004d8
 8004f70:	2000144c 	.word	0x2000144c
 8004f74:	200013f8 	.word	0x200013f8
 8004f78:	200013fc 	.word	0x200013fc
 8004f7c:	20001400 	.word	0x20001400
 8004f80:	20001410 	.word	0x20001410
 8004f84:	20000048 	.word	0x20000048
 8004f88:	20001424 	.word	0x20001424

08004f8c <add_magcal_data>:

static void add_magcal_data(const int16_t *data) {
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b084      	sub	sp, #16
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]

	int i;

	// first look for an unused caldata slot
	for (i = 0; i < MAGBUFFSIZE; i++) {
 8004f94:	2300      	movs	r3, #0
 8004f96:	60fb      	str	r3, [r7, #12]
 8004f98:	e00b      	b.n	8004fb2 <add_magcal_data+0x26>
		if (!magcal.valid[i])
 8004f9a:	4a2e      	ldr	r2, [pc, #184]	@ (8005054 <add_magcal_data+0xc8>)
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	4413      	add	r3, r2
 8004fa0:	f603 537a 	addw	r3, r3, #3450	@ 0xd7a
 8004fa4:	f993 3000 	ldrsb.w	r3, [r3]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d007      	beq.n	8004fbc <add_magcal_data+0x30>
	for (i = 0; i < MAGBUFFSIZE; i++) {
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	3301      	adds	r3, #1
 8004fb0:	60fb      	str	r3, [r7, #12]
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8004fb8:	dbef      	blt.n	8004f9a <add_magcal_data+0xe>
 8004fba:	e000      	b.n	8004fbe <add_magcal_data+0x32>
			break;
 8004fbc:	bf00      	nop
	}

	if (i >= MAGBUFFSIZE) {
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8004fc4:	db18      	blt.n	8004ff8 <add_magcal_data+0x6c>
		i = choose_discard_magcal();
 8004fc6:	f7ff fdd7 	bl	8004b78 <choose_discard_magcal>
 8004fca:	60f8      	str	r0, [r7, #12]
		if (i < 0 || i >= MAGBUFFSIZE) {
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	db03      	blt.n	8004fda <add_magcal_data+0x4e>
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8004fd8:	db0e      	blt.n	8004ff8 <add_magcal_data+0x6c>
			i = random() % MAGBUFFSIZE;
 8004fda:	f00b fb5f 	bl	801069c <random>
 8004fde:	4603      	mov	r3, r0
 8004fe0:	4a1d      	ldr	r2, [pc, #116]	@ (8005058 <add_magcal_data+0xcc>)
 8004fe2:	fb82 1203 	smull	r1, r2, r2, r3
 8004fe6:	11d1      	asrs	r1, r2, #7
 8004fe8:	17da      	asrs	r2, r3, #31
 8004fea:	1a8a      	subs	r2, r1, r2
 8004fec:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8004ff0:	fb01 f202 	mul.w	r2, r1, r2
 8004ff4:	1a9b      	subs	r3, r3, r2
 8004ff6:	60fb      	str	r3, [r7, #12]
		}
	}

	// add it to the cal buffer
	magcal.BpFast[0][i] = data[0];
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	f9b3 1000 	ldrsh.w	r1, [r3]
 8004ffe:	4a15      	ldr	r2, [pc, #84]	@ (8005054 <add_magcal_data+0xc8>)
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	f503 7303 	add.w	r3, r3, #524	@ 0x20c
 8005006:	005b      	lsls	r3, r3, #1
 8005008:	4413      	add	r3, r2
 800500a:	460a      	mov	r2, r1
 800500c:	805a      	strh	r2, [r3, #2]
	magcal.BpFast[1][i] = data[1];
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	3302      	adds	r3, #2
 8005012:	f9b3 1000 	ldrsh.w	r1, [r3]
 8005016:	4a0f      	ldr	r2, [pc, #60]	@ (8005054 <add_magcal_data+0xc8>)
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	f503 7367 	add.w	r3, r3, #924	@ 0x39c
 800501e:	005b      	lsls	r3, r3, #1
 8005020:	4413      	add	r3, r2
 8005022:	460a      	mov	r2, r1
 8005024:	805a      	strh	r2, [r3, #2]
	magcal.BpFast[2][i] = data[2];
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	3304      	adds	r3, #4
 800502a:	f9b3 1000 	ldrsh.w	r1, [r3]
 800502e:	4a09      	ldr	r2, [pc, #36]	@ (8005054 <add_magcal_data+0xc8>)
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	f203 532c 	addw	r3, r3, #1324	@ 0x52c
 8005036:	005b      	lsls	r3, r3, #1
 8005038:	4413      	add	r3, r2
 800503a:	460a      	mov	r2, r1
 800503c:	805a      	strh	r2, [r3, #2]
	magcal.valid[i] = 1;
 800503e:	4a05      	ldr	r2, [pc, #20]	@ (8005054 <add_magcal_data+0xc8>)
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	4413      	add	r3, r2
 8005044:	f603 537a 	addw	r3, r3, #3450	@ 0xd7a
 8005048:	2201      	movs	r2, #1
 800504a:	701a      	strb	r2, [r3, #0]
}
 800504c:	bf00      	nop
 800504e:	3710      	adds	r7, #16
 8005050:	46bd      	mov	sp, r7
 8005052:	bd80      	pop	{r7, pc}
 8005054:	200004d8 	.word	0x200004d8
 8005058:	51eb851f 	.word	0x51eb851f

0800505c <process_imu_data>:

void process_imu_data(int16_t raw_magX, int16_t raw_magY, int16_t raw_magZ) {
 800505c:	b580      	push	{r7, lr}
 800505e:	b082      	sub	sp, #8
 8005060:	af00      	add	r7, sp, #0
 8005062:	4603      	mov	r3, r0
 8005064:	80fb      	strh	r3, [r7, #6]
 8005066:	460b      	mov	r3, r1
 8005068:	80bb      	strh	r3, [r7, #4]
 800506a:	4613      	mov	r3, r2
 800506c:	807b      	strh	r3, [r7, #2]
	mag_raw[0] = raw_magX;
 800506e:	88fa      	ldrh	r2, [r7, #6]
 8005070:	4b0e      	ldr	r3, [pc, #56]	@ (80050ac <process_imu_data+0x50>)
 8005072:	801a      	strh	r2, [r3, #0]
	mag_raw[1] = raw_magY;
 8005074:	88ba      	ldrh	r2, [r7, #4]
 8005076:	4b0d      	ldr	r3, [pc, #52]	@ (80050ac <process_imu_data+0x50>)
 8005078:	805a      	strh	r2, [r3, #2]
	mag_raw[2] = raw_magZ;
 800507a:	887a      	ldrh	r2, [r7, #2]
 800507c:	4b0b      	ldr	r3, [pc, #44]	@ (80050ac <process_imu_data+0x50>)
 800507e:	809a      	strh	r2, [r3, #4]

	add_magcal_data(mag_raw);
 8005080:	480a      	ldr	r0, [pc, #40]	@ (80050ac <process_imu_data+0x50>)
 8005082:	f7ff ff83 	bl	8004f8c <add_magcal_data>
//		if (MagCal_Run()) {
//			last_cal_time = current_time;
//		}
//	}

	waitcount++;
 8005086:	4b0a      	ldr	r3, [pc, #40]	@ (80050b0 <process_imu_data+0x54>)
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	3301      	adds	r3, #1
 800508c:	4a08      	ldr	r2, [pc, #32]	@ (80050b0 <process_imu_data+0x54>)
 800508e:	6013      	str	r3, [r2, #0]

	if (waitcount >= 5) {
 8005090:	4b07      	ldr	r3, [pc, #28]	@ (80050b0 <process_imu_data+0x54>)
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	2b04      	cmp	r3, #4
 8005096:	d904      	bls.n	80050a2 <process_imu_data+0x46>
	    if (MagCal_Run()) {
 8005098:	f7fc fdfe 	bl	8001c98 <MagCal_Run>
	    }
	    waitcount = 0;
 800509c:	4b04      	ldr	r3, [pc, #16]	@ (80050b0 <process_imu_data+0x54>)
 800509e:	2200      	movs	r2, #0
 80050a0:	601a      	str	r2, [r3, #0]
	}
}
 80050a2:	bf00      	nop
 80050a4:	3708      	adds	r7, #8
 80050a6:	46bd      	mov	sp, r7
 80050a8:	bd80      	pop	{r7, pc}
 80050aa:	bf00      	nop
 80050ac:	200013e4 	.word	0x200013e4
 80050b0:	20001444 	.word	0x20001444
 80050b4:	00000000 	.word	0x00000000

080050b8 <HAL_I2C_MemRxCpltCallback>:

void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c) {
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b08a      	sub	sp, #40	@ 0x28
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]

//	DAM_Callback_cnt++;

	if (hi2c->Instance == I2C1) {
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	4a82      	ldr	r2, [pc, #520]	@ (80052d0 <HAL_I2C_MemRxCpltCallback+0x218>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	f040 8485 	bne.w	80059d6 <HAL_I2C_MemRxCpltCallback+0x91e>
		if (CurrentSensor == GYRO_SENSOR) {
 80050cc:	4b81      	ldr	r3, [pc, #516]	@ (80052d4 <HAL_I2C_MemRxCpltCallback+0x21c>)
 80050ce:	781b      	ldrb	r3, [r3, #0]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	f040 8129 	bne.w	8005328 <HAL_I2C_MemRxCpltCallback+0x270>
			gyroX = (int16_t) ((gyro_buffer[1] << 8) | gyro_buffer[0]);
 80050d6:	4b80      	ldr	r3, [pc, #512]	@ (80052d8 <HAL_I2C_MemRxCpltCallback+0x220>)
 80050d8:	785b      	ldrb	r3, [r3, #1]
 80050da:	021b      	lsls	r3, r3, #8
 80050dc:	b21a      	sxth	r2, r3
 80050de:	4b7e      	ldr	r3, [pc, #504]	@ (80052d8 <HAL_I2C_MemRxCpltCallback+0x220>)
 80050e0:	781b      	ldrb	r3, [r3, #0]
 80050e2:	b21b      	sxth	r3, r3
 80050e4:	4313      	orrs	r3, r2
 80050e6:	b21a      	sxth	r2, r3
 80050e8:	4b7c      	ldr	r3, [pc, #496]	@ (80052dc <HAL_I2C_MemRxCpltCallback+0x224>)
 80050ea:	801a      	strh	r2, [r3, #0]
			gyroY = (int16_t) ((gyro_buffer[3] << 8) | gyro_buffer[2]);
 80050ec:	4b7a      	ldr	r3, [pc, #488]	@ (80052d8 <HAL_I2C_MemRxCpltCallback+0x220>)
 80050ee:	78db      	ldrb	r3, [r3, #3]
 80050f0:	021b      	lsls	r3, r3, #8
 80050f2:	b21a      	sxth	r2, r3
 80050f4:	4b78      	ldr	r3, [pc, #480]	@ (80052d8 <HAL_I2C_MemRxCpltCallback+0x220>)
 80050f6:	789b      	ldrb	r3, [r3, #2]
 80050f8:	b21b      	sxth	r3, r3
 80050fa:	4313      	orrs	r3, r2
 80050fc:	b21a      	sxth	r2, r3
 80050fe:	4b78      	ldr	r3, [pc, #480]	@ (80052e0 <HAL_I2C_MemRxCpltCallback+0x228>)
 8005100:	801a      	strh	r2, [r3, #0]
			gyroZ = (int16_t) ((gyro_buffer[5] << 8) | gyro_buffer[4]);
 8005102:	4b75      	ldr	r3, [pc, #468]	@ (80052d8 <HAL_I2C_MemRxCpltCallback+0x220>)
 8005104:	795b      	ldrb	r3, [r3, #5]
 8005106:	021b      	lsls	r3, r3, #8
 8005108:	b21a      	sxth	r2, r3
 800510a:	4b73      	ldr	r3, [pc, #460]	@ (80052d8 <HAL_I2C_MemRxCpltCallback+0x220>)
 800510c:	791b      	ldrb	r3, [r3, #4]
 800510e:	b21b      	sxth	r3, r3
 8005110:	4313      	orrs	r3, r2
 8005112:	b21a      	sxth	r2, r3
 8005114:	4b73      	ldr	r3, [pc, #460]	@ (80052e4 <HAL_I2C_MemRxCpltCallback+0x22c>)
 8005116:	801a      	strh	r2, [r3, #0]

			gyroX_current = gyroX * GYRO_SENSITIVITY_245DPS * DEG2RAD;
 8005118:	4b70      	ldr	r3, [pc, #448]	@ (80052dc <HAL_I2C_MemRxCpltCallback+0x224>)
 800511a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800511e:	ee07 3a90 	vmov	s15, r3
 8005122:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005126:	ed9f 7a70 	vldr	s14, [pc, #448]	@ 80052e8 <HAL_I2C_MemRxCpltCallback+0x230>
 800512a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800512e:	ee17 0a90 	vmov	r0, s15
 8005132:	f7fb f9e1 	bl	80004f8 <__aeabi_f2d>
 8005136:	a364      	add	r3, pc, #400	@ (adr r3, 80052c8 <HAL_I2C_MemRxCpltCallback+0x210>)
 8005138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800513c:	f7fb fa34 	bl	80005a8 <__aeabi_dmul>
 8005140:	4602      	mov	r2, r0
 8005142:	460b      	mov	r3, r1
 8005144:	4610      	mov	r0, r2
 8005146:	4619      	mov	r1, r3
 8005148:	f7fb fcde 	bl	8000b08 <__aeabi_d2f>
 800514c:	4603      	mov	r3, r0
 800514e:	4a67      	ldr	r2, [pc, #412]	@ (80052ec <HAL_I2C_MemRxCpltCallback+0x234>)
 8005150:	6013      	str	r3, [r2, #0]
			gyroY_current = gyroY * GYRO_SENSITIVITY_245DPS * DEG2RAD;
 8005152:	4b63      	ldr	r3, [pc, #396]	@ (80052e0 <HAL_I2C_MemRxCpltCallback+0x228>)
 8005154:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005158:	ee07 3a90 	vmov	s15, r3
 800515c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005160:	ed9f 7a61 	vldr	s14, [pc, #388]	@ 80052e8 <HAL_I2C_MemRxCpltCallback+0x230>
 8005164:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005168:	ee17 0a90 	vmov	r0, s15
 800516c:	f7fb f9c4 	bl	80004f8 <__aeabi_f2d>
 8005170:	a355      	add	r3, pc, #340	@ (adr r3, 80052c8 <HAL_I2C_MemRxCpltCallback+0x210>)
 8005172:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005176:	f7fb fa17 	bl	80005a8 <__aeabi_dmul>
 800517a:	4602      	mov	r2, r0
 800517c:	460b      	mov	r3, r1
 800517e:	4610      	mov	r0, r2
 8005180:	4619      	mov	r1, r3
 8005182:	f7fb fcc1 	bl	8000b08 <__aeabi_d2f>
 8005186:	4603      	mov	r3, r0
 8005188:	4a59      	ldr	r2, [pc, #356]	@ (80052f0 <HAL_I2C_MemRxCpltCallback+0x238>)
 800518a:	6013      	str	r3, [r2, #0]
			gyroZ_current = gyroZ * GYRO_SENSITIVITY_245DPS * DEG2RAD;
 800518c:	4b55      	ldr	r3, [pc, #340]	@ (80052e4 <HAL_I2C_MemRxCpltCallback+0x22c>)
 800518e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005192:	ee07 3a90 	vmov	s15, r3
 8005196:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800519a:	ed9f 7a53 	vldr	s14, [pc, #332]	@ 80052e8 <HAL_I2C_MemRxCpltCallback+0x230>
 800519e:	ee67 7a87 	vmul.f32	s15, s15, s14
 80051a2:	ee17 0a90 	vmov	r0, s15
 80051a6:	f7fb f9a7 	bl	80004f8 <__aeabi_f2d>
 80051aa:	a347      	add	r3, pc, #284	@ (adr r3, 80052c8 <HAL_I2C_MemRxCpltCallback+0x210>)
 80051ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051b0:	f7fb f9fa 	bl	80005a8 <__aeabi_dmul>
 80051b4:	4602      	mov	r2, r0
 80051b6:	460b      	mov	r3, r1
 80051b8:	4610      	mov	r0, r2
 80051ba:	4619      	mov	r1, r3
 80051bc:	f7fb fca4 	bl	8000b08 <__aeabi_d2f>
 80051c0:	4603      	mov	r3, r0
 80051c2:	4a4c      	ldr	r2, [pc, #304]	@ (80052f4 <HAL_I2C_MemRxCpltCallback+0x23c>)
 80051c4:	6013      	str	r3, [r2, #0]

//			gyroX_current = gyroX * GYRO_SENSITIVITY_245DPS ;
//			gyroY_current = gyroY * GYRO_SENSITIVITY_245DPS ;
//			gyroZ_current = gyroZ * GYRO_SENSITIVITY_245DPS ;

			if (DAM_Callback_cnt < 1000) {
 80051c6:	4b4c      	ldr	r3, [pc, #304]	@ (80052f8 <HAL_I2C_MemRxCpltCallback+0x240>)
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80051ce:	da26      	bge.n	800521e <HAL_I2C_MemRxCpltCallback+0x166>

				gyroX_sum += gyroX_current;
 80051d0:	4b4a      	ldr	r3, [pc, #296]	@ (80052fc <HAL_I2C_MemRxCpltCallback+0x244>)
 80051d2:	ed93 7a00 	vldr	s14, [r3]
 80051d6:	4b45      	ldr	r3, [pc, #276]	@ (80052ec <HAL_I2C_MemRxCpltCallback+0x234>)
 80051d8:	edd3 7a00 	vldr	s15, [r3]
 80051dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80051e0:	4b46      	ldr	r3, [pc, #280]	@ (80052fc <HAL_I2C_MemRxCpltCallback+0x244>)
 80051e2:	edc3 7a00 	vstr	s15, [r3]
				gyroY_sum += gyroY_current;
 80051e6:	4b46      	ldr	r3, [pc, #280]	@ (8005300 <HAL_I2C_MemRxCpltCallback+0x248>)
 80051e8:	ed93 7a00 	vldr	s14, [r3]
 80051ec:	4b40      	ldr	r3, [pc, #256]	@ (80052f0 <HAL_I2C_MemRxCpltCallback+0x238>)
 80051ee:	edd3 7a00 	vldr	s15, [r3]
 80051f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80051f6:	4b42      	ldr	r3, [pc, #264]	@ (8005300 <HAL_I2C_MemRxCpltCallback+0x248>)
 80051f8:	edc3 7a00 	vstr	s15, [r3]
				gyroZ_sum += gyroZ_current;
 80051fc:	4b41      	ldr	r3, [pc, #260]	@ (8005304 <HAL_I2C_MemRxCpltCallback+0x24c>)
 80051fe:	ed93 7a00 	vldr	s14, [r3]
 8005202:	4b3c      	ldr	r3, [pc, #240]	@ (80052f4 <HAL_I2C_MemRxCpltCallback+0x23c>)
 8005204:	edd3 7a00 	vldr	s15, [r3]
 8005208:	ee77 7a27 	vadd.f32	s15, s14, s15
 800520c:	4b3d      	ldr	r3, [pc, #244]	@ (8005304 <HAL_I2C_MemRxCpltCallback+0x24c>)
 800520e:	edc3 7a00 	vstr	s15, [r3]

				DAM_Callback_cnt++;
 8005212:	4b39      	ldr	r3, [pc, #228]	@ (80052f8 <HAL_I2C_MemRxCpltCallback+0x240>)
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	3301      	adds	r3, #1
 8005218:	4a37      	ldr	r2, [pc, #220]	@ (80052f8 <HAL_I2C_MemRxCpltCallback+0x240>)
 800521a:	6013      	str	r3, [r2, #0]
			} else {
				LSM9DS1_ReadMag_DMA();
			}
		}
	}
}
 800521c:	e3db      	b.n	80059d6 <HAL_I2C_MemRxCpltCallback+0x91e>
				DAM_Callback_cnt = 10000;
 800521e:	4b36      	ldr	r3, [pc, #216]	@ (80052f8 <HAL_I2C_MemRxCpltCallback+0x240>)
 8005220:	f242 7210 	movw	r2, #10000	@ 0x2710
 8005224:	601a      	str	r2, [r3, #0]
				gyroX_avg = gyroX_sum / 1000.0f;
 8005226:	4b35      	ldr	r3, [pc, #212]	@ (80052fc <HAL_I2C_MemRxCpltCallback+0x244>)
 8005228:	ed93 7a00 	vldr	s14, [r3]
 800522c:	eddf 6a36 	vldr	s13, [pc, #216]	@ 8005308 <HAL_I2C_MemRxCpltCallback+0x250>
 8005230:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005234:	4b35      	ldr	r3, [pc, #212]	@ (800530c <HAL_I2C_MemRxCpltCallback+0x254>)
 8005236:	edc3 7a00 	vstr	s15, [r3]
				gyroY_avg = gyroY_sum / 1000.0f;
 800523a:	4b31      	ldr	r3, [pc, #196]	@ (8005300 <HAL_I2C_MemRxCpltCallback+0x248>)
 800523c:	ed93 7a00 	vldr	s14, [r3]
 8005240:	eddf 6a31 	vldr	s13, [pc, #196]	@ 8005308 <HAL_I2C_MemRxCpltCallback+0x250>
 8005244:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005248:	4b31      	ldr	r3, [pc, #196]	@ (8005310 <HAL_I2C_MemRxCpltCallback+0x258>)
 800524a:	edc3 7a00 	vstr	s15, [r3]
				gyroZ_avg = gyroZ_sum / 1000.0f;
 800524e:	4b2d      	ldr	r3, [pc, #180]	@ (8005304 <HAL_I2C_MemRxCpltCallback+0x24c>)
 8005250:	ed93 7a00 	vldr	s14, [r3]
 8005254:	eddf 6a2c 	vldr	s13, [pc, #176]	@ 8005308 <HAL_I2C_MemRxCpltCallback+0x250>
 8005258:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800525c:	4b2d      	ldr	r3, [pc, #180]	@ (8005314 <HAL_I2C_MemRxCpltCallback+0x25c>)
 800525e:	edc3 7a00 	vstr	s15, [r3]
				gyro_x = gyroX_current - gyroX_avg;
 8005262:	4b22      	ldr	r3, [pc, #136]	@ (80052ec <HAL_I2C_MemRxCpltCallback+0x234>)
 8005264:	ed93 7a00 	vldr	s14, [r3]
 8005268:	4b28      	ldr	r3, [pc, #160]	@ (800530c <HAL_I2C_MemRxCpltCallback+0x254>)
 800526a:	edd3 7a00 	vldr	s15, [r3]
 800526e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005272:	4b29      	ldr	r3, [pc, #164]	@ (8005318 <HAL_I2C_MemRxCpltCallback+0x260>)
 8005274:	edc3 7a00 	vstr	s15, [r3]
				gyro_y = gyroY_current - gyroY_avg;
 8005278:	4b1d      	ldr	r3, [pc, #116]	@ (80052f0 <HAL_I2C_MemRxCpltCallback+0x238>)
 800527a:	ed93 7a00 	vldr	s14, [r3]
 800527e:	4b24      	ldr	r3, [pc, #144]	@ (8005310 <HAL_I2C_MemRxCpltCallback+0x258>)
 8005280:	edd3 7a00 	vldr	s15, [r3]
 8005284:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005288:	4b24      	ldr	r3, [pc, #144]	@ (800531c <HAL_I2C_MemRxCpltCallback+0x264>)
 800528a:	edc3 7a00 	vstr	s15, [r3]
				gyro_z = gyroZ_current - gyroZ_avg;
 800528e:	4b19      	ldr	r3, [pc, #100]	@ (80052f4 <HAL_I2C_MemRxCpltCallback+0x23c>)
 8005290:	ed93 7a00 	vldr	s14, [r3]
 8005294:	4b1f      	ldr	r3, [pc, #124]	@ (8005314 <HAL_I2C_MemRxCpltCallback+0x25c>)
 8005296:	edd3 7a00 	vldr	s15, [r3]
 800529a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800529e:	4b20      	ldr	r3, [pc, #128]	@ (8005320 <HAL_I2C_MemRxCpltCallback+0x268>)
 80052a0:	edc3 7a00 	vstr	s15, [r3]
				gxyz[0] = gyro_x;
 80052a4:	4b1c      	ldr	r3, [pc, #112]	@ (8005318 <HAL_I2C_MemRxCpltCallback+0x260>)
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	4a1e      	ldr	r2, [pc, #120]	@ (8005324 <HAL_I2C_MemRxCpltCallback+0x26c>)
 80052aa:	6013      	str	r3, [r2, #0]
				gxyz[1] = gyro_y;
 80052ac:	4b1b      	ldr	r3, [pc, #108]	@ (800531c <HAL_I2C_MemRxCpltCallback+0x264>)
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	4a1c      	ldr	r2, [pc, #112]	@ (8005324 <HAL_I2C_MemRxCpltCallback+0x26c>)
 80052b2:	6053      	str	r3, [r2, #4]
				gxyz[2] = gyro_z;
 80052b4:	4b1a      	ldr	r3, [pc, #104]	@ (8005320 <HAL_I2C_MemRxCpltCallback+0x268>)
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	4a1a      	ldr	r2, [pc, #104]	@ (8005324 <HAL_I2C_MemRxCpltCallback+0x26c>)
 80052ba:	6093      	str	r3, [r2, #8]
				CurrentSensor = ACCEL_SENSOR;
 80052bc:	4b05      	ldr	r3, [pc, #20]	@ (80052d4 <HAL_I2C_MemRxCpltCallback+0x21c>)
 80052be:	2201      	movs	r2, #1
 80052c0:	701a      	strb	r2, [r3, #0]
				LSM9DS1_ReadAccel_DMA();
 80052c2:	f7ff fb6b 	bl	800499c <LSM9DS1_ReadAccel_DMA>
}
 80052c6:	e386      	b.n	80059d6 <HAL_I2C_MemRxCpltCallback+0x91e>
 80052c8:	a2529d39 	.word	0xa2529d39
 80052cc:	3f91df46 	.word	0x3f91df46
 80052d0:	40005400 	.word	0x40005400
 80052d4:	20000008 	.word	0x20000008
 80052d8:	2000035c 	.word	0x2000035c
 80052dc:	20000372 	.word	0x20000372
 80052e0:	20000374 	.word	0x20000374
 80052e4:	20000376 	.word	0x20000376
 80052e8:	3c0f5c29 	.word	0x3c0f5c29
 80052ec:	200003b4 	.word	0x200003b4
 80052f0:	200003b8 	.word	0x200003b8
 80052f4:	200003bc 	.word	0x200003bc
 80052f8:	200003cc 	.word	0x200003cc
 80052fc:	2000039c 	.word	0x2000039c
 8005300:	200003a0 	.word	0x200003a0
 8005304:	200003a4 	.word	0x200003a4
 8005308:	447a0000 	.word	0x447a0000
 800530c:	200003a8 	.word	0x200003a8
 8005310:	200003ac 	.word	0x200003ac
 8005314:	200003b0 	.word	0x200003b0
 8005318:	20000390 	.word	0x20000390
 800531c:	20000394 	.word	0x20000394
 8005320:	20000398 	.word	0x20000398
 8005324:	20000490 	.word	0x20000490
		} else if (CurrentSensor == ACCEL_SENSOR) {
 8005328:	4b57      	ldr	r3, [pc, #348]	@ (8005488 <HAL_I2C_MemRxCpltCallback+0x3d0>)
 800532a:	781b      	ldrb	r3, [r3, #0]
 800532c:	2b01      	cmp	r3, #1
 800532e:	f040 80c1 	bne.w	80054b4 <HAL_I2C_MemRxCpltCallback+0x3fc>
			accelX = (int16_t) ((accel_buffer[1] << 8) | accel_buffer[0]);
 8005332:	4b56      	ldr	r3, [pc, #344]	@ (800548c <HAL_I2C_MemRxCpltCallback+0x3d4>)
 8005334:	785b      	ldrb	r3, [r3, #1]
 8005336:	021b      	lsls	r3, r3, #8
 8005338:	b21a      	sxth	r2, r3
 800533a:	4b54      	ldr	r3, [pc, #336]	@ (800548c <HAL_I2C_MemRxCpltCallback+0x3d4>)
 800533c:	781b      	ldrb	r3, [r3, #0]
 800533e:	b21b      	sxth	r3, r3
 8005340:	4313      	orrs	r3, r2
 8005342:	b21a      	sxth	r2, r3
 8005344:	4b52      	ldr	r3, [pc, #328]	@ (8005490 <HAL_I2C_MemRxCpltCallback+0x3d8>)
 8005346:	801a      	strh	r2, [r3, #0]
			accelY = (int16_t) ((accel_buffer[3] << 8) | accel_buffer[2]);
 8005348:	4b50      	ldr	r3, [pc, #320]	@ (800548c <HAL_I2C_MemRxCpltCallback+0x3d4>)
 800534a:	78db      	ldrb	r3, [r3, #3]
 800534c:	021b      	lsls	r3, r3, #8
 800534e:	b21a      	sxth	r2, r3
 8005350:	4b4e      	ldr	r3, [pc, #312]	@ (800548c <HAL_I2C_MemRxCpltCallback+0x3d4>)
 8005352:	789b      	ldrb	r3, [r3, #2]
 8005354:	b21b      	sxth	r3, r3
 8005356:	4313      	orrs	r3, r2
 8005358:	b21a      	sxth	r2, r3
 800535a:	4b4e      	ldr	r3, [pc, #312]	@ (8005494 <HAL_I2C_MemRxCpltCallback+0x3dc>)
 800535c:	801a      	strh	r2, [r3, #0]
			accelZ = (int16_t) ((accel_buffer[5] << 8) | accel_buffer[4]);
 800535e:	4b4b      	ldr	r3, [pc, #300]	@ (800548c <HAL_I2C_MemRxCpltCallback+0x3d4>)
 8005360:	795b      	ldrb	r3, [r3, #5]
 8005362:	021b      	lsls	r3, r3, #8
 8005364:	b21a      	sxth	r2, r3
 8005366:	4b49      	ldr	r3, [pc, #292]	@ (800548c <HAL_I2C_MemRxCpltCallback+0x3d4>)
 8005368:	791b      	ldrb	r3, [r3, #4]
 800536a:	b21b      	sxth	r3, r3
 800536c:	4313      	orrs	r3, r2
 800536e:	b21a      	sxth	r2, r3
 8005370:	4b49      	ldr	r3, [pc, #292]	@ (8005498 <HAL_I2C_MemRxCpltCallback+0x3e0>)
 8005372:	801a      	strh	r2, [r3, #0]
			accel_x = accelX * (2.0f * 9.81f / 32768.0f); // 2G = 2 * 9.81 m/s², 16비트 = 32768
 8005374:	4b46      	ldr	r3, [pc, #280]	@ (8005490 <HAL_I2C_MemRxCpltCallback+0x3d8>)
 8005376:	f9b3 3000 	ldrsh.w	r3, [r3]
 800537a:	ee07 3a90 	vmov	s15, r3
 800537e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005382:	ed9f 7a46 	vldr	s14, [pc, #280]	@ 800549c <HAL_I2C_MemRxCpltCallback+0x3e4>
 8005386:	ee67 7a87 	vmul.f32	s15, s15, s14
 800538a:	4b45      	ldr	r3, [pc, #276]	@ (80054a0 <HAL_I2C_MemRxCpltCallback+0x3e8>)
 800538c:	edc3 7a00 	vstr	s15, [r3]
			accel_y = accelY * (2.0f * 9.81f / 32768.0f);
 8005390:	4b40      	ldr	r3, [pc, #256]	@ (8005494 <HAL_I2C_MemRxCpltCallback+0x3dc>)
 8005392:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005396:	ee07 3a90 	vmov	s15, r3
 800539a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800539e:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 800549c <HAL_I2C_MemRxCpltCallback+0x3e4>
 80053a2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80053a6:	4b3f      	ldr	r3, [pc, #252]	@ (80054a4 <HAL_I2C_MemRxCpltCallback+0x3ec>)
 80053a8:	edc3 7a00 	vstr	s15, [r3]
			accel_z = accelZ * (2.0f * 9.81f / 32768.0f);
 80053ac:	4b3a      	ldr	r3, [pc, #232]	@ (8005498 <HAL_I2C_MemRxCpltCallback+0x3e0>)
 80053ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80053b2:	ee07 3a90 	vmov	s15, r3
 80053b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80053ba:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 800549c <HAL_I2C_MemRxCpltCallback+0x3e4>
 80053be:	ee67 7a87 	vmul.f32	s15, s15, s14
 80053c2:	4b39      	ldr	r3, [pc, #228]	@ (80054a8 <HAL_I2C_MemRxCpltCallback+0x3f0>)
 80053c4:	edc3 7a00 	vstr	s15, [r3]
			axyz[0] = accel_x;
 80053c8:	4b35      	ldr	r3, [pc, #212]	@ (80054a0 <HAL_I2C_MemRxCpltCallback+0x3e8>)
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	4a37      	ldr	r2, [pc, #220]	@ (80054ac <HAL_I2C_MemRxCpltCallback+0x3f4>)
 80053ce:	6013      	str	r3, [r2, #0]
			axyz[1] = accel_y;
 80053d0:	4b34      	ldr	r3, [pc, #208]	@ (80054a4 <HAL_I2C_MemRxCpltCallback+0x3ec>)
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	4a35      	ldr	r2, [pc, #212]	@ (80054ac <HAL_I2C_MemRxCpltCallback+0x3f4>)
 80053d6:	6053      	str	r3, [r2, #4]
			axyz[2] = accel_z;
 80053d8:	4b33      	ldr	r3, [pc, #204]	@ (80054a8 <HAL_I2C_MemRxCpltCallback+0x3f0>)
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	4a33      	ldr	r2, [pc, #204]	@ (80054ac <HAL_I2C_MemRxCpltCallback+0x3f4>)
 80053de:	6093      	str	r3, [r2, #8]
			axyz2[0] = axyz[0];
 80053e0:	4b32      	ldr	r3, [pc, #200]	@ (80054ac <HAL_I2C_MemRxCpltCallback+0x3f4>)
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	4a32      	ldr	r2, [pc, #200]	@ (80054b0 <HAL_I2C_MemRxCpltCallback+0x3f8>)
 80053e6:	6013      	str	r3, [r2, #0]
			axyz2[1] = axyz[1];
 80053e8:	4b30      	ldr	r3, [pc, #192]	@ (80054ac <HAL_I2C_MemRxCpltCallback+0x3f4>)
 80053ea:	685b      	ldr	r3, [r3, #4]
 80053ec:	4a30      	ldr	r2, [pc, #192]	@ (80054b0 <HAL_I2C_MemRxCpltCallback+0x3f8>)
 80053ee:	6053      	str	r3, [r2, #4]
			axyz2[2] = axyz[2];
 80053f0:	4b2e      	ldr	r3, [pc, #184]	@ (80054ac <HAL_I2C_MemRxCpltCallback+0x3f4>)
 80053f2:	689b      	ldr	r3, [r3, #8]
 80053f4:	4a2e      	ldr	r2, [pc, #184]	@ (80054b0 <HAL_I2C_MemRxCpltCallback+0x3f8>)
 80053f6:	6093      	str	r3, [r2, #8]
			axyz[0] = axyz[0] * 1 / 9.8;
 80053f8:	4b2c      	ldr	r3, [pc, #176]	@ (80054ac <HAL_I2C_MemRxCpltCallback+0x3f4>)
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	4618      	mov	r0, r3
 80053fe:	f7fb f87b 	bl	80004f8 <__aeabi_f2d>
 8005402:	a31f      	add	r3, pc, #124	@ (adr r3, 8005480 <HAL_I2C_MemRxCpltCallback+0x3c8>)
 8005404:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005408:	f7fb f9f8 	bl	80007fc <__aeabi_ddiv>
 800540c:	4602      	mov	r2, r0
 800540e:	460b      	mov	r3, r1
 8005410:	4610      	mov	r0, r2
 8005412:	4619      	mov	r1, r3
 8005414:	f7fb fb78 	bl	8000b08 <__aeabi_d2f>
 8005418:	4603      	mov	r3, r0
 800541a:	4a24      	ldr	r2, [pc, #144]	@ (80054ac <HAL_I2C_MemRxCpltCallback+0x3f4>)
 800541c:	6013      	str	r3, [r2, #0]
			axyz[1] = axyz[1] * 1 / 9.8;
 800541e:	4b23      	ldr	r3, [pc, #140]	@ (80054ac <HAL_I2C_MemRxCpltCallback+0x3f4>)
 8005420:	685b      	ldr	r3, [r3, #4]
 8005422:	4618      	mov	r0, r3
 8005424:	f7fb f868 	bl	80004f8 <__aeabi_f2d>
 8005428:	a315      	add	r3, pc, #84	@ (adr r3, 8005480 <HAL_I2C_MemRxCpltCallback+0x3c8>)
 800542a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800542e:	f7fb f9e5 	bl	80007fc <__aeabi_ddiv>
 8005432:	4602      	mov	r2, r0
 8005434:	460b      	mov	r3, r1
 8005436:	4610      	mov	r0, r2
 8005438:	4619      	mov	r1, r3
 800543a:	f7fb fb65 	bl	8000b08 <__aeabi_d2f>
 800543e:	4603      	mov	r3, r0
 8005440:	4a1a      	ldr	r2, [pc, #104]	@ (80054ac <HAL_I2C_MemRxCpltCallback+0x3f4>)
 8005442:	6053      	str	r3, [r2, #4]
			axyz[2] = axyz[2] * 1 / 9.8;
 8005444:	4b19      	ldr	r3, [pc, #100]	@ (80054ac <HAL_I2C_MemRxCpltCallback+0x3f4>)
 8005446:	689b      	ldr	r3, [r3, #8]
 8005448:	4618      	mov	r0, r3
 800544a:	f7fb f855 	bl	80004f8 <__aeabi_f2d>
 800544e:	a30c      	add	r3, pc, #48	@ (adr r3, 8005480 <HAL_I2C_MemRxCpltCallback+0x3c8>)
 8005450:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005454:	f7fb f9d2 	bl	80007fc <__aeabi_ddiv>
 8005458:	4602      	mov	r2, r0
 800545a:	460b      	mov	r3, r1
 800545c:	4610      	mov	r0, r2
 800545e:	4619      	mov	r1, r3
 8005460:	f7fb fb52 	bl	8000b08 <__aeabi_d2f>
 8005464:	4603      	mov	r3, r0
 8005466:	4a11      	ldr	r2, [pc, #68]	@ (80054ac <HAL_I2C_MemRxCpltCallback+0x3f4>)
 8005468:	6093      	str	r3, [r2, #8]
			vector_normalize(axyz);
 800546a:	4810      	ldr	r0, [pc, #64]	@ (80054ac <HAL_I2C_MemRxCpltCallback+0x3f4>)
 800546c:	f7fe f98a 	bl	8003784 <vector_normalize>
			CurrentSensor = MAG_SENSOR;
 8005470:	4b05      	ldr	r3, [pc, #20]	@ (8005488 <HAL_I2C_MemRxCpltCallback+0x3d0>)
 8005472:	2202      	movs	r2, #2
 8005474:	701a      	strb	r2, [r3, #0]
			LSM9DS1_ReadMag_DMA();
 8005476:	f7ff faa5 	bl	80049c4 <LSM9DS1_ReadMag_DMA>
}
 800547a:	e2ac      	b.n	80059d6 <HAL_I2C_MemRxCpltCallback+0x91e>
 800547c:	f3af 8000 	nop.w
 8005480:	9999999a 	.word	0x9999999a
 8005484:	40239999 	.word	0x40239999
 8005488:	20000008 	.word	0x20000008
 800548c:	20000364 	.word	0x20000364
 8005490:	20000378 	.word	0x20000378
 8005494:	2000037a 	.word	0x2000037a
 8005498:	2000037c 	.word	0x2000037c
 800549c:	3a1cf5c3 	.word	0x3a1cf5c3
 80054a0:	20000384 	.word	0x20000384
 80054a4:	20000388 	.word	0x20000388
 80054a8:	2000038c 	.word	0x2000038c
 80054ac:	200004a8 	.word	0x200004a8
 80054b0:	200004cc 	.word	0x200004cc
		} else if (CurrentSensor == MAG_SENSOR) {
 80054b4:	4bae      	ldr	r3, [pc, #696]	@ (8005770 <HAL_I2C_MemRxCpltCallback+0x6b8>)
 80054b6:	781b      	ldrb	r3, [r3, #0]
 80054b8:	2b02      	cmp	r3, #2
 80054ba:	f040 8193 	bne.w	80057e4 <HAL_I2C_MemRxCpltCallback+0x72c>
			magX = (int16_t) ((mag_buffer[1] << 8) | mag_buffer[0]);
 80054be:	4bad      	ldr	r3, [pc, #692]	@ (8005774 <HAL_I2C_MemRxCpltCallback+0x6bc>)
 80054c0:	785b      	ldrb	r3, [r3, #1]
 80054c2:	021b      	lsls	r3, r3, #8
 80054c4:	b21a      	sxth	r2, r3
 80054c6:	4bab      	ldr	r3, [pc, #684]	@ (8005774 <HAL_I2C_MemRxCpltCallback+0x6bc>)
 80054c8:	781b      	ldrb	r3, [r3, #0]
 80054ca:	b21b      	sxth	r3, r3
 80054cc:	4313      	orrs	r3, r2
 80054ce:	b21a      	sxth	r2, r3
 80054d0:	4ba9      	ldr	r3, [pc, #676]	@ (8005778 <HAL_I2C_MemRxCpltCallback+0x6c0>)
 80054d2:	801a      	strh	r2, [r3, #0]
			magY = (int16_t) ((mag_buffer[3] << 8) | mag_buffer[2]);
 80054d4:	4ba7      	ldr	r3, [pc, #668]	@ (8005774 <HAL_I2C_MemRxCpltCallback+0x6bc>)
 80054d6:	78db      	ldrb	r3, [r3, #3]
 80054d8:	021b      	lsls	r3, r3, #8
 80054da:	b21a      	sxth	r2, r3
 80054dc:	4ba5      	ldr	r3, [pc, #660]	@ (8005774 <HAL_I2C_MemRxCpltCallback+0x6bc>)
 80054de:	789b      	ldrb	r3, [r3, #2]
 80054e0:	b21b      	sxth	r3, r3
 80054e2:	4313      	orrs	r3, r2
 80054e4:	b21a      	sxth	r2, r3
 80054e6:	4ba5      	ldr	r3, [pc, #660]	@ (800577c <HAL_I2C_MemRxCpltCallback+0x6c4>)
 80054e8:	801a      	strh	r2, [r3, #0]
			magZ = (int16_t) ((mag_buffer[5] << 8) | mag_buffer[4]);
 80054ea:	4ba2      	ldr	r3, [pc, #648]	@ (8005774 <HAL_I2C_MemRxCpltCallback+0x6bc>)
 80054ec:	795b      	ldrb	r3, [r3, #5]
 80054ee:	021b      	lsls	r3, r3, #8
 80054f0:	b21a      	sxth	r2, r3
 80054f2:	4ba0      	ldr	r3, [pc, #640]	@ (8005774 <HAL_I2C_MemRxCpltCallback+0x6bc>)
 80054f4:	791b      	ldrb	r3, [r3, #4]
 80054f6:	b21b      	sxth	r3, r3
 80054f8:	4313      	orrs	r3, r2
 80054fa:	b21a      	sxth	r2, r3
 80054fc:	4ba0      	ldr	r3, [pc, #640]	@ (8005780 <HAL_I2C_MemRxCpltCallback+0x6c8>)
 80054fe:	801a      	strh	r2, [r3, #0]
			mag_x = magX * (4.0f / 32768.0f) * 100;  // uT
 8005500:	4b9d      	ldr	r3, [pc, #628]	@ (8005778 <HAL_I2C_MemRxCpltCallback+0x6c0>)
 8005502:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005506:	ee07 3a90 	vmov	s15, r3
 800550a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800550e:	ed9f 7a9d 	vldr	s14, [pc, #628]	@ 8005784 <HAL_I2C_MemRxCpltCallback+0x6cc>
 8005512:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005516:	ed9f 7a9c 	vldr	s14, [pc, #624]	@ 8005788 <HAL_I2C_MemRxCpltCallback+0x6d0>
 800551a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800551e:	4b9b      	ldr	r3, [pc, #620]	@ (800578c <HAL_I2C_MemRxCpltCallback+0x6d4>)
 8005520:	edc3 7a00 	vstr	s15, [r3]
			mag_y = magY * (4.0f / 32768.0f) * 100;  // uT
 8005524:	4b95      	ldr	r3, [pc, #596]	@ (800577c <HAL_I2C_MemRxCpltCallback+0x6c4>)
 8005526:	f9b3 3000 	ldrsh.w	r3, [r3]
 800552a:	ee07 3a90 	vmov	s15, r3
 800552e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005532:	ed9f 7a94 	vldr	s14, [pc, #592]	@ 8005784 <HAL_I2C_MemRxCpltCallback+0x6cc>
 8005536:	ee67 7a87 	vmul.f32	s15, s15, s14
 800553a:	ed9f 7a93 	vldr	s14, [pc, #588]	@ 8005788 <HAL_I2C_MemRxCpltCallback+0x6d0>
 800553e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005542:	4b93      	ldr	r3, [pc, #588]	@ (8005790 <HAL_I2C_MemRxCpltCallback+0x6d8>)
 8005544:	edc3 7a00 	vstr	s15, [r3]
			mag_z = magZ * (4.0f / 32768.0f) * 100;  // uT
 8005548:	4b8d      	ldr	r3, [pc, #564]	@ (8005780 <HAL_I2C_MemRxCpltCallback+0x6c8>)
 800554a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800554e:	ee07 3a90 	vmov	s15, r3
 8005552:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005556:	ed9f 7a8b 	vldr	s14, [pc, #556]	@ 8005784 <HAL_I2C_MemRxCpltCallback+0x6cc>
 800555a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800555e:	ed9f 7a8a 	vldr	s14, [pc, #552]	@ 8005788 <HAL_I2C_MemRxCpltCallback+0x6d0>
 8005562:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005566:	4b8b      	ldr	r3, [pc, #556]	@ (8005794 <HAL_I2C_MemRxCpltCallback+0x6dc>)
 8005568:	edc3 7a00 	vstr	s15, [r3]
			mx1 = mag_x - hardIron_x;
 800556c:	4b87      	ldr	r3, [pc, #540]	@ (800578c <HAL_I2C_MemRxCpltCallback+0x6d4>)
 800556e:	ed93 7a00 	vldr	s14, [r3]
 8005572:	4b89      	ldr	r3, [pc, #548]	@ (8005798 <HAL_I2C_MemRxCpltCallback+0x6e0>)
 8005574:	edd3 7a00 	vldr	s15, [r3]
 8005578:	ee77 7a67 	vsub.f32	s15, s14, s15
 800557c:	4b87      	ldr	r3, [pc, #540]	@ (800579c <HAL_I2C_MemRxCpltCallback+0x6e4>)
 800557e:	edc3 7a00 	vstr	s15, [r3]
			my1 = mag_y - hardIron_y;
 8005582:	4b83      	ldr	r3, [pc, #524]	@ (8005790 <HAL_I2C_MemRxCpltCallback+0x6d8>)
 8005584:	ed93 7a00 	vldr	s14, [r3]
 8005588:	4b85      	ldr	r3, [pc, #532]	@ (80057a0 <HAL_I2C_MemRxCpltCallback+0x6e8>)
 800558a:	edd3 7a00 	vldr	s15, [r3]
 800558e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005592:	4b84      	ldr	r3, [pc, #528]	@ (80057a4 <HAL_I2C_MemRxCpltCallback+0x6ec>)
 8005594:	edc3 7a00 	vstr	s15, [r3]
			mz1 = mag_z - hardIron_z;
 8005598:	4b7e      	ldr	r3, [pc, #504]	@ (8005794 <HAL_I2C_MemRxCpltCallback+0x6dc>)
 800559a:	ed93 7a00 	vldr	s14, [r3]
 800559e:	4b82      	ldr	r3, [pc, #520]	@ (80057a8 <HAL_I2C_MemRxCpltCallback+0x6f0>)
 80055a0:	edd3 7a00 	vldr	s15, [r3]
 80055a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80055a8:	4b80      	ldr	r3, [pc, #512]	@ (80057ac <HAL_I2C_MemRxCpltCallback+0x6f4>)
 80055aa:	edc3 7a00 	vstr	s15, [r3]
			float corrected_V[] = { mx1, my1, mz1 };
 80055ae:	4b7b      	ldr	r3, [pc, #492]	@ (800579c <HAL_I2C_MemRxCpltCallback+0x6e4>)
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	617b      	str	r3, [r7, #20]
 80055b4:	4b7b      	ldr	r3, [pc, #492]	@ (80057a4 <HAL_I2C_MemRxCpltCallback+0x6ec>)
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	61bb      	str	r3, [r7, #24]
 80055ba:	4b7c      	ldr	r3, [pc, #496]	@ (80057ac <HAL_I2C_MemRxCpltCallback+0x6f4>)
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	61fb      	str	r3, [r7, #28]
			result_V[0] = corrected_V[0] * softIron_cali[0][0]
 80055c0:	ed97 7a05 	vldr	s14, [r7, #20]
 80055c4:	4b7a      	ldr	r3, [pc, #488]	@ (80057b0 <HAL_I2C_MemRxCpltCallback+0x6f8>)
 80055c6:	edd3 7a00 	vldr	s15, [r3]
 80055ca:	ee27 7a27 	vmul.f32	s14, s14, s15
					+ corrected_V[1] * softIron_cali[0][1]
 80055ce:	edd7 6a06 	vldr	s13, [r7, #24]
 80055d2:	4b77      	ldr	r3, [pc, #476]	@ (80057b0 <HAL_I2C_MemRxCpltCallback+0x6f8>)
 80055d4:	edd3 7a01 	vldr	s15, [r3, #4]
 80055d8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80055dc:	ee37 7a27 	vadd.f32	s14, s14, s15
					+ corrected_V[2] * softIron_cali[0][2];
 80055e0:	edd7 6a07 	vldr	s13, [r7, #28]
 80055e4:	4b72      	ldr	r3, [pc, #456]	@ (80057b0 <HAL_I2C_MemRxCpltCallback+0x6f8>)
 80055e6:	edd3 7a02 	vldr	s15, [r3, #8]
 80055ea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80055ee:	ee77 7a27 	vadd.f32	s15, s14, s15
			result_V[0] = corrected_V[0] * softIron_cali[0][0]
 80055f2:	edc7 7a02 	vstr	s15, [r7, #8]
			result_V[1] = corrected_V[0] * softIron_cali[1][0]
 80055f6:	ed97 7a05 	vldr	s14, [r7, #20]
 80055fa:	4b6d      	ldr	r3, [pc, #436]	@ (80057b0 <HAL_I2C_MemRxCpltCallback+0x6f8>)
 80055fc:	edd3 7a03 	vldr	s15, [r3, #12]
 8005600:	ee27 7a27 	vmul.f32	s14, s14, s15
					+ corrected_V[1] * softIron_cali[1][1]
 8005604:	edd7 6a06 	vldr	s13, [r7, #24]
 8005608:	4b69      	ldr	r3, [pc, #420]	@ (80057b0 <HAL_I2C_MemRxCpltCallback+0x6f8>)
 800560a:	edd3 7a04 	vldr	s15, [r3, #16]
 800560e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005612:	ee37 7a27 	vadd.f32	s14, s14, s15
					+ corrected_V[2] * softIron_cali[1][2];
 8005616:	edd7 6a07 	vldr	s13, [r7, #28]
 800561a:	4b65      	ldr	r3, [pc, #404]	@ (80057b0 <HAL_I2C_MemRxCpltCallback+0x6f8>)
 800561c:	edd3 7a05 	vldr	s15, [r3, #20]
 8005620:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005624:	ee77 7a27 	vadd.f32	s15, s14, s15
			result_V[1] = corrected_V[0] * softIron_cali[1][0]
 8005628:	edc7 7a03 	vstr	s15, [r7, #12]
			result_V[2] = corrected_V[0] * softIron_cali[2][0]
 800562c:	ed97 7a05 	vldr	s14, [r7, #20]
 8005630:	4b5f      	ldr	r3, [pc, #380]	@ (80057b0 <HAL_I2C_MemRxCpltCallback+0x6f8>)
 8005632:	edd3 7a06 	vldr	s15, [r3, #24]
 8005636:	ee27 7a27 	vmul.f32	s14, s14, s15
					+ corrected_V[1] * softIron_cali[2][1]
 800563a:	edd7 6a06 	vldr	s13, [r7, #24]
 800563e:	4b5c      	ldr	r3, [pc, #368]	@ (80057b0 <HAL_I2C_MemRxCpltCallback+0x6f8>)
 8005640:	edd3 7a07 	vldr	s15, [r3, #28]
 8005644:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005648:	ee37 7a27 	vadd.f32	s14, s14, s15
					+ corrected_V[2] * softIron_cali[2][2];
 800564c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005650:	4b57      	ldr	r3, [pc, #348]	@ (80057b0 <HAL_I2C_MemRxCpltCallback+0x6f8>)
 8005652:	edd3 7a08 	vldr	s15, [r3, #32]
 8005656:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800565a:	ee77 7a27 	vadd.f32	s15, s14, s15
			result_V[2] = corrected_V[0] * softIron_cali[2][0]
 800565e:	edc7 7a04 	vstr	s15, [r7, #16]
			mx2 = result_V[0];
 8005662:	68bb      	ldr	r3, [r7, #8]
 8005664:	4a53      	ldr	r2, [pc, #332]	@ (80057b4 <HAL_I2C_MemRxCpltCallback+0x6fc>)
 8005666:	6013      	str	r3, [r2, #0]
			my2 = result_V[1];
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	4a53      	ldr	r2, [pc, #332]	@ (80057b8 <HAL_I2C_MemRxCpltCallback+0x700>)
 800566c:	6013      	str	r3, [r2, #0]
			mz2 = result_V[2];
 800566e:	693b      	ldr	r3, [r7, #16]
 8005670:	4a52      	ldr	r2, [pc, #328]	@ (80057bc <HAL_I2C_MemRxCpltCallback+0x704>)
 8005672:	6013      	str	r3, [r2, #0]
			mxyz[0] = mx2;
 8005674:	4b4f      	ldr	r3, [pc, #316]	@ (80057b4 <HAL_I2C_MemRxCpltCallback+0x6fc>)
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	4a51      	ldr	r2, [pc, #324]	@ (80057c0 <HAL_I2C_MemRxCpltCallback+0x708>)
 800567a:	6013      	str	r3, [r2, #0]
			mxyz[1] = my2;
 800567c:	4b4e      	ldr	r3, [pc, #312]	@ (80057b8 <HAL_I2C_MemRxCpltCallback+0x700>)
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	4a4f      	ldr	r2, [pc, #316]	@ (80057c0 <HAL_I2C_MemRxCpltCallback+0x708>)
 8005682:	6053      	str	r3, [r2, #4]
			mxyz[2] = mz2;
 8005684:	4b4d      	ldr	r3, [pc, #308]	@ (80057bc <HAL_I2C_MemRxCpltCallback+0x704>)
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	4a4d      	ldr	r2, [pc, #308]	@ (80057c0 <HAL_I2C_MemRxCpltCallback+0x708>)
 800568a:	6093      	str	r3, [r2, #8]
			vector_normalize(mxyz);
 800568c:	484c      	ldr	r0, [pc, #304]	@ (80057c0 <HAL_I2C_MemRxCpltCallback+0x708>)
 800568e:	f7fe f879 	bl	8003784 <vector_normalize>
			axyz1[0] = -axyz[0];
 8005692:	4b4c      	ldr	r3, [pc, #304]	@ (80057c4 <HAL_I2C_MemRxCpltCallback+0x70c>)
 8005694:	edd3 7a00 	vldr	s15, [r3]
 8005698:	eef1 7a67 	vneg.f32	s15, s15
 800569c:	4b4a      	ldr	r3, [pc, #296]	@ (80057c8 <HAL_I2C_MemRxCpltCallback+0x710>)
 800569e:	edc3 7a00 	vstr	s15, [r3]
			gxyz1[0] = -gxyz[0];
 80056a2:	4b4a      	ldr	r3, [pc, #296]	@ (80057cc <HAL_I2C_MemRxCpltCallback+0x714>)
 80056a4:	edd3 7a00 	vldr	s15, [r3]
 80056a8:	eef1 7a67 	vneg.f32	s15, s15
 80056ac:	4b48      	ldr	r3, [pc, #288]	@ (80057d0 <HAL_I2C_MemRxCpltCallback+0x718>)
 80056ae:	edc3 7a00 	vstr	s15, [r3]
			Now = micros();
 80056b2:	f7fd ffed 	bl	8003690 <micros>
 80056b6:	4603      	mov	r3, r0
 80056b8:	4a46      	ldr	r2, [pc, #280]	@ (80057d4 <HAL_I2C_MemRxCpltCallback+0x71c>)
 80056ba:	6013      	str	r3, [r2, #0]
			deltat = (Now - lastUpdate) * 1.0e-6 * 5.0f;;
 80056bc:	4b45      	ldr	r3, [pc, #276]	@ (80057d4 <HAL_I2C_MemRxCpltCallback+0x71c>)
 80056be:	681a      	ldr	r2, [r3, #0]
 80056c0:	4b45      	ldr	r3, [pc, #276]	@ (80057d8 <HAL_I2C_MemRxCpltCallback+0x720>)
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	1ad3      	subs	r3, r2, r3
 80056c6:	4618      	mov	r0, r3
 80056c8:	f7fa fef4 	bl	80004b4 <__aeabi_ui2d>
 80056cc:	a326      	add	r3, pc, #152	@ (adr r3, 8005768 <HAL_I2C_MemRxCpltCallback+0x6b0>)
 80056ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056d2:	f7fa ff69 	bl	80005a8 <__aeabi_dmul>
 80056d6:	4602      	mov	r2, r0
 80056d8:	460b      	mov	r3, r1
 80056da:	4610      	mov	r0, r2
 80056dc:	4619      	mov	r1, r3
 80056de:	f04f 0200 	mov.w	r2, #0
 80056e2:	4b3e      	ldr	r3, [pc, #248]	@ (80057dc <HAL_I2C_MemRxCpltCallback+0x724>)
 80056e4:	f7fa ff60 	bl	80005a8 <__aeabi_dmul>
 80056e8:	4602      	mov	r2, r0
 80056ea:	460b      	mov	r3, r1
 80056ec:	4610      	mov	r0, r2
 80056ee:	4619      	mov	r1, r3
 80056f0:	f7fb fa0a 	bl	8000b08 <__aeabi_d2f>
 80056f4:	4603      	mov	r3, r0
 80056f6:	4a3a      	ldr	r2, [pc, #232]	@ (80057e0 <HAL_I2C_MemRxCpltCallback+0x728>)
 80056f8:	6013      	str	r3, [r2, #0]
			lastUpdate = Now;
 80056fa:	4b36      	ldr	r3, [pc, #216]	@ (80057d4 <HAL_I2C_MemRxCpltCallback+0x71c>)
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	4a36      	ldr	r2, [pc, #216]	@ (80057d8 <HAL_I2C_MemRxCpltCallback+0x720>)
 8005700:	6013      	str	r3, [r2, #0]
			MadgwickAHRSupdate(gxyz1[0], gxyz[1], gxyz[2], axyz1[0], axyz[1],
 8005702:	4b33      	ldr	r3, [pc, #204]	@ (80057d0 <HAL_I2C_MemRxCpltCallback+0x718>)
 8005704:	edd3 7a00 	vldr	s15, [r3]
 8005708:	4b30      	ldr	r3, [pc, #192]	@ (80057cc <HAL_I2C_MemRxCpltCallback+0x714>)
 800570a:	ed93 7a01 	vldr	s14, [r3, #4]
 800570e:	4b2f      	ldr	r3, [pc, #188]	@ (80057cc <HAL_I2C_MemRxCpltCallback+0x714>)
 8005710:	edd3 6a02 	vldr	s13, [r3, #8]
 8005714:	4b2c      	ldr	r3, [pc, #176]	@ (80057c8 <HAL_I2C_MemRxCpltCallback+0x710>)
 8005716:	ed93 6a00 	vldr	s12, [r3]
 800571a:	4b2a      	ldr	r3, [pc, #168]	@ (80057c4 <HAL_I2C_MemRxCpltCallback+0x70c>)
 800571c:	edd3 5a01 	vldr	s11, [r3, #4]
 8005720:	4b28      	ldr	r3, [pc, #160]	@ (80057c4 <HAL_I2C_MemRxCpltCallback+0x70c>)
 8005722:	ed93 5a02 	vldr	s10, [r3, #8]
 8005726:	4b26      	ldr	r3, [pc, #152]	@ (80057c0 <HAL_I2C_MemRxCpltCallback+0x708>)
 8005728:	edd3 4a00 	vldr	s9, [r3]
 800572c:	4b24      	ldr	r3, [pc, #144]	@ (80057c0 <HAL_I2C_MemRxCpltCallback+0x708>)
 800572e:	edd3 3a01 	vldr	s7, [r3, #4]
 8005732:	4b23      	ldr	r3, [pc, #140]	@ (80057c0 <HAL_I2C_MemRxCpltCallback+0x708>)
 8005734:	ed93 4a02 	vldr	s8, [r3, #8]
 8005738:	eeb0 3a64 	vmov.f32	s6, s9
 800573c:	eef0 2a45 	vmov.f32	s5, s10
 8005740:	eeb0 2a65 	vmov.f32	s4, s11
 8005744:	eef0 1a46 	vmov.f32	s3, s12
 8005748:	eeb0 1a66 	vmov.f32	s2, s13
 800574c:	eef0 0a47 	vmov.f32	s1, s14
 8005750:	eeb0 0a67 	vmov.f32	s0, s15
 8005754:	f7fe f858 	bl	8003808 <MadgwickAHRSupdate>
			UTIL_SEQ_SetTask(1 << CFG_TASK_MY_TASK_BLE, CFG_SCH_PRIO_0);
 8005758:	2100      	movs	r1, #0
 800575a:	2004      	movs	r0, #4
 800575c:	f00a fe82 	bl	8010464 <UTIL_SEQ_SetTask>
			CurrentSensor = GYRO_SENSOR;
 8005760:	4b03      	ldr	r3, [pc, #12]	@ (8005770 <HAL_I2C_MemRxCpltCallback+0x6b8>)
 8005762:	2200      	movs	r2, #0
 8005764:	701a      	strb	r2, [r3, #0]
}
 8005766:	e136      	b.n	80059d6 <HAL_I2C_MemRxCpltCallback+0x91e>
 8005768:	a0b5ed8d 	.word	0xa0b5ed8d
 800576c:	3eb0c6f7 	.word	0x3eb0c6f7
 8005770:	20000008 	.word	0x20000008
 8005774:	2000036c 	.word	0x2000036c
 8005778:	2000037e 	.word	0x2000037e
 800577c:	20000380 	.word	0x20000380
 8005780:	20000382 	.word	0x20000382
 8005784:	39000000 	.word	0x39000000
 8005788:	42c80000 	.word	0x42c80000
 800578c:	200003c0 	.word	0x200003c0
 8005790:	200003c4 	.word	0x200003c4
 8005794:	200003c8 	.word	0x200003c8
 8005798:	20000014 	.word	0x20000014
 800579c:	2000045c 	.word	0x2000045c
 80057a0:	20000018 	.word	0x20000018
 80057a4:	20000460 	.word	0x20000460
 80057a8:	2000001c 	.word	0x2000001c
 80057ac:	20000464 	.word	0x20000464
 80057b0:	20000020 	.word	0x20000020
 80057b4:	20000468 	.word	0x20000468
 80057b8:	2000046c 	.word	0x2000046c
 80057bc:	20000470 	.word	0x20000470
 80057c0:	200004c0 	.word	0x200004c0
 80057c4:	200004a8 	.word	0x200004a8
 80057c8:	200004b4 	.word	0x200004b4
 80057cc:	20000490 	.word	0x20000490
 80057d0:	2000049c 	.word	0x2000049c
 80057d4:	2000048c 	.word	0x2000048c
 80057d8:	20000484 	.word	0x20000484
 80057dc:	40140000 	.word	0x40140000
 80057e0:	20000480 	.word	0x20000480
		} else if (CurrentSensor = MAG_SENSOR_CAL) {
 80057e4:	4b80      	ldr	r3, [pc, #512]	@ (80059e8 <HAL_I2C_MemRxCpltCallback+0x930>)
 80057e6:	2203      	movs	r2, #3
 80057e8:	701a      	strb	r2, [r3, #0]
			DAM_Callback_cnt = 0;
 80057ea:	4b80      	ldr	r3, [pc, #512]	@ (80059ec <HAL_I2C_MemRxCpltCallback+0x934>)
 80057ec:	2200      	movs	r2, #0
 80057ee:	601a      	str	r2, [r3, #0]
			magX = (int16_t) ((mag_buffer[1] << 8) | mag_buffer[0]);
 80057f0:	4b7f      	ldr	r3, [pc, #508]	@ (80059f0 <HAL_I2C_MemRxCpltCallback+0x938>)
 80057f2:	785b      	ldrb	r3, [r3, #1]
 80057f4:	021b      	lsls	r3, r3, #8
 80057f6:	b21a      	sxth	r2, r3
 80057f8:	4b7d      	ldr	r3, [pc, #500]	@ (80059f0 <HAL_I2C_MemRxCpltCallback+0x938>)
 80057fa:	781b      	ldrb	r3, [r3, #0]
 80057fc:	b21b      	sxth	r3, r3
 80057fe:	4313      	orrs	r3, r2
 8005800:	b21a      	sxth	r2, r3
 8005802:	4b7c      	ldr	r3, [pc, #496]	@ (80059f4 <HAL_I2C_MemRxCpltCallback+0x93c>)
 8005804:	801a      	strh	r2, [r3, #0]
			magY = (int16_t) ((mag_buffer[3] << 8) | mag_buffer[2]);
 8005806:	4b7a      	ldr	r3, [pc, #488]	@ (80059f0 <HAL_I2C_MemRxCpltCallback+0x938>)
 8005808:	78db      	ldrb	r3, [r3, #3]
 800580a:	021b      	lsls	r3, r3, #8
 800580c:	b21a      	sxth	r2, r3
 800580e:	4b78      	ldr	r3, [pc, #480]	@ (80059f0 <HAL_I2C_MemRxCpltCallback+0x938>)
 8005810:	789b      	ldrb	r3, [r3, #2]
 8005812:	b21b      	sxth	r3, r3
 8005814:	4313      	orrs	r3, r2
 8005816:	b21a      	sxth	r2, r3
 8005818:	4b77      	ldr	r3, [pc, #476]	@ (80059f8 <HAL_I2C_MemRxCpltCallback+0x940>)
 800581a:	801a      	strh	r2, [r3, #0]
			magZ = (int16_t) ((mag_buffer[5] << 8) | mag_buffer[4]);
 800581c:	4b74      	ldr	r3, [pc, #464]	@ (80059f0 <HAL_I2C_MemRxCpltCallback+0x938>)
 800581e:	795b      	ldrb	r3, [r3, #5]
 8005820:	021b      	lsls	r3, r3, #8
 8005822:	b21a      	sxth	r2, r3
 8005824:	4b72      	ldr	r3, [pc, #456]	@ (80059f0 <HAL_I2C_MemRxCpltCallback+0x938>)
 8005826:	791b      	ldrb	r3, [r3, #4]
 8005828:	b21b      	sxth	r3, r3
 800582a:	4313      	orrs	r3, r2
 800582c:	b21a      	sxth	r2, r3
 800582e:	4b73      	ldr	r3, [pc, #460]	@ (80059fc <HAL_I2C_MemRxCpltCallback+0x944>)
 8005830:	801a      	strh	r2, [r3, #0]
			mag_x = magX * MAG_SENSITIVITY_4GAUSS;
 8005832:	4b70      	ldr	r3, [pc, #448]	@ (80059f4 <HAL_I2C_MemRxCpltCallback+0x93c>)
 8005834:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005838:	ee07 3a90 	vmov	s15, r3
 800583c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005840:	ed9f 7a6f 	vldr	s14, [pc, #444]	@ 8005a00 <HAL_I2C_MemRxCpltCallback+0x948>
 8005844:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005848:	4b6e      	ldr	r3, [pc, #440]	@ (8005a04 <HAL_I2C_MemRxCpltCallback+0x94c>)
 800584a:	edc3 7a00 	vstr	s15, [r3]
			mag_y = magY * MAG_SENSITIVITY_4GAUSS;
 800584e:	4b6a      	ldr	r3, [pc, #424]	@ (80059f8 <HAL_I2C_MemRxCpltCallback+0x940>)
 8005850:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005854:	ee07 3a90 	vmov	s15, r3
 8005858:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800585c:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 8005a00 <HAL_I2C_MemRxCpltCallback+0x948>
 8005860:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005864:	4b68      	ldr	r3, [pc, #416]	@ (8005a08 <HAL_I2C_MemRxCpltCallback+0x950>)
 8005866:	edc3 7a00 	vstr	s15, [r3]
			mag_z = magZ * MAG_SENSITIVITY_4GAUSS;
 800586a:	4b64      	ldr	r3, [pc, #400]	@ (80059fc <HAL_I2C_MemRxCpltCallback+0x944>)
 800586c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005870:	ee07 3a90 	vmov	s15, r3
 8005874:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005878:	ed9f 7a61 	vldr	s14, [pc, #388]	@ 8005a00 <HAL_I2C_MemRxCpltCallback+0x948>
 800587c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005880:	4b62      	ldr	r3, [pc, #392]	@ (8005a0c <HAL_I2C_MemRxCpltCallback+0x954>)
 8005882:	edc3 7a00 	vstr	s15, [r3]
			process_imu_data(mag_x, mag_y, mag_z);
 8005886:	4b5f      	ldr	r3, [pc, #380]	@ (8005a04 <HAL_I2C_MemRxCpltCallback+0x94c>)
 8005888:	edd3 7a00 	vldr	s15, [r3]
 800588c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005890:	ee17 3a90 	vmov	r3, s15
 8005894:	b21b      	sxth	r3, r3
 8005896:	4a5c      	ldr	r2, [pc, #368]	@ (8005a08 <HAL_I2C_MemRxCpltCallback+0x950>)
 8005898:	edd2 7a00 	vldr	s15, [r2]
 800589c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80058a0:	ee17 2a90 	vmov	r2, s15
 80058a4:	b211      	sxth	r1, r2
 80058a6:	4a59      	ldr	r2, [pc, #356]	@ (8005a0c <HAL_I2C_MemRxCpltCallback+0x954>)
 80058a8:	edd2 7a00 	vldr	s15, [r2]
 80058ac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80058b0:	ee17 2a90 	vmov	r2, s15
 80058b4:	b212      	sxth	r2, r2
 80058b6:	4618      	mov	r0, r3
 80058b8:	f7ff fbd0 	bl	800505c <process_imu_data>
			for (i = 0; i < MAGBUFFSIZE; i++) {
 80058bc:	4b54      	ldr	r3, [pc, #336]	@ (8005a10 <HAL_I2C_MemRxCpltCallback+0x958>)
 80058be:	2200      	movs	r2, #0
 80058c0:	601a      	str	r2, [r3, #0]
 80058c2:	e02d      	b.n	8005920 <HAL_I2C_MemRxCpltCallback+0x868>
				if (magcal.valid[i]) {
 80058c4:	4b52      	ldr	r3, [pc, #328]	@ (8005a10 <HAL_I2C_MemRxCpltCallback+0x958>)
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	4a52      	ldr	r2, [pc, #328]	@ (8005a14 <HAL_I2C_MemRxCpltCallback+0x95c>)
 80058ca:	4413      	add	r3, r2
 80058cc:	f993 3d7a 	ldrsb.w	r3, [r3, #3450]	@ 0xd7a
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d020      	beq.n	8005916 <HAL_I2C_MemRxCpltCallback+0x85e>
					apply_calibration(magcal.BpFast[0][i], magcal.BpFast[1][i],
 80058d4:	4b4e      	ldr	r3, [pc, #312]	@ (8005a10 <HAL_I2C_MemRxCpltCallback+0x958>)
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	4a4e      	ldr	r2, [pc, #312]	@ (8005a14 <HAL_I2C_MemRxCpltCallback+0x95c>)
 80058da:	f503 7303 	add.w	r3, r3, #524	@ 0x20c
 80058de:	005b      	lsls	r3, r3, #1
 80058e0:	4413      	add	r3, r2
 80058e2:	f9b3 0002 	ldrsh.w	r0, [r3, #2]
 80058e6:	4b4a      	ldr	r3, [pc, #296]	@ (8005a10 <HAL_I2C_MemRxCpltCallback+0x958>)
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	4a4a      	ldr	r2, [pc, #296]	@ (8005a14 <HAL_I2C_MemRxCpltCallback+0x95c>)
 80058ec:	f503 7367 	add.w	r3, r3, #924	@ 0x39c
 80058f0:	005b      	lsls	r3, r3, #1
 80058f2:	4413      	add	r3, r2
 80058f4:	f9b3 1002 	ldrsh.w	r1, [r3, #2]
 80058f8:	4b45      	ldr	r3, [pc, #276]	@ (8005a10 <HAL_I2C_MemRxCpltCallback+0x958>)
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	4a45      	ldr	r2, [pc, #276]	@ (8005a14 <HAL_I2C_MemRxCpltCallback+0x95c>)
 80058fe:	f203 532c 	addw	r3, r3, #1324	@ 0x52c
 8005902:	005b      	lsls	r3, r3, #1
 8005904:	4413      	add	r3, r2
 8005906:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800590a:	4b43      	ldr	r3, [pc, #268]	@ (8005a18 <HAL_I2C_MemRxCpltCallback+0x960>)
 800590c:	f7ff f898 	bl	8004a40 <apply_calibration>
					quality_update(&point);
 8005910:	4841      	ldr	r0, [pc, #260]	@ (8005a18 <HAL_I2C_MemRxCpltCallback+0x960>)
 8005912:	f001 fc51 	bl	80071b8 <quality_update>
			for (i = 0; i < MAGBUFFSIZE; i++) {
 8005916:	4b3e      	ldr	r3, [pc, #248]	@ (8005a10 <HAL_I2C_MemRxCpltCallback+0x958>)
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	3301      	adds	r3, #1
 800591c:	4a3c      	ldr	r2, [pc, #240]	@ (8005a10 <HAL_I2C_MemRxCpltCallback+0x958>)
 800591e:	6013      	str	r3, [r2, #0]
 8005920:	4b3b      	ldr	r3, [pc, #236]	@ (8005a10 <HAL_I2C_MemRxCpltCallback+0x958>)
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8005928:	dbcc      	blt.n	80058c4 <HAL_I2C_MemRxCpltCallback+0x80c>
			if (gaps <= 1.2 && magcal.FitError < 2.1) {
 800592a:	4b3c      	ldr	r3, [pc, #240]	@ (8005a1c <HAL_I2C_MemRxCpltCallback+0x964>)
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	4618      	mov	r0, r3
 8005930:	f7fa fde2 	bl	80004f8 <__aeabi_f2d>
 8005934:	f04f 3233 	mov.w	r2, #858993459	@ 0x33333333
 8005938:	4b39      	ldr	r3, [pc, #228]	@ (8005a20 <HAL_I2C_MemRxCpltCallback+0x968>)
 800593a:	f7fb f8b1 	bl	8000aa0 <__aeabi_dcmple>
 800593e:	4603      	mov	r3, r0
 8005940:	2b00      	cmp	r3, #0
 8005942:	d046      	beq.n	80059d2 <HAL_I2C_MemRxCpltCallback+0x91a>
 8005944:	4b33      	ldr	r3, [pc, #204]	@ (8005a14 <HAL_I2C_MemRxCpltCallback+0x95c>)
 8005946:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005948:	4618      	mov	r0, r3
 800594a:	f7fa fdd5 	bl	80004f8 <__aeabi_f2d>
 800594e:	a324      	add	r3, pc, #144	@ (adr r3, 80059e0 <HAL_I2C_MemRxCpltCallback+0x928>)
 8005950:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005954:	f7fb f89a 	bl	8000a8c <__aeabi_dcmplt>
 8005958:	4603      	mov	r3, r0
 800595a:	2b00      	cmp	r3, #0
 800595c:	d039      	beq.n	80059d2 <HAL_I2C_MemRxCpltCallback+0x91a>
				hardIron_x = magcal.V[0];
 800595e:	4b2d      	ldr	r3, [pc, #180]	@ (8005a14 <HAL_I2C_MemRxCpltCallback+0x95c>)
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	4a30      	ldr	r2, [pc, #192]	@ (8005a24 <HAL_I2C_MemRxCpltCallback+0x96c>)
 8005964:	6013      	str	r3, [r2, #0]
				hardIron_y = magcal.V[1];
 8005966:	4b2b      	ldr	r3, [pc, #172]	@ (8005a14 <HAL_I2C_MemRxCpltCallback+0x95c>)
 8005968:	685b      	ldr	r3, [r3, #4]
 800596a:	4a2f      	ldr	r2, [pc, #188]	@ (8005a28 <HAL_I2C_MemRxCpltCallback+0x970>)
 800596c:	6013      	str	r3, [r2, #0]
				hardIron_z = magcal.V[2];
 800596e:	4b29      	ldr	r3, [pc, #164]	@ (8005a14 <HAL_I2C_MemRxCpltCallback+0x95c>)
 8005970:	689b      	ldr	r3, [r3, #8]
 8005972:	4a2e      	ldr	r2, [pc, #184]	@ (8005a2c <HAL_I2C_MemRxCpltCallback+0x974>)
 8005974:	6013      	str	r3, [r2, #0]
				for (int i = 0; i < 3; i++) {
 8005976:	2300      	movs	r3, #0
 8005978:	627b      	str	r3, [r7, #36]	@ 0x24
 800597a:	e021      	b.n	80059c0 <HAL_I2C_MemRxCpltCallback+0x908>
					for (int j = 0; j < 3; j++) {
 800597c:	2300      	movs	r3, #0
 800597e:	623b      	str	r3, [r7, #32]
 8005980:	e018      	b.n	80059b4 <HAL_I2C_MemRxCpltCallback+0x8fc>
						softIron_cali[i][j] = magcal.invW[i][j];
 8005982:	4924      	ldr	r1, [pc, #144]	@ (8005a14 <HAL_I2C_MemRxCpltCallback+0x95c>)
 8005984:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005986:	4613      	mov	r3, r2
 8005988:	005b      	lsls	r3, r3, #1
 800598a:	4413      	add	r3, r2
 800598c:	6a3a      	ldr	r2, [r7, #32]
 800598e:	4413      	add	r3, r2
 8005990:	3302      	adds	r3, #2
 8005992:	009b      	lsls	r3, r3, #2
 8005994:	440b      	add	r3, r1
 8005996:	3304      	adds	r3, #4
 8005998:	6819      	ldr	r1, [r3, #0]
 800599a:	4825      	ldr	r0, [pc, #148]	@ (8005a30 <HAL_I2C_MemRxCpltCallback+0x978>)
 800599c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800599e:	4613      	mov	r3, r2
 80059a0:	005b      	lsls	r3, r3, #1
 80059a2:	4413      	add	r3, r2
 80059a4:	6a3a      	ldr	r2, [r7, #32]
 80059a6:	4413      	add	r3, r2
 80059a8:	009b      	lsls	r3, r3, #2
 80059aa:	4403      	add	r3, r0
 80059ac:	6019      	str	r1, [r3, #0]
					for (int j = 0; j < 3; j++) {
 80059ae:	6a3b      	ldr	r3, [r7, #32]
 80059b0:	3301      	adds	r3, #1
 80059b2:	623b      	str	r3, [r7, #32]
 80059b4:	6a3b      	ldr	r3, [r7, #32]
 80059b6:	2b02      	cmp	r3, #2
 80059b8:	dde3      	ble.n	8005982 <HAL_I2C_MemRxCpltCallback+0x8ca>
				for (int i = 0; i < 3; i++) {
 80059ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059bc:	3301      	adds	r3, #1
 80059be:	627b      	str	r3, [r7, #36]	@ 0x24
 80059c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059c2:	2b02      	cmp	r3, #2
 80059c4:	ddda      	ble.n	800597c <HAL_I2C_MemRxCpltCallback+0x8c4>
				CurrentSensor = GYRO_SENSOR;
 80059c6:	4b08      	ldr	r3, [pc, #32]	@ (80059e8 <HAL_I2C_MemRxCpltCallback+0x930>)
 80059c8:	2200      	movs	r2, #0
 80059ca:	701a      	strb	r2, [r3, #0]
				LSM9DS1_ReadGyro_DMA();
 80059cc:	f7fe ffd2 	bl	8004974 <LSM9DS1_ReadGyro_DMA>
}
 80059d0:	e001      	b.n	80059d6 <HAL_I2C_MemRxCpltCallback+0x91e>
				LSM9DS1_ReadMag_DMA();
 80059d2:	f7fe fff7 	bl	80049c4 <LSM9DS1_ReadMag_DMA>
}
 80059d6:	bf00      	nop
 80059d8:	3728      	adds	r7, #40	@ 0x28
 80059da:	46bd      	mov	sp, r7
 80059dc:	bd80      	pop	{r7, pc}
 80059de:	bf00      	nop
 80059e0:	cccccccd 	.word	0xcccccccd
 80059e4:	4000cccc 	.word	0x4000cccc
 80059e8:	20000008 	.word	0x20000008
 80059ec:	200003cc 	.word	0x200003cc
 80059f0:	2000036c 	.word	0x2000036c
 80059f4:	2000037e 	.word	0x2000037e
 80059f8:	20000380 	.word	0x20000380
 80059fc:	20000382 	.word	0x20000382
 8005a00:	3e0f5c29 	.word	0x3e0f5c29
 8005a04:	200003c0 	.word	0x200003c0
 8005a08:	200003c4 	.word	0x200003c4
 8005a0c:	200003c8 	.word	0x200003c8
 8005a10:	2000141c 	.word	0x2000141c
 8005a14:	200004d8 	.word	0x200004d8
 8005a18:	20001428 	.word	0x20001428
 8005a1c:	20000050 	.word	0x20000050
 8005a20:	3ff33333 	.word	0x3ff33333
 8005a24:	20000014 	.word	0x20000014
 8005a28:	20000018 	.word	0x20000018
 8005a2c:	2000001c 	.word	0x2000001c
 8005a30:	20000020 	.word	0x20000020

08005a34 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */

int main(void) {
 8005a34:	b580      	push	{r7, lr}
 8005a36:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8005a38:	f001 ffd8 	bl	80079ec <HAL_Init>
	/* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
	MX_APPE_Config();
 8005a3c:	f7fb f988 	bl	8000d50 <MX_APPE_Config>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8005a40:	f000 f82c 	bl	8005a9c <SystemClock_Config>

	/* Configure the peripherals common clocks */
	PeriphCommonClock_Config();
 8005a44:	f000 f88c 	bl	8005b60 <PeriphCommonClock_Config>

	/* IPCC initialisation */
	MX_IPCC_Init();
 8005a48:	f000 f8ea 	bl	8005c20 <MX_IPCC_Init>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8005a4c:	f000 f9a0 	bl	8005d90 <MX_GPIO_Init>
	MX_DMA_Init();
 8005a50:	f000 f984 	bl	8005d5c <MX_DMA_Init>
	MX_I2C1_Init();
 8005a54:	f000 f8a4 	bl	8005ba0 <MX_I2C1_Init>
	MX_RTC_Init();
 8005a58:	f000 f8fe 	bl	8005c58 <MX_RTC_Init>
	MX_TIM2_Init();
 8005a5c:	f000 f930 	bl	8005cc0 <MX_TIM2_Init>
	MX_RF_Init();
 8005a60:	f000 f8f2 	bl	8005c48 <MX_RF_Init>
	/* USER CODE BEGIN 2 */

	/* USER CODE END 2 */

	/* Init code for STM32_WPAN */
	MX_APPE_Init();
 8005a64:	f7fb f982 	bl	8000d6c <MX_APPE_Init>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	LSM9DS1_Init();
 8005a68:	f7fd fdde 	bl	8003628 <LSM9DS1_Init>
	HAL_Delay(10);
 8005a6c:	200a      	movs	r0, #10
 8005a6e:	f7fb faaa 	bl	8000fc6 <HAL_Delay>

	HAL_TIM_Base_Start(&htim2);
 8005a72:	4808      	ldr	r0, [pc, #32]	@ (8005a94 <main+0x60>)
 8005a74:	f006 ff18 	bl	800c8a8 <HAL_TIM_Base_Start>

	magcal_Init();
 8005a78:	f7fe ffb8 	bl	80049ec <magcal_Init>

	while (1) {

		/* USER CODE END WHILE */
		MX_APPE_Process();
 8005a7c:	f7fb fac8 	bl	8001010 <MX_APPE_Process>

		/* USER CODE BEGIN 3 */

		//low_power_code
		if (CurrentSensor == MAG_SENSOR_CAL) {
 8005a80:	4b05      	ldr	r3, [pc, #20]	@ (8005a98 <main+0x64>)
 8005a82:	781b      	ldrb	r3, [r3, #0]
 8005a84:	2b03      	cmp	r3, #3
 8005a86:	d102      	bne.n	8005a8e <main+0x5a>
			LSM9DS1_ReadMag_DMA();
 8005a88:	f7fe ff9c 	bl	80049c4 <LSM9DS1_ReadMag_DMA>
 8005a8c:	e7f6      	b.n	8005a7c <main+0x48>
		} else {
			LSM9DS1_ReadGyro_DMA();
 8005a8e:	f7fe ff71 	bl	8004974 <LSM9DS1_ReadGyro_DMA>
		MX_APPE_Process();
 8005a92:	e7f3      	b.n	8005a7c <main+0x48>
 8005a94:	20000310 	.word	0x20000310
 8005a98:	20000008 	.word	0x20000008

08005a9c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b09a      	sub	sp, #104	@ 0x68
 8005aa0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8005aa2:	f107 0320 	add.w	r3, r7, #32
 8005aa6:	2248      	movs	r2, #72	@ 0x48
 8005aa8:	2100      	movs	r1, #0
 8005aaa:	4618      	mov	r0, r3
 8005aac:	f00a ff39 	bl	8010922 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8005ab0:	1d3b      	adds	r3, r7, #4
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	601a      	str	r2, [r3, #0]
 8005ab6:	605a      	str	r2, [r3, #4]
 8005ab8:	609a      	str	r2, [r3, #8]
 8005aba:	60da      	str	r2, [r3, #12]
 8005abc:	611a      	str	r2, [r3, #16]
 8005abe:	615a      	str	r2, [r3, #20]
 8005ac0:	619a      	str	r2, [r3, #24]

	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess();
 8005ac2:	f004 ff55 	bl	800a970 <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMHIGH);
 8005ac6:	2010      	movs	r0, #16
 8005ac8:	f7fd fd48 	bl	800355c <LL_RCC_LSE_SetDriveCapability>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005acc:	4b23      	ldr	r3, [pc, #140]	@ (8005b5c <SystemClock_Config+0xc0>)
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005ad4:	4a21      	ldr	r2, [pc, #132]	@ (8005b5c <SystemClock_Config+0xc0>)
 8005ad6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005ada:	6013      	str	r3, [r2, #0]
 8005adc:	4b1f      	ldr	r3, [pc, #124]	@ (8005b5c <SystemClock_Config+0xc0>)
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005ae4:	603b      	str	r3, [r7, #0]
 8005ae6:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI
 8005ae8:	2327      	movs	r3, #39	@ 0x27
 8005aea:	623b      	str	r3, [r7, #32]
			| RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_LSE
			| RCC_OSCILLATORTYPE_MSI;
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005aec:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8005af0:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8005af2:	2301      	movs	r3, #1
 8005af4:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8005af6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005afa:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8005afc:	2301      	movs	r3, #1
 8005afe:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8005b00:	2340      	movs	r3, #64	@ 0x40
 8005b02:	633b      	str	r3, [r7, #48]	@ 0x30
	RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8005b04:	2300      	movs	r3, #0
 8005b06:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_10;
 8005b08:	23a0      	movs	r3, #160	@ 0xa0
 8005b0a:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8005b10:	f107 0320 	add.w	r3, r7, #32
 8005b14:	4618      	mov	r0, r3
 8005b16:	f005 faa7 	bl	800b068 <HAL_RCC_OscConfig>
 8005b1a:	4603      	mov	r3, r0
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d001      	beq.n	8005b24 <SystemClock_Config+0x88>
		Error_Handler();
 8005b20:	f000 f9b2 	bl	8005e88 <Error_Handler>
	}

	/** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4 | RCC_CLOCKTYPE_HCLK2
 8005b24:	236f      	movs	r3, #111	@ 0x6f
 8005b26:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1
			| RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8005b28:	2300      	movs	r3, #0
 8005b2a:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8005b30:	2300      	movs	r3, #0
 8005b32:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005b34:	2300      	movs	r3, #0
 8005b36:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8005b38:	2300      	movs	r3, #0
 8005b3a:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 8005b40:	1d3b      	adds	r3, r7, #4
 8005b42:	2101      	movs	r1, #1
 8005b44:	4618      	mov	r0, r3
 8005b46:	f005 fe03 	bl	800b750 <HAL_RCC_ClockConfig>
 8005b4a:	4603      	mov	r3, r0
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d001      	beq.n	8005b54 <SystemClock_Config+0xb8>
		Error_Handler();
 8005b50:	f000 f99a 	bl	8005e88 <Error_Handler>
	}
}
 8005b54:	bf00      	nop
 8005b56:	3768      	adds	r7, #104	@ 0x68
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	bd80      	pop	{r7, pc}
 8005b5c:	58000400 	.word	0x58000400

08005b60 <PeriphCommonClock_Config>:

/**
 * @brief Peripherals Common Clock Configuration
 * @retval None
 */
void PeriphCommonClock_Config(void) {
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b094      	sub	sp, #80	@ 0x50
 8005b64:	af00      	add	r7, sp, #0
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 8005b66:	463b      	mov	r3, r7
 8005b68:	2250      	movs	r2, #80	@ 0x50
 8005b6a:	2100      	movs	r1, #0
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	f00a fed8 	bl	8010922 <memset>

	/** Initializes the peripherals clock
	 */
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS
 8005b72:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8005b76:	603b      	str	r3, [r7, #0]
			| RCC_PERIPHCLK_RFWAKEUP;
	PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 8005b78:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005b7c:	647b      	str	r3, [r7, #68]	@ 0x44
	PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8005b7e:	2300      	movs	r3, #0
 8005b80:	64bb      	str	r3, [r7, #72]	@ 0x48
	PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 8005b82:	2300      	movs	r3, #0
 8005b84:	64fb      	str	r3, [r7, #76]	@ 0x4c

	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 8005b86:	463b      	mov	r3, r7
 8005b88:	4618      	mov	r0, r3
 8005b8a:	f006 f9f2 	bl	800bf72 <HAL_RCCEx_PeriphCLKConfig>
 8005b8e:	4603      	mov	r3, r0
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d001      	beq.n	8005b98 <PeriphCommonClock_Config+0x38>
		Error_Handler();
 8005b94:	f000 f978 	bl	8005e88 <Error_Handler>
	}
	/* USER CODE BEGIN Smps */

	/* USER CODE END Smps */
}
 8005b98:	bf00      	nop
 8005b9a:	3750      	adds	r7, #80	@ 0x50
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	bd80      	pop	{r7, pc}

08005ba0 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8005ba4:	4b1b      	ldr	r3, [pc, #108]	@ (8005c14 <MX_I2C1_Init+0x74>)
 8005ba6:	4a1c      	ldr	r2, [pc, #112]	@ (8005c18 <MX_I2C1_Init+0x78>)
 8005ba8:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x00B07CB4;
 8005baa:	4b1a      	ldr	r3, [pc, #104]	@ (8005c14 <MX_I2C1_Init+0x74>)
 8005bac:	4a1b      	ldr	r2, [pc, #108]	@ (8005c1c <MX_I2C1_Init+0x7c>)
 8005bae:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0;
 8005bb0:	4b18      	ldr	r3, [pc, #96]	@ (8005c14 <MX_I2C1_Init+0x74>)
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005bb6:	4b17      	ldr	r3, [pc, #92]	@ (8005c14 <MX_I2C1_Init+0x74>)
 8005bb8:	2201      	movs	r2, #1
 8005bba:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005bbc:	4b15      	ldr	r3, [pc, #84]	@ (8005c14 <MX_I2C1_Init+0x74>)
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 8005bc2:	4b14      	ldr	r3, [pc, #80]	@ (8005c14 <MX_I2C1_Init+0x74>)
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8005bc8:	4b12      	ldr	r3, [pc, #72]	@ (8005c14 <MX_I2C1_Init+0x74>)
 8005bca:	2200      	movs	r2, #0
 8005bcc:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005bce:	4b11      	ldr	r3, [pc, #68]	@ (8005c14 <MX_I2C1_Init+0x74>)
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005bd4:	4b0f      	ldr	r3, [pc, #60]	@ (8005c14 <MX_I2C1_Init+0x74>)
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8005bda:	480e      	ldr	r0, [pc, #56]	@ (8005c14 <MX_I2C1_Init+0x74>)
 8005bdc:	f002 fdda 	bl	8008794 <HAL_I2C_Init>
 8005be0:	4603      	mov	r3, r0
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d001      	beq.n	8005bea <MX_I2C1_Init+0x4a>
		Error_Handler();
 8005be6:	f000 f94f 	bl	8005e88 <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE)
 8005bea:	2100      	movs	r1, #0
 8005bec:	4809      	ldr	r0, [pc, #36]	@ (8005c14 <MX_I2C1_Init+0x74>)
 8005bee:	f004 fda1 	bl	800a734 <HAL_I2CEx_ConfigAnalogFilter>
 8005bf2:	4603      	mov	r3, r0
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d001      	beq.n	8005bfc <MX_I2C1_Init+0x5c>
			!= HAL_OK) {
		Error_Handler();
 8005bf8:	f000 f946 	bl	8005e88 <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK) {
 8005bfc:	2100      	movs	r1, #0
 8005bfe:	4805      	ldr	r0, [pc, #20]	@ (8005c14 <MX_I2C1_Init+0x74>)
 8005c00:	f004 fde3 	bl	800a7ca <HAL_I2CEx_ConfigDigitalFilter>
 8005c04:	4603      	mov	r3, r0
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d001      	beq.n	8005c0e <MX_I2C1_Init+0x6e>
		Error_Handler();
 8005c0a:	f000 f93d 	bl	8005e88 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */
//	__HAL_LINKDMA(&hi2c1, hdmarx, hdma_i2c1_rx);
	/* USER CODE END I2C1_Init 2 */

}
 8005c0e:	bf00      	nop
 8005c10:	bd80      	pop	{r7, pc}
 8005c12:	bf00      	nop
 8005c14:	200001fc 	.word	0x200001fc
 8005c18:	40005400 	.word	0x40005400
 8005c1c:	00b07cb4 	.word	0x00b07cb4

08005c20 <MX_IPCC_Init>:
/**
 * @brief IPCC Initialization Function
 * @param None
 * @retval None
 */
static void MX_IPCC_Init(void) {
 8005c20:	b580      	push	{r7, lr}
 8005c22:	af00      	add	r7, sp, #0
	/* USER CODE END IPCC_Init 0 */

	/* USER CODE BEGIN IPCC_Init 1 */

	/* USER CODE END IPCC_Init 1 */
	hipcc.Instance = IPCC;
 8005c24:	4b06      	ldr	r3, [pc, #24]	@ (8005c40 <MX_IPCC_Init+0x20>)
 8005c26:	4a07      	ldr	r2, [pc, #28]	@ (8005c44 <MX_IPCC_Init+0x24>)
 8005c28:	601a      	str	r2, [r3, #0]
	if (HAL_IPCC_Init(&hipcc) != HAL_OK) {
 8005c2a:	4805      	ldr	r0, [pc, #20]	@ (8005c40 <MX_IPCC_Init+0x20>)
 8005c2c:	f004 fe1a 	bl	800a864 <HAL_IPCC_Init>
 8005c30:	4603      	mov	r3, r0
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d001      	beq.n	8005c3a <MX_IPCC_Init+0x1a>
		Error_Handler();
 8005c36:	f000 f927 	bl	8005e88 <Error_Handler>
	}
	/* USER CODE BEGIN IPCC_Init 2 */

	/* USER CODE END IPCC_Init 2 */

}
 8005c3a:	bf00      	nop
 8005c3c:	bd80      	pop	{r7, pc}
 8005c3e:	bf00      	nop
 8005c40:	200002b0 	.word	0x200002b0
 8005c44:	58000c00 	.word	0x58000c00

08005c48 <MX_RF_Init>:
/**
 * @brief RF Initialization Function
 * @param None
 * @retval None
 */
static void MX_RF_Init(void) {
 8005c48:	b480      	push	{r7}
 8005c4a:	af00      	add	r7, sp, #0
	/* USER CODE END RF_Init 1 */
	/* USER CODE BEGIN RF_Init 2 */

	/* USER CODE END RF_Init 2 */

}
 8005c4c:	bf00      	nop
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c54:	4770      	bx	lr
	...

08005c58 <MX_RTC_Init>:
/**
 * @brief RTC Initialization Function
 * @param None
 * @retval None
 */
static void MX_RTC_Init(void) {
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	af00      	add	r7, sp, #0

	/* USER CODE END RTC_Init 1 */

	/** Initialize RTC Only
	 */
	hrtc.Instance = RTC;
 8005c5c:	4b16      	ldr	r3, [pc, #88]	@ (8005cb8 <MX_RTC_Init+0x60>)
 8005c5e:	4a17      	ldr	r2, [pc, #92]	@ (8005cbc <MX_RTC_Init+0x64>)
 8005c60:	601a      	str	r2, [r3, #0]
	hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8005c62:	4b15      	ldr	r3, [pc, #84]	@ (8005cb8 <MX_RTC_Init+0x60>)
 8005c64:	2200      	movs	r2, #0
 8005c66:	605a      	str	r2, [r3, #4]
	hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8005c68:	4b13      	ldr	r3, [pc, #76]	@ (8005cb8 <MX_RTC_Init+0x60>)
 8005c6a:	220f      	movs	r2, #15
 8005c6c:	609a      	str	r2, [r3, #8]
	hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 8005c6e:	4b12      	ldr	r3, [pc, #72]	@ (8005cb8 <MX_RTC_Init+0x60>)
 8005c70:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8005c74:	60da      	str	r2, [r3, #12]
	hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8005c76:	4b10      	ldr	r3, [pc, #64]	@ (8005cb8 <MX_RTC_Init+0x60>)
 8005c78:	2200      	movs	r2, #0
 8005c7a:	611a      	str	r2, [r3, #16]
	hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8005c7c:	4b0e      	ldr	r3, [pc, #56]	@ (8005cb8 <MX_RTC_Init+0x60>)
 8005c7e:	2200      	movs	r2, #0
 8005c80:	619a      	str	r2, [r3, #24]
	hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8005c82:	4b0d      	ldr	r3, [pc, #52]	@ (8005cb8 <MX_RTC_Init+0x60>)
 8005c84:	2200      	movs	r2, #0
 8005c86:	61da      	str	r2, [r3, #28]
	hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8005c88:	4b0b      	ldr	r3, [pc, #44]	@ (8005cb8 <MX_RTC_Init+0x60>)
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	615a      	str	r2, [r3, #20]
	if (HAL_RTC_Init(&hrtc) != HAL_OK) {
 8005c8e:	480a      	ldr	r0, [pc, #40]	@ (8005cb8 <MX_RTC_Init+0x60>)
 8005c90:	f006 fbf6 	bl	800c480 <HAL_RTC_Init>
 8005c94:	4603      	mov	r3, r0
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d001      	beq.n	8005c9e <MX_RTC_Init+0x46>
		Error_Handler();
 8005c9a:	f000 f8f5 	bl	8005e88 <Error_Handler>
	}

	/** Enable the WakeUp
	 */
	if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16)
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	2100      	movs	r1, #0
 8005ca2:	4805      	ldr	r0, [pc, #20]	@ (8005cb8 <MX_RTC_Init+0x60>)
 8005ca4:	f006 fcec 	bl	800c680 <HAL_RTCEx_SetWakeUpTimer_IT>
 8005ca8:	4603      	mov	r3, r0
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d001      	beq.n	8005cb2 <MX_RTC_Init+0x5a>
			!= HAL_OK) {
		Error_Handler();
 8005cae:	f000 f8eb 	bl	8005e88 <Error_Handler>
	}
	/* USER CODE BEGIN RTC_Init 2 */

	/* USER CODE END RTC_Init 2 */

}
 8005cb2:	bf00      	nop
 8005cb4:	bd80      	pop	{r7, pc}
 8005cb6:	bf00      	nop
 8005cb8:	200002ec 	.word	0x200002ec
 8005cbc:	40002800 	.word	0x40002800

08005cc0 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b088      	sub	sp, #32
 8005cc4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8005cc6:	f107 0310 	add.w	r3, r7, #16
 8005cca:	2200      	movs	r2, #0
 8005ccc:	601a      	str	r2, [r3, #0]
 8005cce:	605a      	str	r2, [r3, #4]
 8005cd0:	609a      	str	r2, [r3, #8]
 8005cd2:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8005cd4:	1d3b      	adds	r3, r7, #4
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	601a      	str	r2, [r3, #0]
 8005cda:	605a      	str	r2, [r3, #4]
 8005cdc:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8005cde:	4b1e      	ldr	r3, [pc, #120]	@ (8005d58 <MX_TIM2_Init+0x98>)
 8005ce0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8005ce4:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 99;
 8005ce6:	4b1c      	ldr	r3, [pc, #112]	@ (8005d58 <MX_TIM2_Init+0x98>)
 8005ce8:	2263      	movs	r2, #99	@ 0x63
 8005cea:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005cec:	4b1a      	ldr	r3, [pc, #104]	@ (8005d58 <MX_TIM2_Init+0x98>)
 8005cee:	2200      	movs	r2, #0
 8005cf0:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 0xffffffff;
 8005cf2:	4b19      	ldr	r3, [pc, #100]	@ (8005d58 <MX_TIM2_Init+0x98>)
 8005cf4:	f04f 32ff 	mov.w	r2, #4294967295
 8005cf8:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005cfa:	4b17      	ldr	r3, [pc, #92]	@ (8005d58 <MX_TIM2_Init+0x98>)
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005d00:	4b15      	ldr	r3, [pc, #84]	@ (8005d58 <MX_TIM2_Init+0x98>)
 8005d02:	2200      	movs	r2, #0
 8005d04:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8005d06:	4814      	ldr	r0, [pc, #80]	@ (8005d58 <MX_TIM2_Init+0x98>)
 8005d08:	f006 fd76 	bl	800c7f8 <HAL_TIM_Base_Init>
 8005d0c:	4603      	mov	r3, r0
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d001      	beq.n	8005d16 <MX_TIM2_Init+0x56>
		Error_Handler();
 8005d12:	f000 f8b9 	bl	8005e88 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005d16:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005d1a:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8005d1c:	f107 0310 	add.w	r3, r7, #16
 8005d20:	4619      	mov	r1, r3
 8005d22:	480d      	ldr	r0, [pc, #52]	@ (8005d58 <MX_TIM2_Init+0x98>)
 8005d24:	f006 fe06 	bl	800c934 <HAL_TIM_ConfigClockSource>
 8005d28:	4603      	mov	r3, r0
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d001      	beq.n	8005d32 <MX_TIM2_Init+0x72>
		Error_Handler();
 8005d2e:	f000 f8ab 	bl	8005e88 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005d32:	2300      	movs	r3, #0
 8005d34:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005d36:	2300      	movs	r3, #0
 8005d38:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8005d3a:	1d3b      	adds	r3, r7, #4
 8005d3c:	4619      	mov	r1, r3
 8005d3e:	4806      	ldr	r0, [pc, #24]	@ (8005d58 <MX_TIM2_Init+0x98>)
 8005d40:	f006 ffce 	bl	800cce0 <HAL_TIMEx_MasterConfigSynchronization>
 8005d44:	4603      	mov	r3, r0
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d001      	beq.n	8005d4e <MX_TIM2_Init+0x8e>
			!= HAL_OK) {
		Error_Handler();
 8005d4a:	f000 f89d 	bl	8005e88 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8005d4e:	bf00      	nop
 8005d50:	3720      	adds	r7, #32
 8005d52:	46bd      	mov	sp, r7
 8005d54:	bd80      	pop	{r7, pc}
 8005d56:	bf00      	nop
 8005d58:	20000310 	.word	0x20000310

08005d5c <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMAMUX1_CLK_ENABLE();
 8005d60:	2004      	movs	r0, #4
 8005d62:	f7fd fc11 	bl	8003588 <LL_AHB1_GRP1_EnableClock>
	__HAL_RCC_DMA1_CLK_ENABLE();
 8005d66:	2001      	movs	r0, #1
 8005d68:	f7fd fc0e 	bl	8003588 <LL_AHB1_GRP1_EnableClock>

	/* DMA interrupt init */
	/* DMA1_Channel7_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	2100      	movs	r1, #0
 8005d70:	2011      	movs	r0, #17
 8005d72:	f002 f808 	bl	8007d86 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8005d76:	2011      	movs	r0, #17
 8005d78:	f002 f81f 	bl	8007dba <HAL_NVIC_EnableIRQ>
	/* DMAMUX1_OVR_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMAMUX1_OVR_IRQn, 0, 0);
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	2100      	movs	r1, #0
 8005d80:	203e      	movs	r0, #62	@ 0x3e
 8005d82:	f002 f800 	bl	8007d86 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMAMUX1_OVR_IRQn);
 8005d86:	203e      	movs	r0, #62	@ 0x3e
 8005d88:	f002 f817 	bl	8007dba <HAL_NVIC_EnableIRQ>

}
 8005d8c:	bf00      	nop
 8005d8e:	bd80      	pop	{r7, pc}

08005d90 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8005d90:	b580      	push	{r7, lr}
 8005d92:	b086      	sub	sp, #24
 8005d94:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8005d96:	1d3b      	adds	r3, r7, #4
 8005d98:	2200      	movs	r2, #0
 8005d9a:	601a      	str	r2, [r3, #0]
 8005d9c:	605a      	str	r2, [r3, #4]
 8005d9e:	609a      	str	r2, [r3, #8]
 8005da0:	60da      	str	r2, [r3, #12]
 8005da2:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8005da4:	2004      	movs	r0, #4
 8005da6:	f7fd fc08 	bl	80035ba <LL_AHB2_GRP1_EnableClock>
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8005daa:	2002      	movs	r0, #2
 8005dac:	f7fd fc05 	bl	80035ba <LL_AHB2_GRP1_EnableClock>
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8005db0:	2001      	movs	r0, #1
 8005db2:	f7fd fc02 	bl	80035ba <LL_AHB2_GRP1_EnableClock>
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8005db6:	2008      	movs	r0, #8
 8005db8:	f7fd fbff 	bl	80035ba <LL_AHB2_GRP1_EnableClock>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6 | GPIO_PIN_7, GPIO_PIN_RESET);
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	21c0      	movs	r1, #192	@ 0xc0
 8005dc0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8005dc4:	f002 fc90 	bl	80086e8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LD2_Pin | LD3_Pin | LD1_Pin, GPIO_PIN_RESET);
 8005dc8:	2200      	movs	r2, #0
 8005dca:	2123      	movs	r1, #35	@ 0x23
 8005dcc:	482b      	ldr	r0, [pc, #172]	@ (8005e7c <MX_GPIO_Init+0xec>)
 8005dce:	f002 fc8b 	bl	80086e8 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : PA6 PA7 */
	GPIO_InitStruct.Pin = GPIO_PIN_6 | GPIO_PIN_7;
 8005dd2:	23c0      	movs	r3, #192	@ 0xc0
 8005dd4:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005dd6:	2301      	movs	r3, #1
 8005dd8:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005dda:	2300      	movs	r3, #0
 8005ddc:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005dde:	2300      	movs	r3, #0
 8005de0:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005de2:	1d3b      	adds	r3, r7, #4
 8005de4:	4619      	mov	r1, r3
 8005de6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8005dea:	f002 fb0d 	bl	8008408 <HAL_GPIO_Init>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8005dee:	2310      	movs	r3, #16
 8005df0:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005df2:	2300      	movs	r3, #0
 8005df4:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005df6:	2301      	movs	r3, #1
 8005df8:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8005dfa:	1d3b      	adds	r3, r7, #4
 8005dfc:	4619      	mov	r1, r3
 8005dfe:	4820      	ldr	r0, [pc, #128]	@ (8005e80 <MX_GPIO_Init+0xf0>)
 8005e00:	f002 fb02 	bl	8008408 <HAL_GPIO_Init>

	/*Configure GPIO pins : LD2_Pin LD3_Pin LD1_Pin */
	GPIO_InitStruct.Pin = LD2_Pin | LD3_Pin | LD1_Pin;
 8005e04:	2323      	movs	r3, #35	@ 0x23
 8005e06:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005e08:	2301      	movs	r3, #1
 8005e0a:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e0c:	2300      	movs	r3, #0
 8005e0e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005e10:	2300      	movs	r3, #0
 8005e12:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005e14:	1d3b      	adds	r3, r7, #4
 8005e16:	4619      	mov	r1, r3
 8005e18:	4818      	ldr	r0, [pc, #96]	@ (8005e7c <MX_GPIO_Init+0xec>)
 8005e1a:	f002 faf5 	bl	8008408 <HAL_GPIO_Init>

	/*Configure GPIO pins : USB_DM_Pin USB_DP_Pin */
	GPIO_InitStruct.Pin = USB_DM_Pin | USB_DP_Pin;
 8005e1e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8005e22:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e24:	2302      	movs	r3, #2
 8005e26:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e28:	2300      	movs	r3, #0
 8005e2a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005e2c:	2300      	movs	r3, #0
 8005e2e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8005e30:	230a      	movs	r3, #10
 8005e32:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005e34:	1d3b      	adds	r3, r7, #4
 8005e36:	4619      	mov	r1, r3
 8005e38:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8005e3c:	f002 fae4 	bl	8008408 <HAL_GPIO_Init>

	/*Configure GPIO pins : B2_Pin B3_Pin */
	GPIO_InitStruct.Pin = B2_Pin | B3_Pin;
 8005e40:	2303      	movs	r3, #3
 8005e42:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005e44:	2300      	movs	r3, #0
 8005e46:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e48:	2300      	movs	r3, #0
 8005e4a:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005e4c:	1d3b      	adds	r3, r7, #4
 8005e4e:	4619      	mov	r1, r3
 8005e50:	480c      	ldr	r0, [pc, #48]	@ (8005e84 <MX_GPIO_Init+0xf4>)
 8005e52:	f002 fad9 	bl	8008408 <HAL_GPIO_Init>

	/*Configure GPIO pins : STLINK_RX_Pin STLINK_TX_Pin */
	GPIO_InitStruct.Pin = STLINK_RX_Pin | STLINK_TX_Pin;
 8005e56:	23c0      	movs	r3, #192	@ 0xc0
 8005e58:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e5a:	2302      	movs	r3, #2
 8005e5c:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e5e:	2300      	movs	r3, #0
 8005e60:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005e62:	2300      	movs	r3, #0
 8005e64:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005e66:	2307      	movs	r3, #7
 8005e68:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005e6a:	1d3b      	adds	r3, r7, #4
 8005e6c:	4619      	mov	r1, r3
 8005e6e:	4803      	ldr	r0, [pc, #12]	@ (8005e7c <MX_GPIO_Init+0xec>)
 8005e70:	f002 faca 	bl	8008408 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8005e74:	bf00      	nop
 8005e76:	3718      	adds	r7, #24
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	bd80      	pop	{r7, pc}
 8005e7c:	48000400 	.word	0x48000400
 8005e80:	48000800 	.word	0x48000800
 8005e84:	48000c00 	.word	0x48000c00

08005e88 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8005e88:	b480      	push	{r7}
 8005e8a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8005e8c:	b672      	cpsid	i
}
 8005e8e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8005e90:	bf00      	nop
 8005e92:	e7fd      	b.n	8005e90 <Error_Handler+0x8>

08005e94 <f3x3matrixAeqI>:
#define Y 1
#define Z 2

// function sets the 3x3 matrix A to the identity matrix
void f3x3matrixAeqI(float A[][3])
{
 8005e94:	b480      	push	{r7}
 8005e96:	b085      	sub	sp, #20
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
	float *pAij;	// pointer to A[i][j]
	int8_t i, j;	// loop counters

	for (i = 0; i < 3; i++) {
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	72fb      	strb	r3, [r7, #11]
 8005ea0:	e032      	b.n	8005f08 <f3x3matrixAeqI+0x74>
		// set pAij to &A[i][j=0]
		pAij = A[i];
 8005ea2:	f997 200b 	ldrsb.w	r2, [r7, #11]
 8005ea6:	4613      	mov	r3, r2
 8005ea8:	005b      	lsls	r3, r3, #1
 8005eaa:	4413      	add	r3, r2
 8005eac:	009b      	lsls	r3, r3, #2
 8005eae:	461a      	mov	r2, r3
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	4413      	add	r3, r2
 8005eb4:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < 3; j++) {
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	72bb      	strb	r3, [r7, #10]
 8005eba:	e00b      	b.n	8005ed4 <f3x3matrixAeqI+0x40>
			*(pAij++) = 0.0F;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	1d1a      	adds	r2, r3, #4
 8005ec0:	60fa      	str	r2, [r7, #12]
 8005ec2:	f04f 0200 	mov.w	r2, #0
 8005ec6:	601a      	str	r2, [r3, #0]
		for (j = 0; j < 3; j++) {
 8005ec8:	f997 300a 	ldrsb.w	r3, [r7, #10]
 8005ecc:	b2db      	uxtb	r3, r3
 8005ece:	3301      	adds	r3, #1
 8005ed0:	b2db      	uxtb	r3, r3
 8005ed2:	72bb      	strb	r3, [r7, #10]
 8005ed4:	f997 300a 	ldrsb.w	r3, [r7, #10]
 8005ed8:	2b02      	cmp	r3, #2
 8005eda:	ddef      	ble.n	8005ebc <f3x3matrixAeqI+0x28>
		}
		A[i][i] = 1.0F;
 8005edc:	f997 200b 	ldrsb.w	r2, [r7, #11]
 8005ee0:	4613      	mov	r3, r2
 8005ee2:	005b      	lsls	r3, r3, #1
 8005ee4:	4413      	add	r3, r2
 8005ee6:	009b      	lsls	r3, r3, #2
 8005ee8:	461a      	mov	r2, r3
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	441a      	add	r2, r3
 8005eee:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8005ef2:	009b      	lsls	r3, r3, #2
 8005ef4:	4413      	add	r3, r2
 8005ef6:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8005efa:	601a      	str	r2, [r3, #0]
	for (i = 0; i < 3; i++) {
 8005efc:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8005f00:	b2db      	uxtb	r3, r3
 8005f02:	3301      	adds	r3, #1
 8005f04:	b2db      	uxtb	r3, r3
 8005f06:	72fb      	strb	r3, [r7, #11]
 8005f08:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8005f0c:	2b02      	cmp	r3, #2
 8005f0e:	ddc8      	ble.n	8005ea2 <f3x3matrixAeqI+0xe>
	}
}
 8005f10:	bf00      	nop
 8005f12:	bf00      	nop
 8005f14:	3714      	adds	r7, #20
 8005f16:	46bd      	mov	sp, r7
 8005f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1c:	4770      	bx	lr

08005f1e <fmatrixAeqI>:

// function sets the matrix A to the identity matrix
void fmatrixAeqI(float *A[], int16_t rc)
{
 8005f1e:	b480      	push	{r7}
 8005f20:	b085      	sub	sp, #20
 8005f22:	af00      	add	r7, sp, #0
 8005f24:	6078      	str	r0, [r7, #4]
 8005f26:	460b      	mov	r3, r1
 8005f28:	807b      	strh	r3, [r7, #2]
	// rc = rows and columns in A

	float *pAij;	// pointer to A[i][j]
	int8_t i, j;	// loop counters

	for (i = 0; i < rc; i++) {
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	72fb      	strb	r3, [r7, #11]
 8005f2e:	e02f      	b.n	8005f90 <fmatrixAeqI+0x72>
		// set pAij to &A[i][j=0]
		pAij = A[i];
 8005f30:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8005f34:	009b      	lsls	r3, r3, #2
 8005f36:	687a      	ldr	r2, [r7, #4]
 8005f38:	4413      	add	r3, r2
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < rc; j++) {
 8005f3e:	2300      	movs	r3, #0
 8005f40:	72bb      	strb	r3, [r7, #10]
 8005f42:	e00b      	b.n	8005f5c <fmatrixAeqI+0x3e>
			*(pAij++) = 0.0F;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	1d1a      	adds	r2, r3, #4
 8005f48:	60fa      	str	r2, [r7, #12]
 8005f4a:	f04f 0200 	mov.w	r2, #0
 8005f4e:	601a      	str	r2, [r3, #0]
		for (j = 0; j < rc; j++) {
 8005f50:	f997 300a 	ldrsb.w	r3, [r7, #10]
 8005f54:	b2db      	uxtb	r3, r3
 8005f56:	3301      	adds	r3, #1
 8005f58:	b2db      	uxtb	r3, r3
 8005f5a:	72bb      	strb	r3, [r7, #10]
 8005f5c:	f997 300a 	ldrsb.w	r3, [r7, #10]
 8005f60:	b21b      	sxth	r3, r3
 8005f62:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8005f66:	429a      	cmp	r2, r3
 8005f68:	dcec      	bgt.n	8005f44 <fmatrixAeqI+0x26>
		}
		A[i][i] = 1.0F;
 8005f6a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8005f6e:	009b      	lsls	r3, r3, #2
 8005f70:	687a      	ldr	r2, [r7, #4]
 8005f72:	4413      	add	r3, r2
 8005f74:	681a      	ldr	r2, [r3, #0]
 8005f76:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8005f7a:	009b      	lsls	r3, r3, #2
 8005f7c:	4413      	add	r3, r2
 8005f7e:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8005f82:	601a      	str	r2, [r3, #0]
	for (i = 0; i < rc; i++) {
 8005f84:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8005f88:	b2db      	uxtb	r3, r3
 8005f8a:	3301      	adds	r3, #1
 8005f8c:	b2db      	uxtb	r3, r3
 8005f8e:	72fb      	strb	r3, [r7, #11]
 8005f90:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8005f94:	b21b      	sxth	r3, r3
 8005f96:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8005f9a:	429a      	cmp	r2, r3
 8005f9c:	dcc8      	bgt.n	8005f30 <fmatrixAeqI+0x12>
	}
}
 8005f9e:	bf00      	nop
 8005fa0:	bf00      	nop
 8005fa2:	3714      	adds	r7, #20
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005faa:	4770      	bx	lr

08005fac <f3x3matrixAeqScalar>:

// function sets every entry in the 3x3 matrix A to a constant scalar
void f3x3matrixAeqScalar(float A[][3], float Scalar)
{
 8005fac:	b480      	push	{r7}
 8005fae:	b085      	sub	sp, #20
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
 8005fb4:	ed87 0a00 	vstr	s0, [r7]
	float *pAij;	// pointer to A[i][j]
	int8_t i, j;	// counters

	for (i = 0; i < 3; i++) {
 8005fb8:	2300      	movs	r3, #0
 8005fba:	72fb      	strb	r3, [r7, #11]
 8005fbc:	e021      	b.n	8006002 <f3x3matrixAeqScalar+0x56>
		// set pAij to &A[i][j=0]
		pAij = A[i];
 8005fbe:	f997 200b 	ldrsb.w	r2, [r7, #11]
 8005fc2:	4613      	mov	r3, r2
 8005fc4:	005b      	lsls	r3, r3, #1
 8005fc6:	4413      	add	r3, r2
 8005fc8:	009b      	lsls	r3, r3, #2
 8005fca:	461a      	mov	r2, r3
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	4413      	add	r3, r2
 8005fd0:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < 3; j++) {
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	72bb      	strb	r3, [r7, #10]
 8005fd6:	e00a      	b.n	8005fee <f3x3matrixAeqScalar+0x42>
			*(pAij++) = Scalar;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	1d1a      	adds	r2, r3, #4
 8005fdc:	60fa      	str	r2, [r7, #12]
 8005fde:	683a      	ldr	r2, [r7, #0]
 8005fe0:	601a      	str	r2, [r3, #0]
		for (j = 0; j < 3; j++) {
 8005fe2:	f997 300a 	ldrsb.w	r3, [r7, #10]
 8005fe6:	b2db      	uxtb	r3, r3
 8005fe8:	3301      	adds	r3, #1
 8005fea:	b2db      	uxtb	r3, r3
 8005fec:	72bb      	strb	r3, [r7, #10]
 8005fee:	f997 300a 	ldrsb.w	r3, [r7, #10]
 8005ff2:	2b02      	cmp	r3, #2
 8005ff4:	ddf0      	ble.n	8005fd8 <f3x3matrixAeqScalar+0x2c>
	for (i = 0; i < 3; i++) {
 8005ff6:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8005ffa:	b2db      	uxtb	r3, r3
 8005ffc:	3301      	adds	r3, #1
 8005ffe:	b2db      	uxtb	r3, r3
 8006000:	72fb      	strb	r3, [r7, #11]
 8006002:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8006006:	2b02      	cmp	r3, #2
 8006008:	ddd9      	ble.n	8005fbe <f3x3matrixAeqScalar+0x12>
		}
	}
}
 800600a:	bf00      	nop
 800600c:	bf00      	nop
 800600e:	3714      	adds	r7, #20
 8006010:	46bd      	mov	sp, r7
 8006012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006016:	4770      	bx	lr

08006018 <f3x3matrixAeqAxScalar>:

// function multiplies all elements of 3x3 matrix A by the specified scalar
void f3x3matrixAeqAxScalar(float A[][3], float Scalar)
{
 8006018:	b480      	push	{r7}
 800601a:	b085      	sub	sp, #20
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]
 8006020:	ed87 0a00 	vstr	s0, [r7]
	float *pAij;	// pointer to A[i][j]
	int8_t i, j;	// loop counters

	for (i = 0; i < 3; i++) {
 8006024:	2300      	movs	r3, #0
 8006026:	72fb      	strb	r3, [r7, #11]
 8006028:	e027      	b.n	800607a <f3x3matrixAeqAxScalar+0x62>
		// set pAij to &A[i][j=0]
		pAij = A[i];
 800602a:	f997 200b 	ldrsb.w	r2, [r7, #11]
 800602e:	4613      	mov	r3, r2
 8006030:	005b      	lsls	r3, r3, #1
 8006032:	4413      	add	r3, r2
 8006034:	009b      	lsls	r3, r3, #2
 8006036:	461a      	mov	r2, r3
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	4413      	add	r3, r2
 800603c:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < 3; j++) {
 800603e:	2300      	movs	r3, #0
 8006040:	72bb      	strb	r3, [r7, #10]
 8006042:	e010      	b.n	8006066 <f3x3matrixAeqAxScalar+0x4e>
			*(pAij++) *= Scalar;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	1d1a      	adds	r2, r3, #4
 8006048:	60fa      	str	r2, [r7, #12]
 800604a:	ed93 7a00 	vldr	s14, [r3]
 800604e:	edd7 7a00 	vldr	s15, [r7]
 8006052:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006056:	edc3 7a00 	vstr	s15, [r3]
		for (j = 0; j < 3; j++) {
 800605a:	f997 300a 	ldrsb.w	r3, [r7, #10]
 800605e:	b2db      	uxtb	r3, r3
 8006060:	3301      	adds	r3, #1
 8006062:	b2db      	uxtb	r3, r3
 8006064:	72bb      	strb	r3, [r7, #10]
 8006066:	f997 300a 	ldrsb.w	r3, [r7, #10]
 800606a:	2b02      	cmp	r3, #2
 800606c:	ddea      	ble.n	8006044 <f3x3matrixAeqAxScalar+0x2c>
	for (i = 0; i < 3; i++) {
 800606e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8006072:	b2db      	uxtb	r3, r3
 8006074:	3301      	adds	r3, #1
 8006076:	b2db      	uxtb	r3, r3
 8006078:	72fb      	strb	r3, [r7, #11]
 800607a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800607e:	2b02      	cmp	r3, #2
 8006080:	ddd3      	ble.n	800602a <f3x3matrixAeqAxScalar+0x12>
		}
	}
}
 8006082:	bf00      	nop
 8006084:	bf00      	nop
 8006086:	3714      	adds	r7, #20
 8006088:	46bd      	mov	sp, r7
 800608a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608e:	4770      	bx	lr

08006090 <f3x3matrixAeqMinusA>:

// function negates all elements of 3x3 matrix A
void f3x3matrixAeqMinusA(float A[][3])
{
 8006090:	b480      	push	{r7}
 8006092:	b085      	sub	sp, #20
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
	float *pAij;	// pointer to A[i][j]
	int8_t i, j;	// loop counters

	for (i = 0; i < 3; i++) {
 8006098:	2300      	movs	r3, #0
 800609a:	72fb      	strb	r3, [r7, #11]
 800609c:	e027      	b.n	80060ee <f3x3matrixAeqMinusA+0x5e>
		// set pAij to &A[i][j=0]
		pAij = A[i];
 800609e:	f997 200b 	ldrsb.w	r2, [r7, #11]
 80060a2:	4613      	mov	r3, r2
 80060a4:	005b      	lsls	r3, r3, #1
 80060a6:	4413      	add	r3, r2
 80060a8:	009b      	lsls	r3, r3, #2
 80060aa:	461a      	mov	r2, r3
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	4413      	add	r3, r2
 80060b0:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < 3; j++) {
 80060b2:	2300      	movs	r3, #0
 80060b4:	72bb      	strb	r3, [r7, #10]
 80060b6:	e010      	b.n	80060da <f3x3matrixAeqMinusA+0x4a>
			*pAij = -*pAij;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	edd3 7a00 	vldr	s15, [r3]
 80060be:	eef1 7a67 	vneg.f32	s15, s15
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	edc3 7a00 	vstr	s15, [r3]
			pAij++;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	3304      	adds	r3, #4
 80060cc:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < 3; j++) {
 80060ce:	f997 300a 	ldrsb.w	r3, [r7, #10]
 80060d2:	b2db      	uxtb	r3, r3
 80060d4:	3301      	adds	r3, #1
 80060d6:	b2db      	uxtb	r3, r3
 80060d8:	72bb      	strb	r3, [r7, #10]
 80060da:	f997 300a 	ldrsb.w	r3, [r7, #10]
 80060de:	2b02      	cmp	r3, #2
 80060e0:	ddea      	ble.n	80060b8 <f3x3matrixAeqMinusA+0x28>
	for (i = 0; i < 3; i++) {
 80060e2:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80060e6:	b2db      	uxtb	r3, r3
 80060e8:	3301      	adds	r3, #1
 80060ea:	b2db      	uxtb	r3, r3
 80060ec:	72fb      	strb	r3, [r7, #11]
 80060ee:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80060f2:	2b02      	cmp	r3, #2
 80060f4:	ddd3      	ble.n	800609e <f3x3matrixAeqMinusA+0xe>
		}
	}
}
 80060f6:	bf00      	nop
 80060f8:	bf00      	nop
 80060fa:	3714      	adds	r7, #20
 80060fc:	46bd      	mov	sp, r7
 80060fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006102:	4770      	bx	lr

08006104 <f3x3matrixAeqInvSymB>:

// function directly calculates the symmetric inverse of a symmetric 3x3 matrix
// only the on and above diagonal terms in B are used and need to be specified
void f3x3matrixAeqInvSymB(float A[][3], float B[][3])
{
 8006104:	b580      	push	{r7, lr}
 8006106:	b086      	sub	sp, #24
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
 800610c:	6039      	str	r1, [r7, #0]
	float fB12B02mB01B22;	// B[1][2] * B[0][2] - B[0][1] * B[2][2]
	float fB01B12mB11B02;	// B[0][1] * B[1][2] - B[1][1] * B[0][2]
	float ftmp;				// determinant and then reciprocal

	// calculate useful products
	fB11B22mB12B12 = B[1][1] * B[2][2] - B[1][2] * B[1][2];
 800610e:	683b      	ldr	r3, [r7, #0]
 8006110:	330c      	adds	r3, #12
 8006112:	ed93 7a01 	vldr	s14, [r3, #4]
 8006116:	683b      	ldr	r3, [r7, #0]
 8006118:	3318      	adds	r3, #24
 800611a:	edd3 7a02 	vldr	s15, [r3, #8]
 800611e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006122:	683b      	ldr	r3, [r7, #0]
 8006124:	330c      	adds	r3, #12
 8006126:	edd3 6a02 	vldr	s13, [r3, #8]
 800612a:	683b      	ldr	r3, [r7, #0]
 800612c:	330c      	adds	r3, #12
 800612e:	edd3 7a02 	vldr	s15, [r3, #8]
 8006132:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006136:	ee77 7a67 	vsub.f32	s15, s14, s15
 800613a:	edc7 7a05 	vstr	s15, [r7, #20]
	fB12B02mB01B22 = B[1][2] * B[0][2] - B[0][1] * B[2][2];
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	330c      	adds	r3, #12
 8006142:	ed93 7a02 	vldr	s14, [r3, #8]
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	edd3 7a02 	vldr	s15, [r3, #8]
 800614c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	edd3 6a01 	vldr	s13, [r3, #4]
 8006156:	683b      	ldr	r3, [r7, #0]
 8006158:	3318      	adds	r3, #24
 800615a:	edd3 7a02 	vldr	s15, [r3, #8]
 800615e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006162:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006166:	edc7 7a04 	vstr	s15, [r7, #16]
	fB01B12mB11B02 = B[0][1] * B[1][2] - B[1][1] * B[0][2];
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	ed93 7a01 	vldr	s14, [r3, #4]
 8006170:	683b      	ldr	r3, [r7, #0]
 8006172:	330c      	adds	r3, #12
 8006174:	edd3 7a02 	vldr	s15, [r3, #8]
 8006178:	ee27 7a27 	vmul.f32	s14, s14, s15
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	330c      	adds	r3, #12
 8006180:	edd3 6a01 	vldr	s13, [r3, #4]
 8006184:	683b      	ldr	r3, [r7, #0]
 8006186:	edd3 7a02 	vldr	s15, [r3, #8]
 800618a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800618e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006192:	edc7 7a03 	vstr	s15, [r7, #12]

	// set ftmp to the determinant of the input matrix B
	ftmp = B[0][0] * fB11B22mB12B12 + B[0][1] * fB12B02mB01B22 + B[0][2] * fB01B12mB11B02;
 8006196:	683b      	ldr	r3, [r7, #0]
 8006198:	ed93 7a00 	vldr	s14, [r3]
 800619c:	edd7 7a05 	vldr	s15, [r7, #20]
 80061a0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80061a4:	683b      	ldr	r3, [r7, #0]
 80061a6:	edd3 6a01 	vldr	s13, [r3, #4]
 80061aa:	edd7 7a04 	vldr	s15, [r7, #16]
 80061ae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80061b2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	edd3 6a02 	vldr	s13, [r3, #8]
 80061bc:	edd7 7a03 	vldr	s15, [r7, #12]
 80061c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80061c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80061c8:	edc7 7a02 	vstr	s15, [r7, #8]

	// set A to the inverse of B for any determinant except zero
	if (ftmp != 0.0F) {
 80061cc:	edd7 7a02 	vldr	s15, [r7, #8]
 80061d0:	eef5 7a40 	vcmp.f32	s15, #0.0
 80061d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061d8:	f000 8083 	beq.w	80062e2 <f3x3matrixAeqInvSymB+0x1de>
		ftmp = 1.0F / ftmp;
 80061dc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80061e0:	ed97 7a02 	vldr	s14, [r7, #8]
 80061e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80061e8:	edc7 7a02 	vstr	s15, [r7, #8]
		A[0][0] = fB11B22mB12B12 * ftmp;
 80061ec:	ed97 7a05 	vldr	s14, [r7, #20]
 80061f0:	edd7 7a02 	vldr	s15, [r7, #8]
 80061f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	edc3 7a00 	vstr	s15, [r3]
		A[1][0] = A[0][1] = fB12B02mB01B22 * ftmp;
 80061fe:	ed97 7a04 	vldr	s14, [r7, #16]
 8006202:	edd7 7a02 	vldr	s15, [r7, #8]
 8006206:	ee67 7a27 	vmul.f32	s15, s14, s15
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	edc3 7a01 	vstr	s15, [r3, #4]
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	330c      	adds	r3, #12
 8006214:	687a      	ldr	r2, [r7, #4]
 8006216:	6852      	ldr	r2, [r2, #4]
 8006218:	601a      	str	r2, [r3, #0]
		A[2][0] = A[0][2] = fB01B12mB11B02 * ftmp;
 800621a:	ed97 7a03 	vldr	s14, [r7, #12]
 800621e:	edd7 7a02 	vldr	s15, [r7, #8]
 8006222:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	edc3 7a02 	vstr	s15, [r3, #8]
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	3318      	adds	r3, #24
 8006230:	687a      	ldr	r2, [r7, #4]
 8006232:	6892      	ldr	r2, [r2, #8]
 8006234:	601a      	str	r2, [r3, #0]
		A[1][1] = (B[0][0] * B[2][2] - B[0][2] * B[0][2]) * ftmp;
 8006236:	683b      	ldr	r3, [r7, #0]
 8006238:	ed93 7a00 	vldr	s14, [r3]
 800623c:	683b      	ldr	r3, [r7, #0]
 800623e:	3318      	adds	r3, #24
 8006240:	edd3 7a02 	vldr	s15, [r3, #8]
 8006244:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006248:	683b      	ldr	r3, [r7, #0]
 800624a:	edd3 6a02 	vldr	s13, [r3, #8]
 800624e:	683b      	ldr	r3, [r7, #0]
 8006250:	edd3 7a02 	vldr	s15, [r3, #8]
 8006254:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006258:	ee37 7a67 	vsub.f32	s14, s14, s15
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	330c      	adds	r3, #12
 8006260:	edd7 7a02 	vldr	s15, [r7, #8]
 8006264:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006268:	edc3 7a01 	vstr	s15, [r3, #4]
		A[2][1] = A[1][2] = (B[0][2] * B[0][1] - B[0][0] * B[1][2]) * ftmp;
 800626c:	683b      	ldr	r3, [r7, #0]
 800626e:	ed93 7a02 	vldr	s14, [r3, #8]
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	edd3 7a01 	vldr	s15, [r3, #4]
 8006278:	ee27 7a27 	vmul.f32	s14, s14, s15
 800627c:	683b      	ldr	r3, [r7, #0]
 800627e:	edd3 6a00 	vldr	s13, [r3]
 8006282:	683b      	ldr	r3, [r7, #0]
 8006284:	330c      	adds	r3, #12
 8006286:	edd3 7a02 	vldr	s15, [r3, #8]
 800628a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800628e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	330c      	adds	r3, #12
 8006296:	edd7 7a02 	vldr	s15, [r7, #8]
 800629a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800629e:	edc3 7a02 	vstr	s15, [r3, #8]
 80062a2:	687a      	ldr	r2, [r7, #4]
 80062a4:	3218      	adds	r2, #24
 80062a6:	689b      	ldr	r3, [r3, #8]
 80062a8:	6053      	str	r3, [r2, #4]
		A[2][2] = (B[0][0] * B[1][1] - B[0][1] * B[0][1]) * ftmp;
 80062aa:	683b      	ldr	r3, [r7, #0]
 80062ac:	ed93 7a00 	vldr	s14, [r3]
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	330c      	adds	r3, #12
 80062b4:	edd3 7a01 	vldr	s15, [r3, #4]
 80062b8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	edd3 6a01 	vldr	s13, [r3, #4]
 80062c2:	683b      	ldr	r3, [r7, #0]
 80062c4:	edd3 7a01 	vldr	s15, [r3, #4]
 80062c8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80062cc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	3318      	adds	r3, #24
 80062d4:	edd7 7a02 	vldr	s15, [r7, #8]
 80062d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062dc:	edc3 7a02 	vstr	s15, [r3, #8]
	} else {
		// provide the identity matrix if the determinant is zero
		f3x3matrixAeqI(A);
	}
}
 80062e0:	e002      	b.n	80062e8 <f3x3matrixAeqInvSymB+0x1e4>
		f3x3matrixAeqI(A);
 80062e2:	6878      	ldr	r0, [r7, #4]
 80062e4:	f7ff fdd6 	bl	8005e94 <f3x3matrixAeqI>
}
 80062e8:	bf00      	nop
 80062ea:	3718      	adds	r7, #24
 80062ec:	46bd      	mov	sp, r7
 80062ee:	bd80      	pop	{r7, pc}

080062f0 <f3x3matrixDetA>:

// function calculates the determinant of a 3x3 matrix
float f3x3matrixDetA(float A[][3])
{
 80062f0:	b480      	push	{r7}
 80062f2:	b083      	sub	sp, #12
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
	return (A[X][X] * (A[Y][Y] * A[Z][Z] - A[Y][Z] * A[Z][Y]) +
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	ed93 7a00 	vldr	s14, [r3]
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	330c      	adds	r3, #12
 8006302:	edd3 6a01 	vldr	s13, [r3, #4]
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	3318      	adds	r3, #24
 800630a:	edd3 7a02 	vldr	s15, [r3, #8]
 800630e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	330c      	adds	r3, #12
 8006316:	ed93 6a02 	vldr	s12, [r3, #8]
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	3318      	adds	r3, #24
 800631e:	edd3 7a01 	vldr	s15, [r3, #4]
 8006322:	ee66 7a27 	vmul.f32	s15, s12, s15
 8006326:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800632a:	ee27 7a27 	vmul.f32	s14, s14, s15
			A[X][Y] * (A[Y][Z] * A[Z][X] - A[Y][X] * A[Z][Z]) +
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	edd3 6a01 	vldr	s13, [r3, #4]
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	330c      	adds	r3, #12
 8006338:	ed93 6a02 	vldr	s12, [r3, #8]
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	3318      	adds	r3, #24
 8006340:	edd3 7a00 	vldr	s15, [r3]
 8006344:	ee26 6a27 	vmul.f32	s12, s12, s15
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	330c      	adds	r3, #12
 800634c:	edd3 5a00 	vldr	s11, [r3]
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	3318      	adds	r3, #24
 8006354:	edd3 7a02 	vldr	s15, [r3, #8]
 8006358:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800635c:	ee76 7a67 	vsub.f32	s15, s12, s15
 8006360:	ee66 7aa7 	vmul.f32	s15, s13, s15
	return (A[X][X] * (A[Y][Y] * A[Z][Z] - A[Y][Z] * A[Z][Y]) +
 8006364:	ee37 7a27 	vadd.f32	s14, s14, s15
			A[X][Z] * (A[Y][X] * A[Z][Y] - A[Y][Y] * A[Z][X]));
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	edd3 6a02 	vldr	s13, [r3, #8]
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	330c      	adds	r3, #12
 8006372:	ed93 6a00 	vldr	s12, [r3]
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	3318      	adds	r3, #24
 800637a:	edd3 7a01 	vldr	s15, [r3, #4]
 800637e:	ee26 6a27 	vmul.f32	s12, s12, s15
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	330c      	adds	r3, #12
 8006386:	edd3 5a01 	vldr	s11, [r3, #4]
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	3318      	adds	r3, #24
 800638e:	edd3 7a00 	vldr	s15, [r3]
 8006392:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8006396:	ee76 7a67 	vsub.f32	s15, s12, s15
 800639a:	ee66 7aa7 	vmul.f32	s15, s13, s15
			A[X][Y] * (A[Y][Z] * A[Z][X] - A[Y][X] * A[Z][Z]) +
 800639e:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 80063a2:	eeb0 0a67 	vmov.f32	s0, s15
 80063a6:	370c      	adds	r7, #12
 80063a8:	46bd      	mov	sp, r7
 80063aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ae:	4770      	bx	lr

080063b0 <eigencompute>:
// A[][] is changed on output.
// eigval[0..n-1] returns the eigenvalues of A[][].
// eigvec[0..n-1][0..n-1] returns the normalized eigenvectors of A[][]
// the eigenvectors are not sorted by value
void eigencompute(float A[][10], float eigval[], float eigvec[][10], int8_t n)
{
 80063b0:	b5b0      	push	{r4, r5, r7, lr}
 80063b2:	b08c      	sub	sp, #48	@ 0x30
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	60f8      	str	r0, [r7, #12]
 80063b8:	60b9      	str	r1, [r7, #8]
 80063ba:	607a      	str	r2, [r7, #4]
 80063bc:	70fb      	strb	r3, [r7, #3]
	int8_t j;
	// timeout ctr for number of passes of the algorithm
	int8_t ctr;

	// initialize eigenvectors matrix and eigenvalues array
	for (ir = 0; ir < n; ir++) {
 80063be:	2300      	movs	r3, #0
 80063c0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80063c4:	e04b      	b.n	800645e <eigencompute+0xae>
		// loop over all columns
		for (ic = 0; ic < n; ic++) {
 80063c6:	2300      	movs	r3, #0
 80063c8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80063cc:	e016      	b.n	80063fc <eigencompute+0x4c>
			// set on diagonal and off-diagonal elements to zero
			eigvec[ir][ic] = 0.0F;
 80063ce:	f997 2027 	ldrsb.w	r2, [r7, #39]	@ 0x27
 80063d2:	4613      	mov	r3, r2
 80063d4:	009b      	lsls	r3, r3, #2
 80063d6:	4413      	add	r3, r2
 80063d8:	00db      	lsls	r3, r3, #3
 80063da:	461a      	mov	r2, r3
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	441a      	add	r2, r3
 80063e0:	f997 3026 	ldrsb.w	r3, [r7, #38]	@ 0x26
 80063e4:	009b      	lsls	r3, r3, #2
 80063e6:	4413      	add	r3, r2
 80063e8:	f04f 0200 	mov.w	r2, #0
 80063ec:	601a      	str	r2, [r3, #0]
		for (ic = 0; ic < n; ic++) {
 80063ee:	f997 3026 	ldrsb.w	r3, [r7, #38]	@ 0x26
 80063f2:	b2db      	uxtb	r3, r3
 80063f4:	3301      	adds	r3, #1
 80063f6:	b2db      	uxtb	r3, r3
 80063f8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80063fc:	f997 2026 	ldrsb.w	r2, [r7, #38]	@ 0x26
 8006400:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006404:	429a      	cmp	r2, r3
 8006406:	dbe2      	blt.n	80063ce <eigencompute+0x1e>
		}

		// correct the diagonal elements to 1.0
		eigvec[ir][ir] = 1.0F;
 8006408:	f997 2027 	ldrsb.w	r2, [r7, #39]	@ 0x27
 800640c:	4613      	mov	r3, r2
 800640e:	009b      	lsls	r3, r3, #2
 8006410:	4413      	add	r3, r2
 8006412:	00db      	lsls	r3, r3, #3
 8006414:	461a      	mov	r2, r3
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	441a      	add	r2, r3
 800641a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800641e:	009b      	lsls	r3, r3, #2
 8006420:	4413      	add	r3, r2
 8006422:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8006426:	601a      	str	r2, [r3, #0]

		// initialize the array of eigenvalues to the diagonal elements of m
		eigval[ir] = A[ir][ir];
 8006428:	f997 2027 	ldrsb.w	r2, [r7, #39]	@ 0x27
 800642c:	4613      	mov	r3, r2
 800642e:	009b      	lsls	r3, r3, #2
 8006430:	4413      	add	r3, r2
 8006432:	00db      	lsls	r3, r3, #3
 8006434:	461a      	mov	r2, r3
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	1899      	adds	r1, r3, r2
 800643a:	f997 2027 	ldrsb.w	r2, [r7, #39]	@ 0x27
 800643e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006442:	009b      	lsls	r3, r3, #2
 8006444:	68b8      	ldr	r0, [r7, #8]
 8006446:	4403      	add	r3, r0
 8006448:	0092      	lsls	r2, r2, #2
 800644a:	440a      	add	r2, r1
 800644c:	6812      	ldr	r2, [r2, #0]
 800644e:	601a      	str	r2, [r3, #0]
	for (ir = 0; ir < n; ir++) {
 8006450:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006454:	b2db      	uxtb	r3, r3
 8006456:	3301      	adds	r3, #1
 8006458:	b2db      	uxtb	r3, r3
 800645a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800645e:	f997 2027 	ldrsb.w	r2, [r7, #39]	@ 0x27
 8006462:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006466:	429a      	cmp	r2, r3
 8006468:	dbad      	blt.n	80063c6 <eigencompute+0x16>
	}

	// initialize the counter and loop until converged or NITERATIONS reached
	ctr = 0;
 800646a:	2300      	movs	r3, #0
 800646c:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
	do {
		// compute the absolute value of the above diagonal elements as exit criterion
		residue = 0.0F;
 8006470:	f04f 0300 	mov.w	r3, #0
 8006474:	62bb      	str	r3, [r7, #40]	@ 0x28
		// loop over rows excluding last row
		for (ir = 0; ir < n - 1; ir++) {
 8006476:	2300      	movs	r3, #0
 8006478:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800647c:	e031      	b.n	80064e2 <eigencompute+0x132>
			// loop over above diagonal columns
			for (ic = ir + 1; ic < n; ic++) {
 800647e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006482:	3301      	adds	r3, #1
 8006484:	b2db      	uxtb	r3, r3
 8006486:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800648a:	e01d      	b.n	80064c8 <eigencompute+0x118>
				// accumulate the residual off diagonal terms which are being driven to zero
				residue += fabs(A[ir][ic]);
 800648c:	f997 2027 	ldrsb.w	r2, [r7, #39]	@ 0x27
 8006490:	4613      	mov	r3, r2
 8006492:	009b      	lsls	r3, r3, #2
 8006494:	4413      	add	r3, r2
 8006496:	00db      	lsls	r3, r3, #3
 8006498:	461a      	mov	r2, r3
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	441a      	add	r2, r3
 800649e:	f997 3026 	ldrsb.w	r3, [r7, #38]	@ 0x26
 80064a2:	009b      	lsls	r3, r3, #2
 80064a4:	4413      	add	r3, r2
 80064a6:	edd3 7a00 	vldr	s15, [r3]
 80064aa:	eef0 7ae7 	vabs.f32	s15, s15
 80064ae:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 80064b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80064b6:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
			for (ic = ir + 1; ic < n; ic++) {
 80064ba:	f997 3026 	ldrsb.w	r3, [r7, #38]	@ 0x26
 80064be:	b2db      	uxtb	r3, r3
 80064c0:	3301      	adds	r3, #1
 80064c2:	b2db      	uxtb	r3, r3
 80064c4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80064c8:	f997 2026 	ldrsb.w	r2, [r7, #38]	@ 0x26
 80064cc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80064d0:	429a      	cmp	r2, r3
 80064d2:	dbdb      	blt.n	800648c <eigencompute+0xdc>
		for (ir = 0; ir < n - 1; ir++) {
 80064d4:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80064d8:	b2db      	uxtb	r3, r3
 80064da:	3301      	adds	r3, #1
 80064dc:	b2db      	uxtb	r3, r3
 80064de:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80064e2:	f997 2027 	ldrsb.w	r2, [r7, #39]	@ 0x27
 80064e6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80064ea:	3b01      	subs	r3, #1
 80064ec:	429a      	cmp	r2, r3
 80064ee:	dbc6      	blt.n	800647e <eigencompute+0xce>
			}
		}

		// check if we still have work to do
		if (residue > 0.0F) {
 80064f0:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80064f4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80064f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80064fc:	f340 8344 	ble.w	8006b88 <eigencompute+0x7d8>
			// loop over all rows with the exception of the last row (since only rotating above diagonal elements)
			for (ir = 0; ir < n - 1; ir++) {
 8006500:	2300      	movs	r3, #0
 8006502:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8006506:	e337      	b.n	8006b78 <eigencompute+0x7c8>
				// loop over columns ic (where ic is always greater than ir since above diagonal)
				for (ic = ir + 1; ic < n; ic++) {
 8006508:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800650c:	3301      	adds	r3, #1
 800650e:	b2db      	uxtb	r3, r3
 8006510:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8006514:	e322      	b.n	8006b5c <eigencompute+0x7ac>
					// only continue with this element if the element is non-zero
					if (fabs(A[ir][ic]) > 0.0F) {
 8006516:	f997 2027 	ldrsb.w	r2, [r7, #39]	@ 0x27
 800651a:	4613      	mov	r3, r2
 800651c:	009b      	lsls	r3, r3, #2
 800651e:	4413      	add	r3, r2
 8006520:	00db      	lsls	r3, r3, #3
 8006522:	461a      	mov	r2, r3
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	441a      	add	r2, r3
 8006528:	f997 3026 	ldrsb.w	r3, [r7, #38]	@ 0x26
 800652c:	009b      	lsls	r3, r3, #2
 800652e:	4413      	add	r3, r2
 8006530:	edd3 7a00 	vldr	s15, [r3]
 8006534:	eef0 7ae7 	vabs.f32	s15, s15
 8006538:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800653c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006540:	f340 8305 	ble.w	8006b4e <eigencompute+0x79e>
						// calculate cot(2*phi) where phi is the Jacobi rotation angle
						cot2phi = 0.5F * (eigval[ic] - eigval[ir]) / (A[ir][ic]);
 8006544:	f997 3026 	ldrsb.w	r3, [r7, #38]	@ 0x26
 8006548:	009b      	lsls	r3, r3, #2
 800654a:	68ba      	ldr	r2, [r7, #8]
 800654c:	4413      	add	r3, r2
 800654e:	ed93 7a00 	vldr	s14, [r3]
 8006552:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006556:	009b      	lsls	r3, r3, #2
 8006558:	68ba      	ldr	r2, [r7, #8]
 800655a:	4413      	add	r3, r2
 800655c:	edd3 7a00 	vldr	s15, [r3]
 8006560:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006564:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8006568:	ee67 6a87 	vmul.f32	s13, s15, s14
 800656c:	f997 2027 	ldrsb.w	r2, [r7, #39]	@ 0x27
 8006570:	4613      	mov	r3, r2
 8006572:	009b      	lsls	r3, r3, #2
 8006574:	4413      	add	r3, r2
 8006576:	00db      	lsls	r3, r3, #3
 8006578:	461a      	mov	r2, r3
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	441a      	add	r2, r3
 800657e:	f997 3026 	ldrsb.w	r3, [r7, #38]	@ 0x26
 8006582:	009b      	lsls	r3, r3, #2
 8006584:	4413      	add	r3, r2
 8006586:	ed93 7a00 	vldr	s14, [r3]
 800658a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800658e:	edc7 7a08 	vstr	s15, [r7, #32]

						// calculate tan(phi) correcting sign to ensure the smaller solution is used
						tanphi = 1.0F / (fabs(cot2phi) + sqrtf(1.0F + cot2phi * cot2phi));
 8006592:	edd7 7a08 	vldr	s15, [r7, #32]
 8006596:	eef0 7ae7 	vabs.f32	s15, s15
 800659a:	ee17 0a90 	vmov	r0, s15
 800659e:	f7f9 ffab 	bl	80004f8 <__aeabi_f2d>
 80065a2:	4604      	mov	r4, r0
 80065a4:	460d      	mov	r5, r1
 80065a6:	edd7 7a08 	vldr	s15, [r7, #32]
 80065aa:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80065ae:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80065b2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80065b6:	eeb0 0a67 	vmov.f32	s0, s15
 80065ba:	f00b f8e3 	bl	8011784 <sqrtf>
 80065be:	ee10 3a10 	vmov	r3, s0
 80065c2:	4618      	mov	r0, r3
 80065c4:	f7f9 ff98 	bl	80004f8 <__aeabi_f2d>
 80065c8:	4602      	mov	r2, r0
 80065ca:	460b      	mov	r3, r1
 80065cc:	4620      	mov	r0, r4
 80065ce:	4629      	mov	r1, r5
 80065d0:	f7f9 fe34 	bl	800023c <__adddf3>
 80065d4:	4602      	mov	r2, r0
 80065d6:	460b      	mov	r3, r1
 80065d8:	f04f 0000 	mov.w	r0, #0
 80065dc:	49d1      	ldr	r1, [pc, #836]	@ (8006924 <eigencompute+0x574>)
 80065de:	f7fa f90d 	bl	80007fc <__aeabi_ddiv>
 80065e2:	4602      	mov	r2, r0
 80065e4:	460b      	mov	r3, r1
 80065e6:	4610      	mov	r0, r2
 80065e8:	4619      	mov	r1, r3
 80065ea:	f7fa fa8d 	bl	8000b08 <__aeabi_d2f>
 80065ee:	4603      	mov	r3, r0
 80065f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
						if (cot2phi < 0.0F) {
 80065f2:	edd7 7a08 	vldr	s15, [r7, #32]
 80065f6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80065fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80065fe:	d505      	bpl.n	800660c <eigencompute+0x25c>
							tanphi = -tanphi;
 8006600:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8006604:	eef1 7a67 	vneg.f32	s15, s15
 8006608:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
						}

						// calculate the sine and cosine of the Jacobi rotation angle phi
						cosphi = 1.0F / sqrtf(1.0F + tanphi * tanphi);
 800660c:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8006610:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8006614:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006618:	ee77 7a87 	vadd.f32	s15, s15, s14
 800661c:	eeb0 0a67 	vmov.f32	s0, s15
 8006620:	f00b f8b0 	bl	8011784 <sqrtf>
 8006624:	eeb0 7a40 	vmov.f32	s14, s0
 8006628:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800662c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006630:	edc7 7a07 	vstr	s15, [r7, #28]
						sinphi = tanphi * cosphi;
 8006634:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8006638:	edd7 7a07 	vldr	s15, [r7, #28]
 800663c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006640:	edc7 7a06 	vstr	s15, [r7, #24]

						// calculate tan(phi/2)
						tanhalfphi = sinphi / (1.0F + cosphi);
 8006644:	edd7 7a07 	vldr	s15, [r7, #28]
 8006648:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800664c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006650:	edd7 6a06 	vldr	s13, [r7, #24]
 8006654:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006658:	edc7 7a05 	vstr	s15, [r7, #20]

						// set tmp = tan(phi) times current matrix element used in update of leading diagonal elements
						ftmp = tanphi * A[ir][ic];
 800665c:	f997 2027 	ldrsb.w	r2, [r7, #39]	@ 0x27
 8006660:	4613      	mov	r3, r2
 8006662:	009b      	lsls	r3, r3, #2
 8006664:	4413      	add	r3, r2
 8006666:	00db      	lsls	r3, r3, #3
 8006668:	461a      	mov	r2, r3
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	441a      	add	r2, r3
 800666e:	f997 3026 	ldrsb.w	r3, [r7, #38]	@ 0x26
 8006672:	009b      	lsls	r3, r3, #2
 8006674:	4413      	add	r3, r2
 8006676:	edd3 7a00 	vldr	s15, [r3]
 800667a:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 800667e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006682:	edc7 7a04 	vstr	s15, [r7, #16]

						// apply the jacobi rotation to diagonal elements [ir][ir] and [ic][ic] stored in the eigenvalue array
						// eigval[ir] = eigval[ir] - tan(phi) *  A[ir][ic]
						eigval[ir] -= ftmp;
 8006686:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800668a:	009b      	lsls	r3, r3, #2
 800668c:	68ba      	ldr	r2, [r7, #8]
 800668e:	4413      	add	r3, r2
 8006690:	ed93 7a00 	vldr	s14, [r3]
 8006694:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006698:	009b      	lsls	r3, r3, #2
 800669a:	68ba      	ldr	r2, [r7, #8]
 800669c:	4413      	add	r3, r2
 800669e:	edd7 7a04 	vldr	s15, [r7, #16]
 80066a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80066a6:	edc3 7a00 	vstr	s15, [r3]
						// eigval[ic] = eigval[ic] + tan(phi) * A[ir][ic]
						eigval[ic] += ftmp;
 80066aa:	f997 3026 	ldrsb.w	r3, [r7, #38]	@ 0x26
 80066ae:	009b      	lsls	r3, r3, #2
 80066b0:	68ba      	ldr	r2, [r7, #8]
 80066b2:	4413      	add	r3, r2
 80066b4:	ed93 7a00 	vldr	s14, [r3]
 80066b8:	f997 3026 	ldrsb.w	r3, [r7, #38]	@ 0x26
 80066bc:	009b      	lsls	r3, r3, #2
 80066be:	68ba      	ldr	r2, [r7, #8]
 80066c0:	4413      	add	r3, r2
 80066c2:	edd7 7a04 	vldr	s15, [r7, #16]
 80066c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80066ca:	edc3 7a00 	vstr	s15, [r3]

						// by definition, applying the jacobi rotation on element ir, ic results in 0.0
						A[ir][ic] = 0.0F;
 80066ce:	f997 2027 	ldrsb.w	r2, [r7, #39]	@ 0x27
 80066d2:	4613      	mov	r3, r2
 80066d4:	009b      	lsls	r3, r3, #2
 80066d6:	4413      	add	r3, r2
 80066d8:	00db      	lsls	r3, r3, #3
 80066da:	461a      	mov	r2, r3
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	441a      	add	r2, r3
 80066e0:	f997 3026 	ldrsb.w	r3, [r7, #38]	@ 0x26
 80066e4:	009b      	lsls	r3, r3, #2
 80066e6:	4413      	add	r3, r2
 80066e8:	f04f 0200 	mov.w	r2, #0
 80066ec:	601a      	str	r2, [r3, #0]

						// apply the jacobi rotation to all elements of the eigenvector matrix
						for (j = 0; j < n; j++) {
 80066ee:	2300      	movs	r3, #0
 80066f0:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 80066f4:	e07e      	b.n	80067f4 <eigencompute+0x444>
							// store eigvec[j][ir]
							ftmp = eigvec[j][ir];
 80066f6:	f997 2025 	ldrsb.w	r2, [r7, #37]	@ 0x25
 80066fa:	4613      	mov	r3, r2
 80066fc:	009b      	lsls	r3, r3, #2
 80066fe:	4413      	add	r3, r2
 8006700:	00db      	lsls	r3, r3, #3
 8006702:	461a      	mov	r2, r3
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	441a      	add	r2, r3
 8006708:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800670c:	009b      	lsls	r3, r3, #2
 800670e:	4413      	add	r3, r2
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	613b      	str	r3, [r7, #16]
							// eigvec[j][ir] = eigvec[j][ir] - sin(phi) * (eigvec[j][ic] + tan(phi/2) * eigvec[j][ir])
							eigvec[j][ir] = ftmp - sinphi * (eigvec[j][ic] + tanhalfphi * ftmp);
 8006714:	f997 2025 	ldrsb.w	r2, [r7, #37]	@ 0x25
 8006718:	4613      	mov	r3, r2
 800671a:	009b      	lsls	r3, r3, #2
 800671c:	4413      	add	r3, r2
 800671e:	00db      	lsls	r3, r3, #3
 8006720:	461a      	mov	r2, r3
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	441a      	add	r2, r3
 8006726:	f997 3026 	ldrsb.w	r3, [r7, #38]	@ 0x26
 800672a:	009b      	lsls	r3, r3, #2
 800672c:	4413      	add	r3, r2
 800672e:	ed93 7a00 	vldr	s14, [r3]
 8006732:	edd7 6a05 	vldr	s13, [r7, #20]
 8006736:	edd7 7a04 	vldr	s15, [r7, #16]
 800673a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800673e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006742:	edd7 7a06 	vldr	s15, [r7, #24]
 8006746:	ee67 7a27 	vmul.f32	s15, s14, s15
 800674a:	f997 2025 	ldrsb.w	r2, [r7, #37]	@ 0x25
 800674e:	4613      	mov	r3, r2
 8006750:	009b      	lsls	r3, r3, #2
 8006752:	4413      	add	r3, r2
 8006754:	00db      	lsls	r3, r3, #3
 8006756:	461a      	mov	r2, r3
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	441a      	add	r2, r3
 800675c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006760:	ed97 7a04 	vldr	s14, [r7, #16]
 8006764:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006768:	009b      	lsls	r3, r3, #2
 800676a:	4413      	add	r3, r2
 800676c:	edc3 7a00 	vstr	s15, [r3]
							// eigvec[j][ic] = eigvec[j][ic] + sin(phi) * (eigvec[j][ir] - tan(phi/2) * eigvec[j][ic])
							eigvec[j][ic] = eigvec[j][ic] + sinphi * (ftmp - tanhalfphi * eigvec[j][ic]);
 8006770:	f997 2025 	ldrsb.w	r2, [r7, #37]	@ 0x25
 8006774:	4613      	mov	r3, r2
 8006776:	009b      	lsls	r3, r3, #2
 8006778:	4413      	add	r3, r2
 800677a:	00db      	lsls	r3, r3, #3
 800677c:	461a      	mov	r2, r3
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	441a      	add	r2, r3
 8006782:	f997 3026 	ldrsb.w	r3, [r7, #38]	@ 0x26
 8006786:	009b      	lsls	r3, r3, #2
 8006788:	4413      	add	r3, r2
 800678a:	ed93 7a00 	vldr	s14, [r3]
 800678e:	f997 2025 	ldrsb.w	r2, [r7, #37]	@ 0x25
 8006792:	4613      	mov	r3, r2
 8006794:	009b      	lsls	r3, r3, #2
 8006796:	4413      	add	r3, r2
 8006798:	00db      	lsls	r3, r3, #3
 800679a:	461a      	mov	r2, r3
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	441a      	add	r2, r3
 80067a0:	f997 3026 	ldrsb.w	r3, [r7, #38]	@ 0x26
 80067a4:	009b      	lsls	r3, r3, #2
 80067a6:	4413      	add	r3, r2
 80067a8:	edd3 6a00 	vldr	s13, [r3]
 80067ac:	edd7 7a05 	vldr	s15, [r7, #20]
 80067b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80067b4:	edd7 6a04 	vldr	s13, [r7, #16]
 80067b8:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80067bc:	edd7 7a06 	vldr	s15, [r7, #24]
 80067c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80067c4:	f997 2025 	ldrsb.w	r2, [r7, #37]	@ 0x25
 80067c8:	4613      	mov	r3, r2
 80067ca:	009b      	lsls	r3, r3, #2
 80067cc:	4413      	add	r3, r2
 80067ce:	00db      	lsls	r3, r3, #3
 80067d0:	461a      	mov	r2, r3
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	441a      	add	r2, r3
 80067d6:	f997 3026 	ldrsb.w	r3, [r7, #38]	@ 0x26
 80067da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80067de:	009b      	lsls	r3, r3, #2
 80067e0:	4413      	add	r3, r2
 80067e2:	edc3 7a00 	vstr	s15, [r3]
						for (j = 0; j < n; j++) {
 80067e6:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 80067ea:	b2db      	uxtb	r3, r3
 80067ec:	3301      	adds	r3, #1
 80067ee:	b2db      	uxtb	r3, r3
 80067f0:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 80067f4:	f997 2025 	ldrsb.w	r2, [r7, #37]	@ 0x25
 80067f8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80067fc:	429a      	cmp	r2, r3
 80067fe:	f6ff af7a 	blt.w	80066f6 <eigencompute+0x346>
						}

						// apply the jacobi rotation only to those elements of matrix m that can change
						for (j = 0; j <= ir - 1; j++) {
 8006802:	2300      	movs	r3, #0
 8006804:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8006808:	e07e      	b.n	8006908 <eigencompute+0x558>
							// store A[j][ir]
							ftmp = A[j][ir];
 800680a:	f997 2025 	ldrsb.w	r2, [r7, #37]	@ 0x25
 800680e:	4613      	mov	r3, r2
 8006810:	009b      	lsls	r3, r3, #2
 8006812:	4413      	add	r3, r2
 8006814:	00db      	lsls	r3, r3, #3
 8006816:	461a      	mov	r2, r3
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	441a      	add	r2, r3
 800681c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006820:	009b      	lsls	r3, r3, #2
 8006822:	4413      	add	r3, r2
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	613b      	str	r3, [r7, #16]
							// A[j][ir] = A[j][ir] - sin(phi) * (A[j][ic] + tan(phi/2) * A[j][ir])
							A[j][ir] = ftmp - sinphi * (A[j][ic] + tanhalfphi * ftmp);
 8006828:	f997 2025 	ldrsb.w	r2, [r7, #37]	@ 0x25
 800682c:	4613      	mov	r3, r2
 800682e:	009b      	lsls	r3, r3, #2
 8006830:	4413      	add	r3, r2
 8006832:	00db      	lsls	r3, r3, #3
 8006834:	461a      	mov	r2, r3
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	441a      	add	r2, r3
 800683a:	f997 3026 	ldrsb.w	r3, [r7, #38]	@ 0x26
 800683e:	009b      	lsls	r3, r3, #2
 8006840:	4413      	add	r3, r2
 8006842:	ed93 7a00 	vldr	s14, [r3]
 8006846:	edd7 6a05 	vldr	s13, [r7, #20]
 800684a:	edd7 7a04 	vldr	s15, [r7, #16]
 800684e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006852:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006856:	edd7 7a06 	vldr	s15, [r7, #24]
 800685a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800685e:	f997 2025 	ldrsb.w	r2, [r7, #37]	@ 0x25
 8006862:	4613      	mov	r3, r2
 8006864:	009b      	lsls	r3, r3, #2
 8006866:	4413      	add	r3, r2
 8006868:	00db      	lsls	r3, r3, #3
 800686a:	461a      	mov	r2, r3
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	441a      	add	r2, r3
 8006870:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006874:	ed97 7a04 	vldr	s14, [r7, #16]
 8006878:	ee77 7a67 	vsub.f32	s15, s14, s15
 800687c:	009b      	lsls	r3, r3, #2
 800687e:	4413      	add	r3, r2
 8006880:	edc3 7a00 	vstr	s15, [r3]
							// A[j][ic] = A[j][ic] + sin(phi) * (A[j][ir] - tan(phi/2) * A[j][ic])
							A[j][ic] = A[j][ic] + sinphi * (ftmp - tanhalfphi * A[j][ic]);
 8006884:	f997 2025 	ldrsb.w	r2, [r7, #37]	@ 0x25
 8006888:	4613      	mov	r3, r2
 800688a:	009b      	lsls	r3, r3, #2
 800688c:	4413      	add	r3, r2
 800688e:	00db      	lsls	r3, r3, #3
 8006890:	461a      	mov	r2, r3
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	441a      	add	r2, r3
 8006896:	f997 3026 	ldrsb.w	r3, [r7, #38]	@ 0x26
 800689a:	009b      	lsls	r3, r3, #2
 800689c:	4413      	add	r3, r2
 800689e:	ed93 7a00 	vldr	s14, [r3]
 80068a2:	f997 2025 	ldrsb.w	r2, [r7, #37]	@ 0x25
 80068a6:	4613      	mov	r3, r2
 80068a8:	009b      	lsls	r3, r3, #2
 80068aa:	4413      	add	r3, r2
 80068ac:	00db      	lsls	r3, r3, #3
 80068ae:	461a      	mov	r2, r3
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	441a      	add	r2, r3
 80068b4:	f997 3026 	ldrsb.w	r3, [r7, #38]	@ 0x26
 80068b8:	009b      	lsls	r3, r3, #2
 80068ba:	4413      	add	r3, r2
 80068bc:	edd3 6a00 	vldr	s13, [r3]
 80068c0:	edd7 7a05 	vldr	s15, [r7, #20]
 80068c4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80068c8:	edd7 6a04 	vldr	s13, [r7, #16]
 80068cc:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80068d0:	edd7 7a06 	vldr	s15, [r7, #24]
 80068d4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80068d8:	f997 2025 	ldrsb.w	r2, [r7, #37]	@ 0x25
 80068dc:	4613      	mov	r3, r2
 80068de:	009b      	lsls	r3, r3, #2
 80068e0:	4413      	add	r3, r2
 80068e2:	00db      	lsls	r3, r3, #3
 80068e4:	461a      	mov	r2, r3
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	441a      	add	r2, r3
 80068ea:	f997 3026 	ldrsb.w	r3, [r7, #38]	@ 0x26
 80068ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80068f2:	009b      	lsls	r3, r3, #2
 80068f4:	4413      	add	r3, r2
 80068f6:	edc3 7a00 	vstr	s15, [r3]
						for (j = 0; j <= ir - 1; j++) {
 80068fa:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 80068fe:	b2db      	uxtb	r3, r3
 8006900:	3301      	adds	r3, #1
 8006902:	b2db      	uxtb	r3, r3
 8006904:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8006908:	f997 2027 	ldrsb.w	r2, [r7, #39]	@ 0x27
 800690c:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8006910:	429a      	cmp	r2, r3
 8006912:	f73f af7a 	bgt.w	800680a <eigencompute+0x45a>
						}
						for (j = ir + 1; j <= ic - 1; j++) {
 8006916:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800691a:	3301      	adds	r3, #1
 800691c:	b2db      	uxtb	r3, r3
 800691e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8006922:	e080      	b.n	8006a26 <eigencompute+0x676>
 8006924:	3ff00000 	.word	0x3ff00000
							// store A[ir][j]
							ftmp = A[ir][j];
 8006928:	f997 2027 	ldrsb.w	r2, [r7, #39]	@ 0x27
 800692c:	4613      	mov	r3, r2
 800692e:	009b      	lsls	r3, r3, #2
 8006930:	4413      	add	r3, r2
 8006932:	00db      	lsls	r3, r3, #3
 8006934:	461a      	mov	r2, r3
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	441a      	add	r2, r3
 800693a:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 800693e:	009b      	lsls	r3, r3, #2
 8006940:	4413      	add	r3, r2
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	613b      	str	r3, [r7, #16]
							// A[ir][j] = A[ir][j] - sin(phi) * (A[j][ic] + tan(phi/2) * A[ir][j])
							A[ir][j] = ftmp - sinphi * (A[j][ic] + tanhalfphi * ftmp);
 8006946:	f997 2025 	ldrsb.w	r2, [r7, #37]	@ 0x25
 800694a:	4613      	mov	r3, r2
 800694c:	009b      	lsls	r3, r3, #2
 800694e:	4413      	add	r3, r2
 8006950:	00db      	lsls	r3, r3, #3
 8006952:	461a      	mov	r2, r3
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	441a      	add	r2, r3
 8006958:	f997 3026 	ldrsb.w	r3, [r7, #38]	@ 0x26
 800695c:	009b      	lsls	r3, r3, #2
 800695e:	4413      	add	r3, r2
 8006960:	ed93 7a00 	vldr	s14, [r3]
 8006964:	edd7 6a05 	vldr	s13, [r7, #20]
 8006968:	edd7 7a04 	vldr	s15, [r7, #16]
 800696c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006970:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006974:	edd7 7a06 	vldr	s15, [r7, #24]
 8006978:	ee67 7a27 	vmul.f32	s15, s14, s15
 800697c:	f997 2027 	ldrsb.w	r2, [r7, #39]	@ 0x27
 8006980:	4613      	mov	r3, r2
 8006982:	009b      	lsls	r3, r3, #2
 8006984:	4413      	add	r3, r2
 8006986:	00db      	lsls	r3, r3, #3
 8006988:	461a      	mov	r2, r3
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	441a      	add	r2, r3
 800698e:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8006992:	ed97 7a04 	vldr	s14, [r7, #16]
 8006996:	ee77 7a67 	vsub.f32	s15, s14, s15
 800699a:	009b      	lsls	r3, r3, #2
 800699c:	4413      	add	r3, r2
 800699e:	edc3 7a00 	vstr	s15, [r3]
							// A[j][ic] = A[j][ic] + sin(phi) * (A[ir][j] - tan(phi/2) * A[j][ic])
							A[j][ic] = A[j][ic] + sinphi * (ftmp - tanhalfphi * A[j][ic]);
 80069a2:	f997 2025 	ldrsb.w	r2, [r7, #37]	@ 0x25
 80069a6:	4613      	mov	r3, r2
 80069a8:	009b      	lsls	r3, r3, #2
 80069aa:	4413      	add	r3, r2
 80069ac:	00db      	lsls	r3, r3, #3
 80069ae:	461a      	mov	r2, r3
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	441a      	add	r2, r3
 80069b4:	f997 3026 	ldrsb.w	r3, [r7, #38]	@ 0x26
 80069b8:	009b      	lsls	r3, r3, #2
 80069ba:	4413      	add	r3, r2
 80069bc:	ed93 7a00 	vldr	s14, [r3]
 80069c0:	f997 2025 	ldrsb.w	r2, [r7, #37]	@ 0x25
 80069c4:	4613      	mov	r3, r2
 80069c6:	009b      	lsls	r3, r3, #2
 80069c8:	4413      	add	r3, r2
 80069ca:	00db      	lsls	r3, r3, #3
 80069cc:	461a      	mov	r2, r3
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	441a      	add	r2, r3
 80069d2:	f997 3026 	ldrsb.w	r3, [r7, #38]	@ 0x26
 80069d6:	009b      	lsls	r3, r3, #2
 80069d8:	4413      	add	r3, r2
 80069da:	edd3 6a00 	vldr	s13, [r3]
 80069de:	edd7 7a05 	vldr	s15, [r7, #20]
 80069e2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80069e6:	edd7 6a04 	vldr	s13, [r7, #16]
 80069ea:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80069ee:	edd7 7a06 	vldr	s15, [r7, #24]
 80069f2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80069f6:	f997 2025 	ldrsb.w	r2, [r7, #37]	@ 0x25
 80069fa:	4613      	mov	r3, r2
 80069fc:	009b      	lsls	r3, r3, #2
 80069fe:	4413      	add	r3, r2
 8006a00:	00db      	lsls	r3, r3, #3
 8006a02:	461a      	mov	r2, r3
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	441a      	add	r2, r3
 8006a08:	f997 3026 	ldrsb.w	r3, [r7, #38]	@ 0x26
 8006a0c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006a10:	009b      	lsls	r3, r3, #2
 8006a12:	4413      	add	r3, r2
 8006a14:	edc3 7a00 	vstr	s15, [r3]
						for (j = ir + 1; j <= ic - 1; j++) {
 8006a18:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8006a1c:	b2db      	uxtb	r3, r3
 8006a1e:	3301      	adds	r3, #1
 8006a20:	b2db      	uxtb	r3, r3
 8006a22:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8006a26:	f997 2026 	ldrsb.w	r2, [r7, #38]	@ 0x26
 8006a2a:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8006a2e:	429a      	cmp	r2, r3
 8006a30:	f73f af7a 	bgt.w	8006928 <eigencompute+0x578>
						}
						for (j = ic + 1; j < n; j++) {
 8006a34:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006a38:	3301      	adds	r3, #1
 8006a3a:	b2db      	uxtb	r3, r3
 8006a3c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8006a40:	e07e      	b.n	8006b40 <eigencompute+0x790>
							// store A[ir][j]
							ftmp = A[ir][j];
 8006a42:	f997 2027 	ldrsb.w	r2, [r7, #39]	@ 0x27
 8006a46:	4613      	mov	r3, r2
 8006a48:	009b      	lsls	r3, r3, #2
 8006a4a:	4413      	add	r3, r2
 8006a4c:	00db      	lsls	r3, r3, #3
 8006a4e:	461a      	mov	r2, r3
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	441a      	add	r2, r3
 8006a54:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8006a58:	009b      	lsls	r3, r3, #2
 8006a5a:	4413      	add	r3, r2
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	613b      	str	r3, [r7, #16]
							// A[ir][j] = A[ir][j] - sin(phi) * (A[ic][j] + tan(phi/2) * A[ir][j])
							A[ir][j] = ftmp - sinphi * (A[ic][j] + tanhalfphi * ftmp);
 8006a60:	f997 2026 	ldrsb.w	r2, [r7, #38]	@ 0x26
 8006a64:	4613      	mov	r3, r2
 8006a66:	009b      	lsls	r3, r3, #2
 8006a68:	4413      	add	r3, r2
 8006a6a:	00db      	lsls	r3, r3, #3
 8006a6c:	461a      	mov	r2, r3
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	441a      	add	r2, r3
 8006a72:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8006a76:	009b      	lsls	r3, r3, #2
 8006a78:	4413      	add	r3, r2
 8006a7a:	ed93 7a00 	vldr	s14, [r3]
 8006a7e:	edd7 6a05 	vldr	s13, [r7, #20]
 8006a82:	edd7 7a04 	vldr	s15, [r7, #16]
 8006a86:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006a8a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006a8e:	edd7 7a06 	vldr	s15, [r7, #24]
 8006a92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a96:	f997 2027 	ldrsb.w	r2, [r7, #39]	@ 0x27
 8006a9a:	4613      	mov	r3, r2
 8006a9c:	009b      	lsls	r3, r3, #2
 8006a9e:	4413      	add	r3, r2
 8006aa0:	00db      	lsls	r3, r3, #3
 8006aa2:	461a      	mov	r2, r3
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	441a      	add	r2, r3
 8006aa8:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8006aac:	ed97 7a04 	vldr	s14, [r7, #16]
 8006ab0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006ab4:	009b      	lsls	r3, r3, #2
 8006ab6:	4413      	add	r3, r2
 8006ab8:	edc3 7a00 	vstr	s15, [r3]
							// A[ic][j] = A[ic][j] + sin(phi) * (A[ir][j] - tan(phi/2) * A[ic][j])
							A[ic][j] = A[ic][j] + sinphi * (ftmp - tanhalfphi * A[ic][j]);
 8006abc:	f997 2026 	ldrsb.w	r2, [r7, #38]	@ 0x26
 8006ac0:	4613      	mov	r3, r2
 8006ac2:	009b      	lsls	r3, r3, #2
 8006ac4:	4413      	add	r3, r2
 8006ac6:	00db      	lsls	r3, r3, #3
 8006ac8:	461a      	mov	r2, r3
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	441a      	add	r2, r3
 8006ace:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8006ad2:	009b      	lsls	r3, r3, #2
 8006ad4:	4413      	add	r3, r2
 8006ad6:	ed93 7a00 	vldr	s14, [r3]
 8006ada:	f997 2026 	ldrsb.w	r2, [r7, #38]	@ 0x26
 8006ade:	4613      	mov	r3, r2
 8006ae0:	009b      	lsls	r3, r3, #2
 8006ae2:	4413      	add	r3, r2
 8006ae4:	00db      	lsls	r3, r3, #3
 8006ae6:	461a      	mov	r2, r3
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	441a      	add	r2, r3
 8006aec:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8006af0:	009b      	lsls	r3, r3, #2
 8006af2:	4413      	add	r3, r2
 8006af4:	edd3 6a00 	vldr	s13, [r3]
 8006af8:	edd7 7a05 	vldr	s15, [r7, #20]
 8006afc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006b00:	edd7 6a04 	vldr	s13, [r7, #16]
 8006b04:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8006b08:	edd7 7a06 	vldr	s15, [r7, #24]
 8006b0c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006b10:	f997 2026 	ldrsb.w	r2, [r7, #38]	@ 0x26
 8006b14:	4613      	mov	r3, r2
 8006b16:	009b      	lsls	r3, r3, #2
 8006b18:	4413      	add	r3, r2
 8006b1a:	00db      	lsls	r3, r3, #3
 8006b1c:	461a      	mov	r2, r3
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	441a      	add	r2, r3
 8006b22:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8006b26:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006b2a:	009b      	lsls	r3, r3, #2
 8006b2c:	4413      	add	r3, r2
 8006b2e:	edc3 7a00 	vstr	s15, [r3]
						for (j = ic + 1; j < n; j++) {
 8006b32:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8006b36:	b2db      	uxtb	r3, r3
 8006b38:	3301      	adds	r3, #1
 8006b3a:	b2db      	uxtb	r3, r3
 8006b3c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8006b40:	f997 2025 	ldrsb.w	r2, [r7, #37]	@ 0x25
 8006b44:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006b48:	429a      	cmp	r2, r3
 8006b4a:	f6ff af7a 	blt.w	8006a42 <eigencompute+0x692>
				for (ic = ir + 1; ic < n; ic++) {
 8006b4e:	f997 3026 	ldrsb.w	r3, [r7, #38]	@ 0x26
 8006b52:	b2db      	uxtb	r3, r3
 8006b54:	3301      	adds	r3, #1
 8006b56:	b2db      	uxtb	r3, r3
 8006b58:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8006b5c:	f997 2026 	ldrsb.w	r2, [r7, #38]	@ 0x26
 8006b60:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006b64:	429a      	cmp	r2, r3
 8006b66:	f6ff acd6 	blt.w	8006516 <eigencompute+0x166>
			for (ir = 0; ir < n - 1; ir++) {
 8006b6a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006b6e:	b2db      	uxtb	r3, r3
 8006b70:	3301      	adds	r3, #1
 8006b72:	b2db      	uxtb	r3, r3
 8006b74:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8006b78:	f997 2027 	ldrsb.w	r2, [r7, #39]	@ 0x27
 8006b7c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006b80:	3b01      	subs	r3, #1
 8006b82:	429a      	cmp	r2, r3
 8006b84:	f6ff acc0 	blt.w	8006508 <eigencompute+0x158>
						}
					}   // end of test for matrix element already zero
				}   // end of loop over columns
			}   // end of loop over rows
		}  // end of test for non-zero residue
	} while ((residue > 0.0F) && (ctr++ < NITERATIONS)); // end of main loop
 8006b88:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8006b8c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006b90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b94:	dc00      	bgt.n	8006b98 <eigencompute+0x7e8>
}
 8006b96:	e009      	b.n	8006bac <eigencompute+0x7fc>
	} while ((residue > 0.0F) && (ctr++ < NITERATIONS)); // end of main loop
 8006b98:	f997 3024 	ldrsb.w	r3, [r7, #36]	@ 0x24
 8006b9c:	b2da      	uxtb	r2, r3
 8006b9e:	3201      	adds	r2, #1
 8006ba0:	b2d2      	uxtb	r2, r2
 8006ba2:	f887 2024 	strb.w	r2, [r7, #36]	@ 0x24
 8006ba6:	2b0e      	cmp	r3, #14
 8006ba8:	f77f ac62 	ble.w	8006470 <eigencompute+0xc0>
}
 8006bac:	bf00      	nop
 8006bae:	3730      	adds	r7, #48	@ 0x30
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	bdb0      	pop	{r4, r5, r7, pc}

08006bb4 <fmatrixAeqInvA>:

// function uses Gauss-Jordan elimination to compute the inverse of matrix A in situ
// on exit, A is replaced with its inverse
void fmatrixAeqInvA(float *A[], int8_t iColInd[], int8_t iRowInd[], int8_t iPivot[], int8_t isize)
{
 8006bb4:	b580      	push	{r7, lr}
 8006bb6:	b08a      	sub	sp, #40	@ 0x28
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	60f8      	str	r0, [r7, #12]
 8006bbc:	60b9      	str	r1, [r7, #8]
 8006bbe:	607a      	str	r2, [r7, #4]
 8006bc0:	603b      	str	r3, [r7, #0]
	float ftmp;						// temporary variable used in swaps
	int8_t i, j, k, l, m;			// index counters
	int8_t iPivotRow, iPivotCol;	// row and column of pivot element

	// to avoid compiler warnings
	iPivotRow = iPivotCol = 0;
 8006bc2:	2300      	movs	r3, #0
 8006bc4:	777b      	strb	r3, [r7, #29]
 8006bc6:	7f7b      	ldrb	r3, [r7, #29]
 8006bc8:	77bb      	strb	r3, [r7, #30]

	// initialize the pivot array to 0
	for (j = 0; j < isize; j++) {
 8006bca:	2300      	movs	r3, #0
 8006bcc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006bd0:	e00c      	b.n	8006bec <fmatrixAeqInvA+0x38>
		iPivot[j] = 0;
 8006bd2:	f997 3022 	ldrsb.w	r3, [r7, #34]	@ 0x22
 8006bd6:	683a      	ldr	r2, [r7, #0]
 8006bd8:	4413      	add	r3, r2
 8006bda:	2200      	movs	r2, #0
 8006bdc:	701a      	strb	r2, [r3, #0]
	for (j = 0; j < isize; j++) {
 8006bde:	f997 3022 	ldrsb.w	r3, [r7, #34]	@ 0x22
 8006be2:	b2db      	uxtb	r3, r3
 8006be4:	3301      	adds	r3, #1
 8006be6:	b2db      	uxtb	r3, r3
 8006be8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006bec:	f997 2022 	ldrsb.w	r2, [r7, #34]	@ 0x22
 8006bf0:	f997 3030 	ldrsb.w	r3, [r7, #48]	@ 0x30
 8006bf4:	429a      	cmp	r2, r3
 8006bf6:	dbec      	blt.n	8006bd2 <fmatrixAeqInvA+0x1e>
	}

	// main loop i over the dimensions of the square matrix A
	for (i = 0; i < isize; i++) {
 8006bf8:	2300      	movs	r3, #0
 8006bfa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006bfe:	e1a1      	b.n	8006f44 <fmatrixAeqInvA+0x390>
		// zero the largest element found for pivoting
		largest = 0.0F;
 8006c00:	f04f 0300 	mov.w	r3, #0
 8006c04:	627b      	str	r3, [r7, #36]	@ 0x24
		// loop over candidate rows j
		for (j = 0; j < isize; j++) {
 8006c06:	2300      	movs	r3, #0
 8006c08:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006c0c:	e063      	b.n	8006cd6 <fmatrixAeqInvA+0x122>
			// check if row j has been previously pivoted
			if (iPivot[j] != 1) {
 8006c0e:	f997 3022 	ldrsb.w	r3, [r7, #34]	@ 0x22
 8006c12:	683a      	ldr	r2, [r7, #0]
 8006c14:	4413      	add	r3, r2
 8006c16:	f993 3000 	ldrsb.w	r3, [r3]
 8006c1a:	2b01      	cmp	r3, #1
 8006c1c:	d054      	beq.n	8006cc8 <fmatrixAeqInvA+0x114>
				// loop over candidate columns k
				for (k = 0; k < isize; k++) {
 8006c1e:	2300      	movs	r3, #0
 8006c20:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
 8006c24:	e04a      	b.n	8006cbc <fmatrixAeqInvA+0x108>
					// check if column k has previously been pivoted
					if (iPivot[k] == 0) {
 8006c26:	f997 3021 	ldrsb.w	r3, [r7, #33]	@ 0x21
 8006c2a:	683a      	ldr	r2, [r7, #0]
 8006c2c:	4413      	add	r3, r2
 8006c2e:	f993 3000 	ldrsb.w	r3, [r3]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d12b      	bne.n	8006c8e <fmatrixAeqInvA+0xda>
						// check if the pivot element is the largest found so far
						if (fabs(A[j][k]) >= largest) {
 8006c36:	f997 3022 	ldrsb.w	r3, [r7, #34]	@ 0x22
 8006c3a:	009b      	lsls	r3, r3, #2
 8006c3c:	68fa      	ldr	r2, [r7, #12]
 8006c3e:	4413      	add	r3, r2
 8006c40:	681a      	ldr	r2, [r3, #0]
 8006c42:	f997 3021 	ldrsb.w	r3, [r7, #33]	@ 0x21
 8006c46:	009b      	lsls	r3, r3, #2
 8006c48:	4413      	add	r3, r2
 8006c4a:	edd3 7a00 	vldr	s15, [r3]
 8006c4e:	eef0 7ae7 	vabs.f32	s15, s15
 8006c52:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8006c56:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006c5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c5e:	d826      	bhi.n	8006cae <fmatrixAeqInvA+0xfa>
							// and store this location as the current best candidate for pivoting
							iPivotRow = j;
 8006c60:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8006c64:	77bb      	strb	r3, [r7, #30]
							iPivotCol = k;
 8006c66:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8006c6a:	777b      	strb	r3, [r7, #29]
							largest = (float) fabs(A[iPivotRow][iPivotCol]);
 8006c6c:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8006c70:	009b      	lsls	r3, r3, #2
 8006c72:	68fa      	ldr	r2, [r7, #12]
 8006c74:	4413      	add	r3, r2
 8006c76:	681a      	ldr	r2, [r3, #0]
 8006c78:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8006c7c:	009b      	lsls	r3, r3, #2
 8006c7e:	4413      	add	r3, r2
 8006c80:	edd3 7a00 	vldr	s15, [r3]
 8006c84:	eef0 7ae7 	vabs.f32	s15, s15
 8006c88:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
 8006c8c:	e00f      	b.n	8006cae <fmatrixAeqInvA+0xfa>
						}
					} else if (iPivot[k] > 1) {
 8006c8e:	f997 3021 	ldrsb.w	r3, [r7, #33]	@ 0x21
 8006c92:	683a      	ldr	r2, [r7, #0]
 8006c94:	4413      	add	r3, r2
 8006c96:	f993 3000 	ldrsb.w	r3, [r3]
 8006c9a:	2b01      	cmp	r3, #1
 8006c9c:	dd07      	ble.n	8006cae <fmatrixAeqInvA+0xfa>
						// zero determinant situation: exit with identity matrix
						fmatrixAeqI(A, isize);
 8006c9e:	f997 3030 	ldrsb.w	r3, [r7, #48]	@ 0x30
 8006ca2:	b21b      	sxth	r3, r3
 8006ca4:	4619      	mov	r1, r3
 8006ca6:	68f8      	ldr	r0, [r7, #12]
 8006ca8:	f7ff f939 	bl	8005f1e <fmatrixAeqI>
						return;
 8006cac:	e1b6      	b.n	800701c <fmatrixAeqInvA+0x468>
				for (k = 0; k < isize; k++) {
 8006cae:	f997 3021 	ldrsb.w	r3, [r7, #33]	@ 0x21
 8006cb2:	b2db      	uxtb	r3, r3
 8006cb4:	3301      	adds	r3, #1
 8006cb6:	b2db      	uxtb	r3, r3
 8006cb8:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
 8006cbc:	f997 2021 	ldrsb.w	r2, [r7, #33]	@ 0x21
 8006cc0:	f997 3030 	ldrsb.w	r3, [r7, #48]	@ 0x30
 8006cc4:	429a      	cmp	r2, r3
 8006cc6:	dbae      	blt.n	8006c26 <fmatrixAeqInvA+0x72>
		for (j = 0; j < isize; j++) {
 8006cc8:	f997 3022 	ldrsb.w	r3, [r7, #34]	@ 0x22
 8006ccc:	b2db      	uxtb	r3, r3
 8006cce:	3301      	adds	r3, #1
 8006cd0:	b2db      	uxtb	r3, r3
 8006cd2:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006cd6:	f997 2022 	ldrsb.w	r2, [r7, #34]	@ 0x22
 8006cda:	f997 3030 	ldrsb.w	r3, [r7, #48]	@ 0x30
 8006cde:	429a      	cmp	r2, r3
 8006ce0:	db95      	blt.n	8006c0e <fmatrixAeqInvA+0x5a>
					}
				}
			}
		}
		// increment the entry in iPivot to denote it has been selected for pivoting
		iPivot[iPivotCol]++;
 8006ce2:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8006ce6:	683a      	ldr	r2, [r7, #0]
 8006ce8:	4413      	add	r3, r2
 8006cea:	f993 2000 	ldrsb.w	r2, [r3]
 8006cee:	b2d2      	uxtb	r2, r2
 8006cf0:	3201      	adds	r2, #1
 8006cf2:	b2d2      	uxtb	r2, r2
 8006cf4:	b252      	sxtb	r2, r2
 8006cf6:	701a      	strb	r2, [r3, #0]

		// check the pivot rows iPivotRow and iPivotCol are not the same before swapping
		if (iPivotRow != iPivotCol) {
 8006cf8:	f997 201e 	ldrsb.w	r2, [r7, #30]
 8006cfc:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8006d00:	429a      	cmp	r2, r3
 8006d02:	d03e      	beq.n	8006d82 <fmatrixAeqInvA+0x1ce>
			// loop over columns l
			for (l = 0; l < isize; l++) {
 8006d04:	2300      	movs	r3, #0
 8006d06:	f887 3020 	strb.w	r3, [r7, #32]
 8006d0a:	e034      	b.n	8006d76 <fmatrixAeqInvA+0x1c2>
				// and swap all elements of rows iPivotRow and iPivotCol
				ftmp = A[iPivotRow][l];
 8006d0c:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8006d10:	009b      	lsls	r3, r3, #2
 8006d12:	68fa      	ldr	r2, [r7, #12]
 8006d14:	4413      	add	r3, r2
 8006d16:	681a      	ldr	r2, [r3, #0]
 8006d18:	f997 3020 	ldrsb.w	r3, [r7, #32]
 8006d1c:	009b      	lsls	r3, r3, #2
 8006d1e:	4413      	add	r3, r2
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	61bb      	str	r3, [r7, #24]
				A[iPivotRow][l] = A[iPivotCol][l];
 8006d24:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8006d28:	009b      	lsls	r3, r3, #2
 8006d2a:	68fa      	ldr	r2, [r7, #12]
 8006d2c:	4413      	add	r3, r2
 8006d2e:	681a      	ldr	r2, [r3, #0]
 8006d30:	f997 3020 	ldrsb.w	r3, [r7, #32]
 8006d34:	009b      	lsls	r3, r3, #2
 8006d36:	441a      	add	r2, r3
 8006d38:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8006d3c:	009b      	lsls	r3, r3, #2
 8006d3e:	68f9      	ldr	r1, [r7, #12]
 8006d40:	440b      	add	r3, r1
 8006d42:	6819      	ldr	r1, [r3, #0]
 8006d44:	f997 3020 	ldrsb.w	r3, [r7, #32]
 8006d48:	009b      	lsls	r3, r3, #2
 8006d4a:	440b      	add	r3, r1
 8006d4c:	6812      	ldr	r2, [r2, #0]
 8006d4e:	601a      	str	r2, [r3, #0]
				A[iPivotCol][l] = ftmp;
 8006d50:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8006d54:	009b      	lsls	r3, r3, #2
 8006d56:	68fa      	ldr	r2, [r7, #12]
 8006d58:	4413      	add	r3, r2
 8006d5a:	681a      	ldr	r2, [r3, #0]
 8006d5c:	f997 3020 	ldrsb.w	r3, [r7, #32]
 8006d60:	009b      	lsls	r3, r3, #2
 8006d62:	4413      	add	r3, r2
 8006d64:	69ba      	ldr	r2, [r7, #24]
 8006d66:	601a      	str	r2, [r3, #0]
			for (l = 0; l < isize; l++) {
 8006d68:	f997 3020 	ldrsb.w	r3, [r7, #32]
 8006d6c:	b2db      	uxtb	r3, r3
 8006d6e:	3301      	adds	r3, #1
 8006d70:	b2db      	uxtb	r3, r3
 8006d72:	f887 3020 	strb.w	r3, [r7, #32]
 8006d76:	f997 2020 	ldrsb.w	r2, [r7, #32]
 8006d7a:	f997 3030 	ldrsb.w	r3, [r7, #48]	@ 0x30
 8006d7e:	429a      	cmp	r2, r3
 8006d80:	dbc4      	blt.n	8006d0c <fmatrixAeqInvA+0x158>
			}
		}

		// record that on the i-th iteration rows iPivotRow and iPivotCol were swapped
		iRowInd[i] = iPivotRow;
 8006d82:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8006d86:	687a      	ldr	r2, [r7, #4]
 8006d88:	4413      	add	r3, r2
 8006d8a:	7fba      	ldrb	r2, [r7, #30]
 8006d8c:	701a      	strb	r2, [r3, #0]
		iColInd[i] = iPivotCol;
 8006d8e:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8006d92:	68ba      	ldr	r2, [r7, #8]
 8006d94:	4413      	add	r3, r2
 8006d96:	7f7a      	ldrb	r2, [r7, #29]
 8006d98:	701a      	strb	r2, [r3, #0]

		// check for zero on-diagonal element (singular matrix) and return with identity matrix if detected
		if (A[iPivotCol][iPivotCol] == 0.0F) {
 8006d9a:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8006d9e:	009b      	lsls	r3, r3, #2
 8006da0:	68fa      	ldr	r2, [r7, #12]
 8006da2:	4413      	add	r3, r2
 8006da4:	681a      	ldr	r2, [r3, #0]
 8006da6:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8006daa:	009b      	lsls	r3, r3, #2
 8006dac:	4413      	add	r3, r2
 8006dae:	edd3 7a00 	vldr	s15, [r3]
 8006db2:	eef5 7a40 	vcmp.f32	s15, #0.0
 8006db6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006dba:	d107      	bne.n	8006dcc <fmatrixAeqInvA+0x218>
			// zero determinant situation: exit with identity matrix
			fmatrixAeqI(A, isize);
 8006dbc:	f997 3030 	ldrsb.w	r3, [r7, #48]	@ 0x30
 8006dc0:	b21b      	sxth	r3, r3
 8006dc2:	4619      	mov	r1, r3
 8006dc4:	68f8      	ldr	r0, [r7, #12]
 8006dc6:	f7ff f8aa 	bl	8005f1e <fmatrixAeqI>
			return;
 8006dca:	e127      	b.n	800701c <fmatrixAeqInvA+0x468>
		}

		// calculate the reciprocal of the pivot element knowing it's non-zero
		recippiv = 1.0F / A[iPivotCol][iPivotCol];
 8006dcc:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8006dd0:	009b      	lsls	r3, r3, #2
 8006dd2:	68fa      	ldr	r2, [r7, #12]
 8006dd4:	4413      	add	r3, r2
 8006dd6:	681a      	ldr	r2, [r3, #0]
 8006dd8:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8006ddc:	009b      	lsls	r3, r3, #2
 8006dde:	4413      	add	r3, r2
 8006de0:	ed93 7a00 	vldr	s14, [r3]
 8006de4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006de8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006dec:	edc7 7a05 	vstr	s15, [r7, #20]
		// by definition, the diagonal element normalizes to 1
		A[iPivotCol][iPivotCol] = 1.0F;
 8006df0:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8006df4:	009b      	lsls	r3, r3, #2
 8006df6:	68fa      	ldr	r2, [r7, #12]
 8006df8:	4413      	add	r3, r2
 8006dfa:	681a      	ldr	r2, [r3, #0]
 8006dfc:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8006e00:	009b      	lsls	r3, r3, #2
 8006e02:	4413      	add	r3, r2
 8006e04:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8006e08:	601a      	str	r2, [r3, #0]
		// multiply all of row iPivotCol by the reciprocal of the pivot element including the diagonal element
		// the diagonal element A[iPivotCol][iPivotCol] now has value equal to the reciprocal of its previous value
		for (l = 0; l < isize; l++) {
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	f887 3020 	strb.w	r3, [r7, #32]
 8006e10:	e022      	b.n	8006e58 <fmatrixAeqInvA+0x2a4>
			A[iPivotCol][l] *= recippiv;
 8006e12:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8006e16:	009b      	lsls	r3, r3, #2
 8006e18:	68fa      	ldr	r2, [r7, #12]
 8006e1a:	4413      	add	r3, r2
 8006e1c:	681a      	ldr	r2, [r3, #0]
 8006e1e:	f997 3020 	ldrsb.w	r3, [r7, #32]
 8006e22:	009b      	lsls	r3, r3, #2
 8006e24:	4413      	add	r3, r2
 8006e26:	ed93 7a00 	vldr	s14, [r3]
 8006e2a:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8006e2e:	009b      	lsls	r3, r3, #2
 8006e30:	68fa      	ldr	r2, [r7, #12]
 8006e32:	4413      	add	r3, r2
 8006e34:	681a      	ldr	r2, [r3, #0]
 8006e36:	f997 3020 	ldrsb.w	r3, [r7, #32]
 8006e3a:	009b      	lsls	r3, r3, #2
 8006e3c:	4413      	add	r3, r2
 8006e3e:	edd7 7a05 	vldr	s15, [r7, #20]
 8006e42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e46:	edc3 7a00 	vstr	s15, [r3]
		for (l = 0; l < isize; l++) {
 8006e4a:	f997 3020 	ldrsb.w	r3, [r7, #32]
 8006e4e:	b2db      	uxtb	r3, r3
 8006e50:	3301      	adds	r3, #1
 8006e52:	b2db      	uxtb	r3, r3
 8006e54:	f887 3020 	strb.w	r3, [r7, #32]
 8006e58:	f997 2020 	ldrsb.w	r2, [r7, #32]
 8006e5c:	f997 3030 	ldrsb.w	r3, [r7, #48]	@ 0x30
 8006e60:	429a      	cmp	r2, r3
 8006e62:	dbd6      	blt.n	8006e12 <fmatrixAeqInvA+0x25e>
		}
		// loop over all rows m of A
		for (m = 0; m < isize; m++) {
 8006e64:	2300      	movs	r3, #0
 8006e66:	77fb      	strb	r3, [r7, #31]
 8006e68:	e05f      	b.n	8006f2a <fmatrixAeqInvA+0x376>
			if (m != iPivotCol) {
 8006e6a:	f997 201f 	ldrsb.w	r2, [r7, #31]
 8006e6e:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8006e72:	429a      	cmp	r2, r3
 8006e74:	d053      	beq.n	8006f1e <fmatrixAeqInvA+0x36a>
				// scaling factor for this row m is in column iPivotCol
				scaling = A[m][iPivotCol];
 8006e76:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006e7a:	009b      	lsls	r3, r3, #2
 8006e7c:	68fa      	ldr	r2, [r7, #12]
 8006e7e:	4413      	add	r3, r2
 8006e80:	681a      	ldr	r2, [r3, #0]
 8006e82:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8006e86:	009b      	lsls	r3, r3, #2
 8006e88:	4413      	add	r3, r2
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	613b      	str	r3, [r7, #16]
				// zero this element
				A[m][iPivotCol] = 0.0F;
 8006e8e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006e92:	009b      	lsls	r3, r3, #2
 8006e94:	68fa      	ldr	r2, [r7, #12]
 8006e96:	4413      	add	r3, r2
 8006e98:	681a      	ldr	r2, [r3, #0]
 8006e9a:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8006e9e:	009b      	lsls	r3, r3, #2
 8006ea0:	4413      	add	r3, r2
 8006ea2:	f04f 0200 	mov.w	r2, #0
 8006ea6:	601a      	str	r2, [r3, #0]
				// loop over all columns l of A and perform elimination
				for (l = 0; l < isize; l++) {
 8006ea8:	2300      	movs	r3, #0
 8006eaa:	f887 3020 	strb.w	r3, [r7, #32]
 8006eae:	e030      	b.n	8006f12 <fmatrixAeqInvA+0x35e>
					A[m][l] -= A[iPivotCol][l] * scaling;
 8006eb0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006eb4:	009b      	lsls	r3, r3, #2
 8006eb6:	68fa      	ldr	r2, [r7, #12]
 8006eb8:	4413      	add	r3, r2
 8006eba:	681a      	ldr	r2, [r3, #0]
 8006ebc:	f997 3020 	ldrsb.w	r3, [r7, #32]
 8006ec0:	009b      	lsls	r3, r3, #2
 8006ec2:	4413      	add	r3, r2
 8006ec4:	ed93 7a00 	vldr	s14, [r3]
 8006ec8:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8006ecc:	009b      	lsls	r3, r3, #2
 8006ece:	68fa      	ldr	r2, [r7, #12]
 8006ed0:	4413      	add	r3, r2
 8006ed2:	681a      	ldr	r2, [r3, #0]
 8006ed4:	f997 3020 	ldrsb.w	r3, [r7, #32]
 8006ed8:	009b      	lsls	r3, r3, #2
 8006eda:	4413      	add	r3, r2
 8006edc:	edd3 6a00 	vldr	s13, [r3]
 8006ee0:	edd7 7a04 	vldr	s15, [r7, #16]
 8006ee4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006ee8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006eec:	009b      	lsls	r3, r3, #2
 8006eee:	68fa      	ldr	r2, [r7, #12]
 8006ef0:	4413      	add	r3, r2
 8006ef2:	681a      	ldr	r2, [r3, #0]
 8006ef4:	f997 3020 	ldrsb.w	r3, [r7, #32]
 8006ef8:	009b      	lsls	r3, r3, #2
 8006efa:	4413      	add	r3, r2
 8006efc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006f00:	edc3 7a00 	vstr	s15, [r3]
				for (l = 0; l < isize; l++) {
 8006f04:	f997 3020 	ldrsb.w	r3, [r7, #32]
 8006f08:	b2db      	uxtb	r3, r3
 8006f0a:	3301      	adds	r3, #1
 8006f0c:	b2db      	uxtb	r3, r3
 8006f0e:	f887 3020 	strb.w	r3, [r7, #32]
 8006f12:	f997 2020 	ldrsb.w	r2, [r7, #32]
 8006f16:	f997 3030 	ldrsb.w	r3, [r7, #48]	@ 0x30
 8006f1a:	429a      	cmp	r2, r3
 8006f1c:	dbc8      	blt.n	8006eb0 <fmatrixAeqInvA+0x2fc>
		for (m = 0; m < isize; m++) {
 8006f1e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006f22:	b2db      	uxtb	r3, r3
 8006f24:	3301      	adds	r3, #1
 8006f26:	b2db      	uxtb	r3, r3
 8006f28:	77fb      	strb	r3, [r7, #31]
 8006f2a:	f997 201f 	ldrsb.w	r2, [r7, #31]
 8006f2e:	f997 3030 	ldrsb.w	r3, [r7, #48]	@ 0x30
 8006f32:	429a      	cmp	r2, r3
 8006f34:	db99      	blt.n	8006e6a <fmatrixAeqInvA+0x2b6>
	for (i = 0; i < isize; i++) {
 8006f36:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8006f3a:	b2db      	uxtb	r3, r3
 8006f3c:	3301      	adds	r3, #1
 8006f3e:	b2db      	uxtb	r3, r3
 8006f40:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006f44:	f997 2023 	ldrsb.w	r2, [r7, #35]	@ 0x23
 8006f48:	f997 3030 	ldrsb.w	r3, [r7, #48]	@ 0x30
 8006f4c:	429a      	cmp	r2, r3
 8006f4e:	f6ff ae57 	blt.w	8006c00 <fmatrixAeqInvA+0x4c>
			}
		}
	} // end of loop i over the matrix dimensions

	// finally, loop in inverse order to apply the missing column swaps
	for (l = isize - 1; l >= 0; l--) {
 8006f52:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8006f56:	3b01      	subs	r3, #1
 8006f58:	b2db      	uxtb	r3, r3
 8006f5a:	f887 3020 	strb.w	r3, [r7, #32]
 8006f5e:	e059      	b.n	8007014 <fmatrixAeqInvA+0x460>
		// set i and j to the two columns to be swapped
		i = iRowInd[l];
 8006f60:	f997 3020 	ldrsb.w	r3, [r7, #32]
 8006f64:	687a      	ldr	r2, [r7, #4]
 8006f66:	4413      	add	r3, r2
 8006f68:	781b      	ldrb	r3, [r3, #0]
 8006f6a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
		j = iColInd[l];
 8006f6e:	f997 3020 	ldrsb.w	r3, [r7, #32]
 8006f72:	68ba      	ldr	r2, [r7, #8]
 8006f74:	4413      	add	r3, r2
 8006f76:	781b      	ldrb	r3, [r3, #0]
 8006f78:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22

		// check that the two columns i and j to be swapped are not the same
		if (i != j) {
 8006f7c:	f997 2023 	ldrsb.w	r2, [r7, #35]	@ 0x23
 8006f80:	f997 3022 	ldrsb.w	r3, [r7, #34]	@ 0x22
 8006f84:	429a      	cmp	r2, r3
 8006f86:	d03e      	beq.n	8007006 <fmatrixAeqInvA+0x452>
			// loop over all rows k to swap columns i and j of A
			for (k = 0; k < isize; k++) {
 8006f88:	2300      	movs	r3, #0
 8006f8a:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
 8006f8e:	e034      	b.n	8006ffa <fmatrixAeqInvA+0x446>
				ftmp = A[k][i];
 8006f90:	f997 3021 	ldrsb.w	r3, [r7, #33]	@ 0x21
 8006f94:	009b      	lsls	r3, r3, #2
 8006f96:	68fa      	ldr	r2, [r7, #12]
 8006f98:	4413      	add	r3, r2
 8006f9a:	681a      	ldr	r2, [r3, #0]
 8006f9c:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8006fa0:	009b      	lsls	r3, r3, #2
 8006fa2:	4413      	add	r3, r2
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	61bb      	str	r3, [r7, #24]
				A[k][i] = A[k][j];
 8006fa8:	f997 3021 	ldrsb.w	r3, [r7, #33]	@ 0x21
 8006fac:	009b      	lsls	r3, r3, #2
 8006fae:	68fa      	ldr	r2, [r7, #12]
 8006fb0:	4413      	add	r3, r2
 8006fb2:	681a      	ldr	r2, [r3, #0]
 8006fb4:	f997 3022 	ldrsb.w	r3, [r7, #34]	@ 0x22
 8006fb8:	009b      	lsls	r3, r3, #2
 8006fba:	441a      	add	r2, r3
 8006fbc:	f997 3021 	ldrsb.w	r3, [r7, #33]	@ 0x21
 8006fc0:	009b      	lsls	r3, r3, #2
 8006fc2:	68f9      	ldr	r1, [r7, #12]
 8006fc4:	440b      	add	r3, r1
 8006fc6:	6819      	ldr	r1, [r3, #0]
 8006fc8:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8006fcc:	009b      	lsls	r3, r3, #2
 8006fce:	440b      	add	r3, r1
 8006fd0:	6812      	ldr	r2, [r2, #0]
 8006fd2:	601a      	str	r2, [r3, #0]
				A[k][j] = ftmp;
 8006fd4:	f997 3021 	ldrsb.w	r3, [r7, #33]	@ 0x21
 8006fd8:	009b      	lsls	r3, r3, #2
 8006fda:	68fa      	ldr	r2, [r7, #12]
 8006fdc:	4413      	add	r3, r2
 8006fde:	681a      	ldr	r2, [r3, #0]
 8006fe0:	f997 3022 	ldrsb.w	r3, [r7, #34]	@ 0x22
 8006fe4:	009b      	lsls	r3, r3, #2
 8006fe6:	4413      	add	r3, r2
 8006fe8:	69ba      	ldr	r2, [r7, #24]
 8006fea:	601a      	str	r2, [r3, #0]
			for (k = 0; k < isize; k++) {
 8006fec:	f997 3021 	ldrsb.w	r3, [r7, #33]	@ 0x21
 8006ff0:	b2db      	uxtb	r3, r3
 8006ff2:	3301      	adds	r3, #1
 8006ff4:	b2db      	uxtb	r3, r3
 8006ff6:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
 8006ffa:	f997 2021 	ldrsb.w	r2, [r7, #33]	@ 0x21
 8006ffe:	f997 3030 	ldrsb.w	r3, [r7, #48]	@ 0x30
 8007002:	429a      	cmp	r2, r3
 8007004:	dbc4      	blt.n	8006f90 <fmatrixAeqInvA+0x3dc>
	for (l = isize - 1; l >= 0; l--) {
 8007006:	f997 3020 	ldrsb.w	r3, [r7, #32]
 800700a:	b2db      	uxtb	r3, r3
 800700c:	3b01      	subs	r3, #1
 800700e:	b2db      	uxtb	r3, r3
 8007010:	f887 3020 	strb.w	r3, [r7, #32]
 8007014:	f997 3020 	ldrsb.w	r3, [r7, #32]
 8007018:	2b00      	cmp	r3, #0
 800701a:	daa1      	bge.n	8006f60 <fmatrixAeqInvA+0x3ac>
			}
		}
	}
}
 800701c:	3728      	adds	r7, #40	@ 0x28
 800701e:	46bd      	mov	sp, r7
 8007020:	bd80      	pop	{r7, pc}
	...

08007024 <sphere_region>:

//int gap_fuc_flag;
//int gap_fuc_spheredist;

static int sphere_region(float x, float y, float z)
{
 8007024:	b580      	push	{r7, lr}
 8007026:	b088      	sub	sp, #32
 8007028:	af00      	add	r7, sp, #0
 800702a:	ed87 0a03 	vstr	s0, [r7, #12]
 800702e:	edc7 0a02 	vstr	s1, [r7, #8]
 8007032:	ed87 1a01 	vstr	s2, [r7, #4]
	int region;

	//if (pr) printf("  region %.1f,%.1f,%.1f  ", x, y, z);

	// longitude = 0 to 2pi  (meaning 0 to 360 degrees)
	longitude = atan2f(y, x) + (float)M_PI;
 8007036:	edd7 0a03 	vldr	s1, [r7, #12]
 800703a:	ed97 0a02 	vldr	s0, [r7, #8]
 800703e:	f00a fb47 	bl	80116d0 <atan2f>
 8007042:	eef0 7a40 	vmov.f32	s15, s0
 8007046:	ed9f 7a54 	vldr	s14, [pc, #336]	@ 8007198 <sphere_region+0x174>
 800704a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800704e:	edc7 7a06 	vstr	s15, [r7, #24]
	// latitude = -pi/2 to +pi/2  (meaning -90 to +90 degrees)
	latitude = (float)(M_PI / 2.0) - atan2f(sqrtf(x * x + y * y), z);
 8007052:	edd7 7a03 	vldr	s15, [r7, #12]
 8007056:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800705a:	edd7 7a02 	vldr	s15, [r7, #8]
 800705e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8007062:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007066:	eeb0 0a67 	vmov.f32	s0, s15
 800706a:	f00a fb8b 	bl	8011784 <sqrtf>
 800706e:	eef0 7a40 	vmov.f32	s15, s0
 8007072:	edd7 0a01 	vldr	s1, [r7, #4]
 8007076:	eeb0 0a67 	vmov.f32	s0, s15
 800707a:	f00a fb29 	bl	80116d0 <atan2f>
 800707e:	eef0 7a40 	vmov.f32	s15, s0
 8007082:	ed9f 7a46 	vldr	s14, [pc, #280]	@ 800719c <sphere_region+0x178>
 8007086:	ee77 7a67 	vsub.f32	s15, s14, s15
 800708a:	edc7 7a05 	vstr	s15, [r7, #20]
	// https://etna.mcs.kent.edu/vol.25.2006/pp309-327.dir/pp309-327.html
	// sphere equations....
	//  area of unit sphere = 4*pi
	//  area of unit sphere cap = 2*pi*h  h = cap height
	//  lattitude of unit sphere cap = arcsin(1 - h)
	if (latitude > 1.37046f /* 78.52 deg */) {
 800708e:	edd7 7a05 	vldr	s15, [r7, #20]
 8007092:	ed9f 7a43 	vldr	s14, [pc, #268]	@ 80071a0 <sphere_region+0x17c>
 8007096:	eef4 7ac7 	vcmpe.f32	s15, s14
 800709a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800709e:	dd02      	ble.n	80070a6 <sphere_region+0x82>
		// arctic cap, 1 region
		region = 0;
 80070a0:	2300      	movs	r3, #0
 80070a2:	61fb      	str	r3, [r7, #28]
 80070a4:	e072      	b.n	800718c <sphere_region+0x168>
	} else if (latitude < -1.37046f /* -78.52 deg */) {
 80070a6:	edd7 7a05 	vldr	s15, [r7, #20]
 80070aa:	ed9f 7a3e 	vldr	s14, [pc, #248]	@ 80071a4 <sphere_region+0x180>
 80070ae:	eef4 7ac7 	vcmpe.f32	s15, s14
 80070b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80070b6:	d502      	bpl.n	80070be <sphere_region+0x9a>
		// antarctic cap, 1 region
		region = 99;
 80070b8:	2363      	movs	r3, #99	@ 0x63
 80070ba:	61fb      	str	r3, [r7, #28]
 80070bc:	e066      	b.n	800718c <sphere_region+0x168>
	} else if (latitude > 0.74776f /* 42.84 deg */ || latitude < -0.74776f ) {
 80070be:	edd7 7a05 	vldr	s15, [r7, #20]
 80070c2:	ed9f 7a39 	vldr	s14, [pc, #228]	@ 80071a8 <sphere_region+0x184>
 80070c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80070ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80070ce:	dc08      	bgt.n	80070e2 <sphere_region+0xbe>
 80070d0:	edd7 7a05 	vldr	s15, [r7, #20]
 80070d4:	ed9f 7a35 	vldr	s14, [pc, #212]	@ 80071ac <sphere_region+0x188>
 80070d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80070dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80070e0:	d52a      	bpl.n	8007138 <sphere_region+0x114>
		// temperate zones, 15 regions each
		region = floorf(longitude * (float)(15.0 / (M_PI * 2.0)));
 80070e2:	edd7 7a06 	vldr	s15, [r7, #24]
 80070e6:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 80071b0 <sphere_region+0x18c>
 80070ea:	ee67 7a87 	vmul.f32	s15, s15, s14
 80070ee:	eeb0 0a67 	vmov.f32	s0, s15
 80070f2:	f00a fc4d 	bl	8011990 <floorf>
 80070f6:	eef0 7a40 	vmov.f32	s15, s0
 80070fa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80070fe:	ee17 3a90 	vmov	r3, s15
 8007102:	61fb      	str	r3, [r7, #28]
		if (region < 0) region = 0;
 8007104:	69fb      	ldr	r3, [r7, #28]
 8007106:	2b00      	cmp	r3, #0
 8007108:	da02      	bge.n	8007110 <sphere_region+0xec>
 800710a:	2300      	movs	r3, #0
 800710c:	61fb      	str	r3, [r7, #28]
 800710e:	e004      	b.n	800711a <sphere_region+0xf6>
		else if (region > 14) region = 14;
 8007110:	69fb      	ldr	r3, [r7, #28]
 8007112:	2b0e      	cmp	r3, #14
 8007114:	dd01      	ble.n	800711a <sphere_region+0xf6>
 8007116:	230e      	movs	r3, #14
 8007118:	61fb      	str	r3, [r7, #28]
		if (latitude > 0.0) {
 800711a:	edd7 7a05 	vldr	s15, [r7, #20]
 800711e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007122:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007126:	dd03      	ble.n	8007130 <sphere_region+0x10c>
			region += 1; // 1 to 15
 8007128:	69fb      	ldr	r3, [r7, #28]
 800712a:	3301      	adds	r3, #1
 800712c:	61fb      	str	r3, [r7, #28]
		if (latitude > 0.0) {
 800712e:	e02d      	b.n	800718c <sphere_region+0x168>
		} else {
			region += 84; // 84 to 98
 8007130:	69fb      	ldr	r3, [r7, #28]
 8007132:	3354      	adds	r3, #84	@ 0x54
 8007134:	61fb      	str	r3, [r7, #28]
		if (latitude > 0.0) {
 8007136:	e029      	b.n	800718c <sphere_region+0x168>
		}
	} else {
		// tropic zones, 34 regions each
		region = floorf(longitude * (float)(34.0 / (M_PI * 2.0)));
 8007138:	edd7 7a06 	vldr	s15, [r7, #24]
 800713c:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 80071b4 <sphere_region+0x190>
 8007140:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007144:	eeb0 0a67 	vmov.f32	s0, s15
 8007148:	f00a fc22 	bl	8011990 <floorf>
 800714c:	eef0 7a40 	vmov.f32	s15, s0
 8007150:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007154:	ee17 3a90 	vmov	r3, s15
 8007158:	61fb      	str	r3, [r7, #28]
		if (region < 0) region = 0;
 800715a:	69fb      	ldr	r3, [r7, #28]
 800715c:	2b00      	cmp	r3, #0
 800715e:	da02      	bge.n	8007166 <sphere_region+0x142>
 8007160:	2300      	movs	r3, #0
 8007162:	61fb      	str	r3, [r7, #28]
 8007164:	e004      	b.n	8007170 <sphere_region+0x14c>
		else if (region > 33) region = 33;
 8007166:	69fb      	ldr	r3, [r7, #28]
 8007168:	2b21      	cmp	r3, #33	@ 0x21
 800716a:	dd01      	ble.n	8007170 <sphere_region+0x14c>
 800716c:	2321      	movs	r3, #33	@ 0x21
 800716e:	61fb      	str	r3, [r7, #28]
		if (latitude >= 0.0) {
 8007170:	edd7 7a05 	vldr	s15, [r7, #20]
 8007174:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007178:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800717c:	db03      	blt.n	8007186 <sphere_region+0x162>
			region += 16; // 16 to 49
 800717e:	69fb      	ldr	r3, [r7, #28]
 8007180:	3310      	adds	r3, #16
 8007182:	61fb      	str	r3, [r7, #28]
 8007184:	e002      	b.n	800718c <sphere_region+0x168>
		} else {
			region += 50; // 50 to 83
 8007186:	69fb      	ldr	r3, [r7, #28]
 8007188:	3332      	adds	r3, #50	@ 0x32
 800718a:	61fb      	str	r3, [r7, #28]
		}
	}
	//if (pr) printf("  %d\n", region);
	return region;
 800718c:	69fb      	ldr	r3, [r7, #28]
}
 800718e:	4618      	mov	r0, r3
 8007190:	3720      	adds	r7, #32
 8007192:	46bd      	mov	sp, r7
 8007194:	bd80      	pop	{r7, pc}
 8007196:	bf00      	nop
 8007198:	40490fdb 	.word	0x40490fdb
 800719c:	3fc90fdb 	.word	0x3fc90fdb
 80071a0:	3faf6b3c 	.word	0x3faf6b3c
 80071a4:	bfaf6b3c 	.word	0xbfaf6b3c
 80071a8:	3f3f6d33 	.word	0x3f3f6d33
 80071ac:	bf3f6d33 	.word	0xbf3f6d33
 80071b0:	4018c9eb 	.word	0x4018c9eb
 80071b4:	40ad291c 	.word	0x40ad291c

080071b8 <quality_update>:
	quality_wobble_computed = 0;
}

// How many surface gaps
void quality_update(const Point_t *point)
{
 80071b8:	b590      	push	{r4, r7, lr}
 80071ba:	b087      	sub	sp, #28
 80071bc:	af00      	add	r7, sp, #0
 80071be:	6078      	str	r0, [r7, #4]
	if (count >= MAGBUFFSIZE)
 80071c0:	4b4b      	ldr	r3, [pc, #300]	@ (80072f0 <quality_update+0x138>)
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 80071c8:	db02      	blt.n	80071d0 <quality_update+0x18>
		count = 0;
 80071ca:	4b49      	ldr	r3, [pc, #292]	@ (80072f0 <quality_update+0x138>)
 80071cc:	2200      	movs	r2, #0
 80071ce:	601a      	str	r2, [r3, #0]

	float x, y, z;
	int region;

	x = point->x;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	617b      	str	r3, [r7, #20]
	y = point->y;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	685b      	ldr	r3, [r3, #4]
 80071da:	613b      	str	r3, [r7, #16]
	z = point->z;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	689b      	ldr	r3, [r3, #8]
 80071e0:	60fb      	str	r3, [r7, #12]
	magnitude[count] = sqrtf(x * x + y * y + z * z);
 80071e2:	edd7 7a05 	vldr	s15, [r7, #20]
 80071e6:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80071ea:	edd7 7a04 	vldr	s15, [r7, #16]
 80071ee:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80071f2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80071f6:	edd7 7a03 	vldr	s15, [r7, #12]
 80071fa:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80071fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007202:	4b3b      	ldr	r3, [pc, #236]	@ (80072f0 <quality_update+0x138>)
 8007204:	681c      	ldr	r4, [r3, #0]
 8007206:	eeb0 0a67 	vmov.f32	s0, s15
 800720a:	f00a fabb 	bl	8011784 <sqrtf>
 800720e:	eef0 7a40 	vmov.f32	s15, s0
 8007212:	4a38      	ldr	r2, [pc, #224]	@ (80072f4 <quality_update+0x13c>)
 8007214:	00a3      	lsls	r3, r4, #2
 8007216:	4413      	add	r3, r2
 8007218:	edc3 7a00 	vstr	s15, [r3]
	region = sphere_region(x, y, z);
 800721c:	ed97 1a03 	vldr	s2, [r7, #12]
 8007220:	edd7 0a04 	vldr	s1, [r7, #16]
 8007224:	ed97 0a05 	vldr	s0, [r7, #20]
 8007228:	f7ff fefc 	bl	8007024 <sphere_region>
 800722c:	60b8      	str	r0, [r7, #8]
	spheredist[region]++;
 800722e:	4a32      	ldr	r2, [pc, #200]	@ (80072f8 <quality_update+0x140>)
 8007230:	68bb      	ldr	r3, [r7, #8]
 8007232:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007236:	1c5a      	adds	r2, r3, #1
 8007238:	492f      	ldr	r1, [pc, #188]	@ (80072f8 <quality_update+0x140>)
 800723a:	68bb      	ldr	r3, [r7, #8]
 800723c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	spheredata[region].x += x;
 8007240:	492e      	ldr	r1, [pc, #184]	@ (80072fc <quality_update+0x144>)
 8007242:	68ba      	ldr	r2, [r7, #8]
 8007244:	4613      	mov	r3, r2
 8007246:	005b      	lsls	r3, r3, #1
 8007248:	4413      	add	r3, r2
 800724a:	009b      	lsls	r3, r3, #2
 800724c:	440b      	add	r3, r1
 800724e:	ed93 7a00 	vldr	s14, [r3]
 8007252:	edd7 7a05 	vldr	s15, [r7, #20]
 8007256:	ee77 7a27 	vadd.f32	s15, s14, s15
 800725a:	4928      	ldr	r1, [pc, #160]	@ (80072fc <quality_update+0x144>)
 800725c:	68ba      	ldr	r2, [r7, #8]
 800725e:	4613      	mov	r3, r2
 8007260:	005b      	lsls	r3, r3, #1
 8007262:	4413      	add	r3, r2
 8007264:	009b      	lsls	r3, r3, #2
 8007266:	440b      	add	r3, r1
 8007268:	edc3 7a00 	vstr	s15, [r3]
	spheredata[region].y += y;
 800726c:	4923      	ldr	r1, [pc, #140]	@ (80072fc <quality_update+0x144>)
 800726e:	68ba      	ldr	r2, [r7, #8]
 8007270:	4613      	mov	r3, r2
 8007272:	005b      	lsls	r3, r3, #1
 8007274:	4413      	add	r3, r2
 8007276:	009b      	lsls	r3, r3, #2
 8007278:	440b      	add	r3, r1
 800727a:	3304      	adds	r3, #4
 800727c:	ed93 7a00 	vldr	s14, [r3]
 8007280:	edd7 7a04 	vldr	s15, [r7, #16]
 8007284:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007288:	491c      	ldr	r1, [pc, #112]	@ (80072fc <quality_update+0x144>)
 800728a:	68ba      	ldr	r2, [r7, #8]
 800728c:	4613      	mov	r3, r2
 800728e:	005b      	lsls	r3, r3, #1
 8007290:	4413      	add	r3, r2
 8007292:	009b      	lsls	r3, r3, #2
 8007294:	440b      	add	r3, r1
 8007296:	3304      	adds	r3, #4
 8007298:	edc3 7a00 	vstr	s15, [r3]
	spheredata[region].z += z;
 800729c:	4917      	ldr	r1, [pc, #92]	@ (80072fc <quality_update+0x144>)
 800729e:	68ba      	ldr	r2, [r7, #8]
 80072a0:	4613      	mov	r3, r2
 80072a2:	005b      	lsls	r3, r3, #1
 80072a4:	4413      	add	r3, r2
 80072a6:	009b      	lsls	r3, r3, #2
 80072a8:	440b      	add	r3, r1
 80072aa:	3308      	adds	r3, #8
 80072ac:	ed93 7a00 	vldr	s14, [r3]
 80072b0:	edd7 7a03 	vldr	s15, [r7, #12]
 80072b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80072b8:	4910      	ldr	r1, [pc, #64]	@ (80072fc <quality_update+0x144>)
 80072ba:	68ba      	ldr	r2, [r7, #8]
 80072bc:	4613      	mov	r3, r2
 80072be:	005b      	lsls	r3, r3, #1
 80072c0:	4413      	add	r3, r2
 80072c2:	009b      	lsls	r3, r3, #2
 80072c4:	440b      	add	r3, r1
 80072c6:	3308      	adds	r3, #8
 80072c8:	edc3 7a00 	vstr	s15, [r3]
	count++;
 80072cc:	4b08      	ldr	r3, [pc, #32]	@ (80072f0 <quality_update+0x138>)
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	3301      	adds	r3, #1
 80072d2:	4a07      	ldr	r2, [pc, #28]	@ (80072f0 <quality_update+0x138>)
 80072d4:	6013      	str	r3, [r2, #0]
	quality_gaps_computed = 0;
 80072d6:	4b0a      	ldr	r3, [pc, #40]	@ (8007300 <quality_update+0x148>)
 80072d8:	2200      	movs	r2, #0
 80072da:	601a      	str	r2, [r3, #0]
	quality_variance_computed = 0;
 80072dc:	4b09      	ldr	r3, [pc, #36]	@ (8007304 <quality_update+0x14c>)
 80072de:	2200      	movs	r2, #0
 80072e0:	601a      	str	r2, [r3, #0]
	quality_wobble_computed = 0;
 80072e2:	4b09      	ldr	r3, [pc, #36]	@ (8007308 <quality_update+0x150>)
 80072e4:	2200      	movs	r2, #0
 80072e6:	601a      	str	r2, [r3, #0]
}
 80072e8:	bf00      	nop
 80072ea:	371c      	adds	r7, #28
 80072ec:	46bd      	mov	sp, r7
 80072ee:	bd90      	pop	{r4, r7, pc}
 80072f0:	20001450 	.word	0x20001450
 80072f4:	20001a94 	.word	0x20001a94
 80072f8:	20001454 	.word	0x20001454
 80072fc:	200015e4 	.word	0x200015e4
 8007300:	200020d8 	.word	0x200020d8
 8007304:	200020dc 	.word	0x200020dc
 8007308:	200020e0 	.word	0x200020e0

0800730c <quality_surface_gap_error>:


float quality_surface_gap_error(void)
{
 800730c:	b480      	push	{r7}
 800730e:	b085      	sub	sp, #20
 8007310:	af00      	add	r7, sp, #0
	float error=0.0f;
 8007312:	f04f 0300 	mov.w	r3, #0
 8007316:	60fb      	str	r3, [r7, #12]
	int i, num;

//	gap_fuc_flag = 1;
	if (quality_gaps_computed) return quality_gaps_buffer;
 8007318:	4b22      	ldr	r3, [pc, #136]	@ (80073a4 <quality_surface_gap_error+0x98>)
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	2b00      	cmp	r3, #0
 800731e:	d002      	beq.n	8007326 <quality_surface_gap_error+0x1a>
 8007320:	4b21      	ldr	r3, [pc, #132]	@ (80073a8 <quality_surface_gap_error+0x9c>)
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	e035      	b.n	8007392 <quality_surface_gap_error+0x86>
	for (i=0; i < 100; i++) {
 8007326:	2300      	movs	r3, #0
 8007328:	60bb      	str	r3, [r7, #8]
 800732a:	e02a      	b.n	8007382 <quality_surface_gap_error+0x76>
		num = spheredist[i];
 800732c:	4a1f      	ldr	r2, [pc, #124]	@ (80073ac <quality_surface_gap_error+0xa0>)
 800732e:	68bb      	ldr	r3, [r7, #8]
 8007330:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007334:	607b      	str	r3, [r7, #4]
//		gap_fuc_spheredist = num;
		if (num == 0) {
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	2b00      	cmp	r3, #0
 800733a:	d108      	bne.n	800734e <quality_surface_gap_error+0x42>
			error += 1.0f;
 800733c:	edd7 7a03 	vldr	s15, [r7, #12]
 8007340:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007344:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007348:	edc7 7a03 	vstr	s15, [r7, #12]
 800734c:	e016      	b.n	800737c <quality_surface_gap_error+0x70>
		} else if (num == 1) {
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	2b01      	cmp	r3, #1
 8007352:	d108      	bne.n	8007366 <quality_surface_gap_error+0x5a>
			error += 0.2f;
 8007354:	edd7 7a03 	vldr	s15, [r7, #12]
 8007358:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 80073b0 <quality_surface_gap_error+0xa4>
 800735c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007360:	edc7 7a03 	vstr	s15, [r7, #12]
 8007364:	e00a      	b.n	800737c <quality_surface_gap_error+0x70>
		} else if (num == 2) {
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	2b02      	cmp	r3, #2
 800736a:	d107      	bne.n	800737c <quality_surface_gap_error+0x70>
			error += 0.01f;
 800736c:	edd7 7a03 	vldr	s15, [r7, #12]
 8007370:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 80073b4 <quality_surface_gap_error+0xa8>
 8007374:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007378:	edc7 7a03 	vstr	s15, [r7, #12]
	for (i=0; i < 100; i++) {
 800737c:	68bb      	ldr	r3, [r7, #8]
 800737e:	3301      	adds	r3, #1
 8007380:	60bb      	str	r3, [r7, #8]
 8007382:	68bb      	ldr	r3, [r7, #8]
 8007384:	2b63      	cmp	r3, #99	@ 0x63
 8007386:	ddd1      	ble.n	800732c <quality_surface_gap_error+0x20>
		}
	}
	quality_gaps_buffer = error;
 8007388:	4a07      	ldr	r2, [pc, #28]	@ (80073a8 <quality_surface_gap_error+0x9c>)
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	6013      	str	r3, [r2, #0]
//	quality_gaps_computed = 1;
	return quality_gaps_buffer;
 800738e:	4b06      	ldr	r3, [pc, #24]	@ (80073a8 <quality_surface_gap_error+0x9c>)
 8007390:	681b      	ldr	r3, [r3, #0]
}
 8007392:	ee07 3a90 	vmov	s15, r3
 8007396:	eeb0 0a67 	vmov.f32	s0, s15
 800739a:	3714      	adds	r7, #20
 800739c:	46bd      	mov	sp, r7
 800739e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a2:	4770      	bx	lr
 80073a4:	200020d8 	.word	0x200020d8
 80073a8:	200020d4 	.word	0x200020d4
 80073ac:	20001454 	.word	0x20001454
 80073b0:	3e4ccccd 	.word	0x3e4ccccd
 80073b4:	3c23d70a 	.word	0x3c23d70a

080073b8 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 80073b8:	b480      	push	{r7}
 80073ba:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 80073bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80073c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80073c4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80073c8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80073cc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80073d0:	bf00      	nop
 80073d2:	46bd      	mov	sp, r7
 80073d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d8:	4770      	bx	lr

080073da <LL_AHB2_GRP1_EnableClock>:
{
 80073da:	b480      	push	{r7}
 80073dc:	b085      	sub	sp, #20
 80073de:	af00      	add	r7, sp, #0
 80073e0:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80073e2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80073e6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80073e8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	4313      	orrs	r3, r2
 80073f0:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80073f2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80073f6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	4013      	ands	r3, r2
 80073fc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80073fe:	68fb      	ldr	r3, [r7, #12]
}
 8007400:	bf00      	nop
 8007402:	3714      	adds	r7, #20
 8007404:	46bd      	mov	sp, r7
 8007406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740a:	4770      	bx	lr

0800740c <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 800740c:	b480      	push	{r7}
 800740e:	b085      	sub	sp, #20
 8007410:	af00      	add	r7, sp, #0
 8007412:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 8007414:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007418:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800741a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	4313      	orrs	r3, r2
 8007422:	650b      	str	r3, [r1, #80]	@ 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8007424:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007428:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	4013      	ands	r3, r2
 800742e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8007430:	68fb      	ldr	r3, [r7, #12]
}
 8007432:	bf00      	nop
 8007434:	3714      	adds	r7, #20
 8007436:	46bd      	mov	sp, r7
 8007438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743c:	4770      	bx	lr

0800743e <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 800743e:	b480      	push	{r7}
 8007440:	b085      	sub	sp, #20
 8007442:	af00      	add	r7, sp, #0
 8007444:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8007446:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800744a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800744c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	4313      	orrs	r3, r2
 8007454:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8007456:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800745a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	4013      	ands	r3, r2
 8007460:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8007462:	68fb      	ldr	r3, [r7, #12]
}
 8007464:	bf00      	nop
 8007466:	3714      	adds	r7, #20
 8007468:	46bd      	mov	sp, r7
 800746a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746e:	4770      	bx	lr

08007470 <HAL_MspInit>:

/* USER CODE END 0 */
/**
 * Initializes the Global MSP.
 */
void HAL_MspInit(void) {
 8007470:	b580      	push	{r7, lr}
 8007472:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN MspInit 0 */

	/* USER CODE END MspInit 0 */

	__HAL_RCC_HSEM_CLK_ENABLE();
 8007474:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8007478:	f7ff ffc8 	bl	800740c <LL_AHB3_GRP1_EnableClock>

	/* System interrupt init*/

	/* Peripheral interrupt init */
	/* HSEM_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 800747c:	2200      	movs	r2, #0
 800747e:	2100      	movs	r1, #0
 8007480:	202e      	movs	r0, #46	@ 0x2e
 8007482:	f000 fc80 	bl	8007d86 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8007486:	202e      	movs	r0, #46	@ 0x2e
 8007488:	f000 fc97 	bl	8007dba <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MspInit 1 */

	/* USER CODE END MspInit 1 */
}
 800748c:	bf00      	nop
 800748e:	bd80      	pop	{r7, pc}

08007490 <HAL_I2C_MspInit>:
 * @brief I2C MSP Initialization
 * This function configures the hardware resources used in this example
 * @param hi2c: I2C handle pointer
 * @retval None
 */
void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c) {
 8007490:	b580      	push	{r7, lr}
 8007492:	b09c      	sub	sp, #112	@ 0x70
 8007494:	af00      	add	r7, sp, #0
 8007496:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8007498:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800749c:	2200      	movs	r2, #0
 800749e:	601a      	str	r2, [r3, #0]
 80074a0:	605a      	str	r2, [r3, #4]
 80074a2:	609a      	str	r2, [r3, #8]
 80074a4:	60da      	str	r2, [r3, #12]
 80074a6:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 80074a8:	f107 030c 	add.w	r3, r7, #12
 80074ac:	2250      	movs	r2, #80	@ 0x50
 80074ae:	2100      	movs	r1, #0
 80074b0:	4618      	mov	r0, r3
 80074b2:	f009 fa36 	bl	8010922 <memset>
	if (hi2c->Instance == I2C1) {
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	4a34      	ldr	r2, [pc, #208]	@ (800758c <HAL_I2C_MspInit+0xfc>)
 80074bc:	4293      	cmp	r3, r2
 80074be:	d160      	bne.n	8007582 <HAL_I2C_MspInit+0xf2>

		/* USER CODE END I2C1_MspInit 0 */

		/** Initializes the peripherals clock
		 */
		PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80074c0:	2304      	movs	r3, #4
 80074c2:	60fb      	str	r3, [r7, #12]
		PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80074c4:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 80074c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 80074ca:	f107 030c 	add.w	r3, r7, #12
 80074ce:	4618      	mov	r0, r3
 80074d0:	f004 fd4f 	bl	800bf72 <HAL_RCCEx_PeriphCLKConfig>
 80074d4:	4603      	mov	r3, r0
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d001      	beq.n	80074de <HAL_I2C_MspInit+0x4e>
			Error_Handler();
 80074da:	f7fe fcd5 	bl	8005e88 <Error_Handler>
		}

		__HAL_RCC_GPIOB_CLK_ENABLE();
 80074de:	2002      	movs	r0, #2
 80074e0:	f7ff ff7b 	bl	80073da <LL_AHB2_GRP1_EnableClock>
		/**I2C1 GPIO Configuration
		 PB8     ------> I2C1_SCL
		 PB9     ------> I2C1_SDA
		 */
		GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9;
 80074e4:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80074e8:	65fb      	str	r3, [r7, #92]	@ 0x5c
		GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80074ea:	2312      	movs	r3, #18
 80074ec:	663b      	str	r3, [r7, #96]	@ 0x60
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 80074ee:	2300      	movs	r3, #0
 80074f0:	667b      	str	r3, [r7, #100]	@ 0x64
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80074f2:	2300      	movs	r3, #0
 80074f4:	66bb      	str	r3, [r7, #104]	@ 0x68
		GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80074f6:	2304      	movs	r3, #4
 80074f8:	66fb      	str	r3, [r7, #108]	@ 0x6c
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80074fa:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80074fe:	4619      	mov	r1, r3
 8007500:	4823      	ldr	r0, [pc, #140]	@ (8007590 <HAL_I2C_MspInit+0x100>)
 8007502:	f000 ff81 	bl	8008408 <HAL_GPIO_Init>

		/* Peripheral clock enable */
		__HAL_RCC_I2C1_CLK_ENABLE();
 8007506:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800750a:	f7ff ff98 	bl	800743e <LL_APB1_GRP1_EnableClock>

		/* I2C1 DMA Init */
		/* I2C1_RX Init */
		hdma_i2c1_rx.Instance = DMA1_Channel7;
 800750e:	4b21      	ldr	r3, [pc, #132]	@ (8007594 <HAL_I2C_MspInit+0x104>)
 8007510:	4a21      	ldr	r2, [pc, #132]	@ (8007598 <HAL_I2C_MspInit+0x108>)
 8007512:	601a      	str	r2, [r3, #0]
		hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
 8007514:	4b1f      	ldr	r3, [pc, #124]	@ (8007594 <HAL_I2C_MspInit+0x104>)
 8007516:	220a      	movs	r2, #10
 8007518:	605a      	str	r2, [r3, #4]
		hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800751a:	4b1e      	ldr	r3, [pc, #120]	@ (8007594 <HAL_I2C_MspInit+0x104>)
 800751c:	2200      	movs	r2, #0
 800751e:	609a      	str	r2, [r3, #8]
		hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007520:	4b1c      	ldr	r3, [pc, #112]	@ (8007594 <HAL_I2C_MspInit+0x104>)
 8007522:	2200      	movs	r2, #0
 8007524:	60da      	str	r2, [r3, #12]
		hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8007526:	4b1b      	ldr	r3, [pc, #108]	@ (8007594 <HAL_I2C_MspInit+0x104>)
 8007528:	2280      	movs	r2, #128	@ 0x80
 800752a:	611a      	str	r2, [r3, #16]
		hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800752c:	4b19      	ldr	r3, [pc, #100]	@ (8007594 <HAL_I2C_MspInit+0x104>)
 800752e:	2200      	movs	r2, #0
 8007530:	615a      	str	r2, [r3, #20]
		hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007532:	4b18      	ldr	r3, [pc, #96]	@ (8007594 <HAL_I2C_MspInit+0x104>)
 8007534:	2200      	movs	r2, #0
 8007536:	619a      	str	r2, [r3, #24]
		hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8007538:	4b16      	ldr	r3, [pc, #88]	@ (8007594 <HAL_I2C_MspInit+0x104>)
 800753a:	2200      	movs	r2, #0
 800753c:	61da      	str	r2, [r3, #28]
		hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800753e:	4b15      	ldr	r3, [pc, #84]	@ (8007594 <HAL_I2C_MspInit+0x104>)
 8007540:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8007544:	621a      	str	r2, [r3, #32]
		if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK) {
 8007546:	4813      	ldr	r0, [pc, #76]	@ (8007594 <HAL_I2C_MspInit+0x104>)
 8007548:	f000 fc7c 	bl	8007e44 <HAL_DMA_Init>
 800754c:	4603      	mov	r3, r0
 800754e:	2b00      	cmp	r3, #0
 8007550:	d001      	beq.n	8007556 <HAL_I2C_MspInit+0xc6>
			Error_Handler();
 8007552:	f7fe fc99 	bl	8005e88 <Error_Handler>
		}

		__HAL_LINKDMA(hi2c, hdmarx, hdma_i2c1_rx);
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	4a0e      	ldr	r2, [pc, #56]	@ (8007594 <HAL_I2C_MspInit+0x104>)
 800755a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800755c:	4a0d      	ldr	r2, [pc, #52]	@ (8007594 <HAL_I2C_MspInit+0x104>)
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	6293      	str	r3, [r2, #40]	@ 0x28

		/* I2C1 interrupt Init */
		HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8007562:	2200      	movs	r2, #0
 8007564:	2100      	movs	r1, #0
 8007566:	201e      	movs	r0, #30
 8007568:	f000 fc0d 	bl	8007d86 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800756c:	201e      	movs	r0, #30
 800756e:	f000 fc24 	bl	8007dba <HAL_NVIC_EnableIRQ>
		HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8007572:	2200      	movs	r2, #0
 8007574:	2100      	movs	r1, #0
 8007576:	201f      	movs	r0, #31
 8007578:	f000 fc05 	bl	8007d86 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800757c:	201f      	movs	r0, #31
 800757e:	f000 fc1c 	bl	8007dba <HAL_NVIC_EnableIRQ>

		/* USER CODE END I2C1_MspInit 1 */

	}

}
 8007582:	bf00      	nop
 8007584:	3770      	adds	r7, #112	@ 0x70
 8007586:	46bd      	mov	sp, r7
 8007588:	bd80      	pop	{r7, pc}
 800758a:	bf00      	nop
 800758c:	40005400 	.word	0x40005400
 8007590:	48000400 	.word	0x48000400
 8007594:	20000250 	.word	0x20000250
 8007598:	40020080 	.word	0x40020080

0800759c <HAL_IPCC_MspInit>:
 * @brief IPCC MSP Initialization
 * This function configures the hardware resources used in this example
 * @param hipcc: IPCC handle pointer
 * @retval None
 */
void HAL_IPCC_MspInit(IPCC_HandleTypeDef *hipcc) {
 800759c:	b580      	push	{r7, lr}
 800759e:	b082      	sub	sp, #8
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	6078      	str	r0, [r7, #4]
	if (hipcc->Instance == IPCC) {
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	4a0d      	ldr	r2, [pc, #52]	@ (80075e0 <HAL_IPCC_MspInit+0x44>)
 80075aa:	4293      	cmp	r3, r2
 80075ac:	d113      	bne.n	80075d6 <HAL_IPCC_MspInit+0x3a>
		/* USER CODE BEGIN IPCC_MspInit 0 */

		/* USER CODE END IPCC_MspInit 0 */
		/* Peripheral clock enable */
		__HAL_RCC_IPCC_CLK_ENABLE();
 80075ae:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80075b2:	f7ff ff2b 	bl	800740c <LL_AHB3_GRP1_EnableClock>
		/* IPCC interrupt Init */
		HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 80075b6:	2200      	movs	r2, #0
 80075b8:	2100      	movs	r1, #0
 80075ba:	202c      	movs	r0, #44	@ 0x2c
 80075bc:	f000 fbe3 	bl	8007d86 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 80075c0:	202c      	movs	r0, #44	@ 0x2c
 80075c2:	f000 fbfa 	bl	8007dba <HAL_NVIC_EnableIRQ>
		HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 80075c6:	2200      	movs	r2, #0
 80075c8:	2100      	movs	r1, #0
 80075ca:	202d      	movs	r0, #45	@ 0x2d
 80075cc:	f000 fbdb 	bl	8007d86 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 80075d0:	202d      	movs	r0, #45	@ 0x2d
 80075d2:	f000 fbf2 	bl	8007dba <HAL_NVIC_EnableIRQ>

		/* USER CODE END IPCC_MspInit 1 */

	}

}
 80075d6:	bf00      	nop
 80075d8:	3708      	adds	r7, #8
 80075da:	46bd      	mov	sp, r7
 80075dc:	bd80      	pop	{r7, pc}
 80075de:	bf00      	nop
 80075e0:	58000c00 	.word	0x58000c00

080075e4 <HAL_RTC_MspInit>:
 * @brief RTC MSP Initialization
 * This function configures the hardware resources used in this example
 * @param hrtc: RTC handle pointer
 * @retval None
 */
void HAL_RTC_MspInit(RTC_HandleTypeDef *hrtc) {
 80075e4:	b580      	push	{r7, lr}
 80075e6:	b096      	sub	sp, #88	@ 0x58
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	6078      	str	r0, [r7, #4]
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 80075ec:	f107 0308 	add.w	r3, r7, #8
 80075f0:	2250      	movs	r2, #80	@ 0x50
 80075f2:	2100      	movs	r1, #0
 80075f4:	4618      	mov	r0, r3
 80075f6:	f009 f994 	bl	8010922 <memset>
	if (hrtc->Instance == RTC) {
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	4a12      	ldr	r2, [pc, #72]	@ (8007648 <HAL_RTC_MspInit+0x64>)
 8007600:	4293      	cmp	r3, r2
 8007602:	d11d      	bne.n	8007640 <HAL_RTC_MspInit+0x5c>

		/* USER CODE END RTC_MspInit 0 */

		/** Initializes the peripherals clock
		 */
		PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8007604:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8007608:	60bb      	str	r3, [r7, #8]
		PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800760a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800760e:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 8007610:	f107 0308 	add.w	r3, r7, #8
 8007614:	4618      	mov	r0, r3
 8007616:	f004 fcac 	bl	800bf72 <HAL_RCCEx_PeriphCLKConfig>
 800761a:	4603      	mov	r3, r0
 800761c:	2b00      	cmp	r3, #0
 800761e:	d001      	beq.n	8007624 <HAL_RTC_MspInit+0x40>
			Error_Handler();
 8007620:	f7fe fc32 	bl	8005e88 <Error_Handler>
		}

		/* Peripheral clock enable */
		__HAL_RCC_RTC_ENABLE();
 8007624:	f7ff fec8 	bl	80073b8 <LL_RCC_EnableRTC>
		__HAL_RCC_RTCAPB_CLK_ENABLE();
 8007628:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800762c:	f7ff ff07 	bl	800743e <LL_APB1_GRP1_EnableClock>
		/* RTC interrupt Init */
		HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8007630:	2200      	movs	r2, #0
 8007632:	2100      	movs	r1, #0
 8007634:	2003      	movs	r0, #3
 8007636:	f000 fba6 	bl	8007d86 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 800763a:	2003      	movs	r0, #3
 800763c:	f000 fbbd 	bl	8007dba <HAL_NVIC_EnableIRQ>

		/* USER CODE END RTC_MspInit 1 */

	}

}
 8007640:	bf00      	nop
 8007642:	3758      	adds	r7, #88	@ 0x58
 8007644:	46bd      	mov	sp, r7
 8007646:	bd80      	pop	{r7, pc}
 8007648:	40002800 	.word	0x40002800

0800764c <HAL_TIM_Base_MspInit>:
 * @brief TIM_Base MSP Initialization
 * This function configures the hardware resources used in this example
 * @param htim_base: TIM_Base handle pointer
 * @retval None
 */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim_base) {
 800764c:	b580      	push	{r7, lr}
 800764e:	b082      	sub	sp, #8
 8007650:	af00      	add	r7, sp, #0
 8007652:	6078      	str	r0, [r7, #4]
	if (htim_base->Instance == TIM2) {
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800765c:	d102      	bne.n	8007664 <HAL_TIM_Base_MspInit+0x18>
		/* USER CODE BEGIN TIM2_MspInit 0 */

		/* USER CODE END TIM2_MspInit 0 */
		/* Peripheral clock enable */
		__HAL_RCC_TIM2_CLK_ENABLE();
 800765e:	2001      	movs	r0, #1
 8007660:	f7ff feed 	bl	800743e <LL_APB1_GRP1_EnableClock>

		/* USER CODE END TIM2_MspInit 1 */

	}

}
 8007664:	bf00      	nop
 8007666:	3708      	adds	r7, #8
 8007668:	46bd      	mov	sp, r7
 800766a:	bd80      	pop	{r7, pc}

0800766c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800766c:	b480      	push	{r7}
 800766e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8007670:	bf00      	nop
 8007672:	e7fd      	b.n	8007670 <NMI_Handler+0x4>

08007674 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007674:	b480      	push	{r7}
 8007676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007678:	bf00      	nop
 800767a:	e7fd      	b.n	8007678 <HardFault_Handler+0x4>

0800767c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800767c:	b480      	push	{r7}
 800767e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007680:	bf00      	nop
 8007682:	e7fd      	b.n	8007680 <MemManage_Handler+0x4>

08007684 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8007684:	b480      	push	{r7}
 8007686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007688:	bf00      	nop
 800768a:	e7fd      	b.n	8007688 <BusFault_Handler+0x4>

0800768c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800768c:	b480      	push	{r7}
 800768e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007690:	bf00      	nop
 8007692:	e7fd      	b.n	8007690 <UsageFault_Handler+0x4>

08007694 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8007694:	b480      	push	{r7}
 8007696:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8007698:	bf00      	nop
 800769a:	46bd      	mov	sp, r7
 800769c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a0:	4770      	bx	lr

080076a2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80076a2:	b480      	push	{r7}
 80076a4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80076a6:	bf00      	nop
 80076a8:	46bd      	mov	sp, r7
 80076aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ae:	4770      	bx	lr

080076b0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80076b0:	b480      	push	{r7}
 80076b2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80076b4:	bf00      	nop
 80076b6:	46bd      	mov	sp, r7
 80076b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076bc:	4770      	bx	lr

080076be <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80076be:	b580      	push	{r7, lr}
 80076c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80076c2:	f000 f9ed 	bl	8007aa0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80076c6:	bf00      	nop
 80076c8:	bd80      	pop	{r7, pc}

080076ca <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 80076ca:	b580      	push	{r7, lr}
 80076cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 80076ce:	f7fa f829 	bl	8001724 <HW_TS_RTC_Wakeup_Handler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 80076d2:	bf00      	nop
 80076d4:	bd80      	pop	{r7, pc}
	...

080076d8 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 80076d8:	b580      	push	{r7, lr}
 80076da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */
  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 80076dc:	4802      	ldr	r0, [pc, #8]	@ (80076e8 <DMA1_Channel7_IRQHandler+0x10>)
 80076de:	f000 fd33 	bl	8008148 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 80076e2:	bf00      	nop
 80076e4:	bd80      	pop	{r7, pc}
 80076e6:	bf00      	nop
 80076e8:	20000250 	.word	0x20000250

080076ec <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80076ec:	b580      	push	{r7, lr}
 80076ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80076f0:	4802      	ldr	r0, [pc, #8]	@ (80076fc <I2C1_EV_IRQHandler+0x10>)
 80076f2:	f001 fae5 	bl	8008cc0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80076f6:	bf00      	nop
 80076f8:	bd80      	pop	{r7, pc}
 80076fa:	bf00      	nop
 80076fc:	200001fc 	.word	0x200001fc

08007700 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8007700:	b580      	push	{r7, lr}
 8007702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8007704:	4802      	ldr	r0, [pc, #8]	@ (8007710 <I2C1_ER_IRQHandler+0x10>)
 8007706:	f001 faf5 	bl	8008cf4 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800770a:	bf00      	nop
 800770c:	bd80      	pop	{r7, pc}
 800770e:	bf00      	nop
 8007710:	200001fc 	.word	0x200001fc

08007714 <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 8007714:	b580      	push	{r7, lr}
 8007716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 8007718:	f008 fc06 	bl	800ff28 <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 800771c:	bf00      	nop
 800771e:	bd80      	pop	{r7, pc}

08007720 <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 8007720:	b580      	push	{r7, lr}
 8007722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 8007724:	f008 fc36 	bl	800ff94 <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 8007728:	bf00      	nop
 800772a:	bd80      	pop	{r7, pc}

0800772c <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 800772c:	b580      	push	{r7, lr}
 800772e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8007730:	f001 f80c 	bl	800874c <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 8007734:	bf00      	nop
 8007736:	bd80      	pop	{r7, pc}

08007738 <DMAMUX1_OVR_IRQHandler>:

/**
  * @brief This function handles DMAMUX1 overrun interrupt.
  */
void DMAMUX1_OVR_IRQHandler(void)
{
 8007738:	b480      	push	{r7}
 800773a:	af00      	add	r7, sp, #0
  /* USER CODE END DMAMUX1_OVR_IRQn 0 */

  /* USER CODE BEGIN DMAMUX1_OVR_IRQn 1 */

  /* USER CODE END DMAMUX1_OVR_IRQn 1 */
}
 800773c:	bf00      	nop
 800773e:	46bd      	mov	sp, r7
 8007740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007744:	4770      	bx	lr

08007746 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8007746:	b480      	push	{r7}
 8007748:	af00      	add	r7, sp, #0
  return 1;
 800774a:	2301      	movs	r3, #1
}
 800774c:	4618      	mov	r0, r3
 800774e:	46bd      	mov	sp, r7
 8007750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007754:	4770      	bx	lr

08007756 <_kill>:

int _kill(int pid, int sig)
{
 8007756:	b580      	push	{r7, lr}
 8007758:	b082      	sub	sp, #8
 800775a:	af00      	add	r7, sp, #0
 800775c:	6078      	str	r0, [r7, #4]
 800775e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8007760:	f009 f92e 	bl	80109c0 <__errno>
 8007764:	4603      	mov	r3, r0
 8007766:	2216      	movs	r2, #22
 8007768:	601a      	str	r2, [r3, #0]
  return -1;
 800776a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800776e:	4618      	mov	r0, r3
 8007770:	3708      	adds	r7, #8
 8007772:	46bd      	mov	sp, r7
 8007774:	bd80      	pop	{r7, pc}

08007776 <_exit>:

void _exit (int status)
{
 8007776:	b580      	push	{r7, lr}
 8007778:	b082      	sub	sp, #8
 800777a:	af00      	add	r7, sp, #0
 800777c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800777e:	f04f 31ff 	mov.w	r1, #4294967295
 8007782:	6878      	ldr	r0, [r7, #4]
 8007784:	f7ff ffe7 	bl	8007756 <_kill>
  while (1) {}    /* Make sure we hang here */
 8007788:	bf00      	nop
 800778a:	e7fd      	b.n	8007788 <_exit+0x12>

0800778c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800778c:	b580      	push	{r7, lr}
 800778e:	b086      	sub	sp, #24
 8007790:	af00      	add	r7, sp, #0
 8007792:	60f8      	str	r0, [r7, #12]
 8007794:	60b9      	str	r1, [r7, #8]
 8007796:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007798:	2300      	movs	r3, #0
 800779a:	617b      	str	r3, [r7, #20]
 800779c:	e00a      	b.n	80077b4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800779e:	f3af 8000 	nop.w
 80077a2:	4601      	mov	r1, r0
 80077a4:	68bb      	ldr	r3, [r7, #8]
 80077a6:	1c5a      	adds	r2, r3, #1
 80077a8:	60ba      	str	r2, [r7, #8]
 80077aa:	b2ca      	uxtb	r2, r1
 80077ac:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80077ae:	697b      	ldr	r3, [r7, #20]
 80077b0:	3301      	adds	r3, #1
 80077b2:	617b      	str	r3, [r7, #20]
 80077b4:	697a      	ldr	r2, [r7, #20]
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	429a      	cmp	r2, r3
 80077ba:	dbf0      	blt.n	800779e <_read+0x12>
  }

  return len;
 80077bc:	687b      	ldr	r3, [r7, #4]
}
 80077be:	4618      	mov	r0, r3
 80077c0:	3718      	adds	r7, #24
 80077c2:	46bd      	mov	sp, r7
 80077c4:	bd80      	pop	{r7, pc}

080077c6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80077c6:	b580      	push	{r7, lr}
 80077c8:	b086      	sub	sp, #24
 80077ca:	af00      	add	r7, sp, #0
 80077cc:	60f8      	str	r0, [r7, #12]
 80077ce:	60b9      	str	r1, [r7, #8]
 80077d0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80077d2:	2300      	movs	r3, #0
 80077d4:	617b      	str	r3, [r7, #20]
 80077d6:	e009      	b.n	80077ec <_write+0x26>
  {
    __io_putchar(*ptr++);
 80077d8:	68bb      	ldr	r3, [r7, #8]
 80077da:	1c5a      	adds	r2, r3, #1
 80077dc:	60ba      	str	r2, [r7, #8]
 80077de:	781b      	ldrb	r3, [r3, #0]
 80077e0:	4618      	mov	r0, r3
 80077e2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80077e6:	697b      	ldr	r3, [r7, #20]
 80077e8:	3301      	adds	r3, #1
 80077ea:	617b      	str	r3, [r7, #20]
 80077ec:	697a      	ldr	r2, [r7, #20]
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	429a      	cmp	r2, r3
 80077f2:	dbf1      	blt.n	80077d8 <_write+0x12>
  }
  return len;
 80077f4:	687b      	ldr	r3, [r7, #4]
}
 80077f6:	4618      	mov	r0, r3
 80077f8:	3718      	adds	r7, #24
 80077fa:	46bd      	mov	sp, r7
 80077fc:	bd80      	pop	{r7, pc}

080077fe <_close>:

int _close(int file)
{
 80077fe:	b480      	push	{r7}
 8007800:	b083      	sub	sp, #12
 8007802:	af00      	add	r7, sp, #0
 8007804:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8007806:	f04f 33ff 	mov.w	r3, #4294967295
}
 800780a:	4618      	mov	r0, r3
 800780c:	370c      	adds	r7, #12
 800780e:	46bd      	mov	sp, r7
 8007810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007814:	4770      	bx	lr

08007816 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8007816:	b480      	push	{r7}
 8007818:	b083      	sub	sp, #12
 800781a:	af00      	add	r7, sp, #0
 800781c:	6078      	str	r0, [r7, #4]
 800781e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8007820:	683b      	ldr	r3, [r7, #0]
 8007822:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8007826:	605a      	str	r2, [r3, #4]
  return 0;
 8007828:	2300      	movs	r3, #0
}
 800782a:	4618      	mov	r0, r3
 800782c:	370c      	adds	r7, #12
 800782e:	46bd      	mov	sp, r7
 8007830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007834:	4770      	bx	lr

08007836 <_isatty>:

int _isatty(int file)
{
 8007836:	b480      	push	{r7}
 8007838:	b083      	sub	sp, #12
 800783a:	af00      	add	r7, sp, #0
 800783c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800783e:	2301      	movs	r3, #1
}
 8007840:	4618      	mov	r0, r3
 8007842:	370c      	adds	r7, #12
 8007844:	46bd      	mov	sp, r7
 8007846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800784a:	4770      	bx	lr

0800784c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800784c:	b480      	push	{r7}
 800784e:	b085      	sub	sp, #20
 8007850:	af00      	add	r7, sp, #0
 8007852:	60f8      	str	r0, [r7, #12]
 8007854:	60b9      	str	r1, [r7, #8]
 8007856:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8007858:	2300      	movs	r3, #0
}
 800785a:	4618      	mov	r0, r3
 800785c:	3714      	adds	r7, #20
 800785e:	46bd      	mov	sp, r7
 8007860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007864:	4770      	bx	lr
	...

08007868 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8007868:	b580      	push	{r7, lr}
 800786a:	b086      	sub	sp, #24
 800786c:	af00      	add	r7, sp, #0
 800786e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8007870:	4a14      	ldr	r2, [pc, #80]	@ (80078c4 <_sbrk+0x5c>)
 8007872:	4b15      	ldr	r3, [pc, #84]	@ (80078c8 <_sbrk+0x60>)
 8007874:	1ad3      	subs	r3, r2, r3
 8007876:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8007878:	697b      	ldr	r3, [r7, #20]
 800787a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800787c:	4b13      	ldr	r3, [pc, #76]	@ (80078cc <_sbrk+0x64>)
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	2b00      	cmp	r3, #0
 8007882:	d102      	bne.n	800788a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8007884:	4b11      	ldr	r3, [pc, #68]	@ (80078cc <_sbrk+0x64>)
 8007886:	4a12      	ldr	r2, [pc, #72]	@ (80078d0 <_sbrk+0x68>)
 8007888:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800788a:	4b10      	ldr	r3, [pc, #64]	@ (80078cc <_sbrk+0x64>)
 800788c:	681a      	ldr	r2, [r3, #0]
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	4413      	add	r3, r2
 8007892:	693a      	ldr	r2, [r7, #16]
 8007894:	429a      	cmp	r2, r3
 8007896:	d207      	bcs.n	80078a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8007898:	f009 f892 	bl	80109c0 <__errno>
 800789c:	4603      	mov	r3, r0
 800789e:	220c      	movs	r2, #12
 80078a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80078a2:	f04f 33ff 	mov.w	r3, #4294967295
 80078a6:	e009      	b.n	80078bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80078a8:	4b08      	ldr	r3, [pc, #32]	@ (80078cc <_sbrk+0x64>)
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80078ae:	4b07      	ldr	r3, [pc, #28]	@ (80078cc <_sbrk+0x64>)
 80078b0:	681a      	ldr	r2, [r3, #0]
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	4413      	add	r3, r2
 80078b6:	4a05      	ldr	r2, [pc, #20]	@ (80078cc <_sbrk+0x64>)
 80078b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80078ba:	68fb      	ldr	r3, [r7, #12]
}
 80078bc:	4618      	mov	r0, r3
 80078be:	3718      	adds	r7, #24
 80078c0:	46bd      	mov	sp, r7
 80078c2:	bd80      	pop	{r7, pc}
 80078c4:	20030000 	.word	0x20030000
 80078c8:	00000400 	.word	0x00000400
 80078cc:	200020e4 	.word	0x200020e4
 80078d0:	200025f8 	.word	0x200025f8

080078d4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80078d4:	b480      	push	{r7}
 80078d6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 80078d8:	4b24      	ldr	r3, [pc, #144]	@ (800796c <SystemInit+0x98>)
 80078da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80078de:	4a23      	ldr	r2, [pc, #140]	@ (800796c <SystemInit+0x98>)
 80078e0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80078e4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80078e8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80078f2:	f043 0301 	orr.w	r3, r3, #1
 80078f6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 80078f8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80078fc:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 8007900:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8007902:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007906:	681a      	ldr	r2, [r3, #0]
 8007908:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800790c:	4b18      	ldr	r3, [pc, #96]	@ (8007970 <SystemInit+0x9c>)
 800790e:	4013      	ands	r3, r2
 8007910:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8007912:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007916:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800791a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800791e:	f023 0305 	bic.w	r3, r3, #5
 8007922:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8007926:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800792a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800792e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007932:	f023 0301 	bic.w	r3, r3, #1
 8007936:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 800793a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800793e:	4a0d      	ldr	r2, [pc, #52]	@ (8007974 <SystemInit+0xa0>)
 8007940:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8007942:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007946:	4a0b      	ldr	r2, [pc, #44]	@ (8007974 <SystemInit+0xa0>)
 8007948:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800794a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007954:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007958:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800795a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800795e:	2200      	movs	r2, #0
 8007960:	619a      	str	r2, [r3, #24]
}
 8007962:	bf00      	nop
 8007964:	46bd      	mov	sp, r7
 8007966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796a:	4770      	bx	lr
 800796c:	e000ed00 	.word	0xe000ed00
 8007970:	faf6fefb 	.word	0xfaf6fefb
 8007974:	22041000 	.word	0x22041000

08007978 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8007978:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800797a:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800797c:	3304      	adds	r3, #4

0800797e <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800797e:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8007980:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8007982:	d3f9      	bcc.n	8007978 <CopyDataInit>
  bx lr
 8007984:	4770      	bx	lr

08007986 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8007986:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8007988:	3004      	adds	r0, #4

0800798a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 800798a:	4288      	cmp	r0, r1
  bcc FillZerobss
 800798c:	d3fb      	bcc.n	8007986 <FillZerobss>
  bx lr
 800798e:	4770      	bx	lr

08007990 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8007990:	480c      	ldr	r0, [pc, #48]	@ (80079c4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8007992:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8007994:	f7ff ff9e 	bl	80078d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8007998:	480b      	ldr	r0, [pc, #44]	@ (80079c8 <LoopForever+0x6>)
 800799a:	490c      	ldr	r1, [pc, #48]	@ (80079cc <LoopForever+0xa>)
 800799c:	4a0c      	ldr	r2, [pc, #48]	@ (80079d0 <LoopForever+0xe>)
 800799e:	2300      	movs	r3, #0
 80079a0:	f7ff ffed 	bl	800797e <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 80079a4:	480b      	ldr	r0, [pc, #44]	@ (80079d4 <LoopForever+0x12>)
 80079a6:	490c      	ldr	r1, [pc, #48]	@ (80079d8 <LoopForever+0x16>)
 80079a8:	4a0c      	ldr	r2, [pc, #48]	@ (80079dc <LoopForever+0x1a>)
 80079aa:	2300      	movs	r3, #0
 80079ac:	f7ff ffe7 	bl	800797e <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 80079b0:	480b      	ldr	r0, [pc, #44]	@ (80079e0 <LoopForever+0x1e>)
 80079b2:	490c      	ldr	r1, [pc, #48]	@ (80079e4 <LoopForever+0x22>)
 80079b4:	2300      	movs	r3, #0
 80079b6:	f7ff ffe8 	bl	800798a <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80079ba:	f009 f807 	bl	80109cc <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80079be:	f7fe f839 	bl	8005a34 <main>

080079c2 <LoopForever>:

LoopForever:
  b LoopForever
 80079c2:	e7fe      	b.n	80079c2 <LoopForever>
  ldr   r0, =_estack
 80079c4:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 80079c8:	20000008 	.word	0x20000008
 80079cc:	200000e8 	.word	0x200000e8
 80079d0:	08012798 	.word	0x08012798
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 80079d4:	200301e4 	.word	0x200301e4
 80079d8:	20030a67 	.word	0x20030a67
 80079dc:	080128be 	.word	0x080128be
  INIT_BSS _sbss, _ebss
 80079e0:	20000138 	.word	0x20000138
 80079e4:	200025f4 	.word	0x200025f4

080079e8 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80079e8:	e7fe      	b.n	80079e8 <ADC1_IRQHandler>
	...

080079ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80079ec:	b580      	push	{r7, lr}
 80079ee:	b082      	sub	sp, #8
 80079f0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80079f2:	2300      	movs	r3, #0
 80079f4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80079f6:	4b0c      	ldr	r3, [pc, #48]	@ (8007a28 <HAL_Init+0x3c>)
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	4a0b      	ldr	r2, [pc, #44]	@ (8007a28 <HAL_Init+0x3c>)
 80079fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007a00:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007a02:	2003      	movs	r0, #3
 8007a04:	f000 f9b4 	bl	8007d70 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8007a08:	2000      	movs	r0, #0
 8007a0a:	f000 f80f 	bl	8007a2c <HAL_InitTick>
 8007a0e:	4603      	mov	r3, r0
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d002      	beq.n	8007a1a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8007a14:	2301      	movs	r3, #1
 8007a16:	71fb      	strb	r3, [r7, #7]
 8007a18:	e001      	b.n	8007a1e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8007a1a:	f7ff fd29 	bl	8007470 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8007a1e:	79fb      	ldrb	r3, [r7, #7]
}
 8007a20:	4618      	mov	r0, r3
 8007a22:	3708      	adds	r7, #8
 8007a24:	46bd      	mov	sp, r7
 8007a26:	bd80      	pop	{r7, pc}
 8007a28:	58004000 	.word	0x58004000

08007a2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007a2c:	b580      	push	{r7, lr}
 8007a2e:	b084      	sub	sp, #16
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8007a34:	2300      	movs	r3, #0
 8007a36:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8007a38:	4b17      	ldr	r3, [pc, #92]	@ (8007a98 <HAL_InitTick+0x6c>)
 8007a3a:	781b      	ldrb	r3, [r3, #0]
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d024      	beq.n	8007a8a <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8007a40:	f004 f832 	bl	800baa8 <HAL_RCC_GetHCLKFreq>
 8007a44:	4602      	mov	r2, r0
 8007a46:	4b14      	ldr	r3, [pc, #80]	@ (8007a98 <HAL_InitTick+0x6c>)
 8007a48:	781b      	ldrb	r3, [r3, #0]
 8007a4a:	4619      	mov	r1, r3
 8007a4c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8007a50:	fbb3 f3f1 	udiv	r3, r3, r1
 8007a54:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a58:	4618      	mov	r0, r3
 8007a5a:	f000 f9ca 	bl	8007df2 <HAL_SYSTICK_Config>
 8007a5e:	4603      	mov	r3, r0
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d10f      	bne.n	8007a84 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	2b0f      	cmp	r3, #15
 8007a68:	d809      	bhi.n	8007a7e <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8007a6a:	2200      	movs	r2, #0
 8007a6c:	6879      	ldr	r1, [r7, #4]
 8007a6e:	f04f 30ff 	mov.w	r0, #4294967295
 8007a72:	f000 f988 	bl	8007d86 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8007a76:	4a09      	ldr	r2, [pc, #36]	@ (8007a9c <HAL_InitTick+0x70>)
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	6013      	str	r3, [r2, #0]
 8007a7c:	e007      	b.n	8007a8e <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8007a7e:	2301      	movs	r3, #1
 8007a80:	73fb      	strb	r3, [r7, #15]
 8007a82:	e004      	b.n	8007a8e <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8007a84:	2301      	movs	r3, #1
 8007a86:	73fb      	strb	r3, [r7, #15]
 8007a88:	e001      	b.n	8007a8e <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8007a8a:	2301      	movs	r3, #1
 8007a8c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8007a8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a90:	4618      	mov	r0, r3
 8007a92:	3710      	adds	r7, #16
 8007a94:	46bd      	mov	sp, r7
 8007a96:	bd80      	pop	{r7, pc}
 8007a98:	2000005c 	.word	0x2000005c
 8007a9c:	20000058 	.word	0x20000058

08007aa0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007aa0:	b480      	push	{r7}
 8007aa2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8007aa4:	4b06      	ldr	r3, [pc, #24]	@ (8007ac0 <HAL_IncTick+0x20>)
 8007aa6:	781b      	ldrb	r3, [r3, #0]
 8007aa8:	461a      	mov	r2, r3
 8007aaa:	4b06      	ldr	r3, [pc, #24]	@ (8007ac4 <HAL_IncTick+0x24>)
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	4413      	add	r3, r2
 8007ab0:	4a04      	ldr	r2, [pc, #16]	@ (8007ac4 <HAL_IncTick+0x24>)
 8007ab2:	6013      	str	r3, [r2, #0]
}
 8007ab4:	bf00      	nop
 8007ab6:	46bd      	mov	sp, r7
 8007ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007abc:	4770      	bx	lr
 8007abe:	bf00      	nop
 8007ac0:	2000005c 	.word	0x2000005c
 8007ac4:	200020e8 	.word	0x200020e8

08007ac8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007ac8:	b480      	push	{r7}
 8007aca:	af00      	add	r7, sp, #0
  return uwTick;
 8007acc:	4b03      	ldr	r3, [pc, #12]	@ (8007adc <HAL_GetTick+0x14>)
 8007ace:	681b      	ldr	r3, [r3, #0]
}
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	46bd      	mov	sp, r7
 8007ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad8:	4770      	bx	lr
 8007ada:	bf00      	nop
 8007adc:	200020e8 	.word	0x200020e8

08007ae0 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8007ae0:	b480      	push	{r7}
 8007ae2:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8007ae4:	4b03      	ldr	r3, [pc, #12]	@ (8007af4 <HAL_GetTickPrio+0x14>)
 8007ae6:	681b      	ldr	r3, [r3, #0]
}
 8007ae8:	4618      	mov	r0, r3
 8007aea:	46bd      	mov	sp, r7
 8007aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af0:	4770      	bx	lr
 8007af2:	bf00      	nop
 8007af4:	20000058 	.word	0x20000058

08007af8 <HAL_GetTickFreq>:
  * @brief Return tick frequency.
  * @retval Tick frequency.
  *         Value of @ref HAL_TickFreqTypeDef.
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
 8007af8:	b480      	push	{r7}
 8007afa:	af00      	add	r7, sp, #0
  return uwTickFreq;
 8007afc:	4b03      	ldr	r3, [pc, #12]	@ (8007b0c <HAL_GetTickFreq+0x14>)
 8007afe:	781b      	ldrb	r3, [r3, #0]
}
 8007b00:	4618      	mov	r0, r3
 8007b02:	46bd      	mov	sp, r7
 8007b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b08:	4770      	bx	lr
 8007b0a:	bf00      	nop
 8007b0c:	2000005c 	.word	0x2000005c

08007b10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007b10:	b480      	push	{r7}
 8007b12:	b085      	sub	sp, #20
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	f003 0307 	and.w	r3, r3, #7
 8007b1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007b20:	4b0c      	ldr	r3, [pc, #48]	@ (8007b54 <__NVIC_SetPriorityGrouping+0x44>)
 8007b22:	68db      	ldr	r3, [r3, #12]
 8007b24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007b26:	68ba      	ldr	r2, [r7, #8]
 8007b28:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8007b2c:	4013      	ands	r3, r2
 8007b2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007b34:	68bb      	ldr	r3, [r7, #8]
 8007b36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007b38:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8007b3c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007b40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007b42:	4a04      	ldr	r2, [pc, #16]	@ (8007b54 <__NVIC_SetPriorityGrouping+0x44>)
 8007b44:	68bb      	ldr	r3, [r7, #8]
 8007b46:	60d3      	str	r3, [r2, #12]
}
 8007b48:	bf00      	nop
 8007b4a:	3714      	adds	r7, #20
 8007b4c:	46bd      	mov	sp, r7
 8007b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b52:	4770      	bx	lr
 8007b54:	e000ed00 	.word	0xe000ed00

08007b58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007b58:	b480      	push	{r7}
 8007b5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007b5c:	4b04      	ldr	r3, [pc, #16]	@ (8007b70 <__NVIC_GetPriorityGrouping+0x18>)
 8007b5e:	68db      	ldr	r3, [r3, #12]
 8007b60:	0a1b      	lsrs	r3, r3, #8
 8007b62:	f003 0307 	and.w	r3, r3, #7
}
 8007b66:	4618      	mov	r0, r3
 8007b68:	46bd      	mov	sp, r7
 8007b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6e:	4770      	bx	lr
 8007b70:	e000ed00 	.word	0xe000ed00

08007b74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007b74:	b480      	push	{r7}
 8007b76:	b083      	sub	sp, #12
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	4603      	mov	r3, r0
 8007b7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007b7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	db0b      	blt.n	8007b9e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007b86:	79fb      	ldrb	r3, [r7, #7]
 8007b88:	f003 021f 	and.w	r2, r3, #31
 8007b8c:	4907      	ldr	r1, [pc, #28]	@ (8007bac <__NVIC_EnableIRQ+0x38>)
 8007b8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007b92:	095b      	lsrs	r3, r3, #5
 8007b94:	2001      	movs	r0, #1
 8007b96:	fa00 f202 	lsl.w	r2, r0, r2
 8007b9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8007b9e:	bf00      	nop
 8007ba0:	370c      	adds	r7, #12
 8007ba2:	46bd      	mov	sp, r7
 8007ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba8:	4770      	bx	lr
 8007baa:	bf00      	nop
 8007bac:	e000e100 	.word	0xe000e100

08007bb0 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8007bb0:	b480      	push	{r7}
 8007bb2:	b083      	sub	sp, #12
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	4603      	mov	r3, r0
 8007bb8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007bba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	db12      	blt.n	8007be8 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007bc2:	79fb      	ldrb	r3, [r7, #7]
 8007bc4:	f003 021f 	and.w	r2, r3, #31
 8007bc8:	490a      	ldr	r1, [pc, #40]	@ (8007bf4 <__NVIC_DisableIRQ+0x44>)
 8007bca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007bce:	095b      	lsrs	r3, r3, #5
 8007bd0:	2001      	movs	r0, #1
 8007bd2:	fa00 f202 	lsl.w	r2, r0, r2
 8007bd6:	3320      	adds	r3, #32
 8007bd8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8007bdc:	f3bf 8f4f 	dsb	sy
}
 8007be0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8007be2:	f3bf 8f6f 	isb	sy
}
 8007be6:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8007be8:	bf00      	nop
 8007bea:	370c      	adds	r7, #12
 8007bec:	46bd      	mov	sp, r7
 8007bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf2:	4770      	bx	lr
 8007bf4:	e000e100 	.word	0xe000e100

08007bf8 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8007bf8:	b480      	push	{r7}
 8007bfa:	b083      	sub	sp, #12
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	4603      	mov	r3, r0
 8007c00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007c02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	db0c      	blt.n	8007c24 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007c0a:	79fb      	ldrb	r3, [r7, #7]
 8007c0c:	f003 021f 	and.w	r2, r3, #31
 8007c10:	4907      	ldr	r1, [pc, #28]	@ (8007c30 <__NVIC_SetPendingIRQ+0x38>)
 8007c12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007c16:	095b      	lsrs	r3, r3, #5
 8007c18:	2001      	movs	r0, #1
 8007c1a:	fa00 f202 	lsl.w	r2, r0, r2
 8007c1e:	3340      	adds	r3, #64	@ 0x40
 8007c20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8007c24:	bf00      	nop
 8007c26:	370c      	adds	r7, #12
 8007c28:	46bd      	mov	sp, r7
 8007c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2e:	4770      	bx	lr
 8007c30:	e000e100 	.word	0xe000e100

08007c34 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8007c34:	b480      	push	{r7}
 8007c36:	b083      	sub	sp, #12
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	4603      	mov	r3, r0
 8007c3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007c3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	db0c      	blt.n	8007c60 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007c46:	79fb      	ldrb	r3, [r7, #7]
 8007c48:	f003 021f 	and.w	r2, r3, #31
 8007c4c:	4907      	ldr	r1, [pc, #28]	@ (8007c6c <__NVIC_ClearPendingIRQ+0x38>)
 8007c4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007c52:	095b      	lsrs	r3, r3, #5
 8007c54:	2001      	movs	r0, #1
 8007c56:	fa00 f202 	lsl.w	r2, r0, r2
 8007c5a:	3360      	adds	r3, #96	@ 0x60
 8007c5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8007c60:	bf00      	nop
 8007c62:	370c      	adds	r7, #12
 8007c64:	46bd      	mov	sp, r7
 8007c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c6a:	4770      	bx	lr
 8007c6c:	e000e100 	.word	0xe000e100

08007c70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007c70:	b480      	push	{r7}
 8007c72:	b083      	sub	sp, #12
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	4603      	mov	r3, r0
 8007c78:	6039      	str	r1, [r7, #0]
 8007c7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007c7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	db0a      	blt.n	8007c9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007c84:	683b      	ldr	r3, [r7, #0]
 8007c86:	b2da      	uxtb	r2, r3
 8007c88:	490c      	ldr	r1, [pc, #48]	@ (8007cbc <__NVIC_SetPriority+0x4c>)
 8007c8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007c8e:	0112      	lsls	r2, r2, #4
 8007c90:	b2d2      	uxtb	r2, r2
 8007c92:	440b      	add	r3, r1
 8007c94:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007c98:	e00a      	b.n	8007cb0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007c9a:	683b      	ldr	r3, [r7, #0]
 8007c9c:	b2da      	uxtb	r2, r3
 8007c9e:	4908      	ldr	r1, [pc, #32]	@ (8007cc0 <__NVIC_SetPriority+0x50>)
 8007ca0:	79fb      	ldrb	r3, [r7, #7]
 8007ca2:	f003 030f 	and.w	r3, r3, #15
 8007ca6:	3b04      	subs	r3, #4
 8007ca8:	0112      	lsls	r2, r2, #4
 8007caa:	b2d2      	uxtb	r2, r2
 8007cac:	440b      	add	r3, r1
 8007cae:	761a      	strb	r2, [r3, #24]
}
 8007cb0:	bf00      	nop
 8007cb2:	370c      	adds	r7, #12
 8007cb4:	46bd      	mov	sp, r7
 8007cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cba:	4770      	bx	lr
 8007cbc:	e000e100 	.word	0xe000e100
 8007cc0:	e000ed00 	.word	0xe000ed00

08007cc4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007cc4:	b480      	push	{r7}
 8007cc6:	b089      	sub	sp, #36	@ 0x24
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	60f8      	str	r0, [r7, #12]
 8007ccc:	60b9      	str	r1, [r7, #8]
 8007cce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	f003 0307 	and.w	r3, r3, #7
 8007cd6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007cd8:	69fb      	ldr	r3, [r7, #28]
 8007cda:	f1c3 0307 	rsb	r3, r3, #7
 8007cde:	2b04      	cmp	r3, #4
 8007ce0:	bf28      	it	cs
 8007ce2:	2304      	movcs	r3, #4
 8007ce4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007ce6:	69fb      	ldr	r3, [r7, #28]
 8007ce8:	3304      	adds	r3, #4
 8007cea:	2b06      	cmp	r3, #6
 8007cec:	d902      	bls.n	8007cf4 <NVIC_EncodePriority+0x30>
 8007cee:	69fb      	ldr	r3, [r7, #28]
 8007cf0:	3b03      	subs	r3, #3
 8007cf2:	e000      	b.n	8007cf6 <NVIC_EncodePriority+0x32>
 8007cf4:	2300      	movs	r3, #0
 8007cf6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007cf8:	f04f 32ff 	mov.w	r2, #4294967295
 8007cfc:	69bb      	ldr	r3, [r7, #24]
 8007cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8007d02:	43da      	mvns	r2, r3
 8007d04:	68bb      	ldr	r3, [r7, #8]
 8007d06:	401a      	ands	r2, r3
 8007d08:	697b      	ldr	r3, [r7, #20]
 8007d0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007d0c:	f04f 31ff 	mov.w	r1, #4294967295
 8007d10:	697b      	ldr	r3, [r7, #20]
 8007d12:	fa01 f303 	lsl.w	r3, r1, r3
 8007d16:	43d9      	mvns	r1, r3
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007d1c:	4313      	orrs	r3, r2
         );
}
 8007d1e:	4618      	mov	r0, r3
 8007d20:	3724      	adds	r7, #36	@ 0x24
 8007d22:	46bd      	mov	sp, r7
 8007d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d28:	4770      	bx	lr
	...

08007d2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007d2c:	b580      	push	{r7, lr}
 8007d2e:	b082      	sub	sp, #8
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	3b01      	subs	r3, #1
 8007d38:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007d3c:	d301      	bcc.n	8007d42 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007d3e:	2301      	movs	r3, #1
 8007d40:	e00f      	b.n	8007d62 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007d42:	4a0a      	ldr	r2, [pc, #40]	@ (8007d6c <SysTick_Config+0x40>)
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	3b01      	subs	r3, #1
 8007d48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007d4a:	210f      	movs	r1, #15
 8007d4c:	f04f 30ff 	mov.w	r0, #4294967295
 8007d50:	f7ff ff8e 	bl	8007c70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007d54:	4b05      	ldr	r3, [pc, #20]	@ (8007d6c <SysTick_Config+0x40>)
 8007d56:	2200      	movs	r2, #0
 8007d58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007d5a:	4b04      	ldr	r3, [pc, #16]	@ (8007d6c <SysTick_Config+0x40>)
 8007d5c:	2207      	movs	r2, #7
 8007d5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007d60:	2300      	movs	r3, #0
}
 8007d62:	4618      	mov	r0, r3
 8007d64:	3708      	adds	r7, #8
 8007d66:	46bd      	mov	sp, r7
 8007d68:	bd80      	pop	{r7, pc}
 8007d6a:	bf00      	nop
 8007d6c:	e000e010 	.word	0xe000e010

08007d70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007d70:	b580      	push	{r7, lr}
 8007d72:	b082      	sub	sp, #8
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007d78:	6878      	ldr	r0, [r7, #4]
 8007d7a:	f7ff fec9 	bl	8007b10 <__NVIC_SetPriorityGrouping>
}
 8007d7e:	bf00      	nop
 8007d80:	3708      	adds	r7, #8
 8007d82:	46bd      	mov	sp, r7
 8007d84:	bd80      	pop	{r7, pc}

08007d86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007d86:	b580      	push	{r7, lr}
 8007d88:	b086      	sub	sp, #24
 8007d8a:	af00      	add	r7, sp, #0
 8007d8c:	4603      	mov	r3, r0
 8007d8e:	60b9      	str	r1, [r7, #8]
 8007d90:	607a      	str	r2, [r7, #4]
 8007d92:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8007d94:	f7ff fee0 	bl	8007b58 <__NVIC_GetPriorityGrouping>
 8007d98:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007d9a:	687a      	ldr	r2, [r7, #4]
 8007d9c:	68b9      	ldr	r1, [r7, #8]
 8007d9e:	6978      	ldr	r0, [r7, #20]
 8007da0:	f7ff ff90 	bl	8007cc4 <NVIC_EncodePriority>
 8007da4:	4602      	mov	r2, r0
 8007da6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007daa:	4611      	mov	r1, r2
 8007dac:	4618      	mov	r0, r3
 8007dae:	f7ff ff5f 	bl	8007c70 <__NVIC_SetPriority>
}
 8007db2:	bf00      	nop
 8007db4:	3718      	adds	r7, #24
 8007db6:	46bd      	mov	sp, r7
 8007db8:	bd80      	pop	{r7, pc}

08007dba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007dba:	b580      	push	{r7, lr}
 8007dbc:	b082      	sub	sp, #8
 8007dbe:	af00      	add	r7, sp, #0
 8007dc0:	4603      	mov	r3, r0
 8007dc2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007dc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007dc8:	4618      	mov	r0, r3
 8007dca:	f7ff fed3 	bl	8007b74 <__NVIC_EnableIRQ>
}
 8007dce:	bf00      	nop
 8007dd0:	3708      	adds	r7, #8
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	bd80      	pop	{r7, pc}

08007dd6 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8007dd6:	b580      	push	{r7, lr}
 8007dd8:	b082      	sub	sp, #8
 8007dda:	af00      	add	r7, sp, #0
 8007ddc:	4603      	mov	r3, r0
 8007dde:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8007de0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007de4:	4618      	mov	r0, r3
 8007de6:	f7ff fee3 	bl	8007bb0 <__NVIC_DisableIRQ>
}
 8007dea:	bf00      	nop
 8007dec:	3708      	adds	r7, #8
 8007dee:	46bd      	mov	sp, r7
 8007df0:	bd80      	pop	{r7, pc}

08007df2 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007df2:	b580      	push	{r7, lr}
 8007df4:	b082      	sub	sp, #8
 8007df6:	af00      	add	r7, sp, #0
 8007df8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8007dfa:	6878      	ldr	r0, [r7, #4]
 8007dfc:	f7ff ff96 	bl	8007d2c <SysTick_Config>
 8007e00:	4603      	mov	r3, r0
}
 8007e02:	4618      	mov	r0, r3
 8007e04:	3708      	adds	r7, #8
 8007e06:	46bd      	mov	sp, r7
 8007e08:	bd80      	pop	{r7, pc}

08007e0a <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8007e0a:	b580      	push	{r7, lr}
 8007e0c:	b082      	sub	sp, #8
 8007e0e:	af00      	add	r7, sp, #0
 8007e10:	4603      	mov	r3, r0
 8007e12:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8007e14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007e18:	4618      	mov	r0, r3
 8007e1a:	f7ff feed 	bl	8007bf8 <__NVIC_SetPendingIRQ>
}
 8007e1e:	bf00      	nop
 8007e20:	3708      	adds	r7, #8
 8007e22:	46bd      	mov	sp, r7
 8007e24:	bd80      	pop	{r7, pc}

08007e26 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8007e26:	b580      	push	{r7, lr}
 8007e28:	b082      	sub	sp, #8
 8007e2a:	af00      	add	r7, sp, #0
 8007e2c:	4603      	mov	r3, r0
 8007e2e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8007e30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007e34:	4618      	mov	r0, r3
 8007e36:	f7ff fefd 	bl	8007c34 <__NVIC_ClearPendingIRQ>
}
 8007e3a:	bf00      	nop
 8007e3c:	3708      	adds	r7, #8
 8007e3e:	46bd      	mov	sp, r7
 8007e40:	bd80      	pop	{r7, pc}
	...

08007e44 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007e44:	b580      	push	{r7, lr}
 8007e46:	b084      	sub	sp, #16
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d101      	bne.n	8007e56 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8007e52:	2301      	movs	r3, #1
 8007e54:	e08e      	b.n	8007f74 <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	461a      	mov	r2, r3
 8007e5c:	4b47      	ldr	r3, [pc, #284]	@ (8007f7c <HAL_DMA_Init+0x138>)
 8007e5e:	429a      	cmp	r2, r3
 8007e60:	d80f      	bhi.n	8007e82 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	461a      	mov	r2, r3
 8007e68:	4b45      	ldr	r3, [pc, #276]	@ (8007f80 <HAL_DMA_Init+0x13c>)
 8007e6a:	4413      	add	r3, r2
 8007e6c:	4a45      	ldr	r2, [pc, #276]	@ (8007f84 <HAL_DMA_Init+0x140>)
 8007e6e:	fba2 2303 	umull	r2, r3, r2, r3
 8007e72:	091b      	lsrs	r3, r3, #4
 8007e74:	009a      	lsls	r2, r3, #2
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	4a42      	ldr	r2, [pc, #264]	@ (8007f88 <HAL_DMA_Init+0x144>)
 8007e7e:	641a      	str	r2, [r3, #64]	@ 0x40
 8007e80:	e00e      	b.n	8007ea0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	461a      	mov	r2, r3
 8007e88:	4b40      	ldr	r3, [pc, #256]	@ (8007f8c <HAL_DMA_Init+0x148>)
 8007e8a:	4413      	add	r3, r2
 8007e8c:	4a3d      	ldr	r2, [pc, #244]	@ (8007f84 <HAL_DMA_Init+0x140>)
 8007e8e:	fba2 2303 	umull	r2, r3, r2, r3
 8007e92:	091b      	lsrs	r3, r3, #4
 8007e94:	009a      	lsls	r2, r3, #2
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	4a3c      	ldr	r2, [pc, #240]	@ (8007f90 <HAL_DMA_Init+0x14c>)
 8007e9e:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	2202      	movs	r2, #2
 8007ea4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8007eb6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007eba:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8007ec4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	691b      	ldr	r3, [r3, #16]
 8007eca:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007ed0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	699b      	ldr	r3, [r3, #24]
 8007ed6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007edc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	6a1b      	ldr	r3, [r3, #32]
 8007ee2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8007ee4:	68fa      	ldr	r2, [r7, #12]
 8007ee6:	4313      	orrs	r3, r2
 8007ee8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	68fa      	ldr	r2, [r7, #12]
 8007ef0:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8007ef2:	6878      	ldr	r0, [r7, #4]
 8007ef4:	f000 fa24 	bl	8008340 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	689b      	ldr	r3, [r3, #8]
 8007efc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007f00:	d102      	bne.n	8007f08 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	2200      	movs	r2, #0
 8007f06:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	685a      	ldr	r2, [r3, #4]
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007f10:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8007f14:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007f1a:	687a      	ldr	r2, [r7, #4]
 8007f1c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8007f1e:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	685b      	ldr	r3, [r3, #4]
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d010      	beq.n	8007f4a <HAL_DMA_Init+0x106>
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	685b      	ldr	r3, [r3, #4]
 8007f2c:	2b04      	cmp	r3, #4
 8007f2e:	d80c      	bhi.n	8007f4a <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8007f30:	6878      	ldr	r0, [r7, #4]
 8007f32:	f000 fa43 	bl	80083bc <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f3a:	2200      	movs	r2, #0
 8007f3c:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007f42:	687a      	ldr	r2, [r7, #4]
 8007f44:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8007f46:	605a      	str	r2, [r3, #4]
 8007f48:	e008      	b.n	8007f5c <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	2200      	movs	r2, #0
 8007f4e:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	2200      	movs	r2, #0
 8007f54:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	2200      	movs	r2, #0
 8007f5a:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	2200      	movs	r2, #0
 8007f60:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	2201      	movs	r2, #1
 8007f66:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	2200      	movs	r2, #0
 8007f6e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8007f72:	2300      	movs	r3, #0
}
 8007f74:	4618      	mov	r0, r3
 8007f76:	3710      	adds	r7, #16
 8007f78:	46bd      	mov	sp, r7
 8007f7a:	bd80      	pop	{r7, pc}
 8007f7c:	40020407 	.word	0x40020407
 8007f80:	bffdfff8 	.word	0xbffdfff8
 8007f84:	cccccccd 	.word	0xcccccccd
 8007f88:	40020000 	.word	0x40020000
 8007f8c:	bffdfbf8 	.word	0xbffdfbf8
 8007f90:	40020400 	.word	0x40020400

08007f94 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8007f94:	b580      	push	{r7, lr}
 8007f96:	b086      	sub	sp, #24
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	60f8      	str	r0, [r7, #12]
 8007f9c:	60b9      	str	r1, [r7, #8]
 8007f9e:	607a      	str	r2, [r7, #4]
 8007fa0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007fa2:	2300      	movs	r3, #0
 8007fa4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8007fac:	2b01      	cmp	r3, #1
 8007fae:	d101      	bne.n	8007fb4 <HAL_DMA_Start_IT+0x20>
 8007fb0:	2302      	movs	r3, #2
 8007fb2:	e066      	b.n	8008082 <HAL_DMA_Start_IT+0xee>
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	2201      	movs	r2, #1
 8007fb8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8007fc2:	b2db      	uxtb	r3, r3
 8007fc4:	2b01      	cmp	r3, #1
 8007fc6:	d155      	bne.n	8008074 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	2202      	movs	r2, #2
 8007fcc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	2200      	movs	r2, #0
 8007fd4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	681a      	ldr	r2, [r3, #0]
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	f022 0201 	bic.w	r2, r2, #1
 8007fe4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007fe6:	683b      	ldr	r3, [r7, #0]
 8007fe8:	687a      	ldr	r2, [r7, #4]
 8007fea:	68b9      	ldr	r1, [r7, #8]
 8007fec:	68f8      	ldr	r0, [r7, #12]
 8007fee:	f000 f968 	bl	80082c2 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d008      	beq.n	800800c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	681a      	ldr	r2, [r3, #0]
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	f042 020e 	orr.w	r2, r2, #14
 8008008:	601a      	str	r2, [r3, #0]
 800800a:	e00f      	b.n	800802c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	681a      	ldr	r2, [r3, #0]
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	f022 0204 	bic.w	r2, r2, #4
 800801a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	681a      	ldr	r2, [r3, #0]
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	f042 020a 	orr.w	r2, r2, #10
 800802a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008036:	2b00      	cmp	r3, #0
 8008038:	d007      	beq.n	800804a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800803e:	681a      	ldr	r2, [r3, #0]
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008044:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008048:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800804e:	2b00      	cmp	r3, #0
 8008050:	d007      	beq.n	8008062 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008056:	681a      	ldr	r2, [r3, #0]
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800805c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008060:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	681a      	ldr	r2, [r3, #0]
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	f042 0201 	orr.w	r2, r2, #1
 8008070:	601a      	str	r2, [r3, #0]
 8008072:	e005      	b.n	8008080 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	2200      	movs	r2, #0
 8008078:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800807c:	2302      	movs	r3, #2
 800807e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8008080:	7dfb      	ldrb	r3, [r7, #23]
}
 8008082:	4618      	mov	r0, r3
 8008084:	3718      	adds	r7, #24
 8008086:	46bd      	mov	sp, r7
 8008088:	bd80      	pop	{r7, pc}

0800808a <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800808a:	b580      	push	{r7, lr}
 800808c:	b084      	sub	sp, #16
 800808e:	af00      	add	r7, sp, #0
 8008090:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008092:	2300      	movs	r3, #0
 8008094:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800809c:	b2db      	uxtb	r3, r3
 800809e:	2b02      	cmp	r3, #2
 80080a0:	d005      	beq.n	80080ae <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	2204      	movs	r2, #4
 80080a6:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80080a8:	2301      	movs	r3, #1
 80080aa:	73fb      	strb	r3, [r7, #15]
 80080ac:	e047      	b.n	800813e <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	681a      	ldr	r2, [r3, #0]
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	f022 020e 	bic.w	r2, r2, #14
 80080bc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	681a      	ldr	r2, [r3, #0]
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	f022 0201 	bic.w	r2, r2, #1
 80080cc:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80080d2:	681a      	ldr	r2, [r3, #0]
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80080d8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80080dc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80080e2:	f003 021c 	and.w	r2, r3, #28
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80080ea:	2101      	movs	r1, #1
 80080ec:	fa01 f202 	lsl.w	r2, r1, r2
 80080f0:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80080f6:	687a      	ldr	r2, [r7, #4]
 80080f8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80080fa:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008100:	2b00      	cmp	r3, #0
 8008102:	d00c      	beq.n	800811e <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008108:	681a      	ldr	r2, [r3, #0]
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800810e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008112:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008118:	687a      	ldr	r2, [r7, #4]
 800811a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800811c:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	2201      	movs	r2, #1
 8008122:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	2200      	movs	r2, #0
 800812a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008132:	2b00      	cmp	r3, #0
 8008134:	d003      	beq.n	800813e <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800813a:	6878      	ldr	r0, [r7, #4]
 800813c:	4798      	blx	r3
    }
  }
  return status;
 800813e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008140:	4618      	mov	r0, r3
 8008142:	3710      	adds	r7, #16
 8008144:	46bd      	mov	sp, r7
 8008146:	bd80      	pop	{r7, pc}

08008148 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8008148:	b580      	push	{r7, lr}
 800814a:	b084      	sub	sp, #16
 800814c:	af00      	add	r7, sp, #0
 800814e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008164:	f003 031c 	and.w	r3, r3, #28
 8008168:	2204      	movs	r2, #4
 800816a:	409a      	lsls	r2, r3
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	4013      	ands	r3, r2
 8008170:	2b00      	cmp	r3, #0
 8008172:	d026      	beq.n	80081c2 <HAL_DMA_IRQHandler+0x7a>
 8008174:	68bb      	ldr	r3, [r7, #8]
 8008176:	f003 0304 	and.w	r3, r3, #4
 800817a:	2b00      	cmp	r3, #0
 800817c:	d021      	beq.n	80081c2 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	f003 0320 	and.w	r3, r3, #32
 8008188:	2b00      	cmp	r3, #0
 800818a:	d107      	bne.n	800819c <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	681a      	ldr	r2, [r3, #0]
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	f022 0204 	bic.w	r2, r2, #4
 800819a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80081a0:	f003 021c 	and.w	r2, r3, #28
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80081a8:	2104      	movs	r1, #4
 80081aa:	fa01 f202 	lsl.w	r2, r1, r2
 80081ae:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d071      	beq.n	800829c <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80081bc:	6878      	ldr	r0, [r7, #4]
 80081be:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80081c0:	e06c      	b.n	800829c <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80081c6:	f003 031c 	and.w	r3, r3, #28
 80081ca:	2202      	movs	r2, #2
 80081cc:	409a      	lsls	r2, r3
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	4013      	ands	r3, r2
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d02e      	beq.n	8008234 <HAL_DMA_IRQHandler+0xec>
 80081d6:	68bb      	ldr	r3, [r7, #8]
 80081d8:	f003 0302 	and.w	r3, r3, #2
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d029      	beq.n	8008234 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	f003 0320 	and.w	r3, r3, #32
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d10b      	bne.n	8008206 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	681a      	ldr	r2, [r3, #0]
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	f022 020a 	bic.w	r2, r2, #10
 80081fc:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	2201      	movs	r2, #1
 8008202:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800820a:	f003 021c 	and.w	r2, r3, #28
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008212:	2102      	movs	r1, #2
 8008214:	fa01 f202 	lsl.w	r2, r1, r2
 8008218:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	2200      	movs	r2, #0
 800821e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008226:	2b00      	cmp	r3, #0
 8008228:	d038      	beq.n	800829c <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800822e:	6878      	ldr	r0, [r7, #4]
 8008230:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8008232:	e033      	b.n	800829c <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008238:	f003 031c 	and.w	r3, r3, #28
 800823c:	2208      	movs	r2, #8
 800823e:	409a      	lsls	r2, r3
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	4013      	ands	r3, r2
 8008244:	2b00      	cmp	r3, #0
 8008246:	d02a      	beq.n	800829e <HAL_DMA_IRQHandler+0x156>
 8008248:	68bb      	ldr	r3, [r7, #8]
 800824a:	f003 0308 	and.w	r3, r3, #8
 800824e:	2b00      	cmp	r3, #0
 8008250:	d025      	beq.n	800829e <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	681a      	ldr	r2, [r3, #0]
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	f022 020e 	bic.w	r2, r2, #14
 8008260:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008266:	f003 021c 	and.w	r2, r3, #28
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800826e:	2101      	movs	r1, #1
 8008270:	fa01 f202 	lsl.w	r2, r1, r2
 8008274:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	2201      	movs	r2, #1
 800827a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	2201      	movs	r2, #1
 8008280:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	2200      	movs	r2, #0
 8008288:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008290:	2b00      	cmp	r3, #0
 8008292:	d004      	beq.n	800829e <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008298:	6878      	ldr	r0, [r7, #4]
 800829a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800829c:	bf00      	nop
 800829e:	bf00      	nop
}
 80082a0:	3710      	adds	r7, #16
 80082a2:	46bd      	mov	sp, r7
 80082a4:	bd80      	pop	{r7, pc}

080082a6 <HAL_DMA_GetState>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80082a6:	b480      	push	{r7}
 80082a8:	b083      	sub	sp, #12
 80082aa:	af00      	add	r7, sp, #0
 80082ac:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80082b4:	b2db      	uxtb	r3, r3
}
 80082b6:	4618      	mov	r0, r3
 80082b8:	370c      	adds	r7, #12
 80082ba:	46bd      	mov	sp, r7
 80082bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c0:	4770      	bx	lr

080082c2 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80082c2:	b480      	push	{r7}
 80082c4:	b085      	sub	sp, #20
 80082c6:	af00      	add	r7, sp, #0
 80082c8:	60f8      	str	r0, [r7, #12]
 80082ca:	60b9      	str	r1, [r7, #8]
 80082cc:	607a      	str	r2, [r7, #4]
 80082ce:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80082d4:	68fa      	ldr	r2, [r7, #12]
 80082d6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80082d8:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d004      	beq.n	80082ec <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80082e6:	68fa      	ldr	r2, [r7, #12]
 80082e8:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80082ea:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80082f0:	f003 021c 	and.w	r2, r3, #28
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80082f8:	2101      	movs	r1, #1
 80082fa:	fa01 f202 	lsl.w	r2, r1, r2
 80082fe:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	683a      	ldr	r2, [r7, #0]
 8008306:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	689b      	ldr	r3, [r3, #8]
 800830c:	2b10      	cmp	r3, #16
 800830e:	d108      	bne.n	8008322 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	687a      	ldr	r2, [r7, #4]
 8008316:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	68ba      	ldr	r2, [r7, #8]
 800831e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8008320:	e007      	b.n	8008332 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	68ba      	ldr	r2, [r7, #8]
 8008328:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	687a      	ldr	r2, [r7, #4]
 8008330:	60da      	str	r2, [r3, #12]
}
 8008332:	bf00      	nop
 8008334:	3714      	adds	r7, #20
 8008336:	46bd      	mov	sp, r7
 8008338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800833c:	4770      	bx	lr
	...

08008340 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008340:	b480      	push	{r7}
 8008342:	b085      	sub	sp, #20
 8008344:	af00      	add	r7, sp, #0
 8008346:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	461a      	mov	r2, r3
 800834e:	4b17      	ldr	r3, [pc, #92]	@ (80083ac <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8008350:	429a      	cmp	r2, r3
 8008352:	d80a      	bhi.n	800836a <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008358:	089b      	lsrs	r3, r3, #2
 800835a:	009b      	lsls	r3, r3, #2
 800835c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8008360:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 8008364:	687a      	ldr	r2, [r7, #4]
 8008366:	6493      	str	r3, [r2, #72]	@ 0x48
 8008368:	e007      	b.n	800837a <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800836e:	089b      	lsrs	r3, r3, #2
 8008370:	009a      	lsls	r2, r3, #2
 8008372:	4b0f      	ldr	r3, [pc, #60]	@ (80083b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8008374:	4413      	add	r3, r2
 8008376:	687a      	ldr	r2, [r7, #4]
 8008378:	6493      	str	r3, [r2, #72]	@ 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif /* DMA2 */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	b2db      	uxtb	r3, r3
 8008380:	3b08      	subs	r3, #8
 8008382:	4a0c      	ldr	r2, [pc, #48]	@ (80083b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8008384:	fba2 2303 	umull	r2, r3, r2, r3
 8008388:	091b      	lsrs	r3, r3, #4
 800838a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	4a0a      	ldr	r2, [pc, #40]	@ (80083b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8008390:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	f003 031f 	and.w	r3, r3, #31
 8008398:	2201      	movs	r2, #1
 800839a:	409a      	lsls	r2, r3
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80083a0:	bf00      	nop
 80083a2:	3714      	adds	r7, #20
 80083a4:	46bd      	mov	sp, r7
 80083a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083aa:	4770      	bx	lr
 80083ac:	40020407 	.word	0x40020407
 80083b0:	4002081c 	.word	0x4002081c
 80083b4:	cccccccd 	.word	0xcccccccd
 80083b8:	40020880 	.word	0x40020880

080083bc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80083bc:	b480      	push	{r7}
 80083be:	b085      	sub	sp, #20
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	685b      	ldr	r3, [r3, #4]
 80083c8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80083cc:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80083ce:	68fa      	ldr	r2, [r7, #12]
 80083d0:	4b0b      	ldr	r3, [pc, #44]	@ (8008400 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80083d2:	4413      	add	r3, r2
 80083d4:	009b      	lsls	r3, r3, #2
 80083d6:	461a      	mov	r2, r3
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	4a09      	ldr	r2, [pc, #36]	@ (8008404 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 80083e0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	3b01      	subs	r3, #1
 80083e6:	f003 0303 	and.w	r3, r3, #3
 80083ea:	2201      	movs	r2, #1
 80083ec:	409a      	lsls	r2, r3
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80083f2:	bf00      	nop
 80083f4:	3714      	adds	r7, #20
 80083f6:	46bd      	mov	sp, r7
 80083f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083fc:	4770      	bx	lr
 80083fe:	bf00      	nop
 8008400:	1000823f 	.word	0x1000823f
 8008404:	40020940 	.word	0x40020940

08008408 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008408:	b480      	push	{r7}
 800840a:	b087      	sub	sp, #28
 800840c:	af00      	add	r7, sp, #0
 800840e:	6078      	str	r0, [r7, #4]
 8008410:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8008412:	2300      	movs	r3, #0
 8008414:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008416:	e14c      	b.n	80086b2 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8008418:	683b      	ldr	r3, [r7, #0]
 800841a:	681a      	ldr	r2, [r3, #0]
 800841c:	2101      	movs	r1, #1
 800841e:	697b      	ldr	r3, [r7, #20]
 8008420:	fa01 f303 	lsl.w	r3, r1, r3
 8008424:	4013      	ands	r3, r2
 8008426:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	2b00      	cmp	r3, #0
 800842c:	f000 813e 	beq.w	80086ac <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008430:	683b      	ldr	r3, [r7, #0]
 8008432:	685b      	ldr	r3, [r3, #4]
 8008434:	f003 0303 	and.w	r3, r3, #3
 8008438:	2b01      	cmp	r3, #1
 800843a:	d005      	beq.n	8008448 <HAL_GPIO_Init+0x40>
 800843c:	683b      	ldr	r3, [r7, #0]
 800843e:	685b      	ldr	r3, [r3, #4]
 8008440:	f003 0303 	and.w	r3, r3, #3
 8008444:	2b02      	cmp	r3, #2
 8008446:	d130      	bne.n	80084aa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	689b      	ldr	r3, [r3, #8]
 800844c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800844e:	697b      	ldr	r3, [r7, #20]
 8008450:	005b      	lsls	r3, r3, #1
 8008452:	2203      	movs	r2, #3
 8008454:	fa02 f303 	lsl.w	r3, r2, r3
 8008458:	43db      	mvns	r3, r3
 800845a:	693a      	ldr	r2, [r7, #16]
 800845c:	4013      	ands	r3, r2
 800845e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8008460:	683b      	ldr	r3, [r7, #0]
 8008462:	68da      	ldr	r2, [r3, #12]
 8008464:	697b      	ldr	r3, [r7, #20]
 8008466:	005b      	lsls	r3, r3, #1
 8008468:	fa02 f303 	lsl.w	r3, r2, r3
 800846c:	693a      	ldr	r2, [r7, #16]
 800846e:	4313      	orrs	r3, r2
 8008470:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	693a      	ldr	r2, [r7, #16]
 8008476:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	685b      	ldr	r3, [r3, #4]
 800847c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800847e:	2201      	movs	r2, #1
 8008480:	697b      	ldr	r3, [r7, #20]
 8008482:	fa02 f303 	lsl.w	r3, r2, r3
 8008486:	43db      	mvns	r3, r3
 8008488:	693a      	ldr	r2, [r7, #16]
 800848a:	4013      	ands	r3, r2
 800848c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800848e:	683b      	ldr	r3, [r7, #0]
 8008490:	685b      	ldr	r3, [r3, #4]
 8008492:	091b      	lsrs	r3, r3, #4
 8008494:	f003 0201 	and.w	r2, r3, #1
 8008498:	697b      	ldr	r3, [r7, #20]
 800849a:	fa02 f303 	lsl.w	r3, r2, r3
 800849e:	693a      	ldr	r2, [r7, #16]
 80084a0:	4313      	orrs	r3, r2
 80084a2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	693a      	ldr	r2, [r7, #16]
 80084a8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80084aa:	683b      	ldr	r3, [r7, #0]
 80084ac:	685b      	ldr	r3, [r3, #4]
 80084ae:	f003 0303 	and.w	r3, r3, #3
 80084b2:	2b03      	cmp	r3, #3
 80084b4:	d017      	beq.n	80084e6 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	68db      	ldr	r3, [r3, #12]
 80084ba:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80084bc:	697b      	ldr	r3, [r7, #20]
 80084be:	005b      	lsls	r3, r3, #1
 80084c0:	2203      	movs	r2, #3
 80084c2:	fa02 f303 	lsl.w	r3, r2, r3
 80084c6:	43db      	mvns	r3, r3
 80084c8:	693a      	ldr	r2, [r7, #16]
 80084ca:	4013      	ands	r3, r2
 80084cc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80084ce:	683b      	ldr	r3, [r7, #0]
 80084d0:	689a      	ldr	r2, [r3, #8]
 80084d2:	697b      	ldr	r3, [r7, #20]
 80084d4:	005b      	lsls	r3, r3, #1
 80084d6:	fa02 f303 	lsl.w	r3, r2, r3
 80084da:	693a      	ldr	r2, [r7, #16]
 80084dc:	4313      	orrs	r3, r2
 80084de:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	693a      	ldr	r2, [r7, #16]
 80084e4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80084e6:	683b      	ldr	r3, [r7, #0]
 80084e8:	685b      	ldr	r3, [r3, #4]
 80084ea:	f003 0303 	and.w	r3, r3, #3
 80084ee:	2b02      	cmp	r3, #2
 80084f0:	d123      	bne.n	800853a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80084f2:	697b      	ldr	r3, [r7, #20]
 80084f4:	08da      	lsrs	r2, r3, #3
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	3208      	adds	r2, #8
 80084fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084fe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8008500:	697b      	ldr	r3, [r7, #20]
 8008502:	f003 0307 	and.w	r3, r3, #7
 8008506:	009b      	lsls	r3, r3, #2
 8008508:	220f      	movs	r2, #15
 800850a:	fa02 f303 	lsl.w	r3, r2, r3
 800850e:	43db      	mvns	r3, r3
 8008510:	693a      	ldr	r2, [r7, #16]
 8008512:	4013      	ands	r3, r2
 8008514:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8008516:	683b      	ldr	r3, [r7, #0]
 8008518:	691a      	ldr	r2, [r3, #16]
 800851a:	697b      	ldr	r3, [r7, #20]
 800851c:	f003 0307 	and.w	r3, r3, #7
 8008520:	009b      	lsls	r3, r3, #2
 8008522:	fa02 f303 	lsl.w	r3, r2, r3
 8008526:	693a      	ldr	r2, [r7, #16]
 8008528:	4313      	orrs	r3, r2
 800852a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800852c:	697b      	ldr	r3, [r7, #20]
 800852e:	08da      	lsrs	r2, r3, #3
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	3208      	adds	r2, #8
 8008534:	6939      	ldr	r1, [r7, #16]
 8008536:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8008540:	697b      	ldr	r3, [r7, #20]
 8008542:	005b      	lsls	r3, r3, #1
 8008544:	2203      	movs	r2, #3
 8008546:	fa02 f303 	lsl.w	r3, r2, r3
 800854a:	43db      	mvns	r3, r3
 800854c:	693a      	ldr	r2, [r7, #16]
 800854e:	4013      	ands	r3, r2
 8008550:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8008552:	683b      	ldr	r3, [r7, #0]
 8008554:	685b      	ldr	r3, [r3, #4]
 8008556:	f003 0203 	and.w	r2, r3, #3
 800855a:	697b      	ldr	r3, [r7, #20]
 800855c:	005b      	lsls	r3, r3, #1
 800855e:	fa02 f303 	lsl.w	r3, r2, r3
 8008562:	693a      	ldr	r2, [r7, #16]
 8008564:	4313      	orrs	r3, r2
 8008566:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	693a      	ldr	r2, [r7, #16]
 800856c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800856e:	683b      	ldr	r3, [r7, #0]
 8008570:	685b      	ldr	r3, [r3, #4]
 8008572:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8008576:	2b00      	cmp	r3, #0
 8008578:	f000 8098 	beq.w	80086ac <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 800857c:	4a54      	ldr	r2, [pc, #336]	@ (80086d0 <HAL_GPIO_Init+0x2c8>)
 800857e:	697b      	ldr	r3, [r7, #20]
 8008580:	089b      	lsrs	r3, r3, #2
 8008582:	3302      	adds	r3, #2
 8008584:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008588:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800858a:	697b      	ldr	r3, [r7, #20]
 800858c:	f003 0303 	and.w	r3, r3, #3
 8008590:	009b      	lsls	r3, r3, #2
 8008592:	220f      	movs	r2, #15
 8008594:	fa02 f303 	lsl.w	r3, r2, r3
 8008598:	43db      	mvns	r3, r3
 800859a:	693a      	ldr	r2, [r7, #16]
 800859c:	4013      	ands	r3, r2
 800859e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80085a6:	d019      	beq.n	80085dc <HAL_GPIO_Init+0x1d4>
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	4a4a      	ldr	r2, [pc, #296]	@ (80086d4 <HAL_GPIO_Init+0x2cc>)
 80085ac:	4293      	cmp	r3, r2
 80085ae:	d013      	beq.n	80085d8 <HAL_GPIO_Init+0x1d0>
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	4a49      	ldr	r2, [pc, #292]	@ (80086d8 <HAL_GPIO_Init+0x2d0>)
 80085b4:	4293      	cmp	r3, r2
 80085b6:	d00d      	beq.n	80085d4 <HAL_GPIO_Init+0x1cc>
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	4a48      	ldr	r2, [pc, #288]	@ (80086dc <HAL_GPIO_Init+0x2d4>)
 80085bc:	4293      	cmp	r3, r2
 80085be:	d007      	beq.n	80085d0 <HAL_GPIO_Init+0x1c8>
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	4a47      	ldr	r2, [pc, #284]	@ (80086e0 <HAL_GPIO_Init+0x2d8>)
 80085c4:	4293      	cmp	r3, r2
 80085c6:	d101      	bne.n	80085cc <HAL_GPIO_Init+0x1c4>
 80085c8:	2304      	movs	r3, #4
 80085ca:	e008      	b.n	80085de <HAL_GPIO_Init+0x1d6>
 80085cc:	2307      	movs	r3, #7
 80085ce:	e006      	b.n	80085de <HAL_GPIO_Init+0x1d6>
 80085d0:	2303      	movs	r3, #3
 80085d2:	e004      	b.n	80085de <HAL_GPIO_Init+0x1d6>
 80085d4:	2302      	movs	r3, #2
 80085d6:	e002      	b.n	80085de <HAL_GPIO_Init+0x1d6>
 80085d8:	2301      	movs	r3, #1
 80085da:	e000      	b.n	80085de <HAL_GPIO_Init+0x1d6>
 80085dc:	2300      	movs	r3, #0
 80085de:	697a      	ldr	r2, [r7, #20]
 80085e0:	f002 0203 	and.w	r2, r2, #3
 80085e4:	0092      	lsls	r2, r2, #2
 80085e6:	4093      	lsls	r3, r2
 80085e8:	693a      	ldr	r2, [r7, #16]
 80085ea:	4313      	orrs	r3, r2
 80085ec:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80085ee:	4938      	ldr	r1, [pc, #224]	@ (80086d0 <HAL_GPIO_Init+0x2c8>)
 80085f0:	697b      	ldr	r3, [r7, #20]
 80085f2:	089b      	lsrs	r3, r3, #2
 80085f4:	3302      	adds	r3, #2
 80085f6:	693a      	ldr	r2, [r7, #16]
 80085f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80085fc:	4b39      	ldr	r3, [pc, #228]	@ (80086e4 <HAL_GPIO_Init+0x2dc>)
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	43db      	mvns	r3, r3
 8008606:	693a      	ldr	r2, [r7, #16]
 8008608:	4013      	ands	r3, r2
 800860a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800860c:	683b      	ldr	r3, [r7, #0]
 800860e:	685b      	ldr	r3, [r3, #4]
 8008610:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008614:	2b00      	cmp	r3, #0
 8008616:	d003      	beq.n	8008620 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8008618:	693a      	ldr	r2, [r7, #16]
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	4313      	orrs	r3, r2
 800861e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8008620:	4a30      	ldr	r2, [pc, #192]	@ (80086e4 <HAL_GPIO_Init+0x2dc>)
 8008622:	693b      	ldr	r3, [r7, #16]
 8008624:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8008626:	4b2f      	ldr	r3, [pc, #188]	@ (80086e4 <HAL_GPIO_Init+0x2dc>)
 8008628:	685b      	ldr	r3, [r3, #4]
 800862a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	43db      	mvns	r3, r3
 8008630:	693a      	ldr	r2, [r7, #16]
 8008632:	4013      	ands	r3, r2
 8008634:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8008636:	683b      	ldr	r3, [r7, #0]
 8008638:	685b      	ldr	r3, [r3, #4]
 800863a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800863e:	2b00      	cmp	r3, #0
 8008640:	d003      	beq.n	800864a <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8008642:	693a      	ldr	r2, [r7, #16]
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	4313      	orrs	r3, r2
 8008648:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800864a:	4a26      	ldr	r2, [pc, #152]	@ (80086e4 <HAL_GPIO_Init+0x2dc>)
 800864c:	693b      	ldr	r3, [r7, #16]
 800864e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8008650:	4b24      	ldr	r3, [pc, #144]	@ (80086e4 <HAL_GPIO_Init+0x2dc>)
 8008652:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008656:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	43db      	mvns	r3, r3
 800865c:	693a      	ldr	r2, [r7, #16]
 800865e:	4013      	ands	r3, r2
 8008660:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8008662:	683b      	ldr	r3, [r7, #0]
 8008664:	685b      	ldr	r3, [r3, #4]
 8008666:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800866a:	2b00      	cmp	r3, #0
 800866c:	d003      	beq.n	8008676 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 800866e:	693a      	ldr	r2, [r7, #16]
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	4313      	orrs	r3, r2
 8008674:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8008676:	4a1b      	ldr	r2, [pc, #108]	@ (80086e4 <HAL_GPIO_Init+0x2dc>)
 8008678:	693b      	ldr	r3, [r7, #16]
 800867a:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 800867e:	4b19      	ldr	r3, [pc, #100]	@ (80086e4 <HAL_GPIO_Init+0x2dc>)
 8008680:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008684:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	43db      	mvns	r3, r3
 800868a:	693a      	ldr	r2, [r7, #16]
 800868c:	4013      	ands	r3, r2
 800868e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8008690:	683b      	ldr	r3, [r7, #0]
 8008692:	685b      	ldr	r3, [r3, #4]
 8008694:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008698:	2b00      	cmp	r3, #0
 800869a:	d003      	beq.n	80086a4 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 800869c:	693a      	ldr	r2, [r7, #16]
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	4313      	orrs	r3, r2
 80086a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80086a4:	4a0f      	ldr	r2, [pc, #60]	@ (80086e4 <HAL_GPIO_Init+0x2dc>)
 80086a6:	693b      	ldr	r3, [r7, #16]
 80086a8:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      }
    }

    position++;
 80086ac:	697b      	ldr	r3, [r7, #20]
 80086ae:	3301      	adds	r3, #1
 80086b0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80086b2:	683b      	ldr	r3, [r7, #0]
 80086b4:	681a      	ldr	r2, [r3, #0]
 80086b6:	697b      	ldr	r3, [r7, #20]
 80086b8:	fa22 f303 	lsr.w	r3, r2, r3
 80086bc:	2b00      	cmp	r3, #0
 80086be:	f47f aeab 	bne.w	8008418 <HAL_GPIO_Init+0x10>
  }
}
 80086c2:	bf00      	nop
 80086c4:	bf00      	nop
 80086c6:	371c      	adds	r7, #28
 80086c8:	46bd      	mov	sp, r7
 80086ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ce:	4770      	bx	lr
 80086d0:	40010000 	.word	0x40010000
 80086d4:	48000400 	.word	0x48000400
 80086d8:	48000800 	.word	0x48000800
 80086dc:	48000c00 	.word	0x48000c00
 80086e0:	48001000 	.word	0x48001000
 80086e4:	58000800 	.word	0x58000800

080086e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80086e8:	b480      	push	{r7}
 80086ea:	b083      	sub	sp, #12
 80086ec:	af00      	add	r7, sp, #0
 80086ee:	6078      	str	r0, [r7, #4]
 80086f0:	460b      	mov	r3, r1
 80086f2:	807b      	strh	r3, [r7, #2]
 80086f4:	4613      	mov	r3, r2
 80086f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80086f8:	787b      	ldrb	r3, [r7, #1]
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d003      	beq.n	8008706 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80086fe:	887a      	ldrh	r2, [r7, #2]
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8008704:	e002      	b.n	800870c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8008706:	887a      	ldrh	r2, [r7, #2]
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800870c:	bf00      	nop
 800870e:	370c      	adds	r7, #12
 8008710:	46bd      	mov	sp, r7
 8008712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008716:	4770      	bx	lr

08008718 <HAL_GPIO_TogglePin>:
  * @param GPIOx where x can be (A..H) to select the GPIO peripheral for STM32WBxx family
  * @param GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8008718:	b480      	push	{r7}
 800871a:	b085      	sub	sp, #20
 800871c:	af00      	add	r7, sp, #0
 800871e:	6078      	str	r0, [r7, #4]
 8008720:	460b      	mov	r3, r1
 8008722:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	695b      	ldr	r3, [r3, #20]
 8008728:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800872a:	887a      	ldrh	r2, [r7, #2]
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	4013      	ands	r3, r2
 8008730:	041a      	lsls	r2, r3, #16
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	43d9      	mvns	r1, r3
 8008736:	887b      	ldrh	r3, [r7, #2]
 8008738:	400b      	ands	r3, r1
 800873a:	431a      	orrs	r2, r3
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	619a      	str	r2, [r3, #24]
}
 8008740:	bf00      	nop
 8008742:	3714      	adds	r7, #20
 8008744:	46bd      	mov	sp, r7
 8008746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800874a:	4770      	bx	lr

0800874c <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 800874c:	b580      	push	{r7, lr}
 800874e:	b082      	sub	sp, #8
 8008750:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8008752:	4b0a      	ldr	r3, [pc, #40]	@ (800877c <HAL_HSEM_IRQHandler+0x30>)
 8008754:	68db      	ldr	r3, [r3, #12]
 8008756:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8008758:	4b08      	ldr	r3, [pc, #32]	@ (800877c <HAL_HSEM_IRQHandler+0x30>)
 800875a:	681a      	ldr	r2, [r3, #0]
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	43db      	mvns	r3, r3
 8008760:	4906      	ldr	r1, [pc, #24]	@ (800877c <HAL_HSEM_IRQHandler+0x30>)
 8008762:	4013      	ands	r3, r2
 8008764:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8008766:	4a05      	ldr	r2, [pc, #20]	@ (800877c <HAL_HSEM_IRQHandler+0x30>)
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 800876c:	6878      	ldr	r0, [r7, #4]
 800876e:	f000 f807 	bl	8008780 <HAL_HSEM_FreeCallback>
}
 8008772:	bf00      	nop
 8008774:	3708      	adds	r7, #8
 8008776:	46bd      	mov	sp, r7
 8008778:	bd80      	pop	{r7, pc}
 800877a:	bf00      	nop
 800877c:	58001500 	.word	0x58001500

08008780 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8008780:	b480      	push	{r7}
 8008782:	b083      	sub	sp, #12
 8008784:	af00      	add	r7, sp, #0
 8008786:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8008788:	bf00      	nop
 800878a:	370c      	adds	r7, #12
 800878c:	46bd      	mov	sp, r7
 800878e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008792:	4770      	bx	lr

08008794 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008794:	b580      	push	{r7, lr}
 8008796:	b082      	sub	sp, #8
 8008798:	af00      	add	r7, sp, #0
 800879a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d101      	bne.n	80087a6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80087a2:	2301      	movs	r3, #1
 80087a4:	e08d      	b.n	80088c2 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80087ac:	b2db      	uxtb	r3, r3
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d106      	bne.n	80087c0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	2200      	movs	r2, #0
 80087b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80087ba:	6878      	ldr	r0, [r7, #4]
 80087bc:	f7fe fe68 	bl	8007490 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	2224      	movs	r2, #36	@ 0x24
 80087c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	681a      	ldr	r2, [r3, #0]
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	f022 0201 	bic.w	r2, r2, #1
 80087d6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	685a      	ldr	r2, [r3, #4]
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80087e4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	689a      	ldr	r2, [r3, #8]
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80087f4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	68db      	ldr	r3, [r3, #12]
 80087fa:	2b01      	cmp	r3, #1
 80087fc:	d107      	bne.n	800880e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	689a      	ldr	r2, [r3, #8]
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800880a:	609a      	str	r2, [r3, #8]
 800880c:	e006      	b.n	800881c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	689a      	ldr	r2, [r3, #8]
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800881a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	68db      	ldr	r3, [r3, #12]
 8008820:	2b02      	cmp	r3, #2
 8008822:	d108      	bne.n	8008836 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	685a      	ldr	r2, [r3, #4]
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008832:	605a      	str	r2, [r3, #4]
 8008834:	e007      	b.n	8008846 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	685a      	ldr	r2, [r3, #4]
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008844:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	685b      	ldr	r3, [r3, #4]
 800884c:	687a      	ldr	r2, [r7, #4]
 800884e:	6812      	ldr	r2, [r2, #0]
 8008850:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8008854:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008858:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	68da      	ldr	r2, [r3, #12]
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008868:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	691a      	ldr	r2, [r3, #16]
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	695b      	ldr	r3, [r3, #20]
 8008872:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	699b      	ldr	r3, [r3, #24]
 800887a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	430a      	orrs	r2, r1
 8008882:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	69d9      	ldr	r1, [r3, #28]
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	6a1a      	ldr	r2, [r3, #32]
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	430a      	orrs	r2, r1
 8008892:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	681a      	ldr	r2, [r3, #0]
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	f042 0201 	orr.w	r2, r2, #1
 80088a2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	2200      	movs	r2, #0
 80088a8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	2220      	movs	r2, #32
 80088ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	2200      	movs	r2, #0
 80088b6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	2200      	movs	r2, #0
 80088bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80088c0:	2300      	movs	r3, #0
}
 80088c2:	4618      	mov	r0, r3
 80088c4:	3708      	adds	r7, #8
 80088c6:	46bd      	mov	sp, r7
 80088c8:	bd80      	pop	{r7, pc}
	...

080088cc <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80088cc:	b580      	push	{r7, lr}
 80088ce:	b088      	sub	sp, #32
 80088d0:	af02      	add	r7, sp, #8
 80088d2:	60f8      	str	r0, [r7, #12]
 80088d4:	4608      	mov	r0, r1
 80088d6:	4611      	mov	r1, r2
 80088d8:	461a      	mov	r2, r3
 80088da:	4603      	mov	r3, r0
 80088dc:	817b      	strh	r3, [r7, #10]
 80088de:	460b      	mov	r3, r1
 80088e0:	813b      	strh	r3, [r7, #8]
 80088e2:	4613      	mov	r3, r2
 80088e4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80088ec:	b2db      	uxtb	r3, r3
 80088ee:	2b20      	cmp	r3, #32
 80088f0:	f040 80f9 	bne.w	8008ae6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80088f4:	6a3b      	ldr	r3, [r7, #32]
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d002      	beq.n	8008900 <HAL_I2C_Mem_Write+0x34>
 80088fa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d105      	bne.n	800890c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008906:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8008908:	2301      	movs	r3, #1
 800890a:	e0ed      	b.n	8008ae8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008912:	2b01      	cmp	r3, #1
 8008914:	d101      	bne.n	800891a <HAL_I2C_Mem_Write+0x4e>
 8008916:	2302      	movs	r3, #2
 8008918:	e0e6      	b.n	8008ae8 <HAL_I2C_Mem_Write+0x21c>
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	2201      	movs	r2, #1
 800891e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008922:	f7ff f8d1 	bl	8007ac8 <HAL_GetTick>
 8008926:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008928:	697b      	ldr	r3, [r7, #20]
 800892a:	9300      	str	r3, [sp, #0]
 800892c:	2319      	movs	r3, #25
 800892e:	2201      	movs	r2, #1
 8008930:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8008934:	68f8      	ldr	r0, [r7, #12]
 8008936:	f001 fc26 	bl	800a186 <I2C_WaitOnFlagUntilTimeout>
 800893a:	4603      	mov	r3, r0
 800893c:	2b00      	cmp	r3, #0
 800893e:	d001      	beq.n	8008944 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8008940:	2301      	movs	r3, #1
 8008942:	e0d1      	b.n	8008ae8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	2221      	movs	r2, #33	@ 0x21
 8008948:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	2240      	movs	r2, #64	@ 0x40
 8008950:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	2200      	movs	r2, #0
 8008958:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	6a3a      	ldr	r2, [r7, #32]
 800895e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8008964:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	2200      	movs	r2, #0
 800896a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800896c:	88f8      	ldrh	r0, [r7, #6]
 800896e:	893a      	ldrh	r2, [r7, #8]
 8008970:	8979      	ldrh	r1, [r7, #10]
 8008972:	697b      	ldr	r3, [r7, #20]
 8008974:	9301      	str	r3, [sp, #4]
 8008976:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008978:	9300      	str	r3, [sp, #0]
 800897a:	4603      	mov	r3, r0
 800897c:	68f8      	ldr	r0, [r7, #12]
 800897e:	f000 fe55 	bl	800962c <I2C_RequestMemoryWrite>
 8008982:	4603      	mov	r3, r0
 8008984:	2b00      	cmp	r3, #0
 8008986:	d005      	beq.n	8008994 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	2200      	movs	r2, #0
 800898c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8008990:	2301      	movs	r3, #1
 8008992:	e0a9      	b.n	8008ae8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008998:	b29b      	uxth	r3, r3
 800899a:	2bff      	cmp	r3, #255	@ 0xff
 800899c:	d90e      	bls.n	80089bc <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	22ff      	movs	r2, #255	@ 0xff
 80089a2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80089a8:	b2da      	uxtb	r2, r3
 80089aa:	8979      	ldrh	r1, [r7, #10]
 80089ac:	2300      	movs	r3, #0
 80089ae:	9300      	str	r3, [sp, #0]
 80089b0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80089b4:	68f8      	ldr	r0, [r7, #12]
 80089b6:	f001 fda9 	bl	800a50c <I2C_TransferConfig>
 80089ba:	e00f      	b.n	80089dc <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80089c0:	b29a      	uxth	r2, r3
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80089ca:	b2da      	uxtb	r2, r3
 80089cc:	8979      	ldrh	r1, [r7, #10]
 80089ce:	2300      	movs	r3, #0
 80089d0:	9300      	str	r3, [sp, #0]
 80089d2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80089d6:	68f8      	ldr	r0, [r7, #12]
 80089d8:	f001 fd98 	bl	800a50c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80089dc:	697a      	ldr	r2, [r7, #20]
 80089de:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80089e0:	68f8      	ldr	r0, [r7, #12]
 80089e2:	f001 fc29 	bl	800a238 <I2C_WaitOnTXISFlagUntilTimeout>
 80089e6:	4603      	mov	r3, r0
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d001      	beq.n	80089f0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80089ec:	2301      	movs	r3, #1
 80089ee:	e07b      	b.n	8008ae8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089f4:	781a      	ldrb	r2, [r3, #0]
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a00:	1c5a      	adds	r2, r3, #1
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008a0a:	b29b      	uxth	r3, r3
 8008a0c:	3b01      	subs	r3, #1
 8008a0e:	b29a      	uxth	r2, r3
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008a18:	3b01      	subs	r3, #1
 8008a1a:	b29a      	uxth	r2, r3
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008a24:	b29b      	uxth	r3, r3
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d034      	beq.n	8008a94 <HAL_I2C_Mem_Write+0x1c8>
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d130      	bne.n	8008a94 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008a32:	697b      	ldr	r3, [r7, #20]
 8008a34:	9300      	str	r3, [sp, #0]
 8008a36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a38:	2200      	movs	r2, #0
 8008a3a:	2180      	movs	r1, #128	@ 0x80
 8008a3c:	68f8      	ldr	r0, [r7, #12]
 8008a3e:	f001 fba2 	bl	800a186 <I2C_WaitOnFlagUntilTimeout>
 8008a42:	4603      	mov	r3, r0
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d001      	beq.n	8008a4c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8008a48:	2301      	movs	r3, #1
 8008a4a:	e04d      	b.n	8008ae8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008a50:	b29b      	uxth	r3, r3
 8008a52:	2bff      	cmp	r3, #255	@ 0xff
 8008a54:	d90e      	bls.n	8008a74 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	22ff      	movs	r2, #255	@ 0xff
 8008a5a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008a60:	b2da      	uxtb	r2, r3
 8008a62:	8979      	ldrh	r1, [r7, #10]
 8008a64:	2300      	movs	r3, #0
 8008a66:	9300      	str	r3, [sp, #0]
 8008a68:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8008a6c:	68f8      	ldr	r0, [r7, #12]
 8008a6e:	f001 fd4d 	bl	800a50c <I2C_TransferConfig>
 8008a72:	e00f      	b.n	8008a94 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008a78:	b29a      	uxth	r2, r3
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008a82:	b2da      	uxtb	r2, r3
 8008a84:	8979      	ldrh	r1, [r7, #10]
 8008a86:	2300      	movs	r3, #0
 8008a88:	9300      	str	r3, [sp, #0]
 8008a8a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8008a8e:	68f8      	ldr	r0, [r7, #12]
 8008a90:	f001 fd3c 	bl	800a50c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008a98:	b29b      	uxth	r3, r3
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d19e      	bne.n	80089dc <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008a9e:	697a      	ldr	r2, [r7, #20]
 8008aa0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008aa2:	68f8      	ldr	r0, [r7, #12]
 8008aa4:	f001 fc0f 	bl	800a2c6 <I2C_WaitOnSTOPFlagUntilTimeout>
 8008aa8:	4603      	mov	r3, r0
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d001      	beq.n	8008ab2 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8008aae:	2301      	movs	r3, #1
 8008ab0:	e01a      	b.n	8008ae8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	2220      	movs	r2, #32
 8008ab8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	6859      	ldr	r1, [r3, #4]
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	681a      	ldr	r2, [r3, #0]
 8008ac4:	4b0a      	ldr	r3, [pc, #40]	@ (8008af0 <HAL_I2C_Mem_Write+0x224>)
 8008ac6:	400b      	ands	r3, r1
 8008ac8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	2220      	movs	r2, #32
 8008ace:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	2200      	movs	r2, #0
 8008ad6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	2200      	movs	r2, #0
 8008ade:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8008ae2:	2300      	movs	r3, #0
 8008ae4:	e000      	b.n	8008ae8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8008ae6:	2302      	movs	r3, #2
  }
}
 8008ae8:	4618      	mov	r0, r3
 8008aea:	3718      	adds	r7, #24
 8008aec:	46bd      	mov	sp, r7
 8008aee:	bd80      	pop	{r7, pc}
 8008af0:	fe00e800 	.word	0xfe00e800

08008af4 <HAL_I2C_Mem_Read_DMA>:
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                       uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8008af4:	b580      	push	{r7, lr}
 8008af6:	b088      	sub	sp, #32
 8008af8:	af02      	add	r7, sp, #8
 8008afa:	60f8      	str	r0, [r7, #12]
 8008afc:	4608      	mov	r0, r1
 8008afe:	4611      	mov	r1, r2
 8008b00:	461a      	mov	r2, r3
 8008b02:	4603      	mov	r3, r0
 8008b04:	817b      	strh	r3, [r7, #10]
 8008b06:	460b      	mov	r3, r1
 8008b08:	813b      	strh	r3, [r7, #8]
 8008b0a:	4613      	mov	r3, r2
 8008b0c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008b14:	b2db      	uxtb	r3, r3
 8008b16:	2b20      	cmp	r3, #32
 8008b18:	f040 80c2 	bne.w	8008ca0 <HAL_I2C_Mem_Read_DMA+0x1ac>
  {
    if ((pData == NULL) || (Size == 0U))
 8008b1c:	6a3b      	ldr	r3, [r7, #32]
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d002      	beq.n	8008b28 <HAL_I2C_Mem_Read_DMA+0x34>
 8008b22:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d105      	bne.n	8008b34 <HAL_I2C_Mem_Read_DMA+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008b2e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8008b30:	2301      	movs	r3, #1
 8008b32:	e0b6      	b.n	8008ca2 <HAL_I2C_Mem_Read_DMA+0x1ae>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	699b      	ldr	r3, [r3, #24]
 8008b3a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008b3e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008b42:	d101      	bne.n	8008b48 <HAL_I2C_Mem_Read_DMA+0x54>
    {
      return HAL_BUSY;
 8008b44:	2302      	movs	r3, #2
 8008b46:	e0ac      	b.n	8008ca2 <HAL_I2C_Mem_Read_DMA+0x1ae>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008b4e:	2b01      	cmp	r3, #1
 8008b50:	d101      	bne.n	8008b56 <HAL_I2C_Mem_Read_DMA+0x62>
 8008b52:	2302      	movs	r3, #2
 8008b54:	e0a5      	b.n	8008ca2 <HAL_I2C_Mem_Read_DMA+0x1ae>
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	2201      	movs	r2, #1
 8008b5a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	2222      	movs	r2, #34	@ 0x22
 8008b62:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	2240      	movs	r2, #64	@ 0x40
 8008b6a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	2200      	movs	r2, #0
 8008b72:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	6a3a      	ldr	r2, [r7, #32]
 8008b78:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8008b7e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	4a4a      	ldr	r2, [pc, #296]	@ (8008cac <HAL_I2C_Mem_Read_DMA+0x1b8>)
 8008b84:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Mem_ISR_DMA;
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	4a49      	ldr	r2, [pc, #292]	@ (8008cb0 <HAL_I2C_Mem_Read_DMA+0x1bc>)
 8008b8a:	635a      	str	r2, [r3, #52]	@ 0x34
    hi2c->Devaddress  = DevAddress;
 8008b8c:	897a      	ldrh	r2, [r7, #10]
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	64da      	str	r2, [r3, #76]	@ 0x4c

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008b96:	b29b      	uxth	r3, r3
 8008b98:	2bff      	cmp	r3, #255	@ 0xff
 8008b9a:	d903      	bls.n	8008ba4 <HAL_I2C_Mem_Read_DMA+0xb0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	22ff      	movs	r2, #255	@ 0xff
 8008ba0:	851a      	strh	r2, [r3, #40]	@ 0x28
 8008ba2:	e004      	b.n	8008bae <HAL_I2C_Mem_Read_DMA+0xba>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008ba8:	b29a      	uxth	r2, r3
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	851a      	strh	r2, [r3, #40]	@ 0x28
    }

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008bae:	88fb      	ldrh	r3, [r7, #6]
 8008bb0:	2b01      	cmp	r3, #1
 8008bb2:	d109      	bne.n	8008bc8 <HAL_I2C_Mem_Read_DMA+0xd4>
    {
      /* Prefetch Memory Address */
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008bb4:	893b      	ldrh	r3, [r7, #8]
 8008bb6:	b2da      	uxtb	r2, r3
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	f04f 32ff 	mov.w	r2, #4294967295
 8008bc4:	651a      	str	r2, [r3, #80]	@ 0x50
 8008bc6:	e00b      	b.n	8008be0 <HAL_I2C_Mem_Read_DMA+0xec>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Prefetch Memory Address (MSB part, LSB will be manage through interrupt) */
      hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8008bc8:	893b      	ldrh	r3, [r7, #8]
 8008bca:	0a1b      	lsrs	r3, r3, #8
 8008bcc:	b29b      	uxth	r3, r3
 8008bce:	b2da      	uxtb	r2, r3
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Prepare Memaddress buffer for LSB part */
      hi2c->Memaddress = I2C_MEM_ADD_LSB(MemAddress);
 8008bd6:	893b      	ldrh	r3, [r7, #8]
 8008bd8:	b2db      	uxtb	r3, r3
 8008bda:	461a      	mov	r2, r3
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    if (hi2c->hdmarx != NULL)
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d020      	beq.n	8008c2a <HAL_I2C_Mem_Read_DMA+0x136>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008bec:	4a31      	ldr	r2, [pc, #196]	@ (8008cb4 <HAL_I2C_Mem_Read_DMA+0x1c0>)
 8008bee:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008bf4:	4a30      	ldr	r2, [pc, #192]	@ (8008cb8 <HAL_I2C_Mem_Read_DMA+0x1c4>)
 8008bf6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008bfc:	2200      	movs	r2, #0
 8008bfe:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->hdmarx->XferAbortCallback = NULL;
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008c04:	2200      	movs	r2, #0
 8008c06:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the DMA channel */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	3324      	adds	r3, #36	@ 0x24
 8008c12:	4619      	mov	r1, r3
 8008c14:	6a3a      	ldr	r2, [r7, #32]
                                       hi2c->XferSize);
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8008c1a:	f7ff f9bb 	bl	8007f94 <HAL_DMA_Start_IT>
 8008c1e:	4603      	mov	r3, r0
 8008c20:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 8008c22:	7dfb      	ldrb	r3, [r7, #23]
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d127      	bne.n	8008c78 <HAL_I2C_Mem_Read_DMA+0x184>
 8008c28:	e013      	b.n	8008c52 <HAL_I2C_Mem_Read_DMA+0x15e>
      hi2c->State     = HAL_I2C_STATE_READY;
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	2220      	movs	r2, #32
 8008c2e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	2200      	movs	r2, #0
 8008c36:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008c3e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	645a      	str	r2, [r3, #68]	@ 0x44
      __HAL_UNLOCK(hi2c);
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	2200      	movs	r2, #0
 8008c4a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8008c4e:	2301      	movs	r3, #1
 8008c50:	e027      	b.n	8008ca2 <HAL_I2C_Mem_Read_DMA+0x1ae>
    {
      /* Send Slave Address and Memory Address */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8008c52:	88fb      	ldrh	r3, [r7, #6]
 8008c54:	b2da      	uxtb	r2, r3
 8008c56:	8979      	ldrh	r1, [r7, #10]
 8008c58:	4b18      	ldr	r3, [pc, #96]	@ (8008cbc <HAL_I2C_Mem_Read_DMA+0x1c8>)
 8008c5a:	9300      	str	r3, [sp, #0]
 8008c5c:	2300      	movs	r3, #0
 8008c5e:	68f8      	ldr	r0, [r7, #12]
 8008c60:	f001 fc54 	bl	800a50c <I2C_TransferConfig>

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	2200      	movs	r2, #0
 8008c68:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8008c6c:	2101      	movs	r1, #1
 8008c6e:	68f8      	ldr	r0, [r7, #12]
 8008c70:	f001 fc7e 	bl	800a570 <I2C_Enable_IRQ>
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
 8008c74:	2300      	movs	r3, #0
 8008c76:	e014      	b.n	8008ca2 <HAL_I2C_Mem_Read_DMA+0x1ae>
      hi2c->State     = HAL_I2C_STATE_READY;
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	2220      	movs	r2, #32
 8008c7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	2200      	movs	r2, #0
 8008c84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008c8c:	f043 0210 	orr.w	r2, r3, #16
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	645a      	str	r2, [r3, #68]	@ 0x44
      __HAL_UNLOCK(hi2c);
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	2200      	movs	r2, #0
 8008c98:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8008c9c:	2301      	movs	r3, #1
 8008c9e:	e000      	b.n	8008ca2 <HAL_I2C_Mem_Read_DMA+0x1ae>
  }
  else
  {
    return HAL_BUSY;
 8008ca0:	2302      	movs	r3, #2
  }
}
 8008ca2:	4618      	mov	r0, r3
 8008ca4:	3718      	adds	r7, #24
 8008ca6:	46bd      	mov	sp, r7
 8008ca8:	bd80      	pop	{r7, pc}
 8008caa:	bf00      	nop
 8008cac:	ffff0000 	.word	0xffff0000
 8008cb0:	08009231 	.word	0x08009231
 8008cb4:	0800a087 	.word	0x0800a087
 8008cb8:	0800a11d 	.word	0x0800a11d
 8008cbc:	80002000 	.word	0x80002000

08008cc0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8008cc0:	b580      	push	{r7, lr}
 8008cc2:	b084      	sub	sp, #16
 8008cc4:	af00      	add	r7, sp, #0
 8008cc6:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	699b      	ldr	r3, [r3, #24]
 8008cce:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d005      	beq.n	8008cec <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008ce4:	68ba      	ldr	r2, [r7, #8]
 8008ce6:	68f9      	ldr	r1, [r7, #12]
 8008ce8:	6878      	ldr	r0, [r7, #4]
 8008cea:	4798      	blx	r3
  }
}
 8008cec:	bf00      	nop
 8008cee:	3710      	adds	r7, #16
 8008cf0:	46bd      	mov	sp, r7
 8008cf2:	bd80      	pop	{r7, pc}

08008cf4 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8008cf4:	b580      	push	{r7, lr}
 8008cf6:	b086      	sub	sp, #24
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	699b      	ldr	r3, [r3, #24]
 8008d02:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8008d0c:	697b      	ldr	r3, [r7, #20]
 8008d0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d00f      	beq.n	8008d36 <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8008d16:	693b      	ldr	r3, [r7, #16]
 8008d18:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d00a      	beq.n	8008d36 <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008d24:	f043 0201 	orr.w	r2, r3, #1
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008d34:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8008d36:	697b      	ldr	r3, [r7, #20]
 8008d38:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d00f      	beq.n	8008d60 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8008d40:	693b      	ldr	r3, [r7, #16]
 8008d42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d00a      	beq.n	8008d60 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008d4e:	f043 0208 	orr.w	r2, r3, #8
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8008d5e:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8008d60:	697b      	ldr	r3, [r7, #20]
 8008d62:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d00f      	beq.n	8008d8a <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8008d6a:	693b      	ldr	r3, [r7, #16]
 8008d6c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d00a      	beq.n	8008d8a <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008d78:	f043 0202 	orr.w	r2, r3, #2
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008d88:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008d8e:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	f003 030b 	and.w	r3, r3, #11
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d003      	beq.n	8008da2 <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 8008d9a:	68f9      	ldr	r1, [r7, #12]
 8008d9c:	6878      	ldr	r0, [r7, #4]
 8008d9e:	f001 f837 	bl	8009e10 <I2C_ITError>
  }
}
 8008da2:	bf00      	nop
 8008da4:	3718      	adds	r7, #24
 8008da6:	46bd      	mov	sp, r7
 8008da8:	bd80      	pop	{r7, pc}

08008daa <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008daa:	b480      	push	{r7}
 8008dac:	b083      	sub	sp, #12
 8008dae:	af00      	add	r7, sp, #0
 8008db0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8008db2:	bf00      	nop
 8008db4:	370c      	adds	r7, #12
 8008db6:	46bd      	mov	sp, r7
 8008db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dbc:	4770      	bx	lr

08008dbe <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008dbe:	b480      	push	{r7}
 8008dc0:	b083      	sub	sp, #12
 8008dc2:	af00      	add	r7, sp, #0
 8008dc4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8008dc6:	bf00      	nop
 8008dc8:	370c      	adds	r7, #12
 8008dca:	46bd      	mov	sp, r7
 8008dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd0:	4770      	bx	lr

08008dd2 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008dd2:	b480      	push	{r7}
 8008dd4:	b083      	sub	sp, #12
 8008dd6:	af00      	add	r7, sp, #0
 8008dd8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8008dda:	bf00      	nop
 8008ddc:	370c      	adds	r7, #12
 8008dde:	46bd      	mov	sp, r7
 8008de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de4:	4770      	bx	lr

08008de6 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008de6:	b480      	push	{r7}
 8008de8:	b083      	sub	sp, #12
 8008dea:	af00      	add	r7, sp, #0
 8008dec:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8008dee:	bf00      	nop
 8008df0:	370c      	adds	r7, #12
 8008df2:	46bd      	mov	sp, r7
 8008df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df8:	4770      	bx	lr

08008dfa <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8008dfa:	b480      	push	{r7}
 8008dfc:	b083      	sub	sp, #12
 8008dfe:	af00      	add	r7, sp, #0
 8008e00:	6078      	str	r0, [r7, #4]
 8008e02:	460b      	mov	r3, r1
 8008e04:	70fb      	strb	r3, [r7, #3]
 8008e06:	4613      	mov	r3, r2
 8008e08:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8008e0a:	bf00      	nop
 8008e0c:	370c      	adds	r7, #12
 8008e0e:	46bd      	mov	sp, r7
 8008e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e14:	4770      	bx	lr

08008e16 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008e16:	b480      	push	{r7}
 8008e18:	b083      	sub	sp, #12
 8008e1a:	af00      	add	r7, sp, #0
 8008e1c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8008e1e:	bf00      	nop
 8008e20:	370c      	adds	r7, #12
 8008e22:	46bd      	mov	sp, r7
 8008e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e28:	4770      	bx	lr

08008e2a <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008e2a:	b480      	push	{r7}
 8008e2c:	b083      	sub	sp, #12
 8008e2e:	af00      	add	r7, sp, #0
 8008e30:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8008e32:	bf00      	nop
 8008e34:	370c      	adds	r7, #12
 8008e36:	46bd      	mov	sp, r7
 8008e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e3c:	4770      	bx	lr

08008e3e <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8008e3e:	b480      	push	{r7}
 8008e40:	b083      	sub	sp, #12
 8008e42:	af00      	add	r7, sp, #0
 8008e44:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8008e46:	bf00      	nop
 8008e48:	370c      	adds	r7, #12
 8008e4a:	46bd      	mov	sp, r7
 8008e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e50:	4770      	bx	lr

08008e52 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008e52:	b480      	push	{r7}
 8008e54:	b083      	sub	sp, #12
 8008e56:	af00      	add	r7, sp, #0
 8008e58:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8008e5a:	bf00      	nop
 8008e5c:	370c      	adds	r7, #12
 8008e5e:	46bd      	mov	sp, r7
 8008e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e64:	4770      	bx	lr

08008e66 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8008e66:	b580      	push	{r7, lr}
 8008e68:	b086      	sub	sp, #24
 8008e6a:	af00      	add	r7, sp, #0
 8008e6c:	60f8      	str	r0, [r7, #12]
 8008e6e:	60b9      	str	r1, [r7, #8]
 8008e70:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e76:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8008e78:	68bb      	ldr	r3, [r7, #8]
 8008e7a:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008e82:	2b01      	cmp	r3, #1
 8008e84:	d101      	bne.n	8008e8a <I2C_Slave_ISR_IT+0x24>
 8008e86:	2302      	movs	r3, #2
 8008e88:	e0e2      	b.n	8009050 <I2C_Slave_ISR_IT+0x1ea>
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	2201      	movs	r2, #1
 8008e8e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8008e92:	693b      	ldr	r3, [r7, #16]
 8008e94:	f003 0320 	and.w	r3, r3, #32
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d009      	beq.n	8008eb0 <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d004      	beq.n	8008eb0 <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8008ea6:	6939      	ldr	r1, [r7, #16]
 8008ea8:	68f8      	ldr	r0, [r7, #12]
 8008eaa:	f000 fdf9 	bl	8009aa0 <I2C_ITSlaveCplt>
 8008eae:	e0ca      	b.n	8009046 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8008eb0:	693b      	ldr	r3, [r7, #16]
 8008eb2:	f003 0310 	and.w	r3, r3, #16
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d04b      	beq.n	8008f52 <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d046      	beq.n	8008f52 <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008ec8:	b29b      	uxth	r3, r3
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d128      	bne.n	8008f20 <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008ed4:	b2db      	uxtb	r3, r3
 8008ed6:	2b28      	cmp	r3, #40	@ 0x28
 8008ed8:	d108      	bne.n	8008eec <I2C_Slave_ISR_IT+0x86>
 8008eda:	697b      	ldr	r3, [r7, #20]
 8008edc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008ee0:	d104      	bne.n	8008eec <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8008ee2:	6939      	ldr	r1, [r7, #16]
 8008ee4:	68f8      	ldr	r0, [r7, #12]
 8008ee6:	f000 ff3f 	bl	8009d68 <I2C_ITListenCplt>
 8008eea:	e031      	b.n	8008f50 <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008ef2:	b2db      	uxtb	r3, r3
 8008ef4:	2b29      	cmp	r3, #41	@ 0x29
 8008ef6:	d10e      	bne.n	8008f16 <I2C_Slave_ISR_IT+0xb0>
 8008ef8:	697b      	ldr	r3, [r7, #20]
 8008efa:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8008efe:	d00a      	beq.n	8008f16 <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	2210      	movs	r2, #16
 8008f06:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8008f08:	68f8      	ldr	r0, [r7, #12]
 8008f0a:	f001 f898 	bl	800a03e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8008f0e:	68f8      	ldr	r0, [r7, #12]
 8008f10:	f000 fca1 	bl	8009856 <I2C_ITSlaveSeqCplt>
 8008f14:	e01c      	b.n	8008f50 <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	2210      	movs	r2, #16
 8008f1c:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8008f1e:	e08f      	b.n	8009040 <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	2210      	movs	r2, #16
 8008f26:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008f2c:	f043 0204 	orr.w	r2, r3, #4
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8008f34:	697b      	ldr	r3, [r7, #20]
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d003      	beq.n	8008f42 <I2C_Slave_ISR_IT+0xdc>
 8008f3a:	697b      	ldr	r3, [r7, #20]
 8008f3c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008f40:	d17e      	bne.n	8009040 <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008f46:	4619      	mov	r1, r3
 8008f48:	68f8      	ldr	r0, [r7, #12]
 8008f4a:	f000 ff61 	bl	8009e10 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8008f4e:	e077      	b.n	8009040 <I2C_Slave_ISR_IT+0x1da>
 8008f50:	e076      	b.n	8009040 <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8008f52:	693b      	ldr	r3, [r7, #16]
 8008f54:	f003 0304 	and.w	r3, r3, #4
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d02f      	beq.n	8008fbc <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d02a      	beq.n	8008fbc <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008f6a:	b29b      	uxth	r3, r3
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d018      	beq.n	8008fa2 <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f7a:	b2d2      	uxtb	r2, r2
 8008f7c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f82:	1c5a      	adds	r2, r3, #1
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008f8c:	3b01      	subs	r3, #1
 8008f8e:	b29a      	uxth	r2, r3
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008f98:	b29b      	uxth	r3, r3
 8008f9a:	3b01      	subs	r3, #1
 8008f9c:	b29a      	uxth	r2, r3
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008fa6:	b29b      	uxth	r3, r3
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d14b      	bne.n	8009044 <I2C_Slave_ISR_IT+0x1de>
 8008fac:	697b      	ldr	r3, [r7, #20]
 8008fae:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8008fb2:	d047      	beq.n	8009044 <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8008fb4:	68f8      	ldr	r0, [r7, #12]
 8008fb6:	f000 fc4e 	bl	8009856 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8008fba:	e043      	b.n	8009044 <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8008fbc:	693b      	ldr	r3, [r7, #16]
 8008fbe:	f003 0308 	and.w	r3, r3, #8
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d009      	beq.n	8008fda <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d004      	beq.n	8008fda <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8008fd0:	6939      	ldr	r1, [r7, #16]
 8008fd2:	68f8      	ldr	r0, [r7, #12]
 8008fd4:	f000 fb7e 	bl	80096d4 <I2C_ITAddrCplt>
 8008fd8:	e035      	b.n	8009046 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8008fda:	693b      	ldr	r3, [r7, #16]
 8008fdc:	f003 0302 	and.w	r3, r3, #2
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d030      	beq.n	8009046 <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d02b      	beq.n	8009046 <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008ff2:	b29b      	uxth	r3, r3
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d018      	beq.n	800902a <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ffc:	781a      	ldrb	r2, [r3, #0]
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009008:	1c5a      	adds	r2, r3, #1
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009012:	b29b      	uxth	r3, r3
 8009014:	3b01      	subs	r3, #1
 8009016:	b29a      	uxth	r2, r3
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009020:	3b01      	subs	r3, #1
 8009022:	b29a      	uxth	r2, r3
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	851a      	strh	r2, [r3, #40]	@ 0x28
 8009028:	e00d      	b.n	8009046 <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800902a:	697b      	ldr	r3, [r7, #20]
 800902c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009030:	d002      	beq.n	8009038 <I2C_Slave_ISR_IT+0x1d2>
 8009032:	697b      	ldr	r3, [r7, #20]
 8009034:	2b00      	cmp	r3, #0
 8009036:	d106      	bne.n	8009046 <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8009038:	68f8      	ldr	r0, [r7, #12]
 800903a:	f000 fc0c 	bl	8009856 <I2C_ITSlaveSeqCplt>
 800903e:	e002      	b.n	8009046 <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 8009040:	bf00      	nop
 8009042:	e000      	b.n	8009046 <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 8009044:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	2200      	movs	r2, #0
 800904a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800904e:	2300      	movs	r3, #0
}
 8009050:	4618      	mov	r0, r3
 8009052:	3718      	adds	r7, #24
 8009054:	46bd      	mov	sp, r7
 8009056:	bd80      	pop	{r7, pc}

08009058 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8009058:	b580      	push	{r7, lr}
 800905a:	b088      	sub	sp, #32
 800905c:	af02      	add	r7, sp, #8
 800905e:	60f8      	str	r0, [r7, #12]
 8009060:	60b9      	str	r1, [r7, #8]
 8009062:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800906a:	2b01      	cmp	r3, #1
 800906c:	d101      	bne.n	8009072 <I2C_Master_ISR_DMA+0x1a>
 800906e:	2302      	movs	r3, #2
 8009070:	e0d9      	b.n	8009226 <I2C_Master_ISR_DMA+0x1ce>
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	2201      	movs	r2, #1
 8009076:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800907a:	68bb      	ldr	r3, [r7, #8]
 800907c:	f003 0310 	and.w	r3, r3, #16
 8009080:	2b00      	cmp	r3, #0
 8009082:	d016      	beq.n	80090b2 <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800908a:	2b00      	cmp	r3, #0
 800908c:	d011      	beq.n	80090b2 <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	2210      	movs	r2, #16
 8009094:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800909a:	f043 0204 	orr.w	r2, r3, #4
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80090a2:	2120      	movs	r1, #32
 80090a4:	68f8      	ldr	r0, [r7, #12]
 80090a6:	f001 fa63 	bl	800a570 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80090aa:	68f8      	ldr	r0, [r7, #12]
 80090ac:	f000 ffc7 	bl	800a03e <I2C_Flush_TXDR>
 80090b0:	e0b4      	b.n	800921c <I2C_Master_ISR_DMA+0x1c4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80090b2:	68bb      	ldr	r3, [r7, #8]
 80090b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d071      	beq.n	80091a0 <I2C_Master_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d06c      	beq.n	80091a0 <I2C_Master_ISR_DMA+0x148>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	681a      	ldr	r2, [r3, #0]
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80090d4:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80090da:	b29b      	uxth	r3, r3
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d04e      	beq.n	800917e <I2C_Master_ISR_DMA+0x126>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	685b      	ldr	r3, [r3, #4]
 80090e6:	b29b      	uxth	r3, r3
 80090e8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80090ec:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80090f2:	b29b      	uxth	r3, r3
 80090f4:	2bff      	cmp	r3, #255	@ 0xff
 80090f6:	d906      	bls.n	8009106 <I2C_Master_ISR_DMA+0xae>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	22ff      	movs	r2, #255	@ 0xff
 80090fc:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 80090fe:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8009102:	617b      	str	r3, [r7, #20]
 8009104:	e010      	b.n	8009128 <I2C_Master_ISR_DMA+0xd0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800910a:	b29a      	uxth	r2, r3
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009114:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8009118:	d003      	beq.n	8009122 <I2C_Master_ISR_DMA+0xca>
        {
          xfermode = hi2c->XferOptions;
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800911e:	617b      	str	r3, [r7, #20]
 8009120:	e002      	b.n	8009128 <I2C_Master_ISR_DMA+0xd0>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8009122:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8009126:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800912c:	b2da      	uxtb	r2, r3
 800912e:	8a79      	ldrh	r1, [r7, #18]
 8009130:	2300      	movs	r3, #0
 8009132:	9300      	str	r3, [sp, #0]
 8009134:	697b      	ldr	r3, [r7, #20]
 8009136:	68f8      	ldr	r0, [r7, #12]
 8009138:	f001 f9e8 	bl	800a50c <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009140:	b29a      	uxth	r2, r3
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009146:	1ad3      	subs	r3, r2, r3
 8009148:	b29a      	uxth	r2, r3
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009154:	b2db      	uxtb	r3, r3
 8009156:	2b22      	cmp	r3, #34	@ 0x22
 8009158:	d108      	bne.n	800916c <I2C_Master_ISR_DMA+0x114>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	681a      	ldr	r2, [r3, #0]
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009168:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800916a:	e057      	b.n	800921c <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	681a      	ldr	r2, [r3, #0]
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800917a:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800917c:	e04e      	b.n	800921c <I2C_Master_ISR_DMA+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	685b      	ldr	r3, [r3, #4]
 8009184:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009188:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800918c:	d003      	beq.n	8009196 <I2C_Master_ISR_DMA+0x13e>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800918e:	68f8      	ldr	r0, [r7, #12]
 8009190:	f000 fb24 	bl	80097dc <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8009194:	e042      	b.n	800921c <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8009196:	2140      	movs	r1, #64	@ 0x40
 8009198:	68f8      	ldr	r0, [r7, #12]
 800919a:	f000 fe39 	bl	8009e10 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800919e:	e03d      	b.n	800921c <I2C_Master_ISR_DMA+0x1c4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80091a0:	68bb      	ldr	r3, [r7, #8]
 80091a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d028      	beq.n	80091fc <I2C_Master_ISR_DMA+0x1a4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d023      	beq.n	80091fc <I2C_Master_ISR_DMA+0x1a4>
  {
    if (hi2c->XferCount == 0U)
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80091b8:	b29b      	uxth	r3, r3
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d119      	bne.n	80091f2 <I2C_Master_ISR_DMA+0x19a>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	685b      	ldr	r3, [r3, #4]
 80091c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80091c8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80091cc:	d025      	beq.n	800921a <I2C_Master_ISR_DMA+0x1c2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091d2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80091d6:	d108      	bne.n	80091ea <I2C_Master_ISR_DMA+0x192>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	685a      	ldr	r2, [r3, #4]
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80091e6:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 80091e8:	e017      	b.n	800921a <I2C_Master_ISR_DMA+0x1c2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 80091ea:	68f8      	ldr	r0, [r7, #12]
 80091ec:	f000 faf6 	bl	80097dc <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 80091f0:	e013      	b.n	800921a <I2C_Master_ISR_DMA+0x1c2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80091f2:	2140      	movs	r1, #64	@ 0x40
 80091f4:	68f8      	ldr	r0, [r7, #12]
 80091f6:	f000 fe0b 	bl	8009e10 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80091fa:	e00e      	b.n	800921a <I2C_Master_ISR_DMA+0x1c2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80091fc:	68bb      	ldr	r3, [r7, #8]
 80091fe:	f003 0320 	and.w	r3, r3, #32
 8009202:	2b00      	cmp	r3, #0
 8009204:	d00a      	beq.n	800921c <I2C_Master_ISR_DMA+0x1c4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800920c:	2b00      	cmp	r3, #0
 800920e:	d005      	beq.n	800921c <I2C_Master_ISR_DMA+0x1c4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8009210:	68b9      	ldr	r1, [r7, #8]
 8009212:	68f8      	ldr	r0, [r7, #12]
 8009214:	f000 fb7c 	bl	8009910 <I2C_ITMasterCplt>
 8009218:	e000      	b.n	800921c <I2C_Master_ISR_DMA+0x1c4>
    if (hi2c->XferCount == 0U)
 800921a:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	2200      	movs	r2, #0
 8009220:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8009224:	2300      	movs	r3, #0
}
 8009226:	4618      	mov	r0, r3
 8009228:	3718      	adds	r7, #24
 800922a:	46bd      	mov	sp, r7
 800922c:	bd80      	pop	{r7, pc}
	...

08009230 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8009230:	b580      	push	{r7, lr}
 8009232:	b088      	sub	sp, #32
 8009234:	af02      	add	r7, sp, #8
 8009236:	60f8      	str	r0, [r7, #12]
 8009238:	60b9      	str	r1, [r7, #8]
 800923a:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 800923c:	4b8d      	ldr	r3, [pc, #564]	@ (8009474 <I2C_Mem_ISR_DMA+0x244>)
 800923e:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009246:	2b01      	cmp	r3, #1
 8009248:	d101      	bne.n	800924e <I2C_Mem_ISR_DMA+0x1e>
 800924a:	2302      	movs	r3, #2
 800924c:	e10e      	b.n	800946c <I2C_Mem_ISR_DMA+0x23c>
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	2201      	movs	r2, #1
 8009252:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8009256:	68bb      	ldr	r3, [r7, #8]
 8009258:	f003 0310 	and.w	r3, r3, #16
 800925c:	2b00      	cmp	r3, #0
 800925e:	d016      	beq.n	800928e <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8009266:	2b00      	cmp	r3, #0
 8009268:	d011      	beq.n	800928e <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	2210      	movs	r2, #16
 8009270:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009276:	f043 0204 	orr.w	r2, r3, #4
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800927e:	2120      	movs	r1, #32
 8009280:	68f8      	ldr	r0, [r7, #12]
 8009282:	f001 f975 	bl	800a570 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8009286:	68f8      	ldr	r0, [r7, #12]
 8009288:	f000 fed9 	bl	800a03e <I2C_Flush_TXDR>
 800928c:	e0e9      	b.n	8009462 <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800928e:	68bb      	ldr	r3, [r7, #8]
 8009290:	f003 0302 	and.w	r3, r3, #2
 8009294:	2b00      	cmp	r3, #0
 8009296:	d00e      	beq.n	80092b6 <I2C_Mem_ISR_DMA+0x86>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d009      	beq.n	80092b6 <I2C_Mem_ISR_DMA+0x86>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	68fa      	ldr	r2, [r7, #12]
 80092a8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80092aa:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	f04f 32ff 	mov.w	r2, #4294967295
 80092b2:	651a      	str	r2, [r3, #80]	@ 0x50
 80092b4:	e0d5      	b.n	8009462 <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80092b6:	68bb      	ldr	r3, [r7, #8]
 80092b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d05f      	beq.n	8009380 <I2C_Mem_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d05a      	beq.n	8009380 <I2C_Mem_ISR_DMA+0x150>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80092ca:	2101      	movs	r1, #1
 80092cc:	68f8      	ldr	r0, [r7, #12]
 80092ce:	f001 f9d3 	bl	800a678 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80092d2:	2110      	movs	r1, #16
 80092d4:	68f8      	ldr	r0, [r7, #12]
 80092d6:	f001 f94b 	bl	800a570 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80092de:	b29b      	uxth	r3, r3
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d048      	beq.n	8009376 <I2C_Mem_ISR_DMA+0x146>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80092e8:	b29b      	uxth	r3, r3
 80092ea:	2bff      	cmp	r3, #255	@ 0xff
 80092ec:	d910      	bls.n	8009310 <I2C_Mem_ISR_DMA+0xe0>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	22ff      	movs	r2, #255	@ 0xff
 80092f2:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80092f8:	b299      	uxth	r1, r3
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80092fe:	b2da      	uxtb	r2, r3
 8009300:	2300      	movs	r3, #0
 8009302:	9300      	str	r3, [sp, #0]
 8009304:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8009308:	68f8      	ldr	r0, [r7, #12]
 800930a:	f001 f8ff 	bl	800a50c <I2C_TransferConfig>
 800930e:	e011      	b.n	8009334 <I2C_Mem_ISR_DMA+0x104>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009314:	b29a      	uxth	r2, r3
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800931e:	b299      	uxth	r1, r3
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009324:	b2da      	uxtb	r2, r3
 8009326:	2300      	movs	r3, #0
 8009328:	9300      	str	r3, [sp, #0]
 800932a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800932e:	68f8      	ldr	r0, [r7, #12]
 8009330:	f001 f8ec 	bl	800a50c <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009338:	b29a      	uxth	r2, r3
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800933e:	1ad3      	subs	r3, r2, r3
 8009340:	b29a      	uxth	r2, r3
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800934c:	b2db      	uxtb	r3, r3
 800934e:	2b22      	cmp	r3, #34	@ 0x22
 8009350:	d108      	bne.n	8009364 <I2C_Mem_ISR_DMA+0x134>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	681a      	ldr	r2, [r3, #0]
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009360:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8009362:	e07e      	b.n	8009462 <I2C_Mem_ISR_DMA+0x232>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	681a      	ldr	r2, [r3, #0]
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009372:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8009374:	e075      	b.n	8009462 <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8009376:	2140      	movs	r1, #64	@ 0x40
 8009378:	68f8      	ldr	r0, [r7, #12]
 800937a:	f000 fd49 	bl	8009e10 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800937e:	e070      	b.n	8009462 <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8009380:	68bb      	ldr	r3, [r7, #8]
 8009382:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009386:	2b00      	cmp	r3, #0
 8009388:	d05d      	beq.n	8009446 <I2C_Mem_ISR_DMA+0x216>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8009390:	2b00      	cmp	r3, #0
 8009392:	d058      	beq.n	8009446 <I2C_Mem_ISR_DMA+0x216>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8009394:	2101      	movs	r1, #1
 8009396:	68f8      	ldr	r0, [r7, #12]
 8009398:	f001 f96e 	bl	800a678 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800939c:	2110      	movs	r1, #16
 800939e:	68f8      	ldr	r0, [r7, #12]
 80093a0:	f001 f8e6 	bl	800a570 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80093aa:	b2db      	uxtb	r3, r3
 80093ac:	2b22      	cmp	r3, #34	@ 0x22
 80093ae:	d101      	bne.n	80093b4 <I2C_Mem_ISR_DMA+0x184>
    {
      direction = I2C_GENERATE_START_READ;
 80093b0:	4b31      	ldr	r3, [pc, #196]	@ (8009478 <I2C_Mem_ISR_DMA+0x248>)
 80093b2:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80093b8:	b29b      	uxth	r3, r3
 80093ba:	2bff      	cmp	r3, #255	@ 0xff
 80093bc:	d910      	bls.n	80093e0 <I2C_Mem_ISR_DMA+0x1b0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	22ff      	movs	r2, #255	@ 0xff
 80093c2:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80093c8:	b299      	uxth	r1, r3
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80093ce:	b2da      	uxtb	r2, r3
 80093d0:	697b      	ldr	r3, [r7, #20]
 80093d2:	9300      	str	r3, [sp, #0]
 80093d4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80093d8:	68f8      	ldr	r0, [r7, #12]
 80093da:	f001 f897 	bl	800a50c <I2C_TransferConfig>
 80093de:	e011      	b.n	8009404 <I2C_Mem_ISR_DMA+0x1d4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80093e4:	b29a      	uxth	r2, r3
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80093ee:	b299      	uxth	r1, r3
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80093f4:	b2da      	uxtb	r2, r3
 80093f6:	697b      	ldr	r3, [r7, #20]
 80093f8:	9300      	str	r3, [sp, #0]
 80093fa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80093fe:	68f8      	ldr	r0, [r7, #12]
 8009400:	f001 f884 	bl	800a50c <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009408:	b29a      	uxth	r2, r3
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800940e:	1ad3      	subs	r3, r2, r3
 8009410:	b29a      	uxth	r2, r3
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800941c:	b2db      	uxtb	r3, r3
 800941e:	2b22      	cmp	r3, #34	@ 0x22
 8009420:	d108      	bne.n	8009434 <I2C_Mem_ISR_DMA+0x204>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	681a      	ldr	r2, [r3, #0]
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009430:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8009432:	e016      	b.n	8009462 <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	681a      	ldr	r2, [r3, #0]
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009442:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8009444:	e00d      	b.n	8009462 <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8009446:	68bb      	ldr	r3, [r7, #8]
 8009448:	f003 0320 	and.w	r3, r3, #32
 800944c:	2b00      	cmp	r3, #0
 800944e:	d008      	beq.n	8009462 <I2C_Mem_ISR_DMA+0x232>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8009456:	2b00      	cmp	r3, #0
 8009458:	d003      	beq.n	8009462 <I2C_Mem_ISR_DMA+0x232>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800945a:	68b9      	ldr	r1, [r7, #8]
 800945c:	68f8      	ldr	r0, [r7, #12]
 800945e:	f000 fa57 	bl	8009910 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	2200      	movs	r2, #0
 8009466:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800946a:	2300      	movs	r3, #0
}
 800946c:	4618      	mov	r0, r3
 800946e:	3718      	adds	r7, #24
 8009470:	46bd      	mov	sp, r7
 8009472:	bd80      	pop	{r7, pc}
 8009474:	80002000 	.word	0x80002000
 8009478:	80002400 	.word	0x80002400

0800947c <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 800947c:	b580      	push	{r7, lr}
 800947e:	b088      	sub	sp, #32
 8009480:	af00      	add	r7, sp, #0
 8009482:	60f8      	str	r0, [r7, #12]
 8009484:	60b9      	str	r1, [r7, #8]
 8009486:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800948c:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 800948e:	2300      	movs	r3, #0
 8009490:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009498:	2b01      	cmp	r3, #1
 800949a:	d101      	bne.n	80094a0 <I2C_Slave_ISR_DMA+0x24>
 800949c:	2302      	movs	r3, #2
 800949e:	e0c0      	b.n	8009622 <I2C_Slave_ISR_DMA+0x1a6>
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	2201      	movs	r2, #1
 80094a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80094a8:	68bb      	ldr	r3, [r7, #8]
 80094aa:	f003 0320 	and.w	r3, r3, #32
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d009      	beq.n	80094c6 <I2C_Slave_ISR_DMA+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d004      	beq.n	80094c6 <I2C_Slave_ISR_DMA+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 80094bc:	68b9      	ldr	r1, [r7, #8]
 80094be:	68f8      	ldr	r0, [r7, #12]
 80094c0:	f000 faee 	bl	8009aa0 <I2C_ITSlaveCplt>
 80094c4:	e0a8      	b.n	8009618 <I2C_Slave_ISR_DMA+0x19c>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80094c6:	68bb      	ldr	r3, [r7, #8]
 80094c8:	f003 0310 	and.w	r3, r3, #16
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	f000 8095 	beq.w	80095fc <I2C_Slave_ISR_DMA+0x180>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80094d8:	2b00      	cmp	r3, #0
 80094da:	f000 808f 	beq.w	80095fc <I2C_Slave_ISR_DMA+0x180>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d104      	bne.n	80094f2 <I2C_Slave_ISR_DMA+0x76>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d07d      	beq.n	80095ee <I2C_Slave_ISR_DMA+0x172>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d00c      	beq.n	8009514 <I2C_Slave_ISR_DMA+0x98>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009500:	2b00      	cmp	r3, #0
 8009502:	d007      	beq.n	8009514 <I2C_Slave_ISR_DMA+0x98>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	685b      	ldr	r3, [r3, #4]
 800950c:	2b00      	cmp	r3, #0
 800950e:	d101      	bne.n	8009514 <I2C_Slave_ISR_DMA+0x98>
          {
            treatdmanack = 1U;
 8009510:	2301      	movs	r3, #1
 8009512:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009518:	2b00      	cmp	r3, #0
 800951a:	d00c      	beq.n	8009536 <I2C_Slave_ISR_DMA+0xba>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009522:	2b00      	cmp	r3, #0
 8009524:	d007      	beq.n	8009536 <I2C_Slave_ISR_DMA+0xba>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	685b      	ldr	r3, [r3, #4]
 800952e:	2b00      	cmp	r3, #0
 8009530:	d101      	bne.n	8009536 <I2C_Slave_ISR_DMA+0xba>
          {
            treatdmanack = 1U;
 8009532:	2301      	movs	r3, #1
 8009534:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8009536:	69fb      	ldr	r3, [r7, #28]
 8009538:	2b01      	cmp	r3, #1
 800953a:	d128      	bne.n	800958e <I2C_Slave_ISR_DMA+0x112>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009542:	b2db      	uxtb	r3, r3
 8009544:	2b28      	cmp	r3, #40	@ 0x28
 8009546:	d108      	bne.n	800955a <I2C_Slave_ISR_DMA+0xde>
 8009548:	69bb      	ldr	r3, [r7, #24]
 800954a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800954e:	d104      	bne.n	800955a <I2C_Slave_ISR_DMA+0xde>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8009550:	68b9      	ldr	r1, [r7, #8]
 8009552:	68f8      	ldr	r0, [r7, #12]
 8009554:	f000 fc08 	bl	8009d68 <I2C_ITListenCplt>
 8009558:	e048      	b.n	80095ec <I2C_Slave_ISR_DMA+0x170>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009560:	b2db      	uxtb	r3, r3
 8009562:	2b29      	cmp	r3, #41	@ 0x29
 8009564:	d10e      	bne.n	8009584 <I2C_Slave_ISR_DMA+0x108>
 8009566:	69bb      	ldr	r3, [r7, #24]
 8009568:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800956c:	d00a      	beq.n	8009584 <I2C_Slave_ISR_DMA+0x108>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	2210      	movs	r2, #16
 8009574:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8009576:	68f8      	ldr	r0, [r7, #12]
 8009578:	f000 fd61 	bl	800a03e <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 800957c:	68f8      	ldr	r0, [r7, #12]
 800957e:	f000 f96a 	bl	8009856 <I2C_ITSlaveSeqCplt>
 8009582:	e033      	b.n	80095ec <I2C_Slave_ISR_DMA+0x170>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	2210      	movs	r2, #16
 800958a:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 800958c:	e034      	b.n	80095f8 <I2C_Slave_ISR_DMA+0x17c>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	2210      	movs	r2, #16
 8009594:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800959a:	f043 0204 	orr.w	r2, r3, #4
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80095a8:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80095aa:	69bb      	ldr	r3, [r7, #24]
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d003      	beq.n	80095b8 <I2C_Slave_ISR_DMA+0x13c>
 80095b0:	69bb      	ldr	r3, [r7, #24]
 80095b2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80095b6:	d11f      	bne.n	80095f8 <I2C_Slave_ISR_DMA+0x17c>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80095b8:	7dfb      	ldrb	r3, [r7, #23]
 80095ba:	2b21      	cmp	r3, #33	@ 0x21
 80095bc:	d002      	beq.n	80095c4 <I2C_Slave_ISR_DMA+0x148>
 80095be:	7dfb      	ldrb	r3, [r7, #23]
 80095c0:	2b29      	cmp	r3, #41	@ 0x29
 80095c2:	d103      	bne.n	80095cc <I2C_Slave_ISR_DMA+0x150>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	2221      	movs	r2, #33	@ 0x21
 80095c8:	631a      	str	r2, [r3, #48]	@ 0x30
 80095ca:	e008      	b.n	80095de <I2C_Slave_ISR_DMA+0x162>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80095cc:	7dfb      	ldrb	r3, [r7, #23]
 80095ce:	2b22      	cmp	r3, #34	@ 0x22
 80095d0:	d002      	beq.n	80095d8 <I2C_Slave_ISR_DMA+0x15c>
 80095d2:	7dfb      	ldrb	r3, [r7, #23]
 80095d4:	2b2a      	cmp	r3, #42	@ 0x2a
 80095d6:	d102      	bne.n	80095de <I2C_Slave_ISR_DMA+0x162>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	2222      	movs	r2, #34	@ 0x22
 80095dc:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80095e2:	4619      	mov	r1, r3
 80095e4:	68f8      	ldr	r0, [r7, #12]
 80095e6:	f000 fc13 	bl	8009e10 <I2C_ITError>
      if (treatdmanack == 1U)
 80095ea:	e005      	b.n	80095f8 <I2C_Slave_ISR_DMA+0x17c>
 80095ec:	e004      	b.n	80095f8 <I2C_Slave_ISR_DMA+0x17c>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	2210      	movs	r2, #16
 80095f4:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80095f6:	e00f      	b.n	8009618 <I2C_Slave_ISR_DMA+0x19c>
      if (treatdmanack == 1U)
 80095f8:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80095fa:	e00d      	b.n	8009618 <I2C_Slave_ISR_DMA+0x19c>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 80095fc:	68bb      	ldr	r3, [r7, #8]
 80095fe:	f003 0308 	and.w	r3, r3, #8
 8009602:	2b00      	cmp	r3, #0
 8009604:	d008      	beq.n	8009618 <I2C_Slave_ISR_DMA+0x19c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800960c:	2b00      	cmp	r3, #0
 800960e:	d003      	beq.n	8009618 <I2C_Slave_ISR_DMA+0x19c>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8009610:	68b9      	ldr	r1, [r7, #8]
 8009612:	68f8      	ldr	r0, [r7, #12]
 8009614:	f000 f85e 	bl	80096d4 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	2200      	movs	r2, #0
 800961c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8009620:	2300      	movs	r3, #0
}
 8009622:	4618      	mov	r0, r3
 8009624:	3720      	adds	r7, #32
 8009626:	46bd      	mov	sp, r7
 8009628:	bd80      	pop	{r7, pc}
	...

0800962c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800962c:	b580      	push	{r7, lr}
 800962e:	b086      	sub	sp, #24
 8009630:	af02      	add	r7, sp, #8
 8009632:	60f8      	str	r0, [r7, #12]
 8009634:	4608      	mov	r0, r1
 8009636:	4611      	mov	r1, r2
 8009638:	461a      	mov	r2, r3
 800963a:	4603      	mov	r3, r0
 800963c:	817b      	strh	r3, [r7, #10]
 800963e:	460b      	mov	r3, r1
 8009640:	813b      	strh	r3, [r7, #8]
 8009642:	4613      	mov	r3, r2
 8009644:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8009646:	88fb      	ldrh	r3, [r7, #6]
 8009648:	b2da      	uxtb	r2, r3
 800964a:	8979      	ldrh	r1, [r7, #10]
 800964c:	4b20      	ldr	r3, [pc, #128]	@ (80096d0 <I2C_RequestMemoryWrite+0xa4>)
 800964e:	9300      	str	r3, [sp, #0]
 8009650:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8009654:	68f8      	ldr	r0, [r7, #12]
 8009656:	f000 ff59 	bl	800a50c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800965a:	69fa      	ldr	r2, [r7, #28]
 800965c:	69b9      	ldr	r1, [r7, #24]
 800965e:	68f8      	ldr	r0, [r7, #12]
 8009660:	f000 fdea 	bl	800a238 <I2C_WaitOnTXISFlagUntilTimeout>
 8009664:	4603      	mov	r3, r0
 8009666:	2b00      	cmp	r3, #0
 8009668:	d001      	beq.n	800966e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800966a:	2301      	movs	r3, #1
 800966c:	e02c      	b.n	80096c8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800966e:	88fb      	ldrh	r3, [r7, #6]
 8009670:	2b01      	cmp	r3, #1
 8009672:	d105      	bne.n	8009680 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009674:	893b      	ldrh	r3, [r7, #8]
 8009676:	b2da      	uxtb	r2, r3
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	629a      	str	r2, [r3, #40]	@ 0x28
 800967e:	e015      	b.n	80096ac <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8009680:	893b      	ldrh	r3, [r7, #8]
 8009682:	0a1b      	lsrs	r3, r3, #8
 8009684:	b29b      	uxth	r3, r3
 8009686:	b2da      	uxtb	r2, r3
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800968e:	69fa      	ldr	r2, [r7, #28]
 8009690:	69b9      	ldr	r1, [r7, #24]
 8009692:	68f8      	ldr	r0, [r7, #12]
 8009694:	f000 fdd0 	bl	800a238 <I2C_WaitOnTXISFlagUntilTimeout>
 8009698:	4603      	mov	r3, r0
 800969a:	2b00      	cmp	r3, #0
 800969c:	d001      	beq.n	80096a2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800969e:	2301      	movs	r3, #1
 80096a0:	e012      	b.n	80096c8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80096a2:	893b      	ldrh	r3, [r7, #8]
 80096a4:	b2da      	uxtb	r2, r3
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80096ac:	69fb      	ldr	r3, [r7, #28]
 80096ae:	9300      	str	r3, [sp, #0]
 80096b0:	69bb      	ldr	r3, [r7, #24]
 80096b2:	2200      	movs	r2, #0
 80096b4:	2180      	movs	r1, #128	@ 0x80
 80096b6:	68f8      	ldr	r0, [r7, #12]
 80096b8:	f000 fd65 	bl	800a186 <I2C_WaitOnFlagUntilTimeout>
 80096bc:	4603      	mov	r3, r0
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d001      	beq.n	80096c6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80096c2:	2301      	movs	r3, #1
 80096c4:	e000      	b.n	80096c8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80096c6:	2300      	movs	r3, #0
}
 80096c8:	4618      	mov	r0, r3
 80096ca:	3710      	adds	r7, #16
 80096cc:	46bd      	mov	sp, r7
 80096ce:	bd80      	pop	{r7, pc}
 80096d0:	80002000 	.word	0x80002000

080096d4 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80096d4:	b580      	push	{r7, lr}
 80096d6:	b084      	sub	sp, #16
 80096d8:	af00      	add	r7, sp, #0
 80096da:	6078      	str	r0, [r7, #4]
 80096dc:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80096e4:	b2db      	uxtb	r3, r3
 80096e6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80096ea:	2b28      	cmp	r3, #40	@ 0x28
 80096ec:	d16a      	bne.n	80097c4 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	699b      	ldr	r3, [r3, #24]
 80096f4:	0c1b      	lsrs	r3, r3, #16
 80096f6:	b2db      	uxtb	r3, r3
 80096f8:	f003 0301 	and.w	r3, r3, #1
 80096fc:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	699b      	ldr	r3, [r3, #24]
 8009704:	0c1b      	lsrs	r3, r3, #16
 8009706:	b29b      	uxth	r3, r3
 8009708:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800970c:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	689b      	ldr	r3, [r3, #8]
 8009714:	b29b      	uxth	r3, r3
 8009716:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800971a:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	68db      	ldr	r3, [r3, #12]
 8009722:	b29b      	uxth	r3, r3
 8009724:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8009728:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	68db      	ldr	r3, [r3, #12]
 800972e:	2b02      	cmp	r3, #2
 8009730:	d138      	bne.n	80097a4 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8009732:	897b      	ldrh	r3, [r7, #10]
 8009734:	09db      	lsrs	r3, r3, #7
 8009736:	b29a      	uxth	r2, r3
 8009738:	89bb      	ldrh	r3, [r7, #12]
 800973a:	4053      	eors	r3, r2
 800973c:	b29b      	uxth	r3, r3
 800973e:	f003 0306 	and.w	r3, r3, #6
 8009742:	2b00      	cmp	r3, #0
 8009744:	d11c      	bne.n	8009780 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8009746:	897b      	ldrh	r3, [r7, #10]
 8009748:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800974e:	1c5a      	adds	r2, r3, #1
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009758:	2b02      	cmp	r3, #2
 800975a:	d13b      	bne.n	80097d4 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	2200      	movs	r2, #0
 8009760:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	2208      	movs	r2, #8
 8009768:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	2200      	movs	r2, #0
 800976e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8009772:	89ba      	ldrh	r2, [r7, #12]
 8009774:	7bfb      	ldrb	r3, [r7, #15]
 8009776:	4619      	mov	r1, r3
 8009778:	6878      	ldr	r0, [r7, #4]
 800977a:	f7ff fb3e 	bl	8008dfa <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800977e:	e029      	b.n	80097d4 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8009780:	893b      	ldrh	r3, [r7, #8]
 8009782:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8009784:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8009788:	6878      	ldr	r0, [r7, #4]
 800978a:	f000 ff75 	bl	800a678 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	2200      	movs	r2, #0
 8009792:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8009796:	89ba      	ldrh	r2, [r7, #12]
 8009798:	7bfb      	ldrb	r3, [r7, #15]
 800979a:	4619      	mov	r1, r3
 800979c:	6878      	ldr	r0, [r7, #4]
 800979e:	f7ff fb2c 	bl	8008dfa <HAL_I2C_AddrCallback>
}
 80097a2:	e017      	b.n	80097d4 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80097a4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80097a8:	6878      	ldr	r0, [r7, #4]
 80097aa:	f000 ff65 	bl	800a678 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	2200      	movs	r2, #0
 80097b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80097b6:	89ba      	ldrh	r2, [r7, #12]
 80097b8:	7bfb      	ldrb	r3, [r7, #15]
 80097ba:	4619      	mov	r1, r3
 80097bc:	6878      	ldr	r0, [r7, #4]
 80097be:	f7ff fb1c 	bl	8008dfa <HAL_I2C_AddrCallback>
}
 80097c2:	e007      	b.n	80097d4 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	2208      	movs	r2, #8
 80097ca:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	2200      	movs	r2, #0
 80097d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 80097d4:	bf00      	nop
 80097d6:	3710      	adds	r7, #16
 80097d8:	46bd      	mov	sp, r7
 80097da:	bd80      	pop	{r7, pc}

080097dc <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80097dc:	b580      	push	{r7, lr}
 80097de:	b082      	sub	sp, #8
 80097e0:	af00      	add	r7, sp, #0
 80097e2:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	2200      	movs	r2, #0
 80097e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80097f2:	b2db      	uxtb	r3, r3
 80097f4:	2b21      	cmp	r3, #33	@ 0x21
 80097f6:	d115      	bne.n	8009824 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	2220      	movs	r2, #32
 80097fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	2211      	movs	r2, #17
 8009804:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	2200      	movs	r2, #0
 800980a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800980c:	2101      	movs	r1, #1
 800980e:	6878      	ldr	r0, [r7, #4]
 8009810:	f000 ff32 	bl	800a678 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	2200      	movs	r2, #0
 8009818:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 800981c:	6878      	ldr	r0, [r7, #4]
 800981e:	f7ff fac4 	bl	8008daa <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8009822:	e014      	b.n	800984e <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	2220      	movs	r2, #32
 8009828:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	2212      	movs	r2, #18
 8009830:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	2200      	movs	r2, #0
 8009836:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8009838:	2102      	movs	r1, #2
 800983a:	6878      	ldr	r0, [r7, #4]
 800983c:	f000 ff1c 	bl	800a678 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	2200      	movs	r2, #0
 8009844:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8009848:	6878      	ldr	r0, [r7, #4]
 800984a:	f7ff fab8 	bl	8008dbe <HAL_I2C_MasterRxCpltCallback>
}
 800984e:	bf00      	nop
 8009850:	3708      	adds	r7, #8
 8009852:	46bd      	mov	sp, r7
 8009854:	bd80      	pop	{r7, pc}

08009856 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8009856:	b580      	push	{r7, lr}
 8009858:	b084      	sub	sp, #16
 800985a:	af00      	add	r7, sp, #0
 800985c:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	2200      	movs	r2, #0
 800986a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009874:	2b00      	cmp	r3, #0
 8009876:	d008      	beq.n	800988a <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	681a      	ldr	r2, [r3, #0]
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8009886:	601a      	str	r2, [r3, #0]
 8009888:	e00c      	b.n	80098a4 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009890:	2b00      	cmp	r3, #0
 8009892:	d007      	beq.n	80098a4 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	681a      	ldr	r2, [r3, #0]
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80098a2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80098aa:	b2db      	uxtb	r3, r3
 80098ac:	2b29      	cmp	r3, #41	@ 0x29
 80098ae:	d112      	bne.n	80098d6 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	2228      	movs	r2, #40	@ 0x28
 80098b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	2221      	movs	r2, #33	@ 0x21
 80098bc:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80098be:	2101      	movs	r1, #1
 80098c0:	6878      	ldr	r0, [r7, #4]
 80098c2:	f000 fed9 	bl	800a678 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	2200      	movs	r2, #0
 80098ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80098ce:	6878      	ldr	r0, [r7, #4]
 80098d0:	f7ff fa7f 	bl	8008dd2 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80098d4:	e017      	b.n	8009906 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80098dc:	b2db      	uxtb	r3, r3
 80098de:	2b2a      	cmp	r3, #42	@ 0x2a
 80098e0:	d111      	bne.n	8009906 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	2228      	movs	r2, #40	@ 0x28
 80098e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	2222      	movs	r2, #34	@ 0x22
 80098ee:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80098f0:	2102      	movs	r1, #2
 80098f2:	6878      	ldr	r0, [r7, #4]
 80098f4:	f000 fec0 	bl	800a678 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	2200      	movs	r2, #0
 80098fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8009900:	6878      	ldr	r0, [r7, #4]
 8009902:	f7ff fa70 	bl	8008de6 <HAL_I2C_SlaveRxCpltCallback>
}
 8009906:	bf00      	nop
 8009908:	3710      	adds	r7, #16
 800990a:	46bd      	mov	sp, r7
 800990c:	bd80      	pop	{r7, pc}
	...

08009910 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8009910:	b580      	push	{r7, lr}
 8009912:	b086      	sub	sp, #24
 8009914:	af00      	add	r7, sp, #0
 8009916:	6078      	str	r0, [r7, #4]
 8009918:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 800991a:	683b      	ldr	r3, [r7, #0]
 800991c:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	2220      	movs	r2, #32
 8009924:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800992c:	b2db      	uxtb	r3, r3
 800992e:	2b21      	cmp	r3, #33	@ 0x21
 8009930:	d107      	bne.n	8009942 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8009932:	2101      	movs	r1, #1
 8009934:	6878      	ldr	r0, [r7, #4]
 8009936:	f000 fe9f 	bl	800a678 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	2211      	movs	r2, #17
 800993e:	631a      	str	r2, [r3, #48]	@ 0x30
 8009940:	e00c      	b.n	800995c <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009948:	b2db      	uxtb	r3, r3
 800994a:	2b22      	cmp	r3, #34	@ 0x22
 800994c:	d106      	bne.n	800995c <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800994e:	2102      	movs	r1, #2
 8009950:	6878      	ldr	r0, [r7, #4]
 8009952:	f000 fe91 	bl	800a678 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	2212      	movs	r2, #18
 800995a:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	6859      	ldr	r1, [r3, #4]
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	681a      	ldr	r2, [r3, #0]
 8009966:	4b4c      	ldr	r3, [pc, #304]	@ (8009a98 <I2C_ITMasterCplt+0x188>)
 8009968:	400b      	ands	r3, r1
 800996a:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	2200      	movs	r2, #0
 8009970:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	4a49      	ldr	r2, [pc, #292]	@ (8009a9c <I2C_ITMasterCplt+0x18c>)
 8009976:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8009978:	697b      	ldr	r3, [r7, #20]
 800997a:	f003 0310 	and.w	r3, r3, #16
 800997e:	2b00      	cmp	r3, #0
 8009980:	d009      	beq.n	8009996 <I2C_ITMasterCplt+0x86>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	2210      	movs	r2, #16
 8009988:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800998e:	f043 0204 	orr.w	r2, r3, #4
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800999c:	b2db      	uxtb	r3, r3
 800999e:	2b60      	cmp	r3, #96	@ 0x60
 80099a0:	d10a      	bne.n	80099b8 <I2C_ITMasterCplt+0xa8>
 80099a2:	697b      	ldr	r3, [r7, #20]
 80099a4:	f003 0304 	and.w	r3, r3, #4
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d005      	beq.n	80099b8 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80099b2:	b2db      	uxtb	r3, r3
 80099b4:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 80099b6:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80099b8:	6878      	ldr	r0, [r7, #4]
 80099ba:	f000 fb40 	bl	800a03e <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80099c2:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80099ca:	b2db      	uxtb	r3, r3
 80099cc:	2b60      	cmp	r3, #96	@ 0x60
 80099ce:	d002      	beq.n	80099d6 <I2C_ITMasterCplt+0xc6>
 80099d0:	693b      	ldr	r3, [r7, #16]
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d006      	beq.n	80099e4 <I2C_ITMasterCplt+0xd4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80099da:	4619      	mov	r1, r3
 80099dc:	6878      	ldr	r0, [r7, #4]
 80099de:	f000 fa17 	bl	8009e10 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 80099e2:	e054      	b.n	8009a8e <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80099ea:	b2db      	uxtb	r3, r3
 80099ec:	2b21      	cmp	r3, #33	@ 0x21
 80099ee:	d124      	bne.n	8009a3a <I2C_ITMasterCplt+0x12a>
    hi2c->State = HAL_I2C_STATE_READY;
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	2220      	movs	r2, #32
 80099f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	2200      	movs	r2, #0
 80099fc:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009a04:	b2db      	uxtb	r3, r3
 8009a06:	2b40      	cmp	r3, #64	@ 0x40
 8009a08:	d10b      	bne.n	8009a22 <I2C_ITMasterCplt+0x112>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	2200      	movs	r2, #0
 8009a0e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	2200      	movs	r2, #0
 8009a16:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8009a1a:	6878      	ldr	r0, [r7, #4]
 8009a1c:	f7ff fa05 	bl	8008e2a <HAL_I2C_MemTxCpltCallback>
}
 8009a20:	e035      	b.n	8009a8e <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	2200      	movs	r2, #0
 8009a26:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	2200      	movs	r2, #0
 8009a2e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8009a32:	6878      	ldr	r0, [r7, #4]
 8009a34:	f7ff f9b9 	bl	8008daa <HAL_I2C_MasterTxCpltCallback>
}
 8009a38:	e029      	b.n	8009a8e <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009a40:	b2db      	uxtb	r3, r3
 8009a42:	2b22      	cmp	r3, #34	@ 0x22
 8009a44:	d123      	bne.n	8009a8e <I2C_ITMasterCplt+0x17e>
    hi2c->State = HAL_I2C_STATE_READY;
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	2220      	movs	r2, #32
 8009a4a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	2200      	movs	r2, #0
 8009a52:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009a5a:	b2db      	uxtb	r3, r3
 8009a5c:	2b40      	cmp	r3, #64	@ 0x40
 8009a5e:	d10b      	bne.n	8009a78 <I2C_ITMasterCplt+0x168>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	2200      	movs	r2, #0
 8009a64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	2200      	movs	r2, #0
 8009a6c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8009a70:	6878      	ldr	r0, [r7, #4]
 8009a72:	f7fb fb21 	bl	80050b8 <HAL_I2C_MemRxCpltCallback>
}
 8009a76:	e00a      	b.n	8009a8e <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	2200      	movs	r2, #0
 8009a7c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	2200      	movs	r2, #0
 8009a84:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8009a88:	6878      	ldr	r0, [r7, #4]
 8009a8a:	f7ff f998 	bl	8008dbe <HAL_I2C_MasterRxCpltCallback>
}
 8009a8e:	bf00      	nop
 8009a90:	3718      	adds	r7, #24
 8009a92:	46bd      	mov	sp, r7
 8009a94:	bd80      	pop	{r7, pc}
 8009a96:	bf00      	nop
 8009a98:	fe00e800 	.word	0xfe00e800
 8009a9c:	ffff0000 	.word	0xffff0000

08009aa0 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8009aa0:	b580      	push	{r7, lr}
 8009aa2:	b086      	sub	sp, #24
 8009aa4:	af00      	add	r7, sp, #0
 8009aa6:	6078      	str	r0, [r7, #4]
 8009aa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8009ab2:	683b      	ldr	r3, [r7, #0]
 8009ab4:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009aba:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009ac2:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	2220      	movs	r2, #32
 8009aca:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8009acc:	7afb      	ldrb	r3, [r7, #11]
 8009ace:	2b21      	cmp	r3, #33	@ 0x21
 8009ad0:	d002      	beq.n	8009ad8 <I2C_ITSlaveCplt+0x38>
 8009ad2:	7afb      	ldrb	r3, [r7, #11]
 8009ad4:	2b29      	cmp	r3, #41	@ 0x29
 8009ad6:	d108      	bne.n	8009aea <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8009ad8:	f248 0101 	movw	r1, #32769	@ 0x8001
 8009adc:	6878      	ldr	r0, [r7, #4]
 8009ade:	f000 fdcb 	bl	800a678 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	2221      	movs	r2, #33	@ 0x21
 8009ae6:	631a      	str	r2, [r3, #48]	@ 0x30
 8009ae8:	e019      	b.n	8009b1e <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8009aea:	7afb      	ldrb	r3, [r7, #11]
 8009aec:	2b22      	cmp	r3, #34	@ 0x22
 8009aee:	d002      	beq.n	8009af6 <I2C_ITSlaveCplt+0x56>
 8009af0:	7afb      	ldrb	r3, [r7, #11]
 8009af2:	2b2a      	cmp	r3, #42	@ 0x2a
 8009af4:	d108      	bne.n	8009b08 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8009af6:	f248 0102 	movw	r1, #32770	@ 0x8002
 8009afa:	6878      	ldr	r0, [r7, #4]
 8009afc:	f000 fdbc 	bl	800a678 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	2222      	movs	r2, #34	@ 0x22
 8009b04:	631a      	str	r2, [r3, #48]	@ 0x30
 8009b06:	e00a      	b.n	8009b1e <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8009b08:	7afb      	ldrb	r3, [r7, #11]
 8009b0a:	2b28      	cmp	r3, #40	@ 0x28
 8009b0c:	d107      	bne.n	8009b1e <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8009b0e:	f248 0103 	movw	r1, #32771	@ 0x8003
 8009b12:	6878      	ldr	r0, [r7, #4]
 8009b14:	f000 fdb0 	bl	800a678 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	2200      	movs	r2, #0
 8009b1c:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	685a      	ldr	r2, [r3, #4]
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009b2c:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	6859      	ldr	r1, [r3, #4]
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	681a      	ldr	r2, [r3, #0]
 8009b38:	4b89      	ldr	r3, [pc, #548]	@ (8009d60 <I2C_ITSlaveCplt+0x2c0>)
 8009b3a:	400b      	ands	r3, r1
 8009b3c:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8009b3e:	6878      	ldr	r0, [r7, #4]
 8009b40:	f000 fa7d 	bl	800a03e <I2C_Flush_TXDR>

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8009b44:	693b      	ldr	r3, [r7, #16]
 8009b46:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d013      	beq.n	8009b76 <I2C_ITSlaveCplt+0xd6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	681a      	ldr	r2, [r3, #0]
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8009b5c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d01f      	beq.n	8009ba6 <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	685b      	ldr	r3, [r3, #4]
 8009b6e:	b29a      	uxth	r2, r3
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8009b74:	e017      	b.n	8009ba6 <I2C_ITSlaveCplt+0x106>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8009b76:	693b      	ldr	r3, [r7, #16]
 8009b78:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d012      	beq.n	8009ba6 <I2C_ITSlaveCplt+0x106>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	681a      	ldr	r2, [r3, #0]
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8009b8e:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d006      	beq.n	8009ba6 <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	685b      	ldr	r3, [r3, #4]
 8009ba0:	b29a      	uxth	r2, r3
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8009ba6:	697b      	ldr	r3, [r7, #20]
 8009ba8:	f003 0304 	and.w	r3, r3, #4
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d020      	beq.n	8009bf2 <I2C_ITSlaveCplt+0x152>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8009bb0:	697b      	ldr	r3, [r7, #20]
 8009bb2:	f023 0304 	bic.w	r3, r3, #4
 8009bb6:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009bc2:	b2d2      	uxtb	r2, r2
 8009bc4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009bca:	1c5a      	adds	r2, r3, #1
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d00c      	beq.n	8009bf2 <I2C_ITSlaveCplt+0x152>
    {
      hi2c->XferSize--;
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009bdc:	3b01      	subs	r3, #1
 8009bde:	b29a      	uxth	r2, r3
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009be8:	b29b      	uxth	r3, r3
 8009bea:	3b01      	subs	r3, #1
 8009bec:	b29a      	uxth	r2, r3
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009bf6:	b29b      	uxth	r3, r3
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d005      	beq.n	8009c08 <I2C_ITSlaveCplt+0x168>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009c00:	f043 0204 	orr.w	r2, r3, #4
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8009c08:	697b      	ldr	r3, [r7, #20]
 8009c0a:	f003 0310 	and.w	r3, r3, #16
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d049      	beq.n	8009ca6 <I2C_ITSlaveCplt+0x206>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8009c12:	693b      	ldr	r3, [r7, #16]
 8009c14:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d044      	beq.n	8009ca6 <I2C_ITSlaveCplt+0x206>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009c20:	b29b      	uxth	r3, r3
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d128      	bne.n	8009c78 <I2C_ITSlaveCplt+0x1d8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009c2c:	b2db      	uxtb	r3, r3
 8009c2e:	2b28      	cmp	r3, #40	@ 0x28
 8009c30:	d108      	bne.n	8009c44 <I2C_ITSlaveCplt+0x1a4>
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009c38:	d104      	bne.n	8009c44 <I2C_ITSlaveCplt+0x1a4>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8009c3a:	6979      	ldr	r1, [r7, #20]
 8009c3c:	6878      	ldr	r0, [r7, #4]
 8009c3e:	f000 f893 	bl	8009d68 <I2C_ITListenCplt>
 8009c42:	e030      	b.n	8009ca6 <I2C_ITSlaveCplt+0x206>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009c4a:	b2db      	uxtb	r3, r3
 8009c4c:	2b29      	cmp	r3, #41	@ 0x29
 8009c4e:	d10e      	bne.n	8009c6e <I2C_ITSlaveCplt+0x1ce>
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8009c56:	d00a      	beq.n	8009c6e <I2C_ITSlaveCplt+0x1ce>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	2210      	movs	r2, #16
 8009c5e:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8009c60:	6878      	ldr	r0, [r7, #4]
 8009c62:	f000 f9ec 	bl	800a03e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8009c66:	6878      	ldr	r0, [r7, #4]
 8009c68:	f7ff fdf5 	bl	8009856 <I2C_ITSlaveSeqCplt>
 8009c6c:	e01b      	b.n	8009ca6 <I2C_ITSlaveCplt+0x206>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	2210      	movs	r2, #16
 8009c74:	61da      	str	r2, [r3, #28]
 8009c76:	e016      	b.n	8009ca6 <I2C_ITSlaveCplt+0x206>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	2210      	movs	r2, #16
 8009c7e:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009c84:	f043 0204 	orr.w	r2, r3, #4
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d003      	beq.n	8009c9a <I2C_ITSlaveCplt+0x1fa>
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009c98:	d105      	bne.n	8009ca6 <I2C_ITSlaveCplt+0x206>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009c9e:	4619      	mov	r1, r3
 8009ca0:	6878      	ldr	r0, [r7, #4]
 8009ca2:	f000 f8b5 	bl	8009e10 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	2200      	movs	r2, #0
 8009caa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	2200      	movs	r2, #0
 8009cb2:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d010      	beq.n	8009cde <I2C_ITSlaveCplt+0x23e>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009cc0:	4619      	mov	r1, r3
 8009cc2:	6878      	ldr	r0, [r7, #4]
 8009cc4:	f000 f8a4 	bl	8009e10 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009cce:	b2db      	uxtb	r3, r3
 8009cd0:	2b28      	cmp	r3, #40	@ 0x28
 8009cd2:	d141      	bne.n	8009d58 <I2C_ITSlaveCplt+0x2b8>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8009cd4:	6979      	ldr	r1, [r7, #20]
 8009cd6:	6878      	ldr	r0, [r7, #4]
 8009cd8:	f000 f846 	bl	8009d68 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8009cdc:	e03c      	b.n	8009d58 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ce2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8009ce6:	d014      	beq.n	8009d12 <I2C_ITSlaveCplt+0x272>
    I2C_ITSlaveSeqCplt(hi2c);
 8009ce8:	6878      	ldr	r0, [r7, #4]
 8009cea:	f7ff fdb4 	bl	8009856 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	4a1c      	ldr	r2, [pc, #112]	@ (8009d64 <I2C_ITSlaveCplt+0x2c4>)
 8009cf2:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	2220      	movs	r2, #32
 8009cf8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	2200      	movs	r2, #0
 8009d00:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	2200      	movs	r2, #0
 8009d06:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8009d0a:	6878      	ldr	r0, [r7, #4]
 8009d0c:	f7ff f883 	bl	8008e16 <HAL_I2C_ListenCpltCallback>
}
 8009d10:	e022      	b.n	8009d58 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009d18:	b2db      	uxtb	r3, r3
 8009d1a:	2b22      	cmp	r3, #34	@ 0x22
 8009d1c:	d10e      	bne.n	8009d3c <I2C_ITSlaveCplt+0x29c>
    hi2c->State = HAL_I2C_STATE_READY;
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	2220      	movs	r2, #32
 8009d22:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	2200      	movs	r2, #0
 8009d2a:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	2200      	movs	r2, #0
 8009d30:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8009d34:	6878      	ldr	r0, [r7, #4]
 8009d36:	f7ff f856 	bl	8008de6 <HAL_I2C_SlaveRxCpltCallback>
}
 8009d3a:	e00d      	b.n	8009d58 <I2C_ITSlaveCplt+0x2b8>
    hi2c->State = HAL_I2C_STATE_READY;
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	2220      	movs	r2, #32
 8009d40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	2200      	movs	r2, #0
 8009d48:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	2200      	movs	r2, #0
 8009d4e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8009d52:	6878      	ldr	r0, [r7, #4]
 8009d54:	f7ff f83d 	bl	8008dd2 <HAL_I2C_SlaveTxCpltCallback>
}
 8009d58:	bf00      	nop
 8009d5a:	3718      	adds	r7, #24
 8009d5c:	46bd      	mov	sp, r7
 8009d5e:	bd80      	pop	{r7, pc}
 8009d60:	fe00e800 	.word	0xfe00e800
 8009d64:	ffff0000 	.word	0xffff0000

08009d68 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8009d68:	b580      	push	{r7, lr}
 8009d6a:	b082      	sub	sp, #8
 8009d6c:	af00      	add	r7, sp, #0
 8009d6e:	6078      	str	r0, [r7, #4]
 8009d70:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	4a25      	ldr	r2, [pc, #148]	@ (8009e0c <I2C_ITListenCplt+0xa4>)
 8009d76:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	2200      	movs	r2, #0
 8009d7c:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	2220      	movs	r2, #32
 8009d82:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	2200      	movs	r2, #0
 8009d8a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	2200      	movs	r2, #0
 8009d92:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8009d94:	683b      	ldr	r3, [r7, #0]
 8009d96:	f003 0304 	and.w	r3, r3, #4
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d022      	beq.n	8009de4 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009da8:	b2d2      	uxtb	r2, r2
 8009daa:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009db0:	1c5a      	adds	r2, r3, #1
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d012      	beq.n	8009de4 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009dc2:	3b01      	subs	r3, #1
 8009dc4:	b29a      	uxth	r2, r3
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009dce:	b29b      	uxth	r3, r3
 8009dd0:	3b01      	subs	r3, #1
 8009dd2:	b29a      	uxth	r2, r3
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009ddc:	f043 0204 	orr.w	r2, r3, #4
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8009de4:	f248 0103 	movw	r1, #32771	@ 0x8003
 8009de8:	6878      	ldr	r0, [r7, #4]
 8009dea:	f000 fc45 	bl	800a678 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	2210      	movs	r2, #16
 8009df4:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	2200      	movs	r2, #0
 8009dfa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8009dfe:	6878      	ldr	r0, [r7, #4]
 8009e00:	f7ff f809 	bl	8008e16 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8009e04:	bf00      	nop
 8009e06:	3708      	adds	r7, #8
 8009e08:	46bd      	mov	sp, r7
 8009e0a:	bd80      	pop	{r7, pc}
 8009e0c:	ffff0000 	.word	0xffff0000

08009e10 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8009e10:	b580      	push	{r7, lr}
 8009e12:	b084      	sub	sp, #16
 8009e14:	af00      	add	r7, sp, #0
 8009e16:	6078      	str	r0, [r7, #4]
 8009e18:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009e20:	73fb      	strb	r3, [r7, #15]
#if defined(HAL_DMA_MODULE_ENABLED)
  uint32_t tmppreviousstate;
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	2200      	movs	r2, #0
 8009e26:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	4a6d      	ldr	r2, [pc, #436]	@ (8009fe4 <I2C_ITError+0x1d4>)
 8009e2e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	2200      	movs	r2, #0
 8009e34:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009e3a:	683b      	ldr	r3, [r7, #0]
 8009e3c:	431a      	orrs	r2, r3
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8009e42:	7bfb      	ldrb	r3, [r7, #15]
 8009e44:	2b28      	cmp	r3, #40	@ 0x28
 8009e46:	d005      	beq.n	8009e54 <I2C_ITError+0x44>
 8009e48:	7bfb      	ldrb	r3, [r7, #15]
 8009e4a:	2b29      	cmp	r3, #41	@ 0x29
 8009e4c:	d002      	beq.n	8009e54 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8009e4e:	7bfb      	ldrb	r3, [r7, #15]
 8009e50:	2b2a      	cmp	r3, #42	@ 0x2a
 8009e52:	d10b      	bne.n	8009e6c <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8009e54:	2103      	movs	r1, #3
 8009e56:	6878      	ldr	r0, [r7, #4]
 8009e58:	f000 fc0e 	bl	800a678 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	2228      	movs	r2, #40	@ 0x28
 8009e60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	4a60      	ldr	r2, [pc, #384]	@ (8009fe8 <I2C_ITError+0x1d8>)
 8009e68:	635a      	str	r2, [r3, #52]	@ 0x34
 8009e6a:	e030      	b.n	8009ece <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8009e6c:	f248 0103 	movw	r1, #32771	@ 0x8003
 8009e70:	6878      	ldr	r0, [r7, #4]
 8009e72:	f000 fc01 	bl	800a678 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8009e76:	6878      	ldr	r0, [r7, #4]
 8009e78:	f000 f8e1 	bl	800a03e <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009e82:	b2db      	uxtb	r3, r3
 8009e84:	2b60      	cmp	r3, #96	@ 0x60
 8009e86:	d01f      	beq.n	8009ec8 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	2220      	movs	r2, #32
 8009e8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	699b      	ldr	r3, [r3, #24]
 8009e96:	f003 0320 	and.w	r3, r3, #32
 8009e9a:	2b20      	cmp	r3, #32
 8009e9c:	d114      	bne.n	8009ec8 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	699b      	ldr	r3, [r3, #24]
 8009ea4:	f003 0310 	and.w	r3, r3, #16
 8009ea8:	2b10      	cmp	r3, #16
 8009eaa:	d109      	bne.n	8009ec0 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	2210      	movs	r2, #16
 8009eb2:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009eb8:	f043 0204 	orr.w	r2, r3, #4
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	2220      	movs	r2, #32
 8009ec6:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	2200      	movs	r2, #0
 8009ecc:	635a      	str	r2, [r3, #52]	@ 0x34
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009ed2:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d039      	beq.n	8009f50 <I2C_ITError+0x140>
 8009edc:	68bb      	ldr	r3, [r7, #8]
 8009ede:	2b11      	cmp	r3, #17
 8009ee0:	d002      	beq.n	8009ee8 <I2C_ITError+0xd8>
 8009ee2:	68bb      	ldr	r3, [r7, #8]
 8009ee4:	2b21      	cmp	r3, #33	@ 0x21
 8009ee6:	d133      	bne.n	8009f50 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009ef2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009ef6:	d107      	bne.n	8009f08 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	681a      	ldr	r2, [r3, #0]
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8009f06:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f0c:	4618      	mov	r0, r3
 8009f0e:	f7fe f9ca 	bl	80082a6 <HAL_DMA_GetState>
 8009f12:	4603      	mov	r3, r0
 8009f14:	2b01      	cmp	r3, #1
 8009f16:	d017      	beq.n	8009f48 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f1c:	4a33      	ldr	r2, [pc, #204]	@ (8009fec <I2C_ITError+0x1dc>)
 8009f1e:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	2200      	movs	r2, #0
 8009f24:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f2c:	4618      	mov	r0, r3
 8009f2e:	f7fe f8ac 	bl	800808a <HAL_DMA_Abort_IT>
 8009f32:	4603      	mov	r3, r0
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d04d      	beq.n	8009fd4 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f3e:	687a      	ldr	r2, [r7, #4]
 8009f40:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8009f42:	4610      	mov	r0, r2
 8009f44:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8009f46:	e045      	b.n	8009fd4 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8009f48:	6878      	ldr	r0, [r7, #4]
 8009f4a:	f000 f851 	bl	8009ff0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8009f4e:	e041      	b.n	8009fd4 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d039      	beq.n	8009fcc <I2C_ITError+0x1bc>
 8009f58:	68bb      	ldr	r3, [r7, #8]
 8009f5a:	2b12      	cmp	r3, #18
 8009f5c:	d002      	beq.n	8009f64 <I2C_ITError+0x154>
 8009f5e:	68bb      	ldr	r3, [r7, #8]
 8009f60:	2b22      	cmp	r3, #34	@ 0x22
 8009f62:	d133      	bne.n	8009fcc <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009f6e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009f72:	d107      	bne.n	8009f84 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	681a      	ldr	r2, [r3, #0]
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8009f82:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009f88:	4618      	mov	r0, r3
 8009f8a:	f7fe f98c 	bl	80082a6 <HAL_DMA_GetState>
 8009f8e:	4603      	mov	r3, r0
 8009f90:	2b01      	cmp	r3, #1
 8009f92:	d017      	beq.n	8009fc4 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009f98:	4a14      	ldr	r2, [pc, #80]	@ (8009fec <I2C_ITError+0x1dc>)
 8009f9a:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	2200      	movs	r2, #0
 8009fa0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009fa8:	4618      	mov	r0, r3
 8009faa:	f7fe f86e 	bl	800808a <HAL_DMA_Abort_IT>
 8009fae:	4603      	mov	r3, r0
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d011      	beq.n	8009fd8 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009fb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009fba:	687a      	ldr	r2, [r7, #4]
 8009fbc:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8009fbe:	4610      	mov	r0, r2
 8009fc0:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8009fc2:	e009      	b.n	8009fd8 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8009fc4:	6878      	ldr	r0, [r7, #4]
 8009fc6:	f000 f813 	bl	8009ff0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8009fca:	e005      	b.n	8009fd8 <I2C_ITError+0x1c8>
    }
  }
  else
#endif /* HAL_DMA_MODULE_ENABLED */
  {
    I2C_TreatErrorCallback(hi2c);
 8009fcc:	6878      	ldr	r0, [r7, #4]
 8009fce:	f000 f80f 	bl	8009ff0 <I2C_TreatErrorCallback>
  }
}
 8009fd2:	e002      	b.n	8009fda <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8009fd4:	bf00      	nop
 8009fd6:	e000      	b.n	8009fda <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8009fd8:	bf00      	nop
}
 8009fda:	bf00      	nop
 8009fdc:	3710      	adds	r7, #16
 8009fde:	46bd      	mov	sp, r7
 8009fe0:	bd80      	pop	{r7, pc}
 8009fe2:	bf00      	nop
 8009fe4:	ffff0000 	.word	0xffff0000
 8009fe8:	08008e67 	.word	0x08008e67
 8009fec:	0800a14b 	.word	0x0800a14b

08009ff0 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8009ff0:	b580      	push	{r7, lr}
 8009ff2:	b082      	sub	sp, #8
 8009ff4:	af00      	add	r7, sp, #0
 8009ff6:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009ffe:	b2db      	uxtb	r3, r3
 800a000:	2b60      	cmp	r3, #96	@ 0x60
 800a002:	d10e      	bne.n	800a022 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	2220      	movs	r2, #32
 800a008:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	2200      	movs	r2, #0
 800a010:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	2200      	movs	r2, #0
 800a016:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800a01a:	6878      	ldr	r0, [r7, #4]
 800a01c:	f7fe ff19 	bl	8008e52 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800a020:	e009      	b.n	800a036 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	2200      	movs	r2, #0
 800a026:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	2200      	movs	r2, #0
 800a02c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 800a030:	6878      	ldr	r0, [r7, #4]
 800a032:	f7fe ff04 	bl	8008e3e <HAL_I2C_ErrorCallback>
}
 800a036:	bf00      	nop
 800a038:	3708      	adds	r7, #8
 800a03a:	46bd      	mov	sp, r7
 800a03c:	bd80      	pop	{r7, pc}

0800a03e <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800a03e:	b480      	push	{r7}
 800a040:	b083      	sub	sp, #12
 800a042:	af00      	add	r7, sp, #0
 800a044:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	699b      	ldr	r3, [r3, #24]
 800a04c:	f003 0302 	and.w	r3, r3, #2
 800a050:	2b02      	cmp	r3, #2
 800a052:	d103      	bne.n	800a05c <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	2200      	movs	r2, #0
 800a05a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	699b      	ldr	r3, [r3, #24]
 800a062:	f003 0301 	and.w	r3, r3, #1
 800a066:	2b01      	cmp	r3, #1
 800a068:	d007      	beq.n	800a07a <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	699a      	ldr	r2, [r3, #24]
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	f042 0201 	orr.w	r2, r2, #1
 800a078:	619a      	str	r2, [r3, #24]
  }
}
 800a07a:	bf00      	nop
 800a07c:	370c      	adds	r7, #12
 800a07e:	46bd      	mov	sp, r7
 800a080:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a084:	4770      	bx	lr

0800a086 <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a086:	b580      	push	{r7, lr}
 800a088:	b084      	sub	sp, #16
 800a08a:	af00      	add	r7, sp, #0
 800a08c:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a092:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	681a      	ldr	r2, [r3, #0]
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800a0a2:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a0a8:	b29b      	uxth	r3, r3
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d104      	bne.n	800a0b8 <I2C_DMAMasterReceiveCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800a0ae:	2120      	movs	r1, #32
 800a0b0:	68f8      	ldr	r0, [r7, #12]
 800a0b2:	f000 fa5d 	bl	800a570 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 800a0b6:	e02d      	b.n	800a114 <I2C_DMAMasterReceiveCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a0bc:	68fa      	ldr	r2, [r7, #12]
 800a0be:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 800a0c0:	441a      	add	r2, r3
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a0ca:	b29b      	uxth	r3, r3
 800a0cc:	2bff      	cmp	r3, #255	@ 0xff
 800a0ce:	d903      	bls.n	800a0d8 <I2C_DMAMasterReceiveCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	22ff      	movs	r2, #255	@ 0xff
 800a0d4:	851a      	strh	r2, [r3, #40]	@ 0x28
 800a0d6:	e004      	b.n	800a0e2 <I2C_DMAMasterReceiveCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a0dc:	b29a      	uxth	r2, r3
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	3324      	adds	r3, #36	@ 0x24
 800a0ec:	4619      	mov	r1, r3
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a0f2:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 800a0f8:	f7fd ff4c 	bl	8007f94 <HAL_DMA_Start_IT>
 800a0fc:	4603      	mov	r3, r0
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d004      	beq.n	800a10c <I2C_DMAMasterReceiveCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800a102:	2110      	movs	r1, #16
 800a104:	68f8      	ldr	r0, [r7, #12]
 800a106:	f7ff fe83 	bl	8009e10 <I2C_ITError>
}
 800a10a:	e003      	b.n	800a114 <I2C_DMAMasterReceiveCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 800a10c:	2140      	movs	r1, #64	@ 0x40
 800a10e:	68f8      	ldr	r0, [r7, #12]
 800a110:	f000 fa2e 	bl	800a570 <I2C_Enable_IRQ>
}
 800a114:	bf00      	nop
 800a116:	3710      	adds	r7, #16
 800a118:	46bd      	mov	sp, r7
 800a11a:	bd80      	pop	{r7, pc}

0800a11c <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 800a11c:	b580      	push	{r7, lr}
 800a11e:	b084      	sub	sp, #16
 800a120:	af00      	add	r7, sp, #0
 800a122:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a128:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	685a      	ldr	r2, [r3, #4]
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a138:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800a13a:	2110      	movs	r1, #16
 800a13c:	68f8      	ldr	r0, [r7, #12]
 800a13e:	f7ff fe67 	bl	8009e10 <I2C_ITError>
}
 800a142:	bf00      	nop
 800a144:	3710      	adds	r7, #16
 800a146:	46bd      	mov	sp, r7
 800a148:	bd80      	pop	{r7, pc}

0800a14a <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800a14a:	b580      	push	{r7, lr}
 800a14c:	b084      	sub	sp, #16
 800a14e:	af00      	add	r7, sp, #0
 800a150:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a156:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d003      	beq.n	800a168 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a164:	2200      	movs	r2, #0
 800a166:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d003      	beq.n	800a178 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a174:	2200      	movs	r2, #0
 800a176:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 800a178:	68f8      	ldr	r0, [r7, #12]
 800a17a:	f7ff ff39 	bl	8009ff0 <I2C_TreatErrorCallback>
}
 800a17e:	bf00      	nop
 800a180:	3710      	adds	r7, #16
 800a182:	46bd      	mov	sp, r7
 800a184:	bd80      	pop	{r7, pc}

0800a186 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800a186:	b580      	push	{r7, lr}
 800a188:	b084      	sub	sp, #16
 800a18a:	af00      	add	r7, sp, #0
 800a18c:	60f8      	str	r0, [r7, #12]
 800a18e:	60b9      	str	r1, [r7, #8]
 800a190:	603b      	str	r3, [r7, #0]
 800a192:	4613      	mov	r3, r2
 800a194:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a196:	e03b      	b.n	800a210 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800a198:	69ba      	ldr	r2, [r7, #24]
 800a19a:	6839      	ldr	r1, [r7, #0]
 800a19c:	68f8      	ldr	r0, [r7, #12]
 800a19e:	f000 f8d5 	bl	800a34c <I2C_IsErrorOccurred>
 800a1a2:	4603      	mov	r3, r0
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d001      	beq.n	800a1ac <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800a1a8:	2301      	movs	r3, #1
 800a1aa:	e041      	b.n	800a230 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a1ac:	683b      	ldr	r3, [r7, #0]
 800a1ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1b2:	d02d      	beq.n	800a210 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a1b4:	f7fd fc88 	bl	8007ac8 <HAL_GetTick>
 800a1b8:	4602      	mov	r2, r0
 800a1ba:	69bb      	ldr	r3, [r7, #24]
 800a1bc:	1ad3      	subs	r3, r2, r3
 800a1be:	683a      	ldr	r2, [r7, #0]
 800a1c0:	429a      	cmp	r2, r3
 800a1c2:	d302      	bcc.n	800a1ca <I2C_WaitOnFlagUntilTimeout+0x44>
 800a1c4:	683b      	ldr	r3, [r7, #0]
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d122      	bne.n	800a210 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	699a      	ldr	r2, [r3, #24]
 800a1d0:	68bb      	ldr	r3, [r7, #8]
 800a1d2:	4013      	ands	r3, r2
 800a1d4:	68ba      	ldr	r2, [r7, #8]
 800a1d6:	429a      	cmp	r2, r3
 800a1d8:	bf0c      	ite	eq
 800a1da:	2301      	moveq	r3, #1
 800a1dc:	2300      	movne	r3, #0
 800a1de:	b2db      	uxtb	r3, r3
 800a1e0:	461a      	mov	r2, r3
 800a1e2:	79fb      	ldrb	r3, [r7, #7]
 800a1e4:	429a      	cmp	r2, r3
 800a1e6:	d113      	bne.n	800a210 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a1ec:	f043 0220 	orr.w	r2, r3, #32
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	2220      	movs	r2, #32
 800a1f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	2200      	movs	r2, #0
 800a200:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	2200      	movs	r2, #0
 800a208:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800a20c:	2301      	movs	r3, #1
 800a20e:	e00f      	b.n	800a230 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	699a      	ldr	r2, [r3, #24]
 800a216:	68bb      	ldr	r3, [r7, #8]
 800a218:	4013      	ands	r3, r2
 800a21a:	68ba      	ldr	r2, [r7, #8]
 800a21c:	429a      	cmp	r2, r3
 800a21e:	bf0c      	ite	eq
 800a220:	2301      	moveq	r3, #1
 800a222:	2300      	movne	r3, #0
 800a224:	b2db      	uxtb	r3, r3
 800a226:	461a      	mov	r2, r3
 800a228:	79fb      	ldrb	r3, [r7, #7]
 800a22a:	429a      	cmp	r2, r3
 800a22c:	d0b4      	beq.n	800a198 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a22e:	2300      	movs	r3, #0
}
 800a230:	4618      	mov	r0, r3
 800a232:	3710      	adds	r7, #16
 800a234:	46bd      	mov	sp, r7
 800a236:	bd80      	pop	{r7, pc}

0800a238 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800a238:	b580      	push	{r7, lr}
 800a23a:	b084      	sub	sp, #16
 800a23c:	af00      	add	r7, sp, #0
 800a23e:	60f8      	str	r0, [r7, #12]
 800a240:	60b9      	str	r1, [r7, #8]
 800a242:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800a244:	e033      	b.n	800a2ae <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800a246:	687a      	ldr	r2, [r7, #4]
 800a248:	68b9      	ldr	r1, [r7, #8]
 800a24a:	68f8      	ldr	r0, [r7, #12]
 800a24c:	f000 f87e 	bl	800a34c <I2C_IsErrorOccurred>
 800a250:	4603      	mov	r3, r0
 800a252:	2b00      	cmp	r3, #0
 800a254:	d001      	beq.n	800a25a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800a256:	2301      	movs	r3, #1
 800a258:	e031      	b.n	800a2be <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a25a:	68bb      	ldr	r3, [r7, #8]
 800a25c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a260:	d025      	beq.n	800a2ae <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a262:	f7fd fc31 	bl	8007ac8 <HAL_GetTick>
 800a266:	4602      	mov	r2, r0
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	1ad3      	subs	r3, r2, r3
 800a26c:	68ba      	ldr	r2, [r7, #8]
 800a26e:	429a      	cmp	r2, r3
 800a270:	d302      	bcc.n	800a278 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800a272:	68bb      	ldr	r3, [r7, #8]
 800a274:	2b00      	cmp	r3, #0
 800a276:	d11a      	bne.n	800a2ae <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	699b      	ldr	r3, [r3, #24]
 800a27e:	f003 0302 	and.w	r3, r3, #2
 800a282:	2b02      	cmp	r3, #2
 800a284:	d013      	beq.n	800a2ae <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a28a:	f043 0220 	orr.w	r2, r3, #32
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	2220      	movs	r2, #32
 800a296:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	2200      	movs	r2, #0
 800a29e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	2200      	movs	r2, #0
 800a2a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800a2aa:	2301      	movs	r3, #1
 800a2ac:	e007      	b.n	800a2be <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	699b      	ldr	r3, [r3, #24]
 800a2b4:	f003 0302 	and.w	r3, r3, #2
 800a2b8:	2b02      	cmp	r3, #2
 800a2ba:	d1c4      	bne.n	800a246 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800a2bc:	2300      	movs	r3, #0
}
 800a2be:	4618      	mov	r0, r3
 800a2c0:	3710      	adds	r7, #16
 800a2c2:	46bd      	mov	sp, r7
 800a2c4:	bd80      	pop	{r7, pc}

0800a2c6 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800a2c6:	b580      	push	{r7, lr}
 800a2c8:	b084      	sub	sp, #16
 800a2ca:	af00      	add	r7, sp, #0
 800a2cc:	60f8      	str	r0, [r7, #12]
 800a2ce:	60b9      	str	r1, [r7, #8]
 800a2d0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a2d2:	e02f      	b.n	800a334 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800a2d4:	687a      	ldr	r2, [r7, #4]
 800a2d6:	68b9      	ldr	r1, [r7, #8]
 800a2d8:	68f8      	ldr	r0, [r7, #12]
 800a2da:	f000 f837 	bl	800a34c <I2C_IsErrorOccurred>
 800a2de:	4603      	mov	r3, r0
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d001      	beq.n	800a2e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800a2e4:	2301      	movs	r3, #1
 800a2e6:	e02d      	b.n	800a344 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a2e8:	f7fd fbee 	bl	8007ac8 <HAL_GetTick>
 800a2ec:	4602      	mov	r2, r0
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	1ad3      	subs	r3, r2, r3
 800a2f2:	68ba      	ldr	r2, [r7, #8]
 800a2f4:	429a      	cmp	r2, r3
 800a2f6:	d302      	bcc.n	800a2fe <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800a2f8:	68bb      	ldr	r3, [r7, #8]
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d11a      	bne.n	800a334 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	699b      	ldr	r3, [r3, #24]
 800a304:	f003 0320 	and.w	r3, r3, #32
 800a308:	2b20      	cmp	r3, #32
 800a30a:	d013      	beq.n	800a334 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a310:	f043 0220 	orr.w	r2, r3, #32
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	2220      	movs	r2, #32
 800a31c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	2200      	movs	r2, #0
 800a324:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	2200      	movs	r2, #0
 800a32c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800a330:	2301      	movs	r3, #1
 800a332:	e007      	b.n	800a344 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	699b      	ldr	r3, [r3, #24]
 800a33a:	f003 0320 	and.w	r3, r3, #32
 800a33e:	2b20      	cmp	r3, #32
 800a340:	d1c8      	bne.n	800a2d4 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a342:	2300      	movs	r3, #0
}
 800a344:	4618      	mov	r0, r3
 800a346:	3710      	adds	r7, #16
 800a348:	46bd      	mov	sp, r7
 800a34a:	bd80      	pop	{r7, pc}

0800a34c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a34c:	b580      	push	{r7, lr}
 800a34e:	b08a      	sub	sp, #40	@ 0x28
 800a350:	af00      	add	r7, sp, #0
 800a352:	60f8      	str	r0, [r7, #12]
 800a354:	60b9      	str	r1, [r7, #8]
 800a356:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a358:	2300      	movs	r3, #0
 800a35a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	699b      	ldr	r3, [r3, #24]
 800a364:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800a366:	2300      	movs	r3, #0
 800a368:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800a36e:	69bb      	ldr	r3, [r7, #24]
 800a370:	f003 0310 	and.w	r3, r3, #16
 800a374:	2b00      	cmp	r3, #0
 800a376:	d068      	beq.n	800a44a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	2210      	movs	r2, #16
 800a37e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800a380:	e049      	b.n	800a416 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800a382:	68bb      	ldr	r3, [r7, #8]
 800a384:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a388:	d045      	beq.n	800a416 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800a38a:	f7fd fb9d 	bl	8007ac8 <HAL_GetTick>
 800a38e:	4602      	mov	r2, r0
 800a390:	69fb      	ldr	r3, [r7, #28]
 800a392:	1ad3      	subs	r3, r2, r3
 800a394:	68ba      	ldr	r2, [r7, #8]
 800a396:	429a      	cmp	r2, r3
 800a398:	d302      	bcc.n	800a3a0 <I2C_IsErrorOccurred+0x54>
 800a39a:	68bb      	ldr	r3, [r7, #8]
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d13a      	bne.n	800a416 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	685b      	ldr	r3, [r3, #4]
 800a3a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a3aa:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a3b2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	699b      	ldr	r3, [r3, #24]
 800a3ba:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a3be:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a3c2:	d121      	bne.n	800a408 <I2C_IsErrorOccurred+0xbc>
 800a3c4:	697b      	ldr	r3, [r7, #20]
 800a3c6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a3ca:	d01d      	beq.n	800a408 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800a3cc:	7cfb      	ldrb	r3, [r7, #19]
 800a3ce:	2b20      	cmp	r3, #32
 800a3d0:	d01a      	beq.n	800a408 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	685a      	ldr	r2, [r3, #4]
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800a3e0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800a3e2:	f7fd fb71 	bl	8007ac8 <HAL_GetTick>
 800a3e6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a3e8:	e00e      	b.n	800a408 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800a3ea:	f7fd fb6d 	bl	8007ac8 <HAL_GetTick>
 800a3ee:	4602      	mov	r2, r0
 800a3f0:	69fb      	ldr	r3, [r7, #28]
 800a3f2:	1ad3      	subs	r3, r2, r3
 800a3f4:	2b19      	cmp	r3, #25
 800a3f6:	d907      	bls.n	800a408 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800a3f8:	6a3b      	ldr	r3, [r7, #32]
 800a3fa:	f043 0320 	orr.w	r3, r3, #32
 800a3fe:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800a400:	2301      	movs	r3, #1
 800a402:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800a406:	e006      	b.n	800a416 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	699b      	ldr	r3, [r3, #24]
 800a40e:	f003 0320 	and.w	r3, r3, #32
 800a412:	2b20      	cmp	r3, #32
 800a414:	d1e9      	bne.n	800a3ea <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	699b      	ldr	r3, [r3, #24]
 800a41c:	f003 0320 	and.w	r3, r3, #32
 800a420:	2b20      	cmp	r3, #32
 800a422:	d003      	beq.n	800a42c <I2C_IsErrorOccurred+0xe0>
 800a424:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d0aa      	beq.n	800a382 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800a42c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a430:	2b00      	cmp	r3, #0
 800a432:	d103      	bne.n	800a43c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	2220      	movs	r2, #32
 800a43a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800a43c:	6a3b      	ldr	r3, [r7, #32]
 800a43e:	f043 0304 	orr.w	r3, r3, #4
 800a442:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800a444:	2301      	movs	r3, #1
 800a446:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	699b      	ldr	r3, [r3, #24]
 800a450:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800a452:	69bb      	ldr	r3, [r7, #24]
 800a454:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d00b      	beq.n	800a474 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800a45c:	6a3b      	ldr	r3, [r7, #32]
 800a45e:	f043 0301 	orr.w	r3, r3, #1
 800a462:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a46c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800a46e:	2301      	movs	r3, #1
 800a470:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800a474:	69bb      	ldr	r3, [r7, #24]
 800a476:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d00b      	beq.n	800a496 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800a47e:	6a3b      	ldr	r3, [r7, #32]
 800a480:	f043 0308 	orr.w	r3, r3, #8
 800a484:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800a48e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800a490:	2301      	movs	r3, #1
 800a492:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800a496:	69bb      	ldr	r3, [r7, #24]
 800a498:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d00b      	beq.n	800a4b8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800a4a0:	6a3b      	ldr	r3, [r7, #32]
 800a4a2:	f043 0302 	orr.w	r3, r3, #2
 800a4a6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a4b0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800a4b2:	2301      	movs	r3, #1
 800a4b4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800a4b8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d01c      	beq.n	800a4fa <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800a4c0:	68f8      	ldr	r0, [r7, #12]
 800a4c2:	f7ff fdbc 	bl	800a03e <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	6859      	ldr	r1, [r3, #4]
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	681a      	ldr	r2, [r3, #0]
 800a4d0:	4b0d      	ldr	r3, [pc, #52]	@ (800a508 <I2C_IsErrorOccurred+0x1bc>)
 800a4d2:	400b      	ands	r3, r1
 800a4d4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a4da:	6a3b      	ldr	r3, [r7, #32]
 800a4dc:	431a      	orrs	r2, r3
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	2220      	movs	r2, #32
 800a4e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	2200      	movs	r2, #0
 800a4ee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	2200      	movs	r2, #0
 800a4f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800a4fa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800a4fe:	4618      	mov	r0, r3
 800a500:	3728      	adds	r7, #40	@ 0x28
 800a502:	46bd      	mov	sp, r7
 800a504:	bd80      	pop	{r7, pc}
 800a506:	bf00      	nop
 800a508:	fe00e800 	.word	0xfe00e800

0800a50c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800a50c:	b480      	push	{r7}
 800a50e:	b087      	sub	sp, #28
 800a510:	af00      	add	r7, sp, #0
 800a512:	60f8      	str	r0, [r7, #12]
 800a514:	607b      	str	r3, [r7, #4]
 800a516:	460b      	mov	r3, r1
 800a518:	817b      	strh	r3, [r7, #10]
 800a51a:	4613      	mov	r3, r2
 800a51c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800a51e:	897b      	ldrh	r3, [r7, #10]
 800a520:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800a524:	7a7b      	ldrb	r3, [r7, #9]
 800a526:	041b      	lsls	r3, r3, #16
 800a528:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800a52c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800a532:	6a3b      	ldr	r3, [r7, #32]
 800a534:	4313      	orrs	r3, r2
 800a536:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a53a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	685a      	ldr	r2, [r3, #4]
 800a542:	6a3b      	ldr	r3, [r7, #32]
 800a544:	0d5b      	lsrs	r3, r3, #21
 800a546:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800a54a:	4b08      	ldr	r3, [pc, #32]	@ (800a56c <I2C_TransferConfig+0x60>)
 800a54c:	430b      	orrs	r3, r1
 800a54e:	43db      	mvns	r3, r3
 800a550:	ea02 0103 	and.w	r1, r2, r3
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	697a      	ldr	r2, [r7, #20]
 800a55a:	430a      	orrs	r2, r1
 800a55c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800a55e:	bf00      	nop
 800a560:	371c      	adds	r7, #28
 800a562:	46bd      	mov	sp, r7
 800a564:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a568:	4770      	bx	lr
 800a56a:	bf00      	nop
 800a56c:	03ff63ff 	.word	0x03ff63ff

0800a570 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800a570:	b480      	push	{r7}
 800a572:	b085      	sub	sp, #20
 800a574:	af00      	add	r7, sp, #0
 800a576:	6078      	str	r0, [r7, #4]
 800a578:	460b      	mov	r3, r1
 800a57a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800a57c:	2300      	movs	r3, #0
 800a57e:	60fb      	str	r3, [r7, #12]

#if defined(HAL_DMA_MODULE_ENABLED)
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a584:	4a39      	ldr	r2, [pc, #228]	@ (800a66c <I2C_Enable_IRQ+0xfc>)
 800a586:	4293      	cmp	r3, r2
 800a588:	d032      	beq.n	800a5f0 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 800a58e:	4a38      	ldr	r2, [pc, #224]	@ (800a670 <I2C_Enable_IRQ+0x100>)
 800a590:	4293      	cmp	r3, r2
 800a592:	d02d      	beq.n	800a5f0 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 800a598:	4a36      	ldr	r2, [pc, #216]	@ (800a674 <I2C_Enable_IRQ+0x104>)
 800a59a:	4293      	cmp	r3, r2
 800a59c:	d028      	beq.n	800a5f0 <I2C_Enable_IRQ+0x80>
#endif /* HAL_DMA_MODULE_ENABLED */
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800a59e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	da03      	bge.n	800a5ae <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 800a5ac:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800a5ae:	887b      	ldrh	r3, [r7, #2]
 800a5b0:	f003 0301 	and.w	r3, r3, #1
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d003      	beq.n	800a5c0 <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 800a5be:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800a5c0:	887b      	ldrh	r3, [r7, #2]
 800a5c2:	f003 0302 	and.w	r3, r3, #2
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d003      	beq.n	800a5d2 <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 800a5d0:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800a5d2:	887b      	ldrh	r3, [r7, #2]
 800a5d4:	2b10      	cmp	r3, #16
 800a5d6:	d103      	bne.n	800a5e0 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 800a5de:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800a5e0:	887b      	ldrh	r3, [r7, #2]
 800a5e2:	2b20      	cmp	r3, #32
 800a5e4:	d133      	bne.n	800a64e <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	f043 0320 	orr.w	r3, r3, #32
 800a5ec:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800a5ee:	e02e      	b.n	800a64e <I2C_Enable_IRQ+0xde>
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800a5f0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	da03      	bge.n	800a600 <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 800a5fe:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800a600:	887b      	ldrh	r3, [r7, #2]
 800a602:	f003 0301 	and.w	r3, r3, #1
 800a606:	2b00      	cmp	r3, #0
 800a608:	d003      	beq.n	800a612 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 800a610:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800a612:	887b      	ldrh	r3, [r7, #2]
 800a614:	f003 0302 	and.w	r3, r3, #2
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d003      	beq.n	800a624 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 800a622:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800a624:	887b      	ldrh	r3, [r7, #2]
 800a626:	2b10      	cmp	r3, #16
 800a628:	d103      	bne.n	800a632 <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 800a630:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800a632:	887b      	ldrh	r3, [r7, #2]
 800a634:	2b20      	cmp	r3, #32
 800a636:	d103      	bne.n	800a640 <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800a63e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800a640:	887b      	ldrh	r3, [r7, #2]
 800a642:	2b40      	cmp	r3, #64	@ 0x40
 800a644:	d103      	bne.n	800a64e <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a64c:	60fb      	str	r3, [r7, #12]
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	6819      	ldr	r1, [r3, #0]
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	68fa      	ldr	r2, [r7, #12]
 800a65a:	430a      	orrs	r2, r1
 800a65c:	601a      	str	r2, [r3, #0]
}
 800a65e:	bf00      	nop
 800a660:	3714      	adds	r7, #20
 800a662:	46bd      	mov	sp, r7
 800a664:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a668:	4770      	bx	lr
 800a66a:	bf00      	nop
 800a66c:	08009059 	.word	0x08009059
 800a670:	0800947d 	.word	0x0800947d
 800a674:	08009231 	.word	0x08009231

0800a678 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800a678:	b480      	push	{r7}
 800a67a:	b085      	sub	sp, #20
 800a67c:	af00      	add	r7, sp, #0
 800a67e:	6078      	str	r0, [r7, #4]
 800a680:	460b      	mov	r3, r1
 800a682:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800a684:	2300      	movs	r3, #0
 800a686:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800a688:	887b      	ldrh	r3, [r7, #2]
 800a68a:	f003 0301 	and.w	r3, r3, #1
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d00f      	beq.n	800a6b2 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 800a698:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a6a0:	b2db      	uxtb	r3, r3
 800a6a2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800a6a6:	2b28      	cmp	r3, #40	@ 0x28
 800a6a8:	d003      	beq.n	800a6b2 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 800a6b0:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800a6b2:	887b      	ldrh	r3, [r7, #2]
 800a6b4:	f003 0302 	and.w	r3, r3, #2
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d00f      	beq.n	800a6dc <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 800a6c2:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a6ca:	b2db      	uxtb	r3, r3
 800a6cc:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800a6d0:	2b28      	cmp	r3, #40	@ 0x28
 800a6d2:	d003      	beq.n	800a6dc <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 800a6da:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800a6dc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	da03      	bge.n	800a6ec <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 800a6ea:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800a6ec:	887b      	ldrh	r3, [r7, #2]
 800a6ee:	2b10      	cmp	r3, #16
 800a6f0:	d103      	bne.n	800a6fa <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 800a6f8:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800a6fa:	887b      	ldrh	r3, [r7, #2]
 800a6fc:	2b20      	cmp	r3, #32
 800a6fe:	d103      	bne.n	800a708 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	f043 0320 	orr.w	r3, r3, #32
 800a706:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800a708:	887b      	ldrh	r3, [r7, #2]
 800a70a:	2b40      	cmp	r3, #64	@ 0x40
 800a70c:	d103      	bne.n	800a716 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a714:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	6819      	ldr	r1, [r3, #0]
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	43da      	mvns	r2, r3
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	400a      	ands	r2, r1
 800a726:	601a      	str	r2, [r3, #0]
}
 800a728:	bf00      	nop
 800a72a:	3714      	adds	r7, #20
 800a72c:	46bd      	mov	sp, r7
 800a72e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a732:	4770      	bx	lr

0800a734 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800a734:	b480      	push	{r7}
 800a736:	b083      	sub	sp, #12
 800a738:	af00      	add	r7, sp, #0
 800a73a:	6078      	str	r0, [r7, #4]
 800a73c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a744:	b2db      	uxtb	r3, r3
 800a746:	2b20      	cmp	r3, #32
 800a748:	d138      	bne.n	800a7bc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a750:	2b01      	cmp	r3, #1
 800a752:	d101      	bne.n	800a758 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800a754:	2302      	movs	r3, #2
 800a756:	e032      	b.n	800a7be <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	2201      	movs	r2, #1
 800a75c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	2224      	movs	r2, #36	@ 0x24
 800a764:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	681a      	ldr	r2, [r3, #0]
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	f022 0201 	bic.w	r2, r2, #1
 800a776:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	681a      	ldr	r2, [r3, #0]
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800a786:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	6819      	ldr	r1, [r3, #0]
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	683a      	ldr	r2, [r7, #0]
 800a794:	430a      	orrs	r2, r1
 800a796:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	681a      	ldr	r2, [r3, #0]
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	f042 0201 	orr.w	r2, r2, #1
 800a7a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	2220      	movs	r2, #32
 800a7ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	2200      	movs	r2, #0
 800a7b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800a7b8:	2300      	movs	r3, #0
 800a7ba:	e000      	b.n	800a7be <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800a7bc:	2302      	movs	r3, #2
  }
}
 800a7be:	4618      	mov	r0, r3
 800a7c0:	370c      	adds	r7, #12
 800a7c2:	46bd      	mov	sp, r7
 800a7c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7c8:	4770      	bx	lr

0800a7ca <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800a7ca:	b480      	push	{r7}
 800a7cc:	b085      	sub	sp, #20
 800a7ce:	af00      	add	r7, sp, #0
 800a7d0:	6078      	str	r0, [r7, #4]
 800a7d2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a7da:	b2db      	uxtb	r3, r3
 800a7dc:	2b20      	cmp	r3, #32
 800a7de:	d139      	bne.n	800a854 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a7e6:	2b01      	cmp	r3, #1
 800a7e8:	d101      	bne.n	800a7ee <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800a7ea:	2302      	movs	r3, #2
 800a7ec:	e033      	b.n	800a856 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	2201      	movs	r2, #1
 800a7f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	2224      	movs	r2, #36	@ 0x24
 800a7fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	681a      	ldr	r2, [r3, #0]
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	f022 0201 	bic.w	r2, r2, #1
 800a80c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800a81c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800a81e:	683b      	ldr	r3, [r7, #0]
 800a820:	021b      	lsls	r3, r3, #8
 800a822:	68fa      	ldr	r2, [r7, #12]
 800a824:	4313      	orrs	r3, r2
 800a826:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	68fa      	ldr	r2, [r7, #12]
 800a82e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	681a      	ldr	r2, [r3, #0]
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	f042 0201 	orr.w	r2, r2, #1
 800a83e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	2220      	movs	r2, #32
 800a844:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	2200      	movs	r2, #0
 800a84c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800a850:	2300      	movs	r3, #0
 800a852:	e000      	b.n	800a856 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800a854:	2302      	movs	r3, #2
  }
}
 800a856:	4618      	mov	r0, r3
 800a858:	3714      	adds	r7, #20
 800a85a:	46bd      	mov	sp, r7
 800a85c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a860:	4770      	bx	lr
	...

0800a864 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 800a864:	b580      	push	{r7, lr}
 800a866:	b084      	sub	sp, #16
 800a868:	af00      	add	r7, sp, #0
 800a86a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 800a86c:	2300      	movs	r3, #0
 800a86e:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	2b00      	cmp	r3, #0
 800a874:	d01e      	beq.n	800a8b4 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 800a876:	4b13      	ldr	r3, [pc, #76]	@ (800a8c4 <HAL_IPCC_Init+0x60>)
 800a878:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800a880:	b2db      	uxtb	r3, r3
 800a882:	2b00      	cmp	r3, #0
 800a884:	d102      	bne.n	800a88c <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 800a886:	6878      	ldr	r0, [r7, #4]
 800a888:	f7fc fe88 	bl	800759c <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 800a88c:	68b8      	ldr	r0, [r7, #8]
 800a88e:	f000 f85b 	bl	800a948 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 800a892:	68bb      	ldr	r3, [r7, #8]
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	f043 1201 	orr.w	r2, r3, #65537	@ 0x10001
 800a89a:	68bb      	ldr	r3, [r7, #8]
 800a89c:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 800a89e:	6878      	ldr	r0, [r7, #4]
 800a8a0:	f000 f82c 	bl	800a8fc <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	2200      	movs	r2, #0
 800a8a8:	635a      	str	r2, [r3, #52]	@ 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	2201      	movs	r2, #1
 800a8ae:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
 800a8b2:	e001      	b.n	800a8b8 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 800a8b4:	2301      	movs	r3, #1
 800a8b6:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 800a8b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8ba:	4618      	mov	r0, r3
 800a8bc:	3710      	adds	r7, #16
 800a8be:	46bd      	mov	sp, r7
 800a8c0:	bd80      	pop	{r7, pc}
 800a8c2:	bf00      	nop
 800a8c4:	58000c00 	.word	0x58000c00

0800a8c8 <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 800a8c8:	b480      	push	{r7}
 800a8ca:	b085      	sub	sp, #20
 800a8cc:	af00      	add	r7, sp, #0
 800a8ce:	60f8      	str	r0, [r7, #12]
 800a8d0:	60b9      	str	r1, [r7, #8]
 800a8d2:	4613      	mov	r3, r2
 800a8d4:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 800a8d6:	bf00      	nop
 800a8d8:	3714      	adds	r7, #20
 800a8da:	46bd      	mov	sp, r7
 800a8dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8e0:	4770      	bx	lr

0800a8e2 <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 800a8e2:	b480      	push	{r7}
 800a8e4:	b085      	sub	sp, #20
 800a8e6:	af00      	add	r7, sp, #0
 800a8e8:	60f8      	str	r0, [r7, #12]
 800a8ea:	60b9      	str	r1, [r7, #8]
 800a8ec:	4613      	mov	r3, r2
 800a8ee:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 800a8f0:	bf00      	nop
 800a8f2:	3714      	adds	r7, #20
 800a8f4:	46bd      	mov	sp, r7
 800a8f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8fa:	4770      	bx	lr

0800a8fc <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 800a8fc:	b480      	push	{r7}
 800a8fe:	b085      	sub	sp, #20
 800a900:	af00      	add	r7, sp, #0
 800a902:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 800a904:	2300      	movs	r3, #0
 800a906:	60fb      	str	r3, [r7, #12]
 800a908:	e00f      	b.n	800a92a <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 800a90a:	687a      	ldr	r2, [r7, #4]
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	009b      	lsls	r3, r3, #2
 800a910:	4413      	add	r3, r2
 800a912:	4a0b      	ldr	r2, [pc, #44]	@ (800a940 <IPCC_SetDefaultCallbacks+0x44>)
 800a914:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 800a916:	687a      	ldr	r2, [r7, #4]
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	3306      	adds	r3, #6
 800a91c:	009b      	lsls	r3, r3, #2
 800a91e:	4413      	add	r3, r2
 800a920:	4a08      	ldr	r2, [pc, #32]	@ (800a944 <IPCC_SetDefaultCallbacks+0x48>)
 800a922:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	3301      	adds	r3, #1
 800a928:	60fb      	str	r3, [r7, #12]
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	2b05      	cmp	r3, #5
 800a92e:	d9ec      	bls.n	800a90a <IPCC_SetDefaultCallbacks+0xe>
  }
}
 800a930:	bf00      	nop
 800a932:	bf00      	nop
 800a934:	3714      	adds	r7, #20
 800a936:	46bd      	mov	sp, r7
 800a938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a93c:	4770      	bx	lr
 800a93e:	bf00      	nop
 800a940:	0800a8c9 	.word	0x0800a8c9
 800a944:	0800a8e3 	.word	0x0800a8e3

0800a948 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 800a948:	b480      	push	{r7}
 800a94a:	b083      	sub	sp, #12
 800a94c:	af00      	add	r7, sp, #0
 800a94e:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	2200      	movs	r2, #0
 800a954:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	f04f 123f 	mov.w	r2, #4128831	@ 0x3f003f
 800a95c:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	223f      	movs	r2, #63	@ 0x3f
 800a962:	609a      	str	r2, [r3, #8]
}
 800a964:	bf00      	nop
 800a966:	370c      	adds	r7, #12
 800a968:	46bd      	mov	sp, r7
 800a96a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a96e:	4770      	bx	lr

0800a970 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800a970:	b480      	push	{r7}
 800a972:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a974:	4b05      	ldr	r3, [pc, #20]	@ (800a98c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	4a04      	ldr	r2, [pc, #16]	@ (800a98c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800a97a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a97e:	6013      	str	r3, [r2, #0]
}
 800a980:	bf00      	nop
 800a982:	46bd      	mov	sp, r7
 800a984:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a988:	4770      	bx	lr
 800a98a:	bf00      	nop
 800a98c:	58000400 	.word	0x58000400

0800a990 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800a990:	b480      	push	{r7}
 800a992:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 800a994:	4b04      	ldr	r3, [pc, #16]	@ (800a9a8 <HAL_PWREx_GetVoltageRange+0x18>)
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 800a99c:	4618      	mov	r0, r3
 800a99e:	46bd      	mov	sp, r7
 800a9a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9a4:	4770      	bx	lr
 800a9a6:	bf00      	nop
 800a9a8:	58000400 	.word	0x58000400

0800a9ac <LL_RCC_HSE_IsEnabledDiv2>:
{
 800a9ac:	b480      	push	{r7}
 800a9ae:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 800a9b0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a9ba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a9be:	d101      	bne.n	800a9c4 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 800a9c0:	2301      	movs	r3, #1
 800a9c2:	e000      	b.n	800a9c6 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 800a9c4:	2300      	movs	r3, #0
}
 800a9c6:	4618      	mov	r0, r3
 800a9c8:	46bd      	mov	sp, r7
 800a9ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ce:	4770      	bx	lr

0800a9d0 <LL_RCC_HSE_Enable>:
{
 800a9d0:	b480      	push	{r7}
 800a9d2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800a9d4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a9de:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a9e2:	6013      	str	r3, [r2, #0]
}
 800a9e4:	bf00      	nop
 800a9e6:	46bd      	mov	sp, r7
 800a9e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ec:	4770      	bx	lr

0800a9ee <LL_RCC_HSE_Disable>:
{
 800a9ee:	b480      	push	{r7}
 800a9f0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800a9f2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a9fc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800aa00:	6013      	str	r3, [r2, #0]
}
 800aa02:	bf00      	nop
 800aa04:	46bd      	mov	sp, r7
 800aa06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa0a:	4770      	bx	lr

0800aa0c <LL_RCC_HSE_IsReady>:
{
 800aa0c:	b480      	push	{r7}
 800aa0e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800aa10:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800aa1a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800aa1e:	d101      	bne.n	800aa24 <LL_RCC_HSE_IsReady+0x18>
 800aa20:	2301      	movs	r3, #1
 800aa22:	e000      	b.n	800aa26 <LL_RCC_HSE_IsReady+0x1a>
 800aa24:	2300      	movs	r3, #0
}
 800aa26:	4618      	mov	r0, r3
 800aa28:	46bd      	mov	sp, r7
 800aa2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa2e:	4770      	bx	lr

0800aa30 <LL_RCC_HSI_Enable>:
{
 800aa30:	b480      	push	{r7}
 800aa32:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800aa34:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800aa3e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800aa42:	6013      	str	r3, [r2, #0]
}
 800aa44:	bf00      	nop
 800aa46:	46bd      	mov	sp, r7
 800aa48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa4c:	4770      	bx	lr

0800aa4e <LL_RCC_HSI_Disable>:
{
 800aa4e:	b480      	push	{r7}
 800aa50:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800aa52:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800aa5c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800aa60:	6013      	str	r3, [r2, #0]
}
 800aa62:	bf00      	nop
 800aa64:	46bd      	mov	sp, r7
 800aa66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa6a:	4770      	bx	lr

0800aa6c <LL_RCC_HSI_IsReady>:
{
 800aa6c:	b480      	push	{r7}
 800aa6e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800aa70:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800aa7a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800aa7e:	d101      	bne.n	800aa84 <LL_RCC_HSI_IsReady+0x18>
 800aa80:	2301      	movs	r3, #1
 800aa82:	e000      	b.n	800aa86 <LL_RCC_HSI_IsReady+0x1a>
 800aa84:	2300      	movs	r3, #0
}
 800aa86:	4618      	mov	r0, r3
 800aa88:	46bd      	mov	sp, r7
 800aa8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa8e:	4770      	bx	lr

0800aa90 <LL_RCC_HSI_SetCalibTrimming>:
{
 800aa90:	b480      	push	{r7}
 800aa92:	b083      	sub	sp, #12
 800aa94:	af00      	add	r7, sp, #0
 800aa96:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800aa98:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800aa9c:	685b      	ldr	r3, [r3, #4]
 800aa9e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	061b      	lsls	r3, r3, #24
 800aaa6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800aaaa:	4313      	orrs	r3, r2
 800aaac:	604b      	str	r3, [r1, #4]
}
 800aaae:	bf00      	nop
 800aab0:	370c      	adds	r7, #12
 800aab2:	46bd      	mov	sp, r7
 800aab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab8:	4770      	bx	lr

0800aaba <LL_RCC_HSI48_Enable>:
{
 800aaba:	b480      	push	{r7}
 800aabc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800aabe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800aac2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800aac6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800aaca:	f043 0301 	orr.w	r3, r3, #1
 800aace:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 800aad2:	bf00      	nop
 800aad4:	46bd      	mov	sp, r7
 800aad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aada:	4770      	bx	lr

0800aadc <LL_RCC_HSI48_Disable>:
{
 800aadc:	b480      	push	{r7}
 800aade:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800aae0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800aae4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800aae8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800aaec:	f023 0301 	bic.w	r3, r3, #1
 800aaf0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 800aaf4:	bf00      	nop
 800aaf6:	46bd      	mov	sp, r7
 800aaf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aafc:	4770      	bx	lr

0800aafe <LL_RCC_HSI48_IsReady>:
{
 800aafe:	b480      	push	{r7}
 800ab00:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 800ab02:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ab06:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800ab0a:	f003 0302 	and.w	r3, r3, #2
 800ab0e:	2b02      	cmp	r3, #2
 800ab10:	d101      	bne.n	800ab16 <LL_RCC_HSI48_IsReady+0x18>
 800ab12:	2301      	movs	r3, #1
 800ab14:	e000      	b.n	800ab18 <LL_RCC_HSI48_IsReady+0x1a>
 800ab16:	2300      	movs	r3, #0
}
 800ab18:	4618      	mov	r0, r3
 800ab1a:	46bd      	mov	sp, r7
 800ab1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab20:	4770      	bx	lr

0800ab22 <LL_RCC_LSE_Enable>:
{
 800ab22:	b480      	push	{r7}
 800ab24:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800ab26:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ab2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ab2e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800ab32:	f043 0301 	orr.w	r3, r3, #1
 800ab36:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800ab3a:	bf00      	nop
 800ab3c:	46bd      	mov	sp, r7
 800ab3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab42:	4770      	bx	lr

0800ab44 <LL_RCC_LSE_Disable>:
{
 800ab44:	b480      	push	{r7}
 800ab46:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800ab48:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ab4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ab50:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800ab54:	f023 0301 	bic.w	r3, r3, #1
 800ab58:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800ab5c:	bf00      	nop
 800ab5e:	46bd      	mov	sp, r7
 800ab60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab64:	4770      	bx	lr

0800ab66 <LL_RCC_LSE_EnableBypass>:
{
 800ab66:	b480      	push	{r7}
 800ab68:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800ab6a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ab6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ab72:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800ab76:	f043 0304 	orr.w	r3, r3, #4
 800ab7a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800ab7e:	bf00      	nop
 800ab80:	46bd      	mov	sp, r7
 800ab82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab86:	4770      	bx	lr

0800ab88 <LL_RCC_LSE_DisableBypass>:
{
 800ab88:	b480      	push	{r7}
 800ab8a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800ab8c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ab90:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ab94:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800ab98:	f023 0304 	bic.w	r3, r3, #4
 800ab9c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800aba0:	bf00      	nop
 800aba2:	46bd      	mov	sp, r7
 800aba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aba8:	4770      	bx	lr

0800abaa <LL_RCC_LSE_IsReady>:
{
 800abaa:	b480      	push	{r7}
 800abac:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800abae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800abb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800abb6:	f003 0302 	and.w	r3, r3, #2
 800abba:	2b02      	cmp	r3, #2
 800abbc:	d101      	bne.n	800abc2 <LL_RCC_LSE_IsReady+0x18>
 800abbe:	2301      	movs	r3, #1
 800abc0:	e000      	b.n	800abc4 <LL_RCC_LSE_IsReady+0x1a>
 800abc2:	2300      	movs	r3, #0
}
 800abc4:	4618      	mov	r0, r3
 800abc6:	46bd      	mov	sp, r7
 800abc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abcc:	4770      	bx	lr

0800abce <LL_RCC_LSI1_Enable>:
{
 800abce:	b480      	push	{r7}
 800abd0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800abd2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800abd6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800abda:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800abde:	f043 0301 	orr.w	r3, r3, #1
 800abe2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800abe6:	bf00      	nop
 800abe8:	46bd      	mov	sp, r7
 800abea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abee:	4770      	bx	lr

0800abf0 <LL_RCC_LSI1_Disable>:
{
 800abf0:	b480      	push	{r7}
 800abf2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800abf4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800abf8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800abfc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800ac00:	f023 0301 	bic.w	r3, r3, #1
 800ac04:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800ac08:	bf00      	nop
 800ac0a:	46bd      	mov	sp, r7
 800ac0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac10:	4770      	bx	lr

0800ac12 <LL_RCC_LSI1_IsReady>:
{
 800ac12:	b480      	push	{r7}
 800ac14:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 800ac16:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ac1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ac1e:	f003 0302 	and.w	r3, r3, #2
 800ac22:	2b02      	cmp	r3, #2
 800ac24:	d101      	bne.n	800ac2a <LL_RCC_LSI1_IsReady+0x18>
 800ac26:	2301      	movs	r3, #1
 800ac28:	e000      	b.n	800ac2c <LL_RCC_LSI1_IsReady+0x1a>
 800ac2a:	2300      	movs	r3, #0
}
 800ac2c:	4618      	mov	r0, r3
 800ac2e:	46bd      	mov	sp, r7
 800ac30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac34:	4770      	bx	lr

0800ac36 <LL_RCC_LSI2_Enable>:
{
 800ac36:	b480      	push	{r7}
 800ac38:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800ac3a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ac3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ac42:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800ac46:	f043 0304 	orr.w	r3, r3, #4
 800ac4a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800ac4e:	bf00      	nop
 800ac50:	46bd      	mov	sp, r7
 800ac52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac56:	4770      	bx	lr

0800ac58 <LL_RCC_LSI2_Disable>:
{
 800ac58:	b480      	push	{r7}
 800ac5a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800ac5c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ac60:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ac64:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800ac68:	f023 0304 	bic.w	r3, r3, #4
 800ac6c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800ac70:	bf00      	nop
 800ac72:	46bd      	mov	sp, r7
 800ac74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac78:	4770      	bx	lr

0800ac7a <LL_RCC_LSI2_IsReady>:
{
 800ac7a:	b480      	push	{r7}
 800ac7c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 800ac7e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ac82:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ac86:	f003 0308 	and.w	r3, r3, #8
 800ac8a:	2b08      	cmp	r3, #8
 800ac8c:	d101      	bne.n	800ac92 <LL_RCC_LSI2_IsReady+0x18>
 800ac8e:	2301      	movs	r3, #1
 800ac90:	e000      	b.n	800ac94 <LL_RCC_LSI2_IsReady+0x1a>
 800ac92:	2300      	movs	r3, #0
}
 800ac94:	4618      	mov	r0, r3
 800ac96:	46bd      	mov	sp, r7
 800ac98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac9c:	4770      	bx	lr

0800ac9e <LL_RCC_LSI2_SetTrimming>:
{
 800ac9e:	b480      	push	{r7}
 800aca0:	b083      	sub	sp, #12
 800aca2:	af00      	add	r7, sp, #0
 800aca4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 800aca6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800acaa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800acae:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	021b      	lsls	r3, r3, #8
 800acb6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800acba:	4313      	orrs	r3, r2
 800acbc:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 800acc0:	bf00      	nop
 800acc2:	370c      	adds	r7, #12
 800acc4:	46bd      	mov	sp, r7
 800acc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acca:	4770      	bx	lr

0800accc <LL_RCC_MSI_Enable>:
{
 800accc:	b480      	push	{r7}
 800acce:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800acd0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800acda:	f043 0301 	orr.w	r3, r3, #1
 800acde:	6013      	str	r3, [r2, #0]
}
 800ace0:	bf00      	nop
 800ace2:	46bd      	mov	sp, r7
 800ace4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ace8:	4770      	bx	lr

0800acea <LL_RCC_MSI_Disable>:
{
 800acea:	b480      	push	{r7}
 800acec:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800acee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800acf8:	f023 0301 	bic.w	r3, r3, #1
 800acfc:	6013      	str	r3, [r2, #0]
}
 800acfe:	bf00      	nop
 800ad00:	46bd      	mov	sp, r7
 800ad02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad06:	4770      	bx	lr

0800ad08 <LL_RCC_MSI_IsReady>:
{
 800ad08:	b480      	push	{r7}
 800ad0a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800ad0c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	f003 0302 	and.w	r3, r3, #2
 800ad16:	2b02      	cmp	r3, #2
 800ad18:	d101      	bne.n	800ad1e <LL_RCC_MSI_IsReady+0x16>
 800ad1a:	2301      	movs	r3, #1
 800ad1c:	e000      	b.n	800ad20 <LL_RCC_MSI_IsReady+0x18>
 800ad1e:	2300      	movs	r3, #0
}
 800ad20:	4618      	mov	r0, r3
 800ad22:	46bd      	mov	sp, r7
 800ad24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad28:	4770      	bx	lr

0800ad2a <LL_RCC_MSI_SetRange>:
{
 800ad2a:	b480      	push	{r7}
 800ad2c:	b083      	sub	sp, #12
 800ad2e:	af00      	add	r7, sp, #0
 800ad30:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 800ad32:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800ad3c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	4313      	orrs	r3, r2
 800ad44:	600b      	str	r3, [r1, #0]
}
 800ad46:	bf00      	nop
 800ad48:	370c      	adds	r7, #12
 800ad4a:	46bd      	mov	sp, r7
 800ad4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad50:	4770      	bx	lr

0800ad52 <LL_RCC_MSI_GetRange>:
{
 800ad52:	b480      	push	{r7}
 800ad54:	b083      	sub	sp, #12
 800ad56:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 800ad58:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800ad62:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	2bb0      	cmp	r3, #176	@ 0xb0
 800ad68:	d901      	bls.n	800ad6e <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 800ad6a:	23b0      	movs	r3, #176	@ 0xb0
 800ad6c:	607b      	str	r3, [r7, #4]
  return msiRange;
 800ad6e:	687b      	ldr	r3, [r7, #4]
}
 800ad70:	4618      	mov	r0, r3
 800ad72:	370c      	adds	r7, #12
 800ad74:	46bd      	mov	sp, r7
 800ad76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad7a:	4770      	bx	lr

0800ad7c <LL_RCC_MSI_SetCalibTrimming>:
{
 800ad7c:	b480      	push	{r7}
 800ad7e:	b083      	sub	sp, #12
 800ad80:	af00      	add	r7, sp, #0
 800ad82:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 800ad84:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ad88:	685b      	ldr	r3, [r3, #4]
 800ad8a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	021b      	lsls	r3, r3, #8
 800ad92:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800ad96:	4313      	orrs	r3, r2
 800ad98:	604b      	str	r3, [r1, #4]
}
 800ad9a:	bf00      	nop
 800ad9c:	370c      	adds	r7, #12
 800ad9e:	46bd      	mov	sp, r7
 800ada0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ada4:	4770      	bx	lr

0800ada6 <LL_RCC_SetSysClkSource>:
{
 800ada6:	b480      	push	{r7}
 800ada8:	b083      	sub	sp, #12
 800adaa:	af00      	add	r7, sp, #0
 800adac:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800adae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800adb2:	689b      	ldr	r3, [r3, #8]
 800adb4:	f023 0203 	bic.w	r2, r3, #3
 800adb8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	4313      	orrs	r3, r2
 800adc0:	608b      	str	r3, [r1, #8]
}
 800adc2:	bf00      	nop
 800adc4:	370c      	adds	r7, #12
 800adc6:	46bd      	mov	sp, r7
 800adc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adcc:	4770      	bx	lr

0800adce <LL_RCC_GetSysClkSource>:
{
 800adce:	b480      	push	{r7}
 800add0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800add2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800add6:	689b      	ldr	r3, [r3, #8]
 800add8:	f003 030c 	and.w	r3, r3, #12
}
 800addc:	4618      	mov	r0, r3
 800adde:	46bd      	mov	sp, r7
 800ade0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ade4:	4770      	bx	lr

0800ade6 <LL_RCC_SetAHBPrescaler>:
{
 800ade6:	b480      	push	{r7}
 800ade8:	b083      	sub	sp, #12
 800adea:	af00      	add	r7, sp, #0
 800adec:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800adee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800adf2:	689b      	ldr	r3, [r3, #8]
 800adf4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800adf8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	4313      	orrs	r3, r2
 800ae00:	608b      	str	r3, [r1, #8]
}
 800ae02:	bf00      	nop
 800ae04:	370c      	adds	r7, #12
 800ae06:	46bd      	mov	sp, r7
 800ae08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae0c:	4770      	bx	lr

0800ae0e <LL_C2_RCC_SetAHBPrescaler>:
{
 800ae0e:	b480      	push	{r7}
 800ae10:	b083      	sub	sp, #12
 800ae12:	af00      	add	r7, sp, #0
 800ae14:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800ae16:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ae1a:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800ae1e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800ae22:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	4313      	orrs	r3, r2
 800ae2a:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 800ae2e:	bf00      	nop
 800ae30:	370c      	adds	r7, #12
 800ae32:	46bd      	mov	sp, r7
 800ae34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae38:	4770      	bx	lr

0800ae3a <LL_RCC_SetAHB4Prescaler>:
{
 800ae3a:	b480      	push	{r7}
 800ae3c:	b083      	sub	sp, #12
 800ae3e:	af00      	add	r7, sp, #0
 800ae40:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800ae42:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ae46:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800ae4a:	f023 020f 	bic.w	r2, r3, #15
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	091b      	lsrs	r3, r3, #4
 800ae52:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800ae56:	4313      	orrs	r3, r2
 800ae58:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 800ae5c:	bf00      	nop
 800ae5e:	370c      	adds	r7, #12
 800ae60:	46bd      	mov	sp, r7
 800ae62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae66:	4770      	bx	lr

0800ae68 <LL_RCC_SetAPB1Prescaler>:
{
 800ae68:	b480      	push	{r7}
 800ae6a:	b083      	sub	sp, #12
 800ae6c:	af00      	add	r7, sp, #0
 800ae6e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800ae70:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ae74:	689b      	ldr	r3, [r3, #8]
 800ae76:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800ae7a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	4313      	orrs	r3, r2
 800ae82:	608b      	str	r3, [r1, #8]
}
 800ae84:	bf00      	nop
 800ae86:	370c      	adds	r7, #12
 800ae88:	46bd      	mov	sp, r7
 800ae8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae8e:	4770      	bx	lr

0800ae90 <LL_RCC_SetAPB2Prescaler>:
{
 800ae90:	b480      	push	{r7}
 800ae92:	b083      	sub	sp, #12
 800ae94:	af00      	add	r7, sp, #0
 800ae96:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800ae98:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ae9c:	689b      	ldr	r3, [r3, #8]
 800ae9e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800aea2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	4313      	orrs	r3, r2
 800aeaa:	608b      	str	r3, [r1, #8]
}
 800aeac:	bf00      	nop
 800aeae:	370c      	adds	r7, #12
 800aeb0:	46bd      	mov	sp, r7
 800aeb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeb6:	4770      	bx	lr

0800aeb8 <LL_RCC_GetAHBPrescaler>:
{
 800aeb8:	b480      	push	{r7}
 800aeba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800aebc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800aec0:	689b      	ldr	r3, [r3, #8]
 800aec2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800aec6:	4618      	mov	r0, r3
 800aec8:	46bd      	mov	sp, r7
 800aeca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aece:	4770      	bx	lr

0800aed0 <LL_RCC_GetAHB4Prescaler>:
{
 800aed0:	b480      	push	{r7}
 800aed2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 800aed4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800aed8:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800aedc:	011b      	lsls	r3, r3, #4
 800aede:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800aee2:	4618      	mov	r0, r3
 800aee4:	46bd      	mov	sp, r7
 800aee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeea:	4770      	bx	lr

0800aeec <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 800aeec:	b480      	push	{r7}
 800aeee:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800aef0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800aefa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800aefe:	6013      	str	r3, [r2, #0]
}
 800af00:	bf00      	nop
 800af02:	46bd      	mov	sp, r7
 800af04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af08:	4770      	bx	lr

0800af0a <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 800af0a:	b480      	push	{r7}
 800af0c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800af0e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800af18:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800af1c:	6013      	str	r3, [r2, #0]
}
 800af1e:	bf00      	nop
 800af20:	46bd      	mov	sp, r7
 800af22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af26:	4770      	bx	lr

0800af28 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 800af28:	b480      	push	{r7}
 800af2a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800af2c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800af36:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800af3a:	d101      	bne.n	800af40 <LL_RCC_PLL_IsReady+0x18>
 800af3c:	2301      	movs	r3, #1
 800af3e:	e000      	b.n	800af42 <LL_RCC_PLL_IsReady+0x1a>
 800af40:	2300      	movs	r3, #0
}
 800af42:	4618      	mov	r0, r3
 800af44:	46bd      	mov	sp, r7
 800af46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af4a:	4770      	bx	lr

0800af4c <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800af4c:	b480      	push	{r7}
 800af4e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800af50:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800af54:	68db      	ldr	r3, [r3, #12]
 800af56:	0a1b      	lsrs	r3, r3, #8
 800af58:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 800af5c:	4618      	mov	r0, r3
 800af5e:	46bd      	mov	sp, r7
 800af60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af64:	4770      	bx	lr

0800af66 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800af66:	b480      	push	{r7}
 800af68:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800af6a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800af6e:	68db      	ldr	r3, [r3, #12]
 800af70:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 800af74:	4618      	mov	r0, r3
 800af76:	46bd      	mov	sp, r7
 800af78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af7c:	4770      	bx	lr

0800af7e <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800af7e:	b480      	push	{r7}
 800af80:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800af82:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800af86:	68db      	ldr	r3, [r3, #12]
 800af88:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 800af8c:	4618      	mov	r0, r3
 800af8e:	46bd      	mov	sp, r7
 800af90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af94:	4770      	bx	lr

0800af96 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800af96:	b480      	push	{r7}
 800af98:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800af9a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800af9e:	68db      	ldr	r3, [r3, #12]
 800afa0:	f003 0303 	and.w	r3, r3, #3
}
 800afa4:	4618      	mov	r0, r3
 800afa6:	46bd      	mov	sp, r7
 800afa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afac:	4770      	bx	lr

0800afae <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 800afae:	b480      	push	{r7}
 800afb0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800afb2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800afb6:	689b      	ldr	r3, [r3, #8]
 800afb8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800afbc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800afc0:	d101      	bne.n	800afc6 <LL_RCC_IsActiveFlag_HPRE+0x18>
 800afc2:	2301      	movs	r3, #1
 800afc4:	e000      	b.n	800afc8 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800afc6:	2300      	movs	r3, #0
}
 800afc8:	4618      	mov	r0, r3
 800afca:	46bd      	mov	sp, r7
 800afcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afd0:	4770      	bx	lr

0800afd2 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 800afd2:	b480      	push	{r7}
 800afd4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 800afd6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800afda:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800afde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800afe2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800afe6:	d101      	bne.n	800afec <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 800afe8:	2301      	movs	r3, #1
 800afea:	e000      	b.n	800afee <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 800afec:	2300      	movs	r3, #0
}
 800afee:	4618      	mov	r0, r3
 800aff0:	46bd      	mov	sp, r7
 800aff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aff6:	4770      	bx	lr

0800aff8 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 800aff8:	b480      	push	{r7}
 800affa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 800affc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b000:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800b004:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b008:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b00c:	d101      	bne.n	800b012 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800b00e:	2301      	movs	r3, #1
 800b010:	e000      	b.n	800b014 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800b012:	2300      	movs	r3, #0
}
 800b014:	4618      	mov	r0, r3
 800b016:	46bd      	mov	sp, r7
 800b018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b01c:	4770      	bx	lr

0800b01e <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 800b01e:	b480      	push	{r7}
 800b020:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800b022:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b026:	689b      	ldr	r3, [r3, #8]
 800b028:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b02c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b030:	d101      	bne.n	800b036 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800b032:	2301      	movs	r3, #1
 800b034:	e000      	b.n	800b038 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800b036:	2300      	movs	r3, #0
}
 800b038:	4618      	mov	r0, r3
 800b03a:	46bd      	mov	sp, r7
 800b03c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b040:	4770      	bx	lr

0800b042 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 800b042:	b480      	push	{r7}
 800b044:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800b046:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b04a:	689b      	ldr	r3, [r3, #8]
 800b04c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800b050:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800b054:	d101      	bne.n	800b05a <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800b056:	2301      	movs	r3, #1
 800b058:	e000      	b.n	800b05c <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800b05a:	2300      	movs	r3, #0
}
 800b05c:	4618      	mov	r0, r3
 800b05e:	46bd      	mov	sp, r7
 800b060:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b064:	4770      	bx	lr
	...

0800b068 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b068:	b590      	push	{r4, r7, lr}
 800b06a:	b08d      	sub	sp, #52	@ 0x34
 800b06c:	af00      	add	r7, sp, #0
 800b06e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	2b00      	cmp	r3, #0
 800b074:	d101      	bne.n	800b07a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800b076:	2301      	movs	r3, #1
 800b078:	e363      	b.n	800b742 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	f003 0320 	and.w	r3, r3, #32
 800b082:	2b00      	cmp	r3, #0
 800b084:	f000 808d 	beq.w	800b1a2 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b088:	f7ff fea1 	bl	800adce <LL_RCC_GetSysClkSource>
 800b08c:	62f8      	str	r0, [r7, #44]	@ 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800b08e:	f7ff ff82 	bl	800af96 <LL_RCC_PLL_GetMainSource>
 800b092:	62b8      	str	r0, [r7, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800b094:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b096:	2b00      	cmp	r3, #0
 800b098:	d005      	beq.n	800b0a6 <HAL_RCC_OscConfig+0x3e>
 800b09a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b09c:	2b0c      	cmp	r3, #12
 800b09e:	d147      	bne.n	800b130 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 800b0a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b0a2:	2b01      	cmp	r3, #1
 800b0a4:	d144      	bne.n	800b130 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	69db      	ldr	r3, [r3, #28]
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d101      	bne.n	800b0b2 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 800b0ae:	2301      	movs	r3, #1
 800b0b0:	e347      	b.n	800b742 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800b0b6:	f7ff fe4c 	bl	800ad52 <LL_RCC_MSI_GetRange>
 800b0ba:	4603      	mov	r3, r0
 800b0bc:	429c      	cmp	r4, r3
 800b0be:	d914      	bls.n	800b0ea <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b0c4:	4618      	mov	r0, r3
 800b0c6:	f000 fd03 	bl	800bad0 <RCC_SetFlashLatencyFromMSIRange>
 800b0ca:	4603      	mov	r3, r0
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d001      	beq.n	800b0d4 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 800b0d0:	2301      	movs	r3, #1
 800b0d2:	e336      	b.n	800b742 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b0d8:	4618      	mov	r0, r3
 800b0da:	f7ff fe26 	bl	800ad2a <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	6a1b      	ldr	r3, [r3, #32]
 800b0e2:	4618      	mov	r0, r3
 800b0e4:	f7ff fe4a 	bl	800ad7c <LL_RCC_MSI_SetCalibTrimming>
 800b0e8:	e013      	b.n	800b112 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b0ee:	4618      	mov	r0, r3
 800b0f0:	f7ff fe1b 	bl	800ad2a <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	6a1b      	ldr	r3, [r3, #32]
 800b0f8:	4618      	mov	r0, r3
 800b0fa:	f7ff fe3f 	bl	800ad7c <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b102:	4618      	mov	r0, r3
 800b104:	f000 fce4 	bl	800bad0 <RCC_SetFlashLatencyFromMSIRange>
 800b108:	4603      	mov	r3, r0
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d001      	beq.n	800b112 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 800b10e:	2301      	movs	r3, #1
 800b110:	e317      	b.n	800b742 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800b112:	f000 fcc9 	bl	800baa8 <HAL_RCC_GetHCLKFreq>
 800b116:	4603      	mov	r3, r0
 800b118:	4aa4      	ldr	r2, [pc, #656]	@ (800b3ac <HAL_RCC_OscConfig+0x344>)
 800b11a:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800b11c:	4ba4      	ldr	r3, [pc, #656]	@ (800b3b0 <HAL_RCC_OscConfig+0x348>)
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	4618      	mov	r0, r3
 800b122:	f7fc fc83 	bl	8007a2c <HAL_InitTick>
 800b126:	4603      	mov	r3, r0
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d039      	beq.n	800b1a0 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 800b12c:	2301      	movs	r3, #1
 800b12e:	e308      	b.n	800b742 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	69db      	ldr	r3, [r3, #28]
 800b134:	2b00      	cmp	r3, #0
 800b136:	d01e      	beq.n	800b176 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800b138:	f7ff fdc8 	bl	800accc <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800b13c:	f7fc fcc4 	bl	8007ac8 <HAL_GetTick>
 800b140:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800b142:	e008      	b.n	800b156 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800b144:	f7fc fcc0 	bl	8007ac8 <HAL_GetTick>
 800b148:	4602      	mov	r2, r0
 800b14a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b14c:	1ad3      	subs	r3, r2, r3
 800b14e:	2b02      	cmp	r3, #2
 800b150:	d901      	bls.n	800b156 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800b152:	2303      	movs	r3, #3
 800b154:	e2f5      	b.n	800b742 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 800b156:	f7ff fdd7 	bl	800ad08 <LL_RCC_MSI_IsReady>
 800b15a:	4603      	mov	r3, r0
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d0f1      	beq.n	800b144 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b164:	4618      	mov	r0, r3
 800b166:	f7ff fde0 	bl	800ad2a <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	6a1b      	ldr	r3, [r3, #32]
 800b16e:	4618      	mov	r0, r3
 800b170:	f7ff fe04 	bl	800ad7c <LL_RCC_MSI_SetCalibTrimming>
 800b174:	e015      	b.n	800b1a2 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800b176:	f7ff fdb8 	bl	800acea <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800b17a:	f7fc fca5 	bl	8007ac8 <HAL_GetTick>
 800b17e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800b180:	e008      	b.n	800b194 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800b182:	f7fc fca1 	bl	8007ac8 <HAL_GetTick>
 800b186:	4602      	mov	r2, r0
 800b188:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b18a:	1ad3      	subs	r3, r2, r3
 800b18c:	2b02      	cmp	r3, #2
 800b18e:	d901      	bls.n	800b194 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800b190:	2303      	movs	r3, #3
 800b192:	e2d6      	b.n	800b742 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 800b194:	f7ff fdb8 	bl	800ad08 <LL_RCC_MSI_IsReady>
 800b198:	4603      	mov	r3, r0
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d1f1      	bne.n	800b182 <HAL_RCC_OscConfig+0x11a>
 800b19e:	e000      	b.n	800b1a2 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800b1a0:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	f003 0301 	and.w	r3, r3, #1
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d047      	beq.n	800b23e <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b1ae:	f7ff fe0e 	bl	800adce <LL_RCC_GetSysClkSource>
 800b1b2:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800b1b4:	f7ff feef 	bl	800af96 <LL_RCC_PLL_GetMainSource>
 800b1b8:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800b1ba:	6a3b      	ldr	r3, [r7, #32]
 800b1bc:	2b08      	cmp	r3, #8
 800b1be:	d005      	beq.n	800b1cc <HAL_RCC_OscConfig+0x164>
 800b1c0:	6a3b      	ldr	r3, [r7, #32]
 800b1c2:	2b0c      	cmp	r3, #12
 800b1c4:	d108      	bne.n	800b1d8 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 800b1c6:	69fb      	ldr	r3, [r7, #28]
 800b1c8:	2b03      	cmp	r3, #3
 800b1ca:	d105      	bne.n	800b1d8 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	685b      	ldr	r3, [r3, #4]
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d134      	bne.n	800b23e <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 800b1d4:	2301      	movs	r3, #1
 800b1d6:	e2b4      	b.n	800b742 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	685b      	ldr	r3, [r3, #4]
 800b1dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b1e0:	d102      	bne.n	800b1e8 <HAL_RCC_OscConfig+0x180>
 800b1e2:	f7ff fbf5 	bl	800a9d0 <LL_RCC_HSE_Enable>
 800b1e6:	e001      	b.n	800b1ec <HAL_RCC_OscConfig+0x184>
 800b1e8:	f7ff fc01 	bl	800a9ee <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	685b      	ldr	r3, [r3, #4]
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	d012      	beq.n	800b21a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b1f4:	f7fc fc68 	bl	8007ac8 <HAL_GetTick>
 800b1f8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800b1fa:	e008      	b.n	800b20e <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b1fc:	f7fc fc64 	bl	8007ac8 <HAL_GetTick>
 800b200:	4602      	mov	r2, r0
 800b202:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b204:	1ad3      	subs	r3, r2, r3
 800b206:	2b64      	cmp	r3, #100	@ 0x64
 800b208:	d901      	bls.n	800b20e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800b20a:	2303      	movs	r3, #3
 800b20c:	e299      	b.n	800b742 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 800b20e:	f7ff fbfd 	bl	800aa0c <LL_RCC_HSE_IsReady>
 800b212:	4603      	mov	r3, r0
 800b214:	2b00      	cmp	r3, #0
 800b216:	d0f1      	beq.n	800b1fc <HAL_RCC_OscConfig+0x194>
 800b218:	e011      	b.n	800b23e <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b21a:	f7fc fc55 	bl	8007ac8 <HAL_GetTick>
 800b21e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 800b220:	e008      	b.n	800b234 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b222:	f7fc fc51 	bl	8007ac8 <HAL_GetTick>
 800b226:	4602      	mov	r2, r0
 800b228:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b22a:	1ad3      	subs	r3, r2, r3
 800b22c:	2b64      	cmp	r3, #100	@ 0x64
 800b22e:	d901      	bls.n	800b234 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800b230:	2303      	movs	r3, #3
 800b232:	e286      	b.n	800b742 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 800b234:	f7ff fbea 	bl	800aa0c <LL_RCC_HSE_IsReady>
 800b238:	4603      	mov	r3, r0
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d1f1      	bne.n	800b222 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	f003 0302 	and.w	r3, r3, #2
 800b246:	2b00      	cmp	r3, #0
 800b248:	d04c      	beq.n	800b2e4 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b24a:	f7ff fdc0 	bl	800adce <LL_RCC_GetSysClkSource>
 800b24e:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800b250:	f7ff fea1 	bl	800af96 <LL_RCC_PLL_GetMainSource>
 800b254:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800b256:	69bb      	ldr	r3, [r7, #24]
 800b258:	2b04      	cmp	r3, #4
 800b25a:	d005      	beq.n	800b268 <HAL_RCC_OscConfig+0x200>
 800b25c:	69bb      	ldr	r3, [r7, #24]
 800b25e:	2b0c      	cmp	r3, #12
 800b260:	d10e      	bne.n	800b280 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800b262:	697b      	ldr	r3, [r7, #20]
 800b264:	2b02      	cmp	r3, #2
 800b266:	d10b      	bne.n	800b280 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	68db      	ldr	r3, [r3, #12]
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d101      	bne.n	800b274 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 800b270:	2301      	movs	r3, #1
 800b272:	e266      	b.n	800b742 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	691b      	ldr	r3, [r3, #16]
 800b278:	4618      	mov	r0, r3
 800b27a:	f7ff fc09 	bl	800aa90 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800b27e:	e031      	b.n	800b2e4 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	68db      	ldr	r3, [r3, #12]
 800b284:	2b00      	cmp	r3, #0
 800b286:	d019      	beq.n	800b2bc <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800b288:	f7ff fbd2 	bl	800aa30 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b28c:	f7fc fc1c 	bl	8007ac8 <HAL_GetTick>
 800b290:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800b292:	e008      	b.n	800b2a6 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b294:	f7fc fc18 	bl	8007ac8 <HAL_GetTick>
 800b298:	4602      	mov	r2, r0
 800b29a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b29c:	1ad3      	subs	r3, r2, r3
 800b29e:	2b02      	cmp	r3, #2
 800b2a0:	d901      	bls.n	800b2a6 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800b2a2:	2303      	movs	r3, #3
 800b2a4:	e24d      	b.n	800b742 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 800b2a6:	f7ff fbe1 	bl	800aa6c <LL_RCC_HSI_IsReady>
 800b2aa:	4603      	mov	r3, r0
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	d0f1      	beq.n	800b294 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	691b      	ldr	r3, [r3, #16]
 800b2b4:	4618      	mov	r0, r3
 800b2b6:	f7ff fbeb 	bl	800aa90 <LL_RCC_HSI_SetCalibTrimming>
 800b2ba:	e013      	b.n	800b2e4 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b2bc:	f7ff fbc7 	bl	800aa4e <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b2c0:	f7fc fc02 	bl	8007ac8 <HAL_GetTick>
 800b2c4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800b2c6:	e008      	b.n	800b2da <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b2c8:	f7fc fbfe 	bl	8007ac8 <HAL_GetTick>
 800b2cc:	4602      	mov	r2, r0
 800b2ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2d0:	1ad3      	subs	r3, r2, r3
 800b2d2:	2b02      	cmp	r3, #2
 800b2d4:	d901      	bls.n	800b2da <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 800b2d6:	2303      	movs	r3, #3
 800b2d8:	e233      	b.n	800b742 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 800b2da:	f7ff fbc7 	bl	800aa6c <LL_RCC_HSI_IsReady>
 800b2de:	4603      	mov	r3, r0
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d1f1      	bne.n	800b2c8 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	f003 0308 	and.w	r3, r3, #8
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	d106      	bne.n	800b2fe <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	f000 80a3 	beq.w	800b444 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	695b      	ldr	r3, [r3, #20]
 800b302:	2b00      	cmp	r3, #0
 800b304:	d076      	beq.n	800b3f4 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	f003 0310 	and.w	r3, r3, #16
 800b30e:	2b00      	cmp	r3, #0
 800b310:	d046      	beq.n	800b3a0 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 800b312:	f7ff fc7e 	bl	800ac12 <LL_RCC_LSI1_IsReady>
 800b316:	4603      	mov	r3, r0
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d113      	bne.n	800b344 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 800b31c:	f7ff fc57 	bl	800abce <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800b320:	f7fc fbd2 	bl	8007ac8 <HAL_GetTick>
 800b324:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 800b326:	e008      	b.n	800b33a <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800b328:	f7fc fbce 	bl	8007ac8 <HAL_GetTick>
 800b32c:	4602      	mov	r2, r0
 800b32e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b330:	1ad3      	subs	r3, r2, r3
 800b332:	2b02      	cmp	r3, #2
 800b334:	d901      	bls.n	800b33a <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 800b336:	2303      	movs	r3, #3
 800b338:	e203      	b.n	800b742 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 800b33a:	f7ff fc6a 	bl	800ac12 <LL_RCC_LSI1_IsReady>
 800b33e:	4603      	mov	r3, r0
 800b340:	2b00      	cmp	r3, #0
 800b342:	d0f1      	beq.n	800b328 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 800b344:	f7ff fc77 	bl	800ac36 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b348:	f7fc fbbe 	bl	8007ac8 <HAL_GetTick>
 800b34c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 800b34e:	e008      	b.n	800b362 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800b350:	f7fc fbba 	bl	8007ac8 <HAL_GetTick>
 800b354:	4602      	mov	r2, r0
 800b356:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b358:	1ad3      	subs	r3, r2, r3
 800b35a:	2b03      	cmp	r3, #3
 800b35c:	d901      	bls.n	800b362 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 800b35e:	2303      	movs	r3, #3
 800b360:	e1ef      	b.n	800b742 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 800b362:	f7ff fc8a 	bl	800ac7a <LL_RCC_LSI2_IsReady>
 800b366:	4603      	mov	r3, r0
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d0f1      	beq.n	800b350 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	699b      	ldr	r3, [r3, #24]
 800b370:	4618      	mov	r0, r3
 800b372:	f7ff fc94 	bl	800ac9e <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 800b376:	f7ff fc3b 	bl	800abf0 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b37a:	f7fc fba5 	bl	8007ac8 <HAL_GetTick>
 800b37e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 800b380:	e008      	b.n	800b394 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800b382:	f7fc fba1 	bl	8007ac8 <HAL_GetTick>
 800b386:	4602      	mov	r2, r0
 800b388:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b38a:	1ad3      	subs	r3, r2, r3
 800b38c:	2b02      	cmp	r3, #2
 800b38e:	d901      	bls.n	800b394 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 800b390:	2303      	movs	r3, #3
 800b392:	e1d6      	b.n	800b742 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 800b394:	f7ff fc3d 	bl	800ac12 <LL_RCC_LSI1_IsReady>
 800b398:	4603      	mov	r3, r0
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d1f1      	bne.n	800b382 <HAL_RCC_OscConfig+0x31a>
 800b39e:	e051      	b.n	800b444 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 800b3a0:	f7ff fc15 	bl	800abce <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b3a4:	f7fc fb90 	bl	8007ac8 <HAL_GetTick>
 800b3a8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 800b3aa:	e00c      	b.n	800b3c6 <HAL_RCC_OscConfig+0x35e>
 800b3ac:	20000054 	.word	0x20000054
 800b3b0:	20000058 	.word	0x20000058
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800b3b4:	f7fc fb88 	bl	8007ac8 <HAL_GetTick>
 800b3b8:	4602      	mov	r2, r0
 800b3ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3bc:	1ad3      	subs	r3, r2, r3
 800b3be:	2b02      	cmp	r3, #2
 800b3c0:	d901      	bls.n	800b3c6 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800b3c2:	2303      	movs	r3, #3
 800b3c4:	e1bd      	b.n	800b742 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 800b3c6:	f7ff fc24 	bl	800ac12 <LL_RCC_LSI1_IsReady>
 800b3ca:	4603      	mov	r3, r0
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	d0f1      	beq.n	800b3b4 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 800b3d0:	f7ff fc42 	bl	800ac58 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 800b3d4:	e008      	b.n	800b3e8 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800b3d6:	f7fc fb77 	bl	8007ac8 <HAL_GetTick>
 800b3da:	4602      	mov	r2, r0
 800b3dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3de:	1ad3      	subs	r3, r2, r3
 800b3e0:	2b03      	cmp	r3, #3
 800b3e2:	d901      	bls.n	800b3e8 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 800b3e4:	2303      	movs	r3, #3
 800b3e6:	e1ac      	b.n	800b742 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 800b3e8:	f7ff fc47 	bl	800ac7a <LL_RCC_LSI2_IsReady>
 800b3ec:	4603      	mov	r3, r0
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d1f1      	bne.n	800b3d6 <HAL_RCC_OscConfig+0x36e>
 800b3f2:	e027      	b.n	800b444 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 800b3f4:	f7ff fc30 	bl	800ac58 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b3f8:	f7fc fb66 	bl	8007ac8 <HAL_GetTick>
 800b3fc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 800b3fe:	e008      	b.n	800b412 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800b400:	f7fc fb62 	bl	8007ac8 <HAL_GetTick>
 800b404:	4602      	mov	r2, r0
 800b406:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b408:	1ad3      	subs	r3, r2, r3
 800b40a:	2b03      	cmp	r3, #3
 800b40c:	d901      	bls.n	800b412 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800b40e:	2303      	movs	r3, #3
 800b410:	e197      	b.n	800b742 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 800b412:	f7ff fc32 	bl	800ac7a <LL_RCC_LSI2_IsReady>
 800b416:	4603      	mov	r3, r0
 800b418:	2b00      	cmp	r3, #0
 800b41a:	d1f1      	bne.n	800b400 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 800b41c:	f7ff fbe8 	bl	800abf0 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b420:	f7fc fb52 	bl	8007ac8 <HAL_GetTick>
 800b424:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 800b426:	e008      	b.n	800b43a <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800b428:	f7fc fb4e 	bl	8007ac8 <HAL_GetTick>
 800b42c:	4602      	mov	r2, r0
 800b42e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b430:	1ad3      	subs	r3, r2, r3
 800b432:	2b02      	cmp	r3, #2
 800b434:	d901      	bls.n	800b43a <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 800b436:	2303      	movs	r3, #3
 800b438:	e183      	b.n	800b742 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 800b43a:	f7ff fbea 	bl	800ac12 <LL_RCC_LSI1_IsReady>
 800b43e:	4603      	mov	r3, r0
 800b440:	2b00      	cmp	r3, #0
 800b442:	d1f1      	bne.n	800b428 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	f003 0304 	and.w	r3, r3, #4
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d05b      	beq.n	800b508 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b450:	4ba7      	ldr	r3, [pc, #668]	@ (800b6f0 <HAL_RCC_OscConfig+0x688>)
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d114      	bne.n	800b486 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800b45c:	f7ff fa88 	bl	800a970 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800b460:	f7fc fb32 	bl	8007ac8 <HAL_GetTick>
 800b464:	6278      	str	r0, [r7, #36]	@ 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b466:	e008      	b.n	800b47a <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b468:	f7fc fb2e 	bl	8007ac8 <HAL_GetTick>
 800b46c:	4602      	mov	r2, r0
 800b46e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b470:	1ad3      	subs	r3, r2, r3
 800b472:	2b02      	cmp	r3, #2
 800b474:	d901      	bls.n	800b47a <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 800b476:	2303      	movs	r3, #3
 800b478:	e163      	b.n	800b742 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b47a:	4b9d      	ldr	r3, [pc, #628]	@ (800b6f0 <HAL_RCC_OscConfig+0x688>)
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b482:	2b00      	cmp	r3, #0
 800b484:	d0f0      	beq.n	800b468 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	689b      	ldr	r3, [r3, #8]
 800b48a:	2b01      	cmp	r3, #1
 800b48c:	d102      	bne.n	800b494 <HAL_RCC_OscConfig+0x42c>
 800b48e:	f7ff fb48 	bl	800ab22 <LL_RCC_LSE_Enable>
 800b492:	e00c      	b.n	800b4ae <HAL_RCC_OscConfig+0x446>
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	689b      	ldr	r3, [r3, #8]
 800b498:	2b05      	cmp	r3, #5
 800b49a:	d104      	bne.n	800b4a6 <HAL_RCC_OscConfig+0x43e>
 800b49c:	f7ff fb63 	bl	800ab66 <LL_RCC_LSE_EnableBypass>
 800b4a0:	f7ff fb3f 	bl	800ab22 <LL_RCC_LSE_Enable>
 800b4a4:	e003      	b.n	800b4ae <HAL_RCC_OscConfig+0x446>
 800b4a6:	f7ff fb4d 	bl	800ab44 <LL_RCC_LSE_Disable>
 800b4aa:	f7ff fb6d 	bl	800ab88 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	689b      	ldr	r3, [r3, #8]
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	d014      	beq.n	800b4e0 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b4b6:	f7fc fb07 	bl	8007ac8 <HAL_GetTick>
 800b4ba:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 800b4bc:	e00a      	b.n	800b4d4 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b4be:	f7fc fb03 	bl	8007ac8 <HAL_GetTick>
 800b4c2:	4602      	mov	r2, r0
 800b4c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4c6:	1ad3      	subs	r3, r2, r3
 800b4c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b4cc:	4293      	cmp	r3, r2
 800b4ce:	d901      	bls.n	800b4d4 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 800b4d0:	2303      	movs	r3, #3
 800b4d2:	e136      	b.n	800b742 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 800b4d4:	f7ff fb69 	bl	800abaa <LL_RCC_LSE_IsReady>
 800b4d8:	4603      	mov	r3, r0
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d0ef      	beq.n	800b4be <HAL_RCC_OscConfig+0x456>
 800b4de:	e013      	b.n	800b508 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b4e0:	f7fc faf2 	bl	8007ac8 <HAL_GetTick>
 800b4e4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800b4e6:	e00a      	b.n	800b4fe <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b4e8:	f7fc faee 	bl	8007ac8 <HAL_GetTick>
 800b4ec:	4602      	mov	r2, r0
 800b4ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4f0:	1ad3      	subs	r3, r2, r3
 800b4f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b4f6:	4293      	cmp	r3, r2
 800b4f8:	d901      	bls.n	800b4fe <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 800b4fa:	2303      	movs	r3, #3
 800b4fc:	e121      	b.n	800b742 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 800b4fe:	f7ff fb54 	bl	800abaa <LL_RCC_LSE_IsReady>
 800b502:	4603      	mov	r3, r0
 800b504:	2b00      	cmp	r3, #0
 800b506:	d1ef      	bne.n	800b4e8 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b510:	2b00      	cmp	r3, #0
 800b512:	d02c      	beq.n	800b56e <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b518:	2b00      	cmp	r3, #0
 800b51a:	d014      	beq.n	800b546 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800b51c:	f7ff facd 	bl	800aaba <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b520:	f7fc fad2 	bl	8007ac8 <HAL_GetTick>
 800b524:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 800b526:	e008      	b.n	800b53a <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800b528:	f7fc face 	bl	8007ac8 <HAL_GetTick>
 800b52c:	4602      	mov	r2, r0
 800b52e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b530:	1ad3      	subs	r3, r2, r3
 800b532:	2b02      	cmp	r3, #2
 800b534:	d901      	bls.n	800b53a <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 800b536:	2303      	movs	r3, #3
 800b538:	e103      	b.n	800b742 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 800b53a:	f7ff fae0 	bl	800aafe <LL_RCC_HSI48_IsReady>
 800b53e:	4603      	mov	r3, r0
 800b540:	2b00      	cmp	r3, #0
 800b542:	d0f1      	beq.n	800b528 <HAL_RCC_OscConfig+0x4c0>
 800b544:	e013      	b.n	800b56e <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800b546:	f7ff fac9 	bl	800aadc <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b54a:	f7fc fabd 	bl	8007ac8 <HAL_GetTick>
 800b54e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 800b550:	e008      	b.n	800b564 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800b552:	f7fc fab9 	bl	8007ac8 <HAL_GetTick>
 800b556:	4602      	mov	r2, r0
 800b558:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b55a:	1ad3      	subs	r3, r2, r3
 800b55c:	2b02      	cmp	r3, #2
 800b55e:	d901      	bls.n	800b564 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 800b560:	2303      	movs	r3, #3
 800b562:	e0ee      	b.n	800b742 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 800b564:	f7ff facb 	bl	800aafe <LL_RCC_HSI48_IsReady>
 800b568:	4603      	mov	r3, r0
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	d1f1      	bne.n	800b552 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b572:	2b00      	cmp	r3, #0
 800b574:	f000 80e4 	beq.w	800b740 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b578:	f7ff fc29 	bl	800adce <LL_RCC_GetSysClkSource>
 800b57c:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 800b57e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b582:	68db      	ldr	r3, [r3, #12]
 800b584:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b58a:	2b02      	cmp	r3, #2
 800b58c:	f040 80b4 	bne.w	800b6f8 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b590:	68fb      	ldr	r3, [r7, #12]
 800b592:	f003 0203 	and.w	r2, r3, #3
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b59a:	429a      	cmp	r2, r3
 800b59c:	d123      	bne.n	800b5e6 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800b59e:	68fb      	ldr	r3, [r7, #12]
 800b5a0:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b5a8:	429a      	cmp	r2, r3
 800b5aa:	d11c      	bne.n	800b5e6 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800b5ac:	68fb      	ldr	r3, [r7, #12]
 800b5ae:	0a1b      	lsrs	r3, r3, #8
 800b5b0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800b5b8:	429a      	cmp	r2, r3
 800b5ba:	d114      	bne.n	800b5e6 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800b5bc:	68fb      	ldr	r3, [r7, #12]
 800b5be:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800b5c6:	429a      	cmp	r2, r3
 800b5c8:	d10d      	bne.n	800b5e6 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800b5ca:	68fb      	ldr	r3, [r7, #12]
 800b5cc:	f003 6260 	and.w	r2, r3, #234881024	@ 0xe000000
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800b5d4:	429a      	cmp	r2, r3
 800b5d6:	d106      	bne.n	800b5e6 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800b5d8:	68fb      	ldr	r3, [r7, #12]
 800b5da:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800b5e2:	429a      	cmp	r2, r3
 800b5e4:	d05d      	beq.n	800b6a2 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800b5e6:	693b      	ldr	r3, [r7, #16]
 800b5e8:	2b0c      	cmp	r3, #12
 800b5ea:	d058      	beq.n	800b69e <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800b5ec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b5f0:	681b      	ldr	r3, [r3, #0]
 800b5f2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	d001      	beq.n	800b5fe <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 800b5fa:	2301      	movs	r3, #1
 800b5fc:	e0a1      	b.n	800b742 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800b5fe:	f7ff fc84 	bl	800af0a <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800b602:	f7fc fa61 	bl	8007ac8 <HAL_GetTick>
 800b606:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b608:	e008      	b.n	800b61c <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b60a:	f7fc fa5d 	bl	8007ac8 <HAL_GetTick>
 800b60e:	4602      	mov	r2, r0
 800b610:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b612:	1ad3      	subs	r3, r2, r3
 800b614:	2b02      	cmp	r3, #2
 800b616:	d901      	bls.n	800b61c <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 800b618:	2303      	movs	r3, #3
 800b61a:	e092      	b.n	800b742 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b61c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b626:	2b00      	cmp	r3, #0
 800b628:	d1ef      	bne.n	800b60a <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800b62a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b62e:	68da      	ldr	r2, [r3, #12]
 800b630:	4b30      	ldr	r3, [pc, #192]	@ (800b6f4 <HAL_RCC_OscConfig+0x68c>)
 800b632:	4013      	ands	r3, r2
 800b634:	687a      	ldr	r2, [r7, #4]
 800b636:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 800b638:	687a      	ldr	r2, [r7, #4]
 800b63a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800b63c:	4311      	orrs	r1, r2
 800b63e:	687a      	ldr	r2, [r7, #4]
 800b640:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800b642:	0212      	lsls	r2, r2, #8
 800b644:	4311      	orrs	r1, r2
 800b646:	687a      	ldr	r2, [r7, #4]
 800b648:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800b64a:	4311      	orrs	r1, r2
 800b64c:	687a      	ldr	r2, [r7, #4]
 800b64e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800b650:	4311      	orrs	r1, r2
 800b652:	687a      	ldr	r2, [r7, #4]
 800b654:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800b656:	430a      	orrs	r2, r1
 800b658:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800b65c:	4313      	orrs	r3, r2
 800b65e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800b660:	f7ff fc44 	bl	800aeec <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800b664:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b668:	68db      	ldr	r3, [r3, #12]
 800b66a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b66e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b672:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800b674:	f7fc fa28 	bl	8007ac8 <HAL_GetTick>
 800b678:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b67a:	e008      	b.n	800b68e <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b67c:	f7fc fa24 	bl	8007ac8 <HAL_GetTick>
 800b680:	4602      	mov	r2, r0
 800b682:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b684:	1ad3      	subs	r3, r2, r3
 800b686:	2b02      	cmp	r3, #2
 800b688:	d901      	bls.n	800b68e <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 800b68a:	2303      	movs	r3, #3
 800b68c:	e059      	b.n	800b742 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b68e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b698:	2b00      	cmp	r3, #0
 800b69a:	d0ef      	beq.n	800b67c <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800b69c:	e050      	b.n	800b740 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800b69e:	2301      	movs	r3, #1
 800b6a0:	e04f      	b.n	800b742 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b6a2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d147      	bne.n	800b740 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800b6b0:	f7ff fc1c 	bl	800aeec <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800b6b4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b6b8:	68db      	ldr	r3, [r3, #12]
 800b6ba:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b6be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b6c2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800b6c4:	f7fc fa00 	bl	8007ac8 <HAL_GetTick>
 800b6c8:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b6ca:	e008      	b.n	800b6de <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b6cc:	f7fc f9fc 	bl	8007ac8 <HAL_GetTick>
 800b6d0:	4602      	mov	r2, r0
 800b6d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6d4:	1ad3      	subs	r3, r2, r3
 800b6d6:	2b02      	cmp	r3, #2
 800b6d8:	d901      	bls.n	800b6de <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 800b6da:	2303      	movs	r3, #3
 800b6dc:	e031      	b.n	800b742 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b6de:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d0ef      	beq.n	800b6cc <HAL_RCC_OscConfig+0x664>
 800b6ec:	e028      	b.n	800b740 <HAL_RCC_OscConfig+0x6d8>
 800b6ee:	bf00      	nop
 800b6f0:	58000400 	.word	0x58000400
 800b6f4:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800b6f8:	693b      	ldr	r3, [r7, #16]
 800b6fa:	2b0c      	cmp	r3, #12
 800b6fc:	d01e      	beq.n	800b73c <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b6fe:	f7ff fc04 	bl	800af0a <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b702:	f7fc f9e1 	bl	8007ac8 <HAL_GetTick>
 800b706:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b708:	e008      	b.n	800b71c <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b70a:	f7fc f9dd 	bl	8007ac8 <HAL_GetTick>
 800b70e:	4602      	mov	r2, r0
 800b710:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b712:	1ad3      	subs	r3, r2, r3
 800b714:	2b02      	cmp	r3, #2
 800b716:	d901      	bls.n	800b71c <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 800b718:	2303      	movs	r3, #3
 800b71a:	e012      	b.n	800b742 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b71c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b726:	2b00      	cmp	r3, #0
 800b728:	d1ef      	bne.n	800b70a <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 800b72a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b72e:	68da      	ldr	r2, [r3, #12]
 800b730:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800b734:	4b05      	ldr	r3, [pc, #20]	@ (800b74c <HAL_RCC_OscConfig+0x6e4>)
 800b736:	4013      	ands	r3, r2
 800b738:	60cb      	str	r3, [r1, #12]
 800b73a:	e001      	b.n	800b740 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800b73c:	2301      	movs	r3, #1
 800b73e:	e000      	b.n	800b742 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 800b740:	2300      	movs	r3, #0
}
 800b742:	4618      	mov	r0, r3
 800b744:	3734      	adds	r7, #52	@ 0x34
 800b746:	46bd      	mov	sp, r7
 800b748:	bd90      	pop	{r4, r7, pc}
 800b74a:	bf00      	nop
 800b74c:	eefefffc 	.word	0xeefefffc

0800b750 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b750:	b580      	push	{r7, lr}
 800b752:	b084      	sub	sp, #16
 800b754:	af00      	add	r7, sp, #0
 800b756:	6078      	str	r0, [r7, #4]
 800b758:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d101      	bne.n	800b764 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800b760:	2301      	movs	r3, #1
 800b762:	e12d      	b.n	800b9c0 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800b764:	4b98      	ldr	r3, [pc, #608]	@ (800b9c8 <HAL_RCC_ClockConfig+0x278>)
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	f003 0307 	and.w	r3, r3, #7
 800b76c:	683a      	ldr	r2, [r7, #0]
 800b76e:	429a      	cmp	r2, r3
 800b770:	d91b      	bls.n	800b7aa <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b772:	4b95      	ldr	r3, [pc, #596]	@ (800b9c8 <HAL_RCC_ClockConfig+0x278>)
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	f023 0207 	bic.w	r2, r3, #7
 800b77a:	4993      	ldr	r1, [pc, #588]	@ (800b9c8 <HAL_RCC_ClockConfig+0x278>)
 800b77c:	683b      	ldr	r3, [r7, #0]
 800b77e:	4313      	orrs	r3, r2
 800b780:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b782:	f7fc f9a1 	bl	8007ac8 <HAL_GetTick>
 800b786:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b788:	e008      	b.n	800b79c <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800b78a:	f7fc f99d 	bl	8007ac8 <HAL_GetTick>
 800b78e:	4602      	mov	r2, r0
 800b790:	68fb      	ldr	r3, [r7, #12]
 800b792:	1ad3      	subs	r3, r2, r3
 800b794:	2b02      	cmp	r3, #2
 800b796:	d901      	bls.n	800b79c <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 800b798:	2303      	movs	r3, #3
 800b79a:	e111      	b.n	800b9c0 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b79c:	4b8a      	ldr	r3, [pc, #552]	@ (800b9c8 <HAL_RCC_ClockConfig+0x278>)
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	f003 0307 	and.w	r3, r3, #7
 800b7a4:	683a      	ldr	r2, [r7, #0]
 800b7a6:	429a      	cmp	r2, r3
 800b7a8:	d1ef      	bne.n	800b78a <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	f003 0302 	and.w	r3, r3, #2
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d016      	beq.n	800b7e4 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	689b      	ldr	r3, [r3, #8]
 800b7ba:	4618      	mov	r0, r3
 800b7bc:	f7ff fb13 	bl	800ade6 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800b7c0:	f7fc f982 	bl	8007ac8 <HAL_GetTick>
 800b7c4:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800b7c6:	e008      	b.n	800b7da <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800b7c8:	f7fc f97e 	bl	8007ac8 <HAL_GetTick>
 800b7cc:	4602      	mov	r2, r0
 800b7ce:	68fb      	ldr	r3, [r7, #12]
 800b7d0:	1ad3      	subs	r3, r2, r3
 800b7d2:	2b02      	cmp	r3, #2
 800b7d4:	d901      	bls.n	800b7da <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800b7d6:	2303      	movs	r3, #3
 800b7d8:	e0f2      	b.n	800b9c0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800b7da:	f7ff fbe8 	bl	800afae <LL_RCC_IsActiveFlag_HPRE>
 800b7de:	4603      	mov	r3, r0
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	d0f1      	beq.n	800b7c8 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	f003 0320 	and.w	r3, r3, #32
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d016      	beq.n	800b81e <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	695b      	ldr	r3, [r3, #20]
 800b7f4:	4618      	mov	r0, r3
 800b7f6:	f7ff fb0a 	bl	800ae0e <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800b7fa:	f7fc f965 	bl	8007ac8 <HAL_GetTick>
 800b7fe:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800b800:	e008      	b.n	800b814 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800b802:	f7fc f961 	bl	8007ac8 <HAL_GetTick>
 800b806:	4602      	mov	r2, r0
 800b808:	68fb      	ldr	r3, [r7, #12]
 800b80a:	1ad3      	subs	r3, r2, r3
 800b80c:	2b02      	cmp	r3, #2
 800b80e:	d901      	bls.n	800b814 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 800b810:	2303      	movs	r3, #3
 800b812:	e0d5      	b.n	800b9c0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800b814:	f7ff fbdd 	bl	800afd2 <LL_RCC_IsActiveFlag_C2HPRE>
 800b818:	4603      	mov	r3, r0
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d0f1      	beq.n	800b802 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	681b      	ldr	r3, [r3, #0]
 800b822:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b826:	2b00      	cmp	r3, #0
 800b828:	d016      	beq.n	800b858 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	699b      	ldr	r3, [r3, #24]
 800b82e:	4618      	mov	r0, r3
 800b830:	f7ff fb03 	bl	800ae3a <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800b834:	f7fc f948 	bl	8007ac8 <HAL_GetTick>
 800b838:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800b83a:	e008      	b.n	800b84e <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800b83c:	f7fc f944 	bl	8007ac8 <HAL_GetTick>
 800b840:	4602      	mov	r2, r0
 800b842:	68fb      	ldr	r3, [r7, #12]
 800b844:	1ad3      	subs	r3, r2, r3
 800b846:	2b02      	cmp	r3, #2
 800b848:	d901      	bls.n	800b84e <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800b84a:	2303      	movs	r3, #3
 800b84c:	e0b8      	b.n	800b9c0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800b84e:	f7ff fbd3 	bl	800aff8 <LL_RCC_IsActiveFlag_SHDHPRE>
 800b852:	4603      	mov	r3, r0
 800b854:	2b00      	cmp	r3, #0
 800b856:	d0f1      	beq.n	800b83c <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	f003 0304 	and.w	r3, r3, #4
 800b860:	2b00      	cmp	r3, #0
 800b862:	d016      	beq.n	800b892 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	68db      	ldr	r3, [r3, #12]
 800b868:	4618      	mov	r0, r3
 800b86a:	f7ff fafd 	bl	800ae68 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800b86e:	f7fc f92b 	bl	8007ac8 <HAL_GetTick>
 800b872:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800b874:	e008      	b.n	800b888 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800b876:	f7fc f927 	bl	8007ac8 <HAL_GetTick>
 800b87a:	4602      	mov	r2, r0
 800b87c:	68fb      	ldr	r3, [r7, #12]
 800b87e:	1ad3      	subs	r3, r2, r3
 800b880:	2b02      	cmp	r3, #2
 800b882:	d901      	bls.n	800b888 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 800b884:	2303      	movs	r3, #3
 800b886:	e09b      	b.n	800b9c0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800b888:	f7ff fbc9 	bl	800b01e <LL_RCC_IsActiveFlag_PPRE1>
 800b88c:	4603      	mov	r3, r0
 800b88e:	2b00      	cmp	r3, #0
 800b890:	d0f1      	beq.n	800b876 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	f003 0308 	and.w	r3, r3, #8
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d017      	beq.n	800b8ce <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	691b      	ldr	r3, [r3, #16]
 800b8a2:	00db      	lsls	r3, r3, #3
 800b8a4:	4618      	mov	r0, r3
 800b8a6:	f7ff faf3 	bl	800ae90 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800b8aa:	f7fc f90d 	bl	8007ac8 <HAL_GetTick>
 800b8ae:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800b8b0:	e008      	b.n	800b8c4 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800b8b2:	f7fc f909 	bl	8007ac8 <HAL_GetTick>
 800b8b6:	4602      	mov	r2, r0
 800b8b8:	68fb      	ldr	r3, [r7, #12]
 800b8ba:	1ad3      	subs	r3, r2, r3
 800b8bc:	2b02      	cmp	r3, #2
 800b8be:	d901      	bls.n	800b8c4 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 800b8c0:	2303      	movs	r3, #3
 800b8c2:	e07d      	b.n	800b9c0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800b8c4:	f7ff fbbd 	bl	800b042 <LL_RCC_IsActiveFlag_PPRE2>
 800b8c8:	4603      	mov	r3, r0
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d0f1      	beq.n	800b8b2 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	f003 0301 	and.w	r3, r3, #1
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	d043      	beq.n	800b962 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	685b      	ldr	r3, [r3, #4]
 800b8de:	2b02      	cmp	r3, #2
 800b8e0:	d106      	bne.n	800b8f0 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800b8e2:	f7ff f893 	bl	800aa0c <LL_RCC_HSE_IsReady>
 800b8e6:	4603      	mov	r3, r0
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	d11e      	bne.n	800b92a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800b8ec:	2301      	movs	r3, #1
 800b8ee:	e067      	b.n	800b9c0 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	685b      	ldr	r3, [r3, #4]
 800b8f4:	2b03      	cmp	r3, #3
 800b8f6:	d106      	bne.n	800b906 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 800b8f8:	f7ff fb16 	bl	800af28 <LL_RCC_PLL_IsReady>
 800b8fc:	4603      	mov	r3, r0
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d113      	bne.n	800b92a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800b902:	2301      	movs	r3, #1
 800b904:	e05c      	b.n	800b9c0 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	685b      	ldr	r3, [r3, #4]
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	d106      	bne.n	800b91c <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800b90e:	f7ff f9fb 	bl	800ad08 <LL_RCC_MSI_IsReady>
 800b912:	4603      	mov	r3, r0
 800b914:	2b00      	cmp	r3, #0
 800b916:	d108      	bne.n	800b92a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800b918:	2301      	movs	r3, #1
 800b91a:	e051      	b.n	800b9c0 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 800b91c:	f7ff f8a6 	bl	800aa6c <LL_RCC_HSI_IsReady>
 800b920:	4603      	mov	r3, r0
 800b922:	2b00      	cmp	r3, #0
 800b924:	d101      	bne.n	800b92a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800b926:	2301      	movs	r3, #1
 800b928:	e04a      	b.n	800b9c0 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	685b      	ldr	r3, [r3, #4]
 800b92e:	4618      	mov	r0, r3
 800b930:	f7ff fa39 	bl	800ada6 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b934:	f7fc f8c8 	bl	8007ac8 <HAL_GetTick>
 800b938:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b93a:	e00a      	b.n	800b952 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b93c:	f7fc f8c4 	bl	8007ac8 <HAL_GetTick>
 800b940:	4602      	mov	r2, r0
 800b942:	68fb      	ldr	r3, [r7, #12]
 800b944:	1ad3      	subs	r3, r2, r3
 800b946:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b94a:	4293      	cmp	r3, r2
 800b94c:	d901      	bls.n	800b952 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 800b94e:	2303      	movs	r3, #3
 800b950:	e036      	b.n	800b9c0 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b952:	f7ff fa3c 	bl	800adce <LL_RCC_GetSysClkSource>
 800b956:	4602      	mov	r2, r0
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	685b      	ldr	r3, [r3, #4]
 800b95c:	009b      	lsls	r3, r3, #2
 800b95e:	429a      	cmp	r2, r3
 800b960:	d1ec      	bne.n	800b93c <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800b962:	4b19      	ldr	r3, [pc, #100]	@ (800b9c8 <HAL_RCC_ClockConfig+0x278>)
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	f003 0307 	and.w	r3, r3, #7
 800b96a:	683a      	ldr	r2, [r7, #0]
 800b96c:	429a      	cmp	r2, r3
 800b96e:	d21b      	bcs.n	800b9a8 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b970:	4b15      	ldr	r3, [pc, #84]	@ (800b9c8 <HAL_RCC_ClockConfig+0x278>)
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	f023 0207 	bic.w	r2, r3, #7
 800b978:	4913      	ldr	r1, [pc, #76]	@ (800b9c8 <HAL_RCC_ClockConfig+0x278>)
 800b97a:	683b      	ldr	r3, [r7, #0]
 800b97c:	4313      	orrs	r3, r2
 800b97e:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b980:	f7fc f8a2 	bl	8007ac8 <HAL_GetTick>
 800b984:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b986:	e008      	b.n	800b99a <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800b988:	f7fc f89e 	bl	8007ac8 <HAL_GetTick>
 800b98c:	4602      	mov	r2, r0
 800b98e:	68fb      	ldr	r3, [r7, #12]
 800b990:	1ad3      	subs	r3, r2, r3
 800b992:	2b02      	cmp	r3, #2
 800b994:	d901      	bls.n	800b99a <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 800b996:	2303      	movs	r3, #3
 800b998:	e012      	b.n	800b9c0 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b99a:	4b0b      	ldr	r3, [pc, #44]	@ (800b9c8 <HAL_RCC_ClockConfig+0x278>)
 800b99c:	681b      	ldr	r3, [r3, #0]
 800b99e:	f003 0307 	and.w	r3, r3, #7
 800b9a2:	683a      	ldr	r2, [r7, #0]
 800b9a4:	429a      	cmp	r2, r3
 800b9a6:	d1ef      	bne.n	800b988 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800b9a8:	f000 f87e 	bl	800baa8 <HAL_RCC_GetHCLKFreq>
 800b9ac:	4603      	mov	r3, r0
 800b9ae:	4a07      	ldr	r2, [pc, #28]	@ (800b9cc <HAL_RCC_ClockConfig+0x27c>)
 800b9b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 800b9b2:	f7fc f895 	bl	8007ae0 <HAL_GetTickPrio>
 800b9b6:	4603      	mov	r3, r0
 800b9b8:	4618      	mov	r0, r3
 800b9ba:	f7fc f837 	bl	8007a2c <HAL_InitTick>
 800b9be:	4603      	mov	r3, r0
}
 800b9c0:	4618      	mov	r0, r3
 800b9c2:	3710      	adds	r7, #16
 800b9c4:	46bd      	mov	sp, r7
 800b9c6:	bd80      	pop	{r7, pc}
 800b9c8:	58004000 	.word	0x58004000
 800b9cc:	20000054 	.word	0x20000054

0800b9d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b9d0:	b590      	push	{r4, r7, lr}
 800b9d2:	b085      	sub	sp, #20
 800b9d4:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b9d6:	f7ff f9fa 	bl	800adce <LL_RCC_GetSysClkSource>
 800b9da:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d10a      	bne.n	800b9f8 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800b9e2:	f7ff f9b6 	bl	800ad52 <LL_RCC_MSI_GetRange>
 800b9e6:	4603      	mov	r3, r0
 800b9e8:	091b      	lsrs	r3, r3, #4
 800b9ea:	f003 030f 	and.w	r3, r3, #15
 800b9ee:	4a2b      	ldr	r2, [pc, #172]	@ (800ba9c <HAL_RCC_GetSysClockFreq+0xcc>)
 800b9f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b9f4:	60fb      	str	r3, [r7, #12]
 800b9f6:	e04b      	b.n	800ba90 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	2b04      	cmp	r3, #4
 800b9fc:	d102      	bne.n	800ba04 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800b9fe:	4b28      	ldr	r3, [pc, #160]	@ (800baa0 <HAL_RCC_GetSysClockFreq+0xd0>)
 800ba00:	60fb      	str	r3, [r7, #12]
 800ba02:	e045      	b.n	800ba90 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	2b08      	cmp	r3, #8
 800ba08:	d10a      	bne.n	800ba20 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800ba0a:	f7fe ffcf 	bl	800a9ac <LL_RCC_HSE_IsEnabledDiv2>
 800ba0e:	4603      	mov	r3, r0
 800ba10:	2b01      	cmp	r3, #1
 800ba12:	d102      	bne.n	800ba1a <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 800ba14:	4b22      	ldr	r3, [pc, #136]	@ (800baa0 <HAL_RCC_GetSysClockFreq+0xd0>)
 800ba16:	60fb      	str	r3, [r7, #12]
 800ba18:	e03a      	b.n	800ba90 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800ba1a:	4b22      	ldr	r3, [pc, #136]	@ (800baa4 <HAL_RCC_GetSysClockFreq+0xd4>)
 800ba1c:	60fb      	str	r3, [r7, #12]
 800ba1e:	e037      	b.n	800ba90 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 800ba20:	f7ff fab9 	bl	800af96 <LL_RCC_PLL_GetMainSource>
 800ba24:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 800ba26:	683b      	ldr	r3, [r7, #0]
 800ba28:	2b02      	cmp	r3, #2
 800ba2a:	d003      	beq.n	800ba34 <HAL_RCC_GetSysClockFreq+0x64>
 800ba2c:	683b      	ldr	r3, [r7, #0]
 800ba2e:	2b03      	cmp	r3, #3
 800ba30:	d003      	beq.n	800ba3a <HAL_RCC_GetSysClockFreq+0x6a>
 800ba32:	e00d      	b.n	800ba50 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 800ba34:	4b1a      	ldr	r3, [pc, #104]	@ (800baa0 <HAL_RCC_GetSysClockFreq+0xd0>)
 800ba36:	60bb      	str	r3, [r7, #8]
        break;
 800ba38:	e015      	b.n	800ba66 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800ba3a:	f7fe ffb7 	bl	800a9ac <LL_RCC_HSE_IsEnabledDiv2>
 800ba3e:	4603      	mov	r3, r0
 800ba40:	2b01      	cmp	r3, #1
 800ba42:	d102      	bne.n	800ba4a <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 800ba44:	4b16      	ldr	r3, [pc, #88]	@ (800baa0 <HAL_RCC_GetSysClockFreq+0xd0>)
 800ba46:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800ba48:	e00d      	b.n	800ba66 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 800ba4a:	4b16      	ldr	r3, [pc, #88]	@ (800baa4 <HAL_RCC_GetSysClockFreq+0xd4>)
 800ba4c:	60bb      	str	r3, [r7, #8]
        break;
 800ba4e:	e00a      	b.n	800ba66 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800ba50:	f7ff f97f 	bl	800ad52 <LL_RCC_MSI_GetRange>
 800ba54:	4603      	mov	r3, r0
 800ba56:	091b      	lsrs	r3, r3, #4
 800ba58:	f003 030f 	and.w	r3, r3, #15
 800ba5c:	4a0f      	ldr	r2, [pc, #60]	@ (800ba9c <HAL_RCC_GetSysClockFreq+0xcc>)
 800ba5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ba62:	60bb      	str	r3, [r7, #8]
        break;
 800ba64:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 800ba66:	f7ff fa71 	bl	800af4c <LL_RCC_PLL_GetN>
 800ba6a:	4602      	mov	r2, r0
 800ba6c:	68bb      	ldr	r3, [r7, #8]
 800ba6e:	fb03 f402 	mul.w	r4, r3, r2
 800ba72:	f7ff fa84 	bl	800af7e <LL_RCC_PLL_GetDivider>
 800ba76:	4603      	mov	r3, r0
 800ba78:	091b      	lsrs	r3, r3, #4
 800ba7a:	3301      	adds	r3, #1
 800ba7c:	fbb4 f4f3 	udiv	r4, r4, r3
 800ba80:	f7ff fa71 	bl	800af66 <LL_RCC_PLL_GetR>
 800ba84:	4603      	mov	r3, r0
 800ba86:	0f5b      	lsrs	r3, r3, #29
 800ba88:	3301      	adds	r3, #1
 800ba8a:	fbb4 f3f3 	udiv	r3, r4, r3
 800ba8e:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 800ba90:	68fb      	ldr	r3, [r7, #12]
}
 800ba92:	4618      	mov	r0, r3
 800ba94:	3714      	adds	r7, #20
 800ba96:	46bd      	mov	sp, r7
 800ba98:	bd90      	pop	{r4, r7, pc}
 800ba9a:	bf00      	nop
 800ba9c:	080125e0 	.word	0x080125e0
 800baa0:	00f42400 	.word	0x00f42400
 800baa4:	01e84800 	.word	0x01e84800

0800baa8 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800baa8:	b598      	push	{r3, r4, r7, lr}
 800baaa:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800baac:	f7ff ff90 	bl	800b9d0 <HAL_RCC_GetSysClockFreq>
 800bab0:	4604      	mov	r4, r0
 800bab2:	f7ff fa01 	bl	800aeb8 <LL_RCC_GetAHBPrescaler>
 800bab6:	4603      	mov	r3, r0
 800bab8:	091b      	lsrs	r3, r3, #4
 800baba:	f003 030f 	and.w	r3, r3, #15
 800babe:	4a03      	ldr	r2, [pc, #12]	@ (800bacc <HAL_RCC_GetHCLKFreq+0x24>)
 800bac0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bac4:	fbb4 f3f3 	udiv	r3, r4, r3
}
 800bac8:	4618      	mov	r0, r3
 800baca:	bd98      	pop	{r3, r4, r7, pc}
 800bacc:	080125a0 	.word	0x080125a0

0800bad0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 800bad0:	b590      	push	{r4, r7, lr}
 800bad2:	b085      	sub	sp, #20
 800bad4:	af00      	add	r7, sp, #0
 800bad6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	2bb0      	cmp	r3, #176	@ 0xb0
 800badc:	d903      	bls.n	800bae6 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 800bade:	4b15      	ldr	r3, [pc, #84]	@ (800bb34 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800bae0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bae2:	60fb      	str	r3, [r7, #12]
 800bae4:	e007      	b.n	800baf6 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	091b      	lsrs	r3, r3, #4
 800baea:	f003 030f 	and.w	r3, r3, #15
 800baee:	4a11      	ldr	r2, [pc, #68]	@ (800bb34 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800baf0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800baf4:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 800baf6:	f7ff f9eb 	bl	800aed0 <LL_RCC_GetAHB4Prescaler>
 800bafa:	4603      	mov	r3, r0
 800bafc:	091b      	lsrs	r3, r3, #4
 800bafe:	f003 030f 	and.w	r3, r3, #15
 800bb02:	4a0d      	ldr	r2, [pc, #52]	@ (800bb38 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 800bb04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bb08:	68fa      	ldr	r2, [r7, #12]
 800bb0a:	fbb2 f3f3 	udiv	r3, r2, r3
 800bb0e:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800bb10:	68bb      	ldr	r3, [r7, #8]
 800bb12:	4a0a      	ldr	r2, [pc, #40]	@ (800bb3c <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 800bb14:	fba2 2303 	umull	r2, r3, r2, r3
 800bb18:	0c9c      	lsrs	r4, r3, #18
 800bb1a:	f7fe ff39 	bl	800a990 <HAL_PWREx_GetVoltageRange>
 800bb1e:	4603      	mov	r3, r0
 800bb20:	4619      	mov	r1, r3
 800bb22:	4620      	mov	r0, r4
 800bb24:	f000 f80c 	bl	800bb40 <RCC_SetFlashLatency>
 800bb28:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 800bb2a:	4618      	mov	r0, r3
 800bb2c:	3714      	adds	r7, #20
 800bb2e:	46bd      	mov	sp, r7
 800bb30:	bd90      	pop	{r4, r7, pc}
 800bb32:	bf00      	nop
 800bb34:	080125e0 	.word	0x080125e0
 800bb38:	080125a0 	.word	0x080125a0
 800bb3c:	431bde83 	.word	0x431bde83

0800bb40 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 800bb40:	b590      	push	{r4, r7, lr}
 800bb42:	b093      	sub	sp, #76	@ 0x4c
 800bb44:	af00      	add	r7, sp, #0
 800bb46:	6078      	str	r0, [r7, #4]
 800bb48:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 800bb4a:	4b37      	ldr	r3, [pc, #220]	@ (800bc28 <RCC_SetFlashLatency+0xe8>)
 800bb4c:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 800bb50:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800bb52:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 800bb56:	4a35      	ldr	r2, [pc, #212]	@ (800bc2c <RCC_SetFlashLatency+0xec>)
 800bb58:	f107 031c 	add.w	r3, r7, #28
 800bb5c:	ca07      	ldmia	r2, {r0, r1, r2}
 800bb5e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 800bb62:	4b33      	ldr	r3, [pc, #204]	@ (800bc30 <RCC_SetFlashLatency+0xf0>)
 800bb64:	f107 040c 	add.w	r4, r7, #12
 800bb68:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800bb6a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800bb6e:	2300      	movs	r3, #0
 800bb70:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800bb72:	683b      	ldr	r3, [r7, #0]
 800bb74:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bb78:	d11a      	bne.n	800bbb0 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800bb7a:	2300      	movs	r3, #0
 800bb7c:	643b      	str	r3, [r7, #64]	@ 0x40
 800bb7e:	e013      	b.n	800bba8 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 800bb80:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bb82:	009b      	lsls	r3, r3, #2
 800bb84:	3348      	adds	r3, #72	@ 0x48
 800bb86:	443b      	add	r3, r7
 800bb88:	f853 3c20 	ldr.w	r3, [r3, #-32]
 800bb8c:	687a      	ldr	r2, [r7, #4]
 800bb8e:	429a      	cmp	r2, r3
 800bb90:	d807      	bhi.n	800bba2 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800bb92:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bb94:	009b      	lsls	r3, r3, #2
 800bb96:	3348      	adds	r3, #72	@ 0x48
 800bb98:	443b      	add	r3, r7
 800bb9a:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800bb9e:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 800bba0:	e020      	b.n	800bbe4 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800bba2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bba4:	3301      	adds	r3, #1
 800bba6:	643b      	str	r3, [r7, #64]	@ 0x40
 800bba8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bbaa:	2b03      	cmp	r3, #3
 800bbac:	d9e8      	bls.n	800bb80 <RCC_SetFlashLatency+0x40>
 800bbae:	e019      	b.n	800bbe4 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800bbb0:	2300      	movs	r3, #0
 800bbb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bbb4:	e013      	b.n	800bbde <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800bbb6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bbb8:	009b      	lsls	r3, r3, #2
 800bbba:	3348      	adds	r3, #72	@ 0x48
 800bbbc:	443b      	add	r3, r7
 800bbbe:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800bbc2:	687a      	ldr	r2, [r7, #4]
 800bbc4:	429a      	cmp	r2, r3
 800bbc6:	d807      	bhi.n	800bbd8 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800bbc8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bbca:	009b      	lsls	r3, r3, #2
 800bbcc:	3348      	adds	r3, #72	@ 0x48
 800bbce:	443b      	add	r3, r7
 800bbd0:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800bbd4:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 800bbd6:	e005      	b.n	800bbe4 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800bbd8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bbda:	3301      	adds	r3, #1
 800bbdc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bbde:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bbe0:	2b02      	cmp	r3, #2
 800bbe2:	d9e8      	bls.n	800bbb6 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 800bbe4:	4b13      	ldr	r3, [pc, #76]	@ (800bc34 <RCC_SetFlashLatency+0xf4>)
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	f023 0207 	bic.w	r2, r3, #7
 800bbec:	4911      	ldr	r1, [pc, #68]	@ (800bc34 <RCC_SetFlashLatency+0xf4>)
 800bbee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bbf0:	4313      	orrs	r3, r2
 800bbf2:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800bbf4:	f7fb ff68 	bl	8007ac8 <HAL_GetTick>
 800bbf8:	63b8      	str	r0, [r7, #56]	@ 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800bbfa:	e008      	b.n	800bc0e <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800bbfc:	f7fb ff64 	bl	8007ac8 <HAL_GetTick>
 800bc00:	4602      	mov	r2, r0
 800bc02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc04:	1ad3      	subs	r3, r2, r3
 800bc06:	2b02      	cmp	r3, #2
 800bc08:	d901      	bls.n	800bc0e <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 800bc0a:	2303      	movs	r3, #3
 800bc0c:	e007      	b.n	800bc1e <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800bc0e:	4b09      	ldr	r3, [pc, #36]	@ (800bc34 <RCC_SetFlashLatency+0xf4>)
 800bc10:	681b      	ldr	r3, [r3, #0]
 800bc12:	f003 0307 	and.w	r3, r3, #7
 800bc16:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800bc18:	429a      	cmp	r2, r3
 800bc1a:	d1ef      	bne.n	800bbfc <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 800bc1c:	2300      	movs	r3, #0
}
 800bc1e:	4618      	mov	r0, r3
 800bc20:	374c      	adds	r7, #76	@ 0x4c
 800bc22:	46bd      	mov	sp, r7
 800bc24:	bd90      	pop	{r4, r7, pc}
 800bc26:	bf00      	nop
 800bc28:	080123fc 	.word	0x080123fc
 800bc2c:	0801240c 	.word	0x0801240c
 800bc30:	08012418 	.word	0x08012418
 800bc34:	58004000 	.word	0x58004000

0800bc38 <LL_RCC_LSE_IsEnabled>:
{
 800bc38:	b480      	push	{r7}
 800bc3a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 800bc3c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bc40:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bc44:	f003 0301 	and.w	r3, r3, #1
 800bc48:	2b01      	cmp	r3, #1
 800bc4a:	d101      	bne.n	800bc50 <LL_RCC_LSE_IsEnabled+0x18>
 800bc4c:	2301      	movs	r3, #1
 800bc4e:	e000      	b.n	800bc52 <LL_RCC_LSE_IsEnabled+0x1a>
 800bc50:	2300      	movs	r3, #0
}
 800bc52:	4618      	mov	r0, r3
 800bc54:	46bd      	mov	sp, r7
 800bc56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc5a:	4770      	bx	lr

0800bc5c <LL_RCC_LSE_IsReady>:
{
 800bc5c:	b480      	push	{r7}
 800bc5e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800bc60:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bc64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bc68:	f003 0302 	and.w	r3, r3, #2
 800bc6c:	2b02      	cmp	r3, #2
 800bc6e:	d101      	bne.n	800bc74 <LL_RCC_LSE_IsReady+0x18>
 800bc70:	2301      	movs	r3, #1
 800bc72:	e000      	b.n	800bc76 <LL_RCC_LSE_IsReady+0x1a>
 800bc74:	2300      	movs	r3, #0
}
 800bc76:	4618      	mov	r0, r3
 800bc78:	46bd      	mov	sp, r7
 800bc7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc7e:	4770      	bx	lr

0800bc80 <LL_RCC_SetRFWKPClockSource>:
{
 800bc80:	b480      	push	{r7}
 800bc82:	b083      	sub	sp, #12
 800bc84:	af00      	add	r7, sp, #0
 800bc86:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 800bc88:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bc8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800bc90:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800bc94:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	4313      	orrs	r3, r2
 800bc9c:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 800bca0:	bf00      	nop
 800bca2:	370c      	adds	r7, #12
 800bca4:	46bd      	mov	sp, r7
 800bca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcaa:	4770      	bx	lr

0800bcac <LL_RCC_SetSMPSClockSource>:
{
 800bcac:	b480      	push	{r7}
 800bcae:	b083      	sub	sp, #12
 800bcb0:	af00      	add	r7, sp, #0
 800bcb2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 800bcb4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bcb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bcba:	f023 0203 	bic.w	r2, r3, #3
 800bcbe:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	4313      	orrs	r3, r2
 800bcc6:	624b      	str	r3, [r1, #36]	@ 0x24
}
 800bcc8:	bf00      	nop
 800bcca:	370c      	adds	r7, #12
 800bccc:	46bd      	mov	sp, r7
 800bcce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcd2:	4770      	bx	lr

0800bcd4 <LL_RCC_SetSMPSPrescaler>:
{
 800bcd4:	b480      	push	{r7}
 800bcd6:	b083      	sub	sp, #12
 800bcd8:	af00      	add	r7, sp, #0
 800bcda:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 800bcdc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bce0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bce2:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800bce6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	4313      	orrs	r3, r2
 800bcee:	624b      	str	r3, [r1, #36]	@ 0x24
}
 800bcf0:	bf00      	nop
 800bcf2:	370c      	adds	r7, #12
 800bcf4:	46bd      	mov	sp, r7
 800bcf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcfa:	4770      	bx	lr

0800bcfc <LL_RCC_SetUSARTClockSource>:
{
 800bcfc:	b480      	push	{r7}
 800bcfe:	b083      	sub	sp, #12
 800bd00:	af00      	add	r7, sp, #0
 800bd02:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 800bd04:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bd08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bd0c:	f023 0203 	bic.w	r2, r3, #3
 800bd10:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	4313      	orrs	r3, r2
 800bd18:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800bd1c:	bf00      	nop
 800bd1e:	370c      	adds	r7, #12
 800bd20:	46bd      	mov	sp, r7
 800bd22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd26:	4770      	bx	lr

0800bd28 <LL_RCC_SetLPUARTClockSource>:
{
 800bd28:	b480      	push	{r7}
 800bd2a:	b083      	sub	sp, #12
 800bd2c:	af00      	add	r7, sp, #0
 800bd2e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 800bd30:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bd34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bd38:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800bd3c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	4313      	orrs	r3, r2
 800bd44:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800bd48:	bf00      	nop
 800bd4a:	370c      	adds	r7, #12
 800bd4c:	46bd      	mov	sp, r7
 800bd4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd52:	4770      	bx	lr

0800bd54 <LL_RCC_SetI2CClockSource>:
{
 800bd54:	b480      	push	{r7}
 800bd56:	b083      	sub	sp, #12
 800bd58:	af00      	add	r7, sp, #0
 800bd5a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800bd5c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bd60:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	091b      	lsrs	r3, r3, #4
 800bd68:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 800bd6c:	43db      	mvns	r3, r3
 800bd6e:	401a      	ands	r2, r3
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	011b      	lsls	r3, r3, #4
 800bd74:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 800bd78:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800bd7c:	4313      	orrs	r3, r2
 800bd7e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800bd82:	bf00      	nop
 800bd84:	370c      	adds	r7, #12
 800bd86:	46bd      	mov	sp, r7
 800bd88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd8c:	4770      	bx	lr

0800bd8e <LL_RCC_SetLPTIMClockSource>:
{
 800bd8e:	b480      	push	{r7}
 800bd90:	b083      	sub	sp, #12
 800bd92:	af00      	add	r7, sp, #0
 800bd94:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800bd96:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bd9a:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	0c1b      	lsrs	r3, r3, #16
 800bda2:	041b      	lsls	r3, r3, #16
 800bda4:	43db      	mvns	r3, r3
 800bda6:	401a      	ands	r2, r3
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	041b      	lsls	r3, r3, #16
 800bdac:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800bdb0:	4313      	orrs	r3, r2
 800bdb2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800bdb6:	bf00      	nop
 800bdb8:	370c      	adds	r7, #12
 800bdba:	46bd      	mov	sp, r7
 800bdbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdc0:	4770      	bx	lr

0800bdc2 <LL_RCC_SetSAIClockSource>:
{
 800bdc2:	b480      	push	{r7}
 800bdc4:	b083      	sub	sp, #12
 800bdc6:	af00      	add	r7, sp, #0
 800bdc8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 800bdca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bdce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bdd2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800bdd6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	4313      	orrs	r3, r2
 800bdde:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800bde2:	bf00      	nop
 800bde4:	370c      	adds	r7, #12
 800bde6:	46bd      	mov	sp, r7
 800bde8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdec:	4770      	bx	lr

0800bdee <LL_RCC_SetRNGClockSource>:
{
 800bdee:	b480      	push	{r7}
 800bdf0:	b083      	sub	sp, #12
 800bdf2:	af00      	add	r7, sp, #0
 800bdf4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800bdf6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bdfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bdfe:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800be02:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	4313      	orrs	r3, r2
 800be0a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800be0e:	bf00      	nop
 800be10:	370c      	adds	r7, #12
 800be12:	46bd      	mov	sp, r7
 800be14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be18:	4770      	bx	lr

0800be1a <LL_RCC_SetCLK48ClockSource>:
{
 800be1a:	b480      	push	{r7}
 800be1c:	b083      	sub	sp, #12
 800be1e:	af00      	add	r7, sp, #0
 800be20:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 800be22:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800be26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800be2a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800be2e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	4313      	orrs	r3, r2
 800be36:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800be3a:	bf00      	nop
 800be3c:	370c      	adds	r7, #12
 800be3e:	46bd      	mov	sp, r7
 800be40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be44:	4770      	bx	lr

0800be46 <LL_RCC_SetUSBClockSource>:
{
 800be46:	b580      	push	{r7, lr}
 800be48:	b082      	sub	sp, #8
 800be4a:	af00      	add	r7, sp, #0
 800be4c:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 800be4e:	6878      	ldr	r0, [r7, #4]
 800be50:	f7ff ffe3 	bl	800be1a <LL_RCC_SetCLK48ClockSource>
}
 800be54:	bf00      	nop
 800be56:	3708      	adds	r7, #8
 800be58:	46bd      	mov	sp, r7
 800be5a:	bd80      	pop	{r7, pc}

0800be5c <LL_RCC_SetADCClockSource>:
{
 800be5c:	b480      	push	{r7}
 800be5e:	b083      	sub	sp, #12
 800be60:	af00      	add	r7, sp, #0
 800be62:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800be64:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800be68:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800be6c:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800be70:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	4313      	orrs	r3, r2
 800be78:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800be7c:	bf00      	nop
 800be7e:	370c      	adds	r7, #12
 800be80:	46bd      	mov	sp, r7
 800be82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be86:	4770      	bx	lr

0800be88 <LL_RCC_SetRTCClockSource>:
{
 800be88:	b480      	push	{r7}
 800be8a:	b083      	sub	sp, #12
 800be8c:	af00      	add	r7, sp, #0
 800be8e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800be90:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800be94:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800be98:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800be9c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	4313      	orrs	r3, r2
 800bea4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 800bea8:	bf00      	nop
 800beaa:	370c      	adds	r7, #12
 800beac:	46bd      	mov	sp, r7
 800beae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beb2:	4770      	bx	lr

0800beb4 <LL_RCC_GetRTCClockSource>:
{
 800beb4:	b480      	push	{r7}
 800beb6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800beb8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bebc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bec0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 800bec4:	4618      	mov	r0, r3
 800bec6:	46bd      	mov	sp, r7
 800bec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800becc:	4770      	bx	lr

0800bece <LL_RCC_ForceBackupDomainReset>:
{
 800bece:	b480      	push	{r7}
 800bed0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800bed2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bed6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800beda:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800bede:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800bee2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800bee6:	bf00      	nop
 800bee8:	46bd      	mov	sp, r7
 800beea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beee:	4770      	bx	lr

0800bef0 <LL_RCC_ReleaseBackupDomainReset>:
{
 800bef0:	b480      	push	{r7}
 800bef2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800bef4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bef8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800befc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800bf00:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800bf04:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800bf08:	bf00      	nop
 800bf0a:	46bd      	mov	sp, r7
 800bf0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf10:	4770      	bx	lr

0800bf12 <LL_RCC_PLLSAI1_Enable>:
{
 800bf12:	b480      	push	{r7}
 800bf14:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800bf16:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bf1a:	681b      	ldr	r3, [r3, #0]
 800bf1c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800bf20:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800bf24:	6013      	str	r3, [r2, #0]
}
 800bf26:	bf00      	nop
 800bf28:	46bd      	mov	sp, r7
 800bf2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf2e:	4770      	bx	lr

0800bf30 <LL_RCC_PLLSAI1_Disable>:
{
 800bf30:	b480      	push	{r7}
 800bf32:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800bf34:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bf38:	681b      	ldr	r3, [r3, #0]
 800bf3a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800bf3e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800bf42:	6013      	str	r3, [r2, #0]
}
 800bf44:	bf00      	nop
 800bf46:	46bd      	mov	sp, r7
 800bf48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf4c:	4770      	bx	lr

0800bf4e <LL_RCC_PLLSAI1_IsReady>:
{
 800bf4e:	b480      	push	{r7}
 800bf50:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 800bf52:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800bf5c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800bf60:	d101      	bne.n	800bf66 <LL_RCC_PLLSAI1_IsReady+0x18>
 800bf62:	2301      	movs	r3, #1
 800bf64:	e000      	b.n	800bf68 <LL_RCC_PLLSAI1_IsReady+0x1a>
 800bf66:	2300      	movs	r3, #0
}
 800bf68:	4618      	mov	r0, r3
 800bf6a:	46bd      	mov	sp, r7
 800bf6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf70:	4770      	bx	lr

0800bf72 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800bf72:	b580      	push	{r7, lr}
 800bf74:	b088      	sub	sp, #32
 800bf76:	af00      	add	r7, sp, #0
 800bf78:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 800bf7a:	2300      	movs	r3, #0
 800bf7c:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 800bf7e:	2300      	movs	r3, #0
 800bf80:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	681b      	ldr	r3, [r3, #0]
 800bf86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	d034      	beq.n	800bff8 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bf92:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800bf96:	d021      	beq.n	800bfdc <HAL_RCCEx_PeriphCLKConfig+0x6a>
 800bf98:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800bf9c:	d81b      	bhi.n	800bfd6 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800bf9e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800bfa2:	d01d      	beq.n	800bfe0 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 800bfa4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800bfa8:	d815      	bhi.n	800bfd6 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	d00b      	beq.n	800bfc6 <HAL_RCCEx_PeriphCLKConfig+0x54>
 800bfae:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800bfb2:	d110      	bne.n	800bfd6 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 800bfb4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bfb8:	68db      	ldr	r3, [r3, #12]
 800bfba:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800bfbe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800bfc2:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 800bfc4:	e00d      	b.n	800bfe2 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	3304      	adds	r3, #4
 800bfca:	4618      	mov	r0, r3
 800bfcc:	f000 f947 	bl	800c25e <RCCEx_PLLSAI1_ConfigNP>
 800bfd0:	4603      	mov	r3, r0
 800bfd2:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 800bfd4:	e005      	b.n	800bfe2 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 800bfd6:	2301      	movs	r3, #1
 800bfd8:	77fb      	strb	r3, [r7, #31]
        break;
 800bfda:	e002      	b.n	800bfe2 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800bfdc:	bf00      	nop
 800bfde:	e000      	b.n	800bfe2 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800bfe0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bfe2:	7ffb      	ldrb	r3, [r7, #31]
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	d105      	bne.n	800bff4 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bfec:	4618      	mov	r0, r3
 800bfee:	f7ff fee8 	bl	800bdc2 <LL_RCC_SetSAIClockSource>
 800bff2:	e001      	b.n	800bff8 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bff4:	7ffb      	ldrb	r3, [r7, #31]
 800bff6:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c000:	2b00      	cmp	r3, #0
 800c002:	d046      	beq.n	800c092 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 800c004:	f7ff ff56 	bl	800beb4 <LL_RCC_GetRTCClockSource>
 800c008:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c00e:	69ba      	ldr	r2, [r7, #24]
 800c010:	429a      	cmp	r2, r3
 800c012:	d03c      	beq.n	800c08e <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800c014:	f7fe fcac 	bl	800a970 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 800c018:	69bb      	ldr	r3, [r7, #24]
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d105      	bne.n	800c02a <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c022:	4618      	mov	r0, r3
 800c024:	f7ff ff30 	bl	800be88 <LL_RCC_SetRTCClockSource>
 800c028:	e02e      	b.n	800c088 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 800c02a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c02e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c032:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 800c034:	f7ff ff4b 	bl	800bece <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 800c038:	f7ff ff5a 	bl	800bef0 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 800c03c:	697b      	ldr	r3, [r7, #20]
 800c03e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c046:	4313      	orrs	r3, r2
 800c048:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 800c04a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800c04e:	697b      	ldr	r3, [r7, #20]
 800c050:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 800c054:	f7ff fdf0 	bl	800bc38 <LL_RCC_LSE_IsEnabled>
 800c058:	4603      	mov	r3, r0
 800c05a:	2b01      	cmp	r3, #1
 800c05c:	d114      	bne.n	800c088 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800c05e:	f7fb fd33 	bl	8007ac8 <HAL_GetTick>
 800c062:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 800c064:	e00b      	b.n	800c07e <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c066:	f7fb fd2f 	bl	8007ac8 <HAL_GetTick>
 800c06a:	4602      	mov	r2, r0
 800c06c:	693b      	ldr	r3, [r7, #16]
 800c06e:	1ad3      	subs	r3, r2, r3
 800c070:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c074:	4293      	cmp	r3, r2
 800c076:	d902      	bls.n	800c07e <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 800c078:	2303      	movs	r3, #3
 800c07a:	77fb      	strb	r3, [r7, #31]
              break;
 800c07c:	e004      	b.n	800c088 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 800c07e:	f7ff fded 	bl	800bc5c <LL_RCC_LSE_IsReady>
 800c082:	4603      	mov	r3, r0
 800c084:	2b01      	cmp	r3, #1
 800c086:	d1ee      	bne.n	800c066 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 800c088:	7ffb      	ldrb	r3, [r7, #31]
 800c08a:	77bb      	strb	r3, [r7, #30]
 800c08c:	e001      	b.n	800c092 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c08e:	7ffb      	ldrb	r3, [r7, #31]
 800c090:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	681b      	ldr	r3, [r3, #0]
 800c096:	f003 0301 	and.w	r3, r3, #1
 800c09a:	2b00      	cmp	r3, #0
 800c09c:	d004      	beq.n	800c0a8 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	699b      	ldr	r3, [r3, #24]
 800c0a2:	4618      	mov	r0, r3
 800c0a4:	f7ff fe2a 	bl	800bcfc <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	681b      	ldr	r3, [r3, #0]
 800c0ac:	f003 0302 	and.w	r3, r3, #2
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	d004      	beq.n	800c0be <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	69db      	ldr	r3, [r3, #28]
 800c0b8:	4618      	mov	r0, r3
 800c0ba:	f7ff fe35 	bl	800bd28 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	681b      	ldr	r3, [r3, #0]
 800c0c2:	f003 0310 	and.w	r3, r3, #16
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	d004      	beq.n	800c0d4 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c0ce:	4618      	mov	r0, r3
 800c0d0:	f7ff fe5d 	bl	800bd8e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	681b      	ldr	r3, [r3, #0]
 800c0d8:	f003 0320 	and.w	r3, r3, #32
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	d004      	beq.n	800c0ea <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c0e4:	4618      	mov	r0, r3
 800c0e6:	f7ff fe52 	bl	800bd8e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	681b      	ldr	r3, [r3, #0]
 800c0ee:	f003 0304 	and.w	r3, r3, #4
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	d004      	beq.n	800c100 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	6a1b      	ldr	r3, [r3, #32]
 800c0fa:	4618      	mov	r0, r3
 800c0fc:	f7ff fe2a 	bl	800bd54 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	681b      	ldr	r3, [r3, #0]
 800c104:	f003 0308 	and.w	r3, r3, #8
 800c108:	2b00      	cmp	r3, #0
 800c10a:	d004      	beq.n	800c116 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c110:	4618      	mov	r0, r3
 800c112:	f7ff fe1f 	bl	800bd54 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	681b      	ldr	r3, [r3, #0]
 800c11a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c11e:	2b00      	cmp	r3, #0
 800c120:	d022      	beq.n	800c168 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c126:	4618      	mov	r0, r3
 800c128:	f7ff fe8d 	bl	800be46 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c130:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c134:	d107      	bne.n	800c146 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 800c136:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c13a:	68db      	ldr	r3, [r3, #12]
 800c13c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800c140:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800c144:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c14a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800c14e:	d10b      	bne.n	800c168 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	3304      	adds	r3, #4
 800c154:	4618      	mov	r0, r3
 800c156:	f000 f8dd 	bl	800c314 <RCCEx_PLLSAI1_ConfigNQ>
 800c15a:	4603      	mov	r3, r0
 800c15c:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800c15e:	7ffb      	ldrb	r3, [r7, #31]
 800c160:	2b00      	cmp	r3, #0
 800c162:	d001      	beq.n	800c168 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 800c164:	7ffb      	ldrb	r3, [r7, #31]
 800c166:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	681b      	ldr	r3, [r3, #0]
 800c16c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800c170:	2b00      	cmp	r3, #0
 800c172:	d02b      	beq.n	800c1cc <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c178:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c17c:	d008      	beq.n	800c190 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c182:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c186:	d003      	beq.n	800c190 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	d105      	bne.n	800c19c <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c194:	4618      	mov	r0, r3
 800c196:	f7ff fe2a 	bl	800bdee <LL_RCC_SetRNGClockSource>
 800c19a:	e00a      	b.n	800c1b2 <HAL_RCCEx_PeriphCLKConfig+0x240>
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c1a0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c1a4:	60fb      	str	r3, [r7, #12]
 800c1a6:	2000      	movs	r0, #0
 800c1a8:	f7ff fe21 	bl	800bdee <LL_RCC_SetRNGClockSource>
 800c1ac:	68f8      	ldr	r0, [r7, #12]
 800c1ae:	f7ff fe34 	bl	800be1a <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c1b6:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 800c1ba:	d107      	bne.n	800c1cc <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800c1bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c1c0:	68db      	ldr	r3, [r3, #12]
 800c1c2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800c1c6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800c1ca:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	681b      	ldr	r3, [r3, #0]
 800c1d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	d022      	beq.n	800c21e <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c1dc:	4618      	mov	r0, r3
 800c1de:	f7ff fe3d 	bl	800be5c <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c1e6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c1ea:	d107      	bne.n	800c1fc <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800c1ec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c1f0:	68db      	ldr	r3, [r3, #12]
 800c1f2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800c1f6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c1fa:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c200:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c204:	d10b      	bne.n	800c21e <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	3304      	adds	r3, #4
 800c20a:	4618      	mov	r0, r3
 800c20c:	f000 f8dd 	bl	800c3ca <RCCEx_PLLSAI1_ConfigNR>
 800c210:	4603      	mov	r3, r0
 800c212:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800c214:	7ffb      	ldrb	r3, [r7, #31]
 800c216:	2b00      	cmp	r3, #0
 800c218:	d001      	beq.n	800c21e <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 800c21a:	7ffb      	ldrb	r3, [r7, #31]
 800c21c:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	681b      	ldr	r3, [r3, #0]
 800c222:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800c226:	2b00      	cmp	r3, #0
 800c228:	d004      	beq.n	800c234 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c22e:	4618      	mov	r0, r3
 800c230:	f7ff fd26 	bl	800bc80 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	d009      	beq.n	800c254 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c244:	4618      	mov	r0, r3
 800c246:	f7ff fd45 	bl	800bcd4 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c24e:	4618      	mov	r0, r3
 800c250:	f7ff fd2c 	bl	800bcac <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 800c254:	7fbb      	ldrb	r3, [r7, #30]
}
 800c256:	4618      	mov	r0, r3
 800c258:	3720      	adds	r7, #32
 800c25a:	46bd      	mov	sp, r7
 800c25c:	bd80      	pop	{r7, pc}

0800c25e <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800c25e:	b580      	push	{r7, lr}
 800c260:	b084      	sub	sp, #16
 800c262:	af00      	add	r7, sp, #0
 800c264:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c266:	2300      	movs	r3, #0
 800c268:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800c26a:	f7ff fe61 	bl	800bf30 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800c26e:	f7fb fc2b 	bl	8007ac8 <HAL_GetTick>
 800c272:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800c274:	e009      	b.n	800c28a <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800c276:	f7fb fc27 	bl	8007ac8 <HAL_GetTick>
 800c27a:	4602      	mov	r2, r0
 800c27c:	68bb      	ldr	r3, [r7, #8]
 800c27e:	1ad3      	subs	r3, r2, r3
 800c280:	2b02      	cmp	r3, #2
 800c282:	d902      	bls.n	800c28a <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 800c284:	2303      	movs	r3, #3
 800c286:	73fb      	strb	r3, [r7, #15]
      break;
 800c288:	e004      	b.n	800c294 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800c28a:	f7ff fe60 	bl	800bf4e <LL_RCC_PLLSAI1_IsReady>
 800c28e:	4603      	mov	r3, r0
 800c290:	2b00      	cmp	r3, #0
 800c292:	d1f0      	bne.n	800c276 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 800c294:	7bfb      	ldrb	r3, [r7, #15]
 800c296:	2b00      	cmp	r3, #0
 800c298:	d137      	bne.n	800c30a <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800c29a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c29e:	691b      	ldr	r3, [r3, #16]
 800c2a0:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	681b      	ldr	r3, [r3, #0]
 800c2a8:	021b      	lsls	r3, r3, #8
 800c2aa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c2ae:	4313      	orrs	r3, r2
 800c2b0:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 800c2b2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c2b6:	691b      	ldr	r3, [r3, #16]
 800c2b8:	f423 1278 	bic.w	r2, r3, #4063232	@ 0x3e0000
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	685b      	ldr	r3, [r3, #4]
 800c2c0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c2c4:	4313      	orrs	r3, r2
 800c2c6:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800c2c8:	f7ff fe23 	bl	800bf12 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c2cc:	f7fb fbfc 	bl	8007ac8 <HAL_GetTick>
 800c2d0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800c2d2:	e009      	b.n	800c2e8 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800c2d4:	f7fb fbf8 	bl	8007ac8 <HAL_GetTick>
 800c2d8:	4602      	mov	r2, r0
 800c2da:	68bb      	ldr	r3, [r7, #8]
 800c2dc:	1ad3      	subs	r3, r2, r3
 800c2de:	2b02      	cmp	r3, #2
 800c2e0:	d902      	bls.n	800c2e8 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 800c2e2:	2303      	movs	r3, #3
 800c2e4:	73fb      	strb	r3, [r7, #15]
        break;
 800c2e6:	e004      	b.n	800c2f2 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800c2e8:	f7ff fe31 	bl	800bf4e <LL_RCC_PLLSAI1_IsReady>
 800c2ec:	4603      	mov	r3, r0
 800c2ee:	2b01      	cmp	r3, #1
 800c2f0:	d1f0      	bne.n	800c2d4 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 800c2f2:	7bfb      	ldrb	r3, [r7, #15]
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	d108      	bne.n	800c30a <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800c2f8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c2fc:	691a      	ldr	r2, [r3, #16]
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	691b      	ldr	r3, [r3, #16]
 800c302:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c306:	4313      	orrs	r3, r2
 800c308:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800c30a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c30c:	4618      	mov	r0, r3
 800c30e:	3710      	adds	r7, #16
 800c310:	46bd      	mov	sp, r7
 800c312:	bd80      	pop	{r7, pc}

0800c314 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800c314:	b580      	push	{r7, lr}
 800c316:	b084      	sub	sp, #16
 800c318:	af00      	add	r7, sp, #0
 800c31a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c31c:	2300      	movs	r3, #0
 800c31e:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800c320:	f7ff fe06 	bl	800bf30 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800c324:	f7fb fbd0 	bl	8007ac8 <HAL_GetTick>
 800c328:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800c32a:	e009      	b.n	800c340 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800c32c:	f7fb fbcc 	bl	8007ac8 <HAL_GetTick>
 800c330:	4602      	mov	r2, r0
 800c332:	68bb      	ldr	r3, [r7, #8]
 800c334:	1ad3      	subs	r3, r2, r3
 800c336:	2b02      	cmp	r3, #2
 800c338:	d902      	bls.n	800c340 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 800c33a:	2303      	movs	r3, #3
 800c33c:	73fb      	strb	r3, [r7, #15]
      break;
 800c33e:	e004      	b.n	800c34a <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800c340:	f7ff fe05 	bl	800bf4e <LL_RCC_PLLSAI1_IsReady>
 800c344:	4603      	mov	r3, r0
 800c346:	2b00      	cmp	r3, #0
 800c348:	d1f0      	bne.n	800c32c <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 800c34a:	7bfb      	ldrb	r3, [r7, #15]
 800c34c:	2b00      	cmp	r3, #0
 800c34e:	d137      	bne.n	800c3c0 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800c350:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c354:	691b      	ldr	r3, [r3, #16]
 800c356:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	681b      	ldr	r3, [r3, #0]
 800c35e:	021b      	lsls	r3, r3, #8
 800c360:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c364:	4313      	orrs	r3, r2
 800c366:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 800c368:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c36c:	691b      	ldr	r3, [r3, #16]
 800c36e:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	689b      	ldr	r3, [r3, #8]
 800c376:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c37a:	4313      	orrs	r3, r2
 800c37c:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800c37e:	f7ff fdc8 	bl	800bf12 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c382:	f7fb fba1 	bl	8007ac8 <HAL_GetTick>
 800c386:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800c388:	e009      	b.n	800c39e <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800c38a:	f7fb fb9d 	bl	8007ac8 <HAL_GetTick>
 800c38e:	4602      	mov	r2, r0
 800c390:	68bb      	ldr	r3, [r7, #8]
 800c392:	1ad3      	subs	r3, r2, r3
 800c394:	2b02      	cmp	r3, #2
 800c396:	d902      	bls.n	800c39e <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 800c398:	2303      	movs	r3, #3
 800c39a:	73fb      	strb	r3, [r7, #15]
        break;
 800c39c:	e004      	b.n	800c3a8 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800c39e:	f7ff fdd6 	bl	800bf4e <LL_RCC_PLLSAI1_IsReady>
 800c3a2:	4603      	mov	r3, r0
 800c3a4:	2b01      	cmp	r3, #1
 800c3a6:	d1f0      	bne.n	800c38a <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 800c3a8:	7bfb      	ldrb	r3, [r7, #15]
 800c3aa:	2b00      	cmp	r3, #0
 800c3ac:	d108      	bne.n	800c3c0 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800c3ae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c3b2:	691a      	ldr	r2, [r3, #16]
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	691b      	ldr	r3, [r3, #16]
 800c3b8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c3bc:	4313      	orrs	r3, r2
 800c3be:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800c3c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c3c2:	4618      	mov	r0, r3
 800c3c4:	3710      	adds	r7, #16
 800c3c6:	46bd      	mov	sp, r7
 800c3c8:	bd80      	pop	{r7, pc}

0800c3ca <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800c3ca:	b580      	push	{r7, lr}
 800c3cc:	b084      	sub	sp, #16
 800c3ce:	af00      	add	r7, sp, #0
 800c3d0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c3d2:	2300      	movs	r3, #0
 800c3d4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800c3d6:	f7ff fdab 	bl	800bf30 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800c3da:	f7fb fb75 	bl	8007ac8 <HAL_GetTick>
 800c3de:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800c3e0:	e009      	b.n	800c3f6 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800c3e2:	f7fb fb71 	bl	8007ac8 <HAL_GetTick>
 800c3e6:	4602      	mov	r2, r0
 800c3e8:	68bb      	ldr	r3, [r7, #8]
 800c3ea:	1ad3      	subs	r3, r2, r3
 800c3ec:	2b02      	cmp	r3, #2
 800c3ee:	d902      	bls.n	800c3f6 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 800c3f0:	2303      	movs	r3, #3
 800c3f2:	73fb      	strb	r3, [r7, #15]
      break;
 800c3f4:	e004      	b.n	800c400 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800c3f6:	f7ff fdaa 	bl	800bf4e <LL_RCC_PLLSAI1_IsReady>
 800c3fa:	4603      	mov	r3, r0
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	d1f0      	bne.n	800c3e2 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 800c400:	7bfb      	ldrb	r3, [r7, #15]
 800c402:	2b00      	cmp	r3, #0
 800c404:	d137      	bne.n	800c476 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800c406:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c40a:	691b      	ldr	r3, [r3, #16]
 800c40c:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	681b      	ldr	r3, [r3, #0]
 800c414:	021b      	lsls	r3, r3, #8
 800c416:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c41a:	4313      	orrs	r3, r2
 800c41c:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 800c41e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c422:	691b      	ldr	r3, [r3, #16]
 800c424:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	68db      	ldr	r3, [r3, #12]
 800c42c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c430:	4313      	orrs	r3, r2
 800c432:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800c434:	f7ff fd6d 	bl	800bf12 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c438:	f7fb fb46 	bl	8007ac8 <HAL_GetTick>
 800c43c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800c43e:	e009      	b.n	800c454 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800c440:	f7fb fb42 	bl	8007ac8 <HAL_GetTick>
 800c444:	4602      	mov	r2, r0
 800c446:	68bb      	ldr	r3, [r7, #8]
 800c448:	1ad3      	subs	r3, r2, r3
 800c44a:	2b02      	cmp	r3, #2
 800c44c:	d902      	bls.n	800c454 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 800c44e:	2303      	movs	r3, #3
 800c450:	73fb      	strb	r3, [r7, #15]
        break;
 800c452:	e004      	b.n	800c45e <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800c454:	f7ff fd7b 	bl	800bf4e <LL_RCC_PLLSAI1_IsReady>
 800c458:	4603      	mov	r3, r0
 800c45a:	2b01      	cmp	r3, #1
 800c45c:	d1f0      	bne.n	800c440 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 800c45e:	7bfb      	ldrb	r3, [r7, #15]
 800c460:	2b00      	cmp	r3, #0
 800c462:	d108      	bne.n	800c476 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800c464:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c468:	691a      	ldr	r2, [r3, #16]
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	691b      	ldr	r3, [r3, #16]
 800c46e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c472:	4313      	orrs	r3, r2
 800c474:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800c476:	7bfb      	ldrb	r3, [r7, #15]
}
 800c478:	4618      	mov	r0, r3
 800c47a:	3710      	adds	r7, #16
 800c47c:	46bd      	mov	sp, r7
 800c47e:	bd80      	pop	{r7, pc}

0800c480 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800c480:	b580      	push	{r7, lr}
 800c482:	b084      	sub	sp, #16
 800c484:	af00      	add	r7, sp, #0
 800c486:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	2b00      	cmp	r3, #0
 800c48c:	d101      	bne.n	800c492 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 800c48e:	2301      	movs	r3, #1
 800c490:	e09f      	b.n	800c5d2 <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800c498:	b2db      	uxtb	r3, r3
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	d106      	bne.n	800c4ac <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	2200      	movs	r2, #0
 800c4a2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800c4a6:	6878      	ldr	r0, [r7, #4]
 800c4a8:	f7fb f89c 	bl	80075e4 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	2202      	movs	r2, #2
 800c4b0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800c4b4:	4b49      	ldr	r3, [pc, #292]	@ (800c5dc <HAL_RTC_Init+0x15c>)
 800c4b6:	68db      	ldr	r3, [r3, #12]
 800c4b8:	f003 0310 	and.w	r3, r3, #16
 800c4bc:	2b10      	cmp	r3, #16
 800c4be:	d07e      	beq.n	800c5be <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	681b      	ldr	r3, [r3, #0]
 800c4c4:	22ca      	movs	r2, #202	@ 0xca
 800c4c6:	625a      	str	r2, [r3, #36]	@ 0x24
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	681b      	ldr	r3, [r3, #0]
 800c4cc:	2253      	movs	r2, #83	@ 0x53
 800c4ce:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800c4d0:	6878      	ldr	r0, [r7, #4]
 800c4d2:	f000 f8ab 	bl	800c62c <RTC_EnterInitMode>
 800c4d6:	4603      	mov	r3, r0
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	d00a      	beq.n	800c4f2 <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	681b      	ldr	r3, [r3, #0]
 800c4e0:	22ff      	movs	r2, #255	@ 0xff
 800c4e2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	2204      	movs	r2, #4
 800c4e8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

      status = HAL_ERROR;
 800c4ec:	2301      	movs	r3, #1
 800c4ee:	73fb      	strb	r3, [r7, #15]
 800c4f0:	e067      	b.n	800c5c2 <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	681b      	ldr	r3, [r3, #0]
 800c4f6:	689b      	ldr	r3, [r3, #8]
 800c4f8:	687a      	ldr	r2, [r7, #4]
 800c4fa:	6812      	ldr	r2, [r2, #0]
 800c4fc:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800c500:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c504:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	681b      	ldr	r3, [r3, #0]
 800c50a:	6899      	ldr	r1, [r3, #8]
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	685a      	ldr	r2, [r3, #4]
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	691b      	ldr	r3, [r3, #16]
 800c514:	431a      	orrs	r2, r3
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	699b      	ldr	r3, [r3, #24]
 800c51a:	431a      	orrs	r2, r3
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	681b      	ldr	r3, [r3, #0]
 800c520:	430a      	orrs	r2, r1
 800c522:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	681b      	ldr	r3, [r3, #0]
 800c528:	687a      	ldr	r2, [r7, #4]
 800c52a:	68d2      	ldr	r2, [r2, #12]
 800c52c:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	681b      	ldr	r3, [r3, #0]
 800c532:	6919      	ldr	r1, [r3, #16]
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	689b      	ldr	r3, [r3, #8]
 800c538:	041a      	lsls	r2, r3, #16
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	681b      	ldr	r3, [r3, #0]
 800c53e:	430a      	orrs	r2, r1
 800c540:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	681b      	ldr	r3, [r3, #0]
 800c546:	68da      	ldr	r2, [r3, #12]
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800c550:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	681b      	ldr	r3, [r3, #0]
 800c556:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	681b      	ldr	r3, [r3, #0]
 800c55c:	f022 0203 	bic.w	r2, r2, #3
 800c560:	64da      	str	r2, [r3, #76]	@ 0x4c
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	681b      	ldr	r3, [r3, #0]
 800c566:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	69da      	ldr	r2, [r3, #28]
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	695b      	ldr	r3, [r3, #20]
 800c570:	431a      	orrs	r2, r3
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	681b      	ldr	r3, [r3, #0]
 800c576:	430a      	orrs	r2, r1
 800c578:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	681b      	ldr	r3, [r3, #0]
 800c57e:	689b      	ldr	r3, [r3, #8]
 800c580:	f003 0320 	and.w	r3, r3, #32
 800c584:	2b00      	cmp	r3, #0
 800c586:	d113      	bne.n	800c5b0 <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800c588:	6878      	ldr	r0, [r7, #4]
 800c58a:	f000 f829 	bl	800c5e0 <HAL_RTC_WaitForSynchro>
 800c58e:	4603      	mov	r3, r0
 800c590:	2b00      	cmp	r3, #0
 800c592:	d00d      	beq.n	800c5b0 <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	681b      	ldr	r3, [r3, #0]
 800c598:	22ff      	movs	r2, #255	@ 0xff
 800c59a:	625a      	str	r2, [r3, #36]	@ 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	2204      	movs	r2, #4
 800c5a0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	2200      	movs	r2, #0
 800c5a8:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 800c5ac:	2301      	movs	r3, #1
 800c5ae:	e010      	b.n	800c5d2 <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	681b      	ldr	r3, [r3, #0]
 800c5b4:	22ff      	movs	r2, #255	@ 0xff
 800c5b6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Set RTC state */
      status = HAL_OK;
 800c5b8:	2300      	movs	r3, #0
 800c5ba:	73fb      	strb	r3, [r7, #15]
 800c5bc:	e001      	b.n	800c5c2 <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 800c5be:	2300      	movs	r3, #0
 800c5c0:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800c5c2:	7bfb      	ldrb	r3, [r7, #15]
 800c5c4:	2b00      	cmp	r3, #0
 800c5c6:	d103      	bne.n	800c5d0 <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	2201      	movs	r2, #1
 800c5cc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  return status;
 800c5d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c5d2:	4618      	mov	r0, r3
 800c5d4:	3710      	adds	r7, #16
 800c5d6:	46bd      	mov	sp, r7
 800c5d8:	bd80      	pop	{r7, pc}
 800c5da:	bf00      	nop
 800c5dc:	40002800 	.word	0x40002800

0800c5e0 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800c5e0:	b580      	push	{r7, lr}
 800c5e2:	b084      	sub	sp, #16
 800c5e4:	af00      	add	r7, sp, #0
 800c5e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	681b      	ldr	r3, [r3, #0]
 800c5ec:	68da      	ldr	r2, [r3, #12]
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	681b      	ldr	r3, [r3, #0]
 800c5f2:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800c5f6:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800c5f8:	f7fb fa66 	bl	8007ac8 <HAL_GetTick>
 800c5fc:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800c5fe:	e009      	b.n	800c614 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800c600:	f7fb fa62 	bl	8007ac8 <HAL_GetTick>
 800c604:	4602      	mov	r2, r0
 800c606:	68fb      	ldr	r3, [r7, #12]
 800c608:	1ad3      	subs	r3, r2, r3
 800c60a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800c60e:	d901      	bls.n	800c614 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 800c610:	2303      	movs	r3, #3
 800c612:	e007      	b.n	800c624 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	681b      	ldr	r3, [r3, #0]
 800c618:	68db      	ldr	r3, [r3, #12]
 800c61a:	f003 0320 	and.w	r3, r3, #32
 800c61e:	2b00      	cmp	r3, #0
 800c620:	d0ee      	beq.n	800c600 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 800c622:	2300      	movs	r3, #0
}
 800c624:	4618      	mov	r0, r3
 800c626:	3710      	adds	r7, #16
 800c628:	46bd      	mov	sp, r7
 800c62a:	bd80      	pop	{r7, pc}

0800c62c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800c62c:	b580      	push	{r7, lr}
 800c62e:	b084      	sub	sp, #16
 800c630:	af00      	add	r7, sp, #0
 800c632:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	681b      	ldr	r3, [r3, #0]
 800c638:	68db      	ldr	r3, [r3, #12]
 800c63a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c63e:	2b00      	cmp	r3, #0
 800c640:	d119      	bne.n	800c676 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	681b      	ldr	r3, [r3, #0]
 800c646:	f04f 32ff 	mov.w	r2, #4294967295
 800c64a:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800c64c:	f7fb fa3c 	bl	8007ac8 <HAL_GetTick>
 800c650:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800c652:	e009      	b.n	800c668 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800c654:	f7fb fa38 	bl	8007ac8 <HAL_GetTick>
 800c658:	4602      	mov	r2, r0
 800c65a:	68fb      	ldr	r3, [r7, #12]
 800c65c:	1ad3      	subs	r3, r2, r3
 800c65e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800c662:	d901      	bls.n	800c668 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 800c664:	2303      	movs	r3, #3
 800c666:	e007      	b.n	800c678 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	681b      	ldr	r3, [r3, #0]
 800c66c:	68db      	ldr	r3, [r3, #12]
 800c66e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c672:	2b00      	cmp	r3, #0
 800c674:	d0ee      	beq.n	800c654 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 800c676:	2300      	movs	r3, #0
}
 800c678:	4618      	mov	r0, r3
 800c67a:	3710      	adds	r7, #16
 800c67c:	46bd      	mov	sp, r7
 800c67e:	bd80      	pop	{r7, pc}

0800c680 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 800c680:	b580      	push	{r7, lr}
 800c682:	b086      	sub	sp, #24
 800c684:	af00      	add	r7, sp, #0
 800c686:	60f8      	str	r0, [r7, #12]
 800c688:	60b9      	str	r1, [r7, #8]
 800c68a:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800c68c:	68fb      	ldr	r3, [r7, #12]
 800c68e:	f893 3020 	ldrb.w	r3, [r3, #32]
 800c692:	2b01      	cmp	r3, #1
 800c694:	d101      	bne.n	800c69a <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 800c696:	2302      	movs	r3, #2
 800c698:	e0a8      	b.n	800c7ec <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
 800c69a:	68fb      	ldr	r3, [r7, #12]
 800c69c:	2201      	movs	r2, #1
 800c69e:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800c6a2:	68fb      	ldr	r3, [r7, #12]
 800c6a4:	2202      	movs	r2, #2
 800c6a6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c6aa:	68fb      	ldr	r3, [r7, #12]
 800c6ac:	681b      	ldr	r3, [r3, #0]
 800c6ae:	22ca      	movs	r2, #202	@ 0xca
 800c6b0:	625a      	str	r2, [r3, #36]	@ 0x24
 800c6b2:	68fb      	ldr	r3, [r7, #12]
 800c6b4:	681b      	ldr	r3, [r3, #0]
 800c6b6:	2253      	movs	r2, #83	@ 0x53
 800c6b8:	625a      	str	r2, [r3, #36]	@ 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 800c6ba:	68fb      	ldr	r3, [r7, #12]
 800c6bc:	681b      	ldr	r3, [r3, #0]
 800c6be:	689b      	ldr	r3, [r3, #8]
 800c6c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c6c4:	2b00      	cmp	r3, #0
 800c6c6:	d020      	beq.n	800c70a <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
  {
    tickstart = HAL_GetTick();
 800c6c8:	f7fb f9fe 	bl	8007ac8 <HAL_GetTick>
 800c6cc:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 800c6ce:	e015      	b.n	800c6fc <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800c6d0:	f7fb f9fa 	bl	8007ac8 <HAL_GetTick>
 800c6d4:	4602      	mov	r2, r0
 800c6d6:	697b      	ldr	r3, [r7, #20]
 800c6d8:	1ad3      	subs	r3, r2, r3
 800c6da:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800c6de:	d90d      	bls.n	800c6fc <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c6e0:	68fb      	ldr	r3, [r7, #12]
 800c6e2:	681b      	ldr	r3, [r3, #0]
 800c6e4:	22ff      	movs	r2, #255	@ 0xff
 800c6e6:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800c6e8:	68fb      	ldr	r3, [r7, #12]
 800c6ea:	2203      	movs	r2, #3
 800c6ec:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800c6f0:	68fb      	ldr	r3, [r7, #12]
 800c6f2:	2200      	movs	r2, #0
 800c6f4:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 800c6f8:	2303      	movs	r3, #3
 800c6fa:	e077      	b.n	800c7ec <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 800c6fc:	68fb      	ldr	r3, [r7, #12]
 800c6fe:	681b      	ldr	r3, [r3, #0]
 800c700:	68db      	ldr	r3, [r3, #12]
 800c702:	f003 0304 	and.w	r3, r3, #4
 800c706:	2b00      	cmp	r3, #0
 800c708:	d1e2      	bne.n	800c6d0 <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800c70a:	68fb      	ldr	r3, [r7, #12]
 800c70c:	681b      	ldr	r3, [r3, #0]
 800c70e:	689a      	ldr	r2, [r3, #8]
 800c710:	68fb      	ldr	r3, [r7, #12]
 800c712:	681b      	ldr	r3, [r3, #0]
 800c714:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800c718:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800c71a:	68fb      	ldr	r3, [r7, #12]
 800c71c:	681b      	ldr	r3, [r3, #0]
 800c71e:	68db      	ldr	r3, [r3, #12]
 800c720:	b2da      	uxtb	r2, r3
 800c722:	68fb      	ldr	r3, [r7, #12]
 800c724:	681b      	ldr	r3, [r3, #0]
 800c726:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 800c72a:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800c72c:	f7fb f9cc 	bl	8007ac8 <HAL_GetTick>
 800c730:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800c732:	e015      	b.n	800c760 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800c734:	f7fb f9c8 	bl	8007ac8 <HAL_GetTick>
 800c738:	4602      	mov	r2, r0
 800c73a:	697b      	ldr	r3, [r7, #20]
 800c73c:	1ad3      	subs	r3, r2, r3
 800c73e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800c742:	d90d      	bls.n	800c760 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c744:	68fb      	ldr	r3, [r7, #12]
 800c746:	681b      	ldr	r3, [r3, #0]
 800c748:	22ff      	movs	r2, #255	@ 0xff
 800c74a:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800c74c:	68fb      	ldr	r3, [r7, #12]
 800c74e:	2203      	movs	r2, #3
 800c750:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800c754:	68fb      	ldr	r3, [r7, #12]
 800c756:	2200      	movs	r2, #0
 800c758:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 800c75c:	2303      	movs	r3, #3
 800c75e:	e045      	b.n	800c7ec <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800c760:	68fb      	ldr	r3, [r7, #12]
 800c762:	681b      	ldr	r3, [r3, #0]
 800c764:	68db      	ldr	r3, [r3, #12]
 800c766:	f003 0304 	and.w	r3, r3, #4
 800c76a:	2b00      	cmp	r3, #0
 800c76c:	d0e2      	beq.n	800c734 <HAL_RTCEx_SetWakeUpTimer_IT+0xb4>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 800c76e:	68fb      	ldr	r3, [r7, #12]
 800c770:	681b      	ldr	r3, [r3, #0]
 800c772:	68ba      	ldr	r2, [r7, #8]
 800c774:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 800c776:	68fb      	ldr	r3, [r7, #12]
 800c778:	681b      	ldr	r3, [r3, #0]
 800c77a:	689a      	ldr	r2, [r3, #8]
 800c77c:	68fb      	ldr	r3, [r7, #12]
 800c77e:	681b      	ldr	r3, [r3, #0]
 800c780:	f022 0207 	bic.w	r2, r2, #7
 800c784:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 800c786:	68fb      	ldr	r3, [r7, #12]
 800c788:	681b      	ldr	r3, [r3, #0]
 800c78a:	6899      	ldr	r1, [r3, #8]
 800c78c:	68fb      	ldr	r3, [r7, #12]
 800c78e:	681b      	ldr	r3, [r3, #0]
 800c790:	687a      	ldr	r2, [r7, #4]
 800c792:	430a      	orrs	r2, r1
 800c794:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 800c796:	4b17      	ldr	r3, [pc, #92]	@ (800c7f4 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800c798:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c79c:	4a15      	ldr	r2, [pc, #84]	@ (800c7f4 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800c79e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800c7a2:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 800c7a6:	4b13      	ldr	r3, [pc, #76]	@ (800c7f4 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800c7a8:	681b      	ldr	r3, [r3, #0]
 800c7aa:	4a12      	ldr	r2, [pc, #72]	@ (800c7f4 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800c7ac:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800c7b0:	6013      	str	r3, [r2, #0]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 800c7b2:	68fb      	ldr	r3, [r7, #12]
 800c7b4:	681b      	ldr	r3, [r3, #0]
 800c7b6:	689a      	ldr	r2, [r3, #8]
 800c7b8:	68fb      	ldr	r3, [r7, #12]
 800c7ba:	681b      	ldr	r3, [r3, #0]
 800c7bc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800c7c0:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 800c7c2:	68fb      	ldr	r3, [r7, #12]
 800c7c4:	681b      	ldr	r3, [r3, #0]
 800c7c6:	689a      	ldr	r2, [r3, #8]
 800c7c8:	68fb      	ldr	r3, [r7, #12]
 800c7ca:	681b      	ldr	r3, [r3, #0]
 800c7cc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800c7d0:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c7d2:	68fb      	ldr	r3, [r7, #12]
 800c7d4:	681b      	ldr	r3, [r3, #0]
 800c7d6:	22ff      	movs	r2, #255	@ 0xff
 800c7d8:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800c7da:	68fb      	ldr	r3, [r7, #12]
 800c7dc:	2201      	movs	r2, #1
 800c7de:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800c7e2:	68fb      	ldr	r3, [r7, #12]
 800c7e4:	2200      	movs	r2, #0
 800c7e6:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800c7ea:	2300      	movs	r3, #0
}
 800c7ec:	4618      	mov	r0, r3
 800c7ee:	3718      	adds	r7, #24
 800c7f0:	46bd      	mov	sp, r7
 800c7f2:	bd80      	pop	{r7, pc}
 800c7f4:	58000800 	.word	0x58000800

0800c7f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c7f8:	b580      	push	{r7, lr}
 800c7fa:	b082      	sub	sp, #8
 800c7fc:	af00      	add	r7, sp, #0
 800c7fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	2b00      	cmp	r3, #0
 800c804:	d101      	bne.n	800c80a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c806:	2301      	movs	r3, #1
 800c808:	e049      	b.n	800c89e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c810:	b2db      	uxtb	r3, r3
 800c812:	2b00      	cmp	r3, #0
 800c814:	d106      	bne.n	800c824 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	2200      	movs	r2, #0
 800c81a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c81e:	6878      	ldr	r0, [r7, #4]
 800c820:	f7fa ff14 	bl	800764c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	2202      	movs	r2, #2
 800c828:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	681a      	ldr	r2, [r3, #0]
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	3304      	adds	r3, #4
 800c834:	4619      	mov	r1, r3
 800c836:	4610      	mov	r0, r2
 800c838:	f000 f946 	bl	800cac8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	2201      	movs	r2, #1
 800c840:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	2201      	movs	r2, #1
 800c848:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	2201      	movs	r2, #1
 800c850:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	2201      	movs	r2, #1
 800c858:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	2201      	movs	r2, #1
 800c860:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	2201      	movs	r2, #1
 800c868:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	2201      	movs	r2, #1
 800c870:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	2201      	movs	r2, #1
 800c878:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	2201      	movs	r2, #1
 800c880:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	2201      	movs	r2, #1
 800c888:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	2201      	movs	r2, #1
 800c890:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	2201      	movs	r2, #1
 800c898:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800c89c:	2300      	movs	r3, #0
}
 800c89e:	4618      	mov	r0, r3
 800c8a0:	3708      	adds	r7, #8
 800c8a2:	46bd      	mov	sp, r7
 800c8a4:	bd80      	pop	{r7, pc}
	...

0800c8a8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800c8a8:	b480      	push	{r7}
 800c8aa:	b085      	sub	sp, #20
 800c8ac:	af00      	add	r7, sp, #0
 800c8ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c8b6:	b2db      	uxtb	r3, r3
 800c8b8:	2b01      	cmp	r3, #1
 800c8ba:	d001      	beq.n	800c8c0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800c8bc:	2301      	movs	r3, #1
 800c8be:	e02e      	b.n	800c91e <HAL_TIM_Base_Start+0x76>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	2202      	movs	r2, #2
 800c8c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	681b      	ldr	r3, [r3, #0]
 800c8cc:	4a17      	ldr	r2, [pc, #92]	@ (800c92c <HAL_TIM_Base_Start+0x84>)
 800c8ce:	4293      	cmp	r3, r2
 800c8d0:	d004      	beq.n	800c8dc <HAL_TIM_Base_Start+0x34>
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	681b      	ldr	r3, [r3, #0]
 800c8d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c8da:	d115      	bne.n	800c908 <HAL_TIM_Base_Start+0x60>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	681b      	ldr	r3, [r3, #0]
 800c8e0:	689a      	ldr	r2, [r3, #8]
 800c8e2:	4b13      	ldr	r3, [pc, #76]	@ (800c930 <HAL_TIM_Base_Start+0x88>)
 800c8e4:	4013      	ands	r3, r2
 800c8e6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c8e8:	68fb      	ldr	r3, [r7, #12]
 800c8ea:	2b06      	cmp	r3, #6
 800c8ec:	d015      	beq.n	800c91a <HAL_TIM_Base_Start+0x72>
 800c8ee:	68fb      	ldr	r3, [r7, #12]
 800c8f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c8f4:	d011      	beq.n	800c91a <HAL_TIM_Base_Start+0x72>
    {
      __HAL_TIM_ENABLE(htim);
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	681b      	ldr	r3, [r3, #0]
 800c8fa:	681a      	ldr	r2, [r3, #0]
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	681b      	ldr	r3, [r3, #0]
 800c900:	f042 0201 	orr.w	r2, r2, #1
 800c904:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c906:	e008      	b.n	800c91a <HAL_TIM_Base_Start+0x72>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	681b      	ldr	r3, [r3, #0]
 800c90c:	681a      	ldr	r2, [r3, #0]
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	681b      	ldr	r3, [r3, #0]
 800c912:	f042 0201 	orr.w	r2, r2, #1
 800c916:	601a      	str	r2, [r3, #0]
 800c918:	e000      	b.n	800c91c <HAL_TIM_Base_Start+0x74>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c91a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c91c:	2300      	movs	r3, #0
}
 800c91e:	4618      	mov	r0, r3
 800c920:	3714      	adds	r7, #20
 800c922:	46bd      	mov	sp, r7
 800c924:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c928:	4770      	bx	lr
 800c92a:	bf00      	nop
 800c92c:	40012c00 	.word	0x40012c00
 800c930:	00010007 	.word	0x00010007

0800c934 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c934:	b580      	push	{r7, lr}
 800c936:	b084      	sub	sp, #16
 800c938:	af00      	add	r7, sp, #0
 800c93a:	6078      	str	r0, [r7, #4]
 800c93c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c93e:	2300      	movs	r3, #0
 800c940:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c948:	2b01      	cmp	r3, #1
 800c94a:	d101      	bne.n	800c950 <HAL_TIM_ConfigClockSource+0x1c>
 800c94c:	2302      	movs	r3, #2
 800c94e:	e0b6      	b.n	800cabe <HAL_TIM_ConfigClockSource+0x18a>
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	2201      	movs	r2, #1
 800c954:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	2202      	movs	r2, #2
 800c95c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	681b      	ldr	r3, [r3, #0]
 800c964:	689b      	ldr	r3, [r3, #8]
 800c966:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c968:	68bb      	ldr	r3, [r7, #8]
 800c96a:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800c96e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800c972:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c974:	68bb      	ldr	r3, [r7, #8]
 800c976:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800c97a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	681b      	ldr	r3, [r3, #0]
 800c980:	68ba      	ldr	r2, [r7, #8]
 800c982:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c984:	683b      	ldr	r3, [r7, #0]
 800c986:	681b      	ldr	r3, [r3, #0]
 800c988:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c98c:	d03e      	beq.n	800ca0c <HAL_TIM_ConfigClockSource+0xd8>
 800c98e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c992:	f200 8087 	bhi.w	800caa4 <HAL_TIM_ConfigClockSource+0x170>
 800c996:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c99a:	f000 8086 	beq.w	800caaa <HAL_TIM_ConfigClockSource+0x176>
 800c99e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c9a2:	d87f      	bhi.n	800caa4 <HAL_TIM_ConfigClockSource+0x170>
 800c9a4:	2b70      	cmp	r3, #112	@ 0x70
 800c9a6:	d01a      	beq.n	800c9de <HAL_TIM_ConfigClockSource+0xaa>
 800c9a8:	2b70      	cmp	r3, #112	@ 0x70
 800c9aa:	d87b      	bhi.n	800caa4 <HAL_TIM_ConfigClockSource+0x170>
 800c9ac:	2b60      	cmp	r3, #96	@ 0x60
 800c9ae:	d050      	beq.n	800ca52 <HAL_TIM_ConfigClockSource+0x11e>
 800c9b0:	2b60      	cmp	r3, #96	@ 0x60
 800c9b2:	d877      	bhi.n	800caa4 <HAL_TIM_ConfigClockSource+0x170>
 800c9b4:	2b50      	cmp	r3, #80	@ 0x50
 800c9b6:	d03c      	beq.n	800ca32 <HAL_TIM_ConfigClockSource+0xfe>
 800c9b8:	2b50      	cmp	r3, #80	@ 0x50
 800c9ba:	d873      	bhi.n	800caa4 <HAL_TIM_ConfigClockSource+0x170>
 800c9bc:	2b40      	cmp	r3, #64	@ 0x40
 800c9be:	d058      	beq.n	800ca72 <HAL_TIM_ConfigClockSource+0x13e>
 800c9c0:	2b40      	cmp	r3, #64	@ 0x40
 800c9c2:	d86f      	bhi.n	800caa4 <HAL_TIM_ConfigClockSource+0x170>
 800c9c4:	2b30      	cmp	r3, #48	@ 0x30
 800c9c6:	d064      	beq.n	800ca92 <HAL_TIM_ConfigClockSource+0x15e>
 800c9c8:	2b30      	cmp	r3, #48	@ 0x30
 800c9ca:	d86b      	bhi.n	800caa4 <HAL_TIM_ConfigClockSource+0x170>
 800c9cc:	2b20      	cmp	r3, #32
 800c9ce:	d060      	beq.n	800ca92 <HAL_TIM_ConfigClockSource+0x15e>
 800c9d0:	2b20      	cmp	r3, #32
 800c9d2:	d867      	bhi.n	800caa4 <HAL_TIM_ConfigClockSource+0x170>
 800c9d4:	2b00      	cmp	r3, #0
 800c9d6:	d05c      	beq.n	800ca92 <HAL_TIM_ConfigClockSource+0x15e>
 800c9d8:	2b10      	cmp	r3, #16
 800c9da:	d05a      	beq.n	800ca92 <HAL_TIM_ConfigClockSource+0x15e>
 800c9dc:	e062      	b.n	800caa4 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c9e2:	683b      	ldr	r3, [r7, #0]
 800c9e4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c9e6:	683b      	ldr	r3, [r7, #0]
 800c9e8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c9ea:	683b      	ldr	r3, [r7, #0]
 800c9ec:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c9ee:	f000 f957 	bl	800cca0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	681b      	ldr	r3, [r3, #0]
 800c9f6:	689b      	ldr	r3, [r3, #8]
 800c9f8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c9fa:	68bb      	ldr	r3, [r7, #8]
 800c9fc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800ca00:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	681b      	ldr	r3, [r3, #0]
 800ca06:	68ba      	ldr	r2, [r7, #8]
 800ca08:	609a      	str	r2, [r3, #8]
      break;
 800ca0a:	e04f      	b.n	800caac <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800ca10:	683b      	ldr	r3, [r7, #0]
 800ca12:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800ca14:	683b      	ldr	r3, [r7, #0]
 800ca16:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800ca18:	683b      	ldr	r3, [r7, #0]
 800ca1a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800ca1c:	f000 f940 	bl	800cca0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	681b      	ldr	r3, [r3, #0]
 800ca24:	689a      	ldr	r2, [r3, #8]
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	681b      	ldr	r3, [r3, #0]
 800ca2a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800ca2e:	609a      	str	r2, [r3, #8]
      break;
 800ca30:	e03c      	b.n	800caac <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ca36:	683b      	ldr	r3, [r7, #0]
 800ca38:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ca3a:	683b      	ldr	r3, [r7, #0]
 800ca3c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ca3e:	461a      	mov	r2, r3
 800ca40:	f000 f8b2 	bl	800cba8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	681b      	ldr	r3, [r3, #0]
 800ca48:	2150      	movs	r1, #80	@ 0x50
 800ca4a:	4618      	mov	r0, r3
 800ca4c:	f000 f90b 	bl	800cc66 <TIM_ITRx_SetConfig>
      break;
 800ca50:	e02c      	b.n	800caac <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ca56:	683b      	ldr	r3, [r7, #0]
 800ca58:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ca5a:	683b      	ldr	r3, [r7, #0]
 800ca5c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800ca5e:	461a      	mov	r2, r3
 800ca60:	f000 f8d1 	bl	800cc06 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	681b      	ldr	r3, [r3, #0]
 800ca68:	2160      	movs	r1, #96	@ 0x60
 800ca6a:	4618      	mov	r0, r3
 800ca6c:	f000 f8fb 	bl	800cc66 <TIM_ITRx_SetConfig>
      break;
 800ca70:	e01c      	b.n	800caac <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ca76:	683b      	ldr	r3, [r7, #0]
 800ca78:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ca7a:	683b      	ldr	r3, [r7, #0]
 800ca7c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ca7e:	461a      	mov	r2, r3
 800ca80:	f000 f892 	bl	800cba8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	681b      	ldr	r3, [r3, #0]
 800ca88:	2140      	movs	r1, #64	@ 0x40
 800ca8a:	4618      	mov	r0, r3
 800ca8c:	f000 f8eb 	bl	800cc66 <TIM_ITRx_SetConfig>
      break;
 800ca90:	e00c      	b.n	800caac <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	681a      	ldr	r2, [r3, #0]
 800ca96:	683b      	ldr	r3, [r7, #0]
 800ca98:	681b      	ldr	r3, [r3, #0]
 800ca9a:	4619      	mov	r1, r3
 800ca9c:	4610      	mov	r0, r2
 800ca9e:	f000 f8e2 	bl	800cc66 <TIM_ITRx_SetConfig>
      break;
 800caa2:	e003      	b.n	800caac <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800caa4:	2301      	movs	r3, #1
 800caa6:	73fb      	strb	r3, [r7, #15]
      break;
 800caa8:	e000      	b.n	800caac <HAL_TIM_ConfigClockSource+0x178>
      break;
 800caaa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	2201      	movs	r2, #1
 800cab0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	2200      	movs	r2, #0
 800cab8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800cabc:	7bfb      	ldrb	r3, [r7, #15]
}
 800cabe:	4618      	mov	r0, r3
 800cac0:	3710      	adds	r7, #16
 800cac2:	46bd      	mov	sp, r7
 800cac4:	bd80      	pop	{r7, pc}
	...

0800cac8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800cac8:	b480      	push	{r7}
 800caca:	b085      	sub	sp, #20
 800cacc:	af00      	add	r7, sp, #0
 800cace:	6078      	str	r0, [r7, #4]
 800cad0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	681b      	ldr	r3, [r3, #0]
 800cad6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	4a30      	ldr	r2, [pc, #192]	@ (800cb9c <TIM_Base_SetConfig+0xd4>)
 800cadc:	4293      	cmp	r3, r2
 800cade:	d003      	beq.n	800cae8 <TIM_Base_SetConfig+0x20>
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cae6:	d108      	bne.n	800cafa <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800cae8:	68fb      	ldr	r3, [r7, #12]
 800caea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800caee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800caf0:	683b      	ldr	r3, [r7, #0]
 800caf2:	685b      	ldr	r3, [r3, #4]
 800caf4:	68fa      	ldr	r2, [r7, #12]
 800caf6:	4313      	orrs	r3, r2
 800caf8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	4a27      	ldr	r2, [pc, #156]	@ (800cb9c <TIM_Base_SetConfig+0xd4>)
 800cafe:	4293      	cmp	r3, r2
 800cb00:	d00b      	beq.n	800cb1a <TIM_Base_SetConfig+0x52>
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cb08:	d007      	beq.n	800cb1a <TIM_Base_SetConfig+0x52>
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	4a24      	ldr	r2, [pc, #144]	@ (800cba0 <TIM_Base_SetConfig+0xd8>)
 800cb0e:	4293      	cmp	r3, r2
 800cb10:	d003      	beq.n	800cb1a <TIM_Base_SetConfig+0x52>
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	4a23      	ldr	r2, [pc, #140]	@ (800cba4 <TIM_Base_SetConfig+0xdc>)
 800cb16:	4293      	cmp	r3, r2
 800cb18:	d108      	bne.n	800cb2c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800cb1a:	68fb      	ldr	r3, [r7, #12]
 800cb1c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800cb20:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800cb22:	683b      	ldr	r3, [r7, #0]
 800cb24:	68db      	ldr	r3, [r3, #12]
 800cb26:	68fa      	ldr	r2, [r7, #12]
 800cb28:	4313      	orrs	r3, r2
 800cb2a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800cb2c:	68fb      	ldr	r3, [r7, #12]
 800cb2e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800cb32:	683b      	ldr	r3, [r7, #0]
 800cb34:	695b      	ldr	r3, [r3, #20]
 800cb36:	4313      	orrs	r3, r2
 800cb38:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	68fa      	ldr	r2, [r7, #12]
 800cb3e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800cb40:	683b      	ldr	r3, [r7, #0]
 800cb42:	689a      	ldr	r2, [r3, #8]
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800cb48:	683b      	ldr	r3, [r7, #0]
 800cb4a:	681a      	ldr	r2, [r3, #0]
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	4a12      	ldr	r2, [pc, #72]	@ (800cb9c <TIM_Base_SetConfig+0xd4>)
 800cb54:	4293      	cmp	r3, r2
 800cb56:	d007      	beq.n	800cb68 <TIM_Base_SetConfig+0xa0>
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	4a11      	ldr	r2, [pc, #68]	@ (800cba0 <TIM_Base_SetConfig+0xd8>)
 800cb5c:	4293      	cmp	r3, r2
 800cb5e:	d003      	beq.n	800cb68 <TIM_Base_SetConfig+0xa0>
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	4a10      	ldr	r2, [pc, #64]	@ (800cba4 <TIM_Base_SetConfig+0xdc>)
 800cb64:	4293      	cmp	r3, r2
 800cb66:	d103      	bne.n	800cb70 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800cb68:	683b      	ldr	r3, [r7, #0]
 800cb6a:	691a      	ldr	r2, [r3, #16]
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	2201      	movs	r2, #1
 800cb74:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	691b      	ldr	r3, [r3, #16]
 800cb7a:	f003 0301 	and.w	r3, r3, #1
 800cb7e:	2b01      	cmp	r3, #1
 800cb80:	d105      	bne.n	800cb8e <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	691b      	ldr	r3, [r3, #16]
 800cb86:	f023 0201 	bic.w	r2, r3, #1
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	611a      	str	r2, [r3, #16]
  }
}
 800cb8e:	bf00      	nop
 800cb90:	3714      	adds	r7, #20
 800cb92:	46bd      	mov	sp, r7
 800cb94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb98:	4770      	bx	lr
 800cb9a:	bf00      	nop
 800cb9c:	40012c00 	.word	0x40012c00
 800cba0:	40014400 	.word	0x40014400
 800cba4:	40014800 	.word	0x40014800

0800cba8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800cba8:	b480      	push	{r7}
 800cbaa:	b087      	sub	sp, #28
 800cbac:	af00      	add	r7, sp, #0
 800cbae:	60f8      	str	r0, [r7, #12]
 800cbb0:	60b9      	str	r1, [r7, #8]
 800cbb2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800cbb4:	68fb      	ldr	r3, [r7, #12]
 800cbb6:	6a1b      	ldr	r3, [r3, #32]
 800cbb8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800cbba:	68fb      	ldr	r3, [r7, #12]
 800cbbc:	6a1b      	ldr	r3, [r3, #32]
 800cbbe:	f023 0201 	bic.w	r2, r3, #1
 800cbc2:	68fb      	ldr	r3, [r7, #12]
 800cbc4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cbc6:	68fb      	ldr	r3, [r7, #12]
 800cbc8:	699b      	ldr	r3, [r3, #24]
 800cbca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800cbcc:	693b      	ldr	r3, [r7, #16]
 800cbce:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800cbd2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	011b      	lsls	r3, r3, #4
 800cbd8:	693a      	ldr	r2, [r7, #16]
 800cbda:	4313      	orrs	r3, r2
 800cbdc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800cbde:	697b      	ldr	r3, [r7, #20]
 800cbe0:	f023 030a 	bic.w	r3, r3, #10
 800cbe4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800cbe6:	697a      	ldr	r2, [r7, #20]
 800cbe8:	68bb      	ldr	r3, [r7, #8]
 800cbea:	4313      	orrs	r3, r2
 800cbec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800cbee:	68fb      	ldr	r3, [r7, #12]
 800cbf0:	693a      	ldr	r2, [r7, #16]
 800cbf2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cbf4:	68fb      	ldr	r3, [r7, #12]
 800cbf6:	697a      	ldr	r2, [r7, #20]
 800cbf8:	621a      	str	r2, [r3, #32]
}
 800cbfa:	bf00      	nop
 800cbfc:	371c      	adds	r7, #28
 800cbfe:	46bd      	mov	sp, r7
 800cc00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc04:	4770      	bx	lr

0800cc06 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800cc06:	b480      	push	{r7}
 800cc08:	b087      	sub	sp, #28
 800cc0a:	af00      	add	r7, sp, #0
 800cc0c:	60f8      	str	r0, [r7, #12]
 800cc0e:	60b9      	str	r1, [r7, #8]
 800cc10:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800cc12:	68fb      	ldr	r3, [r7, #12]
 800cc14:	6a1b      	ldr	r3, [r3, #32]
 800cc16:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800cc18:	68fb      	ldr	r3, [r7, #12]
 800cc1a:	6a1b      	ldr	r3, [r3, #32]
 800cc1c:	f023 0210 	bic.w	r2, r3, #16
 800cc20:	68fb      	ldr	r3, [r7, #12]
 800cc22:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cc24:	68fb      	ldr	r3, [r7, #12]
 800cc26:	699b      	ldr	r3, [r3, #24]
 800cc28:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800cc2a:	693b      	ldr	r3, [r7, #16]
 800cc2c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800cc30:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	031b      	lsls	r3, r3, #12
 800cc36:	693a      	ldr	r2, [r7, #16]
 800cc38:	4313      	orrs	r3, r2
 800cc3a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800cc3c:	697b      	ldr	r3, [r7, #20]
 800cc3e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800cc42:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800cc44:	68bb      	ldr	r3, [r7, #8]
 800cc46:	011b      	lsls	r3, r3, #4
 800cc48:	697a      	ldr	r2, [r7, #20]
 800cc4a:	4313      	orrs	r3, r2
 800cc4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800cc4e:	68fb      	ldr	r3, [r7, #12]
 800cc50:	693a      	ldr	r2, [r7, #16]
 800cc52:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cc54:	68fb      	ldr	r3, [r7, #12]
 800cc56:	697a      	ldr	r2, [r7, #20]
 800cc58:	621a      	str	r2, [r3, #32]
}
 800cc5a:	bf00      	nop
 800cc5c:	371c      	adds	r7, #28
 800cc5e:	46bd      	mov	sp, r7
 800cc60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc64:	4770      	bx	lr

0800cc66 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800cc66:	b480      	push	{r7}
 800cc68:	b085      	sub	sp, #20
 800cc6a:	af00      	add	r7, sp, #0
 800cc6c:	6078      	str	r0, [r7, #4]
 800cc6e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	689b      	ldr	r3, [r3, #8]
 800cc74:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800cc76:	68fb      	ldr	r3, [r7, #12]
 800cc78:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800cc7c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cc80:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800cc82:	683a      	ldr	r2, [r7, #0]
 800cc84:	68fb      	ldr	r3, [r7, #12]
 800cc86:	4313      	orrs	r3, r2
 800cc88:	f043 0307 	orr.w	r3, r3, #7
 800cc8c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	68fa      	ldr	r2, [r7, #12]
 800cc92:	609a      	str	r2, [r3, #8]
}
 800cc94:	bf00      	nop
 800cc96:	3714      	adds	r7, #20
 800cc98:	46bd      	mov	sp, r7
 800cc9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc9e:	4770      	bx	lr

0800cca0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800cca0:	b480      	push	{r7}
 800cca2:	b087      	sub	sp, #28
 800cca4:	af00      	add	r7, sp, #0
 800cca6:	60f8      	str	r0, [r7, #12]
 800cca8:	60b9      	str	r1, [r7, #8]
 800ccaa:	607a      	str	r2, [r7, #4]
 800ccac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ccae:	68fb      	ldr	r3, [r7, #12]
 800ccb0:	689b      	ldr	r3, [r3, #8]
 800ccb2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ccb4:	697b      	ldr	r3, [r7, #20]
 800ccb6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800ccba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ccbc:	683b      	ldr	r3, [r7, #0]
 800ccbe:	021a      	lsls	r2, r3, #8
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	431a      	orrs	r2, r3
 800ccc4:	68bb      	ldr	r3, [r7, #8]
 800ccc6:	4313      	orrs	r3, r2
 800ccc8:	697a      	ldr	r2, [r7, #20]
 800ccca:	4313      	orrs	r3, r2
 800cccc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ccce:	68fb      	ldr	r3, [r7, #12]
 800ccd0:	697a      	ldr	r2, [r7, #20]
 800ccd2:	609a      	str	r2, [r3, #8]
}
 800ccd4:	bf00      	nop
 800ccd6:	371c      	adds	r7, #28
 800ccd8:	46bd      	mov	sp, r7
 800ccda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccde:	4770      	bx	lr

0800cce0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800cce0:	b480      	push	{r7}
 800cce2:	b085      	sub	sp, #20
 800cce4:	af00      	add	r7, sp, #0
 800cce6:	6078      	str	r0, [r7, #4]
 800cce8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ccf0:	2b01      	cmp	r3, #1
 800ccf2:	d101      	bne.n	800ccf8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ccf4:	2302      	movs	r3, #2
 800ccf6:	e04a      	b.n	800cd8e <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	2201      	movs	r2, #1
 800ccfc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	2202      	movs	r2, #2
 800cd04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	681b      	ldr	r3, [r3, #0]
 800cd0c:	685b      	ldr	r3, [r3, #4]
 800cd0e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	681b      	ldr	r3, [r3, #0]
 800cd14:	689b      	ldr	r3, [r3, #8]
 800cd16:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	681b      	ldr	r3, [r3, #0]
 800cd1c:	4a1f      	ldr	r2, [pc, #124]	@ (800cd9c <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 800cd1e:	4293      	cmp	r3, r2
 800cd20:	d108      	bne.n	800cd34 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800cd22:	68fb      	ldr	r3, [r7, #12]
 800cd24:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800cd28:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800cd2a:	683b      	ldr	r3, [r7, #0]
 800cd2c:	685b      	ldr	r3, [r3, #4]
 800cd2e:	68fa      	ldr	r2, [r7, #12]
 800cd30:	4313      	orrs	r3, r2
 800cd32:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800cd34:	68fb      	ldr	r3, [r7, #12]
 800cd36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cd3a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800cd3c:	683b      	ldr	r3, [r7, #0]
 800cd3e:	681b      	ldr	r3, [r3, #0]
 800cd40:	68fa      	ldr	r2, [r7, #12]
 800cd42:	4313      	orrs	r3, r2
 800cd44:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	681b      	ldr	r3, [r3, #0]
 800cd4a:	68fa      	ldr	r2, [r7, #12]
 800cd4c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	681b      	ldr	r3, [r3, #0]
 800cd52:	4a12      	ldr	r2, [pc, #72]	@ (800cd9c <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 800cd54:	4293      	cmp	r3, r2
 800cd56:	d004      	beq.n	800cd62 <HAL_TIMEx_MasterConfigSynchronization+0x82>
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	681b      	ldr	r3, [r3, #0]
 800cd5c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cd60:	d10c      	bne.n	800cd7c <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800cd62:	68bb      	ldr	r3, [r7, #8]
 800cd64:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800cd68:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800cd6a:	683b      	ldr	r3, [r7, #0]
 800cd6c:	689b      	ldr	r3, [r3, #8]
 800cd6e:	68ba      	ldr	r2, [r7, #8]
 800cd70:	4313      	orrs	r3, r2
 800cd72:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	681b      	ldr	r3, [r3, #0]
 800cd78:	68ba      	ldr	r2, [r7, #8]
 800cd7a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	2201      	movs	r2, #1
 800cd80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	2200      	movs	r2, #0
 800cd88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800cd8c:	2300      	movs	r3, #0
}
 800cd8e:	4618      	mov	r0, r3
 800cd90:	3714      	adds	r7, #20
 800cd92:	46bd      	mov	sp, r7
 800cd94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd98:	4770      	bx	lr
 800cd9a:	bf00      	nop
 800cd9c:	40012c00 	.word	0x40012c00

0800cda0 <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 800cda0:	b580      	push	{r7, lr}
 800cda2:	b088      	sub	sp, #32
 800cda4:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800cda6:	2300      	movs	r3, #0
 800cda8:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800cdaa:	f107 0308 	add.w	r3, r7, #8
 800cdae:	2218      	movs	r2, #24
 800cdb0:	2100      	movs	r1, #0
 800cdb2:	4618      	mov	r0, r3
 800cdb4:	f001 f92d 	bl	800e012 <Osal_MemSet>
  rq.ogf = 0x3f;
 800cdb8:	233f      	movs	r3, #63	@ 0x3f
 800cdba:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 800cdbc:	2381      	movs	r3, #129	@ 0x81
 800cdbe:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800cdc0:	1dfb      	adds	r3, r7, #7
 800cdc2:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800cdc4:	2301      	movs	r3, #1
 800cdc6:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800cdc8:	f107 0308 	add.w	r3, r7, #8
 800cdcc:	2100      	movs	r1, #0
 800cdce:	4618      	mov	r0, r3
 800cdd0:	f001 fba8 	bl	800e524 <hci_send_req>
 800cdd4:	4603      	mov	r3, r0
 800cdd6:	2b00      	cmp	r3, #0
 800cdd8:	da01      	bge.n	800cdde <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 800cdda:	23ff      	movs	r3, #255	@ 0xff
 800cddc:	e000      	b.n	800cde0 <aci_gap_set_non_discoverable+0x40>
  return status;
 800cdde:	79fb      	ldrb	r3, [r7, #7]
}
 800cde0:	4618      	mov	r0, r3
 800cde2:	3720      	adds	r7, #32
 800cde4:	46bd      	mov	sp, r7
 800cde6:	bd80      	pop	{r7, pc}

0800cde8 <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Conn_Interval_Min,
                                     uint16_t Conn_Interval_Max )
{
 800cde8:	b5b0      	push	{r4, r5, r7, lr}
 800cdea:	b0ce      	sub	sp, #312	@ 0x138
 800cdec:	af00      	add	r7, sp, #0
 800cdee:	4605      	mov	r5, r0
 800cdf0:	460c      	mov	r4, r1
 800cdf2:	4610      	mov	r0, r2
 800cdf4:	4619      	mov	r1, r3
 800cdf6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800cdfa:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 800cdfe:	462a      	mov	r2, r5
 800ce00:	701a      	strb	r2, [r3, #0]
 800ce02:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800ce06:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800ce0a:	4622      	mov	r2, r4
 800ce0c:	801a      	strh	r2, [r3, #0]
 800ce0e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800ce12:	f5a3 739b 	sub.w	r3, r3, #310	@ 0x136
 800ce16:	4602      	mov	r2, r0
 800ce18:	801a      	strh	r2, [r3, #0]
 800ce1a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800ce1e:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 800ce22:	460a      	mov	r2, r1
 800ce24:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 800ce26:	f107 0310 	add.w	r3, r7, #16
 800ce2a:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 800ce2e:	f897 314c 	ldrb.w	r3, [r7, #332]	@ 0x14c
 800ce32:	3308      	adds	r3, #8
 800ce34:	f107 0210 	add.w	r2, r7, #16
 800ce38:	4413      	add	r3, r2
 800ce3a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 800ce3e:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 800ce42:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 800ce46:	4413      	add	r3, r2
 800ce48:	3309      	adds	r3, #9
 800ce4a:	f107 0210 	add.w	r2, r7, #16
 800ce4e:	4413      	add	r3, r2
 800ce50:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800ce54:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800ce58:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800ce5c:	2200      	movs	r2, #0
 800ce5e:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800ce60:	2300      	movs	r3, #0
 800ce62:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Type = Advertising_Type;
 800ce66:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800ce6a:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800ce6e:	f2a2 1231 	subw	r2, r2, #305	@ 0x131
 800ce72:	7812      	ldrb	r2, [r2, #0]
 800ce74:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800ce76:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800ce7a:	3301      	adds	r3, #1
 800ce7c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 800ce80:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800ce84:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800ce88:	f5a2 729a 	sub.w	r2, r2, #308	@ 0x134
 800ce8c:	8812      	ldrh	r2, [r2, #0]
 800ce8e:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 800ce92:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800ce96:	3302      	adds	r3, #2
 800ce98:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 800ce9c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800cea0:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800cea4:	f5a2 729b 	sub.w	r2, r2, #310	@ 0x136
 800cea8:	8812      	ldrh	r2, [r2, #0]
 800ceaa:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 800ceae:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800ceb2:	3302      	adds	r3, #2
 800ceb4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 800ceb8:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800cebc:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800cec0:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 800cec4:	7812      	ldrb	r2, [r2, #0]
 800cec6:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800cec8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800cecc:	3301      	adds	r3, #1
 800cece:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 800ced2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800ced6:	f897 2148 	ldrb.w	r2, [r7, #328]	@ 0x148
 800ceda:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 800cedc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800cee0:	3301      	adds	r3, #1
 800cee2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 800cee6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800ceea:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 800ceee:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 800cef0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800cef4:	3301      	adds	r3, #1
 800cef6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 800cefa:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800cefe:	3308      	adds	r3, #8
 800cf00:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 800cf04:	f8d7 1150 	ldr.w	r1, [r7, #336]	@ 0x150
 800cf08:	4618      	mov	r0, r3
 800cf0a:	f001 f872 	bl	800dff2 <Osal_MemCpy>
    index_input += Local_Name_Length;
 800cf0e:	f897 314c 	ldrb.w	r3, [r7, #332]	@ 0x14c
 800cf12:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800cf16:	4413      	add	r3, r2
 800cf18:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 800cf1c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800cf20:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 800cf24:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 800cf26:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800cf2a:	3301      	adds	r3, #1
 800cf2c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 800cf30:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800cf34:	3301      	adds	r3, #1
 800cf36:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 800cf3a:	f8d7 1158 	ldr.w	r1, [r7, #344]	@ 0x158
 800cf3e:	4618      	mov	r0, r3
 800cf40:	f001 f857 	bl	800dff2 <Osal_MemCpy>
    index_input += Service_Uuid_length;
 800cf44:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 800cf48:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800cf4c:	4413      	add	r3, r2
 800cf4e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp2->Conn_Interval_Min = Conn_Interval_Min;
 800cf52:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800cf56:	f8b7 215c 	ldrh.w	r2, [r7, #348]	@ 0x15c
 800cf5a:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 800cf5c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800cf60:	3302      	adds	r3, #2
 800cf62:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp2->Conn_Interval_Max = Conn_Interval_Max;
 800cf66:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800cf6a:	f8b7 2160 	ldrh.w	r2, [r7, #352]	@ 0x160
 800cf6e:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 800cf70:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800cf74:	3302      	adds	r3, #2
 800cf76:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800cf7a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800cf7e:	2218      	movs	r2, #24
 800cf80:	2100      	movs	r1, #0
 800cf82:	4618      	mov	r0, r3
 800cf84:	f001 f845 	bl	800e012 <Osal_MemSet>
  rq.ogf = 0x3f;
 800cf88:	233f      	movs	r3, #63	@ 0x3f
 800cf8a:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x083;
 800cf8e:	2383      	movs	r3, #131	@ 0x83
 800cf90:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800cf94:	f107 0310 	add.w	r3, r7, #16
 800cf98:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800cf9c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800cfa0:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800cfa4:	f107 030f 	add.w	r3, r7, #15
 800cfa8:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800cfac:	2301      	movs	r3, #1
 800cfae:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800cfb2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800cfb6:	2100      	movs	r1, #0
 800cfb8:	4618      	mov	r0, r3
 800cfba:	f001 fab3 	bl	800e524 <hci_send_req>
 800cfbe:	4603      	mov	r3, r0
 800cfc0:	2b00      	cmp	r3, #0
 800cfc2:	da01      	bge.n	800cfc8 <aci_gap_set_discoverable+0x1e0>
    return BLE_STATUS_TIMEOUT;
 800cfc4:	23ff      	movs	r3, #255	@ 0xff
 800cfc6:	e004      	b.n	800cfd2 <aci_gap_set_discoverable+0x1ea>
  return status;
 800cfc8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800cfcc:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800cfd0:	781b      	ldrb	r3, [r3, #0]
}
 800cfd2:	4618      	mov	r0, r3
 800cfd4:	f507 779c 	add.w	r7, r7, #312	@ 0x138
 800cfd8:	46bd      	mov	sp, r7
 800cfda:	bdb0      	pop	{r4, r5, r7, pc}

0800cfdc <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 800cfdc:	b580      	push	{r7, lr}
 800cfde:	b0cc      	sub	sp, #304	@ 0x130
 800cfe0:	af00      	add	r7, sp, #0
 800cfe2:	4602      	mov	r2, r0
 800cfe4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800cfe8:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800cfec:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 800cfee:	f107 0310 	add.w	r3, r7, #16
 800cff2:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800cff6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800cffa:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800cffe:	2200      	movs	r2, #0
 800d000:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800d002:	2300      	movs	r3, #0
 800d004:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->IO_Capability = IO_Capability;
 800d008:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800d00c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800d010:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800d014:	7812      	ldrb	r2, [r2, #0]
 800d016:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800d018:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d01c:	3301      	adds	r3, #1
 800d01e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800d022:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d026:	2218      	movs	r2, #24
 800d028:	2100      	movs	r1, #0
 800d02a:	4618      	mov	r0, r3
 800d02c:	f000 fff1 	bl	800e012 <Osal_MemSet>
  rq.ogf = 0x3f;
 800d030:	233f      	movs	r3, #63	@ 0x3f
 800d032:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x085;
 800d036:	2385      	movs	r3, #133	@ 0x85
 800d038:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800d03c:	f107 0310 	add.w	r3, r7, #16
 800d040:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800d044:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d048:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800d04c:	f107 030f 	add.w	r3, r7, #15
 800d050:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800d054:	2301      	movs	r3, #1
 800d056:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800d05a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d05e:	2100      	movs	r1, #0
 800d060:	4618      	mov	r0, r3
 800d062:	f001 fa5f 	bl	800e524 <hci_send_req>
 800d066:	4603      	mov	r3, r0
 800d068:	2b00      	cmp	r3, #0
 800d06a:	da01      	bge.n	800d070 <aci_gap_set_io_capability+0x94>
    return BLE_STATUS_TIMEOUT;
 800d06c:	23ff      	movs	r3, #255	@ 0xff
 800d06e:	e004      	b.n	800d07a <aci_gap_set_io_capability+0x9e>
  return status;
 800d070:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d074:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800d078:	781b      	ldrb	r3, [r3, #0]
}
 800d07a:	4618      	mov	r0, r3
 800d07c:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800d080:	46bd      	mov	sp, r7
 800d082:	bd80      	pop	{r7, pc}

0800d084 <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 800d084:	b5b0      	push	{r4, r5, r7, lr}
 800d086:	b0cc      	sub	sp, #304	@ 0x130
 800d088:	af00      	add	r7, sp, #0
 800d08a:	4605      	mov	r5, r0
 800d08c:	460c      	mov	r4, r1
 800d08e:	4610      	mov	r0, r2
 800d090:	4619      	mov	r1, r3
 800d092:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d096:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800d09a:	462a      	mov	r2, r5
 800d09c:	701a      	strb	r2, [r3, #0]
 800d09e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d0a2:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800d0a6:	4622      	mov	r2, r4
 800d0a8:	701a      	strb	r2, [r3, #0]
 800d0aa:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d0ae:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 800d0b2:	4602      	mov	r2, r0
 800d0b4:	701a      	strb	r2, [r3, #0]
 800d0b6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d0ba:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800d0be:	460a      	mov	r2, r1
 800d0c0:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 800d0c2:	f107 0310 	add.w	r3, r7, #16
 800d0c6:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800d0ca:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d0ce:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800d0d2:	2200      	movs	r2, #0
 800d0d4:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800d0d6:	2300      	movs	r3, #0
 800d0d8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 800d0dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800d0e0:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800d0e4:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800d0e8:	7812      	ldrb	r2, [r2, #0]
 800d0ea:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800d0ec:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d0f0:	3301      	adds	r3, #1
 800d0f2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->MITM_Mode = MITM_Mode;
 800d0f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800d0fa:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800d0fe:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800d102:	7812      	ldrb	r2, [r2, #0]
 800d104:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800d106:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d10a:	3301      	adds	r3, #1
 800d10c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->SC_Support = SC_Support;
 800d110:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800d114:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800d118:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 800d11c:	7812      	ldrb	r2, [r2, #0]
 800d11e:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800d120:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d124:	3301      	adds	r3, #1
 800d126:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 800d12a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800d12e:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800d132:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 800d136:	7812      	ldrb	r2, [r2, #0]
 800d138:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 800d13a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d13e:	3301      	adds	r3, #1
 800d140:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 800d144:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800d148:	f897 2140 	ldrb.w	r2, [r7, #320]	@ 0x140
 800d14c:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800d14e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d152:	3301      	adds	r3, #1
 800d154:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 800d158:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800d15c:	f897 2144 	ldrb.w	r2, [r7, #324]	@ 0x144
 800d160:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800d162:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d166:	3301      	adds	r3, #1
 800d168:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 800d16c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800d170:	f897 2148 	ldrb.w	r2, [r7, #328]	@ 0x148
 800d174:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 800d176:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d17a:	3301      	adds	r3, #1
 800d17c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 800d180:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800d184:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 800d188:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 800d18c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d190:	3304      	adds	r3, #4
 800d192:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 800d196:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800d19a:	f897 2150 	ldrb.w	r2, [r7, #336]	@ 0x150
 800d19e:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 800d1a0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d1a4:	3301      	adds	r3, #1
 800d1a6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800d1aa:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d1ae:	2218      	movs	r2, #24
 800d1b0:	2100      	movs	r1, #0
 800d1b2:	4618      	mov	r0, r3
 800d1b4:	f000 ff2d 	bl	800e012 <Osal_MemSet>
  rq.ogf = 0x3f;
 800d1b8:	233f      	movs	r3, #63	@ 0x3f
 800d1ba:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x086;
 800d1be:	2386      	movs	r3, #134	@ 0x86
 800d1c0:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800d1c4:	f107 0310 	add.w	r3, r7, #16
 800d1c8:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800d1cc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d1d0:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800d1d4:	f107 030f 	add.w	r3, r7, #15
 800d1d8:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800d1dc:	2301      	movs	r3, #1
 800d1de:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800d1e2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d1e6:	2100      	movs	r1, #0
 800d1e8:	4618      	mov	r0, r3
 800d1ea:	f001 f99b 	bl	800e524 <hci_send_req>
 800d1ee:	4603      	mov	r3, r0
 800d1f0:	2b00      	cmp	r3, #0
 800d1f2:	da01      	bge.n	800d1f8 <aci_gap_set_authentication_requirement+0x174>
    return BLE_STATUS_TIMEOUT;
 800d1f4:	23ff      	movs	r3, #255	@ 0xff
 800d1f6:	e004      	b.n	800d202 <aci_gap_set_authentication_requirement+0x17e>
  return status;
 800d1f8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d1fc:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800d200:	781b      	ldrb	r3, [r3, #0]
}
 800d202:	4618      	mov	r0, r3
 800d204:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800d208:	46bd      	mov	sp, r7
 800d20a:	bdb0      	pop	{r4, r5, r7, pc}

0800d20c <aci_gap_pass_key_resp>:
  return status;
}

tBleStatus aci_gap_pass_key_resp( uint16_t Connection_Handle,
                                  uint32_t Pass_Key )
{
 800d20c:	b580      	push	{r7, lr}
 800d20e:	b0cc      	sub	sp, #304	@ 0x130
 800d210:	af00      	add	r7, sp, #0
 800d212:	4602      	mov	r2, r0
 800d214:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d218:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800d21c:	6019      	str	r1, [r3, #0]
 800d21e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d222:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800d226:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_pass_key_resp_cp0 *cp0 = (aci_gap_pass_key_resp_cp0*)(cmd_buffer);
 800d228:	f107 0310 	add.w	r3, r7, #16
 800d22c:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800d230:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d234:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800d238:	2200      	movs	r2, #0
 800d23a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800d23c:	2300      	movs	r3, #0
 800d23e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 800d242:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800d246:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800d24a:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800d24e:	8812      	ldrh	r2, [r2, #0]
 800d250:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800d252:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d256:	3302      	adds	r3, #2
 800d258:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Pass_Key = Pass_Key;
 800d25c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800d260:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800d264:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 800d268:	6812      	ldr	r2, [r2, #0]
 800d26a:	f8c3 2002 	str.w	r2, [r3, #2]
  index_input += 4;
 800d26e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d272:	3304      	adds	r3, #4
 800d274:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800d278:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d27c:	2218      	movs	r2, #24
 800d27e:	2100      	movs	r1, #0
 800d280:	4618      	mov	r0, r3
 800d282:	f000 fec6 	bl	800e012 <Osal_MemSet>
  rq.ogf = 0x3f;
 800d286:	233f      	movs	r3, #63	@ 0x3f
 800d288:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x088;
 800d28c:	2388      	movs	r3, #136	@ 0x88
 800d28e:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800d292:	f107 0310 	add.w	r3, r7, #16
 800d296:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800d29a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d29e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800d2a2:	f107 030f 	add.w	r3, r7, #15
 800d2a6:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800d2aa:	2301      	movs	r3, #1
 800d2ac:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800d2b0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d2b4:	2100      	movs	r1, #0
 800d2b6:	4618      	mov	r0, r3
 800d2b8:	f001 f934 	bl	800e524 <hci_send_req>
 800d2bc:	4603      	mov	r3, r0
 800d2be:	2b00      	cmp	r3, #0
 800d2c0:	da01      	bge.n	800d2c6 <aci_gap_pass_key_resp+0xba>
    return BLE_STATUS_TIMEOUT;
 800d2c2:	23ff      	movs	r3, #255	@ 0xff
 800d2c4:	e004      	b.n	800d2d0 <aci_gap_pass_key_resp+0xc4>
  return status;
 800d2c6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d2ca:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800d2ce:	781b      	ldrb	r3, [r3, #0]
}
 800d2d0:	4618      	mov	r0, r3
 800d2d2:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800d2d6:	46bd      	mov	sp, r7
 800d2d8:	bd80      	pop	{r7, pc}

0800d2da <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 800d2da:	b590      	push	{r4, r7, lr}
 800d2dc:	b0cd      	sub	sp, #308	@ 0x134
 800d2de:	af00      	add	r7, sp, #0
 800d2e0:	4604      	mov	r4, r0
 800d2e2:	4608      	mov	r0, r1
 800d2e4:	4611      	mov	r1, r2
 800d2e6:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800d2ea:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 800d2ee:	6013      	str	r3, [r2, #0]
 800d2f0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d2f4:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800d2f8:	4622      	mov	r2, r4
 800d2fa:	701a      	strb	r2, [r3, #0]
 800d2fc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d300:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800d304:	4602      	mov	r2, r0
 800d306:	701a      	strb	r2, [r3, #0]
 800d308:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d30c:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 800d310:	460a      	mov	r2, r1
 800d312:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 800d314:	f107 0310 	add.w	r3, r7, #16
 800d318:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800d31c:	f107 0308 	add.w	r3, r7, #8
 800d320:	2207      	movs	r2, #7
 800d322:	2100      	movs	r1, #0
 800d324:	4618      	mov	r0, r3
 800d326:	f000 fe74 	bl	800e012 <Osal_MemSet>
  int index_input = 0;
 800d32a:	2300      	movs	r3, #0
 800d32c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Role = Role;
 800d330:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800d334:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800d338:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800d33c:	7812      	ldrb	r2, [r2, #0]
 800d33e:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800d340:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d344:	3301      	adds	r3, #1
 800d346:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->privacy_enabled = privacy_enabled;
 800d34a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800d34e:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800d352:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800d356:	7812      	ldrb	r2, [r2, #0]
 800d358:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800d35a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d35e:	3301      	adds	r3, #1
 800d360:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->device_name_char_len = device_name_char_len;
 800d364:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800d368:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800d36c:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 800d370:	7812      	ldrb	r2, [r2, #0]
 800d372:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800d374:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d378:	3301      	adds	r3, #1
 800d37a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800d37e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d382:	2218      	movs	r2, #24
 800d384:	2100      	movs	r1, #0
 800d386:	4618      	mov	r0, r3
 800d388:	f000 fe43 	bl	800e012 <Osal_MemSet>
  rq.ogf = 0x3f;
 800d38c:	233f      	movs	r3, #63	@ 0x3f
 800d38e:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x08a;
 800d392:	238a      	movs	r3, #138	@ 0x8a
 800d394:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800d398:	f107 0310 	add.w	r3, r7, #16
 800d39c:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800d3a0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d3a4:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &resp;
 800d3a8:	f107 0308 	add.w	r3, r7, #8
 800d3ac:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = sizeof(resp);
 800d3b0:	2307      	movs	r3, #7
 800d3b2:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800d3b6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d3ba:	2100      	movs	r1, #0
 800d3bc:	4618      	mov	r0, r3
 800d3be:	f001 f8b1 	bl	800e524 <hci_send_req>
 800d3c2:	4603      	mov	r3, r0
 800d3c4:	2b00      	cmp	r3, #0
 800d3c6:	da01      	bge.n	800d3cc <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 800d3c8:	23ff      	movs	r3, #255	@ 0xff
 800d3ca:	e02e      	b.n	800d42a <aci_gap_init+0x150>
  if ( resp.Status )
 800d3cc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d3d0:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800d3d4:	781b      	ldrb	r3, [r3, #0]
 800d3d6:	2b00      	cmp	r3, #0
 800d3d8:	d005      	beq.n	800d3e6 <aci_gap_init+0x10c>
    return resp.Status;
 800d3da:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d3de:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800d3e2:	781b      	ldrb	r3, [r3, #0]
 800d3e4:	e021      	b.n	800d42a <aci_gap_init+0x150>
  *Service_Handle = resp.Service_Handle;
 800d3e6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d3ea:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800d3ee:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800d3f2:	b29a      	uxth	r2, r3
 800d3f4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d3f8:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800d3fc:	681b      	ldr	r3, [r3, #0]
 800d3fe:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 800d400:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d404:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800d408:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800d40c:	b29a      	uxth	r2, r3
 800d40e:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800d412:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 800d414:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d418:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800d41c:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800d420:	b29a      	uxth	r2, r3
 800d422:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800d426:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800d428:	2300      	movs	r3, #0
}
 800d42a:	4618      	mov	r0, r3
 800d42c:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 800d430:	46bd      	mov	sp, r7
 800d432:	bd90      	pop	{r4, r7, pc}

0800d434 <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 800d434:	b580      	push	{r7, lr}
 800d436:	b0cc      	sub	sp, #304	@ 0x130
 800d438:	af00      	add	r7, sp, #0
 800d43a:	4602      	mov	r2, r0
 800d43c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d440:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800d444:	6019      	str	r1, [r3, #0]
 800d446:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d44a:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800d44e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 800d450:	f107 0310 	add.w	r3, r7, #16
 800d454:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800d458:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d45c:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800d460:	2200      	movs	r2, #0
 800d462:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800d464:	2300      	movs	r3, #0
 800d466:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->AdvDataLen = AdvDataLen;
 800d46a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800d46e:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800d472:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800d476:	7812      	ldrb	r2, [r2, #0]
 800d478:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800d47a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d47e:	3301      	adds	r3, #1
 800d480:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 800d484:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800d488:	1c58      	adds	r0, r3, #1
 800d48a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d48e:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800d492:	781a      	ldrb	r2, [r3, #0]
 800d494:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d498:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800d49c:	6819      	ldr	r1, [r3, #0]
 800d49e:	f000 fda8 	bl	800dff2 <Osal_MemCpy>
  index_input += AdvDataLen;
 800d4a2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d4a6:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800d4aa:	781b      	ldrb	r3, [r3, #0]
 800d4ac:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800d4b0:	4413      	add	r3, r2
 800d4b2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800d4b6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d4ba:	2218      	movs	r2, #24
 800d4bc:	2100      	movs	r1, #0
 800d4be:	4618      	mov	r0, r3
 800d4c0:	f000 fda7 	bl	800e012 <Osal_MemSet>
  rq.ogf = 0x3f;
 800d4c4:	233f      	movs	r3, #63	@ 0x3f
 800d4c6:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x08e;
 800d4ca:	238e      	movs	r3, #142	@ 0x8e
 800d4cc:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800d4d0:	f107 0310 	add.w	r3, r7, #16
 800d4d4:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800d4d8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d4dc:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800d4e0:	f107 030f 	add.w	r3, r7, #15
 800d4e4:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800d4e8:	2301      	movs	r3, #1
 800d4ea:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800d4ee:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d4f2:	2100      	movs	r1, #0
 800d4f4:	4618      	mov	r0, r3
 800d4f6:	f001 f815 	bl	800e524 <hci_send_req>
 800d4fa:	4603      	mov	r3, r0
 800d4fc:	2b00      	cmp	r3, #0
 800d4fe:	da01      	bge.n	800d504 <aci_gap_update_adv_data+0xd0>
    return BLE_STATUS_TIMEOUT;
 800d500:	23ff      	movs	r3, #255	@ 0xff
 800d502:	e004      	b.n	800d50e <aci_gap_update_adv_data+0xda>
  return status;
 800d504:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d508:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800d50c:	781b      	ldrb	r3, [r3, #0]
}
 800d50e:	4618      	mov	r0, r3
 800d510:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800d514:	46bd      	mov	sp, r7
 800d516:	bd80      	pop	{r7, pc}

0800d518 <aci_gap_configure_filter_accept_list>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_filter_accept_list( void )
{
 800d518:	b580      	push	{r7, lr}
 800d51a:	b088      	sub	sp, #32
 800d51c:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800d51e:	2300      	movs	r3, #0
 800d520:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800d522:	f107 0308 	add.w	r3, r7, #8
 800d526:	2218      	movs	r2, #24
 800d528:	2100      	movs	r1, #0
 800d52a:	4618      	mov	r0, r3
 800d52c:	f000 fd71 	bl	800e012 <Osal_MemSet>
  rq.ogf = 0x3f;
 800d530:	233f      	movs	r3, #63	@ 0x3f
 800d532:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 800d534:	2392      	movs	r3, #146	@ 0x92
 800d536:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800d538:	1dfb      	adds	r3, r7, #7
 800d53a:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800d53c:	2301      	movs	r3, #1
 800d53e:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800d540:	f107 0308 	add.w	r3, r7, #8
 800d544:	2100      	movs	r1, #0
 800d546:	4618      	mov	r0, r3
 800d548:	f000 ffec 	bl	800e524 <hci_send_req>
 800d54c:	4603      	mov	r3, r0
 800d54e:	2b00      	cmp	r3, #0
 800d550:	da01      	bge.n	800d556 <aci_gap_configure_filter_accept_list+0x3e>
    return BLE_STATUS_TIMEOUT;
 800d552:	23ff      	movs	r3, #255	@ 0xff
 800d554:	e000      	b.n	800d558 <aci_gap_configure_filter_accept_list+0x40>
  return status;
 800d556:	79fb      	ldrb	r3, [r7, #7]
}
 800d558:	4618      	mov	r0, r3
 800d55a:	3720      	adds	r7, #32
 800d55c:	46bd      	mov	sp, r7
 800d55e:	bd80      	pop	{r7, pc}

0800d560 <aci_gap_numeric_comparison_value_confirm_yesno>:
  return status;
}

tBleStatus aci_gap_numeric_comparison_value_confirm_yesno( uint16_t Connection_Handle,
                                                           uint8_t Confirm_Yes_No )
{
 800d560:	b580      	push	{r7, lr}
 800d562:	b0cc      	sub	sp, #304	@ 0x130
 800d564:	af00      	add	r7, sp, #0
 800d566:	4602      	mov	r2, r0
 800d568:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d56c:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800d570:	801a      	strh	r2, [r3, #0]
 800d572:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d576:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 800d57a:	460a      	mov	r2, r1
 800d57c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_numeric_comparison_value_confirm_yesno_cp0 *cp0 = (aci_gap_numeric_comparison_value_confirm_yesno_cp0*)(cmd_buffer);
 800d57e:	f107 0310 	add.w	r3, r7, #16
 800d582:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800d586:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d58a:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800d58e:	2200      	movs	r2, #0
 800d590:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800d592:	2300      	movs	r3, #0
 800d594:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 800d598:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800d59c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800d5a0:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800d5a4:	8812      	ldrh	r2, [r2, #0]
 800d5a6:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800d5a8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d5ac:	3302      	adds	r3, #2
 800d5ae:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Confirm_Yes_No = Confirm_Yes_No;
 800d5b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800d5b6:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800d5ba:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 800d5be:	7812      	ldrb	r2, [r2, #0]
 800d5c0:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800d5c2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d5c6:	3301      	adds	r3, #1
 800d5c8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800d5cc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d5d0:	2218      	movs	r2, #24
 800d5d2:	2100      	movs	r1, #0
 800d5d4:	4618      	mov	r0, r3
 800d5d6:	f000 fd1c 	bl	800e012 <Osal_MemSet>
  rq.ogf = 0x3f;
 800d5da:	233f      	movs	r3, #63	@ 0x3f
 800d5dc:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x0a5;
 800d5e0:	23a5      	movs	r3, #165	@ 0xa5
 800d5e2:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800d5e6:	f107 0310 	add.w	r3, r7, #16
 800d5ea:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800d5ee:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d5f2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800d5f6:	f107 030f 	add.w	r3, r7, #15
 800d5fa:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800d5fe:	2301      	movs	r3, #1
 800d600:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800d604:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d608:	2100      	movs	r1, #0
 800d60a:	4618      	mov	r0, r3
 800d60c:	f000 ff8a 	bl	800e524 <hci_send_req>
 800d610:	4603      	mov	r3, r0
 800d612:	2b00      	cmp	r3, #0
 800d614:	da01      	bge.n	800d61a <aci_gap_numeric_comparison_value_confirm_yesno+0xba>
    return BLE_STATUS_TIMEOUT;
 800d616:	23ff      	movs	r3, #255	@ 0xff
 800d618:	e004      	b.n	800d624 <aci_gap_numeric_comparison_value_confirm_yesno+0xc4>
  return status;
 800d61a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d61e:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800d622:	781b      	ldrb	r3, [r3, #0]
}
 800d624:	4618      	mov	r0, r3
 800d626:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800d62a:	46bd      	mov	sp, r7
 800d62c:	bd80      	pop	{r7, pc}

0800d62e <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 800d62e:	b580      	push	{r7, lr}
 800d630:	b088      	sub	sp, #32
 800d632:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800d634:	2300      	movs	r3, #0
 800d636:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800d638:	f107 0308 	add.w	r3, r7, #8
 800d63c:	2218      	movs	r2, #24
 800d63e:	2100      	movs	r1, #0
 800d640:	4618      	mov	r0, r3
 800d642:	f000 fce6 	bl	800e012 <Osal_MemSet>
  rq.ogf = 0x3f;
 800d646:	233f      	movs	r3, #63	@ 0x3f
 800d648:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 800d64a:	f240 1301 	movw	r3, #257	@ 0x101
 800d64e:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800d650:	1dfb      	adds	r3, r7, #7
 800d652:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800d654:	2301      	movs	r3, #1
 800d656:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800d658:	f107 0308 	add.w	r3, r7, #8
 800d65c:	2100      	movs	r1, #0
 800d65e:	4618      	mov	r0, r3
 800d660:	f000 ff60 	bl	800e524 <hci_send_req>
 800d664:	4603      	mov	r3, r0
 800d666:	2b00      	cmp	r3, #0
 800d668:	da01      	bge.n	800d66e <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 800d66a:	23ff      	movs	r3, #255	@ 0xff
 800d66c:	e000      	b.n	800d670 <aci_gatt_init+0x42>
  return status;
 800d66e:	79fb      	ldrb	r3, [r7, #7]
}
 800d670:	4618      	mov	r0, r3
 800d672:	3720      	adds	r7, #32
 800d674:	46bd      	mov	sp, r7
 800d676:	bd80      	pop	{r7, pc}

0800d678 <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 800d678:	b590      	push	{r4, r7, lr}
 800d67a:	b0cf      	sub	sp, #316	@ 0x13c
 800d67c:	af00      	add	r7, sp, #0
 800d67e:	4604      	mov	r4, r0
 800d680:	f507 709c 	add.w	r0, r7, #312	@ 0x138
 800d684:	f5a0 709c 	sub.w	r0, r0, #312	@ 0x138
 800d688:	6001      	str	r1, [r0, #0]
 800d68a:	4610      	mov	r0, r2
 800d68c:	4619      	mov	r1, r3
 800d68e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800d692:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 800d696:	4622      	mov	r2, r4
 800d698:	701a      	strb	r2, [r3, #0]
 800d69a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800d69e:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 800d6a2:	4602      	mov	r2, r0
 800d6a4:	701a      	strb	r2, [r3, #0]
 800d6a6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800d6aa:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 800d6ae:	460a      	mov	r2, r1
 800d6b0:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 800d6b2:	f107 0310 	add.w	r3, r7, #16
 800d6b6:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 800d6ba:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800d6be:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 800d6c2:	781b      	ldrb	r3, [r3, #0]
 800d6c4:	2b01      	cmp	r3, #1
 800d6c6:	d00a      	beq.n	800d6de <aci_gatt_add_service+0x66>
 800d6c8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800d6cc:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 800d6d0:	781b      	ldrb	r3, [r3, #0]
 800d6d2:	2b02      	cmp	r3, #2
 800d6d4:	d101      	bne.n	800d6da <aci_gatt_add_service+0x62>
 800d6d6:	2311      	movs	r3, #17
 800d6d8:	e002      	b.n	800d6e0 <aci_gatt_add_service+0x68>
 800d6da:	2301      	movs	r3, #1
 800d6dc:	e000      	b.n	800d6e0 <aci_gatt_add_service+0x68>
 800d6de:	2303      	movs	r3, #3
 800d6e0:	f107 0210 	add.w	r2, r7, #16
 800d6e4:	4413      	add	r3, r2
 800d6e6:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800d6ea:	f107 030c 	add.w	r3, r7, #12
 800d6ee:	2203      	movs	r2, #3
 800d6f0:	2100      	movs	r1, #0
 800d6f2:	4618      	mov	r0, r3
 800d6f4:	f000 fc8d 	bl	800e012 <Osal_MemSet>
  int index_input = 0;
 800d6f8:	2300      	movs	r3, #0
 800d6fa:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 800d6fe:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800d702:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800d706:	f2a2 1231 	subw	r2, r2, #305	@ 0x131
 800d70a:	7812      	ldrb	r2, [r2, #0]
 800d70c:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800d70e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d712:	3301      	adds	r3, #1
 800d714:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 800d718:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800d71c:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 800d720:	781b      	ldrb	r3, [r3, #0]
 800d722:	2b01      	cmp	r3, #1
 800d724:	d002      	beq.n	800d72c <aci_gatt_add_service+0xb4>
 800d726:	2b02      	cmp	r3, #2
 800d728:	d004      	beq.n	800d734 <aci_gatt_add_service+0xbc>
 800d72a:	e007      	b.n	800d73c <aci_gatt_add_service+0xc4>
    {
      case 1: size = 2; break;
 800d72c:	2302      	movs	r3, #2
 800d72e:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
 800d732:	e005      	b.n	800d740 <aci_gatt_add_service+0xc8>
      case 2: size = 16; break;
 800d734:	2310      	movs	r3, #16
 800d736:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
 800d73a:	e001      	b.n	800d740 <aci_gatt_add_service+0xc8>
      default: return BLE_STATUS_ERROR;
 800d73c:	2397      	movs	r3, #151	@ 0x97
 800d73e:	e06c      	b.n	800d81a <aci_gatt_add_service+0x1a2>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 800d740:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800d744:	1c58      	adds	r0, r3, #1
 800d746:	f897 2137 	ldrb.w	r2, [r7, #311]	@ 0x137
 800d74a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800d74e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800d752:	6819      	ldr	r1, [r3, #0]
 800d754:	f000 fc4d 	bl	800dff2 <Osal_MemCpy>
    index_input += size;
 800d758:	f897 3137 	ldrb.w	r3, [r7, #311]	@ 0x137
 800d75c:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800d760:	4413      	add	r3, r2
 800d762:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Service_Type = Service_Type;
 800d766:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800d76a:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800d76e:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 800d772:	7812      	ldrb	r2, [r2, #0]
 800d774:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 800d776:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d77a:	3301      	adds	r3, #1
 800d77c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 800d780:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800d784:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800d788:	f2a2 1233 	subw	r2, r2, #307	@ 0x133
 800d78c:	7812      	ldrb	r2, [r2, #0]
 800d78e:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 800d790:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d794:	3301      	adds	r3, #1
 800d796:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800d79a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d79e:	2218      	movs	r2, #24
 800d7a0:	2100      	movs	r1, #0
 800d7a2:	4618      	mov	r0, r3
 800d7a4:	f000 fc35 	bl	800e012 <Osal_MemSet>
  rq.ogf = 0x3f;
 800d7a8:	233f      	movs	r3, #63	@ 0x3f
 800d7aa:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x102;
 800d7ae:	f44f 7381 	mov.w	r3, #258	@ 0x102
 800d7b2:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800d7b6:	f107 0310 	add.w	r3, r7, #16
 800d7ba:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800d7be:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d7c2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &resp;
 800d7c6:	f107 030c 	add.w	r3, r7, #12
 800d7ca:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = sizeof(resp);
 800d7ce:	2303      	movs	r3, #3
 800d7d0:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800d7d4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d7d8:	2100      	movs	r1, #0
 800d7da:	4618      	mov	r0, r3
 800d7dc:	f000 fea2 	bl	800e524 <hci_send_req>
 800d7e0:	4603      	mov	r3, r0
 800d7e2:	2b00      	cmp	r3, #0
 800d7e4:	da01      	bge.n	800d7ea <aci_gatt_add_service+0x172>
    return BLE_STATUS_TIMEOUT;
 800d7e6:	23ff      	movs	r3, #255	@ 0xff
 800d7e8:	e017      	b.n	800d81a <aci_gatt_add_service+0x1a2>
  if ( resp.Status )
 800d7ea:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800d7ee:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800d7f2:	781b      	ldrb	r3, [r3, #0]
 800d7f4:	2b00      	cmp	r3, #0
 800d7f6:	d005      	beq.n	800d804 <aci_gatt_add_service+0x18c>
    return resp.Status;
 800d7f8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800d7fc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800d800:	781b      	ldrb	r3, [r3, #0]
 800d802:	e00a      	b.n	800d81a <aci_gatt_add_service+0x1a2>
  *Service_Handle = resp.Service_Handle;
 800d804:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800d808:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800d80c:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800d810:	b29a      	uxth	r2, r3
 800d812:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800d816:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800d818:	2300      	movs	r3, #0
}
 800d81a:	4618      	mov	r0, r3
 800d81c:	f507 779e 	add.w	r7, r7, #316	@ 0x13c
 800d820:	46bd      	mov	sp, r7
 800d822:	bd90      	pop	{r4, r7, pc}

0800d824 <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 800d824:	b590      	push	{r4, r7, lr}
 800d826:	b0d1      	sub	sp, #324	@ 0x144
 800d828:	af00      	add	r7, sp, #0
 800d82a:	4604      	mov	r4, r0
 800d82c:	4608      	mov	r0, r1
 800d82e:	f507 71a0 	add.w	r1, r7, #320	@ 0x140
 800d832:	f5a1 719c 	sub.w	r1, r1, #312	@ 0x138
 800d836:	600a      	str	r2, [r1, #0]
 800d838:	4619      	mov	r1, r3
 800d83a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800d83e:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 800d842:	4622      	mov	r2, r4
 800d844:	801a      	strh	r2, [r3, #0]
 800d846:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800d84a:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 800d84e:	4602      	mov	r2, r0
 800d850:	701a      	strb	r2, [r3, #0]
 800d852:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800d856:	f5a3 739d 	sub.w	r3, r3, #314	@ 0x13a
 800d85a:	460a      	mov	r2, r1
 800d85c:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 800d85e:	f107 0318 	add.w	r3, r7, #24
 800d862:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 800d866:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800d86a:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 800d86e:	781b      	ldrb	r3, [r3, #0]
 800d870:	2b01      	cmp	r3, #1
 800d872:	d00a      	beq.n	800d88a <aci_gatt_add_char+0x66>
 800d874:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800d878:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 800d87c:	781b      	ldrb	r3, [r3, #0]
 800d87e:	2b02      	cmp	r3, #2
 800d880:	d101      	bne.n	800d886 <aci_gatt_add_char+0x62>
 800d882:	2313      	movs	r3, #19
 800d884:	e002      	b.n	800d88c <aci_gatt_add_char+0x68>
 800d886:	2303      	movs	r3, #3
 800d888:	e000      	b.n	800d88c <aci_gatt_add_char+0x68>
 800d88a:	2305      	movs	r3, #5
 800d88c:	f107 0218 	add.w	r2, r7, #24
 800d890:	4413      	add	r3, r2
 800d892:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800d896:	f107 0314 	add.w	r3, r7, #20
 800d89a:	2203      	movs	r2, #3
 800d89c:	2100      	movs	r1, #0
 800d89e:	4618      	mov	r0, r3
 800d8a0:	f000 fbb7 	bl	800e012 <Osal_MemSet>
  int index_input = 0;
 800d8a4:	2300      	movs	r3, #0
 800d8a6:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Service_Handle = Service_Handle;
 800d8aa:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800d8ae:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 800d8b2:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 800d8b6:	8812      	ldrh	r2, [r2, #0]
 800d8b8:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800d8ba:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800d8be:	3302      	adds	r3, #2
 800d8c0:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 800d8c4:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800d8c8:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 800d8cc:	f2a2 1233 	subw	r2, r2, #307	@ 0x133
 800d8d0:	7812      	ldrb	r2, [r2, #0]
 800d8d2:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800d8d4:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800d8d8:	3301      	adds	r3, #1
 800d8da:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 800d8de:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800d8e2:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 800d8e6:	781b      	ldrb	r3, [r3, #0]
 800d8e8:	2b01      	cmp	r3, #1
 800d8ea:	d002      	beq.n	800d8f2 <aci_gatt_add_char+0xce>
 800d8ec:	2b02      	cmp	r3, #2
 800d8ee:	d004      	beq.n	800d8fa <aci_gatt_add_char+0xd6>
 800d8f0:	e007      	b.n	800d902 <aci_gatt_add_char+0xde>
    {
      case 1: size = 2; break;
 800d8f2:	2302      	movs	r3, #2
 800d8f4:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
 800d8f8:	e005      	b.n	800d906 <aci_gatt_add_char+0xe2>
      case 2: size = 16; break;
 800d8fa:	2310      	movs	r3, #16
 800d8fc:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
 800d900:	e001      	b.n	800d906 <aci_gatt_add_char+0xe2>
      default: return BLE_STATUS_ERROR;
 800d902:	2397      	movs	r3, #151	@ 0x97
 800d904:	e091      	b.n	800da2a <aci_gatt_add_char+0x206>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 800d906:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800d90a:	1cd8      	adds	r0, r3, #3
 800d90c:	f897 213f 	ldrb.w	r2, [r7, #319]	@ 0x13f
 800d910:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800d914:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800d918:	6819      	ldr	r1, [r3, #0]
 800d91a:	f000 fb6a 	bl	800dff2 <Osal_MemCpy>
    index_input += size;
 800d91e:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 800d922:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 800d926:	4413      	add	r3, r2
 800d928:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 800d92c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800d930:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 800d934:	f5a2 729d 	sub.w	r2, r2, #314	@ 0x13a
 800d938:	8812      	ldrh	r2, [r2, #0]
 800d93a:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 800d93c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800d940:	3302      	adds	r3, #2
 800d942:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Char_Properties = Char_Properties;
 800d946:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800d94a:	f897 2150 	ldrb.w	r2, [r7, #336]	@ 0x150
 800d94e:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 800d950:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800d954:	3301      	adds	r3, #1
 800d956:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 800d95a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800d95e:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 800d962:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 800d964:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800d968:	3301      	adds	r3, #1
 800d96a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 800d96e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800d972:	f897 2158 	ldrb.w	r2, [r7, #344]	@ 0x158
 800d976:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 800d978:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800d97c:	3301      	adds	r3, #1
 800d97e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 800d982:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800d986:	f897 215c 	ldrb.w	r2, [r7, #348]	@ 0x15c
 800d98a:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 800d98c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800d990:	3301      	adds	r3, #1
 800d992:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Is_Variable = Is_Variable;
 800d996:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800d99a:	f897 2160 	ldrb.w	r2, [r7, #352]	@ 0x160
 800d99e:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 800d9a0:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800d9a4:	3301      	adds	r3, #1
 800d9a6:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800d9aa:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800d9ae:	2218      	movs	r2, #24
 800d9b0:	2100      	movs	r1, #0
 800d9b2:	4618      	mov	r0, r3
 800d9b4:	f000 fb2d 	bl	800e012 <Osal_MemSet>
  rq.ogf = 0x3f;
 800d9b8:	233f      	movs	r3, #63	@ 0x3f
 800d9ba:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
  rq.ocf = 0x104;
 800d9be:	f44f 7382 	mov.w	r3, #260	@ 0x104
 800d9c2:	f8a7 311a 	strh.w	r3, [r7, #282]	@ 0x11a
  rq.cparam = cmd_buffer;
 800d9c6:	f107 0318 	add.w	r3, r7, #24
 800d9ca:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.clen = index_input;
 800d9ce:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800d9d2:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  rq.rparam = &resp;
 800d9d6:	f107 0314 	add.w	r3, r7, #20
 800d9da:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  rq.rlen = sizeof(resp);
 800d9de:	2303      	movs	r3, #3
 800d9e0:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 800d9e4:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800d9e8:	2100      	movs	r1, #0
 800d9ea:	4618      	mov	r0, r3
 800d9ec:	f000 fd9a 	bl	800e524 <hci_send_req>
 800d9f0:	4603      	mov	r3, r0
 800d9f2:	2b00      	cmp	r3, #0
 800d9f4:	da01      	bge.n	800d9fa <aci_gatt_add_char+0x1d6>
    return BLE_STATUS_TIMEOUT;
 800d9f6:	23ff      	movs	r3, #255	@ 0xff
 800d9f8:	e017      	b.n	800da2a <aci_gatt_add_char+0x206>
  if ( resp.Status )
 800d9fa:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800d9fe:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800da02:	781b      	ldrb	r3, [r3, #0]
 800da04:	2b00      	cmp	r3, #0
 800da06:	d005      	beq.n	800da14 <aci_gatt_add_char+0x1f0>
    return resp.Status;
 800da08:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800da0c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800da10:	781b      	ldrb	r3, [r3, #0]
 800da12:	e00a      	b.n	800da2a <aci_gatt_add_char+0x206>
  *Char_Handle = resp.Char_Handle;
 800da14:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800da18:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800da1c:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800da20:	b29a      	uxth	r2, r3
 800da22:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 800da26:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800da28:	2300      	movs	r3, #0
}
 800da2a:	4618      	mov	r0, r3
 800da2c:	f507 77a2 	add.w	r7, r7, #324	@ 0x144
 800da30:	46bd      	mov	sp, r7
 800da32:	bd90      	pop	{r4, r7, pc}

0800da34 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 800da34:	b5b0      	push	{r4, r5, r7, lr}
 800da36:	b0cc      	sub	sp, #304	@ 0x130
 800da38:	af00      	add	r7, sp, #0
 800da3a:	4605      	mov	r5, r0
 800da3c:	460c      	mov	r4, r1
 800da3e:	4610      	mov	r0, r2
 800da40:	4619      	mov	r1, r3
 800da42:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800da46:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800da4a:	462a      	mov	r2, r5
 800da4c:	801a      	strh	r2, [r3, #0]
 800da4e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800da52:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800da56:	4622      	mov	r2, r4
 800da58:	801a      	strh	r2, [r3, #0]
 800da5a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800da5e:	f2a3 132d 	subw	r3, r3, #301	@ 0x12d
 800da62:	4602      	mov	r2, r0
 800da64:	701a      	strb	r2, [r3, #0]
 800da66:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800da6a:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 800da6e:	460a      	mov	r2, r1
 800da70:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 800da72:	f107 0310 	add.w	r3, r7, #16
 800da76:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800da7a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800da7e:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800da82:	2200      	movs	r2, #0
 800da84:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800da86:	2300      	movs	r3, #0
 800da88:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Service_Handle = Service_Handle;
 800da8c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800da90:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800da94:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800da98:	8812      	ldrh	r2, [r2, #0]
 800da9a:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800da9c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800daa0:	3302      	adds	r3, #2
 800daa2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Char_Handle = Char_Handle;
 800daa6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800daaa:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800daae:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 800dab2:	8812      	ldrh	r2, [r2, #0]
 800dab4:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 800dab6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800daba:	3302      	adds	r3, #2
 800dabc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Val_Offset = Val_Offset;
 800dac0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800dac4:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800dac8:	f2a2 122d 	subw	r2, r2, #301	@ 0x12d
 800dacc:	7812      	ldrb	r2, [r2, #0]
 800dace:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800dad0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800dad4:	3301      	adds	r3, #1
 800dad6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 800dada:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800dade:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800dae2:	f5a2 7297 	sub.w	r2, r2, #302	@ 0x12e
 800dae6:	7812      	ldrb	r2, [r2, #0]
 800dae8:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800daea:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800daee:	3301      	adds	r3, #1
 800daf0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 800daf4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800daf8:	1d98      	adds	r0, r3, #6
 800dafa:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800dafe:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 800db02:	781b      	ldrb	r3, [r3, #0]
 800db04:	461a      	mov	r2, r3
 800db06:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 800db0a:	f000 fa72 	bl	800dff2 <Osal_MemCpy>
  index_input += Char_Value_Length;
 800db0e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800db12:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 800db16:	781b      	ldrb	r3, [r3, #0]
 800db18:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800db1c:	4413      	add	r3, r2
 800db1e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800db22:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800db26:	2218      	movs	r2, #24
 800db28:	2100      	movs	r1, #0
 800db2a:	4618      	mov	r0, r3
 800db2c:	f000 fa71 	bl	800e012 <Osal_MemSet>
  rq.ogf = 0x3f;
 800db30:	233f      	movs	r3, #63	@ 0x3f
 800db32:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x106;
 800db36:	f44f 7383 	mov.w	r3, #262	@ 0x106
 800db3a:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800db3e:	f107 0310 	add.w	r3, r7, #16
 800db42:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800db46:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800db4a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800db4e:	f107 030f 	add.w	r3, r7, #15
 800db52:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800db56:	2301      	movs	r3, #1
 800db58:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800db5c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800db60:	2100      	movs	r1, #0
 800db62:	4618      	mov	r0, r3
 800db64:	f000 fcde 	bl	800e524 <hci_send_req>
 800db68:	4603      	mov	r3, r0
 800db6a:	2b00      	cmp	r3, #0
 800db6c:	da01      	bge.n	800db72 <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 800db6e:	23ff      	movs	r3, #255	@ 0xff
 800db70:	e004      	b.n	800db7c <aci_gatt_update_char_value+0x148>
  return status;
 800db72:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800db76:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800db7a:	781b      	ldrb	r3, [r3, #0]
}
 800db7c:	4618      	mov	r0, r3
 800db7e:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800db82:	46bd      	mov	sp, r7
 800db84:	bdb0      	pop	{r4, r5, r7, pc}

0800db86 <aci_gatt_confirm_indication>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gatt_confirm_indication( uint16_t Connection_Handle )
{
 800db86:	b580      	push	{r7, lr}
 800db88:	b0cc      	sub	sp, #304	@ 0x130
 800db8a:	af00      	add	r7, sp, #0
 800db8c:	4602      	mov	r2, r0
 800db8e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800db92:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800db96:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_confirm_indication_cp0 *cp0 = (aci_gatt_confirm_indication_cp0*)(cmd_buffer);
 800db98:	f107 0310 	add.w	r3, r7, #16
 800db9c:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800dba0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800dba4:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800dba8:	2200      	movs	r2, #0
 800dbaa:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800dbac:	2300      	movs	r3, #0
 800dbae:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 800dbb2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800dbb6:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800dbba:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800dbbe:	8812      	ldrh	r2, [r2, #0]
 800dbc0:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800dbc2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800dbc6:	3302      	adds	r3, #2
 800dbc8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800dbcc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800dbd0:	2218      	movs	r2, #24
 800dbd2:	2100      	movs	r1, #0
 800dbd4:	4618      	mov	r0, r3
 800dbd6:	f000 fa1c 	bl	800e012 <Osal_MemSet>
  rq.ogf = 0x3f;
 800dbda:	233f      	movs	r3, #63	@ 0x3f
 800dbdc:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x125;
 800dbe0:	f240 1325 	movw	r3, #293	@ 0x125
 800dbe4:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800dbe8:	f107 0310 	add.w	r3, r7, #16
 800dbec:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800dbf0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800dbf4:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800dbf8:	f107 030f 	add.w	r3, r7, #15
 800dbfc:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800dc00:	2301      	movs	r3, #1
 800dc02:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800dc06:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800dc0a:	2100      	movs	r1, #0
 800dc0c:	4618      	mov	r0, r3
 800dc0e:	f000 fc89 	bl	800e524 <hci_send_req>
 800dc12:	4603      	mov	r3, r0
 800dc14:	2b00      	cmp	r3, #0
 800dc16:	da01      	bge.n	800dc1c <aci_gatt_confirm_indication+0x96>
    return BLE_STATUS_TIMEOUT;
 800dc18:	23ff      	movs	r3, #255	@ 0xff
 800dc1a:	e004      	b.n	800dc26 <aci_gatt_confirm_indication+0xa0>
  return status;
 800dc1c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800dc20:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800dc24:	781b      	ldrb	r3, [r3, #0]
}
 800dc26:	4618      	mov	r0, r3
 800dc28:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800dc2c:	46bd      	mov	sp, r7
 800dc2e:	bd80      	pop	{r7, pc}

0800dc30 <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 800dc30:	b580      	push	{r7, lr}
 800dc32:	b0cc      	sub	sp, #304	@ 0x130
 800dc34:	af00      	add	r7, sp, #0
 800dc36:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800dc3a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800dc3e:	601a      	str	r2, [r3, #0]
 800dc40:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800dc44:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800dc48:	4602      	mov	r2, r0
 800dc4a:	701a      	strb	r2, [r3, #0]
 800dc4c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800dc50:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800dc54:	460a      	mov	r2, r1
 800dc56:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 800dc58:	f107 0310 	add.w	r3, r7, #16
 800dc5c:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800dc60:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800dc64:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800dc68:	2200      	movs	r2, #0
 800dc6a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800dc6c:	2300      	movs	r3, #0
 800dc6e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Offset = Offset;
 800dc72:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800dc76:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800dc7a:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800dc7e:	7812      	ldrb	r2, [r2, #0]
 800dc80:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800dc82:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800dc86:	3301      	adds	r3, #1
 800dc88:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Length = Length;
 800dc8c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800dc90:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800dc94:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800dc98:	7812      	ldrb	r2, [r2, #0]
 800dc9a:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800dc9c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800dca0:	3301      	adds	r3, #1
 800dca2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 800dca6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800dcaa:	1c98      	adds	r0, r3, #2
 800dcac:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800dcb0:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800dcb4:	781a      	ldrb	r2, [r3, #0]
 800dcb6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800dcba:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800dcbe:	6819      	ldr	r1, [r3, #0]
 800dcc0:	f000 f997 	bl	800dff2 <Osal_MemCpy>
  index_input += Length;
 800dcc4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800dcc8:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800dccc:	781b      	ldrb	r3, [r3, #0]
 800dcce:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800dcd2:	4413      	add	r3, r2
 800dcd4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800dcd8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800dcdc:	2218      	movs	r2, #24
 800dcde:	2100      	movs	r1, #0
 800dce0:	4618      	mov	r0, r3
 800dce2:	f000 f996 	bl	800e012 <Osal_MemSet>
  rq.ogf = 0x3f;
 800dce6:	233f      	movs	r3, #63	@ 0x3f
 800dce8:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x00c;
 800dcec:	230c      	movs	r3, #12
 800dcee:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800dcf2:	f107 0310 	add.w	r3, r7, #16
 800dcf6:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800dcfa:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800dcfe:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800dd02:	f107 030f 	add.w	r3, r7, #15
 800dd06:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800dd0a:	2301      	movs	r3, #1
 800dd0c:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800dd10:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800dd14:	2100      	movs	r1, #0
 800dd16:	4618      	mov	r0, r3
 800dd18:	f000 fc04 	bl	800e524 <hci_send_req>
 800dd1c:	4603      	mov	r3, r0
 800dd1e:	2b00      	cmp	r3, #0
 800dd20:	da01      	bge.n	800dd26 <aci_hal_write_config_data+0xf6>
    return BLE_STATUS_TIMEOUT;
 800dd22:	23ff      	movs	r3, #255	@ 0xff
 800dd24:	e004      	b.n	800dd30 <aci_hal_write_config_data+0x100>
  return status;
 800dd26:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800dd2a:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800dd2e:	781b      	ldrb	r3, [r3, #0]
}
 800dd30:	4618      	mov	r0, r3
 800dd32:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800dd36:	46bd      	mov	sp, r7
 800dd38:	bd80      	pop	{r7, pc}

0800dd3a <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 800dd3a:	b580      	push	{r7, lr}
 800dd3c:	b0cc      	sub	sp, #304	@ 0x130
 800dd3e:	af00      	add	r7, sp, #0
 800dd40:	4602      	mov	r2, r0
 800dd42:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800dd46:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800dd4a:	701a      	strb	r2, [r3, #0]
 800dd4c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800dd50:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800dd54:	460a      	mov	r2, r1
 800dd56:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 800dd58:	f107 0310 	add.w	r3, r7, #16
 800dd5c:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800dd60:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800dd64:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800dd68:	2200      	movs	r2, #0
 800dd6a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800dd6c:	2300      	movs	r3, #0
 800dd6e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->En_High_Power = En_High_Power;
 800dd72:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800dd76:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800dd7a:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800dd7e:	7812      	ldrb	r2, [r2, #0]
 800dd80:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800dd82:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800dd86:	3301      	adds	r3, #1
 800dd88:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->PA_Level = PA_Level;
 800dd8c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800dd90:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800dd94:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800dd98:	7812      	ldrb	r2, [r2, #0]
 800dd9a:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800dd9c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800dda0:	3301      	adds	r3, #1
 800dda2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800dda6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ddaa:	2218      	movs	r2, #24
 800ddac:	2100      	movs	r1, #0
 800ddae:	4618      	mov	r0, r3
 800ddb0:	f000 f92f 	bl	800e012 <Osal_MemSet>
  rq.ogf = 0x3f;
 800ddb4:	233f      	movs	r3, #63	@ 0x3f
 800ddb6:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x00f;
 800ddba:	230f      	movs	r3, #15
 800ddbc:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800ddc0:	f107 0310 	add.w	r3, r7, #16
 800ddc4:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800ddc8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800ddcc:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800ddd0:	f107 030f 	add.w	r3, r7, #15
 800ddd4:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800ddd8:	2301      	movs	r3, #1
 800ddda:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800ddde:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800dde2:	2100      	movs	r1, #0
 800dde4:	4618      	mov	r0, r3
 800dde6:	f000 fb9d 	bl	800e524 <hci_send_req>
 800ddea:	4603      	mov	r3, r0
 800ddec:	2b00      	cmp	r3, #0
 800ddee:	da01      	bge.n	800ddf4 <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 800ddf0:	23ff      	movs	r3, #255	@ 0xff
 800ddf2:	e004      	b.n	800ddfe <aci_hal_set_tx_power_level+0xc4>
  return status;
 800ddf4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800ddf8:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800ddfc:	781b      	ldrb	r3, [r3, #0]
}
 800ddfe:	4618      	mov	r0, r3
 800de00:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800de04:	46bd      	mov	sp, r7
 800de06:	bd80      	pop	{r7, pc}

0800de08 <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy( (void*)Link_Connection_Handle, (const void*)resp.Link_Connection_Handle, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
 800de08:	b580      	push	{r7, lr}
 800de0a:	b0cc      	sub	sp, #304	@ 0x130
 800de0c:	af00      	add	r7, sp, #0
 800de0e:	4602      	mov	r2, r0
 800de10:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800de14:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800de18:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 800de1a:	f107 0310 	add.w	r3, r7, #16
 800de1e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800de22:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800de26:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800de2a:	2200      	movs	r2, #0
 800de2c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800de2e:	2300      	movs	r3, #0
 800de30:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 800de34:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800de38:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800de3c:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800de40:	8812      	ldrh	r2, [r2, #0]
 800de42:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800de44:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800de48:	3302      	adds	r3, #2
 800de4a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800de4e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800de52:	2218      	movs	r2, #24
 800de54:	2100      	movs	r1, #0
 800de56:	4618      	mov	r0, r3
 800de58:	f000 f8db 	bl	800e012 <Osal_MemSet>
  rq.ogf = 0x3f;
 800de5c:	233f      	movs	r3, #63	@ 0x3f
 800de5e:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x018;
 800de62:	2318      	movs	r3, #24
 800de64:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800de68:	f107 0310 	add.w	r3, r7, #16
 800de6c:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800de70:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800de74:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800de78:	f107 030f 	add.w	r3, r7, #15
 800de7c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800de80:	2301      	movs	r3, #1
 800de82:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800de86:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800de8a:	2100      	movs	r1, #0
 800de8c:	4618      	mov	r0, r3
 800de8e:	f000 fb49 	bl	800e524 <hci_send_req>
 800de92:	4603      	mov	r3, r0
 800de94:	2b00      	cmp	r3, #0
 800de96:	da01      	bge.n	800de9c <aci_hal_set_radio_activity_mask+0x94>
    return BLE_STATUS_TIMEOUT;
 800de98:	23ff      	movs	r3, #255	@ 0xff
 800de9a:	e004      	b.n	800dea6 <aci_hal_set_radio_activity_mask+0x9e>
  return status;
 800de9c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800dea0:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800dea4:	781b      	ldrb	r3, [r3, #0]
}
 800dea6:	4618      	mov	r0, r3
 800dea8:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800deac:	46bd      	mov	sp, r7
 800deae:	bd80      	pop	{r7, pc}

0800deb0 <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 800deb0:	b580      	push	{r7, lr}
 800deb2:	b088      	sub	sp, #32
 800deb4:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800deb6:	2300      	movs	r3, #0
 800deb8:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800deba:	f107 0308 	add.w	r3, r7, #8
 800debe:	2218      	movs	r2, #24
 800dec0:	2100      	movs	r1, #0
 800dec2:	4618      	mov	r0, r3
 800dec4:	f000 f8a5 	bl	800e012 <Osal_MemSet>
  rq.ogf = 0x03;
 800dec8:	2303      	movs	r3, #3
 800deca:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 800decc:	2303      	movs	r3, #3
 800dece:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800ded0:	1dfb      	adds	r3, r7, #7
 800ded2:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800ded4:	2301      	movs	r3, #1
 800ded6:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800ded8:	f107 0308 	add.w	r3, r7, #8
 800dedc:	2100      	movs	r1, #0
 800dede:	4618      	mov	r0, r3
 800dee0:	f000 fb20 	bl	800e524 <hci_send_req>
 800dee4:	4603      	mov	r3, r0
 800dee6:	2b00      	cmp	r3, #0
 800dee8:	da01      	bge.n	800deee <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 800deea:	23ff      	movs	r3, #255	@ 0xff
 800deec:	e000      	b.n	800def0 <hci_reset+0x40>
  return status;
 800deee:	79fb      	ldrb	r3, [r7, #7]
}
 800def0:	4618      	mov	r0, r3
 800def2:	3720      	adds	r7, #32
 800def4:	46bd      	mov	sp, r7
 800def6:	bd80      	pop	{r7, pc}

0800def8 <hci_le_set_default_phy>:
}

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 800def8:	b590      	push	{r4, r7, lr}
 800defa:	b0cd      	sub	sp, #308	@ 0x134
 800defc:	af00      	add	r7, sp, #0
 800defe:	4604      	mov	r4, r0
 800df00:	4608      	mov	r0, r1
 800df02:	4611      	mov	r1, r2
 800df04:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800df08:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800df0c:	4622      	mov	r2, r4
 800df0e:	701a      	strb	r2, [r3, #0]
 800df10:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800df14:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800df18:	4602      	mov	r2, r0
 800df1a:	701a      	strb	r2, [r3, #0]
 800df1c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800df20:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 800df24:	460a      	mov	r2, r1
 800df26:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 800df28:	f107 0310 	add.w	r3, r7, #16
 800df2c:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800df30:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800df34:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800df38:	2200      	movs	r2, #0
 800df3a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800df3c:	2300      	movs	r3, #0
 800df3e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 800df42:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800df46:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800df4a:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800df4e:	7812      	ldrb	r2, [r2, #0]
 800df50:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800df52:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800df56:	3301      	adds	r3, #1
 800df58:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->TX_PHYS = TX_PHYS;
 800df5c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800df60:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800df64:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800df68:	7812      	ldrb	r2, [r2, #0]
 800df6a:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800df6c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800df70:	3301      	adds	r3, #1
 800df72:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->RX_PHYS = RX_PHYS;
 800df76:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800df7a:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800df7e:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 800df82:	7812      	ldrb	r2, [r2, #0]
 800df84:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800df86:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800df8a:	3301      	adds	r3, #1
 800df8c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800df90:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800df94:	2218      	movs	r2, #24
 800df96:	2100      	movs	r1, #0
 800df98:	4618      	mov	r0, r3
 800df9a:	f000 f83a 	bl	800e012 <Osal_MemSet>
  rq.ogf = 0x08;
 800df9e:	2308      	movs	r3, #8
 800dfa0:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x031;
 800dfa4:	2331      	movs	r3, #49	@ 0x31
 800dfa6:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800dfaa:	f107 0310 	add.w	r3, r7, #16
 800dfae:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800dfb2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800dfb6:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800dfba:	f107 030f 	add.w	r3, r7, #15
 800dfbe:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800dfc2:	2301      	movs	r3, #1
 800dfc4:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800dfc8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800dfcc:	2100      	movs	r1, #0
 800dfce:	4618      	mov	r0, r3
 800dfd0:	f000 faa8 	bl	800e524 <hci_send_req>
 800dfd4:	4603      	mov	r3, r0
 800dfd6:	2b00      	cmp	r3, #0
 800dfd8:	da01      	bge.n	800dfde <hci_le_set_default_phy+0xe6>
    return BLE_STATUS_TIMEOUT;
 800dfda:	23ff      	movs	r3, #255	@ 0xff
 800dfdc:	e004      	b.n	800dfe8 <hci_le_set_default_phy+0xf0>
  return status;
 800dfde:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800dfe2:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800dfe6:	781b      	ldrb	r3, [r3, #0]
}
 800dfe8:	4618      	mov	r0, r3
 800dfea:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 800dfee:	46bd      	mov	sp, r7
 800dff0:	bd90      	pop	{r4, r7, pc}

0800dff2 <Osal_MemCpy>:
 * Osal_MemCpy
 *
 */

void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 800dff2:	b580      	push	{r7, lr}
 800dff4:	b084      	sub	sp, #16
 800dff6:	af00      	add	r7, sp, #0
 800dff8:	60f8      	str	r0, [r7, #12]
 800dffa:	60b9      	str	r1, [r7, #8]
 800dffc:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size );
 800dffe:	687a      	ldr	r2, [r7, #4]
 800e000:	68b9      	ldr	r1, [r7, #8]
 800e002:	68f8      	ldr	r0, [r7, #12]
 800e004:	f002 fd09 	bl	8010a1a <memcpy>
 800e008:	4603      	mov	r3, r0
}
 800e00a:	4618      	mov	r0, r3
 800e00c:	3710      	adds	r7, #16
 800e00e:	46bd      	mov	sp, r7
 800e010:	bd80      	pop	{r7, pc}

0800e012 <Osal_MemSet>:
 * Osal_MemSet
 *
 */

void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 800e012:	b580      	push	{r7, lr}
 800e014:	b084      	sub	sp, #16
 800e016:	af00      	add	r7, sp, #0
 800e018:	60f8      	str	r0, [r7, #12]
 800e01a:	60b9      	str	r1, [r7, #8]
 800e01c:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 800e01e:	687a      	ldr	r2, [r7, #4]
 800e020:	68b9      	ldr	r1, [r7, #8]
 800e022:	68f8      	ldr	r0, [r7, #12]
 800e024:	f002 fc7d 	bl	8010922 <memset>
 800e028:	4603      	mov	r3, r0
}
 800e02a:	4618      	mov	r0, r3
 800e02c:	3710      	adds	r7, #16
 800e02e:	46bd      	mov	sp, r7
 800e030:	bd80      	pop	{r7, pc}

0800e032 <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__WEAK void BAS_Init( void )
{
 800e032:	b480      	push	{r7}
 800e034:	af00      	add	r7, sp, #0
  return;
 800e036:	bf00      	nop
}
 800e038:	46bd      	mov	sp, r7
 800e03a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e03e:	4770      	bx	lr

0800e040 <BLS_Init>:

__WEAK void BLS_Init( void )
{
 800e040:	b480      	push	{r7}
 800e042:	af00      	add	r7, sp, #0
  return;
 800e044:	bf00      	nop
}
 800e046:	46bd      	mov	sp, r7
 800e048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e04c:	4770      	bx	lr

0800e04e <CRS_STM_Init>:
__WEAK void CRS_STM_Init( void )
{
 800e04e:	b480      	push	{r7}
 800e050:	af00      	add	r7, sp, #0
  return;
 800e052:	bf00      	nop
}
 800e054:	46bd      	mov	sp, r7
 800e056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e05a:	4770      	bx	lr

0800e05c <DIS_Init>:
__WEAK void DIS_Init( void )
{
 800e05c:	b480      	push	{r7}
 800e05e:	af00      	add	r7, sp, #0
  return;
 800e060:	bf00      	nop
}
 800e062:	46bd      	mov	sp, r7
 800e064:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e068:	4770      	bx	lr

0800e06a <EDS_STM_Init>:
__WEAK void EDS_STM_Init( void )
{
 800e06a:	b480      	push	{r7}
 800e06c:	af00      	add	r7, sp, #0
  return;
 800e06e:	bf00      	nop
}
 800e070:	46bd      	mov	sp, r7
 800e072:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e076:	4770      	bx	lr

0800e078 <HIDS_Init>:
__WEAK void HIDS_Init( void )
{
 800e078:	b480      	push	{r7}
 800e07a:	af00      	add	r7, sp, #0
  return;
 800e07c:	bf00      	nop
}
 800e07e:	46bd      	mov	sp, r7
 800e080:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e084:	4770      	bx	lr

0800e086 <HRS_Init>:
__WEAK void HRS_Init( void )
{
 800e086:	b480      	push	{r7}
 800e088:	af00      	add	r7, sp, #0
  return;
 800e08a:	bf00      	nop
}
 800e08c:	46bd      	mov	sp, r7
 800e08e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e092:	4770      	bx	lr

0800e094 <HTS_Init>:
__WEAK void HTS_Init( void )
{
 800e094:	b480      	push	{r7}
 800e096:	af00      	add	r7, sp, #0
  return;
 800e098:	bf00      	nop
}
 800e09a:	46bd      	mov	sp, r7
 800e09c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0a0:	4770      	bx	lr

0800e0a2 <IAS_Init>:
__WEAK void IAS_Init( void )
{
 800e0a2:	b480      	push	{r7}
 800e0a4:	af00      	add	r7, sp, #0
  return;
 800e0a6:	bf00      	nop
}
 800e0a8:	46bd      	mov	sp, r7
 800e0aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0ae:	4770      	bx	lr

0800e0b0 <LLS_Init>:
__WEAK void LLS_Init( void )
{
 800e0b0:	b480      	push	{r7}
 800e0b2:	af00      	add	r7, sp, #0
  return;
 800e0b4:	bf00      	nop
}
 800e0b6:	46bd      	mov	sp, r7
 800e0b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0bc:	4770      	bx	lr

0800e0be <TPS_Init>:
__WEAK void TPS_Init( void )
{
 800e0be:	b480      	push	{r7}
 800e0c0:	af00      	add	r7, sp, #0
  return;
 800e0c2:	bf00      	nop
}
 800e0c4:	46bd      	mov	sp, r7
 800e0c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0ca:	4770      	bx	lr

0800e0cc <MOTENV_STM_Init>:
__WEAK void MOTENV_STM_Init( void )
{
 800e0cc:	b480      	push	{r7}
 800e0ce:	af00      	add	r7, sp, #0
  return;
 800e0d0:	bf00      	nop
}
 800e0d2:	46bd      	mov	sp, r7
 800e0d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0d8:	4770      	bx	lr

0800e0da <P2PS_STM_Init>:
__WEAK void P2PS_STM_Init( void )
{
 800e0da:	b480      	push	{r7}
 800e0dc:	af00      	add	r7, sp, #0
  return;
 800e0de:	bf00      	nop
}
 800e0e0:	46bd      	mov	sp, r7
 800e0e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0e6:	4770      	bx	lr

0800e0e8 <ZDD_STM_Init>:
__WEAK void ZDD_STM_Init( void )
{
 800e0e8:	b480      	push	{r7}
 800e0ea:	af00      	add	r7, sp, #0
  return;
 800e0ec:	bf00      	nop
}
 800e0ee:	46bd      	mov	sp, r7
 800e0f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0f4:	4770      	bx	lr

0800e0f6 <OTAS_STM_Init>:
__WEAK void OTAS_STM_Init( void )
{
 800e0f6:	b480      	push	{r7}
 800e0f8:	af00      	add	r7, sp, #0
  return;
 800e0fa:	bf00      	nop
}
 800e0fc:	46bd      	mov	sp, r7
 800e0fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e102:	4770      	bx	lr

0800e104 <MESH_Init>:
__WEAK void MESH_Init( void )
{
 800e104:	b480      	push	{r7}
 800e106:	af00      	add	r7, sp, #0
  return;
 800e108:	bf00      	nop
}
 800e10a:	46bd      	mov	sp, r7
 800e10c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e110:	4770      	bx	lr

0800e112 <BVOPUS_STM_Init>:
__WEAK void BVOPUS_STM_Init( void )
{
 800e112:	b480      	push	{r7}
 800e114:	af00      	add	r7, sp, #0
  return;
 800e116:	bf00      	nop
}
 800e118:	46bd      	mov	sp, r7
 800e11a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e11e:	4770      	bx	lr

0800e120 <SVCCTL_Init>:
}

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 800e120:	b580      	push	{r7, lr}
 800e122:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 800e124:	4b04      	ldr	r3, [pc, #16]	@ (800e138 <SVCCTL_Init+0x18>)
 800e126:	2200      	movs	r2, #0
 800e128:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 800e12a:	4b04      	ldr	r3, [pc, #16]	@ (800e13c <SVCCTL_Init+0x1c>)
 800e12c:	2200      	movs	r2, #0
 800e12e:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 800e130:	f000 f806 	bl	800e140 <SVCCTL_SvcInit>

  return;
 800e134:	bf00      	nop
}
 800e136:	bd80      	pop	{r7, pc}
 800e138:	200000e8 	.word	0x200000e8
 800e13c:	20000108 	.word	0x20000108

0800e140 <SVCCTL_SvcInit>:

__WEAK void SVCCTL_SvcInit(void)
{
 800e140:	b580      	push	{r7, lr}
 800e142:	af00      	add	r7, sp, #0
  BAS_Init();
 800e144:	f7ff ff75 	bl	800e032 <BAS_Init>

  BLS_Init();
 800e148:	f7ff ff7a 	bl	800e040 <BLS_Init>

  CRS_STM_Init();
 800e14c:	f7ff ff7f 	bl	800e04e <CRS_STM_Init>

  DIS_Init();
 800e150:	f7ff ff84 	bl	800e05c <DIS_Init>

  EDS_STM_Init();
 800e154:	f7ff ff89 	bl	800e06a <EDS_STM_Init>

  HIDS_Init();
 800e158:	f7ff ff8e 	bl	800e078 <HIDS_Init>

  HRS_Init();
 800e15c:	f7ff ff93 	bl	800e086 <HRS_Init>

  HTS_Init();
 800e160:	f7ff ff98 	bl	800e094 <HTS_Init>

  IAS_Init();
 800e164:	f7ff ff9d 	bl	800e0a2 <IAS_Init>

  LLS_Init();
 800e168:	f7ff ffa2 	bl	800e0b0 <LLS_Init>

  TPS_Init();
 800e16c:	f7ff ffa7 	bl	800e0be <TPS_Init>

  MOTENV_STM_Init();
 800e170:	f7ff ffac 	bl	800e0cc <MOTENV_STM_Init>

  P2PS_STM_Init();
 800e174:	f7ff ffb1 	bl	800e0da <P2PS_STM_Init>

  ZDD_STM_Init();
 800e178:	f7ff ffb6 	bl	800e0e8 <ZDD_STM_Init>

  OTAS_STM_Init();
 800e17c:	f7ff ffbb 	bl	800e0f6 <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 800e180:	f7ff ffc7 	bl	800e112 <BVOPUS_STM_Init>

  MESH_Init();
 800e184:	f7ff ffbe 	bl	800e104 <MESH_Init>

  SVCCTL_InitCustomSvc();
 800e188:	f001 fcce 	bl	800fb28 <SVCCTL_InitCustomSvc>
  
  return;
 800e18c:	bf00      	nop
}
 800e18e:	bd80      	pop	{r7, pc}

0800e190 <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 800e190:	b480      	push	{r7}
 800e192:	b083      	sub	sp, #12
 800e194:	af00      	add	r7, sp, #0
 800e196:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 800e198:	4b09      	ldr	r3, [pc, #36]	@ (800e1c0 <SVCCTL_RegisterSvcHandler+0x30>)
 800e19a:	7f1b      	ldrb	r3, [r3, #28]
 800e19c:	4619      	mov	r1, r3
 800e19e:	4a08      	ldr	r2, [pc, #32]	@ (800e1c0 <SVCCTL_RegisterSvcHandler+0x30>)
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 800e1a6:	4b06      	ldr	r3, [pc, #24]	@ (800e1c0 <SVCCTL_RegisterSvcHandler+0x30>)
 800e1a8:	7f1b      	ldrb	r3, [r3, #28]
 800e1aa:	3301      	adds	r3, #1
 800e1ac:	b2da      	uxtb	r2, r3
 800e1ae:	4b04      	ldr	r3, [pc, #16]	@ (800e1c0 <SVCCTL_RegisterSvcHandler+0x30>)
 800e1b0:	771a      	strb	r2, [r3, #28]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 800e1b2:	bf00      	nop
}
 800e1b4:	370c      	adds	r7, #12
 800e1b6:	46bd      	mov	sp, r7
 800e1b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1bc:	4770      	bx	lr
 800e1be:	bf00      	nop
 800e1c0:	200000e8 	.word	0x200000e8

0800e1c4 <SVCCTL_UserEvtRx>:

  return;
}

__WEAK SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 800e1c4:	b580      	push	{r7, lr}
 800e1c6:	b086      	sub	sp, #24
 800e1c8:	af00      	add	r7, sp, #0
 800e1ca:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 800e1cc:	687b      	ldr	r3, [r7, #4]
 800e1ce:	3301      	adds	r3, #1
 800e1d0:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 800e1d2:	2300      	movs	r3, #0
 800e1d4:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 800e1d6:	693b      	ldr	r3, [r7, #16]
 800e1d8:	781b      	ldrb	r3, [r3, #0]
 800e1da:	2bff      	cmp	r3, #255	@ 0xff
 800e1dc:	d125      	bne.n	800e22a <SVCCTL_UserEvtRx+0x66>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 800e1de:	693b      	ldr	r3, [r7, #16]
 800e1e0:	3302      	adds	r3, #2
 800e1e2:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 800e1e4:	68fb      	ldr	r3, [r7, #12]
 800e1e6:	881b      	ldrh	r3, [r3, #0]
 800e1e8:	b29b      	uxth	r3, r3
 800e1ea:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800e1ee:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800e1f2:	d118      	bne.n	800e226 <SVCCTL_UserEvtRx+0x62>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800e1f4:	2300      	movs	r3, #0
 800e1f6:	757b      	strb	r3, [r7, #21]
 800e1f8:	e00d      	b.n	800e216 <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 800e1fa:	7d7b      	ldrb	r3, [r7, #21]
 800e1fc:	4a1a      	ldr	r2, [pc, #104]	@ (800e268 <SVCCTL_UserEvtRx+0xa4>)
 800e1fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e202:	6878      	ldr	r0, [r7, #4]
 800e204:	4798      	blx	r3
 800e206:	4603      	mov	r3, r0
 800e208:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 800e20a:	7dfb      	ldrb	r3, [r7, #23]
 800e20c:	2b00      	cmp	r3, #0
 800e20e:	d108      	bne.n	800e222 <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800e210:	7d7b      	ldrb	r3, [r7, #21]
 800e212:	3301      	adds	r3, #1
 800e214:	757b      	strb	r3, [r7, #21]
 800e216:	4b14      	ldr	r3, [pc, #80]	@ (800e268 <SVCCTL_UserEvtRx+0xa4>)
 800e218:	7f1b      	ldrb	r3, [r3, #28]
 800e21a:	7d7a      	ldrb	r2, [r7, #21]
 800e21c:	429a      	cmp	r2, r3
 800e21e:	d3ec      	bcc.n	800e1fa <SVCCTL_UserEvtRx+0x36>
               */
              break;
            }
          }
#endif
          break;
 800e220:	e002      	b.n	800e228 <SVCCTL_UserEvtRx+0x64>
              break;
 800e222:	bf00      	nop
          break;
 800e224:	e000      	b.n	800e228 <SVCCTL_UserEvtRx+0x64>

        default:
          break;
 800e226:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 800e228:	e000      	b.n	800e22c <SVCCTL_UserEvtRx+0x68>

    default:
      break;
 800e22a:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the application.
   */
  switch (event_notification_status)
 800e22c:	7dfb      	ldrb	r3, [r7, #23]
 800e22e:	2b02      	cmp	r3, #2
 800e230:	d00f      	beq.n	800e252 <SVCCTL_UserEvtRx+0x8e>
 800e232:	2b02      	cmp	r3, #2
 800e234:	dc10      	bgt.n	800e258 <SVCCTL_UserEvtRx+0x94>
 800e236:	2b00      	cmp	r3, #0
 800e238:	d002      	beq.n	800e240 <SVCCTL_UserEvtRx+0x7c>
 800e23a:	2b01      	cmp	r3, #1
 800e23c:	d006      	beq.n	800e24c <SVCCTL_UserEvtRx+0x88>
 800e23e:	e00b      	b.n	800e258 <SVCCTL_UserEvtRx+0x94>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 800e240:	6878      	ldr	r0, [r7, #4]
 800e242:	f000 ff9b 	bl	800f17c <SVCCTL_App_Notification>
 800e246:	4603      	mov	r3, r0
 800e248:	75bb      	strb	r3, [r7, #22]
      break;
 800e24a:	e008      	b.n	800e25e <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 800e24c:	2301      	movs	r3, #1
 800e24e:	75bb      	strb	r3, [r7, #22]
      break;
 800e250:	e005      	b.n	800e25e <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 800e252:	2300      	movs	r3, #0
 800e254:	75bb      	strb	r3, [r7, #22]
      break;
 800e256:	e002      	b.n	800e25e <SVCCTL_UserEvtRx+0x9a>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 800e258:	2301      	movs	r3, #1
 800e25a:	75bb      	strb	r3, [r7, #22]
      break;
 800e25c:	bf00      	nop
  }

  return (return_status);
 800e25e:	7dbb      	ldrb	r3, [r7, #22]
}
 800e260:	4618      	mov	r0, r3
 800e262:	3718      	adds	r7, #24
 800e264:	46bd      	mov	sp, r7
 800e266:	bd80      	pop	{r7, pc}
 800e268:	200000e8 	.word	0x200000e8

0800e26c <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 800e26c:	b580      	push	{r7, lr}
 800e26e:	b088      	sub	sp, #32
 800e270:	af00      	add	r7, sp, #0
 800e272:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800e274:	f107 030c 	add.w	r3, r7, #12
 800e278:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 800e280:	69fb      	ldr	r3, [r7, #28]
 800e282:	212e      	movs	r1, #46	@ 0x2e
 800e284:	f64f 4066 	movw	r0, #64614	@ 0xfc66
 800e288:	f000 fae8 	bl	800e85c <shci_send>
            p_rsp );
 
  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800e28c:	69fb      	ldr	r3, [r7, #28]
 800e28e:	330b      	adds	r3, #11
 800e290:	78db      	ldrb	r3, [r3, #3]
}
 800e292:	4618      	mov	r0, r3
 800e294:	3720      	adds	r7, #32
 800e296:	46bd      	mov	sp, r7
 800e298:	bd80      	pop	{r7, pc}

0800e29a <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 800e29a:	b580      	push	{r7, lr}
 800e29c:	b088      	sub	sp, #32
 800e29e:	af00      	add	r7, sp, #0
 800e2a0:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800e2a2:	f107 030c 	add.w	r3, r7, #12
 800e2a6:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 800e2ae:	69fb      	ldr	r3, [r7, #28]
 800e2b0:	210f      	movs	r1, #15
 800e2b2:	f64f 4068 	movw	r0, #64616	@ 0xfc68
 800e2b6:	f000 fad1 	bl	800e85c <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800e2ba:	69fb      	ldr	r3, [r7, #28]
 800e2bc:	330b      	adds	r3, #11
 800e2be:	78db      	ldrb	r3, [r3, #3]
}
 800e2c0:	4618      	mov	r0, r3
 800e2c2:	3720      	adds	r7, #32
 800e2c4:	46bd      	mov	sp, r7
 800e2c6:	bd80      	pop	{r7, pc}

0800e2c8 <SHCI_C2_Config>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_Config(SHCI_C2_CONFIG_Cmd_Param_t *pCmdPacket)
{
 800e2c8:	b580      	push	{r7, lr}
 800e2ca:	b088      	sub	sp, #32
 800e2cc:	af00      	add	r7, sp, #0
 800e2ce:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800e2d0:	f107 030c 	add.w	r3, r7, #12
 800e2d4:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_CONFIG,
 800e2d6:	69fb      	ldr	r3, [r7, #28]
 800e2d8:	687a      	ldr	r2, [r7, #4]
 800e2da:	2110      	movs	r1, #16
 800e2dc:	f64f 4075 	movw	r0, #64629	@ 0xfc75
 800e2e0:	f000 fabc 	bl	800e85c <shci_send>
             sizeof(SHCI_C2_CONFIG_Cmd_Param_t),
             (uint8_t*)pCmdPacket,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800e2e4:	69fb      	ldr	r3, [r7, #28]
 800e2e6:	330b      	adds	r3, #11
 800e2e8:	78db      	ldrb	r3, [r3, #3]
}
 800e2ea:	4618      	mov	r0, r3
 800e2ec:	3720      	adds	r7, #32
 800e2ee:	46bd      	mov	sp, r7
 800e2f0:	bd80      	pop	{r7, pc}
	...

0800e2f4 <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 800e2f4:	b480      	push	{r7}
 800e2f6:	b08b      	sub	sp, #44	@ 0x2c
 800e2f8:	af00      	add	r7, sp, #0
 800e2fa:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 800e2fc:	2300      	movs	r3, #0
 800e2fe:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 800e300:	2300      	movs	r3, #0
 800e302:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 800e304:	2300      	movs	r3, #0
 800e306:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t wireless_firmware_memorySize = 0;
 800e308:	2300      	movs	r3, #0
 800e30a:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 800e30c:	2300      	movs	r3, #0
 800e30e:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 800e310:	2300      	movs	r3, #0
 800e312:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 800e314:	2300      	movs	r3, #0
 800e316:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 800e318:	2300      	movs	r3, #0
 800e31a:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 800e31c:	4b4a      	ldr	r3, [pc, #296]	@ (800e448 <SHCI_GetWirelessFwInfo+0x154>)
 800e31e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e320:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800e324:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 800e326:	693b      	ldr	r3, [r7, #16]
 800e328:	009b      	lsls	r3, r3, #2
 800e32a:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 800e32e:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 800e332:	681b      	ldr	r3, [r3, #0]
 800e334:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 800e336:	68bb      	ldr	r3, [r7, #8]
 800e338:	681b      	ldr	r3, [r3, #0]
 800e33a:	4a44      	ldr	r2, [pc, #272]	@ (800e44c <SHCI_GetWirelessFwInfo+0x158>)
 800e33c:	4293      	cmp	r3, r2
 800e33e:	d10f      	bne.n	800e360 <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 800e340:	68bb      	ldr	r3, [r7, #8]
 800e342:	695b      	ldr	r3, [r3, #20]
 800e344:	627b      	str	r3, [r7, #36]	@ 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 800e346:	68bb      	ldr	r3, [r7, #8]
 800e348:	699b      	ldr	r3, [r3, #24]
 800e34a:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 800e34c:	68bb      	ldr	r3, [r7, #8]
 800e34e:	69db      	ldr	r3, [r3, #28]
 800e350:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 800e352:	68bb      	ldr	r3, [r7, #8]
 800e354:	68db      	ldr	r3, [r3, #12]
 800e356:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 800e358:	68bb      	ldr	r3, [r7, #8]
 800e35a:	691b      	ldr	r3, [r3, #16]
 800e35c:	617b      	str	r3, [r7, #20]
 800e35e:	e01a      	b.n	800e396 <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 800e360:	693b      	ldr	r3, [r7, #16]
 800e362:	009b      	lsls	r3, r3, #2
 800e364:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 800e368:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 800e36c:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 800e36e:	68fb      	ldr	r3, [r7, #12]
 800e370:	681b      	ldr	r3, [r3, #0]
 800e372:	691b      	ldr	r3, [r3, #16]
 800e374:	627b      	str	r3, [r7, #36]	@ 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 800e376:	68fb      	ldr	r3, [r7, #12]
 800e378:	681b      	ldr	r3, [r3, #0]
 800e37a:	695b      	ldr	r3, [r3, #20]
 800e37c:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 800e37e:	68fb      	ldr	r3, [r7, #12]
 800e380:	681b      	ldr	r3, [r3, #0]
 800e382:	699b      	ldr	r3, [r3, #24]
 800e384:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 800e386:	68fb      	ldr	r3, [r7, #12]
 800e388:	681b      	ldr	r3, [r3, #0]
 800e38a:	685b      	ldr	r3, [r3, #4]
 800e38c:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 800e38e:	68fb      	ldr	r3, [r7, #12]
 800e390:	681b      	ldr	r3, [r3, #0]
 800e392:	689b      	ldr	r3, [r3, #8]
 800e394:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 800e396:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e398:	0e1b      	lsrs	r3, r3, #24
 800e39a:	b2da      	uxtb	r2, r3
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 800e3a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e3a2:	0c1b      	lsrs	r3, r3, #16
 800e3a4:	b2da      	uxtb	r2, r3
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 800e3aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e3ac:	0a1b      	lsrs	r3, r3, #8
 800e3ae:	b2da      	uxtb	r2, r3
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 800e3b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e3b6:	091b      	lsrs	r3, r3, #4
 800e3b8:	b2db      	uxtb	r3, r3
 800e3ba:	f003 030f 	and.w	r3, r3, #15
 800e3be:	b2da      	uxtb	r2, r3
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 800e3c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e3c6:	b2db      	uxtb	r3, r3
 800e3c8:	f003 030f 	and.w	r3, r3, #15
 800e3cc:	b2da      	uxtb	r2, r3
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800e3d2:	6a3b      	ldr	r3, [r7, #32]
 800e3d4:	0e1b      	lsrs	r3, r3, #24
 800e3d6:	b2da      	uxtb	r2, r3
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 800e3dc:	6a3b      	ldr	r3, [r7, #32]
 800e3de:	0c1b      	lsrs	r3, r3, #16
 800e3e0:	b2da      	uxtb	r2, r3
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 800e3e6:	6a3b      	ldr	r3, [r7, #32]
 800e3e8:	0a1b      	lsrs	r3, r3, #8
 800e3ea:	b2da      	uxtb	r2, r3
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 800e3f0:	6a3b      	ldr	r3, [r7, #32]
 800e3f2:	b2da      	uxtb	r2, r3
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 800e3f8:	69fb      	ldr	r3, [r7, #28]
 800e3fa:	b2da      	uxtb	r2, r3
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 800e400:	69bb      	ldr	r3, [r7, #24]
 800e402:	0e1b      	lsrs	r3, r3, #24
 800e404:	b2da      	uxtb	r2, r3
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 800e40a:	69bb      	ldr	r3, [r7, #24]
 800e40c:	0c1b      	lsrs	r3, r3, #16
 800e40e:	b2da      	uxtb	r2, r3
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 800e414:	69bb      	ldr	r3, [r7, #24]
 800e416:	0a1b      	lsrs	r3, r3, #8
 800e418:	b2da      	uxtb	r2, r3
 800e41a:	687b      	ldr	r3, [r7, #4]
 800e41c:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800e41e:	697b      	ldr	r3, [r7, #20]
 800e420:	0e1b      	lsrs	r3, r3, #24
 800e422:	b2da      	uxtb	r2, r3
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 800e428:	697b      	ldr	r3, [r7, #20]
 800e42a:	0c1b      	lsrs	r3, r3, #16
 800e42c:	b2da      	uxtb	r2, r3
 800e42e:	687b      	ldr	r3, [r7, #4]
 800e430:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 800e432:	697b      	ldr	r3, [r7, #20]
 800e434:	b2da      	uxtb	r2, r3
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 800e43a:	2300      	movs	r3, #0
}
 800e43c:	4618      	mov	r0, r3
 800e43e:	372c      	adds	r7, #44	@ 0x2c
 800e440:	46bd      	mov	sp, r7
 800e442:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e446:	4770      	bx	lr
 800e448:	58004000 	.word	0x58004000
 800e44c:	a94656b9 	.word	0xa94656b9

0800e450 <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800e450:	b580      	push	{r7, lr}
 800e452:	b082      	sub	sp, #8
 800e454:	af00      	add	r7, sp, #0
 800e456:	6078      	str	r0, [r7, #4]
 800e458:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800e45a:	683b      	ldr	r3, [r7, #0]
 800e45c:	685b      	ldr	r3, [r3, #4]
 800e45e:	4a08      	ldr	r2, [pc, #32]	@ (800e480 <hci_init+0x30>)
 800e460:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 800e462:	4a08      	ldr	r2, [pc, #32]	@ (800e484 <hci_init+0x34>)
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 800e468:	4806      	ldr	r0, [pc, #24]	@ (800e484 <hci_init+0x34>)
 800e46a:	f000 f979 	bl	800e760 <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800e46e:	683b      	ldr	r3, [r7, #0]
 800e470:	681b      	ldr	r3, [r3, #0]
 800e472:	4618      	mov	r0, r3
 800e474:	f000 f8da 	bl	800e62c <TlInit>

  return;
 800e478:	bf00      	nop
}
 800e47a:	3708      	adds	r7, #8
 800e47c:	46bd      	mov	sp, r7
 800e47e:	bd80      	pop	{r7, pc}
 800e480:	20002114 	.word	0x20002114
 800e484:	200020ec 	.word	0x200020ec

0800e488 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 800e488:	b580      	push	{r7, lr}
 800e48a:	b084      	sub	sp, #16
 800e48c:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800e48e:	4822      	ldr	r0, [pc, #136]	@ (800e518 <hci_user_evt_proc+0x90>)
 800e490:	f000 fd32 	bl	800eef8 <LST_is_empty>
 800e494:	4603      	mov	r3, r0
 800e496:	2b00      	cmp	r3, #0
 800e498:	d12b      	bne.n	800e4f2 <hci_user_evt_proc+0x6a>
 800e49a:	4b20      	ldr	r3, [pc, #128]	@ (800e51c <hci_user_evt_proc+0x94>)
 800e49c:	781b      	ldrb	r3, [r3, #0]
 800e49e:	2b00      	cmp	r3, #0
 800e4a0:	d027      	beq.n	800e4f2 <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800e4a2:	f107 030c 	add.w	r3, r7, #12
 800e4a6:	4619      	mov	r1, r3
 800e4a8:	481b      	ldr	r0, [pc, #108]	@ (800e518 <hci_user_evt_proc+0x90>)
 800e4aa:	f000 fdb4 	bl	800f016 <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 800e4ae:	4b1c      	ldr	r3, [pc, #112]	@ (800e520 <hci_user_evt_proc+0x98>)
 800e4b0:	69db      	ldr	r3, [r3, #28]
 800e4b2:	2b00      	cmp	r3, #0
 800e4b4:	d00c      	beq.n	800e4d0 <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800e4b6:	68fb      	ldr	r3, [r7, #12]
 800e4b8:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 800e4ba:	2301      	movs	r3, #1
 800e4bc:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 800e4be:	4b18      	ldr	r3, [pc, #96]	@ (800e520 <hci_user_evt_proc+0x98>)
 800e4c0:	69db      	ldr	r3, [r3, #28]
 800e4c2:	1d3a      	adds	r2, r7, #4
 800e4c4:	4610      	mov	r0, r2
 800e4c6:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 800e4c8:	793a      	ldrb	r2, [r7, #4]
 800e4ca:	4b14      	ldr	r3, [pc, #80]	@ (800e51c <hci_user_evt_proc+0x94>)
 800e4cc:	701a      	strb	r2, [r3, #0]
 800e4ce:	e002      	b.n	800e4d6 <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800e4d0:	4b12      	ldr	r3, [pc, #72]	@ (800e51c <hci_user_evt_proc+0x94>)
 800e4d2:	2201      	movs	r2, #1
 800e4d4:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 800e4d6:	4b11      	ldr	r3, [pc, #68]	@ (800e51c <hci_user_evt_proc+0x94>)
 800e4d8:	781b      	ldrb	r3, [r3, #0]
 800e4da:	2b00      	cmp	r3, #0
 800e4dc:	d004      	beq.n	800e4e8 <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800e4de:	68fb      	ldr	r3, [r7, #12]
 800e4e0:	4618      	mov	r0, r3
 800e4e2:	f000 fc0d 	bl	800ed00 <TL_MM_EvtDone>
 800e4e6:	e004      	b.n	800e4f2 <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800e4e8:	68fb      	ldr	r3, [r7, #12]
 800e4ea:	4619      	mov	r1, r3
 800e4ec:	480a      	ldr	r0, [pc, #40]	@ (800e518 <hci_user_evt_proc+0x90>)
 800e4ee:	f000 fd25 	bl	800ef3c <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800e4f2:	4809      	ldr	r0, [pc, #36]	@ (800e518 <hci_user_evt_proc+0x90>)
 800e4f4:	f000 fd00 	bl	800eef8 <LST_is_empty>
 800e4f8:	4603      	mov	r3, r0
 800e4fa:	2b00      	cmp	r3, #0
 800e4fc:	d107      	bne.n	800e50e <hci_user_evt_proc+0x86>
 800e4fe:	4b07      	ldr	r3, [pc, #28]	@ (800e51c <hci_user_evt_proc+0x94>)
 800e500:	781b      	ldrb	r3, [r3, #0]
 800e502:	2b00      	cmp	r3, #0
 800e504:	d003      	beq.n	800e50e <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 800e506:	4804      	ldr	r0, [pc, #16]	@ (800e518 <hci_user_evt_proc+0x90>)
 800e508:	f001 f85e 	bl	800f5c8 <hci_notify_asynch_evt>
  }


  return;
 800e50c:	bf00      	nop
 800e50e:	bf00      	nop
}
 800e510:	3710      	adds	r7, #16
 800e512:	46bd      	mov	sp, r7
 800e514:	bd80      	pop	{r7, pc}
 800e516:	bf00      	nop
 800e518:	20000110 	.word	0x20000110
 800e51c:	2000011c 	.word	0x2000011c
 800e520:	200020ec 	.word	0x200020ec

0800e524 <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 800e524:	b580      	push	{r7, lr}
 800e526:	b088      	sub	sp, #32
 800e528:	af00      	add	r7, sp, #0
 800e52a:	6078      	str	r0, [r7, #4]
 800e52c:	460b      	mov	r3, r1
 800e52e:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 800e530:	2000      	movs	r0, #0
 800e532:	f000 f8d1 	bl	800e6d8 <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 800e536:	2300      	movs	r3, #0
 800e538:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	885b      	ldrh	r3, [r3, #2]
 800e53e:	b21b      	sxth	r3, r3
 800e540:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e544:	b21a      	sxth	r2, r3
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	881b      	ldrh	r3, [r3, #0]
 800e54a:	029b      	lsls	r3, r3, #10
 800e54c:	b21b      	sxth	r3, r3
 800e54e:	4313      	orrs	r3, r2
 800e550:	b21b      	sxth	r3, r3
 800e552:	83bb      	strh	r3, [r7, #28]
  
  CmdRspStatusFlag = HCI_TL_CMD_RESP_WAIT;
 800e554:	4b33      	ldr	r3, [pc, #204]	@ (800e624 <hci_send_req+0x100>)
 800e556:	2201      	movs	r2, #1
 800e558:	701a      	strb	r2, [r3, #0]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	68db      	ldr	r3, [r3, #12]
 800e55e:	b2d9      	uxtb	r1, r3
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	689a      	ldr	r2, [r3, #8]
 800e564:	8bbb      	ldrh	r3, [r7, #28]
 800e566:	4618      	mov	r0, r3
 800e568:	f000 f890 	bl	800e68c <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 800e56c:	e04e      	b.n	800e60c <hci_send_req+0xe8>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 800e56e:	f248 00e8 	movw	r0, #33000	@ 0x80e8
 800e572:	f001 f840 	bl	800f5f6 <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800e576:	e043      	b.n	800e600 <hci_send_req+0xdc>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 800e578:	f107 030c 	add.w	r3, r7, #12
 800e57c:	4619      	mov	r1, r3
 800e57e:	482a      	ldr	r0, [pc, #168]	@ (800e628 <hci_send_req+0x104>)
 800e580:	f000 fd49 	bl	800f016 <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 800e584:	68fb      	ldr	r3, [r7, #12]
 800e586:	7a5b      	ldrb	r3, [r3, #9]
 800e588:	2b0f      	cmp	r3, #15
 800e58a:	d114      	bne.n	800e5b6 <hci_send_req+0x92>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 800e58c:	68fb      	ldr	r3, [r7, #12]
 800e58e:	330b      	adds	r3, #11
 800e590:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 800e592:	693b      	ldr	r3, [r7, #16]
 800e594:	885b      	ldrh	r3, [r3, #2]
 800e596:	b29b      	uxth	r3, r3
 800e598:	8bba      	ldrh	r2, [r7, #28]
 800e59a:	429a      	cmp	r2, r3
 800e59c:	d104      	bne.n	800e5a8 <hci_send_req+0x84>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	691b      	ldr	r3, [r3, #16]
 800e5a2:	693a      	ldr	r2, [r7, #16]
 800e5a4:	7812      	ldrb	r2, [r2, #0]
 800e5a6:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 800e5a8:	693b      	ldr	r3, [r7, #16]
 800e5aa:	785b      	ldrb	r3, [r3, #1]
 800e5ac:	2b00      	cmp	r3, #0
 800e5ae:	d027      	beq.n	800e600 <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800e5b0:	2301      	movs	r3, #1
 800e5b2:	77fb      	strb	r3, [r7, #31]
 800e5b4:	e024      	b.n	800e600 <hci_send_req+0xdc>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 800e5b6:	68fb      	ldr	r3, [r7, #12]
 800e5b8:	330b      	adds	r3, #11
 800e5ba:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 800e5bc:	69bb      	ldr	r3, [r7, #24]
 800e5be:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800e5c2:	b29b      	uxth	r3, r3
 800e5c4:	8bba      	ldrh	r2, [r7, #28]
 800e5c6:	429a      	cmp	r2, r3
 800e5c8:	d114      	bne.n	800e5f4 <hci_send_req+0xd0>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 800e5ca:	68fb      	ldr	r3, [r7, #12]
 800e5cc:	7a9b      	ldrb	r3, [r3, #10]
 800e5ce:	3b03      	subs	r3, #3
 800e5d0:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 800e5d2:	687b      	ldr	r3, [r7, #4]
 800e5d4:	695a      	ldr	r2, [r3, #20]
 800e5d6:	7dfb      	ldrb	r3, [r7, #23]
 800e5d8:	429a      	cmp	r2, r3
 800e5da:	bfa8      	it	ge
 800e5dc:	461a      	movge	r2, r3
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	6918      	ldr	r0, [r3, #16]
 800e5e6:	69bb      	ldr	r3, [r7, #24]
 800e5e8:	1cd9      	adds	r1, r3, #3
 800e5ea:	687b      	ldr	r3, [r7, #4]
 800e5ec:	695b      	ldr	r3, [r3, #20]
 800e5ee:	461a      	mov	r2, r3
 800e5f0:	f002 fa13 	bl	8010a1a <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 800e5f4:	69bb      	ldr	r3, [r7, #24]
 800e5f6:	781b      	ldrb	r3, [r3, #0]
 800e5f8:	2b00      	cmp	r3, #0
 800e5fa:	d001      	beq.n	800e600 <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800e5fc:	2301      	movs	r3, #1
 800e5fe:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800e600:	4809      	ldr	r0, [pc, #36]	@ (800e628 <hci_send_req+0x104>)
 800e602:	f000 fc79 	bl	800eef8 <LST_is_empty>
 800e606:	4603      	mov	r3, r0
 800e608:	2b00      	cmp	r3, #0
 800e60a:	d0b5      	beq.n	800e578 <hci_send_req+0x54>
  while(local_cmd_status == HCI_TL_CmdBusy)
 800e60c:	7ffb      	ldrb	r3, [r7, #31]
 800e60e:	2b00      	cmp	r3, #0
 800e610:	d0ad      	beq.n	800e56e <hci_send_req+0x4a>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 800e612:	2001      	movs	r0, #1
 800e614:	f000 f860 	bl	800e6d8 <NotifyCmdStatus>

  return 0;
 800e618:	2300      	movs	r3, #0
}
 800e61a:	4618      	mov	r0, r3
 800e61c:	3720      	adds	r7, #32
 800e61e:	46bd      	mov	sp, r7
 800e620:	bd80      	pop	{r7, pc}
 800e622:	bf00      	nop
 800e624:	20002118 	.word	0x20002118
 800e628:	2000210c 	.word	0x2000210c

0800e62c <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800e62c:	b580      	push	{r7, lr}
 800e62e:	b086      	sub	sp, #24
 800e630:	af00      	add	r7, sp, #0
 800e632:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 800e634:	480f      	ldr	r0, [pc, #60]	@ (800e674 <TlInit+0x48>)
 800e636:	f000 fc4f 	bl	800eed8 <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 800e63a:	4a0f      	ldr	r2, [pc, #60]	@ (800e678 <TlInit+0x4c>)
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 800e640:	480e      	ldr	r0, [pc, #56]	@ (800e67c <TlInit+0x50>)
 800e642:	f000 fc49 	bl	800eed8 <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800e646:	4b0e      	ldr	r3, [pc, #56]	@ (800e680 <TlInit+0x54>)
 800e648:	2201      	movs	r2, #1
 800e64a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 800e64c:	4b0d      	ldr	r3, [pc, #52]	@ (800e684 <TlInit+0x58>)
 800e64e:	681b      	ldr	r3, [r3, #0]
 800e650:	2b00      	cmp	r3, #0
 800e652:	d00a      	beq.n	800e66a <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 800e658:	4b0b      	ldr	r3, [pc, #44]	@ (800e688 <TlInit+0x5c>)
 800e65a:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 800e65c:	4b09      	ldr	r3, [pc, #36]	@ (800e684 <TlInit+0x58>)
 800e65e:	681b      	ldr	r3, [r3, #0]
 800e660:	f107 0208 	add.w	r2, r7, #8
 800e664:	4610      	mov	r0, r2
 800e666:	4798      	blx	r3
  }

  return;
 800e668:	bf00      	nop
 800e66a:	bf00      	nop
}
 800e66c:	3718      	adds	r7, #24
 800e66e:	46bd      	mov	sp, r7
 800e670:	bd80      	pop	{r7, pc}
 800e672:	bf00      	nop
 800e674:	2000210c 	.word	0x2000210c
 800e678:	20000118 	.word	0x20000118
 800e67c:	20000110 	.word	0x20000110
 800e680:	2000011c 	.word	0x2000011c
 800e684:	200020ec 	.word	0x200020ec
 800e688:	0800e719 	.word	0x0800e719

0800e68c <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 800e68c:	b580      	push	{r7, lr}
 800e68e:	b082      	sub	sp, #8
 800e690:	af00      	add	r7, sp, #0
 800e692:	4603      	mov	r3, r0
 800e694:	603a      	str	r2, [r7, #0]
 800e696:	80fb      	strh	r3, [r7, #6]
 800e698:	460b      	mov	r3, r1
 800e69a:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 800e69c:	4b0c      	ldr	r3, [pc, #48]	@ (800e6d0 <SendCmd+0x44>)
 800e69e:	681b      	ldr	r3, [r3, #0]
 800e6a0:	88fa      	ldrh	r2, [r7, #6]
 800e6a2:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 800e6a6:	4b0a      	ldr	r3, [pc, #40]	@ (800e6d0 <SendCmd+0x44>)
 800e6a8:	681b      	ldr	r3, [r3, #0]
 800e6aa:	797a      	ldrb	r2, [r7, #5]
 800e6ac:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 800e6ae:	4b08      	ldr	r3, [pc, #32]	@ (800e6d0 <SendCmd+0x44>)
 800e6b0:	681b      	ldr	r3, [r3, #0]
 800e6b2:	330c      	adds	r3, #12
 800e6b4:	797a      	ldrb	r2, [r7, #5]
 800e6b6:	6839      	ldr	r1, [r7, #0]
 800e6b8:	4618      	mov	r0, r3
 800e6ba:	f002 f9ae 	bl	8010a1a <memcpy>

  hciContext.io.Send(0,0);
 800e6be:	4b05      	ldr	r3, [pc, #20]	@ (800e6d4 <SendCmd+0x48>)
 800e6c0:	691b      	ldr	r3, [r3, #16]
 800e6c2:	2100      	movs	r1, #0
 800e6c4:	2000      	movs	r0, #0
 800e6c6:	4798      	blx	r3

  return;
 800e6c8:	bf00      	nop
}
 800e6ca:	3708      	adds	r7, #8
 800e6cc:	46bd      	mov	sp, r7
 800e6ce:	bd80      	pop	{r7, pc}
 800e6d0:	20000118 	.word	0x20000118
 800e6d4:	200020ec 	.word	0x200020ec

0800e6d8 <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 800e6d8:	b580      	push	{r7, lr}
 800e6da:	b082      	sub	sp, #8
 800e6dc:	af00      	add	r7, sp, #0
 800e6de:	4603      	mov	r3, r0
 800e6e0:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 800e6e2:	79fb      	ldrb	r3, [r7, #7]
 800e6e4:	2b00      	cmp	r3, #0
 800e6e6:	d108      	bne.n	800e6fa <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 800e6e8:	4b0a      	ldr	r3, [pc, #40]	@ (800e714 <NotifyCmdStatus+0x3c>)
 800e6ea:	681b      	ldr	r3, [r3, #0]
 800e6ec:	2b00      	cmp	r3, #0
 800e6ee:	d00d      	beq.n	800e70c <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 800e6f0:	4b08      	ldr	r3, [pc, #32]	@ (800e714 <NotifyCmdStatus+0x3c>)
 800e6f2:	681b      	ldr	r3, [r3, #0]
 800e6f4:	2000      	movs	r0, #0
 800e6f6:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 800e6f8:	e008      	b.n	800e70c <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 800e6fa:	4b06      	ldr	r3, [pc, #24]	@ (800e714 <NotifyCmdStatus+0x3c>)
 800e6fc:	681b      	ldr	r3, [r3, #0]
 800e6fe:	2b00      	cmp	r3, #0
 800e700:	d004      	beq.n	800e70c <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 800e702:	4b04      	ldr	r3, [pc, #16]	@ (800e714 <NotifyCmdStatus+0x3c>)
 800e704:	681b      	ldr	r3, [r3, #0]
 800e706:	2001      	movs	r0, #1
 800e708:	4798      	blx	r3
  return;
 800e70a:	bf00      	nop
 800e70c:	bf00      	nop
}
 800e70e:	3708      	adds	r7, #8
 800e710:	46bd      	mov	sp, r7
 800e712:	bd80      	pop	{r7, pc}
 800e714:	20002114 	.word	0x20002114

0800e718 <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 800e718:	b580      	push	{r7, lr}
 800e71a:	b082      	sub	sp, #8
 800e71c:	af00      	add	r7, sp, #0
 800e71e:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800e720:	687b      	ldr	r3, [r7, #4]
 800e722:	7a5b      	ldrb	r3, [r3, #9]
 800e724:	2b0f      	cmp	r3, #15
 800e726:	d003      	beq.n	800e730 <TlEvtReceived+0x18>
 800e728:	687b      	ldr	r3, [r7, #4]
 800e72a:	7a5b      	ldrb	r3, [r3, #9]
 800e72c:	2b0e      	cmp	r3, #14
 800e72e:	d107      	bne.n	800e740 <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 800e730:	6879      	ldr	r1, [r7, #4]
 800e732:	4809      	ldr	r0, [pc, #36]	@ (800e758 <TlEvtReceived+0x40>)
 800e734:	f000 fc28 	bl	800ef88 <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 800e738:	2000      	movs	r0, #0
 800e73a:	f000 ff51 	bl	800f5e0 <hci_cmd_resp_release>
 800e73e:	e006      	b.n	800e74e <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 800e740:	6879      	ldr	r1, [r7, #4]
 800e742:	4806      	ldr	r0, [pc, #24]	@ (800e75c <TlEvtReceived+0x44>)
 800e744:	f000 fc20 	bl	800ef88 <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800e748:	4804      	ldr	r0, [pc, #16]	@ (800e75c <TlEvtReceived+0x44>)
 800e74a:	f000 ff3d 	bl	800f5c8 <hci_notify_asynch_evt>
  }

  return;
 800e74e:	bf00      	nop
}
 800e750:	3708      	adds	r7, #8
 800e752:	46bd      	mov	sp, r7
 800e754:	bd80      	pop	{r7, pc}
 800e756:	bf00      	nop
 800e758:	2000210c 	.word	0x2000210c
 800e75c:	20000110 	.word	0x20000110

0800e760 <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 800e760:	b480      	push	{r7}
 800e762:	b083      	sub	sp, #12
 800e764:	af00      	add	r7, sp, #0
 800e766:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	4a05      	ldr	r2, [pc, #20]	@ (800e780 <hci_register_io_bus+0x20>)
 800e76c:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	4a04      	ldr	r2, [pc, #16]	@ (800e784 <hci_register_io_bus+0x24>)
 800e772:	611a      	str	r2, [r3, #16]

  return;
 800e774:	bf00      	nop
}
 800e776:	370c      	adds	r7, #12
 800e778:	46bd      	mov	sp, r7
 800e77a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e77e:	4770      	bx	lr
 800e780:	0800ea79 	.word	0x0800ea79
 800e784:	0800eae1 	.word	0x0800eae1

0800e788 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800e788:	b580      	push	{r7, lr}
 800e78a:	b082      	sub	sp, #8
 800e78c:	af00      	add	r7, sp, #0
 800e78e:	6078      	str	r0, [r7, #4]
 800e790:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800e792:	683b      	ldr	r3, [r7, #0]
 800e794:	685b      	ldr	r3, [r3, #4]
 800e796:	4a08      	ldr	r2, [pc, #32]	@ (800e7b8 <shci_init+0x30>)
 800e798:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 800e79a:	4a08      	ldr	r2, [pc, #32]	@ (800e7bc <shci_init+0x34>)
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 800e7a0:	4806      	ldr	r0, [pc, #24]	@ (800e7bc <shci_init+0x34>)
 800e7a2:	f000 f915 	bl	800e9d0 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800e7a6:	683b      	ldr	r3, [r7, #0]
 800e7a8:	681b      	ldr	r3, [r3, #0]
 800e7aa:	4618      	mov	r0, r3
 800e7ac:	f000 f898 	bl	800e8e0 <TlInit>

  return;
 800e7b0:	bf00      	nop
}
 800e7b2:	3708      	adds	r7, #8
 800e7b4:	46bd      	mov	sp, r7
 800e7b6:	bd80      	pop	{r7, pc}
 800e7b8:	2000213c 	.word	0x2000213c
 800e7bc:	2000211c 	.word	0x2000211c

0800e7c0 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 800e7c0:	b580      	push	{r7, lr}
 800e7c2:	b084      	sub	sp, #16
 800e7c4:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800e7c6:	4822      	ldr	r0, [pc, #136]	@ (800e850 <shci_user_evt_proc+0x90>)
 800e7c8:	f000 fb96 	bl	800eef8 <LST_is_empty>
 800e7cc:	4603      	mov	r3, r0
 800e7ce:	2b00      	cmp	r3, #0
 800e7d0:	d12b      	bne.n	800e82a <shci_user_evt_proc+0x6a>
 800e7d2:	4b20      	ldr	r3, [pc, #128]	@ (800e854 <shci_user_evt_proc+0x94>)
 800e7d4:	781b      	ldrb	r3, [r3, #0]
 800e7d6:	2b00      	cmp	r3, #0
 800e7d8:	d027      	beq.n	800e82a <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800e7da:	f107 030c 	add.w	r3, r7, #12
 800e7de:	4619      	mov	r1, r3
 800e7e0:	481b      	ldr	r0, [pc, #108]	@ (800e850 <shci_user_evt_proc+0x90>)
 800e7e2:	f000 fc18 	bl	800f016 <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 800e7e6:	4b1c      	ldr	r3, [pc, #112]	@ (800e858 <shci_user_evt_proc+0x98>)
 800e7e8:	69db      	ldr	r3, [r3, #28]
 800e7ea:	2b00      	cmp	r3, #0
 800e7ec:	d00c      	beq.n	800e808 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800e7ee:	68fb      	ldr	r3, [r7, #12]
 800e7f0:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 800e7f2:	2301      	movs	r3, #1
 800e7f4:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 800e7f6:	4b18      	ldr	r3, [pc, #96]	@ (800e858 <shci_user_evt_proc+0x98>)
 800e7f8:	69db      	ldr	r3, [r3, #28]
 800e7fa:	1d3a      	adds	r2, r7, #4
 800e7fc:	4610      	mov	r0, r2
 800e7fe:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 800e800:	793a      	ldrb	r2, [r7, #4]
 800e802:	4b14      	ldr	r3, [pc, #80]	@ (800e854 <shci_user_evt_proc+0x94>)
 800e804:	701a      	strb	r2, [r3, #0]
 800e806:	e002      	b.n	800e80e <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800e808:	4b12      	ldr	r3, [pc, #72]	@ (800e854 <shci_user_evt_proc+0x94>)
 800e80a:	2201      	movs	r2, #1
 800e80c:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 800e80e:	4b11      	ldr	r3, [pc, #68]	@ (800e854 <shci_user_evt_proc+0x94>)
 800e810:	781b      	ldrb	r3, [r3, #0]
 800e812:	2b00      	cmp	r3, #0
 800e814:	d004      	beq.n	800e820 <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800e816:	68fb      	ldr	r3, [r7, #12]
 800e818:	4618      	mov	r0, r3
 800e81a:	f000 fa71 	bl	800ed00 <TL_MM_EvtDone>
 800e81e:	e004      	b.n	800e82a <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800e820:	68fb      	ldr	r3, [r7, #12]
 800e822:	4619      	mov	r1, r3
 800e824:	480a      	ldr	r0, [pc, #40]	@ (800e850 <shci_user_evt_proc+0x90>)
 800e826:	f000 fb89 	bl	800ef3c <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800e82a:	4809      	ldr	r0, [pc, #36]	@ (800e850 <shci_user_evt_proc+0x90>)
 800e82c:	f000 fb64 	bl	800eef8 <LST_is_empty>
 800e830:	4603      	mov	r3, r0
 800e832:	2b00      	cmp	r3, #0
 800e834:	d107      	bne.n	800e846 <shci_user_evt_proc+0x86>
 800e836:	4b07      	ldr	r3, [pc, #28]	@ (800e854 <shci_user_evt_proc+0x94>)
 800e838:	781b      	ldrb	r3, [r3, #0]
 800e83a:	2b00      	cmp	r3, #0
 800e83c:	d003      	beq.n	800e846 <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 800e83e:	4804      	ldr	r0, [pc, #16]	@ (800e850 <shci_user_evt_proc+0x90>)
 800e840:	f7f2 fc02 	bl	8001048 <shci_notify_asynch_evt>
  }


  return;
 800e844:	bf00      	nop
 800e846:	bf00      	nop
}
 800e848:	3710      	adds	r7, #16
 800e84a:	46bd      	mov	sp, r7
 800e84c:	bd80      	pop	{r7, pc}
 800e84e:	bf00      	nop
 800e850:	20000120 	.word	0x20000120
 800e854:	20000130 	.word	0x20000130
 800e858:	2000211c 	.word	0x2000211c

0800e85c <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 800e85c:	b580      	push	{r7, lr}
 800e85e:	b084      	sub	sp, #16
 800e860:	af00      	add	r7, sp, #0
 800e862:	60ba      	str	r2, [r7, #8]
 800e864:	607b      	str	r3, [r7, #4]
 800e866:	4603      	mov	r3, r0
 800e868:	81fb      	strh	r3, [r7, #14]
 800e86a:	460b      	mov	r3, r1
 800e86c:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 800e86e:	2000      	movs	r0, #0
 800e870:	f000 f868 	bl	800e944 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 800e874:	4b17      	ldr	r3, [pc, #92]	@ (800e8d4 <shci_send+0x78>)
 800e876:	681b      	ldr	r3, [r3, #0]
 800e878:	89fa      	ldrh	r2, [r7, #14]
 800e87a:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 800e87e:	4b15      	ldr	r3, [pc, #84]	@ (800e8d4 <shci_send+0x78>)
 800e880:	681b      	ldr	r3, [r3, #0]
 800e882:	7b7a      	ldrb	r2, [r7, #13]
 800e884:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 800e886:	4b13      	ldr	r3, [pc, #76]	@ (800e8d4 <shci_send+0x78>)
 800e888:	681b      	ldr	r3, [r3, #0]
 800e88a:	330c      	adds	r3, #12
 800e88c:	7b7a      	ldrb	r2, [r7, #13]
 800e88e:	68b9      	ldr	r1, [r7, #8]
 800e890:	4618      	mov	r0, r3
 800e892:	f002 f8c2 	bl	8010a1a <memcpy>
  CmdRspStatusFlag = SHCI_TL_CMD_RESP_WAIT;
 800e896:	4b10      	ldr	r3, [pc, #64]	@ (800e8d8 <shci_send+0x7c>)
 800e898:	2201      	movs	r2, #1
 800e89a:	701a      	strb	r2, [r3, #0]
  shciContext.io.Send(0,0);
 800e89c:	4b0f      	ldr	r3, [pc, #60]	@ (800e8dc <shci_send+0x80>)
 800e89e:	691b      	ldr	r3, [r3, #16]
 800e8a0:	2100      	movs	r1, #0
 800e8a2:	2000      	movs	r0, #0
 800e8a4:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 800e8a6:	f248 00e8 	movw	r0, #33000	@ 0x80e8
 800e8aa:	f7f2 fbe4 	bl	8001076 <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	f103 0008 	add.w	r0, r3, #8
 800e8b4:	4b07      	ldr	r3, [pc, #28]	@ (800e8d4 <shci_send+0x78>)
 800e8b6:	6819      	ldr	r1, [r3, #0]
 800e8b8:	4b06      	ldr	r3, [pc, #24]	@ (800e8d4 <shci_send+0x78>)
 800e8ba:	681b      	ldr	r3, [r3, #0]
 800e8bc:	789b      	ldrb	r3, [r3, #2]
 800e8be:	3303      	adds	r3, #3
 800e8c0:	461a      	mov	r2, r3
 800e8c2:	f002 f8aa 	bl	8010a1a <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800e8c6:	2001      	movs	r0, #1
 800e8c8:	f000 f83c 	bl	800e944 <Cmd_SetStatus>

  return;
 800e8cc:	bf00      	nop
}
 800e8ce:	3710      	adds	r7, #16
 800e8d0:	46bd      	mov	sp, r7
 800e8d2:	bd80      	pop	{r7, pc}
 800e8d4:	2000012c 	.word	0x2000012c
 800e8d8:	20002140 	.word	0x20002140
 800e8dc:	2000211c 	.word	0x2000211c

0800e8e0 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800e8e0:	b580      	push	{r7, lr}
 800e8e2:	b086      	sub	sp, #24
 800e8e4:	af00      	add	r7, sp, #0
 800e8e6:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 800e8e8:	4a10      	ldr	r2, [pc, #64]	@ (800e92c <TlInit+0x4c>)
 800e8ea:	687b      	ldr	r3, [r7, #4]
 800e8ec:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 800e8ee:	4810      	ldr	r0, [pc, #64]	@ (800e930 <TlInit+0x50>)
 800e8f0:	f000 faf2 	bl	800eed8 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800e8f4:	2001      	movs	r0, #1
 800e8f6:	f000 f825 	bl	800e944 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800e8fa:	4b0e      	ldr	r3, [pc, #56]	@ (800e934 <TlInit+0x54>)
 800e8fc:	2201      	movs	r2, #1
 800e8fe:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 800e900:	4b0d      	ldr	r3, [pc, #52]	@ (800e938 <TlInit+0x58>)
 800e902:	681b      	ldr	r3, [r3, #0]
 800e904:	2b00      	cmp	r3, #0
 800e906:	d00c      	beq.n	800e922 <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 800e90c:	4b0b      	ldr	r3, [pc, #44]	@ (800e93c <TlInit+0x5c>)
 800e90e:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 800e910:	4b0b      	ldr	r3, [pc, #44]	@ (800e940 <TlInit+0x60>)
 800e912:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 800e914:	4b08      	ldr	r3, [pc, #32]	@ (800e938 <TlInit+0x58>)
 800e916:	681b      	ldr	r3, [r3, #0]
 800e918:	f107 020c 	add.w	r2, r7, #12
 800e91c:	4610      	mov	r0, r2
 800e91e:	4798      	blx	r3
  }

  return;
 800e920:	bf00      	nop
 800e922:	bf00      	nop
}
 800e924:	3718      	adds	r7, #24
 800e926:	46bd      	mov	sp, r7
 800e928:	bd80      	pop	{r7, pc}
 800e92a:	bf00      	nop
 800e92c:	2000012c 	.word	0x2000012c
 800e930:	20000120 	.word	0x20000120
 800e934:	20000130 	.word	0x20000130
 800e938:	2000211c 	.word	0x2000211c
 800e93c:	0800e995 	.word	0x0800e995
 800e940:	0800e9ad 	.word	0x0800e9ad

0800e944 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 800e944:	b580      	push	{r7, lr}
 800e946:	b082      	sub	sp, #8
 800e948:	af00      	add	r7, sp, #0
 800e94a:	4603      	mov	r3, r0
 800e94c:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 800e94e:	79fb      	ldrb	r3, [r7, #7]
 800e950:	2b00      	cmp	r3, #0
 800e952:	d10b      	bne.n	800e96c <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 800e954:	4b0d      	ldr	r3, [pc, #52]	@ (800e98c <Cmd_SetStatus+0x48>)
 800e956:	681b      	ldr	r3, [r3, #0]
 800e958:	2b00      	cmp	r3, #0
 800e95a:	d003      	beq.n	800e964 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 800e95c:	4b0b      	ldr	r3, [pc, #44]	@ (800e98c <Cmd_SetStatus+0x48>)
 800e95e:	681b      	ldr	r3, [r3, #0]
 800e960:	2000      	movs	r0, #0
 800e962:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 800e964:	4b0a      	ldr	r3, [pc, #40]	@ (800e990 <Cmd_SetStatus+0x4c>)
 800e966:	2200      	movs	r2, #0
 800e968:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 800e96a:	e00b      	b.n	800e984 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 800e96c:	4b08      	ldr	r3, [pc, #32]	@ (800e990 <Cmd_SetStatus+0x4c>)
 800e96e:	2201      	movs	r2, #1
 800e970:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 800e972:	4b06      	ldr	r3, [pc, #24]	@ (800e98c <Cmd_SetStatus+0x48>)
 800e974:	681b      	ldr	r3, [r3, #0]
 800e976:	2b00      	cmp	r3, #0
 800e978:	d004      	beq.n	800e984 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 800e97a:	4b04      	ldr	r3, [pc, #16]	@ (800e98c <Cmd_SetStatus+0x48>)
 800e97c:	681b      	ldr	r3, [r3, #0]
 800e97e:	2001      	movs	r0, #1
 800e980:	4798      	blx	r3
  return;
 800e982:	bf00      	nop
 800e984:	bf00      	nop
}
 800e986:	3708      	adds	r7, #8
 800e988:	46bd      	mov	sp, r7
 800e98a:	bd80      	pop	{r7, pc}
 800e98c:	2000213c 	.word	0x2000213c
 800e990:	20000128 	.word	0x20000128

0800e994 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 800e994:	b580      	push	{r7, lr}
 800e996:	b082      	sub	sp, #8
 800e998:	af00      	add	r7, sp, #0
 800e99a:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 800e99c:	2000      	movs	r0, #0
 800e99e:	f7f2 fb5f 	bl	8001060 <shci_cmd_resp_release>

  return;
 800e9a2:	bf00      	nop
}
 800e9a4:	3708      	adds	r7, #8
 800e9a6:	46bd      	mov	sp, r7
 800e9a8:	bd80      	pop	{r7, pc}
	...

0800e9ac <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 800e9ac:	b580      	push	{r7, lr}
 800e9ae:	b082      	sub	sp, #8
 800e9b0:	af00      	add	r7, sp, #0
 800e9b2:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 800e9b4:	6879      	ldr	r1, [r7, #4]
 800e9b6:	4805      	ldr	r0, [pc, #20]	@ (800e9cc <TlUserEvtReceived+0x20>)
 800e9b8:	f000 fae6 	bl	800ef88 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800e9bc:	4803      	ldr	r0, [pc, #12]	@ (800e9cc <TlUserEvtReceived+0x20>)
 800e9be:	f7f2 fb43 	bl	8001048 <shci_notify_asynch_evt>

  return;
 800e9c2:	bf00      	nop
}
 800e9c4:	3708      	adds	r7, #8
 800e9c6:	46bd      	mov	sp, r7
 800e9c8:	bd80      	pop	{r7, pc}
 800e9ca:	bf00      	nop
 800e9cc:	20000120 	.word	0x20000120

0800e9d0 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 800e9d0:	b480      	push	{r7}
 800e9d2:	b083      	sub	sp, #12
 800e9d4:	af00      	add	r7, sp, #0
 800e9d6:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	4a05      	ldr	r2, [pc, #20]	@ (800e9f0 <shci_register_io_bus+0x20>)
 800e9dc:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 800e9de:	687b      	ldr	r3, [r7, #4]
 800e9e0:	4a04      	ldr	r2, [pc, #16]	@ (800e9f4 <shci_register_io_bus+0x24>)
 800e9e2:	611a      	str	r2, [r3, #16]

  return;
 800e9e4:	bf00      	nop
}
 800e9e6:	370c      	adds	r7, #12
 800e9e8:	46bd      	mov	sp, r7
 800e9ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9ee:	4770      	bx	lr
 800e9f0:	0800eb8d 	.word	0x0800eb8d
 800e9f4:	0800ebe1 	.word	0x0800ebe1

0800e9f8 <TL_Enable>:

/******************************************************************************
 * GENERAL - refer to AN5289 for functions description.
 ******************************************************************************/
void TL_Enable( void )
{
 800e9f8:	b580      	push	{r7, lr}
 800e9fa:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 800e9fc:	f001 fb00 	bl	8010000 <HW_IPCC_Enable>

  return;
 800ea00:	bf00      	nop
}
 800ea02:	bd80      	pop	{r7, pc}

0800ea04 <TL_Init>:


void TL_Init( void )
{
 800ea04:	b580      	push	{r7, lr}
 800ea06:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 800ea08:	4b10      	ldr	r3, [pc, #64]	@ (800ea4c <TL_Init+0x48>)
 800ea0a:	4a11      	ldr	r2, [pc, #68]	@ (800ea50 <TL_Init+0x4c>)
 800ea0c:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 800ea0e:	4b0f      	ldr	r3, [pc, #60]	@ (800ea4c <TL_Init+0x48>)
 800ea10:	4a10      	ldr	r2, [pc, #64]	@ (800ea54 <TL_Init+0x50>)
 800ea12:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 800ea14:	4b0d      	ldr	r3, [pc, #52]	@ (800ea4c <TL_Init+0x48>)
 800ea16:	4a10      	ldr	r2, [pc, #64]	@ (800ea58 <TL_Init+0x54>)
 800ea18:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 800ea1a:	4b0c      	ldr	r3, [pc, #48]	@ (800ea4c <TL_Init+0x48>)
 800ea1c:	4a0f      	ldr	r2, [pc, #60]	@ (800ea5c <TL_Init+0x58>)
 800ea1e:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 800ea20:	4b0a      	ldr	r3, [pc, #40]	@ (800ea4c <TL_Init+0x48>)
 800ea22:	4a0f      	ldr	r2, [pc, #60]	@ (800ea60 <TL_Init+0x5c>)
 800ea24:	625a      	str	r2, [r3, #36]	@ 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 800ea26:	4b09      	ldr	r3, [pc, #36]	@ (800ea4c <TL_Init+0x48>)
 800ea28:	4a0e      	ldr	r2, [pc, #56]	@ (800ea64 <TL_Init+0x60>)
 800ea2a:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 800ea2c:	4b07      	ldr	r3, [pc, #28]	@ (800ea4c <TL_Init+0x48>)
 800ea2e:	4a0e      	ldr	r2, [pc, #56]	@ (800ea68 <TL_Init+0x64>)
 800ea30:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 800ea32:	4b06      	ldr	r3, [pc, #24]	@ (800ea4c <TL_Init+0x48>)
 800ea34:	4a0d      	ldr	r2, [pc, #52]	@ (800ea6c <TL_Init+0x68>)
 800ea36:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 800ea38:	4b04      	ldr	r3, [pc, #16]	@ (800ea4c <TL_Init+0x48>)
 800ea3a:	4a0d      	ldr	r2, [pc, #52]	@ (800ea70 <TL_Init+0x6c>)
 800ea3c:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 800ea3e:	4b03      	ldr	r3, [pc, #12]	@ (800ea4c <TL_Init+0x48>)
 800ea40:	4a0c      	ldr	r2, [pc, #48]	@ (800ea74 <TL_Init+0x70>)
 800ea42:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 800ea44:	f001 faf0 	bl	8010028 <HW_IPCC_Init>

  return;
 800ea48:	bf00      	nop
}
 800ea4a:	bd80      	pop	{r7, pc}
 800ea4c:	20030000 	.word	0x20030000
 800ea50:	20030028 	.word	0x20030028
 800ea54:	20030048 	.word	0x20030048
 800ea58:	20030058 	.word	0x20030058
 800ea5c:	20030068 	.word	0x20030068
 800ea60:	20030070 	.word	0x20030070
 800ea64:	20030078 	.word	0x20030078
 800ea68:	20030080 	.word	0x20030080
 800ea6c:	2003009c 	.word	0x2003009c
 800ea70:	200300a0 	.word	0x200300a0
 800ea74:	200300ac 	.word	0x200300ac

0800ea78 <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 800ea78:	b580      	push	{r7, lr}
 800ea7a:	b084      	sub	sp, #16
 800ea7c:	af00      	add	r7, sp, #0
 800ea7e:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 800ea84:	4811      	ldr	r0, [pc, #68]	@ (800eacc <TL_BLE_Init+0x54>)
 800ea86:	f000 fa27 	bl	800eed8 <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 800ea8a:	4b11      	ldr	r3, [pc, #68]	@ (800ead0 <TL_BLE_Init+0x58>)
 800ea8c:	685b      	ldr	r3, [r3, #4]
 800ea8e:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800ea90:	68fb      	ldr	r3, [r7, #12]
 800ea92:	689a      	ldr	r2, [r3, #8]
 800ea94:	68bb      	ldr	r3, [r7, #8]
 800ea96:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 800ea98:	68fb      	ldr	r3, [r7, #12]
 800ea9a:	68da      	ldr	r2, [r3, #12]
 800ea9c:	68bb      	ldr	r3, [r7, #8]
 800ea9e:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 800eaa0:	68bb      	ldr	r3, [r7, #8]
 800eaa2:	4a0c      	ldr	r2, [pc, #48]	@ (800ead4 <TL_BLE_Init+0x5c>)
 800eaa4:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 800eaa6:	68bb      	ldr	r3, [r7, #8]
 800eaa8:	4a08      	ldr	r2, [pc, #32]	@ (800eacc <TL_BLE_Init+0x54>)
 800eaaa:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 800eaac:	f001 fad2 	bl	8010054 <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 800eab0:	68fb      	ldr	r3, [r7, #12]
 800eab2:	681b      	ldr	r3, [r3, #0]
 800eab4:	4a08      	ldr	r2, [pc, #32]	@ (800ead8 <TL_BLE_Init+0x60>)
 800eab6:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 800eab8:	68fb      	ldr	r3, [r7, #12]
 800eaba:	685b      	ldr	r3, [r3, #4]
 800eabc:	4a07      	ldr	r2, [pc, #28]	@ (800eadc <TL_BLE_Init+0x64>)
 800eabe:	6013      	str	r3, [r2, #0]

  return 0;
 800eac0:	2300      	movs	r3, #0
}
 800eac2:	4618      	mov	r0, r3
 800eac4:	3710      	adds	r7, #16
 800eac6:	46bd      	mov	sp, r7
 800eac8:	bd80      	pop	{r7, pc}
 800eaca:	bf00      	nop
 800eacc:	200300c8 	.word	0x200300c8
 800ead0:	20030000 	.word	0x20030000
 800ead4:	20030a58 	.word	0x20030a58
 800ead8:	2000214c 	.word	0x2000214c
 800eadc:	20002150 	.word	0x20002150

0800eae0 <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 800eae0:	b580      	push	{r7, lr}
 800eae2:	b082      	sub	sp, #8
 800eae4:	af00      	add	r7, sp, #0
 800eae6:	6078      	str	r0, [r7, #4]
 800eae8:	460b      	mov	r3, r1
 800eaea:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 800eaec:	4b09      	ldr	r3, [pc, #36]	@ (800eb14 <TL_BLE_SendCmd+0x34>)
 800eaee:	685b      	ldr	r3, [r3, #4]
 800eaf0:	681b      	ldr	r3, [r3, #0]
 800eaf2:	2201      	movs	r2, #1
 800eaf4:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 800eaf6:	4b07      	ldr	r3, [pc, #28]	@ (800eb14 <TL_BLE_SendCmd+0x34>)
 800eaf8:	685b      	ldr	r3, [r3, #4]
 800eafa:	681b      	ldr	r3, [r3, #0]
 800eafc:	4619      	mov	r1, r3
 800eafe:	2001      	movs	r0, #1
 800eb00:	f000 f96c 	bl	800eddc <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 800eb04:	f001 fab0 	bl	8010068 <HW_IPCC_BLE_SendCmd>

  return 0;
 800eb08:	2300      	movs	r3, #0
}
 800eb0a:	4618      	mov	r0, r3
 800eb0c:	3708      	adds	r7, #8
 800eb0e:	46bd      	mov	sp, r7
 800eb10:	bd80      	pop	{r7, pc}
 800eb12:	bf00      	nop
 800eb14:	20030000 	.word	0x20030000

0800eb18 <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 800eb18:	b580      	push	{r7, lr}
 800eb1a:	b082      	sub	sp, #8
 800eb1c:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 800eb1e:	e01c      	b.n	800eb5a <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 800eb20:	1d3b      	adds	r3, r7, #4
 800eb22:	4619      	mov	r1, r3
 800eb24:	4812      	ldr	r0, [pc, #72]	@ (800eb70 <HW_IPCC_BLE_RxEvtNot+0x58>)
 800eb26:	f000 fa76 	bl	800f016 <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800eb2a:	687b      	ldr	r3, [r7, #4]
 800eb2c:	7a5b      	ldrb	r3, [r3, #9]
 800eb2e:	2b0f      	cmp	r3, #15
 800eb30:	d003      	beq.n	800eb3a <HW_IPCC_BLE_RxEvtNot+0x22>
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	7a5b      	ldrb	r3, [r3, #9]
 800eb36:	2b0e      	cmp	r3, #14
 800eb38:	d105      	bne.n	800eb46 <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 800eb3a:	687b      	ldr	r3, [r7, #4]
 800eb3c:	4619      	mov	r1, r3
 800eb3e:	2002      	movs	r0, #2
 800eb40:	f000 f94c 	bl	800eddc <OutputDbgTrace>
 800eb44:	e004      	b.n	800eb50 <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	4619      	mov	r1, r3
 800eb4a:	2003      	movs	r0, #3
 800eb4c:	f000 f946 	bl	800eddc <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 800eb50:	4b08      	ldr	r3, [pc, #32]	@ (800eb74 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 800eb52:	681b      	ldr	r3, [r3, #0]
 800eb54:	687a      	ldr	r2, [r7, #4]
 800eb56:	4610      	mov	r0, r2
 800eb58:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 800eb5a:	4805      	ldr	r0, [pc, #20]	@ (800eb70 <HW_IPCC_BLE_RxEvtNot+0x58>)
 800eb5c:	f000 f9cc 	bl	800eef8 <LST_is_empty>
 800eb60:	4603      	mov	r3, r0
 800eb62:	2b00      	cmp	r3, #0
 800eb64:	d0dc      	beq.n	800eb20 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 800eb66:	bf00      	nop
}
 800eb68:	3708      	adds	r7, #8
 800eb6a:	46bd      	mov	sp, r7
 800eb6c:	bd80      	pop	{r7, pc}
 800eb6e:	bf00      	nop
 800eb70:	200300c8 	.word	0x200300c8
 800eb74:	2000214c 	.word	0x2000214c

0800eb78 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 800eb78:	b580      	push	{r7, lr}
 800eb7a:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 800eb7c:	4b02      	ldr	r3, [pc, #8]	@ (800eb88 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 800eb7e:	681b      	ldr	r3, [r3, #0]
 800eb80:	4798      	blx	r3

  return;
 800eb82:	bf00      	nop
}
 800eb84:	bd80      	pop	{r7, pc}
 800eb86:	bf00      	nop
 800eb88:	20002150 	.word	0x20002150

0800eb8c <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 800eb8c:	b580      	push	{r7, lr}
 800eb8e:	b084      	sub	sp, #16
 800eb90:	af00      	add	r7, sp, #0
 800eb92:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 800eb98:	480d      	ldr	r0, [pc, #52]	@ (800ebd0 <TL_SYS_Init+0x44>)
 800eb9a:	f000 f99d 	bl	800eed8 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 800eb9e:	4b0d      	ldr	r3, [pc, #52]	@ (800ebd4 <TL_SYS_Init+0x48>)
 800eba0:	68db      	ldr	r3, [r3, #12]
 800eba2:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800eba4:	68fb      	ldr	r3, [r7, #12]
 800eba6:	689a      	ldr	r2, [r3, #8]
 800eba8:	68bb      	ldr	r3, [r7, #8]
 800ebaa:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 800ebac:	68bb      	ldr	r3, [r7, #8]
 800ebae:	4a08      	ldr	r2, [pc, #32]	@ (800ebd0 <TL_SYS_Init+0x44>)
 800ebb0:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 800ebb2:	f001 fa7b 	bl	80100ac <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 800ebb6:	68fb      	ldr	r3, [r7, #12]
 800ebb8:	681b      	ldr	r3, [r3, #0]
 800ebba:	4a07      	ldr	r2, [pc, #28]	@ (800ebd8 <TL_SYS_Init+0x4c>)
 800ebbc:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 800ebbe:	68fb      	ldr	r3, [r7, #12]
 800ebc0:	685b      	ldr	r3, [r3, #4]
 800ebc2:	4a06      	ldr	r2, [pc, #24]	@ (800ebdc <TL_SYS_Init+0x50>)
 800ebc4:	6013      	str	r3, [r2, #0]

  return 0;
 800ebc6:	2300      	movs	r3, #0
}
 800ebc8:	4618      	mov	r0, r3
 800ebca:	3710      	adds	r7, #16
 800ebcc:	46bd      	mov	sp, r7
 800ebce:	bd80      	pop	{r7, pc}
 800ebd0:	200300d0 	.word	0x200300d0
 800ebd4:	20030000 	.word	0x20030000
 800ebd8:	20002154 	.word	0x20002154
 800ebdc:	20002158 	.word	0x20002158

0800ebe0 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 800ebe0:	b580      	push	{r7, lr}
 800ebe2:	b082      	sub	sp, #8
 800ebe4:	af00      	add	r7, sp, #0
 800ebe6:	6078      	str	r0, [r7, #4]
 800ebe8:	460b      	mov	r3, r1
 800ebea:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 800ebec:	4b09      	ldr	r3, [pc, #36]	@ (800ec14 <TL_SYS_SendCmd+0x34>)
 800ebee:	68db      	ldr	r3, [r3, #12]
 800ebf0:	681b      	ldr	r3, [r3, #0]
 800ebf2:	2210      	movs	r2, #16
 800ebf4:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 800ebf6:	4b07      	ldr	r3, [pc, #28]	@ (800ec14 <TL_SYS_SendCmd+0x34>)
 800ebf8:	68db      	ldr	r3, [r3, #12]
 800ebfa:	681b      	ldr	r3, [r3, #0]
 800ebfc:	4619      	mov	r1, r3
 800ebfe:	2004      	movs	r0, #4
 800ec00:	f000 f8ec 	bl	800eddc <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 800ec04:	f001 fa5c 	bl	80100c0 <HW_IPCC_SYS_SendCmd>

  return 0;
 800ec08:	2300      	movs	r3, #0
}
 800ec0a:	4618      	mov	r0, r3
 800ec0c:	3708      	adds	r7, #8
 800ec0e:	46bd      	mov	sp, r7
 800ec10:	bd80      	pop	{r7, pc}
 800ec12:	bf00      	nop
 800ec14:	20030000 	.word	0x20030000

0800ec18 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 800ec18:	b580      	push	{r7, lr}
 800ec1a:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800ec1c:	4b07      	ldr	r3, [pc, #28]	@ (800ec3c <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800ec1e:	68db      	ldr	r3, [r3, #12]
 800ec20:	681b      	ldr	r3, [r3, #0]
 800ec22:	4619      	mov	r1, r3
 800ec24:	2005      	movs	r0, #5
 800ec26:	f000 f8d9 	bl	800eddc <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800ec2a:	4b05      	ldr	r3, [pc, #20]	@ (800ec40 <HW_IPCC_SYS_CmdEvtNot+0x28>)
 800ec2c:	681b      	ldr	r3, [r3, #0]
 800ec2e:	4a03      	ldr	r2, [pc, #12]	@ (800ec3c <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800ec30:	68d2      	ldr	r2, [r2, #12]
 800ec32:	6812      	ldr	r2, [r2, #0]
 800ec34:	4610      	mov	r0, r2
 800ec36:	4798      	blx	r3

  return;
 800ec38:	bf00      	nop
}
 800ec3a:	bd80      	pop	{r7, pc}
 800ec3c:	20030000 	.word	0x20030000
 800ec40:	20002154 	.word	0x20002154

0800ec44 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 800ec44:	b580      	push	{r7, lr}
 800ec46:	b082      	sub	sp, #8
 800ec48:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800ec4a:	e00e      	b.n	800ec6a <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 800ec4c:	1d3b      	adds	r3, r7, #4
 800ec4e:	4619      	mov	r1, r3
 800ec50:	480b      	ldr	r0, [pc, #44]	@ (800ec80 <HW_IPCC_SYS_EvtNot+0x3c>)
 800ec52:	f000 f9e0 	bl	800f016 <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 800ec56:	687b      	ldr	r3, [r7, #4]
 800ec58:	4619      	mov	r1, r3
 800ec5a:	2006      	movs	r0, #6
 800ec5c:	f000 f8be 	bl	800eddc <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 800ec60:	4b08      	ldr	r3, [pc, #32]	@ (800ec84 <HW_IPCC_SYS_EvtNot+0x40>)
 800ec62:	681b      	ldr	r3, [r3, #0]
 800ec64:	687a      	ldr	r2, [r7, #4]
 800ec66:	4610      	mov	r0, r2
 800ec68:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800ec6a:	4805      	ldr	r0, [pc, #20]	@ (800ec80 <HW_IPCC_SYS_EvtNot+0x3c>)
 800ec6c:	f000 f944 	bl	800eef8 <LST_is_empty>
 800ec70:	4603      	mov	r3, r0
 800ec72:	2b00      	cmp	r3, #0
 800ec74:	d0ea      	beq.n	800ec4c <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 800ec76:	bf00      	nop
}
 800ec78:	3708      	adds	r7, #8
 800ec7a:	46bd      	mov	sp, r7
 800ec7c:	bd80      	pop	{r7, pc}
 800ec7e:	bf00      	nop
 800ec80:	200300d0 	.word	0x200300d0
 800ec84:	20002158 	.word	0x20002158

0800ec88 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 800ec88:	b580      	push	{r7, lr}
 800ec8a:	b082      	sub	sp, #8
 800ec8c:	af00      	add	r7, sp, #0
 800ec8e:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 800ec90:	4817      	ldr	r0, [pc, #92]	@ (800ecf0 <TL_MM_Init+0x68>)
 800ec92:	f000 f921 	bl	800eed8 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 800ec96:	4817      	ldr	r0, [pc, #92]	@ (800ecf4 <TL_MM_Init+0x6c>)
 800ec98:	f000 f91e 	bl	800eed8 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 800ec9c:	4b16      	ldr	r3, [pc, #88]	@ (800ecf8 <TL_MM_Init+0x70>)
 800ec9e:	691b      	ldr	r3, [r3, #16]
 800eca0:	4a16      	ldr	r2, [pc, #88]	@ (800ecfc <TL_MM_Init+0x74>)
 800eca2:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 800eca4:	4b15      	ldr	r3, [pc, #84]	@ (800ecfc <TL_MM_Init+0x74>)
 800eca6:	681b      	ldr	r3, [r3, #0]
 800eca8:	687a      	ldr	r2, [r7, #4]
 800ecaa:	6892      	ldr	r2, [r2, #8]
 800ecac:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 800ecae:	4b13      	ldr	r3, [pc, #76]	@ (800ecfc <TL_MM_Init+0x74>)
 800ecb0:	681b      	ldr	r3, [r3, #0]
 800ecb2:	687a      	ldr	r2, [r7, #4]
 800ecb4:	68d2      	ldr	r2, [r2, #12]
 800ecb6:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 800ecb8:	4b10      	ldr	r3, [pc, #64]	@ (800ecfc <TL_MM_Init+0x74>)
 800ecba:	681b      	ldr	r3, [r3, #0]
 800ecbc:	4a0c      	ldr	r2, [pc, #48]	@ (800ecf0 <TL_MM_Init+0x68>)
 800ecbe:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 800ecc0:	4b0e      	ldr	r3, [pc, #56]	@ (800ecfc <TL_MM_Init+0x74>)
 800ecc2:	681b      	ldr	r3, [r3, #0]
 800ecc4:	687a      	ldr	r2, [r7, #4]
 800ecc6:	6812      	ldr	r2, [r2, #0]
 800ecc8:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 800ecca:	4b0c      	ldr	r3, [pc, #48]	@ (800ecfc <TL_MM_Init+0x74>)
 800eccc:	681b      	ldr	r3, [r3, #0]
 800ecce:	687a      	ldr	r2, [r7, #4]
 800ecd0:	6852      	ldr	r2, [r2, #4]
 800ecd2:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 800ecd4:	4b09      	ldr	r3, [pc, #36]	@ (800ecfc <TL_MM_Init+0x74>)
 800ecd6:	681b      	ldr	r3, [r3, #0]
 800ecd8:	687a      	ldr	r2, [r7, #4]
 800ecda:	6912      	ldr	r2, [r2, #16]
 800ecdc:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 800ecde:	4b07      	ldr	r3, [pc, #28]	@ (800ecfc <TL_MM_Init+0x74>)
 800ece0:	681b      	ldr	r3, [r3, #0]
 800ece2:	687a      	ldr	r2, [r7, #4]
 800ece4:	6952      	ldr	r2, [r2, #20]
 800ece6:	619a      	str	r2, [r3, #24]

  return;
 800ece8:	bf00      	nop
}
 800ecea:	3708      	adds	r7, #8
 800ecec:	46bd      	mov	sp, r7
 800ecee:	bd80      	pop	{r7, pc}
 800ecf0:	200300b8 	.word	0x200300b8
 800ecf4:	20002144 	.word	0x20002144
 800ecf8:	20030000 	.word	0x20030000
 800ecfc:	2000215c 	.word	0x2000215c

0800ed00 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 800ed00:	b580      	push	{r7, lr}
 800ed02:	b082      	sub	sp, #8
 800ed04:	af00      	add	r7, sp, #0
 800ed06:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 800ed08:	6879      	ldr	r1, [r7, #4]
 800ed0a:	4807      	ldr	r0, [pc, #28]	@ (800ed28 <TL_MM_EvtDone+0x28>)
 800ed0c:	f000 f93c 	bl	800ef88 <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 800ed10:	6879      	ldr	r1, [r7, #4]
 800ed12:	2000      	movs	r0, #0
 800ed14:	f000 f862 	bl	800eddc <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 800ed18:	4804      	ldr	r0, [pc, #16]	@ (800ed2c <TL_MM_EvtDone+0x2c>)
 800ed1a:	f001 f9f7 	bl	801010c <HW_IPCC_MM_SendFreeBuf>

  return;
 800ed1e:	bf00      	nop
}
 800ed20:	3708      	adds	r7, #8
 800ed22:	46bd      	mov	sp, r7
 800ed24:	bd80      	pop	{r7, pc}
 800ed26:	bf00      	nop
 800ed28:	20002144 	.word	0x20002144
 800ed2c:	0800ed31 	.word	0x0800ed31

0800ed30 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 800ed30:	b580      	push	{r7, lr}
 800ed32:	b082      	sub	sp, #8
 800ed34:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800ed36:	e00c      	b.n	800ed52 <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 800ed38:	1d3b      	adds	r3, r7, #4
 800ed3a:	4619      	mov	r1, r3
 800ed3c:	480a      	ldr	r0, [pc, #40]	@ (800ed68 <SendFreeBuf+0x38>)
 800ed3e:	f000 f96a 	bl	800f016 <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 800ed42:	4b0a      	ldr	r3, [pc, #40]	@ (800ed6c <SendFreeBuf+0x3c>)
 800ed44:	691b      	ldr	r3, [r3, #16]
 800ed46:	691b      	ldr	r3, [r3, #16]
 800ed48:	687a      	ldr	r2, [r7, #4]
 800ed4a:	4611      	mov	r1, r2
 800ed4c:	4618      	mov	r0, r3
 800ed4e:	f000 f91b 	bl	800ef88 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800ed52:	4805      	ldr	r0, [pc, #20]	@ (800ed68 <SendFreeBuf+0x38>)
 800ed54:	f000 f8d0 	bl	800eef8 <LST_is_empty>
 800ed58:	4603      	mov	r3, r0
 800ed5a:	2b00      	cmp	r3, #0
 800ed5c:	d0ec      	beq.n	800ed38 <SendFreeBuf+0x8>
  }

  return;
 800ed5e:	bf00      	nop
}
 800ed60:	3708      	adds	r7, #8
 800ed62:	46bd      	mov	sp, r7
 800ed64:	bd80      	pop	{r7, pc}
 800ed66:	bf00      	nop
 800ed68:	20002144 	.word	0x20002144
 800ed6c:	20030000 	.word	0x20030000

0800ed70 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 800ed70:	b580      	push	{r7, lr}
 800ed72:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 800ed74:	4805      	ldr	r0, [pc, #20]	@ (800ed8c <TL_TRACES_Init+0x1c>)
 800ed76:	f000 f8af 	bl	800eed8 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 800ed7a:	4b05      	ldr	r3, [pc, #20]	@ (800ed90 <TL_TRACES_Init+0x20>)
 800ed7c:	695b      	ldr	r3, [r3, #20]
 800ed7e:	4a03      	ldr	r2, [pc, #12]	@ (800ed8c <TL_TRACES_Init+0x1c>)
 800ed80:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 800ed82:	f001 f9f9 	bl	8010178 <HW_IPCC_TRACES_Init>

  return;
 800ed86:	bf00      	nop
}
 800ed88:	bd80      	pop	{r7, pc}
 800ed8a:	bf00      	nop
 800ed8c:	200300c0 	.word	0x200300c0
 800ed90:	20030000 	.word	0x20030000

0800ed94 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 800ed94:	b580      	push	{r7, lr}
 800ed96:	b082      	sub	sp, #8
 800ed98:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800ed9a:	e008      	b.n	800edae <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 800ed9c:	1d3b      	adds	r3, r7, #4
 800ed9e:	4619      	mov	r1, r3
 800eda0:	4808      	ldr	r0, [pc, #32]	@ (800edc4 <HW_IPCC_TRACES_EvtNot+0x30>)
 800eda2:	f000 f938 	bl	800f016 <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 800eda6:	687b      	ldr	r3, [r7, #4]
 800eda8:	4618      	mov	r0, r3
 800edaa:	f000 f80d 	bl	800edc8 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800edae:	4805      	ldr	r0, [pc, #20]	@ (800edc4 <HW_IPCC_TRACES_EvtNot+0x30>)
 800edb0:	f000 f8a2 	bl	800eef8 <LST_is_empty>
 800edb4:	4603      	mov	r3, r0
 800edb6:	2b00      	cmp	r3, #0
 800edb8:	d0f0      	beq.n	800ed9c <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 800edba:	bf00      	nop
}
 800edbc:	3708      	adds	r7, #8
 800edbe:	46bd      	mov	sp, r7
 800edc0:	bd80      	pop	{r7, pc}
 800edc2:	bf00      	nop
 800edc4:	200300c0 	.word	0x200300c0

0800edc8 <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 800edc8:	b480      	push	{r7}
 800edca:	b083      	sub	sp, #12
 800edcc:	af00      	add	r7, sp, #0
 800edce:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 800edd0:	bf00      	nop
 800edd2:	370c      	adds	r7, #12
 800edd4:	46bd      	mov	sp, r7
 800edd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edda:	4770      	bx	lr

0800eddc <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 800eddc:	b480      	push	{r7}
 800edde:	b085      	sub	sp, #20
 800ede0:	af00      	add	r7, sp, #0
 800ede2:	4603      	mov	r3, r0
 800ede4:	6039      	str	r1, [r7, #0]
 800ede6:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 800ede8:	79fb      	ldrb	r3, [r7, #7]
 800edea:	2b06      	cmp	r3, #6
 800edec:	d845      	bhi.n	800ee7a <OutputDbgTrace+0x9e>
 800edee:	a201      	add	r2, pc, #4	@ (adr r2, 800edf4 <OutputDbgTrace+0x18>)
 800edf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800edf4:	0800ee11 	.word	0x0800ee11
 800edf8:	0800ee35 	.word	0x0800ee35
 800edfc:	0800ee3b 	.word	0x0800ee3b
 800ee00:	0800ee4f 	.word	0x0800ee4f
 800ee04:	0800ee5b 	.word	0x0800ee5b
 800ee08:	0800ee61 	.word	0x0800ee61
 800ee0c:	0800ee6f 	.word	0x0800ee6f
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800ee10:	683b      	ldr	r3, [r7, #0]
 800ee12:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800ee14:	68fb      	ldr	r3, [r7, #12]
 800ee16:	7a5b      	ldrb	r3, [r3, #9]
 800ee18:	2bff      	cmp	r3, #255	@ 0xff
 800ee1a:	d005      	beq.n	800ee28 <OutputDbgTrace+0x4c>
 800ee1c:	2bff      	cmp	r3, #255	@ 0xff
 800ee1e:	dc05      	bgt.n	800ee2c <OutputDbgTrace+0x50>
 800ee20:	2b0e      	cmp	r3, #14
 800ee22:	d005      	beq.n	800ee30 <OutputDbgTrace+0x54>
 800ee24:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 800ee26:	e001      	b.n	800ee2c <OutputDbgTrace+0x50>
          break;
 800ee28:	bf00      	nop
 800ee2a:	e027      	b.n	800ee7c <OutputDbgTrace+0xa0>
          break;
 800ee2c:	bf00      	nop
 800ee2e:	e025      	b.n	800ee7c <OutputDbgTrace+0xa0>
          break;
 800ee30:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 800ee32:	e023      	b.n	800ee7c <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800ee34:	683b      	ldr	r3, [r7, #0]
 800ee36:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800ee38:	e020      	b.n	800ee7c <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800ee3a:	683b      	ldr	r3, [r7, #0]
 800ee3c:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800ee3e:	68fb      	ldr	r3, [r7, #12]
 800ee40:	7a5b      	ldrb	r3, [r3, #9]
 800ee42:	2b0e      	cmp	r3, #14
 800ee44:	d001      	beq.n	800ee4a <OutputDbgTrace+0x6e>
 800ee46:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800ee48:	e000      	b.n	800ee4c <OutputDbgTrace+0x70>
          break;
 800ee4a:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800ee4c:	e016      	b.n	800ee7c <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800ee4e:	683b      	ldr	r3, [r7, #0]
 800ee50:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800ee52:	68fb      	ldr	r3, [r7, #12]
 800ee54:	7a5b      	ldrb	r3, [r3, #9]
 800ee56:	2bff      	cmp	r3, #255	@ 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800ee58:	e010      	b.n	800ee7c <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800ee5a:	683b      	ldr	r3, [r7, #0]
 800ee5c:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800ee5e:	e00d      	b.n	800ee7c <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800ee60:	683b      	ldr	r3, [r7, #0]
 800ee62:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800ee64:	68fb      	ldr	r3, [r7, #12]
 800ee66:	7a5b      	ldrb	r3, [r3, #9]
 800ee68:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800ee6a:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800ee6c:	e006      	b.n	800ee7c <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800ee6e:	683b      	ldr	r3, [r7, #0]
 800ee70:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800ee72:	68fb      	ldr	r3, [r7, #12]
 800ee74:	7a5b      	ldrb	r3, [r3, #9]
 800ee76:	2bff      	cmp	r3, #255	@ 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800ee78:	e000      	b.n	800ee7c <OutputDbgTrace+0xa0>

    default:
      break;
 800ee7a:	bf00      	nop
  }

  return;
 800ee7c:	bf00      	nop
}
 800ee7e:	3714      	adds	r7, #20
 800ee80:	46bd      	mov	sp, r7
 800ee82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee86:	4770      	bx	lr

0800ee88 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 800ee88:	b480      	push	{r7}
 800ee8a:	b085      	sub	sp, #20
 800ee8c:	af00      	add	r7, sp, #0
 800ee8e:	4603      	mov	r3, r0
 800ee90:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 800ee92:	4b0f      	ldr	r3, [pc, #60]	@ (800eed0 <OTP_Read+0x48>)
 800ee94:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800ee96:	e002      	b.n	800ee9e <OTP_Read+0x16>
  {
    p_id -= 8 ;
 800ee98:	68fb      	ldr	r3, [r7, #12]
 800ee9a:	3b08      	subs	r3, #8
 800ee9c:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800ee9e:	68fb      	ldr	r3, [r7, #12]
 800eea0:	3307      	adds	r3, #7
 800eea2:	781b      	ldrb	r3, [r3, #0]
 800eea4:	79fa      	ldrb	r2, [r7, #7]
 800eea6:	429a      	cmp	r2, r3
 800eea8:	d003      	beq.n	800eeb2 <OTP_Read+0x2a>
 800eeaa:	68fb      	ldr	r3, [r7, #12]
 800eeac:	4a09      	ldr	r2, [pc, #36]	@ (800eed4 <OTP_Read+0x4c>)
 800eeae:	4293      	cmp	r3, r2
 800eeb0:	d1f2      	bne.n	800ee98 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 800eeb2:	68fb      	ldr	r3, [r7, #12]
 800eeb4:	3307      	adds	r3, #7
 800eeb6:	781b      	ldrb	r3, [r3, #0]
 800eeb8:	79fa      	ldrb	r2, [r7, #7]
 800eeba:	429a      	cmp	r2, r3
 800eebc:	d001      	beq.n	800eec2 <OTP_Read+0x3a>
  {
    p_id = 0 ;
 800eebe:	2300      	movs	r3, #0
 800eec0:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 800eec2:	68fb      	ldr	r3, [r7, #12]
}
 800eec4:	4618      	mov	r0, r3
 800eec6:	3714      	adds	r7, #20
 800eec8:	46bd      	mov	sp, r7
 800eeca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eece:	4770      	bx	lr
 800eed0:	1fff73f8 	.word	0x1fff73f8
 800eed4:	1fff7000 	.word	0x1fff7000

0800eed8 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 800eed8:	b480      	push	{r7}
 800eeda:	b083      	sub	sp, #12
 800eedc:	af00      	add	r7, sp, #0
 800eede:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 800eee0:	687b      	ldr	r3, [r7, #4]
 800eee2:	687a      	ldr	r2, [r7, #4]
 800eee4:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 800eee6:	687b      	ldr	r3, [r7, #4]
 800eee8:	687a      	ldr	r2, [r7, #4]
 800eeea:	605a      	str	r2, [r3, #4]
}
 800eeec:	bf00      	nop
 800eeee:	370c      	adds	r7, #12
 800eef0:	46bd      	mov	sp, r7
 800eef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eef6:	4770      	bx	lr

0800eef8 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 800eef8:	b480      	push	{r7}
 800eefa:	b087      	sub	sp, #28
 800eefc:	af00      	add	r7, sp, #0
 800eefe:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ef00:	f3ef 8310 	mrs	r3, PRIMASK
 800ef04:	60fb      	str	r3, [r7, #12]
  return(result);
 800ef06:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800ef08:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800ef0a:	b672      	cpsid	i
}
 800ef0c:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 800ef0e:	687b      	ldr	r3, [r7, #4]
 800ef10:	681b      	ldr	r3, [r3, #0]
 800ef12:	687a      	ldr	r2, [r7, #4]
 800ef14:	429a      	cmp	r2, r3
 800ef16:	d102      	bne.n	800ef1e <LST_is_empty+0x26>
  {
    return_value = TRUE;
 800ef18:	2301      	movs	r3, #1
 800ef1a:	75fb      	strb	r3, [r7, #23]
 800ef1c:	e001      	b.n	800ef22 <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 800ef1e:	2300      	movs	r3, #0
 800ef20:	75fb      	strb	r3, [r7, #23]
 800ef22:	693b      	ldr	r3, [r7, #16]
 800ef24:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ef26:	68bb      	ldr	r3, [r7, #8]
 800ef28:	f383 8810 	msr	PRIMASK, r3
}
 800ef2c:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 800ef2e:	7dfb      	ldrb	r3, [r7, #23]
}
 800ef30:	4618      	mov	r0, r3
 800ef32:	371c      	adds	r7, #28
 800ef34:	46bd      	mov	sp, r7
 800ef36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef3a:	4770      	bx	lr

0800ef3c <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 800ef3c:	b480      	push	{r7}
 800ef3e:	b087      	sub	sp, #28
 800ef40:	af00      	add	r7, sp, #0
 800ef42:	6078      	str	r0, [r7, #4]
 800ef44:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ef46:	f3ef 8310 	mrs	r3, PRIMASK
 800ef4a:	60fb      	str	r3, [r7, #12]
  return(result);
 800ef4c:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800ef4e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800ef50:	b672      	cpsid	i
}
 800ef52:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 800ef54:	687b      	ldr	r3, [r7, #4]
 800ef56:	681a      	ldr	r2, [r3, #0]
 800ef58:	683b      	ldr	r3, [r7, #0]
 800ef5a:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 800ef5c:	683b      	ldr	r3, [r7, #0]
 800ef5e:	687a      	ldr	r2, [r7, #4]
 800ef60:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	683a      	ldr	r2, [r7, #0]
 800ef66:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 800ef68:	683b      	ldr	r3, [r7, #0]
 800ef6a:	681b      	ldr	r3, [r3, #0]
 800ef6c:	683a      	ldr	r2, [r7, #0]
 800ef6e:	605a      	str	r2, [r3, #4]
 800ef70:	697b      	ldr	r3, [r7, #20]
 800ef72:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ef74:	693b      	ldr	r3, [r7, #16]
 800ef76:	f383 8810 	msr	PRIMASK, r3
}
 800ef7a:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800ef7c:	bf00      	nop
 800ef7e:	371c      	adds	r7, #28
 800ef80:	46bd      	mov	sp, r7
 800ef82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef86:	4770      	bx	lr

0800ef88 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 800ef88:	b480      	push	{r7}
 800ef8a:	b087      	sub	sp, #28
 800ef8c:	af00      	add	r7, sp, #0
 800ef8e:	6078      	str	r0, [r7, #4]
 800ef90:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ef92:	f3ef 8310 	mrs	r3, PRIMASK
 800ef96:	60fb      	str	r3, [r7, #12]
  return(result);
 800ef98:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800ef9a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800ef9c:	b672      	cpsid	i
}
 800ef9e:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 800efa0:	683b      	ldr	r3, [r7, #0]
 800efa2:	687a      	ldr	r2, [r7, #4]
 800efa4:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 800efa6:	687b      	ldr	r3, [r7, #4]
 800efa8:	685a      	ldr	r2, [r3, #4]
 800efaa:	683b      	ldr	r3, [r7, #0]
 800efac:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 800efae:	687b      	ldr	r3, [r7, #4]
 800efb0:	683a      	ldr	r2, [r7, #0]
 800efb2:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 800efb4:	683b      	ldr	r3, [r7, #0]
 800efb6:	685b      	ldr	r3, [r3, #4]
 800efb8:	683a      	ldr	r2, [r7, #0]
 800efba:	601a      	str	r2, [r3, #0]
 800efbc:	697b      	ldr	r3, [r7, #20]
 800efbe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800efc0:	693b      	ldr	r3, [r7, #16]
 800efc2:	f383 8810 	msr	PRIMASK, r3
}
 800efc6:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800efc8:	bf00      	nop
 800efca:	371c      	adds	r7, #28
 800efcc:	46bd      	mov	sp, r7
 800efce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efd2:	4770      	bx	lr

0800efd4 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 800efd4:	b480      	push	{r7}
 800efd6:	b087      	sub	sp, #28
 800efd8:	af00      	add	r7, sp, #0
 800efda:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800efdc:	f3ef 8310 	mrs	r3, PRIMASK
 800efe0:	60fb      	str	r3, [r7, #12]
  return(result);
 800efe2:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800efe4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800efe6:	b672      	cpsid	i
}
 800efe8:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 800efea:	687b      	ldr	r3, [r7, #4]
 800efec:	685b      	ldr	r3, [r3, #4]
 800efee:	687a      	ldr	r2, [r7, #4]
 800eff0:	6812      	ldr	r2, [r2, #0]
 800eff2:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	681b      	ldr	r3, [r3, #0]
 800eff8:	687a      	ldr	r2, [r7, #4]
 800effa:	6852      	ldr	r2, [r2, #4]
 800effc:	605a      	str	r2, [r3, #4]
 800effe:	697b      	ldr	r3, [r7, #20]
 800f000:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f002:	693b      	ldr	r3, [r7, #16]
 800f004:	f383 8810 	msr	PRIMASK, r3
}
 800f008:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800f00a:	bf00      	nop
 800f00c:	371c      	adds	r7, #28
 800f00e:	46bd      	mov	sp, r7
 800f010:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f014:	4770      	bx	lr

0800f016 <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 800f016:	b580      	push	{r7, lr}
 800f018:	b086      	sub	sp, #24
 800f01a:	af00      	add	r7, sp, #0
 800f01c:	6078      	str	r0, [r7, #4]
 800f01e:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f020:	f3ef 8310 	mrs	r3, PRIMASK
 800f024:	60fb      	str	r3, [r7, #12]
  return(result);
 800f026:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800f028:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800f02a:	b672      	cpsid	i
}
 800f02c:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 800f02e:	687b      	ldr	r3, [r7, #4]
 800f030:	681a      	ldr	r2, [r3, #0]
 800f032:	683b      	ldr	r3, [r7, #0]
 800f034:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 800f036:	687b      	ldr	r3, [r7, #4]
 800f038:	681b      	ldr	r3, [r3, #0]
 800f03a:	4618      	mov	r0, r3
 800f03c:	f7ff ffca 	bl	800efd4 <LST_remove_node>
 800f040:	697b      	ldr	r3, [r7, #20]
 800f042:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f044:	693b      	ldr	r3, [r7, #16]
 800f046:	f383 8810 	msr	PRIMASK, r3
}
 800f04a:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800f04c:	bf00      	nop
 800f04e:	3718      	adds	r7, #24
 800f050:	46bd      	mov	sp, r7
 800f052:	bd80      	pop	{r7, pc}

0800f054 <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 800f054:	b480      	push	{r7}
 800f056:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 800f058:	4b03      	ldr	r3, [pc, #12]	@ (800f068 <LL_FLASH_GetUDN+0x14>)
 800f05a:	681b      	ldr	r3, [r3, #0]
}
 800f05c:	4618      	mov	r0, r3
 800f05e:	46bd      	mov	sp, r7
 800f060:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f064:	4770      	bx	lr
 800f066:	bf00      	nop
 800f068:	1fff7580 	.word	0x1fff7580

0800f06c <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 for STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 800f06c:	b480      	push	{r7}
 800f06e:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 800f070:	4b03      	ldr	r3, [pc, #12]	@ (800f080 <LL_FLASH_GetDeviceID+0x14>)
 800f072:	681b      	ldr	r3, [r3, #0]
 800f074:	b2db      	uxtb	r3, r3
}
 800f076:	4618      	mov	r0, r3
 800f078:	46bd      	mov	sp, r7
 800f07a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f07e:	4770      	bx	lr
 800f080:	1fff7584 	.word	0x1fff7584

0800f084 <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 800f084:	b480      	push	{r7}
 800f086:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 800f088:	4b03      	ldr	r3, [pc, #12]	@ (800f098 <LL_FLASH_GetSTCompanyID+0x14>)
 800f08a:	681b      	ldr	r3, [r3, #0]
 800f08c:	0a1b      	lsrs	r3, r3, #8
}
 800f08e:	4618      	mov	r0, r3
 800f090:	46bd      	mov	sp, r7
 800f092:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f096:	4770      	bx	lr
 800f098:	1fff7584 	.word	0x1fff7584

0800f09c <APP_BLE_Init>:

/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init(void)
{
 800f09c:	b5b0      	push	{r4, r5, r7, lr}
 800f09e:	b090      	sub	sp, #64	@ 0x40
 800f0a0:	af00      	add	r7, sp, #0
  SHCI_CmdStatus_t status;
#if (RADIO_ACTIVITY_EVENT != 0)
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800f0a2:	2392      	movs	r3, #146	@ 0x92
 800f0a4:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#endif /* RADIO_ACTIVITY_EVENT != 0 */
  /* USER CODE BEGIN APP_BLE_Init_1 */

  UTIL_SEQ_RegTask( 1<<CFG_TASK_MY_TASK_BLE, UTIL_SEQ_RFU, myTask_BLE);
 800f0a8:	4a2e      	ldr	r2, [pc, #184]	@ (800f164 <APP_BLE_Init+0xc8>)
 800f0aa:	2100      	movs	r1, #0
 800f0ac:	2004      	movs	r0, #4
 800f0ae:	f001 f9b7 	bl	8010420 <UTIL_SEQ_RegTask>
  UTIL_SEQ_SetTask(1 << CFG_TASK_MY_TASK_BLE, CFG_SCH_PRIO_0);
 800f0b2:	2100      	movs	r1, #0
 800f0b4:	2004      	movs	r0, #4
 800f0b6:	f001 f9d5 	bl	8010464 <UTIL_SEQ_SetTask>

  UTIL_SEQ_RegTask( 1<<CFG_TASK_MY_TASK_IMU, UTIL_SEQ_RFU, myTask_IMU);
 800f0ba:	4a2b      	ldr	r2, [pc, #172]	@ (800f168 <APP_BLE_Init+0xcc>)
 800f0bc:	2100      	movs	r1, #0
 800f0be:	2008      	movs	r0, #8
 800f0c0:	f001 f9ae 	bl	8010420 <UTIL_SEQ_RegTask>
  UTIL_SEQ_SetTask(1 << CFG_TASK_MY_TASK_IMU, CFG_SCH_PRIO_0);
 800f0c4:	2100      	movs	r1, #0
 800f0c6:	2008      	movs	r0, #8
 800f0c8:	f001 f9cc 	bl	8010464 <UTIL_SEQ_SetTask>

  /* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 800f0cc:	4b27      	ldr	r3, [pc, #156]	@ (800f16c <APP_BLE_Init+0xd0>)
 800f0ce:	1d3c      	adds	r4, r7, #4
 800f0d0:	461d      	mov	r5, r3
 800f0d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f0d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f0d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f0d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f0da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f0dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f0de:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800f0e2:	c403      	stmia	r4!, {r0, r1}
 800f0e4:	8022      	strh	r2, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init();
 800f0e6:	f000 f917 	bl	800f318 <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 800f0ea:	2101      	movs	r1, #1
 800f0ec:	2002      	movs	r0, #2
 800f0ee:	f001 f86b 	bl	80101c8 <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 800f0f2:	4a1f      	ldr	r2, [pc, #124]	@ (800f170 <APP_BLE_Init+0xd4>)
 800f0f4:	2100      	movs	r1, #0
 800f0f6:	2002      	movs	r0, #2
 800f0f8:	f001 f992 	bl	8010420 <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  status = SHCI_C2_BLE_Init(&ble_init_cmd_packet);
 800f0fc:	1d3b      	adds	r3, r7, #4
 800f0fe:	4618      	mov	r0, r3
 800f100:	f7ff f8b4 	bl	800e26c <SHCI_C2_BLE_Init>
 800f104:	4603      	mov	r3, r0
 800f106:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  if (status != SHCI_Success)
 800f10a:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800f10e:	2b00      	cmp	r3, #0
 800f110:	d001      	beq.n	800f116 <APP_BLE_Init+0x7a>
  {
    APP_DBG_MSG("  Fail   : SHCI_C2_BLE_Init command, result: 0x%02x\n\r", status);
    /* if you are here, maybe CPU2 doesn't contain STM32WB_Copro_Wireless_Binaries, see Release_Notes.html */
    Error_Handler();
 800f112:	f7f6 feb9 	bl	8005e88 <Error_Handler>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 800f116:	f000 f915 	bl	800f344 <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 800f11a:	f7ff f801 	bl	800e120 <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800f11e:	4b15      	ldr	r3, [pc, #84]	@ (800f174 <APP_BLE_Init+0xd8>)
 800f120:	2200      	movs	r2, #0
 800f122:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 800f126:	4b13      	ldr	r3, [pc, #76]	@ (800f174 <APP_BLE_Init+0xd8>)
 800f128:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800f12c:	82da      	strh	r2, [r3, #22]

  /**
   * From here, all initialization are BLE application specific
   */

  UTIL_SEQ_RegTask(1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 800f12e:	4a12      	ldr	r2, [pc, #72]	@ (800f178 <APP_BLE_Init+0xdc>)
 800f130:	2100      	movs	r1, #0
 800f132:	2001      	movs	r0, #1
 800f134:	f001 f974 	bl	8010420 <UTIL_SEQ_RegTask>

  /**
   * Initialization of ADV - Ad Manufacturer Element - Support OTA Bit Mask
   */
#if (RADIO_ACTIVITY_EVENT != 0)
  ret = aci_hal_set_radio_activity_mask(0x0006);
 800f138:	2006      	movs	r0, #6
 800f13a:	f7fe fe65 	bl	800de08 <aci_hal_set_radio_activity_mask>
 800f13e:	4603      	mov	r3, r0
 800f140:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#endif /* L2CAP_REQUEST_NEW_CONN_PARAM != 0 */

  /**
   * Initialize Custom Template Application
   */
  Custom_APP_Init();
 800f144:	f000 fc2a 	bl	800f99c <Custom_APP_Init>
  /* USER CODE END APP_BLE_Init_3 */

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 800f148:	4b0a      	ldr	r3, [pc, #40]	@ (800f174 <APP_BLE_Init+0xd8>)
 800f14a:	2200      	movs	r2, #0
 800f14c:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 800f14e:	4b09      	ldr	r3, [pc, #36]	@ (800f174 <APP_BLE_Init+0xd8>)
 800f150:	2200      	movs	r2, #0
 800f152:	761a      	strb	r2, [r3, #24]

  /**
   * Start to Advertise to be connected by a Client
   */
  Adv_Request(APP_BLE_FAST_ADV);
 800f154:	2001      	movs	r0, #1
 800f156:	f000 f9a9 	bl	800f4ac <Adv_Request>

  /* USER CODE BEGIN APP_BLE_Init_2 */

  /* USER CODE END APP_BLE_Init_2 */

  return;
 800f15a:	bf00      	nop
}
 800f15c:	3740      	adds	r7, #64	@ 0x40
 800f15e:	46bd      	mov	sp, r7
 800f160:	bdb0      	pop	{r4, r5, r7, pc}
 800f162:	bf00      	nop
 800f164:	0800f689 	.word	0x0800f689
 800f168:	0800f67b 	.word	0x0800f67b
 800f16c:	08012428 	.word	0x08012428
 800f170:	0800e489 	.word	0x0800e489
 800f174:	20002168 	.word	0x20002168
 800f178:	0800f595 	.word	0x0800f595

0800f17c <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification(void *p_Pckt)
{
 800f17c:	b580      	push	{r7, lr}
 800f17e:	b08a      	sub	sp, #40	@ 0x28
 800f180:	af00      	add	r7, sp, #0
 800f182:	6078      	str	r0, [r7, #4]
  hci_event_pckt    *p_event_pckt;
  evt_le_meta_event *p_meta_evt;
  evt_blecore_aci   *p_blecore_evt;
  tBleStatus        ret = BLE_STATUS_INVALID_PARAMS;
 800f184:	2392      	movs	r3, #146	@ 0x92
 800f186:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  p_event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) p_Pckt)->data;
 800f18a:	687b      	ldr	r3, [r7, #4]
 800f18c:	3301      	adds	r3, #1
 800f18e:	623b      	str	r3, [r7, #32]

  switch (p_event_pckt->evt)
 800f190:	6a3b      	ldr	r3, [r7, #32]
 800f192:	781b      	ldrb	r3, [r3, #0]
 800f194:	2bff      	cmp	r3, #255	@ 0xff
 800f196:	d053      	beq.n	800f240 <SVCCTL_App_Notification+0xc4>
 800f198:	2bff      	cmp	r3, #255	@ 0xff
 800f19a:	f300 80af 	bgt.w	800f2fc <SVCCTL_App_Notification+0x180>
 800f19e:	2b05      	cmp	r3, #5
 800f1a0:	d002      	beq.n	800f1a8 <SVCCTL_App_Notification+0x2c>
 800f1a2:	2b3e      	cmp	r3, #62	@ 0x3e
 800f1a4:	d020      	beq.n	800f1e8 <SVCCTL_App_Notification+0x6c>

    default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
      break;
 800f1a6:	e0a9      	b.n	800f2fc <SVCCTL_App_Notification+0x180>
      p_disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) p_event_pckt->data;
 800f1a8:	6a3b      	ldr	r3, [r7, #32]
 800f1aa:	3302      	adds	r3, #2
 800f1ac:	60fb      	str	r3, [r7, #12]
      if (p_disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 800f1ae:	68fb      	ldr	r3, [r7, #12]
 800f1b0:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800f1b4:	b29a      	uxth	r2, r3
 800f1b6:	4b55      	ldr	r3, [pc, #340]	@ (800f30c <SVCCTL_App_Notification+0x190>)
 800f1b8:	8adb      	ldrh	r3, [r3, #22]
 800f1ba:	429a      	cmp	r2, r3
 800f1bc:	d106      	bne.n	800f1cc <SVCCTL_App_Notification+0x50>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 800f1be:	4b53      	ldr	r3, [pc, #332]	@ (800f30c <SVCCTL_App_Notification+0x190>)
 800f1c0:	2200      	movs	r2, #0
 800f1c2:	82da      	strh	r2, [r3, #22]
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800f1c4:	4b51      	ldr	r3, [pc, #324]	@ (800f30c <SVCCTL_App_Notification+0x190>)
 800f1c6:	2200      	movs	r2, #0
 800f1c8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
      Adv_Request(APP_BLE_FAST_ADV);
 800f1cc:	2001      	movs	r0, #1
 800f1ce:	f000 f96d 	bl	800f4ac <Adv_Request>
      HandleNotification.Custom_Evt_Opcode = CUSTOM_DISCON_HANDLE_EVT;
 800f1d2:	4b4f      	ldr	r3, [pc, #316]	@ (800f310 <SVCCTL_App_Notification+0x194>)
 800f1d4:	2201      	movs	r2, #1
 800f1d6:	701a      	strb	r2, [r3, #0]
      HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 800f1d8:	4b4c      	ldr	r3, [pc, #304]	@ (800f30c <SVCCTL_App_Notification+0x190>)
 800f1da:	8ada      	ldrh	r2, [r3, #22]
 800f1dc:	4b4c      	ldr	r3, [pc, #304]	@ (800f310 <SVCCTL_App_Notification+0x194>)
 800f1de:	805a      	strh	r2, [r3, #2]
      Custom_APP_Notification(&HandleNotification);
 800f1e0:	484b      	ldr	r0, [pc, #300]	@ (800f310 <SVCCTL_App_Notification+0x194>)
 800f1e2:	f000 fbc7 	bl	800f974 <Custom_APP_Notification>
      break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 800f1e6:	e08c      	b.n	800f302 <SVCCTL_App_Notification+0x186>
      p_meta_evt = (evt_le_meta_event*) p_event_pckt->data;
 800f1e8:	6a3b      	ldr	r3, [r7, #32]
 800f1ea:	3302      	adds	r3, #2
 800f1ec:	617b      	str	r3, [r7, #20]
      switch (p_meta_evt->subevent)
 800f1ee:	697b      	ldr	r3, [r7, #20]
 800f1f0:	781b      	ldrb	r3, [r3, #0]
 800f1f2:	2b01      	cmp	r3, #1
 800f1f4:	d001      	beq.n	800f1fa <SVCCTL_App_Notification+0x7e>
 800f1f6:	2b03      	cmp	r3, #3
          break;
 800f1f8:	e021      	b.n	800f23e <SVCCTL_App_Notification+0xc2>
          p_connection_complete_event = (hci_le_connection_complete_event_rp0 *) p_meta_evt->data;
 800f1fa:	697b      	ldr	r3, [r7, #20]
 800f1fc:	3301      	adds	r3, #1
 800f1fe:	613b      	str	r3, [r7, #16]
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 800f200:	4b42      	ldr	r3, [pc, #264]	@ (800f30c <SVCCTL_App_Notification+0x190>)
 800f202:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800f206:	2b04      	cmp	r3, #4
 800f208:	d104      	bne.n	800f214 <SVCCTL_App_Notification+0x98>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 800f20a:	4b40      	ldr	r3, [pc, #256]	@ (800f30c <SVCCTL_App_Notification+0x190>)
 800f20c:	2206      	movs	r2, #6
 800f20e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
 800f212:	e003      	b.n	800f21c <SVCCTL_App_Notification+0xa0>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 800f214:	4b3d      	ldr	r3, [pc, #244]	@ (800f30c <SVCCTL_App_Notification+0x190>)
 800f216:	2205      	movs	r2, #5
 800f218:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = p_connection_complete_event->Connection_Handle;
 800f21c:	693b      	ldr	r3, [r7, #16]
 800f21e:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800f222:	b29a      	uxth	r2, r3
 800f224:	4b39      	ldr	r3, [pc, #228]	@ (800f30c <SVCCTL_App_Notification+0x190>)
 800f226:	82da      	strh	r2, [r3, #22]
          HandleNotification.Custom_Evt_Opcode = CUSTOM_CONN_HANDLE_EVT;
 800f228:	4b39      	ldr	r3, [pc, #228]	@ (800f310 <SVCCTL_App_Notification+0x194>)
 800f22a:	2200      	movs	r2, #0
 800f22c:	701a      	strb	r2, [r3, #0]
          HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 800f22e:	4b37      	ldr	r3, [pc, #220]	@ (800f30c <SVCCTL_App_Notification+0x190>)
 800f230:	8ada      	ldrh	r2, [r3, #22]
 800f232:	4b37      	ldr	r3, [pc, #220]	@ (800f310 <SVCCTL_App_Notification+0x194>)
 800f234:	805a      	strh	r2, [r3, #2]
          Custom_APP_Notification(&HandleNotification);
 800f236:	4836      	ldr	r0, [pc, #216]	@ (800f310 <SVCCTL_App_Notification+0x194>)
 800f238:	f000 fb9c 	bl	800f974 <Custom_APP_Notification>
          break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 800f23c:	bf00      	nop
      break; /* HCI_LE_META_EVT_CODE */
 800f23e:	e060      	b.n	800f302 <SVCCTL_App_Notification+0x186>
      p_blecore_evt = (evt_blecore_aci*) p_event_pckt->data;
 800f240:	6a3b      	ldr	r3, [r7, #32]
 800f242:	3302      	adds	r3, #2
 800f244:	61fb      	str	r3, [r7, #28]
      switch (p_blecore_evt->ecode)
 800f246:	69fb      	ldr	r3, [r7, #28]
 800f248:	881b      	ldrh	r3, [r3, #0]
 800f24a:	b29b      	uxth	r3, r3
 800f24c:	f640 420e 	movw	r2, #3086	@ 0xc0e
 800f250:	4293      	cmp	r3, r2
 800f252:	d047      	beq.n	800f2e4 <SVCCTL_App_Notification+0x168>
 800f254:	f640 420e 	movw	r2, #3086	@ 0xc0e
 800f258:	4293      	cmp	r3, r2
 800f25a:	dc51      	bgt.n	800f300 <SVCCTL_App_Notification+0x184>
 800f25c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800f260:	d046      	beq.n	800f2f0 <SVCCTL_App_Notification+0x174>
 800f262:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800f266:	dc4b      	bgt.n	800f300 <SVCCTL_App_Notification+0x184>
 800f268:	2b04      	cmp	r3, #4
 800f26a:	d043      	beq.n	800f2f4 <SVCCTL_App_Notification+0x178>
 800f26c:	2b04      	cmp	r3, #4
 800f26e:	db47      	blt.n	800f300 <SVCCTL_App_Notification+0x184>
 800f270:	f240 420a 	movw	r2, #1034	@ 0x40a
 800f274:	4293      	cmp	r3, r2
 800f276:	dc43      	bgt.n	800f300 <SVCCTL_App_Notification+0x184>
 800f278:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f27c:	dd40      	ble.n	800f300 <SVCCTL_App_Notification+0x184>
 800f27e:	f2a3 4301 	subw	r3, r3, #1025	@ 0x401
 800f282:	2b09      	cmp	r3, #9
 800f284:	d83c      	bhi.n	800f300 <SVCCTL_App_Notification+0x184>
 800f286:	a201      	add	r2, pc, #4	@ (adr r2, 800f28c <SVCCTL_App_Notification+0x110>)
 800f288:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f28c:	0800f2dd 	.word	0x0800f2dd
 800f290:	0800f2b5 	.word	0x0800f2b5
 800f294:	0800f301 	.word	0x0800f301
 800f298:	0800f301 	.word	0x0800f301
 800f29c:	0800f301 	.word	0x0800f301
 800f2a0:	0800f301 	.word	0x0800f301
 800f2a4:	0800f2f9 	.word	0x0800f2f9
 800f2a8:	0800f301 	.word	0x0800f301
 800f2ac:	0800f2c9 	.word	0x0800f2c9
 800f2b0:	0800f2f9 	.word	0x0800f2f9
          ret = aci_gap_pass_key_resp(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, CFG_FIXED_PIN);
 800f2b4:	4b15      	ldr	r3, [pc, #84]	@ (800f30c <SVCCTL_App_Notification+0x190>)
 800f2b6:	8adb      	ldrh	r3, [r3, #22]
 800f2b8:	4916      	ldr	r1, [pc, #88]	@ (800f314 <SVCCTL_App_Notification+0x198>)
 800f2ba:	4618      	mov	r0, r3
 800f2bc:	f7fd ffa6 	bl	800d20c <aci_gap_pass_key_resp>
 800f2c0:	4603      	mov	r3, r0
 800f2c2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
          break;
 800f2c6:	e018      	b.n	800f2fa <SVCCTL_App_Notification+0x17e>
          ret = aci_gap_numeric_comparison_value_confirm_yesno(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, YES);
 800f2c8:	4b10      	ldr	r3, [pc, #64]	@ (800f30c <SVCCTL_App_Notification+0x190>)
 800f2ca:	8adb      	ldrh	r3, [r3, #22]
 800f2cc:	2101      	movs	r1, #1
 800f2ce:	4618      	mov	r0, r3
 800f2d0:	f7fe f946 	bl	800d560 <aci_gap_numeric_comparison_value_confirm_yesno>
 800f2d4:	4603      	mov	r3, r0
 800f2d6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
          break;
 800f2da:	e00e      	b.n	800f2fa <SVCCTL_App_Notification+0x17e>
          p_pairing_complete = (aci_gap_pairing_complete_event_rp0*)p_blecore_evt->data;
 800f2dc:	69fb      	ldr	r3, [r7, #28]
 800f2de:	3302      	adds	r3, #2
 800f2e0:	61bb      	str	r3, [r7, #24]
          break;
 800f2e2:	e00a      	b.n	800f2fa <SVCCTL_App_Notification+0x17e>
          aci_gatt_confirm_indication(BleApplicationContext.BleApplicationContext_legacy.connectionHandle);
 800f2e4:	4b09      	ldr	r3, [pc, #36]	@ (800f30c <SVCCTL_App_Notification+0x190>)
 800f2e6:	8adb      	ldrh	r3, [r3, #22]
 800f2e8:	4618      	mov	r0, r3
 800f2ea:	f7fe fc4c 	bl	800db86 <aci_gatt_confirm_indication>
        break;
 800f2ee:	e004      	b.n	800f2fa <SVCCTL_App_Notification+0x17e>
          break;
 800f2f0:	bf00      	nop
 800f2f2:	e005      	b.n	800f300 <SVCCTL_App_Notification+0x184>
          break; /* ACI_HAL_END_OF_RADIO_ACTIVITY_VSEVT_CODE */
 800f2f4:	bf00      	nop
 800f2f6:	e003      	b.n	800f300 <SVCCTL_App_Notification+0x184>
          break; /* ACI_GAP_PROC_COMPLETE_VSEVT_CODE */
 800f2f8:	bf00      	nop
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800f2fa:	e001      	b.n	800f300 <SVCCTL_App_Notification+0x184>
      break;
 800f2fc:	bf00      	nop
 800f2fe:	e000      	b.n	800f302 <SVCCTL_App_Notification+0x186>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800f300:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 800f302:	2301      	movs	r3, #1
}
 800f304:	4618      	mov	r0, r3
 800f306:	3728      	adds	r7, #40	@ 0x28
 800f308:	46bd      	mov	sp, r7
 800f30a:	bd80      	pop	{r7, pc}
 800f30c:	20002168 	.word	0x20002168
 800f310:	200021ec 	.word	0x200021ec
 800f314:	0001b207 	.word	0x0001b207

0800f318 <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init(void)
{
 800f318:	b580      	push	{r7, lr}
 800f31a:	b082      	sub	sp, #8
 800f31c:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 800f31e:	4b06      	ldr	r3, [pc, #24]	@ (800f338 <Ble_Tl_Init+0x20>)
 800f320:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 800f322:	4b06      	ldr	r3, [pc, #24]	@ (800f33c <Ble_Tl_Init+0x24>)
 800f324:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 800f326:	463b      	mov	r3, r7
 800f328:	4619      	mov	r1, r3
 800f32a:	4805      	ldr	r0, [pc, #20]	@ (800f340 <Ble_Tl_Init+0x28>)
 800f32c:	f7ff f890 	bl	800e450 <hci_init>

  return;
 800f330:	bf00      	nop
}
 800f332:	3708      	adds	r7, #8
 800f334:	46bd      	mov	sp, r7
 800f336:	bd80      	pop	{r7, pc}
 800f338:	200300d8 	.word	0x200300d8
 800f33c:	0800f645 	.word	0x0800f645
 800f340:	0800f60d 	.word	0x0800f60d

0800f344 <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void)
{
 800f344:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f346:	b08d      	sub	sp, #52	@ 0x34
 800f348:	af06      	add	r7, sp, #24
  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *p_bd_addr;
  uint16_t a_appearance[1] = {BLE_CFG_GAP_APPEARANCE};
 800f34a:	2300      	movs	r3, #0
 800f34c:	803b      	strh	r3, [r7, #0]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800f34e:	2392      	movs	r3, #146	@ 0x92
 800f350:	75fb      	strb	r3, [r7, #23]

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  ret = hci_reset();
 800f352:	f7fe fdad 	bl	800deb0 <hci_reset>
 800f356:	4603      	mov	r3, r0
 800f358:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write the BD Address
   */
  p_bd_addr = BleGetBdAddress();
 800f35a:	f000 f8d7 	bl	800f50c <BleGetBdAddress>
 800f35e:	6138      	str	r0, [r7, #16]
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET, CONFIG_DATA_PUBADDR_LEN, (uint8_t*) p_bd_addr);
 800f360:	693a      	ldr	r2, [r7, #16]
 800f362:	2106      	movs	r1, #6
 800f364:	2000      	movs	r0, #0
 800f366:	f7fe fc63 	bl	800dc30 <aci_hal_write_config_data>
 800f36a:	4603      	mov	r3, r0
 800f36c:	75fb      	strb	r3, [r7, #23]
#endif /* CFG_BLE_ADDRESS_TYPE != GAP_PUBLIC_ADDR */

  /**
   * Write Identity root key used to derive IRK and DHK(Legacy)
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)a_BLE_CfgIrValue);
 800f36e:	4a4a      	ldr	r2, [pc, #296]	@ (800f498 <Ble_Hci_Gap_Gatt_Init+0x154>)
 800f370:	2110      	movs	r1, #16
 800f372:	2018      	movs	r0, #24
 800f374:	f7fe fc5c 	bl	800dc30 <aci_hal_write_config_data>
 800f378:	4603      	mov	r3, r0
 800f37a:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write Encryption root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)a_BLE_CfgErValue);
 800f37c:	4a47      	ldr	r2, [pc, #284]	@ (800f49c <Ble_Hci_Gap_Gatt_Init+0x158>)
 800f37e:	2110      	movs	r1, #16
 800f380:	2008      	movs	r0, #8
 800f382:	f7fe fc55 	bl	800dc30 <aci_hal_write_config_data>
 800f386:	4603      	mov	r3, r0
 800f388:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Set TX Power.
   */
  ret = aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 800f38a:	2118      	movs	r1, #24
 800f38c:	2001      	movs	r0, #1
 800f38e:	f7fe fcd4 	bl	800dd3a <aci_hal_set_tx_power_level>
 800f392:	4603      	mov	r3, r0
 800f394:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GATT interface
   */
  ret = aci_gatt_init();
 800f396:	f7fe f94a 	bl	800d62e <aci_gatt_init>
 800f39a:	4603      	mov	r3, r0
 800f39c:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GAP interface
   */
  role = 0;
 800f39e:	2300      	movs	r3, #0
 800f3a0:	73fb      	strb	r3, [r7, #15]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 800f3a2:	7bfb      	ldrb	r3, [r7, #15]
 800f3a4:	f043 0301 	orr.w	r3, r3, #1
 800f3a8:	73fb      	strb	r3, [r7, #15]

/* USER CODE BEGIN Role_Mngt*/

/* USER CODE END Role_Mngt */

  if (role > 0)
 800f3aa:	7bfb      	ldrb	r3, [r7, #15]
 800f3ac:	2b00      	cmp	r3, #0
 800f3ae:	d01f      	beq.n	800f3f0 <Ble_Hci_Gap_Gatt_Init+0xac>
  {
    const char *name = CFG_GAP_DEVICE_NAME;
 800f3b0:	4b3b      	ldr	r3, [pc, #236]	@ (800f4a0 <Ble_Hci_Gap_Gatt_Init+0x15c>)
 800f3b2:	60bb      	str	r3, [r7, #8]
    ret = aci_gap_init(role,
 800f3b4:	1dba      	adds	r2, r7, #6
 800f3b6:	7bf8      	ldrb	r0, [r7, #15]
 800f3b8:	1cbb      	adds	r3, r7, #2
 800f3ba:	9301      	str	r3, [sp, #4]
 800f3bc:	1d3b      	adds	r3, r7, #4
 800f3be:	9300      	str	r3, [sp, #0]
 800f3c0:	4613      	mov	r3, r2
 800f3c2:	2208      	movs	r2, #8
 800f3c4:	2100      	movs	r1, #0
 800f3c6:	f7fd ff88 	bl	800d2da <aci_gap_init>
 800f3ca:	4603      	mov	r3, r0
 800f3cc:	75fb      	strb	r3, [r7, #23]
    else
    {
      APP_DBG_MSG("  Success: aci_gap_init command\n");
    }

    ret = aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name);
 800f3ce:	88fc      	ldrh	r4, [r7, #6]
 800f3d0:	88bd      	ldrh	r5, [r7, #4]
 800f3d2:	68b8      	ldr	r0, [r7, #8]
 800f3d4:	f7f0 fed4 	bl	8000180 <strlen>
 800f3d8:	4603      	mov	r3, r0
 800f3da:	b2da      	uxtb	r2, r3
 800f3dc:	68bb      	ldr	r3, [r7, #8]
 800f3de:	9300      	str	r3, [sp, #0]
 800f3e0:	4613      	mov	r3, r2
 800f3e2:	2200      	movs	r2, #0
 800f3e4:	4629      	mov	r1, r5
 800f3e6:	4620      	mov	r0, r4
 800f3e8:	f7fe fb24 	bl	800da34 <aci_gatt_update_char_value>
 800f3ec:	4603      	mov	r3, r0
 800f3ee:	75fb      	strb	r3, [r7, #23]
    {
      BLE_DBG_SVCCTL_MSG("  Success: aci_gatt_update_char_value - Device Name\n");
    }
  }

  ret = aci_gatt_update_char_value(gap_service_handle,
 800f3f0:	88f8      	ldrh	r0, [r7, #6]
 800f3f2:	8879      	ldrh	r1, [r7, #2]
 800f3f4:	463b      	mov	r3, r7
 800f3f6:	9300      	str	r3, [sp, #0]
 800f3f8:	2302      	movs	r3, #2
 800f3fa:	2200      	movs	r2, #0
 800f3fc:	f7fe fb1a 	bl	800da34 <aci_gatt_update_char_value>
 800f400:	4603      	mov	r3, r0
 800f402:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize Default PHY
   */
  ret = hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 800f404:	2202      	movs	r2, #2
 800f406:	2102      	movs	r1, #2
 800f408:	2000      	movs	r0, #0
 800f40a:	f7fe fd75 	bl	800def8 <hci_le_set_default_phy>
 800f40e:	4603      	mov	r3, r0
 800f410:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 800f412:	4b24      	ldr	r3, [pc, #144]	@ (800f4a4 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800f414:	2201      	movs	r2, #1
 800f416:	701a      	strb	r2, [r3, #0]
  ret = aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 800f418:	4b22      	ldr	r3, [pc, #136]	@ (800f4a4 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800f41a:	781b      	ldrb	r3, [r3, #0]
 800f41c:	4618      	mov	r0, r3
 800f41e:	f7fd fddd 	bl	800cfdc <aci_gap_set_io_capability>
 800f422:	4603      	mov	r3, r0
 800f424:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 800f426:	4b1f      	ldr	r3, [pc, #124]	@ (800f4a4 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800f428:	2201      	movs	r2, #1
 800f42a:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 800f42c:	4b1d      	ldr	r3, [pc, #116]	@ (800f4a4 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800f42e:	2208      	movs	r2, #8
 800f430:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 800f432:	4b1c      	ldr	r3, [pc, #112]	@ (800f4a4 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800f434:	2210      	movs	r2, #16
 800f436:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 800f438:	4b1a      	ldr	r3, [pc, #104]	@ (800f4a4 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800f43a:	2200      	movs	r2, #0
 800f43c:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 800f43e:	4b19      	ldr	r3, [pc, #100]	@ (800f4a4 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800f440:	4a19      	ldr	r2, [pc, #100]	@ (800f4a8 <Ble_Hci_Gap_Gatt_Init+0x164>)
 800f442:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 800f444:	4b17      	ldr	r3, [pc, #92]	@ (800f4a4 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800f446:	2200      	movs	r2, #0
 800f448:	709a      	strb	r2, [r3, #2]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init_1*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init_1*/

  ret = aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 800f44a:	4b16      	ldr	r3, [pc, #88]	@ (800f4a4 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800f44c:	789c      	ldrb	r4, [r3, #2]
 800f44e:	4b15      	ldr	r3, [pc, #84]	@ (800f4a4 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800f450:	785d      	ldrb	r5, [r3, #1]
 800f452:	4b14      	ldr	r3, [pc, #80]	@ (800f4a4 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800f454:	791b      	ldrb	r3, [r3, #4]
 800f456:	4a13      	ldr	r2, [pc, #76]	@ (800f4a4 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800f458:	7952      	ldrb	r2, [r2, #5]
 800f45a:	4912      	ldr	r1, [pc, #72]	@ (800f4a4 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800f45c:	78c9      	ldrb	r1, [r1, #3]
 800f45e:	4811      	ldr	r0, [pc, #68]	@ (800f4a4 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800f460:	6880      	ldr	r0, [r0, #8]
 800f462:	2600      	movs	r6, #0
 800f464:	9604      	str	r6, [sp, #16]
 800f466:	9003      	str	r0, [sp, #12]
 800f468:	9102      	str	r1, [sp, #8]
 800f46a:	9201      	str	r2, [sp, #4]
 800f46c:	9300      	str	r3, [sp, #0]
 800f46e:	2300      	movs	r3, #0
 800f470:	2201      	movs	r2, #1
 800f472:	4629      	mov	r1, r5
 800f474:	4620      	mov	r0, r4
 800f476:	f7fd fe05 	bl	800d084 <aci_gap_set_authentication_requirement>
 800f47a:	4603      	mov	r3, r0
 800f47c:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize whitelist
   */
  if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 800f47e:	4b09      	ldr	r3, [pc, #36]	@ (800f4a4 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800f480:	789b      	ldrb	r3, [r3, #2]
 800f482:	2b00      	cmp	r3, #0
 800f484:	d003      	beq.n	800f48e <Ble_Hci_Gap_Gatt_Init+0x14a>
  {
    ret = aci_gap_configure_whitelist();
 800f486:	f7fe f847 	bl	800d518 <aci_gap_configure_filter_accept_list>
 800f48a:	4603      	mov	r3, r0
 800f48c:	75fb      	strb	r3, [r7, #23]
    {
      APP_DBG_MSG("  Success: aci_gap_configure_whitelist command\n");
    }
  }
  APP_DBG_MSG("==>> End Ble_Hci_Gap_Gatt_Init function\n\r");
}
 800f48e:	bf00      	nop
 800f490:	371c      	adds	r7, #28
 800f492:	46bd      	mov	sp, r7
 800f494:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f496:	bf00      	nop
 800f498:	08012628 	.word	0x08012628
 800f49c:	08012638 	.word	0x08012638
 800f4a0:	08012464 	.word	0x08012464
 800f4a4:	20002168 	.word	0x20002168
 800f4a8:	0001b207 	.word	0x0001b207

0800f4ac <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t NewStatus)
{
 800f4ac:	b580      	push	{r7, lr}
 800f4ae:	b08c      	sub	sp, #48	@ 0x30
 800f4b0:	af08      	add	r7, sp, #32
 800f4b2:	4603      	mov	r3, r0
 800f4b4:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800f4b6:	2392      	movs	r3, #146	@ 0x92
 800f4b8:	73fb      	strb	r3, [r7, #15]

  BleApplicationContext.Device_Connection_Status = NewStatus;
 800f4ba:	4a12      	ldr	r2, [pc, #72]	@ (800f504 <Adv_Request+0x58>)
 800f4bc:	79fb      	ldrb	r3, [r7, #7]
 800f4be:	f882 3080 	strb.w	r3, [r2, #128]	@ 0x80
  /* Start Fast or Low Power Advertising */
  ret = aci_gap_set_discoverable(ADV_TYPE,
 800f4c2:	2300      	movs	r3, #0
 800f4c4:	9306      	str	r3, [sp, #24]
 800f4c6:	2300      	movs	r3, #0
 800f4c8:	9305      	str	r3, [sp, #20]
 800f4ca:	2300      	movs	r3, #0
 800f4cc:	9304      	str	r3, [sp, #16]
 800f4ce:	2300      	movs	r3, #0
 800f4d0:	9303      	str	r3, [sp, #12]
 800f4d2:	2300      	movs	r3, #0
 800f4d4:	9302      	str	r3, [sp, #8]
 800f4d6:	2300      	movs	r3, #0
 800f4d8:	9301      	str	r3, [sp, #4]
 800f4da:	2300      	movs	r3, #0
 800f4dc:	9300      	str	r3, [sp, #0]
 800f4de:	2300      	movs	r3, #0
 800f4e0:	22a0      	movs	r2, #160	@ 0xa0
 800f4e2:	2180      	movs	r1, #128	@ 0x80
 800f4e4:	2000      	movs	r0, #0
 800f4e6:	f7fd fc7f 	bl	800cde8 <aci_gap_set_discoverable>
 800f4ea:	4603      	mov	r3, r0
 800f4ec:	73fb      	strb	r3, [r7, #15]
/* USER CODE BEGIN Adv_Request_1*/

/* USER CODE END Adv_Request_1*/

  /* Update Advertising data */
  ret = aci_gap_update_adv_data(sizeof(a_AdvData), (uint8_t*) a_AdvData);
 800f4ee:	4906      	ldr	r1, [pc, #24]	@ (800f508 <Adv_Request+0x5c>)
 800f4f0:	200a      	movs	r0, #10
 800f4f2:	f7fd ff9f 	bl	800d434 <aci_gap_update_adv_data>
 800f4f6:	4603      	mov	r3, r0
 800f4f8:	73fb      	strb	r3, [r7, #15]
  else
  {
      APP_DBG_MSG("==>> Success: Start Fast Advertising \n\r");
  }

  return;
 800f4fa:	bf00      	nop
}
 800f4fc:	3710      	adds	r7, #16
 800f4fe:	46bd      	mov	sp, r7
 800f500:	bd80      	pop	{r7, pc}
 800f502:	bf00      	nop
 800f504:	20002168 	.word	0x20002168
 800f508:	20000060 	.word	0x20000060

0800f50c <BleGetBdAddress>:

const uint8_t* BleGetBdAddress(void)
{
 800f50c:	b580      	push	{r7, lr}
 800f50e:	b086      	sub	sp, #24
 800f510:	af00      	add	r7, sp, #0
  const uint8_t *p_bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 800f512:	f7ff fd9f 	bl	800f054 <LL_FLASH_GetUDN>
 800f516:	6138      	str	r0, [r7, #16]

  if (udn != 0xFFFFFFFF)
 800f518:	693b      	ldr	r3, [r7, #16]
 800f51a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f51e:	d023      	beq.n	800f568 <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 800f520:	f7ff fdb0 	bl	800f084 <LL_FLASH_GetSTCompanyID>
 800f524:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 800f526:	f7ff fda1 	bl	800f06c <LL_FLASH_GetDeviceID>
 800f52a:	6078      	str	r0, [r7, #4]
     * bit[23:16] : Device ID.
     * bit[15:0] : The last 16bits from the UDN
     * Note: In order to use the Public Address in a final product, a dedicated
     * 24bits company ID (OUI) shall be bought.
     */
    a_BdAddrUdn[0] = (uint8_t)(udn & 0x000000FF);
 800f52c:	693b      	ldr	r3, [r7, #16]
 800f52e:	b2da      	uxtb	r2, r3
 800f530:	4b16      	ldr	r3, [pc, #88]	@ (800f58c <BleGetBdAddress+0x80>)
 800f532:	701a      	strb	r2, [r3, #0]
    a_BdAddrUdn[1] = (uint8_t)((udn & 0x0000FF00) >> 8);
 800f534:	693b      	ldr	r3, [r7, #16]
 800f536:	0a1b      	lsrs	r3, r3, #8
 800f538:	b2da      	uxtb	r2, r3
 800f53a:	4b14      	ldr	r3, [pc, #80]	@ (800f58c <BleGetBdAddress+0x80>)
 800f53c:	705a      	strb	r2, [r3, #1]
    a_BdAddrUdn[2] = (uint8_t)device_id;
 800f53e:	687b      	ldr	r3, [r7, #4]
 800f540:	b2da      	uxtb	r2, r3
 800f542:	4b12      	ldr	r3, [pc, #72]	@ (800f58c <BleGetBdAddress+0x80>)
 800f544:	709a      	strb	r2, [r3, #2]
    a_BdAddrUdn[3] = (uint8_t)(company_id & 0x000000FF);
 800f546:	68bb      	ldr	r3, [r7, #8]
 800f548:	b2da      	uxtb	r2, r3
 800f54a:	4b10      	ldr	r3, [pc, #64]	@ (800f58c <BleGetBdAddress+0x80>)
 800f54c:	70da      	strb	r2, [r3, #3]
    a_BdAddrUdn[4] = (uint8_t)((company_id & 0x0000FF00) >> 8);
 800f54e:	68bb      	ldr	r3, [r7, #8]
 800f550:	0a1b      	lsrs	r3, r3, #8
 800f552:	b2da      	uxtb	r2, r3
 800f554:	4b0d      	ldr	r3, [pc, #52]	@ (800f58c <BleGetBdAddress+0x80>)
 800f556:	711a      	strb	r2, [r3, #4]
    a_BdAddrUdn[5] = (uint8_t)((company_id & 0x00FF0000) >> 16);
 800f558:	68bb      	ldr	r3, [r7, #8]
 800f55a:	0c1b      	lsrs	r3, r3, #16
 800f55c:	b2da      	uxtb	r2, r3
 800f55e:	4b0b      	ldr	r3, [pc, #44]	@ (800f58c <BleGetBdAddress+0x80>)
 800f560:	715a      	strb	r2, [r3, #5]

    p_bd_addr = (const uint8_t *)a_BdAddrUdn;
 800f562:	4b0a      	ldr	r3, [pc, #40]	@ (800f58c <BleGetBdAddress+0x80>)
 800f564:	617b      	str	r3, [r7, #20]
 800f566:	e00b      	b.n	800f580 <BleGetBdAddress+0x74>
  }
  else
  {
    p_otp_addr = OTP_Read(0);
 800f568:	2000      	movs	r0, #0
 800f56a:	f7ff fc8d 	bl	800ee88 <OTP_Read>
 800f56e:	60f8      	str	r0, [r7, #12]
    if (p_otp_addr)
 800f570:	68fb      	ldr	r3, [r7, #12]
 800f572:	2b00      	cmp	r3, #0
 800f574:	d002      	beq.n	800f57c <BleGetBdAddress+0x70>
    {
      p_bd_addr = ((OTP_ID0_t*)p_otp_addr)->bd_address;
 800f576:	68fb      	ldr	r3, [r7, #12]
 800f578:	617b      	str	r3, [r7, #20]
 800f57a:	e001      	b.n	800f580 <BleGetBdAddress+0x74>
    }
    else
    {
      p_bd_addr = a_MBdAddr;
 800f57c:	4b04      	ldr	r3, [pc, #16]	@ (800f590 <BleGetBdAddress+0x84>)
 800f57e:	617b      	str	r3, [r7, #20]
    }
  }

  return p_bd_addr;
 800f580:	697b      	ldr	r3, [r7, #20]
}
 800f582:	4618      	mov	r0, r3
 800f584:	3718      	adds	r7, #24
 800f586:	46bd      	mov	sp, r7
 800f588:	bd80      	pop	{r7, pc}
 800f58a:	bf00      	nop
 800f58c:	20002160 	.word	0x20002160
 800f590:	08012620 	.word	0x08012620

0800f594 <Adv_Cancel>:
 *
 * SPECIFIC FUNCTIONS FOR CUSTOM
 *
 *************************************************************/
static void Adv_Cancel(void)
{
 800f594:	b580      	push	{r7, lr}
 800f596:	b082      	sub	sp, #8
 800f598:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Adv_Cancel_1 */

  /* USER CODE END Adv_Cancel_1 */

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 800f59a:	4b0a      	ldr	r3, [pc, #40]	@ (800f5c4 <Adv_Cancel+0x30>)
 800f59c:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800f5a0:	2b05      	cmp	r3, #5
 800f5a2:	d00a      	beq.n	800f5ba <Adv_Cancel+0x26>
  {
    tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800f5a4:	2392      	movs	r3, #146	@ 0x92
 800f5a6:	71fb      	strb	r3, [r7, #7]

    ret = aci_gap_set_non_discoverable();
 800f5a8:	f7fd fbfa 	bl	800cda0 <aci_gap_set_non_discoverable>
 800f5ac:	4603      	mov	r3, r0
 800f5ae:	71fb      	strb	r3, [r7, #7]

    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800f5b0:	4b04      	ldr	r3, [pc, #16]	@ (800f5c4 <Adv_Cancel+0x30>)
 800f5b2:	2200      	movs	r2, #0
 800f5b4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* USER CODE BEGIN Adv_Cancel_2 */

  /* USER CODE END Adv_Cancel_2 */

  return;
 800f5b8:	bf00      	nop
 800f5ba:	bf00      	nop
}
 800f5bc:	3708      	adds	r7, #8
 800f5be:	46bd      	mov	sp, r7
 800f5c0:	bd80      	pop	{r7, pc}
 800f5c2:	bf00      	nop
 800f5c4:	20002168 	.word	0x20002168

0800f5c8 <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* p_Data)
{
 800f5c8:	b580      	push	{r7, lr}
 800f5ca:	b082      	sub	sp, #8
 800f5cc:	af00      	add	r7, sp, #0
 800f5ce:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 800f5d0:	2100      	movs	r1, #0
 800f5d2:	2002      	movs	r0, #2
 800f5d4:	f000 ff46 	bl	8010464 <UTIL_SEQ_SetTask>

  return;
 800f5d8:	bf00      	nop
}
 800f5da:	3708      	adds	r7, #8
 800f5dc:	46bd      	mov	sp, r7
 800f5de:	bd80      	pop	{r7, pc}

0800f5e0 <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t Flag)
{
 800f5e0:	b580      	push	{r7, lr}
 800f5e2:	b082      	sub	sp, #8
 800f5e4:	af00      	add	r7, sp, #0
 800f5e6:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800f5e8:	2001      	movs	r0, #1
 800f5ea:	f000 ffa7 	bl	801053c <UTIL_SEQ_SetEvt>

  return;
 800f5ee:	bf00      	nop
}
 800f5f0:	3708      	adds	r7, #8
 800f5f2:	46bd      	mov	sp, r7
 800f5f4:	bd80      	pop	{r7, pc}

0800f5f6 <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t Timeout)
{
 800f5f6:	b580      	push	{r7, lr}
 800f5f8:	b082      	sub	sp, #8
 800f5fa:	af00      	add	r7, sp, #0
 800f5fc:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800f5fe:	2001      	movs	r0, #1
 800f600:	f000 ffbc 	bl	801057c <UTIL_SEQ_WaitEvt>

  return;
 800f604:	bf00      	nop
}
 800f606:	3708      	adds	r7, #8
 800f608:	46bd      	mov	sp, r7
 800f60a:	bd80      	pop	{r7, pc}

0800f60c <BLE_UserEvtRx>:

static void BLE_UserEvtRx(void *p_Payload)
{
 800f60c:	b580      	push	{r7, lr}
 800f60e:	b084      	sub	sp, #16
 800f610:	af00      	add	r7, sp, #0
 800f612:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *p_param;

  p_param = (tHCI_UserEvtRxParam *)p_Payload;
 800f614:	687b      	ldr	r3, [r7, #4]
 800f616:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(p_param->pckt->evtserial));
 800f618:	68fb      	ldr	r3, [r7, #12]
 800f61a:	685b      	ldr	r3, [r3, #4]
 800f61c:	3308      	adds	r3, #8
 800f61e:	4618      	mov	r0, r3
 800f620:	f7fe fdd0 	bl	800e1c4 <SVCCTL_UserEvtRx>
 800f624:	4603      	mov	r3, r0
 800f626:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 800f628:	7afb      	ldrb	r3, [r7, #11]
 800f62a:	2b00      	cmp	r3, #0
 800f62c:	d003      	beq.n	800f636 <BLE_UserEvtRx+0x2a>
  {
    p_param->status = HCI_TL_UserEventFlow_Enable;
 800f62e:	68fb      	ldr	r3, [r7, #12]
 800f630:	2201      	movs	r2, #1
 800f632:	701a      	strb	r2, [r3, #0]
  else
  {
    p_param->status = HCI_TL_UserEventFlow_Disable;
  }

  return;
 800f634:	e003      	b.n	800f63e <BLE_UserEvtRx+0x32>
    p_param->status = HCI_TL_UserEventFlow_Disable;
 800f636:	68fb      	ldr	r3, [r7, #12]
 800f638:	2200      	movs	r2, #0
 800f63a:	701a      	strb	r2, [r3, #0]
  return;
 800f63c:	bf00      	nop
}
 800f63e:	3710      	adds	r7, #16
 800f640:	46bd      	mov	sp, r7
 800f642:	bd80      	pop	{r7, pc}

0800f644 <BLE_StatusNot>:

static void BLE_StatusNot(HCI_TL_CmdStatus_t Status)
{
 800f644:	b580      	push	{r7, lr}
 800f646:	b084      	sub	sp, #16
 800f648:	af00      	add	r7, sp, #0
 800f64a:	4603      	mov	r3, r0
 800f64c:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (Status)
 800f64e:	79fb      	ldrb	r3, [r7, #7]
 800f650:	2b00      	cmp	r3, #0
 800f652:	d002      	beq.n	800f65a <BLE_StatusNot+0x16>
 800f654:	2b01      	cmp	r3, #1
 800f656:	d006      	beq.n	800f666 <BLE_StatusNot+0x22>

    default:
      /* USER CODE BEGIN Status */

      /* USER CODE END Status */
      break;
 800f658:	e00b      	b.n	800f672 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800f65a:	230f      	movs	r3, #15
 800f65c:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 800f65e:	68f8      	ldr	r0, [r7, #12]
 800f660:	f000 ff2c 	bl	80104bc <UTIL_SEQ_PauseTask>
      break;
 800f664:	e005      	b.n	800f672 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800f666:	230f      	movs	r3, #15
 800f668:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 800f66a:	68f8      	ldr	r0, [r7, #12]
 800f66c:	f000 ff46 	bl	80104fc <UTIL_SEQ_ResumeTask>
      break;
 800f670:	bf00      	nop
  }

  return;
 800f672:	bf00      	nop
}
 800f674:	3710      	adds	r7, #16
 800f676:	46bd      	mov	sp, r7
 800f678:	bd80      	pop	{r7, pc}

0800f67a <myTask_IMU>:
/* mySVC */
static void Custom_Mycharnotify_Update_Char(void);
static void Custom_Mycharnotify_Send_Notification(void);

/* USER CODE BEGIN PFP */
void myTask_IMU(void) {
 800f67a:	b480      	push	{r7}
 800f67c:	af00      	add	r7, sp, #0

	//nomal_power_code
//	LSM9DS1_ReadGyro();
//	LSM9DS1_ReadAccel();
//	LSM9DS1_ReadMag();
}
 800f67e:	bf00      	nop
 800f680:	46bd      	mov	sp, r7
 800f682:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f686:	4770      	bx	lr

0800f688 <myTask_BLE>:

void myTask_BLE(void) {
 800f688:	b580      	push	{r7, lr}
 800f68a:	b088      	sub	sp, #32
 800f68c:	af00      	add	r7, sp, #0

	int16_t accel_x_int = (int16_t) (accel_x * 1000);
 800f68e:	4b9a      	ldr	r3, [pc, #616]	@ (800f8f8 <myTask_BLE+0x270>)
 800f690:	edd3 7a00 	vldr	s15, [r3]
 800f694:	ed9f 7a99 	vldr	s14, [pc, #612]	@ 800f8fc <myTask_BLE+0x274>
 800f698:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f69c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f6a0:	ee17 3a90 	vmov	r3, s15
 800f6a4:	83fb      	strh	r3, [r7, #30]
	int16_t accel_y_int = (int16_t) (accel_y * 1000);
 800f6a6:	4b96      	ldr	r3, [pc, #600]	@ (800f900 <myTask_BLE+0x278>)
 800f6a8:	edd3 7a00 	vldr	s15, [r3]
 800f6ac:	ed9f 7a93 	vldr	s14, [pc, #588]	@ 800f8fc <myTask_BLE+0x274>
 800f6b0:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f6b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f6b8:	ee17 3a90 	vmov	r3, s15
 800f6bc:	83bb      	strh	r3, [r7, #28]
	int16_t accel_z_int = (int16_t) (accel_z * 1000);
 800f6be:	4b91      	ldr	r3, [pc, #580]	@ (800f904 <myTask_BLE+0x27c>)
 800f6c0:	edd3 7a00 	vldr	s15, [r3]
 800f6c4:	ed9f 7a8d 	vldr	s14, [pc, #564]	@ 800f8fc <myTask_BLE+0x274>
 800f6c8:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f6cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f6d0:	ee17 3a90 	vmov	r3, s15
 800f6d4:	837b      	strh	r3, [r7, #26]

	int16_t gyro_x_int = (int16_t) (gyro_x * 1000);
 800f6d6:	4b8c      	ldr	r3, [pc, #560]	@ (800f908 <myTask_BLE+0x280>)
 800f6d8:	edd3 7a00 	vldr	s15, [r3]
 800f6dc:	ed9f 7a87 	vldr	s14, [pc, #540]	@ 800f8fc <myTask_BLE+0x274>
 800f6e0:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f6e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f6e8:	ee17 3a90 	vmov	r3, s15
 800f6ec:	833b      	strh	r3, [r7, #24]
	int16_t gyro_y_int = (int16_t) (gyro_y * 1000);
 800f6ee:	4b87      	ldr	r3, [pc, #540]	@ (800f90c <myTask_BLE+0x284>)
 800f6f0:	edd3 7a00 	vldr	s15, [r3]
 800f6f4:	ed9f 7a81 	vldr	s14, [pc, #516]	@ 800f8fc <myTask_BLE+0x274>
 800f6f8:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f6fc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f700:	ee17 3a90 	vmov	r3, s15
 800f704:	82fb      	strh	r3, [r7, #22]
	int16_t gyro_z_int = (int16_t) (gyro_z * 1000);
 800f706:	4b82      	ldr	r3, [pc, #520]	@ (800f910 <myTask_BLE+0x288>)
 800f708:	edd3 7a00 	vldr	s15, [r3]
 800f70c:	ed9f 7a7b 	vldr	s14, [pc, #492]	@ 800f8fc <myTask_BLE+0x274>
 800f710:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f714:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f718:	ee17 3a90 	vmov	r3, s15
 800f71c:	82bb      	strh	r3, [r7, #20]

	int16_t mag_x_int = (int16_t) (mag_x * 100);
 800f71e:	4b7d      	ldr	r3, [pc, #500]	@ (800f914 <myTask_BLE+0x28c>)
 800f720:	edd3 7a00 	vldr	s15, [r3]
 800f724:	ed9f 7a7c 	vldr	s14, [pc, #496]	@ 800f918 <myTask_BLE+0x290>
 800f728:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f72c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f730:	ee17 3a90 	vmov	r3, s15
 800f734:	827b      	strh	r3, [r7, #18]
	int16_t mag_y_int = (int16_t) (mag_y * 100);
 800f736:	4b79      	ldr	r3, [pc, #484]	@ (800f91c <myTask_BLE+0x294>)
 800f738:	edd3 7a00 	vldr	s15, [r3]
 800f73c:	ed9f 7a76 	vldr	s14, [pc, #472]	@ 800f918 <myTask_BLE+0x290>
 800f740:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f744:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f748:	ee17 3a90 	vmov	r3, s15
 800f74c:	823b      	strh	r3, [r7, #16]
	int16_t mag_z_int = (int16_t) (mag_z * 100);
 800f74e:	4b74      	ldr	r3, [pc, #464]	@ (800f920 <myTask_BLE+0x298>)
 800f750:	edd3 7a00 	vldr	s15, [r3]
 800f754:	ed9f 7a70 	vldr	s14, [pc, #448]	@ 800f918 <myTask_BLE+0x290>
 800f758:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f75c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f760:	ee17 3a90 	vmov	r3, s15
 800f764:	81fb      	strh	r3, [r7, #14]

//	int16_t mag_x_int = (int16_t) (mx2 * 100);
//	int16_t mag_y_int = (int16_t) (my2 * 100);
//	int16_t mag_z_int = (int16_t) (mz2 * 100);

	int16_t q0_int = (int16_t) (q0 * 10000);
 800f766:	4b6f      	ldr	r3, [pc, #444]	@ (800f924 <myTask_BLE+0x29c>)
 800f768:	edd3 7a00 	vldr	s15, [r3]
 800f76c:	ed9f 7a6e 	vldr	s14, [pc, #440]	@ 800f928 <myTask_BLE+0x2a0>
 800f770:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f774:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f778:	ee17 3a90 	vmov	r3, s15
 800f77c:	81bb      	strh	r3, [r7, #12]
	int16_t q1_int = (int16_t) (q1 * 10000);
 800f77e:	4b6b      	ldr	r3, [pc, #428]	@ (800f92c <myTask_BLE+0x2a4>)
 800f780:	edd3 7a00 	vldr	s15, [r3]
 800f784:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 800f928 <myTask_BLE+0x2a0>
 800f788:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f78c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f790:	ee17 3a90 	vmov	r3, s15
 800f794:	817b      	strh	r3, [r7, #10]
	int16_t q2_int = (int16_t) (q2 * 10000);
 800f796:	4b66      	ldr	r3, [pc, #408]	@ (800f930 <myTask_BLE+0x2a8>)
 800f798:	edd3 7a00 	vldr	s15, [r3]
 800f79c:	ed9f 7a62 	vldr	s14, [pc, #392]	@ 800f928 <myTask_BLE+0x2a0>
 800f7a0:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f7a4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f7a8:	ee17 3a90 	vmov	r3, s15
 800f7ac:	813b      	strh	r3, [r7, #8]
	int16_t q3_int = (int16_t) (q3 * 10000);
 800f7ae:	4b61      	ldr	r3, [pc, #388]	@ (800f934 <myTask_BLE+0x2ac>)
 800f7b0:	edd3 7a00 	vldr	s15, [r3]
 800f7b4:	ed9f 7a5c 	vldr	s14, [pc, #368]	@ 800f928 <myTask_BLE+0x2a0>
 800f7b8:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f7bc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f7c0:	ee17 3a90 	vmov	r3, s15
 800f7c4:	80fb      	strh	r3, [r7, #6]

	UpdateCharData[0] = (uint8_t) (accel_x_int >> 8);
 800f7c6:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800f7ca:	121b      	asrs	r3, r3, #8
 800f7cc:	b21b      	sxth	r3, r3
 800f7ce:	b2da      	uxtb	r2, r3
 800f7d0:	4b59      	ldr	r3, [pc, #356]	@ (800f938 <myTask_BLE+0x2b0>)
 800f7d2:	701a      	strb	r2, [r3, #0]
	UpdateCharData[1] = (uint8_t) (accel_x_int & 0xFF);
 800f7d4:	8bfb      	ldrh	r3, [r7, #30]
 800f7d6:	b2da      	uxtb	r2, r3
 800f7d8:	4b57      	ldr	r3, [pc, #348]	@ (800f938 <myTask_BLE+0x2b0>)
 800f7da:	705a      	strb	r2, [r3, #1]
	UpdateCharData[2] = (uint8_t) (accel_y_int >> 8);
 800f7dc:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800f7e0:	121b      	asrs	r3, r3, #8
 800f7e2:	b21b      	sxth	r3, r3
 800f7e4:	b2da      	uxtb	r2, r3
 800f7e6:	4b54      	ldr	r3, [pc, #336]	@ (800f938 <myTask_BLE+0x2b0>)
 800f7e8:	709a      	strb	r2, [r3, #2]
	UpdateCharData[3] = (uint8_t) (accel_y_int & 0xFF);
 800f7ea:	8bbb      	ldrh	r3, [r7, #28]
 800f7ec:	b2da      	uxtb	r2, r3
 800f7ee:	4b52      	ldr	r3, [pc, #328]	@ (800f938 <myTask_BLE+0x2b0>)
 800f7f0:	70da      	strb	r2, [r3, #3]
	UpdateCharData[4] = (uint8_t) (accel_z_int >> 8);
 800f7f2:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800f7f6:	121b      	asrs	r3, r3, #8
 800f7f8:	b21b      	sxth	r3, r3
 800f7fa:	b2da      	uxtb	r2, r3
 800f7fc:	4b4e      	ldr	r3, [pc, #312]	@ (800f938 <myTask_BLE+0x2b0>)
 800f7fe:	711a      	strb	r2, [r3, #4]
	UpdateCharData[5] = (uint8_t) (accel_z_int & 0xFF);
 800f800:	8b7b      	ldrh	r3, [r7, #26]
 800f802:	b2da      	uxtb	r2, r3
 800f804:	4b4c      	ldr	r3, [pc, #304]	@ (800f938 <myTask_BLE+0x2b0>)
 800f806:	715a      	strb	r2, [r3, #5]

	UpdateCharData[6] = (uint8_t) (gyro_x_int >> 8);
 800f808:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800f80c:	121b      	asrs	r3, r3, #8
 800f80e:	b21b      	sxth	r3, r3
 800f810:	b2da      	uxtb	r2, r3
 800f812:	4b49      	ldr	r3, [pc, #292]	@ (800f938 <myTask_BLE+0x2b0>)
 800f814:	719a      	strb	r2, [r3, #6]
	UpdateCharData[7] = (uint8_t) (gyro_x_int & 0xFF);
 800f816:	8b3b      	ldrh	r3, [r7, #24]
 800f818:	b2da      	uxtb	r2, r3
 800f81a:	4b47      	ldr	r3, [pc, #284]	@ (800f938 <myTask_BLE+0x2b0>)
 800f81c:	71da      	strb	r2, [r3, #7]
	UpdateCharData[8] = (uint8_t) (gyro_y_int >> 8);
 800f81e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800f822:	121b      	asrs	r3, r3, #8
 800f824:	b21b      	sxth	r3, r3
 800f826:	b2da      	uxtb	r2, r3
 800f828:	4b43      	ldr	r3, [pc, #268]	@ (800f938 <myTask_BLE+0x2b0>)
 800f82a:	721a      	strb	r2, [r3, #8]
	UpdateCharData[9] = (uint8_t) (gyro_y_int & 0xFF);
 800f82c:	8afb      	ldrh	r3, [r7, #22]
 800f82e:	b2da      	uxtb	r2, r3
 800f830:	4b41      	ldr	r3, [pc, #260]	@ (800f938 <myTask_BLE+0x2b0>)
 800f832:	725a      	strb	r2, [r3, #9]
	UpdateCharData[10] = (uint8_t) (gyro_z_int >> 8);
 800f834:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800f838:	121b      	asrs	r3, r3, #8
 800f83a:	b21b      	sxth	r3, r3
 800f83c:	b2da      	uxtb	r2, r3
 800f83e:	4b3e      	ldr	r3, [pc, #248]	@ (800f938 <myTask_BLE+0x2b0>)
 800f840:	729a      	strb	r2, [r3, #10]
	UpdateCharData[11] = (uint8_t) (gyro_z_int & 0xFF);
 800f842:	8abb      	ldrh	r3, [r7, #20]
 800f844:	b2da      	uxtb	r2, r3
 800f846:	4b3c      	ldr	r3, [pc, #240]	@ (800f938 <myTask_BLE+0x2b0>)
 800f848:	72da      	strb	r2, [r3, #11]

	UpdateCharData[12] = (uint8_t) (q0_int >> 8);
 800f84a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800f84e:	121b      	asrs	r3, r3, #8
 800f850:	b21b      	sxth	r3, r3
 800f852:	b2da      	uxtb	r2, r3
 800f854:	4b38      	ldr	r3, [pc, #224]	@ (800f938 <myTask_BLE+0x2b0>)
 800f856:	731a      	strb	r2, [r3, #12]
	UpdateCharData[13] = (uint8_t) (q0_int & 0xFF);
 800f858:	89bb      	ldrh	r3, [r7, #12]
 800f85a:	b2da      	uxtb	r2, r3
 800f85c:	4b36      	ldr	r3, [pc, #216]	@ (800f938 <myTask_BLE+0x2b0>)
 800f85e:	735a      	strb	r2, [r3, #13]
	UpdateCharData[14] = (uint8_t) (q1_int >> 8);
 800f860:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800f864:	121b      	asrs	r3, r3, #8
 800f866:	b21b      	sxth	r3, r3
 800f868:	b2da      	uxtb	r2, r3
 800f86a:	4b33      	ldr	r3, [pc, #204]	@ (800f938 <myTask_BLE+0x2b0>)
 800f86c:	739a      	strb	r2, [r3, #14]
	UpdateCharData[15] = (uint8_t) (q1_int & 0xFF);
 800f86e:	897b      	ldrh	r3, [r7, #10]
 800f870:	b2da      	uxtb	r2, r3
 800f872:	4b31      	ldr	r3, [pc, #196]	@ (800f938 <myTask_BLE+0x2b0>)
 800f874:	73da      	strb	r2, [r3, #15]
	UpdateCharData[16] = (uint8_t) (q2_int >> 8);
 800f876:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800f87a:	121b      	asrs	r3, r3, #8
 800f87c:	b21b      	sxth	r3, r3
 800f87e:	b2da      	uxtb	r2, r3
 800f880:	4b2d      	ldr	r3, [pc, #180]	@ (800f938 <myTask_BLE+0x2b0>)
 800f882:	741a      	strb	r2, [r3, #16]
	UpdateCharData[17] = (uint8_t) (q2_int & 0xFF);
 800f884:	893b      	ldrh	r3, [r7, #8]
 800f886:	b2da      	uxtb	r2, r3
 800f888:	4b2b      	ldr	r3, [pc, #172]	@ (800f938 <myTask_BLE+0x2b0>)
 800f88a:	745a      	strb	r2, [r3, #17]
	UpdateCharData[18] = (uint8_t) (q3_int >> 8);
 800f88c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800f890:	121b      	asrs	r3, r3, #8
 800f892:	b21b      	sxth	r3, r3
 800f894:	b2da      	uxtb	r2, r3
 800f896:	4b28      	ldr	r3, [pc, #160]	@ (800f938 <myTask_BLE+0x2b0>)
 800f898:	749a      	strb	r2, [r3, #18]
	UpdateCharData[19] = (uint8_t) (q3_int & 0xFF);
 800f89a:	88fb      	ldrh	r3, [r7, #6]
 800f89c:	b2da      	uxtb	r2, r3
 800f89e:	4b26      	ldr	r3, [pc, #152]	@ (800f938 <myTask_BLE+0x2b0>)
 800f8a0:	74da      	strb	r2, [r3, #19]

	UpdateCharData[20] = (uint8_t) (mag_x_int >> 8);
 800f8a2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f8a6:	121b      	asrs	r3, r3, #8
 800f8a8:	b21b      	sxth	r3, r3
 800f8aa:	b2da      	uxtb	r2, r3
 800f8ac:	4b22      	ldr	r3, [pc, #136]	@ (800f938 <myTask_BLE+0x2b0>)
 800f8ae:	751a      	strb	r2, [r3, #20]
	UpdateCharData[21] = (uint8_t) (mag_x_int & 0xFF);
 800f8b0:	8a7b      	ldrh	r3, [r7, #18]
 800f8b2:	b2da      	uxtb	r2, r3
 800f8b4:	4b20      	ldr	r3, [pc, #128]	@ (800f938 <myTask_BLE+0x2b0>)
 800f8b6:	755a      	strb	r2, [r3, #21]
	UpdateCharData[22] = (uint8_t) (mag_y_int >> 8);
 800f8b8:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800f8bc:	121b      	asrs	r3, r3, #8
 800f8be:	b21b      	sxth	r3, r3
 800f8c0:	b2da      	uxtb	r2, r3
 800f8c2:	4b1d      	ldr	r3, [pc, #116]	@ (800f938 <myTask_BLE+0x2b0>)
 800f8c4:	759a      	strb	r2, [r3, #22]
	UpdateCharData[23] = (uint8_t) (mag_y_int & 0xFF);
 800f8c6:	8a3b      	ldrh	r3, [r7, #16]
 800f8c8:	b2da      	uxtb	r2, r3
 800f8ca:	4b1b      	ldr	r3, [pc, #108]	@ (800f938 <myTask_BLE+0x2b0>)
 800f8cc:	75da      	strb	r2, [r3, #23]
	UpdateCharData[24] = (uint8_t) (mag_z_int >> 8);
 800f8ce:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800f8d2:	121b      	asrs	r3, r3, #8
 800f8d4:	b21b      	sxth	r3, r3
 800f8d6:	b2da      	uxtb	r2, r3
 800f8d8:	4b17      	ldr	r3, [pc, #92]	@ (800f938 <myTask_BLE+0x2b0>)
 800f8da:	761a      	strb	r2, [r3, #24]
	UpdateCharData[25] = (uint8_t) (mag_z_int & 0xFF);
 800f8dc:	89fb      	ldrh	r3, [r7, #14]
 800f8de:	b2da      	uxtb	r2, r3
 800f8e0:	4b15      	ldr	r3, [pc, #84]	@ (800f938 <myTask_BLE+0x2b0>)
 800f8e2:	765a      	strb	r2, [r3, #25]

	Custom_Mycharnotify_Update_Char();
 800f8e4:	f000 f862 	bl	800f9ac <Custom_Mycharnotify_Update_Char>

	UTIL_SEQ_SetTask(1 << CFG_TASK_MY_TASK_IMU, CFG_SCH_PRIO_0);
 800f8e8:	2100      	movs	r1, #0
 800f8ea:	2008      	movs	r0, #8
 800f8ec:	f000 fdba 	bl	8010464 <UTIL_SEQ_SetTask>
//	UTIL_SEQ_SetTask(1 << CFG_TASK_MY_TASK_BLE, CFG_SCH_PRIO_0);
}
 800f8f0:	bf00      	nop
 800f8f2:	3720      	adds	r7, #32
 800f8f4:	46bd      	mov	sp, r7
 800f8f6:	bd80      	pop	{r7, pc}
 800f8f8:	20000384 	.word	0x20000384
 800f8fc:	447a0000 	.word	0x447a0000
 800f900:	20000388 	.word	0x20000388
 800f904:	2000038c 	.word	0x2000038c
 800f908:	20000390 	.word	0x20000390
 800f90c:	20000394 	.word	0x20000394
 800f910:	20000398 	.word	0x20000398
 800f914:	200003c0 	.word	0x200003c0
 800f918:	42c80000 	.word	0x42c80000
 800f91c:	200003c4 	.word	0x200003c4
 800f920:	200003c8 	.word	0x200003c8
 800f924:	2000000c 	.word	0x2000000c
 800f928:	461c4000 	.word	0x461c4000
 800f92c:	20000474 	.word	0x20000474
 800f930:	20000478 	.word	0x20000478
 800f934:	2000047c 	.word	0x2000047c
 800f938:	200021f0 	.word	0x200021f0

0800f93c <Custom_STM_App_Notification>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void Custom_STM_App_Notification(
		Custom_STM_App_Notification_evt_t *pNotification) {
 800f93c:	b480      	push	{r7}
 800f93e:	b083      	sub	sp, #12
 800f940:	af00      	add	r7, sp, #0
 800f942:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN CUSTOM_STM_App_Notification_1 */

	/* USER CODE END CUSTOM_STM_App_Notification_1 */
	switch (pNotification->Custom_Evt_Opcode) {
 800f944:	687b      	ldr	r3, [r7, #4]
 800f946:	781b      	ldrb	r3, [r3, #0]
 800f948:	2b03      	cmp	r3, #3
 800f94a:	d80b      	bhi.n	800f964 <Custom_STM_App_Notification+0x28>
 800f94c:	a201      	add	r2, pc, #4	@ (adr r2, 800f954 <Custom_STM_App_Notification+0x18>)
 800f94e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f952:	bf00      	nop
 800f954:	0800f965 	.word	0x0800f965
 800f958:	0800f965 	.word	0x0800f965
 800f95c:	0800f965 	.word	0x0800f965
 800f960:	0800f965 	.word	0x0800f965

	default:
		/* USER CODE BEGIN CUSTOM_STM_App_Notification_default */

		/* USER CODE END CUSTOM_STM_App_Notification_default */
		break;
 800f964:	bf00      	nop
	}
	/* USER CODE BEGIN CUSTOM_STM_App_Notification_2 */

	/* USER CODE END CUSTOM_STM_App_Notification_2 */
	return;
 800f966:	bf00      	nop
}
 800f968:	370c      	adds	r7, #12
 800f96a:	46bd      	mov	sp, r7
 800f96c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f970:	4770      	bx	lr
 800f972:	bf00      	nop

0800f974 <Custom_APP_Notification>:

void Custom_APP_Notification(Custom_App_ConnHandle_Not_evt_t *pNotification) {
 800f974:	b480      	push	{r7}
 800f976:	b083      	sub	sp, #12
 800f978:	af00      	add	r7, sp, #0
 800f97a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN CUSTOM_APP_Notification_1 */

	/* USER CODE END CUSTOM_APP_Notification_1 */

	switch (pNotification->Custom_Evt_Opcode) {
 800f97c:	687b      	ldr	r3, [r7, #4]
 800f97e:	781b      	ldrb	r3, [r3, #0]
 800f980:	2b00      	cmp	r3, #0
 800f982:	d002      	beq.n	800f98a <Custom_APP_Notification+0x16>
 800f984:	2b01      	cmp	r3, #1
 800f986:	d002      	beq.n	800f98e <Custom_APP_Notification+0x1a>

	default:
		/* USER CODE BEGIN CUSTOM_APP_Notification_default */

		/* USER CODE END CUSTOM_APP_Notification_default */
		break;
 800f988:	e002      	b.n	800f990 <Custom_APP_Notification+0x1c>
		break;
 800f98a:	bf00      	nop
 800f98c:	e000      	b.n	800f990 <Custom_APP_Notification+0x1c>
		break;
 800f98e:	bf00      	nop

	/* USER CODE BEGIN CUSTOM_APP_Notification_2 */

	/* USER CODE END CUSTOM_APP_Notification_2 */

	return;
 800f990:	bf00      	nop
}
 800f992:	370c      	adds	r7, #12
 800f994:	46bd      	mov	sp, r7
 800f996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f99a:	4770      	bx	lr

0800f99c <Custom_APP_Init>:

void Custom_APP_Init(void) {
 800f99c:	b480      	push	{r7}
 800f99e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN CUSTOM_APP_Init */

	/* USER CODE END CUSTOM_APP_Init */
	return;
 800f9a0:	bf00      	nop
}
 800f9a2:	46bd      	mov	sp, r7
 800f9a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9a8:	4770      	bx	lr
	...

0800f9ac <Custom_Mycharnotify_Update_Char>:
 *
 *************************************************************/

/* mySVC */
__USED void Custom_Mycharnotify_Update_Char(void) /* Property Read */
{
 800f9ac:	b580      	push	{r7, lr}
 800f9ae:	b082      	sub	sp, #8
 800f9b0:	af00      	add	r7, sp, #0
	uint8_t updateflag = 0;
 800f9b2:	2300      	movs	r3, #0
 800f9b4:	71fb      	strb	r3, [r7, #7]

	/* USER CODE BEGIN Mycharnotify_UC_1*/
	updateflag = 1;
 800f9b6:	2301      	movs	r3, #1
 800f9b8:	71fb      	strb	r3, [r7, #7]
	/* USER CODE END Mycharnotify_UC_1*/

	if (updateflag != 0) {
 800f9ba:	79fb      	ldrb	r3, [r7, #7]
 800f9bc:	2b00      	cmp	r3, #0
 800f9be:	d004      	beq.n	800f9ca <Custom_Mycharnotify_Update_Char+0x1e>
		Custom_STM_App_Update_Char(CUSTOM_STM_MYCHARNOTIFY,
 800f9c0:	4904      	ldr	r1, [pc, #16]	@ (800f9d4 <Custom_Mycharnotify_Update_Char+0x28>)
 800f9c2:	2001      	movs	r0, #1
 800f9c4:	f000 f960 	bl	800fc88 <Custom_STM_App_Update_Char>
	}

	/* USER CODE BEGIN Mycharnotify_UC_Last*/

	/* USER CODE END Mycharnotify_UC_Last*/
	return;
 800f9c8:	bf00      	nop
 800f9ca:	bf00      	nop
}
 800f9cc:	3708      	adds	r7, #8
 800f9ce:	46bd      	mov	sp, r7
 800f9d0:	bd80      	pop	{r7, pc}
 800f9d2:	bf00      	nop
 800f9d4:	200021f0 	.word	0x200021f0

0800f9d8 <Custom_STM_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t Custom_STM_Event_Handler(void *Event)
{
 800f9d8:	b580      	push	{r7, lr}
 800f9da:	b08c      	sub	sp, #48	@ 0x30
 800f9dc:	af00      	add	r7, sp, #0
 800f9de:	6078      	str	r0, [r7, #4]
  Custom_STM_App_Notification_evt_t     Notification;
  /* USER CODE BEGIN Custom_STM_Event_Handler_1 */

  /* USER CODE END Custom_STM_Event_Handler_1 */

  return_value = SVCCTL_EvtNotAck;
 800f9e0:	2300      	movs	r3, #0
 800f9e2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 800f9e6:	687b      	ldr	r3, [r7, #4]
 800f9e8:	3301      	adds	r3, #1
 800f9ea:	62bb      	str	r3, [r7, #40]	@ 0x28

  switch (event_pckt->evt)
 800f9ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f9ee:	781b      	ldrb	r3, [r3, #0]
 800f9f0:	2bff      	cmp	r3, #255	@ 0xff
 800f9f2:	f040 808e 	bne.w	800fb12 <Custom_STM_Event_Handler+0x13a>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
      blecore_evt = (evt_blecore_aci*)event_pckt->data;
 800f9f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f9f8:	3302      	adds	r3, #2
 800f9fa:	627b      	str	r3, [r7, #36]	@ 0x24
      switch (blecore_evt->ecode)
 800f9fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f9fe:	881b      	ldrh	r3, [r3, #0]
 800fa00:	b29b      	uxth	r3, r3
 800fa02:	f6a3 4301 	subw	r3, r3, #3073	@ 0xc01
 800fa06:	2b1a      	cmp	r3, #26
 800fa08:	d87f      	bhi.n	800fb0a <Custom_STM_Event_Handler+0x132>
 800fa0a:	a201      	add	r2, pc, #4	@ (adr r2, 800fa10 <Custom_STM_Event_Handler+0x38>)
 800fa0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fa10:	0800fa7d 	.word	0x0800fa7d
 800fa14:	0800fb0b 	.word	0x0800fb0b
 800fa18:	0800fb0b 	.word	0x0800fb0b
 800fa1c:	0800fb0b 	.word	0x0800fb0b
 800fa20:	0800fb0b 	.word	0x0800fb0b
 800fa24:	0800fb0b 	.word	0x0800fb0b
 800fa28:	0800fb0b 	.word	0x0800fb0b
 800fa2c:	0800fb0b 	.word	0x0800fb0b
 800fa30:	0800fb0b 	.word	0x0800fb0b
 800fa34:	0800fb0b 	.word	0x0800fb0b
 800fa38:	0800fb0b 	.word	0x0800fb0b
 800fa3c:	0800fb0b 	.word	0x0800fb0b
 800fa40:	0800fb0b 	.word	0x0800fb0b
 800fa44:	0800fb0b 	.word	0x0800fb0b
 800fa48:	0800fb0b 	.word	0x0800fb0b
 800fa4c:	0800fb0b 	.word	0x0800fb0b
 800fa50:	0800fb0b 	.word	0x0800fb0b
 800fa54:	0800fb0b 	.word	0x0800fb0b
 800fa58:	0800fb0b 	.word	0x0800fb0b
 800fa5c:	0800fb0b 	.word	0x0800fb0b
 800fa60:	0800fb0b 	.word	0x0800fb0b
 800fa64:	0800fb0b 	.word	0x0800fb0b
 800fa68:	0800fb0b 	.word	0x0800fb0b
 800fa6c:	0800fb0b 	.word	0x0800fb0b
 800fa70:	0800fb0b 	.word	0x0800fb0b
 800fa74:	0800fb0b 	.word	0x0800fb0b
 800fa78:	0800faed 	.word	0x0800faed
      {
        case ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE:
          /* USER CODE BEGIN EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_BEGIN */

          /* USER CODE END EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_BEGIN */
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blecore_evt->data;
 800fa7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fa7e:	3302      	adds	r3, #2
 800fa80:	61fb      	str	r3, [r7, #28]
          if (attribute_modified->Attr_Handle == (CustomContext.CustomMycharnotifyHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))
 800fa82:	69fb      	ldr	r3, [r7, #28]
 800fa84:	885b      	ldrh	r3, [r3, #2]
 800fa86:	b29b      	uxth	r3, r3
 800fa88:	461a      	mov	r2, r3
 800fa8a:	4b25      	ldr	r3, [pc, #148]	@ (800fb20 <Custom_STM_Event_Handler+0x148>)
 800fa8c:	889b      	ldrh	r3, [r3, #4]
 800fa8e:	3302      	adds	r3, #2
 800fa90:	429a      	cmp	r2, r3
 800fa92:	d119      	bne.n	800fac8 <Custom_STM_Event_Handler+0xf0>
          {
            return_value = SVCCTL_EvtAckFlowEnable;
 800fa94:	2301      	movs	r3, #1
 800fa96:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            /* USER CODE BEGIN CUSTOM_STM_Service_1_Char_2 */
            /* USER CODE END CUSTOM_STM_Service_1_Char_2 */
            switch (attribute_modified->Attr_Data[0])
 800fa9a:	69fb      	ldr	r3, [r7, #28]
 800fa9c:	7a1b      	ldrb	r3, [r3, #8]
 800fa9e:	2b00      	cmp	r3, #0
 800faa0:	d002      	beq.n	800faa8 <Custom_STM_Event_Handler+0xd0>
 800faa2:	2b01      	cmp	r3, #1
 800faa4:	d008      	beq.n	800fab8 <Custom_STM_Event_Handler+0xe0>

              default:
                /* USER CODE BEGIN CUSTOM_STM_Service_1_Char_2_default */

                /* USER CODE END CUSTOM_STM_Service_1_Char_2_default */
              break;
 800faa6:	e020      	b.n	800faea <Custom_STM_Event_Handler+0x112>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_MYCHARNOTIFY_NOTIFY_DISABLED_EVT;
 800faa8:	2302      	movs	r3, #2
 800faaa:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 800faac:	f107 0308 	add.w	r3, r7, #8
 800fab0:	4618      	mov	r0, r3
 800fab2:	f7ff ff43 	bl	800f93c <Custom_STM_App_Notification>
                break;
 800fab6:	e018      	b.n	800faea <Custom_STM_Event_Handler+0x112>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_MYCHARNOTIFY_NOTIFY_ENABLED_EVT;
 800fab8:	2301      	movs	r3, #1
 800faba:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 800fabc:	f107 0308 	add.w	r3, r7, #8
 800fac0:	4618      	mov	r0, r3
 800fac2:	f7ff ff3b 	bl	800f93c <Custom_STM_App_Notification>
                break;
 800fac6:	e010      	b.n	800faea <Custom_STM_Event_Handler+0x112>
            }
          }  /* if (attribute_modified->Attr_Handle == (CustomContext.CustomMycharnotifyHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))*/

          else if (attribute_modified->Attr_Handle == (CustomContext.CustomMycharwriteHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 800fac8:	69fb      	ldr	r3, [r7, #28]
 800faca:	885b      	ldrh	r3, [r3, #2]
 800facc:	b29b      	uxth	r3, r3
 800face:	461a      	mov	r2, r3
 800fad0:	4b13      	ldr	r3, [pc, #76]	@ (800fb20 <Custom_STM_Event_Handler+0x148>)
 800fad2:	885b      	ldrh	r3, [r3, #2]
 800fad4:	3301      	adds	r3, #1
 800fad6:	429a      	cmp	r2, r3
 800fad8:	d119      	bne.n	800fb0e <Custom_STM_Event_Handler+0x136>
          {
            return_value = SVCCTL_EvtAckFlowEnable;
 800fada:	2301      	movs	r3, #1
 800fadc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            /* USER CODE BEGIN CUSTOM_STM_Service_1_Char_1_ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE */
            HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800fae0:	2101      	movs	r1, #1
 800fae2:	4810      	ldr	r0, [pc, #64]	@ (800fb24 <Custom_STM_Event_Handler+0x14c>)
 800fae4:	f7f8 fe18 	bl	8008718 <HAL_GPIO_TogglePin>
            /* USER CODE END CUSTOM_STM_Service_1_Char_1_ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE */
          } /* if (attribute_modified->Attr_Handle == (CustomContext.CustomMycharwriteHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))*/
          /* USER CODE BEGIN EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_END */

          /* USER CODE END EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_END */
          break;
 800fae8:	e011      	b.n	800fb0e <Custom_STM_Event_Handler+0x136>
 800faea:	e010      	b.n	800fb0e <Custom_STM_Event_Handler+0x136>
		case ACI_GATT_NOTIFICATION_COMPLETE_VSEVT_CODE:
        {
          /* USER CODE BEGIN EVT_BLUE_GATT_NOTIFICATION_COMPLETE_BEGIN */

          /* USER CODE END EVT_BLUE_GATT_NOTIFICATION_COMPLETE_BEGIN */
          notification_complete = (aci_gatt_notification_complete_event_rp0*)blecore_evt->data;
 800faec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800faee:	3302      	adds	r3, #2
 800faf0:	623b      	str	r3, [r7, #32]
          Notification.Custom_Evt_Opcode = CUSTOM_STM_NOTIFICATION_COMPLETE_EVT;
 800faf2:	2303      	movs	r3, #3
 800faf4:	723b      	strb	r3, [r7, #8]
          Notification.AttrHandle = notification_complete->Attr_Handle;
 800faf6:	6a3b      	ldr	r3, [r7, #32]
 800faf8:	881b      	ldrh	r3, [r3, #0]
 800fafa:	b29b      	uxth	r3, r3
 800fafc:	833b      	strh	r3, [r7, #24]
          Custom_STM_App_Notification(&Notification);
 800fafe:	f107 0308 	add.w	r3, r7, #8
 800fb02:	4618      	mov	r0, r3
 800fb04:	f7ff ff1a 	bl	800f93c <Custom_STM_App_Notification>
          /* USER CODE BEGIN EVT_BLUE_GATT_NOTIFICATION_COMPLETE_END */

          /* USER CODE END EVT_BLUE_GATT_NOTIFICATION_COMPLETE_END */
          break;
 800fb08:	e002      	b.n	800fb10 <Custom_STM_Event_Handler+0x138>
        /* USER CODE END BLECORE_EVT */
        default:
          /* USER CODE BEGIN EVT_DEFAULT */

          /* USER CODE END EVT_DEFAULT */
          break;
 800fb0a:	bf00      	nop
 800fb0c:	e002      	b.n	800fb14 <Custom_STM_Event_Handler+0x13c>
          break;
 800fb0e:	bf00      	nop
      }
      /* USER CODE BEGIN EVT_VENDOR*/

      /* USER CODE END EVT_VENDOR*/
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800fb10:	e000      	b.n	800fb14 <Custom_STM_Event_Handler+0x13c>

    default:
      /* USER CODE BEGIN EVENT_PCKT*/

      /* USER CODE END EVENT_PCKT*/
      break;
 800fb12:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_Event_Handler_2 */

  /* USER CODE END Custom_STM_Event_Handler_2 */

  return(return_value);
 800fb14:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}/* end Custom_STM_Event_Handler */
 800fb18:	4618      	mov	r0, r3
 800fb1a:	3730      	adds	r7, #48	@ 0x30
 800fb1c:	46bd      	mov	sp, r7
 800fb1e:	bd80      	pop	{r7, pc}
 800fb20:	200023f0 	.word	0x200023f0
 800fb24:	48000400 	.word	0x48000400

0800fb28 <SVCCTL_InitCustomSvc>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void SVCCTL_InitCustomSvc(void)
{
 800fb28:	b580      	push	{r7, lr}
 800fb2a:	b08c      	sub	sp, #48	@ 0x30
 800fb2c:	af06      	add	r7, sp, #24

  Char_UUID_t  uuid;
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800fb2e:	2392      	movs	r3, #146	@ 0x92
 800fb30:	75fb      	strb	r3, [r7, #23]
  /* USER CODE END SVCCTL_InitCustomSvc_1 */

  /**
   *  Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(Custom_STM_Event_Handler);
 800fb32:	484f      	ldr	r0, [pc, #316]	@ (800fc70 <SVCCTL_InitCustomSvc+0x148>)
 800fb34:	f7fe fb2c 	bl	800e190 <SVCCTL_RegisterSvcHandler>
   *                              = 6
   *
   * This value doesn't take into account number of descriptors manually added
   * In case of descriptors added, please update the max_attr_record value accordingly in the next SVCCTL_InitService User Section
   */
  max_attr_record = 6;
 800fb38:	2306      	movs	r3, #6
 800fb3a:	75bb      	strb	r3, [r7, #22]
  /* USER CODE BEGIN SVCCTL_InitService */
  /* max_attr_record to be updated if descriptors have been added */

  /* USER CODE END SVCCTL_InitService */

  COPY_MYSVC_UUID(uuid.Char_UUID_128);
 800fb3c:	238f      	movs	r3, #143	@ 0x8f
 800fb3e:	713b      	strb	r3, [r7, #4]
 800fb40:	23e5      	movs	r3, #229	@ 0xe5
 800fb42:	717b      	strb	r3, [r7, #5]
 800fb44:	23b3      	movs	r3, #179	@ 0xb3
 800fb46:	71bb      	strb	r3, [r7, #6]
 800fb48:	23d5      	movs	r3, #213	@ 0xd5
 800fb4a:	71fb      	strb	r3, [r7, #7]
 800fb4c:	232e      	movs	r3, #46	@ 0x2e
 800fb4e:	723b      	strb	r3, [r7, #8]
 800fb50:	237f      	movs	r3, #127	@ 0x7f
 800fb52:	727b      	strb	r3, [r7, #9]
 800fb54:	234a      	movs	r3, #74	@ 0x4a
 800fb56:	72bb      	strb	r3, [r7, #10]
 800fb58:	2398      	movs	r3, #152	@ 0x98
 800fb5a:	72fb      	strb	r3, [r7, #11]
 800fb5c:	232a      	movs	r3, #42	@ 0x2a
 800fb5e:	733b      	strb	r3, [r7, #12]
 800fb60:	2348      	movs	r3, #72	@ 0x48
 800fb62:	737b      	strb	r3, [r7, #13]
 800fb64:	237a      	movs	r3, #122	@ 0x7a
 800fb66:	73bb      	strb	r3, [r7, #14]
 800fb68:	23cc      	movs	r3, #204	@ 0xcc
 800fb6a:	73fb      	strb	r3, [r7, #15]
 800fb6c:	2300      	movs	r3, #0
 800fb6e:	743b      	strb	r3, [r7, #16]
 800fb70:	2300      	movs	r3, #0
 800fb72:	747b      	strb	r3, [r7, #17]
 800fb74:	2300      	movs	r3, #0
 800fb76:	74bb      	strb	r3, [r7, #18]
 800fb78:	2300      	movs	r3, #0
 800fb7a:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_service(UUID_TYPE_128,
 800fb7c:	7dbb      	ldrb	r3, [r7, #22]
 800fb7e:	1d39      	adds	r1, r7, #4
 800fb80:	4a3c      	ldr	r2, [pc, #240]	@ (800fc74 <SVCCTL_InitCustomSvc+0x14c>)
 800fb82:	9200      	str	r2, [sp, #0]
 800fb84:	2201      	movs	r2, #1
 800fb86:	2002      	movs	r0, #2
 800fb88:	f7fd fd76 	bl	800d678 <aci_gatt_add_service>
 800fb8c:	4603      	mov	r3, r0
 800fb8e:	75fb      	strb	r3, [r7, #23]
  }

  /**
   *  myCharWrite
   */
  COPY_MYCHARWRITE_UUID(uuid.Char_UUID_128);
 800fb90:	2319      	movs	r3, #25
 800fb92:	713b      	strb	r3, [r7, #4]
 800fb94:	23ed      	movs	r3, #237	@ 0xed
 800fb96:	717b      	strb	r3, [r7, #5]
 800fb98:	2382      	movs	r3, #130	@ 0x82
 800fb9a:	71bb      	strb	r3, [r7, #6]
 800fb9c:	23ae      	movs	r3, #174	@ 0xae
 800fb9e:	71fb      	strb	r3, [r7, #7]
 800fba0:	23ed      	movs	r3, #237	@ 0xed
 800fba2:	723b      	strb	r3, [r7, #8]
 800fba4:	2321      	movs	r3, #33	@ 0x21
 800fba6:	727b      	strb	r3, [r7, #9]
 800fba8:	234c      	movs	r3, #76	@ 0x4c
 800fbaa:	72bb      	strb	r3, [r7, #10]
 800fbac:	239d      	movs	r3, #157	@ 0x9d
 800fbae:	72fb      	strb	r3, [r7, #11]
 800fbb0:	2341      	movs	r3, #65	@ 0x41
 800fbb2:	733b      	strb	r3, [r7, #12]
 800fbb4:	2345      	movs	r3, #69	@ 0x45
 800fbb6:	737b      	strb	r3, [r7, #13]
 800fbb8:	2322      	movs	r3, #34	@ 0x22
 800fbba:	73bb      	strb	r3, [r7, #14]
 800fbbc:	238e      	movs	r3, #142	@ 0x8e
 800fbbe:	73fb      	strb	r3, [r7, #15]
 800fbc0:	2300      	movs	r3, #0
 800fbc2:	743b      	strb	r3, [r7, #16]
 800fbc4:	2300      	movs	r3, #0
 800fbc6:	747b      	strb	r3, [r7, #17]
 800fbc8:	2300      	movs	r3, #0
 800fbca:	74bb      	strb	r3, [r7, #18]
 800fbcc:	2300      	movs	r3, #0
 800fbce:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomMysvcHdle,
 800fbd0:	4b28      	ldr	r3, [pc, #160]	@ (800fc74 <SVCCTL_InitCustomSvc+0x14c>)
 800fbd2:	8818      	ldrh	r0, [r3, #0]
 800fbd4:	4b28      	ldr	r3, [pc, #160]	@ (800fc78 <SVCCTL_InitCustomSvc+0x150>)
 800fbd6:	881b      	ldrh	r3, [r3, #0]
 800fbd8:	1d3a      	adds	r2, r7, #4
 800fbda:	4928      	ldr	r1, [pc, #160]	@ (800fc7c <SVCCTL_InitCustomSvc+0x154>)
 800fbdc:	9105      	str	r1, [sp, #20]
 800fbde:	2100      	movs	r1, #0
 800fbe0:	9104      	str	r1, [sp, #16]
 800fbe2:	2110      	movs	r1, #16
 800fbe4:	9103      	str	r1, [sp, #12]
 800fbe6:	2101      	movs	r1, #1
 800fbe8:	9102      	str	r1, [sp, #8]
 800fbea:	2100      	movs	r1, #0
 800fbec:	9101      	str	r1, [sp, #4]
 800fbee:	2108      	movs	r1, #8
 800fbf0:	9100      	str	r1, [sp, #0]
 800fbf2:	2102      	movs	r1, #2
 800fbf4:	f7fd fe16 	bl	800d824 <aci_gatt_add_char>
 800fbf8:	4603      	mov	r3, r0
 800fbfa:	75fb      	strb	r3, [r7, #23]

  /* USER CODE END SVCCTL_Init_Service1_Char1 */
  /**
   *  myCharNotify
   */
  COPY_MYCHARNOTIFY_UUID(uuid.Char_UUID_128);
 800fbfc:	2300      	movs	r3, #0
 800fbfe:	713b      	strb	r3, [r7, #4]
 800fc00:	2300      	movs	r3, #0
 800fc02:	717b      	strb	r3, [r7, #5]
 800fc04:	2300      	movs	r3, #0
 800fc06:	71bb      	strb	r3, [r7, #6]
 800fc08:	2300      	movs	r3, #0
 800fc0a:	71fb      	strb	r3, [r7, #7]
 800fc0c:	2300      	movs	r3, #0
 800fc0e:	723b      	strb	r3, [r7, #8]
 800fc10:	2300      	movs	r3, #0
 800fc12:	727b      	strb	r3, [r7, #9]
 800fc14:	2300      	movs	r3, #0
 800fc16:	72bb      	strb	r3, [r7, #10]
 800fc18:	2300      	movs	r3, #0
 800fc1a:	72fb      	strb	r3, [r7, #11]
 800fc1c:	2300      	movs	r3, #0
 800fc1e:	733b      	strb	r3, [r7, #12]
 800fc20:	2300      	movs	r3, #0
 800fc22:	737b      	strb	r3, [r7, #13]
 800fc24:	2300      	movs	r3, #0
 800fc26:	73bb      	strb	r3, [r7, #14]
 800fc28:	2300      	movs	r3, #0
 800fc2a:	73fb      	strb	r3, [r7, #15]
 800fc2c:	2300      	movs	r3, #0
 800fc2e:	743b      	strb	r3, [r7, #16]
 800fc30:	2300      	movs	r3, #0
 800fc32:	747b      	strb	r3, [r7, #17]
 800fc34:	2301      	movs	r3, #1
 800fc36:	74bb      	strb	r3, [r7, #18]
 800fc38:	2300      	movs	r3, #0
 800fc3a:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomMysvcHdle,
 800fc3c:	4b0d      	ldr	r3, [pc, #52]	@ (800fc74 <SVCCTL_InitCustomSvc+0x14c>)
 800fc3e:	8818      	ldrh	r0, [r3, #0]
 800fc40:	4b0f      	ldr	r3, [pc, #60]	@ (800fc80 <SVCCTL_InitCustomSvc+0x158>)
 800fc42:	881b      	ldrh	r3, [r3, #0]
 800fc44:	1d3a      	adds	r2, r7, #4
 800fc46:	490f      	ldr	r1, [pc, #60]	@ (800fc84 <SVCCTL_InitCustomSvc+0x15c>)
 800fc48:	9105      	str	r1, [sp, #20]
 800fc4a:	2100      	movs	r1, #0
 800fc4c:	9104      	str	r1, [sp, #16]
 800fc4e:	2110      	movs	r1, #16
 800fc50:	9103      	str	r1, [sp, #12]
 800fc52:	2107      	movs	r1, #7
 800fc54:	9102      	str	r1, [sp, #8]
 800fc56:	2100      	movs	r1, #0
 800fc58:	9101      	str	r1, [sp, #4]
 800fc5a:	2110      	movs	r1, #16
 800fc5c:	9100      	str	r1, [sp, #0]
 800fc5e:	2102      	movs	r1, #2
 800fc60:	f7fd fde0 	bl	800d824 <aci_gatt_add_char>
 800fc64:	4603      	mov	r3, r0
 800fc66:	75fb      	strb	r3, [r7, #23]

  /* USER CODE BEGIN SVCCTL_InitCustomSvc_2 */

  /* USER CODE END SVCCTL_InitCustomSvc_2 */

  return;
 800fc68:	bf00      	nop
}
 800fc6a:	3718      	adds	r7, #24
 800fc6c:	46bd      	mov	sp, r7
 800fc6e:	bd80      	pop	{r7, pc}
 800fc70:	0800f9d9 	.word	0x0800f9d9
 800fc74:	200023f0 	.word	0x200023f0
 800fc78:	2000006a 	.word	0x2000006a
 800fc7c:	200023f2 	.word	0x200023f2
 800fc80:	2000006c 	.word	0x2000006c
 800fc84:	200023f4 	.word	0x200023f4

0800fc88 <Custom_STM_App_Update_Char>:
 * @param  CharOpcode: Characteristic identifier
 * @param  Service_Instance: Instance of the service to which the characteristic belongs
 *
 */
tBleStatus Custom_STM_App_Update_Char(Custom_STM_Char_Opcode_t CharOpcode, uint8_t *pPayload)
{
 800fc88:	b580      	push	{r7, lr}
 800fc8a:	b086      	sub	sp, #24
 800fc8c:	af02      	add	r7, sp, #8
 800fc8e:	4603      	mov	r3, r0
 800fc90:	6039      	str	r1, [r7, #0]
 800fc92:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800fc94:	2392      	movs	r3, #146	@ 0x92
 800fc96:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN Custom_STM_App_Update_Char_1 */

  /* USER CODE END Custom_STM_App_Update_Char_1 */

  switch (CharOpcode)
 800fc98:	79fb      	ldrb	r3, [r7, #7]
 800fc9a:	2b00      	cmp	r3, #0
 800fc9c:	d002      	beq.n	800fca4 <Custom_STM_App_Update_Char+0x1c>
 800fc9e:	2b01      	cmp	r3, #1
 800fca0:	d01a      	beq.n	800fcd8 <Custom_STM_App_Update_Char+0x50>

      /* USER CODE END CUSTOM_STM_App_Update_Service_1_Char_2*/
      break;

    default:
      break;
 800fca2:	e029      	b.n	800fcf8 <Custom_STM_App_Update_Char+0x70>
      ret = aci_gatt_update_char_value(CustomContext.CustomMysvcHdle,
 800fca4:	4b17      	ldr	r3, [pc, #92]	@ (800fd04 <Custom_STM_App_Update_Char+0x7c>)
 800fca6:	8818      	ldrh	r0, [r3, #0]
 800fca8:	4b16      	ldr	r3, [pc, #88]	@ (800fd04 <Custom_STM_App_Update_Char+0x7c>)
 800fcaa:	8859      	ldrh	r1, [r3, #2]
 800fcac:	4b16      	ldr	r3, [pc, #88]	@ (800fd08 <Custom_STM_App_Update_Char+0x80>)
 800fcae:	881b      	ldrh	r3, [r3, #0]
 800fcb0:	b2da      	uxtb	r2, r3
 800fcb2:	683b      	ldr	r3, [r7, #0]
 800fcb4:	9300      	str	r3, [sp, #0]
 800fcb6:	4613      	mov	r3, r2
 800fcb8:	2200      	movs	r2, #0
 800fcba:	f7fd febb 	bl	800da34 <aci_gatt_update_char_value>
 800fcbe:	4603      	mov	r3, r0
 800fcc0:	73fb      	strb	r3, [r7, #15]
      test4 = test4+1;
 800fcc2:	4b12      	ldr	r3, [pc, #72]	@ (800fd0c <Custom_STM_App_Update_Char+0x84>)
 800fcc4:	edd3 7a00 	vldr	s15, [r3]
 800fcc8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800fccc:	ee77 7a87 	vadd.f32	s15, s15, s14
 800fcd0:	4b0e      	ldr	r3, [pc, #56]	@ (800fd0c <Custom_STM_App_Update_Char+0x84>)
 800fcd2:	edc3 7a00 	vstr	s15, [r3]
      break;
 800fcd6:	e00f      	b.n	800fcf8 <Custom_STM_App_Update_Char+0x70>
      ret = aci_gatt_update_char_value(CustomContext.CustomMysvcHdle,
 800fcd8:	4b0a      	ldr	r3, [pc, #40]	@ (800fd04 <Custom_STM_App_Update_Char+0x7c>)
 800fcda:	8818      	ldrh	r0, [r3, #0]
 800fcdc:	4b09      	ldr	r3, [pc, #36]	@ (800fd04 <Custom_STM_App_Update_Char+0x7c>)
 800fcde:	8899      	ldrh	r1, [r3, #4]
 800fce0:	4b0b      	ldr	r3, [pc, #44]	@ (800fd10 <Custom_STM_App_Update_Char+0x88>)
 800fce2:	881b      	ldrh	r3, [r3, #0]
 800fce4:	b2da      	uxtb	r2, r3
 800fce6:	683b      	ldr	r3, [r7, #0]
 800fce8:	9300      	str	r3, [sp, #0]
 800fcea:	4613      	mov	r3, r2
 800fcec:	2200      	movs	r2, #0
 800fcee:	f7fd fea1 	bl	800da34 <aci_gatt_update_char_value>
 800fcf2:	4603      	mov	r3, r0
 800fcf4:	73fb      	strb	r3, [r7, #15]
      break;
 800fcf6:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_App_Update_Char_2 */

  /* USER CODE END Custom_STM_App_Update_Char_2 */

  return ret;
 800fcf8:	7bfb      	ldrb	r3, [r7, #15]
}
 800fcfa:	4618      	mov	r0, r3
 800fcfc:	3710      	adds	r7, #16
 800fcfe:	46bd      	mov	sp, r7
 800fd00:	bd80      	pop	{r7, pc}
 800fd02:	bf00      	nop
 800fd04:	200023f0 	.word	0x200023f0
 800fd08:	2000006a 	.word	0x2000006a
 800fd0c:	200023f8 	.word	0x200023f8
 800fd10:	2000006c 	.word	0x2000006c

0800fd14 <LL_PWR_EnableBootC2>:
{
 800fd14:	b480      	push	{r7}
 800fd16:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 800fd18:	4b05      	ldr	r3, [pc, #20]	@ (800fd30 <LL_PWR_EnableBootC2+0x1c>)
 800fd1a:	68db      	ldr	r3, [r3, #12]
 800fd1c:	4a04      	ldr	r2, [pc, #16]	@ (800fd30 <LL_PWR_EnableBootC2+0x1c>)
 800fd1e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800fd22:	60d3      	str	r3, [r2, #12]
}
 800fd24:	bf00      	nop
 800fd26:	46bd      	mov	sp, r7
 800fd28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd2c:	4770      	bx	lr
 800fd2e:	bf00      	nop
 800fd30:	58000400 	.word	0x58000400

0800fd34 <LL_C2_EXTI_EnableEvent_32_63>:
{
 800fd34:	b480      	push	{r7}
 800fd36:	b083      	sub	sp, #12
 800fd38:	af00      	add	r7, sp, #0
 800fd3a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 800fd3c:	4b06      	ldr	r3, [pc, #24]	@ (800fd58 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800fd3e:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 800fd42:	4905      	ldr	r1, [pc, #20]	@ (800fd58 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800fd44:	687b      	ldr	r3, [r7, #4]
 800fd46:	4313      	orrs	r3, r2
 800fd48:	f8c1 30d4 	str.w	r3, [r1, #212]	@ 0xd4
}
 800fd4c:	bf00      	nop
 800fd4e:	370c      	adds	r7, #12
 800fd50:	46bd      	mov	sp, r7
 800fd52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd56:	4770      	bx	lr
 800fd58:	58000800 	.word	0x58000800

0800fd5c <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 800fd5c:	b480      	push	{r7}
 800fd5e:	b083      	sub	sp, #12
 800fd60:	af00      	add	r7, sp, #0
 800fd62:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 800fd64:	4b05      	ldr	r3, [pc, #20]	@ (800fd7c <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800fd66:	6a1a      	ldr	r2, [r3, #32]
 800fd68:	4904      	ldr	r1, [pc, #16]	@ (800fd7c <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800fd6a:	687b      	ldr	r3, [r7, #4]
 800fd6c:	4313      	orrs	r3, r2
 800fd6e:	620b      	str	r3, [r1, #32]
}
 800fd70:	bf00      	nop
 800fd72:	370c      	adds	r7, #12
 800fd74:	46bd      	mov	sp, r7
 800fd76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd7a:	4770      	bx	lr
 800fd7c:	58000800 	.word	0x58000800

0800fd80 <LL_AHB3_GRP1_EnableClock>:
{
 800fd80:	b480      	push	{r7}
 800fd82:	b085      	sub	sp, #20
 800fd84:	af00      	add	r7, sp, #0
 800fd86:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 800fd88:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800fd8c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800fd8e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800fd92:	687b      	ldr	r3, [r7, #4]
 800fd94:	4313      	orrs	r3, r2
 800fd96:	650b      	str	r3, [r1, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800fd98:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800fd9c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800fd9e:	687b      	ldr	r3, [r7, #4]
 800fda0:	4013      	ands	r3, r2
 800fda2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800fda4:	68fb      	ldr	r3, [r7, #12]
}
 800fda6:	bf00      	nop
 800fda8:	3714      	adds	r7, #20
 800fdaa:	46bd      	mov	sp, r7
 800fdac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdb0:	4770      	bx	lr

0800fdb2 <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 800fdb2:	b480      	push	{r7}
 800fdb4:	b085      	sub	sp, #20
 800fdb6:	af00      	add	r7, sp, #0
 800fdb8:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 800fdba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800fdbe:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 800fdc2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800fdc6:	687b      	ldr	r3, [r7, #4]
 800fdc8:	4313      	orrs	r3, r2
 800fdca:	f8c1 3150 	str.w	r3, [r1, #336]	@ 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 800fdce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800fdd2:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 800fdd6:	687b      	ldr	r3, [r7, #4]
 800fdd8:	4013      	ands	r3, r2
 800fdda:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800fddc:	68fb      	ldr	r3, [r7, #12]
}
 800fdde:	bf00      	nop
 800fde0:	3714      	adds	r7, #20
 800fde2:	46bd      	mov	sp, r7
 800fde4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fde8:	4770      	bx	lr

0800fdea <LL_C1_IPCC_EnableIT_TXF>:
  * @rmtoll C1CR          TXFIE         LL_C1_IPCC_EnableIT_TXF
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_TXF(IPCC_TypeDef *IPCCx)
{
 800fdea:	b480      	push	{r7}
 800fdec:	b083      	sub	sp, #12
 800fdee:	af00      	add	r7, sp, #0
 800fdf0:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 800fdf2:	687b      	ldr	r3, [r7, #4]
 800fdf4:	681b      	ldr	r3, [r3, #0]
 800fdf6:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800fdfa:	687b      	ldr	r3, [r7, #4]
 800fdfc:	601a      	str	r2, [r3, #0]
}
 800fdfe:	bf00      	nop
 800fe00:	370c      	adds	r7, #12
 800fe02:	46bd      	mov	sp, r7
 800fe04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe08:	4770      	bx	lr

0800fe0a <LL_C1_IPCC_EnableIT_RXO>:
  * @rmtoll C1CR          RXOIE         LL_C1_IPCC_EnableIT_RXO
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_RXO(IPCC_TypeDef *IPCCx)
{
 800fe0a:	b480      	push	{r7}
 800fe0c:	b083      	sub	sp, #12
 800fe0e:	af00      	add	r7, sp, #0
 800fe10:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 800fe12:	687b      	ldr	r3, [r7, #4]
 800fe14:	681b      	ldr	r3, [r3, #0]
 800fe16:	f043 0201 	orr.w	r2, r3, #1
 800fe1a:	687b      	ldr	r3, [r7, #4]
 800fe1c:	601a      	str	r2, [r3, #0]
}
 800fe1e:	bf00      	nop
 800fe20:	370c      	adds	r7, #12
 800fe22:	46bd      	mov	sp, r7
 800fe24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe28:	4770      	bx	lr

0800fe2a <LL_C1_IPCC_EnableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800fe2a:	b480      	push	{r7}
 800fe2c:	b083      	sub	sp, #12
 800fe2e:	af00      	add	r7, sp, #0
 800fe30:	6078      	str	r0, [r7, #4]
 800fe32:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800fe34:	687b      	ldr	r3, [r7, #4]
 800fe36:	685a      	ldr	r2, [r3, #4]
 800fe38:	683b      	ldr	r3, [r7, #0]
 800fe3a:	041b      	lsls	r3, r3, #16
 800fe3c:	43db      	mvns	r3, r3
 800fe3e:	401a      	ands	r2, r3
 800fe40:	687b      	ldr	r3, [r7, #4]
 800fe42:	605a      	str	r2, [r3, #4]
}
 800fe44:	bf00      	nop
 800fe46:	370c      	adds	r7, #12
 800fe48:	46bd      	mov	sp, r7
 800fe4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe4e:	4770      	bx	lr

0800fe50 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800fe50:	b480      	push	{r7}
 800fe52:	b083      	sub	sp, #12
 800fe54:	af00      	add	r7, sp, #0
 800fe56:	6078      	str	r0, [r7, #4]
 800fe58:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800fe5a:	687b      	ldr	r3, [r7, #4]
 800fe5c:	685a      	ldr	r2, [r3, #4]
 800fe5e:	683b      	ldr	r3, [r7, #0]
 800fe60:	041b      	lsls	r3, r3, #16
 800fe62:	431a      	orrs	r2, r3
 800fe64:	687b      	ldr	r3, [r7, #4]
 800fe66:	605a      	str	r2, [r3, #4]
}
 800fe68:	bf00      	nop
 800fe6a:	370c      	adds	r7, #12
 800fe6c:	46bd      	mov	sp, r7
 800fe6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe72:	4770      	bx	lr

0800fe74 <LL_C1_IPCC_EnableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800fe74:	b480      	push	{r7}
 800fe76:	b083      	sub	sp, #12
 800fe78:	af00      	add	r7, sp, #0
 800fe7a:	6078      	str	r0, [r7, #4]
 800fe7c:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 800fe7e:	687b      	ldr	r3, [r7, #4]
 800fe80:	685a      	ldr	r2, [r3, #4]
 800fe82:	683b      	ldr	r3, [r7, #0]
 800fe84:	43db      	mvns	r3, r3
 800fe86:	401a      	ands	r2, r3
 800fe88:	687b      	ldr	r3, [r7, #4]
 800fe8a:	605a      	str	r2, [r3, #4]
}
 800fe8c:	bf00      	nop
 800fe8e:	370c      	adds	r7, #12
 800fe90:	46bd      	mov	sp, r7
 800fe92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe96:	4770      	bx	lr

0800fe98 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800fe98:	b480      	push	{r7}
 800fe9a:	b083      	sub	sp, #12
 800fe9c:	af00      	add	r7, sp, #0
 800fe9e:	6078      	str	r0, [r7, #4]
 800fea0:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 800fea2:	687b      	ldr	r3, [r7, #4]
 800fea4:	683a      	ldr	r2, [r7, #0]
 800fea6:	609a      	str	r2, [r3, #8]
}
 800fea8:	bf00      	nop
 800feaa:	370c      	adds	r7, #12
 800feac:	46bd      	mov	sp, r7
 800feae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feb2:	4770      	bx	lr

0800feb4 <LL_C1_IPCC_SetFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_SetFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800feb4:	b480      	push	{r7}
 800feb6:	b083      	sub	sp, #12
 800feb8:	af00      	add	r7, sp, #0
 800feba:	6078      	str	r0, [r7, #4]
 800febc:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 800febe:	683b      	ldr	r3, [r7, #0]
 800fec0:	041a      	lsls	r2, r3, #16
 800fec2:	687b      	ldr	r3, [r7, #4]
 800fec4:	609a      	str	r2, [r3, #8]
}
 800fec6:	bf00      	nop
 800fec8:	370c      	adds	r7, #12
 800feca:	46bd      	mov	sp, r7
 800fecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fed0:	4770      	bx	lr

0800fed2 <LL_C1_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C1_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 800fed2:	b480      	push	{r7}
 800fed4:	b083      	sub	sp, #12
 800fed6:	af00      	add	r7, sp, #0
 800fed8:	6078      	str	r0, [r7, #4]
 800feda:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 800fedc:	687b      	ldr	r3, [r7, #4]
 800fede:	68da      	ldr	r2, [r3, #12]
 800fee0:	683b      	ldr	r3, [r7, #0]
 800fee2:	4013      	ands	r3, r2
 800fee4:	683a      	ldr	r2, [r7, #0]
 800fee6:	429a      	cmp	r2, r3
 800fee8:	d101      	bne.n	800feee <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 800feea:	2301      	movs	r3, #1
 800feec:	e000      	b.n	800fef0 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 800feee:	2300      	movs	r3, #0
}
 800fef0:	4618      	mov	r0, r3
 800fef2:	370c      	adds	r7, #12
 800fef4:	46bd      	mov	sp, r7
 800fef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fefa:	4770      	bx	lr

0800fefc <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 800fefc:	b480      	push	{r7}
 800fefe:	b083      	sub	sp, #12
 800ff00:	af00      	add	r7, sp, #0
 800ff02:	6078      	str	r0, [r7, #4]
 800ff04:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 800ff06:	687b      	ldr	r3, [r7, #4]
 800ff08:	69da      	ldr	r2, [r3, #28]
 800ff0a:	683b      	ldr	r3, [r7, #0]
 800ff0c:	4013      	ands	r3, r2
 800ff0e:	683a      	ldr	r2, [r7, #0]
 800ff10:	429a      	cmp	r2, r3
 800ff12:	d101      	bne.n	800ff18 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 800ff14:	2301      	movs	r3, #1
 800ff16:	e000      	b.n	800ff1a <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 800ff18:	2300      	movs	r3, #0
}
 800ff1a:	4618      	mov	r0, r3
 800ff1c:	370c      	adds	r7, #12
 800ff1e:	46bd      	mov	sp, r7
 800ff20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff24:	4770      	bx	lr
	...

0800ff28 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 800ff28:	b580      	push	{r7, lr}
 800ff2a:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 800ff2c:	2102      	movs	r1, #2
 800ff2e:	4818      	ldr	r0, [pc, #96]	@ (800ff90 <HW_IPCC_Rx_Handler+0x68>)
 800ff30:	f7ff ffe4 	bl	800fefc <LL_C2_IPCC_IsActiveFlag_CHx>
 800ff34:	4603      	mov	r3, r0
 800ff36:	2b00      	cmp	r3, #0
 800ff38:	d008      	beq.n	800ff4c <HW_IPCC_Rx_Handler+0x24>
 800ff3a:	4b15      	ldr	r3, [pc, #84]	@ (800ff90 <HW_IPCC_Rx_Handler+0x68>)
 800ff3c:	685b      	ldr	r3, [r3, #4]
 800ff3e:	f003 0302 	and.w	r3, r3, #2
 800ff42:	2b00      	cmp	r3, #0
 800ff44:	d102      	bne.n	800ff4c <HW_IPCC_Rx_Handler+0x24>
  {
      HW_IPCC_SYS_EvtHandler();
 800ff46:	f000 f8d5 	bl	80100f4 <HW_IPCC_SYS_EvtHandler>
 800ff4a:	e01e      	b.n	800ff8a <HW_IPCC_Rx_Handler+0x62>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 800ff4c:	2101      	movs	r1, #1
 800ff4e:	4810      	ldr	r0, [pc, #64]	@ (800ff90 <HW_IPCC_Rx_Handler+0x68>)
 800ff50:	f7ff ffd4 	bl	800fefc <LL_C2_IPCC_IsActiveFlag_CHx>
 800ff54:	4603      	mov	r3, r0
 800ff56:	2b00      	cmp	r3, #0
 800ff58:	d008      	beq.n	800ff6c <HW_IPCC_Rx_Handler+0x44>
 800ff5a:	4b0d      	ldr	r3, [pc, #52]	@ (800ff90 <HW_IPCC_Rx_Handler+0x68>)
 800ff5c:	685b      	ldr	r3, [r3, #4]
 800ff5e:	f003 0301 	and.w	r3, r3, #1
 800ff62:	2b00      	cmp	r3, #0
 800ff64:	d102      	bne.n	800ff6c <HW_IPCC_Rx_Handler+0x44>
  {
    HW_IPCC_BLE_EvtHandler();
 800ff66:	f000 f889 	bl	801007c <HW_IPCC_BLE_EvtHandler>
 800ff6a:	e00e      	b.n	800ff8a <HW_IPCC_Rx_Handler+0x62>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 800ff6c:	2108      	movs	r1, #8
 800ff6e:	4808      	ldr	r0, [pc, #32]	@ (800ff90 <HW_IPCC_Rx_Handler+0x68>)
 800ff70:	f7ff ffc4 	bl	800fefc <LL_C2_IPCC_IsActiveFlag_CHx>
 800ff74:	4603      	mov	r3, r0
 800ff76:	2b00      	cmp	r3, #0
 800ff78:	d008      	beq.n	800ff8c <HW_IPCC_Rx_Handler+0x64>
 800ff7a:	4b05      	ldr	r3, [pc, #20]	@ (800ff90 <HW_IPCC_Rx_Handler+0x68>)
 800ff7c:	685b      	ldr	r3, [r3, #4]
 800ff7e:	f003 0308 	and.w	r3, r3, #8
 800ff82:	2b00      	cmp	r3, #0
 800ff84:	d102      	bne.n	800ff8c <HW_IPCC_Rx_Handler+0x64>
  {
    HW_IPCC_TRACES_EvtHandler();
 800ff86:	f000 f901 	bl	801018c <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 800ff8a:	bf00      	nop
 800ff8c:	bf00      	nop
}
 800ff8e:	bd80      	pop	{r7, pc}
 800ff90:	58000c00 	.word	0x58000c00

0800ff94 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 800ff94:	b580      	push	{r7, lr}
 800ff96:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 800ff98:	2102      	movs	r1, #2
 800ff9a:	4818      	ldr	r0, [pc, #96]	@ (800fffc <HW_IPCC_Tx_Handler+0x68>)
 800ff9c:	f7ff ff99 	bl	800fed2 <LL_C1_IPCC_IsActiveFlag_CHx>
 800ffa0:	4603      	mov	r3, r0
 800ffa2:	2b00      	cmp	r3, #0
 800ffa4:	d108      	bne.n	800ffb8 <HW_IPCC_Tx_Handler+0x24>
 800ffa6:	4b15      	ldr	r3, [pc, #84]	@ (800fffc <HW_IPCC_Tx_Handler+0x68>)
 800ffa8:	685b      	ldr	r3, [r3, #4]
 800ffaa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ffae:	2b00      	cmp	r3, #0
 800ffb0:	d102      	bne.n	800ffb8 <HW_IPCC_Tx_Handler+0x24>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 800ffb2:	f000 f893 	bl	80100dc <HW_IPCC_SYS_CmdEvtHandler>
 800ffb6:	e01e      	b.n	800fff6 <HW_IPCC_Tx_Handler+0x62>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 800ffb8:	2108      	movs	r1, #8
 800ffba:	4810      	ldr	r0, [pc, #64]	@ (800fffc <HW_IPCC_Tx_Handler+0x68>)
 800ffbc:	f7ff ff89 	bl	800fed2 <LL_C1_IPCC_IsActiveFlag_CHx>
 800ffc0:	4603      	mov	r3, r0
 800ffc2:	2b00      	cmp	r3, #0
 800ffc4:	d108      	bne.n	800ffd8 <HW_IPCC_Tx_Handler+0x44>
 800ffc6:	4b0d      	ldr	r3, [pc, #52]	@ (800fffc <HW_IPCC_Tx_Handler+0x68>)
 800ffc8:	685b      	ldr	r3, [r3, #4]
 800ffca:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800ffce:	2b00      	cmp	r3, #0
 800ffd0:	d102      	bne.n	800ffd8 <HW_IPCC_Tx_Handler+0x44>
  {
    HW_IPCC_MM_FreeBufHandler();
 800ffd2:	f000 f8bd 	bl	8010150 <HW_IPCC_MM_FreeBufHandler>
 800ffd6:	e00e      	b.n	800fff6 <HW_IPCC_Tx_Handler+0x62>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 800ffd8:	2120      	movs	r1, #32
 800ffda:	4808      	ldr	r0, [pc, #32]	@ (800fffc <HW_IPCC_Tx_Handler+0x68>)
 800ffdc:	f7ff ff79 	bl	800fed2 <LL_C1_IPCC_IsActiveFlag_CHx>
 800ffe0:	4603      	mov	r3, r0
 800ffe2:	2b00      	cmp	r3, #0
 800ffe4:	d108      	bne.n	800fff8 <HW_IPCC_Tx_Handler+0x64>
 800ffe6:	4b05      	ldr	r3, [pc, #20]	@ (800fffc <HW_IPCC_Tx_Handler+0x68>)
 800ffe8:	685b      	ldr	r3, [r3, #4]
 800ffea:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800ffee:	2b00      	cmp	r3, #0
 800fff0:	d102      	bne.n	800fff8 <HW_IPCC_Tx_Handler+0x64>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 800fff2:	f000 f84f 	bl	8010094 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 800fff6:	bf00      	nop
 800fff8:	bf00      	nop
}
 800fffa:	bd80      	pop	{r7, pc}
 800fffc:	58000c00 	.word	0x58000c00

08010000 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 8010000:	b580      	push	{r7, lr}
 8010002:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
  * when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 8010004:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8010008:	f7ff fed3 	bl	800fdb2 <LL_C2_AHB3_GRP1_EnableClock>

  /**
  * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
  */
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 801000c:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8010010:	f7ff fea4 	bl	800fd5c <LL_EXTI_EnableRisingTrig_32_63>
  /* It is required to have at least a system clock cycle before a SEV after LL_EXTI_EnableRisingTrig_32_63() */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 8010014:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8010018:	f7ff fe8c 	bl	800fd34 <LL_C2_EXTI_EnableEvent_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 801001c:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 801001e:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 8010020:	f7ff fe78 	bl	800fd14 <LL_PWR_EnableBootC2>

  return;
 8010024:	bf00      	nop
}
 8010026:	bd80      	pop	{r7, pc}

08010028 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 8010028:	b580      	push	{r7, lr}
 801002a:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 801002c:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8010030:	f7ff fea6 	bl	800fd80 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 8010034:	4806      	ldr	r0, [pc, #24]	@ (8010050 <HW_IPCC_Init+0x28>)
 8010036:	f7ff fee8 	bl	800fe0a <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 801003a:	4805      	ldr	r0, [pc, #20]	@ (8010050 <HW_IPCC_Init+0x28>)
 801003c:	f7ff fed5 	bl	800fdea <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8010040:	202c      	movs	r0, #44	@ 0x2c
 8010042:	f7f7 feba 	bl	8007dba <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8010046:	202d      	movs	r0, #45	@ 0x2d
 8010048:	f7f7 feb7 	bl	8007dba <HAL_NVIC_EnableIRQ>

  return;
 801004c:	bf00      	nop
}
 801004e:	bd80      	pop	{r7, pc}
 8010050:	58000c00 	.word	0x58000c00

08010054 <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 8010054:	b580      	push	{r7, lr}
 8010056:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8010058:	2101      	movs	r1, #1
 801005a:	4802      	ldr	r0, [pc, #8]	@ (8010064 <HW_IPCC_BLE_Init+0x10>)
 801005c:	f7ff ff0a 	bl	800fe74 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8010060:	bf00      	nop
}
 8010062:	bd80      	pop	{r7, pc}
 8010064:	58000c00 	.word	0x58000c00

08010068 <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 8010068:	b580      	push	{r7, lr}
 801006a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 801006c:	2101      	movs	r1, #1
 801006e:	4802      	ldr	r0, [pc, #8]	@ (8010078 <HW_IPCC_BLE_SendCmd+0x10>)
 8010070:	f7ff ff20 	bl	800feb4 <LL_C1_IPCC_SetFlag_CHx>

  return;
 8010074:	bf00      	nop
}
 8010076:	bd80      	pop	{r7, pc}
 8010078:	58000c00 	.word	0x58000c00

0801007c <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 801007c:	b580      	push	{r7, lr}
 801007e:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 8010080:	f7fe fd4a 	bl	800eb18 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8010084:	2101      	movs	r1, #1
 8010086:	4802      	ldr	r0, [pc, #8]	@ (8010090 <HW_IPCC_BLE_EvtHandler+0x14>)
 8010088:	f7ff ff06 	bl	800fe98 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 801008c:	bf00      	nop
}
 801008e:	bd80      	pop	{r7, pc}
 8010090:	58000c00 	.word	0x58000c00

08010094 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 8010094:	b580      	push	{r7, lr}
 8010096:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 8010098:	2120      	movs	r1, #32
 801009a:	4803      	ldr	r0, [pc, #12]	@ (80100a8 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 801009c:	f7ff fed8 	bl	800fe50 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 80100a0:	f7fe fd6a 	bl	800eb78 <HW_IPCC_BLE_AclDataAckNot>

  return;
 80100a4:	bf00      	nop
}
 80100a6:	bd80      	pop	{r7, pc}
 80100a8:	58000c00 	.word	0x58000c00

080100ac <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 80100ac:	b580      	push	{r7, lr}
 80100ae:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 80100b0:	2102      	movs	r1, #2
 80100b2:	4802      	ldr	r0, [pc, #8]	@ (80100bc <HW_IPCC_SYS_Init+0x10>)
 80100b4:	f7ff fede 	bl	800fe74 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 80100b8:	bf00      	nop
}
 80100ba:	bd80      	pop	{r7, pc}
 80100bc:	58000c00 	.word	0x58000c00

080100c0 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 80100c0:	b580      	push	{r7, lr}
 80100c2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 80100c4:	2102      	movs	r1, #2
 80100c6:	4804      	ldr	r0, [pc, #16]	@ (80100d8 <HW_IPCC_SYS_SendCmd+0x18>)
 80100c8:	f7ff fef4 	bl	800feb4 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 80100cc:	2102      	movs	r1, #2
 80100ce:	4802      	ldr	r0, [pc, #8]	@ (80100d8 <HW_IPCC_SYS_SendCmd+0x18>)
 80100d0:	f7ff feab 	bl	800fe2a <LL_C1_IPCC_EnableTransmitChannel>

  return;
 80100d4:	bf00      	nop
}
 80100d6:	bd80      	pop	{r7, pc}
 80100d8:	58000c00 	.word	0x58000c00

080100dc <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 80100dc:	b580      	push	{r7, lr}
 80100de:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 80100e0:	2102      	movs	r1, #2
 80100e2:	4803      	ldr	r0, [pc, #12]	@ (80100f0 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 80100e4:	f7ff feb4 	bl	800fe50 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 80100e8:	f7fe fd96 	bl	800ec18 <HW_IPCC_SYS_CmdEvtNot>

  return;
 80100ec:	bf00      	nop
}
 80100ee:	bd80      	pop	{r7, pc}
 80100f0:	58000c00 	.word	0x58000c00

080100f4 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 80100f4:	b580      	push	{r7, lr}
 80100f6:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 80100f8:	f7fe fda4 	bl	800ec44 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 80100fc:	2102      	movs	r1, #2
 80100fe:	4802      	ldr	r0, [pc, #8]	@ (8010108 <HW_IPCC_SYS_EvtHandler+0x14>)
 8010100:	f7ff feca 	bl	800fe98 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8010104:	bf00      	nop
}
 8010106:	bd80      	pop	{r7, pc}
 8010108:	58000c00 	.word	0x58000c00

0801010c <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 801010c:	b580      	push	{r7, lr}
 801010e:	b082      	sub	sp, #8
 8010110:	af00      	add	r7, sp, #0
 8010112:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 8010114:	2108      	movs	r1, #8
 8010116:	480c      	ldr	r0, [pc, #48]	@ (8010148 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8010118:	f7ff fedb 	bl	800fed2 <LL_C1_IPCC_IsActiveFlag_CHx>
 801011c:	4603      	mov	r3, r0
 801011e:	2b00      	cmp	r3, #0
 8010120:	d007      	beq.n	8010132 <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 8010122:	4a0a      	ldr	r2, [pc, #40]	@ (801014c <HW_IPCC_MM_SendFreeBuf+0x40>)
 8010124:	687b      	ldr	r3, [r7, #4]
 8010126:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8010128:	2108      	movs	r1, #8
 801012a:	4807      	ldr	r0, [pc, #28]	@ (8010148 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 801012c:	f7ff fe7d 	bl	800fe2a <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 8010130:	e006      	b.n	8010140 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 8010132:	687b      	ldr	r3, [r7, #4]
 8010134:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8010136:	2108      	movs	r1, #8
 8010138:	4803      	ldr	r0, [pc, #12]	@ (8010148 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 801013a:	f7ff febb 	bl	800feb4 <LL_C1_IPCC_SetFlag_CHx>
  return;
 801013e:	bf00      	nop
}
 8010140:	3708      	adds	r7, #8
 8010142:	46bd      	mov	sp, r7
 8010144:	bd80      	pop	{r7, pc}
 8010146:	bf00      	nop
 8010148:	58000c00 	.word	0x58000c00
 801014c:	200023fc 	.word	0x200023fc

08010150 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 8010150:	b580      	push	{r7, lr}
 8010152:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8010154:	2108      	movs	r1, #8
 8010156:	4806      	ldr	r0, [pc, #24]	@ (8010170 <HW_IPCC_MM_FreeBufHandler+0x20>)
 8010158:	f7ff fe7a 	bl	800fe50 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 801015c:	4b05      	ldr	r3, [pc, #20]	@ (8010174 <HW_IPCC_MM_FreeBufHandler+0x24>)
 801015e:	681b      	ldr	r3, [r3, #0]
 8010160:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8010162:	2108      	movs	r1, #8
 8010164:	4802      	ldr	r0, [pc, #8]	@ (8010170 <HW_IPCC_MM_FreeBufHandler+0x20>)
 8010166:	f7ff fea5 	bl	800feb4 <LL_C1_IPCC_SetFlag_CHx>

  return;
 801016a:	bf00      	nop
}
 801016c:	bd80      	pop	{r7, pc}
 801016e:	bf00      	nop
 8010170:	58000c00 	.word	0x58000c00
 8010174:	200023fc 	.word	0x200023fc

08010178 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 8010178:	b580      	push	{r7, lr}
 801017a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 801017c:	2108      	movs	r1, #8
 801017e:	4802      	ldr	r0, [pc, #8]	@ (8010188 <HW_IPCC_TRACES_Init+0x10>)
 8010180:	f7ff fe78 	bl	800fe74 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8010184:	bf00      	nop
}
 8010186:	bd80      	pop	{r7, pc}
 8010188:	58000c00 	.word	0x58000c00

0801018c <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 801018c:	b580      	push	{r7, lr}
 801018e:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 8010190:	f7fe fe00 	bl	800ed94 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 8010194:	2108      	movs	r1, #8
 8010196:	4802      	ldr	r0, [pc, #8]	@ (80101a0 <HW_IPCC_TRACES_EvtHandler+0x14>)
 8010198:	f7ff fe7e 	bl	800fe98 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 801019c:	bf00      	nop
}
 801019e:	bd80      	pop	{r7, pc}
 80101a0:	58000c00 	.word	0x58000c00

080101a4 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 80101a4:	b480      	push	{r7}
 80101a6:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 80101a8:	4b05      	ldr	r3, [pc, #20]	@ (80101c0 <UTIL_LPM_Init+0x1c>)
 80101aa:	2200      	movs	r2, #0
 80101ac:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 80101ae:	4b05      	ldr	r3, [pc, #20]	@ (80101c4 <UTIL_LPM_Init+0x20>)
 80101b0:	2200      	movs	r2, #0
 80101b2:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 80101b4:	bf00      	nop
 80101b6:	46bd      	mov	sp, r7
 80101b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101bc:	4770      	bx	lr
 80101be:	bf00      	nop
 80101c0:	20002400 	.word	0x20002400
 80101c4:	20002404 	.word	0x20002404

080101c8 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 80101c8:	b480      	push	{r7}
 80101ca:	b087      	sub	sp, #28
 80101cc:	af00      	add	r7, sp, #0
 80101ce:	6078      	str	r0, [r7, #4]
 80101d0:	460b      	mov	r3, r1
 80101d2:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80101d4:	f3ef 8310 	mrs	r3, PRIMASK
 80101d8:	613b      	str	r3, [r7, #16]
  return(result);
 80101da:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 80101dc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80101de:	b672      	cpsid	i
}
 80101e0:	bf00      	nop
  
  switch(state)
 80101e2:	78fb      	ldrb	r3, [r7, #3]
 80101e4:	2b00      	cmp	r3, #0
 80101e6:	d008      	beq.n	80101fa <UTIL_LPM_SetOffMode+0x32>
 80101e8:	2b01      	cmp	r3, #1
 80101ea:	d10e      	bne.n	801020a <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 80101ec:	4b0d      	ldr	r3, [pc, #52]	@ (8010224 <UTIL_LPM_SetOffMode+0x5c>)
 80101ee:	681a      	ldr	r2, [r3, #0]
 80101f0:	687b      	ldr	r3, [r7, #4]
 80101f2:	4313      	orrs	r3, r2
 80101f4:	4a0b      	ldr	r2, [pc, #44]	@ (8010224 <UTIL_LPM_SetOffMode+0x5c>)
 80101f6:	6013      	str	r3, [r2, #0]
      break;
 80101f8:	e008      	b.n	801020c <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 80101fa:	687b      	ldr	r3, [r7, #4]
 80101fc:	43da      	mvns	r2, r3
 80101fe:	4b09      	ldr	r3, [pc, #36]	@ (8010224 <UTIL_LPM_SetOffMode+0x5c>)
 8010200:	681b      	ldr	r3, [r3, #0]
 8010202:	4013      	ands	r3, r2
 8010204:	4a07      	ldr	r2, [pc, #28]	@ (8010224 <UTIL_LPM_SetOffMode+0x5c>)
 8010206:	6013      	str	r3, [r2, #0]
      break;
 8010208:	e000      	b.n	801020c <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 801020a:	bf00      	nop
 801020c:	697b      	ldr	r3, [r7, #20]
 801020e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010210:	68fb      	ldr	r3, [r7, #12]
 8010212:	f383 8810 	msr	PRIMASK, r3
}
 8010216:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8010218:	bf00      	nop
 801021a:	371c      	adds	r7, #28
 801021c:	46bd      	mov	sp, r7
 801021e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010222:	4770      	bx	lr
 8010224:	20002404 	.word	0x20002404

08010228 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 8010228:	b580      	push	{r7, lr}
 801022a:	b090      	sub	sp, #64	@ 0x40
 801022c:	af00      	add	r7, sp, #0
 801022e:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 8010230:	4b73      	ldr	r3, [pc, #460]	@ (8010400 <UTIL_SEQ_Run+0x1d8>)
 8010232:	681b      	ldr	r3, [r3, #0]
 8010234:	62bb      	str	r3, [r7, #40]	@ 0x28
  SuperMask &= Mask_bm;
 8010236:	4b72      	ldr	r3, [pc, #456]	@ (8010400 <UTIL_SEQ_Run+0x1d8>)
 8010238:	681a      	ldr	r2, [r3, #0]
 801023a:	687b      	ldr	r3, [r7, #4]
 801023c:	4013      	ands	r3, r2
 801023e:	4a70      	ldr	r2, [pc, #448]	@ (8010400 <UTIL_SEQ_Run+0x1d8>)
 8010240:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 8010242:	4b70      	ldr	r3, [pc, #448]	@ (8010404 <UTIL_SEQ_Run+0x1dc>)
 8010244:	681b      	ldr	r3, [r3, #0]
 8010246:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 8010248:	4b6f      	ldr	r3, [pc, #444]	@ (8010408 <UTIL_SEQ_Run+0x1e0>)
 801024a:	681b      	ldr	r3, [r3, #0]
 801024c:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 801024e:	4b6f      	ldr	r3, [pc, #444]	@ (801040c <UTIL_SEQ_Run+0x1e4>)
 8010250:	681b      	ldr	r3, [r3, #0]
 8010252:	633b      	str	r3, [r7, #48]	@ 0x30
  local_evtwaited =  EvtWaited;
 8010254:	4b6e      	ldr	r3, [pc, #440]	@ (8010410 <UTIL_SEQ_Run+0x1e8>)
 8010256:	681b      	ldr	r3, [r3, #0]
 8010258:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 801025a:	e08d      	b.n	8010378 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 801025c:	2300      	movs	r3, #0
 801025e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 8010260:	e002      	b.n	8010268 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 8010262:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010264:	3301      	adds	r3, #1
 8010266:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 8010268:	4a6a      	ldr	r2, [pc, #424]	@ (8010414 <UTIL_SEQ_Run+0x1ec>)
 801026a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801026c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8010270:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010272:	401a      	ands	r2, r3
 8010274:	4b62      	ldr	r3, [pc, #392]	@ (8010400 <UTIL_SEQ_Run+0x1d8>)
 8010276:	681b      	ldr	r3, [r3, #0]
 8010278:	4013      	ands	r3, r2
 801027a:	2b00      	cmp	r3, #0
 801027c:	d0f1      	beq.n	8010262 <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 801027e:	4a65      	ldr	r2, [pc, #404]	@ (8010414 <UTIL_SEQ_Run+0x1ec>)
 8010280:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010282:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8010286:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010288:	401a      	ands	r2, r3
 801028a:	4b5d      	ldr	r3, [pc, #372]	@ (8010400 <UTIL_SEQ_Run+0x1d8>)
 801028c:	681b      	ldr	r3, [r3, #0]
 801028e:	4013      	ands	r3, r2
 8010290:	627b      	str	r3, [r7, #36]	@ 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 8010292:	4a60      	ldr	r2, [pc, #384]	@ (8010414 <UTIL_SEQ_Run+0x1ec>)
 8010294:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010296:	00db      	lsls	r3, r3, #3
 8010298:	4413      	add	r3, r2
 801029a:	685a      	ldr	r2, [r3, #4]
 801029c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801029e:	4013      	ands	r3, r2
 80102a0:	2b00      	cmp	r3, #0
 80102a2:	d106      	bne.n	80102b2 <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 80102a4:	4a5b      	ldr	r2, [pc, #364]	@ (8010414 <UTIL_SEQ_Run+0x1ec>)
 80102a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80102a8:	00db      	lsls	r3, r3, #3
 80102aa:	4413      	add	r3, r2
 80102ac:	f04f 32ff 	mov.w	r2, #4294967295
 80102b0:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 80102b2:	4a58      	ldr	r2, [pc, #352]	@ (8010414 <UTIL_SEQ_Run+0x1ec>)
 80102b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80102b6:	00db      	lsls	r3, r3, #3
 80102b8:	4413      	add	r3, r2
 80102ba:	685a      	ldr	r2, [r3, #4]
 80102bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80102be:	4013      	ands	r3, r2
 80102c0:	4618      	mov	r0, r3
 80102c2:	f000 f9b3 	bl	801062c <SEQ_BitPosition>
 80102c6:	4603      	mov	r3, r0
 80102c8:	461a      	mov	r2, r3
 80102ca:	4b53      	ldr	r3, [pc, #332]	@ (8010418 <UTIL_SEQ_Run+0x1f0>)
 80102cc:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 80102ce:	4a51      	ldr	r2, [pc, #324]	@ (8010414 <UTIL_SEQ_Run+0x1ec>)
 80102d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80102d2:	00db      	lsls	r3, r3, #3
 80102d4:	4413      	add	r3, r2
 80102d6:	685a      	ldr	r2, [r3, #4]
 80102d8:	4b4f      	ldr	r3, [pc, #316]	@ (8010418 <UTIL_SEQ_Run+0x1f0>)
 80102da:	681b      	ldr	r3, [r3, #0]
 80102dc:	2101      	movs	r1, #1
 80102de:	fa01 f303 	lsl.w	r3, r1, r3
 80102e2:	43db      	mvns	r3, r3
 80102e4:	401a      	ands	r2, r3
 80102e6:	494b      	ldr	r1, [pc, #300]	@ (8010414 <UTIL_SEQ_Run+0x1ec>)
 80102e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80102ea:	00db      	lsls	r3, r3, #3
 80102ec:	440b      	add	r3, r1
 80102ee:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80102f0:	f3ef 8310 	mrs	r3, PRIMASK
 80102f4:	61bb      	str	r3, [r7, #24]
  return(result);
 80102f6:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80102f8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 80102fa:	b672      	cpsid	i
}
 80102fc:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 80102fe:	4b46      	ldr	r3, [pc, #280]	@ (8010418 <UTIL_SEQ_Run+0x1f0>)
 8010300:	681b      	ldr	r3, [r3, #0]
 8010302:	2201      	movs	r2, #1
 8010304:	fa02 f303 	lsl.w	r3, r2, r3
 8010308:	43da      	mvns	r2, r3
 801030a:	4b3e      	ldr	r3, [pc, #248]	@ (8010404 <UTIL_SEQ_Run+0x1dc>)
 801030c:	681b      	ldr	r3, [r3, #0]
 801030e:	4013      	ands	r3, r2
 8010310:	4a3c      	ldr	r2, [pc, #240]	@ (8010404 <UTIL_SEQ_Run+0x1dc>)
 8010312:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8010314:	2302      	movs	r3, #2
 8010316:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8010318:	e013      	b.n	8010342 <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 801031a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801031c:	3b01      	subs	r3, #1
 801031e:	4a3d      	ldr	r2, [pc, #244]	@ (8010414 <UTIL_SEQ_Run+0x1ec>)
 8010320:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 8010324:	4b3c      	ldr	r3, [pc, #240]	@ (8010418 <UTIL_SEQ_Run+0x1f0>)
 8010326:	681b      	ldr	r3, [r3, #0]
 8010328:	2201      	movs	r2, #1
 801032a:	fa02 f303 	lsl.w	r3, r2, r3
 801032e:	43da      	mvns	r2, r3
 8010330:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010332:	3b01      	subs	r3, #1
 8010334:	400a      	ands	r2, r1
 8010336:	4937      	ldr	r1, [pc, #220]	@ (8010414 <UTIL_SEQ_Run+0x1ec>)
 8010338:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 801033c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801033e:	3b01      	subs	r3, #1
 8010340:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8010342:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010344:	2b00      	cmp	r3, #0
 8010346:	d1e8      	bne.n	801031a <UTIL_SEQ_Run+0xf2>
 8010348:	6a3b      	ldr	r3, [r7, #32]
 801034a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801034c:	697b      	ldr	r3, [r7, #20]
 801034e:	f383 8810 	msr	PRIMASK, r3
}
 8010352:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 8010354:	4b30      	ldr	r3, [pc, #192]	@ (8010418 <UTIL_SEQ_Run+0x1f0>)
 8010356:	681b      	ldr	r3, [r3, #0]
 8010358:	4a30      	ldr	r2, [pc, #192]	@ (801041c <UTIL_SEQ_Run+0x1f4>)
 801035a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801035e:	4798      	blx	r3

    local_taskset = TaskSet;
 8010360:	4b28      	ldr	r3, [pc, #160]	@ (8010404 <UTIL_SEQ_Run+0x1dc>)
 8010362:	681b      	ldr	r3, [r3, #0]
 8010364:	63bb      	str	r3, [r7, #56]	@ 0x38
    local_evtset = EvtSet;
 8010366:	4b28      	ldr	r3, [pc, #160]	@ (8010408 <UTIL_SEQ_Run+0x1e0>)
 8010368:	681b      	ldr	r3, [r3, #0]
 801036a:	637b      	str	r3, [r7, #52]	@ 0x34
    local_taskmask = TaskMask;
 801036c:	4b27      	ldr	r3, [pc, #156]	@ (801040c <UTIL_SEQ_Run+0x1e4>)
 801036e:	681b      	ldr	r3, [r3, #0]
 8010370:	633b      	str	r3, [r7, #48]	@ 0x30
    local_evtwaited = EvtWaited;
 8010372:	4b27      	ldr	r3, [pc, #156]	@ (8010410 <UTIL_SEQ_Run+0x1e8>)
 8010374:	681b      	ldr	r3, [r3, #0]
 8010376:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 8010378:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801037a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801037c:	401a      	ands	r2, r3
 801037e:	4b20      	ldr	r3, [pc, #128]	@ (8010400 <UTIL_SEQ_Run+0x1d8>)
 8010380:	681b      	ldr	r3, [r3, #0]
 8010382:	4013      	ands	r3, r2
 8010384:	2b00      	cmp	r3, #0
 8010386:	d005      	beq.n	8010394 <UTIL_SEQ_Run+0x16c>
 8010388:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801038a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801038c:	4013      	ands	r3, r2
 801038e:	2b00      	cmp	r3, #0
 8010390:	f43f af64 	beq.w	801025c <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 8010394:	4b20      	ldr	r3, [pc, #128]	@ (8010418 <UTIL_SEQ_Run+0x1f0>)
 8010396:	f04f 32ff 	mov.w	r2, #4294967295
 801039a:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 801039c:	f000 f938 	bl	8010610 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80103a0:	f3ef 8310 	mrs	r3, PRIMASK
 80103a4:	613b      	str	r3, [r7, #16]
  return(result);
 80103a6:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 80103a8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 80103aa:	b672      	cpsid	i
}
 80103ac:	bf00      	nop
  local_taskset = TaskSet;
 80103ae:	4b15      	ldr	r3, [pc, #84]	@ (8010404 <UTIL_SEQ_Run+0x1dc>)
 80103b0:	681b      	ldr	r3, [r3, #0]
 80103b2:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 80103b4:	4b14      	ldr	r3, [pc, #80]	@ (8010408 <UTIL_SEQ_Run+0x1e0>)
 80103b6:	681b      	ldr	r3, [r3, #0]
 80103b8:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 80103ba:	4b14      	ldr	r3, [pc, #80]	@ (801040c <UTIL_SEQ_Run+0x1e4>)
 80103bc:	681b      	ldr	r3, [r3, #0]
 80103be:	633b      	str	r3, [r7, #48]	@ 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 80103c0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80103c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80103c4:	401a      	ands	r2, r3
 80103c6:	4b0e      	ldr	r3, [pc, #56]	@ (8010400 <UTIL_SEQ_Run+0x1d8>)
 80103c8:	681b      	ldr	r3, [r3, #0]
 80103ca:	4013      	ands	r3, r2
 80103cc:	2b00      	cmp	r3, #0
 80103ce:	d107      	bne.n	80103e0 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 80103d0:	4b0f      	ldr	r3, [pc, #60]	@ (8010410 <UTIL_SEQ_Run+0x1e8>)
 80103d2:	681a      	ldr	r2, [r3, #0]
 80103d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80103d6:	4013      	ands	r3, r2
 80103d8:	2b00      	cmp	r3, #0
 80103da:	d101      	bne.n	80103e0 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 80103dc:	f7f0 fe20 	bl	8001020 <UTIL_SEQ_Idle>
 80103e0:	69fb      	ldr	r3, [r7, #28]
 80103e2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80103e4:	68fb      	ldr	r3, [r7, #12]
 80103e6:	f383 8810 	msr	PRIMASK, r3
}
 80103ea:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 80103ec:	f000 f917 	bl	801061e <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 80103f0:	4a03      	ldr	r2, [pc, #12]	@ (8010400 <UTIL_SEQ_Run+0x1d8>)
 80103f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80103f4:	6013      	str	r3, [r2, #0]

  return;
 80103f6:	bf00      	nop
}
 80103f8:	3740      	adds	r7, #64	@ 0x40
 80103fa:	46bd      	mov	sp, r7
 80103fc:	bd80      	pop	{r7, pc}
 80103fe:	bf00      	nop
 8010400:	20000074 	.word	0x20000074
 8010404:	20002408 	.word	0x20002408
 8010408:	2000240c 	.word	0x2000240c
 801040c:	20000070 	.word	0x20000070
 8010410:	20002410 	.word	0x20002410
 8010414:	20002498 	.word	0x20002498
 8010418:	20002414 	.word	0x20002414
 801041c:	20002418 	.word	0x20002418

08010420 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 8010420:	b580      	push	{r7, lr}
 8010422:	b088      	sub	sp, #32
 8010424:	af00      	add	r7, sp, #0
 8010426:	60f8      	str	r0, [r7, #12]
 8010428:	60b9      	str	r1, [r7, #8]
 801042a:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801042c:	f3ef 8310 	mrs	r3, PRIMASK
 8010430:	617b      	str	r3, [r7, #20]
  return(result);
 8010432:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 8010434:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8010436:	b672      	cpsid	i
}
 8010438:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 801043a:	68f8      	ldr	r0, [r7, #12]
 801043c:	f000 f8f6 	bl	801062c <SEQ_BitPosition>
 8010440:	4603      	mov	r3, r0
 8010442:	4619      	mov	r1, r3
 8010444:	4a06      	ldr	r2, [pc, #24]	@ (8010460 <UTIL_SEQ_RegTask+0x40>)
 8010446:	687b      	ldr	r3, [r7, #4]
 8010448:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 801044c:	69fb      	ldr	r3, [r7, #28]
 801044e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010450:	69bb      	ldr	r3, [r7, #24]
 8010452:	f383 8810 	msr	PRIMASK, r3
}
 8010456:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 8010458:	bf00      	nop
}
 801045a:	3720      	adds	r7, #32
 801045c:	46bd      	mov	sp, r7
 801045e:	bd80      	pop	{r7, pc}
 8010460:	20002418 	.word	0x20002418

08010464 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 8010464:	b480      	push	{r7}
 8010466:	b087      	sub	sp, #28
 8010468:	af00      	add	r7, sp, #0
 801046a:	6078      	str	r0, [r7, #4]
 801046c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801046e:	f3ef 8310 	mrs	r3, PRIMASK
 8010472:	60fb      	str	r3, [r7, #12]
  return(result);
 8010474:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8010476:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8010478:	b672      	cpsid	i
}
 801047a:	bf00      	nop

  TaskSet |= TaskId_bm;
 801047c:	4b0d      	ldr	r3, [pc, #52]	@ (80104b4 <UTIL_SEQ_SetTask+0x50>)
 801047e:	681a      	ldr	r2, [r3, #0]
 8010480:	687b      	ldr	r3, [r7, #4]
 8010482:	4313      	orrs	r3, r2
 8010484:	4a0b      	ldr	r2, [pc, #44]	@ (80104b4 <UTIL_SEQ_SetTask+0x50>)
 8010486:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 8010488:	4a0b      	ldr	r2, [pc, #44]	@ (80104b8 <UTIL_SEQ_SetTask+0x54>)
 801048a:	683b      	ldr	r3, [r7, #0]
 801048c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8010490:	687b      	ldr	r3, [r7, #4]
 8010492:	431a      	orrs	r2, r3
 8010494:	4908      	ldr	r1, [pc, #32]	@ (80104b8 <UTIL_SEQ_SetTask+0x54>)
 8010496:	683b      	ldr	r3, [r7, #0]
 8010498:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 801049c:	697b      	ldr	r3, [r7, #20]
 801049e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80104a0:	693b      	ldr	r3, [r7, #16]
 80104a2:	f383 8810 	msr	PRIMASK, r3
}
 80104a6:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 80104a8:	bf00      	nop
}
 80104aa:	371c      	adds	r7, #28
 80104ac:	46bd      	mov	sp, r7
 80104ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104b2:	4770      	bx	lr
 80104b4:	20002408 	.word	0x20002408
 80104b8:	20002498 	.word	0x20002498

080104bc <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 80104bc:	b480      	push	{r7}
 80104be:	b087      	sub	sp, #28
 80104c0:	af00      	add	r7, sp, #0
 80104c2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80104c4:	f3ef 8310 	mrs	r3, PRIMASK
 80104c8:	60fb      	str	r3, [r7, #12]
  return(result);
 80104ca:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80104cc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80104ce:	b672      	cpsid	i
}
 80104d0:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 80104d2:	687b      	ldr	r3, [r7, #4]
 80104d4:	43da      	mvns	r2, r3
 80104d6:	4b08      	ldr	r3, [pc, #32]	@ (80104f8 <UTIL_SEQ_PauseTask+0x3c>)
 80104d8:	681b      	ldr	r3, [r3, #0]
 80104da:	4013      	ands	r3, r2
 80104dc:	4a06      	ldr	r2, [pc, #24]	@ (80104f8 <UTIL_SEQ_PauseTask+0x3c>)
 80104de:	6013      	str	r3, [r2, #0]
 80104e0:	697b      	ldr	r3, [r7, #20]
 80104e2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80104e4:	693b      	ldr	r3, [r7, #16]
 80104e6:	f383 8810 	msr	PRIMASK, r3
}
 80104ea:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 80104ec:	bf00      	nop
}
 80104ee:	371c      	adds	r7, #28
 80104f0:	46bd      	mov	sp, r7
 80104f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104f6:	4770      	bx	lr
 80104f8:	20000070 	.word	0x20000070

080104fc <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 80104fc:	b480      	push	{r7}
 80104fe:	b087      	sub	sp, #28
 8010500:	af00      	add	r7, sp, #0
 8010502:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010504:	f3ef 8310 	mrs	r3, PRIMASK
 8010508:	60fb      	str	r3, [r7, #12]
  return(result);
 801050a:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801050c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801050e:	b672      	cpsid	i
}
 8010510:	bf00      	nop

  TaskMask |= TaskId_bm;
 8010512:	4b09      	ldr	r3, [pc, #36]	@ (8010538 <UTIL_SEQ_ResumeTask+0x3c>)
 8010514:	681a      	ldr	r2, [r3, #0]
 8010516:	687b      	ldr	r3, [r7, #4]
 8010518:	4313      	orrs	r3, r2
 801051a:	4a07      	ldr	r2, [pc, #28]	@ (8010538 <UTIL_SEQ_ResumeTask+0x3c>)
 801051c:	6013      	str	r3, [r2, #0]
 801051e:	697b      	ldr	r3, [r7, #20]
 8010520:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010522:	693b      	ldr	r3, [r7, #16]
 8010524:	f383 8810 	msr	PRIMASK, r3
}
 8010528:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 801052a:	bf00      	nop
}
 801052c:	371c      	adds	r7, #28
 801052e:	46bd      	mov	sp, r7
 8010530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010534:	4770      	bx	lr
 8010536:	bf00      	nop
 8010538:	20000070 	.word	0x20000070

0801053c <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 801053c:	b480      	push	{r7}
 801053e:	b087      	sub	sp, #28
 8010540:	af00      	add	r7, sp, #0
 8010542:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010544:	f3ef 8310 	mrs	r3, PRIMASK
 8010548:	60fb      	str	r3, [r7, #12]
  return(result);
 801054a:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801054c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801054e:	b672      	cpsid	i
}
 8010550:	bf00      	nop

  EvtSet |= EvtId_bm;
 8010552:	4b09      	ldr	r3, [pc, #36]	@ (8010578 <UTIL_SEQ_SetEvt+0x3c>)
 8010554:	681a      	ldr	r2, [r3, #0]
 8010556:	687b      	ldr	r3, [r7, #4]
 8010558:	4313      	orrs	r3, r2
 801055a:	4a07      	ldr	r2, [pc, #28]	@ (8010578 <UTIL_SEQ_SetEvt+0x3c>)
 801055c:	6013      	str	r3, [r2, #0]
 801055e:	697b      	ldr	r3, [r7, #20]
 8010560:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010562:	693b      	ldr	r3, [r7, #16]
 8010564:	f383 8810 	msr	PRIMASK, r3
}
 8010568:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 801056a:	bf00      	nop
}
 801056c:	371c      	adds	r7, #28
 801056e:	46bd      	mov	sp, r7
 8010570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010574:	4770      	bx	lr
 8010576:	bf00      	nop
 8010578:	2000240c 	.word	0x2000240c

0801057c <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 801057c:	b580      	push	{r7, lr}
 801057e:	b088      	sub	sp, #32
 8010580:	af00      	add	r7, sp, #0
 8010582:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 8010584:	4b1f      	ldr	r3, [pc, #124]	@ (8010604 <UTIL_SEQ_WaitEvt+0x88>)
 8010586:	681b      	ldr	r3, [r3, #0]
 8010588:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 801058a:	4b1e      	ldr	r3, [pc, #120]	@ (8010604 <UTIL_SEQ_WaitEvt+0x88>)
 801058c:	681b      	ldr	r3, [r3, #0]
 801058e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010592:	d102      	bne.n	801059a <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0u;
 8010594:	2300      	movs	r3, #0
 8010596:	61fb      	str	r3, [r7, #28]
 8010598:	e005      	b.n	80105a6 <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
 801059a:	4b1a      	ldr	r3, [pc, #104]	@ (8010604 <UTIL_SEQ_WaitEvt+0x88>)
 801059c:	681b      	ldr	r3, [r3, #0]
 801059e:	2201      	movs	r2, #1
 80105a0:	fa02 f303 	lsl.w	r3, r2, r3
 80105a4:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 80105a6:	4b18      	ldr	r3, [pc, #96]	@ (8010608 <UTIL_SEQ_WaitEvt+0x8c>)
 80105a8:	681b      	ldr	r3, [r3, #0]
 80105aa:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 80105ac:	4a16      	ldr	r2, [pc, #88]	@ (8010608 <UTIL_SEQ_WaitEvt+0x8c>)
 80105ae:	687b      	ldr	r3, [r7, #4]
 80105b0:	6013      	str	r3, [r2, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
 80105b2:	e003      	b.n	80105bc <UTIL_SEQ_WaitEvt+0x40>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
 80105b4:	6879      	ldr	r1, [r7, #4]
 80105b6:	69f8      	ldr	r0, [r7, #28]
 80105b8:	f7f0 fd39 	bl	800102e <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
 80105bc:	4b13      	ldr	r3, [pc, #76]	@ (801060c <UTIL_SEQ_WaitEvt+0x90>)
 80105be:	681a      	ldr	r2, [r3, #0]
 80105c0:	687b      	ldr	r3, [r7, #4]
 80105c2:	4013      	ands	r3, r2
 80105c4:	2b00      	cmp	r3, #0
 80105c6:	d0f5      	beq.n	80105b4 <UTIL_SEQ_WaitEvt+0x38>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 80105c8:	4a0e      	ldr	r2, [pc, #56]	@ (8010604 <UTIL_SEQ_WaitEvt+0x88>)
 80105ca:	69bb      	ldr	r3, [r7, #24]
 80105cc:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80105ce:	f3ef 8310 	mrs	r3, PRIMASK
 80105d2:	60bb      	str	r3, [r7, #8]
  return(result);
 80105d4:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80105d6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80105d8:	b672      	cpsid	i
}
 80105da:	bf00      	nop

  EvtSet &= (~EvtId_bm);
 80105dc:	687b      	ldr	r3, [r7, #4]
 80105de:	43da      	mvns	r2, r3
 80105e0:	4b0a      	ldr	r3, [pc, #40]	@ (801060c <UTIL_SEQ_WaitEvt+0x90>)
 80105e2:	681b      	ldr	r3, [r3, #0]
 80105e4:	4013      	ands	r3, r2
 80105e6:	4a09      	ldr	r2, [pc, #36]	@ (801060c <UTIL_SEQ_WaitEvt+0x90>)
 80105e8:	6013      	str	r3, [r2, #0]
 80105ea:	693b      	ldr	r3, [r7, #16]
 80105ec:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80105ee:	68fb      	ldr	r3, [r7, #12]
 80105f0:	f383 8810 	msr	PRIMASK, r3
}
 80105f4:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 80105f6:	4a04      	ldr	r2, [pc, #16]	@ (8010608 <UTIL_SEQ_WaitEvt+0x8c>)
 80105f8:	697b      	ldr	r3, [r7, #20]
 80105fa:	6013      	str	r3, [r2, #0]
  return;
 80105fc:	bf00      	nop
}
 80105fe:	3720      	adds	r7, #32
 8010600:	46bd      	mov	sp, r7
 8010602:	bd80      	pop	{r7, pc}
 8010604:	20002414 	.word	0x20002414
 8010608:	20002410 	.word	0x20002410
 801060c:	2000240c 	.word	0x2000240c

08010610 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 8010610:	b480      	push	{r7}
 8010612:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 8010614:	bf00      	nop
}
 8010616:	46bd      	mov	sp, r7
 8010618:	f85d 7b04 	ldr.w	r7, [sp], #4
 801061c:	4770      	bx	lr

0801061e <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 801061e:	b480      	push	{r7}
 8010620:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 8010622:	bf00      	nop
}
 8010624:	46bd      	mov	sp, r7
 8010626:	f85d 7b04 	ldr.w	r7, [sp], #4
 801062a:	4770      	bx	lr

0801062c <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 801062c:	b480      	push	{r7}
 801062e:	b085      	sub	sp, #20
 8010630:	af00      	add	r7, sp, #0
 8010632:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 8010634:	2300      	movs	r3, #0
 8010636:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 8010638:	687b      	ldr	r3, [r7, #4]
 801063a:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 801063c:	68bb      	ldr	r3, [r7, #8]
 801063e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8010642:	d204      	bcs.n	801064e <SEQ_BitPosition+0x22>
 8010644:	2310      	movs	r3, #16
 8010646:	73fb      	strb	r3, [r7, #15]
 8010648:	68bb      	ldr	r3, [r7, #8]
 801064a:	041b      	lsls	r3, r3, #16
 801064c:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 801064e:	68bb      	ldr	r3, [r7, #8]
 8010650:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8010654:	d205      	bcs.n	8010662 <SEQ_BitPosition+0x36>
 8010656:	7bfb      	ldrb	r3, [r7, #15]
 8010658:	3308      	adds	r3, #8
 801065a:	73fb      	strb	r3, [r7, #15]
 801065c:	68bb      	ldr	r3, [r7, #8]
 801065e:	021b      	lsls	r3, r3, #8
 8010660:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 8010662:	68bb      	ldr	r3, [r7, #8]
 8010664:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8010668:	d205      	bcs.n	8010676 <SEQ_BitPosition+0x4a>
 801066a:	7bfb      	ldrb	r3, [r7, #15]
 801066c:	3304      	adds	r3, #4
 801066e:	73fb      	strb	r3, [r7, #15]
 8010670:	68bb      	ldr	r3, [r7, #8]
 8010672:	011b      	lsls	r3, r3, #4
 8010674:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 8010676:	68bb      	ldr	r3, [r7, #8]
 8010678:	0f1b      	lsrs	r3, r3, #28
 801067a:	4a07      	ldr	r2, [pc, #28]	@ (8010698 <SEQ_BitPosition+0x6c>)
 801067c:	5cd2      	ldrb	r2, [r2, r3]
 801067e:	7bfb      	ldrb	r3, [r7, #15]
 8010680:	4413      	add	r3, r2
 8010682:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 8010684:	7bfb      	ldrb	r3, [r7, #15]
 8010686:	f1c3 031f 	rsb	r3, r3, #31
 801068a:	b2db      	uxtb	r3, r3
}
 801068c:	4618      	mov	r0, r3
 801068e:	3714      	adds	r7, #20
 8010690:	46bd      	mov	sp, r7
 8010692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010696:	4770      	bx	lr
 8010698:	08012648 	.word	0x08012648

0801069c <random>:
 801069c:	4b16      	ldr	r3, [pc, #88]	@ (80106f8 <random+0x5c>)
 801069e:	b510      	push	{r4, lr}
 80106a0:	681c      	ldr	r4, [r3, #0]
 80106a2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80106a4:	b9b3      	cbnz	r3, 80106d4 <random+0x38>
 80106a6:	2018      	movs	r0, #24
 80106a8:	f000 fa2e 	bl	8010b08 <malloc>
 80106ac:	4602      	mov	r2, r0
 80106ae:	6320      	str	r0, [r4, #48]	@ 0x30
 80106b0:	b920      	cbnz	r0, 80106bc <random+0x20>
 80106b2:	4b12      	ldr	r3, [pc, #72]	@ (80106fc <random+0x60>)
 80106b4:	4812      	ldr	r0, [pc, #72]	@ (8010700 <random+0x64>)
 80106b6:	214c      	movs	r1, #76	@ 0x4c
 80106b8:	f000 f9be 	bl	8010a38 <__assert_func>
 80106bc:	4911      	ldr	r1, [pc, #68]	@ (8010704 <random+0x68>)
 80106be:	4b12      	ldr	r3, [pc, #72]	@ (8010708 <random+0x6c>)
 80106c0:	e9c0 1300 	strd	r1, r3, [r0]
 80106c4:	4b11      	ldr	r3, [pc, #68]	@ (801070c <random+0x70>)
 80106c6:	6083      	str	r3, [r0, #8]
 80106c8:	230b      	movs	r3, #11
 80106ca:	8183      	strh	r3, [r0, #12]
 80106cc:	2100      	movs	r1, #0
 80106ce:	2001      	movs	r0, #1
 80106d0:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80106d4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80106d6:	480e      	ldr	r0, [pc, #56]	@ (8010710 <random+0x74>)
 80106d8:	690b      	ldr	r3, [r1, #16]
 80106da:	694c      	ldr	r4, [r1, #20]
 80106dc:	4a0d      	ldr	r2, [pc, #52]	@ (8010714 <random+0x78>)
 80106de:	4358      	muls	r0, r3
 80106e0:	fb02 0004 	mla	r0, r2, r4, r0
 80106e4:	fba3 3202 	umull	r3, r2, r3, r2
 80106e8:	3301      	adds	r3, #1
 80106ea:	eb40 0002 	adc.w	r0, r0, r2
 80106ee:	e9c1 3004 	strd	r3, r0, [r1, #16]
 80106f2:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80106f6:	bd10      	pop	{r4, pc}
 80106f8:	20000084 	.word	0x20000084
 80106fc:	08012658 	.word	0x08012658
 8010700:	0801266f 	.word	0x0801266f
 8010704:	abcd330e 	.word	0xabcd330e
 8010708:	e66d1234 	.word	0xe66d1234
 801070c:	0005deec 	.word	0x0005deec
 8010710:	5851f42d 	.word	0x5851f42d
 8010714:	4c957f2d 	.word	0x4c957f2d

08010718 <std>:
 8010718:	2300      	movs	r3, #0
 801071a:	b510      	push	{r4, lr}
 801071c:	4604      	mov	r4, r0
 801071e:	e9c0 3300 	strd	r3, r3, [r0]
 8010722:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010726:	6083      	str	r3, [r0, #8]
 8010728:	8181      	strh	r1, [r0, #12]
 801072a:	6643      	str	r3, [r0, #100]	@ 0x64
 801072c:	81c2      	strh	r2, [r0, #14]
 801072e:	6183      	str	r3, [r0, #24]
 8010730:	4619      	mov	r1, r3
 8010732:	2208      	movs	r2, #8
 8010734:	305c      	adds	r0, #92	@ 0x5c
 8010736:	f000 f8f4 	bl	8010922 <memset>
 801073a:	4b0d      	ldr	r3, [pc, #52]	@ (8010770 <std+0x58>)
 801073c:	6263      	str	r3, [r4, #36]	@ 0x24
 801073e:	4b0d      	ldr	r3, [pc, #52]	@ (8010774 <std+0x5c>)
 8010740:	62a3      	str	r3, [r4, #40]	@ 0x28
 8010742:	4b0d      	ldr	r3, [pc, #52]	@ (8010778 <std+0x60>)
 8010744:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8010746:	4b0d      	ldr	r3, [pc, #52]	@ (801077c <std+0x64>)
 8010748:	6323      	str	r3, [r4, #48]	@ 0x30
 801074a:	4b0d      	ldr	r3, [pc, #52]	@ (8010780 <std+0x68>)
 801074c:	6224      	str	r4, [r4, #32]
 801074e:	429c      	cmp	r4, r3
 8010750:	d006      	beq.n	8010760 <std+0x48>
 8010752:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8010756:	4294      	cmp	r4, r2
 8010758:	d002      	beq.n	8010760 <std+0x48>
 801075a:	33d0      	adds	r3, #208	@ 0xd0
 801075c:	429c      	cmp	r4, r3
 801075e:	d105      	bne.n	801076c <std+0x54>
 8010760:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8010764:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010768:	f000 b954 	b.w	8010a14 <__retarget_lock_init_recursive>
 801076c:	bd10      	pop	{r4, pc}
 801076e:	bf00      	nop
 8010770:	0801089d 	.word	0x0801089d
 8010774:	080108bf 	.word	0x080108bf
 8010778:	080108f7 	.word	0x080108f7
 801077c:	0801091b 	.word	0x0801091b
 8010780:	200024a8 	.word	0x200024a8

08010784 <stdio_exit_handler>:
 8010784:	4a02      	ldr	r2, [pc, #8]	@ (8010790 <stdio_exit_handler+0xc>)
 8010786:	4903      	ldr	r1, [pc, #12]	@ (8010794 <stdio_exit_handler+0x10>)
 8010788:	4803      	ldr	r0, [pc, #12]	@ (8010798 <stdio_exit_handler+0x14>)
 801078a:	f000 b869 	b.w	8010860 <_fwalk_sglue>
 801078e:	bf00      	nop
 8010790:	20000078 	.word	0x20000078
 8010794:	0801131d 	.word	0x0801131d
 8010798:	20000088 	.word	0x20000088

0801079c <cleanup_stdio>:
 801079c:	6841      	ldr	r1, [r0, #4]
 801079e:	4b0c      	ldr	r3, [pc, #48]	@ (80107d0 <cleanup_stdio+0x34>)
 80107a0:	4299      	cmp	r1, r3
 80107a2:	b510      	push	{r4, lr}
 80107a4:	4604      	mov	r4, r0
 80107a6:	d001      	beq.n	80107ac <cleanup_stdio+0x10>
 80107a8:	f000 fdb8 	bl	801131c <_fflush_r>
 80107ac:	68a1      	ldr	r1, [r4, #8]
 80107ae:	4b09      	ldr	r3, [pc, #36]	@ (80107d4 <cleanup_stdio+0x38>)
 80107b0:	4299      	cmp	r1, r3
 80107b2:	d002      	beq.n	80107ba <cleanup_stdio+0x1e>
 80107b4:	4620      	mov	r0, r4
 80107b6:	f000 fdb1 	bl	801131c <_fflush_r>
 80107ba:	68e1      	ldr	r1, [r4, #12]
 80107bc:	4b06      	ldr	r3, [pc, #24]	@ (80107d8 <cleanup_stdio+0x3c>)
 80107be:	4299      	cmp	r1, r3
 80107c0:	d004      	beq.n	80107cc <cleanup_stdio+0x30>
 80107c2:	4620      	mov	r0, r4
 80107c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80107c8:	f000 bda8 	b.w	801131c <_fflush_r>
 80107cc:	bd10      	pop	{r4, pc}
 80107ce:	bf00      	nop
 80107d0:	200024a8 	.word	0x200024a8
 80107d4:	20002510 	.word	0x20002510
 80107d8:	20002578 	.word	0x20002578

080107dc <global_stdio_init.part.0>:
 80107dc:	b510      	push	{r4, lr}
 80107de:	4b0b      	ldr	r3, [pc, #44]	@ (801080c <global_stdio_init.part.0+0x30>)
 80107e0:	4c0b      	ldr	r4, [pc, #44]	@ (8010810 <global_stdio_init.part.0+0x34>)
 80107e2:	4a0c      	ldr	r2, [pc, #48]	@ (8010814 <global_stdio_init.part.0+0x38>)
 80107e4:	601a      	str	r2, [r3, #0]
 80107e6:	4620      	mov	r0, r4
 80107e8:	2200      	movs	r2, #0
 80107ea:	2104      	movs	r1, #4
 80107ec:	f7ff ff94 	bl	8010718 <std>
 80107f0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80107f4:	2201      	movs	r2, #1
 80107f6:	2109      	movs	r1, #9
 80107f8:	f7ff ff8e 	bl	8010718 <std>
 80107fc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8010800:	2202      	movs	r2, #2
 8010802:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010806:	2112      	movs	r1, #18
 8010808:	f7ff bf86 	b.w	8010718 <std>
 801080c:	200025e0 	.word	0x200025e0
 8010810:	200024a8 	.word	0x200024a8
 8010814:	08010785 	.word	0x08010785

08010818 <__sfp_lock_acquire>:
 8010818:	4801      	ldr	r0, [pc, #4]	@ (8010820 <__sfp_lock_acquire+0x8>)
 801081a:	f000 b8fc 	b.w	8010a16 <__retarget_lock_acquire_recursive>
 801081e:	bf00      	nop
 8010820:	200025e9 	.word	0x200025e9

08010824 <__sfp_lock_release>:
 8010824:	4801      	ldr	r0, [pc, #4]	@ (801082c <__sfp_lock_release+0x8>)
 8010826:	f000 b8f7 	b.w	8010a18 <__retarget_lock_release_recursive>
 801082a:	bf00      	nop
 801082c:	200025e9 	.word	0x200025e9

08010830 <__sinit>:
 8010830:	b510      	push	{r4, lr}
 8010832:	4604      	mov	r4, r0
 8010834:	f7ff fff0 	bl	8010818 <__sfp_lock_acquire>
 8010838:	6a23      	ldr	r3, [r4, #32]
 801083a:	b11b      	cbz	r3, 8010844 <__sinit+0x14>
 801083c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010840:	f7ff bff0 	b.w	8010824 <__sfp_lock_release>
 8010844:	4b04      	ldr	r3, [pc, #16]	@ (8010858 <__sinit+0x28>)
 8010846:	6223      	str	r3, [r4, #32]
 8010848:	4b04      	ldr	r3, [pc, #16]	@ (801085c <__sinit+0x2c>)
 801084a:	681b      	ldr	r3, [r3, #0]
 801084c:	2b00      	cmp	r3, #0
 801084e:	d1f5      	bne.n	801083c <__sinit+0xc>
 8010850:	f7ff ffc4 	bl	80107dc <global_stdio_init.part.0>
 8010854:	e7f2      	b.n	801083c <__sinit+0xc>
 8010856:	bf00      	nop
 8010858:	0801079d 	.word	0x0801079d
 801085c:	200025e0 	.word	0x200025e0

08010860 <_fwalk_sglue>:
 8010860:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010864:	4607      	mov	r7, r0
 8010866:	4688      	mov	r8, r1
 8010868:	4614      	mov	r4, r2
 801086a:	2600      	movs	r6, #0
 801086c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010870:	f1b9 0901 	subs.w	r9, r9, #1
 8010874:	d505      	bpl.n	8010882 <_fwalk_sglue+0x22>
 8010876:	6824      	ldr	r4, [r4, #0]
 8010878:	2c00      	cmp	r4, #0
 801087a:	d1f7      	bne.n	801086c <_fwalk_sglue+0xc>
 801087c:	4630      	mov	r0, r6
 801087e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010882:	89ab      	ldrh	r3, [r5, #12]
 8010884:	2b01      	cmp	r3, #1
 8010886:	d907      	bls.n	8010898 <_fwalk_sglue+0x38>
 8010888:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801088c:	3301      	adds	r3, #1
 801088e:	d003      	beq.n	8010898 <_fwalk_sglue+0x38>
 8010890:	4629      	mov	r1, r5
 8010892:	4638      	mov	r0, r7
 8010894:	47c0      	blx	r8
 8010896:	4306      	orrs	r6, r0
 8010898:	3568      	adds	r5, #104	@ 0x68
 801089a:	e7e9      	b.n	8010870 <_fwalk_sglue+0x10>

0801089c <__sread>:
 801089c:	b510      	push	{r4, lr}
 801089e:	460c      	mov	r4, r1
 80108a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80108a4:	f000 f868 	bl	8010978 <_read_r>
 80108a8:	2800      	cmp	r0, #0
 80108aa:	bfab      	itete	ge
 80108ac:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80108ae:	89a3      	ldrhlt	r3, [r4, #12]
 80108b0:	181b      	addge	r3, r3, r0
 80108b2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80108b6:	bfac      	ite	ge
 80108b8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80108ba:	81a3      	strhlt	r3, [r4, #12]
 80108bc:	bd10      	pop	{r4, pc}

080108be <__swrite>:
 80108be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80108c2:	461f      	mov	r7, r3
 80108c4:	898b      	ldrh	r3, [r1, #12]
 80108c6:	05db      	lsls	r3, r3, #23
 80108c8:	4605      	mov	r5, r0
 80108ca:	460c      	mov	r4, r1
 80108cc:	4616      	mov	r6, r2
 80108ce:	d505      	bpl.n	80108dc <__swrite+0x1e>
 80108d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80108d4:	2302      	movs	r3, #2
 80108d6:	2200      	movs	r2, #0
 80108d8:	f000 f83c 	bl	8010954 <_lseek_r>
 80108dc:	89a3      	ldrh	r3, [r4, #12]
 80108de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80108e2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80108e6:	81a3      	strh	r3, [r4, #12]
 80108e8:	4632      	mov	r2, r6
 80108ea:	463b      	mov	r3, r7
 80108ec:	4628      	mov	r0, r5
 80108ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80108f2:	f000 b853 	b.w	801099c <_write_r>

080108f6 <__sseek>:
 80108f6:	b510      	push	{r4, lr}
 80108f8:	460c      	mov	r4, r1
 80108fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80108fe:	f000 f829 	bl	8010954 <_lseek_r>
 8010902:	1c43      	adds	r3, r0, #1
 8010904:	89a3      	ldrh	r3, [r4, #12]
 8010906:	bf15      	itete	ne
 8010908:	6560      	strne	r0, [r4, #84]	@ 0x54
 801090a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801090e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8010912:	81a3      	strheq	r3, [r4, #12]
 8010914:	bf18      	it	ne
 8010916:	81a3      	strhne	r3, [r4, #12]
 8010918:	bd10      	pop	{r4, pc}

0801091a <__sclose>:
 801091a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801091e:	f000 b809 	b.w	8010934 <_close_r>

08010922 <memset>:
 8010922:	4402      	add	r2, r0
 8010924:	4603      	mov	r3, r0
 8010926:	4293      	cmp	r3, r2
 8010928:	d100      	bne.n	801092c <memset+0xa>
 801092a:	4770      	bx	lr
 801092c:	f803 1b01 	strb.w	r1, [r3], #1
 8010930:	e7f9      	b.n	8010926 <memset+0x4>
	...

08010934 <_close_r>:
 8010934:	b538      	push	{r3, r4, r5, lr}
 8010936:	4d06      	ldr	r5, [pc, #24]	@ (8010950 <_close_r+0x1c>)
 8010938:	2300      	movs	r3, #0
 801093a:	4604      	mov	r4, r0
 801093c:	4608      	mov	r0, r1
 801093e:	602b      	str	r3, [r5, #0]
 8010940:	f7f6 ff5d 	bl	80077fe <_close>
 8010944:	1c43      	adds	r3, r0, #1
 8010946:	d102      	bne.n	801094e <_close_r+0x1a>
 8010948:	682b      	ldr	r3, [r5, #0]
 801094a:	b103      	cbz	r3, 801094e <_close_r+0x1a>
 801094c:	6023      	str	r3, [r4, #0]
 801094e:	bd38      	pop	{r3, r4, r5, pc}
 8010950:	200025e4 	.word	0x200025e4

08010954 <_lseek_r>:
 8010954:	b538      	push	{r3, r4, r5, lr}
 8010956:	4d07      	ldr	r5, [pc, #28]	@ (8010974 <_lseek_r+0x20>)
 8010958:	4604      	mov	r4, r0
 801095a:	4608      	mov	r0, r1
 801095c:	4611      	mov	r1, r2
 801095e:	2200      	movs	r2, #0
 8010960:	602a      	str	r2, [r5, #0]
 8010962:	461a      	mov	r2, r3
 8010964:	f7f6 ff72 	bl	800784c <_lseek>
 8010968:	1c43      	adds	r3, r0, #1
 801096a:	d102      	bne.n	8010972 <_lseek_r+0x1e>
 801096c:	682b      	ldr	r3, [r5, #0]
 801096e:	b103      	cbz	r3, 8010972 <_lseek_r+0x1e>
 8010970:	6023      	str	r3, [r4, #0]
 8010972:	bd38      	pop	{r3, r4, r5, pc}
 8010974:	200025e4 	.word	0x200025e4

08010978 <_read_r>:
 8010978:	b538      	push	{r3, r4, r5, lr}
 801097a:	4d07      	ldr	r5, [pc, #28]	@ (8010998 <_read_r+0x20>)
 801097c:	4604      	mov	r4, r0
 801097e:	4608      	mov	r0, r1
 8010980:	4611      	mov	r1, r2
 8010982:	2200      	movs	r2, #0
 8010984:	602a      	str	r2, [r5, #0]
 8010986:	461a      	mov	r2, r3
 8010988:	f7f6 ff00 	bl	800778c <_read>
 801098c:	1c43      	adds	r3, r0, #1
 801098e:	d102      	bne.n	8010996 <_read_r+0x1e>
 8010990:	682b      	ldr	r3, [r5, #0]
 8010992:	b103      	cbz	r3, 8010996 <_read_r+0x1e>
 8010994:	6023      	str	r3, [r4, #0]
 8010996:	bd38      	pop	{r3, r4, r5, pc}
 8010998:	200025e4 	.word	0x200025e4

0801099c <_write_r>:
 801099c:	b538      	push	{r3, r4, r5, lr}
 801099e:	4d07      	ldr	r5, [pc, #28]	@ (80109bc <_write_r+0x20>)
 80109a0:	4604      	mov	r4, r0
 80109a2:	4608      	mov	r0, r1
 80109a4:	4611      	mov	r1, r2
 80109a6:	2200      	movs	r2, #0
 80109a8:	602a      	str	r2, [r5, #0]
 80109aa:	461a      	mov	r2, r3
 80109ac:	f7f6 ff0b 	bl	80077c6 <_write>
 80109b0:	1c43      	adds	r3, r0, #1
 80109b2:	d102      	bne.n	80109ba <_write_r+0x1e>
 80109b4:	682b      	ldr	r3, [r5, #0]
 80109b6:	b103      	cbz	r3, 80109ba <_write_r+0x1e>
 80109b8:	6023      	str	r3, [r4, #0]
 80109ba:	bd38      	pop	{r3, r4, r5, pc}
 80109bc:	200025e4 	.word	0x200025e4

080109c0 <__errno>:
 80109c0:	4b01      	ldr	r3, [pc, #4]	@ (80109c8 <__errno+0x8>)
 80109c2:	6818      	ldr	r0, [r3, #0]
 80109c4:	4770      	bx	lr
 80109c6:	bf00      	nop
 80109c8:	20000084 	.word	0x20000084

080109cc <__libc_init_array>:
 80109cc:	b570      	push	{r4, r5, r6, lr}
 80109ce:	4d0d      	ldr	r5, [pc, #52]	@ (8010a04 <__libc_init_array+0x38>)
 80109d0:	4c0d      	ldr	r4, [pc, #52]	@ (8010a08 <__libc_init_array+0x3c>)
 80109d2:	1b64      	subs	r4, r4, r5
 80109d4:	10a4      	asrs	r4, r4, #2
 80109d6:	2600      	movs	r6, #0
 80109d8:	42a6      	cmp	r6, r4
 80109da:	d109      	bne.n	80109f0 <__libc_init_array+0x24>
 80109dc:	4d0b      	ldr	r5, [pc, #44]	@ (8010a0c <__libc_init_array+0x40>)
 80109de:	4c0c      	ldr	r4, [pc, #48]	@ (8010a10 <__libc_init_array+0x44>)
 80109e0:	f001 fcf2 	bl	80123c8 <_init>
 80109e4:	1b64      	subs	r4, r4, r5
 80109e6:	10a4      	asrs	r4, r4, #2
 80109e8:	2600      	movs	r6, #0
 80109ea:	42a6      	cmp	r6, r4
 80109ec:	d105      	bne.n	80109fa <__libc_init_array+0x2e>
 80109ee:	bd70      	pop	{r4, r5, r6, pc}
 80109f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80109f4:	4798      	blx	r3
 80109f6:	3601      	adds	r6, #1
 80109f8:	e7ee      	b.n	80109d8 <__libc_init_array+0xc>
 80109fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80109fe:	4798      	blx	r3
 8010a00:	3601      	adds	r6, #1
 8010a02:	e7f2      	b.n	80109ea <__libc_init_array+0x1e>
 8010a04:	08012790 	.word	0x08012790
 8010a08:	08012790 	.word	0x08012790
 8010a0c:	08012790 	.word	0x08012790
 8010a10:	08012794 	.word	0x08012794

08010a14 <__retarget_lock_init_recursive>:
 8010a14:	4770      	bx	lr

08010a16 <__retarget_lock_acquire_recursive>:
 8010a16:	4770      	bx	lr

08010a18 <__retarget_lock_release_recursive>:
 8010a18:	4770      	bx	lr

08010a1a <memcpy>:
 8010a1a:	440a      	add	r2, r1
 8010a1c:	4291      	cmp	r1, r2
 8010a1e:	f100 33ff 	add.w	r3, r0, #4294967295
 8010a22:	d100      	bne.n	8010a26 <memcpy+0xc>
 8010a24:	4770      	bx	lr
 8010a26:	b510      	push	{r4, lr}
 8010a28:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010a2c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010a30:	4291      	cmp	r1, r2
 8010a32:	d1f9      	bne.n	8010a28 <memcpy+0xe>
 8010a34:	bd10      	pop	{r4, pc}
	...

08010a38 <__assert_func>:
 8010a38:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010a3a:	4614      	mov	r4, r2
 8010a3c:	461a      	mov	r2, r3
 8010a3e:	4b09      	ldr	r3, [pc, #36]	@ (8010a64 <__assert_func+0x2c>)
 8010a40:	681b      	ldr	r3, [r3, #0]
 8010a42:	4605      	mov	r5, r0
 8010a44:	68d8      	ldr	r0, [r3, #12]
 8010a46:	b954      	cbnz	r4, 8010a5e <__assert_func+0x26>
 8010a48:	4b07      	ldr	r3, [pc, #28]	@ (8010a68 <__assert_func+0x30>)
 8010a4a:	461c      	mov	r4, r3
 8010a4c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010a50:	9100      	str	r1, [sp, #0]
 8010a52:	462b      	mov	r3, r5
 8010a54:	4905      	ldr	r1, [pc, #20]	@ (8010a6c <__assert_func+0x34>)
 8010a56:	f000 fc89 	bl	801136c <fiprintf>
 8010a5a:	f000 fd3d 	bl	80114d8 <abort>
 8010a5e:	4b04      	ldr	r3, [pc, #16]	@ (8010a70 <__assert_func+0x38>)
 8010a60:	e7f4      	b.n	8010a4c <__assert_func+0x14>
 8010a62:	bf00      	nop
 8010a64:	20000084 	.word	0x20000084
 8010a68:	08012704 	.word	0x08012704
 8010a6c:	080126d6 	.word	0x080126d6
 8010a70:	080126c9 	.word	0x080126c9

08010a74 <_free_r>:
 8010a74:	b538      	push	{r3, r4, r5, lr}
 8010a76:	4605      	mov	r5, r0
 8010a78:	2900      	cmp	r1, #0
 8010a7a:	d041      	beq.n	8010b00 <_free_r+0x8c>
 8010a7c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010a80:	1f0c      	subs	r4, r1, #4
 8010a82:	2b00      	cmp	r3, #0
 8010a84:	bfb8      	it	lt
 8010a86:	18e4      	addlt	r4, r4, r3
 8010a88:	f000 f8e8 	bl	8010c5c <__malloc_lock>
 8010a8c:	4a1d      	ldr	r2, [pc, #116]	@ (8010b04 <_free_r+0x90>)
 8010a8e:	6813      	ldr	r3, [r2, #0]
 8010a90:	b933      	cbnz	r3, 8010aa0 <_free_r+0x2c>
 8010a92:	6063      	str	r3, [r4, #4]
 8010a94:	6014      	str	r4, [r2, #0]
 8010a96:	4628      	mov	r0, r5
 8010a98:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010a9c:	f000 b8e4 	b.w	8010c68 <__malloc_unlock>
 8010aa0:	42a3      	cmp	r3, r4
 8010aa2:	d908      	bls.n	8010ab6 <_free_r+0x42>
 8010aa4:	6820      	ldr	r0, [r4, #0]
 8010aa6:	1821      	adds	r1, r4, r0
 8010aa8:	428b      	cmp	r3, r1
 8010aaa:	bf01      	itttt	eq
 8010aac:	6819      	ldreq	r1, [r3, #0]
 8010aae:	685b      	ldreq	r3, [r3, #4]
 8010ab0:	1809      	addeq	r1, r1, r0
 8010ab2:	6021      	streq	r1, [r4, #0]
 8010ab4:	e7ed      	b.n	8010a92 <_free_r+0x1e>
 8010ab6:	461a      	mov	r2, r3
 8010ab8:	685b      	ldr	r3, [r3, #4]
 8010aba:	b10b      	cbz	r3, 8010ac0 <_free_r+0x4c>
 8010abc:	42a3      	cmp	r3, r4
 8010abe:	d9fa      	bls.n	8010ab6 <_free_r+0x42>
 8010ac0:	6811      	ldr	r1, [r2, #0]
 8010ac2:	1850      	adds	r0, r2, r1
 8010ac4:	42a0      	cmp	r0, r4
 8010ac6:	d10b      	bne.n	8010ae0 <_free_r+0x6c>
 8010ac8:	6820      	ldr	r0, [r4, #0]
 8010aca:	4401      	add	r1, r0
 8010acc:	1850      	adds	r0, r2, r1
 8010ace:	4283      	cmp	r3, r0
 8010ad0:	6011      	str	r1, [r2, #0]
 8010ad2:	d1e0      	bne.n	8010a96 <_free_r+0x22>
 8010ad4:	6818      	ldr	r0, [r3, #0]
 8010ad6:	685b      	ldr	r3, [r3, #4]
 8010ad8:	6053      	str	r3, [r2, #4]
 8010ada:	4408      	add	r0, r1
 8010adc:	6010      	str	r0, [r2, #0]
 8010ade:	e7da      	b.n	8010a96 <_free_r+0x22>
 8010ae0:	d902      	bls.n	8010ae8 <_free_r+0x74>
 8010ae2:	230c      	movs	r3, #12
 8010ae4:	602b      	str	r3, [r5, #0]
 8010ae6:	e7d6      	b.n	8010a96 <_free_r+0x22>
 8010ae8:	6820      	ldr	r0, [r4, #0]
 8010aea:	1821      	adds	r1, r4, r0
 8010aec:	428b      	cmp	r3, r1
 8010aee:	bf04      	itt	eq
 8010af0:	6819      	ldreq	r1, [r3, #0]
 8010af2:	685b      	ldreq	r3, [r3, #4]
 8010af4:	6063      	str	r3, [r4, #4]
 8010af6:	bf04      	itt	eq
 8010af8:	1809      	addeq	r1, r1, r0
 8010afa:	6021      	streq	r1, [r4, #0]
 8010afc:	6054      	str	r4, [r2, #4]
 8010afe:	e7ca      	b.n	8010a96 <_free_r+0x22>
 8010b00:	bd38      	pop	{r3, r4, r5, pc}
 8010b02:	bf00      	nop
 8010b04:	200025f0 	.word	0x200025f0

08010b08 <malloc>:
 8010b08:	4b02      	ldr	r3, [pc, #8]	@ (8010b14 <malloc+0xc>)
 8010b0a:	4601      	mov	r1, r0
 8010b0c:	6818      	ldr	r0, [r3, #0]
 8010b0e:	f000 b825 	b.w	8010b5c <_malloc_r>
 8010b12:	bf00      	nop
 8010b14:	20000084 	.word	0x20000084

08010b18 <sbrk_aligned>:
 8010b18:	b570      	push	{r4, r5, r6, lr}
 8010b1a:	4e0f      	ldr	r6, [pc, #60]	@ (8010b58 <sbrk_aligned+0x40>)
 8010b1c:	460c      	mov	r4, r1
 8010b1e:	6831      	ldr	r1, [r6, #0]
 8010b20:	4605      	mov	r5, r0
 8010b22:	b911      	cbnz	r1, 8010b2a <sbrk_aligned+0x12>
 8010b24:	f000 fcc8 	bl	80114b8 <_sbrk_r>
 8010b28:	6030      	str	r0, [r6, #0]
 8010b2a:	4621      	mov	r1, r4
 8010b2c:	4628      	mov	r0, r5
 8010b2e:	f000 fcc3 	bl	80114b8 <_sbrk_r>
 8010b32:	1c43      	adds	r3, r0, #1
 8010b34:	d103      	bne.n	8010b3e <sbrk_aligned+0x26>
 8010b36:	f04f 34ff 	mov.w	r4, #4294967295
 8010b3a:	4620      	mov	r0, r4
 8010b3c:	bd70      	pop	{r4, r5, r6, pc}
 8010b3e:	1cc4      	adds	r4, r0, #3
 8010b40:	f024 0403 	bic.w	r4, r4, #3
 8010b44:	42a0      	cmp	r0, r4
 8010b46:	d0f8      	beq.n	8010b3a <sbrk_aligned+0x22>
 8010b48:	1a21      	subs	r1, r4, r0
 8010b4a:	4628      	mov	r0, r5
 8010b4c:	f000 fcb4 	bl	80114b8 <_sbrk_r>
 8010b50:	3001      	adds	r0, #1
 8010b52:	d1f2      	bne.n	8010b3a <sbrk_aligned+0x22>
 8010b54:	e7ef      	b.n	8010b36 <sbrk_aligned+0x1e>
 8010b56:	bf00      	nop
 8010b58:	200025ec 	.word	0x200025ec

08010b5c <_malloc_r>:
 8010b5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010b60:	1ccd      	adds	r5, r1, #3
 8010b62:	f025 0503 	bic.w	r5, r5, #3
 8010b66:	3508      	adds	r5, #8
 8010b68:	2d0c      	cmp	r5, #12
 8010b6a:	bf38      	it	cc
 8010b6c:	250c      	movcc	r5, #12
 8010b6e:	2d00      	cmp	r5, #0
 8010b70:	4606      	mov	r6, r0
 8010b72:	db01      	blt.n	8010b78 <_malloc_r+0x1c>
 8010b74:	42a9      	cmp	r1, r5
 8010b76:	d904      	bls.n	8010b82 <_malloc_r+0x26>
 8010b78:	230c      	movs	r3, #12
 8010b7a:	6033      	str	r3, [r6, #0]
 8010b7c:	2000      	movs	r0, #0
 8010b7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010b82:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8010c58 <_malloc_r+0xfc>
 8010b86:	f000 f869 	bl	8010c5c <__malloc_lock>
 8010b8a:	f8d8 3000 	ldr.w	r3, [r8]
 8010b8e:	461c      	mov	r4, r3
 8010b90:	bb44      	cbnz	r4, 8010be4 <_malloc_r+0x88>
 8010b92:	4629      	mov	r1, r5
 8010b94:	4630      	mov	r0, r6
 8010b96:	f7ff ffbf 	bl	8010b18 <sbrk_aligned>
 8010b9a:	1c43      	adds	r3, r0, #1
 8010b9c:	4604      	mov	r4, r0
 8010b9e:	d158      	bne.n	8010c52 <_malloc_r+0xf6>
 8010ba0:	f8d8 4000 	ldr.w	r4, [r8]
 8010ba4:	4627      	mov	r7, r4
 8010ba6:	2f00      	cmp	r7, #0
 8010ba8:	d143      	bne.n	8010c32 <_malloc_r+0xd6>
 8010baa:	2c00      	cmp	r4, #0
 8010bac:	d04b      	beq.n	8010c46 <_malloc_r+0xea>
 8010bae:	6823      	ldr	r3, [r4, #0]
 8010bb0:	4639      	mov	r1, r7
 8010bb2:	4630      	mov	r0, r6
 8010bb4:	eb04 0903 	add.w	r9, r4, r3
 8010bb8:	f000 fc7e 	bl	80114b8 <_sbrk_r>
 8010bbc:	4581      	cmp	r9, r0
 8010bbe:	d142      	bne.n	8010c46 <_malloc_r+0xea>
 8010bc0:	6821      	ldr	r1, [r4, #0]
 8010bc2:	1a6d      	subs	r5, r5, r1
 8010bc4:	4629      	mov	r1, r5
 8010bc6:	4630      	mov	r0, r6
 8010bc8:	f7ff ffa6 	bl	8010b18 <sbrk_aligned>
 8010bcc:	3001      	adds	r0, #1
 8010bce:	d03a      	beq.n	8010c46 <_malloc_r+0xea>
 8010bd0:	6823      	ldr	r3, [r4, #0]
 8010bd2:	442b      	add	r3, r5
 8010bd4:	6023      	str	r3, [r4, #0]
 8010bd6:	f8d8 3000 	ldr.w	r3, [r8]
 8010bda:	685a      	ldr	r2, [r3, #4]
 8010bdc:	bb62      	cbnz	r2, 8010c38 <_malloc_r+0xdc>
 8010bde:	f8c8 7000 	str.w	r7, [r8]
 8010be2:	e00f      	b.n	8010c04 <_malloc_r+0xa8>
 8010be4:	6822      	ldr	r2, [r4, #0]
 8010be6:	1b52      	subs	r2, r2, r5
 8010be8:	d420      	bmi.n	8010c2c <_malloc_r+0xd0>
 8010bea:	2a0b      	cmp	r2, #11
 8010bec:	d917      	bls.n	8010c1e <_malloc_r+0xc2>
 8010bee:	1961      	adds	r1, r4, r5
 8010bf0:	42a3      	cmp	r3, r4
 8010bf2:	6025      	str	r5, [r4, #0]
 8010bf4:	bf18      	it	ne
 8010bf6:	6059      	strne	r1, [r3, #4]
 8010bf8:	6863      	ldr	r3, [r4, #4]
 8010bfa:	bf08      	it	eq
 8010bfc:	f8c8 1000 	streq.w	r1, [r8]
 8010c00:	5162      	str	r2, [r4, r5]
 8010c02:	604b      	str	r3, [r1, #4]
 8010c04:	4630      	mov	r0, r6
 8010c06:	f000 f82f 	bl	8010c68 <__malloc_unlock>
 8010c0a:	f104 000b 	add.w	r0, r4, #11
 8010c0e:	1d23      	adds	r3, r4, #4
 8010c10:	f020 0007 	bic.w	r0, r0, #7
 8010c14:	1ac2      	subs	r2, r0, r3
 8010c16:	bf1c      	itt	ne
 8010c18:	1a1b      	subne	r3, r3, r0
 8010c1a:	50a3      	strne	r3, [r4, r2]
 8010c1c:	e7af      	b.n	8010b7e <_malloc_r+0x22>
 8010c1e:	6862      	ldr	r2, [r4, #4]
 8010c20:	42a3      	cmp	r3, r4
 8010c22:	bf0c      	ite	eq
 8010c24:	f8c8 2000 	streq.w	r2, [r8]
 8010c28:	605a      	strne	r2, [r3, #4]
 8010c2a:	e7eb      	b.n	8010c04 <_malloc_r+0xa8>
 8010c2c:	4623      	mov	r3, r4
 8010c2e:	6864      	ldr	r4, [r4, #4]
 8010c30:	e7ae      	b.n	8010b90 <_malloc_r+0x34>
 8010c32:	463c      	mov	r4, r7
 8010c34:	687f      	ldr	r7, [r7, #4]
 8010c36:	e7b6      	b.n	8010ba6 <_malloc_r+0x4a>
 8010c38:	461a      	mov	r2, r3
 8010c3a:	685b      	ldr	r3, [r3, #4]
 8010c3c:	42a3      	cmp	r3, r4
 8010c3e:	d1fb      	bne.n	8010c38 <_malloc_r+0xdc>
 8010c40:	2300      	movs	r3, #0
 8010c42:	6053      	str	r3, [r2, #4]
 8010c44:	e7de      	b.n	8010c04 <_malloc_r+0xa8>
 8010c46:	230c      	movs	r3, #12
 8010c48:	6033      	str	r3, [r6, #0]
 8010c4a:	4630      	mov	r0, r6
 8010c4c:	f000 f80c 	bl	8010c68 <__malloc_unlock>
 8010c50:	e794      	b.n	8010b7c <_malloc_r+0x20>
 8010c52:	6005      	str	r5, [r0, #0]
 8010c54:	e7d6      	b.n	8010c04 <_malloc_r+0xa8>
 8010c56:	bf00      	nop
 8010c58:	200025f0 	.word	0x200025f0

08010c5c <__malloc_lock>:
 8010c5c:	4801      	ldr	r0, [pc, #4]	@ (8010c64 <__malloc_lock+0x8>)
 8010c5e:	f7ff beda 	b.w	8010a16 <__retarget_lock_acquire_recursive>
 8010c62:	bf00      	nop
 8010c64:	200025e8 	.word	0x200025e8

08010c68 <__malloc_unlock>:
 8010c68:	4801      	ldr	r0, [pc, #4]	@ (8010c70 <__malloc_unlock+0x8>)
 8010c6a:	f7ff bed5 	b.w	8010a18 <__retarget_lock_release_recursive>
 8010c6e:	bf00      	nop
 8010c70:	200025e8 	.word	0x200025e8

08010c74 <__sfputc_r>:
 8010c74:	6893      	ldr	r3, [r2, #8]
 8010c76:	3b01      	subs	r3, #1
 8010c78:	2b00      	cmp	r3, #0
 8010c7a:	b410      	push	{r4}
 8010c7c:	6093      	str	r3, [r2, #8]
 8010c7e:	da08      	bge.n	8010c92 <__sfputc_r+0x1e>
 8010c80:	6994      	ldr	r4, [r2, #24]
 8010c82:	42a3      	cmp	r3, r4
 8010c84:	db01      	blt.n	8010c8a <__sfputc_r+0x16>
 8010c86:	290a      	cmp	r1, #10
 8010c88:	d103      	bne.n	8010c92 <__sfputc_r+0x1e>
 8010c8a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010c8e:	f000 bb7f 	b.w	8011390 <__swbuf_r>
 8010c92:	6813      	ldr	r3, [r2, #0]
 8010c94:	1c58      	adds	r0, r3, #1
 8010c96:	6010      	str	r0, [r2, #0]
 8010c98:	7019      	strb	r1, [r3, #0]
 8010c9a:	4608      	mov	r0, r1
 8010c9c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010ca0:	4770      	bx	lr

08010ca2 <__sfputs_r>:
 8010ca2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010ca4:	4606      	mov	r6, r0
 8010ca6:	460f      	mov	r7, r1
 8010ca8:	4614      	mov	r4, r2
 8010caa:	18d5      	adds	r5, r2, r3
 8010cac:	42ac      	cmp	r4, r5
 8010cae:	d101      	bne.n	8010cb4 <__sfputs_r+0x12>
 8010cb0:	2000      	movs	r0, #0
 8010cb2:	e007      	b.n	8010cc4 <__sfputs_r+0x22>
 8010cb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010cb8:	463a      	mov	r2, r7
 8010cba:	4630      	mov	r0, r6
 8010cbc:	f7ff ffda 	bl	8010c74 <__sfputc_r>
 8010cc0:	1c43      	adds	r3, r0, #1
 8010cc2:	d1f3      	bne.n	8010cac <__sfputs_r+0xa>
 8010cc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010cc8 <_vfiprintf_r>:
 8010cc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ccc:	460d      	mov	r5, r1
 8010cce:	b09d      	sub	sp, #116	@ 0x74
 8010cd0:	4614      	mov	r4, r2
 8010cd2:	4698      	mov	r8, r3
 8010cd4:	4606      	mov	r6, r0
 8010cd6:	b118      	cbz	r0, 8010ce0 <_vfiprintf_r+0x18>
 8010cd8:	6a03      	ldr	r3, [r0, #32]
 8010cda:	b90b      	cbnz	r3, 8010ce0 <_vfiprintf_r+0x18>
 8010cdc:	f7ff fda8 	bl	8010830 <__sinit>
 8010ce0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010ce2:	07d9      	lsls	r1, r3, #31
 8010ce4:	d405      	bmi.n	8010cf2 <_vfiprintf_r+0x2a>
 8010ce6:	89ab      	ldrh	r3, [r5, #12]
 8010ce8:	059a      	lsls	r2, r3, #22
 8010cea:	d402      	bmi.n	8010cf2 <_vfiprintf_r+0x2a>
 8010cec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010cee:	f7ff fe92 	bl	8010a16 <__retarget_lock_acquire_recursive>
 8010cf2:	89ab      	ldrh	r3, [r5, #12]
 8010cf4:	071b      	lsls	r3, r3, #28
 8010cf6:	d501      	bpl.n	8010cfc <_vfiprintf_r+0x34>
 8010cf8:	692b      	ldr	r3, [r5, #16]
 8010cfa:	b99b      	cbnz	r3, 8010d24 <_vfiprintf_r+0x5c>
 8010cfc:	4629      	mov	r1, r5
 8010cfe:	4630      	mov	r0, r6
 8010d00:	f000 fb84 	bl	801140c <__swsetup_r>
 8010d04:	b170      	cbz	r0, 8010d24 <_vfiprintf_r+0x5c>
 8010d06:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010d08:	07dc      	lsls	r4, r3, #31
 8010d0a:	d504      	bpl.n	8010d16 <_vfiprintf_r+0x4e>
 8010d0c:	f04f 30ff 	mov.w	r0, #4294967295
 8010d10:	b01d      	add	sp, #116	@ 0x74
 8010d12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010d16:	89ab      	ldrh	r3, [r5, #12]
 8010d18:	0598      	lsls	r0, r3, #22
 8010d1a:	d4f7      	bmi.n	8010d0c <_vfiprintf_r+0x44>
 8010d1c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010d1e:	f7ff fe7b 	bl	8010a18 <__retarget_lock_release_recursive>
 8010d22:	e7f3      	b.n	8010d0c <_vfiprintf_r+0x44>
 8010d24:	2300      	movs	r3, #0
 8010d26:	9309      	str	r3, [sp, #36]	@ 0x24
 8010d28:	2320      	movs	r3, #32
 8010d2a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8010d2e:	f8cd 800c 	str.w	r8, [sp, #12]
 8010d32:	2330      	movs	r3, #48	@ 0x30
 8010d34:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8010ee4 <_vfiprintf_r+0x21c>
 8010d38:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8010d3c:	f04f 0901 	mov.w	r9, #1
 8010d40:	4623      	mov	r3, r4
 8010d42:	469a      	mov	sl, r3
 8010d44:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010d48:	b10a      	cbz	r2, 8010d4e <_vfiprintf_r+0x86>
 8010d4a:	2a25      	cmp	r2, #37	@ 0x25
 8010d4c:	d1f9      	bne.n	8010d42 <_vfiprintf_r+0x7a>
 8010d4e:	ebba 0b04 	subs.w	fp, sl, r4
 8010d52:	d00b      	beq.n	8010d6c <_vfiprintf_r+0xa4>
 8010d54:	465b      	mov	r3, fp
 8010d56:	4622      	mov	r2, r4
 8010d58:	4629      	mov	r1, r5
 8010d5a:	4630      	mov	r0, r6
 8010d5c:	f7ff ffa1 	bl	8010ca2 <__sfputs_r>
 8010d60:	3001      	adds	r0, #1
 8010d62:	f000 80a7 	beq.w	8010eb4 <_vfiprintf_r+0x1ec>
 8010d66:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010d68:	445a      	add	r2, fp
 8010d6a:	9209      	str	r2, [sp, #36]	@ 0x24
 8010d6c:	f89a 3000 	ldrb.w	r3, [sl]
 8010d70:	2b00      	cmp	r3, #0
 8010d72:	f000 809f 	beq.w	8010eb4 <_vfiprintf_r+0x1ec>
 8010d76:	2300      	movs	r3, #0
 8010d78:	f04f 32ff 	mov.w	r2, #4294967295
 8010d7c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010d80:	f10a 0a01 	add.w	sl, sl, #1
 8010d84:	9304      	str	r3, [sp, #16]
 8010d86:	9307      	str	r3, [sp, #28]
 8010d88:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8010d8c:	931a      	str	r3, [sp, #104]	@ 0x68
 8010d8e:	4654      	mov	r4, sl
 8010d90:	2205      	movs	r2, #5
 8010d92:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010d96:	4853      	ldr	r0, [pc, #332]	@ (8010ee4 <_vfiprintf_r+0x21c>)
 8010d98:	f7ef f9fa 	bl	8000190 <memchr>
 8010d9c:	9a04      	ldr	r2, [sp, #16]
 8010d9e:	b9d8      	cbnz	r0, 8010dd8 <_vfiprintf_r+0x110>
 8010da0:	06d1      	lsls	r1, r2, #27
 8010da2:	bf44      	itt	mi
 8010da4:	2320      	movmi	r3, #32
 8010da6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010daa:	0713      	lsls	r3, r2, #28
 8010dac:	bf44      	itt	mi
 8010dae:	232b      	movmi	r3, #43	@ 0x2b
 8010db0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010db4:	f89a 3000 	ldrb.w	r3, [sl]
 8010db8:	2b2a      	cmp	r3, #42	@ 0x2a
 8010dba:	d015      	beq.n	8010de8 <_vfiprintf_r+0x120>
 8010dbc:	9a07      	ldr	r2, [sp, #28]
 8010dbe:	4654      	mov	r4, sl
 8010dc0:	2000      	movs	r0, #0
 8010dc2:	f04f 0c0a 	mov.w	ip, #10
 8010dc6:	4621      	mov	r1, r4
 8010dc8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010dcc:	3b30      	subs	r3, #48	@ 0x30
 8010dce:	2b09      	cmp	r3, #9
 8010dd0:	d94b      	bls.n	8010e6a <_vfiprintf_r+0x1a2>
 8010dd2:	b1b0      	cbz	r0, 8010e02 <_vfiprintf_r+0x13a>
 8010dd4:	9207      	str	r2, [sp, #28]
 8010dd6:	e014      	b.n	8010e02 <_vfiprintf_r+0x13a>
 8010dd8:	eba0 0308 	sub.w	r3, r0, r8
 8010ddc:	fa09 f303 	lsl.w	r3, r9, r3
 8010de0:	4313      	orrs	r3, r2
 8010de2:	9304      	str	r3, [sp, #16]
 8010de4:	46a2      	mov	sl, r4
 8010de6:	e7d2      	b.n	8010d8e <_vfiprintf_r+0xc6>
 8010de8:	9b03      	ldr	r3, [sp, #12]
 8010dea:	1d19      	adds	r1, r3, #4
 8010dec:	681b      	ldr	r3, [r3, #0]
 8010dee:	9103      	str	r1, [sp, #12]
 8010df0:	2b00      	cmp	r3, #0
 8010df2:	bfbb      	ittet	lt
 8010df4:	425b      	neglt	r3, r3
 8010df6:	f042 0202 	orrlt.w	r2, r2, #2
 8010dfa:	9307      	strge	r3, [sp, #28]
 8010dfc:	9307      	strlt	r3, [sp, #28]
 8010dfe:	bfb8      	it	lt
 8010e00:	9204      	strlt	r2, [sp, #16]
 8010e02:	7823      	ldrb	r3, [r4, #0]
 8010e04:	2b2e      	cmp	r3, #46	@ 0x2e
 8010e06:	d10a      	bne.n	8010e1e <_vfiprintf_r+0x156>
 8010e08:	7863      	ldrb	r3, [r4, #1]
 8010e0a:	2b2a      	cmp	r3, #42	@ 0x2a
 8010e0c:	d132      	bne.n	8010e74 <_vfiprintf_r+0x1ac>
 8010e0e:	9b03      	ldr	r3, [sp, #12]
 8010e10:	1d1a      	adds	r2, r3, #4
 8010e12:	681b      	ldr	r3, [r3, #0]
 8010e14:	9203      	str	r2, [sp, #12]
 8010e16:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010e1a:	3402      	adds	r4, #2
 8010e1c:	9305      	str	r3, [sp, #20]
 8010e1e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8010ef4 <_vfiprintf_r+0x22c>
 8010e22:	7821      	ldrb	r1, [r4, #0]
 8010e24:	2203      	movs	r2, #3
 8010e26:	4650      	mov	r0, sl
 8010e28:	f7ef f9b2 	bl	8000190 <memchr>
 8010e2c:	b138      	cbz	r0, 8010e3e <_vfiprintf_r+0x176>
 8010e2e:	9b04      	ldr	r3, [sp, #16]
 8010e30:	eba0 000a 	sub.w	r0, r0, sl
 8010e34:	2240      	movs	r2, #64	@ 0x40
 8010e36:	4082      	lsls	r2, r0
 8010e38:	4313      	orrs	r3, r2
 8010e3a:	3401      	adds	r4, #1
 8010e3c:	9304      	str	r3, [sp, #16]
 8010e3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010e42:	4829      	ldr	r0, [pc, #164]	@ (8010ee8 <_vfiprintf_r+0x220>)
 8010e44:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8010e48:	2206      	movs	r2, #6
 8010e4a:	f7ef f9a1 	bl	8000190 <memchr>
 8010e4e:	2800      	cmp	r0, #0
 8010e50:	d03f      	beq.n	8010ed2 <_vfiprintf_r+0x20a>
 8010e52:	4b26      	ldr	r3, [pc, #152]	@ (8010eec <_vfiprintf_r+0x224>)
 8010e54:	bb1b      	cbnz	r3, 8010e9e <_vfiprintf_r+0x1d6>
 8010e56:	9b03      	ldr	r3, [sp, #12]
 8010e58:	3307      	adds	r3, #7
 8010e5a:	f023 0307 	bic.w	r3, r3, #7
 8010e5e:	3308      	adds	r3, #8
 8010e60:	9303      	str	r3, [sp, #12]
 8010e62:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010e64:	443b      	add	r3, r7
 8010e66:	9309      	str	r3, [sp, #36]	@ 0x24
 8010e68:	e76a      	b.n	8010d40 <_vfiprintf_r+0x78>
 8010e6a:	fb0c 3202 	mla	r2, ip, r2, r3
 8010e6e:	460c      	mov	r4, r1
 8010e70:	2001      	movs	r0, #1
 8010e72:	e7a8      	b.n	8010dc6 <_vfiprintf_r+0xfe>
 8010e74:	2300      	movs	r3, #0
 8010e76:	3401      	adds	r4, #1
 8010e78:	9305      	str	r3, [sp, #20]
 8010e7a:	4619      	mov	r1, r3
 8010e7c:	f04f 0c0a 	mov.w	ip, #10
 8010e80:	4620      	mov	r0, r4
 8010e82:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010e86:	3a30      	subs	r2, #48	@ 0x30
 8010e88:	2a09      	cmp	r2, #9
 8010e8a:	d903      	bls.n	8010e94 <_vfiprintf_r+0x1cc>
 8010e8c:	2b00      	cmp	r3, #0
 8010e8e:	d0c6      	beq.n	8010e1e <_vfiprintf_r+0x156>
 8010e90:	9105      	str	r1, [sp, #20]
 8010e92:	e7c4      	b.n	8010e1e <_vfiprintf_r+0x156>
 8010e94:	fb0c 2101 	mla	r1, ip, r1, r2
 8010e98:	4604      	mov	r4, r0
 8010e9a:	2301      	movs	r3, #1
 8010e9c:	e7f0      	b.n	8010e80 <_vfiprintf_r+0x1b8>
 8010e9e:	ab03      	add	r3, sp, #12
 8010ea0:	9300      	str	r3, [sp, #0]
 8010ea2:	462a      	mov	r2, r5
 8010ea4:	4b12      	ldr	r3, [pc, #72]	@ (8010ef0 <_vfiprintf_r+0x228>)
 8010ea6:	a904      	add	r1, sp, #16
 8010ea8:	4630      	mov	r0, r6
 8010eaa:	f3af 8000 	nop.w
 8010eae:	4607      	mov	r7, r0
 8010eb0:	1c78      	adds	r0, r7, #1
 8010eb2:	d1d6      	bne.n	8010e62 <_vfiprintf_r+0x19a>
 8010eb4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010eb6:	07d9      	lsls	r1, r3, #31
 8010eb8:	d405      	bmi.n	8010ec6 <_vfiprintf_r+0x1fe>
 8010eba:	89ab      	ldrh	r3, [r5, #12]
 8010ebc:	059a      	lsls	r2, r3, #22
 8010ebe:	d402      	bmi.n	8010ec6 <_vfiprintf_r+0x1fe>
 8010ec0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010ec2:	f7ff fda9 	bl	8010a18 <__retarget_lock_release_recursive>
 8010ec6:	89ab      	ldrh	r3, [r5, #12]
 8010ec8:	065b      	lsls	r3, r3, #25
 8010eca:	f53f af1f 	bmi.w	8010d0c <_vfiprintf_r+0x44>
 8010ece:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010ed0:	e71e      	b.n	8010d10 <_vfiprintf_r+0x48>
 8010ed2:	ab03      	add	r3, sp, #12
 8010ed4:	9300      	str	r3, [sp, #0]
 8010ed6:	462a      	mov	r2, r5
 8010ed8:	4b05      	ldr	r3, [pc, #20]	@ (8010ef0 <_vfiprintf_r+0x228>)
 8010eda:	a904      	add	r1, sp, #16
 8010edc:	4630      	mov	r0, r6
 8010ede:	f000 f879 	bl	8010fd4 <_printf_i>
 8010ee2:	e7e4      	b.n	8010eae <_vfiprintf_r+0x1e6>
 8010ee4:	08012705 	.word	0x08012705
 8010ee8:	0801270f 	.word	0x0801270f
 8010eec:	00000000 	.word	0x00000000
 8010ef0:	08010ca3 	.word	0x08010ca3
 8010ef4:	0801270b 	.word	0x0801270b

08010ef8 <_printf_common>:
 8010ef8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010efc:	4616      	mov	r6, r2
 8010efe:	4698      	mov	r8, r3
 8010f00:	688a      	ldr	r2, [r1, #8]
 8010f02:	690b      	ldr	r3, [r1, #16]
 8010f04:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8010f08:	4293      	cmp	r3, r2
 8010f0a:	bfb8      	it	lt
 8010f0c:	4613      	movlt	r3, r2
 8010f0e:	6033      	str	r3, [r6, #0]
 8010f10:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8010f14:	4607      	mov	r7, r0
 8010f16:	460c      	mov	r4, r1
 8010f18:	b10a      	cbz	r2, 8010f1e <_printf_common+0x26>
 8010f1a:	3301      	adds	r3, #1
 8010f1c:	6033      	str	r3, [r6, #0]
 8010f1e:	6823      	ldr	r3, [r4, #0]
 8010f20:	0699      	lsls	r1, r3, #26
 8010f22:	bf42      	ittt	mi
 8010f24:	6833      	ldrmi	r3, [r6, #0]
 8010f26:	3302      	addmi	r3, #2
 8010f28:	6033      	strmi	r3, [r6, #0]
 8010f2a:	6825      	ldr	r5, [r4, #0]
 8010f2c:	f015 0506 	ands.w	r5, r5, #6
 8010f30:	d106      	bne.n	8010f40 <_printf_common+0x48>
 8010f32:	f104 0a19 	add.w	sl, r4, #25
 8010f36:	68e3      	ldr	r3, [r4, #12]
 8010f38:	6832      	ldr	r2, [r6, #0]
 8010f3a:	1a9b      	subs	r3, r3, r2
 8010f3c:	42ab      	cmp	r3, r5
 8010f3e:	dc26      	bgt.n	8010f8e <_printf_common+0x96>
 8010f40:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8010f44:	6822      	ldr	r2, [r4, #0]
 8010f46:	3b00      	subs	r3, #0
 8010f48:	bf18      	it	ne
 8010f4a:	2301      	movne	r3, #1
 8010f4c:	0692      	lsls	r2, r2, #26
 8010f4e:	d42b      	bmi.n	8010fa8 <_printf_common+0xb0>
 8010f50:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8010f54:	4641      	mov	r1, r8
 8010f56:	4638      	mov	r0, r7
 8010f58:	47c8      	blx	r9
 8010f5a:	3001      	adds	r0, #1
 8010f5c:	d01e      	beq.n	8010f9c <_printf_common+0xa4>
 8010f5e:	6823      	ldr	r3, [r4, #0]
 8010f60:	6922      	ldr	r2, [r4, #16]
 8010f62:	f003 0306 	and.w	r3, r3, #6
 8010f66:	2b04      	cmp	r3, #4
 8010f68:	bf02      	ittt	eq
 8010f6a:	68e5      	ldreq	r5, [r4, #12]
 8010f6c:	6833      	ldreq	r3, [r6, #0]
 8010f6e:	1aed      	subeq	r5, r5, r3
 8010f70:	68a3      	ldr	r3, [r4, #8]
 8010f72:	bf0c      	ite	eq
 8010f74:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010f78:	2500      	movne	r5, #0
 8010f7a:	4293      	cmp	r3, r2
 8010f7c:	bfc4      	itt	gt
 8010f7e:	1a9b      	subgt	r3, r3, r2
 8010f80:	18ed      	addgt	r5, r5, r3
 8010f82:	2600      	movs	r6, #0
 8010f84:	341a      	adds	r4, #26
 8010f86:	42b5      	cmp	r5, r6
 8010f88:	d11a      	bne.n	8010fc0 <_printf_common+0xc8>
 8010f8a:	2000      	movs	r0, #0
 8010f8c:	e008      	b.n	8010fa0 <_printf_common+0xa8>
 8010f8e:	2301      	movs	r3, #1
 8010f90:	4652      	mov	r2, sl
 8010f92:	4641      	mov	r1, r8
 8010f94:	4638      	mov	r0, r7
 8010f96:	47c8      	blx	r9
 8010f98:	3001      	adds	r0, #1
 8010f9a:	d103      	bne.n	8010fa4 <_printf_common+0xac>
 8010f9c:	f04f 30ff 	mov.w	r0, #4294967295
 8010fa0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010fa4:	3501      	adds	r5, #1
 8010fa6:	e7c6      	b.n	8010f36 <_printf_common+0x3e>
 8010fa8:	18e1      	adds	r1, r4, r3
 8010faa:	1c5a      	adds	r2, r3, #1
 8010fac:	2030      	movs	r0, #48	@ 0x30
 8010fae:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8010fb2:	4422      	add	r2, r4
 8010fb4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8010fb8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8010fbc:	3302      	adds	r3, #2
 8010fbe:	e7c7      	b.n	8010f50 <_printf_common+0x58>
 8010fc0:	2301      	movs	r3, #1
 8010fc2:	4622      	mov	r2, r4
 8010fc4:	4641      	mov	r1, r8
 8010fc6:	4638      	mov	r0, r7
 8010fc8:	47c8      	blx	r9
 8010fca:	3001      	adds	r0, #1
 8010fcc:	d0e6      	beq.n	8010f9c <_printf_common+0xa4>
 8010fce:	3601      	adds	r6, #1
 8010fd0:	e7d9      	b.n	8010f86 <_printf_common+0x8e>
	...

08010fd4 <_printf_i>:
 8010fd4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010fd8:	7e0f      	ldrb	r7, [r1, #24]
 8010fda:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8010fdc:	2f78      	cmp	r7, #120	@ 0x78
 8010fde:	4691      	mov	r9, r2
 8010fe0:	4680      	mov	r8, r0
 8010fe2:	460c      	mov	r4, r1
 8010fe4:	469a      	mov	sl, r3
 8010fe6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8010fea:	d807      	bhi.n	8010ffc <_printf_i+0x28>
 8010fec:	2f62      	cmp	r7, #98	@ 0x62
 8010fee:	d80a      	bhi.n	8011006 <_printf_i+0x32>
 8010ff0:	2f00      	cmp	r7, #0
 8010ff2:	f000 80d2 	beq.w	801119a <_printf_i+0x1c6>
 8010ff6:	2f58      	cmp	r7, #88	@ 0x58
 8010ff8:	f000 80b9 	beq.w	801116e <_printf_i+0x19a>
 8010ffc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8011000:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8011004:	e03a      	b.n	801107c <_printf_i+0xa8>
 8011006:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801100a:	2b15      	cmp	r3, #21
 801100c:	d8f6      	bhi.n	8010ffc <_printf_i+0x28>
 801100e:	a101      	add	r1, pc, #4	@ (adr r1, 8011014 <_printf_i+0x40>)
 8011010:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011014:	0801106d 	.word	0x0801106d
 8011018:	08011081 	.word	0x08011081
 801101c:	08010ffd 	.word	0x08010ffd
 8011020:	08010ffd 	.word	0x08010ffd
 8011024:	08010ffd 	.word	0x08010ffd
 8011028:	08010ffd 	.word	0x08010ffd
 801102c:	08011081 	.word	0x08011081
 8011030:	08010ffd 	.word	0x08010ffd
 8011034:	08010ffd 	.word	0x08010ffd
 8011038:	08010ffd 	.word	0x08010ffd
 801103c:	08010ffd 	.word	0x08010ffd
 8011040:	08011181 	.word	0x08011181
 8011044:	080110ab 	.word	0x080110ab
 8011048:	0801113b 	.word	0x0801113b
 801104c:	08010ffd 	.word	0x08010ffd
 8011050:	08010ffd 	.word	0x08010ffd
 8011054:	080111a3 	.word	0x080111a3
 8011058:	08010ffd 	.word	0x08010ffd
 801105c:	080110ab 	.word	0x080110ab
 8011060:	08010ffd 	.word	0x08010ffd
 8011064:	08010ffd 	.word	0x08010ffd
 8011068:	08011143 	.word	0x08011143
 801106c:	6833      	ldr	r3, [r6, #0]
 801106e:	1d1a      	adds	r2, r3, #4
 8011070:	681b      	ldr	r3, [r3, #0]
 8011072:	6032      	str	r2, [r6, #0]
 8011074:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8011078:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801107c:	2301      	movs	r3, #1
 801107e:	e09d      	b.n	80111bc <_printf_i+0x1e8>
 8011080:	6833      	ldr	r3, [r6, #0]
 8011082:	6820      	ldr	r0, [r4, #0]
 8011084:	1d19      	adds	r1, r3, #4
 8011086:	6031      	str	r1, [r6, #0]
 8011088:	0606      	lsls	r6, r0, #24
 801108a:	d501      	bpl.n	8011090 <_printf_i+0xbc>
 801108c:	681d      	ldr	r5, [r3, #0]
 801108e:	e003      	b.n	8011098 <_printf_i+0xc4>
 8011090:	0645      	lsls	r5, r0, #25
 8011092:	d5fb      	bpl.n	801108c <_printf_i+0xb8>
 8011094:	f9b3 5000 	ldrsh.w	r5, [r3]
 8011098:	2d00      	cmp	r5, #0
 801109a:	da03      	bge.n	80110a4 <_printf_i+0xd0>
 801109c:	232d      	movs	r3, #45	@ 0x2d
 801109e:	426d      	negs	r5, r5
 80110a0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80110a4:	4859      	ldr	r0, [pc, #356]	@ (801120c <_printf_i+0x238>)
 80110a6:	230a      	movs	r3, #10
 80110a8:	e011      	b.n	80110ce <_printf_i+0xfa>
 80110aa:	6821      	ldr	r1, [r4, #0]
 80110ac:	6833      	ldr	r3, [r6, #0]
 80110ae:	0608      	lsls	r0, r1, #24
 80110b0:	f853 5b04 	ldr.w	r5, [r3], #4
 80110b4:	d402      	bmi.n	80110bc <_printf_i+0xe8>
 80110b6:	0649      	lsls	r1, r1, #25
 80110b8:	bf48      	it	mi
 80110ba:	b2ad      	uxthmi	r5, r5
 80110bc:	2f6f      	cmp	r7, #111	@ 0x6f
 80110be:	4853      	ldr	r0, [pc, #332]	@ (801120c <_printf_i+0x238>)
 80110c0:	6033      	str	r3, [r6, #0]
 80110c2:	bf14      	ite	ne
 80110c4:	230a      	movne	r3, #10
 80110c6:	2308      	moveq	r3, #8
 80110c8:	2100      	movs	r1, #0
 80110ca:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80110ce:	6866      	ldr	r6, [r4, #4]
 80110d0:	60a6      	str	r6, [r4, #8]
 80110d2:	2e00      	cmp	r6, #0
 80110d4:	bfa2      	ittt	ge
 80110d6:	6821      	ldrge	r1, [r4, #0]
 80110d8:	f021 0104 	bicge.w	r1, r1, #4
 80110dc:	6021      	strge	r1, [r4, #0]
 80110de:	b90d      	cbnz	r5, 80110e4 <_printf_i+0x110>
 80110e0:	2e00      	cmp	r6, #0
 80110e2:	d04b      	beq.n	801117c <_printf_i+0x1a8>
 80110e4:	4616      	mov	r6, r2
 80110e6:	fbb5 f1f3 	udiv	r1, r5, r3
 80110ea:	fb03 5711 	mls	r7, r3, r1, r5
 80110ee:	5dc7      	ldrb	r7, [r0, r7]
 80110f0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80110f4:	462f      	mov	r7, r5
 80110f6:	42bb      	cmp	r3, r7
 80110f8:	460d      	mov	r5, r1
 80110fa:	d9f4      	bls.n	80110e6 <_printf_i+0x112>
 80110fc:	2b08      	cmp	r3, #8
 80110fe:	d10b      	bne.n	8011118 <_printf_i+0x144>
 8011100:	6823      	ldr	r3, [r4, #0]
 8011102:	07df      	lsls	r7, r3, #31
 8011104:	d508      	bpl.n	8011118 <_printf_i+0x144>
 8011106:	6923      	ldr	r3, [r4, #16]
 8011108:	6861      	ldr	r1, [r4, #4]
 801110a:	4299      	cmp	r1, r3
 801110c:	bfde      	ittt	le
 801110e:	2330      	movle	r3, #48	@ 0x30
 8011110:	f806 3c01 	strble.w	r3, [r6, #-1]
 8011114:	f106 36ff 	addle.w	r6, r6, #4294967295
 8011118:	1b92      	subs	r2, r2, r6
 801111a:	6122      	str	r2, [r4, #16]
 801111c:	f8cd a000 	str.w	sl, [sp]
 8011120:	464b      	mov	r3, r9
 8011122:	aa03      	add	r2, sp, #12
 8011124:	4621      	mov	r1, r4
 8011126:	4640      	mov	r0, r8
 8011128:	f7ff fee6 	bl	8010ef8 <_printf_common>
 801112c:	3001      	adds	r0, #1
 801112e:	d14a      	bne.n	80111c6 <_printf_i+0x1f2>
 8011130:	f04f 30ff 	mov.w	r0, #4294967295
 8011134:	b004      	add	sp, #16
 8011136:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801113a:	6823      	ldr	r3, [r4, #0]
 801113c:	f043 0320 	orr.w	r3, r3, #32
 8011140:	6023      	str	r3, [r4, #0]
 8011142:	4833      	ldr	r0, [pc, #204]	@ (8011210 <_printf_i+0x23c>)
 8011144:	2778      	movs	r7, #120	@ 0x78
 8011146:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801114a:	6823      	ldr	r3, [r4, #0]
 801114c:	6831      	ldr	r1, [r6, #0]
 801114e:	061f      	lsls	r7, r3, #24
 8011150:	f851 5b04 	ldr.w	r5, [r1], #4
 8011154:	d402      	bmi.n	801115c <_printf_i+0x188>
 8011156:	065f      	lsls	r7, r3, #25
 8011158:	bf48      	it	mi
 801115a:	b2ad      	uxthmi	r5, r5
 801115c:	6031      	str	r1, [r6, #0]
 801115e:	07d9      	lsls	r1, r3, #31
 8011160:	bf44      	itt	mi
 8011162:	f043 0320 	orrmi.w	r3, r3, #32
 8011166:	6023      	strmi	r3, [r4, #0]
 8011168:	b11d      	cbz	r5, 8011172 <_printf_i+0x19e>
 801116a:	2310      	movs	r3, #16
 801116c:	e7ac      	b.n	80110c8 <_printf_i+0xf4>
 801116e:	4827      	ldr	r0, [pc, #156]	@ (801120c <_printf_i+0x238>)
 8011170:	e7e9      	b.n	8011146 <_printf_i+0x172>
 8011172:	6823      	ldr	r3, [r4, #0]
 8011174:	f023 0320 	bic.w	r3, r3, #32
 8011178:	6023      	str	r3, [r4, #0]
 801117a:	e7f6      	b.n	801116a <_printf_i+0x196>
 801117c:	4616      	mov	r6, r2
 801117e:	e7bd      	b.n	80110fc <_printf_i+0x128>
 8011180:	6833      	ldr	r3, [r6, #0]
 8011182:	6825      	ldr	r5, [r4, #0]
 8011184:	6961      	ldr	r1, [r4, #20]
 8011186:	1d18      	adds	r0, r3, #4
 8011188:	6030      	str	r0, [r6, #0]
 801118a:	062e      	lsls	r6, r5, #24
 801118c:	681b      	ldr	r3, [r3, #0]
 801118e:	d501      	bpl.n	8011194 <_printf_i+0x1c0>
 8011190:	6019      	str	r1, [r3, #0]
 8011192:	e002      	b.n	801119a <_printf_i+0x1c6>
 8011194:	0668      	lsls	r0, r5, #25
 8011196:	d5fb      	bpl.n	8011190 <_printf_i+0x1bc>
 8011198:	8019      	strh	r1, [r3, #0]
 801119a:	2300      	movs	r3, #0
 801119c:	6123      	str	r3, [r4, #16]
 801119e:	4616      	mov	r6, r2
 80111a0:	e7bc      	b.n	801111c <_printf_i+0x148>
 80111a2:	6833      	ldr	r3, [r6, #0]
 80111a4:	1d1a      	adds	r2, r3, #4
 80111a6:	6032      	str	r2, [r6, #0]
 80111a8:	681e      	ldr	r6, [r3, #0]
 80111aa:	6862      	ldr	r2, [r4, #4]
 80111ac:	2100      	movs	r1, #0
 80111ae:	4630      	mov	r0, r6
 80111b0:	f7ee ffee 	bl	8000190 <memchr>
 80111b4:	b108      	cbz	r0, 80111ba <_printf_i+0x1e6>
 80111b6:	1b80      	subs	r0, r0, r6
 80111b8:	6060      	str	r0, [r4, #4]
 80111ba:	6863      	ldr	r3, [r4, #4]
 80111bc:	6123      	str	r3, [r4, #16]
 80111be:	2300      	movs	r3, #0
 80111c0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80111c4:	e7aa      	b.n	801111c <_printf_i+0x148>
 80111c6:	6923      	ldr	r3, [r4, #16]
 80111c8:	4632      	mov	r2, r6
 80111ca:	4649      	mov	r1, r9
 80111cc:	4640      	mov	r0, r8
 80111ce:	47d0      	blx	sl
 80111d0:	3001      	adds	r0, #1
 80111d2:	d0ad      	beq.n	8011130 <_printf_i+0x15c>
 80111d4:	6823      	ldr	r3, [r4, #0]
 80111d6:	079b      	lsls	r3, r3, #30
 80111d8:	d413      	bmi.n	8011202 <_printf_i+0x22e>
 80111da:	68e0      	ldr	r0, [r4, #12]
 80111dc:	9b03      	ldr	r3, [sp, #12]
 80111de:	4298      	cmp	r0, r3
 80111e0:	bfb8      	it	lt
 80111e2:	4618      	movlt	r0, r3
 80111e4:	e7a6      	b.n	8011134 <_printf_i+0x160>
 80111e6:	2301      	movs	r3, #1
 80111e8:	4632      	mov	r2, r6
 80111ea:	4649      	mov	r1, r9
 80111ec:	4640      	mov	r0, r8
 80111ee:	47d0      	blx	sl
 80111f0:	3001      	adds	r0, #1
 80111f2:	d09d      	beq.n	8011130 <_printf_i+0x15c>
 80111f4:	3501      	adds	r5, #1
 80111f6:	68e3      	ldr	r3, [r4, #12]
 80111f8:	9903      	ldr	r1, [sp, #12]
 80111fa:	1a5b      	subs	r3, r3, r1
 80111fc:	42ab      	cmp	r3, r5
 80111fe:	dcf2      	bgt.n	80111e6 <_printf_i+0x212>
 8011200:	e7eb      	b.n	80111da <_printf_i+0x206>
 8011202:	2500      	movs	r5, #0
 8011204:	f104 0619 	add.w	r6, r4, #25
 8011208:	e7f5      	b.n	80111f6 <_printf_i+0x222>
 801120a:	bf00      	nop
 801120c:	08012716 	.word	0x08012716
 8011210:	08012727 	.word	0x08012727

08011214 <__sflush_r>:
 8011214:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8011218:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801121c:	0716      	lsls	r6, r2, #28
 801121e:	4605      	mov	r5, r0
 8011220:	460c      	mov	r4, r1
 8011222:	d454      	bmi.n	80112ce <__sflush_r+0xba>
 8011224:	684b      	ldr	r3, [r1, #4]
 8011226:	2b00      	cmp	r3, #0
 8011228:	dc02      	bgt.n	8011230 <__sflush_r+0x1c>
 801122a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801122c:	2b00      	cmp	r3, #0
 801122e:	dd48      	ble.n	80112c2 <__sflush_r+0xae>
 8011230:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8011232:	2e00      	cmp	r6, #0
 8011234:	d045      	beq.n	80112c2 <__sflush_r+0xae>
 8011236:	2300      	movs	r3, #0
 8011238:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801123c:	682f      	ldr	r7, [r5, #0]
 801123e:	6a21      	ldr	r1, [r4, #32]
 8011240:	602b      	str	r3, [r5, #0]
 8011242:	d030      	beq.n	80112a6 <__sflush_r+0x92>
 8011244:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8011246:	89a3      	ldrh	r3, [r4, #12]
 8011248:	0759      	lsls	r1, r3, #29
 801124a:	d505      	bpl.n	8011258 <__sflush_r+0x44>
 801124c:	6863      	ldr	r3, [r4, #4]
 801124e:	1ad2      	subs	r2, r2, r3
 8011250:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8011252:	b10b      	cbz	r3, 8011258 <__sflush_r+0x44>
 8011254:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8011256:	1ad2      	subs	r2, r2, r3
 8011258:	2300      	movs	r3, #0
 801125a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801125c:	6a21      	ldr	r1, [r4, #32]
 801125e:	4628      	mov	r0, r5
 8011260:	47b0      	blx	r6
 8011262:	1c43      	adds	r3, r0, #1
 8011264:	89a3      	ldrh	r3, [r4, #12]
 8011266:	d106      	bne.n	8011276 <__sflush_r+0x62>
 8011268:	6829      	ldr	r1, [r5, #0]
 801126a:	291d      	cmp	r1, #29
 801126c:	d82b      	bhi.n	80112c6 <__sflush_r+0xb2>
 801126e:	4a2a      	ldr	r2, [pc, #168]	@ (8011318 <__sflush_r+0x104>)
 8011270:	410a      	asrs	r2, r1
 8011272:	07d6      	lsls	r6, r2, #31
 8011274:	d427      	bmi.n	80112c6 <__sflush_r+0xb2>
 8011276:	2200      	movs	r2, #0
 8011278:	6062      	str	r2, [r4, #4]
 801127a:	04d9      	lsls	r1, r3, #19
 801127c:	6922      	ldr	r2, [r4, #16]
 801127e:	6022      	str	r2, [r4, #0]
 8011280:	d504      	bpl.n	801128c <__sflush_r+0x78>
 8011282:	1c42      	adds	r2, r0, #1
 8011284:	d101      	bne.n	801128a <__sflush_r+0x76>
 8011286:	682b      	ldr	r3, [r5, #0]
 8011288:	b903      	cbnz	r3, 801128c <__sflush_r+0x78>
 801128a:	6560      	str	r0, [r4, #84]	@ 0x54
 801128c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801128e:	602f      	str	r7, [r5, #0]
 8011290:	b1b9      	cbz	r1, 80112c2 <__sflush_r+0xae>
 8011292:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011296:	4299      	cmp	r1, r3
 8011298:	d002      	beq.n	80112a0 <__sflush_r+0x8c>
 801129a:	4628      	mov	r0, r5
 801129c:	f7ff fbea 	bl	8010a74 <_free_r>
 80112a0:	2300      	movs	r3, #0
 80112a2:	6363      	str	r3, [r4, #52]	@ 0x34
 80112a4:	e00d      	b.n	80112c2 <__sflush_r+0xae>
 80112a6:	2301      	movs	r3, #1
 80112a8:	4628      	mov	r0, r5
 80112aa:	47b0      	blx	r6
 80112ac:	4602      	mov	r2, r0
 80112ae:	1c50      	adds	r0, r2, #1
 80112b0:	d1c9      	bne.n	8011246 <__sflush_r+0x32>
 80112b2:	682b      	ldr	r3, [r5, #0]
 80112b4:	2b00      	cmp	r3, #0
 80112b6:	d0c6      	beq.n	8011246 <__sflush_r+0x32>
 80112b8:	2b1d      	cmp	r3, #29
 80112ba:	d001      	beq.n	80112c0 <__sflush_r+0xac>
 80112bc:	2b16      	cmp	r3, #22
 80112be:	d11e      	bne.n	80112fe <__sflush_r+0xea>
 80112c0:	602f      	str	r7, [r5, #0]
 80112c2:	2000      	movs	r0, #0
 80112c4:	e022      	b.n	801130c <__sflush_r+0xf8>
 80112c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80112ca:	b21b      	sxth	r3, r3
 80112cc:	e01b      	b.n	8011306 <__sflush_r+0xf2>
 80112ce:	690f      	ldr	r7, [r1, #16]
 80112d0:	2f00      	cmp	r7, #0
 80112d2:	d0f6      	beq.n	80112c2 <__sflush_r+0xae>
 80112d4:	0793      	lsls	r3, r2, #30
 80112d6:	680e      	ldr	r6, [r1, #0]
 80112d8:	bf08      	it	eq
 80112da:	694b      	ldreq	r3, [r1, #20]
 80112dc:	600f      	str	r7, [r1, #0]
 80112de:	bf18      	it	ne
 80112e0:	2300      	movne	r3, #0
 80112e2:	eba6 0807 	sub.w	r8, r6, r7
 80112e6:	608b      	str	r3, [r1, #8]
 80112e8:	f1b8 0f00 	cmp.w	r8, #0
 80112ec:	dde9      	ble.n	80112c2 <__sflush_r+0xae>
 80112ee:	6a21      	ldr	r1, [r4, #32]
 80112f0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80112f2:	4643      	mov	r3, r8
 80112f4:	463a      	mov	r2, r7
 80112f6:	4628      	mov	r0, r5
 80112f8:	47b0      	blx	r6
 80112fa:	2800      	cmp	r0, #0
 80112fc:	dc08      	bgt.n	8011310 <__sflush_r+0xfc>
 80112fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011302:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011306:	81a3      	strh	r3, [r4, #12]
 8011308:	f04f 30ff 	mov.w	r0, #4294967295
 801130c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011310:	4407      	add	r7, r0
 8011312:	eba8 0800 	sub.w	r8, r8, r0
 8011316:	e7e7      	b.n	80112e8 <__sflush_r+0xd4>
 8011318:	dfbffffe 	.word	0xdfbffffe

0801131c <_fflush_r>:
 801131c:	b538      	push	{r3, r4, r5, lr}
 801131e:	690b      	ldr	r3, [r1, #16]
 8011320:	4605      	mov	r5, r0
 8011322:	460c      	mov	r4, r1
 8011324:	b913      	cbnz	r3, 801132c <_fflush_r+0x10>
 8011326:	2500      	movs	r5, #0
 8011328:	4628      	mov	r0, r5
 801132a:	bd38      	pop	{r3, r4, r5, pc}
 801132c:	b118      	cbz	r0, 8011336 <_fflush_r+0x1a>
 801132e:	6a03      	ldr	r3, [r0, #32]
 8011330:	b90b      	cbnz	r3, 8011336 <_fflush_r+0x1a>
 8011332:	f7ff fa7d 	bl	8010830 <__sinit>
 8011336:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801133a:	2b00      	cmp	r3, #0
 801133c:	d0f3      	beq.n	8011326 <_fflush_r+0xa>
 801133e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8011340:	07d0      	lsls	r0, r2, #31
 8011342:	d404      	bmi.n	801134e <_fflush_r+0x32>
 8011344:	0599      	lsls	r1, r3, #22
 8011346:	d402      	bmi.n	801134e <_fflush_r+0x32>
 8011348:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801134a:	f7ff fb64 	bl	8010a16 <__retarget_lock_acquire_recursive>
 801134e:	4628      	mov	r0, r5
 8011350:	4621      	mov	r1, r4
 8011352:	f7ff ff5f 	bl	8011214 <__sflush_r>
 8011356:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011358:	07da      	lsls	r2, r3, #31
 801135a:	4605      	mov	r5, r0
 801135c:	d4e4      	bmi.n	8011328 <_fflush_r+0xc>
 801135e:	89a3      	ldrh	r3, [r4, #12]
 8011360:	059b      	lsls	r3, r3, #22
 8011362:	d4e1      	bmi.n	8011328 <_fflush_r+0xc>
 8011364:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011366:	f7ff fb57 	bl	8010a18 <__retarget_lock_release_recursive>
 801136a:	e7dd      	b.n	8011328 <_fflush_r+0xc>

0801136c <fiprintf>:
 801136c:	b40e      	push	{r1, r2, r3}
 801136e:	b503      	push	{r0, r1, lr}
 8011370:	4601      	mov	r1, r0
 8011372:	ab03      	add	r3, sp, #12
 8011374:	4805      	ldr	r0, [pc, #20]	@ (801138c <fiprintf+0x20>)
 8011376:	f853 2b04 	ldr.w	r2, [r3], #4
 801137a:	6800      	ldr	r0, [r0, #0]
 801137c:	9301      	str	r3, [sp, #4]
 801137e:	f7ff fca3 	bl	8010cc8 <_vfiprintf_r>
 8011382:	b002      	add	sp, #8
 8011384:	f85d eb04 	ldr.w	lr, [sp], #4
 8011388:	b003      	add	sp, #12
 801138a:	4770      	bx	lr
 801138c:	20000084 	.word	0x20000084

08011390 <__swbuf_r>:
 8011390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011392:	460e      	mov	r6, r1
 8011394:	4614      	mov	r4, r2
 8011396:	4605      	mov	r5, r0
 8011398:	b118      	cbz	r0, 80113a2 <__swbuf_r+0x12>
 801139a:	6a03      	ldr	r3, [r0, #32]
 801139c:	b90b      	cbnz	r3, 80113a2 <__swbuf_r+0x12>
 801139e:	f7ff fa47 	bl	8010830 <__sinit>
 80113a2:	69a3      	ldr	r3, [r4, #24]
 80113a4:	60a3      	str	r3, [r4, #8]
 80113a6:	89a3      	ldrh	r3, [r4, #12]
 80113a8:	071a      	lsls	r2, r3, #28
 80113aa:	d501      	bpl.n	80113b0 <__swbuf_r+0x20>
 80113ac:	6923      	ldr	r3, [r4, #16]
 80113ae:	b943      	cbnz	r3, 80113c2 <__swbuf_r+0x32>
 80113b0:	4621      	mov	r1, r4
 80113b2:	4628      	mov	r0, r5
 80113b4:	f000 f82a 	bl	801140c <__swsetup_r>
 80113b8:	b118      	cbz	r0, 80113c2 <__swbuf_r+0x32>
 80113ba:	f04f 37ff 	mov.w	r7, #4294967295
 80113be:	4638      	mov	r0, r7
 80113c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80113c2:	6823      	ldr	r3, [r4, #0]
 80113c4:	6922      	ldr	r2, [r4, #16]
 80113c6:	1a98      	subs	r0, r3, r2
 80113c8:	6963      	ldr	r3, [r4, #20]
 80113ca:	b2f6      	uxtb	r6, r6
 80113cc:	4283      	cmp	r3, r0
 80113ce:	4637      	mov	r7, r6
 80113d0:	dc05      	bgt.n	80113de <__swbuf_r+0x4e>
 80113d2:	4621      	mov	r1, r4
 80113d4:	4628      	mov	r0, r5
 80113d6:	f7ff ffa1 	bl	801131c <_fflush_r>
 80113da:	2800      	cmp	r0, #0
 80113dc:	d1ed      	bne.n	80113ba <__swbuf_r+0x2a>
 80113de:	68a3      	ldr	r3, [r4, #8]
 80113e0:	3b01      	subs	r3, #1
 80113e2:	60a3      	str	r3, [r4, #8]
 80113e4:	6823      	ldr	r3, [r4, #0]
 80113e6:	1c5a      	adds	r2, r3, #1
 80113e8:	6022      	str	r2, [r4, #0]
 80113ea:	701e      	strb	r6, [r3, #0]
 80113ec:	6962      	ldr	r2, [r4, #20]
 80113ee:	1c43      	adds	r3, r0, #1
 80113f0:	429a      	cmp	r2, r3
 80113f2:	d004      	beq.n	80113fe <__swbuf_r+0x6e>
 80113f4:	89a3      	ldrh	r3, [r4, #12]
 80113f6:	07db      	lsls	r3, r3, #31
 80113f8:	d5e1      	bpl.n	80113be <__swbuf_r+0x2e>
 80113fa:	2e0a      	cmp	r6, #10
 80113fc:	d1df      	bne.n	80113be <__swbuf_r+0x2e>
 80113fe:	4621      	mov	r1, r4
 8011400:	4628      	mov	r0, r5
 8011402:	f7ff ff8b 	bl	801131c <_fflush_r>
 8011406:	2800      	cmp	r0, #0
 8011408:	d0d9      	beq.n	80113be <__swbuf_r+0x2e>
 801140a:	e7d6      	b.n	80113ba <__swbuf_r+0x2a>

0801140c <__swsetup_r>:
 801140c:	b538      	push	{r3, r4, r5, lr}
 801140e:	4b29      	ldr	r3, [pc, #164]	@ (80114b4 <__swsetup_r+0xa8>)
 8011410:	4605      	mov	r5, r0
 8011412:	6818      	ldr	r0, [r3, #0]
 8011414:	460c      	mov	r4, r1
 8011416:	b118      	cbz	r0, 8011420 <__swsetup_r+0x14>
 8011418:	6a03      	ldr	r3, [r0, #32]
 801141a:	b90b      	cbnz	r3, 8011420 <__swsetup_r+0x14>
 801141c:	f7ff fa08 	bl	8010830 <__sinit>
 8011420:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011424:	0719      	lsls	r1, r3, #28
 8011426:	d422      	bmi.n	801146e <__swsetup_r+0x62>
 8011428:	06da      	lsls	r2, r3, #27
 801142a:	d407      	bmi.n	801143c <__swsetup_r+0x30>
 801142c:	2209      	movs	r2, #9
 801142e:	602a      	str	r2, [r5, #0]
 8011430:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011434:	81a3      	strh	r3, [r4, #12]
 8011436:	f04f 30ff 	mov.w	r0, #4294967295
 801143a:	e033      	b.n	80114a4 <__swsetup_r+0x98>
 801143c:	0758      	lsls	r0, r3, #29
 801143e:	d512      	bpl.n	8011466 <__swsetup_r+0x5a>
 8011440:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011442:	b141      	cbz	r1, 8011456 <__swsetup_r+0x4a>
 8011444:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011448:	4299      	cmp	r1, r3
 801144a:	d002      	beq.n	8011452 <__swsetup_r+0x46>
 801144c:	4628      	mov	r0, r5
 801144e:	f7ff fb11 	bl	8010a74 <_free_r>
 8011452:	2300      	movs	r3, #0
 8011454:	6363      	str	r3, [r4, #52]	@ 0x34
 8011456:	89a3      	ldrh	r3, [r4, #12]
 8011458:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801145c:	81a3      	strh	r3, [r4, #12]
 801145e:	2300      	movs	r3, #0
 8011460:	6063      	str	r3, [r4, #4]
 8011462:	6923      	ldr	r3, [r4, #16]
 8011464:	6023      	str	r3, [r4, #0]
 8011466:	89a3      	ldrh	r3, [r4, #12]
 8011468:	f043 0308 	orr.w	r3, r3, #8
 801146c:	81a3      	strh	r3, [r4, #12]
 801146e:	6923      	ldr	r3, [r4, #16]
 8011470:	b94b      	cbnz	r3, 8011486 <__swsetup_r+0x7a>
 8011472:	89a3      	ldrh	r3, [r4, #12]
 8011474:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8011478:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801147c:	d003      	beq.n	8011486 <__swsetup_r+0x7a>
 801147e:	4621      	mov	r1, r4
 8011480:	4628      	mov	r0, r5
 8011482:	f000 f856 	bl	8011532 <__smakebuf_r>
 8011486:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801148a:	f013 0201 	ands.w	r2, r3, #1
 801148e:	d00a      	beq.n	80114a6 <__swsetup_r+0x9a>
 8011490:	2200      	movs	r2, #0
 8011492:	60a2      	str	r2, [r4, #8]
 8011494:	6962      	ldr	r2, [r4, #20]
 8011496:	4252      	negs	r2, r2
 8011498:	61a2      	str	r2, [r4, #24]
 801149a:	6922      	ldr	r2, [r4, #16]
 801149c:	b942      	cbnz	r2, 80114b0 <__swsetup_r+0xa4>
 801149e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80114a2:	d1c5      	bne.n	8011430 <__swsetup_r+0x24>
 80114a4:	bd38      	pop	{r3, r4, r5, pc}
 80114a6:	0799      	lsls	r1, r3, #30
 80114a8:	bf58      	it	pl
 80114aa:	6962      	ldrpl	r2, [r4, #20]
 80114ac:	60a2      	str	r2, [r4, #8]
 80114ae:	e7f4      	b.n	801149a <__swsetup_r+0x8e>
 80114b0:	2000      	movs	r0, #0
 80114b2:	e7f7      	b.n	80114a4 <__swsetup_r+0x98>
 80114b4:	20000084 	.word	0x20000084

080114b8 <_sbrk_r>:
 80114b8:	b538      	push	{r3, r4, r5, lr}
 80114ba:	4d06      	ldr	r5, [pc, #24]	@ (80114d4 <_sbrk_r+0x1c>)
 80114bc:	2300      	movs	r3, #0
 80114be:	4604      	mov	r4, r0
 80114c0:	4608      	mov	r0, r1
 80114c2:	602b      	str	r3, [r5, #0]
 80114c4:	f7f6 f9d0 	bl	8007868 <_sbrk>
 80114c8:	1c43      	adds	r3, r0, #1
 80114ca:	d102      	bne.n	80114d2 <_sbrk_r+0x1a>
 80114cc:	682b      	ldr	r3, [r5, #0]
 80114ce:	b103      	cbz	r3, 80114d2 <_sbrk_r+0x1a>
 80114d0:	6023      	str	r3, [r4, #0]
 80114d2:	bd38      	pop	{r3, r4, r5, pc}
 80114d4:	200025e4 	.word	0x200025e4

080114d8 <abort>:
 80114d8:	b508      	push	{r3, lr}
 80114da:	2006      	movs	r0, #6
 80114dc:	f000 f88e 	bl	80115fc <raise>
 80114e0:	2001      	movs	r0, #1
 80114e2:	f7f6 f948 	bl	8007776 <_exit>

080114e6 <__swhatbuf_r>:
 80114e6:	b570      	push	{r4, r5, r6, lr}
 80114e8:	460c      	mov	r4, r1
 80114ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80114ee:	2900      	cmp	r1, #0
 80114f0:	b096      	sub	sp, #88	@ 0x58
 80114f2:	4615      	mov	r5, r2
 80114f4:	461e      	mov	r6, r3
 80114f6:	da0d      	bge.n	8011514 <__swhatbuf_r+0x2e>
 80114f8:	89a3      	ldrh	r3, [r4, #12]
 80114fa:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80114fe:	f04f 0100 	mov.w	r1, #0
 8011502:	bf14      	ite	ne
 8011504:	2340      	movne	r3, #64	@ 0x40
 8011506:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801150a:	2000      	movs	r0, #0
 801150c:	6031      	str	r1, [r6, #0]
 801150e:	602b      	str	r3, [r5, #0]
 8011510:	b016      	add	sp, #88	@ 0x58
 8011512:	bd70      	pop	{r4, r5, r6, pc}
 8011514:	466a      	mov	r2, sp
 8011516:	f000 f879 	bl	801160c <_fstat_r>
 801151a:	2800      	cmp	r0, #0
 801151c:	dbec      	blt.n	80114f8 <__swhatbuf_r+0x12>
 801151e:	9901      	ldr	r1, [sp, #4]
 8011520:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8011524:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8011528:	4259      	negs	r1, r3
 801152a:	4159      	adcs	r1, r3
 801152c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8011530:	e7eb      	b.n	801150a <__swhatbuf_r+0x24>

08011532 <__smakebuf_r>:
 8011532:	898b      	ldrh	r3, [r1, #12]
 8011534:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011536:	079d      	lsls	r5, r3, #30
 8011538:	4606      	mov	r6, r0
 801153a:	460c      	mov	r4, r1
 801153c:	d507      	bpl.n	801154e <__smakebuf_r+0x1c>
 801153e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8011542:	6023      	str	r3, [r4, #0]
 8011544:	6123      	str	r3, [r4, #16]
 8011546:	2301      	movs	r3, #1
 8011548:	6163      	str	r3, [r4, #20]
 801154a:	b003      	add	sp, #12
 801154c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801154e:	ab01      	add	r3, sp, #4
 8011550:	466a      	mov	r2, sp
 8011552:	f7ff ffc8 	bl	80114e6 <__swhatbuf_r>
 8011556:	9f00      	ldr	r7, [sp, #0]
 8011558:	4605      	mov	r5, r0
 801155a:	4639      	mov	r1, r7
 801155c:	4630      	mov	r0, r6
 801155e:	f7ff fafd 	bl	8010b5c <_malloc_r>
 8011562:	b948      	cbnz	r0, 8011578 <__smakebuf_r+0x46>
 8011564:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011568:	059a      	lsls	r2, r3, #22
 801156a:	d4ee      	bmi.n	801154a <__smakebuf_r+0x18>
 801156c:	f023 0303 	bic.w	r3, r3, #3
 8011570:	f043 0302 	orr.w	r3, r3, #2
 8011574:	81a3      	strh	r3, [r4, #12]
 8011576:	e7e2      	b.n	801153e <__smakebuf_r+0xc>
 8011578:	89a3      	ldrh	r3, [r4, #12]
 801157a:	6020      	str	r0, [r4, #0]
 801157c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011580:	81a3      	strh	r3, [r4, #12]
 8011582:	9b01      	ldr	r3, [sp, #4]
 8011584:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8011588:	b15b      	cbz	r3, 80115a2 <__smakebuf_r+0x70>
 801158a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801158e:	4630      	mov	r0, r6
 8011590:	f000 f84e 	bl	8011630 <_isatty_r>
 8011594:	b128      	cbz	r0, 80115a2 <__smakebuf_r+0x70>
 8011596:	89a3      	ldrh	r3, [r4, #12]
 8011598:	f023 0303 	bic.w	r3, r3, #3
 801159c:	f043 0301 	orr.w	r3, r3, #1
 80115a0:	81a3      	strh	r3, [r4, #12]
 80115a2:	89a3      	ldrh	r3, [r4, #12]
 80115a4:	431d      	orrs	r5, r3
 80115a6:	81a5      	strh	r5, [r4, #12]
 80115a8:	e7cf      	b.n	801154a <__smakebuf_r+0x18>

080115aa <_raise_r>:
 80115aa:	291f      	cmp	r1, #31
 80115ac:	b538      	push	{r3, r4, r5, lr}
 80115ae:	4605      	mov	r5, r0
 80115b0:	460c      	mov	r4, r1
 80115b2:	d904      	bls.n	80115be <_raise_r+0x14>
 80115b4:	2316      	movs	r3, #22
 80115b6:	6003      	str	r3, [r0, #0]
 80115b8:	f04f 30ff 	mov.w	r0, #4294967295
 80115bc:	bd38      	pop	{r3, r4, r5, pc}
 80115be:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80115c0:	b112      	cbz	r2, 80115c8 <_raise_r+0x1e>
 80115c2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80115c6:	b94b      	cbnz	r3, 80115dc <_raise_r+0x32>
 80115c8:	4628      	mov	r0, r5
 80115ca:	f000 f853 	bl	8011674 <_getpid_r>
 80115ce:	4622      	mov	r2, r4
 80115d0:	4601      	mov	r1, r0
 80115d2:	4628      	mov	r0, r5
 80115d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80115d8:	f000 b83a 	b.w	8011650 <_kill_r>
 80115dc:	2b01      	cmp	r3, #1
 80115de:	d00a      	beq.n	80115f6 <_raise_r+0x4c>
 80115e0:	1c59      	adds	r1, r3, #1
 80115e2:	d103      	bne.n	80115ec <_raise_r+0x42>
 80115e4:	2316      	movs	r3, #22
 80115e6:	6003      	str	r3, [r0, #0]
 80115e8:	2001      	movs	r0, #1
 80115ea:	e7e7      	b.n	80115bc <_raise_r+0x12>
 80115ec:	2100      	movs	r1, #0
 80115ee:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80115f2:	4620      	mov	r0, r4
 80115f4:	4798      	blx	r3
 80115f6:	2000      	movs	r0, #0
 80115f8:	e7e0      	b.n	80115bc <_raise_r+0x12>
	...

080115fc <raise>:
 80115fc:	4b02      	ldr	r3, [pc, #8]	@ (8011608 <raise+0xc>)
 80115fe:	4601      	mov	r1, r0
 8011600:	6818      	ldr	r0, [r3, #0]
 8011602:	f7ff bfd2 	b.w	80115aa <_raise_r>
 8011606:	bf00      	nop
 8011608:	20000084 	.word	0x20000084

0801160c <_fstat_r>:
 801160c:	b538      	push	{r3, r4, r5, lr}
 801160e:	4d07      	ldr	r5, [pc, #28]	@ (801162c <_fstat_r+0x20>)
 8011610:	2300      	movs	r3, #0
 8011612:	4604      	mov	r4, r0
 8011614:	4608      	mov	r0, r1
 8011616:	4611      	mov	r1, r2
 8011618:	602b      	str	r3, [r5, #0]
 801161a:	f7f6 f8fc 	bl	8007816 <_fstat>
 801161e:	1c43      	adds	r3, r0, #1
 8011620:	d102      	bne.n	8011628 <_fstat_r+0x1c>
 8011622:	682b      	ldr	r3, [r5, #0]
 8011624:	b103      	cbz	r3, 8011628 <_fstat_r+0x1c>
 8011626:	6023      	str	r3, [r4, #0]
 8011628:	bd38      	pop	{r3, r4, r5, pc}
 801162a:	bf00      	nop
 801162c:	200025e4 	.word	0x200025e4

08011630 <_isatty_r>:
 8011630:	b538      	push	{r3, r4, r5, lr}
 8011632:	4d06      	ldr	r5, [pc, #24]	@ (801164c <_isatty_r+0x1c>)
 8011634:	2300      	movs	r3, #0
 8011636:	4604      	mov	r4, r0
 8011638:	4608      	mov	r0, r1
 801163a:	602b      	str	r3, [r5, #0]
 801163c:	f7f6 f8fb 	bl	8007836 <_isatty>
 8011640:	1c43      	adds	r3, r0, #1
 8011642:	d102      	bne.n	801164a <_isatty_r+0x1a>
 8011644:	682b      	ldr	r3, [r5, #0]
 8011646:	b103      	cbz	r3, 801164a <_isatty_r+0x1a>
 8011648:	6023      	str	r3, [r4, #0]
 801164a:	bd38      	pop	{r3, r4, r5, pc}
 801164c:	200025e4 	.word	0x200025e4

08011650 <_kill_r>:
 8011650:	b538      	push	{r3, r4, r5, lr}
 8011652:	4d07      	ldr	r5, [pc, #28]	@ (8011670 <_kill_r+0x20>)
 8011654:	2300      	movs	r3, #0
 8011656:	4604      	mov	r4, r0
 8011658:	4608      	mov	r0, r1
 801165a:	4611      	mov	r1, r2
 801165c:	602b      	str	r3, [r5, #0]
 801165e:	f7f6 f87a 	bl	8007756 <_kill>
 8011662:	1c43      	adds	r3, r0, #1
 8011664:	d102      	bne.n	801166c <_kill_r+0x1c>
 8011666:	682b      	ldr	r3, [r5, #0]
 8011668:	b103      	cbz	r3, 801166c <_kill_r+0x1c>
 801166a:	6023      	str	r3, [r4, #0]
 801166c:	bd38      	pop	{r3, r4, r5, pc}
 801166e:	bf00      	nop
 8011670:	200025e4 	.word	0x200025e4

08011674 <_getpid_r>:
 8011674:	f7f6 b867 	b.w	8007746 <_getpid>

08011678 <sqrt>:
 8011678:	b538      	push	{r3, r4, r5, lr}
 801167a:	ed2d 8b02 	vpush	{d8}
 801167e:	ec55 4b10 	vmov	r4, r5, d0
 8011682:	f000 f8a7 	bl	80117d4 <__ieee754_sqrt>
 8011686:	4622      	mov	r2, r4
 8011688:	462b      	mov	r3, r5
 801168a:	4620      	mov	r0, r4
 801168c:	4629      	mov	r1, r5
 801168e:	eeb0 8a40 	vmov.f32	s16, s0
 8011692:	eef0 8a60 	vmov.f32	s17, s1
 8011696:	f7ef fa21 	bl	8000adc <__aeabi_dcmpun>
 801169a:	b990      	cbnz	r0, 80116c2 <sqrt+0x4a>
 801169c:	2200      	movs	r2, #0
 801169e:	2300      	movs	r3, #0
 80116a0:	4620      	mov	r0, r4
 80116a2:	4629      	mov	r1, r5
 80116a4:	f7ef f9f2 	bl	8000a8c <__aeabi_dcmplt>
 80116a8:	b158      	cbz	r0, 80116c2 <sqrt+0x4a>
 80116aa:	f7ff f989 	bl	80109c0 <__errno>
 80116ae:	2321      	movs	r3, #33	@ 0x21
 80116b0:	6003      	str	r3, [r0, #0]
 80116b2:	2200      	movs	r2, #0
 80116b4:	2300      	movs	r3, #0
 80116b6:	4610      	mov	r0, r2
 80116b8:	4619      	mov	r1, r3
 80116ba:	f7ef f89f 	bl	80007fc <__aeabi_ddiv>
 80116be:	ec41 0b18 	vmov	d8, r0, r1
 80116c2:	eeb0 0a48 	vmov.f32	s0, s16
 80116c6:	eef0 0a68 	vmov.f32	s1, s17
 80116ca:	ecbd 8b02 	vpop	{d8}
 80116ce:	bd38      	pop	{r3, r4, r5, pc}

080116d0 <atan2f>:
 80116d0:	f000 b9a2 	b.w	8011a18 <__ieee754_atan2f>

080116d4 <powf>:
 80116d4:	b508      	push	{r3, lr}
 80116d6:	ed2d 8b04 	vpush	{d8-d9}
 80116da:	eeb0 8a60 	vmov.f32	s16, s1
 80116de:	eeb0 9a40 	vmov.f32	s18, s0
 80116e2:	f000 fa39 	bl	8011b58 <__ieee754_powf>
 80116e6:	eeb4 8a48 	vcmp.f32	s16, s16
 80116ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80116ee:	eef0 8a40 	vmov.f32	s17, s0
 80116f2:	d63e      	bvs.n	8011772 <powf+0x9e>
 80116f4:	eeb5 9a40 	vcmp.f32	s18, #0.0
 80116f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80116fc:	d112      	bne.n	8011724 <powf+0x50>
 80116fe:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8011702:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011706:	d039      	beq.n	801177c <powf+0xa8>
 8011708:	eeb0 0a48 	vmov.f32	s0, s16
 801170c:	f000 f858 	bl	80117c0 <finitef>
 8011710:	b378      	cbz	r0, 8011772 <powf+0x9e>
 8011712:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8011716:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801171a:	d52a      	bpl.n	8011772 <powf+0x9e>
 801171c:	f7ff f950 	bl	80109c0 <__errno>
 8011720:	2322      	movs	r3, #34	@ 0x22
 8011722:	e014      	b.n	801174e <powf+0x7a>
 8011724:	f000 f84c 	bl	80117c0 <finitef>
 8011728:	b998      	cbnz	r0, 8011752 <powf+0x7e>
 801172a:	eeb0 0a49 	vmov.f32	s0, s18
 801172e:	f000 f847 	bl	80117c0 <finitef>
 8011732:	b170      	cbz	r0, 8011752 <powf+0x7e>
 8011734:	eeb0 0a48 	vmov.f32	s0, s16
 8011738:	f000 f842 	bl	80117c0 <finitef>
 801173c:	b148      	cbz	r0, 8011752 <powf+0x7e>
 801173e:	eef4 8a68 	vcmp.f32	s17, s17
 8011742:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011746:	d7e9      	bvc.n	801171c <powf+0x48>
 8011748:	f7ff f93a 	bl	80109c0 <__errno>
 801174c:	2321      	movs	r3, #33	@ 0x21
 801174e:	6003      	str	r3, [r0, #0]
 8011750:	e00f      	b.n	8011772 <powf+0x9e>
 8011752:	eef5 8a40 	vcmp.f32	s17, #0.0
 8011756:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801175a:	d10a      	bne.n	8011772 <powf+0x9e>
 801175c:	eeb0 0a49 	vmov.f32	s0, s18
 8011760:	f000 f82e 	bl	80117c0 <finitef>
 8011764:	b128      	cbz	r0, 8011772 <powf+0x9e>
 8011766:	eeb0 0a48 	vmov.f32	s0, s16
 801176a:	f000 f829 	bl	80117c0 <finitef>
 801176e:	2800      	cmp	r0, #0
 8011770:	d1d4      	bne.n	801171c <powf+0x48>
 8011772:	eeb0 0a68 	vmov.f32	s0, s17
 8011776:	ecbd 8b04 	vpop	{d8-d9}
 801177a:	bd08      	pop	{r3, pc}
 801177c:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 8011780:	e7f7      	b.n	8011772 <powf+0x9e>
	...

08011784 <sqrtf>:
 8011784:	b508      	push	{r3, lr}
 8011786:	ed2d 8b02 	vpush	{d8}
 801178a:	eeb0 8a40 	vmov.f32	s16, s0
 801178e:	f000 f8fb 	bl	8011988 <__ieee754_sqrtf>
 8011792:	eeb4 8a48 	vcmp.f32	s16, s16
 8011796:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801179a:	d60c      	bvs.n	80117b6 <sqrtf+0x32>
 801179c:	eddf 8a07 	vldr	s17, [pc, #28]	@ 80117bc <sqrtf+0x38>
 80117a0:	eeb4 8ae8 	vcmpe.f32	s16, s17
 80117a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80117a8:	d505      	bpl.n	80117b6 <sqrtf+0x32>
 80117aa:	f7ff f909 	bl	80109c0 <__errno>
 80117ae:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 80117b2:	2321      	movs	r3, #33	@ 0x21
 80117b4:	6003      	str	r3, [r0, #0]
 80117b6:	ecbd 8b02 	vpop	{d8}
 80117ba:	bd08      	pop	{r3, pc}
 80117bc:	00000000 	.word	0x00000000

080117c0 <finitef>:
 80117c0:	ee10 3a10 	vmov	r3, s0
 80117c4:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 80117c8:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 80117cc:	bfac      	ite	ge
 80117ce:	2000      	movge	r0, #0
 80117d0:	2001      	movlt	r0, #1
 80117d2:	4770      	bx	lr

080117d4 <__ieee754_sqrt>:
 80117d4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80117d8:	4a68      	ldr	r2, [pc, #416]	@ (801197c <__ieee754_sqrt+0x1a8>)
 80117da:	ec55 4b10 	vmov	r4, r5, d0
 80117de:	43aa      	bics	r2, r5
 80117e0:	462b      	mov	r3, r5
 80117e2:	4621      	mov	r1, r4
 80117e4:	d110      	bne.n	8011808 <__ieee754_sqrt+0x34>
 80117e6:	4622      	mov	r2, r4
 80117e8:	4620      	mov	r0, r4
 80117ea:	4629      	mov	r1, r5
 80117ec:	f7ee fedc 	bl	80005a8 <__aeabi_dmul>
 80117f0:	4602      	mov	r2, r0
 80117f2:	460b      	mov	r3, r1
 80117f4:	4620      	mov	r0, r4
 80117f6:	4629      	mov	r1, r5
 80117f8:	f7ee fd20 	bl	800023c <__adddf3>
 80117fc:	4604      	mov	r4, r0
 80117fe:	460d      	mov	r5, r1
 8011800:	ec45 4b10 	vmov	d0, r4, r5
 8011804:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011808:	2d00      	cmp	r5, #0
 801180a:	dc0e      	bgt.n	801182a <__ieee754_sqrt+0x56>
 801180c:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8011810:	4322      	orrs	r2, r4
 8011812:	d0f5      	beq.n	8011800 <__ieee754_sqrt+0x2c>
 8011814:	b19d      	cbz	r5, 801183e <__ieee754_sqrt+0x6a>
 8011816:	4622      	mov	r2, r4
 8011818:	4620      	mov	r0, r4
 801181a:	4629      	mov	r1, r5
 801181c:	f7ee fd0c 	bl	8000238 <__aeabi_dsub>
 8011820:	4602      	mov	r2, r0
 8011822:	460b      	mov	r3, r1
 8011824:	f7ee ffea 	bl	80007fc <__aeabi_ddiv>
 8011828:	e7e8      	b.n	80117fc <__ieee754_sqrt+0x28>
 801182a:	152a      	asrs	r2, r5, #20
 801182c:	d115      	bne.n	801185a <__ieee754_sqrt+0x86>
 801182e:	2000      	movs	r0, #0
 8011830:	e009      	b.n	8011846 <__ieee754_sqrt+0x72>
 8011832:	0acb      	lsrs	r3, r1, #11
 8011834:	3a15      	subs	r2, #21
 8011836:	0549      	lsls	r1, r1, #21
 8011838:	2b00      	cmp	r3, #0
 801183a:	d0fa      	beq.n	8011832 <__ieee754_sqrt+0x5e>
 801183c:	e7f7      	b.n	801182e <__ieee754_sqrt+0x5a>
 801183e:	462a      	mov	r2, r5
 8011840:	e7fa      	b.n	8011838 <__ieee754_sqrt+0x64>
 8011842:	005b      	lsls	r3, r3, #1
 8011844:	3001      	adds	r0, #1
 8011846:	02dc      	lsls	r4, r3, #11
 8011848:	d5fb      	bpl.n	8011842 <__ieee754_sqrt+0x6e>
 801184a:	1e44      	subs	r4, r0, #1
 801184c:	1b12      	subs	r2, r2, r4
 801184e:	f1c0 0420 	rsb	r4, r0, #32
 8011852:	fa21 f404 	lsr.w	r4, r1, r4
 8011856:	4323      	orrs	r3, r4
 8011858:	4081      	lsls	r1, r0
 801185a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801185e:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 8011862:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8011866:	07d2      	lsls	r2, r2, #31
 8011868:	bf5c      	itt	pl
 801186a:	005b      	lslpl	r3, r3, #1
 801186c:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8011870:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8011874:	bf58      	it	pl
 8011876:	0049      	lslpl	r1, r1, #1
 8011878:	2600      	movs	r6, #0
 801187a:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 801187e:	106d      	asrs	r5, r5, #1
 8011880:	0049      	lsls	r1, r1, #1
 8011882:	2016      	movs	r0, #22
 8011884:	4632      	mov	r2, r6
 8011886:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 801188a:	1917      	adds	r7, r2, r4
 801188c:	429f      	cmp	r7, r3
 801188e:	bfde      	ittt	le
 8011890:	193a      	addle	r2, r7, r4
 8011892:	1bdb      	suble	r3, r3, r7
 8011894:	1936      	addle	r6, r6, r4
 8011896:	0fcf      	lsrs	r7, r1, #31
 8011898:	3801      	subs	r0, #1
 801189a:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 801189e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80118a2:	ea4f 0454 	mov.w	r4, r4, lsr #1
 80118a6:	d1f0      	bne.n	801188a <__ieee754_sqrt+0xb6>
 80118a8:	4604      	mov	r4, r0
 80118aa:	2720      	movs	r7, #32
 80118ac:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80118b0:	429a      	cmp	r2, r3
 80118b2:	eb00 0e0c 	add.w	lr, r0, ip
 80118b6:	db02      	blt.n	80118be <__ieee754_sqrt+0xea>
 80118b8:	d113      	bne.n	80118e2 <__ieee754_sqrt+0x10e>
 80118ba:	458e      	cmp	lr, r1
 80118bc:	d811      	bhi.n	80118e2 <__ieee754_sqrt+0x10e>
 80118be:	f1be 0f00 	cmp.w	lr, #0
 80118c2:	eb0e 000c 	add.w	r0, lr, ip
 80118c6:	da42      	bge.n	801194e <__ieee754_sqrt+0x17a>
 80118c8:	2800      	cmp	r0, #0
 80118ca:	db40      	blt.n	801194e <__ieee754_sqrt+0x17a>
 80118cc:	f102 0801 	add.w	r8, r2, #1
 80118d0:	1a9b      	subs	r3, r3, r2
 80118d2:	458e      	cmp	lr, r1
 80118d4:	bf88      	it	hi
 80118d6:	f103 33ff 	addhi.w	r3, r3, #4294967295
 80118da:	eba1 010e 	sub.w	r1, r1, lr
 80118de:	4464      	add	r4, ip
 80118e0:	4642      	mov	r2, r8
 80118e2:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 80118e6:	3f01      	subs	r7, #1
 80118e8:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 80118ec:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80118f0:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 80118f4:	d1dc      	bne.n	80118b0 <__ieee754_sqrt+0xdc>
 80118f6:	4319      	orrs	r1, r3
 80118f8:	d01b      	beq.n	8011932 <__ieee754_sqrt+0x15e>
 80118fa:	f8df a084 	ldr.w	sl, [pc, #132]	@ 8011980 <__ieee754_sqrt+0x1ac>
 80118fe:	f8df b084 	ldr.w	fp, [pc, #132]	@ 8011984 <__ieee754_sqrt+0x1b0>
 8011902:	e9da 0100 	ldrd	r0, r1, [sl]
 8011906:	e9db 2300 	ldrd	r2, r3, [fp]
 801190a:	f7ee fc95 	bl	8000238 <__aeabi_dsub>
 801190e:	e9da 8900 	ldrd	r8, r9, [sl]
 8011912:	4602      	mov	r2, r0
 8011914:	460b      	mov	r3, r1
 8011916:	4640      	mov	r0, r8
 8011918:	4649      	mov	r1, r9
 801191a:	f7ef f8c1 	bl	8000aa0 <__aeabi_dcmple>
 801191e:	b140      	cbz	r0, 8011932 <__ieee754_sqrt+0x15e>
 8011920:	f1b4 3fff 	cmp.w	r4, #4294967295
 8011924:	e9da 0100 	ldrd	r0, r1, [sl]
 8011928:	e9db 2300 	ldrd	r2, r3, [fp]
 801192c:	d111      	bne.n	8011952 <__ieee754_sqrt+0x17e>
 801192e:	3601      	adds	r6, #1
 8011930:	463c      	mov	r4, r7
 8011932:	1072      	asrs	r2, r6, #1
 8011934:	0863      	lsrs	r3, r4, #1
 8011936:	07f1      	lsls	r1, r6, #31
 8011938:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 801193c:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8011940:	bf48      	it	mi
 8011942:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8011946:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 801194a:	4618      	mov	r0, r3
 801194c:	e756      	b.n	80117fc <__ieee754_sqrt+0x28>
 801194e:	4690      	mov	r8, r2
 8011950:	e7be      	b.n	80118d0 <__ieee754_sqrt+0xfc>
 8011952:	f7ee fc73 	bl	800023c <__adddf3>
 8011956:	e9da 8900 	ldrd	r8, r9, [sl]
 801195a:	4602      	mov	r2, r0
 801195c:	460b      	mov	r3, r1
 801195e:	4640      	mov	r0, r8
 8011960:	4649      	mov	r1, r9
 8011962:	f7ef f893 	bl	8000a8c <__aeabi_dcmplt>
 8011966:	b120      	cbz	r0, 8011972 <__ieee754_sqrt+0x19e>
 8011968:	1ca0      	adds	r0, r4, #2
 801196a:	bf08      	it	eq
 801196c:	3601      	addeq	r6, #1
 801196e:	3402      	adds	r4, #2
 8011970:	e7df      	b.n	8011932 <__ieee754_sqrt+0x15e>
 8011972:	1c63      	adds	r3, r4, #1
 8011974:	f023 0401 	bic.w	r4, r3, #1
 8011978:	e7db      	b.n	8011932 <__ieee754_sqrt+0x15e>
 801197a:	bf00      	nop
 801197c:	7ff00000 	.word	0x7ff00000
 8011980:	200000e0 	.word	0x200000e0
 8011984:	200000d8 	.word	0x200000d8

08011988 <__ieee754_sqrtf>:
 8011988:	eeb1 0ac0 	vsqrt.f32	s0, s0
 801198c:	4770      	bx	lr
	...

08011990 <floorf>:
 8011990:	ee10 3a10 	vmov	r3, s0
 8011994:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8011998:	3a7f      	subs	r2, #127	@ 0x7f
 801199a:	2a16      	cmp	r2, #22
 801199c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80119a0:	dc2b      	bgt.n	80119fa <floorf+0x6a>
 80119a2:	2a00      	cmp	r2, #0
 80119a4:	da12      	bge.n	80119cc <floorf+0x3c>
 80119a6:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8011a0c <floorf+0x7c>
 80119aa:	ee30 0a27 	vadd.f32	s0, s0, s15
 80119ae:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80119b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80119b6:	dd06      	ble.n	80119c6 <floorf+0x36>
 80119b8:	2b00      	cmp	r3, #0
 80119ba:	da24      	bge.n	8011a06 <floorf+0x76>
 80119bc:	2900      	cmp	r1, #0
 80119be:	4b14      	ldr	r3, [pc, #80]	@ (8011a10 <floorf+0x80>)
 80119c0:	bf08      	it	eq
 80119c2:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 80119c6:	ee00 3a10 	vmov	s0, r3
 80119ca:	4770      	bx	lr
 80119cc:	4911      	ldr	r1, [pc, #68]	@ (8011a14 <floorf+0x84>)
 80119ce:	4111      	asrs	r1, r2
 80119d0:	420b      	tst	r3, r1
 80119d2:	d0fa      	beq.n	80119ca <floorf+0x3a>
 80119d4:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 8011a0c <floorf+0x7c>
 80119d8:	ee30 0a27 	vadd.f32	s0, s0, s15
 80119dc:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80119e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80119e4:	ddef      	ble.n	80119c6 <floorf+0x36>
 80119e6:	2b00      	cmp	r3, #0
 80119e8:	bfbe      	ittt	lt
 80119ea:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 80119ee:	fa40 f202 	asrlt.w	r2, r0, r2
 80119f2:	189b      	addlt	r3, r3, r2
 80119f4:	ea23 0301 	bic.w	r3, r3, r1
 80119f8:	e7e5      	b.n	80119c6 <floorf+0x36>
 80119fa:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 80119fe:	d3e4      	bcc.n	80119ca <floorf+0x3a>
 8011a00:	ee30 0a00 	vadd.f32	s0, s0, s0
 8011a04:	4770      	bx	lr
 8011a06:	2300      	movs	r3, #0
 8011a08:	e7dd      	b.n	80119c6 <floorf+0x36>
 8011a0a:	bf00      	nop
 8011a0c:	7149f2ca 	.word	0x7149f2ca
 8011a10:	bf800000 	.word	0xbf800000
 8011a14:	007fffff 	.word	0x007fffff

08011a18 <__ieee754_atan2f>:
 8011a18:	ee10 2a90 	vmov	r2, s1
 8011a1c:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 8011a20:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8011a24:	b510      	push	{r4, lr}
 8011a26:	eef0 7a40 	vmov.f32	s15, s0
 8011a2a:	d806      	bhi.n	8011a3a <__ieee754_atan2f+0x22>
 8011a2c:	ee10 0a10 	vmov	r0, s0
 8011a30:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 8011a34:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8011a38:	d904      	bls.n	8011a44 <__ieee754_atan2f+0x2c>
 8011a3a:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8011a3e:	eeb0 0a67 	vmov.f32	s0, s15
 8011a42:	bd10      	pop	{r4, pc}
 8011a44:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 8011a48:	d103      	bne.n	8011a52 <__ieee754_atan2f+0x3a>
 8011a4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011a4e:	f000 bb53 	b.w	80120f8 <atanf>
 8011a52:	1794      	asrs	r4, r2, #30
 8011a54:	f004 0402 	and.w	r4, r4, #2
 8011a58:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8011a5c:	b943      	cbnz	r3, 8011a70 <__ieee754_atan2f+0x58>
 8011a5e:	2c02      	cmp	r4, #2
 8011a60:	d05e      	beq.n	8011b20 <__ieee754_atan2f+0x108>
 8011a62:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8011b34 <__ieee754_atan2f+0x11c>
 8011a66:	2c03      	cmp	r4, #3
 8011a68:	bf08      	it	eq
 8011a6a:	eef0 7a47 	vmoveq.f32	s15, s14
 8011a6e:	e7e6      	b.n	8011a3e <__ieee754_atan2f+0x26>
 8011a70:	b941      	cbnz	r1, 8011a84 <__ieee754_atan2f+0x6c>
 8011a72:	eddf 7a31 	vldr	s15, [pc, #196]	@ 8011b38 <__ieee754_atan2f+0x120>
 8011a76:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8011b3c <__ieee754_atan2f+0x124>
 8011a7a:	2800      	cmp	r0, #0
 8011a7c:	bfb8      	it	lt
 8011a7e:	eef0 7a47 	vmovlt.f32	s15, s14
 8011a82:	e7dc      	b.n	8011a3e <__ieee754_atan2f+0x26>
 8011a84:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8011a88:	d110      	bne.n	8011aac <__ieee754_atan2f+0x94>
 8011a8a:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8011a8e:	f104 34ff 	add.w	r4, r4, #4294967295
 8011a92:	d107      	bne.n	8011aa4 <__ieee754_atan2f+0x8c>
 8011a94:	2c02      	cmp	r4, #2
 8011a96:	d846      	bhi.n	8011b26 <__ieee754_atan2f+0x10e>
 8011a98:	4b29      	ldr	r3, [pc, #164]	@ (8011b40 <__ieee754_atan2f+0x128>)
 8011a9a:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8011a9e:	edd3 7a00 	vldr	s15, [r3]
 8011aa2:	e7cc      	b.n	8011a3e <__ieee754_atan2f+0x26>
 8011aa4:	2c02      	cmp	r4, #2
 8011aa6:	d841      	bhi.n	8011b2c <__ieee754_atan2f+0x114>
 8011aa8:	4b26      	ldr	r3, [pc, #152]	@ (8011b44 <__ieee754_atan2f+0x12c>)
 8011aaa:	e7f6      	b.n	8011a9a <__ieee754_atan2f+0x82>
 8011aac:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8011ab0:	d0df      	beq.n	8011a72 <__ieee754_atan2f+0x5a>
 8011ab2:	1a5b      	subs	r3, r3, r1
 8011ab4:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 8011ab8:	ea4f 51e3 	mov.w	r1, r3, asr #23
 8011abc:	da1a      	bge.n	8011af4 <__ieee754_atan2f+0xdc>
 8011abe:	2a00      	cmp	r2, #0
 8011ac0:	da01      	bge.n	8011ac6 <__ieee754_atan2f+0xae>
 8011ac2:	313c      	adds	r1, #60	@ 0x3c
 8011ac4:	db19      	blt.n	8011afa <__ieee754_atan2f+0xe2>
 8011ac6:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 8011aca:	f000 fbe9 	bl	80122a0 <fabsf>
 8011ace:	f000 fb13 	bl	80120f8 <atanf>
 8011ad2:	eef0 7a40 	vmov.f32	s15, s0
 8011ad6:	2c01      	cmp	r4, #1
 8011ad8:	d012      	beq.n	8011b00 <__ieee754_atan2f+0xe8>
 8011ada:	2c02      	cmp	r4, #2
 8011adc:	d017      	beq.n	8011b0e <__ieee754_atan2f+0xf6>
 8011ade:	2c00      	cmp	r4, #0
 8011ae0:	d0ad      	beq.n	8011a3e <__ieee754_atan2f+0x26>
 8011ae2:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8011b48 <__ieee754_atan2f+0x130>
 8011ae6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011aea:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8011b4c <__ieee754_atan2f+0x134>
 8011aee:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011af2:	e7a4      	b.n	8011a3e <__ieee754_atan2f+0x26>
 8011af4:	eddf 7a10 	vldr	s15, [pc, #64]	@ 8011b38 <__ieee754_atan2f+0x120>
 8011af8:	e7ed      	b.n	8011ad6 <__ieee754_atan2f+0xbe>
 8011afa:	eddf 7a15 	vldr	s15, [pc, #84]	@ 8011b50 <__ieee754_atan2f+0x138>
 8011afe:	e7ea      	b.n	8011ad6 <__ieee754_atan2f+0xbe>
 8011b00:	ee17 3a90 	vmov	r3, s15
 8011b04:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8011b08:	ee07 3a90 	vmov	s15, r3
 8011b0c:	e797      	b.n	8011a3e <__ieee754_atan2f+0x26>
 8011b0e:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8011b48 <__ieee754_atan2f+0x130>
 8011b12:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011b16:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8011b4c <__ieee754_atan2f+0x134>
 8011b1a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011b1e:	e78e      	b.n	8011a3e <__ieee754_atan2f+0x26>
 8011b20:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 8011b4c <__ieee754_atan2f+0x134>
 8011b24:	e78b      	b.n	8011a3e <__ieee754_atan2f+0x26>
 8011b26:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 8011b54 <__ieee754_atan2f+0x13c>
 8011b2a:	e788      	b.n	8011a3e <__ieee754_atan2f+0x26>
 8011b2c:	eddf 7a08 	vldr	s15, [pc, #32]	@ 8011b50 <__ieee754_atan2f+0x138>
 8011b30:	e785      	b.n	8011a3e <__ieee754_atan2f+0x26>
 8011b32:	bf00      	nop
 8011b34:	c0490fdb 	.word	0xc0490fdb
 8011b38:	3fc90fdb 	.word	0x3fc90fdb
 8011b3c:	bfc90fdb 	.word	0xbfc90fdb
 8011b40:	08012744 	.word	0x08012744
 8011b44:	08012738 	.word	0x08012738
 8011b48:	33bbbd2e 	.word	0x33bbbd2e
 8011b4c:	40490fdb 	.word	0x40490fdb
 8011b50:	00000000 	.word	0x00000000
 8011b54:	3f490fdb 	.word	0x3f490fdb

08011b58 <__ieee754_powf>:
 8011b58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011b5c:	ee10 4a90 	vmov	r4, s1
 8011b60:	f034 4900 	bics.w	r9, r4, #2147483648	@ 0x80000000
 8011b64:	ed2d 8b02 	vpush	{d8}
 8011b68:	ee10 6a10 	vmov	r6, s0
 8011b6c:	eeb0 8a40 	vmov.f32	s16, s0
 8011b70:	eef0 8a60 	vmov.f32	s17, s1
 8011b74:	d10c      	bne.n	8011b90 <__ieee754_powf+0x38>
 8011b76:	f486 0680 	eor.w	r6, r6, #4194304	@ 0x400000
 8011b7a:	0076      	lsls	r6, r6, #1
 8011b7c:	f516 0f00 	cmn.w	r6, #8388608	@ 0x800000
 8011b80:	f240 829c 	bls.w	80120bc <__ieee754_powf+0x564>
 8011b84:	ee38 0a28 	vadd.f32	s0, s16, s17
 8011b88:	ecbd 8b02 	vpop	{d8}
 8011b8c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011b90:	f026 4800 	bic.w	r8, r6, #2147483648	@ 0x80000000
 8011b94:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 8011b98:	d802      	bhi.n	8011ba0 <__ieee754_powf+0x48>
 8011b9a:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 8011b9e:	d908      	bls.n	8011bb2 <__ieee754_powf+0x5a>
 8011ba0:	f1b6 5f7e 	cmp.w	r6, #1065353216	@ 0x3f800000
 8011ba4:	d1ee      	bne.n	8011b84 <__ieee754_powf+0x2c>
 8011ba6:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 8011baa:	0064      	lsls	r4, r4, #1
 8011bac:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 8011bb0:	e7e6      	b.n	8011b80 <__ieee754_powf+0x28>
 8011bb2:	2e00      	cmp	r6, #0
 8011bb4:	da1e      	bge.n	8011bf4 <__ieee754_powf+0x9c>
 8011bb6:	f1b9 4f97 	cmp.w	r9, #1266679808	@ 0x4b800000
 8011bba:	d22b      	bcs.n	8011c14 <__ieee754_powf+0xbc>
 8011bbc:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 8011bc0:	d332      	bcc.n	8011c28 <__ieee754_powf+0xd0>
 8011bc2:	ea4f 53e9 	mov.w	r3, r9, asr #23
 8011bc6:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 8011bca:	fa49 f503 	asr.w	r5, r9, r3
 8011bce:	fa05 f303 	lsl.w	r3, r5, r3
 8011bd2:	454b      	cmp	r3, r9
 8011bd4:	d126      	bne.n	8011c24 <__ieee754_powf+0xcc>
 8011bd6:	f005 0501 	and.w	r5, r5, #1
 8011bda:	f1c5 0502 	rsb	r5, r5, #2
 8011bde:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 8011be2:	d122      	bne.n	8011c2a <__ieee754_powf+0xd2>
 8011be4:	2c00      	cmp	r4, #0
 8011be6:	f280 826f 	bge.w	80120c8 <__ieee754_powf+0x570>
 8011bea:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8011bee:	ee87 0a88 	vdiv.f32	s0, s15, s16
 8011bf2:	e7c9      	b.n	8011b88 <__ieee754_powf+0x30>
 8011bf4:	2500      	movs	r5, #0
 8011bf6:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 8011bfa:	d1f0      	bne.n	8011bde <__ieee754_powf+0x86>
 8011bfc:	f1b8 5f7e 	cmp.w	r8, #1065353216	@ 0x3f800000
 8011c00:	f000 825c 	beq.w	80120bc <__ieee754_powf+0x564>
 8011c04:	d908      	bls.n	8011c18 <__ieee754_powf+0xc0>
 8011c06:	ed9f 0ad8 	vldr	s0, [pc, #864]	@ 8011f68 <__ieee754_powf+0x410>
 8011c0a:	2c00      	cmp	r4, #0
 8011c0c:	bfa8      	it	ge
 8011c0e:	eeb0 0a68 	vmovge.f32	s0, s17
 8011c12:	e7b9      	b.n	8011b88 <__ieee754_powf+0x30>
 8011c14:	2502      	movs	r5, #2
 8011c16:	e7ee      	b.n	8011bf6 <__ieee754_powf+0x9e>
 8011c18:	2c00      	cmp	r4, #0
 8011c1a:	f280 8252 	bge.w	80120c2 <__ieee754_powf+0x56a>
 8011c1e:	eeb1 0a68 	vneg.f32	s0, s17
 8011c22:	e7b1      	b.n	8011b88 <__ieee754_powf+0x30>
 8011c24:	2500      	movs	r5, #0
 8011c26:	e7da      	b.n	8011bde <__ieee754_powf+0x86>
 8011c28:	2500      	movs	r5, #0
 8011c2a:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 8011c2e:	d102      	bne.n	8011c36 <__ieee754_powf+0xde>
 8011c30:	ee28 0a08 	vmul.f32	s0, s16, s16
 8011c34:	e7a8      	b.n	8011b88 <__ieee754_powf+0x30>
 8011c36:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 8011c3a:	d109      	bne.n	8011c50 <__ieee754_powf+0xf8>
 8011c3c:	2e00      	cmp	r6, #0
 8011c3e:	db07      	blt.n	8011c50 <__ieee754_powf+0xf8>
 8011c40:	eeb0 0a48 	vmov.f32	s0, s16
 8011c44:	ecbd 8b02 	vpop	{d8}
 8011c48:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011c4c:	f7ff be9c 	b.w	8011988 <__ieee754_sqrtf>
 8011c50:	eeb0 0a48 	vmov.f32	s0, s16
 8011c54:	f000 fb24 	bl	80122a0 <fabsf>
 8011c58:	f026 4340 	bic.w	r3, r6, #3221225472	@ 0xc0000000
 8011c5c:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 8011c60:	4647      	mov	r7, r8
 8011c62:	d002      	beq.n	8011c6a <__ieee754_powf+0x112>
 8011c64:	f1b8 0f00 	cmp.w	r8, #0
 8011c68:	d117      	bne.n	8011c9a <__ieee754_powf+0x142>
 8011c6a:	2c00      	cmp	r4, #0
 8011c6c:	bfbc      	itt	lt
 8011c6e:	eef7 7a00 	vmovlt.f32	s15, #112	@ 0x3f800000  1.0
 8011c72:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 8011c76:	2e00      	cmp	r6, #0
 8011c78:	da86      	bge.n	8011b88 <__ieee754_powf+0x30>
 8011c7a:	f1a8 587e 	sub.w	r8, r8, #1065353216	@ 0x3f800000
 8011c7e:	ea58 0805 	orrs.w	r8, r8, r5
 8011c82:	d104      	bne.n	8011c8e <__ieee754_powf+0x136>
 8011c84:	ee70 7a40 	vsub.f32	s15, s0, s0
 8011c88:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8011c8c:	e77c      	b.n	8011b88 <__ieee754_powf+0x30>
 8011c8e:	2d01      	cmp	r5, #1
 8011c90:	f47f af7a 	bne.w	8011b88 <__ieee754_powf+0x30>
 8011c94:	eeb1 0a40 	vneg.f32	s0, s0
 8011c98:	e776      	b.n	8011b88 <__ieee754_powf+0x30>
 8011c9a:	0ff0      	lsrs	r0, r6, #31
 8011c9c:	3801      	subs	r0, #1
 8011c9e:	ea55 0300 	orrs.w	r3, r5, r0
 8011ca2:	d104      	bne.n	8011cae <__ieee754_powf+0x156>
 8011ca4:	ee38 8a48 	vsub.f32	s16, s16, s16
 8011ca8:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8011cac:	e76c      	b.n	8011b88 <__ieee754_powf+0x30>
 8011cae:	f1b9 4f9a 	cmp.w	r9, #1291845632	@ 0x4d000000
 8011cb2:	d973      	bls.n	8011d9c <__ieee754_powf+0x244>
 8011cb4:	4bad      	ldr	r3, [pc, #692]	@ (8011f6c <__ieee754_powf+0x414>)
 8011cb6:	4598      	cmp	r8, r3
 8011cb8:	d808      	bhi.n	8011ccc <__ieee754_powf+0x174>
 8011cba:	2c00      	cmp	r4, #0
 8011cbc:	da0b      	bge.n	8011cd6 <__ieee754_powf+0x17e>
 8011cbe:	2000      	movs	r0, #0
 8011cc0:	ecbd 8b02 	vpop	{d8}
 8011cc4:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011cc8:	f000 bb78 	b.w	80123bc <__math_oflowf>
 8011ccc:	4ba8      	ldr	r3, [pc, #672]	@ (8011f70 <__ieee754_powf+0x418>)
 8011cce:	4598      	cmp	r8, r3
 8011cd0:	d908      	bls.n	8011ce4 <__ieee754_powf+0x18c>
 8011cd2:	2c00      	cmp	r4, #0
 8011cd4:	dcf3      	bgt.n	8011cbe <__ieee754_powf+0x166>
 8011cd6:	2000      	movs	r0, #0
 8011cd8:	ecbd 8b02 	vpop	{d8}
 8011cdc:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011ce0:	f000 bb66 	b.w	80123b0 <__math_uflowf>
 8011ce4:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8011ce8:	ee30 0a67 	vsub.f32	s0, s0, s15
 8011cec:	eddf 6aa1 	vldr	s13, [pc, #644]	@ 8011f74 <__ieee754_powf+0x41c>
 8011cf0:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 8011cf4:	eee0 6a67 	vfms.f32	s13, s0, s15
 8011cf8:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8011cfc:	eee6 7ac0 	vfms.f32	s15, s13, s0
 8011d00:	ee20 7a00 	vmul.f32	s14, s0, s0
 8011d04:	ee27 7a27 	vmul.f32	s14, s14, s15
 8011d08:	eddf 7a9b 	vldr	s15, [pc, #620]	@ 8011f78 <__ieee754_powf+0x420>
 8011d0c:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 8011d10:	ed9f 7a9a 	vldr	s14, [pc, #616]	@ 8011f7c <__ieee754_powf+0x424>
 8011d14:	eee0 7a07 	vfma.f32	s15, s0, s14
 8011d18:	ed9f 7a99 	vldr	s14, [pc, #612]	@ 8011f80 <__ieee754_powf+0x428>
 8011d1c:	eef0 6a67 	vmov.f32	s13, s15
 8011d20:	eee0 6a07 	vfma.f32	s13, s0, s14
 8011d24:	ee16 3a90 	vmov	r3, s13
 8011d28:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8011d2c:	f023 030f 	bic.w	r3, r3, #15
 8011d30:	ee06 3a90 	vmov	s13, r3
 8011d34:	eee0 6a47 	vfms.f32	s13, s0, s14
 8011d38:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8011d3c:	3d01      	subs	r5, #1
 8011d3e:	f424 647f 	bic.w	r4, r4, #4080	@ 0xff0
 8011d42:	4305      	orrs	r5, r0
 8011d44:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8011d48:	f024 040f 	bic.w	r4, r4, #15
 8011d4c:	eebf 8a00 	vmov.f32	s16, #240	@ 0xbf800000 -1.0
 8011d50:	bf18      	it	ne
 8011d52:	eeb0 8a47 	vmovne.f32	s16, s14
 8011d56:	ee07 4a10 	vmov	s14, r4
 8011d5a:	ee67 0aa8 	vmul.f32	s1, s15, s17
 8011d5e:	ee38 7ac7 	vsub.f32	s14, s17, s14
 8011d62:	ee07 3a90 	vmov	s15, r3
 8011d66:	eee7 0a27 	vfma.f32	s1, s14, s15
 8011d6a:	ee07 4a10 	vmov	s14, r4
 8011d6e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8011d72:	ee30 7aa7 	vadd.f32	s14, s1, s15
 8011d76:	ee17 1a10 	vmov	r1, s14
 8011d7a:	2900      	cmp	r1, #0
 8011d7c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8011d80:	f340 80dd 	ble.w	8011f3e <__ieee754_powf+0x3e6>
 8011d84:	f1b3 4f86 	cmp.w	r3, #1124073472	@ 0x43000000
 8011d88:	f240 80ca 	bls.w	8011f20 <__ieee754_powf+0x3c8>
 8011d8c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8011d90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011d94:	bf4c      	ite	mi
 8011d96:	2001      	movmi	r0, #1
 8011d98:	2000      	movpl	r0, #0
 8011d9a:	e791      	b.n	8011cc0 <__ieee754_powf+0x168>
 8011d9c:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 8011da0:	bf01      	itttt	eq
 8011da2:	eddf 7a78 	vldreq	s15, [pc, #480]	@ 8011f84 <__ieee754_powf+0x42c>
 8011da6:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 8011daa:	f06f 0317 	mvneq.w	r3, #23
 8011dae:	ee17 7a90 	vmoveq	r7, s15
 8011db2:	ea4f 52e7 	mov.w	r2, r7, asr #23
 8011db6:	bf18      	it	ne
 8011db8:	2300      	movne	r3, #0
 8011dba:	3a7f      	subs	r2, #127	@ 0x7f
 8011dbc:	441a      	add	r2, r3
 8011dbe:	4b72      	ldr	r3, [pc, #456]	@ (8011f88 <__ieee754_powf+0x430>)
 8011dc0:	f3c7 0716 	ubfx	r7, r7, #0, #23
 8011dc4:	429f      	cmp	r7, r3
 8011dc6:	f047 517e 	orr.w	r1, r7, #1065353216	@ 0x3f800000
 8011dca:	dd06      	ble.n	8011dda <__ieee754_powf+0x282>
 8011dcc:	4b6f      	ldr	r3, [pc, #444]	@ (8011f8c <__ieee754_powf+0x434>)
 8011dce:	429f      	cmp	r7, r3
 8011dd0:	f340 80a4 	ble.w	8011f1c <__ieee754_powf+0x3c4>
 8011dd4:	3201      	adds	r2, #1
 8011dd6:	f5a1 0100 	sub.w	r1, r1, #8388608	@ 0x800000
 8011dda:	2600      	movs	r6, #0
 8011ddc:	4b6c      	ldr	r3, [pc, #432]	@ (8011f90 <__ieee754_powf+0x438>)
 8011dde:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 8011de2:	ee07 1a10 	vmov	s14, r1
 8011de6:	edd3 5a00 	vldr	s11, [r3]
 8011dea:	4b6a      	ldr	r3, [pc, #424]	@ (8011f94 <__ieee754_powf+0x43c>)
 8011dec:	ee75 7a87 	vadd.f32	s15, s11, s14
 8011df0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8011df4:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 8011df8:	1049      	asrs	r1, r1, #1
 8011dfa:	f041 5100 	orr.w	r1, r1, #536870912	@ 0x20000000
 8011dfe:	f501 2180 	add.w	r1, r1, #262144	@ 0x40000
 8011e02:	eb01 5146 	add.w	r1, r1, r6, lsl #21
 8011e06:	ee37 6a65 	vsub.f32	s12, s14, s11
 8011e0a:	ee07 1a90 	vmov	s15, r1
 8011e0e:	ee26 5a24 	vmul.f32	s10, s12, s9
 8011e12:	ee77 5ae5 	vsub.f32	s11, s15, s11
 8011e16:	ee15 7a10 	vmov	r7, s10
 8011e1a:	401f      	ands	r7, r3
 8011e1c:	ee06 7a90 	vmov	s13, r7
 8011e20:	eea6 6ae7 	vfms.f32	s12, s13, s15
 8011e24:	ee37 7a65 	vsub.f32	s14, s14, s11
 8011e28:	ee65 7a05 	vmul.f32	s15, s10, s10
 8011e2c:	eea6 6ac7 	vfms.f32	s12, s13, s14
 8011e30:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8011f98 <__ieee754_powf+0x440>
 8011e34:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 8011f9c <__ieee754_powf+0x444>
 8011e38:	eee7 5a87 	vfma.f32	s11, s15, s14
 8011e3c:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 8011fa0 <__ieee754_powf+0x448>
 8011e40:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8011e44:	eddf 5a4b 	vldr	s11, [pc, #300]	@ 8011f74 <__ieee754_powf+0x41c>
 8011e48:	eee7 5a27 	vfma.f32	s11, s14, s15
 8011e4c:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 8011fa4 <__ieee754_powf+0x44c>
 8011e50:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8011e54:	eddf 5a54 	vldr	s11, [pc, #336]	@ 8011fa8 <__ieee754_powf+0x450>
 8011e58:	ee26 6a24 	vmul.f32	s12, s12, s9
 8011e5c:	eee7 5a27 	vfma.f32	s11, s14, s15
 8011e60:	ee35 7a26 	vadd.f32	s14, s10, s13
 8011e64:	ee67 4aa7 	vmul.f32	s9, s15, s15
 8011e68:	ee27 7a06 	vmul.f32	s14, s14, s12
 8011e6c:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 8011e70:	eea4 7aa5 	vfma.f32	s14, s9, s11
 8011e74:	eef0 5a67 	vmov.f32	s11, s15
 8011e78:	eee6 5aa6 	vfma.f32	s11, s13, s13
 8011e7c:	ee75 5a87 	vadd.f32	s11, s11, s14
 8011e80:	ee15 1a90 	vmov	r1, s11
 8011e84:	4019      	ands	r1, r3
 8011e86:	ee05 1a90 	vmov	s11, r1
 8011e8a:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8011e8e:	eee6 7ae6 	vfms.f32	s15, s13, s13
 8011e92:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011e96:	ee67 7a85 	vmul.f32	s15, s15, s10
 8011e9a:	eee6 7a25 	vfma.f32	s15, s12, s11
 8011e9e:	eeb0 6a67 	vmov.f32	s12, s15
 8011ea2:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8011ea6:	ee16 1a10 	vmov	r1, s12
 8011eaa:	4019      	ands	r1, r3
 8011eac:	ee06 1a10 	vmov	s12, r1
 8011eb0:	eeb0 7a46 	vmov.f32	s14, s12
 8011eb4:	eea6 7ae5 	vfms.f32	s14, s13, s11
 8011eb8:	493c      	ldr	r1, [pc, #240]	@ (8011fac <__ieee754_powf+0x454>)
 8011eba:	eb01 0186 	add.w	r1, r1, r6, lsl #2
 8011ebe:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011ec2:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 8011fb0 <__ieee754_powf+0x458>
 8011ec6:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 8011fb4 <__ieee754_powf+0x45c>
 8011eca:	ee67 7a87 	vmul.f32	s15, s15, s14
 8011ece:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 8011fb8 <__ieee754_powf+0x460>
 8011ed2:	eee6 7a07 	vfma.f32	s15, s12, s14
 8011ed6:	ed91 7a00 	vldr	s14, [r1]
 8011eda:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011ede:	ee07 2a10 	vmov	s14, r2
 8011ee2:	eef0 6a67 	vmov.f32	s13, s15
 8011ee6:	4a35      	ldr	r2, [pc, #212]	@ (8011fbc <__ieee754_powf+0x464>)
 8011ee8:	eee6 6a25 	vfma.f32	s13, s12, s11
 8011eec:	eb02 0286 	add.w	r2, r2, r6, lsl #2
 8011ef0:	ed92 5a00 	vldr	s10, [r2]
 8011ef4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8011ef8:	ee76 6a85 	vadd.f32	s13, s13, s10
 8011efc:	ee76 6a87 	vadd.f32	s13, s13, s14
 8011f00:	ee16 2a90 	vmov	r2, s13
 8011f04:	4013      	ands	r3, r2
 8011f06:	ee06 3a90 	vmov	s13, r3
 8011f0a:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8011f0e:	ee37 7a45 	vsub.f32	s14, s14, s10
 8011f12:	eea6 7a65 	vfms.f32	s14, s12, s11
 8011f16:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011f1a:	e70f      	b.n	8011d3c <__ieee754_powf+0x1e4>
 8011f1c:	2601      	movs	r6, #1
 8011f1e:	e75d      	b.n	8011ddc <__ieee754_powf+0x284>
 8011f20:	d152      	bne.n	8011fc8 <__ieee754_powf+0x470>
 8011f22:	eddf 6a27 	vldr	s13, [pc, #156]	@ 8011fc0 <__ieee754_powf+0x468>
 8011f26:	ee37 7a67 	vsub.f32	s14, s14, s15
 8011f2a:	ee70 6aa6 	vadd.f32	s13, s1, s13
 8011f2e:	eef4 6ac7 	vcmpe.f32	s13, s14
 8011f32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011f36:	f73f af29 	bgt.w	8011d8c <__ieee754_powf+0x234>
 8011f3a:	2386      	movs	r3, #134	@ 0x86
 8011f3c:	e048      	b.n	8011fd0 <__ieee754_powf+0x478>
 8011f3e:	4a21      	ldr	r2, [pc, #132]	@ (8011fc4 <__ieee754_powf+0x46c>)
 8011f40:	4293      	cmp	r3, r2
 8011f42:	d907      	bls.n	8011f54 <__ieee754_powf+0x3fc>
 8011f44:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8011f48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011f4c:	bf4c      	ite	mi
 8011f4e:	2001      	movmi	r0, #1
 8011f50:	2000      	movpl	r0, #0
 8011f52:	e6c1      	b.n	8011cd8 <__ieee754_powf+0x180>
 8011f54:	d138      	bne.n	8011fc8 <__ieee754_powf+0x470>
 8011f56:	ee37 7a67 	vsub.f32	s14, s14, s15
 8011f5a:	eeb4 7ae0 	vcmpe.f32	s14, s1
 8011f5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011f62:	dbea      	blt.n	8011f3a <__ieee754_powf+0x3e2>
 8011f64:	e7ee      	b.n	8011f44 <__ieee754_powf+0x3ec>
 8011f66:	bf00      	nop
 8011f68:	00000000 	.word	0x00000000
 8011f6c:	3f7ffff3 	.word	0x3f7ffff3
 8011f70:	3f800007 	.word	0x3f800007
 8011f74:	3eaaaaab 	.word	0x3eaaaaab
 8011f78:	3fb8aa3b 	.word	0x3fb8aa3b
 8011f7c:	36eca570 	.word	0x36eca570
 8011f80:	3fb8aa00 	.word	0x3fb8aa00
 8011f84:	4b800000 	.word	0x4b800000
 8011f88:	001cc471 	.word	0x001cc471
 8011f8c:	005db3d6 	.word	0x005db3d6
 8011f90:	08012760 	.word	0x08012760
 8011f94:	fffff000 	.word	0xfffff000
 8011f98:	3e6c3255 	.word	0x3e6c3255
 8011f9c:	3e53f142 	.word	0x3e53f142
 8011fa0:	3e8ba305 	.word	0x3e8ba305
 8011fa4:	3edb6db7 	.word	0x3edb6db7
 8011fa8:	3f19999a 	.word	0x3f19999a
 8011fac:	08012750 	.word	0x08012750
 8011fb0:	3f76384f 	.word	0x3f76384f
 8011fb4:	3f763800 	.word	0x3f763800
 8011fb8:	369dc3a0 	.word	0x369dc3a0
 8011fbc:	08012758 	.word	0x08012758
 8011fc0:	3338aa3c 	.word	0x3338aa3c
 8011fc4:	43160000 	.word	0x43160000
 8011fc8:	f1b3 5f7c 	cmp.w	r3, #1056964608	@ 0x3f000000
 8011fcc:	d971      	bls.n	80120b2 <__ieee754_powf+0x55a>
 8011fce:	15db      	asrs	r3, r3, #23
 8011fd0:	3b7e      	subs	r3, #126	@ 0x7e
 8011fd2:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8011fd6:	4118      	asrs	r0, r3
 8011fd8:	4408      	add	r0, r1
 8011fda:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8011fde:	4a3c      	ldr	r2, [pc, #240]	@ (80120d0 <__ieee754_powf+0x578>)
 8011fe0:	3b7f      	subs	r3, #127	@ 0x7f
 8011fe2:	411a      	asrs	r2, r3
 8011fe4:	4002      	ands	r2, r0
 8011fe6:	ee07 2a10 	vmov	s14, r2
 8011fea:	f3c0 0016 	ubfx	r0, r0, #0, #23
 8011fee:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8011ff2:	f1c3 0317 	rsb	r3, r3, #23
 8011ff6:	4118      	asrs	r0, r3
 8011ff8:	2900      	cmp	r1, #0
 8011ffa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011ffe:	bfb8      	it	lt
 8012000:	4240      	neglt	r0, r0
 8012002:	ee37 7aa0 	vadd.f32	s14, s15, s1
 8012006:	eddf 6a33 	vldr	s13, [pc, #204]	@ 80120d4 <__ieee754_powf+0x57c>
 801200a:	ed9f 6a33 	vldr	s12, [pc, #204]	@ 80120d8 <__ieee754_powf+0x580>
 801200e:	ee17 3a10 	vmov	r3, s14
 8012012:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8012016:	f023 030f 	bic.w	r3, r3, #15
 801201a:	ee07 3a10 	vmov	s14, r3
 801201e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012022:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8012026:	ee70 0ae7 	vsub.f32	s1, s1, s15
 801202a:	eddf 7a2c 	vldr	s15, [pc, #176]	@ 80120dc <__ieee754_powf+0x584>
 801202e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012032:	eee0 7aa6 	vfma.f32	s15, s1, s13
 8012036:	eef0 6a67 	vmov.f32	s13, s15
 801203a:	eee7 6a06 	vfma.f32	s13, s14, s12
 801203e:	eef0 5a66 	vmov.f32	s11, s13
 8012042:	eee7 5a46 	vfms.f32	s11, s14, s12
 8012046:	ee26 7aa6 	vmul.f32	s14, s13, s13
 801204a:	ee77 7ae5 	vsub.f32	s15, s15, s11
 801204e:	ed9f 6a24 	vldr	s12, [pc, #144]	@ 80120e0 <__ieee754_powf+0x588>
 8012052:	eddf 5a24 	vldr	s11, [pc, #144]	@ 80120e4 <__ieee754_powf+0x58c>
 8012056:	eea7 6a25 	vfma.f32	s12, s14, s11
 801205a:	eddf 5a23 	vldr	s11, [pc, #140]	@ 80120e8 <__ieee754_powf+0x590>
 801205e:	eee6 5a07 	vfma.f32	s11, s12, s14
 8012062:	ed9f 6a22 	vldr	s12, [pc, #136]	@ 80120ec <__ieee754_powf+0x594>
 8012066:	eea5 6a87 	vfma.f32	s12, s11, s14
 801206a:	eddf 5a21 	vldr	s11, [pc, #132]	@ 80120f0 <__ieee754_powf+0x598>
 801206e:	eee6 5a07 	vfma.f32	s11, s12, s14
 8012072:	eeb0 6a66 	vmov.f32	s12, s13
 8012076:	eea5 6ac7 	vfms.f32	s12, s11, s14
 801207a:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 801207e:	ee66 5a86 	vmul.f32	s11, s13, s12
 8012082:	ee36 6a47 	vsub.f32	s12, s12, s14
 8012086:	eee6 7aa7 	vfma.f32	s15, s13, s15
 801208a:	ee85 7a86 	vdiv.f32	s14, s11, s12
 801208e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012092:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8012096:	ee30 0a67 	vsub.f32	s0, s0, s15
 801209a:	ee10 3a10 	vmov	r3, s0
 801209e:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 80120a2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80120a6:	da06      	bge.n	80120b6 <__ieee754_powf+0x55e>
 80120a8:	f000 f902 	bl	80122b0 <scalbnf>
 80120ac:	ee20 0a08 	vmul.f32	s0, s0, s16
 80120b0:	e56a      	b.n	8011b88 <__ieee754_powf+0x30>
 80120b2:	2000      	movs	r0, #0
 80120b4:	e7a5      	b.n	8012002 <__ieee754_powf+0x4aa>
 80120b6:	ee00 3a10 	vmov	s0, r3
 80120ba:	e7f7      	b.n	80120ac <__ieee754_powf+0x554>
 80120bc:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80120c0:	e562      	b.n	8011b88 <__ieee754_powf+0x30>
 80120c2:	ed9f 0a0c 	vldr	s0, [pc, #48]	@ 80120f4 <__ieee754_powf+0x59c>
 80120c6:	e55f      	b.n	8011b88 <__ieee754_powf+0x30>
 80120c8:	eeb0 0a48 	vmov.f32	s0, s16
 80120cc:	e55c      	b.n	8011b88 <__ieee754_powf+0x30>
 80120ce:	bf00      	nop
 80120d0:	ff800000 	.word	0xff800000
 80120d4:	3f317218 	.word	0x3f317218
 80120d8:	3f317200 	.word	0x3f317200
 80120dc:	35bfbe8c 	.word	0x35bfbe8c
 80120e0:	b5ddea0e 	.word	0xb5ddea0e
 80120e4:	3331bb4c 	.word	0x3331bb4c
 80120e8:	388ab355 	.word	0x388ab355
 80120ec:	bb360b61 	.word	0xbb360b61
 80120f0:	3e2aaaab 	.word	0x3e2aaaab
 80120f4:	00000000 	.word	0x00000000

080120f8 <atanf>:
 80120f8:	b538      	push	{r3, r4, r5, lr}
 80120fa:	ee10 5a10 	vmov	r5, s0
 80120fe:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 8012102:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 8012106:	eef0 7a40 	vmov.f32	s15, s0
 801210a:	d310      	bcc.n	801212e <atanf+0x36>
 801210c:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 8012110:	d904      	bls.n	801211c <atanf+0x24>
 8012112:	ee70 7a00 	vadd.f32	s15, s0, s0
 8012116:	eeb0 0a67 	vmov.f32	s0, s15
 801211a:	bd38      	pop	{r3, r4, r5, pc}
 801211c:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 8012254 <atanf+0x15c>
 8012120:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 8012258 <atanf+0x160>
 8012124:	2d00      	cmp	r5, #0
 8012126:	bfc8      	it	gt
 8012128:	eef0 7a47 	vmovgt.f32	s15, s14
 801212c:	e7f3      	b.n	8012116 <atanf+0x1e>
 801212e:	4b4b      	ldr	r3, [pc, #300]	@ (801225c <atanf+0x164>)
 8012130:	429c      	cmp	r4, r3
 8012132:	d810      	bhi.n	8012156 <atanf+0x5e>
 8012134:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 8012138:	d20a      	bcs.n	8012150 <atanf+0x58>
 801213a:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 8012260 <atanf+0x168>
 801213e:	ee30 7a07 	vadd.f32	s14, s0, s14
 8012142:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8012146:	eeb4 7ae6 	vcmpe.f32	s14, s13
 801214a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801214e:	dce2      	bgt.n	8012116 <atanf+0x1e>
 8012150:	f04f 33ff 	mov.w	r3, #4294967295
 8012154:	e013      	b.n	801217e <atanf+0x86>
 8012156:	f000 f8a3 	bl	80122a0 <fabsf>
 801215a:	4b42      	ldr	r3, [pc, #264]	@ (8012264 <atanf+0x16c>)
 801215c:	429c      	cmp	r4, r3
 801215e:	d84f      	bhi.n	8012200 <atanf+0x108>
 8012160:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 8012164:	429c      	cmp	r4, r3
 8012166:	d841      	bhi.n	80121ec <atanf+0xf4>
 8012168:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 801216c:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8012170:	eea0 7a27 	vfma.f32	s14, s0, s15
 8012174:	2300      	movs	r3, #0
 8012176:	ee30 0a27 	vadd.f32	s0, s0, s15
 801217a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801217e:	1c5a      	adds	r2, r3, #1
 8012180:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8012184:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 8012268 <atanf+0x170>
 8012188:	eddf 5a38 	vldr	s11, [pc, #224]	@ 801226c <atanf+0x174>
 801218c:	ed9f 5a38 	vldr	s10, [pc, #224]	@ 8012270 <atanf+0x178>
 8012190:	ee66 6a06 	vmul.f32	s13, s12, s12
 8012194:	eee6 5a87 	vfma.f32	s11, s13, s14
 8012198:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 8012274 <atanf+0x17c>
 801219c:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80121a0:	eddf 5a35 	vldr	s11, [pc, #212]	@ 8012278 <atanf+0x180>
 80121a4:	eee7 5a26 	vfma.f32	s11, s14, s13
 80121a8:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 801227c <atanf+0x184>
 80121ac:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80121b0:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8012280 <atanf+0x188>
 80121b4:	eee7 5a26 	vfma.f32	s11, s14, s13
 80121b8:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8012284 <atanf+0x18c>
 80121bc:	eea6 5a87 	vfma.f32	s10, s13, s14
 80121c0:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8012288 <atanf+0x190>
 80121c4:	eea5 7a26 	vfma.f32	s14, s10, s13
 80121c8:	ed9f 5a30 	vldr	s10, [pc, #192]	@ 801228c <atanf+0x194>
 80121cc:	eea7 5a26 	vfma.f32	s10, s14, s13
 80121d0:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8012290 <atanf+0x198>
 80121d4:	eea5 7a26 	vfma.f32	s14, s10, s13
 80121d8:	ee27 7a26 	vmul.f32	s14, s14, s13
 80121dc:	eea5 7a86 	vfma.f32	s14, s11, s12
 80121e0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80121e4:	d121      	bne.n	801222a <atanf+0x132>
 80121e6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80121ea:	e794      	b.n	8012116 <atanf+0x1e>
 80121ec:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80121f0:	ee30 7a67 	vsub.f32	s14, s0, s15
 80121f4:	ee30 0a27 	vadd.f32	s0, s0, s15
 80121f8:	2301      	movs	r3, #1
 80121fa:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80121fe:	e7be      	b.n	801217e <atanf+0x86>
 8012200:	4b24      	ldr	r3, [pc, #144]	@ (8012294 <atanf+0x19c>)
 8012202:	429c      	cmp	r4, r3
 8012204:	d80b      	bhi.n	801221e <atanf+0x126>
 8012206:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 801220a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801220e:	eea0 7a27 	vfma.f32	s14, s0, s15
 8012212:	2302      	movs	r3, #2
 8012214:	ee70 6a67 	vsub.f32	s13, s0, s15
 8012218:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801221c:	e7af      	b.n	801217e <atanf+0x86>
 801221e:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8012222:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8012226:	2303      	movs	r3, #3
 8012228:	e7a9      	b.n	801217e <atanf+0x86>
 801222a:	4a1b      	ldr	r2, [pc, #108]	@ (8012298 <atanf+0x1a0>)
 801222c:	491b      	ldr	r1, [pc, #108]	@ (801229c <atanf+0x1a4>)
 801222e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8012232:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8012236:	edd3 6a00 	vldr	s13, [r3]
 801223a:	ee37 7a66 	vsub.f32	s14, s14, s13
 801223e:	2d00      	cmp	r5, #0
 8012240:	ee37 7a67 	vsub.f32	s14, s14, s15
 8012244:	edd2 7a00 	vldr	s15, [r2]
 8012248:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801224c:	bfb8      	it	lt
 801224e:	eef1 7a67 	vneglt.f32	s15, s15
 8012252:	e760      	b.n	8012116 <atanf+0x1e>
 8012254:	bfc90fdb 	.word	0xbfc90fdb
 8012258:	3fc90fdb 	.word	0x3fc90fdb
 801225c:	3edfffff 	.word	0x3edfffff
 8012260:	7149f2ca 	.word	0x7149f2ca
 8012264:	3f97ffff 	.word	0x3f97ffff
 8012268:	3c8569d7 	.word	0x3c8569d7
 801226c:	3d4bda59 	.word	0x3d4bda59
 8012270:	bd6ef16b 	.word	0xbd6ef16b
 8012274:	3d886b35 	.word	0x3d886b35
 8012278:	3dba2e6e 	.word	0x3dba2e6e
 801227c:	3e124925 	.word	0x3e124925
 8012280:	3eaaaaab 	.word	0x3eaaaaab
 8012284:	bd15a221 	.word	0xbd15a221
 8012288:	bd9d8795 	.word	0xbd9d8795
 801228c:	bde38e38 	.word	0xbde38e38
 8012290:	be4ccccd 	.word	0xbe4ccccd
 8012294:	401bffff 	.word	0x401bffff
 8012298:	08012778 	.word	0x08012778
 801229c:	08012768 	.word	0x08012768

080122a0 <fabsf>:
 80122a0:	ee10 3a10 	vmov	r3, s0
 80122a4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80122a8:	ee00 3a10 	vmov	s0, r3
 80122ac:	4770      	bx	lr
	...

080122b0 <scalbnf>:
 80122b0:	ee10 3a10 	vmov	r3, s0
 80122b4:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 80122b8:	d02b      	beq.n	8012312 <scalbnf+0x62>
 80122ba:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 80122be:	d302      	bcc.n	80122c6 <scalbnf+0x16>
 80122c0:	ee30 0a00 	vadd.f32	s0, s0, s0
 80122c4:	4770      	bx	lr
 80122c6:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 80122ca:	d123      	bne.n	8012314 <scalbnf+0x64>
 80122cc:	4b24      	ldr	r3, [pc, #144]	@ (8012360 <scalbnf+0xb0>)
 80122ce:	eddf 7a25 	vldr	s15, [pc, #148]	@ 8012364 <scalbnf+0xb4>
 80122d2:	4298      	cmp	r0, r3
 80122d4:	ee20 0a27 	vmul.f32	s0, s0, s15
 80122d8:	db17      	blt.n	801230a <scalbnf+0x5a>
 80122da:	ee10 3a10 	vmov	r3, s0
 80122de:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80122e2:	3a19      	subs	r2, #25
 80122e4:	f24c 3150 	movw	r1, #50000	@ 0xc350
 80122e8:	4288      	cmp	r0, r1
 80122ea:	dd15      	ble.n	8012318 <scalbnf+0x68>
 80122ec:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 8012368 <scalbnf+0xb8>
 80122f0:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 801236c <scalbnf+0xbc>
 80122f4:	ee10 3a10 	vmov	r3, s0
 80122f8:	eeb0 7a67 	vmov.f32	s14, s15
 80122fc:	2b00      	cmp	r3, #0
 80122fe:	bfb8      	it	lt
 8012300:	eef0 7a66 	vmovlt.f32	s15, s13
 8012304:	ee27 0a87 	vmul.f32	s0, s15, s14
 8012308:	4770      	bx	lr
 801230a:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8012370 <scalbnf+0xc0>
 801230e:	ee27 0a80 	vmul.f32	s0, s15, s0
 8012312:	4770      	bx	lr
 8012314:	0dd2      	lsrs	r2, r2, #23
 8012316:	e7e5      	b.n	80122e4 <scalbnf+0x34>
 8012318:	4410      	add	r0, r2
 801231a:	28fe      	cmp	r0, #254	@ 0xfe
 801231c:	dce6      	bgt.n	80122ec <scalbnf+0x3c>
 801231e:	2800      	cmp	r0, #0
 8012320:	dd06      	ble.n	8012330 <scalbnf+0x80>
 8012322:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8012326:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 801232a:	ee00 3a10 	vmov	s0, r3
 801232e:	4770      	bx	lr
 8012330:	f110 0f16 	cmn.w	r0, #22
 8012334:	da09      	bge.n	801234a <scalbnf+0x9a>
 8012336:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8012370 <scalbnf+0xc0>
 801233a:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8012374 <scalbnf+0xc4>
 801233e:	ee10 3a10 	vmov	r3, s0
 8012342:	eeb0 7a67 	vmov.f32	s14, s15
 8012346:	2b00      	cmp	r3, #0
 8012348:	e7d9      	b.n	80122fe <scalbnf+0x4e>
 801234a:	3019      	adds	r0, #25
 801234c:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8012350:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8012354:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8012378 <scalbnf+0xc8>
 8012358:	ee07 3a90 	vmov	s15, r3
 801235c:	e7d7      	b.n	801230e <scalbnf+0x5e>
 801235e:	bf00      	nop
 8012360:	ffff3cb0 	.word	0xffff3cb0
 8012364:	4c000000 	.word	0x4c000000
 8012368:	7149f2ca 	.word	0x7149f2ca
 801236c:	f149f2ca 	.word	0xf149f2ca
 8012370:	0da24260 	.word	0x0da24260
 8012374:	8da24260 	.word	0x8da24260
 8012378:	33000000 	.word	0x33000000

0801237c <with_errnof>:
 801237c:	b510      	push	{r4, lr}
 801237e:	ed2d 8b02 	vpush	{d8}
 8012382:	eeb0 8a40 	vmov.f32	s16, s0
 8012386:	4604      	mov	r4, r0
 8012388:	f7fe fb1a 	bl	80109c0 <__errno>
 801238c:	eeb0 0a48 	vmov.f32	s0, s16
 8012390:	ecbd 8b02 	vpop	{d8}
 8012394:	6004      	str	r4, [r0, #0]
 8012396:	bd10      	pop	{r4, pc}

08012398 <xflowf>:
 8012398:	b130      	cbz	r0, 80123a8 <xflowf+0x10>
 801239a:	eef1 7a40 	vneg.f32	s15, s0
 801239e:	ee27 0a80 	vmul.f32	s0, s15, s0
 80123a2:	2022      	movs	r0, #34	@ 0x22
 80123a4:	f7ff bfea 	b.w	801237c <with_errnof>
 80123a8:	eef0 7a40 	vmov.f32	s15, s0
 80123ac:	e7f7      	b.n	801239e <xflowf+0x6>
	...

080123b0 <__math_uflowf>:
 80123b0:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80123b8 <__math_uflowf+0x8>
 80123b4:	f7ff bff0 	b.w	8012398 <xflowf>
 80123b8:	10000000 	.word	0x10000000

080123bc <__math_oflowf>:
 80123bc:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80123c4 <__math_oflowf+0x8>
 80123c0:	f7ff bfea 	b.w	8012398 <xflowf>
 80123c4:	70000000 	.word	0x70000000

080123c8 <_init>:
 80123c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80123ca:	bf00      	nop
 80123cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80123ce:	bc08      	pop	{r3}
 80123d0:	469e      	mov	lr, r3
 80123d2:	4770      	bx	lr

080123d4 <_fini>:
 80123d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80123d6:	bf00      	nop
 80123d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80123da:	bc08      	pop	{r3}
 80123dc:	469e      	mov	lr, r3
 80123de:	4770      	bx	lr
