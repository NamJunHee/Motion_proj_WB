
Motion_proj_WB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001206c  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003a8  080121ac  080121ac  000131ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08012554  08012554  00013554  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801255c  0801255c  0001355c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08012560  08012560  00013560  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000000d8  20000008  08012564  00014008  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 BLE_DRIVER_CONTEXT 00000035  200000e0  0801263c  000140e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 SYSTEM_DRIVER_CONTEXT 00000011  20000118  08012671  00014118  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002f9c  20000130  08012682  00014130  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200030cc  08012682  000150cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00014a67  2**0
                  CONTENTS, READONLY
 12 MAPPING_TABLE 00000028  20030000  20030000  00015000  2**2
                  ALLOC
 13 MB_MEM1       000001bb  20030028  20030028  00015000  2**2
                  ALLOC
 14 .MB_MEM2      00000883  200301e4  08012682  000141e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 15 .debug_info   0002f9bb  00000000  00000000  00014a97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00006900  00000000  00000000  00044452  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00002e40  00000000  00000000  0004ad58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 0000238a  00000000  00000000  0004db98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0002ed9e  00000000  00000000  0004ff22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   000361bc  00000000  00000000  0007ecc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    00102c58  00000000  00000000  000b4e7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      00000043  00000000  00000000  001b7ad4  2**0
                  CONTENTS, READONLY
 23 .debug_frame  0000d0f8  00000000  00000000  001b7b18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 0000006e  00000000  00000000  001c4c10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000130 	.word	0x20000130
 800015c:	00000000 	.word	0x00000000
 8000160:	08012194 	.word	0x08012194

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000134 	.word	0x20000134
 800017c:	08012194 	.word	0x08012194

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	@ 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2f>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b10:	bf24      	itt	cs
 8000b12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b1a:	d90d      	bls.n	8000b38 <__aeabi_d2f+0x30>
 8000b1c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b28:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b30:	bf08      	it	eq
 8000b32:	f020 0001 	biceq.w	r0, r0, #1
 8000b36:	4770      	bx	lr
 8000b38:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b3c:	d121      	bne.n	8000b82 <__aeabi_d2f+0x7a>
 8000b3e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b42:	bfbc      	itt	lt
 8000b44:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b48:	4770      	bxlt	lr
 8000b4a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b52:	f1c2 0218 	rsb	r2, r2, #24
 8000b56:	f1c2 0c20 	rsb	ip, r2, #32
 8000b5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b62:	bf18      	it	ne
 8000b64:	f040 0001 	orrne.w	r0, r0, #1
 8000b68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b74:	ea40 000c 	orr.w	r0, r0, ip
 8000b78:	fa23 f302 	lsr.w	r3, r3, r2
 8000b7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b80:	e7cc      	b.n	8000b1c <__aeabi_d2f+0x14>
 8000b82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b86:	d107      	bne.n	8000b98 <__aeabi_d2f+0x90>
 8000b88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b8c:	bf1e      	ittt	ne
 8000b8e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b92:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b96:	4770      	bxne	lr
 8000b98:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b9c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ba0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <APPD_EnableCPU2>:
/* USER CODE END APPD_Init */
  return;
}

void APPD_EnableCPU2( void )
{
 8000ba8:	b5b0      	push	{r4, r5, r7, lr}
 8000baa:	b088      	sub	sp, #32
 8000bac:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 8000bae:	4b0b      	ldr	r3, [pc, #44]	@ (8000bdc <APPD_EnableCPU2+0x34>)
 8000bb0:	1d3c      	adds	r4, r7, #4
 8000bb2:	461d      	mov	r5, r3
 8000bb4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bb6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bb8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000bbc:	c403      	stmia	r4!, {r0, r1}
 8000bbe:	8022      	strh	r2, [r4, #0]
 8000bc0:	3402      	adds	r4, #2
 8000bc2:	0c13      	lsrs	r3, r2, #16
 8000bc4:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 8000bc6:	f00e f807 	bl	800ebd8 <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 8000bca:	1d3b      	adds	r3, r7, #4
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f00d fa98 	bl	800e102 <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 8000bd2:	bf00      	nop
}
 8000bd4:	3720      	adds	r7, #32
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bdb0      	pop	{r4, r5, r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	080121ac 	.word	0x080121ac

08000be0 <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 8000be0:	b480      	push	{r7}
 8000be2:	b083      	sub	sp, #12
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 8000be8:	4b07      	ldr	r3, [pc, #28]	@ (8000c08 <LL_C2_PWR_SetPowerMode+0x28>)
 8000bea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000bee:	f023 0207 	bic.w	r2, r3, #7
 8000bf2:	4905      	ldr	r1, [pc, #20]	@ (8000c08 <LL_C2_PWR_SetPowerMode+0x28>)
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	4313      	orrs	r3, r2
 8000bf8:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 8000bfc:	bf00      	nop
 8000bfe:	370c      	adds	r7, #12
 8000c00:	46bd      	mov	sp, r7
 8000c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c06:	4770      	bx	lr
 8000c08:	58000400 	.word	0x58000400

08000c0c <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	b083      	sub	sp, #12
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8000c14:	4b06      	ldr	r3, [pc, #24]	@ (8000c30 <LL_EXTI_EnableIT_32_63+0x24>)
 8000c16:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8000c1a:	4905      	ldr	r1, [pc, #20]	@ (8000c30 <LL_EXTI_EnableIT_32_63+0x24>)
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	4313      	orrs	r3, r2
 8000c20:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8000c24:	bf00      	nop
 8000c26:	370c      	adds	r7, #12
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2e:	4770      	bx	lr
 8000c30:	58000800 	.word	0x58000800

08000c34 <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 8000c34:	b480      	push	{r7}
 8000c36:	b083      	sub	sp, #12
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 8000c3c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000c40:	4a0a      	ldr	r2, [pc, #40]	@ (8000c6c <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 8000c42:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 8000c46:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000c4a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000c4e:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	021b      	lsls	r3, r3, #8
 8000c56:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000c5a:	4313      	orrs	r3, r2
 8000c5c:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
}
 8000c60:	bf00      	nop
 8000c62:	370c      	adds	r7, #12
 8000c64:	46bd      	mov	sp, r7
 8000c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6a:	4770      	bx	lr
 8000c6c:	cafecafe 	.word	0xcafecafe

08000c70 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8000c70:	b480      	push	{r7}
 8000c72:	b083      	sub	sp, #12
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8000c78:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000c7c:	689b      	ldr	r3, [r3, #8]
 8000c7e:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8000c82:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	4313      	orrs	r3, r2
 8000c8a:	608b      	str	r3, [r1, #8]
}
 8000c8c:	bf00      	nop
 8000c8e:	370c      	adds	r7, #12
 8000c90:	46bd      	mov	sp, r7
 8000c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c96:	4770      	bx	lr

08000c98 <LL_DBGMCU_GetDeviceID>:
  * @note   For STM32WBxxxx devices, the device ID is 0x495
  * @rmtoll DBGMCU_IDCODE DEV_ID        LL_DBGMCU_GetDeviceID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFF (ex: device ID is 0x495)
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetDeviceID(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_DEV_ID));
 8000c9c:	4b04      	ldr	r3, [pc, #16]	@ (8000cb0 <LL_DBGMCU_GetDeviceID+0x18>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop
 8000cb0:	e0042000 	.word	0xe0042000

08000cb4 <LL_DBGMCU_GetRevisionID>:
  * @note   This field indicates the revision of the device.
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 8000cb8:	4b04      	ldr	r3, [pc, #16]	@ (8000ccc <LL_DBGMCU_GetRevisionID+0x18>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	0c1b      	lsrs	r3, r3, #16
 8000cbe:	b29b      	uxth	r3, r3
}
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc8:	4770      	bx	lr
 8000cca:	bf00      	nop
 8000ccc:	e0042000 	.word	0xe0042000

08000cd0 <LL_LPM_EnableSleep>:
  * @brief  Processor uses sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8000cd4:	4b05      	ldr	r3, [pc, #20]	@ (8000cec <LL_LPM_EnableSleep+0x1c>)
 8000cd6:	691b      	ldr	r3, [r3, #16]
 8000cd8:	4a04      	ldr	r2, [pc, #16]	@ (8000cec <LL_LPM_EnableSleep+0x1c>)
 8000cda:	f023 0304 	bic.w	r3, r3, #4
 8000cde:	6113      	str	r3, [r2, #16]
}
 8000ce0:	bf00      	nop
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce8:	4770      	bx	lr
 8000cea:	bf00      	nop
 8000cec:	e000ed00 	.word	0xe000ed00

08000cf0 <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	b083      	sub	sp, #12
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	22ff      	movs	r2, #255	@ 0xff
 8000cfc:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8000cfe:	bf00      	nop
 8000d00:	370c      	adds	r7, #12
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr

08000d0a <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 8000d0a:	b480      	push	{r7}
 8000d0c:	b083      	sub	sp, #12
 8000d0e:	af00      	add	r7, sp, #0
 8000d10:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	22ca      	movs	r2, #202	@ 0xca
 8000d16:	625a      	str	r2, [r3, #36]	@ 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	2253      	movs	r2, #83	@ 0x53
 8000d1c:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8000d1e:	bf00      	nop
 8000d20:	370c      	adds	r7, #12
 8000d22:	46bd      	mov	sp, r7
 8000d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d28:	4770      	bx	lr

08000d2a <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 8000d2a:	b480      	push	{r7}
 8000d2c:	b083      	sub	sp, #12
 8000d2e:	af00      	add	r7, sp, #0
 8000d30:	6078      	str	r0, [r7, #4]
 8000d32:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	689b      	ldr	r3, [r3, #8]
 8000d38:	f023 0207 	bic.w	r2, r3, #7
 8000d3c:	683b      	ldr	r3, [r7, #0]
 8000d3e:	431a      	orrs	r2, r3
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	609a      	str	r2, [r3, #8]
}
 8000d44:	bf00      	nop
 8000d46:	370c      	adds	r7, #12
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4e:	4770      	bx	lr

08000d50 <MX_APPE_Config>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8000d54:	4b04      	ldr	r3, [pc, #16]	@ (8000d68 <MX_APPE_Config+0x18>)
 8000d56:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000d5a:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device();
 8000d5c:	f000 f824 	bl	8000da8 <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 8000d60:	f000 f829 	bl	8000db6 <Config_HSE>

  return;
 8000d64:	bf00      	nop
}
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	58004000 	.word	0x58004000

08000d6c <MX_APPE_Init>:

void MX_APPE_Init(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	af00      	add	r7, sp, #0
  System_Init();       /**< System initialization */
 8000d70:	f000 f835 	bl	8000dde <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 8000d74:	f000 f84e 	bl	8000e14 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 8000d78:	4903      	ldr	r1, [pc, #12]	@ (8000d88 <MX_APPE_Init+0x1c>)
 8000d7a:	2000      	movs	r0, #0
 8000d7c:	f000 fd9a 	bl	80018b4 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 8000d80:	f000 f856 	bl	8000e30 <appe_Tl_Init>
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */

   return;
 8000d84:	bf00      	nop
}
 8000d86:	bd80      	pop	{r7, pc}
 8000d88:	200002e8 	.word	0x200002e8

08000d8c <Init_Smps>:

void Init_Smps(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif /* CFG_USE_SMPS != 0 */

  return;
 8000d90:	bf00      	nop
}
 8000d92:	46bd      	mov	sp, r7
 8000d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d98:	4770      	bx	lr

08000d9a <Init_Exti>:

void Init_Exti(void)
{
 8000d9a:	b580      	push	{r7, lr}
 8000d9c:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_36 | LL_EXTI_LINE_38);
 8000d9e:	2050      	movs	r0, #80	@ 0x50
 8000da0:	f7ff ff34 	bl	8000c0c <LL_EXTI_EnableIT_32_63>

  return;
 8000da4:	bf00      	nop
}
 8000da6:	bd80      	pop	{r7, pc}

08000da8 <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
  Reset_BackupDomain();

  Reset_IPCC();
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 8000dac:	bf00      	nop
}
 8000dae:	46bd      	mov	sp, r7
 8000db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db4:	4770      	bx	lr

08000db6 <Config_HSE>:
  return;
}
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 8000db6:	b580      	push	{r7, lr}
 8000db8:	b082      	sub	sp, #8
 8000dba:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 8000dbc:	2000      	movs	r0, #0
 8000dbe:	f00d ff97 	bl	800ecf0 <OTP_Read>
 8000dc2:	6078      	str	r0, [r7, #4]
  if (p_otp)
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d005      	beq.n	8000dd6 <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	799b      	ldrb	r3, [r3, #6]
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f7ff ff30 	bl	8000c34 <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 8000dd4:	bf00      	nop
 8000dd6:	bf00      	nop
}
 8000dd8:	3708      	adds	r7, #8
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}

08000dde <System_Init>:

static void System_Init(void)
{
 8000dde:	b580      	push	{r7, lr}
 8000de0:	af00      	add	r7, sp, #0
  Init_Smps();
 8000de2:	f7ff ffd3 	bl	8000d8c <Init_Smps>

  Init_Exti();
 8000de6:	f7ff ffd8 	bl	8000d9a <Init_Exti>

  Init_Rtc();
 8000dea:	f000 f803 	bl	8000df4 <Init_Rtc>

  return;
 8000dee:	bf00      	nop
}
 8000df0:	bd80      	pop	{r7, pc}
	...

08000df4 <Init_Rtc>:

static void Init_Rtc(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 8000df8:	4805      	ldr	r0, [pc, #20]	@ (8000e10 <Init_Rtc+0x1c>)
 8000dfa:	f7ff ff86 	bl	8000d0a <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 8000dfe:	2100      	movs	r1, #0
 8000e00:	4803      	ldr	r0, [pc, #12]	@ (8000e10 <Init_Rtc+0x1c>)
 8000e02:	f7ff ff92 	bl	8000d2a <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 8000e06:	4802      	ldr	r0, [pc, #8]	@ (8000e10 <Init_Rtc+0x1c>)
 8000e08:	f7ff ff72 	bl	8000cf0 <LL_RTC_EnableWriteProtection>

  return;
 8000e0c:	bf00      	nop
}
 8000e0e:	bd80      	pop	{r7, pc}
 8000e10:	40002800 	.word	0x40002800

08000e14 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8000e18:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8000e1c:	f7ff ff28 	bl	8000c70 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 8000e20:	f00f f8a6 	bl	800ff70 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 8000e24:	2004      	movs	r0, #4
 8000e26:	f7ff fedb 	bl	8000be0 <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif /* CFG_USB_INTERFACE_ENABLE != 0 */

  return;
 8000e2a:	bf00      	nop
}
 8000e2c:	bd80      	pop	{r7, pc}
	...

08000e30 <appe_Tl_Init>:

static void appe_Tl_Init(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b088      	sub	sp, #32
 8000e34:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 8000e36:	f00d fd19 	bl	800e86c <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask(1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc);
 8000e3a:	4a11      	ldr	r2, [pc, #68]	@ (8000e80 <appe_Tl_Init+0x50>)
 8000e3c:	2100      	movs	r1, #0
 8000e3e:	2010      	movs	r0, #16
 8000e40:	f00f f9d4 	bl	80101ec <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 8000e44:	4b0f      	ldr	r3, [pc, #60]	@ (8000e84 <appe_Tl_Init+0x54>)
 8000e46:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 8000e48:	4b0f      	ldr	r3, [pc, #60]	@ (8000e88 <appe_Tl_Init+0x58>)
 8000e4a:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 8000e4c:	463b      	mov	r3, r7
 8000e4e:	4619      	mov	r1, r3
 8000e50:	480e      	ldr	r0, [pc, #56]	@ (8000e8c <appe_Tl_Init+0x5c>)
 8000e52:	f00d fbcd 	bl	800e5f0 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 8000e56:	4b0e      	ldr	r3, [pc, #56]	@ (8000e90 <appe_Tl_Init+0x60>)
 8000e58:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 8000e5a:	4b0e      	ldr	r3, [pc, #56]	@ (8000e94 <appe_Tl_Init+0x64>)
 8000e5c:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 8000e5e:	4b0e      	ldr	r3, [pc, #56]	@ (8000e98 <appe_Tl_Init+0x68>)
 8000e60:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 8000e62:	f240 533c 	movw	r3, #1340	@ 0x53c
 8000e66:	617b      	str	r3, [r7, #20]
  TL_MM_Init(&tl_mm_config);
 8000e68:	f107 0308 	add.w	r3, r7, #8
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f00d fe3f 	bl	800eaf0 <TL_MM_Init>

  TL_Enable();
 8000e72:	f00d fcf5 	bl	800e860 <TL_Enable>

  return;
 8000e76:	bf00      	nop
}
 8000e78:	3720      	adds	r7, #32
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	0800e629 	.word	0x0800e629
 8000e84:	20030734 	.word	0x20030734
 8000e88:	08000e9d 	.word	0x08000e9d
 8000e8c:	08000eb5 	.word	0x08000eb5
 8000e90:	2003094c 	.word	0x2003094c
 8000e94:	20030840 	.word	0x20030840
 8000e98:	200301f8 	.word	0x200301f8

08000e9c <APPE_SysStatusNot>:

static void APPE_SysStatusNot(SHCI_TL_CmdStatus_t status)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	b083      	sub	sp, #12
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 8000ea6:	bf00      	nop
}
 8000ea8:	370c      	adds	r7, #12
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb0:	4770      	bx	lr
	...

08000eb4 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * (eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable)
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx(void * pPayload)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b088      	sub	sp, #32
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  WirelessFwInfo_t WirelessInfo;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	685b      	ldr	r3, [r3, #4]
 8000ec0:	330b      	adds	r3, #11
 8000ec2:	61fb      	str	r3, [r7, #28]

  switch(p_sys_event->subevtcode)
 8000ec4:	69fb      	ldr	r3, [r7, #28]
 8000ec6:	881b      	ldrh	r3, [r3, #0]
 8000ec8:	b29b      	uxth	r3, r3
 8000eca:	f5a3 4312 	sub.w	r3, r3, #37376	@ 0x9200
 8000ece:	2b07      	cmp	r3, #7
 8000ed0:	d81f      	bhi.n	8000f12 <APPE_SysUserEvtRx+0x5e>
 8000ed2:	a201      	add	r2, pc, #4	@ (adr r2, 8000ed8 <APPE_SysUserEvtRx+0x24>)
 8000ed4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ed8:	08000ef9 	.word	0x08000ef9
 8000edc:	08000f0b 	.word	0x08000f0b
 8000ee0:	08000f13 	.word	0x08000f13
 8000ee4:	08000f13 	.word	0x08000f13
 8000ee8:	08000f13 	.word	0x08000f13
 8000eec:	08000f13 	.word	0x08000f13
 8000ef0:	08000f13 	.word	0x08000f13
 8000ef4:	08000f13 	.word	0x08000f13
  {
  case SHCI_SUB_EVT_CODE_READY:
    /* Read the firmware version of both the wireless firmware and the FUS */
    SHCI_GetWirelessFwInfo(&WirelessInfo);
 8000ef8:	f107 030c 	add.w	r3, r7, #12
 8000efc:	4618      	mov	r0, r3
 8000efe:	f00d f92d 	bl	800e15c <SHCI_GetWirelessFwInfo>
    APP_DBG_MSG("Wireless Firmware version %d.%d.%d\n", WirelessInfo.VersionMajor, WirelessInfo.VersionMinor, WirelessInfo.VersionSub);
    APP_DBG_MSG("Wireless Firmware build %d\n", WirelessInfo.VersionReleaseType);
    APP_DBG_MSG("FUS version %d.%d.%d\n", WirelessInfo.FusVersionMajor, WirelessInfo.FusVersionMinor, WirelessInfo.FusVersionSub);

    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY\n\r");
    APPE_SysEvtReadyProcessing(pPayload);
 8000f02:	6878      	ldr	r0, [r7, #4]
 8000f04:	f000 f81b 	bl	8000f3e <APPE_SysEvtReadyProcessing>
    break;
 8000f08:	e004      	b.n	8000f14 <APPE_SysUserEvtRx+0x60>

  case SHCI_SUB_EVT_ERROR_NOTIF:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF \n\r");
    APPE_SysEvtError(pPayload);
 8000f0a:	6878      	ldr	r0, [r7, #4]
 8000f0c:	f000 f806 	bl	8000f1c <APPE_SysEvtError>
    break;
 8000f10:	e000      	b.n	8000f14 <APPE_SysUserEvtRx+0x60>
  case SHCI_SUB_EVT_NVM_END_ERASE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_ERASE\n\r");
    break;

  default:
    break;
 8000f12:	bf00      	nop
  }

  return;
 8000f14:	bf00      	nop
}
 8000f16:	3720      	adds	r7, #32
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}

08000f1c <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError(void * pPayload)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b085      	sub	sp, #20
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SCHI_SystemErrCode_t *p_sys_error_code;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	685b      	ldr	r3, [r3, #4]
 8000f28:	330b      	adds	r3, #11
 8000f2a:	60fb      	str	r3, [r7, #12]
  p_sys_error_code = (SCHI_SystemErrCode_t*) p_sys_event->payload;
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	3302      	adds	r3, #2
 8000f30:	60bb      	str	r3, [r7, #8]
  }
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
  }
  return;
 8000f32:	bf00      	nop
}
 8000f34:	3714      	adds	r7, #20
 8000f36:	46bd      	mov	sp, r7
 8000f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3c:	4770      	bx	lr

08000f3e <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing(void * pPayload)
{
 8000f3e:	b580      	push	{r7, lr}
 8000f40:	b08a      	sub	sp, #40	@ 0x28
 8000f42:	af00      	add	r7, sp, #0
 8000f44:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SHCI_C2_Ready_Evt_t *p_sys_ready_event;

  SHCI_C2_CONFIG_Cmd_Param_t config_param = {0};
 8000f46:	f107 0308 	add.w	r3, r7, #8
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	601a      	str	r2, [r3, #0]
 8000f4e:	605a      	str	r2, [r3, #4]
 8000f50:	609a      	str	r2, [r3, #8]
 8000f52:	60da      	str	r2, [r3, #12]
  uint32_t RevisionID=0;
 8000f54:	2300      	movs	r3, #0
 8000f56:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t DeviceID=0;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	623b      	str	r3, [r7, #32]

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	685b      	ldr	r3, [r3, #4]
 8000f60:	330b      	adds	r3, #11
 8000f62:	61fb      	str	r3, [r7, #28]
  p_sys_ready_event = (SHCI_C2_Ready_Evt_t*) p_sys_event->payload;
 8000f64:	69fb      	ldr	r3, [r7, #28]
 8000f66:	3302      	adds	r3, #2
 8000f68:	61bb      	str	r3, [r7, #24]

  if (p_sys_ready_event->sysevt_ready_rsp == WIRELESS_FW_RUNNING)
 8000f6a:	69bb      	ldr	r3, [r7, #24]
 8000f6c:	781b      	ldrb	r3, [r3, #0]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d11d      	bne.n	8000fae <APPE_SysEvtReadyProcessing+0x70>
    * The wireless firmware is running on the CPU2
    */
    APP_DBG_MSG(">>== WIRELESS_FW_RUNNING \n");

    /* Traces channel initialization */
    APPD_EnableCPU2();
 8000f72:	f7ff fe19 	bl	8000ba8 <APPD_EnableCPU2>

    /* Enable all events Notification */
    config_param.PayloadCmdSize = SHCI_C2_CONFIG_PAYLOAD_CMD_SIZE;
 8000f76:	230f      	movs	r3, #15
 8000f78:	723b      	strb	r3, [r7, #8]
    config_param.EvtMask1 = SHCI_C2_CONFIG_EVTMASK1_BIT0_ERROR_NOTIF_ENABLE
 8000f7a:	237f      	movs	r3, #127	@ 0x7f
 8000f7c:	72bb      	strb	r3, [r7, #10]
    * @brief  Return the device revision identifier
    * @note   This field indicates the revision of the device.
    * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
    * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
    */
    RevisionID = LL_DBGMCU_GetRevisionID();
 8000f7e:	f7ff fe99 	bl	8000cb4 <LL_DBGMCU_GetRevisionID>
 8000f82:	6278      	str	r0, [r7, #36]	@ 0x24

    APP_DBG_MSG(">>== DBGMCU_GetRevisionID= %lx \n\r", RevisionID);

    config_param.RevisionID = (uint16_t)RevisionID;
 8000f84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f86:	b29b      	uxth	r3, r3
 8000f88:	82bb      	strh	r3, [r7, #20]

    DeviceID = LL_DBGMCU_GetDeviceID();
 8000f8a:	f7ff fe85 	bl	8000c98 <LL_DBGMCU_GetDeviceID>
 8000f8e:	6238      	str	r0, [r7, #32]
    APP_DBG_MSG(">>== DBGMCU_GetDeviceID= %lx \n\r", DeviceID);
    config_param.DeviceID = (uint16_t)DeviceID;
 8000f90:	6a3b      	ldr	r3, [r7, #32]
 8000f92:	b29b      	uxth	r3, r3
 8000f94:	82fb      	strh	r3, [r7, #22]
    (void)SHCI_C2_Config(&config_param);
 8000f96:	f107 0308 	add.w	r3, r7, #8
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f00d f8c8 	bl	800e130 <SHCI_C2_Config>

    APP_BLE_Init();
 8000fa0:	f00d ffb0 	bl	800ef04 <APP_BLE_Init>
    UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 8000fa4:	2100      	movs	r1, #0
 8000fa6:	2001      	movs	r0, #1
 8000fa8:	f00e fff4 	bl	800ff94 <UTIL_LPM_SetOffMode>
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
  }

  return;
 8000fac:	e007      	b.n	8000fbe <APPE_SysEvtReadyProcessing+0x80>
  else if (p_sys_ready_event->sysevt_ready_rsp == FUS_FW_RUNNING)
 8000fae:	69bb      	ldr	r3, [r7, #24]
 8000fb0:	781b      	ldrb	r3, [r3, #0]
 8000fb2:	2b01      	cmp	r3, #1
 8000fb4:	d103      	bne.n	8000fbe <APPE_SysEvtReadyProcessing+0x80>
    ((tSHCI_UserEvtRxParam*)pPayload)->status = SHCI_TL_UserEventFlow_Disable;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	2200      	movs	r2, #0
 8000fba:	701a      	strb	r2, [r3, #0]
  return;
 8000fbc:	bf00      	nop
 8000fbe:	bf00      	nop
}
 8000fc0:	3728      	adds	r7, #40	@ 0x28
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}

08000fc6 <HAL_Delay>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void HAL_Delay(uint32_t Delay)
{
 8000fc6:	b580      	push	{r7, lr}
 8000fc8:	b084      	sub	sp, #16
 8000fca:	af00      	add	r7, sp, #0
 8000fcc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fce:	f006 fcaf 	bl	8007930 <HAL_GetTick>
 8000fd2:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fde:	d00a      	beq.n	8000ff6 <HAL_Delay+0x30>
  {
    wait += HAL_GetTickFreq();
 8000fe0:	f006 fcbe 	bl	8007960 <HAL_GetTickFreq>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	461a      	mov	r2, r3
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	4413      	add	r3, r2
 8000fec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000fee:	e002      	b.n	8000ff6 <HAL_Delay+0x30>
  {
    /************************************************************************************
     * ENTER SLEEP MODE
     ***********************************************************************************/
    LL_LPM_EnableSleep(); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 8000ff0:	f7ff fe6e 	bl	8000cd0 <LL_LPM_EnableSleep>
     */
  #if defined (__CC_ARM) || defined (__ARMCC_VERSION)
    __force_stores();
  #endif /* __ARMCC_VERSION */

    __WFI();
 8000ff4:	bf30      	wfi
  while ((HAL_GetTick() - tickstart) < wait)
 8000ff6:	f006 fc9b 	bl	8007930 <HAL_GetTick>
 8000ffa:	4602      	mov	r2, r0
 8000ffc:	68bb      	ldr	r3, [r7, #8]
 8000ffe:	1ad3      	subs	r3, r2, r3
 8001000:	68fa      	ldr	r2, [r7, #12]
 8001002:	429a      	cmp	r2, r3
 8001004:	d8f4      	bhi.n	8000ff0 <HAL_Delay+0x2a>
  }
}
 8001006:	bf00      	nop
 8001008:	bf00      	nop
 800100a:	3710      	adds	r7, #16
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}

08001010 <MX_APPE_Process>:

void MX_APPE_Process(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8001014:	f04f 30ff 	mov.w	r0, #4294967295
 8001018:	f00e ffec 	bl	800fff4 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 800101c:	bf00      	nop
 800101e:	bd80      	pop	{r7, pc}

08001020 <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
#endif /* CFG_LPM_SUPPORTED == 1 */
  return;
 8001024:	bf00      	nop
}
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr

0800102e <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle(UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm)
{
 800102e:	b580      	push	{r7, lr}
 8001030:	b082      	sub	sp, #8
 8001032:	af00      	add	r7, sp, #0
 8001034:	6078      	str	r0, [r7, #4]
 8001036:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8001038:	f04f 30ff 	mov.w	r0, #4294967295
 800103c:	f00e ffda 	bl	800fff4 <UTIL_SEQ_Run>
  return;
 8001040:	bf00      	nop
}
 8001042:	3708      	adds	r7, #8
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}

08001048 <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8001050:	2100      	movs	r1, #0
 8001052:	2010      	movs	r0, #16
 8001054:	f00f f8ec 	bl	8010230 <UTIL_SEQ_SetTask>
  return;
 8001058:	bf00      	nop
}
 800105a:	3708      	adds	r7, #8
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}

08001060 <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b082      	sub	sp, #8
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 8001068:	2002      	movs	r0, #2
 800106a:	f00f f94d 	bl	8010308 <UTIL_SEQ_SetEvt>
  return;
 800106e:	bf00      	nop
}
 8001070:	3708      	adds	r7, #8
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}

08001076 <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 8001076:	b580      	push	{r7, lr}
 8001078:	b082      	sub	sp, #8
 800107a:	af00      	add	r7, sp, #0
 800107c:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 800107e:	2002      	movs	r0, #2
 8001080:	f00f f962 	bl	8010348 <UTIL_SEQ_WaitEvt>
  return;
 8001084:	bf00      	nop
}
 8001086:	3708      	adds	r7, #8
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}

0800108c <LL_EXTI_EnableIT_0_31>:
{
 800108c:	b480      	push	{r7}
 800108e:	b083      	sub	sp, #12
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8001094:	4b06      	ldr	r3, [pc, #24]	@ (80010b0 <LL_EXTI_EnableIT_0_31+0x24>)
 8001096:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 800109a:	4905      	ldr	r1, [pc, #20]	@ (80010b0 <LL_EXTI_EnableIT_0_31+0x24>)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	4313      	orrs	r3, r2
 80010a0:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 80010a4:	bf00      	nop
 80010a6:	370c      	adds	r7, #12
 80010a8:	46bd      	mov	sp, r7
 80010aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ae:	4770      	bx	lr
 80010b0:	58000800 	.word	0x58000800

080010b4 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b083      	sub	sp, #12
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 80010bc:	4b05      	ldr	r3, [pc, #20]	@ (80010d4 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80010be:	681a      	ldr	r2, [r3, #0]
 80010c0:	4904      	ldr	r1, [pc, #16]	@ (80010d4 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	4313      	orrs	r3, r2
 80010c6:	600b      	str	r3, [r1, #0]

}
 80010c8:	bf00      	nop
 80010ca:	370c      	adds	r7, #12
 80010cc:	46bd      	mov	sp, r7
 80010ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d2:	4770      	bx	lr
 80010d4:	58000800 	.word	0x58000800

080010d8 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	b083      	sub	sp, #12
 80010dc:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80010de:	4b0d      	ldr	r3, [pc, #52]	@ (8001114 <ReadRtcSsrValue+0x3c>)
 80010e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80010e2:	b29b      	uxth	r3, r3
 80010e4:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80010e6:	4b0b      	ldr	r3, [pc, #44]	@ (8001114 <ReadRtcSsrValue+0x3c>)
 80010e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80010ea:	b29b      	uxth	r3, r3
 80010ec:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 80010ee:	e005      	b.n	80010fc <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80010f4:	4b07      	ldr	r3, [pc, #28]	@ (8001114 <ReadRtcSsrValue+0x3c>)
 80010f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80010f8:	b29b      	uxth	r3, r3
 80010fa:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 80010fc:	687a      	ldr	r2, [r7, #4]
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	429a      	cmp	r2, r3
 8001102:	d1f5      	bne.n	80010f0 <ReadRtcSsrValue+0x18>
  }

  return second_read;
 8001104:	683b      	ldr	r3, [r7, #0]
}
 8001106:	4618      	mov	r0, r3
 8001108:	370c      	adds	r7, #12
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr
 8001112:	bf00      	nop
 8001114:	40002800 	.word	0x40002800

08001118 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8001118:	b480      	push	{r7}
 800111a:	b085      	sub	sp, #20
 800111c:	af00      	add	r7, sp, #0
 800111e:	4603      	mov	r3, r0
 8001120:	460a      	mov	r2, r1
 8001122:	71fb      	strb	r3, [r7, #7]
 8001124:	4613      	mov	r3, r2
 8001126:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 8001128:	79ba      	ldrb	r2, [r7, #6]
 800112a:	491d      	ldr	r1, [pc, #116]	@ (80011a0 <LinkTimerAfter+0x88>)
 800112c:	4613      	mov	r3, r2
 800112e:	005b      	lsls	r3, r3, #1
 8001130:	4413      	add	r3, r2
 8001132:	00db      	lsls	r3, r3, #3
 8001134:	440b      	add	r3, r1
 8001136:	3315      	adds	r3, #21
 8001138:	781b      	ldrb	r3, [r3, #0]
 800113a:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800113c:	7bfb      	ldrb	r3, [r7, #15]
 800113e:	2b06      	cmp	r3, #6
 8001140:	d009      	beq.n	8001156 <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 8001142:	7bfa      	ldrb	r2, [r7, #15]
 8001144:	4916      	ldr	r1, [pc, #88]	@ (80011a0 <LinkTimerAfter+0x88>)
 8001146:	4613      	mov	r3, r2
 8001148:	005b      	lsls	r3, r3, #1
 800114a:	4413      	add	r3, r2
 800114c:	00db      	lsls	r3, r3, #3
 800114e:	440b      	add	r3, r1
 8001150:	3314      	adds	r3, #20
 8001152:	79fa      	ldrb	r2, [r7, #7]
 8001154:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 8001156:	79fa      	ldrb	r2, [r7, #7]
 8001158:	4911      	ldr	r1, [pc, #68]	@ (80011a0 <LinkTimerAfter+0x88>)
 800115a:	4613      	mov	r3, r2
 800115c:	005b      	lsls	r3, r3, #1
 800115e:	4413      	add	r3, r2
 8001160:	00db      	lsls	r3, r3, #3
 8001162:	440b      	add	r3, r1
 8001164:	3315      	adds	r3, #21
 8001166:	7bfa      	ldrb	r2, [r7, #15]
 8001168:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 800116a:	79fa      	ldrb	r2, [r7, #7]
 800116c:	490c      	ldr	r1, [pc, #48]	@ (80011a0 <LinkTimerAfter+0x88>)
 800116e:	4613      	mov	r3, r2
 8001170:	005b      	lsls	r3, r3, #1
 8001172:	4413      	add	r3, r2
 8001174:	00db      	lsls	r3, r3, #3
 8001176:	440b      	add	r3, r1
 8001178:	3314      	adds	r3, #20
 800117a:	79ba      	ldrb	r2, [r7, #6]
 800117c:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 800117e:	79ba      	ldrb	r2, [r7, #6]
 8001180:	4907      	ldr	r1, [pc, #28]	@ (80011a0 <LinkTimerAfter+0x88>)
 8001182:	4613      	mov	r3, r2
 8001184:	005b      	lsls	r3, r3, #1
 8001186:	4413      	add	r3, r2
 8001188:	00db      	lsls	r3, r3, #3
 800118a:	440b      	add	r3, r1
 800118c:	3315      	adds	r3, #21
 800118e:	79fa      	ldrb	r2, [r7, #7]
 8001190:	701a      	strb	r2, [r3, #0]

  return;
 8001192:	bf00      	nop
}
 8001194:	3714      	adds	r7, #20
 8001196:	46bd      	mov	sp, r7
 8001198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119c:	4770      	bx	lr
 800119e:	bf00      	nop
 80011a0:	2000014c 	.word	0x2000014c

080011a4 <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 80011a4:	b480      	push	{r7}
 80011a6:	b085      	sub	sp, #20
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	4603      	mov	r3, r0
 80011ac:	460a      	mov	r2, r1
 80011ae:	71fb      	strb	r3, [r7, #7]
 80011b0:	4613      	mov	r3, r2
 80011b2:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 80011b4:	4b29      	ldr	r3, [pc, #164]	@ (800125c <LinkTimerBefore+0xb8>)
 80011b6:	781b      	ldrb	r3, [r3, #0]
 80011b8:	b2db      	uxtb	r3, r3
 80011ba:	79ba      	ldrb	r2, [r7, #6]
 80011bc:	429a      	cmp	r2, r3
 80011be:	d032      	beq.n	8001226 <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 80011c0:	79ba      	ldrb	r2, [r7, #6]
 80011c2:	4927      	ldr	r1, [pc, #156]	@ (8001260 <LinkTimerBefore+0xbc>)
 80011c4:	4613      	mov	r3, r2
 80011c6:	005b      	lsls	r3, r3, #1
 80011c8:	4413      	add	r3, r2
 80011ca:	00db      	lsls	r3, r3, #3
 80011cc:	440b      	add	r3, r1
 80011ce:	3314      	adds	r3, #20
 80011d0:	781b      	ldrb	r3, [r3, #0]
 80011d2:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 80011d4:	7bfa      	ldrb	r2, [r7, #15]
 80011d6:	4922      	ldr	r1, [pc, #136]	@ (8001260 <LinkTimerBefore+0xbc>)
 80011d8:	4613      	mov	r3, r2
 80011da:	005b      	lsls	r3, r3, #1
 80011dc:	4413      	add	r3, r2
 80011de:	00db      	lsls	r3, r3, #3
 80011e0:	440b      	add	r3, r1
 80011e2:	3315      	adds	r3, #21
 80011e4:	79fa      	ldrb	r2, [r7, #7]
 80011e6:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 80011e8:	79fa      	ldrb	r2, [r7, #7]
 80011ea:	491d      	ldr	r1, [pc, #116]	@ (8001260 <LinkTimerBefore+0xbc>)
 80011ec:	4613      	mov	r3, r2
 80011ee:	005b      	lsls	r3, r3, #1
 80011f0:	4413      	add	r3, r2
 80011f2:	00db      	lsls	r3, r3, #3
 80011f4:	440b      	add	r3, r1
 80011f6:	3315      	adds	r3, #21
 80011f8:	79ba      	ldrb	r2, [r7, #6]
 80011fa:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 80011fc:	79fa      	ldrb	r2, [r7, #7]
 80011fe:	4918      	ldr	r1, [pc, #96]	@ (8001260 <LinkTimerBefore+0xbc>)
 8001200:	4613      	mov	r3, r2
 8001202:	005b      	lsls	r3, r3, #1
 8001204:	4413      	add	r3, r2
 8001206:	00db      	lsls	r3, r3, #3
 8001208:	440b      	add	r3, r1
 800120a:	3314      	adds	r3, #20
 800120c:	7bfa      	ldrb	r2, [r7, #15]
 800120e:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8001210:	79ba      	ldrb	r2, [r7, #6]
 8001212:	4913      	ldr	r1, [pc, #76]	@ (8001260 <LinkTimerBefore+0xbc>)
 8001214:	4613      	mov	r3, r2
 8001216:	005b      	lsls	r3, r3, #1
 8001218:	4413      	add	r3, r2
 800121a:	00db      	lsls	r3, r3, #3
 800121c:	440b      	add	r3, r1
 800121e:	3314      	adds	r3, #20
 8001220:	79fa      	ldrb	r2, [r7, #7]
 8001222:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 8001224:	e014      	b.n	8001250 <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 8001226:	79fa      	ldrb	r2, [r7, #7]
 8001228:	490d      	ldr	r1, [pc, #52]	@ (8001260 <LinkTimerBefore+0xbc>)
 800122a:	4613      	mov	r3, r2
 800122c:	005b      	lsls	r3, r3, #1
 800122e:	4413      	add	r3, r2
 8001230:	00db      	lsls	r3, r3, #3
 8001232:	440b      	add	r3, r1
 8001234:	3315      	adds	r3, #21
 8001236:	79ba      	ldrb	r2, [r7, #6]
 8001238:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 800123a:	79ba      	ldrb	r2, [r7, #6]
 800123c:	4908      	ldr	r1, [pc, #32]	@ (8001260 <LinkTimerBefore+0xbc>)
 800123e:	4613      	mov	r3, r2
 8001240:	005b      	lsls	r3, r3, #1
 8001242:	4413      	add	r3, r2
 8001244:	00db      	lsls	r3, r3, #3
 8001246:	440b      	add	r3, r1
 8001248:	3314      	adds	r3, #20
 800124a:	79fa      	ldrb	r2, [r7, #7]
 800124c:	701a      	strb	r2, [r3, #0]
  return;
 800124e:	bf00      	nop
}
 8001250:	3714      	adds	r7, #20
 8001252:	46bd      	mov	sp, r7
 8001254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001258:	4770      	bx	lr
 800125a:	bf00      	nop
 800125c:	200001dc 	.word	0x200001dc
 8001260:	2000014c 	.word	0x2000014c

08001264 <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b084      	sub	sp, #16
 8001268:	af00      	add	r7, sp, #0
 800126a:	4603      	mov	r3, r0
 800126c:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800126e:	4b4e      	ldr	r3, [pc, #312]	@ (80013a8 <linkTimer+0x144>)
 8001270:	781b      	ldrb	r3, [r3, #0]
 8001272:	b2db      	uxtb	r3, r3
 8001274:	2b06      	cmp	r3, #6
 8001276:	d118      	bne.n	80012aa <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8001278:	4b4b      	ldr	r3, [pc, #300]	@ (80013a8 <linkTimer+0x144>)
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	b2da      	uxtb	r2, r3
 800127e:	4b4b      	ldr	r3, [pc, #300]	@ (80013ac <linkTimer+0x148>)
 8001280:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 8001282:	4a49      	ldr	r2, [pc, #292]	@ (80013a8 <linkTimer+0x144>)
 8001284:	79fb      	ldrb	r3, [r7, #7]
 8001286:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8001288:	79fa      	ldrb	r2, [r7, #7]
 800128a:	4949      	ldr	r1, [pc, #292]	@ (80013b0 <linkTimer+0x14c>)
 800128c:	4613      	mov	r3, r2
 800128e:	005b      	lsls	r3, r3, #1
 8001290:	4413      	add	r3, r2
 8001292:	00db      	lsls	r3, r3, #3
 8001294:	440b      	add	r3, r1
 8001296:	3315      	adds	r3, #21
 8001298:	2206      	movs	r2, #6
 800129a:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 800129c:	4b45      	ldr	r3, [pc, #276]	@ (80013b4 <linkTimer+0x150>)
 800129e:	f04f 32ff 	mov.w	r2, #4294967295
 80012a2:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 80012a4:	2300      	movs	r3, #0
 80012a6:	81fb      	strh	r3, [r7, #14]
 80012a8:	e078      	b.n	800139c <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 80012aa:	f000 f909 	bl	80014c0 <ReturnTimeElapsed>
 80012ae:	4603      	mov	r3, r0
 80012b0:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 80012b2:	79fa      	ldrb	r2, [r7, #7]
 80012b4:	493e      	ldr	r1, [pc, #248]	@ (80013b0 <linkTimer+0x14c>)
 80012b6:	4613      	mov	r3, r2
 80012b8:	005b      	lsls	r3, r3, #1
 80012ba:	4413      	add	r3, r2
 80012bc:	00db      	lsls	r3, r3, #3
 80012be:	440b      	add	r3, r1
 80012c0:	3308      	adds	r3, #8
 80012c2:	6819      	ldr	r1, [r3, #0]
 80012c4:	89fb      	ldrh	r3, [r7, #14]
 80012c6:	79fa      	ldrb	r2, [r7, #7]
 80012c8:	4419      	add	r1, r3
 80012ca:	4839      	ldr	r0, [pc, #228]	@ (80013b0 <linkTimer+0x14c>)
 80012cc:	4613      	mov	r3, r2
 80012ce:	005b      	lsls	r3, r3, #1
 80012d0:	4413      	add	r3, r2
 80012d2:	00db      	lsls	r3, r3, #3
 80012d4:	4403      	add	r3, r0
 80012d6:	3308      	adds	r3, #8
 80012d8:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 80012da:	79fa      	ldrb	r2, [r7, #7]
 80012dc:	4934      	ldr	r1, [pc, #208]	@ (80013b0 <linkTimer+0x14c>)
 80012de:	4613      	mov	r3, r2
 80012e0:	005b      	lsls	r3, r3, #1
 80012e2:	4413      	add	r3, r2
 80012e4:	00db      	lsls	r3, r3, #3
 80012e6:	440b      	add	r3, r1
 80012e8:	3308      	adds	r3, #8
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 80012ee:	4b2e      	ldr	r3, [pc, #184]	@ (80013a8 <linkTimer+0x144>)
 80012f0:	781b      	ldrb	r3, [r3, #0]
 80012f2:	b2db      	uxtb	r3, r3
 80012f4:	4619      	mov	r1, r3
 80012f6:	4a2e      	ldr	r2, [pc, #184]	@ (80013b0 <linkTimer+0x14c>)
 80012f8:	460b      	mov	r3, r1
 80012fa:	005b      	lsls	r3, r3, #1
 80012fc:	440b      	add	r3, r1
 80012fe:	00db      	lsls	r3, r3, #3
 8001300:	4413      	add	r3, r2
 8001302:	3308      	adds	r3, #8
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	68ba      	ldr	r2, [r7, #8]
 8001308:	429a      	cmp	r2, r3
 800130a:	d337      	bcc.n	800137c <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 800130c:	4b26      	ldr	r3, [pc, #152]	@ (80013a8 <linkTimer+0x144>)
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 8001312:	7b7a      	ldrb	r2, [r7, #13]
 8001314:	4926      	ldr	r1, [pc, #152]	@ (80013b0 <linkTimer+0x14c>)
 8001316:	4613      	mov	r3, r2
 8001318:	005b      	lsls	r3, r3, #1
 800131a:	4413      	add	r3, r2
 800131c:	00db      	lsls	r3, r3, #3
 800131e:	440b      	add	r3, r1
 8001320:	3315      	adds	r3, #21
 8001322:	781b      	ldrb	r3, [r3, #0]
 8001324:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8001326:	e013      	b.n	8001350 <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8001328:	7b7a      	ldrb	r2, [r7, #13]
 800132a:	4921      	ldr	r1, [pc, #132]	@ (80013b0 <linkTimer+0x14c>)
 800132c:	4613      	mov	r3, r2
 800132e:	005b      	lsls	r3, r3, #1
 8001330:	4413      	add	r3, r2
 8001332:	00db      	lsls	r3, r3, #3
 8001334:	440b      	add	r3, r1
 8001336:	3315      	adds	r3, #21
 8001338:	781b      	ldrb	r3, [r3, #0]
 800133a:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 800133c:	7b7a      	ldrb	r2, [r7, #13]
 800133e:	491c      	ldr	r1, [pc, #112]	@ (80013b0 <linkTimer+0x14c>)
 8001340:	4613      	mov	r3, r2
 8001342:	005b      	lsls	r3, r3, #1
 8001344:	4413      	add	r3, r2
 8001346:	00db      	lsls	r3, r3, #3
 8001348:	440b      	add	r3, r1
 800134a:	3315      	adds	r3, #21
 800134c:	781b      	ldrb	r3, [r3, #0]
 800134e:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8001350:	7b3b      	ldrb	r3, [r7, #12]
 8001352:	2b06      	cmp	r3, #6
 8001354:	d00b      	beq.n	800136e <linkTimer+0x10a>
 8001356:	7b3a      	ldrb	r2, [r7, #12]
 8001358:	4915      	ldr	r1, [pc, #84]	@ (80013b0 <linkTimer+0x14c>)
 800135a:	4613      	mov	r3, r2
 800135c:	005b      	lsls	r3, r3, #1
 800135e:	4413      	add	r3, r2
 8001360:	00db      	lsls	r3, r3, #3
 8001362:	440b      	add	r3, r1
 8001364:	3308      	adds	r3, #8
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	68ba      	ldr	r2, [r7, #8]
 800136a:	429a      	cmp	r2, r3
 800136c:	d2dc      	bcs.n	8001328 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 800136e:	7b7a      	ldrb	r2, [r7, #13]
 8001370:	79fb      	ldrb	r3, [r7, #7]
 8001372:	4611      	mov	r1, r2
 8001374:	4618      	mov	r0, r3
 8001376:	f7ff fecf 	bl	8001118 <LinkTimerAfter>
 800137a:	e00f      	b.n	800139c <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 800137c:	4b0a      	ldr	r3, [pc, #40]	@ (80013a8 <linkTimer+0x144>)
 800137e:	781b      	ldrb	r3, [r3, #0]
 8001380:	b2da      	uxtb	r2, r3
 8001382:	79fb      	ldrb	r3, [r7, #7]
 8001384:	4611      	mov	r1, r2
 8001386:	4618      	mov	r0, r3
 8001388:	f7ff ff0c 	bl	80011a4 <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 800138c:	4b06      	ldr	r3, [pc, #24]	@ (80013a8 <linkTimer+0x144>)
 800138e:	781b      	ldrb	r3, [r3, #0]
 8001390:	b2da      	uxtb	r2, r3
 8001392:	4b06      	ldr	r3, [pc, #24]	@ (80013ac <linkTimer+0x148>)
 8001394:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 8001396:	4a04      	ldr	r2, [pc, #16]	@ (80013a8 <linkTimer+0x144>)
 8001398:	79fb      	ldrb	r3, [r7, #7]
 800139a:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 800139c:	89fb      	ldrh	r3, [r7, #14]
}
 800139e:	4618      	mov	r0, r3
 80013a0:	3710      	adds	r7, #16
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	200001dc 	.word	0x200001dc
 80013ac:	200001dd 	.word	0x200001dd
 80013b0:	2000014c 	.word	0x2000014c
 80013b4:	200001e0 	.word	0x200001e0

080013b8 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b085      	sub	sp, #20
 80013bc:	af00      	add	r7, sp, #0
 80013be:	4603      	mov	r3, r0
 80013c0:	460a      	mov	r2, r1
 80013c2:	71fb      	strb	r3, [r7, #7]
 80013c4:	4613      	mov	r3, r2
 80013c6:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 80013c8:	4b39      	ldr	r3, [pc, #228]	@ (80014b0 <UnlinkTimer+0xf8>)
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	b2db      	uxtb	r3, r3
 80013ce:	79fa      	ldrb	r2, [r7, #7]
 80013d0:	429a      	cmp	r2, r3
 80013d2:	d111      	bne.n	80013f8 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 80013d4:	4b36      	ldr	r3, [pc, #216]	@ (80014b0 <UnlinkTimer+0xf8>)
 80013d6:	781b      	ldrb	r3, [r3, #0]
 80013d8:	b2da      	uxtb	r2, r3
 80013da:	4b36      	ldr	r3, [pc, #216]	@ (80014b4 <UnlinkTimer+0xfc>)
 80013dc:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 80013de:	79fa      	ldrb	r2, [r7, #7]
 80013e0:	4935      	ldr	r1, [pc, #212]	@ (80014b8 <UnlinkTimer+0x100>)
 80013e2:	4613      	mov	r3, r2
 80013e4:	005b      	lsls	r3, r3, #1
 80013e6:	4413      	add	r3, r2
 80013e8:	00db      	lsls	r3, r3, #3
 80013ea:	440b      	add	r3, r1
 80013ec:	3315      	adds	r3, #21
 80013ee:	781b      	ldrb	r3, [r3, #0]
 80013f0:	b2da      	uxtb	r2, r3
 80013f2:	4b2f      	ldr	r3, [pc, #188]	@ (80014b0 <UnlinkTimer+0xf8>)
 80013f4:	701a      	strb	r2, [r3, #0]
 80013f6:	e03e      	b.n	8001476 <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 80013f8:	79fa      	ldrb	r2, [r7, #7]
 80013fa:	492f      	ldr	r1, [pc, #188]	@ (80014b8 <UnlinkTimer+0x100>)
 80013fc:	4613      	mov	r3, r2
 80013fe:	005b      	lsls	r3, r3, #1
 8001400:	4413      	add	r3, r2
 8001402:	00db      	lsls	r3, r3, #3
 8001404:	440b      	add	r3, r1
 8001406:	3314      	adds	r3, #20
 8001408:	781b      	ldrb	r3, [r3, #0]
 800140a:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 800140c:	79fa      	ldrb	r2, [r7, #7]
 800140e:	492a      	ldr	r1, [pc, #168]	@ (80014b8 <UnlinkTimer+0x100>)
 8001410:	4613      	mov	r3, r2
 8001412:	005b      	lsls	r3, r3, #1
 8001414:	4413      	add	r3, r2
 8001416:	00db      	lsls	r3, r3, #3
 8001418:	440b      	add	r3, r1
 800141a:	3315      	adds	r3, #21
 800141c:	781b      	ldrb	r3, [r3, #0]
 800141e:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8001420:	79f9      	ldrb	r1, [r7, #7]
 8001422:	7bfa      	ldrb	r2, [r7, #15]
 8001424:	4824      	ldr	r0, [pc, #144]	@ (80014b8 <UnlinkTimer+0x100>)
 8001426:	460b      	mov	r3, r1
 8001428:	005b      	lsls	r3, r3, #1
 800142a:	440b      	add	r3, r1
 800142c:	00db      	lsls	r3, r3, #3
 800142e:	4403      	add	r3, r0
 8001430:	3315      	adds	r3, #21
 8001432:	781b      	ldrb	r3, [r3, #0]
 8001434:	b2d8      	uxtb	r0, r3
 8001436:	4920      	ldr	r1, [pc, #128]	@ (80014b8 <UnlinkTimer+0x100>)
 8001438:	4613      	mov	r3, r2
 800143a:	005b      	lsls	r3, r3, #1
 800143c:	4413      	add	r3, r2
 800143e:	00db      	lsls	r3, r3, #3
 8001440:	440b      	add	r3, r1
 8001442:	3315      	adds	r3, #21
 8001444:	4602      	mov	r2, r0
 8001446:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001448:	7bbb      	ldrb	r3, [r7, #14]
 800144a:	2b06      	cmp	r3, #6
 800144c:	d013      	beq.n	8001476 <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 800144e:	79f9      	ldrb	r1, [r7, #7]
 8001450:	7bba      	ldrb	r2, [r7, #14]
 8001452:	4819      	ldr	r0, [pc, #100]	@ (80014b8 <UnlinkTimer+0x100>)
 8001454:	460b      	mov	r3, r1
 8001456:	005b      	lsls	r3, r3, #1
 8001458:	440b      	add	r3, r1
 800145a:	00db      	lsls	r3, r3, #3
 800145c:	4403      	add	r3, r0
 800145e:	3314      	adds	r3, #20
 8001460:	781b      	ldrb	r3, [r3, #0]
 8001462:	b2d8      	uxtb	r0, r3
 8001464:	4914      	ldr	r1, [pc, #80]	@ (80014b8 <UnlinkTimer+0x100>)
 8001466:	4613      	mov	r3, r2
 8001468:	005b      	lsls	r3, r3, #1
 800146a:	4413      	add	r3, r2
 800146c:	00db      	lsls	r3, r3, #3
 800146e:	440b      	add	r3, r1
 8001470:	3314      	adds	r3, #20
 8001472:	4602      	mov	r2, r0
 8001474:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 8001476:	79fa      	ldrb	r2, [r7, #7]
 8001478:	490f      	ldr	r1, [pc, #60]	@ (80014b8 <UnlinkTimer+0x100>)
 800147a:	4613      	mov	r3, r2
 800147c:	005b      	lsls	r3, r3, #1
 800147e:	4413      	add	r3, r2
 8001480:	00db      	lsls	r3, r3, #3
 8001482:	440b      	add	r3, r1
 8001484:	330c      	adds	r3, #12
 8001486:	2201      	movs	r2, #1
 8001488:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 800148a:	4b09      	ldr	r3, [pc, #36]	@ (80014b0 <UnlinkTimer+0xf8>)
 800148c:	781b      	ldrb	r3, [r3, #0]
 800148e:	b2db      	uxtb	r3, r3
 8001490:	2b06      	cmp	r3, #6
 8001492:	d107      	bne.n	80014a4 <UnlinkTimer+0xec>
 8001494:	79bb      	ldrb	r3, [r7, #6]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d104      	bne.n	80014a4 <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 800149a:	4b08      	ldr	r3, [pc, #32]	@ (80014bc <UnlinkTimer+0x104>)
 800149c:	f04f 32ff 	mov.w	r2, #4294967295
 80014a0:	601a      	str	r2, [r3, #0]
  }

  return;
 80014a2:	bf00      	nop
 80014a4:	bf00      	nop
}
 80014a6:	3714      	adds	r7, #20
 80014a8:	46bd      	mov	sp, r7
 80014aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ae:	4770      	bx	lr
 80014b0:	200001dc 	.word	0x200001dc
 80014b4:	200001dd 	.word	0x200001dd
 80014b8:	2000014c 	.word	0x2000014c
 80014bc:	200001e0 	.word	0x200001e0

080014c0 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b082      	sub	sp, #8
 80014c4:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 80014c6:	4b1a      	ldr	r3, [pc, #104]	@ (8001530 <ReturnTimeElapsed+0x70>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014ce:	d026      	beq.n	800151e <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 80014d0:	f7ff fe02 	bl	80010d8 <ReadRtcSsrValue>
 80014d4:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 80014d6:	4b16      	ldr	r3, [pc, #88]	@ (8001530 <ReturnTimeElapsed+0x70>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	687a      	ldr	r2, [r7, #4]
 80014dc:	429a      	cmp	r2, r3
 80014de:	d805      	bhi.n	80014ec <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 80014e0:	4b13      	ldr	r3, [pc, #76]	@ (8001530 <ReturnTimeElapsed+0x70>)
 80014e2:	681a      	ldr	r2, [r3, #0]
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	1ad3      	subs	r3, r2, r3
 80014e8:	607b      	str	r3, [r7, #4]
 80014ea:	e00a      	b.n	8001502 <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 80014ec:	4b11      	ldr	r3, [pc, #68]	@ (8001534 <ReturnTimeElapsed+0x74>)
 80014ee:	881b      	ldrh	r3, [r3, #0]
 80014f0:	461a      	mov	r2, r3
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	1ad3      	subs	r3, r2, r3
 80014f6:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 80014f8:	4b0d      	ldr	r3, [pc, #52]	@ (8001530 <ReturnTimeElapsed+0x70>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	683a      	ldr	r2, [r7, #0]
 80014fe:	4413      	add	r3, r2
 8001500:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 8001502:	4b0d      	ldr	r3, [pc, #52]	@ (8001538 <ReturnTimeElapsed+0x78>)
 8001504:	781b      	ldrb	r3, [r3, #0]
 8001506:	461a      	mov	r2, r3
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	fb02 f303 	mul.w	r3, r2, r3
 800150e:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8001510:	4b0a      	ldr	r3, [pc, #40]	@ (800153c <ReturnTimeElapsed+0x7c>)
 8001512:	781b      	ldrb	r3, [r3, #0]
 8001514:	461a      	mov	r2, r3
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	40d3      	lsrs	r3, r2
 800151a:	607b      	str	r3, [r7, #4]
 800151c:	e001      	b.n	8001522 <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 800151e:	2300      	movs	r3, #0
 8001520:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	b29b      	uxth	r3, r3
}
 8001526:	4618      	mov	r0, r3
 8001528:	3708      	adds	r7, #8
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	200001e0 	.word	0x200001e0
 8001534:	200001e8 	.word	0x200001e8
 8001538:	200001e6 	.word	0x200001e6
 800153c:	200001e5 	.word	0x200001e5

08001540 <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b082      	sub	sp, #8
 8001544:	af00      	add	r7, sp, #0
 8001546:	4603      	mov	r3, r0
 8001548:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
   */

  if(Value == 0)
 800154a:	88fb      	ldrh	r3, [r7, #6]
 800154c:	2b00      	cmp	r3, #0
 800154e:	d108      	bne.n	8001562 <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8001550:	f7ff fdc2 	bl	80010d8 <ReadRtcSsrValue>
 8001554:	4603      	mov	r3, r0
 8001556:	4a21      	ldr	r2, [pc, #132]	@ (80015dc <RestartWakeupCounter+0x9c>)
 8001558:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 800155a:	2003      	movs	r0, #3
 800155c:	f006 fb89 	bl	8007c72 <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8001560:	e039      	b.n	80015d6 <RestartWakeupCounter+0x96>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 8001562:	88fb      	ldrh	r3, [r7, #6]
 8001564:	2b01      	cmp	r3, #1
 8001566:	d803      	bhi.n	8001570 <RestartWakeupCounter+0x30>
 8001568:	4b1d      	ldr	r3, [pc, #116]	@ (80015e0 <RestartWakeupCounter+0xa0>)
 800156a:	781b      	ldrb	r3, [r3, #0]
 800156c:	2b01      	cmp	r3, #1
 800156e:	d002      	beq.n	8001576 <RestartWakeupCounter+0x36>
      Value -= 1;
 8001570:	88fb      	ldrh	r3, [r7, #6]
 8001572:	3b01      	subs	r3, #1
 8001574:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8001576:	bf00      	nop
 8001578:	4b1a      	ldr	r3, [pc, #104]	@ (80015e4 <RestartWakeupCounter+0xa4>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	68db      	ldr	r3, [r3, #12]
 800157e:	f003 0304 	and.w	r3, r3, #4
 8001582:	2b00      	cmp	r3, #0
 8001584:	d0f8      	beq.n	8001578 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001586:	4b17      	ldr	r3, [pc, #92]	@ (80015e4 <RestartWakeupCounter+0xa4>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	68db      	ldr	r3, [r3, #12]
 800158c:	b2da      	uxtb	r2, r3
 800158e:	4b15      	ldr	r3, [pc, #84]	@ (80015e4 <RestartWakeupCounter+0xa4>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8001596:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001598:	4b13      	ldr	r3, [pc, #76]	@ (80015e8 <RestartWakeupCounter+0xa8>)
 800159a:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800159e:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 80015a0:	2003      	movs	r0, #3
 80015a2:	f006 fb74 	bl	8007c8e <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 80015a6:	4b11      	ldr	r3, [pc, #68]	@ (80015ec <RestartWakeupCounter+0xac>)
 80015a8:	695b      	ldr	r3, [r3, #20]
 80015aa:	0c1b      	lsrs	r3, r3, #16
 80015ac:	041b      	lsls	r3, r3, #16
 80015ae:	88fa      	ldrh	r2, [r7, #6]
 80015b0:	490e      	ldr	r1, [pc, #56]	@ (80015ec <RestartWakeupCounter+0xac>)
 80015b2:	4313      	orrs	r3, r2
 80015b4:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 80015b6:	f7ff fd8f 	bl	80010d8 <ReadRtcSsrValue>
 80015ba:	4603      	mov	r3, r0
 80015bc:	4a07      	ldr	r2, [pc, #28]	@ (80015dc <RestartWakeupCounter+0x9c>)
 80015be:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */
 80015c0:	4b08      	ldr	r3, [pc, #32]	@ (80015e4 <RestartWakeupCounter+0xa4>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	689a      	ldr	r2, [r3, #8]
 80015c6:	4b07      	ldr	r3, [pc, #28]	@ (80015e4 <RestartWakeupCounter+0xa4>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80015ce:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 80015d0:	f3af 8000 	nop.w
  return ;
 80015d4:	bf00      	nop
}
 80015d6:	3708      	adds	r7, #8
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	200001e0 	.word	0x200001e0
 80015e0:	200001e5 	.word	0x200001e5
 80015e4:	200002e8 	.word	0x200002e8
 80015e8:	58000800 	.word	0x58000800
 80015ec:	40002800 	.word	0x40002800

080015f0 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b084      	sub	sp, #16
 80015f4:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 80015f6:	4b45      	ldr	r3, [pc, #276]	@ (800170c <RescheduleTimerList+0x11c>)
 80015f8:	689b      	ldr	r3, [r3, #8]
 80015fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80015fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001602:	d107      	bne.n	8001614 <RescheduleTimerList+0x24>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8001604:	bf00      	nop
 8001606:	4b42      	ldr	r3, [pc, #264]	@ (8001710 <RescheduleTimerList+0x120>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	68db      	ldr	r3, [r3, #12]
 800160c:	f003 0304 	and.w	r3, r3, #4
 8001610:	2b00      	cmp	r3, #0
 8001612:	d1f8      	bne.n	8001606 <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8001614:	4b3e      	ldr	r3, [pc, #248]	@ (8001710 <RescheduleTimerList+0x120>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	689a      	ldr	r2, [r3, #8]
 800161a:	4b3d      	ldr	r3, [pc, #244]	@ (8001710 <RescheduleTimerList+0x120>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001622:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 8001624:	4b3b      	ldr	r3, [pc, #236]	@ (8001714 <RescheduleTimerList+0x124>)
 8001626:	781b      	ldrb	r3, [r3, #0]
 8001628:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 800162a:	7bfa      	ldrb	r2, [r7, #15]
 800162c:	493a      	ldr	r1, [pc, #232]	@ (8001718 <RescheduleTimerList+0x128>)
 800162e:	4613      	mov	r3, r2
 8001630:	005b      	lsls	r3, r3, #1
 8001632:	4413      	add	r3, r2
 8001634:	00db      	lsls	r3, r3, #3
 8001636:	440b      	add	r3, r1
 8001638:	3308      	adds	r3, #8
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 800163e:	f7ff ff3f 	bl	80014c0 <ReturnTimeElapsed>
 8001642:	4603      	mov	r3, r0
 8001644:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 8001646:	88fb      	ldrh	r3, [r7, #6]
 8001648:	68ba      	ldr	r2, [r7, #8]
 800164a:	429a      	cmp	r2, r3
 800164c:	d205      	bcs.n	800165a <RescheduleTimerList+0x6a>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 800164e:	2300      	movs	r3, #0
 8001650:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001652:	4b32      	ldr	r3, [pc, #200]	@ (800171c <RescheduleTimerList+0x12c>)
 8001654:	2201      	movs	r2, #1
 8001656:	701a      	strb	r2, [r3, #0]
 8001658:	e04d      	b.n	80016f6 <RescheduleTimerList+0x106>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 800165a:	88fb      	ldrh	r3, [r7, #6]
 800165c:	4a30      	ldr	r2, [pc, #192]	@ (8001720 <RescheduleTimerList+0x130>)
 800165e:	8812      	ldrh	r2, [r2, #0]
 8001660:	b292      	uxth	r2, r2
 8001662:	4413      	add	r3, r2
 8001664:	461a      	mov	r2, r3
 8001666:	68bb      	ldr	r3, [r7, #8]
 8001668:	4293      	cmp	r3, r2
 800166a:	d906      	bls.n	800167a <RescheduleTimerList+0x8a>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 800166c:	4b2c      	ldr	r3, [pc, #176]	@ (8001720 <RescheduleTimerList+0x130>)
 800166e:	881b      	ldrh	r3, [r3, #0]
 8001670:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 8001672:	4b2a      	ldr	r3, [pc, #168]	@ (800171c <RescheduleTimerList+0x12c>)
 8001674:	2200      	movs	r2, #0
 8001676:	701a      	strb	r2, [r3, #0]
 8001678:	e03d      	b.n	80016f6 <RescheduleTimerList+0x106>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 800167a:	68bb      	ldr	r3, [r7, #8]
 800167c:	b29a      	uxth	r2, r3
 800167e:	88fb      	ldrh	r3, [r7, #6]
 8001680:	1ad3      	subs	r3, r2, r3
 8001682:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001684:	4b25      	ldr	r3, [pc, #148]	@ (800171c <RescheduleTimerList+0x12c>)
 8001686:	2201      	movs	r2, #1
 8001688:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800168a:	e034      	b.n	80016f6 <RescheduleTimerList+0x106>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 800168c:	7bfa      	ldrb	r2, [r7, #15]
 800168e:	4922      	ldr	r1, [pc, #136]	@ (8001718 <RescheduleTimerList+0x128>)
 8001690:	4613      	mov	r3, r2
 8001692:	005b      	lsls	r3, r3, #1
 8001694:	4413      	add	r3, r2
 8001696:	00db      	lsls	r3, r3, #3
 8001698:	440b      	add	r3, r1
 800169a:	3308      	adds	r3, #8
 800169c:	681a      	ldr	r2, [r3, #0]
 800169e:	88fb      	ldrh	r3, [r7, #6]
 80016a0:	429a      	cmp	r2, r3
 80016a2:	d20a      	bcs.n	80016ba <RescheduleTimerList+0xca>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 80016a4:	7bfa      	ldrb	r2, [r7, #15]
 80016a6:	491c      	ldr	r1, [pc, #112]	@ (8001718 <RescheduleTimerList+0x128>)
 80016a8:	4613      	mov	r3, r2
 80016aa:	005b      	lsls	r3, r3, #1
 80016ac:	4413      	add	r3, r2
 80016ae:	00db      	lsls	r3, r3, #3
 80016b0:	440b      	add	r3, r1
 80016b2:	3308      	adds	r3, #8
 80016b4:	2200      	movs	r2, #0
 80016b6:	601a      	str	r2, [r3, #0]
 80016b8:	e013      	b.n	80016e2 <RescheduleTimerList+0xf2>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 80016ba:	7bfa      	ldrb	r2, [r7, #15]
 80016bc:	4916      	ldr	r1, [pc, #88]	@ (8001718 <RescheduleTimerList+0x128>)
 80016be:	4613      	mov	r3, r2
 80016c0:	005b      	lsls	r3, r3, #1
 80016c2:	4413      	add	r3, r2
 80016c4:	00db      	lsls	r3, r3, #3
 80016c6:	440b      	add	r3, r1
 80016c8:	3308      	adds	r3, #8
 80016ca:	6819      	ldr	r1, [r3, #0]
 80016cc:	88fb      	ldrh	r3, [r7, #6]
 80016ce:	7bfa      	ldrb	r2, [r7, #15]
 80016d0:	1ac9      	subs	r1, r1, r3
 80016d2:	4811      	ldr	r0, [pc, #68]	@ (8001718 <RescheduleTimerList+0x128>)
 80016d4:	4613      	mov	r3, r2
 80016d6:	005b      	lsls	r3, r3, #1
 80016d8:	4413      	add	r3, r2
 80016da:	00db      	lsls	r3, r3, #3
 80016dc:	4403      	add	r3, r0
 80016de:	3308      	adds	r3, #8
 80016e0:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 80016e2:	7bfa      	ldrb	r2, [r7, #15]
 80016e4:	490c      	ldr	r1, [pc, #48]	@ (8001718 <RescheduleTimerList+0x128>)
 80016e6:	4613      	mov	r3, r2
 80016e8:	005b      	lsls	r3, r3, #1
 80016ea:	4413      	add	r3, r2
 80016ec:	00db      	lsls	r3, r3, #3
 80016ee:	440b      	add	r3, r1
 80016f0:	3315      	adds	r3, #21
 80016f2:	781b      	ldrb	r3, [r3, #0]
 80016f4:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80016f6:	7bfb      	ldrb	r3, [r7, #15]
 80016f8:	2b06      	cmp	r3, #6
 80016fa:	d1c7      	bne.n	800168c <RescheduleTimerList+0x9c>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 80016fc:	89bb      	ldrh	r3, [r7, #12]
 80016fe:	4618      	mov	r0, r3
 8001700:	f7ff ff1e 	bl	8001540 <RestartWakeupCounter>

  return ;
 8001704:	bf00      	nop
}
 8001706:	3710      	adds	r7, #16
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}
 800170c:	40002800 	.word	0x40002800
 8001710:	200002e8 	.word	0x200002e8
 8001714:	200001dc 	.word	0x200001dc
 8001718:	2000014c 	.word	0x2000014c
 800171c:	200001e4 	.word	0x200001e4
 8001720:	200001ea 	.word	0x200001ea

08001724 <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b08a      	sub	sp, #40	@ 0x28
 8001728:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800172a:	f3ef 8310 	mrs	r3, PRIMASK
 800172e:	617b      	str	r3, [r7, #20]
  return(result);
 8001730:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001732:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8001734:	b672      	cpsid	i
}
 8001736:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001738:	4b59      	ldr	r3, [pc, #356]	@ (80018a0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	22ca      	movs	r2, #202	@ 0xca
 800173e:	625a      	str	r2, [r3, #36]	@ 0x24
 8001740:	4b57      	ldr	r3, [pc, #348]	@ (80018a0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	2253      	movs	r2, #83	@ 0x53
 8001746:	625a      	str	r2, [r3, #36]	@ 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
 8001748:	4b55      	ldr	r3, [pc, #340]	@ (80018a0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	689a      	ldr	r2, [r3, #8]
 800174e:	4b54      	ldr	r3, [pc, #336]	@ (80018a0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001756:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 8001758:	4b52      	ldr	r3, [pc, #328]	@ (80018a4 <HW_TS_RTC_Wakeup_Handler+0x180>)
 800175a:	781b      	ldrb	r3, [r3, #0]
 800175c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 8001760:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8001764:	4950      	ldr	r1, [pc, #320]	@ (80018a8 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001766:	4613      	mov	r3, r2
 8001768:	005b      	lsls	r3, r3, #1
 800176a:	4413      	add	r3, r2
 800176c:	00db      	lsls	r3, r3, #3
 800176e:	440b      	add	r3, r1
 8001770:	330c      	adds	r3, #12
 8001772:	781b      	ldrb	r3, [r3, #0]
 8001774:	b2db      	uxtb	r3, r3
 8001776:	2b02      	cmp	r3, #2
 8001778:	d16e      	bne.n	8001858 <HW_TS_RTC_Wakeup_Handler+0x134>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 800177a:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800177e:	494a      	ldr	r1, [pc, #296]	@ (80018a8 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001780:	4613      	mov	r3, r2
 8001782:	005b      	lsls	r3, r3, #1
 8001784:	4413      	add	r3, r2
 8001786:	00db      	lsls	r3, r3, #3
 8001788:	440b      	add	r3, r1
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 800178e:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8001792:	4945      	ldr	r1, [pc, #276]	@ (80018a8 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001794:	4613      	mov	r3, r2
 8001796:	005b      	lsls	r3, r3, #1
 8001798:	4413      	add	r3, r2
 800179a:	00db      	lsls	r3, r3, #3
 800179c:	440b      	add	r3, r1
 800179e:	3310      	adds	r3, #16
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 80017a4:	4b41      	ldr	r3, [pc, #260]	@ (80018ac <HW_TS_RTC_Wakeup_Handler+0x188>)
 80017a6:	781b      	ldrb	r3, [r3, #0]
 80017a8:	b2db      	uxtb	r3, r3
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d04c      	beq.n	8001848 <HW_TS_RTC_Wakeup_Handler+0x124>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 80017ae:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 80017b2:	493d      	ldr	r1, [pc, #244]	@ (80018a8 <HW_TS_RTC_Wakeup_Handler+0x184>)
 80017b4:	4613      	mov	r3, r2
 80017b6:	005b      	lsls	r3, r3, #1
 80017b8:	4413      	add	r3, r2
 80017ba:	00db      	lsls	r3, r3, #3
 80017bc:	440b      	add	r3, r1
 80017be:	330d      	adds	r3, #13
 80017c0:	781b      	ldrb	r3, [r3, #0]
 80017c2:	b2db      	uxtb	r3, r3
 80017c4:	2b01      	cmp	r3, #1
 80017c6:	d124      	bne.n	8001812 <HW_TS_RTC_Wakeup_Handler+0xee>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 80017c8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80017cc:	2101      	movs	r1, #1
 80017ce:	4618      	mov	r0, r3
 80017d0:	f7ff fdf2 	bl	80013b8 <UnlinkTimer>
 80017d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017d6:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80017d8:	693b      	ldr	r3, [r7, #16]
 80017da:	f383 8810 	msr	PRIMASK, r3
}
 80017de:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 80017e0:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 80017e4:	4930      	ldr	r1, [pc, #192]	@ (80018a8 <HW_TS_RTC_Wakeup_Handler+0x184>)
 80017e6:	4613      	mov	r3, r2
 80017e8:	005b      	lsls	r3, r3, #1
 80017ea:	4413      	add	r3, r2
 80017ec:	00db      	lsls	r3, r3, #3
 80017ee:	440b      	add	r3, r1
 80017f0:	3304      	adds	r3, #4
 80017f2:	681a      	ldr	r2, [r3, #0]
 80017f4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80017f8:	4611      	mov	r1, r2
 80017fa:	4618      	mov	r0, r3
 80017fc:	f000 f9b8 	bl	8001b70 <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001800:	4b27      	ldr	r3, [pc, #156]	@ (80018a0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	22ca      	movs	r2, #202	@ 0xca
 8001806:	625a      	str	r2, [r3, #36]	@ 0x24
 8001808:	4b25      	ldr	r3, [pc, #148]	@ (80018a0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	2253      	movs	r2, #83	@ 0x53
 800180e:	625a      	str	r2, [r3, #36]	@ 0x24
 8001810:	e012      	b.n	8001838 <HW_TS_RTC_Wakeup_Handler+0x114>
 8001812:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001814:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	f383 8810 	msr	PRIMASK, r3
}
 800181c:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 800181e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001822:	4618      	mov	r0, r3
 8001824:	f000 f920 	bl	8001a68 <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001828:	4b1d      	ldr	r3, [pc, #116]	@ (80018a0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	22ca      	movs	r2, #202	@ 0xca
 800182e:	625a      	str	r2, [r3, #36]	@ 0x24
 8001830:	4b1b      	ldr	r3, [pc, #108]	@ (80018a0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	2253      	movs	r2, #83	@ 0x53
 8001836:	625a      	str	r2, [r3, #36]	@ 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 8001838:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800183c:	69fa      	ldr	r2, [r7, #28]
 800183e:	4619      	mov	r1, r3
 8001840:	69b8      	ldr	r0, [r7, #24]
 8001842:	f000 fa1b 	bl	8001c7c <HW_TS_RTC_Int_AppNot>
 8001846:	e022      	b.n	800188e <HW_TS_RTC_Wakeup_Handler+0x16a>
    }
    else
    {
      RescheduleTimerList();
 8001848:	f7ff fed2 	bl	80015f0 <RescheduleTimerList>
 800184c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800184e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001850:	68bb      	ldr	r3, [r7, #8]
 8001852:	f383 8810 	msr	PRIMASK, r3
}
 8001856:	e01a      	b.n	800188e <HW_TS_RTC_Wakeup_Handler+0x16a>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8001858:	bf00      	nop
 800185a:	4b11      	ldr	r3, [pc, #68]	@ (80018a0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	68db      	ldr	r3, [r3, #12]
 8001860:	f003 0304 	and.w	r3, r3, #4
 8001864:	2b00      	cmp	r3, #0
 8001866:	d0f8      	beq.n	800185a <HW_TS_RTC_Wakeup_Handler+0x136>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001868:	4b0d      	ldr	r3, [pc, #52]	@ (80018a0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	68db      	ldr	r3, [r3, #12]
 800186e:	b2da      	uxtb	r2, r3
 8001870:	4b0b      	ldr	r3, [pc, #44]	@ (80018a0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8001878:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 800187a:	4b0d      	ldr	r3, [pc, #52]	@ (80018b0 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 800187c:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001880:	60da      	str	r2, [r3, #12]
 8001882:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001884:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	f383 8810 	msr	PRIMASK, r3
}
 800188c:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 800188e:	4b04      	ldr	r3, [pc, #16]	@ (80018a0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	22ff      	movs	r2, #255	@ 0xff
 8001894:	625a      	str	r2, [r3, #36]	@ 0x24

  return;
 8001896:	bf00      	nop
}
 8001898:	3728      	adds	r7, #40	@ 0x28
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	200002e8 	.word	0x200002e8
 80018a4:	200001dc 	.word	0x200001dc
 80018a8:	2000014c 	.word	0x2000014c
 80018ac:	200001e4 	.word	0x200001e4
 80018b0:	58000800 	.word	0x58000800

080018b4 <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *phrtc)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b088      	sub	sp, #32
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	4603      	mov	r3, r0
 80018bc:	6039      	str	r1, [r7, #0]
 80018be:	71fb      	strb	r3, [r7, #7]
  uint8_t loop;
  uint32_t localmaxwakeuptimersetup;

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80018c0:	4b5e      	ldr	r3, [pc, #376]	@ (8001a3c <HW_TS_Init+0x188>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	22ca      	movs	r2, #202	@ 0xca
 80018c6:	625a      	str	r2, [r3, #36]	@ 0x24
 80018c8:	4b5c      	ldr	r3, [pc, #368]	@ (8001a3c <HW_TS_Init+0x188>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	2253      	movs	r2, #83	@ 0x53
 80018ce:	625a      	str	r2, [r3, #36]	@ 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80018d0:	4b5b      	ldr	r3, [pc, #364]	@ (8001a40 <HW_TS_Init+0x18c>)
 80018d2:	689b      	ldr	r3, [r3, #8]
 80018d4:	4a5a      	ldr	r2, [pc, #360]	@ (8001a40 <HW_TS_Init+0x18c>)
 80018d6:	f043 0320 	orr.w	r3, r3, #32
 80018da:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 80018dc:	4b58      	ldr	r3, [pc, #352]	@ (8001a40 <HW_TS_Init+0x18c>)
 80018de:	689b      	ldr	r3, [r3, #8]
 80018e0:	b2db      	uxtb	r3, r3
 80018e2:	f003 0307 	and.w	r3, r3, #7
 80018e6:	b2db      	uxtb	r3, r3
 80018e8:	f1c3 0304 	rsb	r3, r3, #4
 80018ec:	b2da      	uxtb	r2, r3
 80018ee:	4b55      	ldr	r3, [pc, #340]	@ (8001a44 <HW_TS_Init+0x190>)
 80018f0:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 80018f2:	4b53      	ldr	r3, [pc, #332]	@ (8001a40 <HW_TS_Init+0x18c>)
 80018f4:	691b      	ldr	r3, [r3, #16]
 80018f6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80018fa:	f44f 02fe 	mov.w	r2, #8323072	@ 0x7f0000
 80018fe:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001900:	693a      	ldr	r2, [r7, #16]
 8001902:	fa92 f2a2 	rbit	r2, r2
 8001906:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001908:	68fa      	ldr	r2, [r7, #12]
 800190a:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800190c:	697a      	ldr	r2, [r7, #20]
 800190e:	2a00      	cmp	r2, #0
 8001910:	d101      	bne.n	8001916 <HW_TS_Init+0x62>
  {
    return 32U;
 8001912:	2220      	movs	r2, #32
 8001914:	e003      	b.n	800191e <HW_TS_Init+0x6a>
  }
  return __builtin_clz(value);
 8001916:	697a      	ldr	r2, [r7, #20]
 8001918:	fab2 f282 	clz	r2, r2
 800191c:	b2d2      	uxtb	r2, r2
 800191e:	40d3      	lsrs	r3, r2
 8001920:	b2db      	uxtb	r3, r3
 8001922:	3301      	adds	r3, #1
 8001924:	b2da      	uxtb	r2, r3
 8001926:	4b48      	ldr	r3, [pc, #288]	@ (8001a48 <HW_TS_Init+0x194>)
 8001928:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 800192a:	4b45      	ldr	r3, [pc, #276]	@ (8001a40 <HW_TS_Init+0x18c>)
 800192c:	691b      	ldr	r3, [r3, #16]
 800192e:	b29b      	uxth	r3, r3
 8001930:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001934:	b29b      	uxth	r3, r3
 8001936:	3301      	adds	r3, #1
 8001938:	b29a      	uxth	r2, r3
 800193a:	4b44      	ldr	r3, [pc, #272]	@ (8001a4c <HW_TS_Init+0x198>)
 800193c:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 800193e:	4b43      	ldr	r3, [pc, #268]	@ (8001a4c <HW_TS_Init+0x198>)
 8001940:	881b      	ldrh	r3, [r3, #0]
 8001942:	3b01      	subs	r3, #1
 8001944:	4a40      	ldr	r2, [pc, #256]	@ (8001a48 <HW_TS_Init+0x194>)
 8001946:	7812      	ldrb	r2, [r2, #0]
 8001948:	fb02 f303 	mul.w	r3, r2, r3
 800194c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001950:	4a3c      	ldr	r2, [pc, #240]	@ (8001a44 <HW_TS_Init+0x190>)
 8001952:	7812      	ldrb	r2, [r2, #0]
 8001954:	40d3      	lsrs	r3, r2
 8001956:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 8001958:	69bb      	ldr	r3, [r7, #24]
 800195a:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800195e:	4293      	cmp	r3, r2
 8001960:	d904      	bls.n	800196c <HW_TS_Init+0xb8>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 8001962:	4b3b      	ldr	r3, [pc, #236]	@ (8001a50 <HW_TS_Init+0x19c>)
 8001964:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001968:	801a      	strh	r2, [r3, #0]
 800196a:	e003      	b.n	8001974 <HW_TS_Init+0xc0>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 800196c:	69bb      	ldr	r3, [r7, #24]
 800196e:	b29a      	uxth	r2, r3
 8001970:	4b37      	ldr	r3, [pc, #220]	@ (8001a50 <HW_TS_Init+0x19c>)
 8001972:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8001974:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8001978:	f7ff fb9c 	bl	80010b4 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 800197c:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8001980:	f7ff fb84 	bl	800108c <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 8001984:	79fb      	ldrb	r3, [r7, #7]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d13d      	bne.n	8001a06 <HW_TS_Init+0x152>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 800198a:	4b32      	ldr	r3, [pc, #200]	@ (8001a54 <HW_TS_Init+0x1a0>)
 800198c:	2201      	movs	r2, #1
 800198e:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001990:	4b31      	ldr	r3, [pc, #196]	@ (8001a58 <HW_TS_Init+0x1a4>)
 8001992:	f04f 32ff 	mov.w	r2, #4294967295
 8001996:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8001998:	2300      	movs	r3, #0
 800199a:	77fb      	strb	r3, [r7, #31]
 800199c:	e00c      	b.n	80019b8 <HW_TS_Init+0x104>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 800199e:	7ffa      	ldrb	r2, [r7, #31]
 80019a0:	492e      	ldr	r1, [pc, #184]	@ (8001a5c <HW_TS_Init+0x1a8>)
 80019a2:	4613      	mov	r3, r2
 80019a4:	005b      	lsls	r3, r3, #1
 80019a6:	4413      	add	r3, r2
 80019a8:	00db      	lsls	r3, r3, #3
 80019aa:	440b      	add	r3, r1
 80019ac:	330c      	adds	r3, #12
 80019ae:	2200      	movs	r2, #0
 80019b0:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 80019b2:	7ffb      	ldrb	r3, [r7, #31]
 80019b4:	3301      	adds	r3, #1
 80019b6:	77fb      	strb	r3, [r7, #31]
 80019b8:	7ffb      	ldrb	r3, [r7, #31]
 80019ba:	2b05      	cmp	r3, #5
 80019bc:	d9ef      	bls.n	800199e <HW_TS_Init+0xea>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 80019be:	4b28      	ldr	r3, [pc, #160]	@ (8001a60 <HW_TS_Init+0x1ac>)
 80019c0:	2206      	movs	r2, #6
 80019c2:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);                       /**<  Disable the Wakeup Timer */
 80019c4:	4b1d      	ldr	r3, [pc, #116]	@ (8001a3c <HW_TS_Init+0x188>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	689a      	ldr	r2, [r3, #8]
 80019ca:	4b1c      	ldr	r3, [pc, #112]	@ (8001a3c <HW_TS_Init+0x188>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80019d2:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 80019d4:	4b19      	ldr	r3, [pc, #100]	@ (8001a3c <HW_TS_Init+0x188>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	68db      	ldr	r3, [r3, #12]
 80019da:	b2da      	uxtb	r2, r3
 80019dc:	4b17      	ldr	r3, [pc, #92]	@ (8001a3c <HW_TS_Init+0x188>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 80019e4:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 80019e6:	4b1f      	ldr	r3, [pc, #124]	@ (8001a64 <HW_TS_Init+0x1b0>)
 80019e8:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80019ec:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 80019ee:	2003      	movs	r0, #3
 80019f0:	f006 f94d 	bl	8007c8e <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(&hrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 80019f4:	4b11      	ldr	r3, [pc, #68]	@ (8001a3c <HW_TS_Init+0x188>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	689a      	ldr	r2, [r3, #8]
 80019fa:	4b10      	ldr	r3, [pc, #64]	@ (8001a3c <HW_TS_Init+0x188>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001a02:	609a      	str	r2, [r3, #8]
 8001a04:	e009      	b.n	8001a1a <HW_TS_Init+0x166>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTF) != RESET)
 8001a06:	4b0d      	ldr	r3, [pc, #52]	@ (8001a3c <HW_TS_Init+0x188>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	68db      	ldr	r3, [r3, #12]
 8001a0c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d002      	beq.n	8001a1a <HW_TS_Init+0x166>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8001a14:	2003      	movs	r0, #3
 8001a16:	f006 f92c 	bl	8007c72 <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8001a1a:	4b08      	ldr	r3, [pc, #32]	@ (8001a3c <HW_TS_Init+0x188>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	22ff      	movs	r2, #255	@ 0xff
 8001a20:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 8001a22:	2200      	movs	r2, #0
 8001a24:	2103      	movs	r1, #3
 8001a26:	2003      	movs	r0, #3
 8001a28:	f006 f8e1 	bl	8007bee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001a2c:	2003      	movs	r0, #3
 8001a2e:	f006 f8f8 	bl	8007c22 <HAL_NVIC_EnableIRQ>

  return;
 8001a32:	bf00      	nop
}
 8001a34:	3720      	adds	r7, #32
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	200002e8 	.word	0x200002e8
 8001a40:	40002800 	.word	0x40002800
 8001a44:	200001e5 	.word	0x200001e5
 8001a48:	200001e6 	.word	0x200001e6
 8001a4c:	200001e8 	.word	0x200001e8
 8001a50:	200001ea 	.word	0x200001ea
 8001a54:	200001e4 	.word	0x200001e4
 8001a58:	200001e0 	.word	0x200001e0
 8001a5c:	2000014c 	.word	0x2000014c
 8001a60:	200001dc 	.word	0x200001dc
 8001a64:	58000800 	.word	0x58000800

08001a68 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b086      	sub	sp, #24
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	4603      	mov	r3, r0
 8001a70:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001a72:	f3ef 8310 	mrs	r3, PRIMASK
 8001a76:	60fb      	str	r3, [r7, #12]
  return(result);
 8001a78:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001a7a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001a7c:	b672      	cpsid	i
}
 8001a7e:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8001a80:	2003      	movs	r0, #3
 8001a82:	f006 f8dc 	bl	8007c3e <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001a86:	4b34      	ldr	r3, [pc, #208]	@ (8001b58 <HW_TS_Stop+0xf0>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	22ca      	movs	r2, #202	@ 0xca
 8001a8c:	625a      	str	r2, [r3, #36]	@ 0x24
 8001a8e:	4b32      	ldr	r3, [pc, #200]	@ (8001b58 <HW_TS_Stop+0xf0>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	2253      	movs	r2, #83	@ 0x53
 8001a94:	625a      	str	r2, [r3, #36]	@ 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8001a96:	79fa      	ldrb	r2, [r7, #7]
 8001a98:	4930      	ldr	r1, [pc, #192]	@ (8001b5c <HW_TS_Stop+0xf4>)
 8001a9a:	4613      	mov	r3, r2
 8001a9c:	005b      	lsls	r3, r3, #1
 8001a9e:	4413      	add	r3, r2
 8001aa0:	00db      	lsls	r3, r3, #3
 8001aa2:	440b      	add	r3, r1
 8001aa4:	330c      	adds	r3, #12
 8001aa6:	781b      	ldrb	r3, [r3, #0]
 8001aa8:	b2db      	uxtb	r3, r3
 8001aaa:	2b02      	cmp	r3, #2
 8001aac:	d142      	bne.n	8001b34 <HW_TS_Stop+0xcc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 8001aae:	79fb      	ldrb	r3, [r7, #7]
 8001ab0:	2100      	movs	r1, #0
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f7ff fc80 	bl	80013b8 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 8001ab8:	4b29      	ldr	r3, [pc, #164]	@ (8001b60 <HW_TS_Stop+0xf8>)
 8001aba:	781b      	ldrb	r3, [r3, #0]
 8001abc:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001abe:	7cfb      	ldrb	r3, [r7, #19]
 8001ac0:	2b06      	cmp	r3, #6
 8001ac2:	d12f      	bne.n	8001b24 <HW_TS_Stop+0xbc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8001ac4:	4b27      	ldr	r3, [pc, #156]	@ (8001b64 <HW_TS_Stop+0xfc>)
 8001ac6:	689b      	ldr	r3, [r3, #8]
 8001ac8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001acc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001ad0:	d107      	bne.n	8001ae2 <HW_TS_Stop+0x7a>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8001ad2:	bf00      	nop
 8001ad4:	4b20      	ldr	r3, [pc, #128]	@ (8001b58 <HW_TS_Stop+0xf0>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	68db      	ldr	r3, [r3, #12]
 8001ada:	f003 0304 	and.w	r3, r3, #4
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d1f8      	bne.n	8001ad4 <HW_TS_Stop+0x6c>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8001ae2:	4b1d      	ldr	r3, [pc, #116]	@ (8001b58 <HW_TS_Stop+0xf0>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	689a      	ldr	r2, [r3, #8]
 8001ae8:	4b1b      	ldr	r3, [pc, #108]	@ (8001b58 <HW_TS_Stop+0xf0>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001af0:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8001af2:	bf00      	nop
 8001af4:	4b18      	ldr	r3, [pc, #96]	@ (8001b58 <HW_TS_Stop+0xf0>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	68db      	ldr	r3, [r3, #12]
 8001afa:	f003 0304 	and.w	r3, r3, #4
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d0f8      	beq.n	8001af4 <HW_TS_Stop+0x8c>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001b02:	4b15      	ldr	r3, [pc, #84]	@ (8001b58 <HW_TS_Stop+0xf0>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	68db      	ldr	r3, [r3, #12]
 8001b08:	b2da      	uxtb	r2, r3
 8001b0a:	4b13      	ldr	r3, [pc, #76]	@ (8001b58 <HW_TS_Stop+0xf0>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8001b12:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001b14:	4b14      	ldr	r3, [pc, #80]	@ (8001b68 <HW_TS_Stop+0x100>)
 8001b16:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001b1a:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8001b1c:	2003      	movs	r0, #3
 8001b1e:	f006 f8b6 	bl	8007c8e <HAL_NVIC_ClearPendingIRQ>
 8001b22:	e007      	b.n	8001b34 <HW_TS_Stop+0xcc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8001b24:	4b11      	ldr	r3, [pc, #68]	@ (8001b6c <HW_TS_Stop+0x104>)
 8001b26:	781b      	ldrb	r3, [r3, #0]
 8001b28:	b2db      	uxtb	r3, r3
 8001b2a:	7cfa      	ldrb	r2, [r7, #19]
 8001b2c:	429a      	cmp	r2, r3
 8001b2e:	d001      	beq.n	8001b34 <HW_TS_Stop+0xcc>
    {
      RescheduleTimerList();
 8001b30:	f7ff fd5e 	bl	80015f0 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8001b34:	4b08      	ldr	r3, [pc, #32]	@ (8001b58 <HW_TS_Stop+0xf0>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	22ff      	movs	r2, #255	@ 0xff
 8001b3a:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001b3c:	2003      	movs	r0, #3
 8001b3e:	f006 f870 	bl	8007c22 <HAL_NVIC_EnableIRQ>
 8001b42:	697b      	ldr	r3, [r7, #20]
 8001b44:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001b46:	68bb      	ldr	r3, [r7, #8]
 8001b48:	f383 8810 	msr	PRIMASK, r3
}
 8001b4c:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8001b4e:	bf00      	nop
}
 8001b50:	3718      	adds	r7, #24
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	200002e8 	.word	0x200002e8
 8001b5c:	2000014c 	.word	0x2000014c
 8001b60:	200001dc 	.word	0x200001dc
 8001b64:	40002800 	.word	0x40002800
 8001b68:	58000800 	.word	0x58000800
 8001b6c:	200001dd 	.word	0x200001dd

08001b70 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b086      	sub	sp, #24
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	4603      	mov	r3, r0
 8001b78:	6039      	str	r1, [r7, #0]
 8001b7a:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8001b7c:	79fa      	ldrb	r2, [r7, #7]
 8001b7e:	493b      	ldr	r1, [pc, #236]	@ (8001c6c <HW_TS_Start+0xfc>)
 8001b80:	4613      	mov	r3, r2
 8001b82:	005b      	lsls	r3, r3, #1
 8001b84:	4413      	add	r3, r2
 8001b86:	00db      	lsls	r3, r3, #3
 8001b88:	440b      	add	r3, r1
 8001b8a:	330c      	adds	r3, #12
 8001b8c:	781b      	ldrb	r3, [r3, #0]
 8001b8e:	b2db      	uxtb	r3, r3
 8001b90:	2b02      	cmp	r3, #2
 8001b92:	d103      	bne.n	8001b9c <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 8001b94:	79fb      	ldrb	r3, [r7, #7]
 8001b96:	4618      	mov	r0, r3
 8001b98:	f7ff ff66 	bl	8001a68 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001b9c:	f3ef 8310 	mrs	r3, PRIMASK
 8001ba0:	60fb      	str	r3, [r7, #12]
  return(result);
 8001ba2:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001ba4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001ba6:	b672      	cpsid	i
}
 8001ba8:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8001baa:	2003      	movs	r0, #3
 8001bac:	f006 f847 	bl	8007c3e <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001bb0:	4b2f      	ldr	r3, [pc, #188]	@ (8001c70 <HW_TS_Start+0x100>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	22ca      	movs	r2, #202	@ 0xca
 8001bb6:	625a      	str	r2, [r3, #36]	@ 0x24
 8001bb8:	4b2d      	ldr	r3, [pc, #180]	@ (8001c70 <HW_TS_Start+0x100>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	2253      	movs	r2, #83	@ 0x53
 8001bbe:	625a      	str	r2, [r3, #36]	@ 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 8001bc0:	79fa      	ldrb	r2, [r7, #7]
 8001bc2:	492a      	ldr	r1, [pc, #168]	@ (8001c6c <HW_TS_Start+0xfc>)
 8001bc4:	4613      	mov	r3, r2
 8001bc6:	005b      	lsls	r3, r3, #1
 8001bc8:	4413      	add	r3, r2
 8001bca:	00db      	lsls	r3, r3, #3
 8001bcc:	440b      	add	r3, r1
 8001bce:	330c      	adds	r3, #12
 8001bd0:	2202      	movs	r2, #2
 8001bd2:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 8001bd4:	79fa      	ldrb	r2, [r7, #7]
 8001bd6:	4925      	ldr	r1, [pc, #148]	@ (8001c6c <HW_TS_Start+0xfc>)
 8001bd8:	4613      	mov	r3, r2
 8001bda:	005b      	lsls	r3, r3, #1
 8001bdc:	4413      	add	r3, r2
 8001bde:	00db      	lsls	r3, r3, #3
 8001be0:	440b      	add	r3, r1
 8001be2:	3308      	adds	r3, #8
 8001be4:	683a      	ldr	r2, [r7, #0]
 8001be6:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 8001be8:	79fa      	ldrb	r2, [r7, #7]
 8001bea:	4920      	ldr	r1, [pc, #128]	@ (8001c6c <HW_TS_Start+0xfc>)
 8001bec:	4613      	mov	r3, r2
 8001bee:	005b      	lsls	r3, r3, #1
 8001bf0:	4413      	add	r3, r2
 8001bf2:	00db      	lsls	r3, r3, #3
 8001bf4:	440b      	add	r3, r1
 8001bf6:	3304      	adds	r3, #4
 8001bf8:	683a      	ldr	r2, [r7, #0]
 8001bfa:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 8001bfc:	79fb      	ldrb	r3, [r7, #7]
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f7ff fb30 	bl	8001264 <linkTimer>
 8001c04:	4603      	mov	r3, r0
 8001c06:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 8001c08:	4b1a      	ldr	r3, [pc, #104]	@ (8001c74 <HW_TS_Start+0x104>)
 8001c0a:	781b      	ldrb	r3, [r3, #0]
 8001c0c:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8001c0e:	4b1a      	ldr	r3, [pc, #104]	@ (8001c78 <HW_TS_Start+0x108>)
 8001c10:	781b      	ldrb	r3, [r3, #0]
 8001c12:	b2db      	uxtb	r3, r3
 8001c14:	7c7a      	ldrb	r2, [r7, #17]
 8001c16:	429a      	cmp	r2, r3
 8001c18:	d002      	beq.n	8001c20 <HW_TS_Start+0xb0>
  {
    RescheduleTimerList();
 8001c1a:	f7ff fce9 	bl	80015f0 <RescheduleTimerList>
 8001c1e:	e013      	b.n	8001c48 <HW_TS_Start+0xd8>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 8001c20:	79fa      	ldrb	r2, [r7, #7]
 8001c22:	4912      	ldr	r1, [pc, #72]	@ (8001c6c <HW_TS_Start+0xfc>)
 8001c24:	4613      	mov	r3, r2
 8001c26:	005b      	lsls	r3, r3, #1
 8001c28:	4413      	add	r3, r2
 8001c2a:	00db      	lsls	r3, r3, #3
 8001c2c:	440b      	add	r3, r1
 8001c2e:	3308      	adds	r3, #8
 8001c30:	6819      	ldr	r1, [r3, #0]
 8001c32:	8a7b      	ldrh	r3, [r7, #18]
 8001c34:	79fa      	ldrb	r2, [r7, #7]
 8001c36:	1ac9      	subs	r1, r1, r3
 8001c38:	480c      	ldr	r0, [pc, #48]	@ (8001c6c <HW_TS_Start+0xfc>)
 8001c3a:	4613      	mov	r3, r2
 8001c3c:	005b      	lsls	r3, r3, #1
 8001c3e:	4413      	add	r3, r2
 8001c40:	00db      	lsls	r3, r3, #3
 8001c42:	4403      	add	r3, r0
 8001c44:	3308      	adds	r3, #8
 8001c46:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8001c48:	4b09      	ldr	r3, [pc, #36]	@ (8001c70 <HW_TS_Start+0x100>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	22ff      	movs	r2, #255	@ 0xff
 8001c4e:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001c50:	2003      	movs	r0, #3
 8001c52:	f005 ffe6 	bl	8007c22 <HAL_NVIC_EnableIRQ>
 8001c56:	697b      	ldr	r3, [r7, #20]
 8001c58:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001c5a:	68bb      	ldr	r3, [r7, #8]
 8001c5c:	f383 8810 	msr	PRIMASK, r3
}
 8001c60:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8001c62:	bf00      	nop
}
 8001c64:	3718      	adds	r7, #24
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}
 8001c6a:	bf00      	nop
 8001c6c:	2000014c 	.word	0x2000014c
 8001c70:	200002e8 	.word	0x200002e8
 8001c74:	200001dc 	.word	0x200001dc
 8001c78:	200001dd 	.word	0x200001dd

08001c7c <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b084      	sub	sp, #16
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	60f8      	str	r0, [r7, #12]
 8001c84:	460b      	mov	r3, r1
 8001c86:	607a      	str	r2, [r7, #4]
 8001c88:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	4798      	blx	r3

  return;
 8001c8e:	bf00      	nop
}
 8001c90:	3710      	adds	r7, #16
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}
	...

08001c98 <MagCal_Run>:

int magcal_type = 0;
int magcal_cnt = 0;

int MagCal_Run(void)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b084      	sub	sp, #16
 8001c9c:	af00      	add	r7, sp, #0
	int i, j;			// loop counters
	int isolver;		// magnetic solver used
	int count=0;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	603b      	str	r3, [r7, #0]
	static int waitcount=0;

	// only do the calibration occasionally
	if (++waitcount < 5) return 0;
 8001ca2:	4b88      	ldr	r3, [pc, #544]	@ (8001ec4 <MagCal_Run+0x22c>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	3301      	adds	r3, #1
 8001ca8:	4a86      	ldr	r2, [pc, #536]	@ (8001ec4 <MagCal_Run+0x22c>)
 8001caa:	6013      	str	r3, [r2, #0]
 8001cac:	4b85      	ldr	r3, [pc, #532]	@ (8001ec4 <MagCal_Run+0x22c>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	2b04      	cmp	r3, #4
 8001cb2:	dc01      	bgt.n	8001cb8 <MagCal_Run+0x20>
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	e100      	b.n	8001eba <MagCal_Run+0x222>
	waitcount = 0;
 8001cb8:	4b82      	ldr	r3, [pc, #520]	@ (8001ec4 <MagCal_Run+0x22c>)
 8001cba:	2200      	movs	r2, #0
 8001cbc:	601a      	str	r2, [r3, #0]

	// count number of data points
	for (i=0; i < MAGBUFFSIZE; i++) {
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	60fb      	str	r3, [r7, #12]
 8001cc2:	e00f      	b.n	8001ce4 <MagCal_Run+0x4c>
		if (magcal.valid[i]) count++;
 8001cc4:	4a80      	ldr	r2, [pc, #512]	@ (8001ec8 <MagCal_Run+0x230>)
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	4413      	add	r3, r2
 8001cca:	f503 539a 	add.w	r3, r3, #4928	@ 0x1340
 8001cce:	3316      	adds	r3, #22
 8001cd0:	f993 3000 	ldrsb.w	r3, [r3]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d002      	beq.n	8001cde <MagCal_Run+0x46>
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	3301      	adds	r3, #1
 8001cdc:	603b      	str	r3, [r7, #0]
	for (i=0; i < MAGBUFFSIZE; i++) {
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	3301      	adds	r3, #1
 8001ce2:	60fb      	str	r3, [r7, #12]
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	f240 2289 	movw	r2, #649	@ 0x289
 8001cea:	4293      	cmp	r3, r2
 8001cec:	ddea      	ble.n	8001cc4 <MagCal_Run+0x2c>
	}

	magcal_cnt = count;
 8001cee:	4a77      	ldr	r2, [pc, #476]	@ (8001ecc <MagCal_Run+0x234>)
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	6013      	str	r3, [r2, #0]

	if (count < MINMEASUREMENTS4CAL) return 0;
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	2b27      	cmp	r3, #39	@ 0x27
 8001cf8:	dc01      	bgt.n	8001cfe <MagCal_Run+0x66>
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	e0dd      	b.n	8001eba <MagCal_Run+0x222>

	if (magcal.ValidMagCal) {
 8001cfe:	4b72      	ldr	r3, [pc, #456]	@ (8001ec8 <MagCal_Run+0x230>)
 8001d00:	f993 3418 	ldrsb.w	r3, [r3, #1048]	@ 0x418
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d009      	beq.n	8001d1c <MagCal_Run+0x84>
		// age the existing fit error to avoid one good calibration locking out future updates
		magcal.FitErrorAge *= 1.02f;
 8001d08:	4b6f      	ldr	r3, [pc, #444]	@ (8001ec8 <MagCal_Run+0x230>)
 8001d0a:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 8001d0e:	ed9f 7a70 	vldr	s14, [pc, #448]	@ 8001ed0 <MagCal_Run+0x238>
 8001d12:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d16:	4b6c      	ldr	r3, [pc, #432]	@ (8001ec8 <MagCal_Run+0x230>)
 8001d18:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
	}

	if (count < MINMEASUREMENTS7CAL)
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	2b63      	cmp	r3, #99	@ 0x63
 8001d20:	dc12      	bgt.n	8001d48 <MagCal_Run+0xb0>
	{
		isolver = 4;
 8001d22:	2304      	movs	r3, #4
 8001d24:	607b      	str	r3, [r7, #4]
		fUpdateCalibration4INV(&magcal); // 4 element matrix inversion calibration
 8001d26:	4868      	ldr	r0, [pc, #416]	@ (8001ec8 <MagCal_Run+0x230>)
 8001d28:	f000 f8da 	bl	8001ee0 <fUpdateCalibration4INV>
		if (magcal.trFitErrorpc < 12.0f) magcal.trFitErrorpc = 12.0f;
 8001d2c:	4b66      	ldr	r3, [pc, #408]	@ (8001ec8 <MagCal_Run+0x230>)
 8001d2e:	edd3 7a1d 	vldr	s15, [r3, #116]	@ 0x74
 8001d32:	eeb2 7a08 	vmov.f32	s14, #40	@ 0x41400000  12.0
 8001d36:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d3e:	d51e      	bpl.n	8001d7e <MagCal_Run+0xe6>
 8001d40:	4b61      	ldr	r3, [pc, #388]	@ (8001ec8 <MagCal_Run+0x230>)
 8001d42:	4a64      	ldr	r2, [pc, #400]	@ (8001ed4 <MagCal_Run+0x23c>)
 8001d44:	675a      	str	r2, [r3, #116]	@ 0x74
 8001d46:	e01a      	b.n	8001d7e <MagCal_Run+0xe6>
	}
	else if (count < MINMEASUREMENTS10CAL)
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	2b95      	cmp	r3, #149	@ 0x95
 8001d4c:	dc12      	bgt.n	8001d74 <MagCal_Run+0xdc>
	{
		isolver = 7;
 8001d4e:	2307      	movs	r3, #7
 8001d50:	607b      	str	r3, [r7, #4]
		fUpdateCalibration7EIG(&magcal); // 7 element eigenpair calibration
 8001d52:	485d      	ldr	r0, [pc, #372]	@ (8001ec8 <MagCal_Run+0x230>)
 8001d54:	f000 fc5c 	bl	8002610 <fUpdateCalibration7EIG>
		if (magcal.trFitErrorpc < 7.5f) magcal.trFitErrorpc = 7.5f;
 8001d58:	4b5b      	ldr	r3, [pc, #364]	@ (8001ec8 <MagCal_Run+0x230>)
 8001d5a:	edd3 7a1d 	vldr	s15, [r3, #116]	@ 0x74
 8001d5e:	eeb1 7a0e 	vmov.f32	s14, #30	@ 0x40f00000  7.5
 8001d62:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d6a:	d508      	bpl.n	8001d7e <MagCal_Run+0xe6>
 8001d6c:	4b56      	ldr	r3, [pc, #344]	@ (8001ec8 <MagCal_Run+0x230>)
 8001d6e:	4a5a      	ldr	r2, [pc, #360]	@ (8001ed8 <MagCal_Run+0x240>)
 8001d70:	675a      	str	r2, [r3, #116]	@ 0x74
 8001d72:	e004      	b.n	8001d7e <MagCal_Run+0xe6>
	}
	else
	{
		isolver = 10;
 8001d74:	230a      	movs	r3, #10
 8001d76:	607b      	str	r3, [r7, #4]
		fUpdateCalibration10EIG(&magcal); // 10 element eigenpair calibration
 8001d78:	4853      	ldr	r0, [pc, #332]	@ (8001ec8 <MagCal_Run+0x230>)
 8001d7a:	f000 ff3b 	bl	8002bf4 <fUpdateCalibration10EIG>
	}

	// the trial geomagnetic field must be in range (earth is 22uT to 67uT)
	if ((magcal.trB >= MINBFITUT) && (magcal.trB <= MAXBFITUT))
 8001d7e:	4b52      	ldr	r3, [pc, #328]	@ (8001ec8 <MagCal_Run+0x230>)
 8001d80:	edd3 7a1c 	vldr	s15, [r3, #112]	@ 0x70
 8001d84:	eeb3 7a06 	vmov.f32	s14, #54	@ 0x41b00000  22.0
 8001d88:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d90:	f2c0 8092 	blt.w	8001eb8 <MagCal_Run+0x220>
 8001d94:	4b4c      	ldr	r3, [pc, #304]	@ (8001ec8 <MagCal_Run+0x230>)
 8001d96:	edd3 7a1c 	vldr	s15, [r3, #112]	@ 0x70
 8001d9a:	ed9f 7a50 	vldr	s14, [pc, #320]	@ 8001edc <MagCal_Run+0x244>
 8001d9e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001da2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001da6:	f200 8087 	bhi.w	8001eb8 <MagCal_Run+0x220>
	{
			// always accept the calibration if
			//  1: no previous calibration exists
			//  2: the calibration fit is reduced or
			//  3: an improved solver was used giving a good trial calibration (4% or under)
		if ((magcal.ValidMagCal == 0) ||(magcal.trFitErrorpc <= magcal.FitErrorAge) ||((isolver > magcal.ValidMagCal) && (magcal.trFitErrorpc <= 4.0F)))
 8001daa:	4b47      	ldr	r3, [pc, #284]	@ (8001ec8 <MagCal_Run+0x230>)
 8001dac:	f993 3418 	ldrsb.w	r3, [r3, #1048]	@ 0x418
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d01b      	beq.n	8001dec <MagCal_Run+0x154>
 8001db4:	4b44      	ldr	r3, [pc, #272]	@ (8001ec8 <MagCal_Run+0x230>)
 8001db6:	ed93 7a1d 	vldr	s14, [r3, #116]	@ 0x74
 8001dba:	4b43      	ldr	r3, [pc, #268]	@ (8001ec8 <MagCal_Run+0x230>)
 8001dbc:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 8001dc0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001dc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dc8:	d910      	bls.n	8001dec <MagCal_Run+0x154>
 8001dca:	4b3f      	ldr	r3, [pc, #252]	@ (8001ec8 <MagCal_Run+0x230>)
 8001dcc:	f993 3418 	ldrsb.w	r3, [r3, #1048]	@ 0x418
 8001dd0:	461a      	mov	r2, r3
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	dd6f      	ble.n	8001eb8 <MagCal_Run+0x220>
 8001dd8:	4b3b      	ldr	r3, [pc, #236]	@ (8001ec8 <MagCal_Run+0x230>)
 8001dda:	edd3 7a1d 	vldr	s15, [r3, #116]	@ 0x74
 8001dde:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8001de2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001de6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dea:	d865      	bhi.n	8001eb8 <MagCal_Run+0x220>
		{
				// accept the new calibration solution
				//printf("new magnetic cal, B=%.2f uT\n", magcal.trB);
			magcal.ValidMagCal = isolver;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	b25a      	sxtb	r2, r3
 8001df0:	4b35      	ldr	r3, [pc, #212]	@ (8001ec8 <MagCal_Run+0x230>)
 8001df2:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
			magcal.FitError = magcal.trFitErrorpc;
 8001df6:	4b34      	ldr	r3, [pc, #208]	@ (8001ec8 <MagCal_Run+0x230>)
 8001df8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001dfa:	4a33      	ldr	r2, [pc, #204]	@ (8001ec8 <MagCal_Run+0x230>)
 8001dfc:	6393      	str	r3, [r2, #56]	@ 0x38
			if (magcal.trFitErrorpc > 2.0f)
 8001dfe:	4b32      	ldr	r3, [pc, #200]	@ (8001ec8 <MagCal_Run+0x230>)
 8001e00:	edd3 7a1d 	vldr	s15, [r3, #116]	@ 0x74
 8001e04:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8001e08:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e10:	dd04      	ble.n	8001e1c <MagCal_Run+0x184>
			{
				magcal.FitErrorAge = magcal.trFitErrorpc;
 8001e12:	4b2d      	ldr	r3, [pc, #180]	@ (8001ec8 <MagCal_Run+0x230>)
 8001e14:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001e16:	4a2c      	ldr	r2, [pc, #176]	@ (8001ec8 <MagCal_Run+0x230>)
 8001e18:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8001e1a:	e003      	b.n	8001e24 <MagCal_Run+0x18c>
			}
			else
			{
				magcal.FitErrorAge = 2.0f;
 8001e1c:	4b2a      	ldr	r3, [pc, #168]	@ (8001ec8 <MagCal_Run+0x230>)
 8001e1e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001e22:	63da      	str	r2, [r3, #60]	@ 0x3c
			}
			magcal.B = magcal.trB;
 8001e24:	4b28      	ldr	r3, [pc, #160]	@ (8001ec8 <MagCal_Run+0x230>)
 8001e26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e28:	4a27      	ldr	r2, [pc, #156]	@ (8001ec8 <MagCal_Run+0x230>)
 8001e2a:	6313      	str	r3, [r2, #48]	@ 0x30
			magcal.FourBsq = 4.0F * magcal.trB * magcal.trB;
 8001e2c:	4b26      	ldr	r3, [pc, #152]	@ (8001ec8 <MagCal_Run+0x230>)
 8001e2e:	edd3 7a1c 	vldr	s15, [r3, #112]	@ 0x70
 8001e32:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8001e36:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001e3a:	4b23      	ldr	r3, [pc, #140]	@ (8001ec8 <MagCal_Run+0x230>)
 8001e3c:	edd3 7a1c 	vldr	s15, [r3, #112]	@ 0x70
 8001e40:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e44:	4b20      	ldr	r3, [pc, #128]	@ (8001ec8 <MagCal_Run+0x230>)
 8001e46:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
			for (i = X; i <= Z; i++) {
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	60fb      	str	r3, [r7, #12]
 8001e4e:	e02e      	b.n	8001eae <MagCal_Run+0x216>
				magcal.V[i] = magcal.trV[i];
 8001e50:	4a1d      	ldr	r2, [pc, #116]	@ (8001ec8 <MagCal_Run+0x230>)
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	3310      	adds	r3, #16
 8001e56:	009b      	lsls	r3, r3, #2
 8001e58:	4413      	add	r3, r2
 8001e5a:	681a      	ldr	r2, [r3, #0]
 8001e5c:	491a      	ldr	r1, [pc, #104]	@ (8001ec8 <MagCal_Run+0x230>)
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	009b      	lsls	r3, r3, #2
 8001e62:	440b      	add	r3, r1
 8001e64:	601a      	str	r2, [r3, #0]
				for (j = X; j <= Z; j++) {
 8001e66:	2300      	movs	r3, #0
 8001e68:	60bb      	str	r3, [r7, #8]
 8001e6a:	e01a      	b.n	8001ea2 <MagCal_Run+0x20a>
					magcal.invW[i][j] = magcal.trinvW[i][j];
 8001e6c:	4916      	ldr	r1, [pc, #88]	@ (8001ec8 <MagCal_Run+0x230>)
 8001e6e:	68fa      	ldr	r2, [r7, #12]
 8001e70:	4613      	mov	r3, r2
 8001e72:	005b      	lsls	r3, r3, #1
 8001e74:	4413      	add	r3, r2
 8001e76:	68ba      	ldr	r2, [r7, #8]
 8001e78:	4413      	add	r3, r2
 8001e7a:	3312      	adds	r3, #18
 8001e7c:	009b      	lsls	r3, r3, #2
 8001e7e:	440b      	add	r3, r1
 8001e80:	3304      	adds	r3, #4
 8001e82:	6819      	ldr	r1, [r3, #0]
 8001e84:	4810      	ldr	r0, [pc, #64]	@ (8001ec8 <MagCal_Run+0x230>)
 8001e86:	68fa      	ldr	r2, [r7, #12]
 8001e88:	4613      	mov	r3, r2
 8001e8a:	005b      	lsls	r3, r3, #1
 8001e8c:	4413      	add	r3, r2
 8001e8e:	68ba      	ldr	r2, [r7, #8]
 8001e90:	4413      	add	r3, r2
 8001e92:	3302      	adds	r3, #2
 8001e94:	009b      	lsls	r3, r3, #2
 8001e96:	4403      	add	r3, r0
 8001e98:	3304      	adds	r3, #4
 8001e9a:	6019      	str	r1, [r3, #0]
				for (j = X; j <= Z; j++) {
 8001e9c:	68bb      	ldr	r3, [r7, #8]
 8001e9e:	3301      	adds	r3, #1
 8001ea0:	60bb      	str	r3, [r7, #8]
 8001ea2:	68bb      	ldr	r3, [r7, #8]
 8001ea4:	2b02      	cmp	r3, #2
 8001ea6:	dde1      	ble.n	8001e6c <MagCal_Run+0x1d4>
			for (i = X; i <= Z; i++) {
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	3301      	adds	r3, #1
 8001eac:	60fb      	str	r3, [r7, #12]
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	2b02      	cmp	r3, #2
 8001eb2:	ddcd      	ble.n	8001e50 <MagCal_Run+0x1b8>
				}
			}
			return 1; // indicates new calibration applied
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	e000      	b.n	8001eba <MagCal_Run+0x222>
		}
	}

	return 0;
 8001eb8:	2300      	movs	r3, #0
}
 8001eba:	4618      	mov	r0, r3
 8001ebc:	3710      	adds	r7, #16
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	200001f4 	.word	0x200001f4
 8001ec8:	200004f0 	.word	0x200004f0
 8001ecc:	200001f0 	.word	0x200001f0
 8001ed0:	3f828f5c 	.word	0x3f828f5c
 8001ed4:	41400000 	.word	0x41400000
 8001ed8:	40f00000 	.word	0x40f00000
 8001edc:	42860000 	.word	0x42860000

08001ee0 <fUpdateCalibration4INV>:

static void fUpdateCalibration4INV(MagCalibration_t *MagCal)
{
 8001ee0:	b590      	push	{r4, r7, lr}
 8001ee2:	b097      	sub	sp, #92	@ 0x5c
 8001ee4:	af02      	add	r7, sp, #8
 8001ee6:	6078      	str	r0, [r7, #4]
	float *pfRows[4];
	int8_t iColInd[4];
	int8_t iRowInd[4];
	int8_t iPivot[4];

	magcal_type = 1;
 8001ee8:	4b68      	ldr	r3, [pc, #416]	@ (800208c <fUpdateCalibration4INV+0x1ac>)
 8001eea:	2201      	movs	r2, #1
 8001eec:	601a      	str	r2, [r3, #0]
	// compute fscaling to reduce multiplications later
	fscaling = FXOS8700_UTPERCOUNT / DEFAULTB;
 8001eee:	4b68      	ldr	r3, [pc, #416]	@ (8002090 <fUpdateCalibration4INV+0x1b0>)
 8001ef0:	637b      	str	r3, [r7, #52]	@ 0x34

	// the trial inverse soft iron matrix invW always equals
	// the identity matrix for 4 element calibration
	f3x3matrixAeqI(MagCal->trinvW);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	334c      	adds	r3, #76	@ 0x4c
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f003 fefe 	bl	8005cf8 <f3x3matrixAeqI>

	// zero fSumBp4=Y^T.Y, vecB=X^T.Y (4x1) and on and above
	// diagonal elements of matA=X^T*X (4x4)
	fSumBp4 = 0.0F;
 8001efc:	f04f 0300 	mov.w	r3, #0
 8001f00:	64fb      	str	r3, [r7, #76]	@ 0x4c
	for (i = 0; i < 4; i++) {
 8001f02:	2300      	movs	r3, #0
 8001f04:	643b      	str	r3, [r7, #64]	@ 0x40
 8001f06:	e022      	b.n	8001f4e <fUpdateCalibration4INV+0x6e>
		MagCal->vecB[i] = 0.0F;
 8001f08:	687a      	ldr	r2, [r7, #4]
 8001f0a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001f0c:	f503 7381 	add.w	r3, r3, #258	@ 0x102
 8001f10:	009b      	lsls	r3, r3, #2
 8001f12:	4413      	add	r3, r2
 8001f14:	f04f 0200 	mov.w	r2, #0
 8001f18:	601a      	str	r2, [r3, #0]
		for (j = i; j < 4; j++) {
 8001f1a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001f1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001f1e:	e010      	b.n	8001f42 <fUpdateCalibration4INV+0x62>
			MagCal->matA[i][j] = 0.0F;
 8001f20:	6879      	ldr	r1, [r7, #4]
 8001f22:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001f24:	4613      	mov	r3, r2
 8001f26:	009b      	lsls	r3, r3, #2
 8001f28:	4413      	add	r3, r2
 8001f2a:	005b      	lsls	r3, r3, #1
 8001f2c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001f2e:	4413      	add	r3, r2
 8001f30:	3330      	adds	r3, #48	@ 0x30
 8001f32:	009b      	lsls	r3, r3, #2
 8001f34:	440b      	add	r3, r1
 8001f36:	f04f 0200 	mov.w	r2, #0
 8001f3a:	601a      	str	r2, [r3, #0]
		for (j = i; j < 4; j++) {
 8001f3c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001f3e:	3301      	adds	r3, #1
 8001f40:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001f42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001f44:	2b03      	cmp	r3, #3
 8001f46:	ddeb      	ble.n	8001f20 <fUpdateCalibration4INV+0x40>
	for (i = 0; i < 4; i++) {
 8001f48:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001f4a:	3301      	adds	r3, #1
 8001f4c:	643b      	str	r3, [r7, #64]	@ 0x40
 8001f4e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001f50:	2b03      	cmp	r3, #3
 8001f52:	ddd9      	ble.n	8001f08 <fUpdateCalibration4INV+0x28>
		}
	}

	// the offsets are guaranteed to be set from the first element but to avoid compiler error
	iOffset[X] = iOffset[Y] = iOffset[Z] = 0;
 8001f54:	2300      	movs	r3, #0
 8001f56:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8001f58:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 8001f5c:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8001f5e:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 8001f62:	853b      	strh	r3, [r7, #40]	@ 0x28

	// use from MINEQUATIONS up to MAXEQUATIONS entries from magnetic buffer to compute matrices
	iCount = 0;
 8001f64:	2300      	movs	r3, #0
 8001f66:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
	for (j = 0; j < MAGBUFFSIZE; j++) {
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001f6e:	e13e      	b.n	80021ee <fUpdateCalibration4INV+0x30e>
		if (MagCal->valid[j]) {
 8001f70:	687a      	ldr	r2, [r7, #4]
 8001f72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001f74:	4413      	add	r3, r2
 8001f76:	f503 539a 	add.w	r3, r3, #4928	@ 0x1340
 8001f7a:	3316      	adds	r3, #22
 8001f7c:	f993 3000 	ldrsb.w	r3, [r3]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	f000 8131 	beq.w	80021e8 <fUpdateCalibration4INV+0x308>
			// use first valid magnetic buffer entry as estimate (in counts) for offset
			if (iCount == 0) {
 8001f86:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	@ 0x46
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d11c      	bne.n	8001fc8 <fUpdateCalibration4INV+0xe8>
				for (k = X; k <= Z; k++) {
 8001f8e:	2300      	movs	r3, #0
 8001f90:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001f92:	e016      	b.n	8001fc2 <fUpdateCalibration4INV+0xe2>
					iOffset[k] = MagCal->BpFast[k][j];
 8001f94:	687a      	ldr	r2, [r7, #4]
 8001f96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001f98:	f240 218a 	movw	r1, #650	@ 0x28a
 8001f9c:	fb03 f101 	mul.w	r1, r3, r1
 8001fa0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001fa2:	440b      	add	r3, r1
 8001fa4:	f503 7303 	add.w	r3, r3, #524	@ 0x20c
 8001fa8:	005b      	lsls	r3, r3, #1
 8001faa:	4413      	add	r3, r2
 8001fac:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8001fb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001fb2:	005b      	lsls	r3, r3, #1
 8001fb4:	3350      	adds	r3, #80	@ 0x50
 8001fb6:	443b      	add	r3, r7
 8001fb8:	f823 2c28 	strh.w	r2, [r3, #-40]
				for (k = X; k <= Z; k++) {
 8001fbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001fbe:	3301      	adds	r3, #1
 8001fc0:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001fc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001fc4:	2b02      	cmp	r3, #2
 8001fc6:	dde5      	ble.n	8001f94 <fUpdateCalibration4INV+0xb4>
				}
			}

			// store scaled and offset fBp[XYZ] in vecA[0-2] and fBp[XYZ]^2 in vecA[3-5]
			for (k = X; k <= Z; k++) {
 8001fc8:	2300      	movs	r3, #0
 8001fca:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001fcc:	e03f      	b.n	800204e <fUpdateCalibration4INV+0x16e>
				MagCal->vecA[k] = (float)((int32_t)MagCal->BpFast[k][j]
 8001fce:	687a      	ldr	r2, [r7, #4]
 8001fd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001fd2:	f240 218a 	movw	r1, #650	@ 0x28a
 8001fd6:	fb03 f101 	mul.w	r1, r3, r1
 8001fda:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001fdc:	440b      	add	r3, r1
 8001fde:	f503 7303 	add.w	r3, r3, #524	@ 0x20c
 8001fe2:	005b      	lsls	r3, r3, #1
 8001fe4:	4413      	add	r3, r2
 8001fe6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001fea:	461a      	mov	r2, r3
					- (int32_t)iOffset[k]) * fscaling;
 8001fec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001fee:	005b      	lsls	r3, r3, #1
 8001ff0:	3350      	adds	r3, #80	@ 0x50
 8001ff2:	443b      	add	r3, r7
 8001ff4:	f933 3c28 	ldrsh.w	r3, [r3, #-40]
 8001ff8:	1ad3      	subs	r3, r2, r3
				MagCal->vecA[k] = (float)((int32_t)MagCal->BpFast[k][j]
 8001ffa:	ee07 3a90 	vmov	s15, r3
 8001ffe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
					- (int32_t)iOffset[k]) * fscaling;
 8002002:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8002006:	ee67 7a27 	vmul.f32	s15, s14, s15
				MagCal->vecA[k] = (float)((int32_t)MagCal->BpFast[k][j]
 800200a:	687a      	ldr	r2, [r7, #4]
 800200c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800200e:	33f8      	adds	r3, #248	@ 0xf8
 8002010:	009b      	lsls	r3, r3, #2
 8002012:	4413      	add	r3, r2
 8002014:	edc3 7a00 	vstr	s15, [r3]
				MagCal->vecA[k + 3] = MagCal->vecA[k] * MagCal->vecA[k];
 8002018:	687a      	ldr	r2, [r7, #4]
 800201a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800201c:	33f8      	adds	r3, #248	@ 0xf8
 800201e:	009b      	lsls	r3, r3, #2
 8002020:	4413      	add	r3, r2
 8002022:	ed93 7a00 	vldr	s14, [r3]
 8002026:	687a      	ldr	r2, [r7, #4]
 8002028:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800202a:	33f8      	adds	r3, #248	@ 0xf8
 800202c:	009b      	lsls	r3, r3, #2
 800202e:	4413      	add	r3, r2
 8002030:	edd3 7a00 	vldr	s15, [r3]
 8002034:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002036:	3303      	adds	r3, #3
 8002038:	ee67 7a27 	vmul.f32	s15, s14, s15
 800203c:	687a      	ldr	r2, [r7, #4]
 800203e:	33f8      	adds	r3, #248	@ 0xf8
 8002040:	009b      	lsls	r3, r3, #2
 8002042:	4413      	add	r3, r2
 8002044:	edc3 7a00 	vstr	s15, [r3]
			for (k = X; k <= Z; k++) {
 8002048:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800204a:	3301      	adds	r3, #1
 800204c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800204e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002050:	2b02      	cmp	r3, #2
 8002052:	ddbc      	ble.n	8001fce <fUpdateCalibration4INV+0xee>
			}

			// calculate fBp2 = Bp[X]^2 + Bp[Y]^2 + Bp[Z]^2 (scaled uT^2)
			fBp2 = MagCal->vecA[3] + MagCal->vecA[4] + MagCal->vecA[5];
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	ed93 7afb 	vldr	s14, [r3, #1004]	@ 0x3ec
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	edd3 7afc 	vldr	s15, [r3, #1008]	@ 0x3f0
 8002060:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	edd3 7afd 	vldr	s15, [r3, #1012]	@ 0x3f4
 800206a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800206e:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30

			// accumulate fBp^4 over all measurements into fSumBp4=Y^T.Y
			fSumBp4 += fBp2 * fBp2;
 8002072:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8002076:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800207a:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 800207e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002082:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c

			// now we have fBp2, accumulate vecB[0-2] = X^T.Y =sum(Bp2.Bp[XYZ])
			for (k = X; k <= Z; k++) {
 8002086:	2300      	movs	r3, #0
 8002088:	63bb      	str	r3, [r7, #56]	@ 0x38
 800208a:	e023      	b.n	80020d4 <fUpdateCalibration4INV+0x1f4>
 800208c:	200001ec 	.word	0x200001ec
 8002090:	3b03126f 	.word	0x3b03126f
				MagCal->vecB[k] += MagCal->vecA[k] * fBp2;
 8002094:	687a      	ldr	r2, [r7, #4]
 8002096:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002098:	f503 7381 	add.w	r3, r3, #258	@ 0x102
 800209c:	009b      	lsls	r3, r3, #2
 800209e:	4413      	add	r3, r2
 80020a0:	ed93 7a00 	vldr	s14, [r3]
 80020a4:	687a      	ldr	r2, [r7, #4]
 80020a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80020a8:	33f8      	adds	r3, #248	@ 0xf8
 80020aa:	009b      	lsls	r3, r3, #2
 80020ac:	4413      	add	r3, r2
 80020ae:	edd3 6a00 	vldr	s13, [r3]
 80020b2:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80020b6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80020ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020be:	687a      	ldr	r2, [r7, #4]
 80020c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80020c2:	f503 7381 	add.w	r3, r3, #258	@ 0x102
 80020c6:	009b      	lsls	r3, r3, #2
 80020c8:	4413      	add	r3, r2
 80020ca:	edc3 7a00 	vstr	s15, [r3]
			for (k = X; k <= Z; k++) {
 80020ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80020d0:	3301      	adds	r3, #1
 80020d2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80020d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80020d6:	2b02      	cmp	r3, #2
 80020d8:	dddc      	ble.n	8002094 <fUpdateCalibration4INV+0x1b4>
			}

			//accumulate vecB[3] = X^T.Y =sum(fBp2)
			MagCal->vecB[3] += fBp2;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	f203 4314 	addw	r3, r3, #1044	@ 0x414
 80020e0:	ed93 7a00 	vldr	s14, [r3]
 80020e4:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80020e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	f203 4314 	addw	r3, r3, #1044	@ 0x414
 80020f2:	edc3 7a00 	vstr	s15, [r3]

			// accumulate on and above-diagonal terms of matA = X^T.X ignoring matA[3][3]
			MagCal->matA[0][0] += MagCal->vecA[X + 3];
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	ed93 7a30 	vldr	s14, [r3, #192]	@ 0xc0
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	edd3 7afb 	vldr	s15, [r3, #1004]	@ 0x3ec
 8002102:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	edc3 7a30 	vstr	s15, [r3, #192]	@ 0xc0
			MagCal->matA[0][1] += MagCal->vecA[X] * MagCal->vecA[Y];
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	ed93 7a31 	vldr	s14, [r3, #196]	@ 0xc4
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	edd3 6af8 	vldr	s13, [r3, #992]	@ 0x3e0
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	edd3 7af9 	vldr	s15, [r3, #996]	@ 0x3e4
 800211e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002122:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	edc3 7a31 	vstr	s15, [r3, #196]	@ 0xc4
			MagCal->matA[0][2] += MagCal->vecA[X] * MagCal->vecA[Z];
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	ed93 7a32 	vldr	s14, [r3, #200]	@ 0xc8
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	edd3 6af8 	vldr	s13, [r3, #992]	@ 0x3e0
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	edd3 7afa 	vldr	s15, [r3, #1000]	@ 0x3e8
 800213e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002142:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	edc3 7a32 	vstr	s15, [r3, #200]	@ 0xc8
			MagCal->matA[0][3] += MagCal->vecA[X];
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	ed93 7a33 	vldr	s14, [r3, #204]	@ 0xcc
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	edd3 7af8 	vldr	s15, [r3, #992]	@ 0x3e0
 8002158:	ee77 7a27 	vadd.f32	s15, s14, s15
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	edc3 7a33 	vstr	s15, [r3, #204]	@ 0xcc
			MagCal->matA[1][1] += MagCal->vecA[Y + 3];
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	ed93 7a3b 	vldr	s14, [r3, #236]	@ 0xec
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	edd3 7afc 	vldr	s15, [r3, #1008]	@ 0x3f0
 800216e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	edc3 7a3b 	vstr	s15, [r3, #236]	@ 0xec
			MagCal->matA[1][2] += MagCal->vecA[Y] * MagCal->vecA[Z];
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	ed93 7a3c 	vldr	s14, [r3, #240]	@ 0xf0
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	edd3 6af9 	vldr	s13, [r3, #996]	@ 0x3e4
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	edd3 7afa 	vldr	s15, [r3, #1000]	@ 0x3e8
 800218a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800218e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	edc3 7a3c 	vstr	s15, [r3, #240]	@ 0xf0
			MagCal->matA[1][3] += MagCal->vecA[Y];
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	ed93 7a3d 	vldr	s14, [r3, #244]	@ 0xf4
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	edd3 7af9 	vldr	s15, [r3, #996]	@ 0x3e4
 80021a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	edc3 7a3d 	vstr	s15, [r3, #244]	@ 0xf4
			MagCal->matA[2][2] += MagCal->vecA[Z + 3];
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	ed93 7a46 	vldr	s14, [r3, #280]	@ 0x118
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	edd3 7afd 	vldr	s15, [r3, #1012]	@ 0x3f4
 80021ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	edc3 7a46 	vstr	s15, [r3, #280]	@ 0x118
			MagCal->matA[2][3] += MagCal->vecA[Z];
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	ed93 7a47 	vldr	s14, [r3, #284]	@ 0x11c
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	edd3 7afa 	vldr	s15, [r3, #1000]	@ 0x3e8
 80021d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	edc3 7a47 	vstr	s15, [r3, #284]	@ 0x11c

			// increment the counter for next iteration
			iCount++;
 80021da:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	@ 0x46
 80021de:	b29b      	uxth	r3, r3
 80021e0:	3301      	adds	r3, #1
 80021e2:	b29b      	uxth	r3, r3
 80021e4:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
	for (j = 0; j < MAGBUFFSIZE; j++) {
 80021e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80021ea:	3301      	adds	r3, #1
 80021ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80021ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80021f0:	f240 2289 	movw	r2, #649	@ 0x289
 80021f4:	4293      	cmp	r3, r2
 80021f6:	f77f aebb 	ble.w	8001f70 <fUpdateCalibration4INV+0x90>
		}
	}

	// set the last element of the measurement matrix to the number of buffer elements used
	MagCal->matA[3][3] = (float) iCount;
 80021fa:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	@ 0x46
 80021fe:	ee07 3a90 	vmov	s15, r3
 8002202:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	edc3 7a51 	vstr	s15, [r3, #324]	@ 0x144

	// store the number of measurements accumulated
	MagCal->MagBufferCount = iCount;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002212:	461a      	mov	r2, r3
 8002214:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8002218:	f8a2 35e0 	strh.w	r3, [r2, #1504]	@ 0x5e0

	// use above diagonal elements of symmetric matA to set both matB and matA to X^T.X
	for (i = 0; i < 4; i++) {
 800221c:	2300      	movs	r3, #0
 800221e:	643b      	str	r3, [r7, #64]	@ 0x40
 8002220:	e053      	b.n	80022ca <fUpdateCalibration4INV+0x3ea>
		for (j = i; j < 4; j++) {
 8002222:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002224:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002226:	e04a      	b.n	80022be <fUpdateCalibration4INV+0x3de>
			MagCal->matB[i][j] = MagCal->matB[j][i]
				= MagCal->matA[j][i] = MagCal->matA[i][j];
 8002228:	6879      	ldr	r1, [r7, #4]
 800222a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800222c:	4613      	mov	r3, r2
 800222e:	009b      	lsls	r3, r3, #2
 8002230:	4413      	add	r3, r2
 8002232:	005b      	lsls	r3, r3, #1
 8002234:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002236:	4413      	add	r3, r2
 8002238:	3330      	adds	r3, #48	@ 0x30
 800223a:	009b      	lsls	r3, r3, #2
 800223c:	440b      	add	r3, r1
 800223e:	6819      	ldr	r1, [r3, #0]
 8002240:	6878      	ldr	r0, [r7, #4]
 8002242:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002244:	4613      	mov	r3, r2
 8002246:	009b      	lsls	r3, r3, #2
 8002248:	4413      	add	r3, r2
 800224a:	005b      	lsls	r3, r3, #1
 800224c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800224e:	4413      	add	r3, r2
 8002250:	3330      	adds	r3, #48	@ 0x30
 8002252:	009b      	lsls	r3, r3, #2
 8002254:	4403      	add	r3, r0
 8002256:	6019      	str	r1, [r3, #0]
 8002258:	6879      	ldr	r1, [r7, #4]
 800225a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800225c:	4613      	mov	r3, r2
 800225e:	009b      	lsls	r3, r3, #2
 8002260:	4413      	add	r3, r2
 8002262:	005b      	lsls	r3, r3, #1
 8002264:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002266:	4413      	add	r3, r2
 8002268:	3330      	adds	r3, #48	@ 0x30
 800226a:	009b      	lsls	r3, r3, #2
 800226c:	440b      	add	r3, r1
 800226e:	6819      	ldr	r1, [r3, #0]
 8002270:	6878      	ldr	r0, [r7, #4]
 8002272:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002274:	4613      	mov	r3, r2
 8002276:	009b      	lsls	r3, r3, #2
 8002278:	4413      	add	r3, r2
 800227a:	005b      	lsls	r3, r3, #1
 800227c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800227e:	4413      	add	r3, r2
 8002280:	3394      	adds	r3, #148	@ 0x94
 8002282:	009b      	lsls	r3, r3, #2
 8002284:	4403      	add	r3, r0
 8002286:	6019      	str	r1, [r3, #0]
			MagCal->matB[i][j] = MagCal->matB[j][i]
 8002288:	6879      	ldr	r1, [r7, #4]
 800228a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800228c:	4613      	mov	r3, r2
 800228e:	009b      	lsls	r3, r3, #2
 8002290:	4413      	add	r3, r2
 8002292:	005b      	lsls	r3, r3, #1
 8002294:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002296:	4413      	add	r3, r2
 8002298:	3394      	adds	r3, #148	@ 0x94
 800229a:	009b      	lsls	r3, r3, #2
 800229c:	440b      	add	r3, r1
 800229e:	6819      	ldr	r1, [r3, #0]
 80022a0:	6878      	ldr	r0, [r7, #4]
 80022a2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80022a4:	4613      	mov	r3, r2
 80022a6:	009b      	lsls	r3, r3, #2
 80022a8:	4413      	add	r3, r2
 80022aa:	005b      	lsls	r3, r3, #1
 80022ac:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80022ae:	4413      	add	r3, r2
 80022b0:	3394      	adds	r3, #148	@ 0x94
 80022b2:	009b      	lsls	r3, r3, #2
 80022b4:	4403      	add	r3, r0
 80022b6:	6019      	str	r1, [r3, #0]
		for (j = i; j < 4; j++) {
 80022b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80022ba:	3301      	adds	r3, #1
 80022bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80022be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80022c0:	2b03      	cmp	r3, #3
 80022c2:	ddb1      	ble.n	8002228 <fUpdateCalibration4INV+0x348>
	for (i = 0; i < 4; i++) {
 80022c4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80022c6:	3301      	adds	r3, #1
 80022c8:	643b      	str	r3, [r7, #64]	@ 0x40
 80022ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80022cc:	2b03      	cmp	r3, #3
 80022ce:	dda8      	ble.n	8002222 <fUpdateCalibration4INV+0x342>
		}
	}

	// calculate in situ inverse of matB = inv(X^T.X) (4x4) while matA still holds X^T.X
	for (i = 0; i < 4; i++) {
 80022d0:	2300      	movs	r3, #0
 80022d2:	643b      	str	r3, [r7, #64]	@ 0x40
 80022d4:	e011      	b.n	80022fa <fUpdateCalibration4INV+0x41a>
		pfRows[i] = MagCal->matB[i];
 80022d6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80022d8:	4613      	mov	r3, r2
 80022da:	009b      	lsls	r3, r3, #2
 80022dc:	4413      	add	r3, r2
 80022de:	00db      	lsls	r3, r3, #3
 80022e0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80022e4:	687a      	ldr	r2, [r7, #4]
 80022e6:	441a      	add	r2, r3
 80022e8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80022ea:	009b      	lsls	r3, r3, #2
 80022ec:	3350      	adds	r3, #80	@ 0x50
 80022ee:	443b      	add	r3, r7
 80022f0:	f843 2c38 	str.w	r2, [r3, #-56]
	for (i = 0; i < 4; i++) {
 80022f4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80022f6:	3301      	adds	r3, #1
 80022f8:	643b      	str	r3, [r7, #64]	@ 0x40
 80022fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80022fc:	2b03      	cmp	r3, #3
 80022fe:	ddea      	ble.n	80022d6 <fUpdateCalibration4INV+0x3f6>
	}
	fmatrixAeqInvA(pfRows, iColInd, iRowInd, iPivot, 4);
 8002300:	f107 030c 	add.w	r3, r7, #12
 8002304:	f107 0210 	add.w	r2, r7, #16
 8002308:	f107 0114 	add.w	r1, r7, #20
 800230c:	f107 0018 	add.w	r0, r7, #24
 8002310:	2404      	movs	r4, #4
 8002312:	9400      	str	r4, [sp, #0]
 8002314:	f004 fb80 	bl	8006a18 <fmatrixAeqInvA>

	// calculate vecA = solution beta (4x1) = inv(X^T.X).X^T.Y = matB * vecB
	for (i = 0; i < 4; i++) {
 8002318:	2300      	movs	r3, #0
 800231a:	643b      	str	r3, [r7, #64]	@ 0x40
 800231c:	e03a      	b.n	8002394 <fUpdateCalibration4INV+0x4b4>
		MagCal->vecA[i] = 0.0F;
 800231e:	687a      	ldr	r2, [r7, #4]
 8002320:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002322:	33f8      	adds	r3, #248	@ 0xf8
 8002324:	009b      	lsls	r3, r3, #2
 8002326:	4413      	add	r3, r2
 8002328:	f04f 0200 	mov.w	r2, #0
 800232c:	601a      	str	r2, [r3, #0]
		for (k = 0; k < 4; k++) {
 800232e:	2300      	movs	r3, #0
 8002330:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002332:	e029      	b.n	8002388 <fUpdateCalibration4INV+0x4a8>
			MagCal->vecA[i] += MagCal->matB[i][k] * MagCal->vecB[k];
 8002334:	687a      	ldr	r2, [r7, #4]
 8002336:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002338:	33f8      	adds	r3, #248	@ 0xf8
 800233a:	009b      	lsls	r3, r3, #2
 800233c:	4413      	add	r3, r2
 800233e:	ed93 7a00 	vldr	s14, [r3]
 8002342:	6879      	ldr	r1, [r7, #4]
 8002344:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002346:	4613      	mov	r3, r2
 8002348:	009b      	lsls	r3, r3, #2
 800234a:	4413      	add	r3, r2
 800234c:	005b      	lsls	r3, r3, #1
 800234e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002350:	4413      	add	r3, r2
 8002352:	3394      	adds	r3, #148	@ 0x94
 8002354:	009b      	lsls	r3, r3, #2
 8002356:	440b      	add	r3, r1
 8002358:	edd3 6a00 	vldr	s13, [r3]
 800235c:	687a      	ldr	r2, [r7, #4]
 800235e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002360:	f503 7381 	add.w	r3, r3, #258	@ 0x102
 8002364:	009b      	lsls	r3, r3, #2
 8002366:	4413      	add	r3, r2
 8002368:	edd3 7a00 	vldr	s15, [r3]
 800236c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002370:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002374:	687a      	ldr	r2, [r7, #4]
 8002376:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002378:	33f8      	adds	r3, #248	@ 0xf8
 800237a:	009b      	lsls	r3, r3, #2
 800237c:	4413      	add	r3, r2
 800237e:	edc3 7a00 	vstr	s15, [r3]
		for (k = 0; k < 4; k++) {
 8002382:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002384:	3301      	adds	r3, #1
 8002386:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002388:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800238a:	2b03      	cmp	r3, #3
 800238c:	ddd2      	ble.n	8002334 <fUpdateCalibration4INV+0x454>
	for (i = 0; i < 4; i++) {
 800238e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002390:	3301      	adds	r3, #1
 8002392:	643b      	str	r3, [r7, #64]	@ 0x40
 8002394:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002396:	2b03      	cmp	r3, #3
 8002398:	ddc1      	ble.n	800231e <fUpdateCalibration4INV+0x43e>
	}

	// calculate P = r^T.r = Y^T.Y - 2 * beta^T.(X^T.Y) + beta^T.(X^T.X).beta
	// = fSumBp4 - 2 * vecA^T.vecB + vecA^T.matA.vecA
	// first set P = Y^T.Y - 2 * beta^T.(X^T.Y) = SumBp4 - 2 * vecA^T.vecB
	fE = 0.0F;
 800239a:	f04f 0300 	mov.w	r3, #0
 800239e:	64bb      	str	r3, [r7, #72]	@ 0x48
	for (i = 0; i < 4; i++) {
 80023a0:	2300      	movs	r3, #0
 80023a2:	643b      	str	r3, [r7, #64]	@ 0x40
 80023a4:	e019      	b.n	80023da <fUpdateCalibration4INV+0x4fa>
		fE += MagCal->vecA[i] * MagCal->vecB[i];
 80023a6:	687a      	ldr	r2, [r7, #4]
 80023a8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80023aa:	33f8      	adds	r3, #248	@ 0xf8
 80023ac:	009b      	lsls	r3, r3, #2
 80023ae:	4413      	add	r3, r2
 80023b0:	ed93 7a00 	vldr	s14, [r3]
 80023b4:	687a      	ldr	r2, [r7, #4]
 80023b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80023b8:	f503 7381 	add.w	r3, r3, #258	@ 0x102
 80023bc:	009b      	lsls	r3, r3, #2
 80023be:	4413      	add	r3, r2
 80023c0:	edd3 7a00 	vldr	s15, [r3]
 80023c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023c8:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 80023cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023d0:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
	for (i = 0; i < 4; i++) {
 80023d4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80023d6:	3301      	adds	r3, #1
 80023d8:	643b      	str	r3, [r7, #64]	@ 0x40
 80023da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80023dc:	2b03      	cmp	r3, #3
 80023de:	dde2      	ble.n	80023a6 <fUpdateCalibration4INV+0x4c6>
	}
	fE = fSumBp4 - 2.0F * fE;
 80023e0:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 80023e4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80023e8:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 80023ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 80023f0:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48

	// set vecB = (X^T.X).beta = matA.vecA
	for (i = 0; i < 4; i++) {
 80023f4:	2300      	movs	r3, #0
 80023f6:	643b      	str	r3, [r7, #64]	@ 0x40
 80023f8:	e03c      	b.n	8002474 <fUpdateCalibration4INV+0x594>
		MagCal->vecB[i] = 0.0F;
 80023fa:	687a      	ldr	r2, [r7, #4]
 80023fc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80023fe:	f503 7381 	add.w	r3, r3, #258	@ 0x102
 8002402:	009b      	lsls	r3, r3, #2
 8002404:	4413      	add	r3, r2
 8002406:	f04f 0200 	mov.w	r2, #0
 800240a:	601a      	str	r2, [r3, #0]
		for (k = 0; k < 4; k++) {
 800240c:	2300      	movs	r3, #0
 800240e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002410:	e02a      	b.n	8002468 <fUpdateCalibration4INV+0x588>
			MagCal->vecB[i] += MagCal->matA[i][k] * MagCal->vecA[k];
 8002412:	687a      	ldr	r2, [r7, #4]
 8002414:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002416:	f503 7381 	add.w	r3, r3, #258	@ 0x102
 800241a:	009b      	lsls	r3, r3, #2
 800241c:	4413      	add	r3, r2
 800241e:	ed93 7a00 	vldr	s14, [r3]
 8002422:	6879      	ldr	r1, [r7, #4]
 8002424:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002426:	4613      	mov	r3, r2
 8002428:	009b      	lsls	r3, r3, #2
 800242a:	4413      	add	r3, r2
 800242c:	005b      	lsls	r3, r3, #1
 800242e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002430:	4413      	add	r3, r2
 8002432:	3330      	adds	r3, #48	@ 0x30
 8002434:	009b      	lsls	r3, r3, #2
 8002436:	440b      	add	r3, r1
 8002438:	edd3 6a00 	vldr	s13, [r3]
 800243c:	687a      	ldr	r2, [r7, #4]
 800243e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002440:	33f8      	adds	r3, #248	@ 0xf8
 8002442:	009b      	lsls	r3, r3, #2
 8002444:	4413      	add	r3, r2
 8002446:	edd3 7a00 	vldr	s15, [r3]
 800244a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800244e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002452:	687a      	ldr	r2, [r7, #4]
 8002454:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002456:	f503 7381 	add.w	r3, r3, #258	@ 0x102
 800245a:	009b      	lsls	r3, r3, #2
 800245c:	4413      	add	r3, r2
 800245e:	edc3 7a00 	vstr	s15, [r3]
		for (k = 0; k < 4; k++) {
 8002462:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002464:	3301      	adds	r3, #1
 8002466:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002468:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800246a:	2b03      	cmp	r3, #3
 800246c:	ddd1      	ble.n	8002412 <fUpdateCalibration4INV+0x532>
	for (i = 0; i < 4; i++) {
 800246e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002470:	3301      	adds	r3, #1
 8002472:	643b      	str	r3, [r7, #64]	@ 0x40
 8002474:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002476:	2b03      	cmp	r3, #3
 8002478:	ddbf      	ble.n	80023fa <fUpdateCalibration4INV+0x51a>
		}
	}

	// complete calculation of P by adding beta^T.(X^T.X).beta = vecA^T * vecB
	for (i = 0; i < 4; i++) {
 800247a:	2300      	movs	r3, #0
 800247c:	643b      	str	r3, [r7, #64]	@ 0x40
 800247e:	e019      	b.n	80024b4 <fUpdateCalibration4INV+0x5d4>
		fE += MagCal->vecB[i] * MagCal->vecA[i];
 8002480:	687a      	ldr	r2, [r7, #4]
 8002482:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002484:	f503 7381 	add.w	r3, r3, #258	@ 0x102
 8002488:	009b      	lsls	r3, r3, #2
 800248a:	4413      	add	r3, r2
 800248c:	ed93 7a00 	vldr	s14, [r3]
 8002490:	687a      	ldr	r2, [r7, #4]
 8002492:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002494:	33f8      	adds	r3, #248	@ 0xf8
 8002496:	009b      	lsls	r3, r3, #2
 8002498:	4413      	add	r3, r2
 800249a:	edd3 7a00 	vldr	s15, [r3]
 800249e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024a2:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 80024a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024aa:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
	for (i = 0; i < 4; i++) {
 80024ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80024b0:	3301      	adds	r3, #1
 80024b2:	643b      	str	r3, [r7, #64]	@ 0x40
 80024b4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80024b6:	2b03      	cmp	r3, #3
 80024b8:	dde2      	ble.n	8002480 <fUpdateCalibration4INV+0x5a0>
	}

	// compute the hard iron vector (in uT but offset and scaled by FMATRIXSCALING)
	for (k = X; k <= Z; k++) {
 80024ba:	2300      	movs	r3, #0
 80024bc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80024be:	e014      	b.n	80024ea <fUpdateCalibration4INV+0x60a>
		MagCal->trV[k] = 0.5F * MagCal->vecA[k];
 80024c0:	687a      	ldr	r2, [r7, #4]
 80024c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80024c4:	33f8      	adds	r3, #248	@ 0xf8
 80024c6:	009b      	lsls	r3, r3, #2
 80024c8:	4413      	add	r3, r2
 80024ca:	edd3 7a00 	vldr	s15, [r3]
 80024ce:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80024d2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80024d6:	687a      	ldr	r2, [r7, #4]
 80024d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80024da:	3310      	adds	r3, #16
 80024dc:	009b      	lsls	r3, r3, #2
 80024de:	4413      	add	r3, r2
 80024e0:	edc3 7a00 	vstr	s15, [r3]
	for (k = X; k <= Z; k++) {
 80024e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80024e6:	3301      	adds	r3, #1
 80024e8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80024ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80024ec:	2b02      	cmp	r3, #2
 80024ee:	dde7      	ble.n	80024c0 <fUpdateCalibration4INV+0x5e0>
	}

	// compute the scaled geomagnetic field strength B (in uT but scaled by FMATRIXSCALING)
	MagCal->trB = sqrtf(MagCal->vecA[3] + MagCal->trV[X] * MagCal->trV[X] +
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	ed93 7afb 	vldr	s14, [r3, #1004]	@ 0x3ec
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	edd3 6a10 	vldr	s13, [r3, #64]	@ 0x40
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8002502:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002506:	ee37 7a27 	vadd.f32	s14, s14, s15
			MagCal->trV[Y] * MagCal->trV[Y] + MagCal->trV[Z] * MagCal->trV[Z]);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	edd3 6a11 	vldr	s13, [r3, #68]	@ 0x44
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 8002516:	ee66 7aa7 	vmul.f32	s15, s13, s15
	MagCal->trB = sqrtf(MagCal->vecA[3] + MagCal->trV[X] * MagCal->trV[X] +
 800251a:	ee37 7a27 	vadd.f32	s14, s14, s15
			MagCal->trV[Y] * MagCal->trV[Y] + MagCal->trV[Z] * MagCal->trV[Z]);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	edd3 6a12 	vldr	s13, [r3, #72]	@ 0x48
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 800252a:	ee66 7aa7 	vmul.f32	s15, s13, s15
	MagCal->trB = sqrtf(MagCal->vecA[3] + MagCal->trV[X] * MagCal->trV[X] +
 800252e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002532:	eeb0 0a67 	vmov.f32	s0, s15
 8002536:	f00f f80b 	bl	8011550 <sqrtf>
 800253a:	eef0 7a40 	vmov.f32	s15, s0
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	edc3 7a1c 	vstr	s15, [r3, #112]	@ 0x70

	// calculate the trial fit error (percent) normalized to number of measurements
	// and scaled geomagnetic field strength
	MagCal->trFitErrorpc = sqrtf(fE / (float) MagCal->MagBufferCount) * 100.0F /
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800254a:	f9b3 35e0 	ldrsh.w	r3, [r3, #1504]	@ 0x5e0
 800254e:	ee07 3a90 	vmov	s15, r3
 8002552:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002556:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 800255a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800255e:	eeb0 0a66 	vmov.f32	s0, s13
 8002562:	f00e fff5 	bl	8011550 <sqrtf>
 8002566:	eef0 7a40 	vmov.f32	s15, s0
 800256a:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8002604 <fUpdateCalibration4INV+0x724>
 800256e:	ee67 6a87 	vmul.f32	s13, s15, s14
			(2.0F * MagCal->trB * MagCal->trB);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	edd3 7a1c 	vldr	s15, [r3, #112]	@ 0x70
 8002578:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	edd3 7a1c 	vldr	s15, [r3, #112]	@ 0x70
 8002582:	ee27 7a27 	vmul.f32	s14, s14, s15
	MagCal->trFitErrorpc = sqrtf(fE / (float) MagCal->MagBufferCount) * 100.0F /
 8002586:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	edc3 7a1d 	vstr	s15, [r3, #116]	@ 0x74

	// correct the hard iron estimate for FMATRIXSCALING and the offsets applied (result in uT)
	for (k = X; k <= Z; k++) {
 8002590:	2300      	movs	r3, #0
 8002592:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002594:	e024      	b.n	80025e0 <fUpdateCalibration4INV+0x700>
		MagCal->trV[k] = MagCal->trV[k] * DEFAULTB
 8002596:	687a      	ldr	r2, [r7, #4]
 8002598:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800259a:	3310      	adds	r3, #16
 800259c:	009b      	lsls	r3, r3, #2
 800259e:	4413      	add	r3, r2
 80025a0:	edd3 7a00 	vldr	s15, [r3]
 80025a4:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8002608 <fUpdateCalibration4INV+0x728>
 80025a8:	ee27 7a87 	vmul.f32	s14, s15, s14
			+ (float)iOffset[k] * FXOS8700_UTPERCOUNT;
 80025ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025ae:	005b      	lsls	r3, r3, #1
 80025b0:	3350      	adds	r3, #80	@ 0x50
 80025b2:	443b      	add	r3, r7
 80025b4:	f933 3c28 	ldrsh.w	r3, [r3, #-40]
 80025b8:	ee07 3a90 	vmov	s15, r3
 80025bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80025c0:	eddf 6a12 	vldr	s13, [pc, #72]	@ 800260c <fUpdateCalibration4INV+0x72c>
 80025c4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80025c8:	ee77 7a27 	vadd.f32	s15, s14, s15
		MagCal->trV[k] = MagCal->trV[k] * DEFAULTB
 80025cc:	687a      	ldr	r2, [r7, #4]
 80025ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025d0:	3310      	adds	r3, #16
 80025d2:	009b      	lsls	r3, r3, #2
 80025d4:	4413      	add	r3, r2
 80025d6:	edc3 7a00 	vstr	s15, [r3]
	for (k = X; k <= Z; k++) {
 80025da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025dc:	3301      	adds	r3, #1
 80025de:	63bb      	str	r3, [r7, #56]	@ 0x38
 80025e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025e2:	2b02      	cmp	r3, #2
 80025e4:	ddd7      	ble.n	8002596 <fUpdateCalibration4INV+0x6b6>
	}

	// correct the geomagnetic field strength B to correct scaling (result in uT)
	MagCal->trB *= DEFAULTB;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	edd3 7a1c 	vldr	s15, [r3, #112]	@ 0x70
 80025ec:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 8002608 <fUpdateCalibration4INV+0x728>
 80025f0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	edc3 7a1c 	vstr	s15, [r3, #112]	@ 0x70

}
 80025fa:	bf00      	nop
 80025fc:	3754      	adds	r7, #84	@ 0x54
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd90      	pop	{r4, r7, pc}
 8002602:	bf00      	nop
 8002604:	42c80000 	.word	0x42c80000
 8002608:	42480000 	.word	0x42480000
 800260c:	3dcccccd 	.word	0x3dcccccd

08002610 <fUpdateCalibration7EIG>:

static void fUpdateCalibration7EIG(MagCalibration_t *MagCal)
{
 8002610:	b5b0      	push	{r4, r5, r7, lr}
 8002612:	ed2d 8b02 	vpush	{d8}
 8002616:	b08e      	sub	sp, #56	@ 0x38
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
	float ftmp;					// scratch variable
	int16_t iOffset[3];			// offset to remove large DC hard iron bias
	int16_t iCount;				// number of measurements counted
	int i, j, k, m, n;			// loop counters

	magcal_type = 2;
 800261c:	4bb2      	ldr	r3, [pc, #712]	@ (80028e8 <fUpdateCalibration7EIG+0x2d8>)
 800261e:	2202      	movs	r2, #2
 8002620:	601a      	str	r2, [r3, #0]

	// compute fscaling to reduce multiplications later
	fscaling = FXOS8700_UTPERCOUNT / DEFAULTB;
 8002622:	4bb2      	ldr	r3, [pc, #712]	@ (80028ec <fUpdateCalibration7EIG+0x2dc>)
 8002624:	617b      	str	r3, [r7, #20]

	// the offsets are guaranteed to be set from the first element but to avoid compiler error
	iOffset[X] = iOffset[Y] = iOffset[Z] = 0;
 8002626:	2300      	movs	r3, #0
 8002628:	823b      	strh	r3, [r7, #16]
 800262a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800262e:	81fb      	strh	r3, [r7, #14]
 8002630:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002634:	81bb      	strh	r3, [r7, #12]

	// zero the on and above diagonal elements of the 7x7 symmetric measurement matrix matA
	for (m = 0; m < 7; m++) {
 8002636:	2300      	movs	r3, #0
 8002638:	61fb      	str	r3, [r7, #28]
 800263a:	e019      	b.n	8002670 <fUpdateCalibration7EIG+0x60>
		for (n = m; n < 7; n++) {
 800263c:	69fb      	ldr	r3, [r7, #28]
 800263e:	61bb      	str	r3, [r7, #24]
 8002640:	e010      	b.n	8002664 <fUpdateCalibration7EIG+0x54>
			MagCal->matA[m][n] = 0.0F;
 8002642:	6879      	ldr	r1, [r7, #4]
 8002644:	69fa      	ldr	r2, [r7, #28]
 8002646:	4613      	mov	r3, r2
 8002648:	009b      	lsls	r3, r3, #2
 800264a:	4413      	add	r3, r2
 800264c:	005b      	lsls	r3, r3, #1
 800264e:	69ba      	ldr	r2, [r7, #24]
 8002650:	4413      	add	r3, r2
 8002652:	3330      	adds	r3, #48	@ 0x30
 8002654:	009b      	lsls	r3, r3, #2
 8002656:	440b      	add	r3, r1
 8002658:	f04f 0200 	mov.w	r2, #0
 800265c:	601a      	str	r2, [r3, #0]
		for (n = m; n < 7; n++) {
 800265e:	69bb      	ldr	r3, [r7, #24]
 8002660:	3301      	adds	r3, #1
 8002662:	61bb      	str	r3, [r7, #24]
 8002664:	69bb      	ldr	r3, [r7, #24]
 8002666:	2b06      	cmp	r3, #6
 8002668:	ddeb      	ble.n	8002642 <fUpdateCalibration7EIG+0x32>
	for (m = 0; m < 7; m++) {
 800266a:	69fb      	ldr	r3, [r7, #28]
 800266c:	3301      	adds	r3, #1
 800266e:	61fb      	str	r3, [r7, #28]
 8002670:	69fb      	ldr	r3, [r7, #28]
 8002672:	2b06      	cmp	r3, #6
 8002674:	dde2      	ble.n	800263c <fUpdateCalibration7EIG+0x2c>
		}
	}

	// place from MINEQUATIONS to MAXEQUATIONS entries into product matrix matA
	iCount = 0;
 8002676:	2300      	movs	r3, #0
 8002678:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	for (j = 0; j < MAGBUFFSIZE; j++) {
 800267a:	2300      	movs	r3, #0
 800267c:	627b      	str	r3, [r7, #36]	@ 0x24
 800267e:	e0e0      	b.n	8002842 <fUpdateCalibration7EIG+0x232>
		if (MagCal->valid[j]) {
 8002680:	687a      	ldr	r2, [r7, #4]
 8002682:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002684:	4413      	add	r3, r2
 8002686:	f503 539a 	add.w	r3, r3, #4928	@ 0x1340
 800268a:	3316      	adds	r3, #22
 800268c:	f993 3000 	ldrsb.w	r3, [r3]
 8002690:	2b00      	cmp	r3, #0
 8002692:	f000 80d3 	beq.w	800283c <fUpdateCalibration7EIG+0x22c>
			// use first valid magnetic buffer entry as offset estimate (bit counts)
			if (iCount == 0) {
 8002696:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 800269a:	2b00      	cmp	r3, #0
 800269c:	d11c      	bne.n	80026d8 <fUpdateCalibration7EIG+0xc8>
				for (k = X; k <= Z; k++) {
 800269e:	2300      	movs	r3, #0
 80026a0:	623b      	str	r3, [r7, #32]
 80026a2:	e016      	b.n	80026d2 <fUpdateCalibration7EIG+0xc2>
					iOffset[k] = MagCal->BpFast[k][j];
 80026a4:	687a      	ldr	r2, [r7, #4]
 80026a6:	6a3b      	ldr	r3, [r7, #32]
 80026a8:	f240 218a 	movw	r1, #650	@ 0x28a
 80026ac:	fb03 f101 	mul.w	r1, r3, r1
 80026b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026b2:	440b      	add	r3, r1
 80026b4:	f503 7303 	add.w	r3, r3, #524	@ 0x20c
 80026b8:	005b      	lsls	r3, r3, #1
 80026ba:	4413      	add	r3, r2
 80026bc:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80026c0:	6a3b      	ldr	r3, [r7, #32]
 80026c2:	005b      	lsls	r3, r3, #1
 80026c4:	3338      	adds	r3, #56	@ 0x38
 80026c6:	443b      	add	r3, r7
 80026c8:	f823 2c2c 	strh.w	r2, [r3, #-44]
				for (k = X; k <= Z; k++) {
 80026cc:	6a3b      	ldr	r3, [r7, #32]
 80026ce:	3301      	adds	r3, #1
 80026d0:	623b      	str	r3, [r7, #32]
 80026d2:	6a3b      	ldr	r3, [r7, #32]
 80026d4:	2b02      	cmp	r3, #2
 80026d6:	dde5      	ble.n	80026a4 <fUpdateCalibration7EIG+0x94>
				}
			}

			// apply the offset and scaling and store in vecA
			for (k = X; k <= Z; k++) {
 80026d8:	2300      	movs	r3, #0
 80026da:	623b      	str	r3, [r7, #32]
 80026dc:	e041      	b.n	8002762 <fUpdateCalibration7EIG+0x152>
				MagCal->vecA[k + 3] = (float)((int32_t)MagCal->BpFast[k][j]
 80026de:	687a      	ldr	r2, [r7, #4]
 80026e0:	6a3b      	ldr	r3, [r7, #32]
 80026e2:	f240 218a 	movw	r1, #650	@ 0x28a
 80026e6:	fb03 f101 	mul.w	r1, r3, r1
 80026ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026ec:	440b      	add	r3, r1
 80026ee:	f503 7303 	add.w	r3, r3, #524	@ 0x20c
 80026f2:	005b      	lsls	r3, r3, #1
 80026f4:	4413      	add	r3, r2
 80026f6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80026fa:	461a      	mov	r2, r3
					- (int32_t)iOffset[k]) * fscaling;
 80026fc:	6a3b      	ldr	r3, [r7, #32]
 80026fe:	005b      	lsls	r3, r3, #1
 8002700:	3338      	adds	r3, #56	@ 0x38
 8002702:	443b      	add	r3, r7
 8002704:	f933 3c2c 	ldrsh.w	r3, [r3, #-44]
 8002708:	1ad3      	subs	r3, r2, r3
				MagCal->vecA[k + 3] = (float)((int32_t)MagCal->BpFast[k][j]
 800270a:	ee07 3a90 	vmov	s15, r3
 800270e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002712:	6a3b      	ldr	r3, [r7, #32]
 8002714:	3303      	adds	r3, #3
					- (int32_t)iOffset[k]) * fscaling;
 8002716:	edd7 7a05 	vldr	s15, [r7, #20]
 800271a:	ee67 7a27 	vmul.f32	s15, s14, s15
				MagCal->vecA[k + 3] = (float)((int32_t)MagCal->BpFast[k][j]
 800271e:	687a      	ldr	r2, [r7, #4]
 8002720:	33f8      	adds	r3, #248	@ 0xf8
 8002722:	009b      	lsls	r3, r3, #2
 8002724:	4413      	add	r3, r2
 8002726:	edc3 7a00 	vstr	s15, [r3]
				MagCal->vecA[k] = MagCal->vecA[k + 3] * MagCal->vecA[k + 3];
 800272a:	6a3b      	ldr	r3, [r7, #32]
 800272c:	3303      	adds	r3, #3
 800272e:	687a      	ldr	r2, [r7, #4]
 8002730:	33f8      	adds	r3, #248	@ 0xf8
 8002732:	009b      	lsls	r3, r3, #2
 8002734:	4413      	add	r3, r2
 8002736:	ed93 7a00 	vldr	s14, [r3]
 800273a:	6a3b      	ldr	r3, [r7, #32]
 800273c:	3303      	adds	r3, #3
 800273e:	687a      	ldr	r2, [r7, #4]
 8002740:	33f8      	adds	r3, #248	@ 0xf8
 8002742:	009b      	lsls	r3, r3, #2
 8002744:	4413      	add	r3, r2
 8002746:	edd3 7a00 	vldr	s15, [r3]
 800274a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800274e:	687a      	ldr	r2, [r7, #4]
 8002750:	6a3b      	ldr	r3, [r7, #32]
 8002752:	33f8      	adds	r3, #248	@ 0xf8
 8002754:	009b      	lsls	r3, r3, #2
 8002756:	4413      	add	r3, r2
 8002758:	edc3 7a00 	vstr	s15, [r3]
			for (k = X; k <= Z; k++) {
 800275c:	6a3b      	ldr	r3, [r7, #32]
 800275e:	3301      	adds	r3, #1
 8002760:	623b      	str	r3, [r7, #32]
 8002762:	6a3b      	ldr	r3, [r7, #32]
 8002764:	2b02      	cmp	r3, #2
 8002766:	ddba      	ble.n	80026de <fUpdateCalibration7EIG+0xce>
			// accumulate the on-and above-diagonal terms of
			// MagCal->matA=Sigma{vecA^T * vecA}
			// with the exception of matA[6][6] which will sum to the number
			// of measurements and remembering that vecA[6] equals 1.0F
			// update the right hand column [6] of matA except for matA[6][6]
			for (m = 0; m < 6; m++) {
 8002768:	2300      	movs	r3, #0
 800276a:	61fb      	str	r3, [r7, #28]
 800276c:	e01f      	b.n	80027ae <fUpdateCalibration7EIG+0x19e>
				MagCal->matA[m][6] += MagCal->vecA[m];
 800276e:	6879      	ldr	r1, [r7, #4]
 8002770:	69fa      	ldr	r2, [r7, #28]
 8002772:	4613      	mov	r3, r2
 8002774:	009b      	lsls	r3, r3, #2
 8002776:	4413      	add	r3, r2
 8002778:	00db      	lsls	r3, r3, #3
 800277a:	440b      	add	r3, r1
 800277c:	33d8      	adds	r3, #216	@ 0xd8
 800277e:	ed93 7a00 	vldr	s14, [r3]
 8002782:	687a      	ldr	r2, [r7, #4]
 8002784:	69fb      	ldr	r3, [r7, #28]
 8002786:	33f8      	adds	r3, #248	@ 0xf8
 8002788:	009b      	lsls	r3, r3, #2
 800278a:	4413      	add	r3, r2
 800278c:	edd3 7a00 	vldr	s15, [r3]
 8002790:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002794:	6879      	ldr	r1, [r7, #4]
 8002796:	69fa      	ldr	r2, [r7, #28]
 8002798:	4613      	mov	r3, r2
 800279a:	009b      	lsls	r3, r3, #2
 800279c:	4413      	add	r3, r2
 800279e:	00db      	lsls	r3, r3, #3
 80027a0:	440b      	add	r3, r1
 80027a2:	33d8      	adds	r3, #216	@ 0xd8
 80027a4:	edc3 7a00 	vstr	s15, [r3]
			for (m = 0; m < 6; m++) {
 80027a8:	69fb      	ldr	r3, [r7, #28]
 80027aa:	3301      	adds	r3, #1
 80027ac:	61fb      	str	r3, [r7, #28]
 80027ae:	69fb      	ldr	r3, [r7, #28]
 80027b0:	2b05      	cmp	r3, #5
 80027b2:	dddc      	ble.n	800276e <fUpdateCalibration7EIG+0x15e>
			}
			// update the on and above diagonal terms except for right hand column 6
			for (m = 0; m < 6; m++) {
 80027b4:	2300      	movs	r3, #0
 80027b6:	61fb      	str	r3, [r7, #28]
 80027b8:	e037      	b.n	800282a <fUpdateCalibration7EIG+0x21a>
				for (n = m; n < 6; n++) {
 80027ba:	69fb      	ldr	r3, [r7, #28]
 80027bc:	61bb      	str	r3, [r7, #24]
 80027be:	e02e      	b.n	800281e <fUpdateCalibration7EIG+0x20e>
					MagCal->matA[m][n] += MagCal->vecA[m] * MagCal->vecA[n];
 80027c0:	6879      	ldr	r1, [r7, #4]
 80027c2:	69fa      	ldr	r2, [r7, #28]
 80027c4:	4613      	mov	r3, r2
 80027c6:	009b      	lsls	r3, r3, #2
 80027c8:	4413      	add	r3, r2
 80027ca:	005b      	lsls	r3, r3, #1
 80027cc:	69ba      	ldr	r2, [r7, #24]
 80027ce:	4413      	add	r3, r2
 80027d0:	3330      	adds	r3, #48	@ 0x30
 80027d2:	009b      	lsls	r3, r3, #2
 80027d4:	440b      	add	r3, r1
 80027d6:	ed93 7a00 	vldr	s14, [r3]
 80027da:	687a      	ldr	r2, [r7, #4]
 80027dc:	69fb      	ldr	r3, [r7, #28]
 80027de:	33f8      	adds	r3, #248	@ 0xf8
 80027e0:	009b      	lsls	r3, r3, #2
 80027e2:	4413      	add	r3, r2
 80027e4:	edd3 6a00 	vldr	s13, [r3]
 80027e8:	687a      	ldr	r2, [r7, #4]
 80027ea:	69bb      	ldr	r3, [r7, #24]
 80027ec:	33f8      	adds	r3, #248	@ 0xf8
 80027ee:	009b      	lsls	r3, r3, #2
 80027f0:	4413      	add	r3, r2
 80027f2:	edd3 7a00 	vldr	s15, [r3]
 80027f6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80027fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027fe:	6879      	ldr	r1, [r7, #4]
 8002800:	69fa      	ldr	r2, [r7, #28]
 8002802:	4613      	mov	r3, r2
 8002804:	009b      	lsls	r3, r3, #2
 8002806:	4413      	add	r3, r2
 8002808:	005b      	lsls	r3, r3, #1
 800280a:	69ba      	ldr	r2, [r7, #24]
 800280c:	4413      	add	r3, r2
 800280e:	3330      	adds	r3, #48	@ 0x30
 8002810:	009b      	lsls	r3, r3, #2
 8002812:	440b      	add	r3, r1
 8002814:	edc3 7a00 	vstr	s15, [r3]
				for (n = m; n < 6; n++) {
 8002818:	69bb      	ldr	r3, [r7, #24]
 800281a:	3301      	adds	r3, #1
 800281c:	61bb      	str	r3, [r7, #24]
 800281e:	69bb      	ldr	r3, [r7, #24]
 8002820:	2b05      	cmp	r3, #5
 8002822:	ddcd      	ble.n	80027c0 <fUpdateCalibration7EIG+0x1b0>
			for (m = 0; m < 6; m++) {
 8002824:	69fb      	ldr	r3, [r7, #28]
 8002826:	3301      	adds	r3, #1
 8002828:	61fb      	str	r3, [r7, #28]
 800282a:	69fb      	ldr	r3, [r7, #28]
 800282c:	2b05      	cmp	r3, #5
 800282e:	ddc4      	ble.n	80027ba <fUpdateCalibration7EIG+0x1aa>
				}
			}

			// increment the measurement counter for the next iteration
			iCount++;
 8002830:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 8002834:	b29b      	uxth	r3, r3
 8002836:	3301      	adds	r3, #1
 8002838:	b29b      	uxth	r3, r3
 800283a:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	for (j = 0; j < MAGBUFFSIZE; j++) {
 800283c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800283e:	3301      	adds	r3, #1
 8002840:	627b      	str	r3, [r7, #36]	@ 0x24
 8002842:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002844:	f240 2289 	movw	r2, #649	@ 0x289
 8002848:	4293      	cmp	r3, r2
 800284a:	f77f af19 	ble.w	8002680 <fUpdateCalibration7EIG+0x70>
		}
	}

	// finally set the last element matA[6][6] to the number of measurements
	MagCal->matA[6][6] = (float) iCount;
 800284e:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 8002852:	ee07 3a90 	vmov	s15, r3
 8002856:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	edc3 7a72 	vstr	s15, [r3, #456]	@ 0x1c8

	// store the number of measurements accumulated
	MagCal->MagBufferCount = iCount;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002866:	461a      	mov	r2, r3
 8002868:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800286a:	f8a2 35e0 	strh.w	r3, [r2, #1504]	@ 0x5e0

	// copy the above diagonal elements of matA to below the diagonal
	for (m = 1; m < 7; m++) {
 800286e:	2301      	movs	r3, #1
 8002870:	61fb      	str	r3, [r7, #28]
 8002872:	e024      	b.n	80028be <fUpdateCalibration7EIG+0x2ae>
		for (n = 0; n < m; n++) {
 8002874:	2300      	movs	r3, #0
 8002876:	61bb      	str	r3, [r7, #24]
 8002878:	e01a      	b.n	80028b0 <fUpdateCalibration7EIG+0x2a0>
			MagCal->matA[m][n] = MagCal->matA[n][m];
 800287a:	6879      	ldr	r1, [r7, #4]
 800287c:	69ba      	ldr	r2, [r7, #24]
 800287e:	4613      	mov	r3, r2
 8002880:	009b      	lsls	r3, r3, #2
 8002882:	4413      	add	r3, r2
 8002884:	005b      	lsls	r3, r3, #1
 8002886:	69fa      	ldr	r2, [r7, #28]
 8002888:	4413      	add	r3, r2
 800288a:	3330      	adds	r3, #48	@ 0x30
 800288c:	009b      	lsls	r3, r3, #2
 800288e:	440b      	add	r3, r1
 8002890:	6819      	ldr	r1, [r3, #0]
 8002892:	6878      	ldr	r0, [r7, #4]
 8002894:	69fa      	ldr	r2, [r7, #28]
 8002896:	4613      	mov	r3, r2
 8002898:	009b      	lsls	r3, r3, #2
 800289a:	4413      	add	r3, r2
 800289c:	005b      	lsls	r3, r3, #1
 800289e:	69ba      	ldr	r2, [r7, #24]
 80028a0:	4413      	add	r3, r2
 80028a2:	3330      	adds	r3, #48	@ 0x30
 80028a4:	009b      	lsls	r3, r3, #2
 80028a6:	4403      	add	r3, r0
 80028a8:	6019      	str	r1, [r3, #0]
		for (n = 0; n < m; n++) {
 80028aa:	69bb      	ldr	r3, [r7, #24]
 80028ac:	3301      	adds	r3, #1
 80028ae:	61bb      	str	r3, [r7, #24]
 80028b0:	69ba      	ldr	r2, [r7, #24]
 80028b2:	69fb      	ldr	r3, [r7, #28]
 80028b4:	429a      	cmp	r2, r3
 80028b6:	dbe0      	blt.n	800287a <fUpdateCalibration7EIG+0x26a>
	for (m = 1; m < 7; m++) {
 80028b8:	69fb      	ldr	r3, [r7, #28]
 80028ba:	3301      	adds	r3, #1
 80028bc:	61fb      	str	r3, [r7, #28]
 80028be:	69fb      	ldr	r3, [r7, #28]
 80028c0:	2b06      	cmp	r3, #6
 80028c2:	ddd7      	ble.n	8002874 <fUpdateCalibration7EIG+0x264>
		}
	}

	// set tmpA7x1 to the unsorted eigenvalues and matB to the unsorted eigenvectors of matA
	eigencompute(MagCal->matA, MagCal->vecA, MagCal->matB, 7);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	f103 00c0 	add.w	r0, r3, #192	@ 0xc0
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	f503 7214 	add.w	r2, r3, #592	@ 0x250
 80028d6:	2307      	movs	r3, #7
 80028d8:	f003 fc9c 	bl	8006214 <eigencompute>

	// find the smallest eigenvalue
	j = 0;
 80028dc:	2300      	movs	r3, #0
 80028de:	627b      	str	r3, [r7, #36]	@ 0x24
	for (i = 1; i < 7; i++) {
 80028e0:	2301      	movs	r3, #1
 80028e2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80028e4:	e026      	b.n	8002934 <fUpdateCalibration7EIG+0x324>
 80028e6:	bf00      	nop
 80028e8:	200001ec 	.word	0x200001ec
 80028ec:	3b03126f 	.word	0x3b03126f
 80028f0:	00000000 	.word	0x00000000
 80028f4:	beaaaaab 	.word	0xbeaaaaab
 80028f8:	be2aaaab 	.word	0xbe2aaaab
 80028fc:	42480000 	.word	0x42480000
 8002900:	3dcccccd 	.word	0x3dcccccd
		if (MagCal->vecA[i] < MagCal->vecA[j]) {
 8002904:	687a      	ldr	r2, [r7, #4]
 8002906:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002908:	33f8      	adds	r3, #248	@ 0xf8
 800290a:	009b      	lsls	r3, r3, #2
 800290c:	4413      	add	r3, r2
 800290e:	ed93 7a00 	vldr	s14, [r3]
 8002912:	687a      	ldr	r2, [r7, #4]
 8002914:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002916:	33f8      	adds	r3, #248	@ 0xf8
 8002918:	009b      	lsls	r3, r3, #2
 800291a:	4413      	add	r3, r2
 800291c:	edd3 7a00 	vldr	s15, [r3]
 8002920:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002924:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002928:	d501      	bpl.n	800292e <fUpdateCalibration7EIG+0x31e>
			j = i;
 800292a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800292c:	627b      	str	r3, [r7, #36]	@ 0x24
	for (i = 1; i < 7; i++) {
 800292e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002930:	3301      	adds	r3, #1
 8002932:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002934:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002936:	2b06      	cmp	r3, #6
 8002938:	dde4      	ble.n	8002904 <fUpdateCalibration7EIG+0x2f4>
		}
	}

	// set ellipsoid matrix A to the solution vector with smallest eigenvalue,
	// compute its determinant and the hard iron offset (scaled and offset)
	f3x3matrixAeqScalar(MagCal->A, 0.0F);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	3378      	adds	r3, #120	@ 0x78
 800293e:	ed1f 0a14 	vldr	s0, [pc, #-80]	@ 80028f0 <fUpdateCalibration7EIG+0x2e0>
 8002942:	4618      	mov	r0, r3
 8002944:	f003 fa64 	bl	8005e10 <f3x3matrixAeqScalar>
	det = 1.0F;
 8002948:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800294c:	637b      	str	r3, [r7, #52]	@ 0x34
	for (k = X; k <= Z; k++) {
 800294e:	2300      	movs	r3, #0
 8002950:	623b      	str	r3, [r7, #32]
 8002952:	e043      	b.n	80029dc <fUpdateCalibration7EIG+0x3cc>
		MagCal->A[k][k] = MagCal->matB[k][j];
 8002954:	6879      	ldr	r1, [r7, #4]
 8002956:	6a3a      	ldr	r2, [r7, #32]
 8002958:	4613      	mov	r3, r2
 800295a:	009b      	lsls	r3, r3, #2
 800295c:	4413      	add	r3, r2
 800295e:	005b      	lsls	r3, r3, #1
 8002960:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002962:	4413      	add	r3, r2
 8002964:	3394      	adds	r3, #148	@ 0x94
 8002966:	009b      	lsls	r3, r3, #2
 8002968:	440b      	add	r3, r1
 800296a:	681a      	ldr	r2, [r3, #0]
 800296c:	6879      	ldr	r1, [r7, #4]
 800296e:	6a3b      	ldr	r3, [r7, #32]
 8002970:	011b      	lsls	r3, r3, #4
 8002972:	440b      	add	r3, r1
 8002974:	3378      	adds	r3, #120	@ 0x78
 8002976:	601a      	str	r2, [r3, #0]
		det *= MagCal->A[k][k];
 8002978:	687a      	ldr	r2, [r7, #4]
 800297a:	6a3b      	ldr	r3, [r7, #32]
 800297c:	011b      	lsls	r3, r3, #4
 800297e:	4413      	add	r3, r2
 8002980:	3378      	adds	r3, #120	@ 0x78
 8002982:	edd3 7a00 	vldr	s15, [r3]
 8002986:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 800298a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800298e:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
		MagCal->trV[k] = -0.5F * MagCal->matB[k + 3][j] / MagCal->A[k][k];
 8002992:	6a3b      	ldr	r3, [r7, #32]
 8002994:	1cda      	adds	r2, r3, #3
 8002996:	6879      	ldr	r1, [r7, #4]
 8002998:	4613      	mov	r3, r2
 800299a:	009b      	lsls	r3, r3, #2
 800299c:	4413      	add	r3, r2
 800299e:	005b      	lsls	r3, r3, #1
 80029a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029a2:	4413      	add	r3, r2
 80029a4:	3394      	adds	r3, #148	@ 0x94
 80029a6:	009b      	lsls	r3, r3, #2
 80029a8:	440b      	add	r3, r1
 80029aa:	edd3 7a00 	vldr	s15, [r3]
 80029ae:	eebe 7a00 	vmov.f32	s14, #224	@ 0xbf000000 -0.5
 80029b2:	ee67 6a87 	vmul.f32	s13, s15, s14
 80029b6:	687a      	ldr	r2, [r7, #4]
 80029b8:	6a3b      	ldr	r3, [r7, #32]
 80029ba:	011b      	lsls	r3, r3, #4
 80029bc:	4413      	add	r3, r2
 80029be:	3378      	adds	r3, #120	@ 0x78
 80029c0:	ed93 7a00 	vldr	s14, [r3]
 80029c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80029c8:	687a      	ldr	r2, [r7, #4]
 80029ca:	6a3b      	ldr	r3, [r7, #32]
 80029cc:	3310      	adds	r3, #16
 80029ce:	009b      	lsls	r3, r3, #2
 80029d0:	4413      	add	r3, r2
 80029d2:	edc3 7a00 	vstr	s15, [r3]
	for (k = X; k <= Z; k++) {
 80029d6:	6a3b      	ldr	r3, [r7, #32]
 80029d8:	3301      	adds	r3, #1
 80029da:	623b      	str	r3, [r7, #32]
 80029dc:	6a3b      	ldr	r3, [r7, #32]
 80029de:	2b02      	cmp	r3, #2
 80029e0:	ddb8      	ble.n	8002954 <fUpdateCalibration7EIG+0x344>
	}

	// negate A if it has negative determinant
	if (det < 0.0F) {
 80029e2:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80029e6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80029ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029ee:	d51a      	bpl.n	8002a26 <fUpdateCalibration7EIG+0x416>
		f3x3matrixAeqMinusA(MagCal->A);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	3378      	adds	r3, #120	@ 0x78
 80029f4:	4618      	mov	r0, r3
 80029f6:	f003 fa7d 	bl	8005ef4 <f3x3matrixAeqMinusA>
		MagCal->matB[6][j] = -MagCal->matB[6][j];
 80029fa:	687a      	ldr	r2, [r7, #4]
 80029fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029fe:	33d0      	adds	r3, #208	@ 0xd0
 8002a00:	009b      	lsls	r3, r3, #2
 8002a02:	4413      	add	r3, r2
 8002a04:	edd3 7a00 	vldr	s15, [r3]
 8002a08:	eef1 7a67 	vneg.f32	s15, s15
 8002a0c:	687a      	ldr	r2, [r7, #4]
 8002a0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a10:	33d0      	adds	r3, #208	@ 0xd0
 8002a12:	009b      	lsls	r3, r3, #2
 8002a14:	4413      	add	r3, r2
 8002a16:	edc3 7a00 	vstr	s15, [r3]
		det = -det;
 8002a1a:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8002a1e:	eef1 7a67 	vneg.f32	s15, s15
 8002a22:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
	}

	// set ftmp to the square of the trial geomagnetic field strength B
	// (counts times FMATRIXSCALING)
	ftmp = -MagCal->matB[6][j];
 8002a26:	687a      	ldr	r2, [r7, #4]
 8002a28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a2a:	33d0      	adds	r3, #208	@ 0xd0
 8002a2c:	009b      	lsls	r3, r3, #2
 8002a2e:	4413      	add	r3, r2
 8002a30:	edd3 7a00 	vldr	s15, [r3]
 8002a34:	eef1 7a67 	vneg.f32	s15, s15
 8002a38:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
	for (k = X; k <= Z; k++) {
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	623b      	str	r3, [r7, #32]
 8002a40:	e021      	b.n	8002a86 <fUpdateCalibration7EIG+0x476>
		ftmp += MagCal->A[k][k] * MagCal->trV[k] * MagCal->trV[k];
 8002a42:	687a      	ldr	r2, [r7, #4]
 8002a44:	6a3b      	ldr	r3, [r7, #32]
 8002a46:	011b      	lsls	r3, r3, #4
 8002a48:	4413      	add	r3, r2
 8002a4a:	3378      	adds	r3, #120	@ 0x78
 8002a4c:	ed93 7a00 	vldr	s14, [r3]
 8002a50:	687a      	ldr	r2, [r7, #4]
 8002a52:	6a3b      	ldr	r3, [r7, #32]
 8002a54:	3310      	adds	r3, #16
 8002a56:	009b      	lsls	r3, r3, #2
 8002a58:	4413      	add	r3, r2
 8002a5a:	edd3 7a00 	vldr	s15, [r3]
 8002a5e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a62:	687a      	ldr	r2, [r7, #4]
 8002a64:	6a3b      	ldr	r3, [r7, #32]
 8002a66:	3310      	adds	r3, #16
 8002a68:	009b      	lsls	r3, r3, #2
 8002a6a:	4413      	add	r3, r2
 8002a6c:	edd3 7a00 	vldr	s15, [r3]
 8002a70:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a74:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8002a78:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a7c:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
	for (k = X; k <= Z; k++) {
 8002a80:	6a3b      	ldr	r3, [r7, #32]
 8002a82:	3301      	adds	r3, #1
 8002a84:	623b      	str	r3, [r7, #32]
 8002a86:	6a3b      	ldr	r3, [r7, #32]
 8002a88:	2b02      	cmp	r3, #2
 8002a8a:	ddda      	ble.n	8002a42 <fUpdateCalibration7EIG+0x432>
	}

	// calculate the trial normalized fit error as a percentage
	MagCal->trFitErrorpc = 50.0F *
		sqrtf(fabs(MagCal->vecA[j]) / (float) MagCal->MagBufferCount) / fabs(ftmp);
 8002a8c:	687a      	ldr	r2, [r7, #4]
 8002a8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a90:	33f8      	adds	r3, #248	@ 0xf8
 8002a92:	009b      	lsls	r3, r3, #2
 8002a94:	4413      	add	r3, r2
 8002a96:	edd3 7a00 	vldr	s15, [r3]
 8002a9a:	eeb0 7ae7 	vabs.f32	s14, s15
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002aa4:	f9b3 35e0 	ldrsh.w	r3, [r3, #1504]	@ 0x5e0
 8002aa8:	ee07 3a90 	vmov	s15, r3
 8002aac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ab0:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002ab4:	eeb0 0a66 	vmov.f32	s0, s13
 8002ab8:	f00e fd4a 	bl	8011550 <sqrtf>
 8002abc:	eef0 7a40 	vmov.f32	s15, s0
	MagCal->trFitErrorpc = 50.0F *
 8002ac0:	ed1f 7a72 	vldr	s14, [pc, #-456]	@ 80028fc <fUpdateCalibration7EIG+0x2ec>
 8002ac4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002ac8:	ee17 0a90 	vmov	r0, s15
 8002acc:	f7fd fd14 	bl	80004f8 <__aeabi_f2d>
 8002ad0:	4604      	mov	r4, r0
 8002ad2:	460d      	mov	r5, r1
		sqrtf(fabs(MagCal->vecA[j]) / (float) MagCal->MagBufferCount) / fabs(ftmp);
 8002ad4:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8002ad8:	eef0 7ae7 	vabs.f32	s15, s15
 8002adc:	ee17 0a90 	vmov	r0, s15
 8002ae0:	f7fd fd0a 	bl	80004f8 <__aeabi_f2d>
 8002ae4:	4602      	mov	r2, r0
 8002ae6:	460b      	mov	r3, r1
 8002ae8:	4620      	mov	r0, r4
 8002aea:	4629      	mov	r1, r5
 8002aec:	f7fd fe86 	bl	80007fc <__aeabi_ddiv>
 8002af0:	4602      	mov	r2, r0
 8002af2:	460b      	mov	r3, r1
 8002af4:	4610      	mov	r0, r2
 8002af6:	4619      	mov	r1, r3
 8002af8:	f7fe f806 	bl	8000b08 <__aeabi_d2f>
 8002afc:	4602      	mov	r2, r0
	MagCal->trFitErrorpc = 50.0F *
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	675a      	str	r2, [r3, #116]	@ 0x74

	// normalize the ellipsoid matrix A to unit determinant
	f3x3matrixAeqAxScalar(MagCal->A, powf(det, -(ONETHIRD)));
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	f103 0478 	add.w	r4, r3, #120	@ 0x78
 8002b08:	ed5f 0a86 	vldr	s1, [pc, #-536]	@ 80028f4 <fUpdateCalibration7EIG+0x2e4>
 8002b0c:	ed97 0a0d 	vldr	s0, [r7, #52]	@ 0x34
 8002b10:	f00e fcc6 	bl	80114a0 <powf>
 8002b14:	eef0 7a40 	vmov.f32	s15, s0
 8002b18:	eeb0 0a67 	vmov.f32	s0, s15
 8002b1c:	4620      	mov	r0, r4
 8002b1e:	f003 f9ad 	bl	8005e7c <f3x3matrixAeqAxScalar>

	// convert the geomagnetic field strength B into uT for normalized
	// soft iron matrix A and normalize
	MagCal->trB = sqrtf(fabs(ftmp)) * DEFAULTB * powf(det, -(ONESIXTH));
 8002b22:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8002b26:	eef0 7ae7 	vabs.f32	s15, s15
 8002b2a:	eeb0 0a67 	vmov.f32	s0, s15
 8002b2e:	f00e fd0f 	bl	8011550 <sqrtf>
 8002b32:	eef0 7a40 	vmov.f32	s15, s0
 8002b36:	ed1f 7a8f 	vldr	s14, [pc, #-572]	@ 80028fc <fUpdateCalibration7EIG+0x2ec>
 8002b3a:	ee27 8a87 	vmul.f32	s16, s15, s14
 8002b3e:	ed5f 0a92 	vldr	s1, [pc, #-584]	@ 80028f8 <fUpdateCalibration7EIG+0x2e8>
 8002b42:	ed97 0a0d 	vldr	s0, [r7, #52]	@ 0x34
 8002b46:	f00e fcab 	bl	80114a0 <powf>
 8002b4a:	eef0 7a40 	vmov.f32	s15, s0
 8002b4e:	ee68 7a27 	vmul.f32	s15, s16, s15
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	edc3 7a1c 	vstr	s15, [r3, #112]	@ 0x70

	// compute trial invW from the square root of A also with normalized
	// determinant and hard iron offset in uT
	f3x3matrixAeqI(MagCal->trinvW);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	334c      	adds	r3, #76	@ 0x4c
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f003 f8cb 	bl	8005cf8 <f3x3matrixAeqI>
	for (k = X; k <= Z; k++) {
 8002b62:	2300      	movs	r3, #0
 8002b64:	623b      	str	r3, [r7, #32]
 8002b66:	e03a      	b.n	8002bde <fUpdateCalibration7EIG+0x5ce>
		MagCal->trinvW[k][k] = sqrtf(fabs(MagCal->A[k][k]));
 8002b68:	687a      	ldr	r2, [r7, #4]
 8002b6a:	6a3b      	ldr	r3, [r7, #32]
 8002b6c:	011b      	lsls	r3, r3, #4
 8002b6e:	4413      	add	r3, r2
 8002b70:	3378      	adds	r3, #120	@ 0x78
 8002b72:	edd3 7a00 	vldr	s15, [r3]
 8002b76:	eef0 7ae7 	vabs.f32	s15, s15
 8002b7a:	eeb0 0a67 	vmov.f32	s0, s15
 8002b7e:	f00e fce7 	bl	8011550 <sqrtf>
 8002b82:	eef0 7a40 	vmov.f32	s15, s0
 8002b86:	687a      	ldr	r2, [r7, #4]
 8002b88:	6a3b      	ldr	r3, [r7, #32]
 8002b8a:	011b      	lsls	r3, r3, #4
 8002b8c:	4413      	add	r3, r2
 8002b8e:	334c      	adds	r3, #76	@ 0x4c
 8002b90:	edc3 7a00 	vstr	s15, [r3]
		MagCal->trV[k] = MagCal->trV[k] * DEFAULTB + (float)iOffset[k] * FXOS8700_UTPERCOUNT;
 8002b94:	687a      	ldr	r2, [r7, #4]
 8002b96:	6a3b      	ldr	r3, [r7, #32]
 8002b98:	3310      	adds	r3, #16
 8002b9a:	009b      	lsls	r3, r3, #2
 8002b9c:	4413      	add	r3, r2
 8002b9e:	edd3 7a00 	vldr	s15, [r3]
 8002ba2:	ed1f 7aaa 	vldr	s14, [pc, #-680]	@ 80028fc <fUpdateCalibration7EIG+0x2ec>
 8002ba6:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002baa:	6a3b      	ldr	r3, [r7, #32]
 8002bac:	005b      	lsls	r3, r3, #1
 8002bae:	3338      	adds	r3, #56	@ 0x38
 8002bb0:	443b      	add	r3, r7
 8002bb2:	f933 3c2c 	ldrsh.w	r3, [r3, #-44]
 8002bb6:	ee07 3a90 	vmov	s15, r3
 8002bba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002bbe:	ed5f 6ab0 	vldr	s13, [pc, #-704]	@ 8002900 <fUpdateCalibration7EIG+0x2f0>
 8002bc2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002bc6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002bca:	687a      	ldr	r2, [r7, #4]
 8002bcc:	6a3b      	ldr	r3, [r7, #32]
 8002bce:	3310      	adds	r3, #16
 8002bd0:	009b      	lsls	r3, r3, #2
 8002bd2:	4413      	add	r3, r2
 8002bd4:	edc3 7a00 	vstr	s15, [r3]
	for (k = X; k <= Z; k++) {
 8002bd8:	6a3b      	ldr	r3, [r7, #32]
 8002bda:	3301      	adds	r3, #1
 8002bdc:	623b      	str	r3, [r7, #32]
 8002bde:	6a3b      	ldr	r3, [r7, #32]
 8002be0:	2b02      	cmp	r3, #2
 8002be2:	ddc1      	ble.n	8002b68 <fUpdateCalibration7EIG+0x558>
	}
}
 8002be4:	bf00      	nop
 8002be6:	bf00      	nop
 8002be8:	3738      	adds	r7, #56	@ 0x38
 8002bea:	46bd      	mov	sp, r7
 8002bec:	ecbd 8b02 	vpop	{d8}
 8002bf0:	bdb0      	pop	{r4, r5, r7, pc}
 8002bf2:	bf00      	nop

08002bf4 <fUpdateCalibration10EIG>:

static void fUpdateCalibration10EIG(MagCalibration_t *MagCal)
{
 8002bf4:	b590      	push	{r4, r7, lr}
 8002bf6:	b08f      	sub	sp, #60	@ 0x3c
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
	float ftmp;					// scratch variable
	int16_t iOffset[3];			// offset to remove large DC hard iron bias in matrix
	int16_t iCount;				// number of measurements counted
	int i, j, k, m, n;			// loop counters

	magcal_type = 3;
 8002bfc:	4bb2      	ldr	r3, [pc, #712]	@ (8002ec8 <fUpdateCalibration10EIG+0x2d4>)
 8002bfe:	2203      	movs	r2, #3
 8002c00:	601a      	str	r2, [r3, #0]

	// compute fscaling to reduce multiplications later
	fscaling = FXOS8700_UTPERCOUNT / DEFAULTB;
 8002c02:	4bb2      	ldr	r3, [pc, #712]	@ (8002ecc <fUpdateCalibration10EIG+0x2d8>)
 8002c04:	61bb      	str	r3, [r7, #24]

	// the offsets are guaranteed to be set from the first element but to avoid compiler error
	iOffset[X] = iOffset[Y] = iOffset[Z] = 0;
 8002c06:	2300      	movs	r3, #0
 8002c08:	823b      	strh	r3, [r7, #16]
 8002c0a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002c0e:	81fb      	strh	r3, [r7, #14]
 8002c10:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002c14:	81bb      	strh	r3, [r7, #12]

	// zero the on and above diagonal elements of the 10x10 symmetric measurement matrix matA
	for (m = 0; m < 10; m++) {
 8002c16:	2300      	movs	r3, #0
 8002c18:	623b      	str	r3, [r7, #32]
 8002c1a:	e019      	b.n	8002c50 <fUpdateCalibration10EIG+0x5c>
		for (n = m; n < 10; n++) {
 8002c1c:	6a3b      	ldr	r3, [r7, #32]
 8002c1e:	61fb      	str	r3, [r7, #28]
 8002c20:	e010      	b.n	8002c44 <fUpdateCalibration10EIG+0x50>
			MagCal->matA[m][n] = 0.0F;
 8002c22:	6879      	ldr	r1, [r7, #4]
 8002c24:	6a3a      	ldr	r2, [r7, #32]
 8002c26:	4613      	mov	r3, r2
 8002c28:	009b      	lsls	r3, r3, #2
 8002c2a:	4413      	add	r3, r2
 8002c2c:	005b      	lsls	r3, r3, #1
 8002c2e:	69fa      	ldr	r2, [r7, #28]
 8002c30:	4413      	add	r3, r2
 8002c32:	3330      	adds	r3, #48	@ 0x30
 8002c34:	009b      	lsls	r3, r3, #2
 8002c36:	440b      	add	r3, r1
 8002c38:	f04f 0200 	mov.w	r2, #0
 8002c3c:	601a      	str	r2, [r3, #0]
		for (n = m; n < 10; n++) {
 8002c3e:	69fb      	ldr	r3, [r7, #28]
 8002c40:	3301      	adds	r3, #1
 8002c42:	61fb      	str	r3, [r7, #28]
 8002c44:	69fb      	ldr	r3, [r7, #28]
 8002c46:	2b09      	cmp	r3, #9
 8002c48:	ddeb      	ble.n	8002c22 <fUpdateCalibration10EIG+0x2e>
	for (m = 0; m < 10; m++) {
 8002c4a:	6a3b      	ldr	r3, [r7, #32]
 8002c4c:	3301      	adds	r3, #1
 8002c4e:	623b      	str	r3, [r7, #32]
 8002c50:	6a3b      	ldr	r3, [r7, #32]
 8002c52:	2b09      	cmp	r3, #9
 8002c54:	dde2      	ble.n	8002c1c <fUpdateCalibration10EIG+0x28>
		}
	}

	// sum between MINEQUATIONS to MAXEQUATIONS entries into the 10x10 product matrix matA
	iCount = 0;
 8002c56:	2300      	movs	r3, #0
 8002c58:	867b      	strh	r3, [r7, #50]	@ 0x32
	for (j = 0; j < MAGBUFFSIZE; j++) {
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002c5e:	e117      	b.n	8002e90 <fUpdateCalibration10EIG+0x29c>
		if (MagCal->valid[j]) {
 8002c60:	687a      	ldr	r2, [r7, #4]
 8002c62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c64:	4413      	add	r3, r2
 8002c66:	f503 539a 	add.w	r3, r3, #4928	@ 0x1340
 8002c6a:	3316      	adds	r3, #22
 8002c6c:	f993 3000 	ldrsb.w	r3, [r3]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	f000 810a 	beq.w	8002e8a <fUpdateCalibration10EIG+0x296>
			// use first valid magnetic buffer entry as estimate for offset
			// to help solution (bit counts)
			if (iCount == 0) {
 8002c76:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d11c      	bne.n	8002cb8 <fUpdateCalibration10EIG+0xc4>
				for (k = X; k <= Z; k++) {
 8002c7e:	2300      	movs	r3, #0
 8002c80:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c82:	e016      	b.n	8002cb2 <fUpdateCalibration10EIG+0xbe>
					iOffset[k] = MagCal->BpFast[k][j];
 8002c84:	687a      	ldr	r2, [r7, #4]
 8002c86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c88:	f240 218a 	movw	r1, #650	@ 0x28a
 8002c8c:	fb03 f101 	mul.w	r1, r3, r1
 8002c90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c92:	440b      	add	r3, r1
 8002c94:	f503 7303 	add.w	r3, r3, #524	@ 0x20c
 8002c98:	005b      	lsls	r3, r3, #1
 8002c9a:	4413      	add	r3, r2
 8002c9c:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8002ca0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ca2:	005b      	lsls	r3, r3, #1
 8002ca4:	3338      	adds	r3, #56	@ 0x38
 8002ca6:	443b      	add	r3, r7
 8002ca8:	f823 2c2c 	strh.w	r2, [r3, #-44]
				for (k = X; k <= Z; k++) {
 8002cac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cae:	3301      	adds	r3, #1
 8002cb0:	627b      	str	r3, [r7, #36]	@ 0x24
 8002cb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cb4:	2b02      	cmp	r3, #2
 8002cb6:	dde5      	ble.n	8002c84 <fUpdateCalibration10EIG+0x90>
				}
			}

			// apply the fixed offset and scaling and enter into vecA[6-8]
			for (k = X; k <= Z; k++) {
 8002cb8:	2300      	movs	r3, #0
 8002cba:	627b      	str	r3, [r7, #36]	@ 0x24
 8002cbc:	e028      	b.n	8002d10 <fUpdateCalibration10EIG+0x11c>
				MagCal->vecA[k + 6] = (float)((int32_t)MagCal->BpFast[k][j]
 8002cbe:	687a      	ldr	r2, [r7, #4]
 8002cc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cc2:	f240 218a 	movw	r1, #650	@ 0x28a
 8002cc6:	fb03 f101 	mul.w	r1, r3, r1
 8002cca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ccc:	440b      	add	r3, r1
 8002cce:	f503 7303 	add.w	r3, r3, #524	@ 0x20c
 8002cd2:	005b      	lsls	r3, r3, #1
 8002cd4:	4413      	add	r3, r2
 8002cd6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002cda:	461a      	mov	r2, r3
					- (int32_t)iOffset[k]) * fscaling;
 8002cdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cde:	005b      	lsls	r3, r3, #1
 8002ce0:	3338      	adds	r3, #56	@ 0x38
 8002ce2:	443b      	add	r3, r7
 8002ce4:	f933 3c2c 	ldrsh.w	r3, [r3, #-44]
 8002ce8:	1ad3      	subs	r3, r2, r3
				MagCal->vecA[k + 6] = (float)((int32_t)MagCal->BpFast[k][j]
 8002cea:	ee07 3a90 	vmov	s15, r3
 8002cee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002cf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cf4:	3306      	adds	r3, #6
					- (int32_t)iOffset[k]) * fscaling;
 8002cf6:	edd7 7a06 	vldr	s15, [r7, #24]
 8002cfa:	ee67 7a27 	vmul.f32	s15, s14, s15
				MagCal->vecA[k + 6] = (float)((int32_t)MagCal->BpFast[k][j]
 8002cfe:	687a      	ldr	r2, [r7, #4]
 8002d00:	33f8      	adds	r3, #248	@ 0xf8
 8002d02:	009b      	lsls	r3, r3, #2
 8002d04:	4413      	add	r3, r2
 8002d06:	edc3 7a00 	vstr	s15, [r3]
			for (k = X; k <= Z; k++) {
 8002d0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d0c:	3301      	adds	r3, #1
 8002d0e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d12:	2b02      	cmp	r3, #2
 8002d14:	ddd3      	ble.n	8002cbe <fUpdateCalibration10EIG+0xca>
			}

			// compute measurement vector elements vecA[0-5] from vecA[6-8]
			MagCal->vecA[0] = MagCal->vecA[6] * MagCal->vecA[6];
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	ed93 7afe 	vldr	s14, [r3, #1016]	@ 0x3f8
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	edd3 7afe 	vldr	s15, [r3, #1016]	@ 0x3f8
 8002d22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	edc3 7af8 	vstr	s15, [r3, #992]	@ 0x3e0
			MagCal->vecA[1] = 2.0F * MagCal->vecA[6] * MagCal->vecA[7];
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	edd3 7afe 	vldr	s15, [r3, #1016]	@ 0x3f8
 8002d32:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	edd3 7aff 	vldr	s15, [r3, #1020]	@ 0x3fc
 8002d3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	edc3 7af9 	vstr	s15, [r3, #996]	@ 0x3e4
			MagCal->vecA[2] = 2.0F * MagCal->vecA[6] * MagCal->vecA[8];
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	edd3 7afe 	vldr	s15, [r3, #1016]	@ 0x3f8
 8002d4c:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002d56:	edd3 7a00 	vldr	s15, [r3]
 8002d5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	edc3 7afa 	vstr	s15, [r3, #1000]	@ 0x3e8
			MagCal->vecA[3] = MagCal->vecA[7] * MagCal->vecA[7];
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	ed93 7aff 	vldr	s14, [r3, #1020]	@ 0x3fc
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	edd3 7aff 	vldr	s15, [r3, #1020]	@ 0x3fc
 8002d70:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	edc3 7afb 	vstr	s15, [r3, #1004]	@ 0x3ec
			MagCal->vecA[4] = 2.0F * MagCal->vecA[7] * MagCal->vecA[8];
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	edd3 7aff 	vldr	s15, [r3, #1020]	@ 0x3fc
 8002d80:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002d8a:	edd3 7a00 	vldr	s15, [r3]
 8002d8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	edc3 7afc 	vstr	s15, [r3, #1008]	@ 0x3f0
			MagCal->vecA[5] = MagCal->vecA[8] * MagCal->vecA[8];
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002d9e:	ed93 7a00 	vldr	s14, [r3]
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002da8:	edd3 7a00 	vldr	s15, [r3]
 8002dac:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	edc3 7afd 	vstr	s15, [r3, #1012]	@ 0x3f4

			// accumulate the on-and above-diagonal terms of matA=Sigma{vecA^T * vecA}
			// with the exception of matA[9][9] which equals the number of measurements
			// update the right hand column [9] of matA[0-8][9] ignoring matA[9][9]
			for (m = 0; m < 9; m++) {
 8002db6:	2300      	movs	r3, #0
 8002db8:	623b      	str	r3, [r7, #32]
 8002dba:	e01f      	b.n	8002dfc <fUpdateCalibration10EIG+0x208>
				MagCal->matA[m][9] += MagCal->vecA[m];
 8002dbc:	6879      	ldr	r1, [r7, #4]
 8002dbe:	6a3a      	ldr	r2, [r7, #32]
 8002dc0:	4613      	mov	r3, r2
 8002dc2:	009b      	lsls	r3, r3, #2
 8002dc4:	4413      	add	r3, r2
 8002dc6:	00db      	lsls	r3, r3, #3
 8002dc8:	440b      	add	r3, r1
 8002dca:	33e4      	adds	r3, #228	@ 0xe4
 8002dcc:	ed93 7a00 	vldr	s14, [r3]
 8002dd0:	687a      	ldr	r2, [r7, #4]
 8002dd2:	6a3b      	ldr	r3, [r7, #32]
 8002dd4:	33f8      	adds	r3, #248	@ 0xf8
 8002dd6:	009b      	lsls	r3, r3, #2
 8002dd8:	4413      	add	r3, r2
 8002dda:	edd3 7a00 	vldr	s15, [r3]
 8002dde:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002de2:	6879      	ldr	r1, [r7, #4]
 8002de4:	6a3a      	ldr	r2, [r7, #32]
 8002de6:	4613      	mov	r3, r2
 8002de8:	009b      	lsls	r3, r3, #2
 8002dea:	4413      	add	r3, r2
 8002dec:	00db      	lsls	r3, r3, #3
 8002dee:	440b      	add	r3, r1
 8002df0:	33e4      	adds	r3, #228	@ 0xe4
 8002df2:	edc3 7a00 	vstr	s15, [r3]
			for (m = 0; m < 9; m++) {
 8002df6:	6a3b      	ldr	r3, [r7, #32]
 8002df8:	3301      	adds	r3, #1
 8002dfa:	623b      	str	r3, [r7, #32]
 8002dfc:	6a3b      	ldr	r3, [r7, #32]
 8002dfe:	2b08      	cmp	r3, #8
 8002e00:	dddc      	ble.n	8002dbc <fUpdateCalibration10EIG+0x1c8>
			}
			// update the on and above diagonal terms of matA ignoring right hand column 9
			for (m = 0; m < 9; m++) {
 8002e02:	2300      	movs	r3, #0
 8002e04:	623b      	str	r3, [r7, #32]
 8002e06:	e037      	b.n	8002e78 <fUpdateCalibration10EIG+0x284>
				for (n = m; n < 9; n++) {
 8002e08:	6a3b      	ldr	r3, [r7, #32]
 8002e0a:	61fb      	str	r3, [r7, #28]
 8002e0c:	e02e      	b.n	8002e6c <fUpdateCalibration10EIG+0x278>
					MagCal->matA[m][n] += MagCal->vecA[m] * MagCal->vecA[n];
 8002e0e:	6879      	ldr	r1, [r7, #4]
 8002e10:	6a3a      	ldr	r2, [r7, #32]
 8002e12:	4613      	mov	r3, r2
 8002e14:	009b      	lsls	r3, r3, #2
 8002e16:	4413      	add	r3, r2
 8002e18:	005b      	lsls	r3, r3, #1
 8002e1a:	69fa      	ldr	r2, [r7, #28]
 8002e1c:	4413      	add	r3, r2
 8002e1e:	3330      	adds	r3, #48	@ 0x30
 8002e20:	009b      	lsls	r3, r3, #2
 8002e22:	440b      	add	r3, r1
 8002e24:	ed93 7a00 	vldr	s14, [r3]
 8002e28:	687a      	ldr	r2, [r7, #4]
 8002e2a:	6a3b      	ldr	r3, [r7, #32]
 8002e2c:	33f8      	adds	r3, #248	@ 0xf8
 8002e2e:	009b      	lsls	r3, r3, #2
 8002e30:	4413      	add	r3, r2
 8002e32:	edd3 6a00 	vldr	s13, [r3]
 8002e36:	687a      	ldr	r2, [r7, #4]
 8002e38:	69fb      	ldr	r3, [r7, #28]
 8002e3a:	33f8      	adds	r3, #248	@ 0xf8
 8002e3c:	009b      	lsls	r3, r3, #2
 8002e3e:	4413      	add	r3, r2
 8002e40:	edd3 7a00 	vldr	s15, [r3]
 8002e44:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e48:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e4c:	6879      	ldr	r1, [r7, #4]
 8002e4e:	6a3a      	ldr	r2, [r7, #32]
 8002e50:	4613      	mov	r3, r2
 8002e52:	009b      	lsls	r3, r3, #2
 8002e54:	4413      	add	r3, r2
 8002e56:	005b      	lsls	r3, r3, #1
 8002e58:	69fa      	ldr	r2, [r7, #28]
 8002e5a:	4413      	add	r3, r2
 8002e5c:	3330      	adds	r3, #48	@ 0x30
 8002e5e:	009b      	lsls	r3, r3, #2
 8002e60:	440b      	add	r3, r1
 8002e62:	edc3 7a00 	vstr	s15, [r3]
				for (n = m; n < 9; n++) {
 8002e66:	69fb      	ldr	r3, [r7, #28]
 8002e68:	3301      	adds	r3, #1
 8002e6a:	61fb      	str	r3, [r7, #28]
 8002e6c:	69fb      	ldr	r3, [r7, #28]
 8002e6e:	2b08      	cmp	r3, #8
 8002e70:	ddcd      	ble.n	8002e0e <fUpdateCalibration10EIG+0x21a>
			for (m = 0; m < 9; m++) {
 8002e72:	6a3b      	ldr	r3, [r7, #32]
 8002e74:	3301      	adds	r3, #1
 8002e76:	623b      	str	r3, [r7, #32]
 8002e78:	6a3b      	ldr	r3, [r7, #32]
 8002e7a:	2b08      	cmp	r3, #8
 8002e7c:	ddc4      	ble.n	8002e08 <fUpdateCalibration10EIG+0x214>
				}
			}

			// increment the measurement counter for the next iteration
			iCount++;
 8002e7e:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 8002e82:	b29b      	uxth	r3, r3
 8002e84:	3301      	adds	r3, #1
 8002e86:	b29b      	uxth	r3, r3
 8002e88:	867b      	strh	r3, [r7, #50]	@ 0x32
	for (j = 0; j < MAGBUFFSIZE; j++) {
 8002e8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e8c:	3301      	adds	r3, #1
 8002e8e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002e90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e92:	f240 2289 	movw	r2, #649	@ 0x289
 8002e96:	4293      	cmp	r3, r2
 8002e98:	f77f aee2 	ble.w	8002c60 <fUpdateCalibration10EIG+0x6c>
		}
	}

	// set the last element matA[9][9] to the number of measurements
	MagCal->matA[9][9] = (float) iCount;
 8002e9c:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 8002ea0:	ee07 3a90 	vmov	s15, r3
 8002ea4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	edc3 7a93 	vstr	s15, [r3, #588]	@ 0x24c

	// store the number of measurements accumulated
	MagCal->MagBufferCount = iCount;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002eb4:	461a      	mov	r2, r3
 8002eb6:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8002eb8:	f8a2 35e0 	strh.w	r3, [r2, #1504]	@ 0x5e0

	// copy the above diagonal elements of symmetric product matrix matA to below the diagonal
	for (m = 1; m < 10; m++) {
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	623b      	str	r3, [r7, #32]
 8002ec0:	e028      	b.n	8002f14 <fUpdateCalibration10EIG+0x320>
		for (n = 0; n < m; n++) {
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	61fb      	str	r3, [r7, #28]
 8002ec6:	e01e      	b.n	8002f06 <fUpdateCalibration10EIG+0x312>
 8002ec8:	200001ec 	.word	0x200001ec
 8002ecc:	3b03126f 	.word	0x3b03126f
			MagCal->matA[m][n] = MagCal->matA[n][m];
 8002ed0:	6879      	ldr	r1, [r7, #4]
 8002ed2:	69fa      	ldr	r2, [r7, #28]
 8002ed4:	4613      	mov	r3, r2
 8002ed6:	009b      	lsls	r3, r3, #2
 8002ed8:	4413      	add	r3, r2
 8002eda:	005b      	lsls	r3, r3, #1
 8002edc:	6a3a      	ldr	r2, [r7, #32]
 8002ede:	4413      	add	r3, r2
 8002ee0:	3330      	adds	r3, #48	@ 0x30
 8002ee2:	009b      	lsls	r3, r3, #2
 8002ee4:	440b      	add	r3, r1
 8002ee6:	6819      	ldr	r1, [r3, #0]
 8002ee8:	6878      	ldr	r0, [r7, #4]
 8002eea:	6a3a      	ldr	r2, [r7, #32]
 8002eec:	4613      	mov	r3, r2
 8002eee:	009b      	lsls	r3, r3, #2
 8002ef0:	4413      	add	r3, r2
 8002ef2:	005b      	lsls	r3, r3, #1
 8002ef4:	69fa      	ldr	r2, [r7, #28]
 8002ef6:	4413      	add	r3, r2
 8002ef8:	3330      	adds	r3, #48	@ 0x30
 8002efa:	009b      	lsls	r3, r3, #2
 8002efc:	4403      	add	r3, r0
 8002efe:	6019      	str	r1, [r3, #0]
		for (n = 0; n < m; n++) {
 8002f00:	69fb      	ldr	r3, [r7, #28]
 8002f02:	3301      	adds	r3, #1
 8002f04:	61fb      	str	r3, [r7, #28]
 8002f06:	69fa      	ldr	r2, [r7, #28]
 8002f08:	6a3b      	ldr	r3, [r7, #32]
 8002f0a:	429a      	cmp	r2, r3
 8002f0c:	dbe0      	blt.n	8002ed0 <fUpdateCalibration10EIG+0x2dc>
	for (m = 1; m < 10; m++) {
 8002f0e:	6a3b      	ldr	r3, [r7, #32]
 8002f10:	3301      	adds	r3, #1
 8002f12:	623b      	str	r3, [r7, #32]
 8002f14:	6a3b      	ldr	r3, [r7, #32]
 8002f16:	2b09      	cmp	r3, #9
 8002f18:	ddd3      	ble.n	8002ec2 <fUpdateCalibration10EIG+0x2ce>
		}
	}

	// set MagCal->vecA to the unsorted eigenvalues and matB to the unsorted
	// normalized eigenvectors of matA
	eigencompute(MagCal->matA, MagCal->vecA, MagCal->matB, 10);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	f103 00c0 	add.w	r0, r3, #192	@ 0xc0
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	f503 7214 	add.w	r2, r3, #592	@ 0x250
 8002f2c:	230a      	movs	r3, #10
 8002f2e:	f003 f971 	bl	8006214 <eigencompute>

	// set ellipsoid matrix A from elements of the solution vector column j with
	// smallest eigenvalue
	j = 0;
 8002f32:	2300      	movs	r3, #0
 8002f34:	62bb      	str	r3, [r7, #40]	@ 0x28
	for (i = 1; i < 10; i++) {
 8002f36:	2301      	movs	r3, #1
 8002f38:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002f3a:	e017      	b.n	8002f6c <fUpdateCalibration10EIG+0x378>
		if (MagCal->vecA[i] < MagCal->vecA[j]) {
 8002f3c:	687a      	ldr	r2, [r7, #4]
 8002f3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f40:	33f8      	adds	r3, #248	@ 0xf8
 8002f42:	009b      	lsls	r3, r3, #2
 8002f44:	4413      	add	r3, r2
 8002f46:	ed93 7a00 	vldr	s14, [r3]
 8002f4a:	687a      	ldr	r2, [r7, #4]
 8002f4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f4e:	33f8      	adds	r3, #248	@ 0xf8
 8002f50:	009b      	lsls	r3, r3, #2
 8002f52:	4413      	add	r3, r2
 8002f54:	edd3 7a00 	vldr	s15, [r3]
 8002f58:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002f5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f60:	d501      	bpl.n	8002f66 <fUpdateCalibration10EIG+0x372>
			j = i;
 8002f62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f64:	62bb      	str	r3, [r7, #40]	@ 0x28
	for (i = 1; i < 10; i++) {
 8002f66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f68:	3301      	adds	r3, #1
 8002f6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002f6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f6e:	2b09      	cmp	r3, #9
 8002f70:	dde4      	ble.n	8002f3c <fUpdateCalibration10EIG+0x348>
		}
	}
	MagCal->A[0][0] = MagCal->matB[0][j];
 8002f72:	687a      	ldr	r2, [r7, #4]
 8002f74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f76:	3394      	adds	r3, #148	@ 0x94
 8002f78:	009b      	lsls	r3, r3, #2
 8002f7a:	4413      	add	r3, r2
 8002f7c:	681a      	ldr	r2, [r3, #0]
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	679a      	str	r2, [r3, #120]	@ 0x78
	MagCal->A[0][1] = MagCal->A[1][0] = MagCal->matB[1][j];
 8002f82:	687a      	ldr	r2, [r7, #4]
 8002f84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f86:	339e      	adds	r3, #158	@ 0x9e
 8002f88:	009b      	lsls	r3, r3, #2
 8002f8a:	4413      	add	r3, r2
 8002f8c:	681a      	ldr	r2, [r3, #0]
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	67da      	str	r2, [r3, #124]	@ 0x7c
	MagCal->A[0][2] = MagCal->A[2][0] = MagCal->matB[2][j];
 8002f9e:	687a      	ldr	r2, [r7, #4]
 8002fa0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fa2:	33a8      	adds	r3, #168	@ 0xa8
 8002fa4:	009b      	lsls	r3, r3, #2
 8002fa6:	4413      	add	r3, r2
 8002fa8:	681a      	ldr	r2, [r3, #0]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
	MagCal->A[1][1] = MagCal->matB[3][j];
 8002fbc:	687a      	ldr	r2, [r7, #4]
 8002fbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fc0:	33b2      	adds	r3, #178	@ 0xb2
 8002fc2:	009b      	lsls	r3, r3, #2
 8002fc4:	4413      	add	r3, r2
 8002fc6:	681a      	ldr	r2, [r3, #0]
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
	MagCal->A[1][2] = MagCal->A[2][1] = MagCal->matB[4][j];
 8002fce:	687a      	ldr	r2, [r7, #4]
 8002fd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fd2:	33bc      	adds	r3, #188	@ 0xbc
 8002fd4:	009b      	lsls	r3, r3, #2
 8002fd6:	4413      	add	r3, r2
 8002fd8:	681a      	ldr	r2, [r3, #0]
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
	MagCal->A[2][2] = MagCal->matB[5][j];
 8002fec:	687a      	ldr	r2, [r7, #4]
 8002fee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ff0:	33c6      	adds	r3, #198	@ 0xc6
 8002ff2:	009b      	lsls	r3, r3, #2
 8002ff4:	4413      	add	r3, r2
 8002ff6:	681a      	ldr	r2, [r3, #0]
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98

	// negate entire solution if A has negative determinant
	det = f3x3matrixDetA(MagCal->A);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	3378      	adds	r3, #120	@ 0x78
 8003002:	4618      	mov	r0, r3
 8003004:	f003 f8a6 	bl	8006154 <f3x3matrixDetA>
 8003008:	ed87 0a0d 	vstr	s0, [r7, #52]	@ 0x34
	if (det < 0.0F) {
 800300c:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8003010:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003014:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003018:	d54a      	bpl.n	80030b0 <fUpdateCalibration10EIG+0x4bc>
		f3x3matrixAeqMinusA(MagCal->A);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	3378      	adds	r3, #120	@ 0x78
 800301e:	4618      	mov	r0, r3
 8003020:	f002 ff68 	bl	8005ef4 <f3x3matrixAeqMinusA>
		MagCal->matB[6][j] = -MagCal->matB[6][j];
 8003024:	687a      	ldr	r2, [r7, #4]
 8003026:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003028:	33d0      	adds	r3, #208	@ 0xd0
 800302a:	009b      	lsls	r3, r3, #2
 800302c:	4413      	add	r3, r2
 800302e:	edd3 7a00 	vldr	s15, [r3]
 8003032:	eef1 7a67 	vneg.f32	s15, s15
 8003036:	687a      	ldr	r2, [r7, #4]
 8003038:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800303a:	33d0      	adds	r3, #208	@ 0xd0
 800303c:	009b      	lsls	r3, r3, #2
 800303e:	4413      	add	r3, r2
 8003040:	edc3 7a00 	vstr	s15, [r3]
		MagCal->matB[7][j] = -MagCal->matB[7][j];
 8003044:	687a      	ldr	r2, [r7, #4]
 8003046:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003048:	33da      	adds	r3, #218	@ 0xda
 800304a:	009b      	lsls	r3, r3, #2
 800304c:	4413      	add	r3, r2
 800304e:	edd3 7a00 	vldr	s15, [r3]
 8003052:	eef1 7a67 	vneg.f32	s15, s15
 8003056:	687a      	ldr	r2, [r7, #4]
 8003058:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800305a:	33da      	adds	r3, #218	@ 0xda
 800305c:	009b      	lsls	r3, r3, #2
 800305e:	4413      	add	r3, r2
 8003060:	edc3 7a00 	vstr	s15, [r3]
		MagCal->matB[8][j] = -MagCal->matB[8][j];
 8003064:	687a      	ldr	r2, [r7, #4]
 8003066:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003068:	33e4      	adds	r3, #228	@ 0xe4
 800306a:	009b      	lsls	r3, r3, #2
 800306c:	4413      	add	r3, r2
 800306e:	edd3 7a00 	vldr	s15, [r3]
 8003072:	eef1 7a67 	vneg.f32	s15, s15
 8003076:	687a      	ldr	r2, [r7, #4]
 8003078:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800307a:	33e4      	adds	r3, #228	@ 0xe4
 800307c:	009b      	lsls	r3, r3, #2
 800307e:	4413      	add	r3, r2
 8003080:	edc3 7a00 	vstr	s15, [r3]
		MagCal->matB[9][j] = -MagCal->matB[9][j];
 8003084:	687a      	ldr	r2, [r7, #4]
 8003086:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003088:	33ee      	adds	r3, #238	@ 0xee
 800308a:	009b      	lsls	r3, r3, #2
 800308c:	4413      	add	r3, r2
 800308e:	edd3 7a00 	vldr	s15, [r3]
 8003092:	eef1 7a67 	vneg.f32	s15, s15
 8003096:	687a      	ldr	r2, [r7, #4]
 8003098:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800309a:	33ee      	adds	r3, #238	@ 0xee
 800309c:	009b      	lsls	r3, r3, #2
 800309e:	4413      	add	r3, r2
 80030a0:	edc3 7a00 	vstr	s15, [r3]
		det = -det;
 80030a4:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80030a8:	eef1 7a67 	vneg.f32	s15, s15
 80030ac:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
	}

	// compute the inverse of the ellipsoid matrix
	f3x3matrixAeqInvSymB(MagCal->invA, MagCal->A);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	f103 029c 	add.w	r2, r3, #156	@ 0x9c
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	3378      	adds	r3, #120	@ 0x78
 80030ba:	4619      	mov	r1, r3
 80030bc:	4610      	mov	r0, r2
 80030be:	f002 ff53 	bl	8005f68 <f3x3matrixAeqInvSymB>

	// compute the trial hard iron vector in offset bit counts times FMATRIXSCALING
	for (k = X; k <= Z; k++) {
 80030c2:	2300      	movs	r3, #0
 80030c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80030c6:	e052      	b.n	800316e <fUpdateCalibration10EIG+0x57a>
		MagCal->trV[k] = 0.0F;
 80030c8:	687a      	ldr	r2, [r7, #4]
 80030ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030cc:	3310      	adds	r3, #16
 80030ce:	009b      	lsls	r3, r3, #2
 80030d0:	4413      	add	r3, r2
 80030d2:	f04f 0200 	mov.w	r2, #0
 80030d6:	601a      	str	r2, [r3, #0]
		for (m = X; m <= Z; m++) {
 80030d8:	2300      	movs	r3, #0
 80030da:	623b      	str	r3, [r7, #32]
 80030dc:	e02f      	b.n	800313e <fUpdateCalibration10EIG+0x54a>
			MagCal->trV[k] += MagCal->invA[k][m] * MagCal->matB[m + 6][j];
 80030de:	687a      	ldr	r2, [r7, #4]
 80030e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030e2:	3310      	adds	r3, #16
 80030e4:	009b      	lsls	r3, r3, #2
 80030e6:	4413      	add	r3, r2
 80030e8:	ed93 7a00 	vldr	s14, [r3]
 80030ec:	6879      	ldr	r1, [r7, #4]
 80030ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80030f0:	4613      	mov	r3, r2
 80030f2:	005b      	lsls	r3, r3, #1
 80030f4:	4413      	add	r3, r2
 80030f6:	6a3a      	ldr	r2, [r7, #32]
 80030f8:	4413      	add	r3, r2
 80030fa:	3326      	adds	r3, #38	@ 0x26
 80030fc:	009b      	lsls	r3, r3, #2
 80030fe:	440b      	add	r3, r1
 8003100:	3304      	adds	r3, #4
 8003102:	edd3 6a00 	vldr	s13, [r3]
 8003106:	6a3b      	ldr	r3, [r7, #32]
 8003108:	1d9a      	adds	r2, r3, #6
 800310a:	6879      	ldr	r1, [r7, #4]
 800310c:	4613      	mov	r3, r2
 800310e:	009b      	lsls	r3, r3, #2
 8003110:	4413      	add	r3, r2
 8003112:	005b      	lsls	r3, r3, #1
 8003114:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003116:	4413      	add	r3, r2
 8003118:	3394      	adds	r3, #148	@ 0x94
 800311a:	009b      	lsls	r3, r3, #2
 800311c:	440b      	add	r3, r1
 800311e:	edd3 7a00 	vldr	s15, [r3]
 8003122:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003126:	ee77 7a27 	vadd.f32	s15, s14, s15
 800312a:	687a      	ldr	r2, [r7, #4]
 800312c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800312e:	3310      	adds	r3, #16
 8003130:	009b      	lsls	r3, r3, #2
 8003132:	4413      	add	r3, r2
 8003134:	edc3 7a00 	vstr	s15, [r3]
		for (m = X; m <= Z; m++) {
 8003138:	6a3b      	ldr	r3, [r7, #32]
 800313a:	3301      	adds	r3, #1
 800313c:	623b      	str	r3, [r7, #32]
 800313e:	6a3b      	ldr	r3, [r7, #32]
 8003140:	2b02      	cmp	r3, #2
 8003142:	ddcc      	ble.n	80030de <fUpdateCalibration10EIG+0x4ea>
		}
		MagCal->trV[k] *= -0.5F;
 8003144:	687a      	ldr	r2, [r7, #4]
 8003146:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003148:	3310      	adds	r3, #16
 800314a:	009b      	lsls	r3, r3, #2
 800314c:	4413      	add	r3, r2
 800314e:	edd3 7a00 	vldr	s15, [r3]
 8003152:	eebe 7a00 	vmov.f32	s14, #224	@ 0xbf000000 -0.5
 8003156:	ee67 7a87 	vmul.f32	s15, s15, s14
 800315a:	687a      	ldr	r2, [r7, #4]
 800315c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800315e:	3310      	adds	r3, #16
 8003160:	009b      	lsls	r3, r3, #2
 8003162:	4413      	add	r3, r2
 8003164:	edc3 7a00 	vstr	s15, [r3]
	for (k = X; k <= Z; k++) {
 8003168:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800316a:	3301      	adds	r3, #1
 800316c:	627b      	str	r3, [r7, #36]	@ 0x24
 800316e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003170:	2b02      	cmp	r3, #2
 8003172:	dda9      	ble.n	80030c8 <fUpdateCalibration10EIG+0x4d4>
	}

	// compute the trial geomagnetic field strength B in bit counts times FMATRIXSCALING
	MagCal->trB = sqrtf(fabs(MagCal->A[0][0] * MagCal->trV[X] * MagCal->trV[X] +
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	ed93 7a1e 	vldr	s14, [r3, #120]	@ 0x78
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8003180:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 800318a:	ee27 7a27 	vmul.f32	s14, s14, s15
			2.0F * MagCal->A[0][1] * MagCal->trV[X] * MagCal->trV[Y] +
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	edd3 7a1f 	vldr	s15, [r3, #124]	@ 0x7c
 8003194:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 800319e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 80031a8:	ee66 7aa7 	vmul.f32	s15, s13, s15
	MagCal->trB = sqrtf(fabs(MagCal->A[0][0] * MagCal->trV[X] * MagCal->trV[X] +
 80031ac:	ee37 7a27 	vadd.f32	s14, s14, s15
			2.0F * MagCal->A[0][2] * MagCal->trV[X] * MagCal->trV[Z] +
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	edd3 7a20 	vldr	s15, [r3, #128]	@ 0x80
 80031b6:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 80031c0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 80031ca:	ee66 7aa7 	vmul.f32	s15, s13, s15
			2.0F * MagCal->A[0][1] * MagCal->trV[X] * MagCal->trV[Y] +
 80031ce:	ee37 7a27 	vadd.f32	s14, s14, s15
			MagCal->A[1][1] * MagCal->trV[Y] * MagCal->trV[Y] +
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	edd3 6a22 	vldr	s13, [r3, #136]	@ 0x88
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 80031de:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 80031e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
			2.0F * MagCal->A[0][2] * MagCal->trV[X] * MagCal->trV[Z] +
 80031ec:	ee37 7a27 	vadd.f32	s14, s14, s15
			2.0F * MagCal->A[1][2] * MagCal->trV[Y] * MagCal->trV[Z] +
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	edd3 7a23 	vldr	s15, [r3, #140]	@ 0x8c
 80031f6:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 8003200:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 800320a:	ee66 7aa7 	vmul.f32	s15, s13, s15
			MagCal->A[1][1] * MagCal->trV[Y] * MagCal->trV[Y] +
 800320e:	ee37 7a27 	vadd.f32	s14, s14, s15
			MagCal->A[2][2] * MagCal->trV[Z] * MagCal->trV[Z] - MagCal->matB[9][j]));
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	edd3 6a26 	vldr	s13, [r3, #152]	@ 0x98
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 800321e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 8003228:	ee66 7aa7 	vmul.f32	s15, s13, s15
			2.0F * MagCal->A[1][2] * MagCal->trV[Y] * MagCal->trV[Z] +
 800322c:	ee37 7a27 	vadd.f32	s14, s14, s15
			MagCal->A[2][2] * MagCal->trV[Z] * MagCal->trV[Z] - MagCal->matB[9][j]));
 8003230:	687a      	ldr	r2, [r7, #4]
 8003232:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003234:	33ee      	adds	r3, #238	@ 0xee
 8003236:	009b      	lsls	r3, r3, #2
 8003238:	4413      	add	r3, r2
 800323a:	edd3 7a00 	vldr	s15, [r3]
 800323e:	ee77 7a67 	vsub.f32	s15, s14, s15
	MagCal->trB = sqrtf(fabs(MagCal->A[0][0] * MagCal->trV[X] * MagCal->trV[X] +
 8003242:	eef0 7ae7 	vabs.f32	s15, s15
 8003246:	eeb0 0a67 	vmov.f32	s0, s15
 800324a:	f00e f981 	bl	8011550 <sqrtf>
 800324e:	eef0 7a40 	vmov.f32	s15, s0
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	edc3 7a1c 	vstr	s15, [r3, #112]	@ 0x70

	// calculate the trial normalized fit error as a percentage
	MagCal->trFitErrorpc = 50.0F * sqrtf(
		fabs(MagCal->vecA[j]) / (float) MagCal->MagBufferCount) /
 8003258:	687a      	ldr	r2, [r7, #4]
 800325a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800325c:	33f8      	adds	r3, #248	@ 0xf8
 800325e:	009b      	lsls	r3, r3, #2
 8003260:	4413      	add	r3, r2
 8003262:	edd3 7a00 	vldr	s15, [r3]
 8003266:	eeb0 7ae7 	vabs.f32	s14, s15
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003270:	f9b3 35e0 	ldrsh.w	r3, [r3, #1504]	@ 0x5e0
 8003274:	ee07 3a90 	vmov	s15, r3
 8003278:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	MagCal->trFitErrorpc = 50.0F * sqrtf(
 800327c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003280:	eeb0 0a66 	vmov.f32	s0, s13
 8003284:	f00e f964 	bl	8011550 <sqrtf>
 8003288:	eef0 7a40 	vmov.f32	s15, s0
 800328c:	ed9f 7aae 	vldr	s14, [pc, #696]	@ 8003548 <fUpdateCalibration10EIG+0x954>
 8003290:	ee67 6a87 	vmul.f32	s13, s15, s14
		(MagCal->trB * MagCal->trB);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	ed93 7a1c 	vldr	s14, [r3, #112]	@ 0x70
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	edd3 7a1c 	vldr	s15, [r3, #112]	@ 0x70
 80032a0:	ee27 7a27 	vmul.f32	s14, s14, s15
		fabs(MagCal->vecA[j]) / (float) MagCal->MagBufferCount) /
 80032a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
	MagCal->trFitErrorpc = 50.0F * sqrtf(
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	edc3 7a1d 	vstr	s15, [r3, #116]	@ 0x74

	// correct for the measurement matrix offset and scaling and
	// get the computed hard iron offset in uT
	for (k = X; k <= Z; k++) {
 80032ae:	2300      	movs	r3, #0
 80032b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80032b2:	e024      	b.n	80032fe <fUpdateCalibration10EIG+0x70a>
		MagCal->trV[k] = MagCal->trV[k] * DEFAULTB + (float)iOffset[k] * FXOS8700_UTPERCOUNT;
 80032b4:	687a      	ldr	r2, [r7, #4]
 80032b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032b8:	3310      	adds	r3, #16
 80032ba:	009b      	lsls	r3, r3, #2
 80032bc:	4413      	add	r3, r2
 80032be:	edd3 7a00 	vldr	s15, [r3]
 80032c2:	ed9f 7aa1 	vldr	s14, [pc, #644]	@ 8003548 <fUpdateCalibration10EIG+0x954>
 80032c6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80032ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032cc:	005b      	lsls	r3, r3, #1
 80032ce:	3338      	adds	r3, #56	@ 0x38
 80032d0:	443b      	add	r3, r7
 80032d2:	f933 3c2c 	ldrsh.w	r3, [r3, #-44]
 80032d6:	ee07 3a90 	vmov	s15, r3
 80032da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80032de:	eddf 6a9b 	vldr	s13, [pc, #620]	@ 800354c <fUpdateCalibration10EIG+0x958>
 80032e2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80032e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032ea:	687a      	ldr	r2, [r7, #4]
 80032ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032ee:	3310      	adds	r3, #16
 80032f0:	009b      	lsls	r3, r3, #2
 80032f2:	4413      	add	r3, r2
 80032f4:	edc3 7a00 	vstr	s15, [r3]
	for (k = X; k <= Z; k++) {
 80032f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032fa:	3301      	adds	r3, #1
 80032fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80032fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003300:	2b02      	cmp	r3, #2
 8003302:	ddd7      	ble.n	80032b4 <fUpdateCalibration10EIG+0x6c0>
	}

	// convert the trial geomagnetic field strength B into uT for
	// un-normalized soft iron matrix A
	MagCal->trB *= DEFAULTB;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	edd3 7a1c 	vldr	s15, [r3, #112]	@ 0x70
 800330a:	ed9f 7a8f 	vldr	s14, [pc, #572]	@ 8003548 <fUpdateCalibration10EIG+0x954>
 800330e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	edc3 7a1c 	vstr	s15, [r3, #112]	@ 0x70

	// normalize the ellipsoid matrix A to unit determinant and
	// correct B by root of this multiplicative factor
	f3x3matrixAeqAxScalar(MagCal->A, powf(det, -(ONETHIRD)));
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	f103 0478 	add.w	r4, r3, #120	@ 0x78
 800331e:	eddf 0a8c 	vldr	s1, [pc, #560]	@ 8003550 <fUpdateCalibration10EIG+0x95c>
 8003322:	ed97 0a0d 	vldr	s0, [r7, #52]	@ 0x34
 8003326:	f00e f8bb 	bl	80114a0 <powf>
 800332a:	eef0 7a40 	vmov.f32	s15, s0
 800332e:	eeb0 0a67 	vmov.f32	s0, s15
 8003332:	4620      	mov	r0, r4
 8003334:	f002 fda2 	bl	8005e7c <f3x3matrixAeqAxScalar>
	MagCal->trB *= powf(det, -(ONESIXTH));
 8003338:	eddf 0a86 	vldr	s1, [pc, #536]	@ 8003554 <fUpdateCalibration10EIG+0x960>
 800333c:	ed97 0a0d 	vldr	s0, [r7, #52]	@ 0x34
 8003340:	f00e f8ae 	bl	80114a0 <powf>
 8003344:	eeb0 7a40 	vmov.f32	s14, s0
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	edd3 7a1c 	vldr	s15, [r3, #112]	@ 0x70
 800334e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	edc3 7a1c 	vstr	s15, [r3, #112]	@ 0x70

	// compute trial invW from the square root of fA (both with normalized determinant)
	// set vecA to the unsorted eigenvalues and matB to the unsorted eigenvectors of matA
	// where matA holds the 3x3 matrix fA in its top left elements
	for (i = 0; i < 3; i++) {
 8003358:	2300      	movs	r3, #0
 800335a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800335c:	e022      	b.n	80033a4 <fUpdateCalibration10EIG+0x7b0>
		for (j = 0; j < 3; j++) {
 800335e:	2300      	movs	r3, #0
 8003360:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003362:	e019      	b.n	8003398 <fUpdateCalibration10EIG+0x7a4>
			MagCal->matA[i][j] = MagCal->A[i][j];
 8003364:	6879      	ldr	r1, [r7, #4]
 8003366:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003368:	4613      	mov	r3, r2
 800336a:	005b      	lsls	r3, r3, #1
 800336c:	4413      	add	r3, r2
 800336e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003370:	4413      	add	r3, r2
 8003372:	331e      	adds	r3, #30
 8003374:	009b      	lsls	r3, r3, #2
 8003376:	440b      	add	r3, r1
 8003378:	6819      	ldr	r1, [r3, #0]
 800337a:	6878      	ldr	r0, [r7, #4]
 800337c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800337e:	4613      	mov	r3, r2
 8003380:	009b      	lsls	r3, r3, #2
 8003382:	4413      	add	r3, r2
 8003384:	005b      	lsls	r3, r3, #1
 8003386:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003388:	4413      	add	r3, r2
 800338a:	3330      	adds	r3, #48	@ 0x30
 800338c:	009b      	lsls	r3, r3, #2
 800338e:	4403      	add	r3, r0
 8003390:	6019      	str	r1, [r3, #0]
		for (j = 0; j < 3; j++) {
 8003392:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003394:	3301      	adds	r3, #1
 8003396:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003398:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800339a:	2b02      	cmp	r3, #2
 800339c:	dde2      	ble.n	8003364 <fUpdateCalibration10EIG+0x770>
	for (i = 0; i < 3; i++) {
 800339e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033a0:	3301      	adds	r3, #1
 80033a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80033a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033a6:	2b02      	cmp	r3, #2
 80033a8:	ddd9      	ble.n	800335e <fUpdateCalibration10EIG+0x76a>
		}
	}
	eigencompute(MagCal->matA, MagCal->vecA, MagCal->matB, 3);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	f103 00c0 	add.w	r0, r3, #192	@ 0xc0
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	f503 7214 	add.w	r2, r3, #592	@ 0x250
 80033bc:	2303      	movs	r3, #3
 80033be:	f002 ff29 	bl	8006214 <eigencompute>

	// set MagCal->matB to be eigenvectors . diag(sqrt(sqrt(eigenvalues))) =
	//   matB . diag(sqrt(sqrt(vecA))
	for (j = 0; j < 3; j++) { // loop over columns j
 80033c2:	2300      	movs	r3, #0
 80033c4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80033c6:	e03e      	b.n	8003446 <fUpdateCalibration10EIG+0x852>
		ftmp = sqrtf(sqrtf(fabs(MagCal->vecA[j])));
 80033c8:	687a      	ldr	r2, [r7, #4]
 80033ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033cc:	33f8      	adds	r3, #248	@ 0xf8
 80033ce:	009b      	lsls	r3, r3, #2
 80033d0:	4413      	add	r3, r2
 80033d2:	edd3 7a00 	vldr	s15, [r3]
 80033d6:	eef0 7ae7 	vabs.f32	s15, s15
 80033da:	eeb0 0a67 	vmov.f32	s0, s15
 80033de:	f00e f8b7 	bl	8011550 <sqrtf>
 80033e2:	eef0 7a40 	vmov.f32	s15, s0
 80033e6:	eeb0 0a67 	vmov.f32	s0, s15
 80033ea:	f00e f8b1 	bl	8011550 <sqrtf>
 80033ee:	ed87 0a05 	vstr	s0, [r7, #20]
		for (i = 0; i < 3; i++) { // loop over rows i
 80033f2:	2300      	movs	r3, #0
 80033f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80033f6:	e020      	b.n	800343a <fUpdateCalibration10EIG+0x846>
			MagCal->matB[i][j] *= ftmp;
 80033f8:	6879      	ldr	r1, [r7, #4]
 80033fa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80033fc:	4613      	mov	r3, r2
 80033fe:	009b      	lsls	r3, r3, #2
 8003400:	4413      	add	r3, r2
 8003402:	005b      	lsls	r3, r3, #1
 8003404:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003406:	4413      	add	r3, r2
 8003408:	3394      	adds	r3, #148	@ 0x94
 800340a:	009b      	lsls	r3, r3, #2
 800340c:	440b      	add	r3, r1
 800340e:	ed93 7a00 	vldr	s14, [r3]
 8003412:	edd7 7a05 	vldr	s15, [r7, #20]
 8003416:	ee67 7a27 	vmul.f32	s15, s14, s15
 800341a:	6879      	ldr	r1, [r7, #4]
 800341c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800341e:	4613      	mov	r3, r2
 8003420:	009b      	lsls	r3, r3, #2
 8003422:	4413      	add	r3, r2
 8003424:	005b      	lsls	r3, r3, #1
 8003426:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003428:	4413      	add	r3, r2
 800342a:	3394      	adds	r3, #148	@ 0x94
 800342c:	009b      	lsls	r3, r3, #2
 800342e:	440b      	add	r3, r1
 8003430:	edc3 7a00 	vstr	s15, [r3]
		for (i = 0; i < 3; i++) { // loop over rows i
 8003434:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003436:	3301      	adds	r3, #1
 8003438:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800343a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800343c:	2b02      	cmp	r3, #2
 800343e:	dddb      	ble.n	80033f8 <fUpdateCalibration10EIG+0x804>
	for (j = 0; j < 3; j++) { // loop over columns j
 8003440:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003442:	3301      	adds	r3, #1
 8003444:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003446:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003448:	2b02      	cmp	r3, #2
 800344a:	ddbd      	ble.n	80033c8 <fUpdateCalibration10EIG+0x7d4>
	}

	// set trinvW to eigenvectors * diag(sqrt(eigenvalues)) * eigenvectors^T =
	//   matB * matB^T = sqrt(fA) (guaranteed symmetric)
	// loop over rows
	for (i = 0; i < 3; i++) {
 800344c:	2300      	movs	r3, #0
 800344e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003450:	e072      	b.n	8003538 <fUpdateCalibration10EIG+0x944>
		// loop over on and above diagonal columns
		for (j = i; j < 3; j++) {
 8003452:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003454:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003456:	e069      	b.n	800352c <fUpdateCalibration10EIG+0x938>
			MagCal->trinvW[i][j] = 0.0F;
 8003458:	6879      	ldr	r1, [r7, #4]
 800345a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800345c:	4613      	mov	r3, r2
 800345e:	005b      	lsls	r3, r3, #1
 8003460:	4413      	add	r3, r2
 8003462:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003464:	4413      	add	r3, r2
 8003466:	3312      	adds	r3, #18
 8003468:	009b      	lsls	r3, r3, #2
 800346a:	440b      	add	r3, r1
 800346c:	3304      	adds	r3, #4
 800346e:	f04f 0200 	mov.w	r2, #0
 8003472:	601a      	str	r2, [r3, #0]
			// accumulate the matrix product
			for (k = 0; k < 3; k++) {
 8003474:	2300      	movs	r3, #0
 8003476:	627b      	str	r3, [r7, #36]	@ 0x24
 8003478:	e03a      	b.n	80034f0 <fUpdateCalibration10EIG+0x8fc>
				MagCal->trinvW[i][j] += MagCal->matB[i][k] * MagCal->matB[j][k];
 800347a:	6879      	ldr	r1, [r7, #4]
 800347c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800347e:	4613      	mov	r3, r2
 8003480:	005b      	lsls	r3, r3, #1
 8003482:	4413      	add	r3, r2
 8003484:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003486:	4413      	add	r3, r2
 8003488:	3312      	adds	r3, #18
 800348a:	009b      	lsls	r3, r3, #2
 800348c:	440b      	add	r3, r1
 800348e:	3304      	adds	r3, #4
 8003490:	ed93 7a00 	vldr	s14, [r3]
 8003494:	6879      	ldr	r1, [r7, #4]
 8003496:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003498:	4613      	mov	r3, r2
 800349a:	009b      	lsls	r3, r3, #2
 800349c:	4413      	add	r3, r2
 800349e:	005b      	lsls	r3, r3, #1
 80034a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80034a2:	4413      	add	r3, r2
 80034a4:	3394      	adds	r3, #148	@ 0x94
 80034a6:	009b      	lsls	r3, r3, #2
 80034a8:	440b      	add	r3, r1
 80034aa:	edd3 6a00 	vldr	s13, [r3]
 80034ae:	6879      	ldr	r1, [r7, #4]
 80034b0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80034b2:	4613      	mov	r3, r2
 80034b4:	009b      	lsls	r3, r3, #2
 80034b6:	4413      	add	r3, r2
 80034b8:	005b      	lsls	r3, r3, #1
 80034ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80034bc:	4413      	add	r3, r2
 80034be:	3394      	adds	r3, #148	@ 0x94
 80034c0:	009b      	lsls	r3, r3, #2
 80034c2:	440b      	add	r3, r1
 80034c4:	edd3 7a00 	vldr	s15, [r3]
 80034c8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80034cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034d0:	6879      	ldr	r1, [r7, #4]
 80034d2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80034d4:	4613      	mov	r3, r2
 80034d6:	005b      	lsls	r3, r3, #1
 80034d8:	4413      	add	r3, r2
 80034da:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80034dc:	4413      	add	r3, r2
 80034de:	3312      	adds	r3, #18
 80034e0:	009b      	lsls	r3, r3, #2
 80034e2:	440b      	add	r3, r1
 80034e4:	3304      	adds	r3, #4
 80034e6:	edc3 7a00 	vstr	s15, [r3]
			for (k = 0; k < 3; k++) {
 80034ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034ec:	3301      	adds	r3, #1
 80034ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80034f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034f2:	2b02      	cmp	r3, #2
 80034f4:	ddc1      	ble.n	800347a <fUpdateCalibration10EIG+0x886>
			}
			// copy to below diagonal element
			MagCal->trinvW[j][i] = MagCal->trinvW[i][j];
 80034f6:	6879      	ldr	r1, [r7, #4]
 80034f8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80034fa:	4613      	mov	r3, r2
 80034fc:	005b      	lsls	r3, r3, #1
 80034fe:	4413      	add	r3, r2
 8003500:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003502:	4413      	add	r3, r2
 8003504:	3312      	adds	r3, #18
 8003506:	009b      	lsls	r3, r3, #2
 8003508:	440b      	add	r3, r1
 800350a:	3304      	adds	r3, #4
 800350c:	6819      	ldr	r1, [r3, #0]
 800350e:	6878      	ldr	r0, [r7, #4]
 8003510:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003512:	4613      	mov	r3, r2
 8003514:	005b      	lsls	r3, r3, #1
 8003516:	4413      	add	r3, r2
 8003518:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800351a:	4413      	add	r3, r2
 800351c:	3312      	adds	r3, #18
 800351e:	009b      	lsls	r3, r3, #2
 8003520:	4403      	add	r3, r0
 8003522:	3304      	adds	r3, #4
 8003524:	6019      	str	r1, [r3, #0]
		for (j = i; j < 3; j++) {
 8003526:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003528:	3301      	adds	r3, #1
 800352a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800352c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800352e:	2b02      	cmp	r3, #2
 8003530:	dd92      	ble.n	8003458 <fUpdateCalibration10EIG+0x864>
	for (i = 0; i < 3; i++) {
 8003532:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003534:	3301      	adds	r3, #1
 8003536:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003538:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800353a:	2b02      	cmp	r3, #2
 800353c:	dd89      	ble.n	8003452 <fUpdateCalibration10EIG+0x85e>
		}
	}
}
 800353e:	bf00      	nop
 8003540:	bf00      	nop
 8003542:	373c      	adds	r7, #60	@ 0x3c
 8003544:	46bd      	mov	sp, r7
 8003546:	bd90      	pop	{r4, r7, pc}
 8003548:	42480000 	.word	0x42480000
 800354c:	3dcccccd 	.word	0x3dcccccd
 8003550:	beaaaaab 	.word	0xbeaaaaab
 8003554:	be2aaaab 	.word	0xbe2aaaab

08003558 <LL_RCC_LSE_SetDriveCapability>:
{
 8003558:	b480      	push	{r7}
 800355a:	b083      	sub	sp, #12
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8003560:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003564:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003568:	f023 0218 	bic.w	r2, r3, #24
 800356c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	4313      	orrs	r3, r2
 8003574:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8003578:	bf00      	nop
 800357a:	370c      	adds	r7, #12
 800357c:	46bd      	mov	sp, r7
 800357e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003582:	4770      	bx	lr

08003584 <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_TSC
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8003584:	b480      	push	{r7}
 8003586:	b085      	sub	sp, #20
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 800358c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003590:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003592:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	4313      	orrs	r3, r2
 800359a:	648b      	str	r3, [r1, #72]	@ 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800359c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80035a0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	4013      	ands	r3, r2
 80035a6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80035a8:	68fb      	ldr	r3, [r7, #12]
}
 80035aa:	bf00      	nop
 80035ac:	3714      	adds	r7, #20
 80035ae:	46bd      	mov	sp, r7
 80035b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b4:	4770      	bx	lr

080035b6 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80035b6:	b480      	push	{r7}
 80035b8:	b085      	sub	sp, #20
 80035ba:	af00      	add	r7, sp, #0
 80035bc:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80035be:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80035c2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80035c4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	4313      	orrs	r3, r2
 80035cc:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80035ce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80035d2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	4013      	ands	r3, r2
 80035d8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80035da:	68fb      	ldr	r3, [r7, #12]
}
 80035dc:	bf00      	nop
 80035de:	3714      	adds	r7, #20
 80035e0:	46bd      	mov	sp, r7
 80035e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e6:	4770      	bx	lr

080035e8 <LSM9DS1_WriteRegister>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void LSM9DS1_WriteRegister(uint8_t addr, uint8_t reg, uint8_t value) {
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b086      	sub	sp, #24
 80035ec:	af04      	add	r7, sp, #16
 80035ee:	4603      	mov	r3, r0
 80035f0:	71fb      	strb	r3, [r7, #7]
 80035f2:	460b      	mov	r3, r1
 80035f4:	71bb      	strb	r3, [r7, #6]
 80035f6:	4613      	mov	r3, r2
 80035f8:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Write(&hi2c1, addr, reg, I2C_MEMADD_SIZE_8BIT, &value, 1,
 80035fa:	79fb      	ldrb	r3, [r7, #7]
 80035fc:	b299      	uxth	r1, r3
 80035fe:	79bb      	ldrb	r3, [r7, #6]
 8003600:	b29a      	uxth	r2, r3
 8003602:	f04f 33ff 	mov.w	r3, #4294967295
 8003606:	9302      	str	r3, [sp, #8]
 8003608:	2301      	movs	r3, #1
 800360a:	9301      	str	r3, [sp, #4]
 800360c:	1d7b      	adds	r3, r7, #5
 800360e:	9300      	str	r3, [sp, #0]
 8003610:	2301      	movs	r3, #1
 8003612:	4803      	ldr	r0, [pc, #12]	@ (8003620 <LSM9DS1_WriteRegister+0x38>)
 8003614:	f005 f88e 	bl	8008734 <HAL_I2C_Mem_Write>
	HAL_MAX_DELAY);
}
 8003618:	bf00      	nop
 800361a:	3708      	adds	r7, #8
 800361c:	46bd      	mov	sp, r7
 800361e:	bd80      	pop	{r7, pc}
 8003620:	200001f8 	.word	0x200001f8

08003624 <LSM9DS1_Init>:
	HAL_I2C_Mem_Read(&hi2c1, addr, reg, I2C_MEMADD_SIZE_8BIT, &value, 1,
	HAL_MAX_DELAY);
	return value;
}

void LSM9DS1_Init() {
 8003624:	b580      	push	{r7, lr}
 8003626:	af00      	add	r7, sp, #0
	//sensor reset
	LSM9DS1_WriteRegister(LSM9DS1_ADDR, CTRL_REG8, 0x05);
 8003628:	2205      	movs	r2, #5
 800362a:	2122      	movs	r1, #34	@ 0x22
 800362c:	20d4      	movs	r0, #212	@ 0xd4
 800362e:	f7ff ffdb 	bl	80035e8 <LSM9DS1_WriteRegister>
	HAL_Delay(10);
 8003632:	200a      	movs	r0, #10
 8003634:	f7fd fcc7 	bl	8000fc6 <HAL_Delay>

	//low-power setting
//	gyro setting
	LSM9DS1_WriteRegister(LSM9DS1_ADDR, CTRL_REG1_G, 0x40); //gyro ODR 59.5 Hz(low-power mode), full scale 245dps(basic)
 8003638:	2240      	movs	r2, #64	@ 0x40
 800363a:	2110      	movs	r1, #16
 800363c:	20d4      	movs	r0, #212	@ 0xd4
 800363e:	f7ff ffd3 	bl	80035e8 <LSM9DS1_WriteRegister>
	LSM9DS1_WriteRegister(LSM9DS1_ADDR, CTRL_REG3_G, 0x80); //gyro low-power mode activate
 8003642:	2280      	movs	r2, #128	@ 0x80
 8003644:	2112      	movs	r1, #18
 8003646:	20d4      	movs	r0, #212	@ 0xd4
 8003648:	f7ff ffce 	bl	80035e8 <LSM9DS1_WriteRegister>
	HAL_Delay(10);
 800364c:	200a      	movs	r0, #10
 800364e:	f7fd fcba 	bl	8000fc6 <HAL_Delay>

	//accel setting
	LSM9DS1_WriteRegister(LSM9DS1_ADDR, CTRL_REG6_XL, 0x20); //accel ODR 10Hz, full scale 2g(basic)
 8003652:	2220      	movs	r2, #32
 8003654:	2120      	movs	r1, #32
 8003656:	20d4      	movs	r0, #212	@ 0xd4
 8003658:	f7ff ffc6 	bl	80035e8 <LSM9DS1_WriteRegister>
	LSM9DS1_WriteRegister(LSM9DS1_ADDR, CTRL_REG7_XL, 0x00); //accel low-power mode activate
 800365c:	2200      	movs	r2, #0
 800365e:	2121      	movs	r1, #33	@ 0x21
 8003660:	20d4      	movs	r0, #212	@ 0xd4
 8003662:	f7ff ffc1 	bl	80035e8 <LSM9DS1_WriteRegister>
	HAL_Delay(10);
 8003666:	200a      	movs	r0, #10
 8003668:	f7fd fcad 	bl	8000fc6 <HAL_Delay>

	//mag setting
	LSM9DS1_WriteRegister(MAG_ADDR, CTRL_REG1_M, 0x10); // mag ODR 10Hz, temp-comp activate
 800366c:	2210      	movs	r2, #16
 800366e:	2120      	movs	r1, #32
 8003670:	203c      	movs	r0, #60	@ 0x3c
 8003672:	f7ff ffb9 	bl	80035e8 <LSM9DS1_WriteRegister>
	LSM9DS1_WriteRegister(MAG_ADDR, CTRL_REG3_M, 0x00); // mag Continuous-conversion mode activate
 8003676:	2200      	movs	r2, #0
 8003678:	2122      	movs	r1, #34	@ 0x22
 800367a:	203c      	movs	r0, #60	@ 0x3c
 800367c:	f7ff ffb4 	bl	80035e8 <LSM9DS1_WriteRegister>
	HAL_Delay(10);
 8003680:	200a      	movs	r0, #10
 8003682:	f7fd fca0 	bl	8000fc6 <HAL_Delay>
//
//	//mag setting
//	LSM9DS1_WriteRegister(MAG_ADDR, CTRL_REG1_M, 0x70); // mag ODR 80Hz, temp-comp activate
//	LSM9DS1_WriteRegister(MAG_ADDR, CTRL_REG3_M, 0x00); // mag Continuous-conversion mode activate
//	HAL_Delay(10);
}
 8003686:	bf00      	nop
 8003688:	bd80      	pop	{r7, pc}
	...

0800368c <micros>:

uint32_t micros(void) {
 800368c:	b480      	push	{r7}
 800368e:	af00      	add	r7, sp, #0
	return micro_time = __HAL_TIM_GET_COUNTER(&htim2);
 8003690:	4b05      	ldr	r3, [pc, #20]	@ (80036a8 <micros+0x1c>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003696:	4a05      	ldr	r2, [pc, #20]	@ (80036ac <micros+0x20>)
 8003698:	6013      	str	r3, [r2, #0]
 800369a:	4b04      	ldr	r3, [pc, #16]	@ (80036ac <micros+0x20>)
 800369c:	681b      	ldr	r3, [r3, #0]
}
 800369e:	4618      	mov	r0, r3
 80036a0:	46bd      	mov	sp, r7
 80036a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a6:	4770      	bx	lr
 80036a8:	2000030c 	.word	0x2000030c
 80036ac:	20000494 	.word	0x20000494

080036b0 <invSqrt>:

float invSqrt(float x) {
 80036b0:	b480      	push	{r7}
 80036b2:	b087      	sub	sp, #28
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	ed87 0a01 	vstr	s0, [r7, #4]
	float halfx = 0.5f * x;
 80036ba:	edd7 7a01 	vldr	s15, [r7, #4]
 80036be:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80036c2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80036c6:	edc7 7a05 	vstr	s15, [r7, #20]
	float y = x;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	613b      	str	r3, [r7, #16]
	long i = *(long*) &y;
 80036ce:	f107 0310 	add.w	r3, r7, #16
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	60fb      	str	r3, [r7, #12]
	i = 0x5f3759df - (i >> 1);
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	105a      	asrs	r2, r3, #1
 80036da:	4b12      	ldr	r3, [pc, #72]	@ (8003724 <invSqrt+0x74>)
 80036dc:	1a9b      	subs	r3, r3, r2
 80036de:	60fb      	str	r3, [r7, #12]
	y = *(float*) &i;
 80036e0:	f107 030c 	add.w	r3, r7, #12
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	613b      	str	r3, [r7, #16]
	y = y * (1.5f - (halfx * y * y));
 80036e8:	ed97 7a04 	vldr	s14, [r7, #16]
 80036ec:	edd7 7a05 	vldr	s15, [r7, #20]
 80036f0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80036f4:	edd7 7a04 	vldr	s15, [r7, #16]
 80036f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036fc:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 8003700:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003704:	edd7 7a04 	vldr	s15, [r7, #16]
 8003708:	ee67 7a27 	vmul.f32	s15, s14, s15
 800370c:	edc7 7a04 	vstr	s15, [r7, #16]
	return y;
 8003710:	693b      	ldr	r3, [r7, #16]
 8003712:	ee07 3a90 	vmov	s15, r3
}
 8003716:	eeb0 0a67 	vmov.f32	s0, s15
 800371a:	371c      	adds	r7, #28
 800371c:	46bd      	mov	sp, r7
 800371e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003722:	4770      	bx	lr
 8003724:	5f3759df 	.word	0x5f3759df

08003728 <vector_dot>:

float vector_dot(float a[3], float b[3]) {
 8003728:	b480      	push	{r7}
 800372a:	b083      	sub	sp, #12
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
 8003730:	6039      	str	r1, [r7, #0]
	return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	ed93 7a00 	vldr	s14, [r3]
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	edd3 7a00 	vldr	s15, [r3]
 800373e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	3304      	adds	r3, #4
 8003746:	edd3 6a00 	vldr	s13, [r3]
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	3304      	adds	r3, #4
 800374e:	edd3 7a00 	vldr	s15, [r3]
 8003752:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003756:	ee37 7a27 	vadd.f32	s14, s14, s15
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	3308      	adds	r3, #8
 800375e:	edd3 6a00 	vldr	s13, [r3]
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	3308      	adds	r3, #8
 8003766:	edd3 7a00 	vldr	s15, [r3]
 800376a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800376e:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8003772:	eeb0 0a67 	vmov.f32	s0, s15
 8003776:	370c      	adds	r7, #12
 8003778:	46bd      	mov	sp, r7
 800377a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377e:	4770      	bx	lr

08003780 <vector_normalize>:

void vector_normalize(float a[3]) {
 8003780:	b580      	push	{r7, lr}
 8003782:	b084      	sub	sp, #16
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
	float mag = sqrt(vector_dot(a, a));
 8003788:	6879      	ldr	r1, [r7, #4]
 800378a:	6878      	ldr	r0, [r7, #4]
 800378c:	f7ff ffcc 	bl	8003728 <vector_dot>
 8003790:	ee10 3a10 	vmov	r3, s0
 8003794:	4618      	mov	r0, r3
 8003796:	f7fc feaf 	bl	80004f8 <__aeabi_f2d>
 800379a:	4602      	mov	r2, r0
 800379c:	460b      	mov	r3, r1
 800379e:	ec43 2b10 	vmov	d0, r2, r3
 80037a2:	f00d fe4f 	bl	8011444 <sqrt>
 80037a6:	ec53 2b10 	vmov	r2, r3, d0
 80037aa:	4610      	mov	r0, r2
 80037ac:	4619      	mov	r1, r3
 80037ae:	f7fd f9ab 	bl	8000b08 <__aeabi_d2f>
 80037b2:	4603      	mov	r3, r0
 80037b4:	60fb      	str	r3, [r7, #12]
	a[0] /= mag;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	edd3 6a00 	vldr	s13, [r3]
 80037bc:	ed97 7a03 	vldr	s14, [r7, #12]
 80037c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	edc3 7a00 	vstr	s15, [r3]
	a[1] /= mag;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	3304      	adds	r3, #4
 80037ce:	edd3 6a00 	vldr	s13, [r3]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	3304      	adds	r3, #4
 80037d6:	ed97 7a03 	vldr	s14, [r7, #12]
 80037da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80037de:	edc3 7a00 	vstr	s15, [r3]
	a[2] /= mag;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	3308      	adds	r3, #8
 80037e6:	edd3 6a00 	vldr	s13, [r3]
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	3308      	adds	r3, #8
 80037ee:	ed97 7a03 	vldr	s14, [r7, #12]
 80037f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80037f6:	edc3 7a00 	vstr	s15, [r3]
}
 80037fa:	bf00      	nop
 80037fc:	3710      	adds	r7, #16
 80037fe:	46bd      	mov	sp, r7
 8003800:	bd80      	pop	{r7, pc}
	...

08003804 <MadgwickAHRSupdate>:

void MadgwickAHRSupdate(float gx, float gy, float gz, float ax, float ay,
		float az, float mx, float my, float mz) {
 8003804:	b580      	push	{r7, lr}
 8003806:	b08a      	sub	sp, #40	@ 0x28
 8003808:	af00      	add	r7, sp, #0
 800380a:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24
 800380e:	edc7 0a08 	vstr	s1, [r7, #32]
 8003812:	ed87 1a07 	vstr	s2, [r7, #28]
 8003816:	edc7 1a06 	vstr	s3, [r7, #24]
 800381a:	ed87 2a05 	vstr	s4, [r7, #20]
 800381e:	edc7 2a04 	vstr	s5, [r7, #16]
 8003822:	ed87 3a03 	vstr	s6, [r7, #12]
 8003826:	edc7 3a02 	vstr	s7, [r7, #8]
 800382a:	ed87 4a01 	vstr	s8, [r7, #4]

	qDot1 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz);
 800382e:	4bda      	ldr	r3, [pc, #872]	@ (8003b98 <MadgwickAHRSupdate+0x394>)
 8003830:	edd3 7a00 	vldr	s15, [r3]
 8003834:	eeb1 7a67 	vneg.f32	s14, s15
 8003838:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800383c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003840:	4bd6      	ldr	r3, [pc, #856]	@ (8003b9c <MadgwickAHRSupdate+0x398>)
 8003842:	edd3 6a00 	vldr	s13, [r3]
 8003846:	edd7 7a08 	vldr	s15, [r7, #32]
 800384a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800384e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003852:	4bd3      	ldr	r3, [pc, #844]	@ (8003ba0 <MadgwickAHRSupdate+0x39c>)
 8003854:	edd3 6a00 	vldr	s13, [r3]
 8003858:	edd7 7a07 	vldr	s15, [r7, #28]
 800385c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003860:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003864:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8003868:	ee67 7a87 	vmul.f32	s15, s15, s14
 800386c:	4bcd      	ldr	r3, [pc, #820]	@ (8003ba4 <MadgwickAHRSupdate+0x3a0>)
 800386e:	edc3 7a00 	vstr	s15, [r3]
	qDot2 = 0.5f * (q0 * gx + q2 * gz - q3 * gy);
 8003872:	4bcd      	ldr	r3, [pc, #820]	@ (8003ba8 <MadgwickAHRSupdate+0x3a4>)
 8003874:	ed93 7a00 	vldr	s14, [r3]
 8003878:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800387c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003880:	4bc6      	ldr	r3, [pc, #792]	@ (8003b9c <MadgwickAHRSupdate+0x398>)
 8003882:	edd3 6a00 	vldr	s13, [r3]
 8003886:	edd7 7a07 	vldr	s15, [r7, #28]
 800388a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800388e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003892:	4bc3      	ldr	r3, [pc, #780]	@ (8003ba0 <MadgwickAHRSupdate+0x39c>)
 8003894:	edd3 6a00 	vldr	s13, [r3]
 8003898:	edd7 7a08 	vldr	s15, [r7, #32]
 800389c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80038a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80038a4:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80038a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80038ac:	4bbf      	ldr	r3, [pc, #764]	@ (8003bac <MadgwickAHRSupdate+0x3a8>)
 80038ae:	edc3 7a00 	vstr	s15, [r3]
	qDot3 = 0.5f * (q0 * gy - q1 * gz + q3 * gx);
 80038b2:	4bbd      	ldr	r3, [pc, #756]	@ (8003ba8 <MadgwickAHRSupdate+0x3a4>)
 80038b4:	ed93 7a00 	vldr	s14, [r3]
 80038b8:	edd7 7a08 	vldr	s15, [r7, #32]
 80038bc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80038c0:	4bb5      	ldr	r3, [pc, #724]	@ (8003b98 <MadgwickAHRSupdate+0x394>)
 80038c2:	edd3 6a00 	vldr	s13, [r3]
 80038c6:	edd7 7a07 	vldr	s15, [r7, #28]
 80038ca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80038ce:	ee37 7a67 	vsub.f32	s14, s14, s15
 80038d2:	4bb3      	ldr	r3, [pc, #716]	@ (8003ba0 <MadgwickAHRSupdate+0x39c>)
 80038d4:	edd3 6a00 	vldr	s13, [r3]
 80038d8:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80038dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80038e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80038e4:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80038e8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80038ec:	4bb0      	ldr	r3, [pc, #704]	@ (8003bb0 <MadgwickAHRSupdate+0x3ac>)
 80038ee:	edc3 7a00 	vstr	s15, [r3]
	qDot4 = 0.5f * (q0 * gz + q1 * gy - q2 * gx);
 80038f2:	4bad      	ldr	r3, [pc, #692]	@ (8003ba8 <MadgwickAHRSupdate+0x3a4>)
 80038f4:	ed93 7a00 	vldr	s14, [r3]
 80038f8:	edd7 7a07 	vldr	s15, [r7, #28]
 80038fc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003900:	4ba5      	ldr	r3, [pc, #660]	@ (8003b98 <MadgwickAHRSupdate+0x394>)
 8003902:	edd3 6a00 	vldr	s13, [r3]
 8003906:	edd7 7a08 	vldr	s15, [r7, #32]
 800390a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800390e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003912:	4ba2      	ldr	r3, [pc, #648]	@ (8003b9c <MadgwickAHRSupdate+0x398>)
 8003914:	edd3 6a00 	vldr	s13, [r3]
 8003918:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800391c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003920:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003924:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8003928:	ee67 7a87 	vmul.f32	s15, s15, s14
 800392c:	4ba1      	ldr	r3, [pc, #644]	@ (8003bb4 <MadgwickAHRSupdate+0x3b0>)
 800392e:	edc3 7a00 	vstr	s15, [r3]

	if (!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f))) {
 8003932:	edd7 7a06 	vldr	s15, [r7, #24]
 8003936:	eef5 7a40 	vcmp.f32	s15, #0.0
 800393a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800393e:	d10e      	bne.n	800395e <MadgwickAHRSupdate+0x15a>
 8003940:	edd7 7a05 	vldr	s15, [r7, #20]
 8003944:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003948:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800394c:	d107      	bne.n	800395e <MadgwickAHRSupdate+0x15a>
 800394e:	edd7 7a04 	vldr	s15, [r7, #16]
 8003952:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003956:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800395a:	f000 874b 	beq.w	80047f4 <MadgwickAHRSupdate+0xff0>

		recipNorm = invSqrt(ax * ax + ay * ay + az * az);
 800395e:	edd7 7a06 	vldr	s15, [r7, #24]
 8003962:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8003966:	edd7 7a05 	vldr	s15, [r7, #20]
 800396a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800396e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003972:	edd7 7a04 	vldr	s15, [r7, #16]
 8003976:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800397a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800397e:	eeb0 0a67 	vmov.f32	s0, s15
 8003982:	f7ff fe95 	bl	80036b0 <invSqrt>
 8003986:	eef0 7a40 	vmov.f32	s15, s0
 800398a:	4b8b      	ldr	r3, [pc, #556]	@ (8003bb8 <MadgwickAHRSupdate+0x3b4>)
 800398c:	edc3 7a00 	vstr	s15, [r3]
		ax *= recipNorm;
 8003990:	4b89      	ldr	r3, [pc, #548]	@ (8003bb8 <MadgwickAHRSupdate+0x3b4>)
 8003992:	edd3 7a00 	vldr	s15, [r3]
 8003996:	ed97 7a06 	vldr	s14, [r7, #24]
 800399a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800399e:	edc7 7a06 	vstr	s15, [r7, #24]
		ay *= recipNorm;
 80039a2:	4b85      	ldr	r3, [pc, #532]	@ (8003bb8 <MadgwickAHRSupdate+0x3b4>)
 80039a4:	edd3 7a00 	vldr	s15, [r3]
 80039a8:	ed97 7a05 	vldr	s14, [r7, #20]
 80039ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039b0:	edc7 7a05 	vstr	s15, [r7, #20]
		az *= recipNorm;
 80039b4:	4b80      	ldr	r3, [pc, #512]	@ (8003bb8 <MadgwickAHRSupdate+0x3b4>)
 80039b6:	edd3 7a00 	vldr	s15, [r3]
 80039ba:	ed97 7a04 	vldr	s14, [r7, #16]
 80039be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039c2:	edc7 7a04 	vstr	s15, [r7, #16]

		recipNorm = invSqrt(mx * mx + my * my + mz * mz);
 80039c6:	edd7 7a03 	vldr	s15, [r7, #12]
 80039ca:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80039ce:	edd7 7a02 	vldr	s15, [r7, #8]
 80039d2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80039d6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80039da:	edd7 7a01 	vldr	s15, [r7, #4]
 80039de:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80039e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80039e6:	eeb0 0a67 	vmov.f32	s0, s15
 80039ea:	f7ff fe61 	bl	80036b0 <invSqrt>
 80039ee:	eef0 7a40 	vmov.f32	s15, s0
 80039f2:	4b71      	ldr	r3, [pc, #452]	@ (8003bb8 <MadgwickAHRSupdate+0x3b4>)
 80039f4:	edc3 7a00 	vstr	s15, [r3]
		mx *= recipNorm;
 80039f8:	4b6f      	ldr	r3, [pc, #444]	@ (8003bb8 <MadgwickAHRSupdate+0x3b4>)
 80039fa:	edd3 7a00 	vldr	s15, [r3]
 80039fe:	ed97 7a03 	vldr	s14, [r7, #12]
 8003a02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a06:	edc7 7a03 	vstr	s15, [r7, #12]
		my *= recipNorm;
 8003a0a:	4b6b      	ldr	r3, [pc, #428]	@ (8003bb8 <MadgwickAHRSupdate+0x3b4>)
 8003a0c:	edd3 7a00 	vldr	s15, [r3]
 8003a10:	ed97 7a02 	vldr	s14, [r7, #8]
 8003a14:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a18:	edc7 7a02 	vstr	s15, [r7, #8]
		mz *= recipNorm;
 8003a1c:	4b66      	ldr	r3, [pc, #408]	@ (8003bb8 <MadgwickAHRSupdate+0x3b4>)
 8003a1e:	edd3 7a00 	vldr	s15, [r3]
 8003a22:	ed97 7a01 	vldr	s14, [r7, #4]
 8003a26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a2a:	edc7 7a01 	vstr	s15, [r7, #4]

		_2q0mx = 2.0f * q0 * mx;
 8003a2e:	4b5e      	ldr	r3, [pc, #376]	@ (8003ba8 <MadgwickAHRSupdate+0x3a4>)
 8003a30:	edd3 7a00 	vldr	s15, [r3]
 8003a34:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8003a38:	edd7 7a03 	vldr	s15, [r7, #12]
 8003a3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a40:	4b5e      	ldr	r3, [pc, #376]	@ (8003bbc <MadgwickAHRSupdate+0x3b8>)
 8003a42:	edc3 7a00 	vstr	s15, [r3]
		_2q0my = 2.0f * q0 * my;
 8003a46:	4b58      	ldr	r3, [pc, #352]	@ (8003ba8 <MadgwickAHRSupdate+0x3a4>)
 8003a48:	edd3 7a00 	vldr	s15, [r3]
 8003a4c:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8003a50:	edd7 7a02 	vldr	s15, [r7, #8]
 8003a54:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a58:	4b59      	ldr	r3, [pc, #356]	@ (8003bc0 <MadgwickAHRSupdate+0x3bc>)
 8003a5a:	edc3 7a00 	vstr	s15, [r3]
		_2q0mz = 2.0f * q0 * mz;
 8003a5e:	4b52      	ldr	r3, [pc, #328]	@ (8003ba8 <MadgwickAHRSupdate+0x3a4>)
 8003a60:	edd3 7a00 	vldr	s15, [r3]
 8003a64:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8003a68:	edd7 7a01 	vldr	s15, [r7, #4]
 8003a6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a70:	4b54      	ldr	r3, [pc, #336]	@ (8003bc4 <MadgwickAHRSupdate+0x3c0>)
 8003a72:	edc3 7a00 	vstr	s15, [r3]
		_2q1mx = 2.0f * q1 * mx;
 8003a76:	4b48      	ldr	r3, [pc, #288]	@ (8003b98 <MadgwickAHRSupdate+0x394>)
 8003a78:	edd3 7a00 	vldr	s15, [r3]
 8003a7c:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8003a80:	edd7 7a03 	vldr	s15, [r7, #12]
 8003a84:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a88:	4b4f      	ldr	r3, [pc, #316]	@ (8003bc8 <MadgwickAHRSupdate+0x3c4>)
 8003a8a:	edc3 7a00 	vstr	s15, [r3]
		_2q0 = 2.0f * q0;
 8003a8e:	4b46      	ldr	r3, [pc, #280]	@ (8003ba8 <MadgwickAHRSupdate+0x3a4>)
 8003a90:	edd3 7a00 	vldr	s15, [r3]
 8003a94:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003a98:	4b4c      	ldr	r3, [pc, #304]	@ (8003bcc <MadgwickAHRSupdate+0x3c8>)
 8003a9a:	edc3 7a00 	vstr	s15, [r3]
		_2q1 = 2.0f * q1;
 8003a9e:	4b3e      	ldr	r3, [pc, #248]	@ (8003b98 <MadgwickAHRSupdate+0x394>)
 8003aa0:	edd3 7a00 	vldr	s15, [r3]
 8003aa4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003aa8:	4b49      	ldr	r3, [pc, #292]	@ (8003bd0 <MadgwickAHRSupdate+0x3cc>)
 8003aaa:	edc3 7a00 	vstr	s15, [r3]
		_2q2 = 2.0f * q2;
 8003aae:	4b3b      	ldr	r3, [pc, #236]	@ (8003b9c <MadgwickAHRSupdate+0x398>)
 8003ab0:	edd3 7a00 	vldr	s15, [r3]
 8003ab4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003ab8:	4b46      	ldr	r3, [pc, #280]	@ (8003bd4 <MadgwickAHRSupdate+0x3d0>)
 8003aba:	edc3 7a00 	vstr	s15, [r3]
		_2q3 = 2.0f * q3;
 8003abe:	4b38      	ldr	r3, [pc, #224]	@ (8003ba0 <MadgwickAHRSupdate+0x39c>)
 8003ac0:	edd3 7a00 	vldr	s15, [r3]
 8003ac4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003ac8:	4b43      	ldr	r3, [pc, #268]	@ (8003bd8 <MadgwickAHRSupdate+0x3d4>)
 8003aca:	edc3 7a00 	vstr	s15, [r3]
		_2q0q2 = 2.0f * q0 * q2;
 8003ace:	4b36      	ldr	r3, [pc, #216]	@ (8003ba8 <MadgwickAHRSupdate+0x3a4>)
 8003ad0:	edd3 7a00 	vldr	s15, [r3]
 8003ad4:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8003ad8:	4b30      	ldr	r3, [pc, #192]	@ (8003b9c <MadgwickAHRSupdate+0x398>)
 8003ada:	edd3 7a00 	vldr	s15, [r3]
 8003ade:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ae2:	4b3e      	ldr	r3, [pc, #248]	@ (8003bdc <MadgwickAHRSupdate+0x3d8>)
 8003ae4:	edc3 7a00 	vstr	s15, [r3]
		_2q2q3 = 2.0f * q2 * q3;
 8003ae8:	4b2c      	ldr	r3, [pc, #176]	@ (8003b9c <MadgwickAHRSupdate+0x398>)
 8003aea:	edd3 7a00 	vldr	s15, [r3]
 8003aee:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8003af2:	4b2b      	ldr	r3, [pc, #172]	@ (8003ba0 <MadgwickAHRSupdate+0x39c>)
 8003af4:	edd3 7a00 	vldr	s15, [r3]
 8003af8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003afc:	4b38      	ldr	r3, [pc, #224]	@ (8003be0 <MadgwickAHRSupdate+0x3dc>)
 8003afe:	edc3 7a00 	vstr	s15, [r3]
		q0q0 = q0 * q0;
 8003b02:	4b29      	ldr	r3, [pc, #164]	@ (8003ba8 <MadgwickAHRSupdate+0x3a4>)
 8003b04:	ed93 7a00 	vldr	s14, [r3]
 8003b08:	4b27      	ldr	r3, [pc, #156]	@ (8003ba8 <MadgwickAHRSupdate+0x3a4>)
 8003b0a:	edd3 7a00 	vldr	s15, [r3]
 8003b0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b12:	4b34      	ldr	r3, [pc, #208]	@ (8003be4 <MadgwickAHRSupdate+0x3e0>)
 8003b14:	edc3 7a00 	vstr	s15, [r3]
		q0q1 = q0 * q1;
 8003b18:	4b23      	ldr	r3, [pc, #140]	@ (8003ba8 <MadgwickAHRSupdate+0x3a4>)
 8003b1a:	ed93 7a00 	vldr	s14, [r3]
 8003b1e:	4b1e      	ldr	r3, [pc, #120]	@ (8003b98 <MadgwickAHRSupdate+0x394>)
 8003b20:	edd3 7a00 	vldr	s15, [r3]
 8003b24:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b28:	4b2f      	ldr	r3, [pc, #188]	@ (8003be8 <MadgwickAHRSupdate+0x3e4>)
 8003b2a:	edc3 7a00 	vstr	s15, [r3]
		q0q2 = q0 * q2;
 8003b2e:	4b1e      	ldr	r3, [pc, #120]	@ (8003ba8 <MadgwickAHRSupdate+0x3a4>)
 8003b30:	ed93 7a00 	vldr	s14, [r3]
 8003b34:	4b19      	ldr	r3, [pc, #100]	@ (8003b9c <MadgwickAHRSupdate+0x398>)
 8003b36:	edd3 7a00 	vldr	s15, [r3]
 8003b3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b3e:	4b2b      	ldr	r3, [pc, #172]	@ (8003bec <MadgwickAHRSupdate+0x3e8>)
 8003b40:	edc3 7a00 	vstr	s15, [r3]
		q0q3 = q0 * q3;
 8003b44:	4b18      	ldr	r3, [pc, #96]	@ (8003ba8 <MadgwickAHRSupdate+0x3a4>)
 8003b46:	ed93 7a00 	vldr	s14, [r3]
 8003b4a:	4b15      	ldr	r3, [pc, #84]	@ (8003ba0 <MadgwickAHRSupdate+0x39c>)
 8003b4c:	edd3 7a00 	vldr	s15, [r3]
 8003b50:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b54:	4b26      	ldr	r3, [pc, #152]	@ (8003bf0 <MadgwickAHRSupdate+0x3ec>)
 8003b56:	edc3 7a00 	vstr	s15, [r3]
		q1q1 = q1 * q1;
 8003b5a:	4b0f      	ldr	r3, [pc, #60]	@ (8003b98 <MadgwickAHRSupdate+0x394>)
 8003b5c:	ed93 7a00 	vldr	s14, [r3]
 8003b60:	4b0d      	ldr	r3, [pc, #52]	@ (8003b98 <MadgwickAHRSupdate+0x394>)
 8003b62:	edd3 7a00 	vldr	s15, [r3]
 8003b66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b6a:	4b22      	ldr	r3, [pc, #136]	@ (8003bf4 <MadgwickAHRSupdate+0x3f0>)
 8003b6c:	edc3 7a00 	vstr	s15, [r3]
		q1q2 = q1 * q2;
 8003b70:	4b09      	ldr	r3, [pc, #36]	@ (8003b98 <MadgwickAHRSupdate+0x394>)
 8003b72:	ed93 7a00 	vldr	s14, [r3]
 8003b76:	4b09      	ldr	r3, [pc, #36]	@ (8003b9c <MadgwickAHRSupdate+0x398>)
 8003b78:	edd3 7a00 	vldr	s15, [r3]
 8003b7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b80:	4b1d      	ldr	r3, [pc, #116]	@ (8003bf8 <MadgwickAHRSupdate+0x3f4>)
 8003b82:	edc3 7a00 	vstr	s15, [r3]
		q1q3 = q1 * q3;
 8003b86:	4b04      	ldr	r3, [pc, #16]	@ (8003b98 <MadgwickAHRSupdate+0x394>)
 8003b88:	ed93 7a00 	vldr	s14, [r3]
 8003b8c:	4b04      	ldr	r3, [pc, #16]	@ (8003ba0 <MadgwickAHRSupdate+0x39c>)
 8003b8e:	edd3 7a00 	vldr	s15, [r3]
 8003b92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b96:	e031      	b.n	8003bfc <MadgwickAHRSupdate+0x3f8>
 8003b98:	20000480 	.word	0x20000480
 8003b9c:	20000484 	.word	0x20000484
 8003ba0:	20000488 	.word	0x20000488
 8003ba4:	200003e4 	.word	0x200003e4
 8003ba8:	20000008 	.word	0x20000008
 8003bac:	200003e8 	.word	0x200003e8
 8003bb0:	200003ec 	.word	0x200003ec
 8003bb4:	200003f0 	.word	0x200003f0
 8003bb8:	200003d0 	.word	0x200003d0
 8003bbc:	200003fc 	.word	0x200003fc
 8003bc0:	20000400 	.word	0x20000400
 8003bc4:	20000404 	.word	0x20000404
 8003bc8:	20000408 	.word	0x20000408
 8003bcc:	2000041c 	.word	0x2000041c
 8003bd0:	20000420 	.word	0x20000420
 8003bd4:	20000424 	.word	0x20000424
 8003bd8:	20000428 	.word	0x20000428
 8003bdc:	2000042c 	.word	0x2000042c
 8003be0:	20000430 	.word	0x20000430
 8003be4:	20000434 	.word	0x20000434
 8003be8:	20000438 	.word	0x20000438
 8003bec:	2000043c 	.word	0x2000043c
 8003bf0:	20000440 	.word	0x20000440
 8003bf4:	20000444 	.word	0x20000444
 8003bf8:	20000448 	.word	0x20000448
 8003bfc:	4bd8      	ldr	r3, [pc, #864]	@ (8003f60 <MadgwickAHRSupdate+0x75c>)
 8003bfe:	edc3 7a00 	vstr	s15, [r3]
		q2q2 = q2 * q2;
 8003c02:	4bd8      	ldr	r3, [pc, #864]	@ (8003f64 <MadgwickAHRSupdate+0x760>)
 8003c04:	ed93 7a00 	vldr	s14, [r3]
 8003c08:	4bd6      	ldr	r3, [pc, #856]	@ (8003f64 <MadgwickAHRSupdate+0x760>)
 8003c0a:	edd3 7a00 	vldr	s15, [r3]
 8003c0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c12:	4bd5      	ldr	r3, [pc, #852]	@ (8003f68 <MadgwickAHRSupdate+0x764>)
 8003c14:	edc3 7a00 	vstr	s15, [r3]
		q2q3 = q2 * q3;
 8003c18:	4bd2      	ldr	r3, [pc, #840]	@ (8003f64 <MadgwickAHRSupdate+0x760>)
 8003c1a:	ed93 7a00 	vldr	s14, [r3]
 8003c1e:	4bd3      	ldr	r3, [pc, #844]	@ (8003f6c <MadgwickAHRSupdate+0x768>)
 8003c20:	edd3 7a00 	vldr	s15, [r3]
 8003c24:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c28:	4bd1      	ldr	r3, [pc, #836]	@ (8003f70 <MadgwickAHRSupdate+0x76c>)
 8003c2a:	edc3 7a00 	vstr	s15, [r3]
		q3q3 = q3 * q3;
 8003c2e:	4bcf      	ldr	r3, [pc, #828]	@ (8003f6c <MadgwickAHRSupdate+0x768>)
 8003c30:	ed93 7a00 	vldr	s14, [r3]
 8003c34:	4bcd      	ldr	r3, [pc, #820]	@ (8003f6c <MadgwickAHRSupdate+0x768>)
 8003c36:	edd3 7a00 	vldr	s15, [r3]
 8003c3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c3e:	4bcd      	ldr	r3, [pc, #820]	@ (8003f74 <MadgwickAHRSupdate+0x770>)
 8003c40:	edc3 7a00 	vstr	s15, [r3]

		hx = mx * q0q0 - _2q0my * q3 + _2q0mz * q2 + mx * q1q1 + _2q1 * my * q2
 8003c44:	4bcc      	ldr	r3, [pc, #816]	@ (8003f78 <MadgwickAHRSupdate+0x774>)
 8003c46:	ed93 7a00 	vldr	s14, [r3]
 8003c4a:	edd7 7a03 	vldr	s15, [r7, #12]
 8003c4e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003c52:	4bca      	ldr	r3, [pc, #808]	@ (8003f7c <MadgwickAHRSupdate+0x778>)
 8003c54:	edd3 6a00 	vldr	s13, [r3]
 8003c58:	4bc4      	ldr	r3, [pc, #784]	@ (8003f6c <MadgwickAHRSupdate+0x768>)
 8003c5a:	edd3 7a00 	vldr	s15, [r3]
 8003c5e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003c62:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003c66:	4bc6      	ldr	r3, [pc, #792]	@ (8003f80 <MadgwickAHRSupdate+0x77c>)
 8003c68:	edd3 6a00 	vldr	s13, [r3]
 8003c6c:	4bbd      	ldr	r3, [pc, #756]	@ (8003f64 <MadgwickAHRSupdate+0x760>)
 8003c6e:	edd3 7a00 	vldr	s15, [r3]
 8003c72:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003c76:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003c7a:	4bc2      	ldr	r3, [pc, #776]	@ (8003f84 <MadgwickAHRSupdate+0x780>)
 8003c7c:	edd3 6a00 	vldr	s13, [r3]
 8003c80:	edd7 7a03 	vldr	s15, [r7, #12]
 8003c84:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003c88:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003c8c:	4bbe      	ldr	r3, [pc, #760]	@ (8003f88 <MadgwickAHRSupdate+0x784>)
 8003c8e:	edd3 6a00 	vldr	s13, [r3]
 8003c92:	edd7 7a02 	vldr	s15, [r7, #8]
 8003c96:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003c9a:	4bb2      	ldr	r3, [pc, #712]	@ (8003f64 <MadgwickAHRSupdate+0x760>)
 8003c9c:	edd3 7a00 	vldr	s15, [r3]
 8003ca0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003ca4:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ _2q1 * mz * q3 - mx * q2q2 - mx * q3q3;
 8003ca8:	4bb7      	ldr	r3, [pc, #732]	@ (8003f88 <MadgwickAHRSupdate+0x784>)
 8003caa:	edd3 6a00 	vldr	s13, [r3]
 8003cae:	edd7 7a01 	vldr	s15, [r7, #4]
 8003cb2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003cb6:	4bad      	ldr	r3, [pc, #692]	@ (8003f6c <MadgwickAHRSupdate+0x768>)
 8003cb8:	edd3 7a00 	vldr	s15, [r3]
 8003cbc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003cc0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003cc4:	4ba8      	ldr	r3, [pc, #672]	@ (8003f68 <MadgwickAHRSupdate+0x764>)
 8003cc6:	edd3 6a00 	vldr	s13, [r3]
 8003cca:	edd7 7a03 	vldr	s15, [r7, #12]
 8003cce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003cd2:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003cd6:	4ba7      	ldr	r3, [pc, #668]	@ (8003f74 <MadgwickAHRSupdate+0x770>)
 8003cd8:	edd3 6a00 	vldr	s13, [r3]
 8003cdc:	edd7 7a03 	vldr	s15, [r7, #12]
 8003ce0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003ce4:	ee77 7a67 	vsub.f32	s15, s14, s15
		hx = mx * q0q0 - _2q0my * q3 + _2q0mz * q2 + mx * q1q1 + _2q1 * my * q2
 8003ce8:	4ba8      	ldr	r3, [pc, #672]	@ (8003f8c <MadgwickAHRSupdate+0x788>)
 8003cea:	edc3 7a00 	vstr	s15, [r3]
		hy = _2q0mx * q3 + my * q0q0 - _2q0mz * q1 + _2q1mx * q2 - my * q1q1
 8003cee:	4ba8      	ldr	r3, [pc, #672]	@ (8003f90 <MadgwickAHRSupdate+0x78c>)
 8003cf0:	ed93 7a00 	vldr	s14, [r3]
 8003cf4:	4b9d      	ldr	r3, [pc, #628]	@ (8003f6c <MadgwickAHRSupdate+0x768>)
 8003cf6:	edd3 7a00 	vldr	s15, [r3]
 8003cfa:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003cfe:	4b9e      	ldr	r3, [pc, #632]	@ (8003f78 <MadgwickAHRSupdate+0x774>)
 8003d00:	edd3 6a00 	vldr	s13, [r3]
 8003d04:	edd7 7a02 	vldr	s15, [r7, #8]
 8003d08:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003d0c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003d10:	4b9b      	ldr	r3, [pc, #620]	@ (8003f80 <MadgwickAHRSupdate+0x77c>)
 8003d12:	edd3 6a00 	vldr	s13, [r3]
 8003d16:	4b9f      	ldr	r3, [pc, #636]	@ (8003f94 <MadgwickAHRSupdate+0x790>)
 8003d18:	edd3 7a00 	vldr	s15, [r3]
 8003d1c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003d20:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003d24:	4b9c      	ldr	r3, [pc, #624]	@ (8003f98 <MadgwickAHRSupdate+0x794>)
 8003d26:	edd3 6a00 	vldr	s13, [r3]
 8003d2a:	4b8e      	ldr	r3, [pc, #568]	@ (8003f64 <MadgwickAHRSupdate+0x760>)
 8003d2c:	edd3 7a00 	vldr	s15, [r3]
 8003d30:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003d34:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003d38:	4b92      	ldr	r3, [pc, #584]	@ (8003f84 <MadgwickAHRSupdate+0x780>)
 8003d3a:	edd3 6a00 	vldr	s13, [r3]
 8003d3e:	edd7 7a02 	vldr	s15, [r7, #8]
 8003d42:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003d46:	ee37 7a67 	vsub.f32	s14, s14, s15
				+ my * q2q2 + _2q2 * mz * q3 - my * q3q3;
 8003d4a:	4b87      	ldr	r3, [pc, #540]	@ (8003f68 <MadgwickAHRSupdate+0x764>)
 8003d4c:	edd3 6a00 	vldr	s13, [r3]
 8003d50:	edd7 7a02 	vldr	s15, [r7, #8]
 8003d54:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003d58:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003d5c:	4b8f      	ldr	r3, [pc, #572]	@ (8003f9c <MadgwickAHRSupdate+0x798>)
 8003d5e:	edd3 6a00 	vldr	s13, [r3]
 8003d62:	edd7 7a01 	vldr	s15, [r7, #4]
 8003d66:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003d6a:	4b80      	ldr	r3, [pc, #512]	@ (8003f6c <MadgwickAHRSupdate+0x768>)
 8003d6c:	edd3 7a00 	vldr	s15, [r3]
 8003d70:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003d74:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003d78:	4b7e      	ldr	r3, [pc, #504]	@ (8003f74 <MadgwickAHRSupdate+0x770>)
 8003d7a:	edd3 6a00 	vldr	s13, [r3]
 8003d7e:	edd7 7a02 	vldr	s15, [r7, #8]
 8003d82:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003d86:	ee77 7a67 	vsub.f32	s15, s14, s15
		hy = _2q0mx * q3 + my * q0q0 - _2q0mz * q1 + _2q1mx * q2 - my * q1q1
 8003d8a:	4b85      	ldr	r3, [pc, #532]	@ (8003fa0 <MadgwickAHRSupdate+0x79c>)
 8003d8c:	edc3 7a00 	vstr	s15, [r3]
		_2bx = sqrt(hx * hx + hy * hy);
 8003d90:	4b7e      	ldr	r3, [pc, #504]	@ (8003f8c <MadgwickAHRSupdate+0x788>)
 8003d92:	ed93 7a00 	vldr	s14, [r3]
 8003d96:	4b7d      	ldr	r3, [pc, #500]	@ (8003f8c <MadgwickAHRSupdate+0x788>)
 8003d98:	edd3 7a00 	vldr	s15, [r3]
 8003d9c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003da0:	4b7f      	ldr	r3, [pc, #508]	@ (8003fa0 <MadgwickAHRSupdate+0x79c>)
 8003da2:	edd3 6a00 	vldr	s13, [r3]
 8003da6:	4b7e      	ldr	r3, [pc, #504]	@ (8003fa0 <MadgwickAHRSupdate+0x79c>)
 8003da8:	edd3 7a00 	vldr	s15, [r3]
 8003dac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003db0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003db4:	ee17 0a90 	vmov	r0, s15
 8003db8:	f7fc fb9e 	bl	80004f8 <__aeabi_f2d>
 8003dbc:	4602      	mov	r2, r0
 8003dbe:	460b      	mov	r3, r1
 8003dc0:	ec43 2b10 	vmov	d0, r2, r3
 8003dc4:	f00d fb3e 	bl	8011444 <sqrt>
 8003dc8:	ec53 2b10 	vmov	r2, r3, d0
 8003dcc:	4610      	mov	r0, r2
 8003dce:	4619      	mov	r1, r3
 8003dd0:	f7fc fe9a 	bl	8000b08 <__aeabi_d2f>
 8003dd4:	4603      	mov	r3, r0
 8003dd6:	4a73      	ldr	r2, [pc, #460]	@ (8003fa4 <MadgwickAHRSupdate+0x7a0>)
 8003dd8:	6013      	str	r3, [r2, #0]
		_2bz = -_2q0mx * q2 + _2q0my * q1 + mz * q0q0 + _2q1mx * q3 - mz * q1q1
 8003dda:	4b6d      	ldr	r3, [pc, #436]	@ (8003f90 <MadgwickAHRSupdate+0x78c>)
 8003ddc:	edd3 7a00 	vldr	s15, [r3]
 8003de0:	eeb1 7a67 	vneg.f32	s14, s15
 8003de4:	4b5f      	ldr	r3, [pc, #380]	@ (8003f64 <MadgwickAHRSupdate+0x760>)
 8003de6:	edd3 7a00 	vldr	s15, [r3]
 8003dea:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003dee:	4b63      	ldr	r3, [pc, #396]	@ (8003f7c <MadgwickAHRSupdate+0x778>)
 8003df0:	edd3 6a00 	vldr	s13, [r3]
 8003df4:	4b67      	ldr	r3, [pc, #412]	@ (8003f94 <MadgwickAHRSupdate+0x790>)
 8003df6:	edd3 7a00 	vldr	s15, [r3]
 8003dfa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003dfe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003e02:	4b5d      	ldr	r3, [pc, #372]	@ (8003f78 <MadgwickAHRSupdate+0x774>)
 8003e04:	edd3 6a00 	vldr	s13, [r3]
 8003e08:	edd7 7a01 	vldr	s15, [r7, #4]
 8003e0c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003e10:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003e14:	4b60      	ldr	r3, [pc, #384]	@ (8003f98 <MadgwickAHRSupdate+0x794>)
 8003e16:	edd3 6a00 	vldr	s13, [r3]
 8003e1a:	4b54      	ldr	r3, [pc, #336]	@ (8003f6c <MadgwickAHRSupdate+0x768>)
 8003e1c:	edd3 7a00 	vldr	s15, [r3]
 8003e20:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003e24:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003e28:	4b56      	ldr	r3, [pc, #344]	@ (8003f84 <MadgwickAHRSupdate+0x780>)
 8003e2a:	edd3 6a00 	vldr	s13, [r3]
 8003e2e:	edd7 7a01 	vldr	s15, [r7, #4]
 8003e32:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003e36:	ee37 7a67 	vsub.f32	s14, s14, s15
				+ _2q2 * my * q3 - mz * q2q2 + mz * q3q3;
 8003e3a:	4b58      	ldr	r3, [pc, #352]	@ (8003f9c <MadgwickAHRSupdate+0x798>)
 8003e3c:	edd3 6a00 	vldr	s13, [r3]
 8003e40:	edd7 7a02 	vldr	s15, [r7, #8]
 8003e44:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003e48:	4b48      	ldr	r3, [pc, #288]	@ (8003f6c <MadgwickAHRSupdate+0x768>)
 8003e4a:	edd3 7a00 	vldr	s15, [r3]
 8003e4e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003e52:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003e56:	4b44      	ldr	r3, [pc, #272]	@ (8003f68 <MadgwickAHRSupdate+0x764>)
 8003e58:	edd3 6a00 	vldr	s13, [r3]
 8003e5c:	edd7 7a01 	vldr	s15, [r7, #4]
 8003e60:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003e64:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003e68:	4b42      	ldr	r3, [pc, #264]	@ (8003f74 <MadgwickAHRSupdate+0x770>)
 8003e6a:	edd3 6a00 	vldr	s13, [r3]
 8003e6e:	edd7 7a01 	vldr	s15, [r7, #4]
 8003e72:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003e76:	ee77 7a27 	vadd.f32	s15, s14, s15
		_2bz = -_2q0mx * q2 + _2q0my * q1 + mz * q0q0 + _2q1mx * q3 - mz * q1q1
 8003e7a:	4b4b      	ldr	r3, [pc, #300]	@ (8003fa8 <MadgwickAHRSupdate+0x7a4>)
 8003e7c:	edc3 7a00 	vstr	s15, [r3]
		_4bx = 2.0f * _2bx;
 8003e80:	4b48      	ldr	r3, [pc, #288]	@ (8003fa4 <MadgwickAHRSupdate+0x7a0>)
 8003e82:	edd3 7a00 	vldr	s15, [r3]
 8003e86:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003e8a:	4b48      	ldr	r3, [pc, #288]	@ (8003fac <MadgwickAHRSupdate+0x7a8>)
 8003e8c:	edc3 7a00 	vstr	s15, [r3]
		_4bz = 2.0f * _2bz;
 8003e90:	4b45      	ldr	r3, [pc, #276]	@ (8003fa8 <MadgwickAHRSupdate+0x7a4>)
 8003e92:	edd3 7a00 	vldr	s15, [r3]
 8003e96:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003e9a:	4b45      	ldr	r3, [pc, #276]	@ (8003fb0 <MadgwickAHRSupdate+0x7ac>)
 8003e9c:	edc3 7a00 	vstr	s15, [r3]

		s0 = -_2q2 * (2.0f * q1q3 - _2q0q2 - ax)
 8003ea0:	4b3e      	ldr	r3, [pc, #248]	@ (8003f9c <MadgwickAHRSupdate+0x798>)
 8003ea2:	edd3 7a00 	vldr	s15, [r3]
 8003ea6:	eeb1 7a67 	vneg.f32	s14, s15
 8003eaa:	4b2d      	ldr	r3, [pc, #180]	@ (8003f60 <MadgwickAHRSupdate+0x75c>)
 8003eac:	edd3 7a00 	vldr	s15, [r3]
 8003eb0:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8003eb4:	4b3f      	ldr	r3, [pc, #252]	@ (8003fb4 <MadgwickAHRSupdate+0x7b0>)
 8003eb6:	edd3 7a00 	vldr	s15, [r3]
 8003eba:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003ebe:	edd7 7a06 	vldr	s15, [r7, #24]
 8003ec2:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003ec6:	ee27 7a27 	vmul.f32	s14, s14, s15
				+ _2q1 * (2.0f * q0q1 + _2q2q3 - ay)
 8003eca:	4b3b      	ldr	r3, [pc, #236]	@ (8003fb8 <MadgwickAHRSupdate+0x7b4>)
 8003ecc:	edd3 7a00 	vldr	s15, [r3]
 8003ed0:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8003ed4:	4b39      	ldr	r3, [pc, #228]	@ (8003fbc <MadgwickAHRSupdate+0x7b8>)
 8003ed6:	edd3 7a00 	vldr	s15, [r3]
 8003eda:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8003ede:	edd7 7a05 	vldr	s15, [r7, #20]
 8003ee2:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003ee6:	4b28      	ldr	r3, [pc, #160]	@ (8003f88 <MadgwickAHRSupdate+0x784>)
 8003ee8:	edd3 7a00 	vldr	s15, [r3]
 8003eec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003ef0:	ee37 7a27 	vadd.f32	s14, s14, s15
				- _2bz * q2
 8003ef4:	4b2c      	ldr	r3, [pc, #176]	@ (8003fa8 <MadgwickAHRSupdate+0x7a4>)
 8003ef6:	edd3 6a00 	vldr	s13, [r3]
 8003efa:	4b1a      	ldr	r3, [pc, #104]	@ (8003f64 <MadgwickAHRSupdate+0x760>)
 8003efc:	edd3 7a00 	vldr	s15, [r3]
 8003f00:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2)
 8003f04:	4b18      	ldr	r3, [pc, #96]	@ (8003f68 <MadgwickAHRSupdate+0x764>)
 8003f06:	edd3 7a00 	vldr	s15, [r3]
 8003f0a:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 8003f0e:	ee36 6a67 	vsub.f32	s12, s12, s15
 8003f12:	4b18      	ldr	r3, [pc, #96]	@ (8003f74 <MadgwickAHRSupdate+0x770>)
 8003f14:	edd3 7a00 	vldr	s15, [r3]
 8003f18:	ee36 6a67 	vsub.f32	s12, s12, s15
 8003f1c:	4b21      	ldr	r3, [pc, #132]	@ (8003fa4 <MadgwickAHRSupdate+0x7a0>)
 8003f1e:	edd3 7a00 	vldr	s15, [r3]
 8003f22:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003f26:	4b0e      	ldr	r3, [pc, #56]	@ (8003f60 <MadgwickAHRSupdate+0x75c>)
 8003f28:	edd3 5a00 	vldr	s11, [r3]
 8003f2c:	4b24      	ldr	r3, [pc, #144]	@ (8003fc0 <MadgwickAHRSupdate+0x7bc>)
 8003f2e:	edd3 7a00 	vldr	s15, [r3]
 8003f32:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8003f36:	4b1c      	ldr	r3, [pc, #112]	@ (8003fa8 <MadgwickAHRSupdate+0x7a4>)
 8003f38:	edd3 7a00 	vldr	s15, [r3]
 8003f3c:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8003f40:	ee36 6a27 	vadd.f32	s12, s12, s15
								- mx)
 8003f44:	edd7 7a03 	vldr	s15, [r7, #12]
 8003f48:	ee76 7a67 	vsub.f32	s15, s12, s15
						* (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2)
 8003f4c:	ee66 7aa7 	vmul.f32	s15, s13, s15
				- _2bz * q2
 8003f50:	ee37 7a67 	vsub.f32	s14, s14, s15
				+ (-_2bx * q3 + _2bz * q1)
 8003f54:	4b13      	ldr	r3, [pc, #76]	@ (8003fa4 <MadgwickAHRSupdate+0x7a0>)
 8003f56:	edd3 7a00 	vldr	s15, [r3]
 8003f5a:	eef1 6a67 	vneg.f32	s13, s15
 8003f5e:	e031      	b.n	8003fc4 <MadgwickAHRSupdate+0x7c0>
 8003f60:	2000044c 	.word	0x2000044c
 8003f64:	20000484 	.word	0x20000484
 8003f68:	20000450 	.word	0x20000450
 8003f6c:	20000488 	.word	0x20000488
 8003f70:	20000454 	.word	0x20000454
 8003f74:	20000458 	.word	0x20000458
 8003f78:	20000434 	.word	0x20000434
 8003f7c:	20000400 	.word	0x20000400
 8003f80:	20000404 	.word	0x20000404
 8003f84:	20000444 	.word	0x20000444
 8003f88:	20000420 	.word	0x20000420
 8003f8c:	200003f4 	.word	0x200003f4
 8003f90:	200003fc 	.word	0x200003fc
 8003f94:	20000480 	.word	0x20000480
 8003f98:	20000408 	.word	0x20000408
 8003f9c:	20000424 	.word	0x20000424
 8003fa0:	200003f8 	.word	0x200003f8
 8003fa4:	2000040c 	.word	0x2000040c
 8003fa8:	20000410 	.word	0x20000410
 8003fac:	20000414 	.word	0x20000414
 8003fb0:	20000418 	.word	0x20000418
 8003fb4:	2000042c 	.word	0x2000042c
 8003fb8:	20000438 	.word	0x20000438
 8003fbc:	20000430 	.word	0x20000430
 8003fc0:	2000043c 	.word	0x2000043c
 8003fc4:	4bda      	ldr	r3, [pc, #872]	@ (8004330 <MadgwickAHRSupdate+0xb2c>)
 8003fc6:	edd3 7a00 	vldr	s15, [r3]
 8003fca:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003fce:	4bd9      	ldr	r3, [pc, #868]	@ (8004334 <MadgwickAHRSupdate+0xb30>)
 8003fd0:	ed93 6a00 	vldr	s12, [r3]
 8003fd4:	4bd8      	ldr	r3, [pc, #864]	@ (8004338 <MadgwickAHRSupdate+0xb34>)
 8003fd6:	edd3 7a00 	vldr	s15, [r3]
 8003fda:	ee66 7a27 	vmul.f32	s15, s12, s15
 8003fde:	ee76 6aa7 	vadd.f32	s13, s13, s15
						* (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my)
 8003fe2:	4bd6      	ldr	r3, [pc, #856]	@ (800433c <MadgwickAHRSupdate+0xb38>)
 8003fe4:	ed93 6a00 	vldr	s12, [r3]
 8003fe8:	4bd5      	ldr	r3, [pc, #852]	@ (8004340 <MadgwickAHRSupdate+0xb3c>)
 8003fea:	edd3 7a00 	vldr	s15, [r3]
 8003fee:	ee36 6a67 	vsub.f32	s12, s12, s15
 8003ff2:	4bd4      	ldr	r3, [pc, #848]	@ (8004344 <MadgwickAHRSupdate+0xb40>)
 8003ff4:	edd3 7a00 	vldr	s15, [r3]
 8003ff8:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003ffc:	4bd2      	ldr	r3, [pc, #840]	@ (8004348 <MadgwickAHRSupdate+0xb44>)
 8003ffe:	edd3 5a00 	vldr	s11, [r3]
 8004002:	4bd2      	ldr	r3, [pc, #840]	@ (800434c <MadgwickAHRSupdate+0xb48>)
 8004004:	edd3 7a00 	vldr	s15, [r3]
 8004008:	ee75 5aa7 	vadd.f32	s11, s11, s15
 800400c:	4bc9      	ldr	r3, [pc, #804]	@ (8004334 <MadgwickAHRSupdate+0xb30>)
 800400e:	edd3 7a00 	vldr	s15, [r3]
 8004012:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8004016:	ee36 6a27 	vadd.f32	s12, s12, s15
 800401a:	edd7 7a02 	vldr	s15, [r7, #8]
 800401e:	ee76 7a67 	vsub.f32	s15, s12, s15
 8004022:	ee66 7aa7 	vmul.f32	s15, s13, s15
				+ (-_2bx * q3 + _2bz * q1)
 8004026:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ _2bx * q2
 800402a:	4bc6      	ldr	r3, [pc, #792]	@ (8004344 <MadgwickAHRSupdate+0xb40>)
 800402c:	edd3 6a00 	vldr	s13, [r3]
 8004030:	4bc7      	ldr	r3, [pc, #796]	@ (8004350 <MadgwickAHRSupdate+0xb4c>)
 8004032:	edd3 7a00 	vldr	s15, [r3]
 8004036:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2)
 800403a:	4bc6      	ldr	r3, [pc, #792]	@ (8004354 <MadgwickAHRSupdate+0xb50>)
 800403c:	ed93 6a00 	vldr	s12, [r3]
 8004040:	4bc5      	ldr	r3, [pc, #788]	@ (8004358 <MadgwickAHRSupdate+0xb54>)
 8004042:	edd3 7a00 	vldr	s15, [r3]
 8004046:	ee36 6a27 	vadd.f32	s12, s12, s15
 800404a:	4bbe      	ldr	r3, [pc, #760]	@ (8004344 <MadgwickAHRSupdate+0xb40>)
 800404c:	edd3 7a00 	vldr	s15, [r3]
 8004050:	ee26 6a27 	vmul.f32	s12, s12, s15
 8004054:	4bc1      	ldr	r3, [pc, #772]	@ (800435c <MadgwickAHRSupdate+0xb58>)
 8004056:	edd3 7a00 	vldr	s15, [r3]
 800405a:	eef6 5a00 	vmov.f32	s11, #96	@ 0x3f000000  0.5
 800405e:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8004062:	4bbf      	ldr	r3, [pc, #764]	@ (8004360 <MadgwickAHRSupdate+0xb5c>)
 8004064:	edd3 7a00 	vldr	s15, [r3]
 8004068:	ee75 5ae7 	vsub.f32	s11, s11, s15
 800406c:	4bb1      	ldr	r3, [pc, #708]	@ (8004334 <MadgwickAHRSupdate+0xb30>)
 800406e:	edd3 7a00 	vldr	s15, [r3]
 8004072:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8004076:	ee36 6a27 	vadd.f32	s12, s12, s15
								- mz);
 800407a:	edd7 7a01 	vldr	s15, [r7, #4]
 800407e:	ee76 7a67 	vsub.f32	s15, s12, s15
						* (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2)
 8004082:	ee66 7aa7 	vmul.f32	s15, s13, s15
				+ _2bx * q2
 8004086:	ee77 7a27 	vadd.f32	s15, s14, s15
		s0 = -_2q2 * (2.0f * q1q3 - _2q0q2 - ax)
 800408a:	4bb6      	ldr	r3, [pc, #728]	@ (8004364 <MadgwickAHRSupdate+0xb60>)
 800408c:	edc3 7a00 	vstr	s15, [r3]
		s1 = _2q3 * (2.0f * q1q3 - _2q0q2 - ax)
 8004090:	4bb1      	ldr	r3, [pc, #708]	@ (8004358 <MadgwickAHRSupdate+0xb54>)
 8004092:	edd3 7a00 	vldr	s15, [r3]
 8004096:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800409a:	4bb3      	ldr	r3, [pc, #716]	@ (8004368 <MadgwickAHRSupdate+0xb64>)
 800409c:	edd3 7a00 	vldr	s15, [r3]
 80040a0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80040a4:	edd7 7a06 	vldr	s15, [r7, #24]
 80040a8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80040ac:	4baf      	ldr	r3, [pc, #700]	@ (800436c <MadgwickAHRSupdate+0xb68>)
 80040ae:	edd3 7a00 	vldr	s15, [r3]
 80040b2:	ee27 7a27 	vmul.f32	s14, s14, s15
				+ _2q0 * (2.0f * q0q1 + _2q2q3 - ay)
 80040b6:	4ba4      	ldr	r3, [pc, #656]	@ (8004348 <MadgwickAHRSupdate+0xb44>)
 80040b8:	edd3 7a00 	vldr	s15, [r3]
 80040bc:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80040c0:	4bab      	ldr	r3, [pc, #684]	@ (8004370 <MadgwickAHRSupdate+0xb6c>)
 80040c2:	edd3 7a00 	vldr	s15, [r3]
 80040c6:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80040ca:	edd7 7a05 	vldr	s15, [r7, #20]
 80040ce:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80040d2:	4ba8      	ldr	r3, [pc, #672]	@ (8004374 <MadgwickAHRSupdate+0xb70>)
 80040d4:	edd3 7a00 	vldr	s15, [r3]
 80040d8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80040dc:	ee37 7a27 	vadd.f32	s14, s14, s15
				- 4.0f * q1 * (1 - 2.0f * q1q1 - 2.0f * q2q2 - az)
 80040e0:	4b95      	ldr	r3, [pc, #596]	@ (8004338 <MadgwickAHRSupdate+0xb34>)
 80040e2:	edd3 7a00 	vldr	s15, [r3]
 80040e6:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 80040ea:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80040ee:	4b9b      	ldr	r3, [pc, #620]	@ (800435c <MadgwickAHRSupdate+0xb58>)
 80040f0:	edd3 7a00 	vldr	s15, [r3]
 80040f4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80040f8:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 80040fc:	ee36 6a67 	vsub.f32	s12, s12, s15
 8004100:	4b97      	ldr	r3, [pc, #604]	@ (8004360 <MadgwickAHRSupdate+0xb5c>)
 8004102:	edd3 7a00 	vldr	s15, [r3]
 8004106:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800410a:	ee36 6a67 	vsub.f32	s12, s12, s15
 800410e:	edd7 7a04 	vldr	s15, [r7, #16]
 8004112:	ee76 7a67 	vsub.f32	s15, s12, s15
 8004116:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800411a:	ee37 7a67 	vsub.f32	s14, s14, s15
				+ _2bz * q3
 800411e:	4b85      	ldr	r3, [pc, #532]	@ (8004334 <MadgwickAHRSupdate+0xb30>)
 8004120:	edd3 6a00 	vldr	s13, [r3]
 8004124:	4b82      	ldr	r3, [pc, #520]	@ (8004330 <MadgwickAHRSupdate+0xb2c>)
 8004126:	edd3 7a00 	vldr	s15, [r3]
 800412a:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2)
 800412e:	4b8c      	ldr	r3, [pc, #560]	@ (8004360 <MadgwickAHRSupdate+0xb5c>)
 8004130:	edd3 7a00 	vldr	s15, [r3]
 8004134:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 8004138:	ee36 6a67 	vsub.f32	s12, s12, s15
 800413c:	4b8e      	ldr	r3, [pc, #568]	@ (8004378 <MadgwickAHRSupdate+0xb74>)
 800413e:	edd3 7a00 	vldr	s15, [r3]
 8004142:	ee36 6a67 	vsub.f32	s12, s12, s15
 8004146:	4b7f      	ldr	r3, [pc, #508]	@ (8004344 <MadgwickAHRSupdate+0xb40>)
 8004148:	edd3 7a00 	vldr	s15, [r3]
 800414c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8004150:	4b81      	ldr	r3, [pc, #516]	@ (8004358 <MadgwickAHRSupdate+0xb54>)
 8004152:	edd3 5a00 	vldr	s11, [r3]
 8004156:	4b7f      	ldr	r3, [pc, #508]	@ (8004354 <MadgwickAHRSupdate+0xb50>)
 8004158:	edd3 7a00 	vldr	s15, [r3]
 800415c:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8004160:	4b74      	ldr	r3, [pc, #464]	@ (8004334 <MadgwickAHRSupdate+0xb30>)
 8004162:	edd3 7a00 	vldr	s15, [r3]
 8004166:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800416a:	ee36 6a27 	vadd.f32	s12, s12, s15
								- mx)
 800416e:	edd7 7a03 	vldr	s15, [r7, #12]
 8004172:	ee76 7a67 	vsub.f32	s15, s12, s15
						* (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2)
 8004176:	ee66 7aa7 	vmul.f32	s15, s13, s15
				+ _2bz * q3
 800417a:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ (_2bx * q2 + _2bz * q0)
 800417e:	4b71      	ldr	r3, [pc, #452]	@ (8004344 <MadgwickAHRSupdate+0xb40>)
 8004180:	edd3 6a00 	vldr	s13, [r3]
 8004184:	4b72      	ldr	r3, [pc, #456]	@ (8004350 <MadgwickAHRSupdate+0xb4c>)
 8004186:	edd3 7a00 	vldr	s15, [r3]
 800418a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800418e:	4b69      	ldr	r3, [pc, #420]	@ (8004334 <MadgwickAHRSupdate+0xb30>)
 8004190:	ed93 6a00 	vldr	s12, [r3]
 8004194:	4b79      	ldr	r3, [pc, #484]	@ (800437c <MadgwickAHRSupdate+0xb78>)
 8004196:	edd3 7a00 	vldr	s15, [r3]
 800419a:	ee66 7a27 	vmul.f32	s15, s12, s15
 800419e:	ee76 6aa7 	vadd.f32	s13, s13, s15
						* (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my)
 80041a2:	4b66      	ldr	r3, [pc, #408]	@ (800433c <MadgwickAHRSupdate+0xb38>)
 80041a4:	ed93 6a00 	vldr	s12, [r3]
 80041a8:	4b65      	ldr	r3, [pc, #404]	@ (8004340 <MadgwickAHRSupdate+0xb3c>)
 80041aa:	edd3 7a00 	vldr	s15, [r3]
 80041ae:	ee36 6a67 	vsub.f32	s12, s12, s15
 80041b2:	4b64      	ldr	r3, [pc, #400]	@ (8004344 <MadgwickAHRSupdate+0xb40>)
 80041b4:	edd3 7a00 	vldr	s15, [r3]
 80041b8:	ee26 6a27 	vmul.f32	s12, s12, s15
 80041bc:	4b62      	ldr	r3, [pc, #392]	@ (8004348 <MadgwickAHRSupdate+0xb44>)
 80041be:	edd3 5a00 	vldr	s11, [r3]
 80041c2:	4b62      	ldr	r3, [pc, #392]	@ (800434c <MadgwickAHRSupdate+0xb48>)
 80041c4:	edd3 7a00 	vldr	s15, [r3]
 80041c8:	ee75 5aa7 	vadd.f32	s11, s11, s15
 80041cc:	4b59      	ldr	r3, [pc, #356]	@ (8004334 <MadgwickAHRSupdate+0xb30>)
 80041ce:	edd3 7a00 	vldr	s15, [r3]
 80041d2:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80041d6:	ee36 6a27 	vadd.f32	s12, s12, s15
 80041da:	edd7 7a02 	vldr	s15, [r7, #8]
 80041de:	ee76 7a67 	vsub.f32	s15, s12, s15
 80041e2:	ee66 7aa7 	vmul.f32	s15, s13, s15
				+ (_2bx * q2 + _2bz * q0)
 80041e6:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ (_2bx * q3 - _4bz * q1)
 80041ea:	4b56      	ldr	r3, [pc, #344]	@ (8004344 <MadgwickAHRSupdate+0xb40>)
 80041ec:	edd3 6a00 	vldr	s13, [r3]
 80041f0:	4b4f      	ldr	r3, [pc, #316]	@ (8004330 <MadgwickAHRSupdate+0xb2c>)
 80041f2:	edd3 7a00 	vldr	s15, [r3]
 80041f6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80041fa:	4b61      	ldr	r3, [pc, #388]	@ (8004380 <MadgwickAHRSupdate+0xb7c>)
 80041fc:	ed93 6a00 	vldr	s12, [r3]
 8004200:	4b4d      	ldr	r3, [pc, #308]	@ (8004338 <MadgwickAHRSupdate+0xb34>)
 8004202:	edd3 7a00 	vldr	s15, [r3]
 8004206:	ee66 7a27 	vmul.f32	s15, s12, s15
 800420a:	ee76 6ae7 	vsub.f32	s13, s13, s15
						* (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2)
 800420e:	4b51      	ldr	r3, [pc, #324]	@ (8004354 <MadgwickAHRSupdate+0xb50>)
 8004210:	ed93 6a00 	vldr	s12, [r3]
 8004214:	4b50      	ldr	r3, [pc, #320]	@ (8004358 <MadgwickAHRSupdate+0xb54>)
 8004216:	edd3 7a00 	vldr	s15, [r3]
 800421a:	ee36 6a27 	vadd.f32	s12, s12, s15
 800421e:	4b49      	ldr	r3, [pc, #292]	@ (8004344 <MadgwickAHRSupdate+0xb40>)
 8004220:	edd3 7a00 	vldr	s15, [r3]
 8004224:	ee26 6a27 	vmul.f32	s12, s12, s15
 8004228:	4b4c      	ldr	r3, [pc, #304]	@ (800435c <MadgwickAHRSupdate+0xb58>)
 800422a:	edd3 7a00 	vldr	s15, [r3]
 800422e:	eef6 5a00 	vmov.f32	s11, #96	@ 0x3f000000  0.5
 8004232:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8004236:	4b4a      	ldr	r3, [pc, #296]	@ (8004360 <MadgwickAHRSupdate+0xb5c>)
 8004238:	edd3 7a00 	vldr	s15, [r3]
 800423c:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8004240:	4b3c      	ldr	r3, [pc, #240]	@ (8004334 <MadgwickAHRSupdate+0xb30>)
 8004242:	edd3 7a00 	vldr	s15, [r3]
 8004246:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800424a:	ee36 6a27 	vadd.f32	s12, s12, s15
								- mz);
 800424e:	edd7 7a01 	vldr	s15, [r7, #4]
 8004252:	ee76 7a67 	vsub.f32	s15, s12, s15
						* (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2)
 8004256:	ee66 7aa7 	vmul.f32	s15, s13, s15
				+ (_2bx * q3 - _4bz * q1)
 800425a:	ee77 7a27 	vadd.f32	s15, s14, s15
		s1 = _2q3 * (2.0f * q1q3 - _2q0q2 - ax)
 800425e:	4b49      	ldr	r3, [pc, #292]	@ (8004384 <MadgwickAHRSupdate+0xb80>)
 8004260:	edc3 7a00 	vstr	s15, [r3]
		s2 = -_2q0 * (2.0f * q1q3 - _2q0q2 - ax)
 8004264:	4b43      	ldr	r3, [pc, #268]	@ (8004374 <MadgwickAHRSupdate+0xb70>)
 8004266:	edd3 7a00 	vldr	s15, [r3]
 800426a:	eeb1 7a67 	vneg.f32	s14, s15
 800426e:	4b3a      	ldr	r3, [pc, #232]	@ (8004358 <MadgwickAHRSupdate+0xb54>)
 8004270:	edd3 7a00 	vldr	s15, [r3]
 8004274:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8004278:	4b3b      	ldr	r3, [pc, #236]	@ (8004368 <MadgwickAHRSupdate+0xb64>)
 800427a:	edd3 7a00 	vldr	s15, [r3]
 800427e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8004282:	edd7 7a06 	vldr	s15, [r7, #24]
 8004286:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800428a:	ee27 7a27 	vmul.f32	s14, s14, s15
				+ _2q3 * (2.0f * q0q1 + _2q2q3 - ay)
 800428e:	4b2e      	ldr	r3, [pc, #184]	@ (8004348 <MadgwickAHRSupdate+0xb44>)
 8004290:	edd3 7a00 	vldr	s15, [r3]
 8004294:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8004298:	4b35      	ldr	r3, [pc, #212]	@ (8004370 <MadgwickAHRSupdate+0xb6c>)
 800429a:	edd3 7a00 	vldr	s15, [r3]
 800429e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80042a2:	edd7 7a05 	vldr	s15, [r7, #20]
 80042a6:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80042aa:	4b30      	ldr	r3, [pc, #192]	@ (800436c <MadgwickAHRSupdate+0xb68>)
 80042ac:	edd3 7a00 	vldr	s15, [r3]
 80042b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80042b4:	ee37 7a27 	vadd.f32	s14, s14, s15
				- 4.0f * q2 * (1 - 2.0f * q1q1 - 2.0f * q2q2 - az)
 80042b8:	4b25      	ldr	r3, [pc, #148]	@ (8004350 <MadgwickAHRSupdate+0xb4c>)
 80042ba:	edd3 7a00 	vldr	s15, [r3]
 80042be:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 80042c2:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80042c6:	4b25      	ldr	r3, [pc, #148]	@ (800435c <MadgwickAHRSupdate+0xb58>)
 80042c8:	edd3 7a00 	vldr	s15, [r3]
 80042cc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80042d0:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 80042d4:	ee36 6a67 	vsub.f32	s12, s12, s15
 80042d8:	4b21      	ldr	r3, [pc, #132]	@ (8004360 <MadgwickAHRSupdate+0xb5c>)
 80042da:	edd3 7a00 	vldr	s15, [r3]
 80042de:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80042e2:	ee36 6a67 	vsub.f32	s12, s12, s15
 80042e6:	edd7 7a04 	vldr	s15, [r7, #16]
 80042ea:	ee76 7a67 	vsub.f32	s15, s12, s15
 80042ee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80042f2:	ee37 7a67 	vsub.f32	s14, s14, s15
				+ (-_4bx * q2 - _2bz * q0)
 80042f6:	4b24      	ldr	r3, [pc, #144]	@ (8004388 <MadgwickAHRSupdate+0xb84>)
 80042f8:	edd3 7a00 	vldr	s15, [r3]
 80042fc:	eef1 6a67 	vneg.f32	s13, s15
 8004300:	4b13      	ldr	r3, [pc, #76]	@ (8004350 <MadgwickAHRSupdate+0xb4c>)
 8004302:	edd3 7a00 	vldr	s15, [r3]
 8004306:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800430a:	4b0a      	ldr	r3, [pc, #40]	@ (8004334 <MadgwickAHRSupdate+0xb30>)
 800430c:	ed93 6a00 	vldr	s12, [r3]
 8004310:	4b1a      	ldr	r3, [pc, #104]	@ (800437c <MadgwickAHRSupdate+0xb78>)
 8004312:	edd3 7a00 	vldr	s15, [r3]
 8004316:	ee66 7a27 	vmul.f32	s15, s12, s15
 800431a:	ee76 6ae7 	vsub.f32	s13, s13, s15
						* (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2)
 800431e:	4b10      	ldr	r3, [pc, #64]	@ (8004360 <MadgwickAHRSupdate+0xb5c>)
 8004320:	edd3 7a00 	vldr	s15, [r3]
 8004324:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 8004328:	ee36 6a67 	vsub.f32	s12, s12, s15
 800432c:	e02e      	b.n	800438c <MadgwickAHRSupdate+0xb88>
 800432e:	bf00      	nop
 8004330:	20000488 	.word	0x20000488
 8004334:	20000410 	.word	0x20000410
 8004338:	20000480 	.word	0x20000480
 800433c:	20000448 	.word	0x20000448
 8004340:	20000440 	.word	0x20000440
 8004344:	2000040c 	.word	0x2000040c
 8004348:	20000438 	.word	0x20000438
 800434c:	20000454 	.word	0x20000454
 8004350:	20000484 	.word	0x20000484
 8004354:	2000043c 	.word	0x2000043c
 8004358:	2000044c 	.word	0x2000044c
 800435c:	20000444 	.word	0x20000444
 8004360:	20000450 	.word	0x20000450
 8004364:	200003d4 	.word	0x200003d4
 8004368:	2000042c 	.word	0x2000042c
 800436c:	20000428 	.word	0x20000428
 8004370:	20000430 	.word	0x20000430
 8004374:	2000041c 	.word	0x2000041c
 8004378:	20000458 	.word	0x20000458
 800437c:	20000008 	.word	0x20000008
 8004380:	20000418 	.word	0x20000418
 8004384:	200003d8 	.word	0x200003d8
 8004388:	20000414 	.word	0x20000414
 800438c:	4bd7      	ldr	r3, [pc, #860]	@ (80046ec <MadgwickAHRSupdate+0xee8>)
 800438e:	edd3 7a00 	vldr	s15, [r3]
 8004392:	ee36 6a67 	vsub.f32	s12, s12, s15
 8004396:	4bd6      	ldr	r3, [pc, #856]	@ (80046f0 <MadgwickAHRSupdate+0xeec>)
 8004398:	edd3 7a00 	vldr	s15, [r3]
 800439c:	ee26 6a27 	vmul.f32	s12, s12, s15
 80043a0:	4bd4      	ldr	r3, [pc, #848]	@ (80046f4 <MadgwickAHRSupdate+0xef0>)
 80043a2:	edd3 5a00 	vldr	s11, [r3]
 80043a6:	4bd4      	ldr	r3, [pc, #848]	@ (80046f8 <MadgwickAHRSupdate+0xef4>)
 80043a8:	edd3 7a00 	vldr	s15, [r3]
 80043ac:	ee75 5ae7 	vsub.f32	s11, s11, s15
 80043b0:	4bd2      	ldr	r3, [pc, #840]	@ (80046fc <MadgwickAHRSupdate+0xef8>)
 80043b2:	edd3 7a00 	vldr	s15, [r3]
 80043b6:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80043ba:	ee36 6a27 	vadd.f32	s12, s12, s15
								- mx)
 80043be:	edd7 7a03 	vldr	s15, [r7, #12]
 80043c2:	ee76 7a67 	vsub.f32	s15, s12, s15
						* (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2)
 80043c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
				+ (-_4bx * q2 - _2bz * q0)
 80043ca:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ (_2bx * q1 + _2bz * q3)
 80043ce:	4bc8      	ldr	r3, [pc, #800]	@ (80046f0 <MadgwickAHRSupdate+0xeec>)
 80043d0:	edd3 6a00 	vldr	s13, [r3]
 80043d4:	4bca      	ldr	r3, [pc, #808]	@ (8004700 <MadgwickAHRSupdate+0xefc>)
 80043d6:	edd3 7a00 	vldr	s15, [r3]
 80043da:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80043de:	4bc7      	ldr	r3, [pc, #796]	@ (80046fc <MadgwickAHRSupdate+0xef8>)
 80043e0:	ed93 6a00 	vldr	s12, [r3]
 80043e4:	4bc7      	ldr	r3, [pc, #796]	@ (8004704 <MadgwickAHRSupdate+0xf00>)
 80043e6:	edd3 7a00 	vldr	s15, [r3]
 80043ea:	ee66 7a27 	vmul.f32	s15, s12, s15
 80043ee:	ee76 6aa7 	vadd.f32	s13, s13, s15
						* (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my)
 80043f2:	4bc5      	ldr	r3, [pc, #788]	@ (8004708 <MadgwickAHRSupdate+0xf04>)
 80043f4:	ed93 6a00 	vldr	s12, [r3]
 80043f8:	4bc4      	ldr	r3, [pc, #784]	@ (800470c <MadgwickAHRSupdate+0xf08>)
 80043fa:	edd3 7a00 	vldr	s15, [r3]
 80043fe:	ee36 6a67 	vsub.f32	s12, s12, s15
 8004402:	4bbb      	ldr	r3, [pc, #748]	@ (80046f0 <MadgwickAHRSupdate+0xeec>)
 8004404:	edd3 7a00 	vldr	s15, [r3]
 8004408:	ee26 6a27 	vmul.f32	s12, s12, s15
 800440c:	4bc0      	ldr	r3, [pc, #768]	@ (8004710 <MadgwickAHRSupdate+0xf0c>)
 800440e:	edd3 5a00 	vldr	s11, [r3]
 8004412:	4bc0      	ldr	r3, [pc, #768]	@ (8004714 <MadgwickAHRSupdate+0xf10>)
 8004414:	edd3 7a00 	vldr	s15, [r3]
 8004418:	ee75 5aa7 	vadd.f32	s11, s11, s15
 800441c:	4bb7      	ldr	r3, [pc, #732]	@ (80046fc <MadgwickAHRSupdate+0xef8>)
 800441e:	edd3 7a00 	vldr	s15, [r3]
 8004422:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8004426:	ee36 6a27 	vadd.f32	s12, s12, s15
 800442a:	edd7 7a02 	vldr	s15, [r7, #8]
 800442e:	ee76 7a67 	vsub.f32	s15, s12, s15
 8004432:	ee66 7aa7 	vmul.f32	s15, s13, s15
				+ (_2bx * q1 + _2bz * q3)
 8004436:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ (_2bx * q0 - _4bz * q2)
 800443a:	4bad      	ldr	r3, [pc, #692]	@ (80046f0 <MadgwickAHRSupdate+0xeec>)
 800443c:	edd3 6a00 	vldr	s13, [r3]
 8004440:	4bb5      	ldr	r3, [pc, #724]	@ (8004718 <MadgwickAHRSupdate+0xf14>)
 8004442:	edd3 7a00 	vldr	s15, [r3]
 8004446:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800444a:	4bb4      	ldr	r3, [pc, #720]	@ (800471c <MadgwickAHRSupdate+0xf18>)
 800444c:	ed93 6a00 	vldr	s12, [r3]
 8004450:	4bb3      	ldr	r3, [pc, #716]	@ (8004720 <MadgwickAHRSupdate+0xf1c>)
 8004452:	edd3 7a00 	vldr	s15, [r3]
 8004456:	ee66 7a27 	vmul.f32	s15, s12, s15
 800445a:	ee76 6ae7 	vsub.f32	s13, s13, s15
						* (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2)
 800445e:	4ba6      	ldr	r3, [pc, #664]	@ (80046f8 <MadgwickAHRSupdate+0xef4>)
 8004460:	ed93 6a00 	vldr	s12, [r3]
 8004464:	4ba3      	ldr	r3, [pc, #652]	@ (80046f4 <MadgwickAHRSupdate+0xef0>)
 8004466:	edd3 7a00 	vldr	s15, [r3]
 800446a:	ee36 6a27 	vadd.f32	s12, s12, s15
 800446e:	4ba0      	ldr	r3, [pc, #640]	@ (80046f0 <MadgwickAHRSupdate+0xeec>)
 8004470:	edd3 7a00 	vldr	s15, [r3]
 8004474:	ee26 6a27 	vmul.f32	s12, s12, s15
 8004478:	4baa      	ldr	r3, [pc, #680]	@ (8004724 <MadgwickAHRSupdate+0xf20>)
 800447a:	edd3 7a00 	vldr	s15, [r3]
 800447e:	eef6 5a00 	vmov.f32	s11, #96	@ 0x3f000000  0.5
 8004482:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8004486:	4ba8      	ldr	r3, [pc, #672]	@ (8004728 <MadgwickAHRSupdate+0xf24>)
 8004488:	edd3 7a00 	vldr	s15, [r3]
 800448c:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8004490:	4b9a      	ldr	r3, [pc, #616]	@ (80046fc <MadgwickAHRSupdate+0xef8>)
 8004492:	edd3 7a00 	vldr	s15, [r3]
 8004496:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800449a:	ee36 6a27 	vadd.f32	s12, s12, s15
								- mz);
 800449e:	edd7 7a01 	vldr	s15, [r7, #4]
 80044a2:	ee76 7a67 	vsub.f32	s15, s12, s15
						* (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2)
 80044a6:	ee66 7aa7 	vmul.f32	s15, s13, s15
				+ (_2bx * q0 - _4bz * q2)
 80044aa:	ee77 7a27 	vadd.f32	s15, s14, s15
		s2 = -_2q0 * (2.0f * q1q3 - _2q0q2 - ax)
 80044ae:	4b9f      	ldr	r3, [pc, #636]	@ (800472c <MadgwickAHRSupdate+0xf28>)
 80044b0:	edc3 7a00 	vstr	s15, [r3]
		s3 = _2q1 * (2.0f * q1q3 - _2q0q2 - ax)
 80044b4:	4b8f      	ldr	r3, [pc, #572]	@ (80046f4 <MadgwickAHRSupdate+0xef0>)
 80044b6:	edd3 7a00 	vldr	s15, [r3]
 80044ba:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80044be:	4b9c      	ldr	r3, [pc, #624]	@ (8004730 <MadgwickAHRSupdate+0xf2c>)
 80044c0:	edd3 7a00 	vldr	s15, [r3]
 80044c4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80044c8:	edd7 7a06 	vldr	s15, [r7, #24]
 80044cc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80044d0:	4b98      	ldr	r3, [pc, #608]	@ (8004734 <MadgwickAHRSupdate+0xf30>)
 80044d2:	edd3 7a00 	vldr	s15, [r3]
 80044d6:	ee27 7a27 	vmul.f32	s14, s14, s15
				+ _2q2 * (2.0f * q0q1 + _2q2q3 - ay)
 80044da:	4b8d      	ldr	r3, [pc, #564]	@ (8004710 <MadgwickAHRSupdate+0xf0c>)
 80044dc:	edd3 7a00 	vldr	s15, [r3]
 80044e0:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80044e4:	4b94      	ldr	r3, [pc, #592]	@ (8004738 <MadgwickAHRSupdate+0xf34>)
 80044e6:	edd3 7a00 	vldr	s15, [r3]
 80044ea:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80044ee:	edd7 7a05 	vldr	s15, [r7, #20]
 80044f2:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80044f6:	4b91      	ldr	r3, [pc, #580]	@ (800473c <MadgwickAHRSupdate+0xf38>)
 80044f8:	edd3 7a00 	vldr	s15, [r3]
 80044fc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004500:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ (-_4bx * q3 + _2bz * q1)
 8004504:	4b8e      	ldr	r3, [pc, #568]	@ (8004740 <MadgwickAHRSupdate+0xf3c>)
 8004506:	edd3 7a00 	vldr	s15, [r3]
 800450a:	eef1 6a67 	vneg.f32	s13, s15
 800450e:	4b7d      	ldr	r3, [pc, #500]	@ (8004704 <MadgwickAHRSupdate+0xf00>)
 8004510:	edd3 7a00 	vldr	s15, [r3]
 8004514:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004518:	4b78      	ldr	r3, [pc, #480]	@ (80046fc <MadgwickAHRSupdate+0xef8>)
 800451a:	ed93 6a00 	vldr	s12, [r3]
 800451e:	4b78      	ldr	r3, [pc, #480]	@ (8004700 <MadgwickAHRSupdate+0xefc>)
 8004520:	edd3 7a00 	vldr	s15, [r3]
 8004524:	ee66 7a27 	vmul.f32	s15, s12, s15
 8004528:	ee76 6aa7 	vadd.f32	s13, s13, s15
						* (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2)
 800452c:	4b7e      	ldr	r3, [pc, #504]	@ (8004728 <MadgwickAHRSupdate+0xf24>)
 800452e:	edd3 7a00 	vldr	s15, [r3]
 8004532:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 8004536:	ee36 6a67 	vsub.f32	s12, s12, s15
 800453a:	4b6c      	ldr	r3, [pc, #432]	@ (80046ec <MadgwickAHRSupdate+0xee8>)
 800453c:	edd3 7a00 	vldr	s15, [r3]
 8004540:	ee36 6a67 	vsub.f32	s12, s12, s15
 8004544:	4b6a      	ldr	r3, [pc, #424]	@ (80046f0 <MadgwickAHRSupdate+0xeec>)
 8004546:	edd3 7a00 	vldr	s15, [r3]
 800454a:	ee26 6a27 	vmul.f32	s12, s12, s15
 800454e:	4b69      	ldr	r3, [pc, #420]	@ (80046f4 <MadgwickAHRSupdate+0xef0>)
 8004550:	edd3 5a00 	vldr	s11, [r3]
 8004554:	4b68      	ldr	r3, [pc, #416]	@ (80046f8 <MadgwickAHRSupdate+0xef4>)
 8004556:	edd3 7a00 	vldr	s15, [r3]
 800455a:	ee75 5ae7 	vsub.f32	s11, s11, s15
 800455e:	4b67      	ldr	r3, [pc, #412]	@ (80046fc <MadgwickAHRSupdate+0xef8>)
 8004560:	edd3 7a00 	vldr	s15, [r3]
 8004564:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8004568:	ee36 6a27 	vadd.f32	s12, s12, s15
								- mx)
 800456c:	edd7 7a03 	vldr	s15, [r7, #12]
 8004570:	ee76 7a67 	vsub.f32	s15, s12, s15
						* (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2)
 8004574:	ee66 7aa7 	vmul.f32	s15, s13, s15
				+ (-_4bx * q3 + _2bz * q1)
 8004578:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ (-_2bx * q0 + _2bz * q2)
 800457c:	4b5c      	ldr	r3, [pc, #368]	@ (80046f0 <MadgwickAHRSupdate+0xeec>)
 800457e:	edd3 7a00 	vldr	s15, [r3]
 8004582:	eef1 6a67 	vneg.f32	s13, s15
 8004586:	4b64      	ldr	r3, [pc, #400]	@ (8004718 <MadgwickAHRSupdate+0xf14>)
 8004588:	edd3 7a00 	vldr	s15, [r3]
 800458c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004590:	4b5a      	ldr	r3, [pc, #360]	@ (80046fc <MadgwickAHRSupdate+0xef8>)
 8004592:	ed93 6a00 	vldr	s12, [r3]
 8004596:	4b62      	ldr	r3, [pc, #392]	@ (8004720 <MadgwickAHRSupdate+0xf1c>)
 8004598:	edd3 7a00 	vldr	s15, [r3]
 800459c:	ee66 7a27 	vmul.f32	s15, s12, s15
 80045a0:	ee76 6aa7 	vadd.f32	s13, s13, s15
						* (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my)
 80045a4:	4b58      	ldr	r3, [pc, #352]	@ (8004708 <MadgwickAHRSupdate+0xf04>)
 80045a6:	ed93 6a00 	vldr	s12, [r3]
 80045aa:	4b58      	ldr	r3, [pc, #352]	@ (800470c <MadgwickAHRSupdate+0xf08>)
 80045ac:	edd3 7a00 	vldr	s15, [r3]
 80045b0:	ee36 6a67 	vsub.f32	s12, s12, s15
 80045b4:	4b4e      	ldr	r3, [pc, #312]	@ (80046f0 <MadgwickAHRSupdate+0xeec>)
 80045b6:	edd3 7a00 	vldr	s15, [r3]
 80045ba:	ee26 6a27 	vmul.f32	s12, s12, s15
 80045be:	4b54      	ldr	r3, [pc, #336]	@ (8004710 <MadgwickAHRSupdate+0xf0c>)
 80045c0:	edd3 5a00 	vldr	s11, [r3]
 80045c4:	4b53      	ldr	r3, [pc, #332]	@ (8004714 <MadgwickAHRSupdate+0xf10>)
 80045c6:	edd3 7a00 	vldr	s15, [r3]
 80045ca:	ee75 5aa7 	vadd.f32	s11, s11, s15
 80045ce:	4b4b      	ldr	r3, [pc, #300]	@ (80046fc <MadgwickAHRSupdate+0xef8>)
 80045d0:	edd3 7a00 	vldr	s15, [r3]
 80045d4:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80045d8:	ee36 6a27 	vadd.f32	s12, s12, s15
 80045dc:	edd7 7a02 	vldr	s15, [r7, #8]
 80045e0:	ee76 7a67 	vsub.f32	s15, s12, s15
 80045e4:	ee66 7aa7 	vmul.f32	s15, s13, s15
				+ (-_2bx * q0 + _2bz * q2)
 80045e8:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ _2bx * q1
 80045ec:	4b40      	ldr	r3, [pc, #256]	@ (80046f0 <MadgwickAHRSupdate+0xeec>)
 80045ee:	edd3 6a00 	vldr	s13, [r3]
 80045f2:	4b43      	ldr	r3, [pc, #268]	@ (8004700 <MadgwickAHRSupdate+0xefc>)
 80045f4:	edd3 7a00 	vldr	s15, [r3]
 80045f8:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2)
 80045fc:	4b3e      	ldr	r3, [pc, #248]	@ (80046f8 <MadgwickAHRSupdate+0xef4>)
 80045fe:	ed93 6a00 	vldr	s12, [r3]
 8004602:	4b3c      	ldr	r3, [pc, #240]	@ (80046f4 <MadgwickAHRSupdate+0xef0>)
 8004604:	edd3 7a00 	vldr	s15, [r3]
 8004608:	ee36 6a27 	vadd.f32	s12, s12, s15
 800460c:	4b38      	ldr	r3, [pc, #224]	@ (80046f0 <MadgwickAHRSupdate+0xeec>)
 800460e:	edd3 7a00 	vldr	s15, [r3]
 8004612:	ee26 6a27 	vmul.f32	s12, s12, s15
 8004616:	4b43      	ldr	r3, [pc, #268]	@ (8004724 <MadgwickAHRSupdate+0xf20>)
 8004618:	edd3 7a00 	vldr	s15, [r3]
 800461c:	eef6 5a00 	vmov.f32	s11, #96	@ 0x3f000000  0.5
 8004620:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8004624:	4b40      	ldr	r3, [pc, #256]	@ (8004728 <MadgwickAHRSupdate+0xf24>)
 8004626:	edd3 7a00 	vldr	s15, [r3]
 800462a:	ee75 5ae7 	vsub.f32	s11, s11, s15
 800462e:	4b33      	ldr	r3, [pc, #204]	@ (80046fc <MadgwickAHRSupdate+0xef8>)
 8004630:	edd3 7a00 	vldr	s15, [r3]
 8004634:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8004638:	ee36 6a27 	vadd.f32	s12, s12, s15
								- mz);
 800463c:	edd7 7a01 	vldr	s15, [r7, #4]
 8004640:	ee76 7a67 	vsub.f32	s15, s12, s15
						* (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2)
 8004644:	ee66 7aa7 	vmul.f32	s15, s13, s15
				+ _2bx * q1
 8004648:	ee77 7a27 	vadd.f32	s15, s14, s15
		s3 = _2q1 * (2.0f * q1q3 - _2q0q2 - ax)
 800464c:	4b3d      	ldr	r3, [pc, #244]	@ (8004744 <MadgwickAHRSupdate+0xf40>)
 800464e:	edc3 7a00 	vstr	s15, [r3]
		recipNorm = invSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3); // normalise step magnitude
 8004652:	4b3d      	ldr	r3, [pc, #244]	@ (8004748 <MadgwickAHRSupdate+0xf44>)
 8004654:	ed93 7a00 	vldr	s14, [r3]
 8004658:	4b3b      	ldr	r3, [pc, #236]	@ (8004748 <MadgwickAHRSupdate+0xf44>)
 800465a:	edd3 7a00 	vldr	s15, [r3]
 800465e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004662:	4b3a      	ldr	r3, [pc, #232]	@ (800474c <MadgwickAHRSupdate+0xf48>)
 8004664:	edd3 6a00 	vldr	s13, [r3]
 8004668:	4b38      	ldr	r3, [pc, #224]	@ (800474c <MadgwickAHRSupdate+0xf48>)
 800466a:	edd3 7a00 	vldr	s15, [r3]
 800466e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004672:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004676:	4b2d      	ldr	r3, [pc, #180]	@ (800472c <MadgwickAHRSupdate+0xf28>)
 8004678:	edd3 6a00 	vldr	s13, [r3]
 800467c:	4b2b      	ldr	r3, [pc, #172]	@ (800472c <MadgwickAHRSupdate+0xf28>)
 800467e:	edd3 7a00 	vldr	s15, [r3]
 8004682:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004686:	ee37 7a27 	vadd.f32	s14, s14, s15
 800468a:	4b2e      	ldr	r3, [pc, #184]	@ (8004744 <MadgwickAHRSupdate+0xf40>)
 800468c:	edd3 6a00 	vldr	s13, [r3]
 8004690:	4b2c      	ldr	r3, [pc, #176]	@ (8004744 <MadgwickAHRSupdate+0xf40>)
 8004692:	edd3 7a00 	vldr	s15, [r3]
 8004696:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800469a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800469e:	eeb0 0a67 	vmov.f32	s0, s15
 80046a2:	f7ff f805 	bl	80036b0 <invSqrt>
 80046a6:	eef0 7a40 	vmov.f32	s15, s0
 80046aa:	4b29      	ldr	r3, [pc, #164]	@ (8004750 <MadgwickAHRSupdate+0xf4c>)
 80046ac:	edc3 7a00 	vstr	s15, [r3]
		s0 *= recipNorm;
 80046b0:	4b25      	ldr	r3, [pc, #148]	@ (8004748 <MadgwickAHRSupdate+0xf44>)
 80046b2:	ed93 7a00 	vldr	s14, [r3]
 80046b6:	4b26      	ldr	r3, [pc, #152]	@ (8004750 <MadgwickAHRSupdate+0xf4c>)
 80046b8:	edd3 7a00 	vldr	s15, [r3]
 80046bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046c0:	4b21      	ldr	r3, [pc, #132]	@ (8004748 <MadgwickAHRSupdate+0xf44>)
 80046c2:	edc3 7a00 	vstr	s15, [r3]
		s1 *= recipNorm;
 80046c6:	4b21      	ldr	r3, [pc, #132]	@ (800474c <MadgwickAHRSupdate+0xf48>)
 80046c8:	ed93 7a00 	vldr	s14, [r3]
 80046cc:	4b20      	ldr	r3, [pc, #128]	@ (8004750 <MadgwickAHRSupdate+0xf4c>)
 80046ce:	edd3 7a00 	vldr	s15, [r3]
 80046d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046d6:	4b1d      	ldr	r3, [pc, #116]	@ (800474c <MadgwickAHRSupdate+0xf48>)
 80046d8:	edc3 7a00 	vstr	s15, [r3]
		s2 *= recipNorm;
 80046dc:	4b13      	ldr	r3, [pc, #76]	@ (800472c <MadgwickAHRSupdate+0xf28>)
 80046de:	ed93 7a00 	vldr	s14, [r3]
 80046e2:	4b1b      	ldr	r3, [pc, #108]	@ (8004750 <MadgwickAHRSupdate+0xf4c>)
 80046e4:	edd3 7a00 	vldr	s15, [r3]
 80046e8:	e034      	b.n	8004754 <MadgwickAHRSupdate+0xf50>
 80046ea:	bf00      	nop
 80046ec:	20000458 	.word	0x20000458
 80046f0:	2000040c 	.word	0x2000040c
 80046f4:	2000044c 	.word	0x2000044c
 80046f8:	2000043c 	.word	0x2000043c
 80046fc:	20000410 	.word	0x20000410
 8004700:	20000480 	.word	0x20000480
 8004704:	20000488 	.word	0x20000488
 8004708:	20000448 	.word	0x20000448
 800470c:	20000440 	.word	0x20000440
 8004710:	20000438 	.word	0x20000438
 8004714:	20000454 	.word	0x20000454
 8004718:	20000008 	.word	0x20000008
 800471c:	20000418 	.word	0x20000418
 8004720:	20000484 	.word	0x20000484
 8004724:	20000444 	.word	0x20000444
 8004728:	20000450 	.word	0x20000450
 800472c:	200003dc 	.word	0x200003dc
 8004730:	2000042c 	.word	0x2000042c
 8004734:	20000420 	.word	0x20000420
 8004738:	20000430 	.word	0x20000430
 800473c:	20000424 	.word	0x20000424
 8004740:	20000414 	.word	0x20000414
 8004744:	200003e0 	.word	0x200003e0
 8004748:	200003d4 	.word	0x200003d4
 800474c:	200003d8 	.word	0x200003d8
 8004750:	200003d0 	.word	0x200003d0
 8004754:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004758:	4b76      	ldr	r3, [pc, #472]	@ (8004934 <MadgwickAHRSupdate+0x1130>)
 800475a:	edc3 7a00 	vstr	s15, [r3]
		s3 *= recipNorm;
 800475e:	4b76      	ldr	r3, [pc, #472]	@ (8004938 <MadgwickAHRSupdate+0x1134>)
 8004760:	ed93 7a00 	vldr	s14, [r3]
 8004764:	4b75      	ldr	r3, [pc, #468]	@ (800493c <MadgwickAHRSupdate+0x1138>)
 8004766:	edd3 7a00 	vldr	s15, [r3]
 800476a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800476e:	4b72      	ldr	r3, [pc, #456]	@ (8004938 <MadgwickAHRSupdate+0x1134>)
 8004770:	edc3 7a00 	vstr	s15, [r3]

		qDot1 -= beta * s0;
 8004774:	4b72      	ldr	r3, [pc, #456]	@ (8004940 <MadgwickAHRSupdate+0x113c>)
 8004776:	ed93 7a00 	vldr	s14, [r3]
 800477a:	4b72      	ldr	r3, [pc, #456]	@ (8004944 <MadgwickAHRSupdate+0x1140>)
 800477c:	edd3 7a00 	vldr	s15, [r3]
 8004780:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004784:	4b70      	ldr	r3, [pc, #448]	@ (8004948 <MadgwickAHRSupdate+0x1144>)
 8004786:	ed93 7a00 	vldr	s14, [r3]
 800478a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800478e:	4b6e      	ldr	r3, [pc, #440]	@ (8004948 <MadgwickAHRSupdate+0x1144>)
 8004790:	edc3 7a00 	vstr	s15, [r3]
		qDot2 -= beta * s1;
 8004794:	4b6a      	ldr	r3, [pc, #424]	@ (8004940 <MadgwickAHRSupdate+0x113c>)
 8004796:	ed93 7a00 	vldr	s14, [r3]
 800479a:	4b6c      	ldr	r3, [pc, #432]	@ (800494c <MadgwickAHRSupdate+0x1148>)
 800479c:	edd3 7a00 	vldr	s15, [r3]
 80047a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047a4:	4b6a      	ldr	r3, [pc, #424]	@ (8004950 <MadgwickAHRSupdate+0x114c>)
 80047a6:	ed93 7a00 	vldr	s14, [r3]
 80047aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80047ae:	4b68      	ldr	r3, [pc, #416]	@ (8004950 <MadgwickAHRSupdate+0x114c>)
 80047b0:	edc3 7a00 	vstr	s15, [r3]
		qDot3 -= beta * s2;
 80047b4:	4b62      	ldr	r3, [pc, #392]	@ (8004940 <MadgwickAHRSupdate+0x113c>)
 80047b6:	ed93 7a00 	vldr	s14, [r3]
 80047ba:	4b5e      	ldr	r3, [pc, #376]	@ (8004934 <MadgwickAHRSupdate+0x1130>)
 80047bc:	edd3 7a00 	vldr	s15, [r3]
 80047c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047c4:	4b63      	ldr	r3, [pc, #396]	@ (8004954 <MadgwickAHRSupdate+0x1150>)
 80047c6:	ed93 7a00 	vldr	s14, [r3]
 80047ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 80047ce:	4b61      	ldr	r3, [pc, #388]	@ (8004954 <MadgwickAHRSupdate+0x1150>)
 80047d0:	edc3 7a00 	vstr	s15, [r3]
		qDot4 -= beta * s3;
 80047d4:	4b5a      	ldr	r3, [pc, #360]	@ (8004940 <MadgwickAHRSupdate+0x113c>)
 80047d6:	ed93 7a00 	vldr	s14, [r3]
 80047da:	4b57      	ldr	r3, [pc, #348]	@ (8004938 <MadgwickAHRSupdate+0x1134>)
 80047dc:	edd3 7a00 	vldr	s15, [r3]
 80047e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047e4:	4b5c      	ldr	r3, [pc, #368]	@ (8004958 <MadgwickAHRSupdate+0x1154>)
 80047e6:	ed93 7a00 	vldr	s14, [r3]
 80047ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80047ee:	4b5a      	ldr	r3, [pc, #360]	@ (8004958 <MadgwickAHRSupdate+0x1154>)
 80047f0:	edc3 7a00 	vstr	s15, [r3]
	}

	q0 += qDot1 * (deltat);
 80047f4:	4b54      	ldr	r3, [pc, #336]	@ (8004948 <MadgwickAHRSupdate+0x1144>)
 80047f6:	ed93 7a00 	vldr	s14, [r3]
 80047fa:	4b58      	ldr	r3, [pc, #352]	@ (800495c <MadgwickAHRSupdate+0x1158>)
 80047fc:	edd3 7a00 	vldr	s15, [r3]
 8004800:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004804:	4b56      	ldr	r3, [pc, #344]	@ (8004960 <MadgwickAHRSupdate+0x115c>)
 8004806:	edd3 7a00 	vldr	s15, [r3]
 800480a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800480e:	4b54      	ldr	r3, [pc, #336]	@ (8004960 <MadgwickAHRSupdate+0x115c>)
 8004810:	edc3 7a00 	vstr	s15, [r3]
	q1 += qDot2 * (deltat);
 8004814:	4b4e      	ldr	r3, [pc, #312]	@ (8004950 <MadgwickAHRSupdate+0x114c>)
 8004816:	ed93 7a00 	vldr	s14, [r3]
 800481a:	4b50      	ldr	r3, [pc, #320]	@ (800495c <MadgwickAHRSupdate+0x1158>)
 800481c:	edd3 7a00 	vldr	s15, [r3]
 8004820:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004824:	4b4f      	ldr	r3, [pc, #316]	@ (8004964 <MadgwickAHRSupdate+0x1160>)
 8004826:	edd3 7a00 	vldr	s15, [r3]
 800482a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800482e:	4b4d      	ldr	r3, [pc, #308]	@ (8004964 <MadgwickAHRSupdate+0x1160>)
 8004830:	edc3 7a00 	vstr	s15, [r3]
	q2 += qDot3 * (deltat);
 8004834:	4b47      	ldr	r3, [pc, #284]	@ (8004954 <MadgwickAHRSupdate+0x1150>)
 8004836:	ed93 7a00 	vldr	s14, [r3]
 800483a:	4b48      	ldr	r3, [pc, #288]	@ (800495c <MadgwickAHRSupdate+0x1158>)
 800483c:	edd3 7a00 	vldr	s15, [r3]
 8004840:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004844:	4b48      	ldr	r3, [pc, #288]	@ (8004968 <MadgwickAHRSupdate+0x1164>)
 8004846:	edd3 7a00 	vldr	s15, [r3]
 800484a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800484e:	4b46      	ldr	r3, [pc, #280]	@ (8004968 <MadgwickAHRSupdate+0x1164>)
 8004850:	edc3 7a00 	vstr	s15, [r3]
	q3 += qDot4 * (deltat);
 8004854:	4b40      	ldr	r3, [pc, #256]	@ (8004958 <MadgwickAHRSupdate+0x1154>)
 8004856:	ed93 7a00 	vldr	s14, [r3]
 800485a:	4b40      	ldr	r3, [pc, #256]	@ (800495c <MadgwickAHRSupdate+0x1158>)
 800485c:	edd3 7a00 	vldr	s15, [r3]
 8004860:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004864:	4b41      	ldr	r3, [pc, #260]	@ (800496c <MadgwickAHRSupdate+0x1168>)
 8004866:	edd3 7a00 	vldr	s15, [r3]
 800486a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800486e:	4b3f      	ldr	r3, [pc, #252]	@ (800496c <MadgwickAHRSupdate+0x1168>)
 8004870:	edc3 7a00 	vstr	s15, [r3]

	recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 8004874:	4b3a      	ldr	r3, [pc, #232]	@ (8004960 <MadgwickAHRSupdate+0x115c>)
 8004876:	ed93 7a00 	vldr	s14, [r3]
 800487a:	4b39      	ldr	r3, [pc, #228]	@ (8004960 <MadgwickAHRSupdate+0x115c>)
 800487c:	edd3 7a00 	vldr	s15, [r3]
 8004880:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004884:	4b37      	ldr	r3, [pc, #220]	@ (8004964 <MadgwickAHRSupdate+0x1160>)
 8004886:	edd3 6a00 	vldr	s13, [r3]
 800488a:	4b36      	ldr	r3, [pc, #216]	@ (8004964 <MadgwickAHRSupdate+0x1160>)
 800488c:	edd3 7a00 	vldr	s15, [r3]
 8004890:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004894:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004898:	4b33      	ldr	r3, [pc, #204]	@ (8004968 <MadgwickAHRSupdate+0x1164>)
 800489a:	edd3 6a00 	vldr	s13, [r3]
 800489e:	4b32      	ldr	r3, [pc, #200]	@ (8004968 <MadgwickAHRSupdate+0x1164>)
 80048a0:	edd3 7a00 	vldr	s15, [r3]
 80048a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80048a8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80048ac:	4b2f      	ldr	r3, [pc, #188]	@ (800496c <MadgwickAHRSupdate+0x1168>)
 80048ae:	edd3 6a00 	vldr	s13, [r3]
 80048b2:	4b2e      	ldr	r3, [pc, #184]	@ (800496c <MadgwickAHRSupdate+0x1168>)
 80048b4:	edd3 7a00 	vldr	s15, [r3]
 80048b8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80048bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80048c0:	eeb0 0a67 	vmov.f32	s0, s15
 80048c4:	f7fe fef4 	bl	80036b0 <invSqrt>
 80048c8:	eef0 7a40 	vmov.f32	s15, s0
 80048cc:	4b1b      	ldr	r3, [pc, #108]	@ (800493c <MadgwickAHRSupdate+0x1138>)
 80048ce:	edc3 7a00 	vstr	s15, [r3]
	q0 *= recipNorm;
 80048d2:	4b23      	ldr	r3, [pc, #140]	@ (8004960 <MadgwickAHRSupdate+0x115c>)
 80048d4:	ed93 7a00 	vldr	s14, [r3]
 80048d8:	4b18      	ldr	r3, [pc, #96]	@ (800493c <MadgwickAHRSupdate+0x1138>)
 80048da:	edd3 7a00 	vldr	s15, [r3]
 80048de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048e2:	4b1f      	ldr	r3, [pc, #124]	@ (8004960 <MadgwickAHRSupdate+0x115c>)
 80048e4:	edc3 7a00 	vstr	s15, [r3]
	q1 *= recipNorm;
 80048e8:	4b1e      	ldr	r3, [pc, #120]	@ (8004964 <MadgwickAHRSupdate+0x1160>)
 80048ea:	ed93 7a00 	vldr	s14, [r3]
 80048ee:	4b13      	ldr	r3, [pc, #76]	@ (800493c <MadgwickAHRSupdate+0x1138>)
 80048f0:	edd3 7a00 	vldr	s15, [r3]
 80048f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048f8:	4b1a      	ldr	r3, [pc, #104]	@ (8004964 <MadgwickAHRSupdate+0x1160>)
 80048fa:	edc3 7a00 	vstr	s15, [r3]
	q2 *= recipNorm;
 80048fe:	4b1a      	ldr	r3, [pc, #104]	@ (8004968 <MadgwickAHRSupdate+0x1164>)
 8004900:	ed93 7a00 	vldr	s14, [r3]
 8004904:	4b0d      	ldr	r3, [pc, #52]	@ (800493c <MadgwickAHRSupdate+0x1138>)
 8004906:	edd3 7a00 	vldr	s15, [r3]
 800490a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800490e:	4b16      	ldr	r3, [pc, #88]	@ (8004968 <MadgwickAHRSupdate+0x1164>)
 8004910:	edc3 7a00 	vstr	s15, [r3]
	q3 *= recipNorm;
 8004914:	4b15      	ldr	r3, [pc, #84]	@ (800496c <MadgwickAHRSupdate+0x1168>)
 8004916:	ed93 7a00 	vldr	s14, [r3]
 800491a:	4b08      	ldr	r3, [pc, #32]	@ (800493c <MadgwickAHRSupdate+0x1138>)
 800491c:	edd3 7a00 	vldr	s15, [r3]
 8004920:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004924:	4b11      	ldr	r3, [pc, #68]	@ (800496c <MadgwickAHRSupdate+0x1168>)
 8004926:	edc3 7a00 	vstr	s15, [r3]
}
 800492a:	bf00      	nop
 800492c:	3728      	adds	r7, #40	@ 0x28
 800492e:	46bd      	mov	sp, r7
 8004930:	bd80      	pop	{r7, pc}
 8004932:	bf00      	nop
 8004934:	200003dc 	.word	0x200003dc
 8004938:	200003e0 	.word	0x200003e0
 800493c:	200003d0 	.word	0x200003d0
 8004940:	2000000c 	.word	0x2000000c
 8004944:	200003d4 	.word	0x200003d4
 8004948:	200003e4 	.word	0x200003e4
 800494c:	200003d8 	.word	0x200003d8
 8004950:	200003e8 	.word	0x200003e8
 8004954:	200003ec 	.word	0x200003ec
 8004958:	200003f0 	.word	0x200003f0
 800495c:	2000048c 	.word	0x2000048c
 8004960:	20000008 	.word	0x20000008
 8004964:	20000480 	.word	0x20000480
 8004968:	20000484 	.word	0x20000484
 800496c:	20000488 	.word	0x20000488

08004970 <LSM9DS1_ReadGyro_DMA>:

//low_power_code
void LSM9DS1_ReadGyro_DMA(void) {
 8004970:	b580      	push	{r7, lr}
 8004972:	b082      	sub	sp, #8
 8004974:	af02      	add	r7, sp, #8
	HAL_I2C_Mem_Read_DMA(&hi2c1, LSM9DS1_ADDR, OUT_X_G | 0x80,
 8004976:	2306      	movs	r3, #6
 8004978:	9301      	str	r3, [sp, #4]
 800497a:	4b05      	ldr	r3, [pc, #20]	@ (8004990 <LSM9DS1_ReadGyro_DMA+0x20>)
 800497c:	9300      	str	r3, [sp, #0]
 800497e:	2301      	movs	r3, #1
 8004980:	2298      	movs	r2, #152	@ 0x98
 8004982:	21d4      	movs	r1, #212	@ 0xd4
 8004984:	4803      	ldr	r0, [pc, #12]	@ (8004994 <LSM9DS1_ReadGyro_DMA+0x24>)
 8004986:	f003 ffe9 	bl	800895c <HAL_I2C_Mem_Read_DMA>
	I2C_MEMADD_SIZE_8BIT, gyro_buffer, 6);
}
 800498a:	bf00      	nop
 800498c:	46bd      	mov	sp, r7
 800498e:	bd80      	pop	{r7, pc}
 8004990:	20000358 	.word	0x20000358
 8004994:	200001f8 	.word	0x200001f8

08004998 <LSM9DS1_ReadAccel_DMA>:

void LSM9DS1_ReadAccel_DMA(void) {
 8004998:	b580      	push	{r7, lr}
 800499a:	b082      	sub	sp, #8
 800499c:	af02      	add	r7, sp, #8
	HAL_I2C_Mem_Read_DMA(&hi2c1, LSM9DS1_ADDR, OUT_X_XL | 0x80,
 800499e:	2306      	movs	r3, #6
 80049a0:	9301      	str	r3, [sp, #4]
 80049a2:	4b05      	ldr	r3, [pc, #20]	@ (80049b8 <LSM9DS1_ReadAccel_DMA+0x20>)
 80049a4:	9300      	str	r3, [sp, #0]
 80049a6:	2301      	movs	r3, #1
 80049a8:	22a8      	movs	r2, #168	@ 0xa8
 80049aa:	21d4      	movs	r1, #212	@ 0xd4
 80049ac:	4803      	ldr	r0, [pc, #12]	@ (80049bc <LSM9DS1_ReadAccel_DMA+0x24>)
 80049ae:	f003 ffd5 	bl	800895c <HAL_I2C_Mem_Read_DMA>
	I2C_MEMADD_SIZE_8BIT, accel_buffer, 6);
}
 80049b2:	bf00      	nop
 80049b4:	46bd      	mov	sp, r7
 80049b6:	bd80      	pop	{r7, pc}
 80049b8:	20000360 	.word	0x20000360
 80049bc:	200001f8 	.word	0x200001f8

080049c0 <LSM9DS1_ReadMag_DMA>:

void LSM9DS1_ReadMag_DMA(void) {
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b082      	sub	sp, #8
 80049c4:	af02      	add	r7, sp, #8
	HAL_I2C_Mem_Read_DMA(&hi2c1, MAG_ADDR, OUT_X_M | 0x80, I2C_MEMADD_SIZE_8BIT,
 80049c6:	2306      	movs	r3, #6
 80049c8:	9301      	str	r3, [sp, #4]
 80049ca:	4b05      	ldr	r3, [pc, #20]	@ (80049e0 <LSM9DS1_ReadMag_DMA+0x20>)
 80049cc:	9300      	str	r3, [sp, #0]
 80049ce:	2301      	movs	r3, #1
 80049d0:	22a8      	movs	r2, #168	@ 0xa8
 80049d2:	213c      	movs	r1, #60	@ 0x3c
 80049d4:	4803      	ldr	r0, [pc, #12]	@ (80049e4 <LSM9DS1_ReadMag_DMA+0x24>)
 80049d6:	f003 ffc1 	bl	800895c <HAL_I2C_Mem_Read_DMA>
			mag_buffer, 6);
}
 80049da:	bf00      	nop
 80049dc:	46bd      	mov	sp, r7
 80049de:	bd80      	pop	{r7, pc}
 80049e0:	20000368 	.word	0x20000368
 80049e4:	200001f8 	.word	0x200001f8

080049e8 <magcal_Init>:

void magcal_Init(void) {
 80049e8:	b580      	push	{r7, lr}
 80049ea:	af00      	add	r7, sp, #0
	memset(&magcal, 0, sizeof(magcal));
 80049ec:	f241 52e4 	movw	r2, #5604	@ 0x15e4
 80049f0:	2100      	movs	r1, #0
 80049f2:	480e      	ldr	r0, [pc, #56]	@ (8004a2c <magcal_Init+0x44>)
 80049f4:	f00b fe7b 	bl	80106ee <memset>
	magcal.V[2] = 80.0f;
 80049f8:	4b0c      	ldr	r3, [pc, #48]	@ (8004a2c <magcal_Init+0x44>)
 80049fa:	4a0d      	ldr	r2, [pc, #52]	@ (8004a30 <magcal_Init+0x48>)
 80049fc:	609a      	str	r2, [r3, #8]
	magcal.invW[0][0] = 1.0f;
 80049fe:	4b0b      	ldr	r3, [pc, #44]	@ (8004a2c <magcal_Init+0x44>)
 8004a00:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8004a04:	60da      	str	r2, [r3, #12]
	magcal.invW[1][1] = 1.0f;
 8004a06:	4b09      	ldr	r3, [pc, #36]	@ (8004a2c <magcal_Init+0x44>)
 8004a08:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8004a0c:	61da      	str	r2, [r3, #28]
	magcal.invW[2][2] = 1.0f;
 8004a0e:	4b07      	ldr	r3, [pc, #28]	@ (8004a2c <magcal_Init+0x44>)
 8004a10:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8004a14:	62da      	str	r2, [r3, #44]	@ 0x2c
	magcal.FitError = 100.0f;
 8004a16:	4b05      	ldr	r3, [pc, #20]	@ (8004a2c <magcal_Init+0x44>)
 8004a18:	4a06      	ldr	r2, [pc, #24]	@ (8004a34 <magcal_Init+0x4c>)
 8004a1a:	639a      	str	r2, [r3, #56]	@ 0x38
	magcal.FitErrorAge = 100.0f;
 8004a1c:	4b03      	ldr	r3, [pc, #12]	@ (8004a2c <magcal_Init+0x44>)
 8004a1e:	4a05      	ldr	r2, [pc, #20]	@ (8004a34 <magcal_Init+0x4c>)
 8004a20:	63da      	str	r2, [r3, #60]	@ 0x3c
	magcal.B = 50.0f;
 8004a22:	4b02      	ldr	r3, [pc, #8]	@ (8004a2c <magcal_Init+0x44>)
 8004a24:	4a04      	ldr	r2, [pc, #16]	@ (8004a38 <magcal_Init+0x50>)
 8004a26:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004a28:	bf00      	nop
 8004a2a:	bd80      	pop	{r7, pc}
 8004a2c:	200004f0 	.word	0x200004f0
 8004a30:	42a00000 	.word	0x42a00000
 8004a34:	42c80000 	.word	0x42c80000
 8004a38:	42480000 	.word	0x42480000

08004a3c <apply_calibration>:

static int chunk_i = 0;
static int chunk_j = 0;

void apply_calibration(int16_t rawx, int16_t rawy, int16_t rawz, Point_t *out)
{
 8004a3c:	b480      	push	{r7}
 8004a3e:	b089      	sub	sp, #36	@ 0x24
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	607b      	str	r3, [r7, #4]
 8004a44:	4603      	mov	r3, r0
 8004a46:	81fb      	strh	r3, [r7, #14]
 8004a48:	460b      	mov	r3, r1
 8004a4a:	81bb      	strh	r3, [r7, #12]
 8004a4c:	4613      	mov	r3, r2
 8004a4e:	817b      	strh	r3, [r7, #10]
	float x, y, z;

	x = ((float)rawx * UT_PER_COUNT) - magcal.V[0];
 8004a50:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004a54:	ee07 3a90 	vmov	s15, r3
 8004a58:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004a5c:	ed9f 7a43 	vldr	s14, [pc, #268]	@ 8004b6c <apply_calibration+0x130>
 8004a60:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004a64:	4b42      	ldr	r3, [pc, #264]	@ (8004b70 <apply_calibration+0x134>)
 8004a66:	edd3 7a00 	vldr	s15, [r3]
 8004a6a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004a6e:	edc7 7a07 	vstr	s15, [r7, #28]
	y = ((float)rawy * UT_PER_COUNT) - magcal.V[1];
 8004a72:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004a76:	ee07 3a90 	vmov	s15, r3
 8004a7a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004a7e:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 8004b6c <apply_calibration+0x130>
 8004a82:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004a86:	4b3a      	ldr	r3, [pc, #232]	@ (8004b70 <apply_calibration+0x134>)
 8004a88:	edd3 7a01 	vldr	s15, [r3, #4]
 8004a8c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004a90:	edc7 7a06 	vstr	s15, [r7, #24]
	z = ((float)rawz * UT_PER_COUNT) - magcal.V[2];
 8004a94:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8004a98:	ee07 3a90 	vmov	s15, r3
 8004a9c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004aa0:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8004b6c <apply_calibration+0x130>
 8004aa4:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004aa8:	4b31      	ldr	r3, [pc, #196]	@ (8004b70 <apply_calibration+0x134>)
 8004aaa:	edd3 7a02 	vldr	s15, [r3, #8]
 8004aae:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004ab2:	edc7 7a05 	vstr	s15, [r7, #20]
	out->x = x * magcal.invW[0][0] + y * magcal.invW[0][1] + z * magcal.invW[0][2];
 8004ab6:	4b2e      	ldr	r3, [pc, #184]	@ (8004b70 <apply_calibration+0x134>)
 8004ab8:	ed93 7a03 	vldr	s14, [r3, #12]
 8004abc:	edd7 7a07 	vldr	s15, [r7, #28]
 8004ac0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004ac4:	4b2a      	ldr	r3, [pc, #168]	@ (8004b70 <apply_calibration+0x134>)
 8004ac6:	edd3 6a04 	vldr	s13, [r3, #16]
 8004aca:	edd7 7a06 	vldr	s15, [r7, #24]
 8004ace:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004ad2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004ad6:	4b26      	ldr	r3, [pc, #152]	@ (8004b70 <apply_calibration+0x134>)
 8004ad8:	edd3 6a05 	vldr	s13, [r3, #20]
 8004adc:	edd7 7a05 	vldr	s15, [r7, #20]
 8004ae0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004ae4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	edc3 7a00 	vstr	s15, [r3]
	out->y = x * magcal.invW[1][0] + y * magcal.invW[1][1] + z * magcal.invW[1][2];
 8004aee:	4b20      	ldr	r3, [pc, #128]	@ (8004b70 <apply_calibration+0x134>)
 8004af0:	ed93 7a06 	vldr	s14, [r3, #24]
 8004af4:	edd7 7a07 	vldr	s15, [r7, #28]
 8004af8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004afc:	4b1c      	ldr	r3, [pc, #112]	@ (8004b70 <apply_calibration+0x134>)
 8004afe:	edd3 6a07 	vldr	s13, [r3, #28]
 8004b02:	edd7 7a06 	vldr	s15, [r7, #24]
 8004b06:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004b0a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004b0e:	4b18      	ldr	r3, [pc, #96]	@ (8004b70 <apply_calibration+0x134>)
 8004b10:	edd3 6a08 	vldr	s13, [r3, #32]
 8004b14:	edd7 7a05 	vldr	s15, [r7, #20]
 8004b18:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004b1c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	edc3 7a01 	vstr	s15, [r3, #4]
	out->z = x * magcal.invW[2][0] + y * magcal.invW[2][1] + z * magcal.invW[2][2];
 8004b26:	4b12      	ldr	r3, [pc, #72]	@ (8004b70 <apply_calibration+0x134>)
 8004b28:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8004b2c:	edd7 7a07 	vldr	s15, [r7, #28]
 8004b30:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004b34:	4b0e      	ldr	r3, [pc, #56]	@ (8004b70 <apply_calibration+0x134>)
 8004b36:	edd3 6a0a 	vldr	s13, [r3, #40]	@ 0x28
 8004b3a:	edd7 7a06 	vldr	s15, [r7, #24]
 8004b3e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004b42:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004b46:	4b0a      	ldr	r3, [pc, #40]	@ (8004b70 <apply_calibration+0x134>)
 8004b48:	edd3 6a0b 	vldr	s13, [r3, #44]	@ 0x2c
 8004b4c:	edd7 7a05 	vldr	s15, [r7, #20]
 8004b50:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004b54:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8004b5e:	bf00      	nop
 8004b60:	3724      	adds	r7, #36	@ 0x24
 8004b62:	46bd      	mov	sp, r7
 8004b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b68:	4770      	bx	lr
 8004b6a:	bf00      	nop
 8004b6c:	3dcccccd 	.word	0x3dcccccd
 8004b70:	200004f0 	.word	0x200004f0

08004b74 <choose_discard_magcal>:

static int choose_discard_magcal(void) {
 8004b74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b78:	b092      	sub	sp, #72	@ 0x48
 8004b7a:	af00      	add	r7, sp, #0
	choose_flag = 1;
 8004b7c:	4a7a      	ldr	r2, [pc, #488]	@ (8004d68 <choose_discard_magcal+0x1f4>)
 8004b7e:	2301      	movs	r3, #1
 8004b80:	6013      	str	r3, [r2, #0]
	// When enough data is collected (gaps error is low), assume we
	// have a pretty good coverage and the field stregth is known.
	gaps = quality_surface_gap_error();
 8004b82:	f002 faf7 	bl	8007174 <quality_surface_gap_error>
 8004b86:	eef0 7a40 	vmov.f32	s15, s0
 8004b8a:	4b78      	ldr	r3, [pc, #480]	@ (8004d6c <choose_discard_magcal+0x1f8>)
 8004b8c:	edc3 7a00 	vstr	s15, [r3]
	if (gaps < 25.0f)
 8004b90:	4b76      	ldr	r3, [pc, #472]	@ (8004d6c <choose_discard_magcal+0x1f8>)
 8004b92:	edd3 7a00 	vldr	s15, [r3]
 8004b96:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 8004b9a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004b9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ba2:	f140 80bc 	bpl.w	8004d1e <choose_discard_magcal+0x1aa>
	{
		// occasionally look for points farthest from average field strength
		// always rate limit assumption-based data purging, but allow the
		// rate to increase as the angular coverage improves.
		if (gaps < 1.0f)
 8004ba6:	4b71      	ldr	r3, [pc, #452]	@ (8004d6c <choose_discard_magcal+0x1f8>)
 8004ba8:	edd3 7a00 	vldr	s15, [r3]
 8004bac:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004bb0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004bb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bb8:	d503      	bpl.n	8004bc2 <choose_discard_magcal+0x4e>
			gaps = 1.0f;
 8004bba:	4a6c      	ldr	r2, [pc, #432]	@ (8004d6c <choose_discard_magcal+0x1f8>)
 8004bbc:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8004bc0:	6013      	str	r3, [r2, #0]
		if (++runcount > (int) (gaps * 10.0f))
 8004bc2:	4b6b      	ldr	r3, [pc, #428]	@ (8004d70 <choose_discard_magcal+0x1fc>)
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	1c5a      	adds	r2, r3, #1
 8004bc8:	4b69      	ldr	r3, [pc, #420]	@ (8004d70 <choose_discard_magcal+0x1fc>)
 8004bca:	601a      	str	r2, [r3, #0]
 8004bcc:	4b68      	ldr	r3, [pc, #416]	@ (8004d70 <choose_discard_magcal+0x1fc>)
 8004bce:	681a      	ldr	r2, [r3, #0]
 8004bd0:	4b66      	ldr	r3, [pc, #408]	@ (8004d6c <choose_discard_magcal+0x1f8>)
 8004bd2:	edd3 7a00 	vldr	s15, [r3]
 8004bd6:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8004bda:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004bde:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004be2:	ee17 3a90 	vmov	r3, s15
 8004be6:	429a      	cmp	r2, r3
 8004be8:	f340 809c 	ble.w	8004d24 <choose_discard_magcal+0x1b0>
		{
			j = MAGBUFFSIZE;
 8004bec:	4a61      	ldr	r2, [pc, #388]	@ (8004d74 <choose_discard_magcal+0x200>)
 8004bee:	f240 238a 	movw	r3, #650	@ 0x28a
 8004bf2:	6013      	str	r3, [r2, #0]
			errormax = 0.0f;
 8004bf4:	4a60      	ldr	r2, [pc, #384]	@ (8004d78 <choose_discard_magcal+0x204>)
 8004bf6:	f04f 0300 	mov.w	r3, #0
 8004bfa:	6013      	str	r3, [r2, #0]
			for (i = 0; i < MAGBUFFSIZE; i++)
 8004bfc:	4a5f      	ldr	r2, [pc, #380]	@ (8004d7c <choose_discard_magcal+0x208>)
 8004bfe:	2300      	movs	r3, #0
 8004c00:	6013      	str	r3, [r2, #0]
 8004c02:	e079      	b.n	8004cf8 <choose_discard_magcal+0x184>
			{
				rawx = magcal.BpFast[0][i];
 8004c04:	4b5d      	ldr	r3, [pc, #372]	@ (8004d7c <choose_discard_magcal+0x208>)
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	4a5d      	ldr	r2, [pc, #372]	@ (8004d80 <choose_discard_magcal+0x20c>)
 8004c0a:	f503 7303 	add.w	r3, r3, #524	@ 0x20c
 8004c0e:	005b      	lsls	r3, r3, #1
 8004c10:	4413      	add	r3, r2
 8004c12:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004c16:	461a      	mov	r2, r3
 8004c18:	4b5a      	ldr	r3, [pc, #360]	@ (8004d84 <choose_discard_magcal+0x210>)
 8004c1a:	601a      	str	r2, [r3, #0]
				rawy = magcal.BpFast[1][i];
 8004c1c:	4b57      	ldr	r3, [pc, #348]	@ (8004d7c <choose_discard_magcal+0x208>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4a57      	ldr	r2, [pc, #348]	@ (8004d80 <choose_discard_magcal+0x20c>)
 8004c22:	f203 4396 	addw	r3, r3, #1174	@ 0x496
 8004c26:	005b      	lsls	r3, r3, #1
 8004c28:	4413      	add	r3, r2
 8004c2a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004c2e:	461a      	mov	r2, r3
 8004c30:	4b55      	ldr	r3, [pc, #340]	@ (8004d88 <choose_discard_magcal+0x214>)
 8004c32:	601a      	str	r2, [r3, #0]
				rawz = magcal.BpFast[2][i];
 8004c34:	4b51      	ldr	r3, [pc, #324]	@ (8004d7c <choose_discard_magcal+0x208>)
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4a51      	ldr	r2, [pc, #324]	@ (8004d80 <choose_discard_magcal+0x20c>)
 8004c3a:	f503 63e4 	add.w	r3, r3, #1824	@ 0x720
 8004c3e:	005b      	lsls	r3, r3, #1
 8004c40:	4413      	add	r3, r2
 8004c42:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004c46:	461a      	mov	r2, r3
 8004c48:	4b50      	ldr	r3, [pc, #320]	@ (8004d8c <choose_discard_magcal+0x218>)
 8004c4a:	601a      	str	r2, [r3, #0]
//				apply_calibration(rawx, rawy, rawz, &point);
				x = point.x;
 8004c4c:	4b50      	ldr	r3, [pc, #320]	@ (8004d90 <choose_discard_magcal+0x21c>)
 8004c4e:	681a      	ldr	r2, [r3, #0]
 8004c50:	4b50      	ldr	r3, [pc, #320]	@ (8004d94 <choose_discard_magcal+0x220>)
 8004c52:	601a      	str	r2, [r3, #0]
				y = point.y;
 8004c54:	4b4e      	ldr	r3, [pc, #312]	@ (8004d90 <choose_discard_magcal+0x21c>)
 8004c56:	685a      	ldr	r2, [r3, #4]
 8004c58:	4b4f      	ldr	r3, [pc, #316]	@ (8004d98 <choose_discard_magcal+0x224>)
 8004c5a:	601a      	str	r2, [r3, #0]
				z = point.z;
 8004c5c:	4b4c      	ldr	r3, [pc, #304]	@ (8004d90 <choose_discard_magcal+0x21c>)
 8004c5e:	689a      	ldr	r2, [r3, #8]
 8004c60:	4b4e      	ldr	r3, [pc, #312]	@ (8004d9c <choose_discard_magcal+0x228>)
 8004c62:	601a      	str	r2, [r3, #0]
				field = sqrtf(x * x + y * y + z * z);
 8004c64:	4b4b      	ldr	r3, [pc, #300]	@ (8004d94 <choose_discard_magcal+0x220>)
 8004c66:	ed93 7a00 	vldr	s14, [r3]
 8004c6a:	4b4a      	ldr	r3, [pc, #296]	@ (8004d94 <choose_discard_magcal+0x220>)
 8004c6c:	edd3 7a00 	vldr	s15, [r3]
 8004c70:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004c74:	4b48      	ldr	r3, [pc, #288]	@ (8004d98 <choose_discard_magcal+0x224>)
 8004c76:	edd3 6a00 	vldr	s13, [r3]
 8004c7a:	4b47      	ldr	r3, [pc, #284]	@ (8004d98 <choose_discard_magcal+0x224>)
 8004c7c:	edd3 7a00 	vldr	s15, [r3]
 8004c80:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004c84:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004c88:	4b44      	ldr	r3, [pc, #272]	@ (8004d9c <choose_discard_magcal+0x228>)
 8004c8a:	edd3 6a00 	vldr	s13, [r3]
 8004c8e:	4b43      	ldr	r3, [pc, #268]	@ (8004d9c <choose_discard_magcal+0x228>)
 8004c90:	edd3 7a00 	vldr	s15, [r3]
 8004c94:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004c98:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004c9c:	eeb0 0a67 	vmov.f32	s0, s15
 8004ca0:	f00c fc56 	bl	8011550 <sqrtf>
 8004ca4:	eef0 7a40 	vmov.f32	s15, s0
 8004ca8:	4b3d      	ldr	r3, [pc, #244]	@ (8004da0 <choose_discard_magcal+0x22c>)
 8004caa:	edc3 7a00 	vstr	s15, [r3]
				// if magcal.B is bad, things could go horribly wrong
				error = fabsf(field - magcal.B);
 8004cae:	4b3c      	ldr	r3, [pc, #240]	@ (8004da0 <choose_discard_magcal+0x22c>)
 8004cb0:	ed93 7a00 	vldr	s14, [r3]
 8004cb4:	4b32      	ldr	r3, [pc, #200]	@ (8004d80 <choose_discard_magcal+0x20c>)
 8004cb6:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8004cba:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004cbe:	eef0 7ae7 	vabs.f32	s15, s15
 8004cc2:	4b38      	ldr	r3, [pc, #224]	@ (8004da4 <choose_discard_magcal+0x230>)
 8004cc4:	edc3 7a00 	vstr	s15, [r3]
				if (error > errormax) {
 8004cc8:	4b36      	ldr	r3, [pc, #216]	@ (8004da4 <choose_discard_magcal+0x230>)
 8004cca:	ed93 7a00 	vldr	s14, [r3]
 8004cce:	4b2a      	ldr	r3, [pc, #168]	@ (8004d78 <choose_discard_magcal+0x204>)
 8004cd0:	edd3 7a00 	vldr	s15, [r3]
 8004cd4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004cd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004cdc:	dd07      	ble.n	8004cee <choose_discard_magcal+0x17a>
					errormax = error;
 8004cde:	4b31      	ldr	r3, [pc, #196]	@ (8004da4 <choose_discard_magcal+0x230>)
 8004ce0:	681a      	ldr	r2, [r3, #0]
 8004ce2:	4b25      	ldr	r3, [pc, #148]	@ (8004d78 <choose_discard_magcal+0x204>)
 8004ce4:	601a      	str	r2, [r3, #0]
					j = i;
 8004ce6:	4b25      	ldr	r3, [pc, #148]	@ (8004d7c <choose_discard_magcal+0x208>)
 8004ce8:	681a      	ldr	r2, [r3, #0]
 8004cea:	4b22      	ldr	r3, [pc, #136]	@ (8004d74 <choose_discard_magcal+0x200>)
 8004cec:	601a      	str	r2, [r3, #0]
			for (i = 0; i < MAGBUFFSIZE; i++)
 8004cee:	4b23      	ldr	r3, [pc, #140]	@ (8004d7c <choose_discard_magcal+0x208>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	1c5a      	adds	r2, r3, #1
 8004cf4:	4b21      	ldr	r3, [pc, #132]	@ (8004d7c <choose_discard_magcal+0x208>)
 8004cf6:	601a      	str	r2, [r3, #0]
 8004cf8:	4b20      	ldr	r3, [pc, #128]	@ (8004d7c <choose_discard_magcal+0x208>)
 8004cfa:	681a      	ldr	r2, [r3, #0]
 8004cfc:	f240 2389 	movw	r3, #649	@ 0x289
 8004d00:	429a      	cmp	r2, r3
 8004d02:	f77f af7f 	ble.w	8004c04 <choose_discard_magcal+0x90>
				}
			}
			runcount = 0;
 8004d06:	4a1a      	ldr	r2, [pc, #104]	@ (8004d70 <choose_discard_magcal+0x1fc>)
 8004d08:	2300      	movs	r3, #0
 8004d0a:	6013      	str	r3, [r2, #0]
			if (j < MAGBUFFSIZE)
 8004d0c:	4b19      	ldr	r3, [pc, #100]	@ (8004d74 <choose_discard_magcal+0x200>)
 8004d0e:	681a      	ldr	r2, [r3, #0]
 8004d10:	f240 2389 	movw	r3, #649	@ 0x289
 8004d14:	429a      	cmp	r2, r3
 8004d16:	dc05      	bgt.n	8004d24 <choose_discard_magcal+0x1b0>
			{
				//printf("worst error at %d\n", j);
				return j;
 8004d18:	4b16      	ldr	r3, [pc, #88]	@ (8004d74 <choose_discard_magcal+0x200>)
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	e122      	b.n	8004f64 <choose_discard_magcal+0x3f0>
			}
		}
	}
	else
	{
		runcount = 0;
 8004d1e:	4a14      	ldr	r2, [pc, #80]	@ (8004d70 <choose_discard_magcal+0x1fc>)
 8004d20:	2300      	movs	r3, #0
 8004d22:	6013      	str	r3, [r2, #0]
//				minindex = (random() & 1) ? i : j;
//			}
//		}
//	}

	for (int cnt = 0; cnt < 10; cnt++) {
 8004d24:	2300      	movs	r3, #0
 8004d26:	647b      	str	r3, [r7, #68]	@ 0x44
 8004d28:	e116      	b.n	8004f58 <choose_discard_magcal+0x3e4>
	        if (chunk_i >= MAGBUFFSIZE) {
 8004d2a:	4b1f      	ldr	r3, [pc, #124]	@ (8004da8 <choose_discard_magcal+0x234>)
 8004d2c:	681a      	ldr	r2, [r3, #0]
 8004d2e:	f240 2389 	movw	r3, #649	@ 0x289
 8004d32:	429a      	cmp	r2, r3
 8004d34:	dd06      	ble.n	8004d44 <choose_discard_magcal+0x1d0>
	            chunk_i = 0;
 8004d36:	4b1c      	ldr	r3, [pc, #112]	@ (8004da8 <choose_discard_magcal+0x234>)
 8004d38:	2200      	movs	r2, #0
 8004d3a:	601a      	str	r2, [r3, #0]
	            chunk_j = 0;
 8004d3c:	4b1b      	ldr	r3, [pc, #108]	@ (8004dac <choose_discard_magcal+0x238>)
 8004d3e:	2200      	movs	r2, #0
 8004d40:	601a      	str	r2, [r3, #0]
	            break;
 8004d42:	e10d      	b.n	8004f60 <choose_discard_magcal+0x3ec>
	        }

	        if (chunk_j >= MAGBUFFSIZE) {
 8004d44:	4b19      	ldr	r3, [pc, #100]	@ (8004dac <choose_discard_magcal+0x238>)
 8004d46:	681a      	ldr	r2, [r3, #0]
 8004d48:	f240 2389 	movw	r3, #649	@ 0x289
 8004d4c:	429a      	cmp	r2, r3
 8004d4e:	dd2f      	ble.n	8004db0 <choose_discard_magcal+0x23c>
	            chunk_i++;
 8004d50:	4b15      	ldr	r3, [pc, #84]	@ (8004da8 <choose_discard_magcal+0x234>)
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	1c5a      	adds	r2, r3, #1
 8004d56:	4b14      	ldr	r3, [pc, #80]	@ (8004da8 <choose_discard_magcal+0x234>)
 8004d58:	601a      	str	r2, [r3, #0]
	            chunk_j = chunk_i + 1;
 8004d5a:	4b13      	ldr	r3, [pc, #76]	@ (8004da8 <choose_discard_magcal+0x234>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	1c5a      	adds	r2, r3, #1
 8004d60:	4b12      	ldr	r3, [pc, #72]	@ (8004dac <choose_discard_magcal+0x238>)
 8004d62:	601a      	str	r2, [r3, #0]
	            continue;
 8004d64:	e0f5      	b.n	8004f52 <choose_discard_magcal+0x3de>
 8004d66:	bf00      	nop
 8004d68:	20001b34 	.word	0x20001b34
 8004d6c:	20001b24 	.word	0x20001b24
 8004d70:	20001b08 	.word	0x20001b08
 8004d74:	20001b10 	.word	0x20001b10
 8004d78:	20001b30 	.word	0x20001b30
 8004d7c:	20001b0c 	.word	0x20001b0c
 8004d80:	200004f0 	.word	0x200004f0
 8004d84:	20001adc 	.word	0x20001adc
 8004d88:	20001ae0 	.word	0x20001ae0
 8004d8c:	20001ae4 	.word	0x20001ae4
 8004d90:	20001b18 	.word	0x20001b18
 8004d94:	20001af4 	.word	0x20001af4
 8004d98:	20001af8 	.word	0x20001af8
 8004d9c:	20001afc 	.word	0x20001afc
 8004da0:	20001b28 	.word	0x20001b28
 8004da4:	20001b2c 	.word	0x20001b2c
 8004da8:	20001b38 	.word	0x20001b38
 8004dac:	20001b3c 	.word	0x20001b3c
	        }

	        dx = magcal.BpFast[0][chunk_i] - magcal.BpFast[0][chunk_j];
 8004db0:	4b6f      	ldr	r3, [pc, #444]	@ (8004f70 <choose_discard_magcal+0x3fc>)
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	4a6f      	ldr	r2, [pc, #444]	@ (8004f74 <choose_discard_magcal+0x400>)
 8004db6:	f503 7303 	add.w	r3, r3, #524	@ 0x20c
 8004dba:	005b      	lsls	r3, r3, #1
 8004dbc:	4413      	add	r3, r2
 8004dbe:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004dc2:	4619      	mov	r1, r3
 8004dc4:	4b6c      	ldr	r3, [pc, #432]	@ (8004f78 <choose_discard_magcal+0x404>)
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	4a6a      	ldr	r2, [pc, #424]	@ (8004f74 <choose_discard_magcal+0x400>)
 8004dca:	f503 7303 	add.w	r3, r3, #524	@ 0x20c
 8004dce:	005b      	lsls	r3, r3, #1
 8004dd0:	4413      	add	r3, r2
 8004dd2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004dd6:	1aca      	subs	r2, r1, r3
 8004dd8:	4b68      	ldr	r3, [pc, #416]	@ (8004f7c <choose_discard_magcal+0x408>)
 8004dda:	601a      	str	r2, [r3, #0]
	        dy = magcal.BpFast[1][chunk_i] - magcal.BpFast[1][chunk_j];
 8004ddc:	4b64      	ldr	r3, [pc, #400]	@ (8004f70 <choose_discard_magcal+0x3fc>)
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	4a64      	ldr	r2, [pc, #400]	@ (8004f74 <choose_discard_magcal+0x400>)
 8004de2:	f203 4396 	addw	r3, r3, #1174	@ 0x496
 8004de6:	005b      	lsls	r3, r3, #1
 8004de8:	4413      	add	r3, r2
 8004dea:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004dee:	4619      	mov	r1, r3
 8004df0:	4b61      	ldr	r3, [pc, #388]	@ (8004f78 <choose_discard_magcal+0x404>)
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	4a5f      	ldr	r2, [pc, #380]	@ (8004f74 <choose_discard_magcal+0x400>)
 8004df6:	f203 4396 	addw	r3, r3, #1174	@ 0x496
 8004dfa:	005b      	lsls	r3, r3, #1
 8004dfc:	4413      	add	r3, r2
 8004dfe:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004e02:	1aca      	subs	r2, r1, r3
 8004e04:	4b5e      	ldr	r3, [pc, #376]	@ (8004f80 <choose_discard_magcal+0x40c>)
 8004e06:	601a      	str	r2, [r3, #0]
	        dz = magcal.BpFast[2][chunk_i] - magcal.BpFast[2][chunk_j];
 8004e08:	4b59      	ldr	r3, [pc, #356]	@ (8004f70 <choose_discard_magcal+0x3fc>)
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	4a59      	ldr	r2, [pc, #356]	@ (8004f74 <choose_discard_magcal+0x400>)
 8004e0e:	f503 63e4 	add.w	r3, r3, #1824	@ 0x720
 8004e12:	005b      	lsls	r3, r3, #1
 8004e14:	4413      	add	r3, r2
 8004e16:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004e1a:	4619      	mov	r1, r3
 8004e1c:	4b56      	ldr	r3, [pc, #344]	@ (8004f78 <choose_discard_magcal+0x404>)
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	4a54      	ldr	r2, [pc, #336]	@ (8004f74 <choose_discard_magcal+0x400>)
 8004e22:	f503 63e4 	add.w	r3, r3, #1824	@ 0x720
 8004e26:	005b      	lsls	r3, r3, #1
 8004e28:	4413      	add	r3, r2
 8004e2a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004e2e:	1aca      	subs	r2, r1, r3
 8004e30:	4b54      	ldr	r3, [pc, #336]	@ (8004f84 <choose_discard_magcal+0x410>)
 8004e32:	601a      	str	r2, [r3, #0]
	        distsq = (int64_t) dx * (int64_t) dx +
 8004e34:	4b51      	ldr	r3, [pc, #324]	@ (8004f7c <choose_discard_magcal+0x408>)
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	17da      	asrs	r2, r3, #31
 8004e3a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004e3c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004e3e:	4b4f      	ldr	r3, [pc, #316]	@ (8004f7c <choose_discard_magcal+0x408>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	17da      	asrs	r2, r3, #31
 8004e44:	633b      	str	r3, [r7, #48]	@ 0x30
 8004e46:	637a      	str	r2, [r7, #52]	@ 0x34
 8004e48:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8004e4c:	460b      	mov	r3, r1
 8004e4e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004e50:	fb02 f203 	mul.w	r2, r2, r3
 8004e54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e56:	e9c7 010e 	strd	r0, r1, [r7, #56]	@ 0x38
 8004e5a:	4601      	mov	r1, r0
 8004e5c:	fb01 f303 	mul.w	r3, r1, r3
 8004e60:	4413      	add	r3, r2
 8004e62:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004e64:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004e66:	fba2 4501 	umull	r4, r5, r2, r1
 8004e6a:	442b      	add	r3, r5
 8004e6c:	461d      	mov	r5, r3
	                 (int64_t) dy * (int64_t) dy +
 8004e6e:	4b44      	ldr	r3, [pc, #272]	@ (8004f80 <choose_discard_magcal+0x40c>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	17da      	asrs	r2, r3, #31
 8004e74:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004e76:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004e78:	4b41      	ldr	r3, [pc, #260]	@ (8004f80 <choose_discard_magcal+0x40c>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	17da      	asrs	r2, r3, #31
 8004e7e:	623b      	str	r3, [r7, #32]
 8004e80:	627a      	str	r2, [r7, #36]	@ 0x24
 8004e82:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8004e86:	460b      	mov	r3, r1
 8004e88:	6a3a      	ldr	r2, [r7, #32]
 8004e8a:	fb02 f203 	mul.w	r2, r2, r3
 8004e8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e90:	e9c7 010a 	strd	r0, r1, [r7, #40]	@ 0x28
 8004e94:	4601      	mov	r1, r0
 8004e96:	fb01 f303 	mul.w	r3, r1, r3
 8004e9a:	4413      	add	r3, r2
 8004e9c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004e9e:	6a39      	ldr	r1, [r7, #32]
 8004ea0:	fba2 ab01 	umull	sl, fp, r2, r1
 8004ea4:	445b      	add	r3, fp
 8004ea6:	469b      	mov	fp, r3
	        distsq = (int64_t) dx * (int64_t) dx +
 8004ea8:	eb14 030a 	adds.w	r3, r4, sl
 8004eac:	60bb      	str	r3, [r7, #8]
 8004eae:	eb45 030b 	adc.w	r3, r5, fp
 8004eb2:	60fb      	str	r3, [r7, #12]
	                 (int64_t) dz * (int64_t) dz;
 8004eb4:	4b33      	ldr	r3, [pc, #204]	@ (8004f84 <choose_discard_magcal+0x410>)
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	17da      	asrs	r2, r3, #31
 8004eba:	61bb      	str	r3, [r7, #24]
 8004ebc:	61fa      	str	r2, [r7, #28]
 8004ebe:	4b31      	ldr	r3, [pc, #196]	@ (8004f84 <choose_discard_magcal+0x410>)
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	17da      	asrs	r2, r3, #31
 8004ec4:	613b      	str	r3, [r7, #16]
 8004ec6:	617a      	str	r2, [r7, #20]
 8004ec8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004ecc:	460b      	mov	r3, r1
 8004ece:	693a      	ldr	r2, [r7, #16]
 8004ed0:	fb02 f203 	mul.w	r2, r2, r3
 8004ed4:	697b      	ldr	r3, [r7, #20]
 8004ed6:	e9c7 0106 	strd	r0, r1, [r7, #24]
 8004eda:	4601      	mov	r1, r0
 8004edc:	fb01 f303 	mul.w	r3, r1, r3
 8004ee0:	4413      	add	r3, r2
 8004ee2:	69ba      	ldr	r2, [r7, #24]
 8004ee4:	6939      	ldr	r1, [r7, #16]
 8004ee6:	fba2 8901 	umull	r8, r9, r2, r1
 8004eea:	444b      	add	r3, r9
 8004eec:	4699      	mov	r9, r3
	                 (int64_t) dy * (int64_t) dy +
 8004eee:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004ef2:	460b      	mov	r3, r1
 8004ef4:	eb13 0308 	adds.w	r3, r3, r8
 8004ef8:	603b      	str	r3, [r7, #0]
 8004efa:	4613      	mov	r3, r2
 8004efc:	eb43 0309 	adc.w	r3, r3, r9
 8004f00:	607b      	str	r3, [r7, #4]
 8004f02:	e9d7 0100 	ldrd	r0, r1, [r7]
	        distsq = (int64_t) dx * (int64_t) dx +
 8004f06:	4b20      	ldr	r3, [pc, #128]	@ (8004f88 <choose_discard_magcal+0x414>)
 8004f08:	e9c3 0100 	strd	r0, r1, [r3]

	        if (distsq < minsum) {
 8004f0c:	4b1e      	ldr	r3, [pc, #120]	@ (8004f88 <choose_discard_magcal+0x414>)
 8004f0e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004f12:	4b1e      	ldr	r3, [pc, #120]	@ (8004f8c <choose_discard_magcal+0x418>)
 8004f14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f18:	4290      	cmp	r0, r2
 8004f1a:	eb71 0303 	sbcs.w	r3, r1, r3
 8004f1e:	d213      	bcs.n	8004f48 <choose_discard_magcal+0x3d4>
	            minsum = distsq;
 8004f20:	4b19      	ldr	r3, [pc, #100]	@ (8004f88 <choose_discard_magcal+0x414>)
 8004f22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f26:	4919      	ldr	r1, [pc, #100]	@ (8004f8c <choose_discard_magcal+0x418>)
 8004f28:	e9c1 2300 	strd	r2, r3, [r1]
	            minindex = (random() & 1) ? chunk_i : chunk_j;
 8004f2c:	f00b fa9c 	bl	8010468 <random>
 8004f30:	4603      	mov	r3, r0
 8004f32:	f003 0301 	and.w	r3, r3, #1
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d002      	beq.n	8004f40 <choose_discard_magcal+0x3cc>
 8004f3a:	4b0d      	ldr	r3, [pc, #52]	@ (8004f70 <choose_discard_magcal+0x3fc>)
 8004f3c:	681a      	ldr	r2, [r3, #0]
 8004f3e:	e001      	b.n	8004f44 <choose_discard_magcal+0x3d0>
 8004f40:	4b0d      	ldr	r3, [pc, #52]	@ (8004f78 <choose_discard_magcal+0x404>)
 8004f42:	681a      	ldr	r2, [r3, #0]
 8004f44:	4b12      	ldr	r3, [pc, #72]	@ (8004f90 <choose_discard_magcal+0x41c>)
 8004f46:	601a      	str	r2, [r3, #0]
	        }

	        chunk_j++;
 8004f48:	4b0b      	ldr	r3, [pc, #44]	@ (8004f78 <choose_discard_magcal+0x404>)
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	1c5a      	adds	r2, r3, #1
 8004f4e:	4b0a      	ldr	r3, [pc, #40]	@ (8004f78 <choose_discard_magcal+0x404>)
 8004f50:	601a      	str	r2, [r3, #0]
	for (int cnt = 0; cnt < 10; cnt++) {
 8004f52:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004f54:	3301      	adds	r3, #1
 8004f56:	647b      	str	r3, [r7, #68]	@ 0x44
 8004f58:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004f5a:	2b09      	cmp	r3, #9
 8004f5c:	f77f aee5 	ble.w	8004d2a <choose_discard_magcal+0x1b6>
	    }

	return minindex;
 8004f60:	4b0b      	ldr	r3, [pc, #44]	@ (8004f90 <choose_discard_magcal+0x41c>)
 8004f62:	681b      	ldr	r3, [r3, #0]
}
 8004f64:	4618      	mov	r0, r3
 8004f66:	3748      	adds	r7, #72	@ 0x48
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004f6e:	bf00      	nop
 8004f70:	20001b38 	.word	0x20001b38
 8004f74:	200004f0 	.word	0x200004f0
 8004f78:	20001b3c 	.word	0x20001b3c
 8004f7c:	20001ae8 	.word	0x20001ae8
 8004f80:	20001aec 	.word	0x20001aec
 8004f84:	20001af0 	.word	0x20001af0
 8004f88:	20001b00 	.word	0x20001b00
 8004f8c:	20000048 	.word	0x20000048
 8004f90:	20001b14 	.word	0x20001b14

08004f94 <add_magcal_data>:

static void add_magcal_data(const int16_t *data) {
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b084      	sub	sp, #16
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]

	int i;

	// first look for an unused caldata slot
	for (i = 0; i < MAGBUFFSIZE; i++) {
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	60fb      	str	r3, [r7, #12]
 8004fa0:	e00c      	b.n	8004fbc <add_magcal_data+0x28>
		if (!magcal.valid[i])
 8004fa2:	4a31      	ldr	r2, [pc, #196]	@ (8005068 <add_magcal_data+0xd4>)
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	4413      	add	r3, r2
 8004fa8:	f503 539a 	add.w	r3, r3, #4928	@ 0x1340
 8004fac:	3316      	adds	r3, #22
 8004fae:	f993 3000 	ldrsb.w	r3, [r3]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d008      	beq.n	8004fc8 <add_magcal_data+0x34>
	for (i = 0; i < MAGBUFFSIZE; i++) {
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	3301      	adds	r3, #1
 8004fba:	60fb      	str	r3, [r7, #12]
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	f240 2289 	movw	r2, #649	@ 0x289
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	dded      	ble.n	8004fa2 <add_magcal_data+0xe>
 8004fc6:	e000      	b.n	8004fca <add_magcal_data+0x36>
			break;
 8004fc8:	bf00      	nop
	}

	if (i >= MAGBUFFSIZE) {
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	f240 2289 	movw	r2, #649	@ 0x289
 8004fd0:	4293      	cmp	r3, r2
 8004fd2:	dd19      	ble.n	8005008 <add_magcal_data+0x74>
		i = choose_discard_magcal();
 8004fd4:	f7ff fdce 	bl	8004b74 <choose_discard_magcal>
 8004fd8:	60f8      	str	r0, [r7, #12]
		if (i < 0 || i >= MAGBUFFSIZE) {
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	db04      	blt.n	8004fea <add_magcal_data+0x56>
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	f240 2289 	movw	r2, #649	@ 0x289
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	dd0e      	ble.n	8005008 <add_magcal_data+0x74>
			i = random() % MAGBUFFSIZE;
 8004fea:	f00b fa3d 	bl	8010468 <random>
 8004fee:	4603      	mov	r3, r0
 8004ff0:	4a1e      	ldr	r2, [pc, #120]	@ (800506c <add_magcal_data+0xd8>)
 8004ff2:	fb82 1203 	smull	r1, r2, r2, r3
 8004ff6:	1211      	asrs	r1, r2, #8
 8004ff8:	17da      	asrs	r2, r3, #31
 8004ffa:	1a8a      	subs	r2, r1, r2
 8004ffc:	f240 218a 	movw	r1, #650	@ 0x28a
 8005000:	fb01 f202 	mul.w	r2, r1, r2
 8005004:	1a9b      	subs	r3, r3, r2
 8005006:	60fb      	str	r3, [r7, #12]
		}
	}

	// add it to the cal buffer
	magcal.BpFast[0][i] = data[0];
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	f9b3 1000 	ldrsh.w	r1, [r3]
 800500e:	4a16      	ldr	r2, [pc, #88]	@ (8005068 <add_magcal_data+0xd4>)
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	f503 7303 	add.w	r3, r3, #524	@ 0x20c
 8005016:	005b      	lsls	r3, r3, #1
 8005018:	4413      	add	r3, r2
 800501a:	460a      	mov	r2, r1
 800501c:	805a      	strh	r2, [r3, #2]
	magcal.BpFast[1][i] = data[1];
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	3302      	adds	r3, #2
 8005022:	f9b3 1000 	ldrsh.w	r1, [r3]
 8005026:	4a10      	ldr	r2, [pc, #64]	@ (8005068 <add_magcal_data+0xd4>)
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	f203 4396 	addw	r3, r3, #1174	@ 0x496
 800502e:	005b      	lsls	r3, r3, #1
 8005030:	4413      	add	r3, r2
 8005032:	460a      	mov	r2, r1
 8005034:	805a      	strh	r2, [r3, #2]
	magcal.BpFast[2][i] = data[2];
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	3304      	adds	r3, #4
 800503a:	f9b3 1000 	ldrsh.w	r1, [r3]
 800503e:	4a0a      	ldr	r2, [pc, #40]	@ (8005068 <add_magcal_data+0xd4>)
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	f503 63e4 	add.w	r3, r3, #1824	@ 0x720
 8005046:	005b      	lsls	r3, r3, #1
 8005048:	4413      	add	r3, r2
 800504a:	460a      	mov	r2, r1
 800504c:	805a      	strh	r2, [r3, #2]
	magcal.valid[i] = 1;
 800504e:	4a06      	ldr	r2, [pc, #24]	@ (8005068 <add_magcal_data+0xd4>)
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	4413      	add	r3, r2
 8005054:	f503 539a 	add.w	r3, r3, #4928	@ 0x1340
 8005058:	3316      	adds	r3, #22
 800505a:	2201      	movs	r2, #1
 800505c:	701a      	strb	r2, [r3, #0]
}
 800505e:	bf00      	nop
 8005060:	3710      	adds	r7, #16
 8005062:	46bd      	mov	sp, r7
 8005064:	bd80      	pop	{r7, pc}
 8005066:	bf00      	nop
 8005068:	200004f0 	.word	0x200004f0
 800506c:	64d319ff 	.word	0x64d319ff

08005070 <process_imu_data>:

void process_imu_data(int16_t raw_magX, int16_t raw_magY, int16_t raw_magZ) {
 8005070:	b580      	push	{r7, lr}
 8005072:	b082      	sub	sp, #8
 8005074:	af00      	add	r7, sp, #0
 8005076:	4603      	mov	r3, r0
 8005078:	80fb      	strh	r3, [r7, #6]
 800507a:	460b      	mov	r3, r1
 800507c:	80bb      	strh	r3, [r7, #4]
 800507e:	4613      	mov	r3, r2
 8005080:	807b      	strh	r3, [r7, #2]
	mag_raw[0] = raw_magX;
 8005082:	88fa      	ldrh	r2, [r7, #6]
 8005084:	4b07      	ldr	r3, [pc, #28]	@ (80050a4 <process_imu_data+0x34>)
 8005086:	801a      	strh	r2, [r3, #0]
	mag_raw[1] = raw_magY;
 8005088:	88ba      	ldrh	r2, [r7, #4]
 800508a:	4b06      	ldr	r3, [pc, #24]	@ (80050a4 <process_imu_data+0x34>)
 800508c:	805a      	strh	r2, [r3, #2]
	mag_raw[2] = raw_magZ;
 800508e:	887a      	ldrh	r2, [r7, #2]
 8005090:	4b04      	ldr	r3, [pc, #16]	@ (80050a4 <process_imu_data+0x34>)
 8005092:	809a      	strh	r2, [r3, #4]
	add_magcal_data(mag_raw);
 8005094:	4803      	ldr	r0, [pc, #12]	@ (80050a4 <process_imu_data+0x34>)
 8005096:	f7ff ff7d 	bl	8004f94 <add_magcal_data>
}
 800509a:	bf00      	nop
 800509c:	3708      	adds	r7, #8
 800509e:	46bd      	mov	sp, r7
 80050a0:	bd80      	pop	{r7, pc}
 80050a2:	bf00      	nop
 80050a4:	20001ad4 	.word	0x20001ad4

080050a8 <HAL_I2C_MemRxCpltCallback>:

void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c) {
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b086      	sub	sp, #24
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]

	DAM_Callback_cnt++;
 80050b0:	4b79      	ldr	r3, [pc, #484]	@ (8005298 <HAL_I2C_MemRxCpltCallback+0x1f0>)
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	3301      	adds	r3, #1
 80050b6:	4a78      	ldr	r2, [pc, #480]	@ (8005298 <HAL_I2C_MemRxCpltCallback+0x1f0>)
 80050b8:	6013      	str	r3, [r2, #0]

	if (hi2c->Instance == I2C1) {
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	4a77      	ldr	r2, [pc, #476]	@ (800529c <HAL_I2C_MemRxCpltCallback+0x1f4>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	f040 83b1 	bne.w	8005828 <HAL_I2C_MemRxCpltCallback+0x780>
		if (CurrentSensor == GYRO_SENSOR) {
 80050c6:	4b76      	ldr	r3, [pc, #472]	@ (80052a0 <HAL_I2C_MemRxCpltCallback+0x1f8>)
 80050c8:	781b      	ldrb	r3, [r3, #0]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	f040 8116 	bne.w	80052fc <HAL_I2C_MemRxCpltCallback+0x254>
			gyroX = (int16_t) ((gyro_buffer[1] << 8) | gyro_buffer[0]);
 80050d0:	4b74      	ldr	r3, [pc, #464]	@ (80052a4 <HAL_I2C_MemRxCpltCallback+0x1fc>)
 80050d2:	785b      	ldrb	r3, [r3, #1]
 80050d4:	021b      	lsls	r3, r3, #8
 80050d6:	b21a      	sxth	r2, r3
 80050d8:	4b72      	ldr	r3, [pc, #456]	@ (80052a4 <HAL_I2C_MemRxCpltCallback+0x1fc>)
 80050da:	781b      	ldrb	r3, [r3, #0]
 80050dc:	b21b      	sxth	r3, r3
 80050de:	4313      	orrs	r3, r2
 80050e0:	b21a      	sxth	r2, r3
 80050e2:	4b71      	ldr	r3, [pc, #452]	@ (80052a8 <HAL_I2C_MemRxCpltCallback+0x200>)
 80050e4:	801a      	strh	r2, [r3, #0]
			gyroY = (int16_t) ((gyro_buffer[3] << 8) | gyro_buffer[2]);
 80050e6:	4b6f      	ldr	r3, [pc, #444]	@ (80052a4 <HAL_I2C_MemRxCpltCallback+0x1fc>)
 80050e8:	78db      	ldrb	r3, [r3, #3]
 80050ea:	021b      	lsls	r3, r3, #8
 80050ec:	b21a      	sxth	r2, r3
 80050ee:	4b6d      	ldr	r3, [pc, #436]	@ (80052a4 <HAL_I2C_MemRxCpltCallback+0x1fc>)
 80050f0:	789b      	ldrb	r3, [r3, #2]
 80050f2:	b21b      	sxth	r3, r3
 80050f4:	4313      	orrs	r3, r2
 80050f6:	b21a      	sxth	r2, r3
 80050f8:	4b6c      	ldr	r3, [pc, #432]	@ (80052ac <HAL_I2C_MemRxCpltCallback+0x204>)
 80050fa:	801a      	strh	r2, [r3, #0]
			gyroZ = (int16_t) ((gyro_buffer[5] << 8) | gyro_buffer[4]);
 80050fc:	4b69      	ldr	r3, [pc, #420]	@ (80052a4 <HAL_I2C_MemRxCpltCallback+0x1fc>)
 80050fe:	795b      	ldrb	r3, [r3, #5]
 8005100:	021b      	lsls	r3, r3, #8
 8005102:	b21a      	sxth	r2, r3
 8005104:	4b67      	ldr	r3, [pc, #412]	@ (80052a4 <HAL_I2C_MemRxCpltCallback+0x1fc>)
 8005106:	791b      	ldrb	r3, [r3, #4]
 8005108:	b21b      	sxth	r3, r3
 800510a:	4313      	orrs	r3, r2
 800510c:	b21a      	sxth	r2, r3
 800510e:	4b68      	ldr	r3, [pc, #416]	@ (80052b0 <HAL_I2C_MemRxCpltCallback+0x208>)
 8005110:	801a      	strh	r2, [r3, #0]

			gyroX_current = gyroX * GYRO_SENSITIVITY_245DPS / 1000.0f;
 8005112:	4b65      	ldr	r3, [pc, #404]	@ (80052a8 <HAL_I2C_MemRxCpltCallback+0x200>)
 8005114:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005118:	ee07 3a90 	vmov	s15, r3
 800511c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005120:	ed9f 7a64 	vldr	s14, [pc, #400]	@ 80052b4 <HAL_I2C_MemRxCpltCallback+0x20c>
 8005124:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005128:	eddf 6a63 	vldr	s13, [pc, #396]	@ 80052b8 <HAL_I2C_MemRxCpltCallback+0x210>
 800512c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005130:	4b62      	ldr	r3, [pc, #392]	@ (80052bc <HAL_I2C_MemRxCpltCallback+0x214>)
 8005132:	edc3 7a00 	vstr	s15, [r3]
			gyroY_current = gyroY * GYRO_SENSITIVITY_245DPS / 1000.0f;
 8005136:	4b5d      	ldr	r3, [pc, #372]	@ (80052ac <HAL_I2C_MemRxCpltCallback+0x204>)
 8005138:	f9b3 3000 	ldrsh.w	r3, [r3]
 800513c:	ee07 3a90 	vmov	s15, r3
 8005140:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005144:	ed9f 7a5b 	vldr	s14, [pc, #364]	@ 80052b4 <HAL_I2C_MemRxCpltCallback+0x20c>
 8005148:	ee27 7a87 	vmul.f32	s14, s15, s14
 800514c:	eddf 6a5a 	vldr	s13, [pc, #360]	@ 80052b8 <HAL_I2C_MemRxCpltCallback+0x210>
 8005150:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005154:	4b5a      	ldr	r3, [pc, #360]	@ (80052c0 <HAL_I2C_MemRxCpltCallback+0x218>)
 8005156:	edc3 7a00 	vstr	s15, [r3]
			gyroZ_current = gyroZ * GYRO_SENSITIVITY_245DPS / 1000.0f - 4.6;
 800515a:	4b55      	ldr	r3, [pc, #340]	@ (80052b0 <HAL_I2C_MemRxCpltCallback+0x208>)
 800515c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005160:	ee07 3a90 	vmov	s15, r3
 8005164:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005168:	ed9f 7a52 	vldr	s14, [pc, #328]	@ 80052b4 <HAL_I2C_MemRxCpltCallback+0x20c>
 800516c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005170:	ed9f 7a51 	vldr	s14, [pc, #324]	@ 80052b8 <HAL_I2C_MemRxCpltCallback+0x210>
 8005174:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005178:	ee16 0a90 	vmov	r0, s13
 800517c:	f7fb f9bc 	bl	80004f8 <__aeabi_f2d>
 8005180:	a343      	add	r3, pc, #268	@ (adr r3, 8005290 <HAL_I2C_MemRxCpltCallback+0x1e8>)
 8005182:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005186:	f7fb f857 	bl	8000238 <__aeabi_dsub>
 800518a:	4602      	mov	r2, r0
 800518c:	460b      	mov	r3, r1
 800518e:	4610      	mov	r0, r2
 8005190:	4619      	mov	r1, r3
 8005192:	f7fb fcb9 	bl	8000b08 <__aeabi_d2f>
 8005196:	4603      	mov	r3, r0
 8005198:	4a4a      	ldr	r2, [pc, #296]	@ (80052c4 <HAL_I2C_MemRxCpltCallback+0x21c>)
 800519a:	6013      	str	r3, [r2, #0]

			if (DAM_Callback_cnt < 1000) {
 800519c:	4b3e      	ldr	r3, [pc, #248]	@ (8005298 <HAL_I2C_MemRxCpltCallback+0x1f0>)
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80051a4:	da21      	bge.n	80051ea <HAL_I2C_MemRxCpltCallback+0x142>
				gyroX_sum += gyroX_current;
 80051a6:	4b48      	ldr	r3, [pc, #288]	@ (80052c8 <HAL_I2C_MemRxCpltCallback+0x220>)
 80051a8:	ed93 7a00 	vldr	s14, [r3]
 80051ac:	4b43      	ldr	r3, [pc, #268]	@ (80052bc <HAL_I2C_MemRxCpltCallback+0x214>)
 80051ae:	edd3 7a00 	vldr	s15, [r3]
 80051b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80051b6:	4b44      	ldr	r3, [pc, #272]	@ (80052c8 <HAL_I2C_MemRxCpltCallback+0x220>)
 80051b8:	edc3 7a00 	vstr	s15, [r3]
				gyroY_sum += gyroY_current;
 80051bc:	4b43      	ldr	r3, [pc, #268]	@ (80052cc <HAL_I2C_MemRxCpltCallback+0x224>)
 80051be:	ed93 7a00 	vldr	s14, [r3]
 80051c2:	4b3f      	ldr	r3, [pc, #252]	@ (80052c0 <HAL_I2C_MemRxCpltCallback+0x218>)
 80051c4:	edd3 7a00 	vldr	s15, [r3]
 80051c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80051cc:	4b3f      	ldr	r3, [pc, #252]	@ (80052cc <HAL_I2C_MemRxCpltCallback+0x224>)
 80051ce:	edc3 7a00 	vstr	s15, [r3]
				gyroZ_sum += gyroZ_current;
 80051d2:	4b3f      	ldr	r3, [pc, #252]	@ (80052d0 <HAL_I2C_MemRxCpltCallback+0x228>)
 80051d4:	ed93 7a00 	vldr	s14, [r3]
 80051d8:	4b3a      	ldr	r3, [pc, #232]	@ (80052c4 <HAL_I2C_MemRxCpltCallback+0x21c>)
 80051da:	edd3 7a00 	vldr	s15, [r3]
 80051de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80051e2:	4b3b      	ldr	r3, [pc, #236]	@ (80052d0 <HAL_I2C_MemRxCpltCallback+0x228>)
 80051e4:	edc3 7a00 	vstr	s15, [r3]
			}

			CurrentSensor = GYRO_SENSOR;
		}
	}
}
 80051e8:	e31e      	b.n	8005828 <HAL_I2C_MemRxCpltCallback+0x780>
				gyroX_avg = gyroX_sum / 1000.0f;
 80051ea:	4b37      	ldr	r3, [pc, #220]	@ (80052c8 <HAL_I2C_MemRxCpltCallback+0x220>)
 80051ec:	ed93 7a00 	vldr	s14, [r3]
 80051f0:	eddf 6a31 	vldr	s13, [pc, #196]	@ 80052b8 <HAL_I2C_MemRxCpltCallback+0x210>
 80051f4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80051f8:	4b36      	ldr	r3, [pc, #216]	@ (80052d4 <HAL_I2C_MemRxCpltCallback+0x22c>)
 80051fa:	edc3 7a00 	vstr	s15, [r3]
				gyroY_avg = gyroY_sum / 1000.0f;
 80051fe:	4b33      	ldr	r3, [pc, #204]	@ (80052cc <HAL_I2C_MemRxCpltCallback+0x224>)
 8005200:	ed93 7a00 	vldr	s14, [r3]
 8005204:	eddf 6a2c 	vldr	s13, [pc, #176]	@ 80052b8 <HAL_I2C_MemRxCpltCallback+0x210>
 8005208:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800520c:	4b32      	ldr	r3, [pc, #200]	@ (80052d8 <HAL_I2C_MemRxCpltCallback+0x230>)
 800520e:	edc3 7a00 	vstr	s15, [r3]
				gyroZ_avg = gyroZ_sum / 1000.0f;
 8005212:	4b2f      	ldr	r3, [pc, #188]	@ (80052d0 <HAL_I2C_MemRxCpltCallback+0x228>)
 8005214:	ed93 7a00 	vldr	s14, [r3]
 8005218:	eddf 6a27 	vldr	s13, [pc, #156]	@ 80052b8 <HAL_I2C_MemRxCpltCallback+0x210>
 800521c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005220:	4b2e      	ldr	r3, [pc, #184]	@ (80052dc <HAL_I2C_MemRxCpltCallback+0x234>)
 8005222:	edc3 7a00 	vstr	s15, [r3]
				gyro_x = gyroX_current - gyroX_avg;
 8005226:	4b25      	ldr	r3, [pc, #148]	@ (80052bc <HAL_I2C_MemRxCpltCallback+0x214>)
 8005228:	ed93 7a00 	vldr	s14, [r3]
 800522c:	4b29      	ldr	r3, [pc, #164]	@ (80052d4 <HAL_I2C_MemRxCpltCallback+0x22c>)
 800522e:	edd3 7a00 	vldr	s15, [r3]
 8005232:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005236:	4b2a      	ldr	r3, [pc, #168]	@ (80052e0 <HAL_I2C_MemRxCpltCallback+0x238>)
 8005238:	edc3 7a00 	vstr	s15, [r3]
				gyro_y = gyroY_current - gyroY_avg;
 800523c:	4b20      	ldr	r3, [pc, #128]	@ (80052c0 <HAL_I2C_MemRxCpltCallback+0x218>)
 800523e:	ed93 7a00 	vldr	s14, [r3]
 8005242:	4b25      	ldr	r3, [pc, #148]	@ (80052d8 <HAL_I2C_MemRxCpltCallback+0x230>)
 8005244:	edd3 7a00 	vldr	s15, [r3]
 8005248:	ee77 7a67 	vsub.f32	s15, s14, s15
 800524c:	4b25      	ldr	r3, [pc, #148]	@ (80052e4 <HAL_I2C_MemRxCpltCallback+0x23c>)
 800524e:	edc3 7a00 	vstr	s15, [r3]
				gyro_z = gyroZ_current - gyroZ_avg;
 8005252:	4b1c      	ldr	r3, [pc, #112]	@ (80052c4 <HAL_I2C_MemRxCpltCallback+0x21c>)
 8005254:	ed93 7a00 	vldr	s14, [r3]
 8005258:	4b20      	ldr	r3, [pc, #128]	@ (80052dc <HAL_I2C_MemRxCpltCallback+0x234>)
 800525a:	edd3 7a00 	vldr	s15, [r3]
 800525e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005262:	4b21      	ldr	r3, [pc, #132]	@ (80052e8 <HAL_I2C_MemRxCpltCallback+0x240>)
 8005264:	edc3 7a00 	vstr	s15, [r3]
				gxyz[0] = gx1;
 8005268:	4b20      	ldr	r3, [pc, #128]	@ (80052ec <HAL_I2C_MemRxCpltCallback+0x244>)
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	4a20      	ldr	r2, [pc, #128]	@ (80052f0 <HAL_I2C_MemRxCpltCallback+0x248>)
 800526e:	6013      	str	r3, [r2, #0]
				gxyz[1] = gy1;
 8005270:	4b20      	ldr	r3, [pc, #128]	@ (80052f4 <HAL_I2C_MemRxCpltCallback+0x24c>)
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	4a1e      	ldr	r2, [pc, #120]	@ (80052f0 <HAL_I2C_MemRxCpltCallback+0x248>)
 8005276:	6053      	str	r3, [r2, #4]
				gxyz[2] = gz1;
 8005278:	4b1f      	ldr	r3, [pc, #124]	@ (80052f8 <HAL_I2C_MemRxCpltCallback+0x250>)
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	4a1c      	ldr	r2, [pc, #112]	@ (80052f0 <HAL_I2C_MemRxCpltCallback+0x248>)
 800527e:	6093      	str	r3, [r2, #8]
				CurrentSensor = ACCEL_SENSOR;
 8005280:	4b07      	ldr	r3, [pc, #28]	@ (80052a0 <HAL_I2C_MemRxCpltCallback+0x1f8>)
 8005282:	2201      	movs	r2, #1
 8005284:	701a      	strb	r2, [r3, #0]
				LSM9DS1_ReadAccel_DMA();
 8005286:	f7ff fb87 	bl	8004998 <LSM9DS1_ReadAccel_DMA>
}
 800528a:	e2cd      	b.n	8005828 <HAL_I2C_MemRxCpltCallback+0x780>
 800528c:	f3af 8000 	nop.w
 8005290:	66666666 	.word	0x66666666
 8005294:	40126666 	.word	0x40126666
 8005298:	200003cc 	.word	0x200003cc
 800529c:	40005400 	.word	0x40005400
 80052a0:	200003c8 	.word	0x200003c8
 80052a4:	20000358 	.word	0x20000358
 80052a8:	2000036e 	.word	0x2000036e
 80052ac:	20000370 	.word	0x20000370
 80052b0:	20000372 	.word	0x20000372
 80052b4:	410c0000 	.word	0x410c0000
 80052b8:	447a0000 	.word	0x447a0000
 80052bc:	200003b0 	.word	0x200003b0
 80052c0:	200003b4 	.word	0x200003b4
 80052c4:	200003b8 	.word	0x200003b8
 80052c8:	20000398 	.word	0x20000398
 80052cc:	2000039c 	.word	0x2000039c
 80052d0:	200003a0 	.word	0x200003a0
 80052d4:	200003a4 	.word	0x200003a4
 80052d8:	200003a8 	.word	0x200003a8
 80052dc:	200003ac 	.word	0x200003ac
 80052e0:	2000038c 	.word	0x2000038c
 80052e4:	20000390 	.word	0x20000390
 80052e8:	20000394 	.word	0x20000394
 80052ec:	2000045c 	.word	0x2000045c
 80052f0:	2000049c 	.word	0x2000049c
 80052f4:	20000460 	.word	0x20000460
 80052f8:	20000464 	.word	0x20000464
		} else if (CurrentSensor == ACCEL_SENSOR) {
 80052fc:	4b9e      	ldr	r3, [pc, #632]	@ (8005578 <HAL_I2C_MemRxCpltCallback+0x4d0>)
 80052fe:	781b      	ldrb	r3, [r3, #0]
 8005300:	2b01      	cmp	r3, #1
 8005302:	f040 80b1 	bne.w	8005468 <HAL_I2C_MemRxCpltCallback+0x3c0>
			accelX = (int16_t) ((accel_buffer[1] << 8) | accel_buffer[0]);
 8005306:	4b9d      	ldr	r3, [pc, #628]	@ (800557c <HAL_I2C_MemRxCpltCallback+0x4d4>)
 8005308:	785b      	ldrb	r3, [r3, #1]
 800530a:	021b      	lsls	r3, r3, #8
 800530c:	b21a      	sxth	r2, r3
 800530e:	4b9b      	ldr	r3, [pc, #620]	@ (800557c <HAL_I2C_MemRxCpltCallback+0x4d4>)
 8005310:	781b      	ldrb	r3, [r3, #0]
 8005312:	b21b      	sxth	r3, r3
 8005314:	4313      	orrs	r3, r2
 8005316:	b21a      	sxth	r2, r3
 8005318:	4b99      	ldr	r3, [pc, #612]	@ (8005580 <HAL_I2C_MemRxCpltCallback+0x4d8>)
 800531a:	801a      	strh	r2, [r3, #0]
			accelY = (int16_t) ((accel_buffer[3] << 8) | accel_buffer[2]);
 800531c:	4b97      	ldr	r3, [pc, #604]	@ (800557c <HAL_I2C_MemRxCpltCallback+0x4d4>)
 800531e:	78db      	ldrb	r3, [r3, #3]
 8005320:	021b      	lsls	r3, r3, #8
 8005322:	b21a      	sxth	r2, r3
 8005324:	4b95      	ldr	r3, [pc, #596]	@ (800557c <HAL_I2C_MemRxCpltCallback+0x4d4>)
 8005326:	789b      	ldrb	r3, [r3, #2]
 8005328:	b21b      	sxth	r3, r3
 800532a:	4313      	orrs	r3, r2
 800532c:	b21a      	sxth	r2, r3
 800532e:	4b95      	ldr	r3, [pc, #596]	@ (8005584 <HAL_I2C_MemRxCpltCallback+0x4dc>)
 8005330:	801a      	strh	r2, [r3, #0]
			accelZ = (int16_t) ((accel_buffer[5] << 8) | accel_buffer[4]);
 8005332:	4b92      	ldr	r3, [pc, #584]	@ (800557c <HAL_I2C_MemRxCpltCallback+0x4d4>)
 8005334:	795b      	ldrb	r3, [r3, #5]
 8005336:	021b      	lsls	r3, r3, #8
 8005338:	b21a      	sxth	r2, r3
 800533a:	4b90      	ldr	r3, [pc, #576]	@ (800557c <HAL_I2C_MemRxCpltCallback+0x4d4>)
 800533c:	791b      	ldrb	r3, [r3, #4]
 800533e:	b21b      	sxth	r3, r3
 8005340:	4313      	orrs	r3, r2
 8005342:	b21a      	sxth	r2, r3
 8005344:	4b90      	ldr	r3, [pc, #576]	@ (8005588 <HAL_I2C_MemRxCpltCallback+0x4e0>)
 8005346:	801a      	strh	r2, [r3, #0]
			accel_x = accelX * ACCEL_SENSITIVITY_2G / 100000;
 8005348:	4b8d      	ldr	r3, [pc, #564]	@ (8005580 <HAL_I2C_MemRxCpltCallback+0x4d8>)
 800534a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800534e:	ee07 3a90 	vmov	s15, r3
 8005352:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005356:	ed9f 7a8d 	vldr	s14, [pc, #564]	@ 800558c <HAL_I2C_MemRxCpltCallback+0x4e4>
 800535a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800535e:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8005590 <HAL_I2C_MemRxCpltCallback+0x4e8>
 8005362:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005366:	4b8b      	ldr	r3, [pc, #556]	@ (8005594 <HAL_I2C_MemRxCpltCallback+0x4ec>)
 8005368:	edc3 7a00 	vstr	s15, [r3]
			accel_y = accelY * ACCEL_SENSITIVITY_2G / 100000;
 800536c:	4b85      	ldr	r3, [pc, #532]	@ (8005584 <HAL_I2C_MemRxCpltCallback+0x4dc>)
 800536e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005372:	ee07 3a90 	vmov	s15, r3
 8005376:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800537a:	ed9f 7a84 	vldr	s14, [pc, #528]	@ 800558c <HAL_I2C_MemRxCpltCallback+0x4e4>
 800537e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005382:	eddf 6a83 	vldr	s13, [pc, #524]	@ 8005590 <HAL_I2C_MemRxCpltCallback+0x4e8>
 8005386:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800538a:	4b83      	ldr	r3, [pc, #524]	@ (8005598 <HAL_I2C_MemRxCpltCallback+0x4f0>)
 800538c:	edc3 7a00 	vstr	s15, [r3]
			accel_z = accelZ * ACCEL_SENSITIVITY_2G / 100000;
 8005390:	4b7d      	ldr	r3, [pc, #500]	@ (8005588 <HAL_I2C_MemRxCpltCallback+0x4e0>)
 8005392:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005396:	ee07 3a90 	vmov	s15, r3
 800539a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800539e:	ed9f 7a7b 	vldr	s14, [pc, #492]	@ 800558c <HAL_I2C_MemRxCpltCallback+0x4e4>
 80053a2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80053a6:	eddf 6a7a 	vldr	s13, [pc, #488]	@ 8005590 <HAL_I2C_MemRxCpltCallback+0x4e8>
 80053aa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80053ae:	4b7b      	ldr	r3, [pc, #492]	@ (800559c <HAL_I2C_MemRxCpltCallback+0x4f4>)
 80053b0:	edc3 7a00 	vstr	s15, [r3]
			axyz[0] = accel_x;
 80053b4:	4b77      	ldr	r3, [pc, #476]	@ (8005594 <HAL_I2C_MemRxCpltCallback+0x4ec>)
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	4a79      	ldr	r2, [pc, #484]	@ (80055a0 <HAL_I2C_MemRxCpltCallback+0x4f8>)
 80053ba:	6013      	str	r3, [r2, #0]
			axyz[1] = accel_y;
 80053bc:	4b76      	ldr	r3, [pc, #472]	@ (8005598 <HAL_I2C_MemRxCpltCallback+0x4f0>)
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	4a77      	ldr	r2, [pc, #476]	@ (80055a0 <HAL_I2C_MemRxCpltCallback+0x4f8>)
 80053c2:	6053      	str	r3, [r2, #4]
			axyz[2] = accel_z;
 80053c4:	4b75      	ldr	r3, [pc, #468]	@ (800559c <HAL_I2C_MemRxCpltCallback+0x4f4>)
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	4a75      	ldr	r2, [pc, #468]	@ (80055a0 <HAL_I2C_MemRxCpltCallback+0x4f8>)
 80053ca:	6093      	str	r3, [r2, #8]
			axyz2[0] = axyz[0];
 80053cc:	4b74      	ldr	r3, [pc, #464]	@ (80055a0 <HAL_I2C_MemRxCpltCallback+0x4f8>)
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	4a74      	ldr	r2, [pc, #464]	@ (80055a4 <HAL_I2C_MemRxCpltCallback+0x4fc>)
 80053d2:	6013      	str	r3, [r2, #0]
			axyz2[1] = axyz[1];
 80053d4:	4b72      	ldr	r3, [pc, #456]	@ (80055a0 <HAL_I2C_MemRxCpltCallback+0x4f8>)
 80053d6:	685b      	ldr	r3, [r3, #4]
 80053d8:	4a72      	ldr	r2, [pc, #456]	@ (80055a4 <HAL_I2C_MemRxCpltCallback+0x4fc>)
 80053da:	6053      	str	r3, [r2, #4]
			axyz2[2] = axyz[2];
 80053dc:	4b70      	ldr	r3, [pc, #448]	@ (80055a0 <HAL_I2C_MemRxCpltCallback+0x4f8>)
 80053de:	689b      	ldr	r3, [r3, #8]
 80053e0:	4a70      	ldr	r2, [pc, #448]	@ (80055a4 <HAL_I2C_MemRxCpltCallback+0x4fc>)
 80053e2:	6093      	str	r3, [r2, #8]
			axyz[0] = axyz[0] * 1 / 9.8;
 80053e4:	4b6e      	ldr	r3, [pc, #440]	@ (80055a0 <HAL_I2C_MemRxCpltCallback+0x4f8>)
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	4618      	mov	r0, r3
 80053ea:	f7fb f885 	bl	80004f8 <__aeabi_f2d>
 80053ee:	a360      	add	r3, pc, #384	@ (adr r3, 8005570 <HAL_I2C_MemRxCpltCallback+0x4c8>)
 80053f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053f4:	f7fb fa02 	bl	80007fc <__aeabi_ddiv>
 80053f8:	4602      	mov	r2, r0
 80053fa:	460b      	mov	r3, r1
 80053fc:	4610      	mov	r0, r2
 80053fe:	4619      	mov	r1, r3
 8005400:	f7fb fb82 	bl	8000b08 <__aeabi_d2f>
 8005404:	4603      	mov	r3, r0
 8005406:	4a66      	ldr	r2, [pc, #408]	@ (80055a0 <HAL_I2C_MemRxCpltCallback+0x4f8>)
 8005408:	6013      	str	r3, [r2, #0]
			axyz[1] = axyz[1] * 1 / 9.8;
 800540a:	4b65      	ldr	r3, [pc, #404]	@ (80055a0 <HAL_I2C_MemRxCpltCallback+0x4f8>)
 800540c:	685b      	ldr	r3, [r3, #4]
 800540e:	4618      	mov	r0, r3
 8005410:	f7fb f872 	bl	80004f8 <__aeabi_f2d>
 8005414:	a356      	add	r3, pc, #344	@ (adr r3, 8005570 <HAL_I2C_MemRxCpltCallback+0x4c8>)
 8005416:	e9d3 2300 	ldrd	r2, r3, [r3]
 800541a:	f7fb f9ef 	bl	80007fc <__aeabi_ddiv>
 800541e:	4602      	mov	r2, r0
 8005420:	460b      	mov	r3, r1
 8005422:	4610      	mov	r0, r2
 8005424:	4619      	mov	r1, r3
 8005426:	f7fb fb6f 	bl	8000b08 <__aeabi_d2f>
 800542a:	4603      	mov	r3, r0
 800542c:	4a5c      	ldr	r2, [pc, #368]	@ (80055a0 <HAL_I2C_MemRxCpltCallback+0x4f8>)
 800542e:	6053      	str	r3, [r2, #4]
			axyz[2] = axyz[2] * 1 / 9.8;
 8005430:	4b5b      	ldr	r3, [pc, #364]	@ (80055a0 <HAL_I2C_MemRxCpltCallback+0x4f8>)
 8005432:	689b      	ldr	r3, [r3, #8]
 8005434:	4618      	mov	r0, r3
 8005436:	f7fb f85f 	bl	80004f8 <__aeabi_f2d>
 800543a:	a34d      	add	r3, pc, #308	@ (adr r3, 8005570 <HAL_I2C_MemRxCpltCallback+0x4c8>)
 800543c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005440:	f7fb f9dc 	bl	80007fc <__aeabi_ddiv>
 8005444:	4602      	mov	r2, r0
 8005446:	460b      	mov	r3, r1
 8005448:	4610      	mov	r0, r2
 800544a:	4619      	mov	r1, r3
 800544c:	f7fb fb5c 	bl	8000b08 <__aeabi_d2f>
 8005450:	4603      	mov	r3, r0
 8005452:	4a53      	ldr	r2, [pc, #332]	@ (80055a0 <HAL_I2C_MemRxCpltCallback+0x4f8>)
 8005454:	6093      	str	r3, [r2, #8]
			vector_normalize(axyz);
 8005456:	4852      	ldr	r0, [pc, #328]	@ (80055a0 <HAL_I2C_MemRxCpltCallback+0x4f8>)
 8005458:	f7fe f992 	bl	8003780 <vector_normalize>
			CurrentSensor = MAG_SENSOR;
 800545c:	4b46      	ldr	r3, [pc, #280]	@ (8005578 <HAL_I2C_MemRxCpltCallback+0x4d0>)
 800545e:	2202      	movs	r2, #2
 8005460:	701a      	strb	r2, [r3, #0]
			LSM9DS1_ReadMag_DMA();
 8005462:	f7ff faad 	bl	80049c0 <LSM9DS1_ReadMag_DMA>
}
 8005466:	e1df      	b.n	8005828 <HAL_I2C_MemRxCpltCallback+0x780>
		} else if (CurrentSensor == MAG_SENSOR) {
 8005468:	4b43      	ldr	r3, [pc, #268]	@ (8005578 <HAL_I2C_MemRxCpltCallback+0x4d0>)
 800546a:	781b      	ldrb	r3, [r3, #0]
 800546c:	2b02      	cmp	r3, #2
 800546e:	f040 81db 	bne.w	8005828 <HAL_I2C_MemRxCpltCallback+0x780>
			magX = (int16_t) ((mag_buffer[1] << 8) | mag_buffer[0]);
 8005472:	4b4d      	ldr	r3, [pc, #308]	@ (80055a8 <HAL_I2C_MemRxCpltCallback+0x500>)
 8005474:	785b      	ldrb	r3, [r3, #1]
 8005476:	021b      	lsls	r3, r3, #8
 8005478:	b21a      	sxth	r2, r3
 800547a:	4b4b      	ldr	r3, [pc, #300]	@ (80055a8 <HAL_I2C_MemRxCpltCallback+0x500>)
 800547c:	781b      	ldrb	r3, [r3, #0]
 800547e:	b21b      	sxth	r3, r3
 8005480:	4313      	orrs	r3, r2
 8005482:	b21a      	sxth	r2, r3
 8005484:	4b49      	ldr	r3, [pc, #292]	@ (80055ac <HAL_I2C_MemRxCpltCallback+0x504>)
 8005486:	801a      	strh	r2, [r3, #0]
			magY = (int16_t) ((mag_buffer[3] << 8) | mag_buffer[2]);
 8005488:	4b47      	ldr	r3, [pc, #284]	@ (80055a8 <HAL_I2C_MemRxCpltCallback+0x500>)
 800548a:	78db      	ldrb	r3, [r3, #3]
 800548c:	021b      	lsls	r3, r3, #8
 800548e:	b21a      	sxth	r2, r3
 8005490:	4b45      	ldr	r3, [pc, #276]	@ (80055a8 <HAL_I2C_MemRxCpltCallback+0x500>)
 8005492:	789b      	ldrb	r3, [r3, #2]
 8005494:	b21b      	sxth	r3, r3
 8005496:	4313      	orrs	r3, r2
 8005498:	b21a      	sxth	r2, r3
 800549a:	4b45      	ldr	r3, [pc, #276]	@ (80055b0 <HAL_I2C_MemRxCpltCallback+0x508>)
 800549c:	801a      	strh	r2, [r3, #0]
			magZ = (int16_t) ((mag_buffer[5] << 8) | mag_buffer[4]);
 800549e:	4b42      	ldr	r3, [pc, #264]	@ (80055a8 <HAL_I2C_MemRxCpltCallback+0x500>)
 80054a0:	795b      	ldrb	r3, [r3, #5]
 80054a2:	021b      	lsls	r3, r3, #8
 80054a4:	b21a      	sxth	r2, r3
 80054a6:	4b40      	ldr	r3, [pc, #256]	@ (80055a8 <HAL_I2C_MemRxCpltCallback+0x500>)
 80054a8:	791b      	ldrb	r3, [r3, #4]
 80054aa:	b21b      	sxth	r3, r3
 80054ac:	4313      	orrs	r3, r2
 80054ae:	b21a      	sxth	r2, r3
 80054b0:	4b40      	ldr	r3, [pc, #256]	@ (80055b4 <HAL_I2C_MemRxCpltCallback+0x50c>)
 80054b2:	801a      	strh	r2, [r3, #0]
			if (magcal_flag == 1) {
 80054b4:	4b40      	ldr	r3, [pc, #256]	@ (80055b8 <HAL_I2C_MemRxCpltCallback+0x510>)
 80054b6:	781b      	ldrb	r3, [r3, #0]
 80054b8:	2b01      	cmp	r3, #1
 80054ba:	f040 8085 	bne.w	80055c8 <HAL_I2C_MemRxCpltCallback+0x520>
				process_imu_data(magX, magY, magZ);
 80054be:	4b3b      	ldr	r3, [pc, #236]	@ (80055ac <HAL_I2C_MemRxCpltCallback+0x504>)
 80054c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80054c4:	4a3a      	ldr	r2, [pc, #232]	@ (80055b0 <HAL_I2C_MemRxCpltCallback+0x508>)
 80054c6:	f9b2 1000 	ldrsh.w	r1, [r2]
 80054ca:	4a3a      	ldr	r2, [pc, #232]	@ (80055b4 <HAL_I2C_MemRxCpltCallback+0x50c>)
 80054cc:	f9b2 2000 	ldrsh.w	r2, [r2]
 80054d0:	4618      	mov	r0, r3
 80054d2:	f7ff fdcd 	bl	8005070 <process_imu_data>
				MagCal_Run();
 80054d6:	f7fc fbdf 	bl	8001c98 <MagCal_Run>
				for (i=0; i < MAGBUFFSIZE; i++) {
 80054da:	4b38      	ldr	r3, [pc, #224]	@ (80055bc <HAL_I2C_MemRxCpltCallback+0x514>)
 80054dc:	2200      	movs	r2, #0
 80054de:	601a      	str	r2, [r3, #0]
 80054e0:	e03d      	b.n	800555e <HAL_I2C_MemRxCpltCallback+0x4b6>
					if (magcal.valid[i]) {
 80054e2:	4b36      	ldr	r3, [pc, #216]	@ (80055bc <HAL_I2C_MemRxCpltCallback+0x514>)
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	4a36      	ldr	r2, [pc, #216]	@ (80055c0 <HAL_I2C_MemRxCpltCallback+0x518>)
 80054e8:	4413      	add	r3, r2
 80054ea:	f503 539a 	add.w	r3, r3, #4928	@ 0x1340
 80054ee:	3316      	adds	r3, #22
 80054f0:	f993 3000 	ldrsb.w	r3, [r3]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d02d      	beq.n	8005554 <HAL_I2C_MemRxCpltCallback+0x4ac>
						apply_calibration(magcal.BpFast[0][i], magcal.BpFast[1][i],
 80054f8:	4b30      	ldr	r3, [pc, #192]	@ (80055bc <HAL_I2C_MemRxCpltCallback+0x514>)
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	4a30      	ldr	r2, [pc, #192]	@ (80055c0 <HAL_I2C_MemRxCpltCallback+0x518>)
 80054fe:	f503 7303 	add.w	r3, r3, #524	@ 0x20c
 8005502:	005b      	lsls	r3, r3, #1
 8005504:	4413      	add	r3, r2
 8005506:	f9b3 0002 	ldrsh.w	r0, [r3, #2]
 800550a:	4b2c      	ldr	r3, [pc, #176]	@ (80055bc <HAL_I2C_MemRxCpltCallback+0x514>)
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	4a2c      	ldr	r2, [pc, #176]	@ (80055c0 <HAL_I2C_MemRxCpltCallback+0x518>)
 8005510:	f203 4396 	addw	r3, r3, #1174	@ 0x496
 8005514:	005b      	lsls	r3, r3, #1
 8005516:	4413      	add	r3, r2
 8005518:	f9b3 1002 	ldrsh.w	r1, [r3, #2]
 800551c:	4b27      	ldr	r3, [pc, #156]	@ (80055bc <HAL_I2C_MemRxCpltCallback+0x514>)
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	4a27      	ldr	r2, [pc, #156]	@ (80055c0 <HAL_I2C_MemRxCpltCallback+0x518>)
 8005522:	f503 63e4 	add.w	r3, r3, #1824	@ 0x720
 8005526:	005b      	lsls	r3, r3, #1
 8005528:	4413      	add	r3, r2
 800552a:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800552e:	4b25      	ldr	r3, [pc, #148]	@ (80055c4 <HAL_I2C_MemRxCpltCallback+0x51c>)
 8005530:	f7ff fa84 	bl	8004a3c <apply_calibration>
						quality_update(&point);
 8005534:	4823      	ldr	r0, [pc, #140]	@ (80055c4 <HAL_I2C_MemRxCpltCallback+0x51c>)
 8005536:	f001 fd71 	bl	800701c <quality_update>
						if(magcal.FitError < 2.0)
 800553a:	4b21      	ldr	r3, [pc, #132]	@ (80055c0 <HAL_I2C_MemRxCpltCallback+0x518>)
 800553c:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8005540:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8005544:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005548:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800554c:	d502      	bpl.n	8005554 <HAL_I2C_MemRxCpltCallback+0x4ac>
							magcal_flag = 0;
 800554e:	4b1a      	ldr	r3, [pc, #104]	@ (80055b8 <HAL_I2C_MemRxCpltCallback+0x510>)
 8005550:	2200      	movs	r2, #0
 8005552:	701a      	strb	r2, [r3, #0]
				for (i=0; i < MAGBUFFSIZE; i++) {
 8005554:	4b19      	ldr	r3, [pc, #100]	@ (80055bc <HAL_I2C_MemRxCpltCallback+0x514>)
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	3301      	adds	r3, #1
 800555a:	4a18      	ldr	r2, [pc, #96]	@ (80055bc <HAL_I2C_MemRxCpltCallback+0x514>)
 800555c:	6013      	str	r3, [r2, #0]
 800555e:	4b17      	ldr	r3, [pc, #92]	@ (80055bc <HAL_I2C_MemRxCpltCallback+0x514>)
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f240 2289 	movw	r2, #649	@ 0x289
 8005566:	4293      	cmp	r3, r2
 8005568:	ddbb      	ble.n	80054e2 <HAL_I2C_MemRxCpltCallback+0x43a>
 800556a:	e15a      	b.n	8005822 <HAL_I2C_MemRxCpltCallback+0x77a>
 800556c:	f3af 8000 	nop.w
 8005570:	9999999a 	.word	0x9999999a
 8005574:	40239999 	.word	0x40239999
 8005578:	200003c8 	.word	0x200003c8
 800557c:	20000360 	.word	0x20000360
 8005580:	20000374 	.word	0x20000374
 8005584:	20000376 	.word	0x20000376
 8005588:	20000378 	.word	0x20000378
 800558c:	42740000 	.word	0x42740000
 8005590:	47c35000 	.word	0x47c35000
 8005594:	20000380 	.word	0x20000380
 8005598:	20000384 	.word	0x20000384
 800559c:	20000388 	.word	0x20000388
 80055a0:	200004b4 	.word	0x200004b4
 80055a4:	200004d8 	.word	0x200004d8
 80055a8:	20000368 	.word	0x20000368
 80055ac:	2000037a 	.word	0x2000037a
 80055b0:	2000037c 	.word	0x2000037c
 80055b4:	2000037e 	.word	0x2000037e
 80055b8:	20000040 	.word	0x20000040
 80055bc:	20001b0c 	.word	0x20001b0c
 80055c0:	200004f0 	.word	0x200004f0
 80055c4:	20001b18 	.word	0x20001b18
				mag_x = magX * MAG_SENSITIVITY_4GAUSS / 1000;
 80055c8:	4b9b      	ldr	r3, [pc, #620]	@ (8005838 <HAL_I2C_MemRxCpltCallback+0x790>)
 80055ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80055ce:	ee07 3a90 	vmov	s15, r3
 80055d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80055d6:	ed9f 7a99 	vldr	s14, [pc, #612]	@ 800583c <HAL_I2C_MemRxCpltCallback+0x794>
 80055da:	ee27 7a87 	vmul.f32	s14, s15, s14
 80055de:	eddf 6a98 	vldr	s13, [pc, #608]	@ 8005840 <HAL_I2C_MemRxCpltCallback+0x798>
 80055e2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80055e6:	4b97      	ldr	r3, [pc, #604]	@ (8005844 <HAL_I2C_MemRxCpltCallback+0x79c>)
 80055e8:	edc3 7a00 	vstr	s15, [r3]
				mag_y = magY * MAG_SENSITIVITY_4GAUSS / 1000;
 80055ec:	4b96      	ldr	r3, [pc, #600]	@ (8005848 <HAL_I2C_MemRxCpltCallback+0x7a0>)
 80055ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80055f2:	ee07 3a90 	vmov	s15, r3
 80055f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80055fa:	ed9f 7a90 	vldr	s14, [pc, #576]	@ 800583c <HAL_I2C_MemRxCpltCallback+0x794>
 80055fe:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005602:	eddf 6a8f 	vldr	s13, [pc, #572]	@ 8005840 <HAL_I2C_MemRxCpltCallback+0x798>
 8005606:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800560a:	4b90      	ldr	r3, [pc, #576]	@ (800584c <HAL_I2C_MemRxCpltCallback+0x7a4>)
 800560c:	edc3 7a00 	vstr	s15, [r3]
				mag_z = magZ * MAG_SENSITIVITY_4GAUSS / 1000;
 8005610:	4b8f      	ldr	r3, [pc, #572]	@ (8005850 <HAL_I2C_MemRxCpltCallback+0x7a8>)
 8005612:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005616:	ee07 3a90 	vmov	s15, r3
 800561a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800561e:	ed9f 7a87 	vldr	s14, [pc, #540]	@ 800583c <HAL_I2C_MemRxCpltCallback+0x794>
 8005622:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005626:	eddf 6a86 	vldr	s13, [pc, #536]	@ 8005840 <HAL_I2C_MemRxCpltCallback+0x798>
 800562a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800562e:	4b89      	ldr	r3, [pc, #548]	@ (8005854 <HAL_I2C_MemRxCpltCallback+0x7ac>)
 8005630:	edc3 7a00 	vstr	s15, [r3]
				mx1 = mag_x - hardIron_x;
 8005634:	4b83      	ldr	r3, [pc, #524]	@ (8005844 <HAL_I2C_MemRxCpltCallback+0x79c>)
 8005636:	ed93 7a00 	vldr	s14, [r3]
 800563a:	4b87      	ldr	r3, [pc, #540]	@ (8005858 <HAL_I2C_MemRxCpltCallback+0x7b0>)
 800563c:	edd3 7a00 	vldr	s15, [r3]
 8005640:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005644:	4b85      	ldr	r3, [pc, #532]	@ (800585c <HAL_I2C_MemRxCpltCallback+0x7b4>)
 8005646:	edc3 7a00 	vstr	s15, [r3]
				my1 = mag_y - hardIron_y;
 800564a:	4b80      	ldr	r3, [pc, #512]	@ (800584c <HAL_I2C_MemRxCpltCallback+0x7a4>)
 800564c:	ed93 7a00 	vldr	s14, [r3]
 8005650:	4b83      	ldr	r3, [pc, #524]	@ (8005860 <HAL_I2C_MemRxCpltCallback+0x7b8>)
 8005652:	edd3 7a00 	vldr	s15, [r3]
 8005656:	ee77 7a67 	vsub.f32	s15, s14, s15
 800565a:	4b82      	ldr	r3, [pc, #520]	@ (8005864 <HAL_I2C_MemRxCpltCallback+0x7bc>)
 800565c:	edc3 7a00 	vstr	s15, [r3]
				mz1 = mag_z - hardIron_z;
 8005660:	4b7c      	ldr	r3, [pc, #496]	@ (8005854 <HAL_I2C_MemRxCpltCallback+0x7ac>)
 8005662:	ed93 7a00 	vldr	s14, [r3]
 8005666:	4b80      	ldr	r3, [pc, #512]	@ (8005868 <HAL_I2C_MemRxCpltCallback+0x7c0>)
 8005668:	edd3 7a00 	vldr	s15, [r3]
 800566c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005670:	4b7e      	ldr	r3, [pc, #504]	@ (800586c <HAL_I2C_MemRxCpltCallback+0x7c4>)
 8005672:	edc3 7a00 	vstr	s15, [r3]
				float corrected_V[] = { mx1, my1, mz1 };
 8005676:	4b79      	ldr	r3, [pc, #484]	@ (800585c <HAL_I2C_MemRxCpltCallback+0x7b4>)
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	60fb      	str	r3, [r7, #12]
 800567c:	4b79      	ldr	r3, [pc, #484]	@ (8005864 <HAL_I2C_MemRxCpltCallback+0x7bc>)
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	613b      	str	r3, [r7, #16]
 8005682:	4b7a      	ldr	r3, [pc, #488]	@ (800586c <HAL_I2C_MemRxCpltCallback+0x7c4>)
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	617b      	str	r3, [r7, #20]
				result_V[0] = corrected_V[0] * softIron_cali[0][0]
 8005688:	ed97 7a03 	vldr	s14, [r7, #12]
 800568c:	4b78      	ldr	r3, [pc, #480]	@ (8005870 <HAL_I2C_MemRxCpltCallback+0x7c8>)
 800568e:	edd3 7a00 	vldr	s15, [r3]
 8005692:	ee27 7a27 	vmul.f32	s14, s14, s15
						+ corrected_V[1] * softIron_cali[0][1]
 8005696:	edd7 6a04 	vldr	s13, [r7, #16]
 800569a:	4b75      	ldr	r3, [pc, #468]	@ (8005870 <HAL_I2C_MemRxCpltCallback+0x7c8>)
 800569c:	edd3 7a01 	vldr	s15, [r3, #4]
 80056a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80056a4:	ee37 7a27 	vadd.f32	s14, s14, s15
						+ corrected_V[2] * softIron_cali[0][2];
 80056a8:	edd7 6a05 	vldr	s13, [r7, #20]
 80056ac:	4b70      	ldr	r3, [pc, #448]	@ (8005870 <HAL_I2C_MemRxCpltCallback+0x7c8>)
 80056ae:	edd3 7a02 	vldr	s15, [r3, #8]
 80056b2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80056b6:	ee77 7a27 	vadd.f32	s15, s14, s15
				result_V[0] = corrected_V[0] * softIron_cali[0][0]
 80056ba:	4b6e      	ldr	r3, [pc, #440]	@ (8005874 <HAL_I2C_MemRxCpltCallback+0x7cc>)
 80056bc:	edc3 7a00 	vstr	s15, [r3]
				result_V[1] = corrected_V[0] * softIron_cali[1][0]
 80056c0:	ed97 7a03 	vldr	s14, [r7, #12]
 80056c4:	4b6a      	ldr	r3, [pc, #424]	@ (8005870 <HAL_I2C_MemRxCpltCallback+0x7c8>)
 80056c6:	edd3 7a03 	vldr	s15, [r3, #12]
 80056ca:	ee27 7a27 	vmul.f32	s14, s14, s15
						+ corrected_V[1] * softIron_cali[1][1]
 80056ce:	edd7 6a04 	vldr	s13, [r7, #16]
 80056d2:	4b67      	ldr	r3, [pc, #412]	@ (8005870 <HAL_I2C_MemRxCpltCallback+0x7c8>)
 80056d4:	edd3 7a04 	vldr	s15, [r3, #16]
 80056d8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80056dc:	ee37 7a27 	vadd.f32	s14, s14, s15
						+ corrected_V[2] * softIron_cali[1][2];
 80056e0:	edd7 6a05 	vldr	s13, [r7, #20]
 80056e4:	4b62      	ldr	r3, [pc, #392]	@ (8005870 <HAL_I2C_MemRxCpltCallback+0x7c8>)
 80056e6:	edd3 7a05 	vldr	s15, [r3, #20]
 80056ea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80056ee:	ee77 7a27 	vadd.f32	s15, s14, s15
				result_V[1] = corrected_V[0] * softIron_cali[1][0]
 80056f2:	4b60      	ldr	r3, [pc, #384]	@ (8005874 <HAL_I2C_MemRxCpltCallback+0x7cc>)
 80056f4:	edc3 7a01 	vstr	s15, [r3, #4]
				result_V[2] = corrected_V[0] * softIron_cali[2][0]
 80056f8:	ed97 7a03 	vldr	s14, [r7, #12]
 80056fc:	4b5c      	ldr	r3, [pc, #368]	@ (8005870 <HAL_I2C_MemRxCpltCallback+0x7c8>)
 80056fe:	edd3 7a06 	vldr	s15, [r3, #24]
 8005702:	ee27 7a27 	vmul.f32	s14, s14, s15
						+ corrected_V[1] * softIron_cali[2][1]
 8005706:	edd7 6a04 	vldr	s13, [r7, #16]
 800570a:	4b59      	ldr	r3, [pc, #356]	@ (8005870 <HAL_I2C_MemRxCpltCallback+0x7c8>)
 800570c:	edd3 7a07 	vldr	s15, [r3, #28]
 8005710:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005714:	ee37 7a27 	vadd.f32	s14, s14, s15
						+ corrected_V[2] * softIron_cali[2][2];
 8005718:	edd7 6a05 	vldr	s13, [r7, #20]
 800571c:	4b54      	ldr	r3, [pc, #336]	@ (8005870 <HAL_I2C_MemRxCpltCallback+0x7c8>)
 800571e:	edd3 7a08 	vldr	s15, [r3, #32]
 8005722:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005726:	ee77 7a27 	vadd.f32	s15, s14, s15
				result_V[2] = corrected_V[0] * softIron_cali[2][0]
 800572a:	4b52      	ldr	r3, [pc, #328]	@ (8005874 <HAL_I2C_MemRxCpltCallback+0x7cc>)
 800572c:	edc3 7a02 	vstr	s15, [r3, #8]
				mx2 = result_V[0];
 8005730:	4b50      	ldr	r3, [pc, #320]	@ (8005874 <HAL_I2C_MemRxCpltCallback+0x7cc>)
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	4a50      	ldr	r2, [pc, #320]	@ (8005878 <HAL_I2C_MemRxCpltCallback+0x7d0>)
 8005736:	6013      	str	r3, [r2, #0]
				my2 = result_V[1];
 8005738:	4b4e      	ldr	r3, [pc, #312]	@ (8005874 <HAL_I2C_MemRxCpltCallback+0x7cc>)
 800573a:	685b      	ldr	r3, [r3, #4]
 800573c:	4a4f      	ldr	r2, [pc, #316]	@ (800587c <HAL_I2C_MemRxCpltCallback+0x7d4>)
 800573e:	6013      	str	r3, [r2, #0]
				mz2 = result_V[2];
 8005740:	4b4c      	ldr	r3, [pc, #304]	@ (8005874 <HAL_I2C_MemRxCpltCallback+0x7cc>)
 8005742:	689b      	ldr	r3, [r3, #8]
 8005744:	4a4e      	ldr	r2, [pc, #312]	@ (8005880 <HAL_I2C_MemRxCpltCallback+0x7d8>)
 8005746:	6013      	str	r3, [r2, #0]
				mxyz[0] = mx2;
 8005748:	4b4b      	ldr	r3, [pc, #300]	@ (8005878 <HAL_I2C_MemRxCpltCallback+0x7d0>)
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	4a4d      	ldr	r2, [pc, #308]	@ (8005884 <HAL_I2C_MemRxCpltCallback+0x7dc>)
 800574e:	6013      	str	r3, [r2, #0]
				mxyz[1] = my2;
 8005750:	4b4a      	ldr	r3, [pc, #296]	@ (800587c <HAL_I2C_MemRxCpltCallback+0x7d4>)
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	4a4b      	ldr	r2, [pc, #300]	@ (8005884 <HAL_I2C_MemRxCpltCallback+0x7dc>)
 8005756:	6053      	str	r3, [r2, #4]
				mxyz[2] = mz2;
 8005758:	4b49      	ldr	r3, [pc, #292]	@ (8005880 <HAL_I2C_MemRxCpltCallback+0x7d8>)
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	4a49      	ldr	r2, [pc, #292]	@ (8005884 <HAL_I2C_MemRxCpltCallback+0x7dc>)
 800575e:	6093      	str	r3, [r2, #8]
				vector_normalize(mxyz);
 8005760:	4848      	ldr	r0, [pc, #288]	@ (8005884 <HAL_I2C_MemRxCpltCallback+0x7dc>)
 8005762:	f7fe f80d 	bl	8003780 <vector_normalize>
				axyz1[0] = -axyz[0];
 8005766:	4b48      	ldr	r3, [pc, #288]	@ (8005888 <HAL_I2C_MemRxCpltCallback+0x7e0>)
 8005768:	edd3 7a00 	vldr	s15, [r3]
 800576c:	eef1 7a67 	vneg.f32	s15, s15
 8005770:	4b46      	ldr	r3, [pc, #280]	@ (800588c <HAL_I2C_MemRxCpltCallback+0x7e4>)
 8005772:	edc3 7a00 	vstr	s15, [r3]
				gxyz1[0] = -gxyz[0];
 8005776:	4b46      	ldr	r3, [pc, #280]	@ (8005890 <HAL_I2C_MemRxCpltCallback+0x7e8>)
 8005778:	edd3 7a00 	vldr	s15, [r3]
 800577c:	eef1 7a67 	vneg.f32	s15, s15
 8005780:	4b44      	ldr	r3, [pc, #272]	@ (8005894 <HAL_I2C_MemRxCpltCallback+0x7ec>)
 8005782:	edc3 7a00 	vstr	s15, [r3]
				Now = micros();
 8005786:	f7fd ff81 	bl	800368c <micros>
 800578a:	4603      	mov	r3, r0
 800578c:	4a42      	ldr	r2, [pc, #264]	@ (8005898 <HAL_I2C_MemRxCpltCallback+0x7f0>)
 800578e:	6013      	str	r3, [r2, #0]
				deltat = (Now - lastUpdate) * 1.5e-4;
 8005790:	4b41      	ldr	r3, [pc, #260]	@ (8005898 <HAL_I2C_MemRxCpltCallback+0x7f0>)
 8005792:	681a      	ldr	r2, [r3, #0]
 8005794:	4b41      	ldr	r3, [pc, #260]	@ (800589c <HAL_I2C_MemRxCpltCallback+0x7f4>)
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	1ad3      	subs	r3, r2, r3
 800579a:	4618      	mov	r0, r3
 800579c:	f7fa fe8a 	bl	80004b4 <__aeabi_ui2d>
 80057a0:	a323      	add	r3, pc, #140	@ (adr r3, 8005830 <HAL_I2C_MemRxCpltCallback+0x788>)
 80057a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057a6:	f7fa feff 	bl	80005a8 <__aeabi_dmul>
 80057aa:	4602      	mov	r2, r0
 80057ac:	460b      	mov	r3, r1
 80057ae:	4610      	mov	r0, r2
 80057b0:	4619      	mov	r1, r3
 80057b2:	f7fb f9a9 	bl	8000b08 <__aeabi_d2f>
 80057b6:	4603      	mov	r3, r0
 80057b8:	4a39      	ldr	r2, [pc, #228]	@ (80058a0 <HAL_I2C_MemRxCpltCallback+0x7f8>)
 80057ba:	6013      	str	r3, [r2, #0]
				lastUpdate = Now;
 80057bc:	4b36      	ldr	r3, [pc, #216]	@ (8005898 <HAL_I2C_MemRxCpltCallback+0x7f0>)
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	4a36      	ldr	r2, [pc, #216]	@ (800589c <HAL_I2C_MemRxCpltCallback+0x7f4>)
 80057c2:	6013      	str	r3, [r2, #0]
				MadgwickAHRSupdate(gxyz1[0], gxyz[1], gxyz[2], axyz1[0],
 80057c4:	4b33      	ldr	r3, [pc, #204]	@ (8005894 <HAL_I2C_MemRxCpltCallback+0x7ec>)
 80057c6:	edd3 7a00 	vldr	s15, [r3]
 80057ca:	4b31      	ldr	r3, [pc, #196]	@ (8005890 <HAL_I2C_MemRxCpltCallback+0x7e8>)
 80057cc:	ed93 7a01 	vldr	s14, [r3, #4]
 80057d0:	4b2f      	ldr	r3, [pc, #188]	@ (8005890 <HAL_I2C_MemRxCpltCallback+0x7e8>)
 80057d2:	edd3 6a02 	vldr	s13, [r3, #8]
 80057d6:	4b2d      	ldr	r3, [pc, #180]	@ (800588c <HAL_I2C_MemRxCpltCallback+0x7e4>)
 80057d8:	ed93 6a00 	vldr	s12, [r3]
 80057dc:	4b2a      	ldr	r3, [pc, #168]	@ (8005888 <HAL_I2C_MemRxCpltCallback+0x7e0>)
 80057de:	edd3 5a01 	vldr	s11, [r3, #4]
 80057e2:	4b29      	ldr	r3, [pc, #164]	@ (8005888 <HAL_I2C_MemRxCpltCallback+0x7e0>)
 80057e4:	ed93 5a02 	vldr	s10, [r3, #8]
 80057e8:	4b26      	ldr	r3, [pc, #152]	@ (8005884 <HAL_I2C_MemRxCpltCallback+0x7dc>)
 80057ea:	edd3 4a00 	vldr	s9, [r3]
 80057ee:	4b25      	ldr	r3, [pc, #148]	@ (8005884 <HAL_I2C_MemRxCpltCallback+0x7dc>)
 80057f0:	edd3 3a01 	vldr	s7, [r3, #4]
 80057f4:	4b23      	ldr	r3, [pc, #140]	@ (8005884 <HAL_I2C_MemRxCpltCallback+0x7dc>)
 80057f6:	ed93 4a02 	vldr	s8, [r3, #8]
 80057fa:	eeb0 3a64 	vmov.f32	s6, s9
 80057fe:	eef0 2a45 	vmov.f32	s5, s10
 8005802:	eeb0 2a65 	vmov.f32	s4, s11
 8005806:	eef0 1a46 	vmov.f32	s3, s12
 800580a:	eeb0 1a66 	vmov.f32	s2, s13
 800580e:	eef0 0a47 	vmov.f32	s1, s14
 8005812:	eeb0 0a67 	vmov.f32	s0, s15
 8005816:	f7fd fff5 	bl	8003804 <MadgwickAHRSupdate>
				UTIL_SEQ_SetTask(1 << CFG_TASK_MY_TASK_BLE, CFG_SCH_PRIO_0);
 800581a:	2100      	movs	r1, #0
 800581c:	2004      	movs	r0, #4
 800581e:	f00a fd07 	bl	8010230 <UTIL_SEQ_SetTask>
			CurrentSensor = GYRO_SENSOR;
 8005822:	4b20      	ldr	r3, [pc, #128]	@ (80058a4 <HAL_I2C_MemRxCpltCallback+0x7fc>)
 8005824:	2200      	movs	r2, #0
 8005826:	701a      	strb	r2, [r3, #0]
}
 8005828:	bf00      	nop
 800582a:	3718      	adds	r7, #24
 800582c:	46bd      	mov	sp, r7
 800582e:	bd80      	pop	{r7, pc}
 8005830:	30553261 	.word	0x30553261
 8005834:	3f23a92a 	.word	0x3f23a92a
 8005838:	2000037a 	.word	0x2000037a
 800583c:	3e0f5c29 	.word	0x3e0f5c29
 8005840:	447a0000 	.word	0x447a0000
 8005844:	200003bc 	.word	0x200003bc
 8005848:	2000037c 	.word	0x2000037c
 800584c:	200003c0 	.word	0x200003c0
 8005850:	2000037e 	.word	0x2000037e
 8005854:	200003c4 	.word	0x200003c4
 8005858:	20000010 	.word	0x20000010
 800585c:	20000468 	.word	0x20000468
 8005860:	20000014 	.word	0x20000014
 8005864:	2000046c 	.word	0x2000046c
 8005868:	20000018 	.word	0x20000018
 800586c:	20000470 	.word	0x20000470
 8005870:	2000001c 	.word	0x2000001c
 8005874:	200004e4 	.word	0x200004e4
 8005878:	20000474 	.word	0x20000474
 800587c:	20000478 	.word	0x20000478
 8005880:	2000047c 	.word	0x2000047c
 8005884:	200004cc 	.word	0x200004cc
 8005888:	200004b4 	.word	0x200004b4
 800588c:	200004c0 	.word	0x200004c0
 8005890:	2000049c 	.word	0x2000049c
 8005894:	200004a8 	.word	0x200004a8
 8005898:	20000498 	.word	0x20000498
 800589c:	20000490 	.word	0x20000490
 80058a0:	2000048c 	.word	0x2000048c
 80058a4:	200003c8 	.word	0x200003c8

080058a8 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */

int main(void) {
 80058a8:	b580      	push	{r7, lr}
 80058aa:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80058ac:	f001 ffd2 	bl	8007854 <HAL_Init>
	/* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
	MX_APPE_Config();
 80058b0:	f7fb fa4e 	bl	8000d50 <MX_APPE_Config>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80058b4:	f000 f824 	bl	8005900 <SystemClock_Config>

	/* Configure the peripherals common clocks */
	PeriphCommonClock_Config();
 80058b8:	f000 f884 	bl	80059c4 <PeriphCommonClock_Config>

	/* IPCC initialisation */
	MX_IPCC_Init();
 80058bc:	f000 f8e2 	bl	8005a84 <MX_IPCC_Init>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80058c0:	f000 f998 	bl	8005bf4 <MX_GPIO_Init>
	MX_DMA_Init();
 80058c4:	f000 f97c 	bl	8005bc0 <MX_DMA_Init>
	MX_I2C1_Init();
 80058c8:	f000 f89c 	bl	8005a04 <MX_I2C1_Init>
	MX_RTC_Init();
 80058cc:	f000 f8f6 	bl	8005abc <MX_RTC_Init>
	MX_TIM2_Init();
 80058d0:	f000 f928 	bl	8005b24 <MX_TIM2_Init>
	MX_RF_Init();
 80058d4:	f000 f8ea 	bl	8005aac <MX_RF_Init>
	/* USER CODE BEGIN 2 */

	/* USER CODE END 2 */

	/* Init code for STM32_WPAN */
	MX_APPE_Init();
 80058d8:	f7fb fa48 	bl	8000d6c <MX_APPE_Init>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	LSM9DS1_Init();
 80058dc:	f7fd fea2 	bl	8003624 <LSM9DS1_Init>
	HAL_Delay(10);
 80058e0:	200a      	movs	r0, #10
 80058e2:	f7fb fb70 	bl	8000fc6 <HAL_Delay>

	HAL_TIM_Base_Start(&htim2);
 80058e6:	4805      	ldr	r0, [pc, #20]	@ (80058fc <main+0x54>)
 80058e8:	f006 ff12 	bl	800c710 <HAL_TIM_Base_Start>

	magcal_Init();
 80058ec:	f7ff f87c 	bl	80049e8 <magcal_Init>

	while (1) {

		/* USER CODE END WHILE */
		MX_APPE_Process();
 80058f0:	f7fb fb8e 	bl	8001010 <MX_APPE_Process>

		/* USER CODE BEGIN 3 */

		//low_power_code
		LSM9DS1_ReadGyro_DMA();
 80058f4:	f7ff f83c 	bl	8004970 <LSM9DS1_ReadGyro_DMA>
		MX_APPE_Process();
 80058f8:	bf00      	nop
 80058fa:	e7f9      	b.n	80058f0 <main+0x48>
 80058fc:	2000030c 	.word	0x2000030c

08005900 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8005900:	b580      	push	{r7, lr}
 8005902:	b09a      	sub	sp, #104	@ 0x68
 8005904:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8005906:	f107 0320 	add.w	r3, r7, #32
 800590a:	2248      	movs	r2, #72	@ 0x48
 800590c:	2100      	movs	r1, #0
 800590e:	4618      	mov	r0, r3
 8005910:	f00a feed 	bl	80106ee <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8005914:	1d3b      	adds	r3, r7, #4
 8005916:	2200      	movs	r2, #0
 8005918:	601a      	str	r2, [r3, #0]
 800591a:	605a      	str	r2, [r3, #4]
 800591c:	609a      	str	r2, [r3, #8]
 800591e:	60da      	str	r2, [r3, #12]
 8005920:	611a      	str	r2, [r3, #16]
 8005922:	615a      	str	r2, [r3, #20]
 8005924:	619a      	str	r2, [r3, #24]

	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess();
 8005926:	f004 ff57 	bl	800a7d8 <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMHIGH);
 800592a:	2010      	movs	r0, #16
 800592c:	f7fd fe14 	bl	8003558 <LL_RCC_LSE_SetDriveCapability>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005930:	4b23      	ldr	r3, [pc, #140]	@ (80059c0 <SystemClock_Config+0xc0>)
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005938:	4a21      	ldr	r2, [pc, #132]	@ (80059c0 <SystemClock_Config+0xc0>)
 800593a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800593e:	6013      	str	r3, [r2, #0]
 8005940:	4b1f      	ldr	r3, [pc, #124]	@ (80059c0 <SystemClock_Config+0xc0>)
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005948:	603b      	str	r3, [r7, #0]
 800594a:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI
 800594c:	2327      	movs	r3, #39	@ 0x27
 800594e:	623b      	str	r3, [r7, #32]
			| RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_LSE
			| RCC_OSCILLATORTYPE_MSI;
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005950:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8005954:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8005956:	2301      	movs	r3, #1
 8005958:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800595a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800595e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8005960:	2301      	movs	r3, #1
 8005962:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8005964:	2340      	movs	r3, #64	@ 0x40
 8005966:	633b      	str	r3, [r7, #48]	@ 0x30
	RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8005968:	2300      	movs	r3, #0
 800596a:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_10;
 800596c:	23a0      	movs	r3, #160	@ 0xa0
 800596e:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8005970:	2300      	movs	r3, #0
 8005972:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8005974:	f107 0320 	add.w	r3, r7, #32
 8005978:	4618      	mov	r0, r3
 800597a:	f005 faa9 	bl	800aed0 <HAL_RCC_OscConfig>
 800597e:	4603      	mov	r3, r0
 8005980:	2b00      	cmp	r3, #0
 8005982:	d001      	beq.n	8005988 <SystemClock_Config+0x88>
		Error_Handler();
 8005984:	f000 f9b2 	bl	8005cec <Error_Handler>
	}

	/** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4 | RCC_CLOCKTYPE_HCLK2
 8005988:	236f      	movs	r3, #111	@ 0x6f
 800598a:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1
			| RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800598c:	2300      	movs	r3, #0
 800598e:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005990:	2300      	movs	r3, #0
 8005992:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8005994:	2300      	movs	r3, #0
 8005996:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005998:	2300      	movs	r3, #0
 800599a:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 800599c:	2300      	movs	r3, #0
 800599e:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 80059a0:	2300      	movs	r3, #0
 80059a2:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 80059a4:	1d3b      	adds	r3, r7, #4
 80059a6:	2101      	movs	r1, #1
 80059a8:	4618      	mov	r0, r3
 80059aa:	f005 fe05 	bl	800b5b8 <HAL_RCC_ClockConfig>
 80059ae:	4603      	mov	r3, r0
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d001      	beq.n	80059b8 <SystemClock_Config+0xb8>
		Error_Handler();
 80059b4:	f000 f99a 	bl	8005cec <Error_Handler>
	}
}
 80059b8:	bf00      	nop
 80059ba:	3768      	adds	r7, #104	@ 0x68
 80059bc:	46bd      	mov	sp, r7
 80059be:	bd80      	pop	{r7, pc}
 80059c0:	58000400 	.word	0x58000400

080059c4 <PeriphCommonClock_Config>:

/**
 * @brief Peripherals Common Clock Configuration
 * @retval None
 */
void PeriphCommonClock_Config(void) {
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b094      	sub	sp, #80	@ 0x50
 80059c8:	af00      	add	r7, sp, #0
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 80059ca:	463b      	mov	r3, r7
 80059cc:	2250      	movs	r2, #80	@ 0x50
 80059ce:	2100      	movs	r1, #0
 80059d0:	4618      	mov	r0, r3
 80059d2:	f00a fe8c 	bl	80106ee <memset>

	/** Initializes the peripherals clock
	 */
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS
 80059d6:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80059da:	603b      	str	r3, [r7, #0]
			| RCC_PERIPHCLK_RFWAKEUP;
	PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 80059dc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80059e0:	647b      	str	r3, [r7, #68]	@ 0x44
	PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 80059e2:	2300      	movs	r3, #0
 80059e4:	64bb      	str	r3, [r7, #72]	@ 0x48
	PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 80059e6:	2300      	movs	r3, #0
 80059e8:	64fb      	str	r3, [r7, #76]	@ 0x4c

	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 80059ea:	463b      	mov	r3, r7
 80059ec:	4618      	mov	r0, r3
 80059ee:	f006 f9f4 	bl	800bdda <HAL_RCCEx_PeriphCLKConfig>
 80059f2:	4603      	mov	r3, r0
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d001      	beq.n	80059fc <PeriphCommonClock_Config+0x38>
		Error_Handler();
 80059f8:	f000 f978 	bl	8005cec <Error_Handler>
	}
	/* USER CODE BEGIN Smps */

	/* USER CODE END Smps */
}
 80059fc:	bf00      	nop
 80059fe:	3750      	adds	r7, #80	@ 0x50
 8005a00:	46bd      	mov	sp, r7
 8005a02:	bd80      	pop	{r7, pc}

08005a04 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8005a04:	b580      	push	{r7, lr}
 8005a06:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8005a08:	4b1b      	ldr	r3, [pc, #108]	@ (8005a78 <MX_I2C1_Init+0x74>)
 8005a0a:	4a1c      	ldr	r2, [pc, #112]	@ (8005a7c <MX_I2C1_Init+0x78>)
 8005a0c:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x00B07CB4;
 8005a0e:	4b1a      	ldr	r3, [pc, #104]	@ (8005a78 <MX_I2C1_Init+0x74>)
 8005a10:	4a1b      	ldr	r2, [pc, #108]	@ (8005a80 <MX_I2C1_Init+0x7c>)
 8005a12:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0;
 8005a14:	4b18      	ldr	r3, [pc, #96]	@ (8005a78 <MX_I2C1_Init+0x74>)
 8005a16:	2200      	movs	r2, #0
 8005a18:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005a1a:	4b17      	ldr	r3, [pc, #92]	@ (8005a78 <MX_I2C1_Init+0x74>)
 8005a1c:	2201      	movs	r2, #1
 8005a1e:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005a20:	4b15      	ldr	r3, [pc, #84]	@ (8005a78 <MX_I2C1_Init+0x74>)
 8005a22:	2200      	movs	r2, #0
 8005a24:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 8005a26:	4b14      	ldr	r3, [pc, #80]	@ (8005a78 <MX_I2C1_Init+0x74>)
 8005a28:	2200      	movs	r2, #0
 8005a2a:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8005a2c:	4b12      	ldr	r3, [pc, #72]	@ (8005a78 <MX_I2C1_Init+0x74>)
 8005a2e:	2200      	movs	r2, #0
 8005a30:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005a32:	4b11      	ldr	r3, [pc, #68]	@ (8005a78 <MX_I2C1_Init+0x74>)
 8005a34:	2200      	movs	r2, #0
 8005a36:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005a38:	4b0f      	ldr	r3, [pc, #60]	@ (8005a78 <MX_I2C1_Init+0x74>)
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8005a3e:	480e      	ldr	r0, [pc, #56]	@ (8005a78 <MX_I2C1_Init+0x74>)
 8005a40:	f002 fddc 	bl	80085fc <HAL_I2C_Init>
 8005a44:	4603      	mov	r3, r0
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d001      	beq.n	8005a4e <MX_I2C1_Init+0x4a>
		Error_Handler();
 8005a4a:	f000 f94f 	bl	8005cec <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE)
 8005a4e:	2100      	movs	r1, #0
 8005a50:	4809      	ldr	r0, [pc, #36]	@ (8005a78 <MX_I2C1_Init+0x74>)
 8005a52:	f004 fda3 	bl	800a59c <HAL_I2CEx_ConfigAnalogFilter>
 8005a56:	4603      	mov	r3, r0
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d001      	beq.n	8005a60 <MX_I2C1_Init+0x5c>
			!= HAL_OK) {
		Error_Handler();
 8005a5c:	f000 f946 	bl	8005cec <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK) {
 8005a60:	2100      	movs	r1, #0
 8005a62:	4805      	ldr	r0, [pc, #20]	@ (8005a78 <MX_I2C1_Init+0x74>)
 8005a64:	f004 fde5 	bl	800a632 <HAL_I2CEx_ConfigDigitalFilter>
 8005a68:	4603      	mov	r3, r0
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d001      	beq.n	8005a72 <MX_I2C1_Init+0x6e>
		Error_Handler();
 8005a6e:	f000 f93d 	bl	8005cec <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */
//	__HAL_LINKDMA(&hi2c1, hdmarx, hdma_i2c1_rx);
	/* USER CODE END I2C1_Init 2 */

}
 8005a72:	bf00      	nop
 8005a74:	bd80      	pop	{r7, pc}
 8005a76:	bf00      	nop
 8005a78:	200001f8 	.word	0x200001f8
 8005a7c:	40005400 	.word	0x40005400
 8005a80:	00b07cb4 	.word	0x00b07cb4

08005a84 <MX_IPCC_Init>:
/**
 * @brief IPCC Initialization Function
 * @param None
 * @retval None
 */
static void MX_IPCC_Init(void) {
 8005a84:	b580      	push	{r7, lr}
 8005a86:	af00      	add	r7, sp, #0
	/* USER CODE END IPCC_Init 0 */

	/* USER CODE BEGIN IPCC_Init 1 */

	/* USER CODE END IPCC_Init 1 */
	hipcc.Instance = IPCC;
 8005a88:	4b06      	ldr	r3, [pc, #24]	@ (8005aa4 <MX_IPCC_Init+0x20>)
 8005a8a:	4a07      	ldr	r2, [pc, #28]	@ (8005aa8 <MX_IPCC_Init+0x24>)
 8005a8c:	601a      	str	r2, [r3, #0]
	if (HAL_IPCC_Init(&hipcc) != HAL_OK) {
 8005a8e:	4805      	ldr	r0, [pc, #20]	@ (8005aa4 <MX_IPCC_Init+0x20>)
 8005a90:	f004 fe1c 	bl	800a6cc <HAL_IPCC_Init>
 8005a94:	4603      	mov	r3, r0
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d001      	beq.n	8005a9e <MX_IPCC_Init+0x1a>
		Error_Handler();
 8005a9a:	f000 f927 	bl	8005cec <Error_Handler>
	}
	/* USER CODE BEGIN IPCC_Init 2 */

	/* USER CODE END IPCC_Init 2 */

}
 8005a9e:	bf00      	nop
 8005aa0:	bd80      	pop	{r7, pc}
 8005aa2:	bf00      	nop
 8005aa4:	200002ac 	.word	0x200002ac
 8005aa8:	58000c00 	.word	0x58000c00

08005aac <MX_RF_Init>:
/**
 * @brief RF Initialization Function
 * @param None
 * @retval None
 */
static void MX_RF_Init(void) {
 8005aac:	b480      	push	{r7}
 8005aae:	af00      	add	r7, sp, #0
	/* USER CODE END RF_Init 1 */
	/* USER CODE BEGIN RF_Init 2 */

	/* USER CODE END RF_Init 2 */

}
 8005ab0:	bf00      	nop
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab8:	4770      	bx	lr
	...

08005abc <MX_RTC_Init>:
/**
 * @brief RTC Initialization Function
 * @param None
 * @retval None
 */
static void MX_RTC_Init(void) {
 8005abc:	b580      	push	{r7, lr}
 8005abe:	af00      	add	r7, sp, #0

	/* USER CODE END RTC_Init 1 */

	/** Initialize RTC Only
	 */
	hrtc.Instance = RTC;
 8005ac0:	4b16      	ldr	r3, [pc, #88]	@ (8005b1c <MX_RTC_Init+0x60>)
 8005ac2:	4a17      	ldr	r2, [pc, #92]	@ (8005b20 <MX_RTC_Init+0x64>)
 8005ac4:	601a      	str	r2, [r3, #0]
	hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8005ac6:	4b15      	ldr	r3, [pc, #84]	@ (8005b1c <MX_RTC_Init+0x60>)
 8005ac8:	2200      	movs	r2, #0
 8005aca:	605a      	str	r2, [r3, #4]
	hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8005acc:	4b13      	ldr	r3, [pc, #76]	@ (8005b1c <MX_RTC_Init+0x60>)
 8005ace:	220f      	movs	r2, #15
 8005ad0:	609a      	str	r2, [r3, #8]
	hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 8005ad2:	4b12      	ldr	r3, [pc, #72]	@ (8005b1c <MX_RTC_Init+0x60>)
 8005ad4:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8005ad8:	60da      	str	r2, [r3, #12]
	hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8005ada:	4b10      	ldr	r3, [pc, #64]	@ (8005b1c <MX_RTC_Init+0x60>)
 8005adc:	2200      	movs	r2, #0
 8005ade:	611a      	str	r2, [r3, #16]
	hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8005ae0:	4b0e      	ldr	r3, [pc, #56]	@ (8005b1c <MX_RTC_Init+0x60>)
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	619a      	str	r2, [r3, #24]
	hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8005ae6:	4b0d      	ldr	r3, [pc, #52]	@ (8005b1c <MX_RTC_Init+0x60>)
 8005ae8:	2200      	movs	r2, #0
 8005aea:	61da      	str	r2, [r3, #28]
	hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8005aec:	4b0b      	ldr	r3, [pc, #44]	@ (8005b1c <MX_RTC_Init+0x60>)
 8005aee:	2200      	movs	r2, #0
 8005af0:	615a      	str	r2, [r3, #20]
	if (HAL_RTC_Init(&hrtc) != HAL_OK) {
 8005af2:	480a      	ldr	r0, [pc, #40]	@ (8005b1c <MX_RTC_Init+0x60>)
 8005af4:	f006 fbf8 	bl	800c2e8 <HAL_RTC_Init>
 8005af8:	4603      	mov	r3, r0
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d001      	beq.n	8005b02 <MX_RTC_Init+0x46>
		Error_Handler();
 8005afe:	f000 f8f5 	bl	8005cec <Error_Handler>
	}

	/** Enable the WakeUp
	 */
	if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16)
 8005b02:	2200      	movs	r2, #0
 8005b04:	2100      	movs	r1, #0
 8005b06:	4805      	ldr	r0, [pc, #20]	@ (8005b1c <MX_RTC_Init+0x60>)
 8005b08:	f006 fcee 	bl	800c4e8 <HAL_RTCEx_SetWakeUpTimer_IT>
 8005b0c:	4603      	mov	r3, r0
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d001      	beq.n	8005b16 <MX_RTC_Init+0x5a>
			!= HAL_OK) {
		Error_Handler();
 8005b12:	f000 f8eb 	bl	8005cec <Error_Handler>
	}
	/* USER CODE BEGIN RTC_Init 2 */

	/* USER CODE END RTC_Init 2 */

}
 8005b16:	bf00      	nop
 8005b18:	bd80      	pop	{r7, pc}
 8005b1a:	bf00      	nop
 8005b1c:	200002e8 	.word	0x200002e8
 8005b20:	40002800 	.word	0x40002800

08005b24 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8005b24:	b580      	push	{r7, lr}
 8005b26:	b088      	sub	sp, #32
 8005b28:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8005b2a:	f107 0310 	add.w	r3, r7, #16
 8005b2e:	2200      	movs	r2, #0
 8005b30:	601a      	str	r2, [r3, #0]
 8005b32:	605a      	str	r2, [r3, #4]
 8005b34:	609a      	str	r2, [r3, #8]
 8005b36:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8005b38:	1d3b      	adds	r3, r7, #4
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	601a      	str	r2, [r3, #0]
 8005b3e:	605a      	str	r2, [r3, #4]
 8005b40:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8005b42:	4b1e      	ldr	r3, [pc, #120]	@ (8005bbc <MX_TIM2_Init+0x98>)
 8005b44:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8005b48:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 99;
 8005b4a:	4b1c      	ldr	r3, [pc, #112]	@ (8005bbc <MX_TIM2_Init+0x98>)
 8005b4c:	2263      	movs	r2, #99	@ 0x63
 8005b4e:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005b50:	4b1a      	ldr	r3, [pc, #104]	@ (8005bbc <MX_TIM2_Init+0x98>)
 8005b52:	2200      	movs	r2, #0
 8005b54:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 0xffffffff;
 8005b56:	4b19      	ldr	r3, [pc, #100]	@ (8005bbc <MX_TIM2_Init+0x98>)
 8005b58:	f04f 32ff 	mov.w	r2, #4294967295
 8005b5c:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005b5e:	4b17      	ldr	r3, [pc, #92]	@ (8005bbc <MX_TIM2_Init+0x98>)
 8005b60:	2200      	movs	r2, #0
 8005b62:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005b64:	4b15      	ldr	r3, [pc, #84]	@ (8005bbc <MX_TIM2_Init+0x98>)
 8005b66:	2200      	movs	r2, #0
 8005b68:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8005b6a:	4814      	ldr	r0, [pc, #80]	@ (8005bbc <MX_TIM2_Init+0x98>)
 8005b6c:	f006 fd78 	bl	800c660 <HAL_TIM_Base_Init>
 8005b70:	4603      	mov	r3, r0
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d001      	beq.n	8005b7a <MX_TIM2_Init+0x56>
		Error_Handler();
 8005b76:	f000 f8b9 	bl	8005cec <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005b7a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005b7e:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8005b80:	f107 0310 	add.w	r3, r7, #16
 8005b84:	4619      	mov	r1, r3
 8005b86:	480d      	ldr	r0, [pc, #52]	@ (8005bbc <MX_TIM2_Init+0x98>)
 8005b88:	f006 fe08 	bl	800c79c <HAL_TIM_ConfigClockSource>
 8005b8c:	4603      	mov	r3, r0
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d001      	beq.n	8005b96 <MX_TIM2_Init+0x72>
		Error_Handler();
 8005b92:	f000 f8ab 	bl	8005cec <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005b96:	2300      	movs	r3, #0
 8005b98:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8005b9e:	1d3b      	adds	r3, r7, #4
 8005ba0:	4619      	mov	r1, r3
 8005ba2:	4806      	ldr	r0, [pc, #24]	@ (8005bbc <MX_TIM2_Init+0x98>)
 8005ba4:	f006 ffd0 	bl	800cb48 <HAL_TIMEx_MasterConfigSynchronization>
 8005ba8:	4603      	mov	r3, r0
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d001      	beq.n	8005bb2 <MX_TIM2_Init+0x8e>
			!= HAL_OK) {
		Error_Handler();
 8005bae:	f000 f89d 	bl	8005cec <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8005bb2:	bf00      	nop
 8005bb4:	3720      	adds	r7, #32
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	bd80      	pop	{r7, pc}
 8005bba:	bf00      	nop
 8005bbc:	2000030c 	.word	0x2000030c

08005bc0 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMAMUX1_CLK_ENABLE();
 8005bc4:	2004      	movs	r0, #4
 8005bc6:	f7fd fcdd 	bl	8003584 <LL_AHB1_GRP1_EnableClock>
	__HAL_RCC_DMA1_CLK_ENABLE();
 8005bca:	2001      	movs	r0, #1
 8005bcc:	f7fd fcda 	bl	8003584 <LL_AHB1_GRP1_EnableClock>

	/* DMA interrupt init */
	/* DMA1_Channel7_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	2100      	movs	r1, #0
 8005bd4:	2011      	movs	r0, #17
 8005bd6:	f002 f80a 	bl	8007bee <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8005bda:	2011      	movs	r0, #17
 8005bdc:	f002 f821 	bl	8007c22 <HAL_NVIC_EnableIRQ>
	/* DMAMUX1_OVR_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMAMUX1_OVR_IRQn, 0, 0);
 8005be0:	2200      	movs	r2, #0
 8005be2:	2100      	movs	r1, #0
 8005be4:	203e      	movs	r0, #62	@ 0x3e
 8005be6:	f002 f802 	bl	8007bee <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMAMUX1_OVR_IRQn);
 8005bea:	203e      	movs	r0, #62	@ 0x3e
 8005bec:	f002 f819 	bl	8007c22 <HAL_NVIC_EnableIRQ>

}
 8005bf0:	bf00      	nop
 8005bf2:	bd80      	pop	{r7, pc}

08005bf4 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8005bf4:	b580      	push	{r7, lr}
 8005bf6:	b086      	sub	sp, #24
 8005bf8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8005bfa:	1d3b      	adds	r3, r7, #4
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	601a      	str	r2, [r3, #0]
 8005c00:	605a      	str	r2, [r3, #4]
 8005c02:	609a      	str	r2, [r3, #8]
 8005c04:	60da      	str	r2, [r3, #12]
 8005c06:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8005c08:	2004      	movs	r0, #4
 8005c0a:	f7fd fcd4 	bl	80035b6 <LL_AHB2_GRP1_EnableClock>
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8005c0e:	2002      	movs	r0, #2
 8005c10:	f7fd fcd1 	bl	80035b6 <LL_AHB2_GRP1_EnableClock>
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8005c14:	2001      	movs	r0, #1
 8005c16:	f7fd fcce 	bl	80035b6 <LL_AHB2_GRP1_EnableClock>
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8005c1a:	2008      	movs	r0, #8
 8005c1c:	f7fd fccb 	bl	80035b6 <LL_AHB2_GRP1_EnableClock>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6 | GPIO_PIN_7, GPIO_PIN_RESET);
 8005c20:	2200      	movs	r2, #0
 8005c22:	21c0      	movs	r1, #192	@ 0xc0
 8005c24:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8005c28:	f002 fc92 	bl	8008550 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LD2_Pin | LD3_Pin | LD1_Pin, GPIO_PIN_RESET);
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	2123      	movs	r1, #35	@ 0x23
 8005c30:	482b      	ldr	r0, [pc, #172]	@ (8005ce0 <MX_GPIO_Init+0xec>)
 8005c32:	f002 fc8d 	bl	8008550 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : PA6 PA7 */
	GPIO_InitStruct.Pin = GPIO_PIN_6 | GPIO_PIN_7;
 8005c36:	23c0      	movs	r3, #192	@ 0xc0
 8005c38:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005c3a:	2301      	movs	r3, #1
 8005c3c:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c3e:	2300      	movs	r3, #0
 8005c40:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005c42:	2300      	movs	r3, #0
 8005c44:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005c46:	1d3b      	adds	r3, r7, #4
 8005c48:	4619      	mov	r1, r3
 8005c4a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8005c4e:	f002 fb0f 	bl	8008270 <HAL_GPIO_Init>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8005c52:	2310      	movs	r3, #16
 8005c54:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005c56:	2300      	movs	r3, #0
 8005c58:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005c5a:	2301      	movs	r3, #1
 8005c5c:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8005c5e:	1d3b      	adds	r3, r7, #4
 8005c60:	4619      	mov	r1, r3
 8005c62:	4820      	ldr	r0, [pc, #128]	@ (8005ce4 <MX_GPIO_Init+0xf0>)
 8005c64:	f002 fb04 	bl	8008270 <HAL_GPIO_Init>

	/*Configure GPIO pins : LD2_Pin LD3_Pin LD1_Pin */
	GPIO_InitStruct.Pin = LD2_Pin | LD3_Pin | LD1_Pin;
 8005c68:	2323      	movs	r3, #35	@ 0x23
 8005c6a:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005c6c:	2301      	movs	r3, #1
 8005c6e:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c70:	2300      	movs	r3, #0
 8005c72:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005c74:	2300      	movs	r3, #0
 8005c76:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005c78:	1d3b      	adds	r3, r7, #4
 8005c7a:	4619      	mov	r1, r3
 8005c7c:	4818      	ldr	r0, [pc, #96]	@ (8005ce0 <MX_GPIO_Init+0xec>)
 8005c7e:	f002 faf7 	bl	8008270 <HAL_GPIO_Init>

	/*Configure GPIO pins : USB_DM_Pin USB_DP_Pin */
	GPIO_InitStruct.Pin = USB_DM_Pin | USB_DP_Pin;
 8005c82:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8005c86:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005c88:	2302      	movs	r3, #2
 8005c8a:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005c90:	2300      	movs	r3, #0
 8005c92:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8005c94:	230a      	movs	r3, #10
 8005c96:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005c98:	1d3b      	adds	r3, r7, #4
 8005c9a:	4619      	mov	r1, r3
 8005c9c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8005ca0:	f002 fae6 	bl	8008270 <HAL_GPIO_Init>

	/*Configure GPIO pins : B2_Pin B3_Pin */
	GPIO_InitStruct.Pin = B2_Pin | B3_Pin;
 8005ca4:	2303      	movs	r3, #3
 8005ca6:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005ca8:	2300      	movs	r3, #0
 8005caa:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005cac:	2300      	movs	r3, #0
 8005cae:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005cb0:	1d3b      	adds	r3, r7, #4
 8005cb2:	4619      	mov	r1, r3
 8005cb4:	480c      	ldr	r0, [pc, #48]	@ (8005ce8 <MX_GPIO_Init+0xf4>)
 8005cb6:	f002 fadb 	bl	8008270 <HAL_GPIO_Init>

	/*Configure GPIO pins : STLINK_RX_Pin STLINK_TX_Pin */
	GPIO_InitStruct.Pin = STLINK_RX_Pin | STLINK_TX_Pin;
 8005cba:	23c0      	movs	r3, #192	@ 0xc0
 8005cbc:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005cbe:	2302      	movs	r3, #2
 8005cc0:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005cca:	2307      	movs	r3, #7
 8005ccc:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005cce:	1d3b      	adds	r3, r7, #4
 8005cd0:	4619      	mov	r1, r3
 8005cd2:	4803      	ldr	r0, [pc, #12]	@ (8005ce0 <MX_GPIO_Init+0xec>)
 8005cd4:	f002 facc 	bl	8008270 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8005cd8:	bf00      	nop
 8005cda:	3718      	adds	r7, #24
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	bd80      	pop	{r7, pc}
 8005ce0:	48000400 	.word	0x48000400
 8005ce4:	48000800 	.word	0x48000800
 8005ce8:	48000c00 	.word	0x48000c00

08005cec <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8005cec:	b480      	push	{r7}
 8005cee:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8005cf0:	b672      	cpsid	i
}
 8005cf2:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8005cf4:	bf00      	nop
 8005cf6:	e7fd      	b.n	8005cf4 <Error_Handler+0x8>

08005cf8 <f3x3matrixAeqI>:
#define Y 1
#define Z 2

// function sets the 3x3 matrix A to the identity matrix
void f3x3matrixAeqI(float A[][3])
{
 8005cf8:	b480      	push	{r7}
 8005cfa:	b085      	sub	sp, #20
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
	float *pAij;	// pointer to A[i][j]
	int8_t i, j;	// loop counters

	for (i = 0; i < 3; i++) {
 8005d00:	2300      	movs	r3, #0
 8005d02:	72fb      	strb	r3, [r7, #11]
 8005d04:	e032      	b.n	8005d6c <f3x3matrixAeqI+0x74>
		// set pAij to &A[i][j=0]
		pAij = A[i];
 8005d06:	f997 200b 	ldrsb.w	r2, [r7, #11]
 8005d0a:	4613      	mov	r3, r2
 8005d0c:	005b      	lsls	r3, r3, #1
 8005d0e:	4413      	add	r3, r2
 8005d10:	009b      	lsls	r3, r3, #2
 8005d12:	461a      	mov	r2, r3
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	4413      	add	r3, r2
 8005d18:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < 3; j++) {
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	72bb      	strb	r3, [r7, #10]
 8005d1e:	e00b      	b.n	8005d38 <f3x3matrixAeqI+0x40>
			*(pAij++) = 0.0F;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	1d1a      	adds	r2, r3, #4
 8005d24:	60fa      	str	r2, [r7, #12]
 8005d26:	f04f 0200 	mov.w	r2, #0
 8005d2a:	601a      	str	r2, [r3, #0]
		for (j = 0; j < 3; j++) {
 8005d2c:	f997 300a 	ldrsb.w	r3, [r7, #10]
 8005d30:	b2db      	uxtb	r3, r3
 8005d32:	3301      	adds	r3, #1
 8005d34:	b2db      	uxtb	r3, r3
 8005d36:	72bb      	strb	r3, [r7, #10]
 8005d38:	f997 300a 	ldrsb.w	r3, [r7, #10]
 8005d3c:	2b02      	cmp	r3, #2
 8005d3e:	ddef      	ble.n	8005d20 <f3x3matrixAeqI+0x28>
		}
		A[i][i] = 1.0F;
 8005d40:	f997 200b 	ldrsb.w	r2, [r7, #11]
 8005d44:	4613      	mov	r3, r2
 8005d46:	005b      	lsls	r3, r3, #1
 8005d48:	4413      	add	r3, r2
 8005d4a:	009b      	lsls	r3, r3, #2
 8005d4c:	461a      	mov	r2, r3
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	441a      	add	r2, r3
 8005d52:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8005d56:	009b      	lsls	r3, r3, #2
 8005d58:	4413      	add	r3, r2
 8005d5a:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8005d5e:	601a      	str	r2, [r3, #0]
	for (i = 0; i < 3; i++) {
 8005d60:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8005d64:	b2db      	uxtb	r3, r3
 8005d66:	3301      	adds	r3, #1
 8005d68:	b2db      	uxtb	r3, r3
 8005d6a:	72fb      	strb	r3, [r7, #11]
 8005d6c:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8005d70:	2b02      	cmp	r3, #2
 8005d72:	ddc8      	ble.n	8005d06 <f3x3matrixAeqI+0xe>
	}
}
 8005d74:	bf00      	nop
 8005d76:	bf00      	nop
 8005d78:	3714      	adds	r7, #20
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d80:	4770      	bx	lr

08005d82 <fmatrixAeqI>:

// function sets the matrix A to the identity matrix
void fmatrixAeqI(float *A[], int16_t rc)
{
 8005d82:	b480      	push	{r7}
 8005d84:	b085      	sub	sp, #20
 8005d86:	af00      	add	r7, sp, #0
 8005d88:	6078      	str	r0, [r7, #4]
 8005d8a:	460b      	mov	r3, r1
 8005d8c:	807b      	strh	r3, [r7, #2]
	// rc = rows and columns in A

	float *pAij;	// pointer to A[i][j]
	int8_t i, j;	// loop counters

	for (i = 0; i < rc; i++) {
 8005d8e:	2300      	movs	r3, #0
 8005d90:	72fb      	strb	r3, [r7, #11]
 8005d92:	e02f      	b.n	8005df4 <fmatrixAeqI+0x72>
		// set pAij to &A[i][j=0]
		pAij = A[i];
 8005d94:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8005d98:	009b      	lsls	r3, r3, #2
 8005d9a:	687a      	ldr	r2, [r7, #4]
 8005d9c:	4413      	add	r3, r2
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < rc; j++) {
 8005da2:	2300      	movs	r3, #0
 8005da4:	72bb      	strb	r3, [r7, #10]
 8005da6:	e00b      	b.n	8005dc0 <fmatrixAeqI+0x3e>
			*(pAij++) = 0.0F;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	1d1a      	adds	r2, r3, #4
 8005dac:	60fa      	str	r2, [r7, #12]
 8005dae:	f04f 0200 	mov.w	r2, #0
 8005db2:	601a      	str	r2, [r3, #0]
		for (j = 0; j < rc; j++) {
 8005db4:	f997 300a 	ldrsb.w	r3, [r7, #10]
 8005db8:	b2db      	uxtb	r3, r3
 8005dba:	3301      	adds	r3, #1
 8005dbc:	b2db      	uxtb	r3, r3
 8005dbe:	72bb      	strb	r3, [r7, #10]
 8005dc0:	f997 300a 	ldrsb.w	r3, [r7, #10]
 8005dc4:	b21b      	sxth	r3, r3
 8005dc6:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8005dca:	429a      	cmp	r2, r3
 8005dcc:	dcec      	bgt.n	8005da8 <fmatrixAeqI+0x26>
		}
		A[i][i] = 1.0F;
 8005dce:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8005dd2:	009b      	lsls	r3, r3, #2
 8005dd4:	687a      	ldr	r2, [r7, #4]
 8005dd6:	4413      	add	r3, r2
 8005dd8:	681a      	ldr	r2, [r3, #0]
 8005dda:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8005dde:	009b      	lsls	r3, r3, #2
 8005de0:	4413      	add	r3, r2
 8005de2:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8005de6:	601a      	str	r2, [r3, #0]
	for (i = 0; i < rc; i++) {
 8005de8:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8005dec:	b2db      	uxtb	r3, r3
 8005dee:	3301      	adds	r3, #1
 8005df0:	b2db      	uxtb	r3, r3
 8005df2:	72fb      	strb	r3, [r7, #11]
 8005df4:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8005df8:	b21b      	sxth	r3, r3
 8005dfa:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8005dfe:	429a      	cmp	r2, r3
 8005e00:	dcc8      	bgt.n	8005d94 <fmatrixAeqI+0x12>
	}
}
 8005e02:	bf00      	nop
 8005e04:	bf00      	nop
 8005e06:	3714      	adds	r7, #20
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0e:	4770      	bx	lr

08005e10 <f3x3matrixAeqScalar>:

// function sets every entry in the 3x3 matrix A to a constant scalar
void f3x3matrixAeqScalar(float A[][3], float Scalar)
{
 8005e10:	b480      	push	{r7}
 8005e12:	b085      	sub	sp, #20
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
 8005e18:	ed87 0a00 	vstr	s0, [r7]
	float *pAij;	// pointer to A[i][j]
	int8_t i, j;	// counters

	for (i = 0; i < 3; i++) {
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	72fb      	strb	r3, [r7, #11]
 8005e20:	e021      	b.n	8005e66 <f3x3matrixAeqScalar+0x56>
		// set pAij to &A[i][j=0]
		pAij = A[i];
 8005e22:	f997 200b 	ldrsb.w	r2, [r7, #11]
 8005e26:	4613      	mov	r3, r2
 8005e28:	005b      	lsls	r3, r3, #1
 8005e2a:	4413      	add	r3, r2
 8005e2c:	009b      	lsls	r3, r3, #2
 8005e2e:	461a      	mov	r2, r3
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	4413      	add	r3, r2
 8005e34:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < 3; j++) {
 8005e36:	2300      	movs	r3, #0
 8005e38:	72bb      	strb	r3, [r7, #10]
 8005e3a:	e00a      	b.n	8005e52 <f3x3matrixAeqScalar+0x42>
			*(pAij++) = Scalar;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	1d1a      	adds	r2, r3, #4
 8005e40:	60fa      	str	r2, [r7, #12]
 8005e42:	683a      	ldr	r2, [r7, #0]
 8005e44:	601a      	str	r2, [r3, #0]
		for (j = 0; j < 3; j++) {
 8005e46:	f997 300a 	ldrsb.w	r3, [r7, #10]
 8005e4a:	b2db      	uxtb	r3, r3
 8005e4c:	3301      	adds	r3, #1
 8005e4e:	b2db      	uxtb	r3, r3
 8005e50:	72bb      	strb	r3, [r7, #10]
 8005e52:	f997 300a 	ldrsb.w	r3, [r7, #10]
 8005e56:	2b02      	cmp	r3, #2
 8005e58:	ddf0      	ble.n	8005e3c <f3x3matrixAeqScalar+0x2c>
	for (i = 0; i < 3; i++) {
 8005e5a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8005e5e:	b2db      	uxtb	r3, r3
 8005e60:	3301      	adds	r3, #1
 8005e62:	b2db      	uxtb	r3, r3
 8005e64:	72fb      	strb	r3, [r7, #11]
 8005e66:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8005e6a:	2b02      	cmp	r3, #2
 8005e6c:	ddd9      	ble.n	8005e22 <f3x3matrixAeqScalar+0x12>
		}
	}
}
 8005e6e:	bf00      	nop
 8005e70:	bf00      	nop
 8005e72:	3714      	adds	r7, #20
 8005e74:	46bd      	mov	sp, r7
 8005e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7a:	4770      	bx	lr

08005e7c <f3x3matrixAeqAxScalar>:

// function multiplies all elements of 3x3 matrix A by the specified scalar
void f3x3matrixAeqAxScalar(float A[][3], float Scalar)
{
 8005e7c:	b480      	push	{r7}
 8005e7e:	b085      	sub	sp, #20
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
 8005e84:	ed87 0a00 	vstr	s0, [r7]
	float *pAij;	// pointer to A[i][j]
	int8_t i, j;	// loop counters

	for (i = 0; i < 3; i++) {
 8005e88:	2300      	movs	r3, #0
 8005e8a:	72fb      	strb	r3, [r7, #11]
 8005e8c:	e027      	b.n	8005ede <f3x3matrixAeqAxScalar+0x62>
		// set pAij to &A[i][j=0]
		pAij = A[i];
 8005e8e:	f997 200b 	ldrsb.w	r2, [r7, #11]
 8005e92:	4613      	mov	r3, r2
 8005e94:	005b      	lsls	r3, r3, #1
 8005e96:	4413      	add	r3, r2
 8005e98:	009b      	lsls	r3, r3, #2
 8005e9a:	461a      	mov	r2, r3
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	4413      	add	r3, r2
 8005ea0:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < 3; j++) {
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	72bb      	strb	r3, [r7, #10]
 8005ea6:	e010      	b.n	8005eca <f3x3matrixAeqAxScalar+0x4e>
			*(pAij++) *= Scalar;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	1d1a      	adds	r2, r3, #4
 8005eac:	60fa      	str	r2, [r7, #12]
 8005eae:	ed93 7a00 	vldr	s14, [r3]
 8005eb2:	edd7 7a00 	vldr	s15, [r7]
 8005eb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005eba:	edc3 7a00 	vstr	s15, [r3]
		for (j = 0; j < 3; j++) {
 8005ebe:	f997 300a 	ldrsb.w	r3, [r7, #10]
 8005ec2:	b2db      	uxtb	r3, r3
 8005ec4:	3301      	adds	r3, #1
 8005ec6:	b2db      	uxtb	r3, r3
 8005ec8:	72bb      	strb	r3, [r7, #10]
 8005eca:	f997 300a 	ldrsb.w	r3, [r7, #10]
 8005ece:	2b02      	cmp	r3, #2
 8005ed0:	ddea      	ble.n	8005ea8 <f3x3matrixAeqAxScalar+0x2c>
	for (i = 0; i < 3; i++) {
 8005ed2:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8005ed6:	b2db      	uxtb	r3, r3
 8005ed8:	3301      	adds	r3, #1
 8005eda:	b2db      	uxtb	r3, r3
 8005edc:	72fb      	strb	r3, [r7, #11]
 8005ede:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8005ee2:	2b02      	cmp	r3, #2
 8005ee4:	ddd3      	ble.n	8005e8e <f3x3matrixAeqAxScalar+0x12>
		}
	}
}
 8005ee6:	bf00      	nop
 8005ee8:	bf00      	nop
 8005eea:	3714      	adds	r7, #20
 8005eec:	46bd      	mov	sp, r7
 8005eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef2:	4770      	bx	lr

08005ef4 <f3x3matrixAeqMinusA>:

// function negates all elements of 3x3 matrix A
void f3x3matrixAeqMinusA(float A[][3])
{
 8005ef4:	b480      	push	{r7}
 8005ef6:	b085      	sub	sp, #20
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
	float *pAij;	// pointer to A[i][j]
	int8_t i, j;	// loop counters

	for (i = 0; i < 3; i++) {
 8005efc:	2300      	movs	r3, #0
 8005efe:	72fb      	strb	r3, [r7, #11]
 8005f00:	e027      	b.n	8005f52 <f3x3matrixAeqMinusA+0x5e>
		// set pAij to &A[i][j=0]
		pAij = A[i];
 8005f02:	f997 200b 	ldrsb.w	r2, [r7, #11]
 8005f06:	4613      	mov	r3, r2
 8005f08:	005b      	lsls	r3, r3, #1
 8005f0a:	4413      	add	r3, r2
 8005f0c:	009b      	lsls	r3, r3, #2
 8005f0e:	461a      	mov	r2, r3
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	4413      	add	r3, r2
 8005f14:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < 3; j++) {
 8005f16:	2300      	movs	r3, #0
 8005f18:	72bb      	strb	r3, [r7, #10]
 8005f1a:	e010      	b.n	8005f3e <f3x3matrixAeqMinusA+0x4a>
			*pAij = -*pAij;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	edd3 7a00 	vldr	s15, [r3]
 8005f22:	eef1 7a67 	vneg.f32	s15, s15
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	edc3 7a00 	vstr	s15, [r3]
			pAij++;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	3304      	adds	r3, #4
 8005f30:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < 3; j++) {
 8005f32:	f997 300a 	ldrsb.w	r3, [r7, #10]
 8005f36:	b2db      	uxtb	r3, r3
 8005f38:	3301      	adds	r3, #1
 8005f3a:	b2db      	uxtb	r3, r3
 8005f3c:	72bb      	strb	r3, [r7, #10]
 8005f3e:	f997 300a 	ldrsb.w	r3, [r7, #10]
 8005f42:	2b02      	cmp	r3, #2
 8005f44:	ddea      	ble.n	8005f1c <f3x3matrixAeqMinusA+0x28>
	for (i = 0; i < 3; i++) {
 8005f46:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8005f4a:	b2db      	uxtb	r3, r3
 8005f4c:	3301      	adds	r3, #1
 8005f4e:	b2db      	uxtb	r3, r3
 8005f50:	72fb      	strb	r3, [r7, #11]
 8005f52:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8005f56:	2b02      	cmp	r3, #2
 8005f58:	ddd3      	ble.n	8005f02 <f3x3matrixAeqMinusA+0xe>
		}
	}
}
 8005f5a:	bf00      	nop
 8005f5c:	bf00      	nop
 8005f5e:	3714      	adds	r7, #20
 8005f60:	46bd      	mov	sp, r7
 8005f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f66:	4770      	bx	lr

08005f68 <f3x3matrixAeqInvSymB>:

// function directly calculates the symmetric inverse of a symmetric 3x3 matrix
// only the on and above diagonal terms in B are used and need to be specified
void f3x3matrixAeqInvSymB(float A[][3], float B[][3])
{
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b086      	sub	sp, #24
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
 8005f70:	6039      	str	r1, [r7, #0]
	float fB12B02mB01B22;	// B[1][2] * B[0][2] - B[0][1] * B[2][2]
	float fB01B12mB11B02;	// B[0][1] * B[1][2] - B[1][1] * B[0][2]
	float ftmp;				// determinant and then reciprocal

	// calculate useful products
	fB11B22mB12B12 = B[1][1] * B[2][2] - B[1][2] * B[1][2];
 8005f72:	683b      	ldr	r3, [r7, #0]
 8005f74:	330c      	adds	r3, #12
 8005f76:	ed93 7a01 	vldr	s14, [r3, #4]
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	3318      	adds	r3, #24
 8005f7e:	edd3 7a02 	vldr	s15, [r3, #8]
 8005f82:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005f86:	683b      	ldr	r3, [r7, #0]
 8005f88:	330c      	adds	r3, #12
 8005f8a:	edd3 6a02 	vldr	s13, [r3, #8]
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	330c      	adds	r3, #12
 8005f92:	edd3 7a02 	vldr	s15, [r3, #8]
 8005f96:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005f9a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005f9e:	edc7 7a05 	vstr	s15, [r7, #20]
	fB12B02mB01B22 = B[1][2] * B[0][2] - B[0][1] * B[2][2];
 8005fa2:	683b      	ldr	r3, [r7, #0]
 8005fa4:	330c      	adds	r3, #12
 8005fa6:	ed93 7a02 	vldr	s14, [r3, #8]
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	edd3 7a02 	vldr	s15, [r3, #8]
 8005fb0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	edd3 6a01 	vldr	s13, [r3, #4]
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	3318      	adds	r3, #24
 8005fbe:	edd3 7a02 	vldr	s15, [r3, #8]
 8005fc2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005fc6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005fca:	edc7 7a04 	vstr	s15, [r7, #16]
	fB01B12mB11B02 = B[0][1] * B[1][2] - B[1][1] * B[0][2];
 8005fce:	683b      	ldr	r3, [r7, #0]
 8005fd0:	ed93 7a01 	vldr	s14, [r3, #4]
 8005fd4:	683b      	ldr	r3, [r7, #0]
 8005fd6:	330c      	adds	r3, #12
 8005fd8:	edd3 7a02 	vldr	s15, [r3, #8]
 8005fdc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005fe0:	683b      	ldr	r3, [r7, #0]
 8005fe2:	330c      	adds	r3, #12
 8005fe4:	edd3 6a01 	vldr	s13, [r3, #4]
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	edd3 7a02 	vldr	s15, [r3, #8]
 8005fee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005ff2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005ff6:	edc7 7a03 	vstr	s15, [r7, #12]

	// set ftmp to the determinant of the input matrix B
	ftmp = B[0][0] * fB11B22mB12B12 + B[0][1] * fB12B02mB01B22 + B[0][2] * fB01B12mB11B02;
 8005ffa:	683b      	ldr	r3, [r7, #0]
 8005ffc:	ed93 7a00 	vldr	s14, [r3]
 8006000:	edd7 7a05 	vldr	s15, [r7, #20]
 8006004:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	edd3 6a01 	vldr	s13, [r3, #4]
 800600e:	edd7 7a04 	vldr	s15, [r7, #16]
 8006012:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006016:	ee37 7a27 	vadd.f32	s14, s14, s15
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	edd3 6a02 	vldr	s13, [r3, #8]
 8006020:	edd7 7a03 	vldr	s15, [r7, #12]
 8006024:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006028:	ee77 7a27 	vadd.f32	s15, s14, s15
 800602c:	edc7 7a02 	vstr	s15, [r7, #8]

	// set A to the inverse of B for any determinant except zero
	if (ftmp != 0.0F) {
 8006030:	edd7 7a02 	vldr	s15, [r7, #8]
 8006034:	eef5 7a40 	vcmp.f32	s15, #0.0
 8006038:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800603c:	f000 8083 	beq.w	8006146 <f3x3matrixAeqInvSymB+0x1de>
		ftmp = 1.0F / ftmp;
 8006040:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006044:	ed97 7a02 	vldr	s14, [r7, #8]
 8006048:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800604c:	edc7 7a02 	vstr	s15, [r7, #8]
		A[0][0] = fB11B22mB12B12 * ftmp;
 8006050:	ed97 7a05 	vldr	s14, [r7, #20]
 8006054:	edd7 7a02 	vldr	s15, [r7, #8]
 8006058:	ee67 7a27 	vmul.f32	s15, s14, s15
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	edc3 7a00 	vstr	s15, [r3]
		A[1][0] = A[0][1] = fB12B02mB01B22 * ftmp;
 8006062:	ed97 7a04 	vldr	s14, [r7, #16]
 8006066:	edd7 7a02 	vldr	s15, [r7, #8]
 800606a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	edc3 7a01 	vstr	s15, [r3, #4]
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	330c      	adds	r3, #12
 8006078:	687a      	ldr	r2, [r7, #4]
 800607a:	6852      	ldr	r2, [r2, #4]
 800607c:	601a      	str	r2, [r3, #0]
		A[2][0] = A[0][2] = fB01B12mB11B02 * ftmp;
 800607e:	ed97 7a03 	vldr	s14, [r7, #12]
 8006082:	edd7 7a02 	vldr	s15, [r7, #8]
 8006086:	ee67 7a27 	vmul.f32	s15, s14, s15
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	edc3 7a02 	vstr	s15, [r3, #8]
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	3318      	adds	r3, #24
 8006094:	687a      	ldr	r2, [r7, #4]
 8006096:	6892      	ldr	r2, [r2, #8]
 8006098:	601a      	str	r2, [r3, #0]
		A[1][1] = (B[0][0] * B[2][2] - B[0][2] * B[0][2]) * ftmp;
 800609a:	683b      	ldr	r3, [r7, #0]
 800609c:	ed93 7a00 	vldr	s14, [r3]
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	3318      	adds	r3, #24
 80060a4:	edd3 7a02 	vldr	s15, [r3, #8]
 80060a8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80060ac:	683b      	ldr	r3, [r7, #0]
 80060ae:	edd3 6a02 	vldr	s13, [r3, #8]
 80060b2:	683b      	ldr	r3, [r7, #0]
 80060b4:	edd3 7a02 	vldr	s15, [r3, #8]
 80060b8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80060bc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	330c      	adds	r3, #12
 80060c4:	edd7 7a02 	vldr	s15, [r7, #8]
 80060c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060cc:	edc3 7a01 	vstr	s15, [r3, #4]
		A[2][1] = A[1][2] = (B[0][2] * B[0][1] - B[0][0] * B[1][2]) * ftmp;
 80060d0:	683b      	ldr	r3, [r7, #0]
 80060d2:	ed93 7a02 	vldr	s14, [r3, #8]
 80060d6:	683b      	ldr	r3, [r7, #0]
 80060d8:	edd3 7a01 	vldr	s15, [r3, #4]
 80060dc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80060e0:	683b      	ldr	r3, [r7, #0]
 80060e2:	edd3 6a00 	vldr	s13, [r3]
 80060e6:	683b      	ldr	r3, [r7, #0]
 80060e8:	330c      	adds	r3, #12
 80060ea:	edd3 7a02 	vldr	s15, [r3, #8]
 80060ee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80060f2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	330c      	adds	r3, #12
 80060fa:	edd7 7a02 	vldr	s15, [r7, #8]
 80060fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006102:	edc3 7a02 	vstr	s15, [r3, #8]
 8006106:	687a      	ldr	r2, [r7, #4]
 8006108:	3218      	adds	r2, #24
 800610a:	689b      	ldr	r3, [r3, #8]
 800610c:	6053      	str	r3, [r2, #4]
		A[2][2] = (B[0][0] * B[1][1] - B[0][1] * B[0][1]) * ftmp;
 800610e:	683b      	ldr	r3, [r7, #0]
 8006110:	ed93 7a00 	vldr	s14, [r3]
 8006114:	683b      	ldr	r3, [r7, #0]
 8006116:	330c      	adds	r3, #12
 8006118:	edd3 7a01 	vldr	s15, [r3, #4]
 800611c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	edd3 6a01 	vldr	s13, [r3, #4]
 8006126:	683b      	ldr	r3, [r7, #0]
 8006128:	edd3 7a01 	vldr	s15, [r3, #4]
 800612c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006130:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	3318      	adds	r3, #24
 8006138:	edd7 7a02 	vldr	s15, [r7, #8]
 800613c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006140:	edc3 7a02 	vstr	s15, [r3, #8]
	} else {
		// provide the identity matrix if the determinant is zero
		f3x3matrixAeqI(A);
	}
}
 8006144:	e002      	b.n	800614c <f3x3matrixAeqInvSymB+0x1e4>
		f3x3matrixAeqI(A);
 8006146:	6878      	ldr	r0, [r7, #4]
 8006148:	f7ff fdd6 	bl	8005cf8 <f3x3matrixAeqI>
}
 800614c:	bf00      	nop
 800614e:	3718      	adds	r7, #24
 8006150:	46bd      	mov	sp, r7
 8006152:	bd80      	pop	{r7, pc}

08006154 <f3x3matrixDetA>:

// function calculates the determinant of a 3x3 matrix
float f3x3matrixDetA(float A[][3])
{
 8006154:	b480      	push	{r7}
 8006156:	b083      	sub	sp, #12
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
	return (A[X][X] * (A[Y][Y] * A[Z][Z] - A[Y][Z] * A[Z][Y]) +
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	ed93 7a00 	vldr	s14, [r3]
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	330c      	adds	r3, #12
 8006166:	edd3 6a01 	vldr	s13, [r3, #4]
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	3318      	adds	r3, #24
 800616e:	edd3 7a02 	vldr	s15, [r3, #8]
 8006172:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	330c      	adds	r3, #12
 800617a:	ed93 6a02 	vldr	s12, [r3, #8]
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	3318      	adds	r3, #24
 8006182:	edd3 7a01 	vldr	s15, [r3, #4]
 8006186:	ee66 7a27 	vmul.f32	s15, s12, s15
 800618a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800618e:	ee27 7a27 	vmul.f32	s14, s14, s15
			A[X][Y] * (A[Y][Z] * A[Z][X] - A[Y][X] * A[Z][Z]) +
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	edd3 6a01 	vldr	s13, [r3, #4]
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	330c      	adds	r3, #12
 800619c:	ed93 6a02 	vldr	s12, [r3, #8]
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	3318      	adds	r3, #24
 80061a4:	edd3 7a00 	vldr	s15, [r3]
 80061a8:	ee26 6a27 	vmul.f32	s12, s12, s15
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	330c      	adds	r3, #12
 80061b0:	edd3 5a00 	vldr	s11, [r3]
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	3318      	adds	r3, #24
 80061b8:	edd3 7a02 	vldr	s15, [r3, #8]
 80061bc:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80061c0:	ee76 7a67 	vsub.f32	s15, s12, s15
 80061c4:	ee66 7aa7 	vmul.f32	s15, s13, s15
	return (A[X][X] * (A[Y][Y] * A[Z][Z] - A[Y][Z] * A[Z][Y]) +
 80061c8:	ee37 7a27 	vadd.f32	s14, s14, s15
			A[X][Z] * (A[Y][X] * A[Z][Y] - A[Y][Y] * A[Z][X]));
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	edd3 6a02 	vldr	s13, [r3, #8]
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	330c      	adds	r3, #12
 80061d6:	ed93 6a00 	vldr	s12, [r3]
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	3318      	adds	r3, #24
 80061de:	edd3 7a01 	vldr	s15, [r3, #4]
 80061e2:	ee26 6a27 	vmul.f32	s12, s12, s15
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	330c      	adds	r3, #12
 80061ea:	edd3 5a01 	vldr	s11, [r3, #4]
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	3318      	adds	r3, #24
 80061f2:	edd3 7a00 	vldr	s15, [r3]
 80061f6:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80061fa:	ee76 7a67 	vsub.f32	s15, s12, s15
 80061fe:	ee66 7aa7 	vmul.f32	s15, s13, s15
			A[X][Y] * (A[Y][Z] * A[Z][X] - A[Y][X] * A[Z][Z]) +
 8006202:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8006206:	eeb0 0a67 	vmov.f32	s0, s15
 800620a:	370c      	adds	r7, #12
 800620c:	46bd      	mov	sp, r7
 800620e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006212:	4770      	bx	lr

08006214 <eigencompute>:
// A[][] is changed on output.
// eigval[0..n-1] returns the eigenvalues of A[][].
// eigvec[0..n-1][0..n-1] returns the normalized eigenvectors of A[][]
// the eigenvectors are not sorted by value
void eigencompute(float A[][10], float eigval[], float eigvec[][10], int8_t n)
{
 8006214:	b5b0      	push	{r4, r5, r7, lr}
 8006216:	b08c      	sub	sp, #48	@ 0x30
 8006218:	af00      	add	r7, sp, #0
 800621a:	60f8      	str	r0, [r7, #12]
 800621c:	60b9      	str	r1, [r7, #8]
 800621e:	607a      	str	r2, [r7, #4]
 8006220:	70fb      	strb	r3, [r7, #3]
	int8_t j;
	// timeout ctr for number of passes of the algorithm
	int8_t ctr;

	// initialize eigenvectors matrix and eigenvalues array
	for (ir = 0; ir < n; ir++) {
 8006222:	2300      	movs	r3, #0
 8006224:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8006228:	e04b      	b.n	80062c2 <eigencompute+0xae>
		// loop over all columns
		for (ic = 0; ic < n; ic++) {
 800622a:	2300      	movs	r3, #0
 800622c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8006230:	e016      	b.n	8006260 <eigencompute+0x4c>
			// set on diagonal and off-diagonal elements to zero
			eigvec[ir][ic] = 0.0F;
 8006232:	f997 2027 	ldrsb.w	r2, [r7, #39]	@ 0x27
 8006236:	4613      	mov	r3, r2
 8006238:	009b      	lsls	r3, r3, #2
 800623a:	4413      	add	r3, r2
 800623c:	00db      	lsls	r3, r3, #3
 800623e:	461a      	mov	r2, r3
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	441a      	add	r2, r3
 8006244:	f997 3026 	ldrsb.w	r3, [r7, #38]	@ 0x26
 8006248:	009b      	lsls	r3, r3, #2
 800624a:	4413      	add	r3, r2
 800624c:	f04f 0200 	mov.w	r2, #0
 8006250:	601a      	str	r2, [r3, #0]
		for (ic = 0; ic < n; ic++) {
 8006252:	f997 3026 	ldrsb.w	r3, [r7, #38]	@ 0x26
 8006256:	b2db      	uxtb	r3, r3
 8006258:	3301      	adds	r3, #1
 800625a:	b2db      	uxtb	r3, r3
 800625c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8006260:	f997 2026 	ldrsb.w	r2, [r7, #38]	@ 0x26
 8006264:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006268:	429a      	cmp	r2, r3
 800626a:	dbe2      	blt.n	8006232 <eigencompute+0x1e>
		}

		// correct the diagonal elements to 1.0
		eigvec[ir][ir] = 1.0F;
 800626c:	f997 2027 	ldrsb.w	r2, [r7, #39]	@ 0x27
 8006270:	4613      	mov	r3, r2
 8006272:	009b      	lsls	r3, r3, #2
 8006274:	4413      	add	r3, r2
 8006276:	00db      	lsls	r3, r3, #3
 8006278:	461a      	mov	r2, r3
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	441a      	add	r2, r3
 800627e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006282:	009b      	lsls	r3, r3, #2
 8006284:	4413      	add	r3, r2
 8006286:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800628a:	601a      	str	r2, [r3, #0]

		// initialize the array of eigenvalues to the diagonal elements of m
		eigval[ir] = A[ir][ir];
 800628c:	f997 2027 	ldrsb.w	r2, [r7, #39]	@ 0x27
 8006290:	4613      	mov	r3, r2
 8006292:	009b      	lsls	r3, r3, #2
 8006294:	4413      	add	r3, r2
 8006296:	00db      	lsls	r3, r3, #3
 8006298:	461a      	mov	r2, r3
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	1899      	adds	r1, r3, r2
 800629e:	f997 2027 	ldrsb.w	r2, [r7, #39]	@ 0x27
 80062a2:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80062a6:	009b      	lsls	r3, r3, #2
 80062a8:	68b8      	ldr	r0, [r7, #8]
 80062aa:	4403      	add	r3, r0
 80062ac:	0092      	lsls	r2, r2, #2
 80062ae:	440a      	add	r2, r1
 80062b0:	6812      	ldr	r2, [r2, #0]
 80062b2:	601a      	str	r2, [r3, #0]
	for (ir = 0; ir < n; ir++) {
 80062b4:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80062b8:	b2db      	uxtb	r3, r3
 80062ba:	3301      	adds	r3, #1
 80062bc:	b2db      	uxtb	r3, r3
 80062be:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80062c2:	f997 2027 	ldrsb.w	r2, [r7, #39]	@ 0x27
 80062c6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80062ca:	429a      	cmp	r2, r3
 80062cc:	dbad      	blt.n	800622a <eigencompute+0x16>
	}

	// initialize the counter and loop until converged or NITERATIONS reached
	ctr = 0;
 80062ce:	2300      	movs	r3, #0
 80062d0:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
	do {
		// compute the absolute value of the above diagonal elements as exit criterion
		residue = 0.0F;
 80062d4:	f04f 0300 	mov.w	r3, #0
 80062d8:	62bb      	str	r3, [r7, #40]	@ 0x28
		// loop over rows excluding last row
		for (ir = 0; ir < n - 1; ir++) {
 80062da:	2300      	movs	r3, #0
 80062dc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80062e0:	e031      	b.n	8006346 <eigencompute+0x132>
			// loop over above diagonal columns
			for (ic = ir + 1; ic < n; ic++) {
 80062e2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80062e6:	3301      	adds	r3, #1
 80062e8:	b2db      	uxtb	r3, r3
 80062ea:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80062ee:	e01d      	b.n	800632c <eigencompute+0x118>
				// accumulate the residual off diagonal terms which are being driven to zero
				residue += fabs(A[ir][ic]);
 80062f0:	f997 2027 	ldrsb.w	r2, [r7, #39]	@ 0x27
 80062f4:	4613      	mov	r3, r2
 80062f6:	009b      	lsls	r3, r3, #2
 80062f8:	4413      	add	r3, r2
 80062fa:	00db      	lsls	r3, r3, #3
 80062fc:	461a      	mov	r2, r3
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	441a      	add	r2, r3
 8006302:	f997 3026 	ldrsb.w	r3, [r7, #38]	@ 0x26
 8006306:	009b      	lsls	r3, r3, #2
 8006308:	4413      	add	r3, r2
 800630a:	edd3 7a00 	vldr	s15, [r3]
 800630e:	eef0 7ae7 	vabs.f32	s15, s15
 8006312:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8006316:	ee77 7a27 	vadd.f32	s15, s14, s15
 800631a:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
			for (ic = ir + 1; ic < n; ic++) {
 800631e:	f997 3026 	ldrsb.w	r3, [r7, #38]	@ 0x26
 8006322:	b2db      	uxtb	r3, r3
 8006324:	3301      	adds	r3, #1
 8006326:	b2db      	uxtb	r3, r3
 8006328:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800632c:	f997 2026 	ldrsb.w	r2, [r7, #38]	@ 0x26
 8006330:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006334:	429a      	cmp	r2, r3
 8006336:	dbdb      	blt.n	80062f0 <eigencompute+0xdc>
		for (ir = 0; ir < n - 1; ir++) {
 8006338:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800633c:	b2db      	uxtb	r3, r3
 800633e:	3301      	adds	r3, #1
 8006340:	b2db      	uxtb	r3, r3
 8006342:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8006346:	f997 2027 	ldrsb.w	r2, [r7, #39]	@ 0x27
 800634a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800634e:	3b01      	subs	r3, #1
 8006350:	429a      	cmp	r2, r3
 8006352:	dbc6      	blt.n	80062e2 <eigencompute+0xce>
			}
		}

		// check if we still have work to do
		if (residue > 0.0F) {
 8006354:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8006358:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800635c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006360:	f340 8344 	ble.w	80069ec <eigencompute+0x7d8>
			// loop over all rows with the exception of the last row (since only rotating above diagonal elements)
			for (ir = 0; ir < n - 1; ir++) {
 8006364:	2300      	movs	r3, #0
 8006366:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800636a:	e337      	b.n	80069dc <eigencompute+0x7c8>
				// loop over columns ic (where ic is always greater than ir since above diagonal)
				for (ic = ir + 1; ic < n; ic++) {
 800636c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006370:	3301      	adds	r3, #1
 8006372:	b2db      	uxtb	r3, r3
 8006374:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8006378:	e322      	b.n	80069c0 <eigencompute+0x7ac>
					// only continue with this element if the element is non-zero
					if (fabs(A[ir][ic]) > 0.0F) {
 800637a:	f997 2027 	ldrsb.w	r2, [r7, #39]	@ 0x27
 800637e:	4613      	mov	r3, r2
 8006380:	009b      	lsls	r3, r3, #2
 8006382:	4413      	add	r3, r2
 8006384:	00db      	lsls	r3, r3, #3
 8006386:	461a      	mov	r2, r3
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	441a      	add	r2, r3
 800638c:	f997 3026 	ldrsb.w	r3, [r7, #38]	@ 0x26
 8006390:	009b      	lsls	r3, r3, #2
 8006392:	4413      	add	r3, r2
 8006394:	edd3 7a00 	vldr	s15, [r3]
 8006398:	eef0 7ae7 	vabs.f32	s15, s15
 800639c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80063a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80063a4:	f340 8305 	ble.w	80069b2 <eigencompute+0x79e>
						// calculate cot(2*phi) where phi is the Jacobi rotation angle
						cot2phi = 0.5F * (eigval[ic] - eigval[ir]) / (A[ir][ic]);
 80063a8:	f997 3026 	ldrsb.w	r3, [r7, #38]	@ 0x26
 80063ac:	009b      	lsls	r3, r3, #2
 80063ae:	68ba      	ldr	r2, [r7, #8]
 80063b0:	4413      	add	r3, r2
 80063b2:	ed93 7a00 	vldr	s14, [r3]
 80063b6:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80063ba:	009b      	lsls	r3, r3, #2
 80063bc:	68ba      	ldr	r2, [r7, #8]
 80063be:	4413      	add	r3, r2
 80063c0:	edd3 7a00 	vldr	s15, [r3]
 80063c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80063c8:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80063cc:	ee67 6a87 	vmul.f32	s13, s15, s14
 80063d0:	f997 2027 	ldrsb.w	r2, [r7, #39]	@ 0x27
 80063d4:	4613      	mov	r3, r2
 80063d6:	009b      	lsls	r3, r3, #2
 80063d8:	4413      	add	r3, r2
 80063da:	00db      	lsls	r3, r3, #3
 80063dc:	461a      	mov	r2, r3
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	441a      	add	r2, r3
 80063e2:	f997 3026 	ldrsb.w	r3, [r7, #38]	@ 0x26
 80063e6:	009b      	lsls	r3, r3, #2
 80063e8:	4413      	add	r3, r2
 80063ea:	ed93 7a00 	vldr	s14, [r3]
 80063ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80063f2:	edc7 7a08 	vstr	s15, [r7, #32]

						// calculate tan(phi) correcting sign to ensure the smaller solution is used
						tanphi = 1.0F / (fabs(cot2phi) + sqrtf(1.0F + cot2phi * cot2phi));
 80063f6:	edd7 7a08 	vldr	s15, [r7, #32]
 80063fa:	eef0 7ae7 	vabs.f32	s15, s15
 80063fe:	ee17 0a90 	vmov	r0, s15
 8006402:	f7fa f879 	bl	80004f8 <__aeabi_f2d>
 8006406:	4604      	mov	r4, r0
 8006408:	460d      	mov	r5, r1
 800640a:	edd7 7a08 	vldr	s15, [r7, #32]
 800640e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8006412:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006416:	ee77 7a87 	vadd.f32	s15, s15, s14
 800641a:	eeb0 0a67 	vmov.f32	s0, s15
 800641e:	f00b f897 	bl	8011550 <sqrtf>
 8006422:	ee10 3a10 	vmov	r3, s0
 8006426:	4618      	mov	r0, r3
 8006428:	f7fa f866 	bl	80004f8 <__aeabi_f2d>
 800642c:	4602      	mov	r2, r0
 800642e:	460b      	mov	r3, r1
 8006430:	4620      	mov	r0, r4
 8006432:	4629      	mov	r1, r5
 8006434:	f7f9 ff02 	bl	800023c <__adddf3>
 8006438:	4602      	mov	r2, r0
 800643a:	460b      	mov	r3, r1
 800643c:	f04f 0000 	mov.w	r0, #0
 8006440:	49d1      	ldr	r1, [pc, #836]	@ (8006788 <eigencompute+0x574>)
 8006442:	f7fa f9db 	bl	80007fc <__aeabi_ddiv>
 8006446:	4602      	mov	r2, r0
 8006448:	460b      	mov	r3, r1
 800644a:	4610      	mov	r0, r2
 800644c:	4619      	mov	r1, r3
 800644e:	f7fa fb5b 	bl	8000b08 <__aeabi_d2f>
 8006452:	4603      	mov	r3, r0
 8006454:	62fb      	str	r3, [r7, #44]	@ 0x2c
						if (cot2phi < 0.0F) {
 8006456:	edd7 7a08 	vldr	s15, [r7, #32]
 800645a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800645e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006462:	d505      	bpl.n	8006470 <eigencompute+0x25c>
							tanphi = -tanphi;
 8006464:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8006468:	eef1 7a67 	vneg.f32	s15, s15
 800646c:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
						}

						// calculate the sine and cosine of the Jacobi rotation angle phi
						cosphi = 1.0F / sqrtf(1.0F + tanphi * tanphi);
 8006470:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8006474:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8006478:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800647c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006480:	eeb0 0a67 	vmov.f32	s0, s15
 8006484:	f00b f864 	bl	8011550 <sqrtf>
 8006488:	eeb0 7a40 	vmov.f32	s14, s0
 800648c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006490:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006494:	edc7 7a07 	vstr	s15, [r7, #28]
						sinphi = tanphi * cosphi;
 8006498:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 800649c:	edd7 7a07 	vldr	s15, [r7, #28]
 80064a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80064a4:	edc7 7a06 	vstr	s15, [r7, #24]

						// calculate tan(phi/2)
						tanhalfphi = sinphi / (1.0F + cosphi);
 80064a8:	edd7 7a07 	vldr	s15, [r7, #28]
 80064ac:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80064b0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80064b4:	edd7 6a06 	vldr	s13, [r7, #24]
 80064b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80064bc:	edc7 7a05 	vstr	s15, [r7, #20]

						// set tmp = tan(phi) times current matrix element used in update of leading diagonal elements
						ftmp = tanphi * A[ir][ic];
 80064c0:	f997 2027 	ldrsb.w	r2, [r7, #39]	@ 0x27
 80064c4:	4613      	mov	r3, r2
 80064c6:	009b      	lsls	r3, r3, #2
 80064c8:	4413      	add	r3, r2
 80064ca:	00db      	lsls	r3, r3, #3
 80064cc:	461a      	mov	r2, r3
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	441a      	add	r2, r3
 80064d2:	f997 3026 	ldrsb.w	r3, [r7, #38]	@ 0x26
 80064d6:	009b      	lsls	r3, r3, #2
 80064d8:	4413      	add	r3, r2
 80064da:	edd3 7a00 	vldr	s15, [r3]
 80064de:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 80064e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80064e6:	edc7 7a04 	vstr	s15, [r7, #16]

						// apply the jacobi rotation to diagonal elements [ir][ir] and [ic][ic] stored in the eigenvalue array
						// eigval[ir] = eigval[ir] - tan(phi) *  A[ir][ic]
						eigval[ir] -= ftmp;
 80064ea:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80064ee:	009b      	lsls	r3, r3, #2
 80064f0:	68ba      	ldr	r2, [r7, #8]
 80064f2:	4413      	add	r3, r2
 80064f4:	ed93 7a00 	vldr	s14, [r3]
 80064f8:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80064fc:	009b      	lsls	r3, r3, #2
 80064fe:	68ba      	ldr	r2, [r7, #8]
 8006500:	4413      	add	r3, r2
 8006502:	edd7 7a04 	vldr	s15, [r7, #16]
 8006506:	ee77 7a67 	vsub.f32	s15, s14, s15
 800650a:	edc3 7a00 	vstr	s15, [r3]
						// eigval[ic] = eigval[ic] + tan(phi) * A[ir][ic]
						eigval[ic] += ftmp;
 800650e:	f997 3026 	ldrsb.w	r3, [r7, #38]	@ 0x26
 8006512:	009b      	lsls	r3, r3, #2
 8006514:	68ba      	ldr	r2, [r7, #8]
 8006516:	4413      	add	r3, r2
 8006518:	ed93 7a00 	vldr	s14, [r3]
 800651c:	f997 3026 	ldrsb.w	r3, [r7, #38]	@ 0x26
 8006520:	009b      	lsls	r3, r3, #2
 8006522:	68ba      	ldr	r2, [r7, #8]
 8006524:	4413      	add	r3, r2
 8006526:	edd7 7a04 	vldr	s15, [r7, #16]
 800652a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800652e:	edc3 7a00 	vstr	s15, [r3]

						// by definition, applying the jacobi rotation on element ir, ic results in 0.0
						A[ir][ic] = 0.0F;
 8006532:	f997 2027 	ldrsb.w	r2, [r7, #39]	@ 0x27
 8006536:	4613      	mov	r3, r2
 8006538:	009b      	lsls	r3, r3, #2
 800653a:	4413      	add	r3, r2
 800653c:	00db      	lsls	r3, r3, #3
 800653e:	461a      	mov	r2, r3
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	441a      	add	r2, r3
 8006544:	f997 3026 	ldrsb.w	r3, [r7, #38]	@ 0x26
 8006548:	009b      	lsls	r3, r3, #2
 800654a:	4413      	add	r3, r2
 800654c:	f04f 0200 	mov.w	r2, #0
 8006550:	601a      	str	r2, [r3, #0]

						// apply the jacobi rotation to all elements of the eigenvector matrix
						for (j = 0; j < n; j++) {
 8006552:	2300      	movs	r3, #0
 8006554:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8006558:	e07e      	b.n	8006658 <eigencompute+0x444>
							// store eigvec[j][ir]
							ftmp = eigvec[j][ir];
 800655a:	f997 2025 	ldrsb.w	r2, [r7, #37]	@ 0x25
 800655e:	4613      	mov	r3, r2
 8006560:	009b      	lsls	r3, r3, #2
 8006562:	4413      	add	r3, r2
 8006564:	00db      	lsls	r3, r3, #3
 8006566:	461a      	mov	r2, r3
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	441a      	add	r2, r3
 800656c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006570:	009b      	lsls	r3, r3, #2
 8006572:	4413      	add	r3, r2
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	613b      	str	r3, [r7, #16]
							// eigvec[j][ir] = eigvec[j][ir] - sin(phi) * (eigvec[j][ic] + tan(phi/2) * eigvec[j][ir])
							eigvec[j][ir] = ftmp - sinphi * (eigvec[j][ic] + tanhalfphi * ftmp);
 8006578:	f997 2025 	ldrsb.w	r2, [r7, #37]	@ 0x25
 800657c:	4613      	mov	r3, r2
 800657e:	009b      	lsls	r3, r3, #2
 8006580:	4413      	add	r3, r2
 8006582:	00db      	lsls	r3, r3, #3
 8006584:	461a      	mov	r2, r3
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	441a      	add	r2, r3
 800658a:	f997 3026 	ldrsb.w	r3, [r7, #38]	@ 0x26
 800658e:	009b      	lsls	r3, r3, #2
 8006590:	4413      	add	r3, r2
 8006592:	ed93 7a00 	vldr	s14, [r3]
 8006596:	edd7 6a05 	vldr	s13, [r7, #20]
 800659a:	edd7 7a04 	vldr	s15, [r7, #16]
 800659e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80065a2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80065a6:	edd7 7a06 	vldr	s15, [r7, #24]
 80065aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80065ae:	f997 2025 	ldrsb.w	r2, [r7, #37]	@ 0x25
 80065b2:	4613      	mov	r3, r2
 80065b4:	009b      	lsls	r3, r3, #2
 80065b6:	4413      	add	r3, r2
 80065b8:	00db      	lsls	r3, r3, #3
 80065ba:	461a      	mov	r2, r3
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	441a      	add	r2, r3
 80065c0:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80065c4:	ed97 7a04 	vldr	s14, [r7, #16]
 80065c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80065cc:	009b      	lsls	r3, r3, #2
 80065ce:	4413      	add	r3, r2
 80065d0:	edc3 7a00 	vstr	s15, [r3]
							// eigvec[j][ic] = eigvec[j][ic] + sin(phi) * (eigvec[j][ir] - tan(phi/2) * eigvec[j][ic])
							eigvec[j][ic] = eigvec[j][ic] + sinphi * (ftmp - tanhalfphi * eigvec[j][ic]);
 80065d4:	f997 2025 	ldrsb.w	r2, [r7, #37]	@ 0x25
 80065d8:	4613      	mov	r3, r2
 80065da:	009b      	lsls	r3, r3, #2
 80065dc:	4413      	add	r3, r2
 80065de:	00db      	lsls	r3, r3, #3
 80065e0:	461a      	mov	r2, r3
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	441a      	add	r2, r3
 80065e6:	f997 3026 	ldrsb.w	r3, [r7, #38]	@ 0x26
 80065ea:	009b      	lsls	r3, r3, #2
 80065ec:	4413      	add	r3, r2
 80065ee:	ed93 7a00 	vldr	s14, [r3]
 80065f2:	f997 2025 	ldrsb.w	r2, [r7, #37]	@ 0x25
 80065f6:	4613      	mov	r3, r2
 80065f8:	009b      	lsls	r3, r3, #2
 80065fa:	4413      	add	r3, r2
 80065fc:	00db      	lsls	r3, r3, #3
 80065fe:	461a      	mov	r2, r3
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	441a      	add	r2, r3
 8006604:	f997 3026 	ldrsb.w	r3, [r7, #38]	@ 0x26
 8006608:	009b      	lsls	r3, r3, #2
 800660a:	4413      	add	r3, r2
 800660c:	edd3 6a00 	vldr	s13, [r3]
 8006610:	edd7 7a05 	vldr	s15, [r7, #20]
 8006614:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006618:	edd7 6a04 	vldr	s13, [r7, #16]
 800661c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8006620:	edd7 7a06 	vldr	s15, [r7, #24]
 8006624:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006628:	f997 2025 	ldrsb.w	r2, [r7, #37]	@ 0x25
 800662c:	4613      	mov	r3, r2
 800662e:	009b      	lsls	r3, r3, #2
 8006630:	4413      	add	r3, r2
 8006632:	00db      	lsls	r3, r3, #3
 8006634:	461a      	mov	r2, r3
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	441a      	add	r2, r3
 800663a:	f997 3026 	ldrsb.w	r3, [r7, #38]	@ 0x26
 800663e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006642:	009b      	lsls	r3, r3, #2
 8006644:	4413      	add	r3, r2
 8006646:	edc3 7a00 	vstr	s15, [r3]
						for (j = 0; j < n; j++) {
 800664a:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 800664e:	b2db      	uxtb	r3, r3
 8006650:	3301      	adds	r3, #1
 8006652:	b2db      	uxtb	r3, r3
 8006654:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8006658:	f997 2025 	ldrsb.w	r2, [r7, #37]	@ 0x25
 800665c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006660:	429a      	cmp	r2, r3
 8006662:	f6ff af7a 	blt.w	800655a <eigencompute+0x346>
						}

						// apply the jacobi rotation only to those elements of matrix m that can change
						for (j = 0; j <= ir - 1; j++) {
 8006666:	2300      	movs	r3, #0
 8006668:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 800666c:	e07e      	b.n	800676c <eigencompute+0x558>
							// store A[j][ir]
							ftmp = A[j][ir];
 800666e:	f997 2025 	ldrsb.w	r2, [r7, #37]	@ 0x25
 8006672:	4613      	mov	r3, r2
 8006674:	009b      	lsls	r3, r3, #2
 8006676:	4413      	add	r3, r2
 8006678:	00db      	lsls	r3, r3, #3
 800667a:	461a      	mov	r2, r3
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	441a      	add	r2, r3
 8006680:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006684:	009b      	lsls	r3, r3, #2
 8006686:	4413      	add	r3, r2
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	613b      	str	r3, [r7, #16]
							// A[j][ir] = A[j][ir] - sin(phi) * (A[j][ic] + tan(phi/2) * A[j][ir])
							A[j][ir] = ftmp - sinphi * (A[j][ic] + tanhalfphi * ftmp);
 800668c:	f997 2025 	ldrsb.w	r2, [r7, #37]	@ 0x25
 8006690:	4613      	mov	r3, r2
 8006692:	009b      	lsls	r3, r3, #2
 8006694:	4413      	add	r3, r2
 8006696:	00db      	lsls	r3, r3, #3
 8006698:	461a      	mov	r2, r3
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	441a      	add	r2, r3
 800669e:	f997 3026 	ldrsb.w	r3, [r7, #38]	@ 0x26
 80066a2:	009b      	lsls	r3, r3, #2
 80066a4:	4413      	add	r3, r2
 80066a6:	ed93 7a00 	vldr	s14, [r3]
 80066aa:	edd7 6a05 	vldr	s13, [r7, #20]
 80066ae:	edd7 7a04 	vldr	s15, [r7, #16]
 80066b2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80066b6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80066ba:	edd7 7a06 	vldr	s15, [r7, #24]
 80066be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80066c2:	f997 2025 	ldrsb.w	r2, [r7, #37]	@ 0x25
 80066c6:	4613      	mov	r3, r2
 80066c8:	009b      	lsls	r3, r3, #2
 80066ca:	4413      	add	r3, r2
 80066cc:	00db      	lsls	r3, r3, #3
 80066ce:	461a      	mov	r2, r3
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	441a      	add	r2, r3
 80066d4:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80066d8:	ed97 7a04 	vldr	s14, [r7, #16]
 80066dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80066e0:	009b      	lsls	r3, r3, #2
 80066e2:	4413      	add	r3, r2
 80066e4:	edc3 7a00 	vstr	s15, [r3]
							// A[j][ic] = A[j][ic] + sin(phi) * (A[j][ir] - tan(phi/2) * A[j][ic])
							A[j][ic] = A[j][ic] + sinphi * (ftmp - tanhalfphi * A[j][ic]);
 80066e8:	f997 2025 	ldrsb.w	r2, [r7, #37]	@ 0x25
 80066ec:	4613      	mov	r3, r2
 80066ee:	009b      	lsls	r3, r3, #2
 80066f0:	4413      	add	r3, r2
 80066f2:	00db      	lsls	r3, r3, #3
 80066f4:	461a      	mov	r2, r3
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	441a      	add	r2, r3
 80066fa:	f997 3026 	ldrsb.w	r3, [r7, #38]	@ 0x26
 80066fe:	009b      	lsls	r3, r3, #2
 8006700:	4413      	add	r3, r2
 8006702:	ed93 7a00 	vldr	s14, [r3]
 8006706:	f997 2025 	ldrsb.w	r2, [r7, #37]	@ 0x25
 800670a:	4613      	mov	r3, r2
 800670c:	009b      	lsls	r3, r3, #2
 800670e:	4413      	add	r3, r2
 8006710:	00db      	lsls	r3, r3, #3
 8006712:	461a      	mov	r2, r3
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	441a      	add	r2, r3
 8006718:	f997 3026 	ldrsb.w	r3, [r7, #38]	@ 0x26
 800671c:	009b      	lsls	r3, r3, #2
 800671e:	4413      	add	r3, r2
 8006720:	edd3 6a00 	vldr	s13, [r3]
 8006724:	edd7 7a05 	vldr	s15, [r7, #20]
 8006728:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800672c:	edd7 6a04 	vldr	s13, [r7, #16]
 8006730:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8006734:	edd7 7a06 	vldr	s15, [r7, #24]
 8006738:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800673c:	f997 2025 	ldrsb.w	r2, [r7, #37]	@ 0x25
 8006740:	4613      	mov	r3, r2
 8006742:	009b      	lsls	r3, r3, #2
 8006744:	4413      	add	r3, r2
 8006746:	00db      	lsls	r3, r3, #3
 8006748:	461a      	mov	r2, r3
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	441a      	add	r2, r3
 800674e:	f997 3026 	ldrsb.w	r3, [r7, #38]	@ 0x26
 8006752:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006756:	009b      	lsls	r3, r3, #2
 8006758:	4413      	add	r3, r2
 800675a:	edc3 7a00 	vstr	s15, [r3]
						for (j = 0; j <= ir - 1; j++) {
 800675e:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8006762:	b2db      	uxtb	r3, r3
 8006764:	3301      	adds	r3, #1
 8006766:	b2db      	uxtb	r3, r3
 8006768:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 800676c:	f997 2027 	ldrsb.w	r2, [r7, #39]	@ 0x27
 8006770:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8006774:	429a      	cmp	r2, r3
 8006776:	f73f af7a 	bgt.w	800666e <eigencompute+0x45a>
						}
						for (j = ir + 1; j <= ic - 1; j++) {
 800677a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800677e:	3301      	adds	r3, #1
 8006780:	b2db      	uxtb	r3, r3
 8006782:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8006786:	e080      	b.n	800688a <eigencompute+0x676>
 8006788:	3ff00000 	.word	0x3ff00000
							// store A[ir][j]
							ftmp = A[ir][j];
 800678c:	f997 2027 	ldrsb.w	r2, [r7, #39]	@ 0x27
 8006790:	4613      	mov	r3, r2
 8006792:	009b      	lsls	r3, r3, #2
 8006794:	4413      	add	r3, r2
 8006796:	00db      	lsls	r3, r3, #3
 8006798:	461a      	mov	r2, r3
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	441a      	add	r2, r3
 800679e:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 80067a2:	009b      	lsls	r3, r3, #2
 80067a4:	4413      	add	r3, r2
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	613b      	str	r3, [r7, #16]
							// A[ir][j] = A[ir][j] - sin(phi) * (A[j][ic] + tan(phi/2) * A[ir][j])
							A[ir][j] = ftmp - sinphi * (A[j][ic] + tanhalfphi * ftmp);
 80067aa:	f997 2025 	ldrsb.w	r2, [r7, #37]	@ 0x25
 80067ae:	4613      	mov	r3, r2
 80067b0:	009b      	lsls	r3, r3, #2
 80067b2:	4413      	add	r3, r2
 80067b4:	00db      	lsls	r3, r3, #3
 80067b6:	461a      	mov	r2, r3
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	441a      	add	r2, r3
 80067bc:	f997 3026 	ldrsb.w	r3, [r7, #38]	@ 0x26
 80067c0:	009b      	lsls	r3, r3, #2
 80067c2:	4413      	add	r3, r2
 80067c4:	ed93 7a00 	vldr	s14, [r3]
 80067c8:	edd7 6a05 	vldr	s13, [r7, #20]
 80067cc:	edd7 7a04 	vldr	s15, [r7, #16]
 80067d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80067d4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80067d8:	edd7 7a06 	vldr	s15, [r7, #24]
 80067dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80067e0:	f997 2027 	ldrsb.w	r2, [r7, #39]	@ 0x27
 80067e4:	4613      	mov	r3, r2
 80067e6:	009b      	lsls	r3, r3, #2
 80067e8:	4413      	add	r3, r2
 80067ea:	00db      	lsls	r3, r3, #3
 80067ec:	461a      	mov	r2, r3
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	441a      	add	r2, r3
 80067f2:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 80067f6:	ed97 7a04 	vldr	s14, [r7, #16]
 80067fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80067fe:	009b      	lsls	r3, r3, #2
 8006800:	4413      	add	r3, r2
 8006802:	edc3 7a00 	vstr	s15, [r3]
							// A[j][ic] = A[j][ic] + sin(phi) * (A[ir][j] - tan(phi/2) * A[j][ic])
							A[j][ic] = A[j][ic] + sinphi * (ftmp - tanhalfphi * A[j][ic]);
 8006806:	f997 2025 	ldrsb.w	r2, [r7, #37]	@ 0x25
 800680a:	4613      	mov	r3, r2
 800680c:	009b      	lsls	r3, r3, #2
 800680e:	4413      	add	r3, r2
 8006810:	00db      	lsls	r3, r3, #3
 8006812:	461a      	mov	r2, r3
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	441a      	add	r2, r3
 8006818:	f997 3026 	ldrsb.w	r3, [r7, #38]	@ 0x26
 800681c:	009b      	lsls	r3, r3, #2
 800681e:	4413      	add	r3, r2
 8006820:	ed93 7a00 	vldr	s14, [r3]
 8006824:	f997 2025 	ldrsb.w	r2, [r7, #37]	@ 0x25
 8006828:	4613      	mov	r3, r2
 800682a:	009b      	lsls	r3, r3, #2
 800682c:	4413      	add	r3, r2
 800682e:	00db      	lsls	r3, r3, #3
 8006830:	461a      	mov	r2, r3
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	441a      	add	r2, r3
 8006836:	f997 3026 	ldrsb.w	r3, [r7, #38]	@ 0x26
 800683a:	009b      	lsls	r3, r3, #2
 800683c:	4413      	add	r3, r2
 800683e:	edd3 6a00 	vldr	s13, [r3]
 8006842:	edd7 7a05 	vldr	s15, [r7, #20]
 8006846:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800684a:	edd7 6a04 	vldr	s13, [r7, #16]
 800684e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8006852:	edd7 7a06 	vldr	s15, [r7, #24]
 8006856:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800685a:	f997 2025 	ldrsb.w	r2, [r7, #37]	@ 0x25
 800685e:	4613      	mov	r3, r2
 8006860:	009b      	lsls	r3, r3, #2
 8006862:	4413      	add	r3, r2
 8006864:	00db      	lsls	r3, r3, #3
 8006866:	461a      	mov	r2, r3
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	441a      	add	r2, r3
 800686c:	f997 3026 	ldrsb.w	r3, [r7, #38]	@ 0x26
 8006870:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006874:	009b      	lsls	r3, r3, #2
 8006876:	4413      	add	r3, r2
 8006878:	edc3 7a00 	vstr	s15, [r3]
						for (j = ir + 1; j <= ic - 1; j++) {
 800687c:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8006880:	b2db      	uxtb	r3, r3
 8006882:	3301      	adds	r3, #1
 8006884:	b2db      	uxtb	r3, r3
 8006886:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 800688a:	f997 2026 	ldrsb.w	r2, [r7, #38]	@ 0x26
 800688e:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8006892:	429a      	cmp	r2, r3
 8006894:	f73f af7a 	bgt.w	800678c <eigencompute+0x578>
						}
						for (j = ic + 1; j < n; j++) {
 8006898:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800689c:	3301      	adds	r3, #1
 800689e:	b2db      	uxtb	r3, r3
 80068a0:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 80068a4:	e07e      	b.n	80069a4 <eigencompute+0x790>
							// store A[ir][j]
							ftmp = A[ir][j];
 80068a6:	f997 2027 	ldrsb.w	r2, [r7, #39]	@ 0x27
 80068aa:	4613      	mov	r3, r2
 80068ac:	009b      	lsls	r3, r3, #2
 80068ae:	4413      	add	r3, r2
 80068b0:	00db      	lsls	r3, r3, #3
 80068b2:	461a      	mov	r2, r3
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	441a      	add	r2, r3
 80068b8:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 80068bc:	009b      	lsls	r3, r3, #2
 80068be:	4413      	add	r3, r2
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	613b      	str	r3, [r7, #16]
							// A[ir][j] = A[ir][j] - sin(phi) * (A[ic][j] + tan(phi/2) * A[ir][j])
							A[ir][j] = ftmp - sinphi * (A[ic][j] + tanhalfphi * ftmp);
 80068c4:	f997 2026 	ldrsb.w	r2, [r7, #38]	@ 0x26
 80068c8:	4613      	mov	r3, r2
 80068ca:	009b      	lsls	r3, r3, #2
 80068cc:	4413      	add	r3, r2
 80068ce:	00db      	lsls	r3, r3, #3
 80068d0:	461a      	mov	r2, r3
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	441a      	add	r2, r3
 80068d6:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 80068da:	009b      	lsls	r3, r3, #2
 80068dc:	4413      	add	r3, r2
 80068de:	ed93 7a00 	vldr	s14, [r3]
 80068e2:	edd7 6a05 	vldr	s13, [r7, #20]
 80068e6:	edd7 7a04 	vldr	s15, [r7, #16]
 80068ea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80068ee:	ee37 7a27 	vadd.f32	s14, s14, s15
 80068f2:	edd7 7a06 	vldr	s15, [r7, #24]
 80068f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80068fa:	f997 2027 	ldrsb.w	r2, [r7, #39]	@ 0x27
 80068fe:	4613      	mov	r3, r2
 8006900:	009b      	lsls	r3, r3, #2
 8006902:	4413      	add	r3, r2
 8006904:	00db      	lsls	r3, r3, #3
 8006906:	461a      	mov	r2, r3
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	441a      	add	r2, r3
 800690c:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8006910:	ed97 7a04 	vldr	s14, [r7, #16]
 8006914:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006918:	009b      	lsls	r3, r3, #2
 800691a:	4413      	add	r3, r2
 800691c:	edc3 7a00 	vstr	s15, [r3]
							// A[ic][j] = A[ic][j] + sin(phi) * (A[ir][j] - tan(phi/2) * A[ic][j])
							A[ic][j] = A[ic][j] + sinphi * (ftmp - tanhalfphi * A[ic][j]);
 8006920:	f997 2026 	ldrsb.w	r2, [r7, #38]	@ 0x26
 8006924:	4613      	mov	r3, r2
 8006926:	009b      	lsls	r3, r3, #2
 8006928:	4413      	add	r3, r2
 800692a:	00db      	lsls	r3, r3, #3
 800692c:	461a      	mov	r2, r3
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	441a      	add	r2, r3
 8006932:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8006936:	009b      	lsls	r3, r3, #2
 8006938:	4413      	add	r3, r2
 800693a:	ed93 7a00 	vldr	s14, [r3]
 800693e:	f997 2026 	ldrsb.w	r2, [r7, #38]	@ 0x26
 8006942:	4613      	mov	r3, r2
 8006944:	009b      	lsls	r3, r3, #2
 8006946:	4413      	add	r3, r2
 8006948:	00db      	lsls	r3, r3, #3
 800694a:	461a      	mov	r2, r3
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	441a      	add	r2, r3
 8006950:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8006954:	009b      	lsls	r3, r3, #2
 8006956:	4413      	add	r3, r2
 8006958:	edd3 6a00 	vldr	s13, [r3]
 800695c:	edd7 7a05 	vldr	s15, [r7, #20]
 8006960:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006964:	edd7 6a04 	vldr	s13, [r7, #16]
 8006968:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800696c:	edd7 7a06 	vldr	s15, [r7, #24]
 8006970:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006974:	f997 2026 	ldrsb.w	r2, [r7, #38]	@ 0x26
 8006978:	4613      	mov	r3, r2
 800697a:	009b      	lsls	r3, r3, #2
 800697c:	4413      	add	r3, r2
 800697e:	00db      	lsls	r3, r3, #3
 8006980:	461a      	mov	r2, r3
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	441a      	add	r2, r3
 8006986:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 800698a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800698e:	009b      	lsls	r3, r3, #2
 8006990:	4413      	add	r3, r2
 8006992:	edc3 7a00 	vstr	s15, [r3]
						for (j = ic + 1; j < n; j++) {
 8006996:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 800699a:	b2db      	uxtb	r3, r3
 800699c:	3301      	adds	r3, #1
 800699e:	b2db      	uxtb	r3, r3
 80069a0:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 80069a4:	f997 2025 	ldrsb.w	r2, [r7, #37]	@ 0x25
 80069a8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80069ac:	429a      	cmp	r2, r3
 80069ae:	f6ff af7a 	blt.w	80068a6 <eigencompute+0x692>
				for (ic = ir + 1; ic < n; ic++) {
 80069b2:	f997 3026 	ldrsb.w	r3, [r7, #38]	@ 0x26
 80069b6:	b2db      	uxtb	r3, r3
 80069b8:	3301      	adds	r3, #1
 80069ba:	b2db      	uxtb	r3, r3
 80069bc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80069c0:	f997 2026 	ldrsb.w	r2, [r7, #38]	@ 0x26
 80069c4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80069c8:	429a      	cmp	r2, r3
 80069ca:	f6ff acd6 	blt.w	800637a <eigencompute+0x166>
			for (ir = 0; ir < n - 1; ir++) {
 80069ce:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80069d2:	b2db      	uxtb	r3, r3
 80069d4:	3301      	adds	r3, #1
 80069d6:	b2db      	uxtb	r3, r3
 80069d8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80069dc:	f997 2027 	ldrsb.w	r2, [r7, #39]	@ 0x27
 80069e0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80069e4:	3b01      	subs	r3, #1
 80069e6:	429a      	cmp	r2, r3
 80069e8:	f6ff acc0 	blt.w	800636c <eigencompute+0x158>
						}
					}   // end of test for matrix element already zero
				}   // end of loop over columns
			}   // end of loop over rows
		}  // end of test for non-zero residue
	} while ((residue > 0.0F) && (ctr++ < NITERATIONS)); // end of main loop
 80069ec:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80069f0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80069f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80069f8:	dc00      	bgt.n	80069fc <eigencompute+0x7e8>
}
 80069fa:	e009      	b.n	8006a10 <eigencompute+0x7fc>
	} while ((residue > 0.0F) && (ctr++ < NITERATIONS)); // end of main loop
 80069fc:	f997 3024 	ldrsb.w	r3, [r7, #36]	@ 0x24
 8006a00:	b2da      	uxtb	r2, r3
 8006a02:	3201      	adds	r2, #1
 8006a04:	b2d2      	uxtb	r2, r2
 8006a06:	f887 2024 	strb.w	r2, [r7, #36]	@ 0x24
 8006a0a:	2b0e      	cmp	r3, #14
 8006a0c:	f77f ac62 	ble.w	80062d4 <eigencompute+0xc0>
}
 8006a10:	bf00      	nop
 8006a12:	3730      	adds	r7, #48	@ 0x30
 8006a14:	46bd      	mov	sp, r7
 8006a16:	bdb0      	pop	{r4, r5, r7, pc}

08006a18 <fmatrixAeqInvA>:

// function uses Gauss-Jordan elimination to compute the inverse of matrix A in situ
// on exit, A is replaced with its inverse
void fmatrixAeqInvA(float *A[], int8_t iColInd[], int8_t iRowInd[], int8_t iPivot[], int8_t isize)
{
 8006a18:	b580      	push	{r7, lr}
 8006a1a:	b08a      	sub	sp, #40	@ 0x28
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	60f8      	str	r0, [r7, #12]
 8006a20:	60b9      	str	r1, [r7, #8]
 8006a22:	607a      	str	r2, [r7, #4]
 8006a24:	603b      	str	r3, [r7, #0]
	float ftmp;						// temporary variable used in swaps
	int8_t i, j, k, l, m;			// index counters
	int8_t iPivotRow, iPivotCol;	// row and column of pivot element

	// to avoid compiler warnings
	iPivotRow = iPivotCol = 0;
 8006a26:	2300      	movs	r3, #0
 8006a28:	777b      	strb	r3, [r7, #29]
 8006a2a:	7f7b      	ldrb	r3, [r7, #29]
 8006a2c:	77bb      	strb	r3, [r7, #30]

	// initialize the pivot array to 0
	for (j = 0; j < isize; j++) {
 8006a2e:	2300      	movs	r3, #0
 8006a30:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006a34:	e00c      	b.n	8006a50 <fmatrixAeqInvA+0x38>
		iPivot[j] = 0;
 8006a36:	f997 3022 	ldrsb.w	r3, [r7, #34]	@ 0x22
 8006a3a:	683a      	ldr	r2, [r7, #0]
 8006a3c:	4413      	add	r3, r2
 8006a3e:	2200      	movs	r2, #0
 8006a40:	701a      	strb	r2, [r3, #0]
	for (j = 0; j < isize; j++) {
 8006a42:	f997 3022 	ldrsb.w	r3, [r7, #34]	@ 0x22
 8006a46:	b2db      	uxtb	r3, r3
 8006a48:	3301      	adds	r3, #1
 8006a4a:	b2db      	uxtb	r3, r3
 8006a4c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006a50:	f997 2022 	ldrsb.w	r2, [r7, #34]	@ 0x22
 8006a54:	f997 3030 	ldrsb.w	r3, [r7, #48]	@ 0x30
 8006a58:	429a      	cmp	r2, r3
 8006a5a:	dbec      	blt.n	8006a36 <fmatrixAeqInvA+0x1e>
	}

	// main loop i over the dimensions of the square matrix A
	for (i = 0; i < isize; i++) {
 8006a5c:	2300      	movs	r3, #0
 8006a5e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006a62:	e1a1      	b.n	8006da8 <fmatrixAeqInvA+0x390>
		// zero the largest element found for pivoting
		largest = 0.0F;
 8006a64:	f04f 0300 	mov.w	r3, #0
 8006a68:	627b      	str	r3, [r7, #36]	@ 0x24
		// loop over candidate rows j
		for (j = 0; j < isize; j++) {
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006a70:	e063      	b.n	8006b3a <fmatrixAeqInvA+0x122>
			// check if row j has been previously pivoted
			if (iPivot[j] != 1) {
 8006a72:	f997 3022 	ldrsb.w	r3, [r7, #34]	@ 0x22
 8006a76:	683a      	ldr	r2, [r7, #0]
 8006a78:	4413      	add	r3, r2
 8006a7a:	f993 3000 	ldrsb.w	r3, [r3]
 8006a7e:	2b01      	cmp	r3, #1
 8006a80:	d054      	beq.n	8006b2c <fmatrixAeqInvA+0x114>
				// loop over candidate columns k
				for (k = 0; k < isize; k++) {
 8006a82:	2300      	movs	r3, #0
 8006a84:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
 8006a88:	e04a      	b.n	8006b20 <fmatrixAeqInvA+0x108>
					// check if column k has previously been pivoted
					if (iPivot[k] == 0) {
 8006a8a:	f997 3021 	ldrsb.w	r3, [r7, #33]	@ 0x21
 8006a8e:	683a      	ldr	r2, [r7, #0]
 8006a90:	4413      	add	r3, r2
 8006a92:	f993 3000 	ldrsb.w	r3, [r3]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d12b      	bne.n	8006af2 <fmatrixAeqInvA+0xda>
						// check if the pivot element is the largest found so far
						if (fabs(A[j][k]) >= largest) {
 8006a9a:	f997 3022 	ldrsb.w	r3, [r7, #34]	@ 0x22
 8006a9e:	009b      	lsls	r3, r3, #2
 8006aa0:	68fa      	ldr	r2, [r7, #12]
 8006aa2:	4413      	add	r3, r2
 8006aa4:	681a      	ldr	r2, [r3, #0]
 8006aa6:	f997 3021 	ldrsb.w	r3, [r7, #33]	@ 0x21
 8006aaa:	009b      	lsls	r3, r3, #2
 8006aac:	4413      	add	r3, r2
 8006aae:	edd3 7a00 	vldr	s15, [r3]
 8006ab2:	eef0 7ae7 	vabs.f32	s15, s15
 8006ab6:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8006aba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006abe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ac2:	d826      	bhi.n	8006b12 <fmatrixAeqInvA+0xfa>
							// and store this location as the current best candidate for pivoting
							iPivotRow = j;
 8006ac4:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8006ac8:	77bb      	strb	r3, [r7, #30]
							iPivotCol = k;
 8006aca:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8006ace:	777b      	strb	r3, [r7, #29]
							largest = (float) fabs(A[iPivotRow][iPivotCol]);
 8006ad0:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8006ad4:	009b      	lsls	r3, r3, #2
 8006ad6:	68fa      	ldr	r2, [r7, #12]
 8006ad8:	4413      	add	r3, r2
 8006ada:	681a      	ldr	r2, [r3, #0]
 8006adc:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8006ae0:	009b      	lsls	r3, r3, #2
 8006ae2:	4413      	add	r3, r2
 8006ae4:	edd3 7a00 	vldr	s15, [r3]
 8006ae8:	eef0 7ae7 	vabs.f32	s15, s15
 8006aec:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
 8006af0:	e00f      	b.n	8006b12 <fmatrixAeqInvA+0xfa>
						}
					} else if (iPivot[k] > 1) {
 8006af2:	f997 3021 	ldrsb.w	r3, [r7, #33]	@ 0x21
 8006af6:	683a      	ldr	r2, [r7, #0]
 8006af8:	4413      	add	r3, r2
 8006afa:	f993 3000 	ldrsb.w	r3, [r3]
 8006afe:	2b01      	cmp	r3, #1
 8006b00:	dd07      	ble.n	8006b12 <fmatrixAeqInvA+0xfa>
						// zero determinant situation: exit with identity matrix
						fmatrixAeqI(A, isize);
 8006b02:	f997 3030 	ldrsb.w	r3, [r7, #48]	@ 0x30
 8006b06:	b21b      	sxth	r3, r3
 8006b08:	4619      	mov	r1, r3
 8006b0a:	68f8      	ldr	r0, [r7, #12]
 8006b0c:	f7ff f939 	bl	8005d82 <fmatrixAeqI>
						return;
 8006b10:	e1b6      	b.n	8006e80 <fmatrixAeqInvA+0x468>
				for (k = 0; k < isize; k++) {
 8006b12:	f997 3021 	ldrsb.w	r3, [r7, #33]	@ 0x21
 8006b16:	b2db      	uxtb	r3, r3
 8006b18:	3301      	adds	r3, #1
 8006b1a:	b2db      	uxtb	r3, r3
 8006b1c:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
 8006b20:	f997 2021 	ldrsb.w	r2, [r7, #33]	@ 0x21
 8006b24:	f997 3030 	ldrsb.w	r3, [r7, #48]	@ 0x30
 8006b28:	429a      	cmp	r2, r3
 8006b2a:	dbae      	blt.n	8006a8a <fmatrixAeqInvA+0x72>
		for (j = 0; j < isize; j++) {
 8006b2c:	f997 3022 	ldrsb.w	r3, [r7, #34]	@ 0x22
 8006b30:	b2db      	uxtb	r3, r3
 8006b32:	3301      	adds	r3, #1
 8006b34:	b2db      	uxtb	r3, r3
 8006b36:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006b3a:	f997 2022 	ldrsb.w	r2, [r7, #34]	@ 0x22
 8006b3e:	f997 3030 	ldrsb.w	r3, [r7, #48]	@ 0x30
 8006b42:	429a      	cmp	r2, r3
 8006b44:	db95      	blt.n	8006a72 <fmatrixAeqInvA+0x5a>
					}
				}
			}
		}
		// increment the entry in iPivot to denote it has been selected for pivoting
		iPivot[iPivotCol]++;
 8006b46:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8006b4a:	683a      	ldr	r2, [r7, #0]
 8006b4c:	4413      	add	r3, r2
 8006b4e:	f993 2000 	ldrsb.w	r2, [r3]
 8006b52:	b2d2      	uxtb	r2, r2
 8006b54:	3201      	adds	r2, #1
 8006b56:	b2d2      	uxtb	r2, r2
 8006b58:	b252      	sxtb	r2, r2
 8006b5a:	701a      	strb	r2, [r3, #0]

		// check the pivot rows iPivotRow and iPivotCol are not the same before swapping
		if (iPivotRow != iPivotCol) {
 8006b5c:	f997 201e 	ldrsb.w	r2, [r7, #30]
 8006b60:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8006b64:	429a      	cmp	r2, r3
 8006b66:	d03e      	beq.n	8006be6 <fmatrixAeqInvA+0x1ce>
			// loop over columns l
			for (l = 0; l < isize; l++) {
 8006b68:	2300      	movs	r3, #0
 8006b6a:	f887 3020 	strb.w	r3, [r7, #32]
 8006b6e:	e034      	b.n	8006bda <fmatrixAeqInvA+0x1c2>
				// and swap all elements of rows iPivotRow and iPivotCol
				ftmp = A[iPivotRow][l];
 8006b70:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8006b74:	009b      	lsls	r3, r3, #2
 8006b76:	68fa      	ldr	r2, [r7, #12]
 8006b78:	4413      	add	r3, r2
 8006b7a:	681a      	ldr	r2, [r3, #0]
 8006b7c:	f997 3020 	ldrsb.w	r3, [r7, #32]
 8006b80:	009b      	lsls	r3, r3, #2
 8006b82:	4413      	add	r3, r2
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	61bb      	str	r3, [r7, #24]
				A[iPivotRow][l] = A[iPivotCol][l];
 8006b88:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8006b8c:	009b      	lsls	r3, r3, #2
 8006b8e:	68fa      	ldr	r2, [r7, #12]
 8006b90:	4413      	add	r3, r2
 8006b92:	681a      	ldr	r2, [r3, #0]
 8006b94:	f997 3020 	ldrsb.w	r3, [r7, #32]
 8006b98:	009b      	lsls	r3, r3, #2
 8006b9a:	441a      	add	r2, r3
 8006b9c:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8006ba0:	009b      	lsls	r3, r3, #2
 8006ba2:	68f9      	ldr	r1, [r7, #12]
 8006ba4:	440b      	add	r3, r1
 8006ba6:	6819      	ldr	r1, [r3, #0]
 8006ba8:	f997 3020 	ldrsb.w	r3, [r7, #32]
 8006bac:	009b      	lsls	r3, r3, #2
 8006bae:	440b      	add	r3, r1
 8006bb0:	6812      	ldr	r2, [r2, #0]
 8006bb2:	601a      	str	r2, [r3, #0]
				A[iPivotCol][l] = ftmp;
 8006bb4:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8006bb8:	009b      	lsls	r3, r3, #2
 8006bba:	68fa      	ldr	r2, [r7, #12]
 8006bbc:	4413      	add	r3, r2
 8006bbe:	681a      	ldr	r2, [r3, #0]
 8006bc0:	f997 3020 	ldrsb.w	r3, [r7, #32]
 8006bc4:	009b      	lsls	r3, r3, #2
 8006bc6:	4413      	add	r3, r2
 8006bc8:	69ba      	ldr	r2, [r7, #24]
 8006bca:	601a      	str	r2, [r3, #0]
			for (l = 0; l < isize; l++) {
 8006bcc:	f997 3020 	ldrsb.w	r3, [r7, #32]
 8006bd0:	b2db      	uxtb	r3, r3
 8006bd2:	3301      	adds	r3, #1
 8006bd4:	b2db      	uxtb	r3, r3
 8006bd6:	f887 3020 	strb.w	r3, [r7, #32]
 8006bda:	f997 2020 	ldrsb.w	r2, [r7, #32]
 8006bde:	f997 3030 	ldrsb.w	r3, [r7, #48]	@ 0x30
 8006be2:	429a      	cmp	r2, r3
 8006be4:	dbc4      	blt.n	8006b70 <fmatrixAeqInvA+0x158>
			}
		}

		// record that on the i-th iteration rows iPivotRow and iPivotCol were swapped
		iRowInd[i] = iPivotRow;
 8006be6:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8006bea:	687a      	ldr	r2, [r7, #4]
 8006bec:	4413      	add	r3, r2
 8006bee:	7fba      	ldrb	r2, [r7, #30]
 8006bf0:	701a      	strb	r2, [r3, #0]
		iColInd[i] = iPivotCol;
 8006bf2:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8006bf6:	68ba      	ldr	r2, [r7, #8]
 8006bf8:	4413      	add	r3, r2
 8006bfa:	7f7a      	ldrb	r2, [r7, #29]
 8006bfc:	701a      	strb	r2, [r3, #0]

		// check for zero on-diagonal element (singular matrix) and return with identity matrix if detected
		if (A[iPivotCol][iPivotCol] == 0.0F) {
 8006bfe:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8006c02:	009b      	lsls	r3, r3, #2
 8006c04:	68fa      	ldr	r2, [r7, #12]
 8006c06:	4413      	add	r3, r2
 8006c08:	681a      	ldr	r2, [r3, #0]
 8006c0a:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8006c0e:	009b      	lsls	r3, r3, #2
 8006c10:	4413      	add	r3, r2
 8006c12:	edd3 7a00 	vldr	s15, [r3]
 8006c16:	eef5 7a40 	vcmp.f32	s15, #0.0
 8006c1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c1e:	d107      	bne.n	8006c30 <fmatrixAeqInvA+0x218>
			// zero determinant situation: exit with identity matrix
			fmatrixAeqI(A, isize);
 8006c20:	f997 3030 	ldrsb.w	r3, [r7, #48]	@ 0x30
 8006c24:	b21b      	sxth	r3, r3
 8006c26:	4619      	mov	r1, r3
 8006c28:	68f8      	ldr	r0, [r7, #12]
 8006c2a:	f7ff f8aa 	bl	8005d82 <fmatrixAeqI>
			return;
 8006c2e:	e127      	b.n	8006e80 <fmatrixAeqInvA+0x468>
		}

		// calculate the reciprocal of the pivot element knowing it's non-zero
		recippiv = 1.0F / A[iPivotCol][iPivotCol];
 8006c30:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8006c34:	009b      	lsls	r3, r3, #2
 8006c36:	68fa      	ldr	r2, [r7, #12]
 8006c38:	4413      	add	r3, r2
 8006c3a:	681a      	ldr	r2, [r3, #0]
 8006c3c:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8006c40:	009b      	lsls	r3, r3, #2
 8006c42:	4413      	add	r3, r2
 8006c44:	ed93 7a00 	vldr	s14, [r3]
 8006c48:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006c4c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006c50:	edc7 7a05 	vstr	s15, [r7, #20]
		// by definition, the diagonal element normalizes to 1
		A[iPivotCol][iPivotCol] = 1.0F;
 8006c54:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8006c58:	009b      	lsls	r3, r3, #2
 8006c5a:	68fa      	ldr	r2, [r7, #12]
 8006c5c:	4413      	add	r3, r2
 8006c5e:	681a      	ldr	r2, [r3, #0]
 8006c60:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8006c64:	009b      	lsls	r3, r3, #2
 8006c66:	4413      	add	r3, r2
 8006c68:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8006c6c:	601a      	str	r2, [r3, #0]
		// multiply all of row iPivotCol by the reciprocal of the pivot element including the diagonal element
		// the diagonal element A[iPivotCol][iPivotCol] now has value equal to the reciprocal of its previous value
		for (l = 0; l < isize; l++) {
 8006c6e:	2300      	movs	r3, #0
 8006c70:	f887 3020 	strb.w	r3, [r7, #32]
 8006c74:	e022      	b.n	8006cbc <fmatrixAeqInvA+0x2a4>
			A[iPivotCol][l] *= recippiv;
 8006c76:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8006c7a:	009b      	lsls	r3, r3, #2
 8006c7c:	68fa      	ldr	r2, [r7, #12]
 8006c7e:	4413      	add	r3, r2
 8006c80:	681a      	ldr	r2, [r3, #0]
 8006c82:	f997 3020 	ldrsb.w	r3, [r7, #32]
 8006c86:	009b      	lsls	r3, r3, #2
 8006c88:	4413      	add	r3, r2
 8006c8a:	ed93 7a00 	vldr	s14, [r3]
 8006c8e:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8006c92:	009b      	lsls	r3, r3, #2
 8006c94:	68fa      	ldr	r2, [r7, #12]
 8006c96:	4413      	add	r3, r2
 8006c98:	681a      	ldr	r2, [r3, #0]
 8006c9a:	f997 3020 	ldrsb.w	r3, [r7, #32]
 8006c9e:	009b      	lsls	r3, r3, #2
 8006ca0:	4413      	add	r3, r2
 8006ca2:	edd7 7a05 	vldr	s15, [r7, #20]
 8006ca6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006caa:	edc3 7a00 	vstr	s15, [r3]
		for (l = 0; l < isize; l++) {
 8006cae:	f997 3020 	ldrsb.w	r3, [r7, #32]
 8006cb2:	b2db      	uxtb	r3, r3
 8006cb4:	3301      	adds	r3, #1
 8006cb6:	b2db      	uxtb	r3, r3
 8006cb8:	f887 3020 	strb.w	r3, [r7, #32]
 8006cbc:	f997 2020 	ldrsb.w	r2, [r7, #32]
 8006cc0:	f997 3030 	ldrsb.w	r3, [r7, #48]	@ 0x30
 8006cc4:	429a      	cmp	r2, r3
 8006cc6:	dbd6      	blt.n	8006c76 <fmatrixAeqInvA+0x25e>
		}
		// loop over all rows m of A
		for (m = 0; m < isize; m++) {
 8006cc8:	2300      	movs	r3, #0
 8006cca:	77fb      	strb	r3, [r7, #31]
 8006ccc:	e05f      	b.n	8006d8e <fmatrixAeqInvA+0x376>
			if (m != iPivotCol) {
 8006cce:	f997 201f 	ldrsb.w	r2, [r7, #31]
 8006cd2:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8006cd6:	429a      	cmp	r2, r3
 8006cd8:	d053      	beq.n	8006d82 <fmatrixAeqInvA+0x36a>
				// scaling factor for this row m is in column iPivotCol
				scaling = A[m][iPivotCol];
 8006cda:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006cde:	009b      	lsls	r3, r3, #2
 8006ce0:	68fa      	ldr	r2, [r7, #12]
 8006ce2:	4413      	add	r3, r2
 8006ce4:	681a      	ldr	r2, [r3, #0]
 8006ce6:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8006cea:	009b      	lsls	r3, r3, #2
 8006cec:	4413      	add	r3, r2
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	613b      	str	r3, [r7, #16]
				// zero this element
				A[m][iPivotCol] = 0.0F;
 8006cf2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006cf6:	009b      	lsls	r3, r3, #2
 8006cf8:	68fa      	ldr	r2, [r7, #12]
 8006cfa:	4413      	add	r3, r2
 8006cfc:	681a      	ldr	r2, [r3, #0]
 8006cfe:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8006d02:	009b      	lsls	r3, r3, #2
 8006d04:	4413      	add	r3, r2
 8006d06:	f04f 0200 	mov.w	r2, #0
 8006d0a:	601a      	str	r2, [r3, #0]
				// loop over all columns l of A and perform elimination
				for (l = 0; l < isize; l++) {
 8006d0c:	2300      	movs	r3, #0
 8006d0e:	f887 3020 	strb.w	r3, [r7, #32]
 8006d12:	e030      	b.n	8006d76 <fmatrixAeqInvA+0x35e>
					A[m][l] -= A[iPivotCol][l] * scaling;
 8006d14:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006d18:	009b      	lsls	r3, r3, #2
 8006d1a:	68fa      	ldr	r2, [r7, #12]
 8006d1c:	4413      	add	r3, r2
 8006d1e:	681a      	ldr	r2, [r3, #0]
 8006d20:	f997 3020 	ldrsb.w	r3, [r7, #32]
 8006d24:	009b      	lsls	r3, r3, #2
 8006d26:	4413      	add	r3, r2
 8006d28:	ed93 7a00 	vldr	s14, [r3]
 8006d2c:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8006d30:	009b      	lsls	r3, r3, #2
 8006d32:	68fa      	ldr	r2, [r7, #12]
 8006d34:	4413      	add	r3, r2
 8006d36:	681a      	ldr	r2, [r3, #0]
 8006d38:	f997 3020 	ldrsb.w	r3, [r7, #32]
 8006d3c:	009b      	lsls	r3, r3, #2
 8006d3e:	4413      	add	r3, r2
 8006d40:	edd3 6a00 	vldr	s13, [r3]
 8006d44:	edd7 7a04 	vldr	s15, [r7, #16]
 8006d48:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006d4c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006d50:	009b      	lsls	r3, r3, #2
 8006d52:	68fa      	ldr	r2, [r7, #12]
 8006d54:	4413      	add	r3, r2
 8006d56:	681a      	ldr	r2, [r3, #0]
 8006d58:	f997 3020 	ldrsb.w	r3, [r7, #32]
 8006d5c:	009b      	lsls	r3, r3, #2
 8006d5e:	4413      	add	r3, r2
 8006d60:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006d64:	edc3 7a00 	vstr	s15, [r3]
				for (l = 0; l < isize; l++) {
 8006d68:	f997 3020 	ldrsb.w	r3, [r7, #32]
 8006d6c:	b2db      	uxtb	r3, r3
 8006d6e:	3301      	adds	r3, #1
 8006d70:	b2db      	uxtb	r3, r3
 8006d72:	f887 3020 	strb.w	r3, [r7, #32]
 8006d76:	f997 2020 	ldrsb.w	r2, [r7, #32]
 8006d7a:	f997 3030 	ldrsb.w	r3, [r7, #48]	@ 0x30
 8006d7e:	429a      	cmp	r2, r3
 8006d80:	dbc8      	blt.n	8006d14 <fmatrixAeqInvA+0x2fc>
		for (m = 0; m < isize; m++) {
 8006d82:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006d86:	b2db      	uxtb	r3, r3
 8006d88:	3301      	adds	r3, #1
 8006d8a:	b2db      	uxtb	r3, r3
 8006d8c:	77fb      	strb	r3, [r7, #31]
 8006d8e:	f997 201f 	ldrsb.w	r2, [r7, #31]
 8006d92:	f997 3030 	ldrsb.w	r3, [r7, #48]	@ 0x30
 8006d96:	429a      	cmp	r2, r3
 8006d98:	db99      	blt.n	8006cce <fmatrixAeqInvA+0x2b6>
	for (i = 0; i < isize; i++) {
 8006d9a:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8006d9e:	b2db      	uxtb	r3, r3
 8006da0:	3301      	adds	r3, #1
 8006da2:	b2db      	uxtb	r3, r3
 8006da4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006da8:	f997 2023 	ldrsb.w	r2, [r7, #35]	@ 0x23
 8006dac:	f997 3030 	ldrsb.w	r3, [r7, #48]	@ 0x30
 8006db0:	429a      	cmp	r2, r3
 8006db2:	f6ff ae57 	blt.w	8006a64 <fmatrixAeqInvA+0x4c>
			}
		}
	} // end of loop i over the matrix dimensions

	// finally, loop in inverse order to apply the missing column swaps
	for (l = isize - 1; l >= 0; l--) {
 8006db6:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8006dba:	3b01      	subs	r3, #1
 8006dbc:	b2db      	uxtb	r3, r3
 8006dbe:	f887 3020 	strb.w	r3, [r7, #32]
 8006dc2:	e059      	b.n	8006e78 <fmatrixAeqInvA+0x460>
		// set i and j to the two columns to be swapped
		i = iRowInd[l];
 8006dc4:	f997 3020 	ldrsb.w	r3, [r7, #32]
 8006dc8:	687a      	ldr	r2, [r7, #4]
 8006dca:	4413      	add	r3, r2
 8006dcc:	781b      	ldrb	r3, [r3, #0]
 8006dce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
		j = iColInd[l];
 8006dd2:	f997 3020 	ldrsb.w	r3, [r7, #32]
 8006dd6:	68ba      	ldr	r2, [r7, #8]
 8006dd8:	4413      	add	r3, r2
 8006dda:	781b      	ldrb	r3, [r3, #0]
 8006ddc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22

		// check that the two columns i and j to be swapped are not the same
		if (i != j) {
 8006de0:	f997 2023 	ldrsb.w	r2, [r7, #35]	@ 0x23
 8006de4:	f997 3022 	ldrsb.w	r3, [r7, #34]	@ 0x22
 8006de8:	429a      	cmp	r2, r3
 8006dea:	d03e      	beq.n	8006e6a <fmatrixAeqInvA+0x452>
			// loop over all rows k to swap columns i and j of A
			for (k = 0; k < isize; k++) {
 8006dec:	2300      	movs	r3, #0
 8006dee:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
 8006df2:	e034      	b.n	8006e5e <fmatrixAeqInvA+0x446>
				ftmp = A[k][i];
 8006df4:	f997 3021 	ldrsb.w	r3, [r7, #33]	@ 0x21
 8006df8:	009b      	lsls	r3, r3, #2
 8006dfa:	68fa      	ldr	r2, [r7, #12]
 8006dfc:	4413      	add	r3, r2
 8006dfe:	681a      	ldr	r2, [r3, #0]
 8006e00:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8006e04:	009b      	lsls	r3, r3, #2
 8006e06:	4413      	add	r3, r2
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	61bb      	str	r3, [r7, #24]
				A[k][i] = A[k][j];
 8006e0c:	f997 3021 	ldrsb.w	r3, [r7, #33]	@ 0x21
 8006e10:	009b      	lsls	r3, r3, #2
 8006e12:	68fa      	ldr	r2, [r7, #12]
 8006e14:	4413      	add	r3, r2
 8006e16:	681a      	ldr	r2, [r3, #0]
 8006e18:	f997 3022 	ldrsb.w	r3, [r7, #34]	@ 0x22
 8006e1c:	009b      	lsls	r3, r3, #2
 8006e1e:	441a      	add	r2, r3
 8006e20:	f997 3021 	ldrsb.w	r3, [r7, #33]	@ 0x21
 8006e24:	009b      	lsls	r3, r3, #2
 8006e26:	68f9      	ldr	r1, [r7, #12]
 8006e28:	440b      	add	r3, r1
 8006e2a:	6819      	ldr	r1, [r3, #0]
 8006e2c:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8006e30:	009b      	lsls	r3, r3, #2
 8006e32:	440b      	add	r3, r1
 8006e34:	6812      	ldr	r2, [r2, #0]
 8006e36:	601a      	str	r2, [r3, #0]
				A[k][j] = ftmp;
 8006e38:	f997 3021 	ldrsb.w	r3, [r7, #33]	@ 0x21
 8006e3c:	009b      	lsls	r3, r3, #2
 8006e3e:	68fa      	ldr	r2, [r7, #12]
 8006e40:	4413      	add	r3, r2
 8006e42:	681a      	ldr	r2, [r3, #0]
 8006e44:	f997 3022 	ldrsb.w	r3, [r7, #34]	@ 0x22
 8006e48:	009b      	lsls	r3, r3, #2
 8006e4a:	4413      	add	r3, r2
 8006e4c:	69ba      	ldr	r2, [r7, #24]
 8006e4e:	601a      	str	r2, [r3, #0]
			for (k = 0; k < isize; k++) {
 8006e50:	f997 3021 	ldrsb.w	r3, [r7, #33]	@ 0x21
 8006e54:	b2db      	uxtb	r3, r3
 8006e56:	3301      	adds	r3, #1
 8006e58:	b2db      	uxtb	r3, r3
 8006e5a:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
 8006e5e:	f997 2021 	ldrsb.w	r2, [r7, #33]	@ 0x21
 8006e62:	f997 3030 	ldrsb.w	r3, [r7, #48]	@ 0x30
 8006e66:	429a      	cmp	r2, r3
 8006e68:	dbc4      	blt.n	8006df4 <fmatrixAeqInvA+0x3dc>
	for (l = isize - 1; l >= 0; l--) {
 8006e6a:	f997 3020 	ldrsb.w	r3, [r7, #32]
 8006e6e:	b2db      	uxtb	r3, r3
 8006e70:	3b01      	subs	r3, #1
 8006e72:	b2db      	uxtb	r3, r3
 8006e74:	f887 3020 	strb.w	r3, [r7, #32]
 8006e78:	f997 3020 	ldrsb.w	r3, [r7, #32]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	daa1      	bge.n	8006dc4 <fmatrixAeqInvA+0x3ac>
			}
		}
	}
}
 8006e80:	3728      	adds	r7, #40	@ 0x28
 8006e82:	46bd      	mov	sp, r7
 8006e84:	bd80      	pop	{r7, pc}
	...

08006e88 <sphere_region>:

//int gap_fuc_flag;
//int gap_fuc_spheredist;

static int sphere_region(float x, float y, float z)
{
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	b088      	sub	sp, #32
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	ed87 0a03 	vstr	s0, [r7, #12]
 8006e92:	edc7 0a02 	vstr	s1, [r7, #8]
 8006e96:	ed87 1a01 	vstr	s2, [r7, #4]
	int region;

	//if (pr) printf("  region %.1f,%.1f,%.1f  ", x, y, z);

	// longitude = 0 to 2pi  (meaning 0 to 360 degrees)
	longitude = atan2f(y, x) + (float)M_PI;
 8006e9a:	edd7 0a03 	vldr	s1, [r7, #12]
 8006e9e:	ed97 0a02 	vldr	s0, [r7, #8]
 8006ea2:	f00a fafb 	bl	801149c <atan2f>
 8006ea6:	eef0 7a40 	vmov.f32	s15, s0
 8006eaa:	ed9f 7a54 	vldr	s14, [pc, #336]	@ 8006ffc <sphere_region+0x174>
 8006eae:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006eb2:	edc7 7a06 	vstr	s15, [r7, #24]
	// latitude = -pi/2 to +pi/2  (meaning -90 to +90 degrees)
	latitude = (float)(M_PI / 2.0) - atan2f(sqrtf(x * x + y * y), z);
 8006eb6:	edd7 7a03 	vldr	s15, [r7, #12]
 8006eba:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8006ebe:	edd7 7a02 	vldr	s15, [r7, #8]
 8006ec2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8006ec6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006eca:	eeb0 0a67 	vmov.f32	s0, s15
 8006ece:	f00a fb3f 	bl	8011550 <sqrtf>
 8006ed2:	eef0 7a40 	vmov.f32	s15, s0
 8006ed6:	edd7 0a01 	vldr	s1, [r7, #4]
 8006eda:	eeb0 0a67 	vmov.f32	s0, s15
 8006ede:	f00a fadd 	bl	801149c <atan2f>
 8006ee2:	eef0 7a40 	vmov.f32	s15, s0
 8006ee6:	ed9f 7a46 	vldr	s14, [pc, #280]	@ 8007000 <sphere_region+0x178>
 8006eea:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006eee:	edc7 7a05 	vstr	s15, [r7, #20]
	// https://etna.mcs.kent.edu/vol.25.2006/pp309-327.dir/pp309-327.html
	// sphere equations....
	//  area of unit sphere = 4*pi
	//  area of unit sphere cap = 2*pi*h  h = cap height
	//  lattitude of unit sphere cap = arcsin(1 - h)
	if (latitude > 1.37046f /* 78.52 deg */) {
 8006ef2:	edd7 7a05 	vldr	s15, [r7, #20]
 8006ef6:	ed9f 7a43 	vldr	s14, [pc, #268]	@ 8007004 <sphere_region+0x17c>
 8006efa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006efe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f02:	dd02      	ble.n	8006f0a <sphere_region+0x82>
		// arctic cap, 1 region
		region = 0;
 8006f04:	2300      	movs	r3, #0
 8006f06:	61fb      	str	r3, [r7, #28]
 8006f08:	e072      	b.n	8006ff0 <sphere_region+0x168>
	} else if (latitude < -1.37046f /* -78.52 deg */) {
 8006f0a:	edd7 7a05 	vldr	s15, [r7, #20]
 8006f0e:	ed9f 7a3e 	vldr	s14, [pc, #248]	@ 8007008 <sphere_region+0x180>
 8006f12:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006f16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f1a:	d502      	bpl.n	8006f22 <sphere_region+0x9a>
		// antarctic cap, 1 region
		region = 99;
 8006f1c:	2363      	movs	r3, #99	@ 0x63
 8006f1e:	61fb      	str	r3, [r7, #28]
 8006f20:	e066      	b.n	8006ff0 <sphere_region+0x168>
	} else if (latitude > 0.74776f /* 42.84 deg */ || latitude < -0.74776f ) {
 8006f22:	edd7 7a05 	vldr	s15, [r7, #20]
 8006f26:	ed9f 7a39 	vldr	s14, [pc, #228]	@ 800700c <sphere_region+0x184>
 8006f2a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006f2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f32:	dc08      	bgt.n	8006f46 <sphere_region+0xbe>
 8006f34:	edd7 7a05 	vldr	s15, [r7, #20]
 8006f38:	ed9f 7a35 	vldr	s14, [pc, #212]	@ 8007010 <sphere_region+0x188>
 8006f3c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006f40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f44:	d52a      	bpl.n	8006f9c <sphere_region+0x114>
		// temperate zones, 15 regions each
		region = floorf(longitude * (float)(15.0 / (M_PI * 2.0)));
 8006f46:	edd7 7a06 	vldr	s15, [r7, #24]
 8006f4a:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8007014 <sphere_region+0x18c>
 8006f4e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006f52:	eeb0 0a67 	vmov.f32	s0, s15
 8006f56:	f00a fc01 	bl	801175c <floorf>
 8006f5a:	eef0 7a40 	vmov.f32	s15, s0
 8006f5e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006f62:	ee17 3a90 	vmov	r3, s15
 8006f66:	61fb      	str	r3, [r7, #28]
		if (region < 0) region = 0;
 8006f68:	69fb      	ldr	r3, [r7, #28]
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	da02      	bge.n	8006f74 <sphere_region+0xec>
 8006f6e:	2300      	movs	r3, #0
 8006f70:	61fb      	str	r3, [r7, #28]
 8006f72:	e004      	b.n	8006f7e <sphere_region+0xf6>
		else if (region > 14) region = 14;
 8006f74:	69fb      	ldr	r3, [r7, #28]
 8006f76:	2b0e      	cmp	r3, #14
 8006f78:	dd01      	ble.n	8006f7e <sphere_region+0xf6>
 8006f7a:	230e      	movs	r3, #14
 8006f7c:	61fb      	str	r3, [r7, #28]
		if (latitude > 0.0) {
 8006f7e:	edd7 7a05 	vldr	s15, [r7, #20]
 8006f82:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006f86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f8a:	dd03      	ble.n	8006f94 <sphere_region+0x10c>
			region += 1; // 1 to 15
 8006f8c:	69fb      	ldr	r3, [r7, #28]
 8006f8e:	3301      	adds	r3, #1
 8006f90:	61fb      	str	r3, [r7, #28]
		if (latitude > 0.0) {
 8006f92:	e02d      	b.n	8006ff0 <sphere_region+0x168>
		} else {
			region += 84; // 84 to 98
 8006f94:	69fb      	ldr	r3, [r7, #28]
 8006f96:	3354      	adds	r3, #84	@ 0x54
 8006f98:	61fb      	str	r3, [r7, #28]
		if (latitude > 0.0) {
 8006f9a:	e029      	b.n	8006ff0 <sphere_region+0x168>
		}
	} else {
		// tropic zones, 34 regions each
		region = floorf(longitude * (float)(34.0 / (M_PI * 2.0)));
 8006f9c:	edd7 7a06 	vldr	s15, [r7, #24]
 8006fa0:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8007018 <sphere_region+0x190>
 8006fa4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006fa8:	eeb0 0a67 	vmov.f32	s0, s15
 8006fac:	f00a fbd6 	bl	801175c <floorf>
 8006fb0:	eef0 7a40 	vmov.f32	s15, s0
 8006fb4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006fb8:	ee17 3a90 	vmov	r3, s15
 8006fbc:	61fb      	str	r3, [r7, #28]
		if (region < 0) region = 0;
 8006fbe:	69fb      	ldr	r3, [r7, #28]
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	da02      	bge.n	8006fca <sphere_region+0x142>
 8006fc4:	2300      	movs	r3, #0
 8006fc6:	61fb      	str	r3, [r7, #28]
 8006fc8:	e004      	b.n	8006fd4 <sphere_region+0x14c>
		else if (region > 33) region = 33;
 8006fca:	69fb      	ldr	r3, [r7, #28]
 8006fcc:	2b21      	cmp	r3, #33	@ 0x21
 8006fce:	dd01      	ble.n	8006fd4 <sphere_region+0x14c>
 8006fd0:	2321      	movs	r3, #33	@ 0x21
 8006fd2:	61fb      	str	r3, [r7, #28]
		if (latitude >= 0.0) {
 8006fd4:	edd7 7a05 	vldr	s15, [r7, #20]
 8006fd8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006fdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006fe0:	db03      	blt.n	8006fea <sphere_region+0x162>
			region += 16; // 16 to 49
 8006fe2:	69fb      	ldr	r3, [r7, #28]
 8006fe4:	3310      	adds	r3, #16
 8006fe6:	61fb      	str	r3, [r7, #28]
 8006fe8:	e002      	b.n	8006ff0 <sphere_region+0x168>
		} else {
			region += 50; // 50 to 83
 8006fea:	69fb      	ldr	r3, [r7, #28]
 8006fec:	3332      	adds	r3, #50	@ 0x32
 8006fee:	61fb      	str	r3, [r7, #28]
		}
	}
	//if (pr) printf("  %d\n", region);
	return region;
 8006ff0:	69fb      	ldr	r3, [r7, #28]
}
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	3720      	adds	r7, #32
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	bd80      	pop	{r7, pc}
 8006ffa:	bf00      	nop
 8006ffc:	40490fdb 	.word	0x40490fdb
 8007000:	3fc90fdb 	.word	0x3fc90fdb
 8007004:	3faf6b3c 	.word	0x3faf6b3c
 8007008:	bfaf6b3c 	.word	0xbfaf6b3c
 800700c:	3f3f6d33 	.word	0x3f3f6d33
 8007010:	bf3f6d33 	.word	0xbf3f6d33
 8007014:	4018c9eb 	.word	0x4018c9eb
 8007018:	40ad291c 	.word	0x40ad291c

0800701c <quality_update>:
	quality_wobble_computed = 0;
}

// How many surface gaps
void quality_update(const Point_t *point)
{
 800701c:	b590      	push	{r4, r7, lr}
 800701e:	b087      	sub	sp, #28
 8007020:	af00      	add	r7, sp, #0
 8007022:	6078      	str	r0, [r7, #4]
	if (count >= MAGBUFFSIZE)
 8007024:	4b4c      	ldr	r3, [pc, #304]	@ (8007158 <quality_update+0x13c>)
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	f240 2289 	movw	r2, #649	@ 0x289
 800702c:	4293      	cmp	r3, r2
 800702e:	dd02      	ble.n	8007036 <quality_update+0x1a>
		count = 0;
 8007030:	4b49      	ldr	r3, [pc, #292]	@ (8007158 <quality_update+0x13c>)
 8007032:	2200      	movs	r2, #0
 8007034:	601a      	str	r2, [r3, #0]

	float x, y, z;
	int region;

	x = point->x;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	617b      	str	r3, [r7, #20]
	y = point->y;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	685b      	ldr	r3, [r3, #4]
 8007040:	613b      	str	r3, [r7, #16]
	z = point->z;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	689b      	ldr	r3, [r3, #8]
 8007046:	60fb      	str	r3, [r7, #12]
	magnitude[count] = sqrtf(x * x + y * y + z * z);
 8007048:	edd7 7a05 	vldr	s15, [r7, #20]
 800704c:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8007050:	edd7 7a04 	vldr	s15, [r7, #16]
 8007054:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8007058:	ee37 7a27 	vadd.f32	s14, s14, s15
 800705c:	edd7 7a03 	vldr	s15, [r7, #12]
 8007060:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8007064:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007068:	4b3b      	ldr	r3, [pc, #236]	@ (8007158 <quality_update+0x13c>)
 800706a:	681c      	ldr	r4, [r3, #0]
 800706c:	eeb0 0a67 	vmov.f32	s0, s15
 8007070:	f00a fa6e 	bl	8011550 <sqrtf>
 8007074:	eef0 7a40 	vmov.f32	s15, s0
 8007078:	4a38      	ldr	r2, [pc, #224]	@ (800715c <quality_update+0x140>)
 800707a:	00a3      	lsls	r3, r4, #2
 800707c:	4413      	add	r3, r2
 800707e:	edc3 7a00 	vstr	s15, [r3]
	region = sphere_region(x, y, z);
 8007082:	ed97 1a03 	vldr	s2, [r7, #12]
 8007086:	edd7 0a04 	vldr	s1, [r7, #16]
 800708a:	ed97 0a05 	vldr	s0, [r7, #20]
 800708e:	f7ff fefb 	bl	8006e88 <sphere_region>
 8007092:	60b8      	str	r0, [r7, #8]
	spheredist[region]++;
 8007094:	4a32      	ldr	r2, [pc, #200]	@ (8007160 <quality_update+0x144>)
 8007096:	68bb      	ldr	r3, [r7, #8]
 8007098:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800709c:	1c5a      	adds	r2, r3, #1
 800709e:	4930      	ldr	r1, [pc, #192]	@ (8007160 <quality_update+0x144>)
 80070a0:	68bb      	ldr	r3, [r7, #8]
 80070a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	spheredata[region].x += x;
 80070a6:	492f      	ldr	r1, [pc, #188]	@ (8007164 <quality_update+0x148>)
 80070a8:	68ba      	ldr	r2, [r7, #8]
 80070aa:	4613      	mov	r3, r2
 80070ac:	005b      	lsls	r3, r3, #1
 80070ae:	4413      	add	r3, r2
 80070b0:	009b      	lsls	r3, r3, #2
 80070b2:	440b      	add	r3, r1
 80070b4:	ed93 7a00 	vldr	s14, [r3]
 80070b8:	edd7 7a05 	vldr	s15, [r7, #20]
 80070bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80070c0:	4928      	ldr	r1, [pc, #160]	@ (8007164 <quality_update+0x148>)
 80070c2:	68ba      	ldr	r2, [r7, #8]
 80070c4:	4613      	mov	r3, r2
 80070c6:	005b      	lsls	r3, r3, #1
 80070c8:	4413      	add	r3, r2
 80070ca:	009b      	lsls	r3, r3, #2
 80070cc:	440b      	add	r3, r1
 80070ce:	edc3 7a00 	vstr	s15, [r3]
	spheredata[region].y += y;
 80070d2:	4924      	ldr	r1, [pc, #144]	@ (8007164 <quality_update+0x148>)
 80070d4:	68ba      	ldr	r2, [r7, #8]
 80070d6:	4613      	mov	r3, r2
 80070d8:	005b      	lsls	r3, r3, #1
 80070da:	4413      	add	r3, r2
 80070dc:	009b      	lsls	r3, r3, #2
 80070de:	440b      	add	r3, r1
 80070e0:	3304      	adds	r3, #4
 80070e2:	ed93 7a00 	vldr	s14, [r3]
 80070e6:	edd7 7a04 	vldr	s15, [r7, #16]
 80070ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80070ee:	491d      	ldr	r1, [pc, #116]	@ (8007164 <quality_update+0x148>)
 80070f0:	68ba      	ldr	r2, [r7, #8]
 80070f2:	4613      	mov	r3, r2
 80070f4:	005b      	lsls	r3, r3, #1
 80070f6:	4413      	add	r3, r2
 80070f8:	009b      	lsls	r3, r3, #2
 80070fa:	440b      	add	r3, r1
 80070fc:	3304      	adds	r3, #4
 80070fe:	edc3 7a00 	vstr	s15, [r3]
	spheredata[region].z += z;
 8007102:	4918      	ldr	r1, [pc, #96]	@ (8007164 <quality_update+0x148>)
 8007104:	68ba      	ldr	r2, [r7, #8]
 8007106:	4613      	mov	r3, r2
 8007108:	005b      	lsls	r3, r3, #1
 800710a:	4413      	add	r3, r2
 800710c:	009b      	lsls	r3, r3, #2
 800710e:	440b      	add	r3, r1
 8007110:	3308      	adds	r3, #8
 8007112:	ed93 7a00 	vldr	s14, [r3]
 8007116:	edd7 7a03 	vldr	s15, [r7, #12]
 800711a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800711e:	4911      	ldr	r1, [pc, #68]	@ (8007164 <quality_update+0x148>)
 8007120:	68ba      	ldr	r2, [r7, #8]
 8007122:	4613      	mov	r3, r2
 8007124:	005b      	lsls	r3, r3, #1
 8007126:	4413      	add	r3, r2
 8007128:	009b      	lsls	r3, r3, #2
 800712a:	440b      	add	r3, r1
 800712c:	3308      	adds	r3, #8
 800712e:	edc3 7a00 	vstr	s15, [r3]
	count++;
 8007132:	4b09      	ldr	r3, [pc, #36]	@ (8007158 <quality_update+0x13c>)
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	3301      	adds	r3, #1
 8007138:	4a07      	ldr	r2, [pc, #28]	@ (8007158 <quality_update+0x13c>)
 800713a:	6013      	str	r3, [r2, #0]
	quality_gaps_computed = 0;
 800713c:	4b0a      	ldr	r3, [pc, #40]	@ (8007168 <quality_update+0x14c>)
 800713e:	2200      	movs	r2, #0
 8007140:	601a      	str	r2, [r3, #0]
	quality_variance_computed = 0;
 8007142:	4b0a      	ldr	r3, [pc, #40]	@ (800716c <quality_update+0x150>)
 8007144:	2200      	movs	r2, #0
 8007146:	601a      	str	r2, [r3, #0]
	quality_wobble_computed = 0;
 8007148:	4b09      	ldr	r3, [pc, #36]	@ (8007170 <quality_update+0x154>)
 800714a:	2200      	movs	r2, #0
 800714c:	601a      	str	r2, [r3, #0]
}
 800714e:	bf00      	nop
 8007150:	371c      	adds	r7, #28
 8007152:	46bd      	mov	sp, r7
 8007154:	bd90      	pop	{r4, r7, pc}
 8007156:	bf00      	nop
 8007158:	20001b40 	.word	0x20001b40
 800715c:	20002184 	.word	0x20002184
 8007160:	20001b44 	.word	0x20001b44
 8007164:	20001cd4 	.word	0x20001cd4
 8007168:	20002bb0 	.word	0x20002bb0
 800716c:	20002bb4 	.word	0x20002bb4
 8007170:	20002bb8 	.word	0x20002bb8

08007174 <quality_surface_gap_error>:


float quality_surface_gap_error(void)
{
 8007174:	b480      	push	{r7}
 8007176:	b085      	sub	sp, #20
 8007178:	af00      	add	r7, sp, #0
	float error=0.0f;
 800717a:	f04f 0300 	mov.w	r3, #0
 800717e:	60fb      	str	r3, [r7, #12]
	int i, num;

//	gap_fuc_flag = 1;
	if (quality_gaps_computed) return quality_gaps_buffer;
 8007180:	4b22      	ldr	r3, [pc, #136]	@ (800720c <quality_surface_gap_error+0x98>)
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	2b00      	cmp	r3, #0
 8007186:	d002      	beq.n	800718e <quality_surface_gap_error+0x1a>
 8007188:	4b21      	ldr	r3, [pc, #132]	@ (8007210 <quality_surface_gap_error+0x9c>)
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	e035      	b.n	80071fa <quality_surface_gap_error+0x86>
	for (i=0; i < 100; i++) {
 800718e:	2300      	movs	r3, #0
 8007190:	60bb      	str	r3, [r7, #8]
 8007192:	e02a      	b.n	80071ea <quality_surface_gap_error+0x76>
		num = spheredist[i];
 8007194:	4a1f      	ldr	r2, [pc, #124]	@ (8007214 <quality_surface_gap_error+0xa0>)
 8007196:	68bb      	ldr	r3, [r7, #8]
 8007198:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800719c:	607b      	str	r3, [r7, #4]
//		gap_fuc_spheredist = num;
		if (num == 0) {
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d108      	bne.n	80071b6 <quality_surface_gap_error+0x42>
			error += 1.0f;
 80071a4:	edd7 7a03 	vldr	s15, [r7, #12]
 80071a8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80071ac:	ee77 7a87 	vadd.f32	s15, s15, s14
 80071b0:	edc7 7a03 	vstr	s15, [r7, #12]
 80071b4:	e016      	b.n	80071e4 <quality_surface_gap_error+0x70>
		} else if (num == 1) {
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	2b01      	cmp	r3, #1
 80071ba:	d108      	bne.n	80071ce <quality_surface_gap_error+0x5a>
			error += 0.2f;
 80071bc:	edd7 7a03 	vldr	s15, [r7, #12]
 80071c0:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 8007218 <quality_surface_gap_error+0xa4>
 80071c4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80071c8:	edc7 7a03 	vstr	s15, [r7, #12]
 80071cc:	e00a      	b.n	80071e4 <quality_surface_gap_error+0x70>
		} else if (num == 2) {
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	2b02      	cmp	r3, #2
 80071d2:	d107      	bne.n	80071e4 <quality_surface_gap_error+0x70>
			error += 0.01f;
 80071d4:	edd7 7a03 	vldr	s15, [r7, #12]
 80071d8:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 800721c <quality_surface_gap_error+0xa8>
 80071dc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80071e0:	edc7 7a03 	vstr	s15, [r7, #12]
	for (i=0; i < 100; i++) {
 80071e4:	68bb      	ldr	r3, [r7, #8]
 80071e6:	3301      	adds	r3, #1
 80071e8:	60bb      	str	r3, [r7, #8]
 80071ea:	68bb      	ldr	r3, [r7, #8]
 80071ec:	2b63      	cmp	r3, #99	@ 0x63
 80071ee:	ddd1      	ble.n	8007194 <quality_surface_gap_error+0x20>
		}
	}
	quality_gaps_buffer = error;
 80071f0:	4a07      	ldr	r2, [pc, #28]	@ (8007210 <quality_surface_gap_error+0x9c>)
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	6013      	str	r3, [r2, #0]
//	quality_gaps_computed = 1;
	return quality_gaps_buffer;
 80071f6:	4b06      	ldr	r3, [pc, #24]	@ (8007210 <quality_surface_gap_error+0x9c>)
 80071f8:	681b      	ldr	r3, [r3, #0]
}
 80071fa:	ee07 3a90 	vmov	s15, r3
 80071fe:	eeb0 0a67 	vmov.f32	s0, s15
 8007202:	3714      	adds	r7, #20
 8007204:	46bd      	mov	sp, r7
 8007206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720a:	4770      	bx	lr
 800720c:	20002bb0 	.word	0x20002bb0
 8007210:	20002bac 	.word	0x20002bac
 8007214:	20001b44 	.word	0x20001b44
 8007218:	3e4ccccd 	.word	0x3e4ccccd
 800721c:	3c23d70a 	.word	0x3c23d70a

08007220 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8007220:	b480      	push	{r7}
 8007222:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8007224:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007228:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800722c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007230:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007234:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8007238:	bf00      	nop
 800723a:	46bd      	mov	sp, r7
 800723c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007240:	4770      	bx	lr

08007242 <LL_AHB2_GRP1_EnableClock>:
{
 8007242:	b480      	push	{r7}
 8007244:	b085      	sub	sp, #20
 8007246:	af00      	add	r7, sp, #0
 8007248:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800724a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800724e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007250:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	4313      	orrs	r3, r2
 8007258:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800725a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800725e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	4013      	ands	r3, r2
 8007264:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8007266:	68fb      	ldr	r3, [r7, #12]
}
 8007268:	bf00      	nop
 800726a:	3714      	adds	r7, #20
 800726c:	46bd      	mov	sp, r7
 800726e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007272:	4770      	bx	lr

08007274 <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8007274:	b480      	push	{r7}
 8007276:	b085      	sub	sp, #20
 8007278:	af00      	add	r7, sp, #0
 800727a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 800727c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007280:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007282:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	4313      	orrs	r3, r2
 800728a:	650b      	str	r3, [r1, #80]	@ 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800728c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007290:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	4013      	ands	r3, r2
 8007296:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8007298:	68fb      	ldr	r3, [r7, #12]
}
 800729a:	bf00      	nop
 800729c:	3714      	adds	r7, #20
 800729e:	46bd      	mov	sp, r7
 80072a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a4:	4770      	bx	lr

080072a6 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80072a6:	b480      	push	{r7}
 80072a8:	b085      	sub	sp, #20
 80072aa:	af00      	add	r7, sp, #0
 80072ac:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 80072ae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80072b2:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80072b4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	4313      	orrs	r3, r2
 80072bc:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80072be:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80072c2:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	4013      	ands	r3, r2
 80072c8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80072ca:	68fb      	ldr	r3, [r7, #12]
}
 80072cc:	bf00      	nop
 80072ce:	3714      	adds	r7, #20
 80072d0:	46bd      	mov	sp, r7
 80072d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d6:	4770      	bx	lr

080072d8 <HAL_MspInit>:

/* USER CODE END 0 */
/**
 * Initializes the Global MSP.
 */
void HAL_MspInit(void) {
 80072d8:	b580      	push	{r7, lr}
 80072da:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN MspInit 0 */

	/* USER CODE END MspInit 0 */

	__HAL_RCC_HSEM_CLK_ENABLE();
 80072dc:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80072e0:	f7ff ffc8 	bl	8007274 <LL_AHB3_GRP1_EnableClock>

	/* System interrupt init*/

	/* Peripheral interrupt init */
	/* HSEM_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 80072e4:	2200      	movs	r2, #0
 80072e6:	2100      	movs	r1, #0
 80072e8:	202e      	movs	r0, #46	@ 0x2e
 80072ea:	f000 fc80 	bl	8007bee <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(HSEM_IRQn);
 80072ee:	202e      	movs	r0, #46	@ 0x2e
 80072f0:	f000 fc97 	bl	8007c22 <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MspInit 1 */

	/* USER CODE END MspInit 1 */
}
 80072f4:	bf00      	nop
 80072f6:	bd80      	pop	{r7, pc}

080072f8 <HAL_I2C_MspInit>:
 * @brief I2C MSP Initialization
 * This function configures the hardware resources used in this example
 * @param hi2c: I2C handle pointer
 * @retval None
 */
void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c) {
 80072f8:	b580      	push	{r7, lr}
 80072fa:	b09c      	sub	sp, #112	@ 0x70
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8007300:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8007304:	2200      	movs	r2, #0
 8007306:	601a      	str	r2, [r3, #0]
 8007308:	605a      	str	r2, [r3, #4]
 800730a:	609a      	str	r2, [r3, #8]
 800730c:	60da      	str	r2, [r3, #12]
 800730e:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 8007310:	f107 030c 	add.w	r3, r7, #12
 8007314:	2250      	movs	r2, #80	@ 0x50
 8007316:	2100      	movs	r1, #0
 8007318:	4618      	mov	r0, r3
 800731a:	f009 f9e8 	bl	80106ee <memset>
	if (hi2c->Instance == I2C1) {
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	4a34      	ldr	r2, [pc, #208]	@ (80073f4 <HAL_I2C_MspInit+0xfc>)
 8007324:	4293      	cmp	r3, r2
 8007326:	d160      	bne.n	80073ea <HAL_I2C_MspInit+0xf2>

		/* USER CODE END I2C1_MspInit 0 */

		/** Initializes the peripherals clock
		 */
		PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8007328:	2304      	movs	r3, #4
 800732a:	60fb      	str	r3, [r7, #12]
		PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800732c:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 8007330:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 8007332:	f107 030c 	add.w	r3, r7, #12
 8007336:	4618      	mov	r0, r3
 8007338:	f004 fd4f 	bl	800bdda <HAL_RCCEx_PeriphCLKConfig>
 800733c:	4603      	mov	r3, r0
 800733e:	2b00      	cmp	r3, #0
 8007340:	d001      	beq.n	8007346 <HAL_I2C_MspInit+0x4e>
			Error_Handler();
 8007342:	f7fe fcd3 	bl	8005cec <Error_Handler>
		}

		__HAL_RCC_GPIOB_CLK_ENABLE();
 8007346:	2002      	movs	r0, #2
 8007348:	f7ff ff7b 	bl	8007242 <LL_AHB2_GRP1_EnableClock>
		/**I2C1 GPIO Configuration
		 PB8     ------> I2C1_SCL
		 PB9     ------> I2C1_SDA
		 */
		GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9;
 800734c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8007350:	65fb      	str	r3, [r7, #92]	@ 0x5c
		GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007352:	2312      	movs	r3, #18
 8007354:	663b      	str	r3, [r7, #96]	@ 0x60
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007356:	2300      	movs	r3, #0
 8007358:	667b      	str	r3, [r7, #100]	@ 0x64
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800735a:	2300      	movs	r3, #0
 800735c:	66bb      	str	r3, [r7, #104]	@ 0x68
		GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800735e:	2304      	movs	r3, #4
 8007360:	66fb      	str	r3, [r7, #108]	@ 0x6c
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007362:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8007366:	4619      	mov	r1, r3
 8007368:	4823      	ldr	r0, [pc, #140]	@ (80073f8 <HAL_I2C_MspInit+0x100>)
 800736a:	f000 ff81 	bl	8008270 <HAL_GPIO_Init>

		/* Peripheral clock enable */
		__HAL_RCC_I2C1_CLK_ENABLE();
 800736e:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8007372:	f7ff ff98 	bl	80072a6 <LL_APB1_GRP1_EnableClock>

		/* I2C1 DMA Init */
		/* I2C1_RX Init */
		hdma_i2c1_rx.Instance = DMA1_Channel7;
 8007376:	4b21      	ldr	r3, [pc, #132]	@ (80073fc <HAL_I2C_MspInit+0x104>)
 8007378:	4a21      	ldr	r2, [pc, #132]	@ (8007400 <HAL_I2C_MspInit+0x108>)
 800737a:	601a      	str	r2, [r3, #0]
		hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
 800737c:	4b1f      	ldr	r3, [pc, #124]	@ (80073fc <HAL_I2C_MspInit+0x104>)
 800737e:	220a      	movs	r2, #10
 8007380:	605a      	str	r2, [r3, #4]
		hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007382:	4b1e      	ldr	r3, [pc, #120]	@ (80073fc <HAL_I2C_MspInit+0x104>)
 8007384:	2200      	movs	r2, #0
 8007386:	609a      	str	r2, [r3, #8]
		hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007388:	4b1c      	ldr	r3, [pc, #112]	@ (80073fc <HAL_I2C_MspInit+0x104>)
 800738a:	2200      	movs	r2, #0
 800738c:	60da      	str	r2, [r3, #12]
		hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800738e:	4b1b      	ldr	r3, [pc, #108]	@ (80073fc <HAL_I2C_MspInit+0x104>)
 8007390:	2280      	movs	r2, #128	@ 0x80
 8007392:	611a      	str	r2, [r3, #16]
		hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007394:	4b19      	ldr	r3, [pc, #100]	@ (80073fc <HAL_I2C_MspInit+0x104>)
 8007396:	2200      	movs	r2, #0
 8007398:	615a      	str	r2, [r3, #20]
		hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800739a:	4b18      	ldr	r3, [pc, #96]	@ (80073fc <HAL_I2C_MspInit+0x104>)
 800739c:	2200      	movs	r2, #0
 800739e:	619a      	str	r2, [r3, #24]
		hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 80073a0:	4b16      	ldr	r3, [pc, #88]	@ (80073fc <HAL_I2C_MspInit+0x104>)
 80073a2:	2200      	movs	r2, #0
 80073a4:	61da      	str	r2, [r3, #28]
		hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80073a6:	4b15      	ldr	r3, [pc, #84]	@ (80073fc <HAL_I2C_MspInit+0x104>)
 80073a8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80073ac:	621a      	str	r2, [r3, #32]
		if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK) {
 80073ae:	4813      	ldr	r0, [pc, #76]	@ (80073fc <HAL_I2C_MspInit+0x104>)
 80073b0:	f000 fc7c 	bl	8007cac <HAL_DMA_Init>
 80073b4:	4603      	mov	r3, r0
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d001      	beq.n	80073be <HAL_I2C_MspInit+0xc6>
			Error_Handler();
 80073ba:	f7fe fc97 	bl	8005cec <Error_Handler>
		}

		__HAL_LINKDMA(hi2c, hdmarx, hdma_i2c1_rx);
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	4a0e      	ldr	r2, [pc, #56]	@ (80073fc <HAL_I2C_MspInit+0x104>)
 80073c2:	63da      	str	r2, [r3, #60]	@ 0x3c
 80073c4:	4a0d      	ldr	r2, [pc, #52]	@ (80073fc <HAL_I2C_MspInit+0x104>)
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	6293      	str	r3, [r2, #40]	@ 0x28

		/* I2C1 interrupt Init */
		HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80073ca:	2200      	movs	r2, #0
 80073cc:	2100      	movs	r1, #0
 80073ce:	201e      	movs	r0, #30
 80073d0:	f000 fc0d 	bl	8007bee <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80073d4:	201e      	movs	r0, #30
 80073d6:	f000 fc24 	bl	8007c22 <HAL_NVIC_EnableIRQ>
		HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80073da:	2200      	movs	r2, #0
 80073dc:	2100      	movs	r1, #0
 80073de:	201f      	movs	r0, #31
 80073e0:	f000 fc05 	bl	8007bee <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80073e4:	201f      	movs	r0, #31
 80073e6:	f000 fc1c 	bl	8007c22 <HAL_NVIC_EnableIRQ>

		/* USER CODE END I2C1_MspInit 1 */

	}

}
 80073ea:	bf00      	nop
 80073ec:	3770      	adds	r7, #112	@ 0x70
 80073ee:	46bd      	mov	sp, r7
 80073f0:	bd80      	pop	{r7, pc}
 80073f2:	bf00      	nop
 80073f4:	40005400 	.word	0x40005400
 80073f8:	48000400 	.word	0x48000400
 80073fc:	2000024c 	.word	0x2000024c
 8007400:	40020080 	.word	0x40020080

08007404 <HAL_IPCC_MspInit>:
 * @brief IPCC MSP Initialization
 * This function configures the hardware resources used in this example
 * @param hipcc: IPCC handle pointer
 * @retval None
 */
void HAL_IPCC_MspInit(IPCC_HandleTypeDef *hipcc) {
 8007404:	b580      	push	{r7, lr}
 8007406:	b082      	sub	sp, #8
 8007408:	af00      	add	r7, sp, #0
 800740a:	6078      	str	r0, [r7, #4]
	if (hipcc->Instance == IPCC) {
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	4a0d      	ldr	r2, [pc, #52]	@ (8007448 <HAL_IPCC_MspInit+0x44>)
 8007412:	4293      	cmp	r3, r2
 8007414:	d113      	bne.n	800743e <HAL_IPCC_MspInit+0x3a>
		/* USER CODE BEGIN IPCC_MspInit 0 */

		/* USER CODE END IPCC_MspInit 0 */
		/* Peripheral clock enable */
		__HAL_RCC_IPCC_CLK_ENABLE();
 8007416:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800741a:	f7ff ff2b 	bl	8007274 <LL_AHB3_GRP1_EnableClock>
		/* IPCC interrupt Init */
		HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 800741e:	2200      	movs	r2, #0
 8007420:	2100      	movs	r1, #0
 8007422:	202c      	movs	r0, #44	@ 0x2c
 8007424:	f000 fbe3 	bl	8007bee <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8007428:	202c      	movs	r0, #44	@ 0x2c
 800742a:	f000 fbfa 	bl	8007c22 <HAL_NVIC_EnableIRQ>
		HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 800742e:	2200      	movs	r2, #0
 8007430:	2100      	movs	r1, #0
 8007432:	202d      	movs	r0, #45	@ 0x2d
 8007434:	f000 fbdb 	bl	8007bee <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8007438:	202d      	movs	r0, #45	@ 0x2d
 800743a:	f000 fbf2 	bl	8007c22 <HAL_NVIC_EnableIRQ>

		/* USER CODE END IPCC_MspInit 1 */

	}

}
 800743e:	bf00      	nop
 8007440:	3708      	adds	r7, #8
 8007442:	46bd      	mov	sp, r7
 8007444:	bd80      	pop	{r7, pc}
 8007446:	bf00      	nop
 8007448:	58000c00 	.word	0x58000c00

0800744c <HAL_RTC_MspInit>:
 * @brief RTC MSP Initialization
 * This function configures the hardware resources used in this example
 * @param hrtc: RTC handle pointer
 * @retval None
 */
void HAL_RTC_MspInit(RTC_HandleTypeDef *hrtc) {
 800744c:	b580      	push	{r7, lr}
 800744e:	b096      	sub	sp, #88	@ 0x58
 8007450:	af00      	add	r7, sp, #0
 8007452:	6078      	str	r0, [r7, #4]
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 8007454:	f107 0308 	add.w	r3, r7, #8
 8007458:	2250      	movs	r2, #80	@ 0x50
 800745a:	2100      	movs	r1, #0
 800745c:	4618      	mov	r0, r3
 800745e:	f009 f946 	bl	80106ee <memset>
	if (hrtc->Instance == RTC) {
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	4a12      	ldr	r2, [pc, #72]	@ (80074b0 <HAL_RTC_MspInit+0x64>)
 8007468:	4293      	cmp	r3, r2
 800746a:	d11d      	bne.n	80074a8 <HAL_RTC_MspInit+0x5c>

		/* USER CODE END RTC_MspInit 0 */

		/** Initializes the peripherals clock
		 */
		PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800746c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8007470:	60bb      	str	r3, [r7, #8]
		PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8007472:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007476:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 8007478:	f107 0308 	add.w	r3, r7, #8
 800747c:	4618      	mov	r0, r3
 800747e:	f004 fcac 	bl	800bdda <HAL_RCCEx_PeriphCLKConfig>
 8007482:	4603      	mov	r3, r0
 8007484:	2b00      	cmp	r3, #0
 8007486:	d001      	beq.n	800748c <HAL_RTC_MspInit+0x40>
			Error_Handler();
 8007488:	f7fe fc30 	bl	8005cec <Error_Handler>
		}

		/* Peripheral clock enable */
		__HAL_RCC_RTC_ENABLE();
 800748c:	f7ff fec8 	bl	8007220 <LL_RCC_EnableRTC>
		__HAL_RCC_RTCAPB_CLK_ENABLE();
 8007490:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8007494:	f7ff ff07 	bl	80072a6 <LL_APB1_GRP1_EnableClock>
		/* RTC interrupt Init */
		HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8007498:	2200      	movs	r2, #0
 800749a:	2100      	movs	r1, #0
 800749c:	2003      	movs	r0, #3
 800749e:	f000 fba6 	bl	8007bee <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 80074a2:	2003      	movs	r0, #3
 80074a4:	f000 fbbd 	bl	8007c22 <HAL_NVIC_EnableIRQ>

		/* USER CODE END RTC_MspInit 1 */

	}

}
 80074a8:	bf00      	nop
 80074aa:	3758      	adds	r7, #88	@ 0x58
 80074ac:	46bd      	mov	sp, r7
 80074ae:	bd80      	pop	{r7, pc}
 80074b0:	40002800 	.word	0x40002800

080074b4 <HAL_TIM_Base_MspInit>:
 * @brief TIM_Base MSP Initialization
 * This function configures the hardware resources used in this example
 * @param htim_base: TIM_Base handle pointer
 * @retval None
 */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim_base) {
 80074b4:	b580      	push	{r7, lr}
 80074b6:	b082      	sub	sp, #8
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]
	if (htim_base->Instance == TIM2) {
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80074c4:	d102      	bne.n	80074cc <HAL_TIM_Base_MspInit+0x18>
		/* USER CODE BEGIN TIM2_MspInit 0 */

		/* USER CODE END TIM2_MspInit 0 */
		/* Peripheral clock enable */
		__HAL_RCC_TIM2_CLK_ENABLE();
 80074c6:	2001      	movs	r0, #1
 80074c8:	f7ff feed 	bl	80072a6 <LL_APB1_GRP1_EnableClock>

		/* USER CODE END TIM2_MspInit 1 */

	}

}
 80074cc:	bf00      	nop
 80074ce:	3708      	adds	r7, #8
 80074d0:	46bd      	mov	sp, r7
 80074d2:	bd80      	pop	{r7, pc}

080074d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80074d4:	b480      	push	{r7}
 80074d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 80074d8:	bf00      	nop
 80074da:	e7fd      	b.n	80074d8 <NMI_Handler+0x4>

080074dc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80074dc:	b480      	push	{r7}
 80074de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80074e0:	bf00      	nop
 80074e2:	e7fd      	b.n	80074e0 <HardFault_Handler+0x4>

080074e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80074e4:	b480      	push	{r7}
 80074e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80074e8:	bf00      	nop
 80074ea:	e7fd      	b.n	80074e8 <MemManage_Handler+0x4>

080074ec <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80074ec:	b480      	push	{r7}
 80074ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80074f0:	bf00      	nop
 80074f2:	e7fd      	b.n	80074f0 <BusFault_Handler+0x4>

080074f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80074f4:	b480      	push	{r7}
 80074f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80074f8:	bf00      	nop
 80074fa:	e7fd      	b.n	80074f8 <UsageFault_Handler+0x4>

080074fc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80074fc:	b480      	push	{r7}
 80074fe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8007500:	bf00      	nop
 8007502:	46bd      	mov	sp, r7
 8007504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007508:	4770      	bx	lr

0800750a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800750a:	b480      	push	{r7}
 800750c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800750e:	bf00      	nop
 8007510:	46bd      	mov	sp, r7
 8007512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007516:	4770      	bx	lr

08007518 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8007518:	b480      	push	{r7}
 800751a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800751c:	bf00      	nop
 800751e:	46bd      	mov	sp, r7
 8007520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007524:	4770      	bx	lr

08007526 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007526:	b580      	push	{r7, lr}
 8007528:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800752a:	f000 f9ed 	bl	8007908 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800752e:	bf00      	nop
 8007530:	bd80      	pop	{r7, pc}

08007532 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 8007532:	b580      	push	{r7, lr}
 8007534:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8007536:	f7fa f8f5 	bl	8001724 <HW_TS_RTC_Wakeup_Handler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 800753a:	bf00      	nop
 800753c:	bd80      	pop	{r7, pc}
	...

08007540 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8007540:	b580      	push	{r7, lr}
 8007542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */
  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8007544:	4802      	ldr	r0, [pc, #8]	@ (8007550 <DMA1_Channel7_IRQHandler+0x10>)
 8007546:	f000 fd33 	bl	8007fb0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 800754a:	bf00      	nop
 800754c:	bd80      	pop	{r7, pc}
 800754e:	bf00      	nop
 8007550:	2000024c 	.word	0x2000024c

08007554 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8007554:	b580      	push	{r7, lr}
 8007556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8007558:	4802      	ldr	r0, [pc, #8]	@ (8007564 <I2C1_EV_IRQHandler+0x10>)
 800755a:	f001 fae5 	bl	8008b28 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800755e:	bf00      	nop
 8007560:	bd80      	pop	{r7, pc}
 8007562:	bf00      	nop
 8007564:	200001f8 	.word	0x200001f8

08007568 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8007568:	b580      	push	{r7, lr}
 800756a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 800756c:	4802      	ldr	r0, [pc, #8]	@ (8007578 <I2C1_ER_IRQHandler+0x10>)
 800756e:	f001 faf5 	bl	8008b5c <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8007572:	bf00      	nop
 8007574:	bd80      	pop	{r7, pc}
 8007576:	bf00      	nop
 8007578:	200001f8 	.word	0x200001f8

0800757c <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 800757c:	b580      	push	{r7, lr}
 800757e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 8007580:	f008 fbb8 	bl	800fcf4 <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 8007584:	bf00      	nop
 8007586:	bd80      	pop	{r7, pc}

08007588 <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 8007588:	b580      	push	{r7, lr}
 800758a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 800758c:	f008 fbe8 	bl	800fd60 <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 8007590:	bf00      	nop
 8007592:	bd80      	pop	{r7, pc}

08007594 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8007594:	b580      	push	{r7, lr}
 8007596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8007598:	f001 f80c 	bl	80085b4 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 800759c:	bf00      	nop
 800759e:	bd80      	pop	{r7, pc}

080075a0 <DMAMUX1_OVR_IRQHandler>:

/**
  * @brief This function handles DMAMUX1 overrun interrupt.
  */
void DMAMUX1_OVR_IRQHandler(void)
{
 80075a0:	b480      	push	{r7}
 80075a2:	af00      	add	r7, sp, #0
  /* USER CODE END DMAMUX1_OVR_IRQn 0 */

  /* USER CODE BEGIN DMAMUX1_OVR_IRQn 1 */

  /* USER CODE END DMAMUX1_OVR_IRQn 1 */
}
 80075a4:	bf00      	nop
 80075a6:	46bd      	mov	sp, r7
 80075a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ac:	4770      	bx	lr

080075ae <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80075ae:	b480      	push	{r7}
 80075b0:	af00      	add	r7, sp, #0
  return 1;
 80075b2:	2301      	movs	r3, #1
}
 80075b4:	4618      	mov	r0, r3
 80075b6:	46bd      	mov	sp, r7
 80075b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075bc:	4770      	bx	lr

080075be <_kill>:

int _kill(int pid, int sig)
{
 80075be:	b580      	push	{r7, lr}
 80075c0:	b082      	sub	sp, #8
 80075c2:	af00      	add	r7, sp, #0
 80075c4:	6078      	str	r0, [r7, #4]
 80075c6:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80075c8:	f009 f8e0 	bl	801078c <__errno>
 80075cc:	4603      	mov	r3, r0
 80075ce:	2216      	movs	r2, #22
 80075d0:	601a      	str	r2, [r3, #0]
  return -1;
 80075d2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80075d6:	4618      	mov	r0, r3
 80075d8:	3708      	adds	r7, #8
 80075da:	46bd      	mov	sp, r7
 80075dc:	bd80      	pop	{r7, pc}

080075de <_exit>:

void _exit (int status)
{
 80075de:	b580      	push	{r7, lr}
 80075e0:	b082      	sub	sp, #8
 80075e2:	af00      	add	r7, sp, #0
 80075e4:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80075e6:	f04f 31ff 	mov.w	r1, #4294967295
 80075ea:	6878      	ldr	r0, [r7, #4]
 80075ec:	f7ff ffe7 	bl	80075be <_kill>
  while (1) {}    /* Make sure we hang here */
 80075f0:	bf00      	nop
 80075f2:	e7fd      	b.n	80075f0 <_exit+0x12>

080075f4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80075f4:	b580      	push	{r7, lr}
 80075f6:	b086      	sub	sp, #24
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	60f8      	str	r0, [r7, #12]
 80075fc:	60b9      	str	r1, [r7, #8]
 80075fe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007600:	2300      	movs	r3, #0
 8007602:	617b      	str	r3, [r7, #20]
 8007604:	e00a      	b.n	800761c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8007606:	f3af 8000 	nop.w
 800760a:	4601      	mov	r1, r0
 800760c:	68bb      	ldr	r3, [r7, #8]
 800760e:	1c5a      	adds	r2, r3, #1
 8007610:	60ba      	str	r2, [r7, #8]
 8007612:	b2ca      	uxtb	r2, r1
 8007614:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007616:	697b      	ldr	r3, [r7, #20]
 8007618:	3301      	adds	r3, #1
 800761a:	617b      	str	r3, [r7, #20]
 800761c:	697a      	ldr	r2, [r7, #20]
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	429a      	cmp	r2, r3
 8007622:	dbf0      	blt.n	8007606 <_read+0x12>
  }

  return len;
 8007624:	687b      	ldr	r3, [r7, #4]
}
 8007626:	4618      	mov	r0, r3
 8007628:	3718      	adds	r7, #24
 800762a:	46bd      	mov	sp, r7
 800762c:	bd80      	pop	{r7, pc}

0800762e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800762e:	b580      	push	{r7, lr}
 8007630:	b086      	sub	sp, #24
 8007632:	af00      	add	r7, sp, #0
 8007634:	60f8      	str	r0, [r7, #12]
 8007636:	60b9      	str	r1, [r7, #8]
 8007638:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800763a:	2300      	movs	r3, #0
 800763c:	617b      	str	r3, [r7, #20]
 800763e:	e009      	b.n	8007654 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8007640:	68bb      	ldr	r3, [r7, #8]
 8007642:	1c5a      	adds	r2, r3, #1
 8007644:	60ba      	str	r2, [r7, #8]
 8007646:	781b      	ldrb	r3, [r3, #0]
 8007648:	4618      	mov	r0, r3
 800764a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800764e:	697b      	ldr	r3, [r7, #20]
 8007650:	3301      	adds	r3, #1
 8007652:	617b      	str	r3, [r7, #20]
 8007654:	697a      	ldr	r2, [r7, #20]
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	429a      	cmp	r2, r3
 800765a:	dbf1      	blt.n	8007640 <_write+0x12>
  }
  return len;
 800765c:	687b      	ldr	r3, [r7, #4]
}
 800765e:	4618      	mov	r0, r3
 8007660:	3718      	adds	r7, #24
 8007662:	46bd      	mov	sp, r7
 8007664:	bd80      	pop	{r7, pc}

08007666 <_close>:

int _close(int file)
{
 8007666:	b480      	push	{r7}
 8007668:	b083      	sub	sp, #12
 800766a:	af00      	add	r7, sp, #0
 800766c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800766e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007672:	4618      	mov	r0, r3
 8007674:	370c      	adds	r7, #12
 8007676:	46bd      	mov	sp, r7
 8007678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767c:	4770      	bx	lr

0800767e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800767e:	b480      	push	{r7}
 8007680:	b083      	sub	sp, #12
 8007682:	af00      	add	r7, sp, #0
 8007684:	6078      	str	r0, [r7, #4]
 8007686:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8007688:	683b      	ldr	r3, [r7, #0]
 800768a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800768e:	605a      	str	r2, [r3, #4]
  return 0;
 8007690:	2300      	movs	r3, #0
}
 8007692:	4618      	mov	r0, r3
 8007694:	370c      	adds	r7, #12
 8007696:	46bd      	mov	sp, r7
 8007698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769c:	4770      	bx	lr

0800769e <_isatty>:

int _isatty(int file)
{
 800769e:	b480      	push	{r7}
 80076a0:	b083      	sub	sp, #12
 80076a2:	af00      	add	r7, sp, #0
 80076a4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80076a6:	2301      	movs	r3, #1
}
 80076a8:	4618      	mov	r0, r3
 80076aa:	370c      	adds	r7, #12
 80076ac:	46bd      	mov	sp, r7
 80076ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b2:	4770      	bx	lr

080076b4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80076b4:	b480      	push	{r7}
 80076b6:	b085      	sub	sp, #20
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	60f8      	str	r0, [r7, #12]
 80076bc:	60b9      	str	r1, [r7, #8]
 80076be:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80076c0:	2300      	movs	r3, #0
}
 80076c2:	4618      	mov	r0, r3
 80076c4:	3714      	adds	r7, #20
 80076c6:	46bd      	mov	sp, r7
 80076c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076cc:	4770      	bx	lr
	...

080076d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80076d0:	b580      	push	{r7, lr}
 80076d2:	b086      	sub	sp, #24
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80076d8:	4a14      	ldr	r2, [pc, #80]	@ (800772c <_sbrk+0x5c>)
 80076da:	4b15      	ldr	r3, [pc, #84]	@ (8007730 <_sbrk+0x60>)
 80076dc:	1ad3      	subs	r3, r2, r3
 80076de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80076e0:	697b      	ldr	r3, [r7, #20]
 80076e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80076e4:	4b13      	ldr	r3, [pc, #76]	@ (8007734 <_sbrk+0x64>)
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d102      	bne.n	80076f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80076ec:	4b11      	ldr	r3, [pc, #68]	@ (8007734 <_sbrk+0x64>)
 80076ee:	4a12      	ldr	r2, [pc, #72]	@ (8007738 <_sbrk+0x68>)
 80076f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80076f2:	4b10      	ldr	r3, [pc, #64]	@ (8007734 <_sbrk+0x64>)
 80076f4:	681a      	ldr	r2, [r3, #0]
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	4413      	add	r3, r2
 80076fa:	693a      	ldr	r2, [r7, #16]
 80076fc:	429a      	cmp	r2, r3
 80076fe:	d207      	bcs.n	8007710 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8007700:	f009 f844 	bl	801078c <__errno>
 8007704:	4603      	mov	r3, r0
 8007706:	220c      	movs	r2, #12
 8007708:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800770a:	f04f 33ff 	mov.w	r3, #4294967295
 800770e:	e009      	b.n	8007724 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8007710:	4b08      	ldr	r3, [pc, #32]	@ (8007734 <_sbrk+0x64>)
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8007716:	4b07      	ldr	r3, [pc, #28]	@ (8007734 <_sbrk+0x64>)
 8007718:	681a      	ldr	r2, [r3, #0]
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	4413      	add	r3, r2
 800771e:	4a05      	ldr	r2, [pc, #20]	@ (8007734 <_sbrk+0x64>)
 8007720:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8007722:	68fb      	ldr	r3, [r7, #12]
}
 8007724:	4618      	mov	r0, r3
 8007726:	3718      	adds	r7, #24
 8007728:	46bd      	mov	sp, r7
 800772a:	bd80      	pop	{r7, pc}
 800772c:	20030000 	.word	0x20030000
 8007730:	00000400 	.word	0x00000400
 8007734:	20002bbc 	.word	0x20002bbc
 8007738:	200030d0 	.word	0x200030d0

0800773c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800773c:	b480      	push	{r7}
 800773e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8007740:	4b24      	ldr	r3, [pc, #144]	@ (80077d4 <SystemInit+0x98>)
 8007742:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007746:	4a23      	ldr	r2, [pc, #140]	@ (80077d4 <SystemInit+0x98>)
 8007748:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800774c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8007750:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800775a:	f043 0301 	orr.w	r3, r3, #1
 800775e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8007760:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007764:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 8007768:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 800776a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800776e:	681a      	ldr	r2, [r3, #0]
 8007770:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007774:	4b18      	ldr	r3, [pc, #96]	@ (80077d8 <SystemInit+0x9c>)
 8007776:	4013      	ands	r3, r2
 8007778:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 800777a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800777e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007782:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007786:	f023 0305 	bic.w	r3, r3, #5
 800778a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 800778e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007792:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007796:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800779a:	f023 0301 	bic.w	r3, r3, #1
 800779e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 80077a2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80077a6:	4a0d      	ldr	r2, [pc, #52]	@ (80077dc <SystemInit+0xa0>)
 80077a8:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 80077aa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80077ae:	4a0b      	ldr	r2, [pc, #44]	@ (80077dc <SystemInit+0xa0>)
 80077b0:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80077b2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80077bc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80077c0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80077c2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80077c6:	2200      	movs	r2, #0
 80077c8:	619a      	str	r2, [r3, #24]
}
 80077ca:	bf00      	nop
 80077cc:	46bd      	mov	sp, r7
 80077ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d2:	4770      	bx	lr
 80077d4:	e000ed00 	.word	0xe000ed00
 80077d8:	faf6fefb 	.word	0xfaf6fefb
 80077dc:	22041000 	.word	0x22041000

080077e0 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 80077e0:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80077e2:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80077e4:	3304      	adds	r3, #4

080077e6 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80077e6:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80077e8:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 80077ea:	d3f9      	bcc.n	80077e0 <CopyDataInit>
  bx lr
 80077ec:	4770      	bx	lr

080077ee <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 80077ee:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 80077f0:	3004      	adds	r0, #4

080077f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 80077f2:	4288      	cmp	r0, r1
  bcc FillZerobss
 80077f4:	d3fb      	bcc.n	80077ee <FillZerobss>
  bx lr
 80077f6:	4770      	bx	lr

080077f8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80077f8:	480c      	ldr	r0, [pc, #48]	@ (800782c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80077fa:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80077fc:	f7ff ff9e 	bl	800773c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8007800:	480b      	ldr	r0, [pc, #44]	@ (8007830 <LoopForever+0x6>)
 8007802:	490c      	ldr	r1, [pc, #48]	@ (8007834 <LoopForever+0xa>)
 8007804:	4a0c      	ldr	r2, [pc, #48]	@ (8007838 <LoopForever+0xe>)
 8007806:	2300      	movs	r3, #0
 8007808:	f7ff ffed 	bl	80077e6 <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 800780c:	480b      	ldr	r0, [pc, #44]	@ (800783c <LoopForever+0x12>)
 800780e:	490c      	ldr	r1, [pc, #48]	@ (8007840 <LoopForever+0x16>)
 8007810:	4a0c      	ldr	r2, [pc, #48]	@ (8007844 <LoopForever+0x1a>)
 8007812:	2300      	movs	r3, #0
 8007814:	f7ff ffe7 	bl	80077e6 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8007818:	480b      	ldr	r0, [pc, #44]	@ (8007848 <LoopForever+0x1e>)
 800781a:	490c      	ldr	r1, [pc, #48]	@ (800784c <LoopForever+0x22>)
 800781c:	2300      	movs	r3, #0
 800781e:	f7ff ffe8 	bl	80077f2 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8007822:	f008 ffb9 	bl	8010798 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8007826:	f7fe f83f 	bl	80058a8 <main>

0800782a <LoopForever>:

LoopForever:
  b LoopForever
 800782a:	e7fe      	b.n	800782a <LoopForever>
  ldr   r0, =_estack
 800782c:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8007830:	20000008 	.word	0x20000008
 8007834:	200000e0 	.word	0x200000e0
 8007838:	08012564 	.word	0x08012564
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 800783c:	200301e4 	.word	0x200301e4
 8007840:	20030a67 	.word	0x20030a67
 8007844:	08012682 	.word	0x08012682
  INIT_BSS _sbss, _ebss
 8007848:	20000130 	.word	0x20000130
 800784c:	200030cc 	.word	0x200030cc

08007850 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8007850:	e7fe      	b.n	8007850 <ADC1_IRQHandler>
	...

08007854 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007854:	b580      	push	{r7, lr}
 8007856:	b082      	sub	sp, #8
 8007858:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800785a:	2300      	movs	r3, #0
 800785c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800785e:	4b0c      	ldr	r3, [pc, #48]	@ (8007890 <HAL_Init+0x3c>)
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	4a0b      	ldr	r2, [pc, #44]	@ (8007890 <HAL_Init+0x3c>)
 8007864:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007868:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800786a:	2003      	movs	r0, #3
 800786c:	f000 f9b4 	bl	8007bd8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8007870:	2000      	movs	r0, #0
 8007872:	f000 f80f 	bl	8007894 <HAL_InitTick>
 8007876:	4603      	mov	r3, r0
 8007878:	2b00      	cmp	r3, #0
 800787a:	d002      	beq.n	8007882 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800787c:	2301      	movs	r3, #1
 800787e:	71fb      	strb	r3, [r7, #7]
 8007880:	e001      	b.n	8007886 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8007882:	f7ff fd29 	bl	80072d8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8007886:	79fb      	ldrb	r3, [r7, #7]
}
 8007888:	4618      	mov	r0, r3
 800788a:	3708      	adds	r7, #8
 800788c:	46bd      	mov	sp, r7
 800788e:	bd80      	pop	{r7, pc}
 8007890:	58004000 	.word	0x58004000

08007894 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007894:	b580      	push	{r7, lr}
 8007896:	b084      	sub	sp, #16
 8007898:	af00      	add	r7, sp, #0
 800789a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800789c:	2300      	movs	r3, #0
 800789e:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 80078a0:	4b17      	ldr	r3, [pc, #92]	@ (8007900 <HAL_InitTick+0x6c>)
 80078a2:	781b      	ldrb	r3, [r3, #0]
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d024      	beq.n	80078f2 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80078a8:	f004 f832 	bl	800b910 <HAL_RCC_GetHCLKFreq>
 80078ac:	4602      	mov	r2, r0
 80078ae:	4b14      	ldr	r3, [pc, #80]	@ (8007900 <HAL_InitTick+0x6c>)
 80078b0:	781b      	ldrb	r3, [r3, #0]
 80078b2:	4619      	mov	r1, r3
 80078b4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80078b8:	fbb3 f3f1 	udiv	r3, r3, r1
 80078bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80078c0:	4618      	mov	r0, r3
 80078c2:	f000 f9ca 	bl	8007c5a <HAL_SYSTICK_Config>
 80078c6:	4603      	mov	r3, r0
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d10f      	bne.n	80078ec <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	2b0f      	cmp	r3, #15
 80078d0:	d809      	bhi.n	80078e6 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80078d2:	2200      	movs	r2, #0
 80078d4:	6879      	ldr	r1, [r7, #4]
 80078d6:	f04f 30ff 	mov.w	r0, #4294967295
 80078da:	f000 f988 	bl	8007bee <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80078de:	4a09      	ldr	r2, [pc, #36]	@ (8007904 <HAL_InitTick+0x70>)
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	6013      	str	r3, [r2, #0]
 80078e4:	e007      	b.n	80078f6 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 80078e6:	2301      	movs	r3, #1
 80078e8:	73fb      	strb	r3, [r7, #15]
 80078ea:	e004      	b.n	80078f6 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 80078ec:	2301      	movs	r3, #1
 80078ee:	73fb      	strb	r3, [r7, #15]
 80078f0:	e001      	b.n	80078f6 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 80078f2:	2301      	movs	r3, #1
 80078f4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80078f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80078f8:	4618      	mov	r0, r3
 80078fa:	3710      	adds	r7, #16
 80078fc:	46bd      	mov	sp, r7
 80078fe:	bd80      	pop	{r7, pc}
 8007900:	20000058 	.word	0x20000058
 8007904:	20000054 	.word	0x20000054

08007908 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007908:	b480      	push	{r7}
 800790a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800790c:	4b06      	ldr	r3, [pc, #24]	@ (8007928 <HAL_IncTick+0x20>)
 800790e:	781b      	ldrb	r3, [r3, #0]
 8007910:	461a      	mov	r2, r3
 8007912:	4b06      	ldr	r3, [pc, #24]	@ (800792c <HAL_IncTick+0x24>)
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	4413      	add	r3, r2
 8007918:	4a04      	ldr	r2, [pc, #16]	@ (800792c <HAL_IncTick+0x24>)
 800791a:	6013      	str	r3, [r2, #0]
}
 800791c:	bf00      	nop
 800791e:	46bd      	mov	sp, r7
 8007920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007924:	4770      	bx	lr
 8007926:	bf00      	nop
 8007928:	20000058 	.word	0x20000058
 800792c:	20002bc0 	.word	0x20002bc0

08007930 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007930:	b480      	push	{r7}
 8007932:	af00      	add	r7, sp, #0
  return uwTick;
 8007934:	4b03      	ldr	r3, [pc, #12]	@ (8007944 <HAL_GetTick+0x14>)
 8007936:	681b      	ldr	r3, [r3, #0]
}
 8007938:	4618      	mov	r0, r3
 800793a:	46bd      	mov	sp, r7
 800793c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007940:	4770      	bx	lr
 8007942:	bf00      	nop
 8007944:	20002bc0 	.word	0x20002bc0

08007948 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8007948:	b480      	push	{r7}
 800794a:	af00      	add	r7, sp, #0
  return uwTickPrio;
 800794c:	4b03      	ldr	r3, [pc, #12]	@ (800795c <HAL_GetTickPrio+0x14>)
 800794e:	681b      	ldr	r3, [r3, #0]
}
 8007950:	4618      	mov	r0, r3
 8007952:	46bd      	mov	sp, r7
 8007954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007958:	4770      	bx	lr
 800795a:	bf00      	nop
 800795c:	20000054 	.word	0x20000054

08007960 <HAL_GetTickFreq>:
  * @brief Return tick frequency.
  * @retval Tick frequency.
  *         Value of @ref HAL_TickFreqTypeDef.
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
 8007960:	b480      	push	{r7}
 8007962:	af00      	add	r7, sp, #0
  return uwTickFreq;
 8007964:	4b03      	ldr	r3, [pc, #12]	@ (8007974 <HAL_GetTickFreq+0x14>)
 8007966:	781b      	ldrb	r3, [r3, #0]
}
 8007968:	4618      	mov	r0, r3
 800796a:	46bd      	mov	sp, r7
 800796c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007970:	4770      	bx	lr
 8007972:	bf00      	nop
 8007974:	20000058 	.word	0x20000058

08007978 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007978:	b480      	push	{r7}
 800797a:	b085      	sub	sp, #20
 800797c:	af00      	add	r7, sp, #0
 800797e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	f003 0307 	and.w	r3, r3, #7
 8007986:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007988:	4b0c      	ldr	r3, [pc, #48]	@ (80079bc <__NVIC_SetPriorityGrouping+0x44>)
 800798a:	68db      	ldr	r3, [r3, #12]
 800798c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800798e:	68ba      	ldr	r2, [r7, #8]
 8007990:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8007994:	4013      	ands	r3, r2
 8007996:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800799c:	68bb      	ldr	r3, [r7, #8]
 800799e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80079a0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80079a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80079a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80079aa:	4a04      	ldr	r2, [pc, #16]	@ (80079bc <__NVIC_SetPriorityGrouping+0x44>)
 80079ac:	68bb      	ldr	r3, [r7, #8]
 80079ae:	60d3      	str	r3, [r2, #12]
}
 80079b0:	bf00      	nop
 80079b2:	3714      	adds	r7, #20
 80079b4:	46bd      	mov	sp, r7
 80079b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ba:	4770      	bx	lr
 80079bc:	e000ed00 	.word	0xe000ed00

080079c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80079c0:	b480      	push	{r7}
 80079c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80079c4:	4b04      	ldr	r3, [pc, #16]	@ (80079d8 <__NVIC_GetPriorityGrouping+0x18>)
 80079c6:	68db      	ldr	r3, [r3, #12]
 80079c8:	0a1b      	lsrs	r3, r3, #8
 80079ca:	f003 0307 	and.w	r3, r3, #7
}
 80079ce:	4618      	mov	r0, r3
 80079d0:	46bd      	mov	sp, r7
 80079d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d6:	4770      	bx	lr
 80079d8:	e000ed00 	.word	0xe000ed00

080079dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80079dc:	b480      	push	{r7}
 80079de:	b083      	sub	sp, #12
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	4603      	mov	r3, r0
 80079e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80079e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	db0b      	blt.n	8007a06 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80079ee:	79fb      	ldrb	r3, [r7, #7]
 80079f0:	f003 021f 	and.w	r2, r3, #31
 80079f4:	4907      	ldr	r1, [pc, #28]	@ (8007a14 <__NVIC_EnableIRQ+0x38>)
 80079f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80079fa:	095b      	lsrs	r3, r3, #5
 80079fc:	2001      	movs	r0, #1
 80079fe:	fa00 f202 	lsl.w	r2, r0, r2
 8007a02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8007a06:	bf00      	nop
 8007a08:	370c      	adds	r7, #12
 8007a0a:	46bd      	mov	sp, r7
 8007a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a10:	4770      	bx	lr
 8007a12:	bf00      	nop
 8007a14:	e000e100 	.word	0xe000e100

08007a18 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8007a18:	b480      	push	{r7}
 8007a1a:	b083      	sub	sp, #12
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	4603      	mov	r3, r0
 8007a20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007a22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	db12      	blt.n	8007a50 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007a2a:	79fb      	ldrb	r3, [r7, #7]
 8007a2c:	f003 021f 	and.w	r2, r3, #31
 8007a30:	490a      	ldr	r1, [pc, #40]	@ (8007a5c <__NVIC_DisableIRQ+0x44>)
 8007a32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007a36:	095b      	lsrs	r3, r3, #5
 8007a38:	2001      	movs	r0, #1
 8007a3a:	fa00 f202 	lsl.w	r2, r0, r2
 8007a3e:	3320      	adds	r3, #32
 8007a40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8007a44:	f3bf 8f4f 	dsb	sy
}
 8007a48:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8007a4a:	f3bf 8f6f 	isb	sy
}
 8007a4e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8007a50:	bf00      	nop
 8007a52:	370c      	adds	r7, #12
 8007a54:	46bd      	mov	sp, r7
 8007a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a5a:	4770      	bx	lr
 8007a5c:	e000e100 	.word	0xe000e100

08007a60 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8007a60:	b480      	push	{r7}
 8007a62:	b083      	sub	sp, #12
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	4603      	mov	r3, r0
 8007a68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007a6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	db0c      	blt.n	8007a8c <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007a72:	79fb      	ldrb	r3, [r7, #7]
 8007a74:	f003 021f 	and.w	r2, r3, #31
 8007a78:	4907      	ldr	r1, [pc, #28]	@ (8007a98 <__NVIC_SetPendingIRQ+0x38>)
 8007a7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007a7e:	095b      	lsrs	r3, r3, #5
 8007a80:	2001      	movs	r0, #1
 8007a82:	fa00 f202 	lsl.w	r2, r0, r2
 8007a86:	3340      	adds	r3, #64	@ 0x40
 8007a88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8007a8c:	bf00      	nop
 8007a8e:	370c      	adds	r7, #12
 8007a90:	46bd      	mov	sp, r7
 8007a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a96:	4770      	bx	lr
 8007a98:	e000e100 	.word	0xe000e100

08007a9c <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8007a9c:	b480      	push	{r7}
 8007a9e:	b083      	sub	sp, #12
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	4603      	mov	r3, r0
 8007aa4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007aa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	db0c      	blt.n	8007ac8 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007aae:	79fb      	ldrb	r3, [r7, #7]
 8007ab0:	f003 021f 	and.w	r2, r3, #31
 8007ab4:	4907      	ldr	r1, [pc, #28]	@ (8007ad4 <__NVIC_ClearPendingIRQ+0x38>)
 8007ab6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007aba:	095b      	lsrs	r3, r3, #5
 8007abc:	2001      	movs	r0, #1
 8007abe:	fa00 f202 	lsl.w	r2, r0, r2
 8007ac2:	3360      	adds	r3, #96	@ 0x60
 8007ac4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8007ac8:	bf00      	nop
 8007aca:	370c      	adds	r7, #12
 8007acc:	46bd      	mov	sp, r7
 8007ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad2:	4770      	bx	lr
 8007ad4:	e000e100 	.word	0xe000e100

08007ad8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007ad8:	b480      	push	{r7}
 8007ada:	b083      	sub	sp, #12
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	4603      	mov	r3, r0
 8007ae0:	6039      	str	r1, [r7, #0]
 8007ae2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007ae4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	db0a      	blt.n	8007b02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007aec:	683b      	ldr	r3, [r7, #0]
 8007aee:	b2da      	uxtb	r2, r3
 8007af0:	490c      	ldr	r1, [pc, #48]	@ (8007b24 <__NVIC_SetPriority+0x4c>)
 8007af2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007af6:	0112      	lsls	r2, r2, #4
 8007af8:	b2d2      	uxtb	r2, r2
 8007afa:	440b      	add	r3, r1
 8007afc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007b00:	e00a      	b.n	8007b18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007b02:	683b      	ldr	r3, [r7, #0]
 8007b04:	b2da      	uxtb	r2, r3
 8007b06:	4908      	ldr	r1, [pc, #32]	@ (8007b28 <__NVIC_SetPriority+0x50>)
 8007b08:	79fb      	ldrb	r3, [r7, #7]
 8007b0a:	f003 030f 	and.w	r3, r3, #15
 8007b0e:	3b04      	subs	r3, #4
 8007b10:	0112      	lsls	r2, r2, #4
 8007b12:	b2d2      	uxtb	r2, r2
 8007b14:	440b      	add	r3, r1
 8007b16:	761a      	strb	r2, [r3, #24]
}
 8007b18:	bf00      	nop
 8007b1a:	370c      	adds	r7, #12
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b22:	4770      	bx	lr
 8007b24:	e000e100 	.word	0xe000e100
 8007b28:	e000ed00 	.word	0xe000ed00

08007b2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007b2c:	b480      	push	{r7}
 8007b2e:	b089      	sub	sp, #36	@ 0x24
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	60f8      	str	r0, [r7, #12]
 8007b34:	60b9      	str	r1, [r7, #8]
 8007b36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	f003 0307 	and.w	r3, r3, #7
 8007b3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007b40:	69fb      	ldr	r3, [r7, #28]
 8007b42:	f1c3 0307 	rsb	r3, r3, #7
 8007b46:	2b04      	cmp	r3, #4
 8007b48:	bf28      	it	cs
 8007b4a:	2304      	movcs	r3, #4
 8007b4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007b4e:	69fb      	ldr	r3, [r7, #28]
 8007b50:	3304      	adds	r3, #4
 8007b52:	2b06      	cmp	r3, #6
 8007b54:	d902      	bls.n	8007b5c <NVIC_EncodePriority+0x30>
 8007b56:	69fb      	ldr	r3, [r7, #28]
 8007b58:	3b03      	subs	r3, #3
 8007b5a:	e000      	b.n	8007b5e <NVIC_EncodePriority+0x32>
 8007b5c:	2300      	movs	r3, #0
 8007b5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007b60:	f04f 32ff 	mov.w	r2, #4294967295
 8007b64:	69bb      	ldr	r3, [r7, #24]
 8007b66:	fa02 f303 	lsl.w	r3, r2, r3
 8007b6a:	43da      	mvns	r2, r3
 8007b6c:	68bb      	ldr	r3, [r7, #8]
 8007b6e:	401a      	ands	r2, r3
 8007b70:	697b      	ldr	r3, [r7, #20]
 8007b72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007b74:	f04f 31ff 	mov.w	r1, #4294967295
 8007b78:	697b      	ldr	r3, [r7, #20]
 8007b7a:	fa01 f303 	lsl.w	r3, r1, r3
 8007b7e:	43d9      	mvns	r1, r3
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007b84:	4313      	orrs	r3, r2
         );
}
 8007b86:	4618      	mov	r0, r3
 8007b88:	3724      	adds	r7, #36	@ 0x24
 8007b8a:	46bd      	mov	sp, r7
 8007b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b90:	4770      	bx	lr
	...

08007b94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007b94:	b580      	push	{r7, lr}
 8007b96:	b082      	sub	sp, #8
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	3b01      	subs	r3, #1
 8007ba0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007ba4:	d301      	bcc.n	8007baa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007ba6:	2301      	movs	r3, #1
 8007ba8:	e00f      	b.n	8007bca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007baa:	4a0a      	ldr	r2, [pc, #40]	@ (8007bd4 <SysTick_Config+0x40>)
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	3b01      	subs	r3, #1
 8007bb0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007bb2:	210f      	movs	r1, #15
 8007bb4:	f04f 30ff 	mov.w	r0, #4294967295
 8007bb8:	f7ff ff8e 	bl	8007ad8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007bbc:	4b05      	ldr	r3, [pc, #20]	@ (8007bd4 <SysTick_Config+0x40>)
 8007bbe:	2200      	movs	r2, #0
 8007bc0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007bc2:	4b04      	ldr	r3, [pc, #16]	@ (8007bd4 <SysTick_Config+0x40>)
 8007bc4:	2207      	movs	r2, #7
 8007bc6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007bc8:	2300      	movs	r3, #0
}
 8007bca:	4618      	mov	r0, r3
 8007bcc:	3708      	adds	r7, #8
 8007bce:	46bd      	mov	sp, r7
 8007bd0:	bd80      	pop	{r7, pc}
 8007bd2:	bf00      	nop
 8007bd4:	e000e010 	.word	0xe000e010

08007bd8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007bd8:	b580      	push	{r7, lr}
 8007bda:	b082      	sub	sp, #8
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007be0:	6878      	ldr	r0, [r7, #4]
 8007be2:	f7ff fec9 	bl	8007978 <__NVIC_SetPriorityGrouping>
}
 8007be6:	bf00      	nop
 8007be8:	3708      	adds	r7, #8
 8007bea:	46bd      	mov	sp, r7
 8007bec:	bd80      	pop	{r7, pc}

08007bee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007bee:	b580      	push	{r7, lr}
 8007bf0:	b086      	sub	sp, #24
 8007bf2:	af00      	add	r7, sp, #0
 8007bf4:	4603      	mov	r3, r0
 8007bf6:	60b9      	str	r1, [r7, #8]
 8007bf8:	607a      	str	r2, [r7, #4]
 8007bfa:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8007bfc:	f7ff fee0 	bl	80079c0 <__NVIC_GetPriorityGrouping>
 8007c00:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007c02:	687a      	ldr	r2, [r7, #4]
 8007c04:	68b9      	ldr	r1, [r7, #8]
 8007c06:	6978      	ldr	r0, [r7, #20]
 8007c08:	f7ff ff90 	bl	8007b2c <NVIC_EncodePriority>
 8007c0c:	4602      	mov	r2, r0
 8007c0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007c12:	4611      	mov	r1, r2
 8007c14:	4618      	mov	r0, r3
 8007c16:	f7ff ff5f 	bl	8007ad8 <__NVIC_SetPriority>
}
 8007c1a:	bf00      	nop
 8007c1c:	3718      	adds	r7, #24
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	bd80      	pop	{r7, pc}

08007c22 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007c22:	b580      	push	{r7, lr}
 8007c24:	b082      	sub	sp, #8
 8007c26:	af00      	add	r7, sp, #0
 8007c28:	4603      	mov	r3, r0
 8007c2a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007c2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007c30:	4618      	mov	r0, r3
 8007c32:	f7ff fed3 	bl	80079dc <__NVIC_EnableIRQ>
}
 8007c36:	bf00      	nop
 8007c38:	3708      	adds	r7, #8
 8007c3a:	46bd      	mov	sp, r7
 8007c3c:	bd80      	pop	{r7, pc}

08007c3e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8007c3e:	b580      	push	{r7, lr}
 8007c40:	b082      	sub	sp, #8
 8007c42:	af00      	add	r7, sp, #0
 8007c44:	4603      	mov	r3, r0
 8007c46:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8007c48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007c4c:	4618      	mov	r0, r3
 8007c4e:	f7ff fee3 	bl	8007a18 <__NVIC_DisableIRQ>
}
 8007c52:	bf00      	nop
 8007c54:	3708      	adds	r7, #8
 8007c56:	46bd      	mov	sp, r7
 8007c58:	bd80      	pop	{r7, pc}

08007c5a <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007c5a:	b580      	push	{r7, lr}
 8007c5c:	b082      	sub	sp, #8
 8007c5e:	af00      	add	r7, sp, #0
 8007c60:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8007c62:	6878      	ldr	r0, [r7, #4]
 8007c64:	f7ff ff96 	bl	8007b94 <SysTick_Config>
 8007c68:	4603      	mov	r3, r0
}
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	3708      	adds	r7, #8
 8007c6e:	46bd      	mov	sp, r7
 8007c70:	bd80      	pop	{r7, pc}

08007c72 <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8007c72:	b580      	push	{r7, lr}
 8007c74:	b082      	sub	sp, #8
 8007c76:	af00      	add	r7, sp, #0
 8007c78:	4603      	mov	r3, r0
 8007c7a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8007c7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007c80:	4618      	mov	r0, r3
 8007c82:	f7ff feed 	bl	8007a60 <__NVIC_SetPendingIRQ>
}
 8007c86:	bf00      	nop
 8007c88:	3708      	adds	r7, #8
 8007c8a:	46bd      	mov	sp, r7
 8007c8c:	bd80      	pop	{r7, pc}

08007c8e <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8007c8e:	b580      	push	{r7, lr}
 8007c90:	b082      	sub	sp, #8
 8007c92:	af00      	add	r7, sp, #0
 8007c94:	4603      	mov	r3, r0
 8007c96:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8007c98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007c9c:	4618      	mov	r0, r3
 8007c9e:	f7ff fefd 	bl	8007a9c <__NVIC_ClearPendingIRQ>
}
 8007ca2:	bf00      	nop
 8007ca4:	3708      	adds	r7, #8
 8007ca6:	46bd      	mov	sp, r7
 8007ca8:	bd80      	pop	{r7, pc}
	...

08007cac <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007cac:	b580      	push	{r7, lr}
 8007cae:	b084      	sub	sp, #16
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d101      	bne.n	8007cbe <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8007cba:	2301      	movs	r3, #1
 8007cbc:	e08e      	b.n	8007ddc <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	461a      	mov	r2, r3
 8007cc4:	4b47      	ldr	r3, [pc, #284]	@ (8007de4 <HAL_DMA_Init+0x138>)
 8007cc6:	429a      	cmp	r2, r3
 8007cc8:	d80f      	bhi.n	8007cea <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	461a      	mov	r2, r3
 8007cd0:	4b45      	ldr	r3, [pc, #276]	@ (8007de8 <HAL_DMA_Init+0x13c>)
 8007cd2:	4413      	add	r3, r2
 8007cd4:	4a45      	ldr	r2, [pc, #276]	@ (8007dec <HAL_DMA_Init+0x140>)
 8007cd6:	fba2 2303 	umull	r2, r3, r2, r3
 8007cda:	091b      	lsrs	r3, r3, #4
 8007cdc:	009a      	lsls	r2, r3, #2
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	4a42      	ldr	r2, [pc, #264]	@ (8007df0 <HAL_DMA_Init+0x144>)
 8007ce6:	641a      	str	r2, [r3, #64]	@ 0x40
 8007ce8:	e00e      	b.n	8007d08 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	461a      	mov	r2, r3
 8007cf0:	4b40      	ldr	r3, [pc, #256]	@ (8007df4 <HAL_DMA_Init+0x148>)
 8007cf2:	4413      	add	r3, r2
 8007cf4:	4a3d      	ldr	r2, [pc, #244]	@ (8007dec <HAL_DMA_Init+0x140>)
 8007cf6:	fba2 2303 	umull	r2, r3, r2, r3
 8007cfa:	091b      	lsrs	r3, r3, #4
 8007cfc:	009a      	lsls	r2, r3, #2
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	4a3c      	ldr	r2, [pc, #240]	@ (8007df8 <HAL_DMA_Init+0x14c>)
 8007d06:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	2202      	movs	r2, #2
 8007d0c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8007d1e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007d22:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8007d2c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	691b      	ldr	r3, [r3, #16]
 8007d32:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007d38:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	699b      	ldr	r3, [r3, #24]
 8007d3e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007d44:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	6a1b      	ldr	r3, [r3, #32]
 8007d4a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8007d4c:	68fa      	ldr	r2, [r7, #12]
 8007d4e:	4313      	orrs	r3, r2
 8007d50:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	68fa      	ldr	r2, [r7, #12]
 8007d58:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8007d5a:	6878      	ldr	r0, [r7, #4]
 8007d5c:	f000 fa24 	bl	80081a8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	689b      	ldr	r3, [r3, #8]
 8007d64:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007d68:	d102      	bne.n	8007d70 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	2200      	movs	r2, #0
 8007d6e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	685a      	ldr	r2, [r3, #4]
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007d78:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8007d7c:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007d82:	687a      	ldr	r2, [r7, #4]
 8007d84:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8007d86:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	685b      	ldr	r3, [r3, #4]
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d010      	beq.n	8007db2 <HAL_DMA_Init+0x106>
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	685b      	ldr	r3, [r3, #4]
 8007d94:	2b04      	cmp	r3, #4
 8007d96:	d80c      	bhi.n	8007db2 <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8007d98:	6878      	ldr	r0, [r7, #4]
 8007d9a:	f000 fa43 	bl	8008224 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007da2:	2200      	movs	r2, #0
 8007da4:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007daa:	687a      	ldr	r2, [r7, #4]
 8007dac:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8007dae:	605a      	str	r2, [r3, #4]
 8007db0:	e008      	b.n	8007dc4 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	2200      	movs	r2, #0
 8007db6:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	2200      	movs	r2, #0
 8007dbc:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	2200      	movs	r2, #0
 8007dc2:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	2200      	movs	r2, #0
 8007dc8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	2201      	movs	r2, #1
 8007dce:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	2200      	movs	r2, #0
 8007dd6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8007dda:	2300      	movs	r3, #0
}
 8007ddc:	4618      	mov	r0, r3
 8007dde:	3710      	adds	r7, #16
 8007de0:	46bd      	mov	sp, r7
 8007de2:	bd80      	pop	{r7, pc}
 8007de4:	40020407 	.word	0x40020407
 8007de8:	bffdfff8 	.word	0xbffdfff8
 8007dec:	cccccccd 	.word	0xcccccccd
 8007df0:	40020000 	.word	0x40020000
 8007df4:	bffdfbf8 	.word	0xbffdfbf8
 8007df8:	40020400 	.word	0x40020400

08007dfc <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8007dfc:	b580      	push	{r7, lr}
 8007dfe:	b086      	sub	sp, #24
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	60f8      	str	r0, [r7, #12]
 8007e04:	60b9      	str	r1, [r7, #8]
 8007e06:	607a      	str	r2, [r7, #4]
 8007e08:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007e0a:	2300      	movs	r3, #0
 8007e0c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8007e14:	2b01      	cmp	r3, #1
 8007e16:	d101      	bne.n	8007e1c <HAL_DMA_Start_IT+0x20>
 8007e18:	2302      	movs	r3, #2
 8007e1a:	e066      	b.n	8007eea <HAL_DMA_Start_IT+0xee>
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	2201      	movs	r2, #1
 8007e20:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8007e2a:	b2db      	uxtb	r3, r3
 8007e2c:	2b01      	cmp	r3, #1
 8007e2e:	d155      	bne.n	8007edc <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	2202      	movs	r2, #2
 8007e34:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	2200      	movs	r2, #0
 8007e3c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	681a      	ldr	r2, [r3, #0]
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	f022 0201 	bic.w	r2, r2, #1
 8007e4c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007e4e:	683b      	ldr	r3, [r7, #0]
 8007e50:	687a      	ldr	r2, [r7, #4]
 8007e52:	68b9      	ldr	r1, [r7, #8]
 8007e54:	68f8      	ldr	r0, [r7, #12]
 8007e56:	f000 f968 	bl	800812a <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d008      	beq.n	8007e74 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	681a      	ldr	r2, [r3, #0]
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	f042 020e 	orr.w	r2, r2, #14
 8007e70:	601a      	str	r2, [r3, #0]
 8007e72:	e00f      	b.n	8007e94 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	681a      	ldr	r2, [r3, #0]
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	f022 0204 	bic.w	r2, r2, #4
 8007e82:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	681a      	ldr	r2, [r3, #0]
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	f042 020a 	orr.w	r2, r2, #10
 8007e92:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d007      	beq.n	8007eb2 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007ea6:	681a      	ldr	r2, [r3, #0]
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007eac:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007eb0:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d007      	beq.n	8007eca <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ebe:	681a      	ldr	r2, [r3, #0]
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ec4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007ec8:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	681a      	ldr	r2, [r3, #0]
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	f042 0201 	orr.w	r2, r2, #1
 8007ed8:	601a      	str	r2, [r3, #0]
 8007eda:	e005      	b.n	8007ee8 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	2200      	movs	r2, #0
 8007ee0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8007ee4:	2302      	movs	r3, #2
 8007ee6:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8007ee8:	7dfb      	ldrb	r3, [r7, #23]
}
 8007eea:	4618      	mov	r0, r3
 8007eec:	3718      	adds	r7, #24
 8007eee:	46bd      	mov	sp, r7
 8007ef0:	bd80      	pop	{r7, pc}

08007ef2 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007ef2:	b580      	push	{r7, lr}
 8007ef4:	b084      	sub	sp, #16
 8007ef6:	af00      	add	r7, sp, #0
 8007ef8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007efa:	2300      	movs	r3, #0
 8007efc:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8007f04:	b2db      	uxtb	r3, r3
 8007f06:	2b02      	cmp	r3, #2
 8007f08:	d005      	beq.n	8007f16 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	2204      	movs	r2, #4
 8007f0e:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8007f10:	2301      	movs	r3, #1
 8007f12:	73fb      	strb	r3, [r7, #15]
 8007f14:	e047      	b.n	8007fa6 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	681a      	ldr	r2, [r3, #0]
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	f022 020e 	bic.w	r2, r2, #14
 8007f24:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	681a      	ldr	r2, [r3, #0]
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	f022 0201 	bic.w	r2, r2, #1
 8007f34:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007f3a:	681a      	ldr	r2, [r3, #0]
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007f40:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007f44:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007f4a:	f003 021c 	and.w	r2, r3, #28
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f52:	2101      	movs	r1, #1
 8007f54:	fa01 f202 	lsl.w	r2, r1, r2
 8007f58:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007f5e:	687a      	ldr	r2, [r7, #4]
 8007f60:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8007f62:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d00c      	beq.n	8007f86 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f70:	681a      	ldr	r2, [r3, #0]
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f76:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007f7a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007f80:	687a      	ldr	r2, [r7, #4]
 8007f82:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8007f84:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	2201      	movs	r2, #1
 8007f8a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	2200      	movs	r2, #0
 8007f92:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d003      	beq.n	8007fa6 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007fa2:	6878      	ldr	r0, [r7, #4]
 8007fa4:	4798      	blx	r3
    }
  }
  return status;
 8007fa6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fa8:	4618      	mov	r0, r3
 8007faa:	3710      	adds	r7, #16
 8007fac:	46bd      	mov	sp, r7
 8007fae:	bd80      	pop	{r7, pc}

08007fb0 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007fb0:	b580      	push	{r7, lr}
 8007fb2:	b084      	sub	sp, #16
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007fcc:	f003 031c 	and.w	r3, r3, #28
 8007fd0:	2204      	movs	r2, #4
 8007fd2:	409a      	lsls	r2, r3
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	4013      	ands	r3, r2
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d026      	beq.n	800802a <HAL_DMA_IRQHandler+0x7a>
 8007fdc:	68bb      	ldr	r3, [r7, #8]
 8007fde:	f003 0304 	and.w	r3, r3, #4
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d021      	beq.n	800802a <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	f003 0320 	and.w	r3, r3, #32
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d107      	bne.n	8008004 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	681a      	ldr	r2, [r3, #0]
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	f022 0204 	bic.w	r2, r2, #4
 8008002:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008008:	f003 021c 	and.w	r2, r3, #28
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008010:	2104      	movs	r1, #4
 8008012:	fa01 f202 	lsl.w	r2, r1, r2
 8008016:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800801c:	2b00      	cmp	r3, #0
 800801e:	d071      	beq.n	8008104 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008024:	6878      	ldr	r0, [r7, #4]
 8008026:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8008028:	e06c      	b.n	8008104 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800802e:	f003 031c 	and.w	r3, r3, #28
 8008032:	2202      	movs	r2, #2
 8008034:	409a      	lsls	r2, r3
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	4013      	ands	r3, r2
 800803a:	2b00      	cmp	r3, #0
 800803c:	d02e      	beq.n	800809c <HAL_DMA_IRQHandler+0xec>
 800803e:	68bb      	ldr	r3, [r7, #8]
 8008040:	f003 0302 	and.w	r3, r3, #2
 8008044:	2b00      	cmp	r3, #0
 8008046:	d029      	beq.n	800809c <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	f003 0320 	and.w	r3, r3, #32
 8008052:	2b00      	cmp	r3, #0
 8008054:	d10b      	bne.n	800806e <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	681a      	ldr	r2, [r3, #0]
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	f022 020a 	bic.w	r2, r2, #10
 8008064:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	2201      	movs	r2, #1
 800806a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008072:	f003 021c 	and.w	r2, r3, #28
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800807a:	2102      	movs	r1, #2
 800807c:	fa01 f202 	lsl.w	r2, r1, r2
 8008080:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	2200      	movs	r2, #0
 8008086:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800808e:	2b00      	cmp	r3, #0
 8008090:	d038      	beq.n	8008104 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008096:	6878      	ldr	r0, [r7, #4]
 8008098:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800809a:	e033      	b.n	8008104 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80080a0:	f003 031c 	and.w	r3, r3, #28
 80080a4:	2208      	movs	r2, #8
 80080a6:	409a      	lsls	r2, r3
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	4013      	ands	r3, r2
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d02a      	beq.n	8008106 <HAL_DMA_IRQHandler+0x156>
 80080b0:	68bb      	ldr	r3, [r7, #8]
 80080b2:	f003 0308 	and.w	r3, r3, #8
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d025      	beq.n	8008106 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	681a      	ldr	r2, [r3, #0]
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	f022 020e 	bic.w	r2, r2, #14
 80080c8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80080ce:	f003 021c 	and.w	r2, r3, #28
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80080d6:	2101      	movs	r1, #1
 80080d8:	fa01 f202 	lsl.w	r2, r1, r2
 80080dc:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	2201      	movs	r2, #1
 80080e2:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	2201      	movs	r2, #1
 80080e8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	2200      	movs	r2, #0
 80080f0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d004      	beq.n	8008106 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008100:	6878      	ldr	r0, [r7, #4]
 8008102:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8008104:	bf00      	nop
 8008106:	bf00      	nop
}
 8008108:	3710      	adds	r7, #16
 800810a:	46bd      	mov	sp, r7
 800810c:	bd80      	pop	{r7, pc}

0800810e <HAL_DMA_GetState>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800810e:	b480      	push	{r7}
 8008110:	b083      	sub	sp, #12
 8008112:	af00      	add	r7, sp, #0
 8008114:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800811c:	b2db      	uxtb	r3, r3
}
 800811e:	4618      	mov	r0, r3
 8008120:	370c      	adds	r7, #12
 8008122:	46bd      	mov	sp, r7
 8008124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008128:	4770      	bx	lr

0800812a <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800812a:	b480      	push	{r7}
 800812c:	b085      	sub	sp, #20
 800812e:	af00      	add	r7, sp, #0
 8008130:	60f8      	str	r0, [r7, #12]
 8008132:	60b9      	str	r1, [r7, #8]
 8008134:	607a      	str	r2, [r7, #4]
 8008136:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800813c:	68fa      	ldr	r2, [r7, #12]
 800813e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8008140:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008146:	2b00      	cmp	r3, #0
 8008148:	d004      	beq.n	8008154 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800814e:	68fa      	ldr	r2, [r7, #12]
 8008150:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8008152:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008158:	f003 021c 	and.w	r2, r3, #28
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008160:	2101      	movs	r1, #1
 8008162:	fa01 f202 	lsl.w	r2, r1, r2
 8008166:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	683a      	ldr	r2, [r7, #0]
 800816e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	689b      	ldr	r3, [r3, #8]
 8008174:	2b10      	cmp	r3, #16
 8008176:	d108      	bne.n	800818a <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	687a      	ldr	r2, [r7, #4]
 800817e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	68ba      	ldr	r2, [r7, #8]
 8008186:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8008188:	e007      	b.n	800819a <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	68ba      	ldr	r2, [r7, #8]
 8008190:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	687a      	ldr	r2, [r7, #4]
 8008198:	60da      	str	r2, [r3, #12]
}
 800819a:	bf00      	nop
 800819c:	3714      	adds	r7, #20
 800819e:	46bd      	mov	sp, r7
 80081a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a4:	4770      	bx	lr
	...

080081a8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80081a8:	b480      	push	{r7}
 80081aa:	b085      	sub	sp, #20
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	461a      	mov	r2, r3
 80081b6:	4b17      	ldr	r3, [pc, #92]	@ (8008214 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80081b8:	429a      	cmp	r2, r3
 80081ba:	d80a      	bhi.n	80081d2 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80081c0:	089b      	lsrs	r3, r3, #2
 80081c2:	009b      	lsls	r3, r3, #2
 80081c4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80081c8:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 80081cc:	687a      	ldr	r2, [r7, #4]
 80081ce:	6493      	str	r3, [r2, #72]	@ 0x48
 80081d0:	e007      	b.n	80081e2 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80081d6:	089b      	lsrs	r3, r3, #2
 80081d8:	009a      	lsls	r2, r3, #2
 80081da:	4b0f      	ldr	r3, [pc, #60]	@ (8008218 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80081dc:	4413      	add	r3, r2
 80081de:	687a      	ldr	r2, [r7, #4]
 80081e0:	6493      	str	r3, [r2, #72]	@ 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif /* DMA2 */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	b2db      	uxtb	r3, r3
 80081e8:	3b08      	subs	r3, #8
 80081ea:	4a0c      	ldr	r2, [pc, #48]	@ (800821c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80081ec:	fba2 2303 	umull	r2, r3, r2, r3
 80081f0:	091b      	lsrs	r3, r3, #4
 80081f2:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	4a0a      	ldr	r2, [pc, #40]	@ (8008220 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80081f8:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	f003 031f 	and.w	r3, r3, #31
 8008200:	2201      	movs	r2, #1
 8008202:	409a      	lsls	r2, r3
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8008208:	bf00      	nop
 800820a:	3714      	adds	r7, #20
 800820c:	46bd      	mov	sp, r7
 800820e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008212:	4770      	bx	lr
 8008214:	40020407 	.word	0x40020407
 8008218:	4002081c 	.word	0x4002081c
 800821c:	cccccccd 	.word	0xcccccccd
 8008220:	40020880 	.word	0x40020880

08008224 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008224:	b480      	push	{r7}
 8008226:	b085      	sub	sp, #20
 8008228:	af00      	add	r7, sp, #0
 800822a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	685b      	ldr	r3, [r3, #4]
 8008230:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008234:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8008236:	68fa      	ldr	r2, [r7, #12]
 8008238:	4b0b      	ldr	r3, [pc, #44]	@ (8008268 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800823a:	4413      	add	r3, r2
 800823c:	009b      	lsls	r3, r3, #2
 800823e:	461a      	mov	r2, r3
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	4a09      	ldr	r2, [pc, #36]	@ (800826c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 8008248:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	3b01      	subs	r3, #1
 800824e:	f003 0303 	and.w	r3, r3, #3
 8008252:	2201      	movs	r2, #1
 8008254:	409a      	lsls	r2, r3
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 800825a:	bf00      	nop
 800825c:	3714      	adds	r7, #20
 800825e:	46bd      	mov	sp, r7
 8008260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008264:	4770      	bx	lr
 8008266:	bf00      	nop
 8008268:	1000823f 	.word	0x1000823f
 800826c:	40020940 	.word	0x40020940

08008270 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008270:	b480      	push	{r7}
 8008272:	b087      	sub	sp, #28
 8008274:	af00      	add	r7, sp, #0
 8008276:	6078      	str	r0, [r7, #4]
 8008278:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800827a:	2300      	movs	r3, #0
 800827c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800827e:	e14c      	b.n	800851a <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8008280:	683b      	ldr	r3, [r7, #0]
 8008282:	681a      	ldr	r2, [r3, #0]
 8008284:	2101      	movs	r1, #1
 8008286:	697b      	ldr	r3, [r7, #20]
 8008288:	fa01 f303 	lsl.w	r3, r1, r3
 800828c:	4013      	ands	r3, r2
 800828e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	2b00      	cmp	r3, #0
 8008294:	f000 813e 	beq.w	8008514 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008298:	683b      	ldr	r3, [r7, #0]
 800829a:	685b      	ldr	r3, [r3, #4]
 800829c:	f003 0303 	and.w	r3, r3, #3
 80082a0:	2b01      	cmp	r3, #1
 80082a2:	d005      	beq.n	80082b0 <HAL_GPIO_Init+0x40>
 80082a4:	683b      	ldr	r3, [r7, #0]
 80082a6:	685b      	ldr	r3, [r3, #4]
 80082a8:	f003 0303 	and.w	r3, r3, #3
 80082ac:	2b02      	cmp	r3, #2
 80082ae:	d130      	bne.n	8008312 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	689b      	ldr	r3, [r3, #8]
 80082b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80082b6:	697b      	ldr	r3, [r7, #20]
 80082b8:	005b      	lsls	r3, r3, #1
 80082ba:	2203      	movs	r2, #3
 80082bc:	fa02 f303 	lsl.w	r3, r2, r3
 80082c0:	43db      	mvns	r3, r3
 80082c2:	693a      	ldr	r2, [r7, #16]
 80082c4:	4013      	ands	r3, r2
 80082c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80082c8:	683b      	ldr	r3, [r7, #0]
 80082ca:	68da      	ldr	r2, [r3, #12]
 80082cc:	697b      	ldr	r3, [r7, #20]
 80082ce:	005b      	lsls	r3, r3, #1
 80082d0:	fa02 f303 	lsl.w	r3, r2, r3
 80082d4:	693a      	ldr	r2, [r7, #16]
 80082d6:	4313      	orrs	r3, r2
 80082d8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	693a      	ldr	r2, [r7, #16]
 80082de:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	685b      	ldr	r3, [r3, #4]
 80082e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80082e6:	2201      	movs	r2, #1
 80082e8:	697b      	ldr	r3, [r7, #20]
 80082ea:	fa02 f303 	lsl.w	r3, r2, r3
 80082ee:	43db      	mvns	r3, r3
 80082f0:	693a      	ldr	r2, [r7, #16]
 80082f2:	4013      	ands	r3, r2
 80082f4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80082f6:	683b      	ldr	r3, [r7, #0]
 80082f8:	685b      	ldr	r3, [r3, #4]
 80082fa:	091b      	lsrs	r3, r3, #4
 80082fc:	f003 0201 	and.w	r2, r3, #1
 8008300:	697b      	ldr	r3, [r7, #20]
 8008302:	fa02 f303 	lsl.w	r3, r2, r3
 8008306:	693a      	ldr	r2, [r7, #16]
 8008308:	4313      	orrs	r3, r2
 800830a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	693a      	ldr	r2, [r7, #16]
 8008310:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008312:	683b      	ldr	r3, [r7, #0]
 8008314:	685b      	ldr	r3, [r3, #4]
 8008316:	f003 0303 	and.w	r3, r3, #3
 800831a:	2b03      	cmp	r3, #3
 800831c:	d017      	beq.n	800834e <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	68db      	ldr	r3, [r3, #12]
 8008322:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008324:	697b      	ldr	r3, [r7, #20]
 8008326:	005b      	lsls	r3, r3, #1
 8008328:	2203      	movs	r2, #3
 800832a:	fa02 f303 	lsl.w	r3, r2, r3
 800832e:	43db      	mvns	r3, r3
 8008330:	693a      	ldr	r2, [r7, #16]
 8008332:	4013      	ands	r3, r2
 8008334:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008336:	683b      	ldr	r3, [r7, #0]
 8008338:	689a      	ldr	r2, [r3, #8]
 800833a:	697b      	ldr	r3, [r7, #20]
 800833c:	005b      	lsls	r3, r3, #1
 800833e:	fa02 f303 	lsl.w	r3, r2, r3
 8008342:	693a      	ldr	r2, [r7, #16]
 8008344:	4313      	orrs	r3, r2
 8008346:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	693a      	ldr	r2, [r7, #16]
 800834c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800834e:	683b      	ldr	r3, [r7, #0]
 8008350:	685b      	ldr	r3, [r3, #4]
 8008352:	f003 0303 	and.w	r3, r3, #3
 8008356:	2b02      	cmp	r3, #2
 8008358:	d123      	bne.n	80083a2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800835a:	697b      	ldr	r3, [r7, #20]
 800835c:	08da      	lsrs	r2, r3, #3
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	3208      	adds	r2, #8
 8008362:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008366:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8008368:	697b      	ldr	r3, [r7, #20]
 800836a:	f003 0307 	and.w	r3, r3, #7
 800836e:	009b      	lsls	r3, r3, #2
 8008370:	220f      	movs	r2, #15
 8008372:	fa02 f303 	lsl.w	r3, r2, r3
 8008376:	43db      	mvns	r3, r3
 8008378:	693a      	ldr	r2, [r7, #16]
 800837a:	4013      	ands	r3, r2
 800837c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800837e:	683b      	ldr	r3, [r7, #0]
 8008380:	691a      	ldr	r2, [r3, #16]
 8008382:	697b      	ldr	r3, [r7, #20]
 8008384:	f003 0307 	and.w	r3, r3, #7
 8008388:	009b      	lsls	r3, r3, #2
 800838a:	fa02 f303 	lsl.w	r3, r2, r3
 800838e:	693a      	ldr	r2, [r7, #16]
 8008390:	4313      	orrs	r3, r2
 8008392:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8008394:	697b      	ldr	r3, [r7, #20]
 8008396:	08da      	lsrs	r2, r3, #3
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	3208      	adds	r2, #8
 800839c:	6939      	ldr	r1, [r7, #16]
 800839e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80083a8:	697b      	ldr	r3, [r7, #20]
 80083aa:	005b      	lsls	r3, r3, #1
 80083ac:	2203      	movs	r2, #3
 80083ae:	fa02 f303 	lsl.w	r3, r2, r3
 80083b2:	43db      	mvns	r3, r3
 80083b4:	693a      	ldr	r2, [r7, #16]
 80083b6:	4013      	ands	r3, r2
 80083b8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80083ba:	683b      	ldr	r3, [r7, #0]
 80083bc:	685b      	ldr	r3, [r3, #4]
 80083be:	f003 0203 	and.w	r2, r3, #3
 80083c2:	697b      	ldr	r3, [r7, #20]
 80083c4:	005b      	lsls	r3, r3, #1
 80083c6:	fa02 f303 	lsl.w	r3, r2, r3
 80083ca:	693a      	ldr	r2, [r7, #16]
 80083cc:	4313      	orrs	r3, r2
 80083ce:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	693a      	ldr	r2, [r7, #16]
 80083d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80083d6:	683b      	ldr	r3, [r7, #0]
 80083d8:	685b      	ldr	r3, [r3, #4]
 80083da:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80083de:	2b00      	cmp	r3, #0
 80083e0:	f000 8098 	beq.w	8008514 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80083e4:	4a54      	ldr	r2, [pc, #336]	@ (8008538 <HAL_GPIO_Init+0x2c8>)
 80083e6:	697b      	ldr	r3, [r7, #20]
 80083e8:	089b      	lsrs	r3, r3, #2
 80083ea:	3302      	adds	r3, #2
 80083ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80083f0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80083f2:	697b      	ldr	r3, [r7, #20]
 80083f4:	f003 0303 	and.w	r3, r3, #3
 80083f8:	009b      	lsls	r3, r3, #2
 80083fa:	220f      	movs	r2, #15
 80083fc:	fa02 f303 	lsl.w	r3, r2, r3
 8008400:	43db      	mvns	r3, r3
 8008402:	693a      	ldr	r2, [r7, #16]
 8008404:	4013      	ands	r3, r2
 8008406:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800840e:	d019      	beq.n	8008444 <HAL_GPIO_Init+0x1d4>
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	4a4a      	ldr	r2, [pc, #296]	@ (800853c <HAL_GPIO_Init+0x2cc>)
 8008414:	4293      	cmp	r3, r2
 8008416:	d013      	beq.n	8008440 <HAL_GPIO_Init+0x1d0>
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	4a49      	ldr	r2, [pc, #292]	@ (8008540 <HAL_GPIO_Init+0x2d0>)
 800841c:	4293      	cmp	r3, r2
 800841e:	d00d      	beq.n	800843c <HAL_GPIO_Init+0x1cc>
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	4a48      	ldr	r2, [pc, #288]	@ (8008544 <HAL_GPIO_Init+0x2d4>)
 8008424:	4293      	cmp	r3, r2
 8008426:	d007      	beq.n	8008438 <HAL_GPIO_Init+0x1c8>
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	4a47      	ldr	r2, [pc, #284]	@ (8008548 <HAL_GPIO_Init+0x2d8>)
 800842c:	4293      	cmp	r3, r2
 800842e:	d101      	bne.n	8008434 <HAL_GPIO_Init+0x1c4>
 8008430:	2304      	movs	r3, #4
 8008432:	e008      	b.n	8008446 <HAL_GPIO_Init+0x1d6>
 8008434:	2307      	movs	r3, #7
 8008436:	e006      	b.n	8008446 <HAL_GPIO_Init+0x1d6>
 8008438:	2303      	movs	r3, #3
 800843a:	e004      	b.n	8008446 <HAL_GPIO_Init+0x1d6>
 800843c:	2302      	movs	r3, #2
 800843e:	e002      	b.n	8008446 <HAL_GPIO_Init+0x1d6>
 8008440:	2301      	movs	r3, #1
 8008442:	e000      	b.n	8008446 <HAL_GPIO_Init+0x1d6>
 8008444:	2300      	movs	r3, #0
 8008446:	697a      	ldr	r2, [r7, #20]
 8008448:	f002 0203 	and.w	r2, r2, #3
 800844c:	0092      	lsls	r2, r2, #2
 800844e:	4093      	lsls	r3, r2
 8008450:	693a      	ldr	r2, [r7, #16]
 8008452:	4313      	orrs	r3, r2
 8008454:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8008456:	4938      	ldr	r1, [pc, #224]	@ (8008538 <HAL_GPIO_Init+0x2c8>)
 8008458:	697b      	ldr	r3, [r7, #20]
 800845a:	089b      	lsrs	r3, r3, #2
 800845c:	3302      	adds	r3, #2
 800845e:	693a      	ldr	r2, [r7, #16]
 8008460:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008464:	4b39      	ldr	r3, [pc, #228]	@ (800854c <HAL_GPIO_Init+0x2dc>)
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	43db      	mvns	r3, r3
 800846e:	693a      	ldr	r2, [r7, #16]
 8008470:	4013      	ands	r3, r2
 8008472:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8008474:	683b      	ldr	r3, [r7, #0]
 8008476:	685b      	ldr	r3, [r3, #4]
 8008478:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800847c:	2b00      	cmp	r3, #0
 800847e:	d003      	beq.n	8008488 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8008480:	693a      	ldr	r2, [r7, #16]
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	4313      	orrs	r3, r2
 8008486:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8008488:	4a30      	ldr	r2, [pc, #192]	@ (800854c <HAL_GPIO_Init+0x2dc>)
 800848a:	693b      	ldr	r3, [r7, #16]
 800848c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800848e:	4b2f      	ldr	r3, [pc, #188]	@ (800854c <HAL_GPIO_Init+0x2dc>)
 8008490:	685b      	ldr	r3, [r3, #4]
 8008492:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	43db      	mvns	r3, r3
 8008498:	693a      	ldr	r2, [r7, #16]
 800849a:	4013      	ands	r3, r2
 800849c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800849e:	683b      	ldr	r3, [r7, #0]
 80084a0:	685b      	ldr	r3, [r3, #4]
 80084a2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d003      	beq.n	80084b2 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80084aa:	693a      	ldr	r2, [r7, #16]
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	4313      	orrs	r3, r2
 80084b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80084b2:	4a26      	ldr	r2, [pc, #152]	@ (800854c <HAL_GPIO_Init+0x2dc>)
 80084b4:	693b      	ldr	r3, [r7, #16]
 80084b6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80084b8:	4b24      	ldr	r3, [pc, #144]	@ (800854c <HAL_GPIO_Init+0x2dc>)
 80084ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80084be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	43db      	mvns	r3, r3
 80084c4:	693a      	ldr	r2, [r7, #16]
 80084c6:	4013      	ands	r3, r2
 80084c8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80084ca:	683b      	ldr	r3, [r7, #0]
 80084cc:	685b      	ldr	r3, [r3, #4]
 80084ce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d003      	beq.n	80084de <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 80084d6:	693a      	ldr	r2, [r7, #16]
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	4313      	orrs	r3, r2
 80084dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80084de:	4a1b      	ldr	r2, [pc, #108]	@ (800854c <HAL_GPIO_Init+0x2dc>)
 80084e0:	693b      	ldr	r3, [r7, #16]
 80084e2:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 80084e6:	4b19      	ldr	r3, [pc, #100]	@ (800854c <HAL_GPIO_Init+0x2dc>)
 80084e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80084ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	43db      	mvns	r3, r3
 80084f2:	693a      	ldr	r2, [r7, #16]
 80084f4:	4013      	ands	r3, r2
 80084f6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80084f8:	683b      	ldr	r3, [r7, #0]
 80084fa:	685b      	ldr	r3, [r3, #4]
 80084fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008500:	2b00      	cmp	r3, #0
 8008502:	d003      	beq.n	800850c <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8008504:	693a      	ldr	r2, [r7, #16]
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	4313      	orrs	r3, r2
 800850a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800850c:	4a0f      	ldr	r2, [pc, #60]	@ (800854c <HAL_GPIO_Init+0x2dc>)
 800850e:	693b      	ldr	r3, [r7, #16]
 8008510:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      }
    }

    position++;
 8008514:	697b      	ldr	r3, [r7, #20]
 8008516:	3301      	adds	r3, #1
 8008518:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800851a:	683b      	ldr	r3, [r7, #0]
 800851c:	681a      	ldr	r2, [r3, #0]
 800851e:	697b      	ldr	r3, [r7, #20]
 8008520:	fa22 f303 	lsr.w	r3, r2, r3
 8008524:	2b00      	cmp	r3, #0
 8008526:	f47f aeab 	bne.w	8008280 <HAL_GPIO_Init+0x10>
  }
}
 800852a:	bf00      	nop
 800852c:	bf00      	nop
 800852e:	371c      	adds	r7, #28
 8008530:	46bd      	mov	sp, r7
 8008532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008536:	4770      	bx	lr
 8008538:	40010000 	.word	0x40010000
 800853c:	48000400 	.word	0x48000400
 8008540:	48000800 	.word	0x48000800
 8008544:	48000c00 	.word	0x48000c00
 8008548:	48001000 	.word	0x48001000
 800854c:	58000800 	.word	0x58000800

08008550 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008550:	b480      	push	{r7}
 8008552:	b083      	sub	sp, #12
 8008554:	af00      	add	r7, sp, #0
 8008556:	6078      	str	r0, [r7, #4]
 8008558:	460b      	mov	r3, r1
 800855a:	807b      	strh	r3, [r7, #2]
 800855c:	4613      	mov	r3, r2
 800855e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008560:	787b      	ldrb	r3, [r7, #1]
 8008562:	2b00      	cmp	r3, #0
 8008564:	d003      	beq.n	800856e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8008566:	887a      	ldrh	r2, [r7, #2]
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800856c:	e002      	b.n	8008574 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800856e:	887a      	ldrh	r2, [r7, #2]
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8008574:	bf00      	nop
 8008576:	370c      	adds	r7, #12
 8008578:	46bd      	mov	sp, r7
 800857a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800857e:	4770      	bx	lr

08008580 <HAL_GPIO_TogglePin>:
  * @param GPIOx where x can be (A..H) to select the GPIO peripheral for STM32WBxx family
  * @param GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8008580:	b480      	push	{r7}
 8008582:	b085      	sub	sp, #20
 8008584:	af00      	add	r7, sp, #0
 8008586:	6078      	str	r0, [r7, #4]
 8008588:	460b      	mov	r3, r1
 800858a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	695b      	ldr	r3, [r3, #20]
 8008590:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8008592:	887a      	ldrh	r2, [r7, #2]
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	4013      	ands	r3, r2
 8008598:	041a      	lsls	r2, r3, #16
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	43d9      	mvns	r1, r3
 800859e:	887b      	ldrh	r3, [r7, #2]
 80085a0:	400b      	ands	r3, r1
 80085a2:	431a      	orrs	r2, r3
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	619a      	str	r2, [r3, #24]
}
 80085a8:	bf00      	nop
 80085aa:	3714      	adds	r7, #20
 80085ac:	46bd      	mov	sp, r7
 80085ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b2:	4770      	bx	lr

080085b4 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 80085b4:	b580      	push	{r7, lr}
 80085b6:	b082      	sub	sp, #8
 80085b8:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 80085ba:	4b0a      	ldr	r3, [pc, #40]	@ (80085e4 <HAL_HSEM_IRQHandler+0x30>)
 80085bc:	68db      	ldr	r3, [r3, #12]
 80085be:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 80085c0:	4b08      	ldr	r3, [pc, #32]	@ (80085e4 <HAL_HSEM_IRQHandler+0x30>)
 80085c2:	681a      	ldr	r2, [r3, #0]
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	43db      	mvns	r3, r3
 80085c8:	4906      	ldr	r1, [pc, #24]	@ (80085e4 <HAL_HSEM_IRQHandler+0x30>)
 80085ca:	4013      	ands	r3, r2
 80085cc:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 80085ce:	4a05      	ldr	r2, [pc, #20]	@ (80085e4 <HAL_HSEM_IRQHandler+0x30>)
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 80085d4:	6878      	ldr	r0, [r7, #4]
 80085d6:	f000 f807 	bl	80085e8 <HAL_HSEM_FreeCallback>
}
 80085da:	bf00      	nop
 80085dc:	3708      	adds	r7, #8
 80085de:	46bd      	mov	sp, r7
 80085e0:	bd80      	pop	{r7, pc}
 80085e2:	bf00      	nop
 80085e4:	58001500 	.word	0x58001500

080085e8 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 80085e8:	b480      	push	{r7}
 80085ea:	b083      	sub	sp, #12
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 80085f0:	bf00      	nop
 80085f2:	370c      	adds	r7, #12
 80085f4:	46bd      	mov	sp, r7
 80085f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085fa:	4770      	bx	lr

080085fc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80085fc:	b580      	push	{r7, lr}
 80085fe:	b082      	sub	sp, #8
 8008600:	af00      	add	r7, sp, #0
 8008602:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	2b00      	cmp	r3, #0
 8008608:	d101      	bne.n	800860e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800860a:	2301      	movs	r3, #1
 800860c:	e08d      	b.n	800872a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008614:	b2db      	uxtb	r3, r3
 8008616:	2b00      	cmp	r3, #0
 8008618:	d106      	bne.n	8008628 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	2200      	movs	r2, #0
 800861e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8008622:	6878      	ldr	r0, [r7, #4]
 8008624:	f7fe fe68 	bl	80072f8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	2224      	movs	r2, #36	@ 0x24
 800862c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	681a      	ldr	r2, [r3, #0]
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	f022 0201 	bic.w	r2, r2, #1
 800863e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	685a      	ldr	r2, [r3, #4]
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800864c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	689a      	ldr	r2, [r3, #8]
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800865c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	68db      	ldr	r3, [r3, #12]
 8008662:	2b01      	cmp	r3, #1
 8008664:	d107      	bne.n	8008676 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	689a      	ldr	r2, [r3, #8]
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008672:	609a      	str	r2, [r3, #8]
 8008674:	e006      	b.n	8008684 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	689a      	ldr	r2, [r3, #8]
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8008682:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	68db      	ldr	r3, [r3, #12]
 8008688:	2b02      	cmp	r3, #2
 800868a:	d108      	bne.n	800869e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	685a      	ldr	r2, [r3, #4]
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800869a:	605a      	str	r2, [r3, #4]
 800869c:	e007      	b.n	80086ae <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	685a      	ldr	r2, [r3, #4]
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80086ac:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	685b      	ldr	r3, [r3, #4]
 80086b4:	687a      	ldr	r2, [r7, #4]
 80086b6:	6812      	ldr	r2, [r2, #0]
 80086b8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80086bc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80086c0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	68da      	ldr	r2, [r3, #12]
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80086d0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	691a      	ldr	r2, [r3, #16]
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	695b      	ldr	r3, [r3, #20]
 80086da:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	699b      	ldr	r3, [r3, #24]
 80086e2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	430a      	orrs	r2, r1
 80086ea:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	69d9      	ldr	r1, [r3, #28]
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	6a1a      	ldr	r2, [r3, #32]
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	430a      	orrs	r2, r1
 80086fa:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	681a      	ldr	r2, [r3, #0]
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	f042 0201 	orr.w	r2, r2, #1
 800870a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	2200      	movs	r2, #0
 8008710:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	2220      	movs	r2, #32
 8008716:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	2200      	movs	r2, #0
 800871e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	2200      	movs	r2, #0
 8008724:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8008728:	2300      	movs	r3, #0
}
 800872a:	4618      	mov	r0, r3
 800872c:	3708      	adds	r7, #8
 800872e:	46bd      	mov	sp, r7
 8008730:	bd80      	pop	{r7, pc}
	...

08008734 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008734:	b580      	push	{r7, lr}
 8008736:	b088      	sub	sp, #32
 8008738:	af02      	add	r7, sp, #8
 800873a:	60f8      	str	r0, [r7, #12]
 800873c:	4608      	mov	r0, r1
 800873e:	4611      	mov	r1, r2
 8008740:	461a      	mov	r2, r3
 8008742:	4603      	mov	r3, r0
 8008744:	817b      	strh	r3, [r7, #10]
 8008746:	460b      	mov	r3, r1
 8008748:	813b      	strh	r3, [r7, #8]
 800874a:	4613      	mov	r3, r2
 800874c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008754:	b2db      	uxtb	r3, r3
 8008756:	2b20      	cmp	r3, #32
 8008758:	f040 80f9 	bne.w	800894e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800875c:	6a3b      	ldr	r3, [r7, #32]
 800875e:	2b00      	cmp	r3, #0
 8008760:	d002      	beq.n	8008768 <HAL_I2C_Mem_Write+0x34>
 8008762:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008764:	2b00      	cmp	r3, #0
 8008766:	d105      	bne.n	8008774 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800876e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8008770:	2301      	movs	r3, #1
 8008772:	e0ed      	b.n	8008950 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800877a:	2b01      	cmp	r3, #1
 800877c:	d101      	bne.n	8008782 <HAL_I2C_Mem_Write+0x4e>
 800877e:	2302      	movs	r3, #2
 8008780:	e0e6      	b.n	8008950 <HAL_I2C_Mem_Write+0x21c>
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	2201      	movs	r2, #1
 8008786:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800878a:	f7ff f8d1 	bl	8007930 <HAL_GetTick>
 800878e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008790:	697b      	ldr	r3, [r7, #20]
 8008792:	9300      	str	r3, [sp, #0]
 8008794:	2319      	movs	r3, #25
 8008796:	2201      	movs	r2, #1
 8008798:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800879c:	68f8      	ldr	r0, [r7, #12]
 800879e:	f001 fc26 	bl	8009fee <I2C_WaitOnFlagUntilTimeout>
 80087a2:	4603      	mov	r3, r0
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d001      	beq.n	80087ac <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80087a8:	2301      	movs	r3, #1
 80087aa:	e0d1      	b.n	8008950 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	2221      	movs	r2, #33	@ 0x21
 80087b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	2240      	movs	r2, #64	@ 0x40
 80087b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	2200      	movs	r2, #0
 80087c0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	6a3a      	ldr	r2, [r7, #32]
 80087c6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80087cc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	2200      	movs	r2, #0
 80087d2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80087d4:	88f8      	ldrh	r0, [r7, #6]
 80087d6:	893a      	ldrh	r2, [r7, #8]
 80087d8:	8979      	ldrh	r1, [r7, #10]
 80087da:	697b      	ldr	r3, [r7, #20]
 80087dc:	9301      	str	r3, [sp, #4]
 80087de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087e0:	9300      	str	r3, [sp, #0]
 80087e2:	4603      	mov	r3, r0
 80087e4:	68f8      	ldr	r0, [r7, #12]
 80087e6:	f000 fe55 	bl	8009494 <I2C_RequestMemoryWrite>
 80087ea:	4603      	mov	r3, r0
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d005      	beq.n	80087fc <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	2200      	movs	r2, #0
 80087f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80087f8:	2301      	movs	r3, #1
 80087fa:	e0a9      	b.n	8008950 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008800:	b29b      	uxth	r3, r3
 8008802:	2bff      	cmp	r3, #255	@ 0xff
 8008804:	d90e      	bls.n	8008824 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	22ff      	movs	r2, #255	@ 0xff
 800880a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008810:	b2da      	uxtb	r2, r3
 8008812:	8979      	ldrh	r1, [r7, #10]
 8008814:	2300      	movs	r3, #0
 8008816:	9300      	str	r3, [sp, #0]
 8008818:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800881c:	68f8      	ldr	r0, [r7, #12]
 800881e:	f001 fda9 	bl	800a374 <I2C_TransferConfig>
 8008822:	e00f      	b.n	8008844 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008828:	b29a      	uxth	r2, r3
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008832:	b2da      	uxtb	r2, r3
 8008834:	8979      	ldrh	r1, [r7, #10]
 8008836:	2300      	movs	r3, #0
 8008838:	9300      	str	r3, [sp, #0]
 800883a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800883e:	68f8      	ldr	r0, [r7, #12]
 8008840:	f001 fd98 	bl	800a374 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008844:	697a      	ldr	r2, [r7, #20]
 8008846:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008848:	68f8      	ldr	r0, [r7, #12]
 800884a:	f001 fc29 	bl	800a0a0 <I2C_WaitOnTXISFlagUntilTimeout>
 800884e:	4603      	mov	r3, r0
 8008850:	2b00      	cmp	r3, #0
 8008852:	d001      	beq.n	8008858 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8008854:	2301      	movs	r3, #1
 8008856:	e07b      	b.n	8008950 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800885c:	781a      	ldrb	r2, [r3, #0]
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008868:	1c5a      	adds	r2, r3, #1
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008872:	b29b      	uxth	r3, r3
 8008874:	3b01      	subs	r3, #1
 8008876:	b29a      	uxth	r2, r3
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008880:	3b01      	subs	r3, #1
 8008882:	b29a      	uxth	r2, r3
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800888c:	b29b      	uxth	r3, r3
 800888e:	2b00      	cmp	r3, #0
 8008890:	d034      	beq.n	80088fc <HAL_I2C_Mem_Write+0x1c8>
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008896:	2b00      	cmp	r3, #0
 8008898:	d130      	bne.n	80088fc <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800889a:	697b      	ldr	r3, [r7, #20]
 800889c:	9300      	str	r3, [sp, #0]
 800889e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088a0:	2200      	movs	r2, #0
 80088a2:	2180      	movs	r1, #128	@ 0x80
 80088a4:	68f8      	ldr	r0, [r7, #12]
 80088a6:	f001 fba2 	bl	8009fee <I2C_WaitOnFlagUntilTimeout>
 80088aa:	4603      	mov	r3, r0
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d001      	beq.n	80088b4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80088b0:	2301      	movs	r3, #1
 80088b2:	e04d      	b.n	8008950 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80088b8:	b29b      	uxth	r3, r3
 80088ba:	2bff      	cmp	r3, #255	@ 0xff
 80088bc:	d90e      	bls.n	80088dc <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	22ff      	movs	r2, #255	@ 0xff
 80088c2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80088c8:	b2da      	uxtb	r2, r3
 80088ca:	8979      	ldrh	r1, [r7, #10]
 80088cc:	2300      	movs	r3, #0
 80088ce:	9300      	str	r3, [sp, #0]
 80088d0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80088d4:	68f8      	ldr	r0, [r7, #12]
 80088d6:	f001 fd4d 	bl	800a374 <I2C_TransferConfig>
 80088da:	e00f      	b.n	80088fc <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80088e0:	b29a      	uxth	r2, r3
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80088ea:	b2da      	uxtb	r2, r3
 80088ec:	8979      	ldrh	r1, [r7, #10]
 80088ee:	2300      	movs	r3, #0
 80088f0:	9300      	str	r3, [sp, #0]
 80088f2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80088f6:	68f8      	ldr	r0, [r7, #12]
 80088f8:	f001 fd3c 	bl	800a374 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008900:	b29b      	uxth	r3, r3
 8008902:	2b00      	cmp	r3, #0
 8008904:	d19e      	bne.n	8008844 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008906:	697a      	ldr	r2, [r7, #20]
 8008908:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800890a:	68f8      	ldr	r0, [r7, #12]
 800890c:	f001 fc0f 	bl	800a12e <I2C_WaitOnSTOPFlagUntilTimeout>
 8008910:	4603      	mov	r3, r0
 8008912:	2b00      	cmp	r3, #0
 8008914:	d001      	beq.n	800891a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8008916:	2301      	movs	r3, #1
 8008918:	e01a      	b.n	8008950 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	2220      	movs	r2, #32
 8008920:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	6859      	ldr	r1, [r3, #4]
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	681a      	ldr	r2, [r3, #0]
 800892c:	4b0a      	ldr	r3, [pc, #40]	@ (8008958 <HAL_I2C_Mem_Write+0x224>)
 800892e:	400b      	ands	r3, r1
 8008930:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	2220      	movs	r2, #32
 8008936:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	2200      	movs	r2, #0
 800893e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	2200      	movs	r2, #0
 8008946:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800894a:	2300      	movs	r3, #0
 800894c:	e000      	b.n	8008950 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800894e:	2302      	movs	r3, #2
  }
}
 8008950:	4618      	mov	r0, r3
 8008952:	3718      	adds	r7, #24
 8008954:	46bd      	mov	sp, r7
 8008956:	bd80      	pop	{r7, pc}
 8008958:	fe00e800 	.word	0xfe00e800

0800895c <HAL_I2C_Mem_Read_DMA>:
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                       uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 800895c:	b580      	push	{r7, lr}
 800895e:	b088      	sub	sp, #32
 8008960:	af02      	add	r7, sp, #8
 8008962:	60f8      	str	r0, [r7, #12]
 8008964:	4608      	mov	r0, r1
 8008966:	4611      	mov	r1, r2
 8008968:	461a      	mov	r2, r3
 800896a:	4603      	mov	r3, r0
 800896c:	817b      	strh	r3, [r7, #10]
 800896e:	460b      	mov	r3, r1
 8008970:	813b      	strh	r3, [r7, #8]
 8008972:	4613      	mov	r3, r2
 8008974:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800897c:	b2db      	uxtb	r3, r3
 800897e:	2b20      	cmp	r3, #32
 8008980:	f040 80c2 	bne.w	8008b08 <HAL_I2C_Mem_Read_DMA+0x1ac>
  {
    if ((pData == NULL) || (Size == 0U))
 8008984:	6a3b      	ldr	r3, [r7, #32]
 8008986:	2b00      	cmp	r3, #0
 8008988:	d002      	beq.n	8008990 <HAL_I2C_Mem_Read_DMA+0x34>
 800898a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800898c:	2b00      	cmp	r3, #0
 800898e:	d105      	bne.n	800899c <HAL_I2C_Mem_Read_DMA+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008996:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8008998:	2301      	movs	r3, #1
 800899a:	e0b6      	b.n	8008b0a <HAL_I2C_Mem_Read_DMA+0x1ae>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	699b      	ldr	r3, [r3, #24]
 80089a2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80089a6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80089aa:	d101      	bne.n	80089b0 <HAL_I2C_Mem_Read_DMA+0x54>
    {
      return HAL_BUSY;
 80089ac:	2302      	movs	r3, #2
 80089ae:	e0ac      	b.n	8008b0a <HAL_I2C_Mem_Read_DMA+0x1ae>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80089b6:	2b01      	cmp	r3, #1
 80089b8:	d101      	bne.n	80089be <HAL_I2C_Mem_Read_DMA+0x62>
 80089ba:	2302      	movs	r3, #2
 80089bc:	e0a5      	b.n	8008b0a <HAL_I2C_Mem_Read_DMA+0x1ae>
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	2201      	movs	r2, #1
 80089c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	2222      	movs	r2, #34	@ 0x22
 80089ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	2240      	movs	r2, #64	@ 0x40
 80089d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	2200      	movs	r2, #0
 80089da:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	6a3a      	ldr	r2, [r7, #32]
 80089e0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80089e6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	4a4a      	ldr	r2, [pc, #296]	@ (8008b14 <HAL_I2C_Mem_Read_DMA+0x1b8>)
 80089ec:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Mem_ISR_DMA;
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	4a49      	ldr	r2, [pc, #292]	@ (8008b18 <HAL_I2C_Mem_Read_DMA+0x1bc>)
 80089f2:	635a      	str	r2, [r3, #52]	@ 0x34
    hi2c->Devaddress  = DevAddress;
 80089f4:	897a      	ldrh	r2, [r7, #10]
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	64da      	str	r2, [r3, #76]	@ 0x4c

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80089fe:	b29b      	uxth	r3, r3
 8008a00:	2bff      	cmp	r3, #255	@ 0xff
 8008a02:	d903      	bls.n	8008a0c <HAL_I2C_Mem_Read_DMA+0xb0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	22ff      	movs	r2, #255	@ 0xff
 8008a08:	851a      	strh	r2, [r3, #40]	@ 0x28
 8008a0a:	e004      	b.n	8008a16 <HAL_I2C_Mem_Read_DMA+0xba>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008a10:	b29a      	uxth	r2, r3
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	851a      	strh	r2, [r3, #40]	@ 0x28
    }

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008a16:	88fb      	ldrh	r3, [r7, #6]
 8008a18:	2b01      	cmp	r3, #1
 8008a1a:	d109      	bne.n	8008a30 <HAL_I2C_Mem_Read_DMA+0xd4>
    {
      /* Prefetch Memory Address */
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008a1c:	893b      	ldrh	r3, [r7, #8]
 8008a1e:	b2da      	uxtb	r2, r3
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	f04f 32ff 	mov.w	r2, #4294967295
 8008a2c:	651a      	str	r2, [r3, #80]	@ 0x50
 8008a2e:	e00b      	b.n	8008a48 <HAL_I2C_Mem_Read_DMA+0xec>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Prefetch Memory Address (MSB part, LSB will be manage through interrupt) */
      hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8008a30:	893b      	ldrh	r3, [r7, #8]
 8008a32:	0a1b      	lsrs	r3, r3, #8
 8008a34:	b29b      	uxth	r3, r3
 8008a36:	b2da      	uxtb	r2, r3
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Prepare Memaddress buffer for LSB part */
      hi2c->Memaddress = I2C_MEM_ADD_LSB(MemAddress);
 8008a3e:	893b      	ldrh	r3, [r7, #8]
 8008a40:	b2db      	uxtb	r3, r3
 8008a42:	461a      	mov	r2, r3
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    if (hi2c->hdmarx != NULL)
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d020      	beq.n	8008a92 <HAL_I2C_Mem_Read_DMA+0x136>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a54:	4a31      	ldr	r2, [pc, #196]	@ (8008b1c <HAL_I2C_Mem_Read_DMA+0x1c0>)
 8008a56:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a5c:	4a30      	ldr	r2, [pc, #192]	@ (8008b20 <HAL_I2C_Mem_Read_DMA+0x1c4>)
 8008a5e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a64:	2200      	movs	r2, #0
 8008a66:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->hdmarx->XferAbortCallback = NULL;
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a6c:	2200      	movs	r2, #0
 8008a6e:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the DMA channel */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	3324      	adds	r3, #36	@ 0x24
 8008a7a:	4619      	mov	r1, r3
 8008a7c:	6a3a      	ldr	r2, [r7, #32]
                                       hi2c->XferSize);
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8008a82:	f7ff f9bb 	bl	8007dfc <HAL_DMA_Start_IT>
 8008a86:	4603      	mov	r3, r0
 8008a88:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 8008a8a:	7dfb      	ldrb	r3, [r7, #23]
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d127      	bne.n	8008ae0 <HAL_I2C_Mem_Read_DMA+0x184>
 8008a90:	e013      	b.n	8008aba <HAL_I2C_Mem_Read_DMA+0x15e>
      hi2c->State     = HAL_I2C_STATE_READY;
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	2220      	movs	r2, #32
 8008a96:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	2200      	movs	r2, #0
 8008a9e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008aa6:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	645a      	str	r2, [r3, #68]	@ 0x44
      __HAL_UNLOCK(hi2c);
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	2200      	movs	r2, #0
 8008ab2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8008ab6:	2301      	movs	r3, #1
 8008ab8:	e027      	b.n	8008b0a <HAL_I2C_Mem_Read_DMA+0x1ae>
    {
      /* Send Slave Address and Memory Address */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8008aba:	88fb      	ldrh	r3, [r7, #6]
 8008abc:	b2da      	uxtb	r2, r3
 8008abe:	8979      	ldrh	r1, [r7, #10]
 8008ac0:	4b18      	ldr	r3, [pc, #96]	@ (8008b24 <HAL_I2C_Mem_Read_DMA+0x1c8>)
 8008ac2:	9300      	str	r3, [sp, #0]
 8008ac4:	2300      	movs	r3, #0
 8008ac6:	68f8      	ldr	r0, [r7, #12]
 8008ac8:	f001 fc54 	bl	800a374 <I2C_TransferConfig>

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	2200      	movs	r2, #0
 8008ad0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8008ad4:	2101      	movs	r1, #1
 8008ad6:	68f8      	ldr	r0, [r7, #12]
 8008ad8:	f001 fc7e 	bl	800a3d8 <I2C_Enable_IRQ>
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
 8008adc:	2300      	movs	r3, #0
 8008ade:	e014      	b.n	8008b0a <HAL_I2C_Mem_Read_DMA+0x1ae>
      hi2c->State     = HAL_I2C_STATE_READY;
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	2220      	movs	r2, #32
 8008ae4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	2200      	movs	r2, #0
 8008aec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008af4:	f043 0210 	orr.w	r2, r3, #16
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	645a      	str	r2, [r3, #68]	@ 0x44
      __HAL_UNLOCK(hi2c);
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	2200      	movs	r2, #0
 8008b00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8008b04:	2301      	movs	r3, #1
 8008b06:	e000      	b.n	8008b0a <HAL_I2C_Mem_Read_DMA+0x1ae>
  }
  else
  {
    return HAL_BUSY;
 8008b08:	2302      	movs	r3, #2
  }
}
 8008b0a:	4618      	mov	r0, r3
 8008b0c:	3718      	adds	r7, #24
 8008b0e:	46bd      	mov	sp, r7
 8008b10:	bd80      	pop	{r7, pc}
 8008b12:	bf00      	nop
 8008b14:	ffff0000 	.word	0xffff0000
 8008b18:	08009099 	.word	0x08009099
 8008b1c:	08009eef 	.word	0x08009eef
 8008b20:	08009f85 	.word	0x08009f85
 8008b24:	80002000 	.word	0x80002000

08008b28 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8008b28:	b580      	push	{r7, lr}
 8008b2a:	b084      	sub	sp, #16
 8008b2c:	af00      	add	r7, sp, #0
 8008b2e:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	699b      	ldr	r3, [r3, #24]
 8008b36:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d005      	beq.n	8008b54 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008b4c:	68ba      	ldr	r2, [r7, #8]
 8008b4e:	68f9      	ldr	r1, [r7, #12]
 8008b50:	6878      	ldr	r0, [r7, #4]
 8008b52:	4798      	blx	r3
  }
}
 8008b54:	bf00      	nop
 8008b56:	3710      	adds	r7, #16
 8008b58:	46bd      	mov	sp, r7
 8008b5a:	bd80      	pop	{r7, pc}

08008b5c <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8008b5c:	b580      	push	{r7, lr}
 8008b5e:	b086      	sub	sp, #24
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	699b      	ldr	r3, [r3, #24]
 8008b6a:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8008b74:	697b      	ldr	r3, [r7, #20]
 8008b76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d00f      	beq.n	8008b9e <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8008b7e:	693b      	ldr	r3, [r7, #16]
 8008b80:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d00a      	beq.n	8008b9e <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008b8c:	f043 0201 	orr.w	r2, r3, #1
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008b9c:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8008b9e:	697b      	ldr	r3, [r7, #20]
 8008ba0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d00f      	beq.n	8008bc8 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8008ba8:	693b      	ldr	r3, [r7, #16]
 8008baa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d00a      	beq.n	8008bc8 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008bb6:	f043 0208 	orr.w	r2, r3, #8
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8008bc6:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8008bc8:	697b      	ldr	r3, [r7, #20]
 8008bca:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d00f      	beq.n	8008bf2 <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8008bd2:	693b      	ldr	r3, [r7, #16]
 8008bd4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d00a      	beq.n	8008bf2 <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008be0:	f043 0202 	orr.w	r2, r3, #2
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008bf0:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008bf6:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	f003 030b 	and.w	r3, r3, #11
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d003      	beq.n	8008c0a <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 8008c02:	68f9      	ldr	r1, [r7, #12]
 8008c04:	6878      	ldr	r0, [r7, #4]
 8008c06:	f001 f837 	bl	8009c78 <I2C_ITError>
  }
}
 8008c0a:	bf00      	nop
 8008c0c:	3718      	adds	r7, #24
 8008c0e:	46bd      	mov	sp, r7
 8008c10:	bd80      	pop	{r7, pc}

08008c12 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008c12:	b480      	push	{r7}
 8008c14:	b083      	sub	sp, #12
 8008c16:	af00      	add	r7, sp, #0
 8008c18:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8008c1a:	bf00      	nop
 8008c1c:	370c      	adds	r7, #12
 8008c1e:	46bd      	mov	sp, r7
 8008c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c24:	4770      	bx	lr

08008c26 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008c26:	b480      	push	{r7}
 8008c28:	b083      	sub	sp, #12
 8008c2a:	af00      	add	r7, sp, #0
 8008c2c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8008c2e:	bf00      	nop
 8008c30:	370c      	adds	r7, #12
 8008c32:	46bd      	mov	sp, r7
 8008c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c38:	4770      	bx	lr

08008c3a <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008c3a:	b480      	push	{r7}
 8008c3c:	b083      	sub	sp, #12
 8008c3e:	af00      	add	r7, sp, #0
 8008c40:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8008c42:	bf00      	nop
 8008c44:	370c      	adds	r7, #12
 8008c46:	46bd      	mov	sp, r7
 8008c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c4c:	4770      	bx	lr

08008c4e <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008c4e:	b480      	push	{r7}
 8008c50:	b083      	sub	sp, #12
 8008c52:	af00      	add	r7, sp, #0
 8008c54:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8008c56:	bf00      	nop
 8008c58:	370c      	adds	r7, #12
 8008c5a:	46bd      	mov	sp, r7
 8008c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c60:	4770      	bx	lr

08008c62 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8008c62:	b480      	push	{r7}
 8008c64:	b083      	sub	sp, #12
 8008c66:	af00      	add	r7, sp, #0
 8008c68:	6078      	str	r0, [r7, #4]
 8008c6a:	460b      	mov	r3, r1
 8008c6c:	70fb      	strb	r3, [r7, #3]
 8008c6e:	4613      	mov	r3, r2
 8008c70:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8008c72:	bf00      	nop
 8008c74:	370c      	adds	r7, #12
 8008c76:	46bd      	mov	sp, r7
 8008c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c7c:	4770      	bx	lr

08008c7e <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008c7e:	b480      	push	{r7}
 8008c80:	b083      	sub	sp, #12
 8008c82:	af00      	add	r7, sp, #0
 8008c84:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8008c86:	bf00      	nop
 8008c88:	370c      	adds	r7, #12
 8008c8a:	46bd      	mov	sp, r7
 8008c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c90:	4770      	bx	lr

08008c92 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008c92:	b480      	push	{r7}
 8008c94:	b083      	sub	sp, #12
 8008c96:	af00      	add	r7, sp, #0
 8008c98:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8008c9a:	bf00      	nop
 8008c9c:	370c      	adds	r7, #12
 8008c9e:	46bd      	mov	sp, r7
 8008ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca4:	4770      	bx	lr

08008ca6 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8008ca6:	b480      	push	{r7}
 8008ca8:	b083      	sub	sp, #12
 8008caa:	af00      	add	r7, sp, #0
 8008cac:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8008cae:	bf00      	nop
 8008cb0:	370c      	adds	r7, #12
 8008cb2:	46bd      	mov	sp, r7
 8008cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb8:	4770      	bx	lr

08008cba <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008cba:	b480      	push	{r7}
 8008cbc:	b083      	sub	sp, #12
 8008cbe:	af00      	add	r7, sp, #0
 8008cc0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8008cc2:	bf00      	nop
 8008cc4:	370c      	adds	r7, #12
 8008cc6:	46bd      	mov	sp, r7
 8008cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ccc:	4770      	bx	lr

08008cce <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8008cce:	b580      	push	{r7, lr}
 8008cd0:	b086      	sub	sp, #24
 8008cd2:	af00      	add	r7, sp, #0
 8008cd4:	60f8      	str	r0, [r7, #12]
 8008cd6:	60b9      	str	r1, [r7, #8]
 8008cd8:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008cde:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8008ce0:	68bb      	ldr	r3, [r7, #8]
 8008ce2:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008cea:	2b01      	cmp	r3, #1
 8008cec:	d101      	bne.n	8008cf2 <I2C_Slave_ISR_IT+0x24>
 8008cee:	2302      	movs	r3, #2
 8008cf0:	e0e2      	b.n	8008eb8 <I2C_Slave_ISR_IT+0x1ea>
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	2201      	movs	r2, #1
 8008cf6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8008cfa:	693b      	ldr	r3, [r7, #16]
 8008cfc:	f003 0320 	and.w	r3, r3, #32
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d009      	beq.n	8008d18 <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d004      	beq.n	8008d18 <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8008d0e:	6939      	ldr	r1, [r7, #16]
 8008d10:	68f8      	ldr	r0, [r7, #12]
 8008d12:	f000 fdf9 	bl	8009908 <I2C_ITSlaveCplt>
 8008d16:	e0ca      	b.n	8008eae <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8008d18:	693b      	ldr	r3, [r7, #16]
 8008d1a:	f003 0310 	and.w	r3, r3, #16
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d04b      	beq.n	8008dba <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d046      	beq.n	8008dba <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008d30:	b29b      	uxth	r3, r3
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d128      	bne.n	8008d88 <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008d3c:	b2db      	uxtb	r3, r3
 8008d3e:	2b28      	cmp	r3, #40	@ 0x28
 8008d40:	d108      	bne.n	8008d54 <I2C_Slave_ISR_IT+0x86>
 8008d42:	697b      	ldr	r3, [r7, #20]
 8008d44:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008d48:	d104      	bne.n	8008d54 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8008d4a:	6939      	ldr	r1, [r7, #16]
 8008d4c:	68f8      	ldr	r0, [r7, #12]
 8008d4e:	f000 ff3f 	bl	8009bd0 <I2C_ITListenCplt>
 8008d52:	e031      	b.n	8008db8 <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008d5a:	b2db      	uxtb	r3, r3
 8008d5c:	2b29      	cmp	r3, #41	@ 0x29
 8008d5e:	d10e      	bne.n	8008d7e <I2C_Slave_ISR_IT+0xb0>
 8008d60:	697b      	ldr	r3, [r7, #20]
 8008d62:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8008d66:	d00a      	beq.n	8008d7e <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	2210      	movs	r2, #16
 8008d6e:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8008d70:	68f8      	ldr	r0, [r7, #12]
 8008d72:	f001 f898 	bl	8009ea6 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8008d76:	68f8      	ldr	r0, [r7, #12]
 8008d78:	f000 fca1 	bl	80096be <I2C_ITSlaveSeqCplt>
 8008d7c:	e01c      	b.n	8008db8 <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	2210      	movs	r2, #16
 8008d84:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8008d86:	e08f      	b.n	8008ea8 <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	2210      	movs	r2, #16
 8008d8e:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008d94:	f043 0204 	orr.w	r2, r3, #4
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8008d9c:	697b      	ldr	r3, [r7, #20]
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d003      	beq.n	8008daa <I2C_Slave_ISR_IT+0xdc>
 8008da2:	697b      	ldr	r3, [r7, #20]
 8008da4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008da8:	d17e      	bne.n	8008ea8 <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008dae:	4619      	mov	r1, r3
 8008db0:	68f8      	ldr	r0, [r7, #12]
 8008db2:	f000 ff61 	bl	8009c78 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8008db6:	e077      	b.n	8008ea8 <I2C_Slave_ISR_IT+0x1da>
 8008db8:	e076      	b.n	8008ea8 <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8008dba:	693b      	ldr	r3, [r7, #16]
 8008dbc:	f003 0304 	and.w	r3, r3, #4
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d02f      	beq.n	8008e24 <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d02a      	beq.n	8008e24 <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008dd2:	b29b      	uxth	r3, r3
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d018      	beq.n	8008e0a <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008de2:	b2d2      	uxtb	r2, r2
 8008de4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008dea:	1c5a      	adds	r2, r3, #1
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008df4:	3b01      	subs	r3, #1
 8008df6:	b29a      	uxth	r2, r3
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008e00:	b29b      	uxth	r3, r3
 8008e02:	3b01      	subs	r3, #1
 8008e04:	b29a      	uxth	r2, r3
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008e0e:	b29b      	uxth	r3, r3
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d14b      	bne.n	8008eac <I2C_Slave_ISR_IT+0x1de>
 8008e14:	697b      	ldr	r3, [r7, #20]
 8008e16:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8008e1a:	d047      	beq.n	8008eac <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8008e1c:	68f8      	ldr	r0, [r7, #12]
 8008e1e:	f000 fc4e 	bl	80096be <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8008e22:	e043      	b.n	8008eac <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8008e24:	693b      	ldr	r3, [r7, #16]
 8008e26:	f003 0308 	and.w	r3, r3, #8
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d009      	beq.n	8008e42 <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d004      	beq.n	8008e42 <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8008e38:	6939      	ldr	r1, [r7, #16]
 8008e3a:	68f8      	ldr	r0, [r7, #12]
 8008e3c:	f000 fb7e 	bl	800953c <I2C_ITAddrCplt>
 8008e40:	e035      	b.n	8008eae <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8008e42:	693b      	ldr	r3, [r7, #16]
 8008e44:	f003 0302 	and.w	r3, r3, #2
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d030      	beq.n	8008eae <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d02b      	beq.n	8008eae <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008e5a:	b29b      	uxth	r3, r3
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d018      	beq.n	8008e92 <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e64:	781a      	ldrb	r2, [r3, #0]
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e70:	1c5a      	adds	r2, r3, #1
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008e7a:	b29b      	uxth	r3, r3
 8008e7c:	3b01      	subs	r3, #1
 8008e7e:	b29a      	uxth	r2, r3
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008e88:	3b01      	subs	r3, #1
 8008e8a:	b29a      	uxth	r2, r3
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	851a      	strh	r2, [r3, #40]	@ 0x28
 8008e90:	e00d      	b.n	8008eae <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8008e92:	697b      	ldr	r3, [r7, #20]
 8008e94:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008e98:	d002      	beq.n	8008ea0 <I2C_Slave_ISR_IT+0x1d2>
 8008e9a:	697b      	ldr	r3, [r7, #20]
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d106      	bne.n	8008eae <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8008ea0:	68f8      	ldr	r0, [r7, #12]
 8008ea2:	f000 fc0c 	bl	80096be <I2C_ITSlaveSeqCplt>
 8008ea6:	e002      	b.n	8008eae <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 8008ea8:	bf00      	nop
 8008eaa:	e000      	b.n	8008eae <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 8008eac:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	2200      	movs	r2, #0
 8008eb2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8008eb6:	2300      	movs	r3, #0
}
 8008eb8:	4618      	mov	r0, r3
 8008eba:	3718      	adds	r7, #24
 8008ebc:	46bd      	mov	sp, r7
 8008ebe:	bd80      	pop	{r7, pc}

08008ec0 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8008ec0:	b580      	push	{r7, lr}
 8008ec2:	b088      	sub	sp, #32
 8008ec4:	af02      	add	r7, sp, #8
 8008ec6:	60f8      	str	r0, [r7, #12]
 8008ec8:	60b9      	str	r1, [r7, #8]
 8008eca:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008ed2:	2b01      	cmp	r3, #1
 8008ed4:	d101      	bne.n	8008eda <I2C_Master_ISR_DMA+0x1a>
 8008ed6:	2302      	movs	r3, #2
 8008ed8:	e0d9      	b.n	800908e <I2C_Master_ISR_DMA+0x1ce>
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	2201      	movs	r2, #1
 8008ede:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8008ee2:	68bb      	ldr	r3, [r7, #8]
 8008ee4:	f003 0310 	and.w	r3, r3, #16
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d016      	beq.n	8008f1a <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d011      	beq.n	8008f1a <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	2210      	movs	r2, #16
 8008efc:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008f02:	f043 0204 	orr.w	r2, r3, #4
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8008f0a:	2120      	movs	r1, #32
 8008f0c:	68f8      	ldr	r0, [r7, #12]
 8008f0e:	f001 fa63 	bl	800a3d8 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8008f12:	68f8      	ldr	r0, [r7, #12]
 8008f14:	f000 ffc7 	bl	8009ea6 <I2C_Flush_TXDR>
 8008f18:	e0b4      	b.n	8009084 <I2C_Master_ISR_DMA+0x1c4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8008f1a:	68bb      	ldr	r3, [r7, #8]
 8008f1c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d071      	beq.n	8009008 <I2C_Master_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d06c      	beq.n	8009008 <I2C_Master_ISR_DMA+0x148>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	681a      	ldr	r2, [r3, #0]
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008f3c:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008f42:	b29b      	uxth	r3, r3
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d04e      	beq.n	8008fe6 <I2C_Master_ISR_DMA+0x126>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	685b      	ldr	r3, [r3, #4]
 8008f4e:	b29b      	uxth	r3, r3
 8008f50:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008f54:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008f5a:	b29b      	uxth	r3, r3
 8008f5c:	2bff      	cmp	r3, #255	@ 0xff
 8008f5e:	d906      	bls.n	8008f6e <I2C_Master_ISR_DMA+0xae>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	22ff      	movs	r2, #255	@ 0xff
 8008f64:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 8008f66:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8008f6a:	617b      	str	r3, [r7, #20]
 8008f6c:	e010      	b.n	8008f90 <I2C_Master_ISR_DMA+0xd0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008f72:	b29a      	uxth	r2, r3
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f7c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8008f80:	d003      	beq.n	8008f8a <I2C_Master_ISR_DMA+0xca>
        {
          xfermode = hi2c->XferOptions;
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f86:	617b      	str	r3, [r7, #20]
 8008f88:	e002      	b.n	8008f90 <I2C_Master_ISR_DMA+0xd0>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8008f8a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8008f8e:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008f94:	b2da      	uxtb	r2, r3
 8008f96:	8a79      	ldrh	r1, [r7, #18]
 8008f98:	2300      	movs	r3, #0
 8008f9a:	9300      	str	r3, [sp, #0]
 8008f9c:	697b      	ldr	r3, [r7, #20]
 8008f9e:	68f8      	ldr	r0, [r7, #12]
 8008fa0:	f001 f9e8 	bl	800a374 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008fa8:	b29a      	uxth	r2, r3
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008fae:	1ad3      	subs	r3, r2, r3
 8008fb0:	b29a      	uxth	r2, r3
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008fbc:	b2db      	uxtb	r3, r3
 8008fbe:	2b22      	cmp	r3, #34	@ 0x22
 8008fc0:	d108      	bne.n	8008fd4 <I2C_Master_ISR_DMA+0x114>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	681a      	ldr	r2, [r3, #0]
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008fd0:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8008fd2:	e057      	b.n	8009084 <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	681a      	ldr	r2, [r3, #0]
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008fe2:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8008fe4:	e04e      	b.n	8009084 <I2C_Master_ISR_DMA+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	685b      	ldr	r3, [r3, #4]
 8008fec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008ff0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008ff4:	d003      	beq.n	8008ffe <I2C_Master_ISR_DMA+0x13e>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8008ff6:	68f8      	ldr	r0, [r7, #12]
 8008ff8:	f000 fb24 	bl	8009644 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8008ffc:	e042      	b.n	8009084 <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8008ffe:	2140      	movs	r1, #64	@ 0x40
 8009000:	68f8      	ldr	r0, [r7, #12]
 8009002:	f000 fe39 	bl	8009c78 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8009006:	e03d      	b.n	8009084 <I2C_Master_ISR_DMA+0x1c4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8009008:	68bb      	ldr	r3, [r7, #8]
 800900a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800900e:	2b00      	cmp	r3, #0
 8009010:	d028      	beq.n	8009064 <I2C_Master_ISR_DMA+0x1a4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8009018:	2b00      	cmp	r3, #0
 800901a:	d023      	beq.n	8009064 <I2C_Master_ISR_DMA+0x1a4>
  {
    if (hi2c->XferCount == 0U)
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009020:	b29b      	uxth	r3, r3
 8009022:	2b00      	cmp	r3, #0
 8009024:	d119      	bne.n	800905a <I2C_Master_ISR_DMA+0x19a>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	685b      	ldr	r3, [r3, #4]
 800902c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009030:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009034:	d025      	beq.n	8009082 <I2C_Master_ISR_DMA+0x1c2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800903a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800903e:	d108      	bne.n	8009052 <I2C_Master_ISR_DMA+0x192>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	685a      	ldr	r2, [r3, #4]
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800904e:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8009050:	e017      	b.n	8009082 <I2C_Master_ISR_DMA+0x1c2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8009052:	68f8      	ldr	r0, [r7, #12]
 8009054:	f000 faf6 	bl	8009644 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8009058:	e013      	b.n	8009082 <I2C_Master_ISR_DMA+0x1c2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800905a:	2140      	movs	r1, #64	@ 0x40
 800905c:	68f8      	ldr	r0, [r7, #12]
 800905e:	f000 fe0b 	bl	8009c78 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8009062:	e00e      	b.n	8009082 <I2C_Master_ISR_DMA+0x1c2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8009064:	68bb      	ldr	r3, [r7, #8]
 8009066:	f003 0320 	and.w	r3, r3, #32
 800906a:	2b00      	cmp	r3, #0
 800906c:	d00a      	beq.n	8009084 <I2C_Master_ISR_DMA+0x1c4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8009074:	2b00      	cmp	r3, #0
 8009076:	d005      	beq.n	8009084 <I2C_Master_ISR_DMA+0x1c4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8009078:	68b9      	ldr	r1, [r7, #8]
 800907a:	68f8      	ldr	r0, [r7, #12]
 800907c:	f000 fb7c 	bl	8009778 <I2C_ITMasterCplt>
 8009080:	e000      	b.n	8009084 <I2C_Master_ISR_DMA+0x1c4>
    if (hi2c->XferCount == 0U)
 8009082:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	2200      	movs	r2, #0
 8009088:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800908c:	2300      	movs	r3, #0
}
 800908e:	4618      	mov	r0, r3
 8009090:	3718      	adds	r7, #24
 8009092:	46bd      	mov	sp, r7
 8009094:	bd80      	pop	{r7, pc}
	...

08009098 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8009098:	b580      	push	{r7, lr}
 800909a:	b088      	sub	sp, #32
 800909c:	af02      	add	r7, sp, #8
 800909e:	60f8      	str	r0, [r7, #12]
 80090a0:	60b9      	str	r1, [r7, #8]
 80090a2:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 80090a4:	4b8d      	ldr	r3, [pc, #564]	@ (80092dc <I2C_Mem_ISR_DMA+0x244>)
 80090a6:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80090ae:	2b01      	cmp	r3, #1
 80090b0:	d101      	bne.n	80090b6 <I2C_Mem_ISR_DMA+0x1e>
 80090b2:	2302      	movs	r3, #2
 80090b4:	e10e      	b.n	80092d4 <I2C_Mem_ISR_DMA+0x23c>
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	2201      	movs	r2, #1
 80090ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80090be:	68bb      	ldr	r3, [r7, #8]
 80090c0:	f003 0310 	and.w	r3, r3, #16
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d016      	beq.n	80090f6 <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d011      	beq.n	80090f6 <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	2210      	movs	r2, #16
 80090d8:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80090de:	f043 0204 	orr.w	r2, r3, #4
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80090e6:	2120      	movs	r1, #32
 80090e8:	68f8      	ldr	r0, [r7, #12]
 80090ea:	f001 f975 	bl	800a3d8 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80090ee:	68f8      	ldr	r0, [r7, #12]
 80090f0:	f000 fed9 	bl	8009ea6 <I2C_Flush_TXDR>
 80090f4:	e0e9      	b.n	80092ca <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 80090f6:	68bb      	ldr	r3, [r7, #8]
 80090f8:	f003 0302 	and.w	r3, r3, #2
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d00e      	beq.n	800911e <I2C_Mem_ISR_DMA+0x86>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8009106:	2b00      	cmp	r3, #0
 8009108:	d009      	beq.n	800911e <I2C_Mem_ISR_DMA+0x86>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	68fa      	ldr	r2, [r7, #12]
 8009110:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8009112:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	f04f 32ff 	mov.w	r2, #4294967295
 800911a:	651a      	str	r2, [r3, #80]	@ 0x50
 800911c:	e0d5      	b.n	80092ca <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800911e:	68bb      	ldr	r3, [r7, #8]
 8009120:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009124:	2b00      	cmp	r3, #0
 8009126:	d05f      	beq.n	80091e8 <I2C_Mem_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800912e:	2b00      	cmp	r3, #0
 8009130:	d05a      	beq.n	80091e8 <I2C_Mem_ISR_DMA+0x150>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8009132:	2101      	movs	r1, #1
 8009134:	68f8      	ldr	r0, [r7, #12]
 8009136:	f001 f9d3 	bl	800a4e0 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800913a:	2110      	movs	r1, #16
 800913c:	68f8      	ldr	r0, [r7, #12]
 800913e:	f001 f94b 	bl	800a3d8 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009146:	b29b      	uxth	r3, r3
 8009148:	2b00      	cmp	r3, #0
 800914a:	d048      	beq.n	80091de <I2C_Mem_ISR_DMA+0x146>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009150:	b29b      	uxth	r3, r3
 8009152:	2bff      	cmp	r3, #255	@ 0xff
 8009154:	d910      	bls.n	8009178 <I2C_Mem_ISR_DMA+0xe0>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	22ff      	movs	r2, #255	@ 0xff
 800915a:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009160:	b299      	uxth	r1, r3
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009166:	b2da      	uxtb	r2, r3
 8009168:	2300      	movs	r3, #0
 800916a:	9300      	str	r3, [sp, #0]
 800916c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8009170:	68f8      	ldr	r0, [r7, #12]
 8009172:	f001 f8ff 	bl	800a374 <I2C_TransferConfig>
 8009176:	e011      	b.n	800919c <I2C_Mem_ISR_DMA+0x104>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800917c:	b29a      	uxth	r2, r3
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009186:	b299      	uxth	r1, r3
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800918c:	b2da      	uxtb	r2, r3
 800918e:	2300      	movs	r3, #0
 8009190:	9300      	str	r3, [sp, #0]
 8009192:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8009196:	68f8      	ldr	r0, [r7, #12]
 8009198:	f001 f8ec 	bl	800a374 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80091a0:	b29a      	uxth	r2, r3
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80091a6:	1ad3      	subs	r3, r2, r3
 80091a8:	b29a      	uxth	r2, r3
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80091b4:	b2db      	uxtb	r3, r3
 80091b6:	2b22      	cmp	r3, #34	@ 0x22
 80091b8:	d108      	bne.n	80091cc <I2C_Mem_ISR_DMA+0x134>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	681a      	ldr	r2, [r3, #0]
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80091c8:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80091ca:	e07e      	b.n	80092ca <I2C_Mem_ISR_DMA+0x232>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	681a      	ldr	r2, [r3, #0]
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80091da:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80091dc:	e075      	b.n	80092ca <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80091de:	2140      	movs	r1, #64	@ 0x40
 80091e0:	68f8      	ldr	r0, [r7, #12]
 80091e2:	f000 fd49 	bl	8009c78 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 80091e6:	e070      	b.n	80092ca <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80091e8:	68bb      	ldr	r3, [r7, #8]
 80091ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d05d      	beq.n	80092ae <I2C_Mem_ISR_DMA+0x216>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d058      	beq.n	80092ae <I2C_Mem_ISR_DMA+0x216>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80091fc:	2101      	movs	r1, #1
 80091fe:	68f8      	ldr	r0, [r7, #12]
 8009200:	f001 f96e 	bl	800a4e0 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8009204:	2110      	movs	r1, #16
 8009206:	68f8      	ldr	r0, [r7, #12]
 8009208:	f001 f8e6 	bl	800a3d8 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009212:	b2db      	uxtb	r3, r3
 8009214:	2b22      	cmp	r3, #34	@ 0x22
 8009216:	d101      	bne.n	800921c <I2C_Mem_ISR_DMA+0x184>
    {
      direction = I2C_GENERATE_START_READ;
 8009218:	4b31      	ldr	r3, [pc, #196]	@ (80092e0 <I2C_Mem_ISR_DMA+0x248>)
 800921a:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009220:	b29b      	uxth	r3, r3
 8009222:	2bff      	cmp	r3, #255	@ 0xff
 8009224:	d910      	bls.n	8009248 <I2C_Mem_ISR_DMA+0x1b0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	22ff      	movs	r2, #255	@ 0xff
 800922a:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009230:	b299      	uxth	r1, r3
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009236:	b2da      	uxtb	r2, r3
 8009238:	697b      	ldr	r3, [r7, #20]
 800923a:	9300      	str	r3, [sp, #0]
 800923c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8009240:	68f8      	ldr	r0, [r7, #12]
 8009242:	f001 f897 	bl	800a374 <I2C_TransferConfig>
 8009246:	e011      	b.n	800926c <I2C_Mem_ISR_DMA+0x1d4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800924c:	b29a      	uxth	r2, r3
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009256:	b299      	uxth	r1, r3
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800925c:	b2da      	uxtb	r2, r3
 800925e:	697b      	ldr	r3, [r7, #20]
 8009260:	9300      	str	r3, [sp, #0]
 8009262:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8009266:	68f8      	ldr	r0, [r7, #12]
 8009268:	f001 f884 	bl	800a374 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009270:	b29a      	uxth	r2, r3
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009276:	1ad3      	subs	r3, r2, r3
 8009278:	b29a      	uxth	r2, r3
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009284:	b2db      	uxtb	r3, r3
 8009286:	2b22      	cmp	r3, #34	@ 0x22
 8009288:	d108      	bne.n	800929c <I2C_Mem_ISR_DMA+0x204>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	681a      	ldr	r2, [r3, #0]
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009298:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800929a:	e016      	b.n	80092ca <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	681a      	ldr	r2, [r3, #0]
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80092aa:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80092ac:	e00d      	b.n	80092ca <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80092ae:	68bb      	ldr	r3, [r7, #8]
 80092b0:	f003 0320 	and.w	r3, r3, #32
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d008      	beq.n	80092ca <I2C_Mem_ISR_DMA+0x232>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d003      	beq.n	80092ca <I2C_Mem_ISR_DMA+0x232>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 80092c2:	68b9      	ldr	r1, [r7, #8]
 80092c4:	68f8      	ldr	r0, [r7, #12]
 80092c6:	f000 fa57 	bl	8009778 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	2200      	movs	r2, #0
 80092ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80092d2:	2300      	movs	r3, #0
}
 80092d4:	4618      	mov	r0, r3
 80092d6:	3718      	adds	r7, #24
 80092d8:	46bd      	mov	sp, r7
 80092da:	bd80      	pop	{r7, pc}
 80092dc:	80002000 	.word	0x80002000
 80092e0:	80002400 	.word	0x80002400

080092e4 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 80092e4:	b580      	push	{r7, lr}
 80092e6:	b088      	sub	sp, #32
 80092e8:	af00      	add	r7, sp, #0
 80092ea:	60f8      	str	r0, [r7, #12]
 80092ec:	60b9      	str	r1, [r7, #8]
 80092ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092f4:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 80092f6:	2300      	movs	r3, #0
 80092f8:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009300:	2b01      	cmp	r3, #1
 8009302:	d101      	bne.n	8009308 <I2C_Slave_ISR_DMA+0x24>
 8009304:	2302      	movs	r3, #2
 8009306:	e0c0      	b.n	800948a <I2C_Slave_ISR_DMA+0x1a6>
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	2201      	movs	r2, #1
 800930c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8009310:	68bb      	ldr	r3, [r7, #8]
 8009312:	f003 0320 	and.w	r3, r3, #32
 8009316:	2b00      	cmp	r3, #0
 8009318:	d009      	beq.n	800932e <I2C_Slave_ISR_DMA+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8009320:	2b00      	cmp	r3, #0
 8009322:	d004      	beq.n	800932e <I2C_Slave_ISR_DMA+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8009324:	68b9      	ldr	r1, [r7, #8]
 8009326:	68f8      	ldr	r0, [r7, #12]
 8009328:	f000 faee 	bl	8009908 <I2C_ITSlaveCplt>
 800932c:	e0a8      	b.n	8009480 <I2C_Slave_ISR_DMA+0x19c>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800932e:	68bb      	ldr	r3, [r7, #8]
 8009330:	f003 0310 	and.w	r3, r3, #16
 8009334:	2b00      	cmp	r3, #0
 8009336:	f000 8095 	beq.w	8009464 <I2C_Slave_ISR_DMA+0x180>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8009340:	2b00      	cmp	r3, #0
 8009342:	f000 808f 	beq.w	8009464 <I2C_Slave_ISR_DMA+0x180>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800934c:	2b00      	cmp	r3, #0
 800934e:	d104      	bne.n	800935a <I2C_Slave_ISR_DMA+0x76>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8009356:	2b00      	cmp	r3, #0
 8009358:	d07d      	beq.n	8009456 <I2C_Slave_ISR_DMA+0x172>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800935e:	2b00      	cmp	r3, #0
 8009360:	d00c      	beq.n	800937c <I2C_Slave_ISR_DMA+0x98>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009368:	2b00      	cmp	r3, #0
 800936a:	d007      	beq.n	800937c <I2C_Slave_ISR_DMA+0x98>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	685b      	ldr	r3, [r3, #4]
 8009374:	2b00      	cmp	r3, #0
 8009376:	d101      	bne.n	800937c <I2C_Slave_ISR_DMA+0x98>
          {
            treatdmanack = 1U;
 8009378:	2301      	movs	r3, #1
 800937a:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009380:	2b00      	cmp	r3, #0
 8009382:	d00c      	beq.n	800939e <I2C_Slave_ISR_DMA+0xba>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800938a:	2b00      	cmp	r3, #0
 800938c:	d007      	beq.n	800939e <I2C_Slave_ISR_DMA+0xba>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	685b      	ldr	r3, [r3, #4]
 8009396:	2b00      	cmp	r3, #0
 8009398:	d101      	bne.n	800939e <I2C_Slave_ISR_DMA+0xba>
          {
            treatdmanack = 1U;
 800939a:	2301      	movs	r3, #1
 800939c:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 800939e:	69fb      	ldr	r3, [r7, #28]
 80093a0:	2b01      	cmp	r3, #1
 80093a2:	d128      	bne.n	80093f6 <I2C_Slave_ISR_DMA+0x112>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80093aa:	b2db      	uxtb	r3, r3
 80093ac:	2b28      	cmp	r3, #40	@ 0x28
 80093ae:	d108      	bne.n	80093c2 <I2C_Slave_ISR_DMA+0xde>
 80093b0:	69bb      	ldr	r3, [r7, #24]
 80093b2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80093b6:	d104      	bne.n	80093c2 <I2C_Slave_ISR_DMA+0xde>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 80093b8:	68b9      	ldr	r1, [r7, #8]
 80093ba:	68f8      	ldr	r0, [r7, #12]
 80093bc:	f000 fc08 	bl	8009bd0 <I2C_ITListenCplt>
 80093c0:	e048      	b.n	8009454 <I2C_Slave_ISR_DMA+0x170>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80093c8:	b2db      	uxtb	r3, r3
 80093ca:	2b29      	cmp	r3, #41	@ 0x29
 80093cc:	d10e      	bne.n	80093ec <I2C_Slave_ISR_DMA+0x108>
 80093ce:	69bb      	ldr	r3, [r7, #24]
 80093d0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80093d4:	d00a      	beq.n	80093ec <I2C_Slave_ISR_DMA+0x108>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	2210      	movs	r2, #16
 80093dc:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 80093de:	68f8      	ldr	r0, [r7, #12]
 80093e0:	f000 fd61 	bl	8009ea6 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 80093e4:	68f8      	ldr	r0, [r7, #12]
 80093e6:	f000 f96a 	bl	80096be <I2C_ITSlaveSeqCplt>
 80093ea:	e033      	b.n	8009454 <I2C_Slave_ISR_DMA+0x170>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	2210      	movs	r2, #16
 80093f2:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 80093f4:	e034      	b.n	8009460 <I2C_Slave_ISR_DMA+0x17c>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	2210      	movs	r2, #16
 80093fc:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009402:	f043 0204 	orr.w	r2, r3, #4
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009410:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8009412:	69bb      	ldr	r3, [r7, #24]
 8009414:	2b00      	cmp	r3, #0
 8009416:	d003      	beq.n	8009420 <I2C_Slave_ISR_DMA+0x13c>
 8009418:	69bb      	ldr	r3, [r7, #24]
 800941a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800941e:	d11f      	bne.n	8009460 <I2C_Slave_ISR_DMA+0x17c>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8009420:	7dfb      	ldrb	r3, [r7, #23]
 8009422:	2b21      	cmp	r3, #33	@ 0x21
 8009424:	d002      	beq.n	800942c <I2C_Slave_ISR_DMA+0x148>
 8009426:	7dfb      	ldrb	r3, [r7, #23]
 8009428:	2b29      	cmp	r3, #41	@ 0x29
 800942a:	d103      	bne.n	8009434 <I2C_Slave_ISR_DMA+0x150>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	2221      	movs	r2, #33	@ 0x21
 8009430:	631a      	str	r2, [r3, #48]	@ 0x30
 8009432:	e008      	b.n	8009446 <I2C_Slave_ISR_DMA+0x162>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8009434:	7dfb      	ldrb	r3, [r7, #23]
 8009436:	2b22      	cmp	r3, #34	@ 0x22
 8009438:	d002      	beq.n	8009440 <I2C_Slave_ISR_DMA+0x15c>
 800943a:	7dfb      	ldrb	r3, [r7, #23]
 800943c:	2b2a      	cmp	r3, #42	@ 0x2a
 800943e:	d102      	bne.n	8009446 <I2C_Slave_ISR_DMA+0x162>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	2222      	movs	r2, #34	@ 0x22
 8009444:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800944a:	4619      	mov	r1, r3
 800944c:	68f8      	ldr	r0, [r7, #12]
 800944e:	f000 fc13 	bl	8009c78 <I2C_ITError>
      if (treatdmanack == 1U)
 8009452:	e005      	b.n	8009460 <I2C_Slave_ISR_DMA+0x17c>
 8009454:	e004      	b.n	8009460 <I2C_Slave_ISR_DMA+0x17c>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	2210      	movs	r2, #16
 800945c:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800945e:	e00f      	b.n	8009480 <I2C_Slave_ISR_DMA+0x19c>
      if (treatdmanack == 1U)
 8009460:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8009462:	e00d      	b.n	8009480 <I2C_Slave_ISR_DMA+0x19c>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8009464:	68bb      	ldr	r3, [r7, #8]
 8009466:	f003 0308 	and.w	r3, r3, #8
 800946a:	2b00      	cmp	r3, #0
 800946c:	d008      	beq.n	8009480 <I2C_Slave_ISR_DMA+0x19c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8009474:	2b00      	cmp	r3, #0
 8009476:	d003      	beq.n	8009480 <I2C_Slave_ISR_DMA+0x19c>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8009478:	68b9      	ldr	r1, [r7, #8]
 800947a:	68f8      	ldr	r0, [r7, #12]
 800947c:	f000 f85e 	bl	800953c <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	2200      	movs	r2, #0
 8009484:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8009488:	2300      	movs	r3, #0
}
 800948a:	4618      	mov	r0, r3
 800948c:	3720      	adds	r7, #32
 800948e:	46bd      	mov	sp, r7
 8009490:	bd80      	pop	{r7, pc}
	...

08009494 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8009494:	b580      	push	{r7, lr}
 8009496:	b086      	sub	sp, #24
 8009498:	af02      	add	r7, sp, #8
 800949a:	60f8      	str	r0, [r7, #12]
 800949c:	4608      	mov	r0, r1
 800949e:	4611      	mov	r1, r2
 80094a0:	461a      	mov	r2, r3
 80094a2:	4603      	mov	r3, r0
 80094a4:	817b      	strh	r3, [r7, #10]
 80094a6:	460b      	mov	r3, r1
 80094a8:	813b      	strh	r3, [r7, #8]
 80094aa:	4613      	mov	r3, r2
 80094ac:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80094ae:	88fb      	ldrh	r3, [r7, #6]
 80094b0:	b2da      	uxtb	r2, r3
 80094b2:	8979      	ldrh	r1, [r7, #10]
 80094b4:	4b20      	ldr	r3, [pc, #128]	@ (8009538 <I2C_RequestMemoryWrite+0xa4>)
 80094b6:	9300      	str	r3, [sp, #0]
 80094b8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80094bc:	68f8      	ldr	r0, [r7, #12]
 80094be:	f000 ff59 	bl	800a374 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80094c2:	69fa      	ldr	r2, [r7, #28]
 80094c4:	69b9      	ldr	r1, [r7, #24]
 80094c6:	68f8      	ldr	r0, [r7, #12]
 80094c8:	f000 fdea 	bl	800a0a0 <I2C_WaitOnTXISFlagUntilTimeout>
 80094cc:	4603      	mov	r3, r0
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d001      	beq.n	80094d6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80094d2:	2301      	movs	r3, #1
 80094d4:	e02c      	b.n	8009530 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80094d6:	88fb      	ldrh	r3, [r7, #6]
 80094d8:	2b01      	cmp	r3, #1
 80094da:	d105      	bne.n	80094e8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80094dc:	893b      	ldrh	r3, [r7, #8]
 80094de:	b2da      	uxtb	r2, r3
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	629a      	str	r2, [r3, #40]	@ 0x28
 80094e6:	e015      	b.n	8009514 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80094e8:	893b      	ldrh	r3, [r7, #8]
 80094ea:	0a1b      	lsrs	r3, r3, #8
 80094ec:	b29b      	uxth	r3, r3
 80094ee:	b2da      	uxtb	r2, r3
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80094f6:	69fa      	ldr	r2, [r7, #28]
 80094f8:	69b9      	ldr	r1, [r7, #24]
 80094fa:	68f8      	ldr	r0, [r7, #12]
 80094fc:	f000 fdd0 	bl	800a0a0 <I2C_WaitOnTXISFlagUntilTimeout>
 8009500:	4603      	mov	r3, r0
 8009502:	2b00      	cmp	r3, #0
 8009504:	d001      	beq.n	800950a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8009506:	2301      	movs	r3, #1
 8009508:	e012      	b.n	8009530 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800950a:	893b      	ldrh	r3, [r7, #8]
 800950c:	b2da      	uxtb	r2, r3
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8009514:	69fb      	ldr	r3, [r7, #28]
 8009516:	9300      	str	r3, [sp, #0]
 8009518:	69bb      	ldr	r3, [r7, #24]
 800951a:	2200      	movs	r2, #0
 800951c:	2180      	movs	r1, #128	@ 0x80
 800951e:	68f8      	ldr	r0, [r7, #12]
 8009520:	f000 fd65 	bl	8009fee <I2C_WaitOnFlagUntilTimeout>
 8009524:	4603      	mov	r3, r0
 8009526:	2b00      	cmp	r3, #0
 8009528:	d001      	beq.n	800952e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800952a:	2301      	movs	r3, #1
 800952c:	e000      	b.n	8009530 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800952e:	2300      	movs	r3, #0
}
 8009530:	4618      	mov	r0, r3
 8009532:	3710      	adds	r7, #16
 8009534:	46bd      	mov	sp, r7
 8009536:	bd80      	pop	{r7, pc}
 8009538:	80002000 	.word	0x80002000

0800953c <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800953c:	b580      	push	{r7, lr}
 800953e:	b084      	sub	sp, #16
 8009540:	af00      	add	r7, sp, #0
 8009542:	6078      	str	r0, [r7, #4]
 8009544:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800954c:	b2db      	uxtb	r3, r3
 800954e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8009552:	2b28      	cmp	r3, #40	@ 0x28
 8009554:	d16a      	bne.n	800962c <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	699b      	ldr	r3, [r3, #24]
 800955c:	0c1b      	lsrs	r3, r3, #16
 800955e:	b2db      	uxtb	r3, r3
 8009560:	f003 0301 	and.w	r3, r3, #1
 8009564:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	699b      	ldr	r3, [r3, #24]
 800956c:	0c1b      	lsrs	r3, r3, #16
 800956e:	b29b      	uxth	r3, r3
 8009570:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8009574:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	689b      	ldr	r3, [r3, #8]
 800957c:	b29b      	uxth	r3, r3
 800957e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009582:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	68db      	ldr	r3, [r3, #12]
 800958a:	b29b      	uxth	r3, r3
 800958c:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8009590:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	68db      	ldr	r3, [r3, #12]
 8009596:	2b02      	cmp	r3, #2
 8009598:	d138      	bne.n	800960c <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800959a:	897b      	ldrh	r3, [r7, #10]
 800959c:	09db      	lsrs	r3, r3, #7
 800959e:	b29a      	uxth	r2, r3
 80095a0:	89bb      	ldrh	r3, [r7, #12]
 80095a2:	4053      	eors	r3, r2
 80095a4:	b29b      	uxth	r3, r3
 80095a6:	f003 0306 	and.w	r3, r3, #6
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d11c      	bne.n	80095e8 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 80095ae:	897b      	ldrh	r3, [r7, #10]
 80095b0:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80095b6:	1c5a      	adds	r2, r3, #1
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80095c0:	2b02      	cmp	r3, #2
 80095c2:	d13b      	bne.n	800963c <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	2200      	movs	r2, #0
 80095c8:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	2208      	movs	r2, #8
 80095d0:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	2200      	movs	r2, #0
 80095d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80095da:	89ba      	ldrh	r2, [r7, #12]
 80095dc:	7bfb      	ldrb	r3, [r7, #15]
 80095de:	4619      	mov	r1, r3
 80095e0:	6878      	ldr	r0, [r7, #4]
 80095e2:	f7ff fb3e 	bl	8008c62 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80095e6:	e029      	b.n	800963c <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 80095e8:	893b      	ldrh	r3, [r7, #8]
 80095ea:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80095ec:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80095f0:	6878      	ldr	r0, [r7, #4]
 80095f2:	f000 ff75 	bl	800a4e0 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	2200      	movs	r2, #0
 80095fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80095fe:	89ba      	ldrh	r2, [r7, #12]
 8009600:	7bfb      	ldrb	r3, [r7, #15]
 8009602:	4619      	mov	r1, r3
 8009604:	6878      	ldr	r0, [r7, #4]
 8009606:	f7ff fb2c 	bl	8008c62 <HAL_I2C_AddrCallback>
}
 800960a:	e017      	b.n	800963c <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800960c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8009610:	6878      	ldr	r0, [r7, #4]
 8009612:	f000 ff65 	bl	800a4e0 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	2200      	movs	r2, #0
 800961a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800961e:	89ba      	ldrh	r2, [r7, #12]
 8009620:	7bfb      	ldrb	r3, [r7, #15]
 8009622:	4619      	mov	r1, r3
 8009624:	6878      	ldr	r0, [r7, #4]
 8009626:	f7ff fb1c 	bl	8008c62 <HAL_I2C_AddrCallback>
}
 800962a:	e007      	b.n	800963c <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	2208      	movs	r2, #8
 8009632:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	2200      	movs	r2, #0
 8009638:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 800963c:	bf00      	nop
 800963e:	3710      	adds	r7, #16
 8009640:	46bd      	mov	sp, r7
 8009642:	bd80      	pop	{r7, pc}

08009644 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8009644:	b580      	push	{r7, lr}
 8009646:	b082      	sub	sp, #8
 8009648:	af00      	add	r7, sp, #0
 800964a:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	2200      	movs	r2, #0
 8009650:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800965a:	b2db      	uxtb	r3, r3
 800965c:	2b21      	cmp	r3, #33	@ 0x21
 800965e:	d115      	bne.n	800968c <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	2220      	movs	r2, #32
 8009664:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	2211      	movs	r2, #17
 800966c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	2200      	movs	r2, #0
 8009672:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8009674:	2101      	movs	r1, #1
 8009676:	6878      	ldr	r0, [r7, #4]
 8009678:	f000 ff32 	bl	800a4e0 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	2200      	movs	r2, #0
 8009680:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8009684:	6878      	ldr	r0, [r7, #4]
 8009686:	f7ff fac4 	bl	8008c12 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800968a:	e014      	b.n	80096b6 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	2220      	movs	r2, #32
 8009690:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	2212      	movs	r2, #18
 8009698:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	2200      	movs	r2, #0
 800969e:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80096a0:	2102      	movs	r1, #2
 80096a2:	6878      	ldr	r0, [r7, #4]
 80096a4:	f000 ff1c 	bl	800a4e0 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	2200      	movs	r2, #0
 80096ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 80096b0:	6878      	ldr	r0, [r7, #4]
 80096b2:	f7ff fab8 	bl	8008c26 <HAL_I2C_MasterRxCpltCallback>
}
 80096b6:	bf00      	nop
 80096b8:	3708      	adds	r7, #8
 80096ba:	46bd      	mov	sp, r7
 80096bc:	bd80      	pop	{r7, pc}

080096be <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80096be:	b580      	push	{r7, lr}
 80096c0:	b084      	sub	sp, #16
 80096c2:	af00      	add	r7, sp, #0
 80096c4:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	2200      	movs	r2, #0
 80096d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d008      	beq.n	80096f2 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	681a      	ldr	r2, [r3, #0]
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80096ee:	601a      	str	r2, [r3, #0]
 80096f0:	e00c      	b.n	800970c <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d007      	beq.n	800970c <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	681a      	ldr	r2, [r3, #0]
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800970a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009712:	b2db      	uxtb	r3, r3
 8009714:	2b29      	cmp	r3, #41	@ 0x29
 8009716:	d112      	bne.n	800973e <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	2228      	movs	r2, #40	@ 0x28
 800971c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	2221      	movs	r2, #33	@ 0x21
 8009724:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8009726:	2101      	movs	r1, #1
 8009728:	6878      	ldr	r0, [r7, #4]
 800972a:	f000 fed9 	bl	800a4e0 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	2200      	movs	r2, #0
 8009732:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8009736:	6878      	ldr	r0, [r7, #4]
 8009738:	f7ff fa7f 	bl	8008c3a <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800973c:	e017      	b.n	800976e <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009744:	b2db      	uxtb	r3, r3
 8009746:	2b2a      	cmp	r3, #42	@ 0x2a
 8009748:	d111      	bne.n	800976e <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	2228      	movs	r2, #40	@ 0x28
 800974e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	2222      	movs	r2, #34	@ 0x22
 8009756:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8009758:	2102      	movs	r1, #2
 800975a:	6878      	ldr	r0, [r7, #4]
 800975c:	f000 fec0 	bl	800a4e0 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	2200      	movs	r2, #0
 8009764:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8009768:	6878      	ldr	r0, [r7, #4]
 800976a:	f7ff fa70 	bl	8008c4e <HAL_I2C_SlaveRxCpltCallback>
}
 800976e:	bf00      	nop
 8009770:	3710      	adds	r7, #16
 8009772:	46bd      	mov	sp, r7
 8009774:	bd80      	pop	{r7, pc}
	...

08009778 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8009778:	b580      	push	{r7, lr}
 800977a:	b086      	sub	sp, #24
 800977c:	af00      	add	r7, sp, #0
 800977e:	6078      	str	r0, [r7, #4]
 8009780:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8009782:	683b      	ldr	r3, [r7, #0]
 8009784:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	2220      	movs	r2, #32
 800978c:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009794:	b2db      	uxtb	r3, r3
 8009796:	2b21      	cmp	r3, #33	@ 0x21
 8009798:	d107      	bne.n	80097aa <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800979a:	2101      	movs	r1, #1
 800979c:	6878      	ldr	r0, [r7, #4]
 800979e:	f000 fe9f 	bl	800a4e0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	2211      	movs	r2, #17
 80097a6:	631a      	str	r2, [r3, #48]	@ 0x30
 80097a8:	e00c      	b.n	80097c4 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80097b0:	b2db      	uxtb	r3, r3
 80097b2:	2b22      	cmp	r3, #34	@ 0x22
 80097b4:	d106      	bne.n	80097c4 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80097b6:	2102      	movs	r1, #2
 80097b8:	6878      	ldr	r0, [r7, #4]
 80097ba:	f000 fe91 	bl	800a4e0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	2212      	movs	r2, #18
 80097c2:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	6859      	ldr	r1, [r3, #4]
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	681a      	ldr	r2, [r3, #0]
 80097ce:	4b4c      	ldr	r3, [pc, #304]	@ (8009900 <I2C_ITMasterCplt+0x188>)
 80097d0:	400b      	ands	r3, r1
 80097d2:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	2200      	movs	r2, #0
 80097d8:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	4a49      	ldr	r2, [pc, #292]	@ (8009904 <I2C_ITMasterCplt+0x18c>)
 80097de:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 80097e0:	697b      	ldr	r3, [r7, #20]
 80097e2:	f003 0310 	and.w	r3, r3, #16
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d009      	beq.n	80097fe <I2C_ITMasterCplt+0x86>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	2210      	movs	r2, #16
 80097f0:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80097f6:	f043 0204 	orr.w	r2, r3, #4
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009804:	b2db      	uxtb	r3, r3
 8009806:	2b60      	cmp	r3, #96	@ 0x60
 8009808:	d10a      	bne.n	8009820 <I2C_ITMasterCplt+0xa8>
 800980a:	697b      	ldr	r3, [r7, #20]
 800980c:	f003 0304 	and.w	r3, r3, #4
 8009810:	2b00      	cmp	r3, #0
 8009812:	d005      	beq.n	8009820 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800981a:	b2db      	uxtb	r3, r3
 800981c:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 800981e:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8009820:	6878      	ldr	r0, [r7, #4]
 8009822:	f000 fb40 	bl	8009ea6 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800982a:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009832:	b2db      	uxtb	r3, r3
 8009834:	2b60      	cmp	r3, #96	@ 0x60
 8009836:	d002      	beq.n	800983e <I2C_ITMasterCplt+0xc6>
 8009838:	693b      	ldr	r3, [r7, #16]
 800983a:	2b00      	cmp	r3, #0
 800983c:	d006      	beq.n	800984c <I2C_ITMasterCplt+0xd4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009842:	4619      	mov	r1, r3
 8009844:	6878      	ldr	r0, [r7, #4]
 8009846:	f000 fa17 	bl	8009c78 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 800984a:	e054      	b.n	80098f6 <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009852:	b2db      	uxtb	r3, r3
 8009854:	2b21      	cmp	r3, #33	@ 0x21
 8009856:	d124      	bne.n	80098a2 <I2C_ITMasterCplt+0x12a>
    hi2c->State = HAL_I2C_STATE_READY;
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	2220      	movs	r2, #32
 800985c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	2200      	movs	r2, #0
 8009864:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800986c:	b2db      	uxtb	r3, r3
 800986e:	2b40      	cmp	r3, #64	@ 0x40
 8009870:	d10b      	bne.n	800988a <I2C_ITMasterCplt+0x112>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	2200      	movs	r2, #0
 8009876:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	2200      	movs	r2, #0
 800987e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8009882:	6878      	ldr	r0, [r7, #4]
 8009884:	f7ff fa05 	bl	8008c92 <HAL_I2C_MemTxCpltCallback>
}
 8009888:	e035      	b.n	80098f6 <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	2200      	movs	r2, #0
 800988e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	2200      	movs	r2, #0
 8009896:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800989a:	6878      	ldr	r0, [r7, #4]
 800989c:	f7ff f9b9 	bl	8008c12 <HAL_I2C_MasterTxCpltCallback>
}
 80098a0:	e029      	b.n	80098f6 <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80098a8:	b2db      	uxtb	r3, r3
 80098aa:	2b22      	cmp	r3, #34	@ 0x22
 80098ac:	d123      	bne.n	80098f6 <I2C_ITMasterCplt+0x17e>
    hi2c->State = HAL_I2C_STATE_READY;
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	2220      	movs	r2, #32
 80098b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	2200      	movs	r2, #0
 80098ba:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80098c2:	b2db      	uxtb	r3, r3
 80098c4:	2b40      	cmp	r3, #64	@ 0x40
 80098c6:	d10b      	bne.n	80098e0 <I2C_ITMasterCplt+0x168>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	2200      	movs	r2, #0
 80098cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	2200      	movs	r2, #0
 80098d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 80098d8:	6878      	ldr	r0, [r7, #4]
 80098da:	f7fb fbe5 	bl	80050a8 <HAL_I2C_MemRxCpltCallback>
}
 80098de:	e00a      	b.n	80098f6 <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	2200      	movs	r2, #0
 80098e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	2200      	movs	r2, #0
 80098ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80098f0:	6878      	ldr	r0, [r7, #4]
 80098f2:	f7ff f998 	bl	8008c26 <HAL_I2C_MasterRxCpltCallback>
}
 80098f6:	bf00      	nop
 80098f8:	3718      	adds	r7, #24
 80098fa:	46bd      	mov	sp, r7
 80098fc:	bd80      	pop	{r7, pc}
 80098fe:	bf00      	nop
 8009900:	fe00e800 	.word	0xfe00e800
 8009904:	ffff0000 	.word	0xffff0000

08009908 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8009908:	b580      	push	{r7, lr}
 800990a:	b086      	sub	sp, #24
 800990c:	af00      	add	r7, sp, #0
 800990e:	6078      	str	r0, [r7, #4]
 8009910:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800991a:	683b      	ldr	r3, [r7, #0]
 800991c:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009922:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800992a:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	2220      	movs	r2, #32
 8009932:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8009934:	7afb      	ldrb	r3, [r7, #11]
 8009936:	2b21      	cmp	r3, #33	@ 0x21
 8009938:	d002      	beq.n	8009940 <I2C_ITSlaveCplt+0x38>
 800993a:	7afb      	ldrb	r3, [r7, #11]
 800993c:	2b29      	cmp	r3, #41	@ 0x29
 800993e:	d108      	bne.n	8009952 <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8009940:	f248 0101 	movw	r1, #32769	@ 0x8001
 8009944:	6878      	ldr	r0, [r7, #4]
 8009946:	f000 fdcb 	bl	800a4e0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	2221      	movs	r2, #33	@ 0x21
 800994e:	631a      	str	r2, [r3, #48]	@ 0x30
 8009950:	e019      	b.n	8009986 <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8009952:	7afb      	ldrb	r3, [r7, #11]
 8009954:	2b22      	cmp	r3, #34	@ 0x22
 8009956:	d002      	beq.n	800995e <I2C_ITSlaveCplt+0x56>
 8009958:	7afb      	ldrb	r3, [r7, #11]
 800995a:	2b2a      	cmp	r3, #42	@ 0x2a
 800995c:	d108      	bne.n	8009970 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800995e:	f248 0102 	movw	r1, #32770	@ 0x8002
 8009962:	6878      	ldr	r0, [r7, #4]
 8009964:	f000 fdbc 	bl	800a4e0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	2222      	movs	r2, #34	@ 0x22
 800996c:	631a      	str	r2, [r3, #48]	@ 0x30
 800996e:	e00a      	b.n	8009986 <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8009970:	7afb      	ldrb	r3, [r7, #11]
 8009972:	2b28      	cmp	r3, #40	@ 0x28
 8009974:	d107      	bne.n	8009986 <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8009976:	f248 0103 	movw	r1, #32771	@ 0x8003
 800997a:	6878      	ldr	r0, [r7, #4]
 800997c:	f000 fdb0 	bl	800a4e0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	2200      	movs	r2, #0
 8009984:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	685a      	ldr	r2, [r3, #4]
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009994:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	6859      	ldr	r1, [r3, #4]
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	681a      	ldr	r2, [r3, #0]
 80099a0:	4b89      	ldr	r3, [pc, #548]	@ (8009bc8 <I2C_ITSlaveCplt+0x2c0>)
 80099a2:	400b      	ands	r3, r1
 80099a4:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80099a6:	6878      	ldr	r0, [r7, #4]
 80099a8:	f000 fa7d 	bl	8009ea6 <I2C_Flush_TXDR>

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80099ac:	693b      	ldr	r3, [r7, #16]
 80099ae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d013      	beq.n	80099de <I2C_ITSlaveCplt+0xd6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	681a      	ldr	r2, [r3, #0]
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80099c4:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d01f      	beq.n	8009a0e <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	685b      	ldr	r3, [r3, #4]
 80099d6:	b29a      	uxth	r2, r3
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80099dc:	e017      	b.n	8009a0e <I2C_ITSlaveCplt+0x106>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80099de:	693b      	ldr	r3, [r7, #16]
 80099e0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d012      	beq.n	8009a0e <I2C_ITSlaveCplt+0x106>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	681a      	ldr	r2, [r3, #0]
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80099f6:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d006      	beq.n	8009a0e <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	685b      	ldr	r3, [r3, #4]
 8009a08:	b29a      	uxth	r2, r3
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8009a0e:	697b      	ldr	r3, [r7, #20]
 8009a10:	f003 0304 	and.w	r3, r3, #4
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d020      	beq.n	8009a5a <I2C_ITSlaveCplt+0x152>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8009a18:	697b      	ldr	r3, [r7, #20]
 8009a1a:	f023 0304 	bic.w	r3, r3, #4
 8009a1e:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a2a:	b2d2      	uxtb	r2, r2
 8009a2c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a32:	1c5a      	adds	r2, r3, #1
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d00c      	beq.n	8009a5a <I2C_ITSlaveCplt+0x152>
    {
      hi2c->XferSize--;
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009a44:	3b01      	subs	r3, #1
 8009a46:	b29a      	uxth	r2, r3
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009a50:	b29b      	uxth	r3, r3
 8009a52:	3b01      	subs	r3, #1
 8009a54:	b29a      	uxth	r2, r3
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009a5e:	b29b      	uxth	r3, r3
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d005      	beq.n	8009a70 <I2C_ITSlaveCplt+0x168>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009a68:	f043 0204 	orr.w	r2, r3, #4
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8009a70:	697b      	ldr	r3, [r7, #20]
 8009a72:	f003 0310 	and.w	r3, r3, #16
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d049      	beq.n	8009b0e <I2C_ITSlaveCplt+0x206>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8009a7a:	693b      	ldr	r3, [r7, #16]
 8009a7c:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d044      	beq.n	8009b0e <I2C_ITSlaveCplt+0x206>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009a88:	b29b      	uxth	r3, r3
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d128      	bne.n	8009ae0 <I2C_ITSlaveCplt+0x1d8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009a94:	b2db      	uxtb	r3, r3
 8009a96:	2b28      	cmp	r3, #40	@ 0x28
 8009a98:	d108      	bne.n	8009aac <I2C_ITSlaveCplt+0x1a4>
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009aa0:	d104      	bne.n	8009aac <I2C_ITSlaveCplt+0x1a4>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8009aa2:	6979      	ldr	r1, [r7, #20]
 8009aa4:	6878      	ldr	r0, [r7, #4]
 8009aa6:	f000 f893 	bl	8009bd0 <I2C_ITListenCplt>
 8009aaa:	e030      	b.n	8009b0e <I2C_ITSlaveCplt+0x206>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009ab2:	b2db      	uxtb	r3, r3
 8009ab4:	2b29      	cmp	r3, #41	@ 0x29
 8009ab6:	d10e      	bne.n	8009ad6 <I2C_ITSlaveCplt+0x1ce>
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8009abe:	d00a      	beq.n	8009ad6 <I2C_ITSlaveCplt+0x1ce>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	2210      	movs	r2, #16
 8009ac6:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8009ac8:	6878      	ldr	r0, [r7, #4]
 8009aca:	f000 f9ec 	bl	8009ea6 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8009ace:	6878      	ldr	r0, [r7, #4]
 8009ad0:	f7ff fdf5 	bl	80096be <I2C_ITSlaveSeqCplt>
 8009ad4:	e01b      	b.n	8009b0e <I2C_ITSlaveCplt+0x206>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	2210      	movs	r2, #16
 8009adc:	61da      	str	r2, [r3, #28]
 8009ade:	e016      	b.n	8009b0e <I2C_ITSlaveCplt+0x206>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	2210      	movs	r2, #16
 8009ae6:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009aec:	f043 0204 	orr.w	r2, r3, #4
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d003      	beq.n	8009b02 <I2C_ITSlaveCplt+0x1fa>
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009b00:	d105      	bne.n	8009b0e <I2C_ITSlaveCplt+0x206>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009b06:	4619      	mov	r1, r3
 8009b08:	6878      	ldr	r0, [r7, #4]
 8009b0a:	f000 f8b5 	bl	8009c78 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	2200      	movs	r2, #0
 8009b12:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	2200      	movs	r2, #0
 8009b1a:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d010      	beq.n	8009b46 <I2C_ITSlaveCplt+0x23e>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009b28:	4619      	mov	r1, r3
 8009b2a:	6878      	ldr	r0, [r7, #4]
 8009b2c:	f000 f8a4 	bl	8009c78 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009b36:	b2db      	uxtb	r3, r3
 8009b38:	2b28      	cmp	r3, #40	@ 0x28
 8009b3a:	d141      	bne.n	8009bc0 <I2C_ITSlaveCplt+0x2b8>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8009b3c:	6979      	ldr	r1, [r7, #20]
 8009b3e:	6878      	ldr	r0, [r7, #4]
 8009b40:	f000 f846 	bl	8009bd0 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8009b44:	e03c      	b.n	8009bc0 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b4a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8009b4e:	d014      	beq.n	8009b7a <I2C_ITSlaveCplt+0x272>
    I2C_ITSlaveSeqCplt(hi2c);
 8009b50:	6878      	ldr	r0, [r7, #4]
 8009b52:	f7ff fdb4 	bl	80096be <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	4a1c      	ldr	r2, [pc, #112]	@ (8009bcc <I2C_ITSlaveCplt+0x2c4>)
 8009b5a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	2220      	movs	r2, #32
 8009b60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	2200      	movs	r2, #0
 8009b68:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	2200      	movs	r2, #0
 8009b6e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8009b72:	6878      	ldr	r0, [r7, #4]
 8009b74:	f7ff f883 	bl	8008c7e <HAL_I2C_ListenCpltCallback>
}
 8009b78:	e022      	b.n	8009bc0 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009b80:	b2db      	uxtb	r3, r3
 8009b82:	2b22      	cmp	r3, #34	@ 0x22
 8009b84:	d10e      	bne.n	8009ba4 <I2C_ITSlaveCplt+0x29c>
    hi2c->State = HAL_I2C_STATE_READY;
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	2220      	movs	r2, #32
 8009b8a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	2200      	movs	r2, #0
 8009b92:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	2200      	movs	r2, #0
 8009b98:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8009b9c:	6878      	ldr	r0, [r7, #4]
 8009b9e:	f7ff f856 	bl	8008c4e <HAL_I2C_SlaveRxCpltCallback>
}
 8009ba2:	e00d      	b.n	8009bc0 <I2C_ITSlaveCplt+0x2b8>
    hi2c->State = HAL_I2C_STATE_READY;
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	2220      	movs	r2, #32
 8009ba8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	2200      	movs	r2, #0
 8009bb0:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	2200      	movs	r2, #0
 8009bb6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8009bba:	6878      	ldr	r0, [r7, #4]
 8009bbc:	f7ff f83d 	bl	8008c3a <HAL_I2C_SlaveTxCpltCallback>
}
 8009bc0:	bf00      	nop
 8009bc2:	3718      	adds	r7, #24
 8009bc4:	46bd      	mov	sp, r7
 8009bc6:	bd80      	pop	{r7, pc}
 8009bc8:	fe00e800 	.word	0xfe00e800
 8009bcc:	ffff0000 	.word	0xffff0000

08009bd0 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8009bd0:	b580      	push	{r7, lr}
 8009bd2:	b082      	sub	sp, #8
 8009bd4:	af00      	add	r7, sp, #0
 8009bd6:	6078      	str	r0, [r7, #4]
 8009bd8:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	4a25      	ldr	r2, [pc, #148]	@ (8009c74 <I2C_ITListenCplt+0xa4>)
 8009bde:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	2200      	movs	r2, #0
 8009be4:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	2220      	movs	r2, #32
 8009bea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	2200      	movs	r2, #0
 8009bf2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	2200      	movs	r2, #0
 8009bfa:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8009bfc:	683b      	ldr	r3, [r7, #0]
 8009bfe:	f003 0304 	and.w	r3, r3, #4
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d022      	beq.n	8009c4c <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c10:	b2d2      	uxtb	r2, r2
 8009c12:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c18:	1c5a      	adds	r2, r3, #1
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d012      	beq.n	8009c4c <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009c2a:	3b01      	subs	r3, #1
 8009c2c:	b29a      	uxth	r2, r3
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009c36:	b29b      	uxth	r3, r3
 8009c38:	3b01      	subs	r3, #1
 8009c3a:	b29a      	uxth	r2, r3
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009c44:	f043 0204 	orr.w	r2, r3, #4
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8009c4c:	f248 0103 	movw	r1, #32771	@ 0x8003
 8009c50:	6878      	ldr	r0, [r7, #4]
 8009c52:	f000 fc45 	bl	800a4e0 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	2210      	movs	r2, #16
 8009c5c:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	2200      	movs	r2, #0
 8009c62:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8009c66:	6878      	ldr	r0, [r7, #4]
 8009c68:	f7ff f809 	bl	8008c7e <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8009c6c:	bf00      	nop
 8009c6e:	3708      	adds	r7, #8
 8009c70:	46bd      	mov	sp, r7
 8009c72:	bd80      	pop	{r7, pc}
 8009c74:	ffff0000 	.word	0xffff0000

08009c78 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8009c78:	b580      	push	{r7, lr}
 8009c7a:	b084      	sub	sp, #16
 8009c7c:	af00      	add	r7, sp, #0
 8009c7e:	6078      	str	r0, [r7, #4]
 8009c80:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009c88:	73fb      	strb	r3, [r7, #15]
#if defined(HAL_DMA_MODULE_ENABLED)
  uint32_t tmppreviousstate;
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	2200      	movs	r2, #0
 8009c8e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	4a6d      	ldr	r2, [pc, #436]	@ (8009e4c <I2C_ITError+0x1d4>)
 8009c96:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	2200      	movs	r2, #0
 8009c9c:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009ca2:	683b      	ldr	r3, [r7, #0]
 8009ca4:	431a      	orrs	r2, r3
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8009caa:	7bfb      	ldrb	r3, [r7, #15]
 8009cac:	2b28      	cmp	r3, #40	@ 0x28
 8009cae:	d005      	beq.n	8009cbc <I2C_ITError+0x44>
 8009cb0:	7bfb      	ldrb	r3, [r7, #15]
 8009cb2:	2b29      	cmp	r3, #41	@ 0x29
 8009cb4:	d002      	beq.n	8009cbc <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8009cb6:	7bfb      	ldrb	r3, [r7, #15]
 8009cb8:	2b2a      	cmp	r3, #42	@ 0x2a
 8009cba:	d10b      	bne.n	8009cd4 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8009cbc:	2103      	movs	r1, #3
 8009cbe:	6878      	ldr	r0, [r7, #4]
 8009cc0:	f000 fc0e 	bl	800a4e0 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	2228      	movs	r2, #40	@ 0x28
 8009cc8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	4a60      	ldr	r2, [pc, #384]	@ (8009e50 <I2C_ITError+0x1d8>)
 8009cd0:	635a      	str	r2, [r3, #52]	@ 0x34
 8009cd2:	e030      	b.n	8009d36 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8009cd4:	f248 0103 	movw	r1, #32771	@ 0x8003
 8009cd8:	6878      	ldr	r0, [r7, #4]
 8009cda:	f000 fc01 	bl	800a4e0 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8009cde:	6878      	ldr	r0, [r7, #4]
 8009ce0:	f000 f8e1 	bl	8009ea6 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009cea:	b2db      	uxtb	r3, r3
 8009cec:	2b60      	cmp	r3, #96	@ 0x60
 8009cee:	d01f      	beq.n	8009d30 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	2220      	movs	r2, #32
 8009cf4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	699b      	ldr	r3, [r3, #24]
 8009cfe:	f003 0320 	and.w	r3, r3, #32
 8009d02:	2b20      	cmp	r3, #32
 8009d04:	d114      	bne.n	8009d30 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	699b      	ldr	r3, [r3, #24]
 8009d0c:	f003 0310 	and.w	r3, r3, #16
 8009d10:	2b10      	cmp	r3, #16
 8009d12:	d109      	bne.n	8009d28 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	2210      	movs	r2, #16
 8009d1a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009d20:	f043 0204 	orr.w	r2, r3, #4
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	2220      	movs	r2, #32
 8009d2e:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	2200      	movs	r2, #0
 8009d34:	635a      	str	r2, [r3, #52]	@ 0x34
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009d3a:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d039      	beq.n	8009db8 <I2C_ITError+0x140>
 8009d44:	68bb      	ldr	r3, [r7, #8]
 8009d46:	2b11      	cmp	r3, #17
 8009d48:	d002      	beq.n	8009d50 <I2C_ITError+0xd8>
 8009d4a:	68bb      	ldr	r3, [r7, #8]
 8009d4c:	2b21      	cmp	r3, #33	@ 0x21
 8009d4e:	d133      	bne.n	8009db8 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009d5a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009d5e:	d107      	bne.n	8009d70 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	681a      	ldr	r2, [r3, #0]
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8009d6e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d74:	4618      	mov	r0, r3
 8009d76:	f7fe f9ca 	bl	800810e <HAL_DMA_GetState>
 8009d7a:	4603      	mov	r3, r0
 8009d7c:	2b01      	cmp	r3, #1
 8009d7e:	d017      	beq.n	8009db0 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d84:	4a33      	ldr	r2, [pc, #204]	@ (8009e54 <I2C_ITError+0x1dc>)
 8009d86:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	2200      	movs	r2, #0
 8009d8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d94:	4618      	mov	r0, r3
 8009d96:	f7fe f8ac 	bl	8007ef2 <HAL_DMA_Abort_IT>
 8009d9a:	4603      	mov	r3, r0
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d04d      	beq.n	8009e3c <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009da4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009da6:	687a      	ldr	r2, [r7, #4]
 8009da8:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8009daa:	4610      	mov	r0, r2
 8009dac:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8009dae:	e045      	b.n	8009e3c <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8009db0:	6878      	ldr	r0, [r7, #4]
 8009db2:	f000 f851 	bl	8009e58 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8009db6:	e041      	b.n	8009e3c <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d039      	beq.n	8009e34 <I2C_ITError+0x1bc>
 8009dc0:	68bb      	ldr	r3, [r7, #8]
 8009dc2:	2b12      	cmp	r3, #18
 8009dc4:	d002      	beq.n	8009dcc <I2C_ITError+0x154>
 8009dc6:	68bb      	ldr	r3, [r7, #8]
 8009dc8:	2b22      	cmp	r3, #34	@ 0x22
 8009dca:	d133      	bne.n	8009e34 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009dd6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009dda:	d107      	bne.n	8009dec <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	681a      	ldr	r2, [r3, #0]
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8009dea:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009df0:	4618      	mov	r0, r3
 8009df2:	f7fe f98c 	bl	800810e <HAL_DMA_GetState>
 8009df6:	4603      	mov	r3, r0
 8009df8:	2b01      	cmp	r3, #1
 8009dfa:	d017      	beq.n	8009e2c <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009e00:	4a14      	ldr	r2, [pc, #80]	@ (8009e54 <I2C_ITError+0x1dc>)
 8009e02:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	2200      	movs	r2, #0
 8009e08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009e10:	4618      	mov	r0, r3
 8009e12:	f7fe f86e 	bl	8007ef2 <HAL_DMA_Abort_IT>
 8009e16:	4603      	mov	r3, r0
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d011      	beq.n	8009e40 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009e20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e22:	687a      	ldr	r2, [r7, #4]
 8009e24:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8009e26:	4610      	mov	r0, r2
 8009e28:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8009e2a:	e009      	b.n	8009e40 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8009e2c:	6878      	ldr	r0, [r7, #4]
 8009e2e:	f000 f813 	bl	8009e58 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8009e32:	e005      	b.n	8009e40 <I2C_ITError+0x1c8>
    }
  }
  else
#endif /* HAL_DMA_MODULE_ENABLED */
  {
    I2C_TreatErrorCallback(hi2c);
 8009e34:	6878      	ldr	r0, [r7, #4]
 8009e36:	f000 f80f 	bl	8009e58 <I2C_TreatErrorCallback>
  }
}
 8009e3a:	e002      	b.n	8009e42 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8009e3c:	bf00      	nop
 8009e3e:	e000      	b.n	8009e42 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8009e40:	bf00      	nop
}
 8009e42:	bf00      	nop
 8009e44:	3710      	adds	r7, #16
 8009e46:	46bd      	mov	sp, r7
 8009e48:	bd80      	pop	{r7, pc}
 8009e4a:	bf00      	nop
 8009e4c:	ffff0000 	.word	0xffff0000
 8009e50:	08008ccf 	.word	0x08008ccf
 8009e54:	08009fb3 	.word	0x08009fb3

08009e58 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8009e58:	b580      	push	{r7, lr}
 8009e5a:	b082      	sub	sp, #8
 8009e5c:	af00      	add	r7, sp, #0
 8009e5e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009e66:	b2db      	uxtb	r3, r3
 8009e68:	2b60      	cmp	r3, #96	@ 0x60
 8009e6a:	d10e      	bne.n	8009e8a <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	2220      	movs	r2, #32
 8009e70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	2200      	movs	r2, #0
 8009e78:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	2200      	movs	r2, #0
 8009e7e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8009e82:	6878      	ldr	r0, [r7, #4]
 8009e84:	f7fe ff19 	bl	8008cba <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8009e88:	e009      	b.n	8009e9e <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	2200      	movs	r2, #0
 8009e8e:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	2200      	movs	r2, #0
 8009e94:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8009e98:	6878      	ldr	r0, [r7, #4]
 8009e9a:	f7fe ff04 	bl	8008ca6 <HAL_I2C_ErrorCallback>
}
 8009e9e:	bf00      	nop
 8009ea0:	3708      	adds	r7, #8
 8009ea2:	46bd      	mov	sp, r7
 8009ea4:	bd80      	pop	{r7, pc}

08009ea6 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8009ea6:	b480      	push	{r7}
 8009ea8:	b083      	sub	sp, #12
 8009eaa:	af00      	add	r7, sp, #0
 8009eac:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	699b      	ldr	r3, [r3, #24]
 8009eb4:	f003 0302 	and.w	r3, r3, #2
 8009eb8:	2b02      	cmp	r3, #2
 8009eba:	d103      	bne.n	8009ec4 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	2200      	movs	r2, #0
 8009ec2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	699b      	ldr	r3, [r3, #24]
 8009eca:	f003 0301 	and.w	r3, r3, #1
 8009ece:	2b01      	cmp	r3, #1
 8009ed0:	d007      	beq.n	8009ee2 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	699a      	ldr	r2, [r3, #24]
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	f042 0201 	orr.w	r2, r2, #1
 8009ee0:	619a      	str	r2, [r3, #24]
  }
}
 8009ee2:	bf00      	nop
 8009ee4:	370c      	adds	r7, #12
 8009ee6:	46bd      	mov	sp, r7
 8009ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eec:	4770      	bx	lr

08009eee <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009eee:	b580      	push	{r7, lr}
 8009ef0:	b084      	sub	sp, #16
 8009ef2:	af00      	add	r7, sp, #0
 8009ef4:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009efa:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	681a      	ldr	r2, [r3, #0]
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8009f0a:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009f10:	b29b      	uxth	r3, r3
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d104      	bne.n	8009f20 <I2C_DMAMasterReceiveCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8009f16:	2120      	movs	r1, #32
 8009f18:	68f8      	ldr	r0, [r7, #12]
 8009f1a:	f000 fa5d 	bl	800a3d8 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8009f1e:	e02d      	b.n	8009f7c <I2C_DMAMasterReceiveCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f24:	68fa      	ldr	r2, [r7, #12]
 8009f26:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8009f28:	441a      	add	r2, r3
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009f32:	b29b      	uxth	r3, r3
 8009f34:	2bff      	cmp	r3, #255	@ 0xff
 8009f36:	d903      	bls.n	8009f40 <I2C_DMAMasterReceiveCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	22ff      	movs	r2, #255	@ 0xff
 8009f3c:	851a      	strh	r2, [r3, #40]	@ 0x28
 8009f3e:	e004      	b.n	8009f4a <I2C_DMAMasterReceiveCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009f44:	b29a      	uxth	r2, r3
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	3324      	adds	r3, #36	@ 0x24
 8009f54:	4619      	mov	r1, r3
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f5a:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8009f60:	f7fd ff4c 	bl	8007dfc <HAL_DMA_Start_IT>
 8009f64:	4603      	mov	r3, r0
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d004      	beq.n	8009f74 <I2C_DMAMasterReceiveCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8009f6a:	2110      	movs	r1, #16
 8009f6c:	68f8      	ldr	r0, [r7, #12]
 8009f6e:	f7ff fe83 	bl	8009c78 <I2C_ITError>
}
 8009f72:	e003      	b.n	8009f7c <I2C_DMAMasterReceiveCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8009f74:	2140      	movs	r1, #64	@ 0x40
 8009f76:	68f8      	ldr	r0, [r7, #12]
 8009f78:	f000 fa2e 	bl	800a3d8 <I2C_Enable_IRQ>
}
 8009f7c:	bf00      	nop
 8009f7e:	3710      	adds	r7, #16
 8009f80:	46bd      	mov	sp, r7
 8009f82:	bd80      	pop	{r7, pc}

08009f84 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8009f84:	b580      	push	{r7, lr}
 8009f86:	b084      	sub	sp, #16
 8009f88:	af00      	add	r7, sp, #0
 8009f8a:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f90:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	685a      	ldr	r2, [r3, #4]
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009fa0:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8009fa2:	2110      	movs	r1, #16
 8009fa4:	68f8      	ldr	r0, [r7, #12]
 8009fa6:	f7ff fe67 	bl	8009c78 <I2C_ITError>
}
 8009faa:	bf00      	nop
 8009fac:	3710      	adds	r7, #16
 8009fae:	46bd      	mov	sp, r7
 8009fb0:	bd80      	pop	{r7, pc}

08009fb2 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8009fb2:	b580      	push	{r7, lr}
 8009fb4:	b084      	sub	sp, #16
 8009fb6:	af00      	add	r7, sp, #0
 8009fb8:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009fbe:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d003      	beq.n	8009fd0 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009fcc:	2200      	movs	r2, #0
 8009fce:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d003      	beq.n	8009fe0 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009fdc:	2200      	movs	r2, #0
 8009fde:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8009fe0:	68f8      	ldr	r0, [r7, #12]
 8009fe2:	f7ff ff39 	bl	8009e58 <I2C_TreatErrorCallback>
}
 8009fe6:	bf00      	nop
 8009fe8:	3710      	adds	r7, #16
 8009fea:	46bd      	mov	sp, r7
 8009fec:	bd80      	pop	{r7, pc}

08009fee <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8009fee:	b580      	push	{r7, lr}
 8009ff0:	b084      	sub	sp, #16
 8009ff2:	af00      	add	r7, sp, #0
 8009ff4:	60f8      	str	r0, [r7, #12]
 8009ff6:	60b9      	str	r1, [r7, #8]
 8009ff8:	603b      	str	r3, [r7, #0]
 8009ffa:	4613      	mov	r3, r2
 8009ffc:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009ffe:	e03b      	b.n	800a078 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800a000:	69ba      	ldr	r2, [r7, #24]
 800a002:	6839      	ldr	r1, [r7, #0]
 800a004:	68f8      	ldr	r0, [r7, #12]
 800a006:	f000 f8d5 	bl	800a1b4 <I2C_IsErrorOccurred>
 800a00a:	4603      	mov	r3, r0
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d001      	beq.n	800a014 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800a010:	2301      	movs	r3, #1
 800a012:	e041      	b.n	800a098 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a014:	683b      	ldr	r3, [r7, #0]
 800a016:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a01a:	d02d      	beq.n	800a078 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a01c:	f7fd fc88 	bl	8007930 <HAL_GetTick>
 800a020:	4602      	mov	r2, r0
 800a022:	69bb      	ldr	r3, [r7, #24]
 800a024:	1ad3      	subs	r3, r2, r3
 800a026:	683a      	ldr	r2, [r7, #0]
 800a028:	429a      	cmp	r2, r3
 800a02a:	d302      	bcc.n	800a032 <I2C_WaitOnFlagUntilTimeout+0x44>
 800a02c:	683b      	ldr	r3, [r7, #0]
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d122      	bne.n	800a078 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	699a      	ldr	r2, [r3, #24]
 800a038:	68bb      	ldr	r3, [r7, #8]
 800a03a:	4013      	ands	r3, r2
 800a03c:	68ba      	ldr	r2, [r7, #8]
 800a03e:	429a      	cmp	r2, r3
 800a040:	bf0c      	ite	eq
 800a042:	2301      	moveq	r3, #1
 800a044:	2300      	movne	r3, #0
 800a046:	b2db      	uxtb	r3, r3
 800a048:	461a      	mov	r2, r3
 800a04a:	79fb      	ldrb	r3, [r7, #7]
 800a04c:	429a      	cmp	r2, r3
 800a04e:	d113      	bne.n	800a078 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a054:	f043 0220 	orr.w	r2, r3, #32
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	2220      	movs	r2, #32
 800a060:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	2200      	movs	r2, #0
 800a068:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	2200      	movs	r2, #0
 800a070:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800a074:	2301      	movs	r3, #1
 800a076:	e00f      	b.n	800a098 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	699a      	ldr	r2, [r3, #24]
 800a07e:	68bb      	ldr	r3, [r7, #8]
 800a080:	4013      	ands	r3, r2
 800a082:	68ba      	ldr	r2, [r7, #8]
 800a084:	429a      	cmp	r2, r3
 800a086:	bf0c      	ite	eq
 800a088:	2301      	moveq	r3, #1
 800a08a:	2300      	movne	r3, #0
 800a08c:	b2db      	uxtb	r3, r3
 800a08e:	461a      	mov	r2, r3
 800a090:	79fb      	ldrb	r3, [r7, #7]
 800a092:	429a      	cmp	r2, r3
 800a094:	d0b4      	beq.n	800a000 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a096:	2300      	movs	r3, #0
}
 800a098:	4618      	mov	r0, r3
 800a09a:	3710      	adds	r7, #16
 800a09c:	46bd      	mov	sp, r7
 800a09e:	bd80      	pop	{r7, pc}

0800a0a0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800a0a0:	b580      	push	{r7, lr}
 800a0a2:	b084      	sub	sp, #16
 800a0a4:	af00      	add	r7, sp, #0
 800a0a6:	60f8      	str	r0, [r7, #12]
 800a0a8:	60b9      	str	r1, [r7, #8]
 800a0aa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800a0ac:	e033      	b.n	800a116 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800a0ae:	687a      	ldr	r2, [r7, #4]
 800a0b0:	68b9      	ldr	r1, [r7, #8]
 800a0b2:	68f8      	ldr	r0, [r7, #12]
 800a0b4:	f000 f87e 	bl	800a1b4 <I2C_IsErrorOccurred>
 800a0b8:	4603      	mov	r3, r0
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d001      	beq.n	800a0c2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800a0be:	2301      	movs	r3, #1
 800a0c0:	e031      	b.n	800a126 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a0c2:	68bb      	ldr	r3, [r7, #8]
 800a0c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0c8:	d025      	beq.n	800a116 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a0ca:	f7fd fc31 	bl	8007930 <HAL_GetTick>
 800a0ce:	4602      	mov	r2, r0
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	1ad3      	subs	r3, r2, r3
 800a0d4:	68ba      	ldr	r2, [r7, #8]
 800a0d6:	429a      	cmp	r2, r3
 800a0d8:	d302      	bcc.n	800a0e0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800a0da:	68bb      	ldr	r3, [r7, #8]
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d11a      	bne.n	800a116 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	699b      	ldr	r3, [r3, #24]
 800a0e6:	f003 0302 	and.w	r3, r3, #2
 800a0ea:	2b02      	cmp	r3, #2
 800a0ec:	d013      	beq.n	800a116 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a0f2:	f043 0220 	orr.w	r2, r3, #32
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	2220      	movs	r2, #32
 800a0fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	2200      	movs	r2, #0
 800a106:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	2200      	movs	r2, #0
 800a10e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800a112:	2301      	movs	r3, #1
 800a114:	e007      	b.n	800a126 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	699b      	ldr	r3, [r3, #24]
 800a11c:	f003 0302 	and.w	r3, r3, #2
 800a120:	2b02      	cmp	r3, #2
 800a122:	d1c4      	bne.n	800a0ae <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800a124:	2300      	movs	r3, #0
}
 800a126:	4618      	mov	r0, r3
 800a128:	3710      	adds	r7, #16
 800a12a:	46bd      	mov	sp, r7
 800a12c:	bd80      	pop	{r7, pc}

0800a12e <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800a12e:	b580      	push	{r7, lr}
 800a130:	b084      	sub	sp, #16
 800a132:	af00      	add	r7, sp, #0
 800a134:	60f8      	str	r0, [r7, #12]
 800a136:	60b9      	str	r1, [r7, #8]
 800a138:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a13a:	e02f      	b.n	800a19c <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800a13c:	687a      	ldr	r2, [r7, #4]
 800a13e:	68b9      	ldr	r1, [r7, #8]
 800a140:	68f8      	ldr	r0, [r7, #12]
 800a142:	f000 f837 	bl	800a1b4 <I2C_IsErrorOccurred>
 800a146:	4603      	mov	r3, r0
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d001      	beq.n	800a150 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800a14c:	2301      	movs	r3, #1
 800a14e:	e02d      	b.n	800a1ac <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a150:	f7fd fbee 	bl	8007930 <HAL_GetTick>
 800a154:	4602      	mov	r2, r0
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	1ad3      	subs	r3, r2, r3
 800a15a:	68ba      	ldr	r2, [r7, #8]
 800a15c:	429a      	cmp	r2, r3
 800a15e:	d302      	bcc.n	800a166 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800a160:	68bb      	ldr	r3, [r7, #8]
 800a162:	2b00      	cmp	r3, #0
 800a164:	d11a      	bne.n	800a19c <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	699b      	ldr	r3, [r3, #24]
 800a16c:	f003 0320 	and.w	r3, r3, #32
 800a170:	2b20      	cmp	r3, #32
 800a172:	d013      	beq.n	800a19c <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a178:	f043 0220 	orr.w	r2, r3, #32
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	2220      	movs	r2, #32
 800a184:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	2200      	movs	r2, #0
 800a18c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	2200      	movs	r2, #0
 800a194:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800a198:	2301      	movs	r3, #1
 800a19a:	e007      	b.n	800a1ac <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	699b      	ldr	r3, [r3, #24]
 800a1a2:	f003 0320 	and.w	r3, r3, #32
 800a1a6:	2b20      	cmp	r3, #32
 800a1a8:	d1c8      	bne.n	800a13c <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a1aa:	2300      	movs	r3, #0
}
 800a1ac:	4618      	mov	r0, r3
 800a1ae:	3710      	adds	r7, #16
 800a1b0:	46bd      	mov	sp, r7
 800a1b2:	bd80      	pop	{r7, pc}

0800a1b4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a1b4:	b580      	push	{r7, lr}
 800a1b6:	b08a      	sub	sp, #40	@ 0x28
 800a1b8:	af00      	add	r7, sp, #0
 800a1ba:	60f8      	str	r0, [r7, #12]
 800a1bc:	60b9      	str	r1, [r7, #8]
 800a1be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a1c0:	2300      	movs	r3, #0
 800a1c2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	699b      	ldr	r3, [r3, #24]
 800a1cc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800a1ce:	2300      	movs	r3, #0
 800a1d0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800a1d6:	69bb      	ldr	r3, [r7, #24]
 800a1d8:	f003 0310 	and.w	r3, r3, #16
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d068      	beq.n	800a2b2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	2210      	movs	r2, #16
 800a1e6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800a1e8:	e049      	b.n	800a27e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800a1ea:	68bb      	ldr	r3, [r7, #8]
 800a1ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1f0:	d045      	beq.n	800a27e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800a1f2:	f7fd fb9d 	bl	8007930 <HAL_GetTick>
 800a1f6:	4602      	mov	r2, r0
 800a1f8:	69fb      	ldr	r3, [r7, #28]
 800a1fa:	1ad3      	subs	r3, r2, r3
 800a1fc:	68ba      	ldr	r2, [r7, #8]
 800a1fe:	429a      	cmp	r2, r3
 800a200:	d302      	bcc.n	800a208 <I2C_IsErrorOccurred+0x54>
 800a202:	68bb      	ldr	r3, [r7, #8]
 800a204:	2b00      	cmp	r3, #0
 800a206:	d13a      	bne.n	800a27e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	685b      	ldr	r3, [r3, #4]
 800a20e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a212:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a21a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	699b      	ldr	r3, [r3, #24]
 800a222:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a226:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a22a:	d121      	bne.n	800a270 <I2C_IsErrorOccurred+0xbc>
 800a22c:	697b      	ldr	r3, [r7, #20]
 800a22e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a232:	d01d      	beq.n	800a270 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800a234:	7cfb      	ldrb	r3, [r7, #19]
 800a236:	2b20      	cmp	r3, #32
 800a238:	d01a      	beq.n	800a270 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	685a      	ldr	r2, [r3, #4]
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800a248:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800a24a:	f7fd fb71 	bl	8007930 <HAL_GetTick>
 800a24e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a250:	e00e      	b.n	800a270 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800a252:	f7fd fb6d 	bl	8007930 <HAL_GetTick>
 800a256:	4602      	mov	r2, r0
 800a258:	69fb      	ldr	r3, [r7, #28]
 800a25a:	1ad3      	subs	r3, r2, r3
 800a25c:	2b19      	cmp	r3, #25
 800a25e:	d907      	bls.n	800a270 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800a260:	6a3b      	ldr	r3, [r7, #32]
 800a262:	f043 0320 	orr.w	r3, r3, #32
 800a266:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800a268:	2301      	movs	r3, #1
 800a26a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800a26e:	e006      	b.n	800a27e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	699b      	ldr	r3, [r3, #24]
 800a276:	f003 0320 	and.w	r3, r3, #32
 800a27a:	2b20      	cmp	r3, #32
 800a27c:	d1e9      	bne.n	800a252 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	699b      	ldr	r3, [r3, #24]
 800a284:	f003 0320 	and.w	r3, r3, #32
 800a288:	2b20      	cmp	r3, #32
 800a28a:	d003      	beq.n	800a294 <I2C_IsErrorOccurred+0xe0>
 800a28c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a290:	2b00      	cmp	r3, #0
 800a292:	d0aa      	beq.n	800a1ea <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800a294:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d103      	bne.n	800a2a4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	2220      	movs	r2, #32
 800a2a2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800a2a4:	6a3b      	ldr	r3, [r7, #32]
 800a2a6:	f043 0304 	orr.w	r3, r3, #4
 800a2aa:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800a2ac:	2301      	movs	r3, #1
 800a2ae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	699b      	ldr	r3, [r3, #24]
 800a2b8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800a2ba:	69bb      	ldr	r3, [r7, #24]
 800a2bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d00b      	beq.n	800a2dc <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800a2c4:	6a3b      	ldr	r3, [r7, #32]
 800a2c6:	f043 0301 	orr.w	r3, r3, #1
 800a2ca:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a2d4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800a2d6:	2301      	movs	r3, #1
 800a2d8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800a2dc:	69bb      	ldr	r3, [r7, #24]
 800a2de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d00b      	beq.n	800a2fe <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800a2e6:	6a3b      	ldr	r3, [r7, #32]
 800a2e8:	f043 0308 	orr.w	r3, r3, #8
 800a2ec:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800a2f6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800a2f8:	2301      	movs	r3, #1
 800a2fa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800a2fe:	69bb      	ldr	r3, [r7, #24]
 800a300:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a304:	2b00      	cmp	r3, #0
 800a306:	d00b      	beq.n	800a320 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800a308:	6a3b      	ldr	r3, [r7, #32]
 800a30a:	f043 0302 	orr.w	r3, r3, #2
 800a30e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a318:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800a31a:	2301      	movs	r3, #1
 800a31c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800a320:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a324:	2b00      	cmp	r3, #0
 800a326:	d01c      	beq.n	800a362 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800a328:	68f8      	ldr	r0, [r7, #12]
 800a32a:	f7ff fdbc 	bl	8009ea6 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	6859      	ldr	r1, [r3, #4]
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	681a      	ldr	r2, [r3, #0]
 800a338:	4b0d      	ldr	r3, [pc, #52]	@ (800a370 <I2C_IsErrorOccurred+0x1bc>)
 800a33a:	400b      	ands	r3, r1
 800a33c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a342:	6a3b      	ldr	r3, [r7, #32]
 800a344:	431a      	orrs	r2, r3
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	2220      	movs	r2, #32
 800a34e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	2200      	movs	r2, #0
 800a356:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	2200      	movs	r2, #0
 800a35e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800a362:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800a366:	4618      	mov	r0, r3
 800a368:	3728      	adds	r7, #40	@ 0x28
 800a36a:	46bd      	mov	sp, r7
 800a36c:	bd80      	pop	{r7, pc}
 800a36e:	bf00      	nop
 800a370:	fe00e800 	.word	0xfe00e800

0800a374 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800a374:	b480      	push	{r7}
 800a376:	b087      	sub	sp, #28
 800a378:	af00      	add	r7, sp, #0
 800a37a:	60f8      	str	r0, [r7, #12]
 800a37c:	607b      	str	r3, [r7, #4]
 800a37e:	460b      	mov	r3, r1
 800a380:	817b      	strh	r3, [r7, #10]
 800a382:	4613      	mov	r3, r2
 800a384:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800a386:	897b      	ldrh	r3, [r7, #10]
 800a388:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800a38c:	7a7b      	ldrb	r3, [r7, #9]
 800a38e:	041b      	lsls	r3, r3, #16
 800a390:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800a394:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800a39a:	6a3b      	ldr	r3, [r7, #32]
 800a39c:	4313      	orrs	r3, r2
 800a39e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a3a2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	685a      	ldr	r2, [r3, #4]
 800a3aa:	6a3b      	ldr	r3, [r7, #32]
 800a3ac:	0d5b      	lsrs	r3, r3, #21
 800a3ae:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800a3b2:	4b08      	ldr	r3, [pc, #32]	@ (800a3d4 <I2C_TransferConfig+0x60>)
 800a3b4:	430b      	orrs	r3, r1
 800a3b6:	43db      	mvns	r3, r3
 800a3b8:	ea02 0103 	and.w	r1, r2, r3
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	697a      	ldr	r2, [r7, #20]
 800a3c2:	430a      	orrs	r2, r1
 800a3c4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800a3c6:	bf00      	nop
 800a3c8:	371c      	adds	r7, #28
 800a3ca:	46bd      	mov	sp, r7
 800a3cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d0:	4770      	bx	lr
 800a3d2:	bf00      	nop
 800a3d4:	03ff63ff 	.word	0x03ff63ff

0800a3d8 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800a3d8:	b480      	push	{r7}
 800a3da:	b085      	sub	sp, #20
 800a3dc:	af00      	add	r7, sp, #0
 800a3de:	6078      	str	r0, [r7, #4]
 800a3e0:	460b      	mov	r3, r1
 800a3e2:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800a3e4:	2300      	movs	r3, #0
 800a3e6:	60fb      	str	r3, [r7, #12]

#if defined(HAL_DMA_MODULE_ENABLED)
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a3ec:	4a39      	ldr	r2, [pc, #228]	@ (800a4d4 <I2C_Enable_IRQ+0xfc>)
 800a3ee:	4293      	cmp	r3, r2
 800a3f0:	d032      	beq.n	800a458 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 800a3f6:	4a38      	ldr	r2, [pc, #224]	@ (800a4d8 <I2C_Enable_IRQ+0x100>)
 800a3f8:	4293      	cmp	r3, r2
 800a3fa:	d02d      	beq.n	800a458 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 800a400:	4a36      	ldr	r2, [pc, #216]	@ (800a4dc <I2C_Enable_IRQ+0x104>)
 800a402:	4293      	cmp	r3, r2
 800a404:	d028      	beq.n	800a458 <I2C_Enable_IRQ+0x80>
#endif /* HAL_DMA_MODULE_ENABLED */
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800a406:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	da03      	bge.n	800a416 <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 800a414:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800a416:	887b      	ldrh	r3, [r7, #2]
 800a418:	f003 0301 	and.w	r3, r3, #1
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d003      	beq.n	800a428 <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 800a426:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800a428:	887b      	ldrh	r3, [r7, #2]
 800a42a:	f003 0302 	and.w	r3, r3, #2
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d003      	beq.n	800a43a <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 800a438:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800a43a:	887b      	ldrh	r3, [r7, #2]
 800a43c:	2b10      	cmp	r3, #16
 800a43e:	d103      	bne.n	800a448 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 800a446:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800a448:	887b      	ldrh	r3, [r7, #2]
 800a44a:	2b20      	cmp	r3, #32
 800a44c:	d133      	bne.n	800a4b6 <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	f043 0320 	orr.w	r3, r3, #32
 800a454:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800a456:	e02e      	b.n	800a4b6 <I2C_Enable_IRQ+0xde>
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800a458:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	da03      	bge.n	800a468 <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 800a466:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800a468:	887b      	ldrh	r3, [r7, #2]
 800a46a:	f003 0301 	and.w	r3, r3, #1
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d003      	beq.n	800a47a <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 800a478:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800a47a:	887b      	ldrh	r3, [r7, #2]
 800a47c:	f003 0302 	and.w	r3, r3, #2
 800a480:	2b00      	cmp	r3, #0
 800a482:	d003      	beq.n	800a48c <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 800a48a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800a48c:	887b      	ldrh	r3, [r7, #2]
 800a48e:	2b10      	cmp	r3, #16
 800a490:	d103      	bne.n	800a49a <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 800a498:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800a49a:	887b      	ldrh	r3, [r7, #2]
 800a49c:	2b20      	cmp	r3, #32
 800a49e:	d103      	bne.n	800a4a8 <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800a4a6:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800a4a8:	887b      	ldrh	r3, [r7, #2]
 800a4aa:	2b40      	cmp	r3, #64	@ 0x40
 800a4ac:	d103      	bne.n	800a4b6 <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a4b4:	60fb      	str	r3, [r7, #12]
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	6819      	ldr	r1, [r3, #0]
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	68fa      	ldr	r2, [r7, #12]
 800a4c2:	430a      	orrs	r2, r1
 800a4c4:	601a      	str	r2, [r3, #0]
}
 800a4c6:	bf00      	nop
 800a4c8:	3714      	adds	r7, #20
 800a4ca:	46bd      	mov	sp, r7
 800a4cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4d0:	4770      	bx	lr
 800a4d2:	bf00      	nop
 800a4d4:	08008ec1 	.word	0x08008ec1
 800a4d8:	080092e5 	.word	0x080092e5
 800a4dc:	08009099 	.word	0x08009099

0800a4e0 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800a4e0:	b480      	push	{r7}
 800a4e2:	b085      	sub	sp, #20
 800a4e4:	af00      	add	r7, sp, #0
 800a4e6:	6078      	str	r0, [r7, #4]
 800a4e8:	460b      	mov	r3, r1
 800a4ea:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800a4ec:	2300      	movs	r3, #0
 800a4ee:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800a4f0:	887b      	ldrh	r3, [r7, #2]
 800a4f2:	f003 0301 	and.w	r3, r3, #1
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d00f      	beq.n	800a51a <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 800a500:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a508:	b2db      	uxtb	r3, r3
 800a50a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800a50e:	2b28      	cmp	r3, #40	@ 0x28
 800a510:	d003      	beq.n	800a51a <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 800a518:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800a51a:	887b      	ldrh	r3, [r7, #2]
 800a51c:	f003 0302 	and.w	r3, r3, #2
 800a520:	2b00      	cmp	r3, #0
 800a522:	d00f      	beq.n	800a544 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 800a52a:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a532:	b2db      	uxtb	r3, r3
 800a534:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800a538:	2b28      	cmp	r3, #40	@ 0x28
 800a53a:	d003      	beq.n	800a544 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 800a542:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800a544:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a548:	2b00      	cmp	r3, #0
 800a54a:	da03      	bge.n	800a554 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 800a552:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800a554:	887b      	ldrh	r3, [r7, #2]
 800a556:	2b10      	cmp	r3, #16
 800a558:	d103      	bne.n	800a562 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 800a560:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800a562:	887b      	ldrh	r3, [r7, #2]
 800a564:	2b20      	cmp	r3, #32
 800a566:	d103      	bne.n	800a570 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	f043 0320 	orr.w	r3, r3, #32
 800a56e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800a570:	887b      	ldrh	r3, [r7, #2]
 800a572:	2b40      	cmp	r3, #64	@ 0x40
 800a574:	d103      	bne.n	800a57e <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a57c:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	6819      	ldr	r1, [r3, #0]
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	43da      	mvns	r2, r3
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	400a      	ands	r2, r1
 800a58e:	601a      	str	r2, [r3, #0]
}
 800a590:	bf00      	nop
 800a592:	3714      	adds	r7, #20
 800a594:	46bd      	mov	sp, r7
 800a596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a59a:	4770      	bx	lr

0800a59c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800a59c:	b480      	push	{r7}
 800a59e:	b083      	sub	sp, #12
 800a5a0:	af00      	add	r7, sp, #0
 800a5a2:	6078      	str	r0, [r7, #4]
 800a5a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a5ac:	b2db      	uxtb	r3, r3
 800a5ae:	2b20      	cmp	r3, #32
 800a5b0:	d138      	bne.n	800a624 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a5b8:	2b01      	cmp	r3, #1
 800a5ba:	d101      	bne.n	800a5c0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800a5bc:	2302      	movs	r3, #2
 800a5be:	e032      	b.n	800a626 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	2201      	movs	r2, #1
 800a5c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	2224      	movs	r2, #36	@ 0x24
 800a5cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	681a      	ldr	r2, [r3, #0]
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	f022 0201 	bic.w	r2, r2, #1
 800a5de:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	681a      	ldr	r2, [r3, #0]
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800a5ee:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	6819      	ldr	r1, [r3, #0]
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	683a      	ldr	r2, [r7, #0]
 800a5fc:	430a      	orrs	r2, r1
 800a5fe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	681a      	ldr	r2, [r3, #0]
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	f042 0201 	orr.w	r2, r2, #1
 800a60e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	2220      	movs	r2, #32
 800a614:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	2200      	movs	r2, #0
 800a61c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800a620:	2300      	movs	r3, #0
 800a622:	e000      	b.n	800a626 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800a624:	2302      	movs	r3, #2
  }
}
 800a626:	4618      	mov	r0, r3
 800a628:	370c      	adds	r7, #12
 800a62a:	46bd      	mov	sp, r7
 800a62c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a630:	4770      	bx	lr

0800a632 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800a632:	b480      	push	{r7}
 800a634:	b085      	sub	sp, #20
 800a636:	af00      	add	r7, sp, #0
 800a638:	6078      	str	r0, [r7, #4]
 800a63a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a642:	b2db      	uxtb	r3, r3
 800a644:	2b20      	cmp	r3, #32
 800a646:	d139      	bne.n	800a6bc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a64e:	2b01      	cmp	r3, #1
 800a650:	d101      	bne.n	800a656 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800a652:	2302      	movs	r3, #2
 800a654:	e033      	b.n	800a6be <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	2201      	movs	r2, #1
 800a65a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	2224      	movs	r2, #36	@ 0x24
 800a662:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	681a      	ldr	r2, [r3, #0]
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	f022 0201 	bic.w	r2, r2, #1
 800a674:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800a684:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800a686:	683b      	ldr	r3, [r7, #0]
 800a688:	021b      	lsls	r3, r3, #8
 800a68a:	68fa      	ldr	r2, [r7, #12]
 800a68c:	4313      	orrs	r3, r2
 800a68e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	68fa      	ldr	r2, [r7, #12]
 800a696:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	681a      	ldr	r2, [r3, #0]
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	f042 0201 	orr.w	r2, r2, #1
 800a6a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	2220      	movs	r2, #32
 800a6ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	2200      	movs	r2, #0
 800a6b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800a6b8:	2300      	movs	r3, #0
 800a6ba:	e000      	b.n	800a6be <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800a6bc:	2302      	movs	r3, #2
  }
}
 800a6be:	4618      	mov	r0, r3
 800a6c0:	3714      	adds	r7, #20
 800a6c2:	46bd      	mov	sp, r7
 800a6c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6c8:	4770      	bx	lr
	...

0800a6cc <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 800a6cc:	b580      	push	{r7, lr}
 800a6ce:	b084      	sub	sp, #16
 800a6d0:	af00      	add	r7, sp, #0
 800a6d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 800a6d4:	2300      	movs	r3, #0
 800a6d6:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d01e      	beq.n	800a71c <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 800a6de:	4b13      	ldr	r3, [pc, #76]	@ (800a72c <HAL_IPCC_Init+0x60>)
 800a6e0:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800a6e8:	b2db      	uxtb	r3, r3
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d102      	bne.n	800a6f4 <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 800a6ee:	6878      	ldr	r0, [r7, #4]
 800a6f0:	f7fc fe88 	bl	8007404 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 800a6f4:	68b8      	ldr	r0, [r7, #8]
 800a6f6:	f000 f85b 	bl	800a7b0 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 800a6fa:	68bb      	ldr	r3, [r7, #8]
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	f043 1201 	orr.w	r2, r3, #65537	@ 0x10001
 800a702:	68bb      	ldr	r3, [r7, #8]
 800a704:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 800a706:	6878      	ldr	r0, [r7, #4]
 800a708:	f000 f82c 	bl	800a764 <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	2200      	movs	r2, #0
 800a710:	635a      	str	r2, [r3, #52]	@ 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	2201      	movs	r2, #1
 800a716:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
 800a71a:	e001      	b.n	800a720 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 800a71c:	2301      	movs	r3, #1
 800a71e:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 800a720:	7bfb      	ldrb	r3, [r7, #15]
}
 800a722:	4618      	mov	r0, r3
 800a724:	3710      	adds	r7, #16
 800a726:	46bd      	mov	sp, r7
 800a728:	bd80      	pop	{r7, pc}
 800a72a:	bf00      	nop
 800a72c:	58000c00 	.word	0x58000c00

0800a730 <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 800a730:	b480      	push	{r7}
 800a732:	b085      	sub	sp, #20
 800a734:	af00      	add	r7, sp, #0
 800a736:	60f8      	str	r0, [r7, #12]
 800a738:	60b9      	str	r1, [r7, #8]
 800a73a:	4613      	mov	r3, r2
 800a73c:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 800a73e:	bf00      	nop
 800a740:	3714      	adds	r7, #20
 800a742:	46bd      	mov	sp, r7
 800a744:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a748:	4770      	bx	lr

0800a74a <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 800a74a:	b480      	push	{r7}
 800a74c:	b085      	sub	sp, #20
 800a74e:	af00      	add	r7, sp, #0
 800a750:	60f8      	str	r0, [r7, #12]
 800a752:	60b9      	str	r1, [r7, #8]
 800a754:	4613      	mov	r3, r2
 800a756:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 800a758:	bf00      	nop
 800a75a:	3714      	adds	r7, #20
 800a75c:	46bd      	mov	sp, r7
 800a75e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a762:	4770      	bx	lr

0800a764 <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 800a764:	b480      	push	{r7}
 800a766:	b085      	sub	sp, #20
 800a768:	af00      	add	r7, sp, #0
 800a76a:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 800a76c:	2300      	movs	r3, #0
 800a76e:	60fb      	str	r3, [r7, #12]
 800a770:	e00f      	b.n	800a792 <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 800a772:	687a      	ldr	r2, [r7, #4]
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	009b      	lsls	r3, r3, #2
 800a778:	4413      	add	r3, r2
 800a77a:	4a0b      	ldr	r2, [pc, #44]	@ (800a7a8 <IPCC_SetDefaultCallbacks+0x44>)
 800a77c:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 800a77e:	687a      	ldr	r2, [r7, #4]
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	3306      	adds	r3, #6
 800a784:	009b      	lsls	r3, r3, #2
 800a786:	4413      	add	r3, r2
 800a788:	4a08      	ldr	r2, [pc, #32]	@ (800a7ac <IPCC_SetDefaultCallbacks+0x48>)
 800a78a:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	3301      	adds	r3, #1
 800a790:	60fb      	str	r3, [r7, #12]
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	2b05      	cmp	r3, #5
 800a796:	d9ec      	bls.n	800a772 <IPCC_SetDefaultCallbacks+0xe>
  }
}
 800a798:	bf00      	nop
 800a79a:	bf00      	nop
 800a79c:	3714      	adds	r7, #20
 800a79e:	46bd      	mov	sp, r7
 800a7a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7a4:	4770      	bx	lr
 800a7a6:	bf00      	nop
 800a7a8:	0800a731 	.word	0x0800a731
 800a7ac:	0800a74b 	.word	0x0800a74b

0800a7b0 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 800a7b0:	b480      	push	{r7}
 800a7b2:	b083      	sub	sp, #12
 800a7b4:	af00      	add	r7, sp, #0
 800a7b6:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	2200      	movs	r2, #0
 800a7bc:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	f04f 123f 	mov.w	r2, #4128831	@ 0x3f003f
 800a7c4:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	223f      	movs	r2, #63	@ 0x3f
 800a7ca:	609a      	str	r2, [r3, #8]
}
 800a7cc:	bf00      	nop
 800a7ce:	370c      	adds	r7, #12
 800a7d0:	46bd      	mov	sp, r7
 800a7d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7d6:	4770      	bx	lr

0800a7d8 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800a7d8:	b480      	push	{r7}
 800a7da:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a7dc:	4b05      	ldr	r3, [pc, #20]	@ (800a7f4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	4a04      	ldr	r2, [pc, #16]	@ (800a7f4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800a7e2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a7e6:	6013      	str	r3, [r2, #0]
}
 800a7e8:	bf00      	nop
 800a7ea:	46bd      	mov	sp, r7
 800a7ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7f0:	4770      	bx	lr
 800a7f2:	bf00      	nop
 800a7f4:	58000400 	.word	0x58000400

0800a7f8 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800a7f8:	b480      	push	{r7}
 800a7fa:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 800a7fc:	4b04      	ldr	r3, [pc, #16]	@ (800a810 <HAL_PWREx_GetVoltageRange+0x18>)
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 800a804:	4618      	mov	r0, r3
 800a806:	46bd      	mov	sp, r7
 800a808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a80c:	4770      	bx	lr
 800a80e:	bf00      	nop
 800a810:	58000400 	.word	0x58000400

0800a814 <LL_RCC_HSE_IsEnabledDiv2>:
{
 800a814:	b480      	push	{r7}
 800a816:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 800a818:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a822:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a826:	d101      	bne.n	800a82c <LL_RCC_HSE_IsEnabledDiv2+0x18>
 800a828:	2301      	movs	r3, #1
 800a82a:	e000      	b.n	800a82e <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 800a82c:	2300      	movs	r3, #0
}
 800a82e:	4618      	mov	r0, r3
 800a830:	46bd      	mov	sp, r7
 800a832:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a836:	4770      	bx	lr

0800a838 <LL_RCC_HSE_Enable>:
{
 800a838:	b480      	push	{r7}
 800a83a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800a83c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a846:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a84a:	6013      	str	r3, [r2, #0]
}
 800a84c:	bf00      	nop
 800a84e:	46bd      	mov	sp, r7
 800a850:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a854:	4770      	bx	lr

0800a856 <LL_RCC_HSE_Disable>:
{
 800a856:	b480      	push	{r7}
 800a858:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800a85a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a864:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a868:	6013      	str	r3, [r2, #0]
}
 800a86a:	bf00      	nop
 800a86c:	46bd      	mov	sp, r7
 800a86e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a872:	4770      	bx	lr

0800a874 <LL_RCC_HSE_IsReady>:
{
 800a874:	b480      	push	{r7}
 800a876:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800a878:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a882:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a886:	d101      	bne.n	800a88c <LL_RCC_HSE_IsReady+0x18>
 800a888:	2301      	movs	r3, #1
 800a88a:	e000      	b.n	800a88e <LL_RCC_HSE_IsReady+0x1a>
 800a88c:	2300      	movs	r3, #0
}
 800a88e:	4618      	mov	r0, r3
 800a890:	46bd      	mov	sp, r7
 800a892:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a896:	4770      	bx	lr

0800a898 <LL_RCC_HSI_Enable>:
{
 800a898:	b480      	push	{r7}
 800a89a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800a89c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a8a6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a8aa:	6013      	str	r3, [r2, #0]
}
 800a8ac:	bf00      	nop
 800a8ae:	46bd      	mov	sp, r7
 800a8b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8b4:	4770      	bx	lr

0800a8b6 <LL_RCC_HSI_Disable>:
{
 800a8b6:	b480      	push	{r7}
 800a8b8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800a8ba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a8c4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a8c8:	6013      	str	r3, [r2, #0]
}
 800a8ca:	bf00      	nop
 800a8cc:	46bd      	mov	sp, r7
 800a8ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8d2:	4770      	bx	lr

0800a8d4 <LL_RCC_HSI_IsReady>:
{
 800a8d4:	b480      	push	{r7}
 800a8d6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800a8d8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a8e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a8e6:	d101      	bne.n	800a8ec <LL_RCC_HSI_IsReady+0x18>
 800a8e8:	2301      	movs	r3, #1
 800a8ea:	e000      	b.n	800a8ee <LL_RCC_HSI_IsReady+0x1a>
 800a8ec:	2300      	movs	r3, #0
}
 800a8ee:	4618      	mov	r0, r3
 800a8f0:	46bd      	mov	sp, r7
 800a8f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8f6:	4770      	bx	lr

0800a8f8 <LL_RCC_HSI_SetCalibTrimming>:
{
 800a8f8:	b480      	push	{r7}
 800a8fa:	b083      	sub	sp, #12
 800a8fc:	af00      	add	r7, sp, #0
 800a8fe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800a900:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a904:	685b      	ldr	r3, [r3, #4]
 800a906:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	061b      	lsls	r3, r3, #24
 800a90e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800a912:	4313      	orrs	r3, r2
 800a914:	604b      	str	r3, [r1, #4]
}
 800a916:	bf00      	nop
 800a918:	370c      	adds	r7, #12
 800a91a:	46bd      	mov	sp, r7
 800a91c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a920:	4770      	bx	lr

0800a922 <LL_RCC_HSI48_Enable>:
{
 800a922:	b480      	push	{r7}
 800a924:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800a926:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a92a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a92e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a932:	f043 0301 	orr.w	r3, r3, #1
 800a936:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 800a93a:	bf00      	nop
 800a93c:	46bd      	mov	sp, r7
 800a93e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a942:	4770      	bx	lr

0800a944 <LL_RCC_HSI48_Disable>:
{
 800a944:	b480      	push	{r7}
 800a946:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800a948:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a94c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a950:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a954:	f023 0301 	bic.w	r3, r3, #1
 800a958:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 800a95c:	bf00      	nop
 800a95e:	46bd      	mov	sp, r7
 800a960:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a964:	4770      	bx	lr

0800a966 <LL_RCC_HSI48_IsReady>:
{
 800a966:	b480      	push	{r7}
 800a968:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 800a96a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a96e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a972:	f003 0302 	and.w	r3, r3, #2
 800a976:	2b02      	cmp	r3, #2
 800a978:	d101      	bne.n	800a97e <LL_RCC_HSI48_IsReady+0x18>
 800a97a:	2301      	movs	r3, #1
 800a97c:	e000      	b.n	800a980 <LL_RCC_HSI48_IsReady+0x1a>
 800a97e:	2300      	movs	r3, #0
}
 800a980:	4618      	mov	r0, r3
 800a982:	46bd      	mov	sp, r7
 800a984:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a988:	4770      	bx	lr

0800a98a <LL_RCC_LSE_Enable>:
{
 800a98a:	b480      	push	{r7}
 800a98c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800a98e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a992:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a996:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a99a:	f043 0301 	orr.w	r3, r3, #1
 800a99e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800a9a2:	bf00      	nop
 800a9a4:	46bd      	mov	sp, r7
 800a9a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9aa:	4770      	bx	lr

0800a9ac <LL_RCC_LSE_Disable>:
{
 800a9ac:	b480      	push	{r7}
 800a9ae:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800a9b0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a9b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a9b8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a9bc:	f023 0301 	bic.w	r3, r3, #1
 800a9c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800a9c4:	bf00      	nop
 800a9c6:	46bd      	mov	sp, r7
 800a9c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9cc:	4770      	bx	lr

0800a9ce <LL_RCC_LSE_EnableBypass>:
{
 800a9ce:	b480      	push	{r7}
 800a9d0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800a9d2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a9d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a9da:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a9de:	f043 0304 	orr.w	r3, r3, #4
 800a9e2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800a9e6:	bf00      	nop
 800a9e8:	46bd      	mov	sp, r7
 800a9ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ee:	4770      	bx	lr

0800a9f0 <LL_RCC_LSE_DisableBypass>:
{
 800a9f0:	b480      	push	{r7}
 800a9f2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800a9f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a9f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a9fc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800aa00:	f023 0304 	bic.w	r3, r3, #4
 800aa04:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800aa08:	bf00      	nop
 800aa0a:	46bd      	mov	sp, r7
 800aa0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa10:	4770      	bx	lr

0800aa12 <LL_RCC_LSE_IsReady>:
{
 800aa12:	b480      	push	{r7}
 800aa14:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800aa16:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800aa1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800aa1e:	f003 0302 	and.w	r3, r3, #2
 800aa22:	2b02      	cmp	r3, #2
 800aa24:	d101      	bne.n	800aa2a <LL_RCC_LSE_IsReady+0x18>
 800aa26:	2301      	movs	r3, #1
 800aa28:	e000      	b.n	800aa2c <LL_RCC_LSE_IsReady+0x1a>
 800aa2a:	2300      	movs	r3, #0
}
 800aa2c:	4618      	mov	r0, r3
 800aa2e:	46bd      	mov	sp, r7
 800aa30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa34:	4770      	bx	lr

0800aa36 <LL_RCC_LSI1_Enable>:
{
 800aa36:	b480      	push	{r7}
 800aa38:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800aa3a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800aa3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800aa42:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800aa46:	f043 0301 	orr.w	r3, r3, #1
 800aa4a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800aa4e:	bf00      	nop
 800aa50:	46bd      	mov	sp, r7
 800aa52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa56:	4770      	bx	lr

0800aa58 <LL_RCC_LSI1_Disable>:
{
 800aa58:	b480      	push	{r7}
 800aa5a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800aa5c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800aa60:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800aa64:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800aa68:	f023 0301 	bic.w	r3, r3, #1
 800aa6c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800aa70:	bf00      	nop
 800aa72:	46bd      	mov	sp, r7
 800aa74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa78:	4770      	bx	lr

0800aa7a <LL_RCC_LSI1_IsReady>:
{
 800aa7a:	b480      	push	{r7}
 800aa7c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 800aa7e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800aa82:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800aa86:	f003 0302 	and.w	r3, r3, #2
 800aa8a:	2b02      	cmp	r3, #2
 800aa8c:	d101      	bne.n	800aa92 <LL_RCC_LSI1_IsReady+0x18>
 800aa8e:	2301      	movs	r3, #1
 800aa90:	e000      	b.n	800aa94 <LL_RCC_LSI1_IsReady+0x1a>
 800aa92:	2300      	movs	r3, #0
}
 800aa94:	4618      	mov	r0, r3
 800aa96:	46bd      	mov	sp, r7
 800aa98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa9c:	4770      	bx	lr

0800aa9e <LL_RCC_LSI2_Enable>:
{
 800aa9e:	b480      	push	{r7}
 800aaa0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800aaa2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800aaa6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800aaaa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800aaae:	f043 0304 	orr.w	r3, r3, #4
 800aab2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800aab6:	bf00      	nop
 800aab8:	46bd      	mov	sp, r7
 800aaba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aabe:	4770      	bx	lr

0800aac0 <LL_RCC_LSI2_Disable>:
{
 800aac0:	b480      	push	{r7}
 800aac2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800aac4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800aac8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800aacc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800aad0:	f023 0304 	bic.w	r3, r3, #4
 800aad4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800aad8:	bf00      	nop
 800aada:	46bd      	mov	sp, r7
 800aadc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aae0:	4770      	bx	lr

0800aae2 <LL_RCC_LSI2_IsReady>:
{
 800aae2:	b480      	push	{r7}
 800aae4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 800aae6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800aaea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800aaee:	f003 0308 	and.w	r3, r3, #8
 800aaf2:	2b08      	cmp	r3, #8
 800aaf4:	d101      	bne.n	800aafa <LL_RCC_LSI2_IsReady+0x18>
 800aaf6:	2301      	movs	r3, #1
 800aaf8:	e000      	b.n	800aafc <LL_RCC_LSI2_IsReady+0x1a>
 800aafa:	2300      	movs	r3, #0
}
 800aafc:	4618      	mov	r0, r3
 800aafe:	46bd      	mov	sp, r7
 800ab00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab04:	4770      	bx	lr

0800ab06 <LL_RCC_LSI2_SetTrimming>:
{
 800ab06:	b480      	push	{r7}
 800ab08:	b083      	sub	sp, #12
 800ab0a:	af00      	add	r7, sp, #0
 800ab0c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 800ab0e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ab12:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ab16:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	021b      	lsls	r3, r3, #8
 800ab1e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800ab22:	4313      	orrs	r3, r2
 800ab24:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 800ab28:	bf00      	nop
 800ab2a:	370c      	adds	r7, #12
 800ab2c:	46bd      	mov	sp, r7
 800ab2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab32:	4770      	bx	lr

0800ab34 <LL_RCC_MSI_Enable>:
{
 800ab34:	b480      	push	{r7}
 800ab36:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800ab38:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800ab42:	f043 0301 	orr.w	r3, r3, #1
 800ab46:	6013      	str	r3, [r2, #0]
}
 800ab48:	bf00      	nop
 800ab4a:	46bd      	mov	sp, r7
 800ab4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab50:	4770      	bx	lr

0800ab52 <LL_RCC_MSI_Disable>:
{
 800ab52:	b480      	push	{r7}
 800ab54:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800ab56:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800ab60:	f023 0301 	bic.w	r3, r3, #1
 800ab64:	6013      	str	r3, [r2, #0]
}
 800ab66:	bf00      	nop
 800ab68:	46bd      	mov	sp, r7
 800ab6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab6e:	4770      	bx	lr

0800ab70 <LL_RCC_MSI_IsReady>:
{
 800ab70:	b480      	push	{r7}
 800ab72:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800ab74:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	f003 0302 	and.w	r3, r3, #2
 800ab7e:	2b02      	cmp	r3, #2
 800ab80:	d101      	bne.n	800ab86 <LL_RCC_MSI_IsReady+0x16>
 800ab82:	2301      	movs	r3, #1
 800ab84:	e000      	b.n	800ab88 <LL_RCC_MSI_IsReady+0x18>
 800ab86:	2300      	movs	r3, #0
}
 800ab88:	4618      	mov	r0, r3
 800ab8a:	46bd      	mov	sp, r7
 800ab8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab90:	4770      	bx	lr

0800ab92 <LL_RCC_MSI_SetRange>:
{
 800ab92:	b480      	push	{r7}
 800ab94:	b083      	sub	sp, #12
 800ab96:	af00      	add	r7, sp, #0
 800ab98:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 800ab9a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800aba4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	4313      	orrs	r3, r2
 800abac:	600b      	str	r3, [r1, #0]
}
 800abae:	bf00      	nop
 800abb0:	370c      	adds	r7, #12
 800abb2:	46bd      	mov	sp, r7
 800abb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abb8:	4770      	bx	lr

0800abba <LL_RCC_MSI_GetRange>:
{
 800abba:	b480      	push	{r7}
 800abbc:	b083      	sub	sp, #12
 800abbe:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 800abc0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800abca:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	2bb0      	cmp	r3, #176	@ 0xb0
 800abd0:	d901      	bls.n	800abd6 <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 800abd2:	23b0      	movs	r3, #176	@ 0xb0
 800abd4:	607b      	str	r3, [r7, #4]
  return msiRange;
 800abd6:	687b      	ldr	r3, [r7, #4]
}
 800abd8:	4618      	mov	r0, r3
 800abda:	370c      	adds	r7, #12
 800abdc:	46bd      	mov	sp, r7
 800abde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abe2:	4770      	bx	lr

0800abe4 <LL_RCC_MSI_SetCalibTrimming>:
{
 800abe4:	b480      	push	{r7}
 800abe6:	b083      	sub	sp, #12
 800abe8:	af00      	add	r7, sp, #0
 800abea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 800abec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800abf0:	685b      	ldr	r3, [r3, #4]
 800abf2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	021b      	lsls	r3, r3, #8
 800abfa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800abfe:	4313      	orrs	r3, r2
 800ac00:	604b      	str	r3, [r1, #4]
}
 800ac02:	bf00      	nop
 800ac04:	370c      	adds	r7, #12
 800ac06:	46bd      	mov	sp, r7
 800ac08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac0c:	4770      	bx	lr

0800ac0e <LL_RCC_SetSysClkSource>:
{
 800ac0e:	b480      	push	{r7}
 800ac10:	b083      	sub	sp, #12
 800ac12:	af00      	add	r7, sp, #0
 800ac14:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800ac16:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ac1a:	689b      	ldr	r3, [r3, #8]
 800ac1c:	f023 0203 	bic.w	r2, r3, #3
 800ac20:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	4313      	orrs	r3, r2
 800ac28:	608b      	str	r3, [r1, #8]
}
 800ac2a:	bf00      	nop
 800ac2c:	370c      	adds	r7, #12
 800ac2e:	46bd      	mov	sp, r7
 800ac30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac34:	4770      	bx	lr

0800ac36 <LL_RCC_GetSysClkSource>:
{
 800ac36:	b480      	push	{r7}
 800ac38:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800ac3a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ac3e:	689b      	ldr	r3, [r3, #8]
 800ac40:	f003 030c 	and.w	r3, r3, #12
}
 800ac44:	4618      	mov	r0, r3
 800ac46:	46bd      	mov	sp, r7
 800ac48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac4c:	4770      	bx	lr

0800ac4e <LL_RCC_SetAHBPrescaler>:
{
 800ac4e:	b480      	push	{r7}
 800ac50:	b083      	sub	sp, #12
 800ac52:	af00      	add	r7, sp, #0
 800ac54:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800ac56:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ac5a:	689b      	ldr	r3, [r3, #8]
 800ac5c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800ac60:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	4313      	orrs	r3, r2
 800ac68:	608b      	str	r3, [r1, #8]
}
 800ac6a:	bf00      	nop
 800ac6c:	370c      	adds	r7, #12
 800ac6e:	46bd      	mov	sp, r7
 800ac70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac74:	4770      	bx	lr

0800ac76 <LL_C2_RCC_SetAHBPrescaler>:
{
 800ac76:	b480      	push	{r7}
 800ac78:	b083      	sub	sp, #12
 800ac7a:	af00      	add	r7, sp, #0
 800ac7c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800ac7e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ac82:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800ac86:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800ac8a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	4313      	orrs	r3, r2
 800ac92:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 800ac96:	bf00      	nop
 800ac98:	370c      	adds	r7, #12
 800ac9a:	46bd      	mov	sp, r7
 800ac9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aca0:	4770      	bx	lr

0800aca2 <LL_RCC_SetAHB4Prescaler>:
{
 800aca2:	b480      	push	{r7}
 800aca4:	b083      	sub	sp, #12
 800aca6:	af00      	add	r7, sp, #0
 800aca8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800acaa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800acae:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800acb2:	f023 020f 	bic.w	r2, r3, #15
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	091b      	lsrs	r3, r3, #4
 800acba:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800acbe:	4313      	orrs	r3, r2
 800acc0:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 800acc4:	bf00      	nop
 800acc6:	370c      	adds	r7, #12
 800acc8:	46bd      	mov	sp, r7
 800acca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acce:	4770      	bx	lr

0800acd0 <LL_RCC_SetAPB1Prescaler>:
{
 800acd0:	b480      	push	{r7}
 800acd2:	b083      	sub	sp, #12
 800acd4:	af00      	add	r7, sp, #0
 800acd6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800acd8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800acdc:	689b      	ldr	r3, [r3, #8]
 800acde:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800ace2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	4313      	orrs	r3, r2
 800acea:	608b      	str	r3, [r1, #8]
}
 800acec:	bf00      	nop
 800acee:	370c      	adds	r7, #12
 800acf0:	46bd      	mov	sp, r7
 800acf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acf6:	4770      	bx	lr

0800acf8 <LL_RCC_SetAPB2Prescaler>:
{
 800acf8:	b480      	push	{r7}
 800acfa:	b083      	sub	sp, #12
 800acfc:	af00      	add	r7, sp, #0
 800acfe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800ad00:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ad04:	689b      	ldr	r3, [r3, #8]
 800ad06:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800ad0a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	4313      	orrs	r3, r2
 800ad12:	608b      	str	r3, [r1, #8]
}
 800ad14:	bf00      	nop
 800ad16:	370c      	adds	r7, #12
 800ad18:	46bd      	mov	sp, r7
 800ad1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad1e:	4770      	bx	lr

0800ad20 <LL_RCC_GetAHBPrescaler>:
{
 800ad20:	b480      	push	{r7}
 800ad22:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800ad24:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ad28:	689b      	ldr	r3, [r3, #8]
 800ad2a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800ad2e:	4618      	mov	r0, r3
 800ad30:	46bd      	mov	sp, r7
 800ad32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad36:	4770      	bx	lr

0800ad38 <LL_RCC_GetAHB4Prescaler>:
{
 800ad38:	b480      	push	{r7}
 800ad3a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 800ad3c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ad40:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800ad44:	011b      	lsls	r3, r3, #4
 800ad46:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800ad4a:	4618      	mov	r0, r3
 800ad4c:	46bd      	mov	sp, r7
 800ad4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad52:	4770      	bx	lr

0800ad54 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 800ad54:	b480      	push	{r7}
 800ad56:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800ad58:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800ad62:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800ad66:	6013      	str	r3, [r2, #0]
}
 800ad68:	bf00      	nop
 800ad6a:	46bd      	mov	sp, r7
 800ad6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad70:	4770      	bx	lr

0800ad72 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 800ad72:	b480      	push	{r7}
 800ad74:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800ad76:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800ad80:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800ad84:	6013      	str	r3, [r2, #0]
}
 800ad86:	bf00      	nop
 800ad88:	46bd      	mov	sp, r7
 800ad8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad8e:	4770      	bx	lr

0800ad90 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 800ad90:	b480      	push	{r7}
 800ad92:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800ad94:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ad9e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ada2:	d101      	bne.n	800ada8 <LL_RCC_PLL_IsReady+0x18>
 800ada4:	2301      	movs	r3, #1
 800ada6:	e000      	b.n	800adaa <LL_RCC_PLL_IsReady+0x1a>
 800ada8:	2300      	movs	r3, #0
}
 800adaa:	4618      	mov	r0, r3
 800adac:	46bd      	mov	sp, r7
 800adae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adb2:	4770      	bx	lr

0800adb4 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800adb4:	b480      	push	{r7}
 800adb6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800adb8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800adbc:	68db      	ldr	r3, [r3, #12]
 800adbe:	0a1b      	lsrs	r3, r3, #8
 800adc0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 800adc4:	4618      	mov	r0, r3
 800adc6:	46bd      	mov	sp, r7
 800adc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adcc:	4770      	bx	lr

0800adce <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800adce:	b480      	push	{r7}
 800add0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800add2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800add6:	68db      	ldr	r3, [r3, #12]
 800add8:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 800addc:	4618      	mov	r0, r3
 800adde:	46bd      	mov	sp, r7
 800ade0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ade4:	4770      	bx	lr

0800ade6 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800ade6:	b480      	push	{r7}
 800ade8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800adea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800adee:	68db      	ldr	r3, [r3, #12]
 800adf0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 800adf4:	4618      	mov	r0, r3
 800adf6:	46bd      	mov	sp, r7
 800adf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adfc:	4770      	bx	lr

0800adfe <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800adfe:	b480      	push	{r7}
 800ae00:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800ae02:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ae06:	68db      	ldr	r3, [r3, #12]
 800ae08:	f003 0303 	and.w	r3, r3, #3
}
 800ae0c:	4618      	mov	r0, r3
 800ae0e:	46bd      	mov	sp, r7
 800ae10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae14:	4770      	bx	lr

0800ae16 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 800ae16:	b480      	push	{r7}
 800ae18:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800ae1a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ae1e:	689b      	ldr	r3, [r3, #8]
 800ae20:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800ae24:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ae28:	d101      	bne.n	800ae2e <LL_RCC_IsActiveFlag_HPRE+0x18>
 800ae2a:	2301      	movs	r3, #1
 800ae2c:	e000      	b.n	800ae30 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800ae2e:	2300      	movs	r3, #0
}
 800ae30:	4618      	mov	r0, r3
 800ae32:	46bd      	mov	sp, r7
 800ae34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae38:	4770      	bx	lr

0800ae3a <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 800ae3a:	b480      	push	{r7}
 800ae3c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 800ae3e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ae42:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800ae46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ae4a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ae4e:	d101      	bne.n	800ae54 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 800ae50:	2301      	movs	r3, #1
 800ae52:	e000      	b.n	800ae56 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 800ae54:	2300      	movs	r3, #0
}
 800ae56:	4618      	mov	r0, r3
 800ae58:	46bd      	mov	sp, r7
 800ae5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae5e:	4770      	bx	lr

0800ae60 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 800ae60:	b480      	push	{r7}
 800ae62:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 800ae64:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ae68:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800ae6c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800ae70:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ae74:	d101      	bne.n	800ae7a <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800ae76:	2301      	movs	r3, #1
 800ae78:	e000      	b.n	800ae7c <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800ae7a:	2300      	movs	r3, #0
}
 800ae7c:	4618      	mov	r0, r3
 800ae7e:	46bd      	mov	sp, r7
 800ae80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae84:	4770      	bx	lr

0800ae86 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 800ae86:	b480      	push	{r7}
 800ae88:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800ae8a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ae8e:	689b      	ldr	r3, [r3, #8]
 800ae90:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ae94:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ae98:	d101      	bne.n	800ae9e <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800ae9a:	2301      	movs	r3, #1
 800ae9c:	e000      	b.n	800aea0 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800ae9e:	2300      	movs	r3, #0
}
 800aea0:	4618      	mov	r0, r3
 800aea2:	46bd      	mov	sp, r7
 800aea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aea8:	4770      	bx	lr

0800aeaa <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 800aeaa:	b480      	push	{r7}
 800aeac:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800aeae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800aeb2:	689b      	ldr	r3, [r3, #8]
 800aeb4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800aeb8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800aebc:	d101      	bne.n	800aec2 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800aebe:	2301      	movs	r3, #1
 800aec0:	e000      	b.n	800aec4 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800aec2:	2300      	movs	r3, #0
}
 800aec4:	4618      	mov	r0, r3
 800aec6:	46bd      	mov	sp, r7
 800aec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aecc:	4770      	bx	lr
	...

0800aed0 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800aed0:	b590      	push	{r4, r7, lr}
 800aed2:	b08d      	sub	sp, #52	@ 0x34
 800aed4:	af00      	add	r7, sp, #0
 800aed6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d101      	bne.n	800aee2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800aede:	2301      	movs	r3, #1
 800aee0:	e363      	b.n	800b5aa <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	f003 0320 	and.w	r3, r3, #32
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	f000 808d 	beq.w	800b00a <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800aef0:	f7ff fea1 	bl	800ac36 <LL_RCC_GetSysClkSource>
 800aef4:	62f8      	str	r0, [r7, #44]	@ 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800aef6:	f7ff ff82 	bl	800adfe <LL_RCC_PLL_GetMainSource>
 800aefa:	62b8      	str	r0, [r7, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800aefc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d005      	beq.n	800af0e <HAL_RCC_OscConfig+0x3e>
 800af02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af04:	2b0c      	cmp	r3, #12
 800af06:	d147      	bne.n	800af98 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 800af08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af0a:	2b01      	cmp	r3, #1
 800af0c:	d144      	bne.n	800af98 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	69db      	ldr	r3, [r3, #28]
 800af12:	2b00      	cmp	r3, #0
 800af14:	d101      	bne.n	800af1a <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 800af16:	2301      	movs	r3, #1
 800af18:	e347      	b.n	800b5aa <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800af1e:	f7ff fe4c 	bl	800abba <LL_RCC_MSI_GetRange>
 800af22:	4603      	mov	r3, r0
 800af24:	429c      	cmp	r4, r3
 800af26:	d914      	bls.n	800af52 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af2c:	4618      	mov	r0, r3
 800af2e:	f000 fd03 	bl	800b938 <RCC_SetFlashLatencyFromMSIRange>
 800af32:	4603      	mov	r3, r0
 800af34:	2b00      	cmp	r3, #0
 800af36:	d001      	beq.n	800af3c <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 800af38:	2301      	movs	r3, #1
 800af3a:	e336      	b.n	800b5aa <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af40:	4618      	mov	r0, r3
 800af42:	f7ff fe26 	bl	800ab92 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	6a1b      	ldr	r3, [r3, #32]
 800af4a:	4618      	mov	r0, r3
 800af4c:	f7ff fe4a 	bl	800abe4 <LL_RCC_MSI_SetCalibTrimming>
 800af50:	e013      	b.n	800af7a <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af56:	4618      	mov	r0, r3
 800af58:	f7ff fe1b 	bl	800ab92 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	6a1b      	ldr	r3, [r3, #32]
 800af60:	4618      	mov	r0, r3
 800af62:	f7ff fe3f 	bl	800abe4 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af6a:	4618      	mov	r0, r3
 800af6c:	f000 fce4 	bl	800b938 <RCC_SetFlashLatencyFromMSIRange>
 800af70:	4603      	mov	r3, r0
 800af72:	2b00      	cmp	r3, #0
 800af74:	d001      	beq.n	800af7a <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 800af76:	2301      	movs	r3, #1
 800af78:	e317      	b.n	800b5aa <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800af7a:	f000 fcc9 	bl	800b910 <HAL_RCC_GetHCLKFreq>
 800af7e:	4603      	mov	r3, r0
 800af80:	4aa4      	ldr	r2, [pc, #656]	@ (800b214 <HAL_RCC_OscConfig+0x344>)
 800af82:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800af84:	4ba4      	ldr	r3, [pc, #656]	@ (800b218 <HAL_RCC_OscConfig+0x348>)
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	4618      	mov	r0, r3
 800af8a:	f7fc fc83 	bl	8007894 <HAL_InitTick>
 800af8e:	4603      	mov	r3, r0
 800af90:	2b00      	cmp	r3, #0
 800af92:	d039      	beq.n	800b008 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 800af94:	2301      	movs	r3, #1
 800af96:	e308      	b.n	800b5aa <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	69db      	ldr	r3, [r3, #28]
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d01e      	beq.n	800afde <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800afa0:	f7ff fdc8 	bl	800ab34 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800afa4:	f7fc fcc4 	bl	8007930 <HAL_GetTick>
 800afa8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800afaa:	e008      	b.n	800afbe <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800afac:	f7fc fcc0 	bl	8007930 <HAL_GetTick>
 800afb0:	4602      	mov	r2, r0
 800afb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800afb4:	1ad3      	subs	r3, r2, r3
 800afb6:	2b02      	cmp	r3, #2
 800afb8:	d901      	bls.n	800afbe <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800afba:	2303      	movs	r3, #3
 800afbc:	e2f5      	b.n	800b5aa <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 800afbe:	f7ff fdd7 	bl	800ab70 <LL_RCC_MSI_IsReady>
 800afc2:	4603      	mov	r3, r0
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d0f1      	beq.n	800afac <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800afcc:	4618      	mov	r0, r3
 800afce:	f7ff fde0 	bl	800ab92 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	6a1b      	ldr	r3, [r3, #32]
 800afd6:	4618      	mov	r0, r3
 800afd8:	f7ff fe04 	bl	800abe4 <LL_RCC_MSI_SetCalibTrimming>
 800afdc:	e015      	b.n	800b00a <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800afde:	f7ff fdb8 	bl	800ab52 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800afe2:	f7fc fca5 	bl	8007930 <HAL_GetTick>
 800afe6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800afe8:	e008      	b.n	800affc <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800afea:	f7fc fca1 	bl	8007930 <HAL_GetTick>
 800afee:	4602      	mov	r2, r0
 800aff0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aff2:	1ad3      	subs	r3, r2, r3
 800aff4:	2b02      	cmp	r3, #2
 800aff6:	d901      	bls.n	800affc <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800aff8:	2303      	movs	r3, #3
 800affa:	e2d6      	b.n	800b5aa <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 800affc:	f7ff fdb8 	bl	800ab70 <LL_RCC_MSI_IsReady>
 800b000:	4603      	mov	r3, r0
 800b002:	2b00      	cmp	r3, #0
 800b004:	d1f1      	bne.n	800afea <HAL_RCC_OscConfig+0x11a>
 800b006:	e000      	b.n	800b00a <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800b008:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	f003 0301 	and.w	r3, r3, #1
 800b012:	2b00      	cmp	r3, #0
 800b014:	d047      	beq.n	800b0a6 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b016:	f7ff fe0e 	bl	800ac36 <LL_RCC_GetSysClkSource>
 800b01a:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800b01c:	f7ff feef 	bl	800adfe <LL_RCC_PLL_GetMainSource>
 800b020:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800b022:	6a3b      	ldr	r3, [r7, #32]
 800b024:	2b08      	cmp	r3, #8
 800b026:	d005      	beq.n	800b034 <HAL_RCC_OscConfig+0x164>
 800b028:	6a3b      	ldr	r3, [r7, #32]
 800b02a:	2b0c      	cmp	r3, #12
 800b02c:	d108      	bne.n	800b040 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 800b02e:	69fb      	ldr	r3, [r7, #28]
 800b030:	2b03      	cmp	r3, #3
 800b032:	d105      	bne.n	800b040 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	685b      	ldr	r3, [r3, #4]
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d134      	bne.n	800b0a6 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 800b03c:	2301      	movs	r3, #1
 800b03e:	e2b4      	b.n	800b5aa <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	685b      	ldr	r3, [r3, #4]
 800b044:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b048:	d102      	bne.n	800b050 <HAL_RCC_OscConfig+0x180>
 800b04a:	f7ff fbf5 	bl	800a838 <LL_RCC_HSE_Enable>
 800b04e:	e001      	b.n	800b054 <HAL_RCC_OscConfig+0x184>
 800b050:	f7ff fc01 	bl	800a856 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	685b      	ldr	r3, [r3, #4]
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d012      	beq.n	800b082 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b05c:	f7fc fc68 	bl	8007930 <HAL_GetTick>
 800b060:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800b062:	e008      	b.n	800b076 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b064:	f7fc fc64 	bl	8007930 <HAL_GetTick>
 800b068:	4602      	mov	r2, r0
 800b06a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b06c:	1ad3      	subs	r3, r2, r3
 800b06e:	2b64      	cmp	r3, #100	@ 0x64
 800b070:	d901      	bls.n	800b076 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800b072:	2303      	movs	r3, #3
 800b074:	e299      	b.n	800b5aa <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 800b076:	f7ff fbfd 	bl	800a874 <LL_RCC_HSE_IsReady>
 800b07a:	4603      	mov	r3, r0
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d0f1      	beq.n	800b064 <HAL_RCC_OscConfig+0x194>
 800b080:	e011      	b.n	800b0a6 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b082:	f7fc fc55 	bl	8007930 <HAL_GetTick>
 800b086:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 800b088:	e008      	b.n	800b09c <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b08a:	f7fc fc51 	bl	8007930 <HAL_GetTick>
 800b08e:	4602      	mov	r2, r0
 800b090:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b092:	1ad3      	subs	r3, r2, r3
 800b094:	2b64      	cmp	r3, #100	@ 0x64
 800b096:	d901      	bls.n	800b09c <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800b098:	2303      	movs	r3, #3
 800b09a:	e286      	b.n	800b5aa <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 800b09c:	f7ff fbea 	bl	800a874 <LL_RCC_HSE_IsReady>
 800b0a0:	4603      	mov	r3, r0
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d1f1      	bne.n	800b08a <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	f003 0302 	and.w	r3, r3, #2
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d04c      	beq.n	800b14c <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b0b2:	f7ff fdc0 	bl	800ac36 <LL_RCC_GetSysClkSource>
 800b0b6:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800b0b8:	f7ff fea1 	bl	800adfe <LL_RCC_PLL_GetMainSource>
 800b0bc:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800b0be:	69bb      	ldr	r3, [r7, #24]
 800b0c0:	2b04      	cmp	r3, #4
 800b0c2:	d005      	beq.n	800b0d0 <HAL_RCC_OscConfig+0x200>
 800b0c4:	69bb      	ldr	r3, [r7, #24]
 800b0c6:	2b0c      	cmp	r3, #12
 800b0c8:	d10e      	bne.n	800b0e8 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800b0ca:	697b      	ldr	r3, [r7, #20]
 800b0cc:	2b02      	cmp	r3, #2
 800b0ce:	d10b      	bne.n	800b0e8 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	68db      	ldr	r3, [r3, #12]
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d101      	bne.n	800b0dc <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 800b0d8:	2301      	movs	r3, #1
 800b0da:	e266      	b.n	800b5aa <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	691b      	ldr	r3, [r3, #16]
 800b0e0:	4618      	mov	r0, r3
 800b0e2:	f7ff fc09 	bl	800a8f8 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800b0e6:	e031      	b.n	800b14c <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	68db      	ldr	r3, [r3, #12]
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d019      	beq.n	800b124 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800b0f0:	f7ff fbd2 	bl	800a898 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b0f4:	f7fc fc1c 	bl	8007930 <HAL_GetTick>
 800b0f8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800b0fa:	e008      	b.n	800b10e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b0fc:	f7fc fc18 	bl	8007930 <HAL_GetTick>
 800b100:	4602      	mov	r2, r0
 800b102:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b104:	1ad3      	subs	r3, r2, r3
 800b106:	2b02      	cmp	r3, #2
 800b108:	d901      	bls.n	800b10e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800b10a:	2303      	movs	r3, #3
 800b10c:	e24d      	b.n	800b5aa <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 800b10e:	f7ff fbe1 	bl	800a8d4 <LL_RCC_HSI_IsReady>
 800b112:	4603      	mov	r3, r0
 800b114:	2b00      	cmp	r3, #0
 800b116:	d0f1      	beq.n	800b0fc <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	691b      	ldr	r3, [r3, #16]
 800b11c:	4618      	mov	r0, r3
 800b11e:	f7ff fbeb 	bl	800a8f8 <LL_RCC_HSI_SetCalibTrimming>
 800b122:	e013      	b.n	800b14c <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b124:	f7ff fbc7 	bl	800a8b6 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b128:	f7fc fc02 	bl	8007930 <HAL_GetTick>
 800b12c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800b12e:	e008      	b.n	800b142 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b130:	f7fc fbfe 	bl	8007930 <HAL_GetTick>
 800b134:	4602      	mov	r2, r0
 800b136:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b138:	1ad3      	subs	r3, r2, r3
 800b13a:	2b02      	cmp	r3, #2
 800b13c:	d901      	bls.n	800b142 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 800b13e:	2303      	movs	r3, #3
 800b140:	e233      	b.n	800b5aa <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 800b142:	f7ff fbc7 	bl	800a8d4 <LL_RCC_HSI_IsReady>
 800b146:	4603      	mov	r3, r0
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d1f1      	bne.n	800b130 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	f003 0308 	and.w	r3, r3, #8
 800b154:	2b00      	cmp	r3, #0
 800b156:	d106      	bne.n	800b166 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800b160:	2b00      	cmp	r3, #0
 800b162:	f000 80a3 	beq.w	800b2ac <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	695b      	ldr	r3, [r3, #20]
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	d076      	beq.n	800b25c <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	f003 0310 	and.w	r3, r3, #16
 800b176:	2b00      	cmp	r3, #0
 800b178:	d046      	beq.n	800b208 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 800b17a:	f7ff fc7e 	bl	800aa7a <LL_RCC_LSI1_IsReady>
 800b17e:	4603      	mov	r3, r0
 800b180:	2b00      	cmp	r3, #0
 800b182:	d113      	bne.n	800b1ac <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 800b184:	f7ff fc57 	bl	800aa36 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800b188:	f7fc fbd2 	bl	8007930 <HAL_GetTick>
 800b18c:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 800b18e:	e008      	b.n	800b1a2 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800b190:	f7fc fbce 	bl	8007930 <HAL_GetTick>
 800b194:	4602      	mov	r2, r0
 800b196:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b198:	1ad3      	subs	r3, r2, r3
 800b19a:	2b02      	cmp	r3, #2
 800b19c:	d901      	bls.n	800b1a2 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 800b19e:	2303      	movs	r3, #3
 800b1a0:	e203      	b.n	800b5aa <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 800b1a2:	f7ff fc6a 	bl	800aa7a <LL_RCC_LSI1_IsReady>
 800b1a6:	4603      	mov	r3, r0
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d0f1      	beq.n	800b190 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 800b1ac:	f7ff fc77 	bl	800aa9e <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b1b0:	f7fc fbbe 	bl	8007930 <HAL_GetTick>
 800b1b4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 800b1b6:	e008      	b.n	800b1ca <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800b1b8:	f7fc fbba 	bl	8007930 <HAL_GetTick>
 800b1bc:	4602      	mov	r2, r0
 800b1be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1c0:	1ad3      	subs	r3, r2, r3
 800b1c2:	2b03      	cmp	r3, #3
 800b1c4:	d901      	bls.n	800b1ca <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 800b1c6:	2303      	movs	r3, #3
 800b1c8:	e1ef      	b.n	800b5aa <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 800b1ca:	f7ff fc8a 	bl	800aae2 <LL_RCC_LSI2_IsReady>
 800b1ce:	4603      	mov	r3, r0
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d0f1      	beq.n	800b1b8 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	699b      	ldr	r3, [r3, #24]
 800b1d8:	4618      	mov	r0, r3
 800b1da:	f7ff fc94 	bl	800ab06 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 800b1de:	f7ff fc3b 	bl	800aa58 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b1e2:	f7fc fba5 	bl	8007930 <HAL_GetTick>
 800b1e6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 800b1e8:	e008      	b.n	800b1fc <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800b1ea:	f7fc fba1 	bl	8007930 <HAL_GetTick>
 800b1ee:	4602      	mov	r2, r0
 800b1f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1f2:	1ad3      	subs	r3, r2, r3
 800b1f4:	2b02      	cmp	r3, #2
 800b1f6:	d901      	bls.n	800b1fc <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 800b1f8:	2303      	movs	r3, #3
 800b1fa:	e1d6      	b.n	800b5aa <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 800b1fc:	f7ff fc3d 	bl	800aa7a <LL_RCC_LSI1_IsReady>
 800b200:	4603      	mov	r3, r0
 800b202:	2b00      	cmp	r3, #0
 800b204:	d1f1      	bne.n	800b1ea <HAL_RCC_OscConfig+0x31a>
 800b206:	e051      	b.n	800b2ac <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 800b208:	f7ff fc15 	bl	800aa36 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b20c:	f7fc fb90 	bl	8007930 <HAL_GetTick>
 800b210:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 800b212:	e00c      	b.n	800b22e <HAL_RCC_OscConfig+0x35e>
 800b214:	20000050 	.word	0x20000050
 800b218:	20000054 	.word	0x20000054
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800b21c:	f7fc fb88 	bl	8007930 <HAL_GetTick>
 800b220:	4602      	mov	r2, r0
 800b222:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b224:	1ad3      	subs	r3, r2, r3
 800b226:	2b02      	cmp	r3, #2
 800b228:	d901      	bls.n	800b22e <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800b22a:	2303      	movs	r3, #3
 800b22c:	e1bd      	b.n	800b5aa <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 800b22e:	f7ff fc24 	bl	800aa7a <LL_RCC_LSI1_IsReady>
 800b232:	4603      	mov	r3, r0
 800b234:	2b00      	cmp	r3, #0
 800b236:	d0f1      	beq.n	800b21c <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 800b238:	f7ff fc42 	bl	800aac0 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 800b23c:	e008      	b.n	800b250 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800b23e:	f7fc fb77 	bl	8007930 <HAL_GetTick>
 800b242:	4602      	mov	r2, r0
 800b244:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b246:	1ad3      	subs	r3, r2, r3
 800b248:	2b03      	cmp	r3, #3
 800b24a:	d901      	bls.n	800b250 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 800b24c:	2303      	movs	r3, #3
 800b24e:	e1ac      	b.n	800b5aa <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 800b250:	f7ff fc47 	bl	800aae2 <LL_RCC_LSI2_IsReady>
 800b254:	4603      	mov	r3, r0
 800b256:	2b00      	cmp	r3, #0
 800b258:	d1f1      	bne.n	800b23e <HAL_RCC_OscConfig+0x36e>
 800b25a:	e027      	b.n	800b2ac <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 800b25c:	f7ff fc30 	bl	800aac0 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b260:	f7fc fb66 	bl	8007930 <HAL_GetTick>
 800b264:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 800b266:	e008      	b.n	800b27a <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800b268:	f7fc fb62 	bl	8007930 <HAL_GetTick>
 800b26c:	4602      	mov	r2, r0
 800b26e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b270:	1ad3      	subs	r3, r2, r3
 800b272:	2b03      	cmp	r3, #3
 800b274:	d901      	bls.n	800b27a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800b276:	2303      	movs	r3, #3
 800b278:	e197      	b.n	800b5aa <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 800b27a:	f7ff fc32 	bl	800aae2 <LL_RCC_LSI2_IsReady>
 800b27e:	4603      	mov	r3, r0
 800b280:	2b00      	cmp	r3, #0
 800b282:	d1f1      	bne.n	800b268 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 800b284:	f7ff fbe8 	bl	800aa58 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b288:	f7fc fb52 	bl	8007930 <HAL_GetTick>
 800b28c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 800b28e:	e008      	b.n	800b2a2 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800b290:	f7fc fb4e 	bl	8007930 <HAL_GetTick>
 800b294:	4602      	mov	r2, r0
 800b296:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b298:	1ad3      	subs	r3, r2, r3
 800b29a:	2b02      	cmp	r3, #2
 800b29c:	d901      	bls.n	800b2a2 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 800b29e:	2303      	movs	r3, #3
 800b2a0:	e183      	b.n	800b5aa <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 800b2a2:	f7ff fbea 	bl	800aa7a <LL_RCC_LSI1_IsReady>
 800b2a6:	4603      	mov	r3, r0
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d1f1      	bne.n	800b290 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	f003 0304 	and.w	r3, r3, #4
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	d05b      	beq.n	800b370 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b2b8:	4ba7      	ldr	r3, [pc, #668]	@ (800b558 <HAL_RCC_OscConfig+0x688>)
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d114      	bne.n	800b2ee <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800b2c4:	f7ff fa88 	bl	800a7d8 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800b2c8:	f7fc fb32 	bl	8007930 <HAL_GetTick>
 800b2cc:	6278      	str	r0, [r7, #36]	@ 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b2ce:	e008      	b.n	800b2e2 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b2d0:	f7fc fb2e 	bl	8007930 <HAL_GetTick>
 800b2d4:	4602      	mov	r2, r0
 800b2d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2d8:	1ad3      	subs	r3, r2, r3
 800b2da:	2b02      	cmp	r3, #2
 800b2dc:	d901      	bls.n	800b2e2 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 800b2de:	2303      	movs	r3, #3
 800b2e0:	e163      	b.n	800b5aa <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b2e2:	4b9d      	ldr	r3, [pc, #628]	@ (800b558 <HAL_RCC_OscConfig+0x688>)
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	d0f0      	beq.n	800b2d0 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	689b      	ldr	r3, [r3, #8]
 800b2f2:	2b01      	cmp	r3, #1
 800b2f4:	d102      	bne.n	800b2fc <HAL_RCC_OscConfig+0x42c>
 800b2f6:	f7ff fb48 	bl	800a98a <LL_RCC_LSE_Enable>
 800b2fa:	e00c      	b.n	800b316 <HAL_RCC_OscConfig+0x446>
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	689b      	ldr	r3, [r3, #8]
 800b300:	2b05      	cmp	r3, #5
 800b302:	d104      	bne.n	800b30e <HAL_RCC_OscConfig+0x43e>
 800b304:	f7ff fb63 	bl	800a9ce <LL_RCC_LSE_EnableBypass>
 800b308:	f7ff fb3f 	bl	800a98a <LL_RCC_LSE_Enable>
 800b30c:	e003      	b.n	800b316 <HAL_RCC_OscConfig+0x446>
 800b30e:	f7ff fb4d 	bl	800a9ac <LL_RCC_LSE_Disable>
 800b312:	f7ff fb6d 	bl	800a9f0 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	689b      	ldr	r3, [r3, #8]
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d014      	beq.n	800b348 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b31e:	f7fc fb07 	bl	8007930 <HAL_GetTick>
 800b322:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 800b324:	e00a      	b.n	800b33c <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b326:	f7fc fb03 	bl	8007930 <HAL_GetTick>
 800b32a:	4602      	mov	r2, r0
 800b32c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b32e:	1ad3      	subs	r3, r2, r3
 800b330:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b334:	4293      	cmp	r3, r2
 800b336:	d901      	bls.n	800b33c <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 800b338:	2303      	movs	r3, #3
 800b33a:	e136      	b.n	800b5aa <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 800b33c:	f7ff fb69 	bl	800aa12 <LL_RCC_LSE_IsReady>
 800b340:	4603      	mov	r3, r0
 800b342:	2b00      	cmp	r3, #0
 800b344:	d0ef      	beq.n	800b326 <HAL_RCC_OscConfig+0x456>
 800b346:	e013      	b.n	800b370 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b348:	f7fc faf2 	bl	8007930 <HAL_GetTick>
 800b34c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800b34e:	e00a      	b.n	800b366 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b350:	f7fc faee 	bl	8007930 <HAL_GetTick>
 800b354:	4602      	mov	r2, r0
 800b356:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b358:	1ad3      	subs	r3, r2, r3
 800b35a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b35e:	4293      	cmp	r3, r2
 800b360:	d901      	bls.n	800b366 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 800b362:	2303      	movs	r3, #3
 800b364:	e121      	b.n	800b5aa <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 800b366:	f7ff fb54 	bl	800aa12 <LL_RCC_LSE_IsReady>
 800b36a:	4603      	mov	r3, r0
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	d1ef      	bne.n	800b350 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d02c      	beq.n	800b3d6 <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b380:	2b00      	cmp	r3, #0
 800b382:	d014      	beq.n	800b3ae <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800b384:	f7ff facd 	bl	800a922 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b388:	f7fc fad2 	bl	8007930 <HAL_GetTick>
 800b38c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 800b38e:	e008      	b.n	800b3a2 <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800b390:	f7fc face 	bl	8007930 <HAL_GetTick>
 800b394:	4602      	mov	r2, r0
 800b396:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b398:	1ad3      	subs	r3, r2, r3
 800b39a:	2b02      	cmp	r3, #2
 800b39c:	d901      	bls.n	800b3a2 <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 800b39e:	2303      	movs	r3, #3
 800b3a0:	e103      	b.n	800b5aa <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 800b3a2:	f7ff fae0 	bl	800a966 <LL_RCC_HSI48_IsReady>
 800b3a6:	4603      	mov	r3, r0
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	d0f1      	beq.n	800b390 <HAL_RCC_OscConfig+0x4c0>
 800b3ac:	e013      	b.n	800b3d6 <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800b3ae:	f7ff fac9 	bl	800a944 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b3b2:	f7fc fabd 	bl	8007930 <HAL_GetTick>
 800b3b6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 800b3b8:	e008      	b.n	800b3cc <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800b3ba:	f7fc fab9 	bl	8007930 <HAL_GetTick>
 800b3be:	4602      	mov	r2, r0
 800b3c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3c2:	1ad3      	subs	r3, r2, r3
 800b3c4:	2b02      	cmp	r3, #2
 800b3c6:	d901      	bls.n	800b3cc <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 800b3c8:	2303      	movs	r3, #3
 800b3ca:	e0ee      	b.n	800b5aa <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 800b3cc:	f7ff facb 	bl	800a966 <LL_RCC_HSI48_IsReady>
 800b3d0:	4603      	mov	r3, r0
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	d1f1      	bne.n	800b3ba <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	f000 80e4 	beq.w	800b5a8 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b3e0:	f7ff fc29 	bl	800ac36 <LL_RCC_GetSysClkSource>
 800b3e4:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 800b3e6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b3ea:	68db      	ldr	r3, [r3, #12]
 800b3ec:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b3f2:	2b02      	cmp	r3, #2
 800b3f4:	f040 80b4 	bne.w	800b560 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b3f8:	68fb      	ldr	r3, [r7, #12]
 800b3fa:	f003 0203 	and.w	r2, r3, #3
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b402:	429a      	cmp	r2, r3
 800b404:	d123      	bne.n	800b44e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b410:	429a      	cmp	r2, r3
 800b412:	d11c      	bne.n	800b44e <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	0a1b      	lsrs	r3, r3, #8
 800b418:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800b420:	429a      	cmp	r2, r3
 800b422:	d114      	bne.n	800b44e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800b424:	68fb      	ldr	r3, [r7, #12]
 800b426:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800b42e:	429a      	cmp	r2, r3
 800b430:	d10d      	bne.n	800b44e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	f003 6260 	and.w	r2, r3, #234881024	@ 0xe000000
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800b43c:	429a      	cmp	r2, r3
 800b43e:	d106      	bne.n	800b44e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800b440:	68fb      	ldr	r3, [r7, #12]
 800b442:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800b44a:	429a      	cmp	r2, r3
 800b44c:	d05d      	beq.n	800b50a <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800b44e:	693b      	ldr	r3, [r7, #16]
 800b450:	2b0c      	cmp	r3, #12
 800b452:	d058      	beq.n	800b506 <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800b454:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d001      	beq.n	800b466 <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 800b462:	2301      	movs	r3, #1
 800b464:	e0a1      	b.n	800b5aa <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800b466:	f7ff fc84 	bl	800ad72 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800b46a:	f7fc fa61 	bl	8007930 <HAL_GetTick>
 800b46e:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b470:	e008      	b.n	800b484 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b472:	f7fc fa5d 	bl	8007930 <HAL_GetTick>
 800b476:	4602      	mov	r2, r0
 800b478:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b47a:	1ad3      	subs	r3, r2, r3
 800b47c:	2b02      	cmp	r3, #2
 800b47e:	d901      	bls.n	800b484 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 800b480:	2303      	movs	r3, #3
 800b482:	e092      	b.n	800b5aa <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b484:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b48e:	2b00      	cmp	r3, #0
 800b490:	d1ef      	bne.n	800b472 <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800b492:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b496:	68da      	ldr	r2, [r3, #12]
 800b498:	4b30      	ldr	r3, [pc, #192]	@ (800b55c <HAL_RCC_OscConfig+0x68c>)
 800b49a:	4013      	ands	r3, r2
 800b49c:	687a      	ldr	r2, [r7, #4]
 800b49e:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 800b4a0:	687a      	ldr	r2, [r7, #4]
 800b4a2:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800b4a4:	4311      	orrs	r1, r2
 800b4a6:	687a      	ldr	r2, [r7, #4]
 800b4a8:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800b4aa:	0212      	lsls	r2, r2, #8
 800b4ac:	4311      	orrs	r1, r2
 800b4ae:	687a      	ldr	r2, [r7, #4]
 800b4b0:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800b4b2:	4311      	orrs	r1, r2
 800b4b4:	687a      	ldr	r2, [r7, #4]
 800b4b6:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800b4b8:	4311      	orrs	r1, r2
 800b4ba:	687a      	ldr	r2, [r7, #4]
 800b4bc:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800b4be:	430a      	orrs	r2, r1
 800b4c0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800b4c4:	4313      	orrs	r3, r2
 800b4c6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800b4c8:	f7ff fc44 	bl	800ad54 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800b4cc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b4d0:	68db      	ldr	r3, [r3, #12]
 800b4d2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b4d6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b4da:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800b4dc:	f7fc fa28 	bl	8007930 <HAL_GetTick>
 800b4e0:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b4e2:	e008      	b.n	800b4f6 <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b4e4:	f7fc fa24 	bl	8007930 <HAL_GetTick>
 800b4e8:	4602      	mov	r2, r0
 800b4ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4ec:	1ad3      	subs	r3, r2, r3
 800b4ee:	2b02      	cmp	r3, #2
 800b4f0:	d901      	bls.n	800b4f6 <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 800b4f2:	2303      	movs	r3, #3
 800b4f4:	e059      	b.n	800b5aa <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b4f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b500:	2b00      	cmp	r3, #0
 800b502:	d0ef      	beq.n	800b4e4 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800b504:	e050      	b.n	800b5a8 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800b506:	2301      	movs	r3, #1
 800b508:	e04f      	b.n	800b5aa <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b50a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b514:	2b00      	cmp	r3, #0
 800b516:	d147      	bne.n	800b5a8 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800b518:	f7ff fc1c 	bl	800ad54 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800b51c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b520:	68db      	ldr	r3, [r3, #12]
 800b522:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b526:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b52a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800b52c:	f7fc fa00 	bl	8007930 <HAL_GetTick>
 800b530:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b532:	e008      	b.n	800b546 <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b534:	f7fc f9fc 	bl	8007930 <HAL_GetTick>
 800b538:	4602      	mov	r2, r0
 800b53a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b53c:	1ad3      	subs	r3, r2, r3
 800b53e:	2b02      	cmp	r3, #2
 800b540:	d901      	bls.n	800b546 <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 800b542:	2303      	movs	r3, #3
 800b544:	e031      	b.n	800b5aa <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b546:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b550:	2b00      	cmp	r3, #0
 800b552:	d0ef      	beq.n	800b534 <HAL_RCC_OscConfig+0x664>
 800b554:	e028      	b.n	800b5a8 <HAL_RCC_OscConfig+0x6d8>
 800b556:	bf00      	nop
 800b558:	58000400 	.word	0x58000400
 800b55c:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800b560:	693b      	ldr	r3, [r7, #16]
 800b562:	2b0c      	cmp	r3, #12
 800b564:	d01e      	beq.n	800b5a4 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b566:	f7ff fc04 	bl	800ad72 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b56a:	f7fc f9e1 	bl	8007930 <HAL_GetTick>
 800b56e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b570:	e008      	b.n	800b584 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b572:	f7fc f9dd 	bl	8007930 <HAL_GetTick>
 800b576:	4602      	mov	r2, r0
 800b578:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b57a:	1ad3      	subs	r3, r2, r3
 800b57c:	2b02      	cmp	r3, #2
 800b57e:	d901      	bls.n	800b584 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 800b580:	2303      	movs	r3, #3
 800b582:	e012      	b.n	800b5aa <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b584:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b58e:	2b00      	cmp	r3, #0
 800b590:	d1ef      	bne.n	800b572 <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 800b592:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b596:	68da      	ldr	r2, [r3, #12]
 800b598:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800b59c:	4b05      	ldr	r3, [pc, #20]	@ (800b5b4 <HAL_RCC_OscConfig+0x6e4>)
 800b59e:	4013      	ands	r3, r2
 800b5a0:	60cb      	str	r3, [r1, #12]
 800b5a2:	e001      	b.n	800b5a8 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800b5a4:	2301      	movs	r3, #1
 800b5a6:	e000      	b.n	800b5aa <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 800b5a8:	2300      	movs	r3, #0
}
 800b5aa:	4618      	mov	r0, r3
 800b5ac:	3734      	adds	r7, #52	@ 0x34
 800b5ae:	46bd      	mov	sp, r7
 800b5b0:	bd90      	pop	{r4, r7, pc}
 800b5b2:	bf00      	nop
 800b5b4:	eefefffc 	.word	0xeefefffc

0800b5b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b5b8:	b580      	push	{r7, lr}
 800b5ba:	b084      	sub	sp, #16
 800b5bc:	af00      	add	r7, sp, #0
 800b5be:	6078      	str	r0, [r7, #4]
 800b5c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	d101      	bne.n	800b5cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800b5c8:	2301      	movs	r3, #1
 800b5ca:	e12d      	b.n	800b828 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800b5cc:	4b98      	ldr	r3, [pc, #608]	@ (800b830 <HAL_RCC_ClockConfig+0x278>)
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	f003 0307 	and.w	r3, r3, #7
 800b5d4:	683a      	ldr	r2, [r7, #0]
 800b5d6:	429a      	cmp	r2, r3
 800b5d8:	d91b      	bls.n	800b612 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b5da:	4b95      	ldr	r3, [pc, #596]	@ (800b830 <HAL_RCC_ClockConfig+0x278>)
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	f023 0207 	bic.w	r2, r3, #7
 800b5e2:	4993      	ldr	r1, [pc, #588]	@ (800b830 <HAL_RCC_ClockConfig+0x278>)
 800b5e4:	683b      	ldr	r3, [r7, #0]
 800b5e6:	4313      	orrs	r3, r2
 800b5e8:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b5ea:	f7fc f9a1 	bl	8007930 <HAL_GetTick>
 800b5ee:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b5f0:	e008      	b.n	800b604 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800b5f2:	f7fc f99d 	bl	8007930 <HAL_GetTick>
 800b5f6:	4602      	mov	r2, r0
 800b5f8:	68fb      	ldr	r3, [r7, #12]
 800b5fa:	1ad3      	subs	r3, r2, r3
 800b5fc:	2b02      	cmp	r3, #2
 800b5fe:	d901      	bls.n	800b604 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 800b600:	2303      	movs	r3, #3
 800b602:	e111      	b.n	800b828 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b604:	4b8a      	ldr	r3, [pc, #552]	@ (800b830 <HAL_RCC_ClockConfig+0x278>)
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	f003 0307 	and.w	r3, r3, #7
 800b60c:	683a      	ldr	r2, [r7, #0]
 800b60e:	429a      	cmp	r2, r3
 800b610:	d1ef      	bne.n	800b5f2 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	f003 0302 	and.w	r3, r3, #2
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	d016      	beq.n	800b64c <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	689b      	ldr	r3, [r3, #8]
 800b622:	4618      	mov	r0, r3
 800b624:	f7ff fb13 	bl	800ac4e <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800b628:	f7fc f982 	bl	8007930 <HAL_GetTick>
 800b62c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800b62e:	e008      	b.n	800b642 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800b630:	f7fc f97e 	bl	8007930 <HAL_GetTick>
 800b634:	4602      	mov	r2, r0
 800b636:	68fb      	ldr	r3, [r7, #12]
 800b638:	1ad3      	subs	r3, r2, r3
 800b63a:	2b02      	cmp	r3, #2
 800b63c:	d901      	bls.n	800b642 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800b63e:	2303      	movs	r3, #3
 800b640:	e0f2      	b.n	800b828 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800b642:	f7ff fbe8 	bl	800ae16 <LL_RCC_IsActiveFlag_HPRE>
 800b646:	4603      	mov	r3, r0
 800b648:	2b00      	cmp	r3, #0
 800b64a:	d0f1      	beq.n	800b630 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	f003 0320 	and.w	r3, r3, #32
 800b654:	2b00      	cmp	r3, #0
 800b656:	d016      	beq.n	800b686 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	695b      	ldr	r3, [r3, #20]
 800b65c:	4618      	mov	r0, r3
 800b65e:	f7ff fb0a 	bl	800ac76 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800b662:	f7fc f965 	bl	8007930 <HAL_GetTick>
 800b666:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800b668:	e008      	b.n	800b67c <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800b66a:	f7fc f961 	bl	8007930 <HAL_GetTick>
 800b66e:	4602      	mov	r2, r0
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	1ad3      	subs	r3, r2, r3
 800b674:	2b02      	cmp	r3, #2
 800b676:	d901      	bls.n	800b67c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 800b678:	2303      	movs	r3, #3
 800b67a:	e0d5      	b.n	800b828 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800b67c:	f7ff fbdd 	bl	800ae3a <LL_RCC_IsActiveFlag_C2HPRE>
 800b680:	4603      	mov	r3, r0
 800b682:	2b00      	cmp	r3, #0
 800b684:	d0f1      	beq.n	800b66a <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b68e:	2b00      	cmp	r3, #0
 800b690:	d016      	beq.n	800b6c0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	699b      	ldr	r3, [r3, #24]
 800b696:	4618      	mov	r0, r3
 800b698:	f7ff fb03 	bl	800aca2 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800b69c:	f7fc f948 	bl	8007930 <HAL_GetTick>
 800b6a0:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800b6a2:	e008      	b.n	800b6b6 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800b6a4:	f7fc f944 	bl	8007930 <HAL_GetTick>
 800b6a8:	4602      	mov	r2, r0
 800b6aa:	68fb      	ldr	r3, [r7, #12]
 800b6ac:	1ad3      	subs	r3, r2, r3
 800b6ae:	2b02      	cmp	r3, #2
 800b6b0:	d901      	bls.n	800b6b6 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800b6b2:	2303      	movs	r3, #3
 800b6b4:	e0b8      	b.n	800b828 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800b6b6:	f7ff fbd3 	bl	800ae60 <LL_RCC_IsActiveFlag_SHDHPRE>
 800b6ba:	4603      	mov	r3, r0
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	d0f1      	beq.n	800b6a4 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	f003 0304 	and.w	r3, r3, #4
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d016      	beq.n	800b6fa <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	68db      	ldr	r3, [r3, #12]
 800b6d0:	4618      	mov	r0, r3
 800b6d2:	f7ff fafd 	bl	800acd0 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800b6d6:	f7fc f92b 	bl	8007930 <HAL_GetTick>
 800b6da:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800b6dc:	e008      	b.n	800b6f0 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800b6de:	f7fc f927 	bl	8007930 <HAL_GetTick>
 800b6e2:	4602      	mov	r2, r0
 800b6e4:	68fb      	ldr	r3, [r7, #12]
 800b6e6:	1ad3      	subs	r3, r2, r3
 800b6e8:	2b02      	cmp	r3, #2
 800b6ea:	d901      	bls.n	800b6f0 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 800b6ec:	2303      	movs	r3, #3
 800b6ee:	e09b      	b.n	800b828 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800b6f0:	f7ff fbc9 	bl	800ae86 <LL_RCC_IsActiveFlag_PPRE1>
 800b6f4:	4603      	mov	r3, r0
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	d0f1      	beq.n	800b6de <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	681b      	ldr	r3, [r3, #0]
 800b6fe:	f003 0308 	and.w	r3, r3, #8
 800b702:	2b00      	cmp	r3, #0
 800b704:	d017      	beq.n	800b736 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	691b      	ldr	r3, [r3, #16]
 800b70a:	00db      	lsls	r3, r3, #3
 800b70c:	4618      	mov	r0, r3
 800b70e:	f7ff faf3 	bl	800acf8 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800b712:	f7fc f90d 	bl	8007930 <HAL_GetTick>
 800b716:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800b718:	e008      	b.n	800b72c <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800b71a:	f7fc f909 	bl	8007930 <HAL_GetTick>
 800b71e:	4602      	mov	r2, r0
 800b720:	68fb      	ldr	r3, [r7, #12]
 800b722:	1ad3      	subs	r3, r2, r3
 800b724:	2b02      	cmp	r3, #2
 800b726:	d901      	bls.n	800b72c <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 800b728:	2303      	movs	r3, #3
 800b72a:	e07d      	b.n	800b828 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800b72c:	f7ff fbbd 	bl	800aeaa <LL_RCC_IsActiveFlag_PPRE2>
 800b730:	4603      	mov	r3, r0
 800b732:	2b00      	cmp	r3, #0
 800b734:	d0f1      	beq.n	800b71a <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	f003 0301 	and.w	r3, r3, #1
 800b73e:	2b00      	cmp	r3, #0
 800b740:	d043      	beq.n	800b7ca <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	685b      	ldr	r3, [r3, #4]
 800b746:	2b02      	cmp	r3, #2
 800b748:	d106      	bne.n	800b758 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800b74a:	f7ff f893 	bl	800a874 <LL_RCC_HSE_IsReady>
 800b74e:	4603      	mov	r3, r0
 800b750:	2b00      	cmp	r3, #0
 800b752:	d11e      	bne.n	800b792 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800b754:	2301      	movs	r3, #1
 800b756:	e067      	b.n	800b828 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	685b      	ldr	r3, [r3, #4]
 800b75c:	2b03      	cmp	r3, #3
 800b75e:	d106      	bne.n	800b76e <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 800b760:	f7ff fb16 	bl	800ad90 <LL_RCC_PLL_IsReady>
 800b764:	4603      	mov	r3, r0
 800b766:	2b00      	cmp	r3, #0
 800b768:	d113      	bne.n	800b792 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800b76a:	2301      	movs	r3, #1
 800b76c:	e05c      	b.n	800b828 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	685b      	ldr	r3, [r3, #4]
 800b772:	2b00      	cmp	r3, #0
 800b774:	d106      	bne.n	800b784 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800b776:	f7ff f9fb 	bl	800ab70 <LL_RCC_MSI_IsReady>
 800b77a:	4603      	mov	r3, r0
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	d108      	bne.n	800b792 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800b780:	2301      	movs	r3, #1
 800b782:	e051      	b.n	800b828 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 800b784:	f7ff f8a6 	bl	800a8d4 <LL_RCC_HSI_IsReady>
 800b788:	4603      	mov	r3, r0
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	d101      	bne.n	800b792 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800b78e:	2301      	movs	r3, #1
 800b790:	e04a      	b.n	800b828 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	685b      	ldr	r3, [r3, #4]
 800b796:	4618      	mov	r0, r3
 800b798:	f7ff fa39 	bl	800ac0e <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b79c:	f7fc f8c8 	bl	8007930 <HAL_GetTick>
 800b7a0:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b7a2:	e00a      	b.n	800b7ba <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b7a4:	f7fc f8c4 	bl	8007930 <HAL_GetTick>
 800b7a8:	4602      	mov	r2, r0
 800b7aa:	68fb      	ldr	r3, [r7, #12]
 800b7ac:	1ad3      	subs	r3, r2, r3
 800b7ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b7b2:	4293      	cmp	r3, r2
 800b7b4:	d901      	bls.n	800b7ba <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 800b7b6:	2303      	movs	r3, #3
 800b7b8:	e036      	b.n	800b828 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b7ba:	f7ff fa3c 	bl	800ac36 <LL_RCC_GetSysClkSource>
 800b7be:	4602      	mov	r2, r0
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	685b      	ldr	r3, [r3, #4]
 800b7c4:	009b      	lsls	r3, r3, #2
 800b7c6:	429a      	cmp	r2, r3
 800b7c8:	d1ec      	bne.n	800b7a4 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800b7ca:	4b19      	ldr	r3, [pc, #100]	@ (800b830 <HAL_RCC_ClockConfig+0x278>)
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	f003 0307 	and.w	r3, r3, #7
 800b7d2:	683a      	ldr	r2, [r7, #0]
 800b7d4:	429a      	cmp	r2, r3
 800b7d6:	d21b      	bcs.n	800b810 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b7d8:	4b15      	ldr	r3, [pc, #84]	@ (800b830 <HAL_RCC_ClockConfig+0x278>)
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	f023 0207 	bic.w	r2, r3, #7
 800b7e0:	4913      	ldr	r1, [pc, #76]	@ (800b830 <HAL_RCC_ClockConfig+0x278>)
 800b7e2:	683b      	ldr	r3, [r7, #0]
 800b7e4:	4313      	orrs	r3, r2
 800b7e6:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b7e8:	f7fc f8a2 	bl	8007930 <HAL_GetTick>
 800b7ec:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b7ee:	e008      	b.n	800b802 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800b7f0:	f7fc f89e 	bl	8007930 <HAL_GetTick>
 800b7f4:	4602      	mov	r2, r0
 800b7f6:	68fb      	ldr	r3, [r7, #12]
 800b7f8:	1ad3      	subs	r3, r2, r3
 800b7fa:	2b02      	cmp	r3, #2
 800b7fc:	d901      	bls.n	800b802 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 800b7fe:	2303      	movs	r3, #3
 800b800:	e012      	b.n	800b828 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b802:	4b0b      	ldr	r3, [pc, #44]	@ (800b830 <HAL_RCC_ClockConfig+0x278>)
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	f003 0307 	and.w	r3, r3, #7
 800b80a:	683a      	ldr	r2, [r7, #0]
 800b80c:	429a      	cmp	r2, r3
 800b80e:	d1ef      	bne.n	800b7f0 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800b810:	f000 f87e 	bl	800b910 <HAL_RCC_GetHCLKFreq>
 800b814:	4603      	mov	r3, r0
 800b816:	4a07      	ldr	r2, [pc, #28]	@ (800b834 <HAL_RCC_ClockConfig+0x27c>)
 800b818:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 800b81a:	f7fc f895 	bl	8007948 <HAL_GetTickPrio>
 800b81e:	4603      	mov	r3, r0
 800b820:	4618      	mov	r0, r3
 800b822:	f7fc f837 	bl	8007894 <HAL_InitTick>
 800b826:	4603      	mov	r3, r0
}
 800b828:	4618      	mov	r0, r3
 800b82a:	3710      	adds	r7, #16
 800b82c:	46bd      	mov	sp, r7
 800b82e:	bd80      	pop	{r7, pc}
 800b830:	58004000 	.word	0x58004000
 800b834:	20000050 	.word	0x20000050

0800b838 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b838:	b590      	push	{r4, r7, lr}
 800b83a:	b085      	sub	sp, #20
 800b83c:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b83e:	f7ff f9fa 	bl	800ac36 <LL_RCC_GetSysClkSource>
 800b842:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	2b00      	cmp	r3, #0
 800b848:	d10a      	bne.n	800b860 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800b84a:	f7ff f9b6 	bl	800abba <LL_RCC_MSI_GetRange>
 800b84e:	4603      	mov	r3, r0
 800b850:	091b      	lsrs	r3, r3, #4
 800b852:	f003 030f 	and.w	r3, r3, #15
 800b856:	4a2b      	ldr	r2, [pc, #172]	@ (800b904 <HAL_RCC_GetSysClockFreq+0xcc>)
 800b858:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b85c:	60fb      	str	r3, [r7, #12]
 800b85e:	e04b      	b.n	800b8f8 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	2b04      	cmp	r3, #4
 800b864:	d102      	bne.n	800b86c <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800b866:	4b28      	ldr	r3, [pc, #160]	@ (800b908 <HAL_RCC_GetSysClockFreq+0xd0>)
 800b868:	60fb      	str	r3, [r7, #12]
 800b86a:	e045      	b.n	800b8f8 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	2b08      	cmp	r3, #8
 800b870:	d10a      	bne.n	800b888 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800b872:	f7fe ffcf 	bl	800a814 <LL_RCC_HSE_IsEnabledDiv2>
 800b876:	4603      	mov	r3, r0
 800b878:	2b01      	cmp	r3, #1
 800b87a:	d102      	bne.n	800b882 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 800b87c:	4b22      	ldr	r3, [pc, #136]	@ (800b908 <HAL_RCC_GetSysClockFreq+0xd0>)
 800b87e:	60fb      	str	r3, [r7, #12]
 800b880:	e03a      	b.n	800b8f8 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800b882:	4b22      	ldr	r3, [pc, #136]	@ (800b90c <HAL_RCC_GetSysClockFreq+0xd4>)
 800b884:	60fb      	str	r3, [r7, #12]
 800b886:	e037      	b.n	800b8f8 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 800b888:	f7ff fab9 	bl	800adfe <LL_RCC_PLL_GetMainSource>
 800b88c:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 800b88e:	683b      	ldr	r3, [r7, #0]
 800b890:	2b02      	cmp	r3, #2
 800b892:	d003      	beq.n	800b89c <HAL_RCC_GetSysClockFreq+0x64>
 800b894:	683b      	ldr	r3, [r7, #0]
 800b896:	2b03      	cmp	r3, #3
 800b898:	d003      	beq.n	800b8a2 <HAL_RCC_GetSysClockFreq+0x6a>
 800b89a:	e00d      	b.n	800b8b8 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 800b89c:	4b1a      	ldr	r3, [pc, #104]	@ (800b908 <HAL_RCC_GetSysClockFreq+0xd0>)
 800b89e:	60bb      	str	r3, [r7, #8]
        break;
 800b8a0:	e015      	b.n	800b8ce <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800b8a2:	f7fe ffb7 	bl	800a814 <LL_RCC_HSE_IsEnabledDiv2>
 800b8a6:	4603      	mov	r3, r0
 800b8a8:	2b01      	cmp	r3, #1
 800b8aa:	d102      	bne.n	800b8b2 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 800b8ac:	4b16      	ldr	r3, [pc, #88]	@ (800b908 <HAL_RCC_GetSysClockFreq+0xd0>)
 800b8ae:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800b8b0:	e00d      	b.n	800b8ce <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 800b8b2:	4b16      	ldr	r3, [pc, #88]	@ (800b90c <HAL_RCC_GetSysClockFreq+0xd4>)
 800b8b4:	60bb      	str	r3, [r7, #8]
        break;
 800b8b6:	e00a      	b.n	800b8ce <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800b8b8:	f7ff f97f 	bl	800abba <LL_RCC_MSI_GetRange>
 800b8bc:	4603      	mov	r3, r0
 800b8be:	091b      	lsrs	r3, r3, #4
 800b8c0:	f003 030f 	and.w	r3, r3, #15
 800b8c4:	4a0f      	ldr	r2, [pc, #60]	@ (800b904 <HAL_RCC_GetSysClockFreq+0xcc>)
 800b8c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b8ca:	60bb      	str	r3, [r7, #8]
        break;
 800b8cc:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 800b8ce:	f7ff fa71 	bl	800adb4 <LL_RCC_PLL_GetN>
 800b8d2:	4602      	mov	r2, r0
 800b8d4:	68bb      	ldr	r3, [r7, #8]
 800b8d6:	fb03 f402 	mul.w	r4, r3, r2
 800b8da:	f7ff fa84 	bl	800ade6 <LL_RCC_PLL_GetDivider>
 800b8de:	4603      	mov	r3, r0
 800b8e0:	091b      	lsrs	r3, r3, #4
 800b8e2:	3301      	adds	r3, #1
 800b8e4:	fbb4 f4f3 	udiv	r4, r4, r3
 800b8e8:	f7ff fa71 	bl	800adce <LL_RCC_PLL_GetR>
 800b8ec:	4603      	mov	r3, r0
 800b8ee:	0f5b      	lsrs	r3, r3, #29
 800b8f0:	3301      	adds	r3, #1
 800b8f2:	fbb4 f3f3 	udiv	r3, r4, r3
 800b8f6:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 800b8f8:	68fb      	ldr	r3, [r7, #12]
}
 800b8fa:	4618      	mov	r0, r3
 800b8fc:	3714      	adds	r7, #20
 800b8fe:	46bd      	mov	sp, r7
 800b900:	bd90      	pop	{r4, r7, pc}
 800b902:	bf00      	nop
 800b904:	080123ac 	.word	0x080123ac
 800b908:	00f42400 	.word	0x00f42400
 800b90c:	01e84800 	.word	0x01e84800

0800b910 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b910:	b598      	push	{r3, r4, r7, lr}
 800b912:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800b914:	f7ff ff90 	bl	800b838 <HAL_RCC_GetSysClockFreq>
 800b918:	4604      	mov	r4, r0
 800b91a:	f7ff fa01 	bl	800ad20 <LL_RCC_GetAHBPrescaler>
 800b91e:	4603      	mov	r3, r0
 800b920:	091b      	lsrs	r3, r3, #4
 800b922:	f003 030f 	and.w	r3, r3, #15
 800b926:	4a03      	ldr	r2, [pc, #12]	@ (800b934 <HAL_RCC_GetHCLKFreq+0x24>)
 800b928:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b92c:	fbb4 f3f3 	udiv	r3, r4, r3
}
 800b930:	4618      	mov	r0, r3
 800b932:	bd98      	pop	{r3, r4, r7, pc}
 800b934:	0801236c 	.word	0x0801236c

0800b938 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 800b938:	b590      	push	{r4, r7, lr}
 800b93a:	b085      	sub	sp, #20
 800b93c:	af00      	add	r7, sp, #0
 800b93e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	2bb0      	cmp	r3, #176	@ 0xb0
 800b944:	d903      	bls.n	800b94e <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 800b946:	4b15      	ldr	r3, [pc, #84]	@ (800b99c <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800b948:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b94a:	60fb      	str	r3, [r7, #12]
 800b94c:	e007      	b.n	800b95e <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	091b      	lsrs	r3, r3, #4
 800b952:	f003 030f 	and.w	r3, r3, #15
 800b956:	4a11      	ldr	r2, [pc, #68]	@ (800b99c <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800b958:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b95c:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 800b95e:	f7ff f9eb 	bl	800ad38 <LL_RCC_GetAHB4Prescaler>
 800b962:	4603      	mov	r3, r0
 800b964:	091b      	lsrs	r3, r3, #4
 800b966:	f003 030f 	and.w	r3, r3, #15
 800b96a:	4a0d      	ldr	r2, [pc, #52]	@ (800b9a0 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 800b96c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b970:	68fa      	ldr	r2, [r7, #12]
 800b972:	fbb2 f3f3 	udiv	r3, r2, r3
 800b976:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800b978:	68bb      	ldr	r3, [r7, #8]
 800b97a:	4a0a      	ldr	r2, [pc, #40]	@ (800b9a4 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 800b97c:	fba2 2303 	umull	r2, r3, r2, r3
 800b980:	0c9c      	lsrs	r4, r3, #18
 800b982:	f7fe ff39 	bl	800a7f8 <HAL_PWREx_GetVoltageRange>
 800b986:	4603      	mov	r3, r0
 800b988:	4619      	mov	r1, r3
 800b98a:	4620      	mov	r0, r4
 800b98c:	f000 f80c 	bl	800b9a8 <RCC_SetFlashLatency>
 800b990:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 800b992:	4618      	mov	r0, r3
 800b994:	3714      	adds	r7, #20
 800b996:	46bd      	mov	sp, r7
 800b998:	bd90      	pop	{r4, r7, pc}
 800b99a:	bf00      	nop
 800b99c:	080123ac 	.word	0x080123ac
 800b9a0:	0801236c 	.word	0x0801236c
 800b9a4:	431bde83 	.word	0x431bde83

0800b9a8 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 800b9a8:	b590      	push	{r4, r7, lr}
 800b9aa:	b093      	sub	sp, #76	@ 0x4c
 800b9ac:	af00      	add	r7, sp, #0
 800b9ae:	6078      	str	r0, [r7, #4]
 800b9b0:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 800b9b2:	4b37      	ldr	r3, [pc, #220]	@ (800ba90 <RCC_SetFlashLatency+0xe8>)
 800b9b4:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 800b9b8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800b9ba:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 800b9be:	4a35      	ldr	r2, [pc, #212]	@ (800ba94 <RCC_SetFlashLatency+0xec>)
 800b9c0:	f107 031c 	add.w	r3, r7, #28
 800b9c4:	ca07      	ldmia	r2, {r0, r1, r2}
 800b9c6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 800b9ca:	4b33      	ldr	r3, [pc, #204]	@ (800ba98 <RCC_SetFlashLatency+0xf0>)
 800b9cc:	f107 040c 	add.w	r4, r7, #12
 800b9d0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800b9d2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800b9d6:	2300      	movs	r3, #0
 800b9d8:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800b9da:	683b      	ldr	r3, [r7, #0]
 800b9dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b9e0:	d11a      	bne.n	800ba18 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800b9e2:	2300      	movs	r3, #0
 800b9e4:	643b      	str	r3, [r7, #64]	@ 0x40
 800b9e6:	e013      	b.n	800ba10 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 800b9e8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b9ea:	009b      	lsls	r3, r3, #2
 800b9ec:	3348      	adds	r3, #72	@ 0x48
 800b9ee:	443b      	add	r3, r7
 800b9f0:	f853 3c20 	ldr.w	r3, [r3, #-32]
 800b9f4:	687a      	ldr	r2, [r7, #4]
 800b9f6:	429a      	cmp	r2, r3
 800b9f8:	d807      	bhi.n	800ba0a <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800b9fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b9fc:	009b      	lsls	r3, r3, #2
 800b9fe:	3348      	adds	r3, #72	@ 0x48
 800ba00:	443b      	add	r3, r7
 800ba02:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800ba06:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 800ba08:	e020      	b.n	800ba4c <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800ba0a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ba0c:	3301      	adds	r3, #1
 800ba0e:	643b      	str	r3, [r7, #64]	@ 0x40
 800ba10:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ba12:	2b03      	cmp	r3, #3
 800ba14:	d9e8      	bls.n	800b9e8 <RCC_SetFlashLatency+0x40>
 800ba16:	e019      	b.n	800ba4c <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800ba18:	2300      	movs	r3, #0
 800ba1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ba1c:	e013      	b.n	800ba46 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800ba1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ba20:	009b      	lsls	r3, r3, #2
 800ba22:	3348      	adds	r3, #72	@ 0x48
 800ba24:	443b      	add	r3, r7
 800ba26:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800ba2a:	687a      	ldr	r2, [r7, #4]
 800ba2c:	429a      	cmp	r2, r3
 800ba2e:	d807      	bhi.n	800ba40 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800ba30:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ba32:	009b      	lsls	r3, r3, #2
 800ba34:	3348      	adds	r3, #72	@ 0x48
 800ba36:	443b      	add	r3, r7
 800ba38:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800ba3c:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 800ba3e:	e005      	b.n	800ba4c <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800ba40:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ba42:	3301      	adds	r3, #1
 800ba44:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ba46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ba48:	2b02      	cmp	r3, #2
 800ba4a:	d9e8      	bls.n	800ba1e <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 800ba4c:	4b13      	ldr	r3, [pc, #76]	@ (800ba9c <RCC_SetFlashLatency+0xf4>)
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	f023 0207 	bic.w	r2, r3, #7
 800ba54:	4911      	ldr	r1, [pc, #68]	@ (800ba9c <RCC_SetFlashLatency+0xf4>)
 800ba56:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ba58:	4313      	orrs	r3, r2
 800ba5a:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800ba5c:	f7fb ff68 	bl	8007930 <HAL_GetTick>
 800ba60:	63b8      	str	r0, [r7, #56]	@ 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800ba62:	e008      	b.n	800ba76 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800ba64:	f7fb ff64 	bl	8007930 <HAL_GetTick>
 800ba68:	4602      	mov	r2, r0
 800ba6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba6c:	1ad3      	subs	r3, r2, r3
 800ba6e:	2b02      	cmp	r3, #2
 800ba70:	d901      	bls.n	800ba76 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 800ba72:	2303      	movs	r3, #3
 800ba74:	e007      	b.n	800ba86 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800ba76:	4b09      	ldr	r3, [pc, #36]	@ (800ba9c <RCC_SetFlashLatency+0xf4>)
 800ba78:	681b      	ldr	r3, [r3, #0]
 800ba7a:	f003 0307 	and.w	r3, r3, #7
 800ba7e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ba80:	429a      	cmp	r2, r3
 800ba82:	d1ef      	bne.n	800ba64 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 800ba84:	2300      	movs	r3, #0
}
 800ba86:	4618      	mov	r0, r3
 800ba88:	374c      	adds	r7, #76	@ 0x4c
 800ba8a:	46bd      	mov	sp, r7
 800ba8c:	bd90      	pop	{r4, r7, pc}
 800ba8e:	bf00      	nop
 800ba90:	080121c8 	.word	0x080121c8
 800ba94:	080121d8 	.word	0x080121d8
 800ba98:	080121e4 	.word	0x080121e4
 800ba9c:	58004000 	.word	0x58004000

0800baa0 <LL_RCC_LSE_IsEnabled>:
{
 800baa0:	b480      	push	{r7}
 800baa2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 800baa4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800baa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800baac:	f003 0301 	and.w	r3, r3, #1
 800bab0:	2b01      	cmp	r3, #1
 800bab2:	d101      	bne.n	800bab8 <LL_RCC_LSE_IsEnabled+0x18>
 800bab4:	2301      	movs	r3, #1
 800bab6:	e000      	b.n	800baba <LL_RCC_LSE_IsEnabled+0x1a>
 800bab8:	2300      	movs	r3, #0
}
 800baba:	4618      	mov	r0, r3
 800babc:	46bd      	mov	sp, r7
 800babe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bac2:	4770      	bx	lr

0800bac4 <LL_RCC_LSE_IsReady>:
{
 800bac4:	b480      	push	{r7}
 800bac6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800bac8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bacc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bad0:	f003 0302 	and.w	r3, r3, #2
 800bad4:	2b02      	cmp	r3, #2
 800bad6:	d101      	bne.n	800badc <LL_RCC_LSE_IsReady+0x18>
 800bad8:	2301      	movs	r3, #1
 800bada:	e000      	b.n	800bade <LL_RCC_LSE_IsReady+0x1a>
 800badc:	2300      	movs	r3, #0
}
 800bade:	4618      	mov	r0, r3
 800bae0:	46bd      	mov	sp, r7
 800bae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bae6:	4770      	bx	lr

0800bae8 <LL_RCC_SetRFWKPClockSource>:
{
 800bae8:	b480      	push	{r7}
 800baea:	b083      	sub	sp, #12
 800baec:	af00      	add	r7, sp, #0
 800baee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 800baf0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800baf4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800baf8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800bafc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	4313      	orrs	r3, r2
 800bb04:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 800bb08:	bf00      	nop
 800bb0a:	370c      	adds	r7, #12
 800bb0c:	46bd      	mov	sp, r7
 800bb0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb12:	4770      	bx	lr

0800bb14 <LL_RCC_SetSMPSClockSource>:
{
 800bb14:	b480      	push	{r7}
 800bb16:	b083      	sub	sp, #12
 800bb18:	af00      	add	r7, sp, #0
 800bb1a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 800bb1c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bb20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bb22:	f023 0203 	bic.w	r2, r3, #3
 800bb26:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	4313      	orrs	r3, r2
 800bb2e:	624b      	str	r3, [r1, #36]	@ 0x24
}
 800bb30:	bf00      	nop
 800bb32:	370c      	adds	r7, #12
 800bb34:	46bd      	mov	sp, r7
 800bb36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb3a:	4770      	bx	lr

0800bb3c <LL_RCC_SetSMPSPrescaler>:
{
 800bb3c:	b480      	push	{r7}
 800bb3e:	b083      	sub	sp, #12
 800bb40:	af00      	add	r7, sp, #0
 800bb42:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 800bb44:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bb48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bb4a:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800bb4e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	4313      	orrs	r3, r2
 800bb56:	624b      	str	r3, [r1, #36]	@ 0x24
}
 800bb58:	bf00      	nop
 800bb5a:	370c      	adds	r7, #12
 800bb5c:	46bd      	mov	sp, r7
 800bb5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb62:	4770      	bx	lr

0800bb64 <LL_RCC_SetUSARTClockSource>:
{
 800bb64:	b480      	push	{r7}
 800bb66:	b083      	sub	sp, #12
 800bb68:	af00      	add	r7, sp, #0
 800bb6a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 800bb6c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bb70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bb74:	f023 0203 	bic.w	r2, r3, #3
 800bb78:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	4313      	orrs	r3, r2
 800bb80:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800bb84:	bf00      	nop
 800bb86:	370c      	adds	r7, #12
 800bb88:	46bd      	mov	sp, r7
 800bb8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb8e:	4770      	bx	lr

0800bb90 <LL_RCC_SetLPUARTClockSource>:
{
 800bb90:	b480      	push	{r7}
 800bb92:	b083      	sub	sp, #12
 800bb94:	af00      	add	r7, sp, #0
 800bb96:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 800bb98:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bb9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bba0:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800bba4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	4313      	orrs	r3, r2
 800bbac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800bbb0:	bf00      	nop
 800bbb2:	370c      	adds	r7, #12
 800bbb4:	46bd      	mov	sp, r7
 800bbb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbba:	4770      	bx	lr

0800bbbc <LL_RCC_SetI2CClockSource>:
{
 800bbbc:	b480      	push	{r7}
 800bbbe:	b083      	sub	sp, #12
 800bbc0:	af00      	add	r7, sp, #0
 800bbc2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800bbc4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bbc8:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	091b      	lsrs	r3, r3, #4
 800bbd0:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 800bbd4:	43db      	mvns	r3, r3
 800bbd6:	401a      	ands	r2, r3
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	011b      	lsls	r3, r3, #4
 800bbdc:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 800bbe0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800bbe4:	4313      	orrs	r3, r2
 800bbe6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800bbea:	bf00      	nop
 800bbec:	370c      	adds	r7, #12
 800bbee:	46bd      	mov	sp, r7
 800bbf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbf4:	4770      	bx	lr

0800bbf6 <LL_RCC_SetLPTIMClockSource>:
{
 800bbf6:	b480      	push	{r7}
 800bbf8:	b083      	sub	sp, #12
 800bbfa:	af00      	add	r7, sp, #0
 800bbfc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800bbfe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bc02:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	0c1b      	lsrs	r3, r3, #16
 800bc0a:	041b      	lsls	r3, r3, #16
 800bc0c:	43db      	mvns	r3, r3
 800bc0e:	401a      	ands	r2, r3
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	041b      	lsls	r3, r3, #16
 800bc14:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800bc18:	4313      	orrs	r3, r2
 800bc1a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800bc1e:	bf00      	nop
 800bc20:	370c      	adds	r7, #12
 800bc22:	46bd      	mov	sp, r7
 800bc24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc28:	4770      	bx	lr

0800bc2a <LL_RCC_SetSAIClockSource>:
{
 800bc2a:	b480      	push	{r7}
 800bc2c:	b083      	sub	sp, #12
 800bc2e:	af00      	add	r7, sp, #0
 800bc30:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 800bc32:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bc36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bc3a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800bc3e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	4313      	orrs	r3, r2
 800bc46:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800bc4a:	bf00      	nop
 800bc4c:	370c      	adds	r7, #12
 800bc4e:	46bd      	mov	sp, r7
 800bc50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc54:	4770      	bx	lr

0800bc56 <LL_RCC_SetRNGClockSource>:
{
 800bc56:	b480      	push	{r7}
 800bc58:	b083      	sub	sp, #12
 800bc5a:	af00      	add	r7, sp, #0
 800bc5c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800bc5e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bc62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bc66:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800bc6a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	4313      	orrs	r3, r2
 800bc72:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800bc76:	bf00      	nop
 800bc78:	370c      	adds	r7, #12
 800bc7a:	46bd      	mov	sp, r7
 800bc7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc80:	4770      	bx	lr

0800bc82 <LL_RCC_SetCLK48ClockSource>:
{
 800bc82:	b480      	push	{r7}
 800bc84:	b083      	sub	sp, #12
 800bc86:	af00      	add	r7, sp, #0
 800bc88:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 800bc8a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bc8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bc92:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800bc96:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	4313      	orrs	r3, r2
 800bc9e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800bca2:	bf00      	nop
 800bca4:	370c      	adds	r7, #12
 800bca6:	46bd      	mov	sp, r7
 800bca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcac:	4770      	bx	lr

0800bcae <LL_RCC_SetUSBClockSource>:
{
 800bcae:	b580      	push	{r7, lr}
 800bcb0:	b082      	sub	sp, #8
 800bcb2:	af00      	add	r7, sp, #0
 800bcb4:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 800bcb6:	6878      	ldr	r0, [r7, #4]
 800bcb8:	f7ff ffe3 	bl	800bc82 <LL_RCC_SetCLK48ClockSource>
}
 800bcbc:	bf00      	nop
 800bcbe:	3708      	adds	r7, #8
 800bcc0:	46bd      	mov	sp, r7
 800bcc2:	bd80      	pop	{r7, pc}

0800bcc4 <LL_RCC_SetADCClockSource>:
{
 800bcc4:	b480      	push	{r7}
 800bcc6:	b083      	sub	sp, #12
 800bcc8:	af00      	add	r7, sp, #0
 800bcca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800bccc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bcd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bcd4:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800bcd8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	4313      	orrs	r3, r2
 800bce0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800bce4:	bf00      	nop
 800bce6:	370c      	adds	r7, #12
 800bce8:	46bd      	mov	sp, r7
 800bcea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcee:	4770      	bx	lr

0800bcf0 <LL_RCC_SetRTCClockSource>:
{
 800bcf0:	b480      	push	{r7}
 800bcf2:	b083      	sub	sp, #12
 800bcf4:	af00      	add	r7, sp, #0
 800bcf6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800bcf8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bcfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bd00:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800bd04:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	4313      	orrs	r3, r2
 800bd0c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 800bd10:	bf00      	nop
 800bd12:	370c      	adds	r7, #12
 800bd14:	46bd      	mov	sp, r7
 800bd16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd1a:	4770      	bx	lr

0800bd1c <LL_RCC_GetRTCClockSource>:
{
 800bd1c:	b480      	push	{r7}
 800bd1e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800bd20:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bd24:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bd28:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 800bd2c:	4618      	mov	r0, r3
 800bd2e:	46bd      	mov	sp, r7
 800bd30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd34:	4770      	bx	lr

0800bd36 <LL_RCC_ForceBackupDomainReset>:
{
 800bd36:	b480      	push	{r7}
 800bd38:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800bd3a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bd3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bd42:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800bd46:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800bd4a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800bd4e:	bf00      	nop
 800bd50:	46bd      	mov	sp, r7
 800bd52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd56:	4770      	bx	lr

0800bd58 <LL_RCC_ReleaseBackupDomainReset>:
{
 800bd58:	b480      	push	{r7}
 800bd5a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800bd5c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bd60:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bd64:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800bd68:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800bd6c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800bd70:	bf00      	nop
 800bd72:	46bd      	mov	sp, r7
 800bd74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd78:	4770      	bx	lr

0800bd7a <LL_RCC_PLLSAI1_Enable>:
{
 800bd7a:	b480      	push	{r7}
 800bd7c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800bd7e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800bd88:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800bd8c:	6013      	str	r3, [r2, #0]
}
 800bd8e:	bf00      	nop
 800bd90:	46bd      	mov	sp, r7
 800bd92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd96:	4770      	bx	lr

0800bd98 <LL_RCC_PLLSAI1_Disable>:
{
 800bd98:	b480      	push	{r7}
 800bd9a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800bd9c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bda0:	681b      	ldr	r3, [r3, #0]
 800bda2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800bda6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800bdaa:	6013      	str	r3, [r2, #0]
}
 800bdac:	bf00      	nop
 800bdae:	46bd      	mov	sp, r7
 800bdb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdb4:	4770      	bx	lr

0800bdb6 <LL_RCC_PLLSAI1_IsReady>:
{
 800bdb6:	b480      	push	{r7}
 800bdb8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 800bdba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bdbe:	681b      	ldr	r3, [r3, #0]
 800bdc0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800bdc4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800bdc8:	d101      	bne.n	800bdce <LL_RCC_PLLSAI1_IsReady+0x18>
 800bdca:	2301      	movs	r3, #1
 800bdcc:	e000      	b.n	800bdd0 <LL_RCC_PLLSAI1_IsReady+0x1a>
 800bdce:	2300      	movs	r3, #0
}
 800bdd0:	4618      	mov	r0, r3
 800bdd2:	46bd      	mov	sp, r7
 800bdd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdd8:	4770      	bx	lr

0800bdda <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800bdda:	b580      	push	{r7, lr}
 800bddc:	b088      	sub	sp, #32
 800bdde:	af00      	add	r7, sp, #0
 800bde0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 800bde2:	2300      	movs	r3, #0
 800bde4:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 800bde6:	2300      	movs	r3, #0
 800bde8:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	681b      	ldr	r3, [r3, #0]
 800bdee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bdf2:	2b00      	cmp	r3, #0
 800bdf4:	d034      	beq.n	800be60 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bdfa:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800bdfe:	d021      	beq.n	800be44 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 800be00:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800be04:	d81b      	bhi.n	800be3e <HAL_RCCEx_PeriphCLKConfig+0x64>
 800be06:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800be0a:	d01d      	beq.n	800be48 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 800be0c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800be10:	d815      	bhi.n	800be3e <HAL_RCCEx_PeriphCLKConfig+0x64>
 800be12:	2b00      	cmp	r3, #0
 800be14:	d00b      	beq.n	800be2e <HAL_RCCEx_PeriphCLKConfig+0x54>
 800be16:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800be1a:	d110      	bne.n	800be3e <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 800be1c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800be20:	68db      	ldr	r3, [r3, #12]
 800be22:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800be26:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800be2a:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 800be2c:	e00d      	b.n	800be4a <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	3304      	adds	r3, #4
 800be32:	4618      	mov	r0, r3
 800be34:	f000 f947 	bl	800c0c6 <RCCEx_PLLSAI1_ConfigNP>
 800be38:	4603      	mov	r3, r0
 800be3a:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 800be3c:	e005      	b.n	800be4a <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 800be3e:	2301      	movs	r3, #1
 800be40:	77fb      	strb	r3, [r7, #31]
        break;
 800be42:	e002      	b.n	800be4a <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800be44:	bf00      	nop
 800be46:	e000      	b.n	800be4a <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800be48:	bf00      	nop
    }

    if (ret == HAL_OK)
 800be4a:	7ffb      	ldrb	r3, [r7, #31]
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	d105      	bne.n	800be5c <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800be54:	4618      	mov	r0, r3
 800be56:	f7ff fee8 	bl	800bc2a <LL_RCC_SetSAIClockSource>
 800be5a:	e001      	b.n	800be60 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800be5c:	7ffb      	ldrb	r3, [r7, #31]
 800be5e:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	681b      	ldr	r3, [r3, #0]
 800be64:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800be68:	2b00      	cmp	r3, #0
 800be6a:	d046      	beq.n	800befa <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 800be6c:	f7ff ff56 	bl	800bd1c <LL_RCC_GetRTCClockSource>
 800be70:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800be76:	69ba      	ldr	r2, [r7, #24]
 800be78:	429a      	cmp	r2, r3
 800be7a:	d03c      	beq.n	800bef6 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800be7c:	f7fe fcac 	bl	800a7d8 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 800be80:	69bb      	ldr	r3, [r7, #24]
 800be82:	2b00      	cmp	r3, #0
 800be84:	d105      	bne.n	800be92 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800be8a:	4618      	mov	r0, r3
 800be8c:	f7ff ff30 	bl	800bcf0 <LL_RCC_SetRTCClockSource>
 800be90:	e02e      	b.n	800bef0 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 800be92:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800be96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800be9a:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 800be9c:	f7ff ff4b 	bl	800bd36 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 800bea0:	f7ff ff5a 	bl	800bd58 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 800bea4:	697b      	ldr	r3, [r7, #20]
 800bea6:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800beae:	4313      	orrs	r3, r2
 800beb0:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 800beb2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800beb6:	697b      	ldr	r3, [r7, #20]
 800beb8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 800bebc:	f7ff fdf0 	bl	800baa0 <LL_RCC_LSE_IsEnabled>
 800bec0:	4603      	mov	r3, r0
 800bec2:	2b01      	cmp	r3, #1
 800bec4:	d114      	bne.n	800bef0 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800bec6:	f7fb fd33 	bl	8007930 <HAL_GetTick>
 800beca:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 800becc:	e00b      	b.n	800bee6 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bece:	f7fb fd2f 	bl	8007930 <HAL_GetTick>
 800bed2:	4602      	mov	r2, r0
 800bed4:	693b      	ldr	r3, [r7, #16]
 800bed6:	1ad3      	subs	r3, r2, r3
 800bed8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800bedc:	4293      	cmp	r3, r2
 800bede:	d902      	bls.n	800bee6 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 800bee0:	2303      	movs	r3, #3
 800bee2:	77fb      	strb	r3, [r7, #31]
              break;
 800bee4:	e004      	b.n	800bef0 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 800bee6:	f7ff fded 	bl	800bac4 <LL_RCC_LSE_IsReady>
 800beea:	4603      	mov	r3, r0
 800beec:	2b01      	cmp	r3, #1
 800beee:	d1ee      	bne.n	800bece <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 800bef0:	7ffb      	ldrb	r3, [r7, #31]
 800bef2:	77bb      	strb	r3, [r7, #30]
 800bef4:	e001      	b.n	800befa <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bef6:	7ffb      	ldrb	r3, [r7, #31]
 800bef8:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	681b      	ldr	r3, [r3, #0]
 800befe:	f003 0301 	and.w	r3, r3, #1
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	d004      	beq.n	800bf10 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	699b      	ldr	r3, [r3, #24]
 800bf0a:	4618      	mov	r0, r3
 800bf0c:	f7ff fe2a 	bl	800bb64 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	681b      	ldr	r3, [r3, #0]
 800bf14:	f003 0302 	and.w	r3, r3, #2
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	d004      	beq.n	800bf26 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	69db      	ldr	r3, [r3, #28]
 800bf20:	4618      	mov	r0, r3
 800bf22:	f7ff fe35 	bl	800bb90 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	681b      	ldr	r3, [r3, #0]
 800bf2a:	f003 0310 	and.w	r3, r3, #16
 800bf2e:	2b00      	cmp	r3, #0
 800bf30:	d004      	beq.n	800bf3c <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bf36:	4618      	mov	r0, r3
 800bf38:	f7ff fe5d 	bl	800bbf6 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	f003 0320 	and.w	r3, r3, #32
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	d004      	beq.n	800bf52 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf4c:	4618      	mov	r0, r3
 800bf4e:	f7ff fe52 	bl	800bbf6 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	681b      	ldr	r3, [r3, #0]
 800bf56:	f003 0304 	and.w	r3, r3, #4
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	d004      	beq.n	800bf68 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	6a1b      	ldr	r3, [r3, #32]
 800bf62:	4618      	mov	r0, r3
 800bf64:	f7ff fe2a 	bl	800bbbc <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	f003 0308 	and.w	r3, r3, #8
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	d004      	beq.n	800bf7e <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bf78:	4618      	mov	r0, r3
 800bf7a:	f7ff fe1f 	bl	800bbbc <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	d022      	beq.n	800bfd0 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bf8e:	4618      	mov	r0, r3
 800bf90:	f7ff fe8d 	bl	800bcae <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bf98:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800bf9c:	d107      	bne.n	800bfae <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 800bf9e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bfa2:	68db      	ldr	r3, [r3, #12]
 800bfa4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800bfa8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800bfac:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bfb2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800bfb6:	d10b      	bne.n	800bfd0 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	3304      	adds	r3, #4
 800bfbc:	4618      	mov	r0, r3
 800bfbe:	f000 f8dd 	bl	800c17c <RCCEx_PLLSAI1_ConfigNQ>
 800bfc2:	4603      	mov	r3, r0
 800bfc4:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800bfc6:	7ffb      	ldrb	r3, [r7, #31]
 800bfc8:	2b00      	cmp	r3, #0
 800bfca:	d001      	beq.n	800bfd0 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 800bfcc:	7ffb      	ldrb	r3, [r7, #31]
 800bfce:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	681b      	ldr	r3, [r3, #0]
 800bfd4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	d02b      	beq.n	800c034 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bfe0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bfe4:	d008      	beq.n	800bff8 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bfea:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800bfee:	d003      	beq.n	800bff8 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	d105      	bne.n	800c004 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bffc:	4618      	mov	r0, r3
 800bffe:	f7ff fe2a 	bl	800bc56 <LL_RCC_SetRNGClockSource>
 800c002:	e00a      	b.n	800c01a <HAL_RCCEx_PeriphCLKConfig+0x240>
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c008:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c00c:	60fb      	str	r3, [r7, #12]
 800c00e:	2000      	movs	r0, #0
 800c010:	f7ff fe21 	bl	800bc56 <LL_RCC_SetRNGClockSource>
 800c014:	68f8      	ldr	r0, [r7, #12]
 800c016:	f7ff fe34 	bl	800bc82 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c01e:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 800c022:	d107      	bne.n	800c034 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800c024:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c028:	68db      	ldr	r3, [r3, #12]
 800c02a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800c02e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800c032:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	681b      	ldr	r3, [r3, #0]
 800c038:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c03c:	2b00      	cmp	r3, #0
 800c03e:	d022      	beq.n	800c086 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c044:	4618      	mov	r0, r3
 800c046:	f7ff fe3d 	bl	800bcc4 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c04e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c052:	d107      	bne.n	800c064 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800c054:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c058:	68db      	ldr	r3, [r3, #12]
 800c05a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800c05e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c062:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c068:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c06c:	d10b      	bne.n	800c086 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	3304      	adds	r3, #4
 800c072:	4618      	mov	r0, r3
 800c074:	f000 f8dd 	bl	800c232 <RCCEx_PLLSAI1_ConfigNR>
 800c078:	4603      	mov	r3, r0
 800c07a:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800c07c:	7ffb      	ldrb	r3, [r7, #31]
 800c07e:	2b00      	cmp	r3, #0
 800c080:	d001      	beq.n	800c086 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 800c082:	7ffb      	ldrb	r3, [r7, #31]
 800c084:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	681b      	ldr	r3, [r3, #0]
 800c08a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800c08e:	2b00      	cmp	r3, #0
 800c090:	d004      	beq.n	800c09c <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c096:	4618      	mov	r0, r3
 800c098:	f7ff fd26 	bl	800bae8 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	681b      	ldr	r3, [r3, #0]
 800c0a0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	d009      	beq.n	800c0bc <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c0ac:	4618      	mov	r0, r3
 800c0ae:	f7ff fd45 	bl	800bb3c <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c0b6:	4618      	mov	r0, r3
 800c0b8:	f7ff fd2c 	bl	800bb14 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 800c0bc:	7fbb      	ldrb	r3, [r7, #30]
}
 800c0be:	4618      	mov	r0, r3
 800c0c0:	3720      	adds	r7, #32
 800c0c2:	46bd      	mov	sp, r7
 800c0c4:	bd80      	pop	{r7, pc}

0800c0c6 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800c0c6:	b580      	push	{r7, lr}
 800c0c8:	b084      	sub	sp, #16
 800c0ca:	af00      	add	r7, sp, #0
 800c0cc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c0ce:	2300      	movs	r3, #0
 800c0d0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800c0d2:	f7ff fe61 	bl	800bd98 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800c0d6:	f7fb fc2b 	bl	8007930 <HAL_GetTick>
 800c0da:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800c0dc:	e009      	b.n	800c0f2 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800c0de:	f7fb fc27 	bl	8007930 <HAL_GetTick>
 800c0e2:	4602      	mov	r2, r0
 800c0e4:	68bb      	ldr	r3, [r7, #8]
 800c0e6:	1ad3      	subs	r3, r2, r3
 800c0e8:	2b02      	cmp	r3, #2
 800c0ea:	d902      	bls.n	800c0f2 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 800c0ec:	2303      	movs	r3, #3
 800c0ee:	73fb      	strb	r3, [r7, #15]
      break;
 800c0f0:	e004      	b.n	800c0fc <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800c0f2:	f7ff fe60 	bl	800bdb6 <LL_RCC_PLLSAI1_IsReady>
 800c0f6:	4603      	mov	r3, r0
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	d1f0      	bne.n	800c0de <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 800c0fc:	7bfb      	ldrb	r3, [r7, #15]
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d137      	bne.n	800c172 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800c102:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c106:	691b      	ldr	r3, [r3, #16]
 800c108:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	681b      	ldr	r3, [r3, #0]
 800c110:	021b      	lsls	r3, r3, #8
 800c112:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c116:	4313      	orrs	r3, r2
 800c118:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 800c11a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c11e:	691b      	ldr	r3, [r3, #16]
 800c120:	f423 1278 	bic.w	r2, r3, #4063232	@ 0x3e0000
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	685b      	ldr	r3, [r3, #4]
 800c128:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c12c:	4313      	orrs	r3, r2
 800c12e:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800c130:	f7ff fe23 	bl	800bd7a <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c134:	f7fb fbfc 	bl	8007930 <HAL_GetTick>
 800c138:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800c13a:	e009      	b.n	800c150 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800c13c:	f7fb fbf8 	bl	8007930 <HAL_GetTick>
 800c140:	4602      	mov	r2, r0
 800c142:	68bb      	ldr	r3, [r7, #8]
 800c144:	1ad3      	subs	r3, r2, r3
 800c146:	2b02      	cmp	r3, #2
 800c148:	d902      	bls.n	800c150 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 800c14a:	2303      	movs	r3, #3
 800c14c:	73fb      	strb	r3, [r7, #15]
        break;
 800c14e:	e004      	b.n	800c15a <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800c150:	f7ff fe31 	bl	800bdb6 <LL_RCC_PLLSAI1_IsReady>
 800c154:	4603      	mov	r3, r0
 800c156:	2b01      	cmp	r3, #1
 800c158:	d1f0      	bne.n	800c13c <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 800c15a:	7bfb      	ldrb	r3, [r7, #15]
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	d108      	bne.n	800c172 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800c160:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c164:	691a      	ldr	r2, [r3, #16]
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	691b      	ldr	r3, [r3, #16]
 800c16a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c16e:	4313      	orrs	r3, r2
 800c170:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800c172:	7bfb      	ldrb	r3, [r7, #15]
}
 800c174:	4618      	mov	r0, r3
 800c176:	3710      	adds	r7, #16
 800c178:	46bd      	mov	sp, r7
 800c17a:	bd80      	pop	{r7, pc}

0800c17c <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800c17c:	b580      	push	{r7, lr}
 800c17e:	b084      	sub	sp, #16
 800c180:	af00      	add	r7, sp, #0
 800c182:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c184:	2300      	movs	r3, #0
 800c186:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800c188:	f7ff fe06 	bl	800bd98 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800c18c:	f7fb fbd0 	bl	8007930 <HAL_GetTick>
 800c190:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800c192:	e009      	b.n	800c1a8 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800c194:	f7fb fbcc 	bl	8007930 <HAL_GetTick>
 800c198:	4602      	mov	r2, r0
 800c19a:	68bb      	ldr	r3, [r7, #8]
 800c19c:	1ad3      	subs	r3, r2, r3
 800c19e:	2b02      	cmp	r3, #2
 800c1a0:	d902      	bls.n	800c1a8 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 800c1a2:	2303      	movs	r3, #3
 800c1a4:	73fb      	strb	r3, [r7, #15]
      break;
 800c1a6:	e004      	b.n	800c1b2 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800c1a8:	f7ff fe05 	bl	800bdb6 <LL_RCC_PLLSAI1_IsReady>
 800c1ac:	4603      	mov	r3, r0
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	d1f0      	bne.n	800c194 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 800c1b2:	7bfb      	ldrb	r3, [r7, #15]
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	d137      	bne.n	800c228 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800c1b8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c1bc:	691b      	ldr	r3, [r3, #16]
 800c1be:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	681b      	ldr	r3, [r3, #0]
 800c1c6:	021b      	lsls	r3, r3, #8
 800c1c8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c1cc:	4313      	orrs	r3, r2
 800c1ce:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 800c1d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c1d4:	691b      	ldr	r3, [r3, #16]
 800c1d6:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	689b      	ldr	r3, [r3, #8]
 800c1de:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c1e2:	4313      	orrs	r3, r2
 800c1e4:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800c1e6:	f7ff fdc8 	bl	800bd7a <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c1ea:	f7fb fba1 	bl	8007930 <HAL_GetTick>
 800c1ee:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800c1f0:	e009      	b.n	800c206 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800c1f2:	f7fb fb9d 	bl	8007930 <HAL_GetTick>
 800c1f6:	4602      	mov	r2, r0
 800c1f8:	68bb      	ldr	r3, [r7, #8]
 800c1fa:	1ad3      	subs	r3, r2, r3
 800c1fc:	2b02      	cmp	r3, #2
 800c1fe:	d902      	bls.n	800c206 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 800c200:	2303      	movs	r3, #3
 800c202:	73fb      	strb	r3, [r7, #15]
        break;
 800c204:	e004      	b.n	800c210 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800c206:	f7ff fdd6 	bl	800bdb6 <LL_RCC_PLLSAI1_IsReady>
 800c20a:	4603      	mov	r3, r0
 800c20c:	2b01      	cmp	r3, #1
 800c20e:	d1f0      	bne.n	800c1f2 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 800c210:	7bfb      	ldrb	r3, [r7, #15]
 800c212:	2b00      	cmp	r3, #0
 800c214:	d108      	bne.n	800c228 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800c216:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c21a:	691a      	ldr	r2, [r3, #16]
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	691b      	ldr	r3, [r3, #16]
 800c220:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c224:	4313      	orrs	r3, r2
 800c226:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800c228:	7bfb      	ldrb	r3, [r7, #15]
}
 800c22a:	4618      	mov	r0, r3
 800c22c:	3710      	adds	r7, #16
 800c22e:	46bd      	mov	sp, r7
 800c230:	bd80      	pop	{r7, pc}

0800c232 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800c232:	b580      	push	{r7, lr}
 800c234:	b084      	sub	sp, #16
 800c236:	af00      	add	r7, sp, #0
 800c238:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c23a:	2300      	movs	r3, #0
 800c23c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800c23e:	f7ff fdab 	bl	800bd98 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800c242:	f7fb fb75 	bl	8007930 <HAL_GetTick>
 800c246:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800c248:	e009      	b.n	800c25e <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800c24a:	f7fb fb71 	bl	8007930 <HAL_GetTick>
 800c24e:	4602      	mov	r2, r0
 800c250:	68bb      	ldr	r3, [r7, #8]
 800c252:	1ad3      	subs	r3, r2, r3
 800c254:	2b02      	cmp	r3, #2
 800c256:	d902      	bls.n	800c25e <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 800c258:	2303      	movs	r3, #3
 800c25a:	73fb      	strb	r3, [r7, #15]
      break;
 800c25c:	e004      	b.n	800c268 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800c25e:	f7ff fdaa 	bl	800bdb6 <LL_RCC_PLLSAI1_IsReady>
 800c262:	4603      	mov	r3, r0
 800c264:	2b00      	cmp	r3, #0
 800c266:	d1f0      	bne.n	800c24a <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 800c268:	7bfb      	ldrb	r3, [r7, #15]
 800c26a:	2b00      	cmp	r3, #0
 800c26c:	d137      	bne.n	800c2de <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800c26e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c272:	691b      	ldr	r3, [r3, #16]
 800c274:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	681b      	ldr	r3, [r3, #0]
 800c27c:	021b      	lsls	r3, r3, #8
 800c27e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c282:	4313      	orrs	r3, r2
 800c284:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 800c286:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c28a:	691b      	ldr	r3, [r3, #16]
 800c28c:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	68db      	ldr	r3, [r3, #12]
 800c294:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c298:	4313      	orrs	r3, r2
 800c29a:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800c29c:	f7ff fd6d 	bl	800bd7a <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c2a0:	f7fb fb46 	bl	8007930 <HAL_GetTick>
 800c2a4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800c2a6:	e009      	b.n	800c2bc <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800c2a8:	f7fb fb42 	bl	8007930 <HAL_GetTick>
 800c2ac:	4602      	mov	r2, r0
 800c2ae:	68bb      	ldr	r3, [r7, #8]
 800c2b0:	1ad3      	subs	r3, r2, r3
 800c2b2:	2b02      	cmp	r3, #2
 800c2b4:	d902      	bls.n	800c2bc <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 800c2b6:	2303      	movs	r3, #3
 800c2b8:	73fb      	strb	r3, [r7, #15]
        break;
 800c2ba:	e004      	b.n	800c2c6 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800c2bc:	f7ff fd7b 	bl	800bdb6 <LL_RCC_PLLSAI1_IsReady>
 800c2c0:	4603      	mov	r3, r0
 800c2c2:	2b01      	cmp	r3, #1
 800c2c4:	d1f0      	bne.n	800c2a8 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 800c2c6:	7bfb      	ldrb	r3, [r7, #15]
 800c2c8:	2b00      	cmp	r3, #0
 800c2ca:	d108      	bne.n	800c2de <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800c2cc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c2d0:	691a      	ldr	r2, [r3, #16]
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	691b      	ldr	r3, [r3, #16]
 800c2d6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c2da:	4313      	orrs	r3, r2
 800c2dc:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800c2de:	7bfb      	ldrb	r3, [r7, #15]
}
 800c2e0:	4618      	mov	r0, r3
 800c2e2:	3710      	adds	r7, #16
 800c2e4:	46bd      	mov	sp, r7
 800c2e6:	bd80      	pop	{r7, pc}

0800c2e8 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800c2e8:	b580      	push	{r7, lr}
 800c2ea:	b084      	sub	sp, #16
 800c2ec:	af00      	add	r7, sp, #0
 800c2ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	2b00      	cmp	r3, #0
 800c2f4:	d101      	bne.n	800c2fa <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 800c2f6:	2301      	movs	r3, #1
 800c2f8:	e09f      	b.n	800c43a <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800c300:	b2db      	uxtb	r3, r3
 800c302:	2b00      	cmp	r3, #0
 800c304:	d106      	bne.n	800c314 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	2200      	movs	r2, #0
 800c30a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800c30e:	6878      	ldr	r0, [r7, #4]
 800c310:	f7fb f89c 	bl	800744c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	2202      	movs	r2, #2
 800c318:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800c31c:	4b49      	ldr	r3, [pc, #292]	@ (800c444 <HAL_RTC_Init+0x15c>)
 800c31e:	68db      	ldr	r3, [r3, #12]
 800c320:	f003 0310 	and.w	r3, r3, #16
 800c324:	2b10      	cmp	r3, #16
 800c326:	d07e      	beq.n	800c426 <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	681b      	ldr	r3, [r3, #0]
 800c32c:	22ca      	movs	r2, #202	@ 0xca
 800c32e:	625a      	str	r2, [r3, #36]	@ 0x24
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	681b      	ldr	r3, [r3, #0]
 800c334:	2253      	movs	r2, #83	@ 0x53
 800c336:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800c338:	6878      	ldr	r0, [r7, #4]
 800c33a:	f000 f8ab 	bl	800c494 <RTC_EnterInitMode>
 800c33e:	4603      	mov	r3, r0
 800c340:	2b00      	cmp	r3, #0
 800c342:	d00a      	beq.n	800c35a <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	681b      	ldr	r3, [r3, #0]
 800c348:	22ff      	movs	r2, #255	@ 0xff
 800c34a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	2204      	movs	r2, #4
 800c350:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

      status = HAL_ERROR;
 800c354:	2301      	movs	r3, #1
 800c356:	73fb      	strb	r3, [r7, #15]
 800c358:	e067      	b.n	800c42a <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	681b      	ldr	r3, [r3, #0]
 800c35e:	689b      	ldr	r3, [r3, #8]
 800c360:	687a      	ldr	r2, [r7, #4]
 800c362:	6812      	ldr	r2, [r2, #0]
 800c364:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800c368:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c36c:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	681b      	ldr	r3, [r3, #0]
 800c372:	6899      	ldr	r1, [r3, #8]
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	685a      	ldr	r2, [r3, #4]
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	691b      	ldr	r3, [r3, #16]
 800c37c:	431a      	orrs	r2, r3
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	699b      	ldr	r3, [r3, #24]
 800c382:	431a      	orrs	r2, r3
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	681b      	ldr	r3, [r3, #0]
 800c388:	430a      	orrs	r2, r1
 800c38a:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	681b      	ldr	r3, [r3, #0]
 800c390:	687a      	ldr	r2, [r7, #4]
 800c392:	68d2      	ldr	r2, [r2, #12]
 800c394:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	681b      	ldr	r3, [r3, #0]
 800c39a:	6919      	ldr	r1, [r3, #16]
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	689b      	ldr	r3, [r3, #8]
 800c3a0:	041a      	lsls	r2, r3, #16
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	681b      	ldr	r3, [r3, #0]
 800c3a6:	430a      	orrs	r2, r1
 800c3a8:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	681b      	ldr	r3, [r3, #0]
 800c3ae:	68da      	ldr	r2, [r3, #12]
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	681b      	ldr	r3, [r3, #0]
 800c3b4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800c3b8:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	681b      	ldr	r3, [r3, #0]
 800c3be:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	681b      	ldr	r3, [r3, #0]
 800c3c4:	f022 0203 	bic.w	r2, r2, #3
 800c3c8:	64da      	str	r2, [r3, #76]	@ 0x4c
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	681b      	ldr	r3, [r3, #0]
 800c3ce:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	69da      	ldr	r2, [r3, #28]
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	695b      	ldr	r3, [r3, #20]
 800c3d8:	431a      	orrs	r2, r3
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	681b      	ldr	r3, [r3, #0]
 800c3de:	430a      	orrs	r2, r1
 800c3e0:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	681b      	ldr	r3, [r3, #0]
 800c3e6:	689b      	ldr	r3, [r3, #8]
 800c3e8:	f003 0320 	and.w	r3, r3, #32
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	d113      	bne.n	800c418 <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800c3f0:	6878      	ldr	r0, [r7, #4]
 800c3f2:	f000 f829 	bl	800c448 <HAL_RTC_WaitForSynchro>
 800c3f6:	4603      	mov	r3, r0
 800c3f8:	2b00      	cmp	r3, #0
 800c3fa:	d00d      	beq.n	800c418 <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	681b      	ldr	r3, [r3, #0]
 800c400:	22ff      	movs	r2, #255	@ 0xff
 800c402:	625a      	str	r2, [r3, #36]	@ 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	2204      	movs	r2, #4
 800c408:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	2200      	movs	r2, #0
 800c410:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 800c414:	2301      	movs	r3, #1
 800c416:	e010      	b.n	800c43a <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	681b      	ldr	r3, [r3, #0]
 800c41c:	22ff      	movs	r2, #255	@ 0xff
 800c41e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Set RTC state */
      status = HAL_OK;
 800c420:	2300      	movs	r3, #0
 800c422:	73fb      	strb	r3, [r7, #15]
 800c424:	e001      	b.n	800c42a <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 800c426:	2300      	movs	r3, #0
 800c428:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800c42a:	7bfb      	ldrb	r3, [r7, #15]
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	d103      	bne.n	800c438 <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	2201      	movs	r2, #1
 800c434:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  return status;
 800c438:	7bfb      	ldrb	r3, [r7, #15]
}
 800c43a:	4618      	mov	r0, r3
 800c43c:	3710      	adds	r7, #16
 800c43e:	46bd      	mov	sp, r7
 800c440:	bd80      	pop	{r7, pc}
 800c442:	bf00      	nop
 800c444:	40002800 	.word	0x40002800

0800c448 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800c448:	b580      	push	{r7, lr}
 800c44a:	b084      	sub	sp, #16
 800c44c:	af00      	add	r7, sp, #0
 800c44e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	681b      	ldr	r3, [r3, #0]
 800c454:	68da      	ldr	r2, [r3, #12]
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	681b      	ldr	r3, [r3, #0]
 800c45a:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800c45e:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800c460:	f7fb fa66 	bl	8007930 <HAL_GetTick>
 800c464:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800c466:	e009      	b.n	800c47c <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800c468:	f7fb fa62 	bl	8007930 <HAL_GetTick>
 800c46c:	4602      	mov	r2, r0
 800c46e:	68fb      	ldr	r3, [r7, #12]
 800c470:	1ad3      	subs	r3, r2, r3
 800c472:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800c476:	d901      	bls.n	800c47c <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 800c478:	2303      	movs	r3, #3
 800c47a:	e007      	b.n	800c48c <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	681b      	ldr	r3, [r3, #0]
 800c480:	68db      	ldr	r3, [r3, #12]
 800c482:	f003 0320 	and.w	r3, r3, #32
 800c486:	2b00      	cmp	r3, #0
 800c488:	d0ee      	beq.n	800c468 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 800c48a:	2300      	movs	r3, #0
}
 800c48c:	4618      	mov	r0, r3
 800c48e:	3710      	adds	r7, #16
 800c490:	46bd      	mov	sp, r7
 800c492:	bd80      	pop	{r7, pc}

0800c494 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800c494:	b580      	push	{r7, lr}
 800c496:	b084      	sub	sp, #16
 800c498:	af00      	add	r7, sp, #0
 800c49a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	681b      	ldr	r3, [r3, #0]
 800c4a0:	68db      	ldr	r3, [r3, #12]
 800c4a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	d119      	bne.n	800c4de <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	681b      	ldr	r3, [r3, #0]
 800c4ae:	f04f 32ff 	mov.w	r2, #4294967295
 800c4b2:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800c4b4:	f7fb fa3c 	bl	8007930 <HAL_GetTick>
 800c4b8:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800c4ba:	e009      	b.n	800c4d0 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800c4bc:	f7fb fa38 	bl	8007930 <HAL_GetTick>
 800c4c0:	4602      	mov	r2, r0
 800c4c2:	68fb      	ldr	r3, [r7, #12]
 800c4c4:	1ad3      	subs	r3, r2, r3
 800c4c6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800c4ca:	d901      	bls.n	800c4d0 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 800c4cc:	2303      	movs	r3, #3
 800c4ce:	e007      	b.n	800c4e0 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	681b      	ldr	r3, [r3, #0]
 800c4d4:	68db      	ldr	r3, [r3, #12]
 800c4d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c4da:	2b00      	cmp	r3, #0
 800c4dc:	d0ee      	beq.n	800c4bc <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 800c4de:	2300      	movs	r3, #0
}
 800c4e0:	4618      	mov	r0, r3
 800c4e2:	3710      	adds	r7, #16
 800c4e4:	46bd      	mov	sp, r7
 800c4e6:	bd80      	pop	{r7, pc}

0800c4e8 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 800c4e8:	b580      	push	{r7, lr}
 800c4ea:	b086      	sub	sp, #24
 800c4ec:	af00      	add	r7, sp, #0
 800c4ee:	60f8      	str	r0, [r7, #12]
 800c4f0:	60b9      	str	r1, [r7, #8]
 800c4f2:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800c4f4:	68fb      	ldr	r3, [r7, #12]
 800c4f6:	f893 3020 	ldrb.w	r3, [r3, #32]
 800c4fa:	2b01      	cmp	r3, #1
 800c4fc:	d101      	bne.n	800c502 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 800c4fe:	2302      	movs	r3, #2
 800c500:	e0a8      	b.n	800c654 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
 800c502:	68fb      	ldr	r3, [r7, #12]
 800c504:	2201      	movs	r2, #1
 800c506:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800c50a:	68fb      	ldr	r3, [r7, #12]
 800c50c:	2202      	movs	r2, #2
 800c50e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c512:	68fb      	ldr	r3, [r7, #12]
 800c514:	681b      	ldr	r3, [r3, #0]
 800c516:	22ca      	movs	r2, #202	@ 0xca
 800c518:	625a      	str	r2, [r3, #36]	@ 0x24
 800c51a:	68fb      	ldr	r3, [r7, #12]
 800c51c:	681b      	ldr	r3, [r3, #0]
 800c51e:	2253      	movs	r2, #83	@ 0x53
 800c520:	625a      	str	r2, [r3, #36]	@ 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 800c522:	68fb      	ldr	r3, [r7, #12]
 800c524:	681b      	ldr	r3, [r3, #0]
 800c526:	689b      	ldr	r3, [r3, #8]
 800c528:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c52c:	2b00      	cmp	r3, #0
 800c52e:	d020      	beq.n	800c572 <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
  {
    tickstart = HAL_GetTick();
 800c530:	f7fb f9fe 	bl	8007930 <HAL_GetTick>
 800c534:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 800c536:	e015      	b.n	800c564 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800c538:	f7fb f9fa 	bl	8007930 <HAL_GetTick>
 800c53c:	4602      	mov	r2, r0
 800c53e:	697b      	ldr	r3, [r7, #20]
 800c540:	1ad3      	subs	r3, r2, r3
 800c542:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800c546:	d90d      	bls.n	800c564 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c548:	68fb      	ldr	r3, [r7, #12]
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	22ff      	movs	r2, #255	@ 0xff
 800c54e:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800c550:	68fb      	ldr	r3, [r7, #12]
 800c552:	2203      	movs	r2, #3
 800c554:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800c558:	68fb      	ldr	r3, [r7, #12]
 800c55a:	2200      	movs	r2, #0
 800c55c:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 800c560:	2303      	movs	r3, #3
 800c562:	e077      	b.n	800c654 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 800c564:	68fb      	ldr	r3, [r7, #12]
 800c566:	681b      	ldr	r3, [r3, #0]
 800c568:	68db      	ldr	r3, [r3, #12]
 800c56a:	f003 0304 	and.w	r3, r3, #4
 800c56e:	2b00      	cmp	r3, #0
 800c570:	d1e2      	bne.n	800c538 <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800c572:	68fb      	ldr	r3, [r7, #12]
 800c574:	681b      	ldr	r3, [r3, #0]
 800c576:	689a      	ldr	r2, [r3, #8]
 800c578:	68fb      	ldr	r3, [r7, #12]
 800c57a:	681b      	ldr	r3, [r3, #0]
 800c57c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800c580:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800c582:	68fb      	ldr	r3, [r7, #12]
 800c584:	681b      	ldr	r3, [r3, #0]
 800c586:	68db      	ldr	r3, [r3, #12]
 800c588:	b2da      	uxtb	r2, r3
 800c58a:	68fb      	ldr	r3, [r7, #12]
 800c58c:	681b      	ldr	r3, [r3, #0]
 800c58e:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 800c592:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800c594:	f7fb f9cc 	bl	8007930 <HAL_GetTick>
 800c598:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800c59a:	e015      	b.n	800c5c8 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800c59c:	f7fb f9c8 	bl	8007930 <HAL_GetTick>
 800c5a0:	4602      	mov	r2, r0
 800c5a2:	697b      	ldr	r3, [r7, #20]
 800c5a4:	1ad3      	subs	r3, r2, r3
 800c5a6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800c5aa:	d90d      	bls.n	800c5c8 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c5ac:	68fb      	ldr	r3, [r7, #12]
 800c5ae:	681b      	ldr	r3, [r3, #0]
 800c5b0:	22ff      	movs	r2, #255	@ 0xff
 800c5b2:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800c5b4:	68fb      	ldr	r3, [r7, #12]
 800c5b6:	2203      	movs	r2, #3
 800c5b8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800c5bc:	68fb      	ldr	r3, [r7, #12]
 800c5be:	2200      	movs	r2, #0
 800c5c0:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 800c5c4:	2303      	movs	r3, #3
 800c5c6:	e045      	b.n	800c654 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800c5c8:	68fb      	ldr	r3, [r7, #12]
 800c5ca:	681b      	ldr	r3, [r3, #0]
 800c5cc:	68db      	ldr	r3, [r3, #12]
 800c5ce:	f003 0304 	and.w	r3, r3, #4
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	d0e2      	beq.n	800c59c <HAL_RTCEx_SetWakeUpTimer_IT+0xb4>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 800c5d6:	68fb      	ldr	r3, [r7, #12]
 800c5d8:	681b      	ldr	r3, [r3, #0]
 800c5da:	68ba      	ldr	r2, [r7, #8]
 800c5dc:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 800c5de:	68fb      	ldr	r3, [r7, #12]
 800c5e0:	681b      	ldr	r3, [r3, #0]
 800c5e2:	689a      	ldr	r2, [r3, #8]
 800c5e4:	68fb      	ldr	r3, [r7, #12]
 800c5e6:	681b      	ldr	r3, [r3, #0]
 800c5e8:	f022 0207 	bic.w	r2, r2, #7
 800c5ec:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 800c5ee:	68fb      	ldr	r3, [r7, #12]
 800c5f0:	681b      	ldr	r3, [r3, #0]
 800c5f2:	6899      	ldr	r1, [r3, #8]
 800c5f4:	68fb      	ldr	r3, [r7, #12]
 800c5f6:	681b      	ldr	r3, [r3, #0]
 800c5f8:	687a      	ldr	r2, [r7, #4]
 800c5fa:	430a      	orrs	r2, r1
 800c5fc:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 800c5fe:	4b17      	ldr	r3, [pc, #92]	@ (800c65c <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800c600:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c604:	4a15      	ldr	r2, [pc, #84]	@ (800c65c <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800c606:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800c60a:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 800c60e:	4b13      	ldr	r3, [pc, #76]	@ (800c65c <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800c610:	681b      	ldr	r3, [r3, #0]
 800c612:	4a12      	ldr	r2, [pc, #72]	@ (800c65c <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800c614:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800c618:	6013      	str	r3, [r2, #0]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 800c61a:	68fb      	ldr	r3, [r7, #12]
 800c61c:	681b      	ldr	r3, [r3, #0]
 800c61e:	689a      	ldr	r2, [r3, #8]
 800c620:	68fb      	ldr	r3, [r7, #12]
 800c622:	681b      	ldr	r3, [r3, #0]
 800c624:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800c628:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 800c62a:	68fb      	ldr	r3, [r7, #12]
 800c62c:	681b      	ldr	r3, [r3, #0]
 800c62e:	689a      	ldr	r2, [r3, #8]
 800c630:	68fb      	ldr	r3, [r7, #12]
 800c632:	681b      	ldr	r3, [r3, #0]
 800c634:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800c638:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c63a:	68fb      	ldr	r3, [r7, #12]
 800c63c:	681b      	ldr	r3, [r3, #0]
 800c63e:	22ff      	movs	r2, #255	@ 0xff
 800c640:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800c642:	68fb      	ldr	r3, [r7, #12]
 800c644:	2201      	movs	r2, #1
 800c646:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800c64a:	68fb      	ldr	r3, [r7, #12]
 800c64c:	2200      	movs	r2, #0
 800c64e:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800c652:	2300      	movs	r3, #0
}
 800c654:	4618      	mov	r0, r3
 800c656:	3718      	adds	r7, #24
 800c658:	46bd      	mov	sp, r7
 800c65a:	bd80      	pop	{r7, pc}
 800c65c:	58000800 	.word	0x58000800

0800c660 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c660:	b580      	push	{r7, lr}
 800c662:	b082      	sub	sp, #8
 800c664:	af00      	add	r7, sp, #0
 800c666:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	2b00      	cmp	r3, #0
 800c66c:	d101      	bne.n	800c672 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c66e:	2301      	movs	r3, #1
 800c670:	e049      	b.n	800c706 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c678:	b2db      	uxtb	r3, r3
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	d106      	bne.n	800c68c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	2200      	movs	r2, #0
 800c682:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c686:	6878      	ldr	r0, [r7, #4]
 800c688:	f7fa ff14 	bl	80074b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	2202      	movs	r2, #2
 800c690:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	681a      	ldr	r2, [r3, #0]
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	3304      	adds	r3, #4
 800c69c:	4619      	mov	r1, r3
 800c69e:	4610      	mov	r0, r2
 800c6a0:	f000 f946 	bl	800c930 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	2201      	movs	r2, #1
 800c6a8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	2201      	movs	r2, #1
 800c6b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	2201      	movs	r2, #1
 800c6b8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	2201      	movs	r2, #1
 800c6c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	2201      	movs	r2, #1
 800c6c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	2201      	movs	r2, #1
 800c6d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	2201      	movs	r2, #1
 800c6d8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	2201      	movs	r2, #1
 800c6e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	2201      	movs	r2, #1
 800c6e8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	2201      	movs	r2, #1
 800c6f0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	2201      	movs	r2, #1
 800c6f8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	2201      	movs	r2, #1
 800c700:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800c704:	2300      	movs	r3, #0
}
 800c706:	4618      	mov	r0, r3
 800c708:	3708      	adds	r7, #8
 800c70a:	46bd      	mov	sp, r7
 800c70c:	bd80      	pop	{r7, pc}
	...

0800c710 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800c710:	b480      	push	{r7}
 800c712:	b085      	sub	sp, #20
 800c714:	af00      	add	r7, sp, #0
 800c716:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c71e:	b2db      	uxtb	r3, r3
 800c720:	2b01      	cmp	r3, #1
 800c722:	d001      	beq.n	800c728 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800c724:	2301      	movs	r3, #1
 800c726:	e02e      	b.n	800c786 <HAL_TIM_Base_Start+0x76>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	2202      	movs	r2, #2
 800c72c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	681b      	ldr	r3, [r3, #0]
 800c734:	4a17      	ldr	r2, [pc, #92]	@ (800c794 <HAL_TIM_Base_Start+0x84>)
 800c736:	4293      	cmp	r3, r2
 800c738:	d004      	beq.n	800c744 <HAL_TIM_Base_Start+0x34>
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	681b      	ldr	r3, [r3, #0]
 800c73e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c742:	d115      	bne.n	800c770 <HAL_TIM_Base_Start+0x60>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	681b      	ldr	r3, [r3, #0]
 800c748:	689a      	ldr	r2, [r3, #8]
 800c74a:	4b13      	ldr	r3, [pc, #76]	@ (800c798 <HAL_TIM_Base_Start+0x88>)
 800c74c:	4013      	ands	r3, r2
 800c74e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c750:	68fb      	ldr	r3, [r7, #12]
 800c752:	2b06      	cmp	r3, #6
 800c754:	d015      	beq.n	800c782 <HAL_TIM_Base_Start+0x72>
 800c756:	68fb      	ldr	r3, [r7, #12]
 800c758:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c75c:	d011      	beq.n	800c782 <HAL_TIM_Base_Start+0x72>
    {
      __HAL_TIM_ENABLE(htim);
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	681b      	ldr	r3, [r3, #0]
 800c762:	681a      	ldr	r2, [r3, #0]
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	681b      	ldr	r3, [r3, #0]
 800c768:	f042 0201 	orr.w	r2, r2, #1
 800c76c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c76e:	e008      	b.n	800c782 <HAL_TIM_Base_Start+0x72>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	681b      	ldr	r3, [r3, #0]
 800c774:	681a      	ldr	r2, [r3, #0]
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	681b      	ldr	r3, [r3, #0]
 800c77a:	f042 0201 	orr.w	r2, r2, #1
 800c77e:	601a      	str	r2, [r3, #0]
 800c780:	e000      	b.n	800c784 <HAL_TIM_Base_Start+0x74>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c782:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c784:	2300      	movs	r3, #0
}
 800c786:	4618      	mov	r0, r3
 800c788:	3714      	adds	r7, #20
 800c78a:	46bd      	mov	sp, r7
 800c78c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c790:	4770      	bx	lr
 800c792:	bf00      	nop
 800c794:	40012c00 	.word	0x40012c00
 800c798:	00010007 	.word	0x00010007

0800c79c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c79c:	b580      	push	{r7, lr}
 800c79e:	b084      	sub	sp, #16
 800c7a0:	af00      	add	r7, sp, #0
 800c7a2:	6078      	str	r0, [r7, #4]
 800c7a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c7a6:	2300      	movs	r3, #0
 800c7a8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c7b0:	2b01      	cmp	r3, #1
 800c7b2:	d101      	bne.n	800c7b8 <HAL_TIM_ConfigClockSource+0x1c>
 800c7b4:	2302      	movs	r3, #2
 800c7b6:	e0b6      	b.n	800c926 <HAL_TIM_ConfigClockSource+0x18a>
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	2201      	movs	r2, #1
 800c7bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	2202      	movs	r2, #2
 800c7c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	681b      	ldr	r3, [r3, #0]
 800c7cc:	689b      	ldr	r3, [r3, #8]
 800c7ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c7d0:	68bb      	ldr	r3, [r7, #8]
 800c7d2:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800c7d6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800c7da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c7dc:	68bb      	ldr	r3, [r7, #8]
 800c7de:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800c7e2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	681b      	ldr	r3, [r3, #0]
 800c7e8:	68ba      	ldr	r2, [r7, #8]
 800c7ea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c7ec:	683b      	ldr	r3, [r7, #0]
 800c7ee:	681b      	ldr	r3, [r3, #0]
 800c7f0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c7f4:	d03e      	beq.n	800c874 <HAL_TIM_ConfigClockSource+0xd8>
 800c7f6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c7fa:	f200 8087 	bhi.w	800c90c <HAL_TIM_ConfigClockSource+0x170>
 800c7fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c802:	f000 8086 	beq.w	800c912 <HAL_TIM_ConfigClockSource+0x176>
 800c806:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c80a:	d87f      	bhi.n	800c90c <HAL_TIM_ConfigClockSource+0x170>
 800c80c:	2b70      	cmp	r3, #112	@ 0x70
 800c80e:	d01a      	beq.n	800c846 <HAL_TIM_ConfigClockSource+0xaa>
 800c810:	2b70      	cmp	r3, #112	@ 0x70
 800c812:	d87b      	bhi.n	800c90c <HAL_TIM_ConfigClockSource+0x170>
 800c814:	2b60      	cmp	r3, #96	@ 0x60
 800c816:	d050      	beq.n	800c8ba <HAL_TIM_ConfigClockSource+0x11e>
 800c818:	2b60      	cmp	r3, #96	@ 0x60
 800c81a:	d877      	bhi.n	800c90c <HAL_TIM_ConfigClockSource+0x170>
 800c81c:	2b50      	cmp	r3, #80	@ 0x50
 800c81e:	d03c      	beq.n	800c89a <HAL_TIM_ConfigClockSource+0xfe>
 800c820:	2b50      	cmp	r3, #80	@ 0x50
 800c822:	d873      	bhi.n	800c90c <HAL_TIM_ConfigClockSource+0x170>
 800c824:	2b40      	cmp	r3, #64	@ 0x40
 800c826:	d058      	beq.n	800c8da <HAL_TIM_ConfigClockSource+0x13e>
 800c828:	2b40      	cmp	r3, #64	@ 0x40
 800c82a:	d86f      	bhi.n	800c90c <HAL_TIM_ConfigClockSource+0x170>
 800c82c:	2b30      	cmp	r3, #48	@ 0x30
 800c82e:	d064      	beq.n	800c8fa <HAL_TIM_ConfigClockSource+0x15e>
 800c830:	2b30      	cmp	r3, #48	@ 0x30
 800c832:	d86b      	bhi.n	800c90c <HAL_TIM_ConfigClockSource+0x170>
 800c834:	2b20      	cmp	r3, #32
 800c836:	d060      	beq.n	800c8fa <HAL_TIM_ConfigClockSource+0x15e>
 800c838:	2b20      	cmp	r3, #32
 800c83a:	d867      	bhi.n	800c90c <HAL_TIM_ConfigClockSource+0x170>
 800c83c:	2b00      	cmp	r3, #0
 800c83e:	d05c      	beq.n	800c8fa <HAL_TIM_ConfigClockSource+0x15e>
 800c840:	2b10      	cmp	r3, #16
 800c842:	d05a      	beq.n	800c8fa <HAL_TIM_ConfigClockSource+0x15e>
 800c844:	e062      	b.n	800c90c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c84a:	683b      	ldr	r3, [r7, #0]
 800c84c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c84e:	683b      	ldr	r3, [r7, #0]
 800c850:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c852:	683b      	ldr	r3, [r7, #0]
 800c854:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c856:	f000 f957 	bl	800cb08 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	681b      	ldr	r3, [r3, #0]
 800c85e:	689b      	ldr	r3, [r3, #8]
 800c860:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c862:	68bb      	ldr	r3, [r7, #8]
 800c864:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800c868:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	681b      	ldr	r3, [r3, #0]
 800c86e:	68ba      	ldr	r2, [r7, #8]
 800c870:	609a      	str	r2, [r3, #8]
      break;
 800c872:	e04f      	b.n	800c914 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c878:	683b      	ldr	r3, [r7, #0]
 800c87a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c87c:	683b      	ldr	r3, [r7, #0]
 800c87e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c880:	683b      	ldr	r3, [r7, #0]
 800c882:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c884:	f000 f940 	bl	800cb08 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	681b      	ldr	r3, [r3, #0]
 800c88c:	689a      	ldr	r2, [r3, #8]
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	681b      	ldr	r3, [r3, #0]
 800c892:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800c896:	609a      	str	r2, [r3, #8]
      break;
 800c898:	e03c      	b.n	800c914 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c89e:	683b      	ldr	r3, [r7, #0]
 800c8a0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c8a2:	683b      	ldr	r3, [r7, #0]
 800c8a4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c8a6:	461a      	mov	r2, r3
 800c8a8:	f000 f8b2 	bl	800ca10 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	681b      	ldr	r3, [r3, #0]
 800c8b0:	2150      	movs	r1, #80	@ 0x50
 800c8b2:	4618      	mov	r0, r3
 800c8b4:	f000 f90b 	bl	800cace <TIM_ITRx_SetConfig>
      break;
 800c8b8:	e02c      	b.n	800c914 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c8be:	683b      	ldr	r3, [r7, #0]
 800c8c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c8c2:	683b      	ldr	r3, [r7, #0]
 800c8c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800c8c6:	461a      	mov	r2, r3
 800c8c8:	f000 f8d1 	bl	800ca6e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	681b      	ldr	r3, [r3, #0]
 800c8d0:	2160      	movs	r1, #96	@ 0x60
 800c8d2:	4618      	mov	r0, r3
 800c8d4:	f000 f8fb 	bl	800cace <TIM_ITRx_SetConfig>
      break;
 800c8d8:	e01c      	b.n	800c914 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c8de:	683b      	ldr	r3, [r7, #0]
 800c8e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c8e2:	683b      	ldr	r3, [r7, #0]
 800c8e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c8e6:	461a      	mov	r2, r3
 800c8e8:	f000 f892 	bl	800ca10 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	681b      	ldr	r3, [r3, #0]
 800c8f0:	2140      	movs	r1, #64	@ 0x40
 800c8f2:	4618      	mov	r0, r3
 800c8f4:	f000 f8eb 	bl	800cace <TIM_ITRx_SetConfig>
      break;
 800c8f8:	e00c      	b.n	800c914 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	681a      	ldr	r2, [r3, #0]
 800c8fe:	683b      	ldr	r3, [r7, #0]
 800c900:	681b      	ldr	r3, [r3, #0]
 800c902:	4619      	mov	r1, r3
 800c904:	4610      	mov	r0, r2
 800c906:	f000 f8e2 	bl	800cace <TIM_ITRx_SetConfig>
      break;
 800c90a:	e003      	b.n	800c914 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800c90c:	2301      	movs	r3, #1
 800c90e:	73fb      	strb	r3, [r7, #15]
      break;
 800c910:	e000      	b.n	800c914 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800c912:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	2201      	movs	r2, #1
 800c918:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	2200      	movs	r2, #0
 800c920:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800c924:	7bfb      	ldrb	r3, [r7, #15]
}
 800c926:	4618      	mov	r0, r3
 800c928:	3710      	adds	r7, #16
 800c92a:	46bd      	mov	sp, r7
 800c92c:	bd80      	pop	{r7, pc}
	...

0800c930 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800c930:	b480      	push	{r7}
 800c932:	b085      	sub	sp, #20
 800c934:	af00      	add	r7, sp, #0
 800c936:	6078      	str	r0, [r7, #4]
 800c938:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	681b      	ldr	r3, [r3, #0]
 800c93e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	4a30      	ldr	r2, [pc, #192]	@ (800ca04 <TIM_Base_SetConfig+0xd4>)
 800c944:	4293      	cmp	r3, r2
 800c946:	d003      	beq.n	800c950 <TIM_Base_SetConfig+0x20>
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c94e:	d108      	bne.n	800c962 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c950:	68fb      	ldr	r3, [r7, #12]
 800c952:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c956:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c958:	683b      	ldr	r3, [r7, #0]
 800c95a:	685b      	ldr	r3, [r3, #4]
 800c95c:	68fa      	ldr	r2, [r7, #12]
 800c95e:	4313      	orrs	r3, r2
 800c960:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	4a27      	ldr	r2, [pc, #156]	@ (800ca04 <TIM_Base_SetConfig+0xd4>)
 800c966:	4293      	cmp	r3, r2
 800c968:	d00b      	beq.n	800c982 <TIM_Base_SetConfig+0x52>
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c970:	d007      	beq.n	800c982 <TIM_Base_SetConfig+0x52>
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	4a24      	ldr	r2, [pc, #144]	@ (800ca08 <TIM_Base_SetConfig+0xd8>)
 800c976:	4293      	cmp	r3, r2
 800c978:	d003      	beq.n	800c982 <TIM_Base_SetConfig+0x52>
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	4a23      	ldr	r2, [pc, #140]	@ (800ca0c <TIM_Base_SetConfig+0xdc>)
 800c97e:	4293      	cmp	r3, r2
 800c980:	d108      	bne.n	800c994 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c982:	68fb      	ldr	r3, [r7, #12]
 800c984:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c988:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c98a:	683b      	ldr	r3, [r7, #0]
 800c98c:	68db      	ldr	r3, [r3, #12]
 800c98e:	68fa      	ldr	r2, [r7, #12]
 800c990:	4313      	orrs	r3, r2
 800c992:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c994:	68fb      	ldr	r3, [r7, #12]
 800c996:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800c99a:	683b      	ldr	r3, [r7, #0]
 800c99c:	695b      	ldr	r3, [r3, #20]
 800c99e:	4313      	orrs	r3, r2
 800c9a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	68fa      	ldr	r2, [r7, #12]
 800c9a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c9a8:	683b      	ldr	r3, [r7, #0]
 800c9aa:	689a      	ldr	r2, [r3, #8]
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c9b0:	683b      	ldr	r3, [r7, #0]
 800c9b2:	681a      	ldr	r2, [r3, #0]
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	4a12      	ldr	r2, [pc, #72]	@ (800ca04 <TIM_Base_SetConfig+0xd4>)
 800c9bc:	4293      	cmp	r3, r2
 800c9be:	d007      	beq.n	800c9d0 <TIM_Base_SetConfig+0xa0>
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	4a11      	ldr	r2, [pc, #68]	@ (800ca08 <TIM_Base_SetConfig+0xd8>)
 800c9c4:	4293      	cmp	r3, r2
 800c9c6:	d003      	beq.n	800c9d0 <TIM_Base_SetConfig+0xa0>
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	4a10      	ldr	r2, [pc, #64]	@ (800ca0c <TIM_Base_SetConfig+0xdc>)
 800c9cc:	4293      	cmp	r3, r2
 800c9ce:	d103      	bne.n	800c9d8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c9d0:	683b      	ldr	r3, [r7, #0]
 800c9d2:	691a      	ldr	r2, [r3, #16]
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	2201      	movs	r2, #1
 800c9dc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	691b      	ldr	r3, [r3, #16]
 800c9e2:	f003 0301 	and.w	r3, r3, #1
 800c9e6:	2b01      	cmp	r3, #1
 800c9e8:	d105      	bne.n	800c9f6 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	691b      	ldr	r3, [r3, #16]
 800c9ee:	f023 0201 	bic.w	r2, r3, #1
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	611a      	str	r2, [r3, #16]
  }
}
 800c9f6:	bf00      	nop
 800c9f8:	3714      	adds	r7, #20
 800c9fa:	46bd      	mov	sp, r7
 800c9fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca00:	4770      	bx	lr
 800ca02:	bf00      	nop
 800ca04:	40012c00 	.word	0x40012c00
 800ca08:	40014400 	.word	0x40014400
 800ca0c:	40014800 	.word	0x40014800

0800ca10 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ca10:	b480      	push	{r7}
 800ca12:	b087      	sub	sp, #28
 800ca14:	af00      	add	r7, sp, #0
 800ca16:	60f8      	str	r0, [r7, #12]
 800ca18:	60b9      	str	r1, [r7, #8]
 800ca1a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ca1c:	68fb      	ldr	r3, [r7, #12]
 800ca1e:	6a1b      	ldr	r3, [r3, #32]
 800ca20:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ca22:	68fb      	ldr	r3, [r7, #12]
 800ca24:	6a1b      	ldr	r3, [r3, #32]
 800ca26:	f023 0201 	bic.w	r2, r3, #1
 800ca2a:	68fb      	ldr	r3, [r7, #12]
 800ca2c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ca2e:	68fb      	ldr	r3, [r7, #12]
 800ca30:	699b      	ldr	r3, [r3, #24]
 800ca32:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ca34:	693b      	ldr	r3, [r7, #16]
 800ca36:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800ca3a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	011b      	lsls	r3, r3, #4
 800ca40:	693a      	ldr	r2, [r7, #16]
 800ca42:	4313      	orrs	r3, r2
 800ca44:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ca46:	697b      	ldr	r3, [r7, #20]
 800ca48:	f023 030a 	bic.w	r3, r3, #10
 800ca4c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800ca4e:	697a      	ldr	r2, [r7, #20]
 800ca50:	68bb      	ldr	r3, [r7, #8]
 800ca52:	4313      	orrs	r3, r2
 800ca54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ca56:	68fb      	ldr	r3, [r7, #12]
 800ca58:	693a      	ldr	r2, [r7, #16]
 800ca5a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ca5c:	68fb      	ldr	r3, [r7, #12]
 800ca5e:	697a      	ldr	r2, [r7, #20]
 800ca60:	621a      	str	r2, [r3, #32]
}
 800ca62:	bf00      	nop
 800ca64:	371c      	adds	r7, #28
 800ca66:	46bd      	mov	sp, r7
 800ca68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca6c:	4770      	bx	lr

0800ca6e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ca6e:	b480      	push	{r7}
 800ca70:	b087      	sub	sp, #28
 800ca72:	af00      	add	r7, sp, #0
 800ca74:	60f8      	str	r0, [r7, #12]
 800ca76:	60b9      	str	r1, [r7, #8]
 800ca78:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800ca7a:	68fb      	ldr	r3, [r7, #12]
 800ca7c:	6a1b      	ldr	r3, [r3, #32]
 800ca7e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ca80:	68fb      	ldr	r3, [r7, #12]
 800ca82:	6a1b      	ldr	r3, [r3, #32]
 800ca84:	f023 0210 	bic.w	r2, r3, #16
 800ca88:	68fb      	ldr	r3, [r7, #12]
 800ca8a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ca8c:	68fb      	ldr	r3, [r7, #12]
 800ca8e:	699b      	ldr	r3, [r3, #24]
 800ca90:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ca92:	693b      	ldr	r3, [r7, #16]
 800ca94:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800ca98:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	031b      	lsls	r3, r3, #12
 800ca9e:	693a      	ldr	r2, [r7, #16]
 800caa0:	4313      	orrs	r3, r2
 800caa2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800caa4:	697b      	ldr	r3, [r7, #20]
 800caa6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800caaa:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800caac:	68bb      	ldr	r3, [r7, #8]
 800caae:	011b      	lsls	r3, r3, #4
 800cab0:	697a      	ldr	r2, [r7, #20]
 800cab2:	4313      	orrs	r3, r2
 800cab4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800cab6:	68fb      	ldr	r3, [r7, #12]
 800cab8:	693a      	ldr	r2, [r7, #16]
 800caba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cabc:	68fb      	ldr	r3, [r7, #12]
 800cabe:	697a      	ldr	r2, [r7, #20]
 800cac0:	621a      	str	r2, [r3, #32]
}
 800cac2:	bf00      	nop
 800cac4:	371c      	adds	r7, #28
 800cac6:	46bd      	mov	sp, r7
 800cac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cacc:	4770      	bx	lr

0800cace <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800cace:	b480      	push	{r7}
 800cad0:	b085      	sub	sp, #20
 800cad2:	af00      	add	r7, sp, #0
 800cad4:	6078      	str	r0, [r7, #4]
 800cad6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	689b      	ldr	r3, [r3, #8]
 800cadc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800cade:	68fb      	ldr	r3, [r7, #12]
 800cae0:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800cae4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cae8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800caea:	683a      	ldr	r2, [r7, #0]
 800caec:	68fb      	ldr	r3, [r7, #12]
 800caee:	4313      	orrs	r3, r2
 800caf0:	f043 0307 	orr.w	r3, r3, #7
 800caf4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	68fa      	ldr	r2, [r7, #12]
 800cafa:	609a      	str	r2, [r3, #8]
}
 800cafc:	bf00      	nop
 800cafe:	3714      	adds	r7, #20
 800cb00:	46bd      	mov	sp, r7
 800cb02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb06:	4770      	bx	lr

0800cb08 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800cb08:	b480      	push	{r7}
 800cb0a:	b087      	sub	sp, #28
 800cb0c:	af00      	add	r7, sp, #0
 800cb0e:	60f8      	str	r0, [r7, #12]
 800cb10:	60b9      	str	r1, [r7, #8]
 800cb12:	607a      	str	r2, [r7, #4]
 800cb14:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800cb16:	68fb      	ldr	r3, [r7, #12]
 800cb18:	689b      	ldr	r3, [r3, #8]
 800cb1a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800cb1c:	697b      	ldr	r3, [r7, #20]
 800cb1e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800cb22:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800cb24:	683b      	ldr	r3, [r7, #0]
 800cb26:	021a      	lsls	r2, r3, #8
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	431a      	orrs	r2, r3
 800cb2c:	68bb      	ldr	r3, [r7, #8]
 800cb2e:	4313      	orrs	r3, r2
 800cb30:	697a      	ldr	r2, [r7, #20]
 800cb32:	4313      	orrs	r3, r2
 800cb34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800cb36:	68fb      	ldr	r3, [r7, #12]
 800cb38:	697a      	ldr	r2, [r7, #20]
 800cb3a:	609a      	str	r2, [r3, #8]
}
 800cb3c:	bf00      	nop
 800cb3e:	371c      	adds	r7, #28
 800cb40:	46bd      	mov	sp, r7
 800cb42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb46:	4770      	bx	lr

0800cb48 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800cb48:	b480      	push	{r7}
 800cb4a:	b085      	sub	sp, #20
 800cb4c:	af00      	add	r7, sp, #0
 800cb4e:	6078      	str	r0, [r7, #4]
 800cb50:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800cb58:	2b01      	cmp	r3, #1
 800cb5a:	d101      	bne.n	800cb60 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800cb5c:	2302      	movs	r3, #2
 800cb5e:	e04a      	b.n	800cbf6 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	2201      	movs	r2, #1
 800cb64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	2202      	movs	r2, #2
 800cb6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	681b      	ldr	r3, [r3, #0]
 800cb74:	685b      	ldr	r3, [r3, #4]
 800cb76:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	681b      	ldr	r3, [r3, #0]
 800cb7c:	689b      	ldr	r3, [r3, #8]
 800cb7e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	681b      	ldr	r3, [r3, #0]
 800cb84:	4a1f      	ldr	r2, [pc, #124]	@ (800cc04 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 800cb86:	4293      	cmp	r3, r2
 800cb88:	d108      	bne.n	800cb9c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800cb8a:	68fb      	ldr	r3, [r7, #12]
 800cb8c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800cb90:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800cb92:	683b      	ldr	r3, [r7, #0]
 800cb94:	685b      	ldr	r3, [r3, #4]
 800cb96:	68fa      	ldr	r2, [r7, #12]
 800cb98:	4313      	orrs	r3, r2
 800cb9a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800cb9c:	68fb      	ldr	r3, [r7, #12]
 800cb9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cba2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800cba4:	683b      	ldr	r3, [r7, #0]
 800cba6:	681b      	ldr	r3, [r3, #0]
 800cba8:	68fa      	ldr	r2, [r7, #12]
 800cbaa:	4313      	orrs	r3, r2
 800cbac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	681b      	ldr	r3, [r3, #0]
 800cbb2:	68fa      	ldr	r2, [r7, #12]
 800cbb4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	681b      	ldr	r3, [r3, #0]
 800cbba:	4a12      	ldr	r2, [pc, #72]	@ (800cc04 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 800cbbc:	4293      	cmp	r3, r2
 800cbbe:	d004      	beq.n	800cbca <HAL_TIMEx_MasterConfigSynchronization+0x82>
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	681b      	ldr	r3, [r3, #0]
 800cbc4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cbc8:	d10c      	bne.n	800cbe4 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800cbca:	68bb      	ldr	r3, [r7, #8]
 800cbcc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800cbd0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800cbd2:	683b      	ldr	r3, [r7, #0]
 800cbd4:	689b      	ldr	r3, [r3, #8]
 800cbd6:	68ba      	ldr	r2, [r7, #8]
 800cbd8:	4313      	orrs	r3, r2
 800cbda:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	681b      	ldr	r3, [r3, #0]
 800cbe0:	68ba      	ldr	r2, [r7, #8]
 800cbe2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	2201      	movs	r2, #1
 800cbe8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	2200      	movs	r2, #0
 800cbf0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800cbf4:	2300      	movs	r3, #0
}
 800cbf6:	4618      	mov	r0, r3
 800cbf8:	3714      	adds	r7, #20
 800cbfa:	46bd      	mov	sp, r7
 800cbfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc00:	4770      	bx	lr
 800cc02:	bf00      	nop
 800cc04:	40012c00 	.word	0x40012c00

0800cc08 <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 800cc08:	b580      	push	{r7, lr}
 800cc0a:	b088      	sub	sp, #32
 800cc0c:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800cc0e:	2300      	movs	r3, #0
 800cc10:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800cc12:	f107 0308 	add.w	r3, r7, #8
 800cc16:	2218      	movs	r2, #24
 800cc18:	2100      	movs	r1, #0
 800cc1a:	4618      	mov	r0, r3
 800cc1c:	f001 f92d 	bl	800de7a <Osal_MemSet>
  rq.ogf = 0x3f;
 800cc20:	233f      	movs	r3, #63	@ 0x3f
 800cc22:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 800cc24:	2381      	movs	r3, #129	@ 0x81
 800cc26:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800cc28:	1dfb      	adds	r3, r7, #7
 800cc2a:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800cc2c:	2301      	movs	r3, #1
 800cc2e:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800cc30:	f107 0308 	add.w	r3, r7, #8
 800cc34:	2100      	movs	r1, #0
 800cc36:	4618      	mov	r0, r3
 800cc38:	f001 fba8 	bl	800e38c <hci_send_req>
 800cc3c:	4603      	mov	r3, r0
 800cc3e:	2b00      	cmp	r3, #0
 800cc40:	da01      	bge.n	800cc46 <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 800cc42:	23ff      	movs	r3, #255	@ 0xff
 800cc44:	e000      	b.n	800cc48 <aci_gap_set_non_discoverable+0x40>
  return status;
 800cc46:	79fb      	ldrb	r3, [r7, #7]
}
 800cc48:	4618      	mov	r0, r3
 800cc4a:	3720      	adds	r7, #32
 800cc4c:	46bd      	mov	sp, r7
 800cc4e:	bd80      	pop	{r7, pc}

0800cc50 <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Conn_Interval_Min,
                                     uint16_t Conn_Interval_Max )
{
 800cc50:	b5b0      	push	{r4, r5, r7, lr}
 800cc52:	b0ce      	sub	sp, #312	@ 0x138
 800cc54:	af00      	add	r7, sp, #0
 800cc56:	4605      	mov	r5, r0
 800cc58:	460c      	mov	r4, r1
 800cc5a:	4610      	mov	r0, r2
 800cc5c:	4619      	mov	r1, r3
 800cc5e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800cc62:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 800cc66:	462a      	mov	r2, r5
 800cc68:	701a      	strb	r2, [r3, #0]
 800cc6a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800cc6e:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800cc72:	4622      	mov	r2, r4
 800cc74:	801a      	strh	r2, [r3, #0]
 800cc76:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800cc7a:	f5a3 739b 	sub.w	r3, r3, #310	@ 0x136
 800cc7e:	4602      	mov	r2, r0
 800cc80:	801a      	strh	r2, [r3, #0]
 800cc82:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800cc86:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 800cc8a:	460a      	mov	r2, r1
 800cc8c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 800cc8e:	f107 0310 	add.w	r3, r7, #16
 800cc92:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 800cc96:	f897 314c 	ldrb.w	r3, [r7, #332]	@ 0x14c
 800cc9a:	3308      	adds	r3, #8
 800cc9c:	f107 0210 	add.w	r2, r7, #16
 800cca0:	4413      	add	r3, r2
 800cca2:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 800cca6:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 800ccaa:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 800ccae:	4413      	add	r3, r2
 800ccb0:	3309      	adds	r3, #9
 800ccb2:	f107 0210 	add.w	r2, r7, #16
 800ccb6:	4413      	add	r3, r2
 800ccb8:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800ccbc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800ccc0:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800ccc4:	2200      	movs	r2, #0
 800ccc6:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800ccc8:	2300      	movs	r3, #0
 800ccca:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Type = Advertising_Type;
 800ccce:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800ccd2:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800ccd6:	f2a2 1231 	subw	r2, r2, #305	@ 0x131
 800ccda:	7812      	ldrb	r2, [r2, #0]
 800ccdc:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800ccde:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800cce2:	3301      	adds	r3, #1
 800cce4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 800cce8:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800ccec:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800ccf0:	f5a2 729a 	sub.w	r2, r2, #308	@ 0x134
 800ccf4:	8812      	ldrh	r2, [r2, #0]
 800ccf6:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 800ccfa:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800ccfe:	3302      	adds	r3, #2
 800cd00:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 800cd04:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800cd08:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800cd0c:	f5a2 729b 	sub.w	r2, r2, #310	@ 0x136
 800cd10:	8812      	ldrh	r2, [r2, #0]
 800cd12:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 800cd16:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800cd1a:	3302      	adds	r3, #2
 800cd1c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 800cd20:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800cd24:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800cd28:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 800cd2c:	7812      	ldrb	r2, [r2, #0]
 800cd2e:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800cd30:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800cd34:	3301      	adds	r3, #1
 800cd36:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 800cd3a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800cd3e:	f897 2148 	ldrb.w	r2, [r7, #328]	@ 0x148
 800cd42:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 800cd44:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800cd48:	3301      	adds	r3, #1
 800cd4a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 800cd4e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800cd52:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 800cd56:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 800cd58:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800cd5c:	3301      	adds	r3, #1
 800cd5e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 800cd62:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800cd66:	3308      	adds	r3, #8
 800cd68:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 800cd6c:	f8d7 1150 	ldr.w	r1, [r7, #336]	@ 0x150
 800cd70:	4618      	mov	r0, r3
 800cd72:	f001 f872 	bl	800de5a <Osal_MemCpy>
    index_input += Local_Name_Length;
 800cd76:	f897 314c 	ldrb.w	r3, [r7, #332]	@ 0x14c
 800cd7a:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800cd7e:	4413      	add	r3, r2
 800cd80:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 800cd84:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800cd88:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 800cd8c:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 800cd8e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800cd92:	3301      	adds	r3, #1
 800cd94:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 800cd98:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800cd9c:	3301      	adds	r3, #1
 800cd9e:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 800cda2:	f8d7 1158 	ldr.w	r1, [r7, #344]	@ 0x158
 800cda6:	4618      	mov	r0, r3
 800cda8:	f001 f857 	bl	800de5a <Osal_MemCpy>
    index_input += Service_Uuid_length;
 800cdac:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 800cdb0:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800cdb4:	4413      	add	r3, r2
 800cdb6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp2->Conn_Interval_Min = Conn_Interval_Min;
 800cdba:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800cdbe:	f8b7 215c 	ldrh.w	r2, [r7, #348]	@ 0x15c
 800cdc2:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 800cdc4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800cdc8:	3302      	adds	r3, #2
 800cdca:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp2->Conn_Interval_Max = Conn_Interval_Max;
 800cdce:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800cdd2:	f8b7 2160 	ldrh.w	r2, [r7, #352]	@ 0x160
 800cdd6:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 800cdd8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800cddc:	3302      	adds	r3, #2
 800cdde:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800cde2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800cde6:	2218      	movs	r2, #24
 800cde8:	2100      	movs	r1, #0
 800cdea:	4618      	mov	r0, r3
 800cdec:	f001 f845 	bl	800de7a <Osal_MemSet>
  rq.ogf = 0x3f;
 800cdf0:	233f      	movs	r3, #63	@ 0x3f
 800cdf2:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x083;
 800cdf6:	2383      	movs	r3, #131	@ 0x83
 800cdf8:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800cdfc:	f107 0310 	add.w	r3, r7, #16
 800ce00:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800ce04:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800ce08:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800ce0c:	f107 030f 	add.w	r3, r7, #15
 800ce10:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800ce14:	2301      	movs	r3, #1
 800ce16:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800ce1a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ce1e:	2100      	movs	r1, #0
 800ce20:	4618      	mov	r0, r3
 800ce22:	f001 fab3 	bl	800e38c <hci_send_req>
 800ce26:	4603      	mov	r3, r0
 800ce28:	2b00      	cmp	r3, #0
 800ce2a:	da01      	bge.n	800ce30 <aci_gap_set_discoverable+0x1e0>
    return BLE_STATUS_TIMEOUT;
 800ce2c:	23ff      	movs	r3, #255	@ 0xff
 800ce2e:	e004      	b.n	800ce3a <aci_gap_set_discoverable+0x1ea>
  return status;
 800ce30:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800ce34:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800ce38:	781b      	ldrb	r3, [r3, #0]
}
 800ce3a:	4618      	mov	r0, r3
 800ce3c:	f507 779c 	add.w	r7, r7, #312	@ 0x138
 800ce40:	46bd      	mov	sp, r7
 800ce42:	bdb0      	pop	{r4, r5, r7, pc}

0800ce44 <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 800ce44:	b580      	push	{r7, lr}
 800ce46:	b0cc      	sub	sp, #304	@ 0x130
 800ce48:	af00      	add	r7, sp, #0
 800ce4a:	4602      	mov	r2, r0
 800ce4c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800ce50:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800ce54:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 800ce56:	f107 0310 	add.w	r3, r7, #16
 800ce5a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800ce5e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800ce62:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800ce66:	2200      	movs	r2, #0
 800ce68:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800ce6a:	2300      	movs	r3, #0
 800ce6c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->IO_Capability = IO_Capability;
 800ce70:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800ce74:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800ce78:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800ce7c:	7812      	ldrb	r2, [r2, #0]
 800ce7e:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800ce80:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800ce84:	3301      	adds	r3, #1
 800ce86:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800ce8a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ce8e:	2218      	movs	r2, #24
 800ce90:	2100      	movs	r1, #0
 800ce92:	4618      	mov	r0, r3
 800ce94:	f000 fff1 	bl	800de7a <Osal_MemSet>
  rq.ogf = 0x3f;
 800ce98:	233f      	movs	r3, #63	@ 0x3f
 800ce9a:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x085;
 800ce9e:	2385      	movs	r3, #133	@ 0x85
 800cea0:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800cea4:	f107 0310 	add.w	r3, r7, #16
 800cea8:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800ceac:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800ceb0:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800ceb4:	f107 030f 	add.w	r3, r7, #15
 800ceb8:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800cebc:	2301      	movs	r3, #1
 800cebe:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800cec2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800cec6:	2100      	movs	r1, #0
 800cec8:	4618      	mov	r0, r3
 800ceca:	f001 fa5f 	bl	800e38c <hci_send_req>
 800cece:	4603      	mov	r3, r0
 800ced0:	2b00      	cmp	r3, #0
 800ced2:	da01      	bge.n	800ced8 <aci_gap_set_io_capability+0x94>
    return BLE_STATUS_TIMEOUT;
 800ced4:	23ff      	movs	r3, #255	@ 0xff
 800ced6:	e004      	b.n	800cee2 <aci_gap_set_io_capability+0x9e>
  return status;
 800ced8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800cedc:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800cee0:	781b      	ldrb	r3, [r3, #0]
}
 800cee2:	4618      	mov	r0, r3
 800cee4:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800cee8:	46bd      	mov	sp, r7
 800ceea:	bd80      	pop	{r7, pc}

0800ceec <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 800ceec:	b5b0      	push	{r4, r5, r7, lr}
 800ceee:	b0cc      	sub	sp, #304	@ 0x130
 800cef0:	af00      	add	r7, sp, #0
 800cef2:	4605      	mov	r5, r0
 800cef4:	460c      	mov	r4, r1
 800cef6:	4610      	mov	r0, r2
 800cef8:	4619      	mov	r1, r3
 800cefa:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800cefe:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800cf02:	462a      	mov	r2, r5
 800cf04:	701a      	strb	r2, [r3, #0]
 800cf06:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800cf0a:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800cf0e:	4622      	mov	r2, r4
 800cf10:	701a      	strb	r2, [r3, #0]
 800cf12:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800cf16:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 800cf1a:	4602      	mov	r2, r0
 800cf1c:	701a      	strb	r2, [r3, #0]
 800cf1e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800cf22:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800cf26:	460a      	mov	r2, r1
 800cf28:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 800cf2a:	f107 0310 	add.w	r3, r7, #16
 800cf2e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800cf32:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800cf36:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800cf3a:	2200      	movs	r2, #0
 800cf3c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800cf3e:	2300      	movs	r3, #0
 800cf40:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 800cf44:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800cf48:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800cf4c:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800cf50:	7812      	ldrb	r2, [r2, #0]
 800cf52:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800cf54:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800cf58:	3301      	adds	r3, #1
 800cf5a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->MITM_Mode = MITM_Mode;
 800cf5e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800cf62:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800cf66:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800cf6a:	7812      	ldrb	r2, [r2, #0]
 800cf6c:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800cf6e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800cf72:	3301      	adds	r3, #1
 800cf74:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->SC_Support = SC_Support;
 800cf78:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800cf7c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800cf80:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 800cf84:	7812      	ldrb	r2, [r2, #0]
 800cf86:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800cf88:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800cf8c:	3301      	adds	r3, #1
 800cf8e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 800cf92:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800cf96:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800cf9a:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 800cf9e:	7812      	ldrb	r2, [r2, #0]
 800cfa0:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 800cfa2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800cfa6:	3301      	adds	r3, #1
 800cfa8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 800cfac:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800cfb0:	f897 2140 	ldrb.w	r2, [r7, #320]	@ 0x140
 800cfb4:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800cfb6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800cfba:	3301      	adds	r3, #1
 800cfbc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 800cfc0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800cfc4:	f897 2144 	ldrb.w	r2, [r7, #324]	@ 0x144
 800cfc8:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800cfca:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800cfce:	3301      	adds	r3, #1
 800cfd0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 800cfd4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800cfd8:	f897 2148 	ldrb.w	r2, [r7, #328]	@ 0x148
 800cfdc:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 800cfde:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800cfe2:	3301      	adds	r3, #1
 800cfe4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 800cfe8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800cfec:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 800cff0:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 800cff4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800cff8:	3304      	adds	r3, #4
 800cffa:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 800cffe:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800d002:	f897 2150 	ldrb.w	r2, [r7, #336]	@ 0x150
 800d006:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 800d008:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d00c:	3301      	adds	r3, #1
 800d00e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800d012:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d016:	2218      	movs	r2, #24
 800d018:	2100      	movs	r1, #0
 800d01a:	4618      	mov	r0, r3
 800d01c:	f000 ff2d 	bl	800de7a <Osal_MemSet>
  rq.ogf = 0x3f;
 800d020:	233f      	movs	r3, #63	@ 0x3f
 800d022:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x086;
 800d026:	2386      	movs	r3, #134	@ 0x86
 800d028:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800d02c:	f107 0310 	add.w	r3, r7, #16
 800d030:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800d034:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d038:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800d03c:	f107 030f 	add.w	r3, r7, #15
 800d040:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800d044:	2301      	movs	r3, #1
 800d046:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800d04a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d04e:	2100      	movs	r1, #0
 800d050:	4618      	mov	r0, r3
 800d052:	f001 f99b 	bl	800e38c <hci_send_req>
 800d056:	4603      	mov	r3, r0
 800d058:	2b00      	cmp	r3, #0
 800d05a:	da01      	bge.n	800d060 <aci_gap_set_authentication_requirement+0x174>
    return BLE_STATUS_TIMEOUT;
 800d05c:	23ff      	movs	r3, #255	@ 0xff
 800d05e:	e004      	b.n	800d06a <aci_gap_set_authentication_requirement+0x17e>
  return status;
 800d060:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d064:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800d068:	781b      	ldrb	r3, [r3, #0]
}
 800d06a:	4618      	mov	r0, r3
 800d06c:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800d070:	46bd      	mov	sp, r7
 800d072:	bdb0      	pop	{r4, r5, r7, pc}

0800d074 <aci_gap_pass_key_resp>:
  return status;
}

tBleStatus aci_gap_pass_key_resp( uint16_t Connection_Handle,
                                  uint32_t Pass_Key )
{
 800d074:	b580      	push	{r7, lr}
 800d076:	b0cc      	sub	sp, #304	@ 0x130
 800d078:	af00      	add	r7, sp, #0
 800d07a:	4602      	mov	r2, r0
 800d07c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d080:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800d084:	6019      	str	r1, [r3, #0]
 800d086:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d08a:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800d08e:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_pass_key_resp_cp0 *cp0 = (aci_gap_pass_key_resp_cp0*)(cmd_buffer);
 800d090:	f107 0310 	add.w	r3, r7, #16
 800d094:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800d098:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d09c:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800d0a0:	2200      	movs	r2, #0
 800d0a2:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800d0a4:	2300      	movs	r3, #0
 800d0a6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 800d0aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800d0ae:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800d0b2:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800d0b6:	8812      	ldrh	r2, [r2, #0]
 800d0b8:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800d0ba:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d0be:	3302      	adds	r3, #2
 800d0c0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Pass_Key = Pass_Key;
 800d0c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800d0c8:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800d0cc:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 800d0d0:	6812      	ldr	r2, [r2, #0]
 800d0d2:	f8c3 2002 	str.w	r2, [r3, #2]
  index_input += 4;
 800d0d6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d0da:	3304      	adds	r3, #4
 800d0dc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800d0e0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d0e4:	2218      	movs	r2, #24
 800d0e6:	2100      	movs	r1, #0
 800d0e8:	4618      	mov	r0, r3
 800d0ea:	f000 fec6 	bl	800de7a <Osal_MemSet>
  rq.ogf = 0x3f;
 800d0ee:	233f      	movs	r3, #63	@ 0x3f
 800d0f0:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x088;
 800d0f4:	2388      	movs	r3, #136	@ 0x88
 800d0f6:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800d0fa:	f107 0310 	add.w	r3, r7, #16
 800d0fe:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800d102:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d106:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800d10a:	f107 030f 	add.w	r3, r7, #15
 800d10e:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800d112:	2301      	movs	r3, #1
 800d114:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800d118:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d11c:	2100      	movs	r1, #0
 800d11e:	4618      	mov	r0, r3
 800d120:	f001 f934 	bl	800e38c <hci_send_req>
 800d124:	4603      	mov	r3, r0
 800d126:	2b00      	cmp	r3, #0
 800d128:	da01      	bge.n	800d12e <aci_gap_pass_key_resp+0xba>
    return BLE_STATUS_TIMEOUT;
 800d12a:	23ff      	movs	r3, #255	@ 0xff
 800d12c:	e004      	b.n	800d138 <aci_gap_pass_key_resp+0xc4>
  return status;
 800d12e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d132:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800d136:	781b      	ldrb	r3, [r3, #0]
}
 800d138:	4618      	mov	r0, r3
 800d13a:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800d13e:	46bd      	mov	sp, r7
 800d140:	bd80      	pop	{r7, pc}

0800d142 <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 800d142:	b590      	push	{r4, r7, lr}
 800d144:	b0cd      	sub	sp, #308	@ 0x134
 800d146:	af00      	add	r7, sp, #0
 800d148:	4604      	mov	r4, r0
 800d14a:	4608      	mov	r0, r1
 800d14c:	4611      	mov	r1, r2
 800d14e:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800d152:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 800d156:	6013      	str	r3, [r2, #0]
 800d158:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d15c:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800d160:	4622      	mov	r2, r4
 800d162:	701a      	strb	r2, [r3, #0]
 800d164:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d168:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800d16c:	4602      	mov	r2, r0
 800d16e:	701a      	strb	r2, [r3, #0]
 800d170:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d174:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 800d178:	460a      	mov	r2, r1
 800d17a:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 800d17c:	f107 0310 	add.w	r3, r7, #16
 800d180:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800d184:	f107 0308 	add.w	r3, r7, #8
 800d188:	2207      	movs	r2, #7
 800d18a:	2100      	movs	r1, #0
 800d18c:	4618      	mov	r0, r3
 800d18e:	f000 fe74 	bl	800de7a <Osal_MemSet>
  int index_input = 0;
 800d192:	2300      	movs	r3, #0
 800d194:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Role = Role;
 800d198:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800d19c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800d1a0:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800d1a4:	7812      	ldrb	r2, [r2, #0]
 800d1a6:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800d1a8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d1ac:	3301      	adds	r3, #1
 800d1ae:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->privacy_enabled = privacy_enabled;
 800d1b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800d1b6:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800d1ba:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800d1be:	7812      	ldrb	r2, [r2, #0]
 800d1c0:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800d1c2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d1c6:	3301      	adds	r3, #1
 800d1c8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->device_name_char_len = device_name_char_len;
 800d1cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800d1d0:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800d1d4:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 800d1d8:	7812      	ldrb	r2, [r2, #0]
 800d1da:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800d1dc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d1e0:	3301      	adds	r3, #1
 800d1e2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800d1e6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d1ea:	2218      	movs	r2, #24
 800d1ec:	2100      	movs	r1, #0
 800d1ee:	4618      	mov	r0, r3
 800d1f0:	f000 fe43 	bl	800de7a <Osal_MemSet>
  rq.ogf = 0x3f;
 800d1f4:	233f      	movs	r3, #63	@ 0x3f
 800d1f6:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x08a;
 800d1fa:	238a      	movs	r3, #138	@ 0x8a
 800d1fc:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800d200:	f107 0310 	add.w	r3, r7, #16
 800d204:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800d208:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d20c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &resp;
 800d210:	f107 0308 	add.w	r3, r7, #8
 800d214:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = sizeof(resp);
 800d218:	2307      	movs	r3, #7
 800d21a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800d21e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d222:	2100      	movs	r1, #0
 800d224:	4618      	mov	r0, r3
 800d226:	f001 f8b1 	bl	800e38c <hci_send_req>
 800d22a:	4603      	mov	r3, r0
 800d22c:	2b00      	cmp	r3, #0
 800d22e:	da01      	bge.n	800d234 <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 800d230:	23ff      	movs	r3, #255	@ 0xff
 800d232:	e02e      	b.n	800d292 <aci_gap_init+0x150>
  if ( resp.Status )
 800d234:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d238:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800d23c:	781b      	ldrb	r3, [r3, #0]
 800d23e:	2b00      	cmp	r3, #0
 800d240:	d005      	beq.n	800d24e <aci_gap_init+0x10c>
    return resp.Status;
 800d242:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d246:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800d24a:	781b      	ldrb	r3, [r3, #0]
 800d24c:	e021      	b.n	800d292 <aci_gap_init+0x150>
  *Service_Handle = resp.Service_Handle;
 800d24e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d252:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800d256:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800d25a:	b29a      	uxth	r2, r3
 800d25c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d260:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800d264:	681b      	ldr	r3, [r3, #0]
 800d266:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 800d268:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d26c:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800d270:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800d274:	b29a      	uxth	r2, r3
 800d276:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800d27a:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 800d27c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d280:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800d284:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800d288:	b29a      	uxth	r2, r3
 800d28a:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800d28e:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800d290:	2300      	movs	r3, #0
}
 800d292:	4618      	mov	r0, r3
 800d294:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 800d298:	46bd      	mov	sp, r7
 800d29a:	bd90      	pop	{r4, r7, pc}

0800d29c <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 800d29c:	b580      	push	{r7, lr}
 800d29e:	b0cc      	sub	sp, #304	@ 0x130
 800d2a0:	af00      	add	r7, sp, #0
 800d2a2:	4602      	mov	r2, r0
 800d2a4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d2a8:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800d2ac:	6019      	str	r1, [r3, #0]
 800d2ae:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d2b2:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800d2b6:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 800d2b8:	f107 0310 	add.w	r3, r7, #16
 800d2bc:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800d2c0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d2c4:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800d2c8:	2200      	movs	r2, #0
 800d2ca:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800d2cc:	2300      	movs	r3, #0
 800d2ce:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->AdvDataLen = AdvDataLen;
 800d2d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800d2d6:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800d2da:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800d2de:	7812      	ldrb	r2, [r2, #0]
 800d2e0:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800d2e2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d2e6:	3301      	adds	r3, #1
 800d2e8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 800d2ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800d2f0:	1c58      	adds	r0, r3, #1
 800d2f2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d2f6:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800d2fa:	781a      	ldrb	r2, [r3, #0]
 800d2fc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d300:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800d304:	6819      	ldr	r1, [r3, #0]
 800d306:	f000 fda8 	bl	800de5a <Osal_MemCpy>
  index_input += AdvDataLen;
 800d30a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d30e:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800d312:	781b      	ldrb	r3, [r3, #0]
 800d314:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800d318:	4413      	add	r3, r2
 800d31a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800d31e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d322:	2218      	movs	r2, #24
 800d324:	2100      	movs	r1, #0
 800d326:	4618      	mov	r0, r3
 800d328:	f000 fda7 	bl	800de7a <Osal_MemSet>
  rq.ogf = 0x3f;
 800d32c:	233f      	movs	r3, #63	@ 0x3f
 800d32e:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x08e;
 800d332:	238e      	movs	r3, #142	@ 0x8e
 800d334:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800d338:	f107 0310 	add.w	r3, r7, #16
 800d33c:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800d340:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d344:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800d348:	f107 030f 	add.w	r3, r7, #15
 800d34c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800d350:	2301      	movs	r3, #1
 800d352:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800d356:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d35a:	2100      	movs	r1, #0
 800d35c:	4618      	mov	r0, r3
 800d35e:	f001 f815 	bl	800e38c <hci_send_req>
 800d362:	4603      	mov	r3, r0
 800d364:	2b00      	cmp	r3, #0
 800d366:	da01      	bge.n	800d36c <aci_gap_update_adv_data+0xd0>
    return BLE_STATUS_TIMEOUT;
 800d368:	23ff      	movs	r3, #255	@ 0xff
 800d36a:	e004      	b.n	800d376 <aci_gap_update_adv_data+0xda>
  return status;
 800d36c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d370:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800d374:	781b      	ldrb	r3, [r3, #0]
}
 800d376:	4618      	mov	r0, r3
 800d378:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800d37c:	46bd      	mov	sp, r7
 800d37e:	bd80      	pop	{r7, pc}

0800d380 <aci_gap_configure_filter_accept_list>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_filter_accept_list( void )
{
 800d380:	b580      	push	{r7, lr}
 800d382:	b088      	sub	sp, #32
 800d384:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800d386:	2300      	movs	r3, #0
 800d388:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800d38a:	f107 0308 	add.w	r3, r7, #8
 800d38e:	2218      	movs	r2, #24
 800d390:	2100      	movs	r1, #0
 800d392:	4618      	mov	r0, r3
 800d394:	f000 fd71 	bl	800de7a <Osal_MemSet>
  rq.ogf = 0x3f;
 800d398:	233f      	movs	r3, #63	@ 0x3f
 800d39a:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 800d39c:	2392      	movs	r3, #146	@ 0x92
 800d39e:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800d3a0:	1dfb      	adds	r3, r7, #7
 800d3a2:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800d3a4:	2301      	movs	r3, #1
 800d3a6:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800d3a8:	f107 0308 	add.w	r3, r7, #8
 800d3ac:	2100      	movs	r1, #0
 800d3ae:	4618      	mov	r0, r3
 800d3b0:	f000 ffec 	bl	800e38c <hci_send_req>
 800d3b4:	4603      	mov	r3, r0
 800d3b6:	2b00      	cmp	r3, #0
 800d3b8:	da01      	bge.n	800d3be <aci_gap_configure_filter_accept_list+0x3e>
    return BLE_STATUS_TIMEOUT;
 800d3ba:	23ff      	movs	r3, #255	@ 0xff
 800d3bc:	e000      	b.n	800d3c0 <aci_gap_configure_filter_accept_list+0x40>
  return status;
 800d3be:	79fb      	ldrb	r3, [r7, #7]
}
 800d3c0:	4618      	mov	r0, r3
 800d3c2:	3720      	adds	r7, #32
 800d3c4:	46bd      	mov	sp, r7
 800d3c6:	bd80      	pop	{r7, pc}

0800d3c8 <aci_gap_numeric_comparison_value_confirm_yesno>:
  return status;
}

tBleStatus aci_gap_numeric_comparison_value_confirm_yesno( uint16_t Connection_Handle,
                                                           uint8_t Confirm_Yes_No )
{
 800d3c8:	b580      	push	{r7, lr}
 800d3ca:	b0cc      	sub	sp, #304	@ 0x130
 800d3cc:	af00      	add	r7, sp, #0
 800d3ce:	4602      	mov	r2, r0
 800d3d0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d3d4:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800d3d8:	801a      	strh	r2, [r3, #0]
 800d3da:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d3de:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 800d3e2:	460a      	mov	r2, r1
 800d3e4:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_numeric_comparison_value_confirm_yesno_cp0 *cp0 = (aci_gap_numeric_comparison_value_confirm_yesno_cp0*)(cmd_buffer);
 800d3e6:	f107 0310 	add.w	r3, r7, #16
 800d3ea:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800d3ee:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d3f2:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800d3f6:	2200      	movs	r2, #0
 800d3f8:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800d3fa:	2300      	movs	r3, #0
 800d3fc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 800d400:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800d404:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800d408:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800d40c:	8812      	ldrh	r2, [r2, #0]
 800d40e:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800d410:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d414:	3302      	adds	r3, #2
 800d416:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Confirm_Yes_No = Confirm_Yes_No;
 800d41a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800d41e:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800d422:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 800d426:	7812      	ldrb	r2, [r2, #0]
 800d428:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800d42a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d42e:	3301      	adds	r3, #1
 800d430:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800d434:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d438:	2218      	movs	r2, #24
 800d43a:	2100      	movs	r1, #0
 800d43c:	4618      	mov	r0, r3
 800d43e:	f000 fd1c 	bl	800de7a <Osal_MemSet>
  rq.ogf = 0x3f;
 800d442:	233f      	movs	r3, #63	@ 0x3f
 800d444:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x0a5;
 800d448:	23a5      	movs	r3, #165	@ 0xa5
 800d44a:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800d44e:	f107 0310 	add.w	r3, r7, #16
 800d452:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800d456:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d45a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800d45e:	f107 030f 	add.w	r3, r7, #15
 800d462:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800d466:	2301      	movs	r3, #1
 800d468:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800d46c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d470:	2100      	movs	r1, #0
 800d472:	4618      	mov	r0, r3
 800d474:	f000 ff8a 	bl	800e38c <hci_send_req>
 800d478:	4603      	mov	r3, r0
 800d47a:	2b00      	cmp	r3, #0
 800d47c:	da01      	bge.n	800d482 <aci_gap_numeric_comparison_value_confirm_yesno+0xba>
    return BLE_STATUS_TIMEOUT;
 800d47e:	23ff      	movs	r3, #255	@ 0xff
 800d480:	e004      	b.n	800d48c <aci_gap_numeric_comparison_value_confirm_yesno+0xc4>
  return status;
 800d482:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d486:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800d48a:	781b      	ldrb	r3, [r3, #0]
}
 800d48c:	4618      	mov	r0, r3
 800d48e:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800d492:	46bd      	mov	sp, r7
 800d494:	bd80      	pop	{r7, pc}

0800d496 <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 800d496:	b580      	push	{r7, lr}
 800d498:	b088      	sub	sp, #32
 800d49a:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800d49c:	2300      	movs	r3, #0
 800d49e:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800d4a0:	f107 0308 	add.w	r3, r7, #8
 800d4a4:	2218      	movs	r2, #24
 800d4a6:	2100      	movs	r1, #0
 800d4a8:	4618      	mov	r0, r3
 800d4aa:	f000 fce6 	bl	800de7a <Osal_MemSet>
  rq.ogf = 0x3f;
 800d4ae:	233f      	movs	r3, #63	@ 0x3f
 800d4b0:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 800d4b2:	f240 1301 	movw	r3, #257	@ 0x101
 800d4b6:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800d4b8:	1dfb      	adds	r3, r7, #7
 800d4ba:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800d4bc:	2301      	movs	r3, #1
 800d4be:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800d4c0:	f107 0308 	add.w	r3, r7, #8
 800d4c4:	2100      	movs	r1, #0
 800d4c6:	4618      	mov	r0, r3
 800d4c8:	f000 ff60 	bl	800e38c <hci_send_req>
 800d4cc:	4603      	mov	r3, r0
 800d4ce:	2b00      	cmp	r3, #0
 800d4d0:	da01      	bge.n	800d4d6 <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 800d4d2:	23ff      	movs	r3, #255	@ 0xff
 800d4d4:	e000      	b.n	800d4d8 <aci_gatt_init+0x42>
  return status;
 800d4d6:	79fb      	ldrb	r3, [r7, #7]
}
 800d4d8:	4618      	mov	r0, r3
 800d4da:	3720      	adds	r7, #32
 800d4dc:	46bd      	mov	sp, r7
 800d4de:	bd80      	pop	{r7, pc}

0800d4e0 <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 800d4e0:	b590      	push	{r4, r7, lr}
 800d4e2:	b0cf      	sub	sp, #316	@ 0x13c
 800d4e4:	af00      	add	r7, sp, #0
 800d4e6:	4604      	mov	r4, r0
 800d4e8:	f507 709c 	add.w	r0, r7, #312	@ 0x138
 800d4ec:	f5a0 709c 	sub.w	r0, r0, #312	@ 0x138
 800d4f0:	6001      	str	r1, [r0, #0]
 800d4f2:	4610      	mov	r0, r2
 800d4f4:	4619      	mov	r1, r3
 800d4f6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800d4fa:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 800d4fe:	4622      	mov	r2, r4
 800d500:	701a      	strb	r2, [r3, #0]
 800d502:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800d506:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 800d50a:	4602      	mov	r2, r0
 800d50c:	701a      	strb	r2, [r3, #0]
 800d50e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800d512:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 800d516:	460a      	mov	r2, r1
 800d518:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 800d51a:	f107 0310 	add.w	r3, r7, #16
 800d51e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 800d522:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800d526:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 800d52a:	781b      	ldrb	r3, [r3, #0]
 800d52c:	2b01      	cmp	r3, #1
 800d52e:	d00a      	beq.n	800d546 <aci_gatt_add_service+0x66>
 800d530:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800d534:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 800d538:	781b      	ldrb	r3, [r3, #0]
 800d53a:	2b02      	cmp	r3, #2
 800d53c:	d101      	bne.n	800d542 <aci_gatt_add_service+0x62>
 800d53e:	2311      	movs	r3, #17
 800d540:	e002      	b.n	800d548 <aci_gatt_add_service+0x68>
 800d542:	2301      	movs	r3, #1
 800d544:	e000      	b.n	800d548 <aci_gatt_add_service+0x68>
 800d546:	2303      	movs	r3, #3
 800d548:	f107 0210 	add.w	r2, r7, #16
 800d54c:	4413      	add	r3, r2
 800d54e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800d552:	f107 030c 	add.w	r3, r7, #12
 800d556:	2203      	movs	r2, #3
 800d558:	2100      	movs	r1, #0
 800d55a:	4618      	mov	r0, r3
 800d55c:	f000 fc8d 	bl	800de7a <Osal_MemSet>
  int index_input = 0;
 800d560:	2300      	movs	r3, #0
 800d562:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 800d566:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800d56a:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800d56e:	f2a2 1231 	subw	r2, r2, #305	@ 0x131
 800d572:	7812      	ldrb	r2, [r2, #0]
 800d574:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800d576:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d57a:	3301      	adds	r3, #1
 800d57c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 800d580:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800d584:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 800d588:	781b      	ldrb	r3, [r3, #0]
 800d58a:	2b01      	cmp	r3, #1
 800d58c:	d002      	beq.n	800d594 <aci_gatt_add_service+0xb4>
 800d58e:	2b02      	cmp	r3, #2
 800d590:	d004      	beq.n	800d59c <aci_gatt_add_service+0xbc>
 800d592:	e007      	b.n	800d5a4 <aci_gatt_add_service+0xc4>
    {
      case 1: size = 2; break;
 800d594:	2302      	movs	r3, #2
 800d596:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
 800d59a:	e005      	b.n	800d5a8 <aci_gatt_add_service+0xc8>
      case 2: size = 16; break;
 800d59c:	2310      	movs	r3, #16
 800d59e:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
 800d5a2:	e001      	b.n	800d5a8 <aci_gatt_add_service+0xc8>
      default: return BLE_STATUS_ERROR;
 800d5a4:	2397      	movs	r3, #151	@ 0x97
 800d5a6:	e06c      	b.n	800d682 <aci_gatt_add_service+0x1a2>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 800d5a8:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800d5ac:	1c58      	adds	r0, r3, #1
 800d5ae:	f897 2137 	ldrb.w	r2, [r7, #311]	@ 0x137
 800d5b2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800d5b6:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800d5ba:	6819      	ldr	r1, [r3, #0]
 800d5bc:	f000 fc4d 	bl	800de5a <Osal_MemCpy>
    index_input += size;
 800d5c0:	f897 3137 	ldrb.w	r3, [r7, #311]	@ 0x137
 800d5c4:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800d5c8:	4413      	add	r3, r2
 800d5ca:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Service_Type = Service_Type;
 800d5ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800d5d2:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800d5d6:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 800d5da:	7812      	ldrb	r2, [r2, #0]
 800d5dc:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 800d5de:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d5e2:	3301      	adds	r3, #1
 800d5e4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 800d5e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800d5ec:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800d5f0:	f2a2 1233 	subw	r2, r2, #307	@ 0x133
 800d5f4:	7812      	ldrb	r2, [r2, #0]
 800d5f6:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 800d5f8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d5fc:	3301      	adds	r3, #1
 800d5fe:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800d602:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d606:	2218      	movs	r2, #24
 800d608:	2100      	movs	r1, #0
 800d60a:	4618      	mov	r0, r3
 800d60c:	f000 fc35 	bl	800de7a <Osal_MemSet>
  rq.ogf = 0x3f;
 800d610:	233f      	movs	r3, #63	@ 0x3f
 800d612:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x102;
 800d616:	f44f 7381 	mov.w	r3, #258	@ 0x102
 800d61a:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800d61e:	f107 0310 	add.w	r3, r7, #16
 800d622:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800d626:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d62a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &resp;
 800d62e:	f107 030c 	add.w	r3, r7, #12
 800d632:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = sizeof(resp);
 800d636:	2303      	movs	r3, #3
 800d638:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800d63c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d640:	2100      	movs	r1, #0
 800d642:	4618      	mov	r0, r3
 800d644:	f000 fea2 	bl	800e38c <hci_send_req>
 800d648:	4603      	mov	r3, r0
 800d64a:	2b00      	cmp	r3, #0
 800d64c:	da01      	bge.n	800d652 <aci_gatt_add_service+0x172>
    return BLE_STATUS_TIMEOUT;
 800d64e:	23ff      	movs	r3, #255	@ 0xff
 800d650:	e017      	b.n	800d682 <aci_gatt_add_service+0x1a2>
  if ( resp.Status )
 800d652:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800d656:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800d65a:	781b      	ldrb	r3, [r3, #0]
 800d65c:	2b00      	cmp	r3, #0
 800d65e:	d005      	beq.n	800d66c <aci_gatt_add_service+0x18c>
    return resp.Status;
 800d660:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800d664:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800d668:	781b      	ldrb	r3, [r3, #0]
 800d66a:	e00a      	b.n	800d682 <aci_gatt_add_service+0x1a2>
  *Service_Handle = resp.Service_Handle;
 800d66c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800d670:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800d674:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800d678:	b29a      	uxth	r2, r3
 800d67a:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800d67e:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800d680:	2300      	movs	r3, #0
}
 800d682:	4618      	mov	r0, r3
 800d684:	f507 779e 	add.w	r7, r7, #316	@ 0x13c
 800d688:	46bd      	mov	sp, r7
 800d68a:	bd90      	pop	{r4, r7, pc}

0800d68c <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 800d68c:	b590      	push	{r4, r7, lr}
 800d68e:	b0d1      	sub	sp, #324	@ 0x144
 800d690:	af00      	add	r7, sp, #0
 800d692:	4604      	mov	r4, r0
 800d694:	4608      	mov	r0, r1
 800d696:	f507 71a0 	add.w	r1, r7, #320	@ 0x140
 800d69a:	f5a1 719c 	sub.w	r1, r1, #312	@ 0x138
 800d69e:	600a      	str	r2, [r1, #0]
 800d6a0:	4619      	mov	r1, r3
 800d6a2:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800d6a6:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 800d6aa:	4622      	mov	r2, r4
 800d6ac:	801a      	strh	r2, [r3, #0]
 800d6ae:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800d6b2:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 800d6b6:	4602      	mov	r2, r0
 800d6b8:	701a      	strb	r2, [r3, #0]
 800d6ba:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800d6be:	f5a3 739d 	sub.w	r3, r3, #314	@ 0x13a
 800d6c2:	460a      	mov	r2, r1
 800d6c4:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 800d6c6:	f107 0318 	add.w	r3, r7, #24
 800d6ca:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 800d6ce:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800d6d2:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 800d6d6:	781b      	ldrb	r3, [r3, #0]
 800d6d8:	2b01      	cmp	r3, #1
 800d6da:	d00a      	beq.n	800d6f2 <aci_gatt_add_char+0x66>
 800d6dc:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800d6e0:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 800d6e4:	781b      	ldrb	r3, [r3, #0]
 800d6e6:	2b02      	cmp	r3, #2
 800d6e8:	d101      	bne.n	800d6ee <aci_gatt_add_char+0x62>
 800d6ea:	2313      	movs	r3, #19
 800d6ec:	e002      	b.n	800d6f4 <aci_gatt_add_char+0x68>
 800d6ee:	2303      	movs	r3, #3
 800d6f0:	e000      	b.n	800d6f4 <aci_gatt_add_char+0x68>
 800d6f2:	2305      	movs	r3, #5
 800d6f4:	f107 0218 	add.w	r2, r7, #24
 800d6f8:	4413      	add	r3, r2
 800d6fa:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800d6fe:	f107 0314 	add.w	r3, r7, #20
 800d702:	2203      	movs	r2, #3
 800d704:	2100      	movs	r1, #0
 800d706:	4618      	mov	r0, r3
 800d708:	f000 fbb7 	bl	800de7a <Osal_MemSet>
  int index_input = 0;
 800d70c:	2300      	movs	r3, #0
 800d70e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Service_Handle = Service_Handle;
 800d712:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800d716:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 800d71a:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 800d71e:	8812      	ldrh	r2, [r2, #0]
 800d720:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800d722:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800d726:	3302      	adds	r3, #2
 800d728:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 800d72c:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800d730:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 800d734:	f2a2 1233 	subw	r2, r2, #307	@ 0x133
 800d738:	7812      	ldrb	r2, [r2, #0]
 800d73a:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800d73c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800d740:	3301      	adds	r3, #1
 800d742:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 800d746:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800d74a:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 800d74e:	781b      	ldrb	r3, [r3, #0]
 800d750:	2b01      	cmp	r3, #1
 800d752:	d002      	beq.n	800d75a <aci_gatt_add_char+0xce>
 800d754:	2b02      	cmp	r3, #2
 800d756:	d004      	beq.n	800d762 <aci_gatt_add_char+0xd6>
 800d758:	e007      	b.n	800d76a <aci_gatt_add_char+0xde>
    {
      case 1: size = 2; break;
 800d75a:	2302      	movs	r3, #2
 800d75c:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
 800d760:	e005      	b.n	800d76e <aci_gatt_add_char+0xe2>
      case 2: size = 16; break;
 800d762:	2310      	movs	r3, #16
 800d764:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
 800d768:	e001      	b.n	800d76e <aci_gatt_add_char+0xe2>
      default: return BLE_STATUS_ERROR;
 800d76a:	2397      	movs	r3, #151	@ 0x97
 800d76c:	e091      	b.n	800d892 <aci_gatt_add_char+0x206>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 800d76e:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800d772:	1cd8      	adds	r0, r3, #3
 800d774:	f897 213f 	ldrb.w	r2, [r7, #319]	@ 0x13f
 800d778:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800d77c:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800d780:	6819      	ldr	r1, [r3, #0]
 800d782:	f000 fb6a 	bl	800de5a <Osal_MemCpy>
    index_input += size;
 800d786:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 800d78a:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 800d78e:	4413      	add	r3, r2
 800d790:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 800d794:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800d798:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 800d79c:	f5a2 729d 	sub.w	r2, r2, #314	@ 0x13a
 800d7a0:	8812      	ldrh	r2, [r2, #0]
 800d7a2:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 800d7a4:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800d7a8:	3302      	adds	r3, #2
 800d7aa:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Char_Properties = Char_Properties;
 800d7ae:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800d7b2:	f897 2150 	ldrb.w	r2, [r7, #336]	@ 0x150
 800d7b6:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 800d7b8:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800d7bc:	3301      	adds	r3, #1
 800d7be:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 800d7c2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800d7c6:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 800d7ca:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 800d7cc:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800d7d0:	3301      	adds	r3, #1
 800d7d2:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 800d7d6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800d7da:	f897 2158 	ldrb.w	r2, [r7, #344]	@ 0x158
 800d7de:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 800d7e0:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800d7e4:	3301      	adds	r3, #1
 800d7e6:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 800d7ea:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800d7ee:	f897 215c 	ldrb.w	r2, [r7, #348]	@ 0x15c
 800d7f2:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 800d7f4:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800d7f8:	3301      	adds	r3, #1
 800d7fa:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Is_Variable = Is_Variable;
 800d7fe:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800d802:	f897 2160 	ldrb.w	r2, [r7, #352]	@ 0x160
 800d806:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 800d808:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800d80c:	3301      	adds	r3, #1
 800d80e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800d812:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800d816:	2218      	movs	r2, #24
 800d818:	2100      	movs	r1, #0
 800d81a:	4618      	mov	r0, r3
 800d81c:	f000 fb2d 	bl	800de7a <Osal_MemSet>
  rq.ogf = 0x3f;
 800d820:	233f      	movs	r3, #63	@ 0x3f
 800d822:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
  rq.ocf = 0x104;
 800d826:	f44f 7382 	mov.w	r3, #260	@ 0x104
 800d82a:	f8a7 311a 	strh.w	r3, [r7, #282]	@ 0x11a
  rq.cparam = cmd_buffer;
 800d82e:	f107 0318 	add.w	r3, r7, #24
 800d832:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.clen = index_input;
 800d836:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800d83a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  rq.rparam = &resp;
 800d83e:	f107 0314 	add.w	r3, r7, #20
 800d842:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  rq.rlen = sizeof(resp);
 800d846:	2303      	movs	r3, #3
 800d848:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 800d84c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800d850:	2100      	movs	r1, #0
 800d852:	4618      	mov	r0, r3
 800d854:	f000 fd9a 	bl	800e38c <hci_send_req>
 800d858:	4603      	mov	r3, r0
 800d85a:	2b00      	cmp	r3, #0
 800d85c:	da01      	bge.n	800d862 <aci_gatt_add_char+0x1d6>
    return BLE_STATUS_TIMEOUT;
 800d85e:	23ff      	movs	r3, #255	@ 0xff
 800d860:	e017      	b.n	800d892 <aci_gatt_add_char+0x206>
  if ( resp.Status )
 800d862:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800d866:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800d86a:	781b      	ldrb	r3, [r3, #0]
 800d86c:	2b00      	cmp	r3, #0
 800d86e:	d005      	beq.n	800d87c <aci_gatt_add_char+0x1f0>
    return resp.Status;
 800d870:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800d874:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800d878:	781b      	ldrb	r3, [r3, #0]
 800d87a:	e00a      	b.n	800d892 <aci_gatt_add_char+0x206>
  *Char_Handle = resp.Char_Handle;
 800d87c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800d880:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800d884:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800d888:	b29a      	uxth	r2, r3
 800d88a:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 800d88e:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800d890:	2300      	movs	r3, #0
}
 800d892:	4618      	mov	r0, r3
 800d894:	f507 77a2 	add.w	r7, r7, #324	@ 0x144
 800d898:	46bd      	mov	sp, r7
 800d89a:	bd90      	pop	{r4, r7, pc}

0800d89c <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 800d89c:	b5b0      	push	{r4, r5, r7, lr}
 800d89e:	b0cc      	sub	sp, #304	@ 0x130
 800d8a0:	af00      	add	r7, sp, #0
 800d8a2:	4605      	mov	r5, r0
 800d8a4:	460c      	mov	r4, r1
 800d8a6:	4610      	mov	r0, r2
 800d8a8:	4619      	mov	r1, r3
 800d8aa:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d8ae:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800d8b2:	462a      	mov	r2, r5
 800d8b4:	801a      	strh	r2, [r3, #0]
 800d8b6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d8ba:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800d8be:	4622      	mov	r2, r4
 800d8c0:	801a      	strh	r2, [r3, #0]
 800d8c2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d8c6:	f2a3 132d 	subw	r3, r3, #301	@ 0x12d
 800d8ca:	4602      	mov	r2, r0
 800d8cc:	701a      	strb	r2, [r3, #0]
 800d8ce:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d8d2:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 800d8d6:	460a      	mov	r2, r1
 800d8d8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 800d8da:	f107 0310 	add.w	r3, r7, #16
 800d8de:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800d8e2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d8e6:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800d8ea:	2200      	movs	r2, #0
 800d8ec:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800d8ee:	2300      	movs	r3, #0
 800d8f0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Service_Handle = Service_Handle;
 800d8f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800d8f8:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800d8fc:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800d900:	8812      	ldrh	r2, [r2, #0]
 800d902:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800d904:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d908:	3302      	adds	r3, #2
 800d90a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Char_Handle = Char_Handle;
 800d90e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800d912:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800d916:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 800d91a:	8812      	ldrh	r2, [r2, #0]
 800d91c:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 800d91e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d922:	3302      	adds	r3, #2
 800d924:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Val_Offset = Val_Offset;
 800d928:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800d92c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800d930:	f2a2 122d 	subw	r2, r2, #301	@ 0x12d
 800d934:	7812      	ldrb	r2, [r2, #0]
 800d936:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800d938:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d93c:	3301      	adds	r3, #1
 800d93e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 800d942:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800d946:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800d94a:	f5a2 7297 	sub.w	r2, r2, #302	@ 0x12e
 800d94e:	7812      	ldrb	r2, [r2, #0]
 800d950:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800d952:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d956:	3301      	adds	r3, #1
 800d958:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 800d95c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800d960:	1d98      	adds	r0, r3, #6
 800d962:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d966:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 800d96a:	781b      	ldrb	r3, [r3, #0]
 800d96c:	461a      	mov	r2, r3
 800d96e:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 800d972:	f000 fa72 	bl	800de5a <Osal_MemCpy>
  index_input += Char_Value_Length;
 800d976:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d97a:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 800d97e:	781b      	ldrb	r3, [r3, #0]
 800d980:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800d984:	4413      	add	r3, r2
 800d986:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800d98a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d98e:	2218      	movs	r2, #24
 800d990:	2100      	movs	r1, #0
 800d992:	4618      	mov	r0, r3
 800d994:	f000 fa71 	bl	800de7a <Osal_MemSet>
  rq.ogf = 0x3f;
 800d998:	233f      	movs	r3, #63	@ 0x3f
 800d99a:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x106;
 800d99e:	f44f 7383 	mov.w	r3, #262	@ 0x106
 800d9a2:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800d9a6:	f107 0310 	add.w	r3, r7, #16
 800d9aa:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800d9ae:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d9b2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800d9b6:	f107 030f 	add.w	r3, r7, #15
 800d9ba:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800d9be:	2301      	movs	r3, #1
 800d9c0:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800d9c4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d9c8:	2100      	movs	r1, #0
 800d9ca:	4618      	mov	r0, r3
 800d9cc:	f000 fcde 	bl	800e38c <hci_send_req>
 800d9d0:	4603      	mov	r3, r0
 800d9d2:	2b00      	cmp	r3, #0
 800d9d4:	da01      	bge.n	800d9da <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 800d9d6:	23ff      	movs	r3, #255	@ 0xff
 800d9d8:	e004      	b.n	800d9e4 <aci_gatt_update_char_value+0x148>
  return status;
 800d9da:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d9de:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800d9e2:	781b      	ldrb	r3, [r3, #0]
}
 800d9e4:	4618      	mov	r0, r3
 800d9e6:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800d9ea:	46bd      	mov	sp, r7
 800d9ec:	bdb0      	pop	{r4, r5, r7, pc}

0800d9ee <aci_gatt_confirm_indication>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gatt_confirm_indication( uint16_t Connection_Handle )
{
 800d9ee:	b580      	push	{r7, lr}
 800d9f0:	b0cc      	sub	sp, #304	@ 0x130
 800d9f2:	af00      	add	r7, sp, #0
 800d9f4:	4602      	mov	r2, r0
 800d9f6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d9fa:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800d9fe:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_confirm_indication_cp0 *cp0 = (aci_gatt_confirm_indication_cp0*)(cmd_buffer);
 800da00:	f107 0310 	add.w	r3, r7, #16
 800da04:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800da08:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800da0c:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800da10:	2200      	movs	r2, #0
 800da12:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800da14:	2300      	movs	r3, #0
 800da16:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 800da1a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800da1e:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800da22:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800da26:	8812      	ldrh	r2, [r2, #0]
 800da28:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800da2a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800da2e:	3302      	adds	r3, #2
 800da30:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800da34:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800da38:	2218      	movs	r2, #24
 800da3a:	2100      	movs	r1, #0
 800da3c:	4618      	mov	r0, r3
 800da3e:	f000 fa1c 	bl	800de7a <Osal_MemSet>
  rq.ogf = 0x3f;
 800da42:	233f      	movs	r3, #63	@ 0x3f
 800da44:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x125;
 800da48:	f240 1325 	movw	r3, #293	@ 0x125
 800da4c:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800da50:	f107 0310 	add.w	r3, r7, #16
 800da54:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800da58:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800da5c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800da60:	f107 030f 	add.w	r3, r7, #15
 800da64:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800da68:	2301      	movs	r3, #1
 800da6a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800da6e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800da72:	2100      	movs	r1, #0
 800da74:	4618      	mov	r0, r3
 800da76:	f000 fc89 	bl	800e38c <hci_send_req>
 800da7a:	4603      	mov	r3, r0
 800da7c:	2b00      	cmp	r3, #0
 800da7e:	da01      	bge.n	800da84 <aci_gatt_confirm_indication+0x96>
    return BLE_STATUS_TIMEOUT;
 800da80:	23ff      	movs	r3, #255	@ 0xff
 800da82:	e004      	b.n	800da8e <aci_gatt_confirm_indication+0xa0>
  return status;
 800da84:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800da88:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800da8c:	781b      	ldrb	r3, [r3, #0]
}
 800da8e:	4618      	mov	r0, r3
 800da90:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800da94:	46bd      	mov	sp, r7
 800da96:	bd80      	pop	{r7, pc}

0800da98 <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 800da98:	b580      	push	{r7, lr}
 800da9a:	b0cc      	sub	sp, #304	@ 0x130
 800da9c:	af00      	add	r7, sp, #0
 800da9e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800daa2:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800daa6:	601a      	str	r2, [r3, #0]
 800daa8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800daac:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800dab0:	4602      	mov	r2, r0
 800dab2:	701a      	strb	r2, [r3, #0]
 800dab4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800dab8:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800dabc:	460a      	mov	r2, r1
 800dabe:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 800dac0:	f107 0310 	add.w	r3, r7, #16
 800dac4:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800dac8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800dacc:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800dad0:	2200      	movs	r2, #0
 800dad2:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800dad4:	2300      	movs	r3, #0
 800dad6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Offset = Offset;
 800dada:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800dade:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800dae2:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800dae6:	7812      	ldrb	r2, [r2, #0]
 800dae8:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800daea:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800daee:	3301      	adds	r3, #1
 800daf0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Length = Length;
 800daf4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800daf8:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800dafc:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800db00:	7812      	ldrb	r2, [r2, #0]
 800db02:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800db04:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800db08:	3301      	adds	r3, #1
 800db0a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 800db0e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800db12:	1c98      	adds	r0, r3, #2
 800db14:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800db18:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800db1c:	781a      	ldrb	r2, [r3, #0]
 800db1e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800db22:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800db26:	6819      	ldr	r1, [r3, #0]
 800db28:	f000 f997 	bl	800de5a <Osal_MemCpy>
  index_input += Length;
 800db2c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800db30:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800db34:	781b      	ldrb	r3, [r3, #0]
 800db36:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800db3a:	4413      	add	r3, r2
 800db3c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800db40:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800db44:	2218      	movs	r2, #24
 800db46:	2100      	movs	r1, #0
 800db48:	4618      	mov	r0, r3
 800db4a:	f000 f996 	bl	800de7a <Osal_MemSet>
  rq.ogf = 0x3f;
 800db4e:	233f      	movs	r3, #63	@ 0x3f
 800db50:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x00c;
 800db54:	230c      	movs	r3, #12
 800db56:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800db5a:	f107 0310 	add.w	r3, r7, #16
 800db5e:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800db62:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800db66:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800db6a:	f107 030f 	add.w	r3, r7, #15
 800db6e:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800db72:	2301      	movs	r3, #1
 800db74:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800db78:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800db7c:	2100      	movs	r1, #0
 800db7e:	4618      	mov	r0, r3
 800db80:	f000 fc04 	bl	800e38c <hci_send_req>
 800db84:	4603      	mov	r3, r0
 800db86:	2b00      	cmp	r3, #0
 800db88:	da01      	bge.n	800db8e <aci_hal_write_config_data+0xf6>
    return BLE_STATUS_TIMEOUT;
 800db8a:	23ff      	movs	r3, #255	@ 0xff
 800db8c:	e004      	b.n	800db98 <aci_hal_write_config_data+0x100>
  return status;
 800db8e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800db92:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800db96:	781b      	ldrb	r3, [r3, #0]
}
 800db98:	4618      	mov	r0, r3
 800db9a:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800db9e:	46bd      	mov	sp, r7
 800dba0:	bd80      	pop	{r7, pc}

0800dba2 <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 800dba2:	b580      	push	{r7, lr}
 800dba4:	b0cc      	sub	sp, #304	@ 0x130
 800dba6:	af00      	add	r7, sp, #0
 800dba8:	4602      	mov	r2, r0
 800dbaa:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800dbae:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800dbb2:	701a      	strb	r2, [r3, #0]
 800dbb4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800dbb8:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800dbbc:	460a      	mov	r2, r1
 800dbbe:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 800dbc0:	f107 0310 	add.w	r3, r7, #16
 800dbc4:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800dbc8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800dbcc:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800dbd0:	2200      	movs	r2, #0
 800dbd2:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800dbd4:	2300      	movs	r3, #0
 800dbd6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->En_High_Power = En_High_Power;
 800dbda:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800dbde:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800dbe2:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800dbe6:	7812      	ldrb	r2, [r2, #0]
 800dbe8:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800dbea:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800dbee:	3301      	adds	r3, #1
 800dbf0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->PA_Level = PA_Level;
 800dbf4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800dbf8:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800dbfc:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800dc00:	7812      	ldrb	r2, [r2, #0]
 800dc02:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800dc04:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800dc08:	3301      	adds	r3, #1
 800dc0a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800dc0e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800dc12:	2218      	movs	r2, #24
 800dc14:	2100      	movs	r1, #0
 800dc16:	4618      	mov	r0, r3
 800dc18:	f000 f92f 	bl	800de7a <Osal_MemSet>
  rq.ogf = 0x3f;
 800dc1c:	233f      	movs	r3, #63	@ 0x3f
 800dc1e:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x00f;
 800dc22:	230f      	movs	r3, #15
 800dc24:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800dc28:	f107 0310 	add.w	r3, r7, #16
 800dc2c:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800dc30:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800dc34:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800dc38:	f107 030f 	add.w	r3, r7, #15
 800dc3c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800dc40:	2301      	movs	r3, #1
 800dc42:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800dc46:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800dc4a:	2100      	movs	r1, #0
 800dc4c:	4618      	mov	r0, r3
 800dc4e:	f000 fb9d 	bl	800e38c <hci_send_req>
 800dc52:	4603      	mov	r3, r0
 800dc54:	2b00      	cmp	r3, #0
 800dc56:	da01      	bge.n	800dc5c <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 800dc58:	23ff      	movs	r3, #255	@ 0xff
 800dc5a:	e004      	b.n	800dc66 <aci_hal_set_tx_power_level+0xc4>
  return status;
 800dc5c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800dc60:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800dc64:	781b      	ldrb	r3, [r3, #0]
}
 800dc66:	4618      	mov	r0, r3
 800dc68:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800dc6c:	46bd      	mov	sp, r7
 800dc6e:	bd80      	pop	{r7, pc}

0800dc70 <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy( (void*)Link_Connection_Handle, (const void*)resp.Link_Connection_Handle, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
 800dc70:	b580      	push	{r7, lr}
 800dc72:	b0cc      	sub	sp, #304	@ 0x130
 800dc74:	af00      	add	r7, sp, #0
 800dc76:	4602      	mov	r2, r0
 800dc78:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800dc7c:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800dc80:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 800dc82:	f107 0310 	add.w	r3, r7, #16
 800dc86:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800dc8a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800dc8e:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800dc92:	2200      	movs	r2, #0
 800dc94:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800dc96:	2300      	movs	r3, #0
 800dc98:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 800dc9c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800dca0:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800dca4:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800dca8:	8812      	ldrh	r2, [r2, #0]
 800dcaa:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800dcac:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800dcb0:	3302      	adds	r3, #2
 800dcb2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800dcb6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800dcba:	2218      	movs	r2, #24
 800dcbc:	2100      	movs	r1, #0
 800dcbe:	4618      	mov	r0, r3
 800dcc0:	f000 f8db 	bl	800de7a <Osal_MemSet>
  rq.ogf = 0x3f;
 800dcc4:	233f      	movs	r3, #63	@ 0x3f
 800dcc6:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x018;
 800dcca:	2318      	movs	r3, #24
 800dccc:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800dcd0:	f107 0310 	add.w	r3, r7, #16
 800dcd4:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800dcd8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800dcdc:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800dce0:	f107 030f 	add.w	r3, r7, #15
 800dce4:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800dce8:	2301      	movs	r3, #1
 800dcea:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800dcee:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800dcf2:	2100      	movs	r1, #0
 800dcf4:	4618      	mov	r0, r3
 800dcf6:	f000 fb49 	bl	800e38c <hci_send_req>
 800dcfa:	4603      	mov	r3, r0
 800dcfc:	2b00      	cmp	r3, #0
 800dcfe:	da01      	bge.n	800dd04 <aci_hal_set_radio_activity_mask+0x94>
    return BLE_STATUS_TIMEOUT;
 800dd00:	23ff      	movs	r3, #255	@ 0xff
 800dd02:	e004      	b.n	800dd0e <aci_hal_set_radio_activity_mask+0x9e>
  return status;
 800dd04:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800dd08:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800dd0c:	781b      	ldrb	r3, [r3, #0]
}
 800dd0e:	4618      	mov	r0, r3
 800dd10:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800dd14:	46bd      	mov	sp, r7
 800dd16:	bd80      	pop	{r7, pc}

0800dd18 <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 800dd18:	b580      	push	{r7, lr}
 800dd1a:	b088      	sub	sp, #32
 800dd1c:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800dd1e:	2300      	movs	r3, #0
 800dd20:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800dd22:	f107 0308 	add.w	r3, r7, #8
 800dd26:	2218      	movs	r2, #24
 800dd28:	2100      	movs	r1, #0
 800dd2a:	4618      	mov	r0, r3
 800dd2c:	f000 f8a5 	bl	800de7a <Osal_MemSet>
  rq.ogf = 0x03;
 800dd30:	2303      	movs	r3, #3
 800dd32:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 800dd34:	2303      	movs	r3, #3
 800dd36:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800dd38:	1dfb      	adds	r3, r7, #7
 800dd3a:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800dd3c:	2301      	movs	r3, #1
 800dd3e:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800dd40:	f107 0308 	add.w	r3, r7, #8
 800dd44:	2100      	movs	r1, #0
 800dd46:	4618      	mov	r0, r3
 800dd48:	f000 fb20 	bl	800e38c <hci_send_req>
 800dd4c:	4603      	mov	r3, r0
 800dd4e:	2b00      	cmp	r3, #0
 800dd50:	da01      	bge.n	800dd56 <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 800dd52:	23ff      	movs	r3, #255	@ 0xff
 800dd54:	e000      	b.n	800dd58 <hci_reset+0x40>
  return status;
 800dd56:	79fb      	ldrb	r3, [r7, #7]
}
 800dd58:	4618      	mov	r0, r3
 800dd5a:	3720      	adds	r7, #32
 800dd5c:	46bd      	mov	sp, r7
 800dd5e:	bd80      	pop	{r7, pc}

0800dd60 <hci_le_set_default_phy>:
}

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 800dd60:	b590      	push	{r4, r7, lr}
 800dd62:	b0cd      	sub	sp, #308	@ 0x134
 800dd64:	af00      	add	r7, sp, #0
 800dd66:	4604      	mov	r4, r0
 800dd68:	4608      	mov	r0, r1
 800dd6a:	4611      	mov	r1, r2
 800dd6c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800dd70:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800dd74:	4622      	mov	r2, r4
 800dd76:	701a      	strb	r2, [r3, #0]
 800dd78:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800dd7c:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800dd80:	4602      	mov	r2, r0
 800dd82:	701a      	strb	r2, [r3, #0]
 800dd84:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800dd88:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 800dd8c:	460a      	mov	r2, r1
 800dd8e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 800dd90:	f107 0310 	add.w	r3, r7, #16
 800dd94:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800dd98:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800dd9c:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800dda0:	2200      	movs	r2, #0
 800dda2:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800dda4:	2300      	movs	r3, #0
 800dda6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 800ddaa:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800ddae:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800ddb2:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800ddb6:	7812      	ldrb	r2, [r2, #0]
 800ddb8:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800ddba:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800ddbe:	3301      	adds	r3, #1
 800ddc0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->TX_PHYS = TX_PHYS;
 800ddc4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800ddc8:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800ddcc:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800ddd0:	7812      	ldrb	r2, [r2, #0]
 800ddd2:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800ddd4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800ddd8:	3301      	adds	r3, #1
 800ddda:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->RX_PHYS = RX_PHYS;
 800ddde:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800dde2:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800dde6:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 800ddea:	7812      	ldrb	r2, [r2, #0]
 800ddec:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800ddee:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800ddf2:	3301      	adds	r3, #1
 800ddf4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800ddf8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ddfc:	2218      	movs	r2, #24
 800ddfe:	2100      	movs	r1, #0
 800de00:	4618      	mov	r0, r3
 800de02:	f000 f83a 	bl	800de7a <Osal_MemSet>
  rq.ogf = 0x08;
 800de06:	2308      	movs	r3, #8
 800de08:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x031;
 800de0c:	2331      	movs	r3, #49	@ 0x31
 800de0e:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800de12:	f107 0310 	add.w	r3, r7, #16
 800de16:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800de1a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800de1e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800de22:	f107 030f 	add.w	r3, r7, #15
 800de26:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800de2a:	2301      	movs	r3, #1
 800de2c:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800de30:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800de34:	2100      	movs	r1, #0
 800de36:	4618      	mov	r0, r3
 800de38:	f000 faa8 	bl	800e38c <hci_send_req>
 800de3c:	4603      	mov	r3, r0
 800de3e:	2b00      	cmp	r3, #0
 800de40:	da01      	bge.n	800de46 <hci_le_set_default_phy+0xe6>
    return BLE_STATUS_TIMEOUT;
 800de42:	23ff      	movs	r3, #255	@ 0xff
 800de44:	e004      	b.n	800de50 <hci_le_set_default_phy+0xf0>
  return status;
 800de46:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800de4a:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800de4e:	781b      	ldrb	r3, [r3, #0]
}
 800de50:	4618      	mov	r0, r3
 800de52:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 800de56:	46bd      	mov	sp, r7
 800de58:	bd90      	pop	{r4, r7, pc}

0800de5a <Osal_MemCpy>:
 * Osal_MemCpy
 *
 */

void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 800de5a:	b580      	push	{r7, lr}
 800de5c:	b084      	sub	sp, #16
 800de5e:	af00      	add	r7, sp, #0
 800de60:	60f8      	str	r0, [r7, #12]
 800de62:	60b9      	str	r1, [r7, #8]
 800de64:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size );
 800de66:	687a      	ldr	r2, [r7, #4]
 800de68:	68b9      	ldr	r1, [r7, #8]
 800de6a:	68f8      	ldr	r0, [r7, #12]
 800de6c:	f002 fcbb 	bl	80107e6 <memcpy>
 800de70:	4603      	mov	r3, r0
}
 800de72:	4618      	mov	r0, r3
 800de74:	3710      	adds	r7, #16
 800de76:	46bd      	mov	sp, r7
 800de78:	bd80      	pop	{r7, pc}

0800de7a <Osal_MemSet>:
 * Osal_MemSet
 *
 */

void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 800de7a:	b580      	push	{r7, lr}
 800de7c:	b084      	sub	sp, #16
 800de7e:	af00      	add	r7, sp, #0
 800de80:	60f8      	str	r0, [r7, #12]
 800de82:	60b9      	str	r1, [r7, #8]
 800de84:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 800de86:	687a      	ldr	r2, [r7, #4]
 800de88:	68b9      	ldr	r1, [r7, #8]
 800de8a:	68f8      	ldr	r0, [r7, #12]
 800de8c:	f002 fc2f 	bl	80106ee <memset>
 800de90:	4603      	mov	r3, r0
}
 800de92:	4618      	mov	r0, r3
 800de94:	3710      	adds	r7, #16
 800de96:	46bd      	mov	sp, r7
 800de98:	bd80      	pop	{r7, pc}

0800de9a <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__WEAK void BAS_Init( void )
{
 800de9a:	b480      	push	{r7}
 800de9c:	af00      	add	r7, sp, #0
  return;
 800de9e:	bf00      	nop
}
 800dea0:	46bd      	mov	sp, r7
 800dea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dea6:	4770      	bx	lr

0800dea8 <BLS_Init>:

__WEAK void BLS_Init( void )
{
 800dea8:	b480      	push	{r7}
 800deaa:	af00      	add	r7, sp, #0
  return;
 800deac:	bf00      	nop
}
 800deae:	46bd      	mov	sp, r7
 800deb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deb4:	4770      	bx	lr

0800deb6 <CRS_STM_Init>:
__WEAK void CRS_STM_Init( void )
{
 800deb6:	b480      	push	{r7}
 800deb8:	af00      	add	r7, sp, #0
  return;
 800deba:	bf00      	nop
}
 800debc:	46bd      	mov	sp, r7
 800debe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dec2:	4770      	bx	lr

0800dec4 <DIS_Init>:
__WEAK void DIS_Init( void )
{
 800dec4:	b480      	push	{r7}
 800dec6:	af00      	add	r7, sp, #0
  return;
 800dec8:	bf00      	nop
}
 800deca:	46bd      	mov	sp, r7
 800decc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ded0:	4770      	bx	lr

0800ded2 <EDS_STM_Init>:
__WEAK void EDS_STM_Init( void )
{
 800ded2:	b480      	push	{r7}
 800ded4:	af00      	add	r7, sp, #0
  return;
 800ded6:	bf00      	nop
}
 800ded8:	46bd      	mov	sp, r7
 800deda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dede:	4770      	bx	lr

0800dee0 <HIDS_Init>:
__WEAK void HIDS_Init( void )
{
 800dee0:	b480      	push	{r7}
 800dee2:	af00      	add	r7, sp, #0
  return;
 800dee4:	bf00      	nop
}
 800dee6:	46bd      	mov	sp, r7
 800dee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deec:	4770      	bx	lr

0800deee <HRS_Init>:
__WEAK void HRS_Init( void )
{
 800deee:	b480      	push	{r7}
 800def0:	af00      	add	r7, sp, #0
  return;
 800def2:	bf00      	nop
}
 800def4:	46bd      	mov	sp, r7
 800def6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800defa:	4770      	bx	lr

0800defc <HTS_Init>:
__WEAK void HTS_Init( void )
{
 800defc:	b480      	push	{r7}
 800defe:	af00      	add	r7, sp, #0
  return;
 800df00:	bf00      	nop
}
 800df02:	46bd      	mov	sp, r7
 800df04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df08:	4770      	bx	lr

0800df0a <IAS_Init>:
__WEAK void IAS_Init( void )
{
 800df0a:	b480      	push	{r7}
 800df0c:	af00      	add	r7, sp, #0
  return;
 800df0e:	bf00      	nop
}
 800df10:	46bd      	mov	sp, r7
 800df12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df16:	4770      	bx	lr

0800df18 <LLS_Init>:
__WEAK void LLS_Init( void )
{
 800df18:	b480      	push	{r7}
 800df1a:	af00      	add	r7, sp, #0
  return;
 800df1c:	bf00      	nop
}
 800df1e:	46bd      	mov	sp, r7
 800df20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df24:	4770      	bx	lr

0800df26 <TPS_Init>:
__WEAK void TPS_Init( void )
{
 800df26:	b480      	push	{r7}
 800df28:	af00      	add	r7, sp, #0
  return;
 800df2a:	bf00      	nop
}
 800df2c:	46bd      	mov	sp, r7
 800df2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df32:	4770      	bx	lr

0800df34 <MOTENV_STM_Init>:
__WEAK void MOTENV_STM_Init( void )
{
 800df34:	b480      	push	{r7}
 800df36:	af00      	add	r7, sp, #0
  return;
 800df38:	bf00      	nop
}
 800df3a:	46bd      	mov	sp, r7
 800df3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df40:	4770      	bx	lr

0800df42 <P2PS_STM_Init>:
__WEAK void P2PS_STM_Init( void )
{
 800df42:	b480      	push	{r7}
 800df44:	af00      	add	r7, sp, #0
  return;
 800df46:	bf00      	nop
}
 800df48:	46bd      	mov	sp, r7
 800df4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df4e:	4770      	bx	lr

0800df50 <ZDD_STM_Init>:
__WEAK void ZDD_STM_Init( void )
{
 800df50:	b480      	push	{r7}
 800df52:	af00      	add	r7, sp, #0
  return;
 800df54:	bf00      	nop
}
 800df56:	46bd      	mov	sp, r7
 800df58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df5c:	4770      	bx	lr

0800df5e <OTAS_STM_Init>:
__WEAK void OTAS_STM_Init( void )
{
 800df5e:	b480      	push	{r7}
 800df60:	af00      	add	r7, sp, #0
  return;
 800df62:	bf00      	nop
}
 800df64:	46bd      	mov	sp, r7
 800df66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df6a:	4770      	bx	lr

0800df6c <MESH_Init>:
__WEAK void MESH_Init( void )
{
 800df6c:	b480      	push	{r7}
 800df6e:	af00      	add	r7, sp, #0
  return;
 800df70:	bf00      	nop
}
 800df72:	46bd      	mov	sp, r7
 800df74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df78:	4770      	bx	lr

0800df7a <BVOPUS_STM_Init>:
__WEAK void BVOPUS_STM_Init( void )
{
 800df7a:	b480      	push	{r7}
 800df7c:	af00      	add	r7, sp, #0
  return;
 800df7e:	bf00      	nop
}
 800df80:	46bd      	mov	sp, r7
 800df82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df86:	4770      	bx	lr

0800df88 <SVCCTL_Init>:
}

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 800df88:	b580      	push	{r7, lr}
 800df8a:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 800df8c:	4b04      	ldr	r3, [pc, #16]	@ (800dfa0 <SVCCTL_Init+0x18>)
 800df8e:	2200      	movs	r2, #0
 800df90:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 800df92:	4b04      	ldr	r3, [pc, #16]	@ (800dfa4 <SVCCTL_Init+0x1c>)
 800df94:	2200      	movs	r2, #0
 800df96:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 800df98:	f000 f806 	bl	800dfa8 <SVCCTL_SvcInit>

  return;
 800df9c:	bf00      	nop
}
 800df9e:	bd80      	pop	{r7, pc}
 800dfa0:	200000e0 	.word	0x200000e0
 800dfa4:	20000100 	.word	0x20000100

0800dfa8 <SVCCTL_SvcInit>:

__WEAK void SVCCTL_SvcInit(void)
{
 800dfa8:	b580      	push	{r7, lr}
 800dfaa:	af00      	add	r7, sp, #0
  BAS_Init();
 800dfac:	f7ff ff75 	bl	800de9a <BAS_Init>

  BLS_Init();
 800dfb0:	f7ff ff7a 	bl	800dea8 <BLS_Init>

  CRS_STM_Init();
 800dfb4:	f7ff ff7f 	bl	800deb6 <CRS_STM_Init>

  DIS_Init();
 800dfb8:	f7ff ff84 	bl	800dec4 <DIS_Init>

  EDS_STM_Init();
 800dfbc:	f7ff ff89 	bl	800ded2 <EDS_STM_Init>

  HIDS_Init();
 800dfc0:	f7ff ff8e 	bl	800dee0 <HIDS_Init>

  HRS_Init();
 800dfc4:	f7ff ff93 	bl	800deee <HRS_Init>

  HTS_Init();
 800dfc8:	f7ff ff98 	bl	800defc <HTS_Init>

  IAS_Init();
 800dfcc:	f7ff ff9d 	bl	800df0a <IAS_Init>

  LLS_Init();
 800dfd0:	f7ff ffa2 	bl	800df18 <LLS_Init>

  TPS_Init();
 800dfd4:	f7ff ffa7 	bl	800df26 <TPS_Init>

  MOTENV_STM_Init();
 800dfd8:	f7ff ffac 	bl	800df34 <MOTENV_STM_Init>

  P2PS_STM_Init();
 800dfdc:	f7ff ffb1 	bl	800df42 <P2PS_STM_Init>

  ZDD_STM_Init();
 800dfe0:	f7ff ffb6 	bl	800df50 <ZDD_STM_Init>

  OTAS_STM_Init();
 800dfe4:	f7ff ffbb 	bl	800df5e <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 800dfe8:	f7ff ffc7 	bl	800df7a <BVOPUS_STM_Init>

  MESH_Init();
 800dfec:	f7ff ffbe 	bl	800df6c <MESH_Init>

  SVCCTL_InitCustomSvc();
 800dff0:	f001 fc80 	bl	800f8f4 <SVCCTL_InitCustomSvc>
  
  return;
 800dff4:	bf00      	nop
}
 800dff6:	bd80      	pop	{r7, pc}

0800dff8 <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 800dff8:	b480      	push	{r7}
 800dffa:	b083      	sub	sp, #12
 800dffc:	af00      	add	r7, sp, #0
 800dffe:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 800e000:	4b09      	ldr	r3, [pc, #36]	@ (800e028 <SVCCTL_RegisterSvcHandler+0x30>)
 800e002:	7f1b      	ldrb	r3, [r3, #28]
 800e004:	4619      	mov	r1, r3
 800e006:	4a08      	ldr	r2, [pc, #32]	@ (800e028 <SVCCTL_RegisterSvcHandler+0x30>)
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 800e00e:	4b06      	ldr	r3, [pc, #24]	@ (800e028 <SVCCTL_RegisterSvcHandler+0x30>)
 800e010:	7f1b      	ldrb	r3, [r3, #28]
 800e012:	3301      	adds	r3, #1
 800e014:	b2da      	uxtb	r2, r3
 800e016:	4b04      	ldr	r3, [pc, #16]	@ (800e028 <SVCCTL_RegisterSvcHandler+0x30>)
 800e018:	771a      	strb	r2, [r3, #28]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 800e01a:	bf00      	nop
}
 800e01c:	370c      	adds	r7, #12
 800e01e:	46bd      	mov	sp, r7
 800e020:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e024:	4770      	bx	lr
 800e026:	bf00      	nop
 800e028:	200000e0 	.word	0x200000e0

0800e02c <SVCCTL_UserEvtRx>:

  return;
}

__WEAK SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 800e02c:	b580      	push	{r7, lr}
 800e02e:	b086      	sub	sp, #24
 800e030:	af00      	add	r7, sp, #0
 800e032:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	3301      	adds	r3, #1
 800e038:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 800e03a:	2300      	movs	r3, #0
 800e03c:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 800e03e:	693b      	ldr	r3, [r7, #16]
 800e040:	781b      	ldrb	r3, [r3, #0]
 800e042:	2bff      	cmp	r3, #255	@ 0xff
 800e044:	d125      	bne.n	800e092 <SVCCTL_UserEvtRx+0x66>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 800e046:	693b      	ldr	r3, [r7, #16]
 800e048:	3302      	adds	r3, #2
 800e04a:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 800e04c:	68fb      	ldr	r3, [r7, #12]
 800e04e:	881b      	ldrh	r3, [r3, #0]
 800e050:	b29b      	uxth	r3, r3
 800e052:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800e056:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800e05a:	d118      	bne.n	800e08e <SVCCTL_UserEvtRx+0x62>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800e05c:	2300      	movs	r3, #0
 800e05e:	757b      	strb	r3, [r7, #21]
 800e060:	e00d      	b.n	800e07e <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 800e062:	7d7b      	ldrb	r3, [r7, #21]
 800e064:	4a1a      	ldr	r2, [pc, #104]	@ (800e0d0 <SVCCTL_UserEvtRx+0xa4>)
 800e066:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e06a:	6878      	ldr	r0, [r7, #4]
 800e06c:	4798      	blx	r3
 800e06e:	4603      	mov	r3, r0
 800e070:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 800e072:	7dfb      	ldrb	r3, [r7, #23]
 800e074:	2b00      	cmp	r3, #0
 800e076:	d108      	bne.n	800e08a <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800e078:	7d7b      	ldrb	r3, [r7, #21]
 800e07a:	3301      	adds	r3, #1
 800e07c:	757b      	strb	r3, [r7, #21]
 800e07e:	4b14      	ldr	r3, [pc, #80]	@ (800e0d0 <SVCCTL_UserEvtRx+0xa4>)
 800e080:	7f1b      	ldrb	r3, [r3, #28]
 800e082:	7d7a      	ldrb	r2, [r7, #21]
 800e084:	429a      	cmp	r2, r3
 800e086:	d3ec      	bcc.n	800e062 <SVCCTL_UserEvtRx+0x36>
               */
              break;
            }
          }
#endif
          break;
 800e088:	e002      	b.n	800e090 <SVCCTL_UserEvtRx+0x64>
              break;
 800e08a:	bf00      	nop
          break;
 800e08c:	e000      	b.n	800e090 <SVCCTL_UserEvtRx+0x64>

        default:
          break;
 800e08e:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 800e090:	e000      	b.n	800e094 <SVCCTL_UserEvtRx+0x68>

    default:
      break;
 800e092:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the application.
   */
  switch (event_notification_status)
 800e094:	7dfb      	ldrb	r3, [r7, #23]
 800e096:	2b02      	cmp	r3, #2
 800e098:	d00f      	beq.n	800e0ba <SVCCTL_UserEvtRx+0x8e>
 800e09a:	2b02      	cmp	r3, #2
 800e09c:	dc10      	bgt.n	800e0c0 <SVCCTL_UserEvtRx+0x94>
 800e09e:	2b00      	cmp	r3, #0
 800e0a0:	d002      	beq.n	800e0a8 <SVCCTL_UserEvtRx+0x7c>
 800e0a2:	2b01      	cmp	r3, #1
 800e0a4:	d006      	beq.n	800e0b4 <SVCCTL_UserEvtRx+0x88>
 800e0a6:	e00b      	b.n	800e0c0 <SVCCTL_UserEvtRx+0x94>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 800e0a8:	6878      	ldr	r0, [r7, #4]
 800e0aa:	f000 ff9b 	bl	800efe4 <SVCCTL_App_Notification>
 800e0ae:	4603      	mov	r3, r0
 800e0b0:	75bb      	strb	r3, [r7, #22]
      break;
 800e0b2:	e008      	b.n	800e0c6 <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 800e0b4:	2301      	movs	r3, #1
 800e0b6:	75bb      	strb	r3, [r7, #22]
      break;
 800e0b8:	e005      	b.n	800e0c6 <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 800e0ba:	2300      	movs	r3, #0
 800e0bc:	75bb      	strb	r3, [r7, #22]
      break;
 800e0be:	e002      	b.n	800e0c6 <SVCCTL_UserEvtRx+0x9a>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 800e0c0:	2301      	movs	r3, #1
 800e0c2:	75bb      	strb	r3, [r7, #22]
      break;
 800e0c4:	bf00      	nop
  }

  return (return_status);
 800e0c6:	7dbb      	ldrb	r3, [r7, #22]
}
 800e0c8:	4618      	mov	r0, r3
 800e0ca:	3718      	adds	r7, #24
 800e0cc:	46bd      	mov	sp, r7
 800e0ce:	bd80      	pop	{r7, pc}
 800e0d0:	200000e0 	.word	0x200000e0

0800e0d4 <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 800e0d4:	b580      	push	{r7, lr}
 800e0d6:	b088      	sub	sp, #32
 800e0d8:	af00      	add	r7, sp, #0
 800e0da:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800e0dc:	f107 030c 	add.w	r3, r7, #12
 800e0e0:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 800e0e8:	69fb      	ldr	r3, [r7, #28]
 800e0ea:	212e      	movs	r1, #46	@ 0x2e
 800e0ec:	f64f 4066 	movw	r0, #64614	@ 0xfc66
 800e0f0:	f000 fae8 	bl	800e6c4 <shci_send>
            p_rsp );
 
  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800e0f4:	69fb      	ldr	r3, [r7, #28]
 800e0f6:	330b      	adds	r3, #11
 800e0f8:	78db      	ldrb	r3, [r3, #3]
}
 800e0fa:	4618      	mov	r0, r3
 800e0fc:	3720      	adds	r7, #32
 800e0fe:	46bd      	mov	sp, r7
 800e100:	bd80      	pop	{r7, pc}

0800e102 <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 800e102:	b580      	push	{r7, lr}
 800e104:	b088      	sub	sp, #32
 800e106:	af00      	add	r7, sp, #0
 800e108:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800e10a:	f107 030c 	add.w	r3, r7, #12
 800e10e:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 800e116:	69fb      	ldr	r3, [r7, #28]
 800e118:	210f      	movs	r1, #15
 800e11a:	f64f 4068 	movw	r0, #64616	@ 0xfc68
 800e11e:	f000 fad1 	bl	800e6c4 <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800e122:	69fb      	ldr	r3, [r7, #28]
 800e124:	330b      	adds	r3, #11
 800e126:	78db      	ldrb	r3, [r3, #3]
}
 800e128:	4618      	mov	r0, r3
 800e12a:	3720      	adds	r7, #32
 800e12c:	46bd      	mov	sp, r7
 800e12e:	bd80      	pop	{r7, pc}

0800e130 <SHCI_C2_Config>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_Config(SHCI_C2_CONFIG_Cmd_Param_t *pCmdPacket)
{
 800e130:	b580      	push	{r7, lr}
 800e132:	b088      	sub	sp, #32
 800e134:	af00      	add	r7, sp, #0
 800e136:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800e138:	f107 030c 	add.w	r3, r7, #12
 800e13c:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_CONFIG,
 800e13e:	69fb      	ldr	r3, [r7, #28]
 800e140:	687a      	ldr	r2, [r7, #4]
 800e142:	2110      	movs	r1, #16
 800e144:	f64f 4075 	movw	r0, #64629	@ 0xfc75
 800e148:	f000 fabc 	bl	800e6c4 <shci_send>
             sizeof(SHCI_C2_CONFIG_Cmd_Param_t),
             (uint8_t*)pCmdPacket,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800e14c:	69fb      	ldr	r3, [r7, #28]
 800e14e:	330b      	adds	r3, #11
 800e150:	78db      	ldrb	r3, [r3, #3]
}
 800e152:	4618      	mov	r0, r3
 800e154:	3720      	adds	r7, #32
 800e156:	46bd      	mov	sp, r7
 800e158:	bd80      	pop	{r7, pc}
	...

0800e15c <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 800e15c:	b480      	push	{r7}
 800e15e:	b08b      	sub	sp, #44	@ 0x2c
 800e160:	af00      	add	r7, sp, #0
 800e162:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 800e164:	2300      	movs	r3, #0
 800e166:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 800e168:	2300      	movs	r3, #0
 800e16a:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 800e16c:	2300      	movs	r3, #0
 800e16e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t wireless_firmware_memorySize = 0;
 800e170:	2300      	movs	r3, #0
 800e172:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 800e174:	2300      	movs	r3, #0
 800e176:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 800e178:	2300      	movs	r3, #0
 800e17a:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 800e17c:	2300      	movs	r3, #0
 800e17e:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 800e180:	2300      	movs	r3, #0
 800e182:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 800e184:	4b4a      	ldr	r3, [pc, #296]	@ (800e2b0 <SHCI_GetWirelessFwInfo+0x154>)
 800e186:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e188:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800e18c:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 800e18e:	693b      	ldr	r3, [r7, #16]
 800e190:	009b      	lsls	r3, r3, #2
 800e192:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 800e196:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 800e19a:	681b      	ldr	r3, [r3, #0]
 800e19c:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 800e19e:	68bb      	ldr	r3, [r7, #8]
 800e1a0:	681b      	ldr	r3, [r3, #0]
 800e1a2:	4a44      	ldr	r2, [pc, #272]	@ (800e2b4 <SHCI_GetWirelessFwInfo+0x158>)
 800e1a4:	4293      	cmp	r3, r2
 800e1a6:	d10f      	bne.n	800e1c8 <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 800e1a8:	68bb      	ldr	r3, [r7, #8]
 800e1aa:	695b      	ldr	r3, [r3, #20]
 800e1ac:	627b      	str	r3, [r7, #36]	@ 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 800e1ae:	68bb      	ldr	r3, [r7, #8]
 800e1b0:	699b      	ldr	r3, [r3, #24]
 800e1b2:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 800e1b4:	68bb      	ldr	r3, [r7, #8]
 800e1b6:	69db      	ldr	r3, [r3, #28]
 800e1b8:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 800e1ba:	68bb      	ldr	r3, [r7, #8]
 800e1bc:	68db      	ldr	r3, [r3, #12]
 800e1be:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 800e1c0:	68bb      	ldr	r3, [r7, #8]
 800e1c2:	691b      	ldr	r3, [r3, #16]
 800e1c4:	617b      	str	r3, [r7, #20]
 800e1c6:	e01a      	b.n	800e1fe <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 800e1c8:	693b      	ldr	r3, [r7, #16]
 800e1ca:	009b      	lsls	r3, r3, #2
 800e1cc:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 800e1d0:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 800e1d4:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 800e1d6:	68fb      	ldr	r3, [r7, #12]
 800e1d8:	681b      	ldr	r3, [r3, #0]
 800e1da:	691b      	ldr	r3, [r3, #16]
 800e1dc:	627b      	str	r3, [r7, #36]	@ 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 800e1de:	68fb      	ldr	r3, [r7, #12]
 800e1e0:	681b      	ldr	r3, [r3, #0]
 800e1e2:	695b      	ldr	r3, [r3, #20]
 800e1e4:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 800e1e6:	68fb      	ldr	r3, [r7, #12]
 800e1e8:	681b      	ldr	r3, [r3, #0]
 800e1ea:	699b      	ldr	r3, [r3, #24]
 800e1ec:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 800e1ee:	68fb      	ldr	r3, [r7, #12]
 800e1f0:	681b      	ldr	r3, [r3, #0]
 800e1f2:	685b      	ldr	r3, [r3, #4]
 800e1f4:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 800e1f6:	68fb      	ldr	r3, [r7, #12]
 800e1f8:	681b      	ldr	r3, [r3, #0]
 800e1fa:	689b      	ldr	r3, [r3, #8]
 800e1fc:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 800e1fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e200:	0e1b      	lsrs	r3, r3, #24
 800e202:	b2da      	uxtb	r2, r3
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 800e208:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e20a:	0c1b      	lsrs	r3, r3, #16
 800e20c:	b2da      	uxtb	r2, r3
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 800e212:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e214:	0a1b      	lsrs	r3, r3, #8
 800e216:	b2da      	uxtb	r2, r3
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 800e21c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e21e:	091b      	lsrs	r3, r3, #4
 800e220:	b2db      	uxtb	r3, r3
 800e222:	f003 030f 	and.w	r3, r3, #15
 800e226:	b2da      	uxtb	r2, r3
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 800e22c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e22e:	b2db      	uxtb	r3, r3
 800e230:	f003 030f 	and.w	r3, r3, #15
 800e234:	b2da      	uxtb	r2, r3
 800e236:	687b      	ldr	r3, [r7, #4]
 800e238:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800e23a:	6a3b      	ldr	r3, [r7, #32]
 800e23c:	0e1b      	lsrs	r3, r3, #24
 800e23e:	b2da      	uxtb	r2, r3
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 800e244:	6a3b      	ldr	r3, [r7, #32]
 800e246:	0c1b      	lsrs	r3, r3, #16
 800e248:	b2da      	uxtb	r2, r3
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 800e24e:	6a3b      	ldr	r3, [r7, #32]
 800e250:	0a1b      	lsrs	r3, r3, #8
 800e252:	b2da      	uxtb	r2, r3
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 800e258:	6a3b      	ldr	r3, [r7, #32]
 800e25a:	b2da      	uxtb	r2, r3
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 800e260:	69fb      	ldr	r3, [r7, #28]
 800e262:	b2da      	uxtb	r2, r3
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 800e268:	69bb      	ldr	r3, [r7, #24]
 800e26a:	0e1b      	lsrs	r3, r3, #24
 800e26c:	b2da      	uxtb	r2, r3
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 800e272:	69bb      	ldr	r3, [r7, #24]
 800e274:	0c1b      	lsrs	r3, r3, #16
 800e276:	b2da      	uxtb	r2, r3
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 800e27c:	69bb      	ldr	r3, [r7, #24]
 800e27e:	0a1b      	lsrs	r3, r3, #8
 800e280:	b2da      	uxtb	r2, r3
 800e282:	687b      	ldr	r3, [r7, #4]
 800e284:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800e286:	697b      	ldr	r3, [r7, #20]
 800e288:	0e1b      	lsrs	r3, r3, #24
 800e28a:	b2da      	uxtb	r2, r3
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 800e290:	697b      	ldr	r3, [r7, #20]
 800e292:	0c1b      	lsrs	r3, r3, #16
 800e294:	b2da      	uxtb	r2, r3
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 800e29a:	697b      	ldr	r3, [r7, #20]
 800e29c:	b2da      	uxtb	r2, r3
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 800e2a2:	2300      	movs	r3, #0
}
 800e2a4:	4618      	mov	r0, r3
 800e2a6:	372c      	adds	r7, #44	@ 0x2c
 800e2a8:	46bd      	mov	sp, r7
 800e2aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2ae:	4770      	bx	lr
 800e2b0:	58004000 	.word	0x58004000
 800e2b4:	a94656b9 	.word	0xa94656b9

0800e2b8 <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800e2b8:	b580      	push	{r7, lr}
 800e2ba:	b082      	sub	sp, #8
 800e2bc:	af00      	add	r7, sp, #0
 800e2be:	6078      	str	r0, [r7, #4]
 800e2c0:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800e2c2:	683b      	ldr	r3, [r7, #0]
 800e2c4:	685b      	ldr	r3, [r3, #4]
 800e2c6:	4a08      	ldr	r2, [pc, #32]	@ (800e2e8 <hci_init+0x30>)
 800e2c8:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 800e2ca:	4a08      	ldr	r2, [pc, #32]	@ (800e2ec <hci_init+0x34>)
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 800e2d0:	4806      	ldr	r0, [pc, #24]	@ (800e2ec <hci_init+0x34>)
 800e2d2:	f000 f979 	bl	800e5c8 <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800e2d6:	683b      	ldr	r3, [r7, #0]
 800e2d8:	681b      	ldr	r3, [r3, #0]
 800e2da:	4618      	mov	r0, r3
 800e2dc:	f000 f8da 	bl	800e494 <TlInit>

  return;
 800e2e0:	bf00      	nop
}
 800e2e2:	3708      	adds	r7, #8
 800e2e4:	46bd      	mov	sp, r7
 800e2e6:	bd80      	pop	{r7, pc}
 800e2e8:	20002bec 	.word	0x20002bec
 800e2ec:	20002bc4 	.word	0x20002bc4

0800e2f0 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 800e2f0:	b580      	push	{r7, lr}
 800e2f2:	b084      	sub	sp, #16
 800e2f4:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800e2f6:	4822      	ldr	r0, [pc, #136]	@ (800e380 <hci_user_evt_proc+0x90>)
 800e2f8:	f000 fd32 	bl	800ed60 <LST_is_empty>
 800e2fc:	4603      	mov	r3, r0
 800e2fe:	2b00      	cmp	r3, #0
 800e300:	d12b      	bne.n	800e35a <hci_user_evt_proc+0x6a>
 800e302:	4b20      	ldr	r3, [pc, #128]	@ (800e384 <hci_user_evt_proc+0x94>)
 800e304:	781b      	ldrb	r3, [r3, #0]
 800e306:	2b00      	cmp	r3, #0
 800e308:	d027      	beq.n	800e35a <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800e30a:	f107 030c 	add.w	r3, r7, #12
 800e30e:	4619      	mov	r1, r3
 800e310:	481b      	ldr	r0, [pc, #108]	@ (800e380 <hci_user_evt_proc+0x90>)
 800e312:	f000 fdb4 	bl	800ee7e <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 800e316:	4b1c      	ldr	r3, [pc, #112]	@ (800e388 <hci_user_evt_proc+0x98>)
 800e318:	69db      	ldr	r3, [r3, #28]
 800e31a:	2b00      	cmp	r3, #0
 800e31c:	d00c      	beq.n	800e338 <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800e31e:	68fb      	ldr	r3, [r7, #12]
 800e320:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 800e322:	2301      	movs	r3, #1
 800e324:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 800e326:	4b18      	ldr	r3, [pc, #96]	@ (800e388 <hci_user_evt_proc+0x98>)
 800e328:	69db      	ldr	r3, [r3, #28]
 800e32a:	1d3a      	adds	r2, r7, #4
 800e32c:	4610      	mov	r0, r2
 800e32e:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 800e330:	793a      	ldrb	r2, [r7, #4]
 800e332:	4b14      	ldr	r3, [pc, #80]	@ (800e384 <hci_user_evt_proc+0x94>)
 800e334:	701a      	strb	r2, [r3, #0]
 800e336:	e002      	b.n	800e33e <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800e338:	4b12      	ldr	r3, [pc, #72]	@ (800e384 <hci_user_evt_proc+0x94>)
 800e33a:	2201      	movs	r2, #1
 800e33c:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 800e33e:	4b11      	ldr	r3, [pc, #68]	@ (800e384 <hci_user_evt_proc+0x94>)
 800e340:	781b      	ldrb	r3, [r3, #0]
 800e342:	2b00      	cmp	r3, #0
 800e344:	d004      	beq.n	800e350 <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800e346:	68fb      	ldr	r3, [r7, #12]
 800e348:	4618      	mov	r0, r3
 800e34a:	f000 fc0d 	bl	800eb68 <TL_MM_EvtDone>
 800e34e:	e004      	b.n	800e35a <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800e350:	68fb      	ldr	r3, [r7, #12]
 800e352:	4619      	mov	r1, r3
 800e354:	480a      	ldr	r0, [pc, #40]	@ (800e380 <hci_user_evt_proc+0x90>)
 800e356:	f000 fd25 	bl	800eda4 <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800e35a:	4809      	ldr	r0, [pc, #36]	@ (800e380 <hci_user_evt_proc+0x90>)
 800e35c:	f000 fd00 	bl	800ed60 <LST_is_empty>
 800e360:	4603      	mov	r3, r0
 800e362:	2b00      	cmp	r3, #0
 800e364:	d107      	bne.n	800e376 <hci_user_evt_proc+0x86>
 800e366:	4b07      	ldr	r3, [pc, #28]	@ (800e384 <hci_user_evt_proc+0x94>)
 800e368:	781b      	ldrb	r3, [r3, #0]
 800e36a:	2b00      	cmp	r3, #0
 800e36c:	d003      	beq.n	800e376 <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 800e36e:	4804      	ldr	r0, [pc, #16]	@ (800e380 <hci_user_evt_proc+0x90>)
 800e370:	f001 f85e 	bl	800f430 <hci_notify_asynch_evt>
  }


  return;
 800e374:	bf00      	nop
 800e376:	bf00      	nop
}
 800e378:	3710      	adds	r7, #16
 800e37a:	46bd      	mov	sp, r7
 800e37c:	bd80      	pop	{r7, pc}
 800e37e:	bf00      	nop
 800e380:	20000108 	.word	0x20000108
 800e384:	20000114 	.word	0x20000114
 800e388:	20002bc4 	.word	0x20002bc4

0800e38c <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 800e38c:	b580      	push	{r7, lr}
 800e38e:	b088      	sub	sp, #32
 800e390:	af00      	add	r7, sp, #0
 800e392:	6078      	str	r0, [r7, #4]
 800e394:	460b      	mov	r3, r1
 800e396:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 800e398:	2000      	movs	r0, #0
 800e39a:	f000 f8d1 	bl	800e540 <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 800e39e:	2300      	movs	r3, #0
 800e3a0:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	885b      	ldrh	r3, [r3, #2]
 800e3a6:	b21b      	sxth	r3, r3
 800e3a8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e3ac:	b21a      	sxth	r2, r3
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	881b      	ldrh	r3, [r3, #0]
 800e3b2:	029b      	lsls	r3, r3, #10
 800e3b4:	b21b      	sxth	r3, r3
 800e3b6:	4313      	orrs	r3, r2
 800e3b8:	b21b      	sxth	r3, r3
 800e3ba:	83bb      	strh	r3, [r7, #28]
  
  CmdRspStatusFlag = HCI_TL_CMD_RESP_WAIT;
 800e3bc:	4b33      	ldr	r3, [pc, #204]	@ (800e48c <hci_send_req+0x100>)
 800e3be:	2201      	movs	r2, #1
 800e3c0:	701a      	strb	r2, [r3, #0]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	68db      	ldr	r3, [r3, #12]
 800e3c6:	b2d9      	uxtb	r1, r3
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	689a      	ldr	r2, [r3, #8]
 800e3cc:	8bbb      	ldrh	r3, [r7, #28]
 800e3ce:	4618      	mov	r0, r3
 800e3d0:	f000 f890 	bl	800e4f4 <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 800e3d4:	e04e      	b.n	800e474 <hci_send_req+0xe8>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 800e3d6:	f248 00e8 	movw	r0, #33000	@ 0x80e8
 800e3da:	f001 f840 	bl	800f45e <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800e3de:	e043      	b.n	800e468 <hci_send_req+0xdc>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 800e3e0:	f107 030c 	add.w	r3, r7, #12
 800e3e4:	4619      	mov	r1, r3
 800e3e6:	482a      	ldr	r0, [pc, #168]	@ (800e490 <hci_send_req+0x104>)
 800e3e8:	f000 fd49 	bl	800ee7e <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 800e3ec:	68fb      	ldr	r3, [r7, #12]
 800e3ee:	7a5b      	ldrb	r3, [r3, #9]
 800e3f0:	2b0f      	cmp	r3, #15
 800e3f2:	d114      	bne.n	800e41e <hci_send_req+0x92>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 800e3f4:	68fb      	ldr	r3, [r7, #12]
 800e3f6:	330b      	adds	r3, #11
 800e3f8:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 800e3fa:	693b      	ldr	r3, [r7, #16]
 800e3fc:	885b      	ldrh	r3, [r3, #2]
 800e3fe:	b29b      	uxth	r3, r3
 800e400:	8bba      	ldrh	r2, [r7, #28]
 800e402:	429a      	cmp	r2, r3
 800e404:	d104      	bne.n	800e410 <hci_send_req+0x84>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	691b      	ldr	r3, [r3, #16]
 800e40a:	693a      	ldr	r2, [r7, #16]
 800e40c:	7812      	ldrb	r2, [r2, #0]
 800e40e:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 800e410:	693b      	ldr	r3, [r7, #16]
 800e412:	785b      	ldrb	r3, [r3, #1]
 800e414:	2b00      	cmp	r3, #0
 800e416:	d027      	beq.n	800e468 <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800e418:	2301      	movs	r3, #1
 800e41a:	77fb      	strb	r3, [r7, #31]
 800e41c:	e024      	b.n	800e468 <hci_send_req+0xdc>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 800e41e:	68fb      	ldr	r3, [r7, #12]
 800e420:	330b      	adds	r3, #11
 800e422:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 800e424:	69bb      	ldr	r3, [r7, #24]
 800e426:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800e42a:	b29b      	uxth	r3, r3
 800e42c:	8bba      	ldrh	r2, [r7, #28]
 800e42e:	429a      	cmp	r2, r3
 800e430:	d114      	bne.n	800e45c <hci_send_req+0xd0>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 800e432:	68fb      	ldr	r3, [r7, #12]
 800e434:	7a9b      	ldrb	r3, [r3, #10]
 800e436:	3b03      	subs	r3, #3
 800e438:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	695a      	ldr	r2, [r3, #20]
 800e43e:	7dfb      	ldrb	r3, [r7, #23]
 800e440:	429a      	cmp	r2, r3
 800e442:	bfa8      	it	ge
 800e444:	461a      	movge	r2, r3
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	6918      	ldr	r0, [r3, #16]
 800e44e:	69bb      	ldr	r3, [r7, #24]
 800e450:	1cd9      	adds	r1, r3, #3
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	695b      	ldr	r3, [r3, #20]
 800e456:	461a      	mov	r2, r3
 800e458:	f002 f9c5 	bl	80107e6 <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 800e45c:	69bb      	ldr	r3, [r7, #24]
 800e45e:	781b      	ldrb	r3, [r3, #0]
 800e460:	2b00      	cmp	r3, #0
 800e462:	d001      	beq.n	800e468 <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800e464:	2301      	movs	r3, #1
 800e466:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800e468:	4809      	ldr	r0, [pc, #36]	@ (800e490 <hci_send_req+0x104>)
 800e46a:	f000 fc79 	bl	800ed60 <LST_is_empty>
 800e46e:	4603      	mov	r3, r0
 800e470:	2b00      	cmp	r3, #0
 800e472:	d0b5      	beq.n	800e3e0 <hci_send_req+0x54>
  while(local_cmd_status == HCI_TL_CmdBusy)
 800e474:	7ffb      	ldrb	r3, [r7, #31]
 800e476:	2b00      	cmp	r3, #0
 800e478:	d0ad      	beq.n	800e3d6 <hci_send_req+0x4a>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 800e47a:	2001      	movs	r0, #1
 800e47c:	f000 f860 	bl	800e540 <NotifyCmdStatus>

  return 0;
 800e480:	2300      	movs	r3, #0
}
 800e482:	4618      	mov	r0, r3
 800e484:	3720      	adds	r7, #32
 800e486:	46bd      	mov	sp, r7
 800e488:	bd80      	pop	{r7, pc}
 800e48a:	bf00      	nop
 800e48c:	20002bf0 	.word	0x20002bf0
 800e490:	20002be4 	.word	0x20002be4

0800e494 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800e494:	b580      	push	{r7, lr}
 800e496:	b086      	sub	sp, #24
 800e498:	af00      	add	r7, sp, #0
 800e49a:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 800e49c:	480f      	ldr	r0, [pc, #60]	@ (800e4dc <TlInit+0x48>)
 800e49e:	f000 fc4f 	bl	800ed40 <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 800e4a2:	4a0f      	ldr	r2, [pc, #60]	@ (800e4e0 <TlInit+0x4c>)
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 800e4a8:	480e      	ldr	r0, [pc, #56]	@ (800e4e4 <TlInit+0x50>)
 800e4aa:	f000 fc49 	bl	800ed40 <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800e4ae:	4b0e      	ldr	r3, [pc, #56]	@ (800e4e8 <TlInit+0x54>)
 800e4b0:	2201      	movs	r2, #1
 800e4b2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 800e4b4:	4b0d      	ldr	r3, [pc, #52]	@ (800e4ec <TlInit+0x58>)
 800e4b6:	681b      	ldr	r3, [r3, #0]
 800e4b8:	2b00      	cmp	r3, #0
 800e4ba:	d00a      	beq.n	800e4d2 <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 800e4c0:	4b0b      	ldr	r3, [pc, #44]	@ (800e4f0 <TlInit+0x5c>)
 800e4c2:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 800e4c4:	4b09      	ldr	r3, [pc, #36]	@ (800e4ec <TlInit+0x58>)
 800e4c6:	681b      	ldr	r3, [r3, #0]
 800e4c8:	f107 0208 	add.w	r2, r7, #8
 800e4cc:	4610      	mov	r0, r2
 800e4ce:	4798      	blx	r3
  }

  return;
 800e4d0:	bf00      	nop
 800e4d2:	bf00      	nop
}
 800e4d4:	3718      	adds	r7, #24
 800e4d6:	46bd      	mov	sp, r7
 800e4d8:	bd80      	pop	{r7, pc}
 800e4da:	bf00      	nop
 800e4dc:	20002be4 	.word	0x20002be4
 800e4e0:	20000110 	.word	0x20000110
 800e4e4:	20000108 	.word	0x20000108
 800e4e8:	20000114 	.word	0x20000114
 800e4ec:	20002bc4 	.word	0x20002bc4
 800e4f0:	0800e581 	.word	0x0800e581

0800e4f4 <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 800e4f4:	b580      	push	{r7, lr}
 800e4f6:	b082      	sub	sp, #8
 800e4f8:	af00      	add	r7, sp, #0
 800e4fa:	4603      	mov	r3, r0
 800e4fc:	603a      	str	r2, [r7, #0]
 800e4fe:	80fb      	strh	r3, [r7, #6]
 800e500:	460b      	mov	r3, r1
 800e502:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 800e504:	4b0c      	ldr	r3, [pc, #48]	@ (800e538 <SendCmd+0x44>)
 800e506:	681b      	ldr	r3, [r3, #0]
 800e508:	88fa      	ldrh	r2, [r7, #6]
 800e50a:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 800e50e:	4b0a      	ldr	r3, [pc, #40]	@ (800e538 <SendCmd+0x44>)
 800e510:	681b      	ldr	r3, [r3, #0]
 800e512:	797a      	ldrb	r2, [r7, #5]
 800e514:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 800e516:	4b08      	ldr	r3, [pc, #32]	@ (800e538 <SendCmd+0x44>)
 800e518:	681b      	ldr	r3, [r3, #0]
 800e51a:	330c      	adds	r3, #12
 800e51c:	797a      	ldrb	r2, [r7, #5]
 800e51e:	6839      	ldr	r1, [r7, #0]
 800e520:	4618      	mov	r0, r3
 800e522:	f002 f960 	bl	80107e6 <memcpy>

  hciContext.io.Send(0,0);
 800e526:	4b05      	ldr	r3, [pc, #20]	@ (800e53c <SendCmd+0x48>)
 800e528:	691b      	ldr	r3, [r3, #16]
 800e52a:	2100      	movs	r1, #0
 800e52c:	2000      	movs	r0, #0
 800e52e:	4798      	blx	r3

  return;
 800e530:	bf00      	nop
}
 800e532:	3708      	adds	r7, #8
 800e534:	46bd      	mov	sp, r7
 800e536:	bd80      	pop	{r7, pc}
 800e538:	20000110 	.word	0x20000110
 800e53c:	20002bc4 	.word	0x20002bc4

0800e540 <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 800e540:	b580      	push	{r7, lr}
 800e542:	b082      	sub	sp, #8
 800e544:	af00      	add	r7, sp, #0
 800e546:	4603      	mov	r3, r0
 800e548:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 800e54a:	79fb      	ldrb	r3, [r7, #7]
 800e54c:	2b00      	cmp	r3, #0
 800e54e:	d108      	bne.n	800e562 <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 800e550:	4b0a      	ldr	r3, [pc, #40]	@ (800e57c <NotifyCmdStatus+0x3c>)
 800e552:	681b      	ldr	r3, [r3, #0]
 800e554:	2b00      	cmp	r3, #0
 800e556:	d00d      	beq.n	800e574 <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 800e558:	4b08      	ldr	r3, [pc, #32]	@ (800e57c <NotifyCmdStatus+0x3c>)
 800e55a:	681b      	ldr	r3, [r3, #0]
 800e55c:	2000      	movs	r0, #0
 800e55e:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 800e560:	e008      	b.n	800e574 <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 800e562:	4b06      	ldr	r3, [pc, #24]	@ (800e57c <NotifyCmdStatus+0x3c>)
 800e564:	681b      	ldr	r3, [r3, #0]
 800e566:	2b00      	cmp	r3, #0
 800e568:	d004      	beq.n	800e574 <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 800e56a:	4b04      	ldr	r3, [pc, #16]	@ (800e57c <NotifyCmdStatus+0x3c>)
 800e56c:	681b      	ldr	r3, [r3, #0]
 800e56e:	2001      	movs	r0, #1
 800e570:	4798      	blx	r3
  return;
 800e572:	bf00      	nop
 800e574:	bf00      	nop
}
 800e576:	3708      	adds	r7, #8
 800e578:	46bd      	mov	sp, r7
 800e57a:	bd80      	pop	{r7, pc}
 800e57c:	20002bec 	.word	0x20002bec

0800e580 <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 800e580:	b580      	push	{r7, lr}
 800e582:	b082      	sub	sp, #8
 800e584:	af00      	add	r7, sp, #0
 800e586:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	7a5b      	ldrb	r3, [r3, #9]
 800e58c:	2b0f      	cmp	r3, #15
 800e58e:	d003      	beq.n	800e598 <TlEvtReceived+0x18>
 800e590:	687b      	ldr	r3, [r7, #4]
 800e592:	7a5b      	ldrb	r3, [r3, #9]
 800e594:	2b0e      	cmp	r3, #14
 800e596:	d107      	bne.n	800e5a8 <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 800e598:	6879      	ldr	r1, [r7, #4]
 800e59a:	4809      	ldr	r0, [pc, #36]	@ (800e5c0 <TlEvtReceived+0x40>)
 800e59c:	f000 fc28 	bl	800edf0 <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 800e5a0:	2000      	movs	r0, #0
 800e5a2:	f000 ff51 	bl	800f448 <hci_cmd_resp_release>
 800e5a6:	e006      	b.n	800e5b6 <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 800e5a8:	6879      	ldr	r1, [r7, #4]
 800e5aa:	4806      	ldr	r0, [pc, #24]	@ (800e5c4 <TlEvtReceived+0x44>)
 800e5ac:	f000 fc20 	bl	800edf0 <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800e5b0:	4804      	ldr	r0, [pc, #16]	@ (800e5c4 <TlEvtReceived+0x44>)
 800e5b2:	f000 ff3d 	bl	800f430 <hci_notify_asynch_evt>
  }

  return;
 800e5b6:	bf00      	nop
}
 800e5b8:	3708      	adds	r7, #8
 800e5ba:	46bd      	mov	sp, r7
 800e5bc:	bd80      	pop	{r7, pc}
 800e5be:	bf00      	nop
 800e5c0:	20002be4 	.word	0x20002be4
 800e5c4:	20000108 	.word	0x20000108

0800e5c8 <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 800e5c8:	b480      	push	{r7}
 800e5ca:	b083      	sub	sp, #12
 800e5cc:	af00      	add	r7, sp, #0
 800e5ce:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	4a05      	ldr	r2, [pc, #20]	@ (800e5e8 <hci_register_io_bus+0x20>)
 800e5d4:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 800e5d6:	687b      	ldr	r3, [r7, #4]
 800e5d8:	4a04      	ldr	r2, [pc, #16]	@ (800e5ec <hci_register_io_bus+0x24>)
 800e5da:	611a      	str	r2, [r3, #16]

  return;
 800e5dc:	bf00      	nop
}
 800e5de:	370c      	adds	r7, #12
 800e5e0:	46bd      	mov	sp, r7
 800e5e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5e6:	4770      	bx	lr
 800e5e8:	0800e8e1 	.word	0x0800e8e1
 800e5ec:	0800e949 	.word	0x0800e949

0800e5f0 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800e5f0:	b580      	push	{r7, lr}
 800e5f2:	b082      	sub	sp, #8
 800e5f4:	af00      	add	r7, sp, #0
 800e5f6:	6078      	str	r0, [r7, #4]
 800e5f8:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800e5fa:	683b      	ldr	r3, [r7, #0]
 800e5fc:	685b      	ldr	r3, [r3, #4]
 800e5fe:	4a08      	ldr	r2, [pc, #32]	@ (800e620 <shci_init+0x30>)
 800e600:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 800e602:	4a08      	ldr	r2, [pc, #32]	@ (800e624 <shci_init+0x34>)
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 800e608:	4806      	ldr	r0, [pc, #24]	@ (800e624 <shci_init+0x34>)
 800e60a:	f000 f915 	bl	800e838 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800e60e:	683b      	ldr	r3, [r7, #0]
 800e610:	681b      	ldr	r3, [r3, #0]
 800e612:	4618      	mov	r0, r3
 800e614:	f000 f898 	bl	800e748 <TlInit>

  return;
 800e618:	bf00      	nop
}
 800e61a:	3708      	adds	r7, #8
 800e61c:	46bd      	mov	sp, r7
 800e61e:	bd80      	pop	{r7, pc}
 800e620:	20002c14 	.word	0x20002c14
 800e624:	20002bf4 	.word	0x20002bf4

0800e628 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 800e628:	b580      	push	{r7, lr}
 800e62a:	b084      	sub	sp, #16
 800e62c:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800e62e:	4822      	ldr	r0, [pc, #136]	@ (800e6b8 <shci_user_evt_proc+0x90>)
 800e630:	f000 fb96 	bl	800ed60 <LST_is_empty>
 800e634:	4603      	mov	r3, r0
 800e636:	2b00      	cmp	r3, #0
 800e638:	d12b      	bne.n	800e692 <shci_user_evt_proc+0x6a>
 800e63a:	4b20      	ldr	r3, [pc, #128]	@ (800e6bc <shci_user_evt_proc+0x94>)
 800e63c:	781b      	ldrb	r3, [r3, #0]
 800e63e:	2b00      	cmp	r3, #0
 800e640:	d027      	beq.n	800e692 <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800e642:	f107 030c 	add.w	r3, r7, #12
 800e646:	4619      	mov	r1, r3
 800e648:	481b      	ldr	r0, [pc, #108]	@ (800e6b8 <shci_user_evt_proc+0x90>)
 800e64a:	f000 fc18 	bl	800ee7e <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 800e64e:	4b1c      	ldr	r3, [pc, #112]	@ (800e6c0 <shci_user_evt_proc+0x98>)
 800e650:	69db      	ldr	r3, [r3, #28]
 800e652:	2b00      	cmp	r3, #0
 800e654:	d00c      	beq.n	800e670 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800e656:	68fb      	ldr	r3, [r7, #12]
 800e658:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 800e65a:	2301      	movs	r3, #1
 800e65c:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 800e65e:	4b18      	ldr	r3, [pc, #96]	@ (800e6c0 <shci_user_evt_proc+0x98>)
 800e660:	69db      	ldr	r3, [r3, #28]
 800e662:	1d3a      	adds	r2, r7, #4
 800e664:	4610      	mov	r0, r2
 800e666:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 800e668:	793a      	ldrb	r2, [r7, #4]
 800e66a:	4b14      	ldr	r3, [pc, #80]	@ (800e6bc <shci_user_evt_proc+0x94>)
 800e66c:	701a      	strb	r2, [r3, #0]
 800e66e:	e002      	b.n	800e676 <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800e670:	4b12      	ldr	r3, [pc, #72]	@ (800e6bc <shci_user_evt_proc+0x94>)
 800e672:	2201      	movs	r2, #1
 800e674:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 800e676:	4b11      	ldr	r3, [pc, #68]	@ (800e6bc <shci_user_evt_proc+0x94>)
 800e678:	781b      	ldrb	r3, [r3, #0]
 800e67a:	2b00      	cmp	r3, #0
 800e67c:	d004      	beq.n	800e688 <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800e67e:	68fb      	ldr	r3, [r7, #12]
 800e680:	4618      	mov	r0, r3
 800e682:	f000 fa71 	bl	800eb68 <TL_MM_EvtDone>
 800e686:	e004      	b.n	800e692 <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800e688:	68fb      	ldr	r3, [r7, #12]
 800e68a:	4619      	mov	r1, r3
 800e68c:	480a      	ldr	r0, [pc, #40]	@ (800e6b8 <shci_user_evt_proc+0x90>)
 800e68e:	f000 fb89 	bl	800eda4 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800e692:	4809      	ldr	r0, [pc, #36]	@ (800e6b8 <shci_user_evt_proc+0x90>)
 800e694:	f000 fb64 	bl	800ed60 <LST_is_empty>
 800e698:	4603      	mov	r3, r0
 800e69a:	2b00      	cmp	r3, #0
 800e69c:	d107      	bne.n	800e6ae <shci_user_evt_proc+0x86>
 800e69e:	4b07      	ldr	r3, [pc, #28]	@ (800e6bc <shci_user_evt_proc+0x94>)
 800e6a0:	781b      	ldrb	r3, [r3, #0]
 800e6a2:	2b00      	cmp	r3, #0
 800e6a4:	d003      	beq.n	800e6ae <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 800e6a6:	4804      	ldr	r0, [pc, #16]	@ (800e6b8 <shci_user_evt_proc+0x90>)
 800e6a8:	f7f2 fcce 	bl	8001048 <shci_notify_asynch_evt>
  }


  return;
 800e6ac:	bf00      	nop
 800e6ae:	bf00      	nop
}
 800e6b0:	3710      	adds	r7, #16
 800e6b2:	46bd      	mov	sp, r7
 800e6b4:	bd80      	pop	{r7, pc}
 800e6b6:	bf00      	nop
 800e6b8:	20000118 	.word	0x20000118
 800e6bc:	20000128 	.word	0x20000128
 800e6c0:	20002bf4 	.word	0x20002bf4

0800e6c4 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 800e6c4:	b580      	push	{r7, lr}
 800e6c6:	b084      	sub	sp, #16
 800e6c8:	af00      	add	r7, sp, #0
 800e6ca:	60ba      	str	r2, [r7, #8]
 800e6cc:	607b      	str	r3, [r7, #4]
 800e6ce:	4603      	mov	r3, r0
 800e6d0:	81fb      	strh	r3, [r7, #14]
 800e6d2:	460b      	mov	r3, r1
 800e6d4:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 800e6d6:	2000      	movs	r0, #0
 800e6d8:	f000 f868 	bl	800e7ac <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 800e6dc:	4b17      	ldr	r3, [pc, #92]	@ (800e73c <shci_send+0x78>)
 800e6de:	681b      	ldr	r3, [r3, #0]
 800e6e0:	89fa      	ldrh	r2, [r7, #14]
 800e6e2:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 800e6e6:	4b15      	ldr	r3, [pc, #84]	@ (800e73c <shci_send+0x78>)
 800e6e8:	681b      	ldr	r3, [r3, #0]
 800e6ea:	7b7a      	ldrb	r2, [r7, #13]
 800e6ec:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 800e6ee:	4b13      	ldr	r3, [pc, #76]	@ (800e73c <shci_send+0x78>)
 800e6f0:	681b      	ldr	r3, [r3, #0]
 800e6f2:	330c      	adds	r3, #12
 800e6f4:	7b7a      	ldrb	r2, [r7, #13]
 800e6f6:	68b9      	ldr	r1, [r7, #8]
 800e6f8:	4618      	mov	r0, r3
 800e6fa:	f002 f874 	bl	80107e6 <memcpy>
  CmdRspStatusFlag = SHCI_TL_CMD_RESP_WAIT;
 800e6fe:	4b10      	ldr	r3, [pc, #64]	@ (800e740 <shci_send+0x7c>)
 800e700:	2201      	movs	r2, #1
 800e702:	701a      	strb	r2, [r3, #0]
  shciContext.io.Send(0,0);
 800e704:	4b0f      	ldr	r3, [pc, #60]	@ (800e744 <shci_send+0x80>)
 800e706:	691b      	ldr	r3, [r3, #16]
 800e708:	2100      	movs	r1, #0
 800e70a:	2000      	movs	r0, #0
 800e70c:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 800e70e:	f248 00e8 	movw	r0, #33000	@ 0x80e8
 800e712:	f7f2 fcb0 	bl	8001076 <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 800e716:	687b      	ldr	r3, [r7, #4]
 800e718:	f103 0008 	add.w	r0, r3, #8
 800e71c:	4b07      	ldr	r3, [pc, #28]	@ (800e73c <shci_send+0x78>)
 800e71e:	6819      	ldr	r1, [r3, #0]
 800e720:	4b06      	ldr	r3, [pc, #24]	@ (800e73c <shci_send+0x78>)
 800e722:	681b      	ldr	r3, [r3, #0]
 800e724:	789b      	ldrb	r3, [r3, #2]
 800e726:	3303      	adds	r3, #3
 800e728:	461a      	mov	r2, r3
 800e72a:	f002 f85c 	bl	80107e6 <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800e72e:	2001      	movs	r0, #1
 800e730:	f000 f83c 	bl	800e7ac <Cmd_SetStatus>

  return;
 800e734:	bf00      	nop
}
 800e736:	3710      	adds	r7, #16
 800e738:	46bd      	mov	sp, r7
 800e73a:	bd80      	pop	{r7, pc}
 800e73c:	20000124 	.word	0x20000124
 800e740:	20002c18 	.word	0x20002c18
 800e744:	20002bf4 	.word	0x20002bf4

0800e748 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800e748:	b580      	push	{r7, lr}
 800e74a:	b086      	sub	sp, #24
 800e74c:	af00      	add	r7, sp, #0
 800e74e:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 800e750:	4a10      	ldr	r2, [pc, #64]	@ (800e794 <TlInit+0x4c>)
 800e752:	687b      	ldr	r3, [r7, #4]
 800e754:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 800e756:	4810      	ldr	r0, [pc, #64]	@ (800e798 <TlInit+0x50>)
 800e758:	f000 faf2 	bl	800ed40 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800e75c:	2001      	movs	r0, #1
 800e75e:	f000 f825 	bl	800e7ac <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800e762:	4b0e      	ldr	r3, [pc, #56]	@ (800e79c <TlInit+0x54>)
 800e764:	2201      	movs	r2, #1
 800e766:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 800e768:	4b0d      	ldr	r3, [pc, #52]	@ (800e7a0 <TlInit+0x58>)
 800e76a:	681b      	ldr	r3, [r3, #0]
 800e76c:	2b00      	cmp	r3, #0
 800e76e:	d00c      	beq.n	800e78a <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 800e774:	4b0b      	ldr	r3, [pc, #44]	@ (800e7a4 <TlInit+0x5c>)
 800e776:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 800e778:	4b0b      	ldr	r3, [pc, #44]	@ (800e7a8 <TlInit+0x60>)
 800e77a:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 800e77c:	4b08      	ldr	r3, [pc, #32]	@ (800e7a0 <TlInit+0x58>)
 800e77e:	681b      	ldr	r3, [r3, #0]
 800e780:	f107 020c 	add.w	r2, r7, #12
 800e784:	4610      	mov	r0, r2
 800e786:	4798      	blx	r3
  }

  return;
 800e788:	bf00      	nop
 800e78a:	bf00      	nop
}
 800e78c:	3718      	adds	r7, #24
 800e78e:	46bd      	mov	sp, r7
 800e790:	bd80      	pop	{r7, pc}
 800e792:	bf00      	nop
 800e794:	20000124 	.word	0x20000124
 800e798:	20000118 	.word	0x20000118
 800e79c:	20000128 	.word	0x20000128
 800e7a0:	20002bf4 	.word	0x20002bf4
 800e7a4:	0800e7fd 	.word	0x0800e7fd
 800e7a8:	0800e815 	.word	0x0800e815

0800e7ac <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 800e7ac:	b580      	push	{r7, lr}
 800e7ae:	b082      	sub	sp, #8
 800e7b0:	af00      	add	r7, sp, #0
 800e7b2:	4603      	mov	r3, r0
 800e7b4:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 800e7b6:	79fb      	ldrb	r3, [r7, #7]
 800e7b8:	2b00      	cmp	r3, #0
 800e7ba:	d10b      	bne.n	800e7d4 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 800e7bc:	4b0d      	ldr	r3, [pc, #52]	@ (800e7f4 <Cmd_SetStatus+0x48>)
 800e7be:	681b      	ldr	r3, [r3, #0]
 800e7c0:	2b00      	cmp	r3, #0
 800e7c2:	d003      	beq.n	800e7cc <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 800e7c4:	4b0b      	ldr	r3, [pc, #44]	@ (800e7f4 <Cmd_SetStatus+0x48>)
 800e7c6:	681b      	ldr	r3, [r3, #0]
 800e7c8:	2000      	movs	r0, #0
 800e7ca:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 800e7cc:	4b0a      	ldr	r3, [pc, #40]	@ (800e7f8 <Cmd_SetStatus+0x4c>)
 800e7ce:	2200      	movs	r2, #0
 800e7d0:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 800e7d2:	e00b      	b.n	800e7ec <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 800e7d4:	4b08      	ldr	r3, [pc, #32]	@ (800e7f8 <Cmd_SetStatus+0x4c>)
 800e7d6:	2201      	movs	r2, #1
 800e7d8:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 800e7da:	4b06      	ldr	r3, [pc, #24]	@ (800e7f4 <Cmd_SetStatus+0x48>)
 800e7dc:	681b      	ldr	r3, [r3, #0]
 800e7de:	2b00      	cmp	r3, #0
 800e7e0:	d004      	beq.n	800e7ec <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 800e7e2:	4b04      	ldr	r3, [pc, #16]	@ (800e7f4 <Cmd_SetStatus+0x48>)
 800e7e4:	681b      	ldr	r3, [r3, #0]
 800e7e6:	2001      	movs	r0, #1
 800e7e8:	4798      	blx	r3
  return;
 800e7ea:	bf00      	nop
 800e7ec:	bf00      	nop
}
 800e7ee:	3708      	adds	r7, #8
 800e7f0:	46bd      	mov	sp, r7
 800e7f2:	bd80      	pop	{r7, pc}
 800e7f4:	20002c14 	.word	0x20002c14
 800e7f8:	20000120 	.word	0x20000120

0800e7fc <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 800e7fc:	b580      	push	{r7, lr}
 800e7fe:	b082      	sub	sp, #8
 800e800:	af00      	add	r7, sp, #0
 800e802:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 800e804:	2000      	movs	r0, #0
 800e806:	f7f2 fc2b 	bl	8001060 <shci_cmd_resp_release>

  return;
 800e80a:	bf00      	nop
}
 800e80c:	3708      	adds	r7, #8
 800e80e:	46bd      	mov	sp, r7
 800e810:	bd80      	pop	{r7, pc}
	...

0800e814 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 800e814:	b580      	push	{r7, lr}
 800e816:	b082      	sub	sp, #8
 800e818:	af00      	add	r7, sp, #0
 800e81a:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 800e81c:	6879      	ldr	r1, [r7, #4]
 800e81e:	4805      	ldr	r0, [pc, #20]	@ (800e834 <TlUserEvtReceived+0x20>)
 800e820:	f000 fae6 	bl	800edf0 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800e824:	4803      	ldr	r0, [pc, #12]	@ (800e834 <TlUserEvtReceived+0x20>)
 800e826:	f7f2 fc0f 	bl	8001048 <shci_notify_asynch_evt>

  return;
 800e82a:	bf00      	nop
}
 800e82c:	3708      	adds	r7, #8
 800e82e:	46bd      	mov	sp, r7
 800e830:	bd80      	pop	{r7, pc}
 800e832:	bf00      	nop
 800e834:	20000118 	.word	0x20000118

0800e838 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 800e838:	b480      	push	{r7}
 800e83a:	b083      	sub	sp, #12
 800e83c:	af00      	add	r7, sp, #0
 800e83e:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	4a05      	ldr	r2, [pc, #20]	@ (800e858 <shci_register_io_bus+0x20>)
 800e844:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 800e846:	687b      	ldr	r3, [r7, #4]
 800e848:	4a04      	ldr	r2, [pc, #16]	@ (800e85c <shci_register_io_bus+0x24>)
 800e84a:	611a      	str	r2, [r3, #16]

  return;
 800e84c:	bf00      	nop
}
 800e84e:	370c      	adds	r7, #12
 800e850:	46bd      	mov	sp, r7
 800e852:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e856:	4770      	bx	lr
 800e858:	0800e9f5 	.word	0x0800e9f5
 800e85c:	0800ea49 	.word	0x0800ea49

0800e860 <TL_Enable>:

/******************************************************************************
 * GENERAL - refer to AN5289 for functions description.
 ******************************************************************************/
void TL_Enable( void )
{
 800e860:	b580      	push	{r7, lr}
 800e862:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 800e864:	f001 fab2 	bl	800fdcc <HW_IPCC_Enable>

  return;
 800e868:	bf00      	nop
}
 800e86a:	bd80      	pop	{r7, pc}

0800e86c <TL_Init>:


void TL_Init( void )
{
 800e86c:	b580      	push	{r7, lr}
 800e86e:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 800e870:	4b10      	ldr	r3, [pc, #64]	@ (800e8b4 <TL_Init+0x48>)
 800e872:	4a11      	ldr	r2, [pc, #68]	@ (800e8b8 <TL_Init+0x4c>)
 800e874:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 800e876:	4b0f      	ldr	r3, [pc, #60]	@ (800e8b4 <TL_Init+0x48>)
 800e878:	4a10      	ldr	r2, [pc, #64]	@ (800e8bc <TL_Init+0x50>)
 800e87a:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 800e87c:	4b0d      	ldr	r3, [pc, #52]	@ (800e8b4 <TL_Init+0x48>)
 800e87e:	4a10      	ldr	r2, [pc, #64]	@ (800e8c0 <TL_Init+0x54>)
 800e880:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 800e882:	4b0c      	ldr	r3, [pc, #48]	@ (800e8b4 <TL_Init+0x48>)
 800e884:	4a0f      	ldr	r2, [pc, #60]	@ (800e8c4 <TL_Init+0x58>)
 800e886:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 800e888:	4b0a      	ldr	r3, [pc, #40]	@ (800e8b4 <TL_Init+0x48>)
 800e88a:	4a0f      	ldr	r2, [pc, #60]	@ (800e8c8 <TL_Init+0x5c>)
 800e88c:	625a      	str	r2, [r3, #36]	@ 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 800e88e:	4b09      	ldr	r3, [pc, #36]	@ (800e8b4 <TL_Init+0x48>)
 800e890:	4a0e      	ldr	r2, [pc, #56]	@ (800e8cc <TL_Init+0x60>)
 800e892:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 800e894:	4b07      	ldr	r3, [pc, #28]	@ (800e8b4 <TL_Init+0x48>)
 800e896:	4a0e      	ldr	r2, [pc, #56]	@ (800e8d0 <TL_Init+0x64>)
 800e898:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 800e89a:	4b06      	ldr	r3, [pc, #24]	@ (800e8b4 <TL_Init+0x48>)
 800e89c:	4a0d      	ldr	r2, [pc, #52]	@ (800e8d4 <TL_Init+0x68>)
 800e89e:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 800e8a0:	4b04      	ldr	r3, [pc, #16]	@ (800e8b4 <TL_Init+0x48>)
 800e8a2:	4a0d      	ldr	r2, [pc, #52]	@ (800e8d8 <TL_Init+0x6c>)
 800e8a4:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 800e8a6:	4b03      	ldr	r3, [pc, #12]	@ (800e8b4 <TL_Init+0x48>)
 800e8a8:	4a0c      	ldr	r2, [pc, #48]	@ (800e8dc <TL_Init+0x70>)
 800e8aa:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 800e8ac:	f001 faa2 	bl	800fdf4 <HW_IPCC_Init>

  return;
 800e8b0:	bf00      	nop
}
 800e8b2:	bd80      	pop	{r7, pc}
 800e8b4:	20030000 	.word	0x20030000
 800e8b8:	20030028 	.word	0x20030028
 800e8bc:	20030048 	.word	0x20030048
 800e8c0:	20030058 	.word	0x20030058
 800e8c4:	20030068 	.word	0x20030068
 800e8c8:	20030070 	.word	0x20030070
 800e8cc:	20030078 	.word	0x20030078
 800e8d0:	20030080 	.word	0x20030080
 800e8d4:	2003009c 	.word	0x2003009c
 800e8d8:	200300a0 	.word	0x200300a0
 800e8dc:	200300ac 	.word	0x200300ac

0800e8e0 <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 800e8e0:	b580      	push	{r7, lr}
 800e8e2:	b084      	sub	sp, #16
 800e8e4:	af00      	add	r7, sp, #0
 800e8e6:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 800e8ec:	4811      	ldr	r0, [pc, #68]	@ (800e934 <TL_BLE_Init+0x54>)
 800e8ee:	f000 fa27 	bl	800ed40 <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 800e8f2:	4b11      	ldr	r3, [pc, #68]	@ (800e938 <TL_BLE_Init+0x58>)
 800e8f4:	685b      	ldr	r3, [r3, #4]
 800e8f6:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800e8f8:	68fb      	ldr	r3, [r7, #12]
 800e8fa:	689a      	ldr	r2, [r3, #8]
 800e8fc:	68bb      	ldr	r3, [r7, #8]
 800e8fe:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 800e900:	68fb      	ldr	r3, [r7, #12]
 800e902:	68da      	ldr	r2, [r3, #12]
 800e904:	68bb      	ldr	r3, [r7, #8]
 800e906:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 800e908:	68bb      	ldr	r3, [r7, #8]
 800e90a:	4a0c      	ldr	r2, [pc, #48]	@ (800e93c <TL_BLE_Init+0x5c>)
 800e90c:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 800e90e:	68bb      	ldr	r3, [r7, #8]
 800e910:	4a08      	ldr	r2, [pc, #32]	@ (800e934 <TL_BLE_Init+0x54>)
 800e912:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 800e914:	f001 fa84 	bl	800fe20 <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 800e918:	68fb      	ldr	r3, [r7, #12]
 800e91a:	681b      	ldr	r3, [r3, #0]
 800e91c:	4a08      	ldr	r2, [pc, #32]	@ (800e940 <TL_BLE_Init+0x60>)
 800e91e:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 800e920:	68fb      	ldr	r3, [r7, #12]
 800e922:	685b      	ldr	r3, [r3, #4]
 800e924:	4a07      	ldr	r2, [pc, #28]	@ (800e944 <TL_BLE_Init+0x64>)
 800e926:	6013      	str	r3, [r2, #0]

  return 0;
 800e928:	2300      	movs	r3, #0
}
 800e92a:	4618      	mov	r0, r3
 800e92c:	3710      	adds	r7, #16
 800e92e:	46bd      	mov	sp, r7
 800e930:	bd80      	pop	{r7, pc}
 800e932:	bf00      	nop
 800e934:	200300c8 	.word	0x200300c8
 800e938:	20030000 	.word	0x20030000
 800e93c:	20030a58 	.word	0x20030a58
 800e940:	20002c24 	.word	0x20002c24
 800e944:	20002c28 	.word	0x20002c28

0800e948 <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 800e948:	b580      	push	{r7, lr}
 800e94a:	b082      	sub	sp, #8
 800e94c:	af00      	add	r7, sp, #0
 800e94e:	6078      	str	r0, [r7, #4]
 800e950:	460b      	mov	r3, r1
 800e952:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 800e954:	4b09      	ldr	r3, [pc, #36]	@ (800e97c <TL_BLE_SendCmd+0x34>)
 800e956:	685b      	ldr	r3, [r3, #4]
 800e958:	681b      	ldr	r3, [r3, #0]
 800e95a:	2201      	movs	r2, #1
 800e95c:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 800e95e:	4b07      	ldr	r3, [pc, #28]	@ (800e97c <TL_BLE_SendCmd+0x34>)
 800e960:	685b      	ldr	r3, [r3, #4]
 800e962:	681b      	ldr	r3, [r3, #0]
 800e964:	4619      	mov	r1, r3
 800e966:	2001      	movs	r0, #1
 800e968:	f000 f96c 	bl	800ec44 <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 800e96c:	f001 fa62 	bl	800fe34 <HW_IPCC_BLE_SendCmd>

  return 0;
 800e970:	2300      	movs	r3, #0
}
 800e972:	4618      	mov	r0, r3
 800e974:	3708      	adds	r7, #8
 800e976:	46bd      	mov	sp, r7
 800e978:	bd80      	pop	{r7, pc}
 800e97a:	bf00      	nop
 800e97c:	20030000 	.word	0x20030000

0800e980 <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 800e980:	b580      	push	{r7, lr}
 800e982:	b082      	sub	sp, #8
 800e984:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 800e986:	e01c      	b.n	800e9c2 <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 800e988:	1d3b      	adds	r3, r7, #4
 800e98a:	4619      	mov	r1, r3
 800e98c:	4812      	ldr	r0, [pc, #72]	@ (800e9d8 <HW_IPCC_BLE_RxEvtNot+0x58>)
 800e98e:	f000 fa76 	bl	800ee7e <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	7a5b      	ldrb	r3, [r3, #9]
 800e996:	2b0f      	cmp	r3, #15
 800e998:	d003      	beq.n	800e9a2 <HW_IPCC_BLE_RxEvtNot+0x22>
 800e99a:	687b      	ldr	r3, [r7, #4]
 800e99c:	7a5b      	ldrb	r3, [r3, #9]
 800e99e:	2b0e      	cmp	r3, #14
 800e9a0:	d105      	bne.n	800e9ae <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	4619      	mov	r1, r3
 800e9a6:	2002      	movs	r0, #2
 800e9a8:	f000 f94c 	bl	800ec44 <OutputDbgTrace>
 800e9ac:	e004      	b.n	800e9b8 <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	4619      	mov	r1, r3
 800e9b2:	2003      	movs	r0, #3
 800e9b4:	f000 f946 	bl	800ec44 <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 800e9b8:	4b08      	ldr	r3, [pc, #32]	@ (800e9dc <HW_IPCC_BLE_RxEvtNot+0x5c>)
 800e9ba:	681b      	ldr	r3, [r3, #0]
 800e9bc:	687a      	ldr	r2, [r7, #4]
 800e9be:	4610      	mov	r0, r2
 800e9c0:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 800e9c2:	4805      	ldr	r0, [pc, #20]	@ (800e9d8 <HW_IPCC_BLE_RxEvtNot+0x58>)
 800e9c4:	f000 f9cc 	bl	800ed60 <LST_is_empty>
 800e9c8:	4603      	mov	r3, r0
 800e9ca:	2b00      	cmp	r3, #0
 800e9cc:	d0dc      	beq.n	800e988 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 800e9ce:	bf00      	nop
}
 800e9d0:	3708      	adds	r7, #8
 800e9d2:	46bd      	mov	sp, r7
 800e9d4:	bd80      	pop	{r7, pc}
 800e9d6:	bf00      	nop
 800e9d8:	200300c8 	.word	0x200300c8
 800e9dc:	20002c24 	.word	0x20002c24

0800e9e0 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 800e9e0:	b580      	push	{r7, lr}
 800e9e2:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 800e9e4:	4b02      	ldr	r3, [pc, #8]	@ (800e9f0 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 800e9e6:	681b      	ldr	r3, [r3, #0]
 800e9e8:	4798      	blx	r3

  return;
 800e9ea:	bf00      	nop
}
 800e9ec:	bd80      	pop	{r7, pc}
 800e9ee:	bf00      	nop
 800e9f0:	20002c28 	.word	0x20002c28

0800e9f4 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 800e9f4:	b580      	push	{r7, lr}
 800e9f6:	b084      	sub	sp, #16
 800e9f8:	af00      	add	r7, sp, #0
 800e9fa:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 800ea00:	480d      	ldr	r0, [pc, #52]	@ (800ea38 <TL_SYS_Init+0x44>)
 800ea02:	f000 f99d 	bl	800ed40 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 800ea06:	4b0d      	ldr	r3, [pc, #52]	@ (800ea3c <TL_SYS_Init+0x48>)
 800ea08:	68db      	ldr	r3, [r3, #12]
 800ea0a:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800ea0c:	68fb      	ldr	r3, [r7, #12]
 800ea0e:	689a      	ldr	r2, [r3, #8]
 800ea10:	68bb      	ldr	r3, [r7, #8]
 800ea12:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 800ea14:	68bb      	ldr	r3, [r7, #8]
 800ea16:	4a08      	ldr	r2, [pc, #32]	@ (800ea38 <TL_SYS_Init+0x44>)
 800ea18:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 800ea1a:	f001 fa2d 	bl	800fe78 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 800ea1e:	68fb      	ldr	r3, [r7, #12]
 800ea20:	681b      	ldr	r3, [r3, #0]
 800ea22:	4a07      	ldr	r2, [pc, #28]	@ (800ea40 <TL_SYS_Init+0x4c>)
 800ea24:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 800ea26:	68fb      	ldr	r3, [r7, #12]
 800ea28:	685b      	ldr	r3, [r3, #4]
 800ea2a:	4a06      	ldr	r2, [pc, #24]	@ (800ea44 <TL_SYS_Init+0x50>)
 800ea2c:	6013      	str	r3, [r2, #0]

  return 0;
 800ea2e:	2300      	movs	r3, #0
}
 800ea30:	4618      	mov	r0, r3
 800ea32:	3710      	adds	r7, #16
 800ea34:	46bd      	mov	sp, r7
 800ea36:	bd80      	pop	{r7, pc}
 800ea38:	200300d0 	.word	0x200300d0
 800ea3c:	20030000 	.word	0x20030000
 800ea40:	20002c2c 	.word	0x20002c2c
 800ea44:	20002c30 	.word	0x20002c30

0800ea48 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 800ea48:	b580      	push	{r7, lr}
 800ea4a:	b082      	sub	sp, #8
 800ea4c:	af00      	add	r7, sp, #0
 800ea4e:	6078      	str	r0, [r7, #4]
 800ea50:	460b      	mov	r3, r1
 800ea52:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 800ea54:	4b09      	ldr	r3, [pc, #36]	@ (800ea7c <TL_SYS_SendCmd+0x34>)
 800ea56:	68db      	ldr	r3, [r3, #12]
 800ea58:	681b      	ldr	r3, [r3, #0]
 800ea5a:	2210      	movs	r2, #16
 800ea5c:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 800ea5e:	4b07      	ldr	r3, [pc, #28]	@ (800ea7c <TL_SYS_SendCmd+0x34>)
 800ea60:	68db      	ldr	r3, [r3, #12]
 800ea62:	681b      	ldr	r3, [r3, #0]
 800ea64:	4619      	mov	r1, r3
 800ea66:	2004      	movs	r0, #4
 800ea68:	f000 f8ec 	bl	800ec44 <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 800ea6c:	f001 fa0e 	bl	800fe8c <HW_IPCC_SYS_SendCmd>

  return 0;
 800ea70:	2300      	movs	r3, #0
}
 800ea72:	4618      	mov	r0, r3
 800ea74:	3708      	adds	r7, #8
 800ea76:	46bd      	mov	sp, r7
 800ea78:	bd80      	pop	{r7, pc}
 800ea7a:	bf00      	nop
 800ea7c:	20030000 	.word	0x20030000

0800ea80 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 800ea80:	b580      	push	{r7, lr}
 800ea82:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800ea84:	4b07      	ldr	r3, [pc, #28]	@ (800eaa4 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800ea86:	68db      	ldr	r3, [r3, #12]
 800ea88:	681b      	ldr	r3, [r3, #0]
 800ea8a:	4619      	mov	r1, r3
 800ea8c:	2005      	movs	r0, #5
 800ea8e:	f000 f8d9 	bl	800ec44 <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800ea92:	4b05      	ldr	r3, [pc, #20]	@ (800eaa8 <HW_IPCC_SYS_CmdEvtNot+0x28>)
 800ea94:	681b      	ldr	r3, [r3, #0]
 800ea96:	4a03      	ldr	r2, [pc, #12]	@ (800eaa4 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800ea98:	68d2      	ldr	r2, [r2, #12]
 800ea9a:	6812      	ldr	r2, [r2, #0]
 800ea9c:	4610      	mov	r0, r2
 800ea9e:	4798      	blx	r3

  return;
 800eaa0:	bf00      	nop
}
 800eaa2:	bd80      	pop	{r7, pc}
 800eaa4:	20030000 	.word	0x20030000
 800eaa8:	20002c2c 	.word	0x20002c2c

0800eaac <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 800eaac:	b580      	push	{r7, lr}
 800eaae:	b082      	sub	sp, #8
 800eab0:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800eab2:	e00e      	b.n	800ead2 <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 800eab4:	1d3b      	adds	r3, r7, #4
 800eab6:	4619      	mov	r1, r3
 800eab8:	480b      	ldr	r0, [pc, #44]	@ (800eae8 <HW_IPCC_SYS_EvtNot+0x3c>)
 800eaba:	f000 f9e0 	bl	800ee7e <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	4619      	mov	r1, r3
 800eac2:	2006      	movs	r0, #6
 800eac4:	f000 f8be 	bl	800ec44 <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 800eac8:	4b08      	ldr	r3, [pc, #32]	@ (800eaec <HW_IPCC_SYS_EvtNot+0x40>)
 800eaca:	681b      	ldr	r3, [r3, #0]
 800eacc:	687a      	ldr	r2, [r7, #4]
 800eace:	4610      	mov	r0, r2
 800ead0:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800ead2:	4805      	ldr	r0, [pc, #20]	@ (800eae8 <HW_IPCC_SYS_EvtNot+0x3c>)
 800ead4:	f000 f944 	bl	800ed60 <LST_is_empty>
 800ead8:	4603      	mov	r3, r0
 800eada:	2b00      	cmp	r3, #0
 800eadc:	d0ea      	beq.n	800eab4 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 800eade:	bf00      	nop
}
 800eae0:	3708      	adds	r7, #8
 800eae2:	46bd      	mov	sp, r7
 800eae4:	bd80      	pop	{r7, pc}
 800eae6:	bf00      	nop
 800eae8:	200300d0 	.word	0x200300d0
 800eaec:	20002c30 	.word	0x20002c30

0800eaf0 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 800eaf0:	b580      	push	{r7, lr}
 800eaf2:	b082      	sub	sp, #8
 800eaf4:	af00      	add	r7, sp, #0
 800eaf6:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 800eaf8:	4817      	ldr	r0, [pc, #92]	@ (800eb58 <TL_MM_Init+0x68>)
 800eafa:	f000 f921 	bl	800ed40 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 800eafe:	4817      	ldr	r0, [pc, #92]	@ (800eb5c <TL_MM_Init+0x6c>)
 800eb00:	f000 f91e 	bl	800ed40 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 800eb04:	4b16      	ldr	r3, [pc, #88]	@ (800eb60 <TL_MM_Init+0x70>)
 800eb06:	691b      	ldr	r3, [r3, #16]
 800eb08:	4a16      	ldr	r2, [pc, #88]	@ (800eb64 <TL_MM_Init+0x74>)
 800eb0a:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 800eb0c:	4b15      	ldr	r3, [pc, #84]	@ (800eb64 <TL_MM_Init+0x74>)
 800eb0e:	681b      	ldr	r3, [r3, #0]
 800eb10:	687a      	ldr	r2, [r7, #4]
 800eb12:	6892      	ldr	r2, [r2, #8]
 800eb14:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 800eb16:	4b13      	ldr	r3, [pc, #76]	@ (800eb64 <TL_MM_Init+0x74>)
 800eb18:	681b      	ldr	r3, [r3, #0]
 800eb1a:	687a      	ldr	r2, [r7, #4]
 800eb1c:	68d2      	ldr	r2, [r2, #12]
 800eb1e:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 800eb20:	4b10      	ldr	r3, [pc, #64]	@ (800eb64 <TL_MM_Init+0x74>)
 800eb22:	681b      	ldr	r3, [r3, #0]
 800eb24:	4a0c      	ldr	r2, [pc, #48]	@ (800eb58 <TL_MM_Init+0x68>)
 800eb26:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 800eb28:	4b0e      	ldr	r3, [pc, #56]	@ (800eb64 <TL_MM_Init+0x74>)
 800eb2a:	681b      	ldr	r3, [r3, #0]
 800eb2c:	687a      	ldr	r2, [r7, #4]
 800eb2e:	6812      	ldr	r2, [r2, #0]
 800eb30:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 800eb32:	4b0c      	ldr	r3, [pc, #48]	@ (800eb64 <TL_MM_Init+0x74>)
 800eb34:	681b      	ldr	r3, [r3, #0]
 800eb36:	687a      	ldr	r2, [r7, #4]
 800eb38:	6852      	ldr	r2, [r2, #4]
 800eb3a:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 800eb3c:	4b09      	ldr	r3, [pc, #36]	@ (800eb64 <TL_MM_Init+0x74>)
 800eb3e:	681b      	ldr	r3, [r3, #0]
 800eb40:	687a      	ldr	r2, [r7, #4]
 800eb42:	6912      	ldr	r2, [r2, #16]
 800eb44:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 800eb46:	4b07      	ldr	r3, [pc, #28]	@ (800eb64 <TL_MM_Init+0x74>)
 800eb48:	681b      	ldr	r3, [r3, #0]
 800eb4a:	687a      	ldr	r2, [r7, #4]
 800eb4c:	6952      	ldr	r2, [r2, #20]
 800eb4e:	619a      	str	r2, [r3, #24]

  return;
 800eb50:	bf00      	nop
}
 800eb52:	3708      	adds	r7, #8
 800eb54:	46bd      	mov	sp, r7
 800eb56:	bd80      	pop	{r7, pc}
 800eb58:	200300b8 	.word	0x200300b8
 800eb5c:	20002c1c 	.word	0x20002c1c
 800eb60:	20030000 	.word	0x20030000
 800eb64:	20002c34 	.word	0x20002c34

0800eb68 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 800eb68:	b580      	push	{r7, lr}
 800eb6a:	b082      	sub	sp, #8
 800eb6c:	af00      	add	r7, sp, #0
 800eb6e:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 800eb70:	6879      	ldr	r1, [r7, #4]
 800eb72:	4807      	ldr	r0, [pc, #28]	@ (800eb90 <TL_MM_EvtDone+0x28>)
 800eb74:	f000 f93c 	bl	800edf0 <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 800eb78:	6879      	ldr	r1, [r7, #4]
 800eb7a:	2000      	movs	r0, #0
 800eb7c:	f000 f862 	bl	800ec44 <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 800eb80:	4804      	ldr	r0, [pc, #16]	@ (800eb94 <TL_MM_EvtDone+0x2c>)
 800eb82:	f001 f9a9 	bl	800fed8 <HW_IPCC_MM_SendFreeBuf>

  return;
 800eb86:	bf00      	nop
}
 800eb88:	3708      	adds	r7, #8
 800eb8a:	46bd      	mov	sp, r7
 800eb8c:	bd80      	pop	{r7, pc}
 800eb8e:	bf00      	nop
 800eb90:	20002c1c 	.word	0x20002c1c
 800eb94:	0800eb99 	.word	0x0800eb99

0800eb98 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 800eb98:	b580      	push	{r7, lr}
 800eb9a:	b082      	sub	sp, #8
 800eb9c:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800eb9e:	e00c      	b.n	800ebba <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 800eba0:	1d3b      	adds	r3, r7, #4
 800eba2:	4619      	mov	r1, r3
 800eba4:	480a      	ldr	r0, [pc, #40]	@ (800ebd0 <SendFreeBuf+0x38>)
 800eba6:	f000 f96a 	bl	800ee7e <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 800ebaa:	4b0a      	ldr	r3, [pc, #40]	@ (800ebd4 <SendFreeBuf+0x3c>)
 800ebac:	691b      	ldr	r3, [r3, #16]
 800ebae:	691b      	ldr	r3, [r3, #16]
 800ebb0:	687a      	ldr	r2, [r7, #4]
 800ebb2:	4611      	mov	r1, r2
 800ebb4:	4618      	mov	r0, r3
 800ebb6:	f000 f91b 	bl	800edf0 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800ebba:	4805      	ldr	r0, [pc, #20]	@ (800ebd0 <SendFreeBuf+0x38>)
 800ebbc:	f000 f8d0 	bl	800ed60 <LST_is_empty>
 800ebc0:	4603      	mov	r3, r0
 800ebc2:	2b00      	cmp	r3, #0
 800ebc4:	d0ec      	beq.n	800eba0 <SendFreeBuf+0x8>
  }

  return;
 800ebc6:	bf00      	nop
}
 800ebc8:	3708      	adds	r7, #8
 800ebca:	46bd      	mov	sp, r7
 800ebcc:	bd80      	pop	{r7, pc}
 800ebce:	bf00      	nop
 800ebd0:	20002c1c 	.word	0x20002c1c
 800ebd4:	20030000 	.word	0x20030000

0800ebd8 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 800ebd8:	b580      	push	{r7, lr}
 800ebda:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 800ebdc:	4805      	ldr	r0, [pc, #20]	@ (800ebf4 <TL_TRACES_Init+0x1c>)
 800ebde:	f000 f8af 	bl	800ed40 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 800ebe2:	4b05      	ldr	r3, [pc, #20]	@ (800ebf8 <TL_TRACES_Init+0x20>)
 800ebe4:	695b      	ldr	r3, [r3, #20]
 800ebe6:	4a03      	ldr	r2, [pc, #12]	@ (800ebf4 <TL_TRACES_Init+0x1c>)
 800ebe8:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 800ebea:	f001 f9ab 	bl	800ff44 <HW_IPCC_TRACES_Init>

  return;
 800ebee:	bf00      	nop
}
 800ebf0:	bd80      	pop	{r7, pc}
 800ebf2:	bf00      	nop
 800ebf4:	200300c0 	.word	0x200300c0
 800ebf8:	20030000 	.word	0x20030000

0800ebfc <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 800ebfc:	b580      	push	{r7, lr}
 800ebfe:	b082      	sub	sp, #8
 800ec00:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800ec02:	e008      	b.n	800ec16 <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 800ec04:	1d3b      	adds	r3, r7, #4
 800ec06:	4619      	mov	r1, r3
 800ec08:	4808      	ldr	r0, [pc, #32]	@ (800ec2c <HW_IPCC_TRACES_EvtNot+0x30>)
 800ec0a:	f000 f938 	bl	800ee7e <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 800ec0e:	687b      	ldr	r3, [r7, #4]
 800ec10:	4618      	mov	r0, r3
 800ec12:	f000 f80d 	bl	800ec30 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800ec16:	4805      	ldr	r0, [pc, #20]	@ (800ec2c <HW_IPCC_TRACES_EvtNot+0x30>)
 800ec18:	f000 f8a2 	bl	800ed60 <LST_is_empty>
 800ec1c:	4603      	mov	r3, r0
 800ec1e:	2b00      	cmp	r3, #0
 800ec20:	d0f0      	beq.n	800ec04 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 800ec22:	bf00      	nop
}
 800ec24:	3708      	adds	r7, #8
 800ec26:	46bd      	mov	sp, r7
 800ec28:	bd80      	pop	{r7, pc}
 800ec2a:	bf00      	nop
 800ec2c:	200300c0 	.word	0x200300c0

0800ec30 <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 800ec30:	b480      	push	{r7}
 800ec32:	b083      	sub	sp, #12
 800ec34:	af00      	add	r7, sp, #0
 800ec36:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 800ec38:	bf00      	nop
 800ec3a:	370c      	adds	r7, #12
 800ec3c:	46bd      	mov	sp, r7
 800ec3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec42:	4770      	bx	lr

0800ec44 <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 800ec44:	b480      	push	{r7}
 800ec46:	b085      	sub	sp, #20
 800ec48:	af00      	add	r7, sp, #0
 800ec4a:	4603      	mov	r3, r0
 800ec4c:	6039      	str	r1, [r7, #0]
 800ec4e:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 800ec50:	79fb      	ldrb	r3, [r7, #7]
 800ec52:	2b06      	cmp	r3, #6
 800ec54:	d845      	bhi.n	800ece2 <OutputDbgTrace+0x9e>
 800ec56:	a201      	add	r2, pc, #4	@ (adr r2, 800ec5c <OutputDbgTrace+0x18>)
 800ec58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec5c:	0800ec79 	.word	0x0800ec79
 800ec60:	0800ec9d 	.word	0x0800ec9d
 800ec64:	0800eca3 	.word	0x0800eca3
 800ec68:	0800ecb7 	.word	0x0800ecb7
 800ec6c:	0800ecc3 	.word	0x0800ecc3
 800ec70:	0800ecc9 	.word	0x0800ecc9
 800ec74:	0800ecd7 	.word	0x0800ecd7
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800ec78:	683b      	ldr	r3, [r7, #0]
 800ec7a:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800ec7c:	68fb      	ldr	r3, [r7, #12]
 800ec7e:	7a5b      	ldrb	r3, [r3, #9]
 800ec80:	2bff      	cmp	r3, #255	@ 0xff
 800ec82:	d005      	beq.n	800ec90 <OutputDbgTrace+0x4c>
 800ec84:	2bff      	cmp	r3, #255	@ 0xff
 800ec86:	dc05      	bgt.n	800ec94 <OutputDbgTrace+0x50>
 800ec88:	2b0e      	cmp	r3, #14
 800ec8a:	d005      	beq.n	800ec98 <OutputDbgTrace+0x54>
 800ec8c:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 800ec8e:	e001      	b.n	800ec94 <OutputDbgTrace+0x50>
          break;
 800ec90:	bf00      	nop
 800ec92:	e027      	b.n	800ece4 <OutputDbgTrace+0xa0>
          break;
 800ec94:	bf00      	nop
 800ec96:	e025      	b.n	800ece4 <OutputDbgTrace+0xa0>
          break;
 800ec98:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 800ec9a:	e023      	b.n	800ece4 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800ec9c:	683b      	ldr	r3, [r7, #0]
 800ec9e:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800eca0:	e020      	b.n	800ece4 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800eca2:	683b      	ldr	r3, [r7, #0]
 800eca4:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800eca6:	68fb      	ldr	r3, [r7, #12]
 800eca8:	7a5b      	ldrb	r3, [r3, #9]
 800ecaa:	2b0e      	cmp	r3, #14
 800ecac:	d001      	beq.n	800ecb2 <OutputDbgTrace+0x6e>
 800ecae:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800ecb0:	e000      	b.n	800ecb4 <OutputDbgTrace+0x70>
          break;
 800ecb2:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800ecb4:	e016      	b.n	800ece4 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800ecb6:	683b      	ldr	r3, [r7, #0]
 800ecb8:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800ecba:	68fb      	ldr	r3, [r7, #12]
 800ecbc:	7a5b      	ldrb	r3, [r3, #9]
 800ecbe:	2bff      	cmp	r3, #255	@ 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800ecc0:	e010      	b.n	800ece4 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800ecc2:	683b      	ldr	r3, [r7, #0]
 800ecc4:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800ecc6:	e00d      	b.n	800ece4 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800ecc8:	683b      	ldr	r3, [r7, #0]
 800ecca:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800eccc:	68fb      	ldr	r3, [r7, #12]
 800ecce:	7a5b      	ldrb	r3, [r3, #9]
 800ecd0:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800ecd2:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800ecd4:	e006      	b.n	800ece4 <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800ecd6:	683b      	ldr	r3, [r7, #0]
 800ecd8:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800ecda:	68fb      	ldr	r3, [r7, #12]
 800ecdc:	7a5b      	ldrb	r3, [r3, #9]
 800ecde:	2bff      	cmp	r3, #255	@ 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800ece0:	e000      	b.n	800ece4 <OutputDbgTrace+0xa0>

    default:
      break;
 800ece2:	bf00      	nop
  }

  return;
 800ece4:	bf00      	nop
}
 800ece6:	3714      	adds	r7, #20
 800ece8:	46bd      	mov	sp, r7
 800ecea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecee:	4770      	bx	lr

0800ecf0 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 800ecf0:	b480      	push	{r7}
 800ecf2:	b085      	sub	sp, #20
 800ecf4:	af00      	add	r7, sp, #0
 800ecf6:	4603      	mov	r3, r0
 800ecf8:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 800ecfa:	4b0f      	ldr	r3, [pc, #60]	@ (800ed38 <OTP_Read+0x48>)
 800ecfc:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800ecfe:	e002      	b.n	800ed06 <OTP_Read+0x16>
  {
    p_id -= 8 ;
 800ed00:	68fb      	ldr	r3, [r7, #12]
 800ed02:	3b08      	subs	r3, #8
 800ed04:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800ed06:	68fb      	ldr	r3, [r7, #12]
 800ed08:	3307      	adds	r3, #7
 800ed0a:	781b      	ldrb	r3, [r3, #0]
 800ed0c:	79fa      	ldrb	r2, [r7, #7]
 800ed0e:	429a      	cmp	r2, r3
 800ed10:	d003      	beq.n	800ed1a <OTP_Read+0x2a>
 800ed12:	68fb      	ldr	r3, [r7, #12]
 800ed14:	4a09      	ldr	r2, [pc, #36]	@ (800ed3c <OTP_Read+0x4c>)
 800ed16:	4293      	cmp	r3, r2
 800ed18:	d1f2      	bne.n	800ed00 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 800ed1a:	68fb      	ldr	r3, [r7, #12]
 800ed1c:	3307      	adds	r3, #7
 800ed1e:	781b      	ldrb	r3, [r3, #0]
 800ed20:	79fa      	ldrb	r2, [r7, #7]
 800ed22:	429a      	cmp	r2, r3
 800ed24:	d001      	beq.n	800ed2a <OTP_Read+0x3a>
  {
    p_id = 0 ;
 800ed26:	2300      	movs	r3, #0
 800ed28:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 800ed2a:	68fb      	ldr	r3, [r7, #12]
}
 800ed2c:	4618      	mov	r0, r3
 800ed2e:	3714      	adds	r7, #20
 800ed30:	46bd      	mov	sp, r7
 800ed32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed36:	4770      	bx	lr
 800ed38:	1fff73f8 	.word	0x1fff73f8
 800ed3c:	1fff7000 	.word	0x1fff7000

0800ed40 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 800ed40:	b480      	push	{r7}
 800ed42:	b083      	sub	sp, #12
 800ed44:	af00      	add	r7, sp, #0
 800ed46:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	687a      	ldr	r2, [r7, #4]
 800ed4c:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 800ed4e:	687b      	ldr	r3, [r7, #4]
 800ed50:	687a      	ldr	r2, [r7, #4]
 800ed52:	605a      	str	r2, [r3, #4]
}
 800ed54:	bf00      	nop
 800ed56:	370c      	adds	r7, #12
 800ed58:	46bd      	mov	sp, r7
 800ed5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed5e:	4770      	bx	lr

0800ed60 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 800ed60:	b480      	push	{r7}
 800ed62:	b087      	sub	sp, #28
 800ed64:	af00      	add	r7, sp, #0
 800ed66:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ed68:	f3ef 8310 	mrs	r3, PRIMASK
 800ed6c:	60fb      	str	r3, [r7, #12]
  return(result);
 800ed6e:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800ed70:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800ed72:	b672      	cpsid	i
}
 800ed74:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 800ed76:	687b      	ldr	r3, [r7, #4]
 800ed78:	681b      	ldr	r3, [r3, #0]
 800ed7a:	687a      	ldr	r2, [r7, #4]
 800ed7c:	429a      	cmp	r2, r3
 800ed7e:	d102      	bne.n	800ed86 <LST_is_empty+0x26>
  {
    return_value = TRUE;
 800ed80:	2301      	movs	r3, #1
 800ed82:	75fb      	strb	r3, [r7, #23]
 800ed84:	e001      	b.n	800ed8a <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 800ed86:	2300      	movs	r3, #0
 800ed88:	75fb      	strb	r3, [r7, #23]
 800ed8a:	693b      	ldr	r3, [r7, #16]
 800ed8c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ed8e:	68bb      	ldr	r3, [r7, #8]
 800ed90:	f383 8810 	msr	PRIMASK, r3
}
 800ed94:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 800ed96:	7dfb      	ldrb	r3, [r7, #23]
}
 800ed98:	4618      	mov	r0, r3
 800ed9a:	371c      	adds	r7, #28
 800ed9c:	46bd      	mov	sp, r7
 800ed9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eda2:	4770      	bx	lr

0800eda4 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 800eda4:	b480      	push	{r7}
 800eda6:	b087      	sub	sp, #28
 800eda8:	af00      	add	r7, sp, #0
 800edaa:	6078      	str	r0, [r7, #4]
 800edac:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800edae:	f3ef 8310 	mrs	r3, PRIMASK
 800edb2:	60fb      	str	r3, [r7, #12]
  return(result);
 800edb4:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800edb6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800edb8:	b672      	cpsid	i
}
 800edba:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 800edbc:	687b      	ldr	r3, [r7, #4]
 800edbe:	681a      	ldr	r2, [r3, #0]
 800edc0:	683b      	ldr	r3, [r7, #0]
 800edc2:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 800edc4:	683b      	ldr	r3, [r7, #0]
 800edc6:	687a      	ldr	r2, [r7, #4]
 800edc8:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 800edca:	687b      	ldr	r3, [r7, #4]
 800edcc:	683a      	ldr	r2, [r7, #0]
 800edce:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 800edd0:	683b      	ldr	r3, [r7, #0]
 800edd2:	681b      	ldr	r3, [r3, #0]
 800edd4:	683a      	ldr	r2, [r7, #0]
 800edd6:	605a      	str	r2, [r3, #4]
 800edd8:	697b      	ldr	r3, [r7, #20]
 800edda:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800eddc:	693b      	ldr	r3, [r7, #16]
 800edde:	f383 8810 	msr	PRIMASK, r3
}
 800ede2:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800ede4:	bf00      	nop
 800ede6:	371c      	adds	r7, #28
 800ede8:	46bd      	mov	sp, r7
 800edea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edee:	4770      	bx	lr

0800edf0 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 800edf0:	b480      	push	{r7}
 800edf2:	b087      	sub	sp, #28
 800edf4:	af00      	add	r7, sp, #0
 800edf6:	6078      	str	r0, [r7, #4]
 800edf8:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800edfa:	f3ef 8310 	mrs	r3, PRIMASK
 800edfe:	60fb      	str	r3, [r7, #12]
  return(result);
 800ee00:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800ee02:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800ee04:	b672      	cpsid	i
}
 800ee06:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 800ee08:	683b      	ldr	r3, [r7, #0]
 800ee0a:	687a      	ldr	r2, [r7, #4]
 800ee0c:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	685a      	ldr	r2, [r3, #4]
 800ee12:	683b      	ldr	r3, [r7, #0]
 800ee14:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 800ee16:	687b      	ldr	r3, [r7, #4]
 800ee18:	683a      	ldr	r2, [r7, #0]
 800ee1a:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 800ee1c:	683b      	ldr	r3, [r7, #0]
 800ee1e:	685b      	ldr	r3, [r3, #4]
 800ee20:	683a      	ldr	r2, [r7, #0]
 800ee22:	601a      	str	r2, [r3, #0]
 800ee24:	697b      	ldr	r3, [r7, #20]
 800ee26:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ee28:	693b      	ldr	r3, [r7, #16]
 800ee2a:	f383 8810 	msr	PRIMASK, r3
}
 800ee2e:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800ee30:	bf00      	nop
 800ee32:	371c      	adds	r7, #28
 800ee34:	46bd      	mov	sp, r7
 800ee36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee3a:	4770      	bx	lr

0800ee3c <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 800ee3c:	b480      	push	{r7}
 800ee3e:	b087      	sub	sp, #28
 800ee40:	af00      	add	r7, sp, #0
 800ee42:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ee44:	f3ef 8310 	mrs	r3, PRIMASK
 800ee48:	60fb      	str	r3, [r7, #12]
  return(result);
 800ee4a:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800ee4c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800ee4e:	b672      	cpsid	i
}
 800ee50:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 800ee52:	687b      	ldr	r3, [r7, #4]
 800ee54:	685b      	ldr	r3, [r3, #4]
 800ee56:	687a      	ldr	r2, [r7, #4]
 800ee58:	6812      	ldr	r2, [r2, #0]
 800ee5a:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	681b      	ldr	r3, [r3, #0]
 800ee60:	687a      	ldr	r2, [r7, #4]
 800ee62:	6852      	ldr	r2, [r2, #4]
 800ee64:	605a      	str	r2, [r3, #4]
 800ee66:	697b      	ldr	r3, [r7, #20]
 800ee68:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ee6a:	693b      	ldr	r3, [r7, #16]
 800ee6c:	f383 8810 	msr	PRIMASK, r3
}
 800ee70:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800ee72:	bf00      	nop
 800ee74:	371c      	adds	r7, #28
 800ee76:	46bd      	mov	sp, r7
 800ee78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee7c:	4770      	bx	lr

0800ee7e <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 800ee7e:	b580      	push	{r7, lr}
 800ee80:	b086      	sub	sp, #24
 800ee82:	af00      	add	r7, sp, #0
 800ee84:	6078      	str	r0, [r7, #4]
 800ee86:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ee88:	f3ef 8310 	mrs	r3, PRIMASK
 800ee8c:	60fb      	str	r3, [r7, #12]
  return(result);
 800ee8e:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800ee90:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800ee92:	b672      	cpsid	i
}
 800ee94:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 800ee96:	687b      	ldr	r3, [r7, #4]
 800ee98:	681a      	ldr	r2, [r3, #0]
 800ee9a:	683b      	ldr	r3, [r7, #0]
 800ee9c:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 800ee9e:	687b      	ldr	r3, [r7, #4]
 800eea0:	681b      	ldr	r3, [r3, #0]
 800eea2:	4618      	mov	r0, r3
 800eea4:	f7ff ffca 	bl	800ee3c <LST_remove_node>
 800eea8:	697b      	ldr	r3, [r7, #20]
 800eeaa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800eeac:	693b      	ldr	r3, [r7, #16]
 800eeae:	f383 8810 	msr	PRIMASK, r3
}
 800eeb2:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800eeb4:	bf00      	nop
 800eeb6:	3718      	adds	r7, #24
 800eeb8:	46bd      	mov	sp, r7
 800eeba:	bd80      	pop	{r7, pc}

0800eebc <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 800eebc:	b480      	push	{r7}
 800eebe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 800eec0:	4b03      	ldr	r3, [pc, #12]	@ (800eed0 <LL_FLASH_GetUDN+0x14>)
 800eec2:	681b      	ldr	r3, [r3, #0]
}
 800eec4:	4618      	mov	r0, r3
 800eec6:	46bd      	mov	sp, r7
 800eec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eecc:	4770      	bx	lr
 800eece:	bf00      	nop
 800eed0:	1fff7580 	.word	0x1fff7580

0800eed4 <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 for STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 800eed4:	b480      	push	{r7}
 800eed6:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 800eed8:	4b03      	ldr	r3, [pc, #12]	@ (800eee8 <LL_FLASH_GetDeviceID+0x14>)
 800eeda:	681b      	ldr	r3, [r3, #0]
 800eedc:	b2db      	uxtb	r3, r3
}
 800eede:	4618      	mov	r0, r3
 800eee0:	46bd      	mov	sp, r7
 800eee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eee6:	4770      	bx	lr
 800eee8:	1fff7584 	.word	0x1fff7584

0800eeec <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 800eeec:	b480      	push	{r7}
 800eeee:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 800eef0:	4b03      	ldr	r3, [pc, #12]	@ (800ef00 <LL_FLASH_GetSTCompanyID+0x14>)
 800eef2:	681b      	ldr	r3, [r3, #0]
 800eef4:	0a1b      	lsrs	r3, r3, #8
}
 800eef6:	4618      	mov	r0, r3
 800eef8:	46bd      	mov	sp, r7
 800eefa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eefe:	4770      	bx	lr
 800ef00:	1fff7584 	.word	0x1fff7584

0800ef04 <APP_BLE_Init>:

/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init(void)
{
 800ef04:	b5b0      	push	{r4, r5, r7, lr}
 800ef06:	b090      	sub	sp, #64	@ 0x40
 800ef08:	af00      	add	r7, sp, #0
  SHCI_CmdStatus_t status;
#if (RADIO_ACTIVITY_EVENT != 0)
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800ef0a:	2392      	movs	r3, #146	@ 0x92
 800ef0c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#endif /* RADIO_ACTIVITY_EVENT != 0 */
  /* USER CODE BEGIN APP_BLE_Init_1 */

  UTIL_SEQ_RegTask( 1<<CFG_TASK_MY_TASK_BLE, UTIL_SEQ_RFU, myTask_BLE);
 800ef10:	4a2e      	ldr	r2, [pc, #184]	@ (800efcc <APP_BLE_Init+0xc8>)
 800ef12:	2100      	movs	r1, #0
 800ef14:	2004      	movs	r0, #4
 800ef16:	f001 f969 	bl	80101ec <UTIL_SEQ_RegTask>
  UTIL_SEQ_SetTask(1 << CFG_TASK_MY_TASK_BLE, CFG_SCH_PRIO_0);
 800ef1a:	2100      	movs	r1, #0
 800ef1c:	2004      	movs	r0, #4
 800ef1e:	f001 f987 	bl	8010230 <UTIL_SEQ_SetTask>

  UTIL_SEQ_RegTask( 1<<CFG_TASK_MY_TASK_IMU, UTIL_SEQ_RFU, myTask_IMU);
 800ef22:	4a2b      	ldr	r2, [pc, #172]	@ (800efd0 <APP_BLE_Init+0xcc>)
 800ef24:	2100      	movs	r1, #0
 800ef26:	2008      	movs	r0, #8
 800ef28:	f001 f960 	bl	80101ec <UTIL_SEQ_RegTask>
  UTIL_SEQ_SetTask(1 << CFG_TASK_MY_TASK_IMU, CFG_SCH_PRIO_0);
 800ef2c:	2100      	movs	r1, #0
 800ef2e:	2008      	movs	r0, #8
 800ef30:	f001 f97e 	bl	8010230 <UTIL_SEQ_SetTask>

  /* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 800ef34:	4b27      	ldr	r3, [pc, #156]	@ (800efd4 <APP_BLE_Init+0xd0>)
 800ef36:	1d3c      	adds	r4, r7, #4
 800ef38:	461d      	mov	r5, r3
 800ef3a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ef3c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ef3e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ef40:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ef42:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ef44:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ef46:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800ef4a:	c403      	stmia	r4!, {r0, r1}
 800ef4c:	8022      	strh	r2, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init();
 800ef4e:	f000 f917 	bl	800f180 <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 800ef52:	2101      	movs	r1, #1
 800ef54:	2002      	movs	r0, #2
 800ef56:	f001 f81d 	bl	800ff94 <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 800ef5a:	4a1f      	ldr	r2, [pc, #124]	@ (800efd8 <APP_BLE_Init+0xd4>)
 800ef5c:	2100      	movs	r1, #0
 800ef5e:	2002      	movs	r0, #2
 800ef60:	f001 f944 	bl	80101ec <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  status = SHCI_C2_BLE_Init(&ble_init_cmd_packet);
 800ef64:	1d3b      	adds	r3, r7, #4
 800ef66:	4618      	mov	r0, r3
 800ef68:	f7ff f8b4 	bl	800e0d4 <SHCI_C2_BLE_Init>
 800ef6c:	4603      	mov	r3, r0
 800ef6e:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  if (status != SHCI_Success)
 800ef72:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800ef76:	2b00      	cmp	r3, #0
 800ef78:	d001      	beq.n	800ef7e <APP_BLE_Init+0x7a>
  {
    APP_DBG_MSG("  Fail   : SHCI_C2_BLE_Init command, result: 0x%02x\n\r", status);
    /* if you are here, maybe CPU2 doesn't contain STM32WB_Copro_Wireless_Binaries, see Release_Notes.html */
    Error_Handler();
 800ef7a:	f7f6 feb7 	bl	8005cec <Error_Handler>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 800ef7e:	f000 f915 	bl	800f1ac <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 800ef82:	f7ff f801 	bl	800df88 <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800ef86:	4b15      	ldr	r3, [pc, #84]	@ (800efdc <APP_BLE_Init+0xd8>)
 800ef88:	2200      	movs	r2, #0
 800ef8a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 800ef8e:	4b13      	ldr	r3, [pc, #76]	@ (800efdc <APP_BLE_Init+0xd8>)
 800ef90:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800ef94:	82da      	strh	r2, [r3, #22]

  /**
   * From here, all initialization are BLE application specific
   */

  UTIL_SEQ_RegTask(1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 800ef96:	4a12      	ldr	r2, [pc, #72]	@ (800efe0 <APP_BLE_Init+0xdc>)
 800ef98:	2100      	movs	r1, #0
 800ef9a:	2001      	movs	r0, #1
 800ef9c:	f001 f926 	bl	80101ec <UTIL_SEQ_RegTask>

  /**
   * Initialization of ADV - Ad Manufacturer Element - Support OTA Bit Mask
   */
#if (RADIO_ACTIVITY_EVENT != 0)
  ret = aci_hal_set_radio_activity_mask(0x0006);
 800efa0:	2006      	movs	r0, #6
 800efa2:	f7fe fe65 	bl	800dc70 <aci_hal_set_radio_activity_mask>
 800efa6:	4603      	mov	r3, r0
 800efa8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#endif /* L2CAP_REQUEST_NEW_CONN_PARAM != 0 */

  /**
   * Initialize Custom Template Application
   */
  Custom_APP_Init();
 800efac:	f000 fbdc 	bl	800f768 <Custom_APP_Init>
  /* USER CODE END APP_BLE_Init_3 */

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 800efb0:	4b0a      	ldr	r3, [pc, #40]	@ (800efdc <APP_BLE_Init+0xd8>)
 800efb2:	2200      	movs	r2, #0
 800efb4:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 800efb6:	4b09      	ldr	r3, [pc, #36]	@ (800efdc <APP_BLE_Init+0xd8>)
 800efb8:	2200      	movs	r2, #0
 800efba:	761a      	strb	r2, [r3, #24]

  /**
   * Start to Advertise to be connected by a Client
   */
  Adv_Request(APP_BLE_FAST_ADV);
 800efbc:	2001      	movs	r0, #1
 800efbe:	f000 f9a9 	bl	800f314 <Adv_Request>

  /* USER CODE BEGIN APP_BLE_Init_2 */

  /* USER CODE END APP_BLE_Init_2 */

  return;
 800efc2:	bf00      	nop
}
 800efc4:	3740      	adds	r7, #64	@ 0x40
 800efc6:	46bd      	mov	sp, r7
 800efc8:	bdb0      	pop	{r4, r5, r7, pc}
 800efca:	bf00      	nop
 800efcc:	0800f4f1 	.word	0x0800f4f1
 800efd0:	0800f4e3 	.word	0x0800f4e3
 800efd4:	080121f4 	.word	0x080121f4
 800efd8:	0800e2f1 	.word	0x0800e2f1
 800efdc:	20002c40 	.word	0x20002c40
 800efe0:	0800f3fd 	.word	0x0800f3fd

0800efe4 <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification(void *p_Pckt)
{
 800efe4:	b580      	push	{r7, lr}
 800efe6:	b08a      	sub	sp, #40	@ 0x28
 800efe8:	af00      	add	r7, sp, #0
 800efea:	6078      	str	r0, [r7, #4]
  hci_event_pckt    *p_event_pckt;
  evt_le_meta_event *p_meta_evt;
  evt_blecore_aci   *p_blecore_evt;
  tBleStatus        ret = BLE_STATUS_INVALID_PARAMS;
 800efec:	2392      	movs	r3, #146	@ 0x92
 800efee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  p_event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) p_Pckt)->data;
 800eff2:	687b      	ldr	r3, [r7, #4]
 800eff4:	3301      	adds	r3, #1
 800eff6:	623b      	str	r3, [r7, #32]

  switch (p_event_pckt->evt)
 800eff8:	6a3b      	ldr	r3, [r7, #32]
 800effa:	781b      	ldrb	r3, [r3, #0]
 800effc:	2bff      	cmp	r3, #255	@ 0xff
 800effe:	d053      	beq.n	800f0a8 <SVCCTL_App_Notification+0xc4>
 800f000:	2bff      	cmp	r3, #255	@ 0xff
 800f002:	f300 80af 	bgt.w	800f164 <SVCCTL_App_Notification+0x180>
 800f006:	2b05      	cmp	r3, #5
 800f008:	d002      	beq.n	800f010 <SVCCTL_App_Notification+0x2c>
 800f00a:	2b3e      	cmp	r3, #62	@ 0x3e
 800f00c:	d020      	beq.n	800f050 <SVCCTL_App_Notification+0x6c>

    default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
      break;
 800f00e:	e0a9      	b.n	800f164 <SVCCTL_App_Notification+0x180>
      p_disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) p_event_pckt->data;
 800f010:	6a3b      	ldr	r3, [r7, #32]
 800f012:	3302      	adds	r3, #2
 800f014:	60fb      	str	r3, [r7, #12]
      if (p_disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 800f016:	68fb      	ldr	r3, [r7, #12]
 800f018:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800f01c:	b29a      	uxth	r2, r3
 800f01e:	4b55      	ldr	r3, [pc, #340]	@ (800f174 <SVCCTL_App_Notification+0x190>)
 800f020:	8adb      	ldrh	r3, [r3, #22]
 800f022:	429a      	cmp	r2, r3
 800f024:	d106      	bne.n	800f034 <SVCCTL_App_Notification+0x50>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 800f026:	4b53      	ldr	r3, [pc, #332]	@ (800f174 <SVCCTL_App_Notification+0x190>)
 800f028:	2200      	movs	r2, #0
 800f02a:	82da      	strh	r2, [r3, #22]
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800f02c:	4b51      	ldr	r3, [pc, #324]	@ (800f174 <SVCCTL_App_Notification+0x190>)
 800f02e:	2200      	movs	r2, #0
 800f030:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
      Adv_Request(APP_BLE_FAST_ADV);
 800f034:	2001      	movs	r0, #1
 800f036:	f000 f96d 	bl	800f314 <Adv_Request>
      HandleNotification.Custom_Evt_Opcode = CUSTOM_DISCON_HANDLE_EVT;
 800f03a:	4b4f      	ldr	r3, [pc, #316]	@ (800f178 <SVCCTL_App_Notification+0x194>)
 800f03c:	2201      	movs	r2, #1
 800f03e:	701a      	strb	r2, [r3, #0]
      HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 800f040:	4b4c      	ldr	r3, [pc, #304]	@ (800f174 <SVCCTL_App_Notification+0x190>)
 800f042:	8ada      	ldrh	r2, [r3, #22]
 800f044:	4b4c      	ldr	r3, [pc, #304]	@ (800f178 <SVCCTL_App_Notification+0x194>)
 800f046:	805a      	strh	r2, [r3, #2]
      Custom_APP_Notification(&HandleNotification);
 800f048:	484b      	ldr	r0, [pc, #300]	@ (800f178 <SVCCTL_App_Notification+0x194>)
 800f04a:	f000 fb79 	bl	800f740 <Custom_APP_Notification>
      break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 800f04e:	e08c      	b.n	800f16a <SVCCTL_App_Notification+0x186>
      p_meta_evt = (evt_le_meta_event*) p_event_pckt->data;
 800f050:	6a3b      	ldr	r3, [r7, #32]
 800f052:	3302      	adds	r3, #2
 800f054:	617b      	str	r3, [r7, #20]
      switch (p_meta_evt->subevent)
 800f056:	697b      	ldr	r3, [r7, #20]
 800f058:	781b      	ldrb	r3, [r3, #0]
 800f05a:	2b01      	cmp	r3, #1
 800f05c:	d001      	beq.n	800f062 <SVCCTL_App_Notification+0x7e>
 800f05e:	2b03      	cmp	r3, #3
          break;
 800f060:	e021      	b.n	800f0a6 <SVCCTL_App_Notification+0xc2>
          p_connection_complete_event = (hci_le_connection_complete_event_rp0 *) p_meta_evt->data;
 800f062:	697b      	ldr	r3, [r7, #20]
 800f064:	3301      	adds	r3, #1
 800f066:	613b      	str	r3, [r7, #16]
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 800f068:	4b42      	ldr	r3, [pc, #264]	@ (800f174 <SVCCTL_App_Notification+0x190>)
 800f06a:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800f06e:	2b04      	cmp	r3, #4
 800f070:	d104      	bne.n	800f07c <SVCCTL_App_Notification+0x98>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 800f072:	4b40      	ldr	r3, [pc, #256]	@ (800f174 <SVCCTL_App_Notification+0x190>)
 800f074:	2206      	movs	r2, #6
 800f076:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
 800f07a:	e003      	b.n	800f084 <SVCCTL_App_Notification+0xa0>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 800f07c:	4b3d      	ldr	r3, [pc, #244]	@ (800f174 <SVCCTL_App_Notification+0x190>)
 800f07e:	2205      	movs	r2, #5
 800f080:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = p_connection_complete_event->Connection_Handle;
 800f084:	693b      	ldr	r3, [r7, #16]
 800f086:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800f08a:	b29a      	uxth	r2, r3
 800f08c:	4b39      	ldr	r3, [pc, #228]	@ (800f174 <SVCCTL_App_Notification+0x190>)
 800f08e:	82da      	strh	r2, [r3, #22]
          HandleNotification.Custom_Evt_Opcode = CUSTOM_CONN_HANDLE_EVT;
 800f090:	4b39      	ldr	r3, [pc, #228]	@ (800f178 <SVCCTL_App_Notification+0x194>)
 800f092:	2200      	movs	r2, #0
 800f094:	701a      	strb	r2, [r3, #0]
          HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 800f096:	4b37      	ldr	r3, [pc, #220]	@ (800f174 <SVCCTL_App_Notification+0x190>)
 800f098:	8ada      	ldrh	r2, [r3, #22]
 800f09a:	4b37      	ldr	r3, [pc, #220]	@ (800f178 <SVCCTL_App_Notification+0x194>)
 800f09c:	805a      	strh	r2, [r3, #2]
          Custom_APP_Notification(&HandleNotification);
 800f09e:	4836      	ldr	r0, [pc, #216]	@ (800f178 <SVCCTL_App_Notification+0x194>)
 800f0a0:	f000 fb4e 	bl	800f740 <Custom_APP_Notification>
          break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 800f0a4:	bf00      	nop
      break; /* HCI_LE_META_EVT_CODE */
 800f0a6:	e060      	b.n	800f16a <SVCCTL_App_Notification+0x186>
      p_blecore_evt = (evt_blecore_aci*) p_event_pckt->data;
 800f0a8:	6a3b      	ldr	r3, [r7, #32]
 800f0aa:	3302      	adds	r3, #2
 800f0ac:	61fb      	str	r3, [r7, #28]
      switch (p_blecore_evt->ecode)
 800f0ae:	69fb      	ldr	r3, [r7, #28]
 800f0b0:	881b      	ldrh	r3, [r3, #0]
 800f0b2:	b29b      	uxth	r3, r3
 800f0b4:	f640 420e 	movw	r2, #3086	@ 0xc0e
 800f0b8:	4293      	cmp	r3, r2
 800f0ba:	d047      	beq.n	800f14c <SVCCTL_App_Notification+0x168>
 800f0bc:	f640 420e 	movw	r2, #3086	@ 0xc0e
 800f0c0:	4293      	cmp	r3, r2
 800f0c2:	dc51      	bgt.n	800f168 <SVCCTL_App_Notification+0x184>
 800f0c4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800f0c8:	d046      	beq.n	800f158 <SVCCTL_App_Notification+0x174>
 800f0ca:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800f0ce:	dc4b      	bgt.n	800f168 <SVCCTL_App_Notification+0x184>
 800f0d0:	2b04      	cmp	r3, #4
 800f0d2:	d043      	beq.n	800f15c <SVCCTL_App_Notification+0x178>
 800f0d4:	2b04      	cmp	r3, #4
 800f0d6:	db47      	blt.n	800f168 <SVCCTL_App_Notification+0x184>
 800f0d8:	f240 420a 	movw	r2, #1034	@ 0x40a
 800f0dc:	4293      	cmp	r3, r2
 800f0de:	dc43      	bgt.n	800f168 <SVCCTL_App_Notification+0x184>
 800f0e0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f0e4:	dd40      	ble.n	800f168 <SVCCTL_App_Notification+0x184>
 800f0e6:	f2a3 4301 	subw	r3, r3, #1025	@ 0x401
 800f0ea:	2b09      	cmp	r3, #9
 800f0ec:	d83c      	bhi.n	800f168 <SVCCTL_App_Notification+0x184>
 800f0ee:	a201      	add	r2, pc, #4	@ (adr r2, 800f0f4 <SVCCTL_App_Notification+0x110>)
 800f0f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f0f4:	0800f145 	.word	0x0800f145
 800f0f8:	0800f11d 	.word	0x0800f11d
 800f0fc:	0800f169 	.word	0x0800f169
 800f100:	0800f169 	.word	0x0800f169
 800f104:	0800f169 	.word	0x0800f169
 800f108:	0800f169 	.word	0x0800f169
 800f10c:	0800f161 	.word	0x0800f161
 800f110:	0800f169 	.word	0x0800f169
 800f114:	0800f131 	.word	0x0800f131
 800f118:	0800f161 	.word	0x0800f161
          ret = aci_gap_pass_key_resp(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, CFG_FIXED_PIN);
 800f11c:	4b15      	ldr	r3, [pc, #84]	@ (800f174 <SVCCTL_App_Notification+0x190>)
 800f11e:	8adb      	ldrh	r3, [r3, #22]
 800f120:	4916      	ldr	r1, [pc, #88]	@ (800f17c <SVCCTL_App_Notification+0x198>)
 800f122:	4618      	mov	r0, r3
 800f124:	f7fd ffa6 	bl	800d074 <aci_gap_pass_key_resp>
 800f128:	4603      	mov	r3, r0
 800f12a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
          break;
 800f12e:	e018      	b.n	800f162 <SVCCTL_App_Notification+0x17e>
          ret = aci_gap_numeric_comparison_value_confirm_yesno(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, YES);
 800f130:	4b10      	ldr	r3, [pc, #64]	@ (800f174 <SVCCTL_App_Notification+0x190>)
 800f132:	8adb      	ldrh	r3, [r3, #22]
 800f134:	2101      	movs	r1, #1
 800f136:	4618      	mov	r0, r3
 800f138:	f7fe f946 	bl	800d3c8 <aci_gap_numeric_comparison_value_confirm_yesno>
 800f13c:	4603      	mov	r3, r0
 800f13e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
          break;
 800f142:	e00e      	b.n	800f162 <SVCCTL_App_Notification+0x17e>
          p_pairing_complete = (aci_gap_pairing_complete_event_rp0*)p_blecore_evt->data;
 800f144:	69fb      	ldr	r3, [r7, #28]
 800f146:	3302      	adds	r3, #2
 800f148:	61bb      	str	r3, [r7, #24]
          break;
 800f14a:	e00a      	b.n	800f162 <SVCCTL_App_Notification+0x17e>
          aci_gatt_confirm_indication(BleApplicationContext.BleApplicationContext_legacy.connectionHandle);
 800f14c:	4b09      	ldr	r3, [pc, #36]	@ (800f174 <SVCCTL_App_Notification+0x190>)
 800f14e:	8adb      	ldrh	r3, [r3, #22]
 800f150:	4618      	mov	r0, r3
 800f152:	f7fe fc4c 	bl	800d9ee <aci_gatt_confirm_indication>
        break;
 800f156:	e004      	b.n	800f162 <SVCCTL_App_Notification+0x17e>
          break;
 800f158:	bf00      	nop
 800f15a:	e005      	b.n	800f168 <SVCCTL_App_Notification+0x184>
          break; /* ACI_HAL_END_OF_RADIO_ACTIVITY_VSEVT_CODE */
 800f15c:	bf00      	nop
 800f15e:	e003      	b.n	800f168 <SVCCTL_App_Notification+0x184>
          break; /* ACI_GAP_PROC_COMPLETE_VSEVT_CODE */
 800f160:	bf00      	nop
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800f162:	e001      	b.n	800f168 <SVCCTL_App_Notification+0x184>
      break;
 800f164:	bf00      	nop
 800f166:	e000      	b.n	800f16a <SVCCTL_App_Notification+0x186>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800f168:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 800f16a:	2301      	movs	r3, #1
}
 800f16c:	4618      	mov	r0, r3
 800f16e:	3728      	adds	r7, #40	@ 0x28
 800f170:	46bd      	mov	sp, r7
 800f172:	bd80      	pop	{r7, pc}
 800f174:	20002c40 	.word	0x20002c40
 800f178:	20002cc4 	.word	0x20002cc4
 800f17c:	0001b207 	.word	0x0001b207

0800f180 <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init(void)
{
 800f180:	b580      	push	{r7, lr}
 800f182:	b082      	sub	sp, #8
 800f184:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 800f186:	4b06      	ldr	r3, [pc, #24]	@ (800f1a0 <Ble_Tl_Init+0x20>)
 800f188:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 800f18a:	4b06      	ldr	r3, [pc, #24]	@ (800f1a4 <Ble_Tl_Init+0x24>)
 800f18c:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 800f18e:	463b      	mov	r3, r7
 800f190:	4619      	mov	r1, r3
 800f192:	4805      	ldr	r0, [pc, #20]	@ (800f1a8 <Ble_Tl_Init+0x28>)
 800f194:	f7ff f890 	bl	800e2b8 <hci_init>

  return;
 800f198:	bf00      	nop
}
 800f19a:	3708      	adds	r7, #8
 800f19c:	46bd      	mov	sp, r7
 800f19e:	bd80      	pop	{r7, pc}
 800f1a0:	200300d8 	.word	0x200300d8
 800f1a4:	0800f4ad 	.word	0x0800f4ad
 800f1a8:	0800f475 	.word	0x0800f475

0800f1ac <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void)
{
 800f1ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f1ae:	b08d      	sub	sp, #52	@ 0x34
 800f1b0:	af06      	add	r7, sp, #24
  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *p_bd_addr;
  uint16_t a_appearance[1] = {BLE_CFG_GAP_APPEARANCE};
 800f1b2:	2300      	movs	r3, #0
 800f1b4:	803b      	strh	r3, [r7, #0]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800f1b6:	2392      	movs	r3, #146	@ 0x92
 800f1b8:	75fb      	strb	r3, [r7, #23]

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  ret = hci_reset();
 800f1ba:	f7fe fdad 	bl	800dd18 <hci_reset>
 800f1be:	4603      	mov	r3, r0
 800f1c0:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write the BD Address
   */
  p_bd_addr = BleGetBdAddress();
 800f1c2:	f000 f8d7 	bl	800f374 <BleGetBdAddress>
 800f1c6:	6138      	str	r0, [r7, #16]
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET, CONFIG_DATA_PUBADDR_LEN, (uint8_t*) p_bd_addr);
 800f1c8:	693a      	ldr	r2, [r7, #16]
 800f1ca:	2106      	movs	r1, #6
 800f1cc:	2000      	movs	r0, #0
 800f1ce:	f7fe fc63 	bl	800da98 <aci_hal_write_config_data>
 800f1d2:	4603      	mov	r3, r0
 800f1d4:	75fb      	strb	r3, [r7, #23]
#endif /* CFG_BLE_ADDRESS_TYPE != GAP_PUBLIC_ADDR */

  /**
   * Write Identity root key used to derive IRK and DHK(Legacy)
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)a_BLE_CfgIrValue);
 800f1d6:	4a4a      	ldr	r2, [pc, #296]	@ (800f300 <Ble_Hci_Gap_Gatt_Init+0x154>)
 800f1d8:	2110      	movs	r1, #16
 800f1da:	2018      	movs	r0, #24
 800f1dc:	f7fe fc5c 	bl	800da98 <aci_hal_write_config_data>
 800f1e0:	4603      	mov	r3, r0
 800f1e2:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write Encryption root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)a_BLE_CfgErValue);
 800f1e4:	4a47      	ldr	r2, [pc, #284]	@ (800f304 <Ble_Hci_Gap_Gatt_Init+0x158>)
 800f1e6:	2110      	movs	r1, #16
 800f1e8:	2008      	movs	r0, #8
 800f1ea:	f7fe fc55 	bl	800da98 <aci_hal_write_config_data>
 800f1ee:	4603      	mov	r3, r0
 800f1f0:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Set TX Power.
   */
  ret = aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 800f1f2:	2118      	movs	r1, #24
 800f1f4:	2001      	movs	r0, #1
 800f1f6:	f7fe fcd4 	bl	800dba2 <aci_hal_set_tx_power_level>
 800f1fa:	4603      	mov	r3, r0
 800f1fc:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GATT interface
   */
  ret = aci_gatt_init();
 800f1fe:	f7fe f94a 	bl	800d496 <aci_gatt_init>
 800f202:	4603      	mov	r3, r0
 800f204:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GAP interface
   */
  role = 0;
 800f206:	2300      	movs	r3, #0
 800f208:	73fb      	strb	r3, [r7, #15]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 800f20a:	7bfb      	ldrb	r3, [r7, #15]
 800f20c:	f043 0301 	orr.w	r3, r3, #1
 800f210:	73fb      	strb	r3, [r7, #15]

/* USER CODE BEGIN Role_Mngt*/

/* USER CODE END Role_Mngt */

  if (role > 0)
 800f212:	7bfb      	ldrb	r3, [r7, #15]
 800f214:	2b00      	cmp	r3, #0
 800f216:	d01f      	beq.n	800f258 <Ble_Hci_Gap_Gatt_Init+0xac>
  {
    const char *name = CFG_GAP_DEVICE_NAME;
 800f218:	4b3b      	ldr	r3, [pc, #236]	@ (800f308 <Ble_Hci_Gap_Gatt_Init+0x15c>)
 800f21a:	60bb      	str	r3, [r7, #8]
    ret = aci_gap_init(role,
 800f21c:	1dba      	adds	r2, r7, #6
 800f21e:	7bf8      	ldrb	r0, [r7, #15]
 800f220:	1cbb      	adds	r3, r7, #2
 800f222:	9301      	str	r3, [sp, #4]
 800f224:	1d3b      	adds	r3, r7, #4
 800f226:	9300      	str	r3, [sp, #0]
 800f228:	4613      	mov	r3, r2
 800f22a:	2208      	movs	r2, #8
 800f22c:	2100      	movs	r1, #0
 800f22e:	f7fd ff88 	bl	800d142 <aci_gap_init>
 800f232:	4603      	mov	r3, r0
 800f234:	75fb      	strb	r3, [r7, #23]
    else
    {
      APP_DBG_MSG("  Success: aci_gap_init command\n");
    }

    ret = aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name);
 800f236:	88fc      	ldrh	r4, [r7, #6]
 800f238:	88bd      	ldrh	r5, [r7, #4]
 800f23a:	68b8      	ldr	r0, [r7, #8]
 800f23c:	f7f0 ffa0 	bl	8000180 <strlen>
 800f240:	4603      	mov	r3, r0
 800f242:	b2da      	uxtb	r2, r3
 800f244:	68bb      	ldr	r3, [r7, #8]
 800f246:	9300      	str	r3, [sp, #0]
 800f248:	4613      	mov	r3, r2
 800f24a:	2200      	movs	r2, #0
 800f24c:	4629      	mov	r1, r5
 800f24e:	4620      	mov	r0, r4
 800f250:	f7fe fb24 	bl	800d89c <aci_gatt_update_char_value>
 800f254:	4603      	mov	r3, r0
 800f256:	75fb      	strb	r3, [r7, #23]
    {
      BLE_DBG_SVCCTL_MSG("  Success: aci_gatt_update_char_value - Device Name\n");
    }
  }

  ret = aci_gatt_update_char_value(gap_service_handle,
 800f258:	88f8      	ldrh	r0, [r7, #6]
 800f25a:	8879      	ldrh	r1, [r7, #2]
 800f25c:	463b      	mov	r3, r7
 800f25e:	9300      	str	r3, [sp, #0]
 800f260:	2302      	movs	r3, #2
 800f262:	2200      	movs	r2, #0
 800f264:	f7fe fb1a 	bl	800d89c <aci_gatt_update_char_value>
 800f268:	4603      	mov	r3, r0
 800f26a:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize Default PHY
   */
  ret = hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 800f26c:	2202      	movs	r2, #2
 800f26e:	2102      	movs	r1, #2
 800f270:	2000      	movs	r0, #0
 800f272:	f7fe fd75 	bl	800dd60 <hci_le_set_default_phy>
 800f276:	4603      	mov	r3, r0
 800f278:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 800f27a:	4b24      	ldr	r3, [pc, #144]	@ (800f30c <Ble_Hci_Gap_Gatt_Init+0x160>)
 800f27c:	2201      	movs	r2, #1
 800f27e:	701a      	strb	r2, [r3, #0]
  ret = aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 800f280:	4b22      	ldr	r3, [pc, #136]	@ (800f30c <Ble_Hci_Gap_Gatt_Init+0x160>)
 800f282:	781b      	ldrb	r3, [r3, #0]
 800f284:	4618      	mov	r0, r3
 800f286:	f7fd fddd 	bl	800ce44 <aci_gap_set_io_capability>
 800f28a:	4603      	mov	r3, r0
 800f28c:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 800f28e:	4b1f      	ldr	r3, [pc, #124]	@ (800f30c <Ble_Hci_Gap_Gatt_Init+0x160>)
 800f290:	2201      	movs	r2, #1
 800f292:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 800f294:	4b1d      	ldr	r3, [pc, #116]	@ (800f30c <Ble_Hci_Gap_Gatt_Init+0x160>)
 800f296:	2208      	movs	r2, #8
 800f298:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 800f29a:	4b1c      	ldr	r3, [pc, #112]	@ (800f30c <Ble_Hci_Gap_Gatt_Init+0x160>)
 800f29c:	2210      	movs	r2, #16
 800f29e:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 800f2a0:	4b1a      	ldr	r3, [pc, #104]	@ (800f30c <Ble_Hci_Gap_Gatt_Init+0x160>)
 800f2a2:	2200      	movs	r2, #0
 800f2a4:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 800f2a6:	4b19      	ldr	r3, [pc, #100]	@ (800f30c <Ble_Hci_Gap_Gatt_Init+0x160>)
 800f2a8:	4a19      	ldr	r2, [pc, #100]	@ (800f310 <Ble_Hci_Gap_Gatt_Init+0x164>)
 800f2aa:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 800f2ac:	4b17      	ldr	r3, [pc, #92]	@ (800f30c <Ble_Hci_Gap_Gatt_Init+0x160>)
 800f2ae:	2200      	movs	r2, #0
 800f2b0:	709a      	strb	r2, [r3, #2]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init_1*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init_1*/

  ret = aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 800f2b2:	4b16      	ldr	r3, [pc, #88]	@ (800f30c <Ble_Hci_Gap_Gatt_Init+0x160>)
 800f2b4:	789c      	ldrb	r4, [r3, #2]
 800f2b6:	4b15      	ldr	r3, [pc, #84]	@ (800f30c <Ble_Hci_Gap_Gatt_Init+0x160>)
 800f2b8:	785d      	ldrb	r5, [r3, #1]
 800f2ba:	4b14      	ldr	r3, [pc, #80]	@ (800f30c <Ble_Hci_Gap_Gatt_Init+0x160>)
 800f2bc:	791b      	ldrb	r3, [r3, #4]
 800f2be:	4a13      	ldr	r2, [pc, #76]	@ (800f30c <Ble_Hci_Gap_Gatt_Init+0x160>)
 800f2c0:	7952      	ldrb	r2, [r2, #5]
 800f2c2:	4912      	ldr	r1, [pc, #72]	@ (800f30c <Ble_Hci_Gap_Gatt_Init+0x160>)
 800f2c4:	78c9      	ldrb	r1, [r1, #3]
 800f2c6:	4811      	ldr	r0, [pc, #68]	@ (800f30c <Ble_Hci_Gap_Gatt_Init+0x160>)
 800f2c8:	6880      	ldr	r0, [r0, #8]
 800f2ca:	2600      	movs	r6, #0
 800f2cc:	9604      	str	r6, [sp, #16]
 800f2ce:	9003      	str	r0, [sp, #12]
 800f2d0:	9102      	str	r1, [sp, #8]
 800f2d2:	9201      	str	r2, [sp, #4]
 800f2d4:	9300      	str	r3, [sp, #0]
 800f2d6:	2300      	movs	r3, #0
 800f2d8:	2201      	movs	r2, #1
 800f2da:	4629      	mov	r1, r5
 800f2dc:	4620      	mov	r0, r4
 800f2de:	f7fd fe05 	bl	800ceec <aci_gap_set_authentication_requirement>
 800f2e2:	4603      	mov	r3, r0
 800f2e4:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize whitelist
   */
  if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 800f2e6:	4b09      	ldr	r3, [pc, #36]	@ (800f30c <Ble_Hci_Gap_Gatt_Init+0x160>)
 800f2e8:	789b      	ldrb	r3, [r3, #2]
 800f2ea:	2b00      	cmp	r3, #0
 800f2ec:	d003      	beq.n	800f2f6 <Ble_Hci_Gap_Gatt_Init+0x14a>
  {
    ret = aci_gap_configure_whitelist();
 800f2ee:	f7fe f847 	bl	800d380 <aci_gap_configure_filter_accept_list>
 800f2f2:	4603      	mov	r3, r0
 800f2f4:	75fb      	strb	r3, [r7, #23]
    {
      APP_DBG_MSG("  Success: aci_gap_configure_whitelist command\n");
    }
  }
  APP_DBG_MSG("==>> End Ble_Hci_Gap_Gatt_Init function\n\r");
}
 800f2f6:	bf00      	nop
 800f2f8:	371c      	adds	r7, #28
 800f2fa:	46bd      	mov	sp, r7
 800f2fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f2fe:	bf00      	nop
 800f300:	080123f4 	.word	0x080123f4
 800f304:	08012404 	.word	0x08012404
 800f308:	08012230 	.word	0x08012230
 800f30c:	20002c40 	.word	0x20002c40
 800f310:	0001b207 	.word	0x0001b207

0800f314 <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t NewStatus)
{
 800f314:	b580      	push	{r7, lr}
 800f316:	b08c      	sub	sp, #48	@ 0x30
 800f318:	af08      	add	r7, sp, #32
 800f31a:	4603      	mov	r3, r0
 800f31c:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800f31e:	2392      	movs	r3, #146	@ 0x92
 800f320:	73fb      	strb	r3, [r7, #15]

  BleApplicationContext.Device_Connection_Status = NewStatus;
 800f322:	4a12      	ldr	r2, [pc, #72]	@ (800f36c <Adv_Request+0x58>)
 800f324:	79fb      	ldrb	r3, [r7, #7]
 800f326:	f882 3080 	strb.w	r3, [r2, #128]	@ 0x80
  /* Start Fast or Low Power Advertising */
  ret = aci_gap_set_discoverable(ADV_TYPE,
 800f32a:	2300      	movs	r3, #0
 800f32c:	9306      	str	r3, [sp, #24]
 800f32e:	2300      	movs	r3, #0
 800f330:	9305      	str	r3, [sp, #20]
 800f332:	2300      	movs	r3, #0
 800f334:	9304      	str	r3, [sp, #16]
 800f336:	2300      	movs	r3, #0
 800f338:	9303      	str	r3, [sp, #12]
 800f33a:	2300      	movs	r3, #0
 800f33c:	9302      	str	r3, [sp, #8]
 800f33e:	2300      	movs	r3, #0
 800f340:	9301      	str	r3, [sp, #4]
 800f342:	2300      	movs	r3, #0
 800f344:	9300      	str	r3, [sp, #0]
 800f346:	2300      	movs	r3, #0
 800f348:	22a0      	movs	r2, #160	@ 0xa0
 800f34a:	2180      	movs	r1, #128	@ 0x80
 800f34c:	2000      	movs	r0, #0
 800f34e:	f7fd fc7f 	bl	800cc50 <aci_gap_set_discoverable>
 800f352:	4603      	mov	r3, r0
 800f354:	73fb      	strb	r3, [r7, #15]
/* USER CODE BEGIN Adv_Request_1*/

/* USER CODE END Adv_Request_1*/

  /* Update Advertising data */
  ret = aci_gap_update_adv_data(sizeof(a_AdvData), (uint8_t*) a_AdvData);
 800f356:	4906      	ldr	r1, [pc, #24]	@ (800f370 <Adv_Request+0x5c>)
 800f358:	200a      	movs	r0, #10
 800f35a:	f7fd ff9f 	bl	800d29c <aci_gap_update_adv_data>
 800f35e:	4603      	mov	r3, r0
 800f360:	73fb      	strb	r3, [r7, #15]
  else
  {
      APP_DBG_MSG("==>> Success: Start Fast Advertising \n\r");
  }

  return;
 800f362:	bf00      	nop
}
 800f364:	3710      	adds	r7, #16
 800f366:	46bd      	mov	sp, r7
 800f368:	bd80      	pop	{r7, pc}
 800f36a:	bf00      	nop
 800f36c:	20002c40 	.word	0x20002c40
 800f370:	2000005c 	.word	0x2000005c

0800f374 <BleGetBdAddress>:

const uint8_t* BleGetBdAddress(void)
{
 800f374:	b580      	push	{r7, lr}
 800f376:	b086      	sub	sp, #24
 800f378:	af00      	add	r7, sp, #0
  const uint8_t *p_bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 800f37a:	f7ff fd9f 	bl	800eebc <LL_FLASH_GetUDN>
 800f37e:	6138      	str	r0, [r7, #16]

  if (udn != 0xFFFFFFFF)
 800f380:	693b      	ldr	r3, [r7, #16]
 800f382:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f386:	d023      	beq.n	800f3d0 <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 800f388:	f7ff fdb0 	bl	800eeec <LL_FLASH_GetSTCompanyID>
 800f38c:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 800f38e:	f7ff fda1 	bl	800eed4 <LL_FLASH_GetDeviceID>
 800f392:	6078      	str	r0, [r7, #4]
     * bit[23:16] : Device ID.
     * bit[15:0] : The last 16bits from the UDN
     * Note: In order to use the Public Address in a final product, a dedicated
     * 24bits company ID (OUI) shall be bought.
     */
    a_BdAddrUdn[0] = (uint8_t)(udn & 0x000000FF);
 800f394:	693b      	ldr	r3, [r7, #16]
 800f396:	b2da      	uxtb	r2, r3
 800f398:	4b16      	ldr	r3, [pc, #88]	@ (800f3f4 <BleGetBdAddress+0x80>)
 800f39a:	701a      	strb	r2, [r3, #0]
    a_BdAddrUdn[1] = (uint8_t)((udn & 0x0000FF00) >> 8);
 800f39c:	693b      	ldr	r3, [r7, #16]
 800f39e:	0a1b      	lsrs	r3, r3, #8
 800f3a0:	b2da      	uxtb	r2, r3
 800f3a2:	4b14      	ldr	r3, [pc, #80]	@ (800f3f4 <BleGetBdAddress+0x80>)
 800f3a4:	705a      	strb	r2, [r3, #1]
    a_BdAddrUdn[2] = (uint8_t)device_id;
 800f3a6:	687b      	ldr	r3, [r7, #4]
 800f3a8:	b2da      	uxtb	r2, r3
 800f3aa:	4b12      	ldr	r3, [pc, #72]	@ (800f3f4 <BleGetBdAddress+0x80>)
 800f3ac:	709a      	strb	r2, [r3, #2]
    a_BdAddrUdn[3] = (uint8_t)(company_id & 0x000000FF);
 800f3ae:	68bb      	ldr	r3, [r7, #8]
 800f3b0:	b2da      	uxtb	r2, r3
 800f3b2:	4b10      	ldr	r3, [pc, #64]	@ (800f3f4 <BleGetBdAddress+0x80>)
 800f3b4:	70da      	strb	r2, [r3, #3]
    a_BdAddrUdn[4] = (uint8_t)((company_id & 0x0000FF00) >> 8);
 800f3b6:	68bb      	ldr	r3, [r7, #8]
 800f3b8:	0a1b      	lsrs	r3, r3, #8
 800f3ba:	b2da      	uxtb	r2, r3
 800f3bc:	4b0d      	ldr	r3, [pc, #52]	@ (800f3f4 <BleGetBdAddress+0x80>)
 800f3be:	711a      	strb	r2, [r3, #4]
    a_BdAddrUdn[5] = (uint8_t)((company_id & 0x00FF0000) >> 16);
 800f3c0:	68bb      	ldr	r3, [r7, #8]
 800f3c2:	0c1b      	lsrs	r3, r3, #16
 800f3c4:	b2da      	uxtb	r2, r3
 800f3c6:	4b0b      	ldr	r3, [pc, #44]	@ (800f3f4 <BleGetBdAddress+0x80>)
 800f3c8:	715a      	strb	r2, [r3, #5]

    p_bd_addr = (const uint8_t *)a_BdAddrUdn;
 800f3ca:	4b0a      	ldr	r3, [pc, #40]	@ (800f3f4 <BleGetBdAddress+0x80>)
 800f3cc:	617b      	str	r3, [r7, #20]
 800f3ce:	e00b      	b.n	800f3e8 <BleGetBdAddress+0x74>
  }
  else
  {
    p_otp_addr = OTP_Read(0);
 800f3d0:	2000      	movs	r0, #0
 800f3d2:	f7ff fc8d 	bl	800ecf0 <OTP_Read>
 800f3d6:	60f8      	str	r0, [r7, #12]
    if (p_otp_addr)
 800f3d8:	68fb      	ldr	r3, [r7, #12]
 800f3da:	2b00      	cmp	r3, #0
 800f3dc:	d002      	beq.n	800f3e4 <BleGetBdAddress+0x70>
    {
      p_bd_addr = ((OTP_ID0_t*)p_otp_addr)->bd_address;
 800f3de:	68fb      	ldr	r3, [r7, #12]
 800f3e0:	617b      	str	r3, [r7, #20]
 800f3e2:	e001      	b.n	800f3e8 <BleGetBdAddress+0x74>
    }
    else
    {
      p_bd_addr = a_MBdAddr;
 800f3e4:	4b04      	ldr	r3, [pc, #16]	@ (800f3f8 <BleGetBdAddress+0x84>)
 800f3e6:	617b      	str	r3, [r7, #20]
    }
  }

  return p_bd_addr;
 800f3e8:	697b      	ldr	r3, [r7, #20]
}
 800f3ea:	4618      	mov	r0, r3
 800f3ec:	3718      	adds	r7, #24
 800f3ee:	46bd      	mov	sp, r7
 800f3f0:	bd80      	pop	{r7, pc}
 800f3f2:	bf00      	nop
 800f3f4:	20002c38 	.word	0x20002c38
 800f3f8:	080123ec 	.word	0x080123ec

0800f3fc <Adv_Cancel>:
 *
 * SPECIFIC FUNCTIONS FOR CUSTOM
 *
 *************************************************************/
static void Adv_Cancel(void)
{
 800f3fc:	b580      	push	{r7, lr}
 800f3fe:	b082      	sub	sp, #8
 800f400:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Adv_Cancel_1 */

  /* USER CODE END Adv_Cancel_1 */

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 800f402:	4b0a      	ldr	r3, [pc, #40]	@ (800f42c <Adv_Cancel+0x30>)
 800f404:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800f408:	2b05      	cmp	r3, #5
 800f40a:	d00a      	beq.n	800f422 <Adv_Cancel+0x26>
  {
    tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800f40c:	2392      	movs	r3, #146	@ 0x92
 800f40e:	71fb      	strb	r3, [r7, #7]

    ret = aci_gap_set_non_discoverable();
 800f410:	f7fd fbfa 	bl	800cc08 <aci_gap_set_non_discoverable>
 800f414:	4603      	mov	r3, r0
 800f416:	71fb      	strb	r3, [r7, #7]

    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800f418:	4b04      	ldr	r3, [pc, #16]	@ (800f42c <Adv_Cancel+0x30>)
 800f41a:	2200      	movs	r2, #0
 800f41c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* USER CODE BEGIN Adv_Cancel_2 */

  /* USER CODE END Adv_Cancel_2 */

  return;
 800f420:	bf00      	nop
 800f422:	bf00      	nop
}
 800f424:	3708      	adds	r7, #8
 800f426:	46bd      	mov	sp, r7
 800f428:	bd80      	pop	{r7, pc}
 800f42a:	bf00      	nop
 800f42c:	20002c40 	.word	0x20002c40

0800f430 <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* p_Data)
{
 800f430:	b580      	push	{r7, lr}
 800f432:	b082      	sub	sp, #8
 800f434:	af00      	add	r7, sp, #0
 800f436:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 800f438:	2100      	movs	r1, #0
 800f43a:	2002      	movs	r0, #2
 800f43c:	f000 fef8 	bl	8010230 <UTIL_SEQ_SetTask>

  return;
 800f440:	bf00      	nop
}
 800f442:	3708      	adds	r7, #8
 800f444:	46bd      	mov	sp, r7
 800f446:	bd80      	pop	{r7, pc}

0800f448 <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t Flag)
{
 800f448:	b580      	push	{r7, lr}
 800f44a:	b082      	sub	sp, #8
 800f44c:	af00      	add	r7, sp, #0
 800f44e:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800f450:	2001      	movs	r0, #1
 800f452:	f000 ff59 	bl	8010308 <UTIL_SEQ_SetEvt>

  return;
 800f456:	bf00      	nop
}
 800f458:	3708      	adds	r7, #8
 800f45a:	46bd      	mov	sp, r7
 800f45c:	bd80      	pop	{r7, pc}

0800f45e <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t Timeout)
{
 800f45e:	b580      	push	{r7, lr}
 800f460:	b082      	sub	sp, #8
 800f462:	af00      	add	r7, sp, #0
 800f464:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800f466:	2001      	movs	r0, #1
 800f468:	f000 ff6e 	bl	8010348 <UTIL_SEQ_WaitEvt>

  return;
 800f46c:	bf00      	nop
}
 800f46e:	3708      	adds	r7, #8
 800f470:	46bd      	mov	sp, r7
 800f472:	bd80      	pop	{r7, pc}

0800f474 <BLE_UserEvtRx>:

static void BLE_UserEvtRx(void *p_Payload)
{
 800f474:	b580      	push	{r7, lr}
 800f476:	b084      	sub	sp, #16
 800f478:	af00      	add	r7, sp, #0
 800f47a:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *p_param;

  p_param = (tHCI_UserEvtRxParam *)p_Payload;
 800f47c:	687b      	ldr	r3, [r7, #4]
 800f47e:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(p_param->pckt->evtserial));
 800f480:	68fb      	ldr	r3, [r7, #12]
 800f482:	685b      	ldr	r3, [r3, #4]
 800f484:	3308      	adds	r3, #8
 800f486:	4618      	mov	r0, r3
 800f488:	f7fe fdd0 	bl	800e02c <SVCCTL_UserEvtRx>
 800f48c:	4603      	mov	r3, r0
 800f48e:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 800f490:	7afb      	ldrb	r3, [r7, #11]
 800f492:	2b00      	cmp	r3, #0
 800f494:	d003      	beq.n	800f49e <BLE_UserEvtRx+0x2a>
  {
    p_param->status = HCI_TL_UserEventFlow_Enable;
 800f496:	68fb      	ldr	r3, [r7, #12]
 800f498:	2201      	movs	r2, #1
 800f49a:	701a      	strb	r2, [r3, #0]
  else
  {
    p_param->status = HCI_TL_UserEventFlow_Disable;
  }

  return;
 800f49c:	e003      	b.n	800f4a6 <BLE_UserEvtRx+0x32>
    p_param->status = HCI_TL_UserEventFlow_Disable;
 800f49e:	68fb      	ldr	r3, [r7, #12]
 800f4a0:	2200      	movs	r2, #0
 800f4a2:	701a      	strb	r2, [r3, #0]
  return;
 800f4a4:	bf00      	nop
}
 800f4a6:	3710      	adds	r7, #16
 800f4a8:	46bd      	mov	sp, r7
 800f4aa:	bd80      	pop	{r7, pc}

0800f4ac <BLE_StatusNot>:

static void BLE_StatusNot(HCI_TL_CmdStatus_t Status)
{
 800f4ac:	b580      	push	{r7, lr}
 800f4ae:	b084      	sub	sp, #16
 800f4b0:	af00      	add	r7, sp, #0
 800f4b2:	4603      	mov	r3, r0
 800f4b4:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (Status)
 800f4b6:	79fb      	ldrb	r3, [r7, #7]
 800f4b8:	2b00      	cmp	r3, #0
 800f4ba:	d002      	beq.n	800f4c2 <BLE_StatusNot+0x16>
 800f4bc:	2b01      	cmp	r3, #1
 800f4be:	d006      	beq.n	800f4ce <BLE_StatusNot+0x22>

    default:
      /* USER CODE BEGIN Status */

      /* USER CODE END Status */
      break;
 800f4c0:	e00b      	b.n	800f4da <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800f4c2:	230f      	movs	r3, #15
 800f4c4:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 800f4c6:	68f8      	ldr	r0, [r7, #12]
 800f4c8:	f000 fede 	bl	8010288 <UTIL_SEQ_PauseTask>
      break;
 800f4cc:	e005      	b.n	800f4da <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800f4ce:	230f      	movs	r3, #15
 800f4d0:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 800f4d2:	68f8      	ldr	r0, [r7, #12]
 800f4d4:	f000 fef8 	bl	80102c8 <UTIL_SEQ_ResumeTask>
      break;
 800f4d8:	bf00      	nop
  }

  return;
 800f4da:	bf00      	nop
}
 800f4dc:	3710      	adds	r7, #16
 800f4de:	46bd      	mov	sp, r7
 800f4e0:	bd80      	pop	{r7, pc}

0800f4e2 <myTask_IMU>:
/* mySVC */
static void Custom_Mycharnotify_Update_Char(void);
static void Custom_Mycharnotify_Send_Notification(void);

/* USER CODE BEGIN PFP */
void myTask_IMU(void) {
 800f4e2:	b480      	push	{r7}
 800f4e4:	af00      	add	r7, sp, #0

	//nomal_power_code
//	LSM9DS1_ReadGyro();
//	LSM9DS1_ReadAccel();
//	LSM9DS1_ReadMag();
}
 800f4e6:	bf00      	nop
 800f4e8:	46bd      	mov	sp, r7
 800f4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4ee:	4770      	bx	lr

0800f4f0 <myTask_BLE>:

void myTask_BLE(void) {
 800f4f0:	b580      	push	{r7, lr}
 800f4f2:	b086      	sub	sp, #24
 800f4f4:	af00      	add	r7, sp, #0

	int16_t accel_x_int = (int16_t) (accel_x * 1000);
 800f4f6:	4b78      	ldr	r3, [pc, #480]	@ (800f6d8 <myTask_BLE+0x1e8>)
 800f4f8:	edd3 7a00 	vldr	s15, [r3]
 800f4fc:	ed9f 7a77 	vldr	s14, [pc, #476]	@ 800f6dc <myTask_BLE+0x1ec>
 800f500:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f504:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f508:	ee17 3a90 	vmov	r3, s15
 800f50c:	82fb      	strh	r3, [r7, #22]
	int16_t accel_y_int = (int16_t) (accel_y * 1000);
 800f50e:	4b74      	ldr	r3, [pc, #464]	@ (800f6e0 <myTask_BLE+0x1f0>)
 800f510:	edd3 7a00 	vldr	s15, [r3]
 800f514:	ed9f 7a71 	vldr	s14, [pc, #452]	@ 800f6dc <myTask_BLE+0x1ec>
 800f518:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f51c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f520:	ee17 3a90 	vmov	r3, s15
 800f524:	82bb      	strh	r3, [r7, #20]
	int16_t accel_z_int = (int16_t) (accel_z * 1000);
 800f526:	4b6f      	ldr	r3, [pc, #444]	@ (800f6e4 <myTask_BLE+0x1f4>)
 800f528:	edd3 7a00 	vldr	s15, [r3]
 800f52c:	ed9f 7a6b 	vldr	s14, [pc, #428]	@ 800f6dc <myTask_BLE+0x1ec>
 800f530:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f534:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f538:	ee17 3a90 	vmov	r3, s15
 800f53c:	827b      	strh	r3, [r7, #18]

	int16_t gyro_x_int = (int16_t) (gyro_x * 1000);
 800f53e:	4b6a      	ldr	r3, [pc, #424]	@ (800f6e8 <myTask_BLE+0x1f8>)
 800f540:	edd3 7a00 	vldr	s15, [r3]
 800f544:	ed9f 7a65 	vldr	s14, [pc, #404]	@ 800f6dc <myTask_BLE+0x1ec>
 800f548:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f54c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f550:	ee17 3a90 	vmov	r3, s15
 800f554:	823b      	strh	r3, [r7, #16]
	int16_t gyro_y_int = (int16_t) (gyro_y * 1000);
 800f556:	4b65      	ldr	r3, [pc, #404]	@ (800f6ec <myTask_BLE+0x1fc>)
 800f558:	edd3 7a00 	vldr	s15, [r3]
 800f55c:	ed9f 7a5f 	vldr	s14, [pc, #380]	@ 800f6dc <myTask_BLE+0x1ec>
 800f560:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f564:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f568:	ee17 3a90 	vmov	r3, s15
 800f56c:	81fb      	strh	r3, [r7, #14]
	int16_t gyro_z_int = (int16_t) (gyro_z * 1000);
 800f56e:	4b60      	ldr	r3, [pc, #384]	@ (800f6f0 <myTask_BLE+0x200>)
 800f570:	edd3 7a00 	vldr	s15, [r3]
 800f574:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 800f6dc <myTask_BLE+0x1ec>
 800f578:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f57c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f580:	ee17 3a90 	vmov	r3, s15
 800f584:	81bb      	strh	r3, [r7, #12]

//	int16_t mag_x_int = (int16_t) (mag_x * 1000);
//	int16_t mag_y_int = (int16_t) (mag_y * 1000);
//	int16_t mag_z_int = (int16_t) (mag_z * 1000);

	int16_t q0_int = (int16_t) (q0 * 1000);
 800f586:	4b5b      	ldr	r3, [pc, #364]	@ (800f6f4 <myTask_BLE+0x204>)
 800f588:	edd3 7a00 	vldr	s15, [r3]
 800f58c:	ed9f 7a53 	vldr	s14, [pc, #332]	@ 800f6dc <myTask_BLE+0x1ec>
 800f590:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f594:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f598:	ee17 3a90 	vmov	r3, s15
 800f59c:	817b      	strh	r3, [r7, #10]
	int16_t q1_int = (int16_t) (q1 * 1000);
 800f59e:	4b56      	ldr	r3, [pc, #344]	@ (800f6f8 <myTask_BLE+0x208>)
 800f5a0:	edd3 7a00 	vldr	s15, [r3]
 800f5a4:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 800f6dc <myTask_BLE+0x1ec>
 800f5a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f5ac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f5b0:	ee17 3a90 	vmov	r3, s15
 800f5b4:	813b      	strh	r3, [r7, #8]
	int16_t q2_int = (int16_t) (q2 * 1000);
 800f5b6:	4b51      	ldr	r3, [pc, #324]	@ (800f6fc <myTask_BLE+0x20c>)
 800f5b8:	edd3 7a00 	vldr	s15, [r3]
 800f5bc:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 800f6dc <myTask_BLE+0x1ec>
 800f5c0:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f5c4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f5c8:	ee17 3a90 	vmov	r3, s15
 800f5cc:	80fb      	strh	r3, [r7, #6]
	int16_t q3_int = (int16_t) (q3 * 1000);
 800f5ce:	4b4c      	ldr	r3, [pc, #304]	@ (800f700 <myTask_BLE+0x210>)
 800f5d0:	edd3 7a00 	vldr	s15, [r3]
 800f5d4:	ed9f 7a41 	vldr	s14, [pc, #260]	@ 800f6dc <myTask_BLE+0x1ec>
 800f5d8:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f5dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f5e0:	ee17 3a90 	vmov	r3, s15
 800f5e4:	80bb      	strh	r3, [r7, #4]

	UpdateCharData[0] = (uint8_t) (accel_x_int >> 8);
 800f5e6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800f5ea:	121b      	asrs	r3, r3, #8
 800f5ec:	b21b      	sxth	r3, r3
 800f5ee:	b2da      	uxtb	r2, r3
 800f5f0:	4b44      	ldr	r3, [pc, #272]	@ (800f704 <myTask_BLE+0x214>)
 800f5f2:	701a      	strb	r2, [r3, #0]
	UpdateCharData[1] = (uint8_t) (accel_x_int & 0xFF);
 800f5f4:	8afb      	ldrh	r3, [r7, #22]
 800f5f6:	b2da      	uxtb	r2, r3
 800f5f8:	4b42      	ldr	r3, [pc, #264]	@ (800f704 <myTask_BLE+0x214>)
 800f5fa:	705a      	strb	r2, [r3, #1]
	UpdateCharData[2] = (uint8_t) (accel_y_int >> 8);
 800f5fc:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800f600:	121b      	asrs	r3, r3, #8
 800f602:	b21b      	sxth	r3, r3
 800f604:	b2da      	uxtb	r2, r3
 800f606:	4b3f      	ldr	r3, [pc, #252]	@ (800f704 <myTask_BLE+0x214>)
 800f608:	709a      	strb	r2, [r3, #2]
	UpdateCharData[3] = (uint8_t) (accel_y_int & 0xFF);
 800f60a:	8abb      	ldrh	r3, [r7, #20]
 800f60c:	b2da      	uxtb	r2, r3
 800f60e:	4b3d      	ldr	r3, [pc, #244]	@ (800f704 <myTask_BLE+0x214>)
 800f610:	70da      	strb	r2, [r3, #3]
	UpdateCharData[4] = (uint8_t) (accel_z_int >> 8);
 800f612:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f616:	121b      	asrs	r3, r3, #8
 800f618:	b21b      	sxth	r3, r3
 800f61a:	b2da      	uxtb	r2, r3
 800f61c:	4b39      	ldr	r3, [pc, #228]	@ (800f704 <myTask_BLE+0x214>)
 800f61e:	711a      	strb	r2, [r3, #4]
	UpdateCharData[5] = (uint8_t) (accel_z_int & 0xFF);
 800f620:	8a7b      	ldrh	r3, [r7, #18]
 800f622:	b2da      	uxtb	r2, r3
 800f624:	4b37      	ldr	r3, [pc, #220]	@ (800f704 <myTask_BLE+0x214>)
 800f626:	715a      	strb	r2, [r3, #5]

	UpdateCharData[6] = (uint8_t) (gyro_x_int >> 8);
 800f628:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800f62c:	121b      	asrs	r3, r3, #8
 800f62e:	b21b      	sxth	r3, r3
 800f630:	b2da      	uxtb	r2, r3
 800f632:	4b34      	ldr	r3, [pc, #208]	@ (800f704 <myTask_BLE+0x214>)
 800f634:	719a      	strb	r2, [r3, #6]
	UpdateCharData[7] = (uint8_t) (gyro_x_int & 0xFF);
 800f636:	8a3b      	ldrh	r3, [r7, #16]
 800f638:	b2da      	uxtb	r2, r3
 800f63a:	4b32      	ldr	r3, [pc, #200]	@ (800f704 <myTask_BLE+0x214>)
 800f63c:	71da      	strb	r2, [r3, #7]
	UpdateCharData[8] = (uint8_t) (gyro_y_int >> 8);
 800f63e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800f642:	121b      	asrs	r3, r3, #8
 800f644:	b21b      	sxth	r3, r3
 800f646:	b2da      	uxtb	r2, r3
 800f648:	4b2e      	ldr	r3, [pc, #184]	@ (800f704 <myTask_BLE+0x214>)
 800f64a:	721a      	strb	r2, [r3, #8]

	UpdateCharData[9] = (uint8_t) (gyro_y_int & 0xFF);
 800f64c:	89fb      	ldrh	r3, [r7, #14]
 800f64e:	b2da      	uxtb	r2, r3
 800f650:	4b2c      	ldr	r3, [pc, #176]	@ (800f704 <myTask_BLE+0x214>)
 800f652:	725a      	strb	r2, [r3, #9]
	UpdateCharData[10] = (uint8_t) (gyro_z_int >> 8);
 800f654:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800f658:	121b      	asrs	r3, r3, #8
 800f65a:	b21b      	sxth	r3, r3
 800f65c:	b2da      	uxtb	r2, r3
 800f65e:	4b29      	ldr	r3, [pc, #164]	@ (800f704 <myTask_BLE+0x214>)
 800f660:	729a      	strb	r2, [r3, #10]
	UpdateCharData[11] = (uint8_t) (gyro_z_int & 0xFF);
 800f662:	89bb      	ldrh	r3, [r7, #12]
 800f664:	b2da      	uxtb	r2, r3
 800f666:	4b27      	ldr	r3, [pc, #156]	@ (800f704 <myTask_BLE+0x214>)
 800f668:	72da      	strb	r2, [r3, #11]

	UpdateCharData[12] = (uint8_t) (q0_int >> 8);
 800f66a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800f66e:	121b      	asrs	r3, r3, #8
 800f670:	b21b      	sxth	r3, r3
 800f672:	b2da      	uxtb	r2, r3
 800f674:	4b23      	ldr	r3, [pc, #140]	@ (800f704 <myTask_BLE+0x214>)
 800f676:	731a      	strb	r2, [r3, #12]
	UpdateCharData[13] = (uint8_t) (q0_int & 0xFF);
 800f678:	897b      	ldrh	r3, [r7, #10]
 800f67a:	b2da      	uxtb	r2, r3
 800f67c:	4b21      	ldr	r3, [pc, #132]	@ (800f704 <myTask_BLE+0x214>)
 800f67e:	735a      	strb	r2, [r3, #13]
	UpdateCharData[14] = (uint8_t) (q1_int >> 8);
 800f680:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800f684:	121b      	asrs	r3, r3, #8
 800f686:	b21b      	sxth	r3, r3
 800f688:	b2da      	uxtb	r2, r3
 800f68a:	4b1e      	ldr	r3, [pc, #120]	@ (800f704 <myTask_BLE+0x214>)
 800f68c:	739a      	strb	r2, [r3, #14]
	UpdateCharData[15] = (uint8_t) (q1_int & 0xFF);
 800f68e:	893b      	ldrh	r3, [r7, #8]
 800f690:	b2da      	uxtb	r2, r3
 800f692:	4b1c      	ldr	r3, [pc, #112]	@ (800f704 <myTask_BLE+0x214>)
 800f694:	73da      	strb	r2, [r3, #15]
	UpdateCharData[16] = (uint8_t) (q2_int >> 8);
 800f696:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800f69a:	121b      	asrs	r3, r3, #8
 800f69c:	b21b      	sxth	r3, r3
 800f69e:	b2da      	uxtb	r2, r3
 800f6a0:	4b18      	ldr	r3, [pc, #96]	@ (800f704 <myTask_BLE+0x214>)
 800f6a2:	741a      	strb	r2, [r3, #16]
	UpdateCharData[17] = (uint8_t) (q2_int & 0xFF);
 800f6a4:	88fb      	ldrh	r3, [r7, #6]
 800f6a6:	b2da      	uxtb	r2, r3
 800f6a8:	4b16      	ldr	r3, [pc, #88]	@ (800f704 <myTask_BLE+0x214>)
 800f6aa:	745a      	strb	r2, [r3, #17]
	UpdateCharData[18] = (uint8_t) (q3_int >> 8);
 800f6ac:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800f6b0:	121b      	asrs	r3, r3, #8
 800f6b2:	b21b      	sxth	r3, r3
 800f6b4:	b2da      	uxtb	r2, r3
 800f6b6:	4b13      	ldr	r3, [pc, #76]	@ (800f704 <myTask_BLE+0x214>)
 800f6b8:	749a      	strb	r2, [r3, #18]
	UpdateCharData[19] = (uint8_t) (q3_int & 0xFF);
 800f6ba:	88bb      	ldrh	r3, [r7, #4]
 800f6bc:	b2da      	uxtb	r2, r3
 800f6be:	4b11      	ldr	r3, [pc, #68]	@ (800f704 <myTask_BLE+0x214>)
 800f6c0:	74da      	strb	r2, [r3, #19]

	Custom_Mycharnotify_Update_Char();
 800f6c2:	f000 f859 	bl	800f778 <Custom_Mycharnotify_Update_Char>

	UTIL_SEQ_SetTask(1 << CFG_TASK_MY_TASK_IMU, CFG_SCH_PRIO_0);
 800f6c6:	2100      	movs	r1, #0
 800f6c8:	2008      	movs	r0, #8
 800f6ca:	f000 fdb1 	bl	8010230 <UTIL_SEQ_SetTask>
//	UTIL_SEQ_SetTask(1 << CFG_TASK_MY_TASK_BLE, CFG_SCH_PRIO_0);
}
 800f6ce:	bf00      	nop
 800f6d0:	3718      	adds	r7, #24
 800f6d2:	46bd      	mov	sp, r7
 800f6d4:	bd80      	pop	{r7, pc}
 800f6d6:	bf00      	nop
 800f6d8:	20000380 	.word	0x20000380
 800f6dc:	447a0000 	.word	0x447a0000
 800f6e0:	20000384 	.word	0x20000384
 800f6e4:	20000388 	.word	0x20000388
 800f6e8:	2000038c 	.word	0x2000038c
 800f6ec:	20000390 	.word	0x20000390
 800f6f0:	20000394 	.word	0x20000394
 800f6f4:	20000008 	.word	0x20000008
 800f6f8:	20000480 	.word	0x20000480
 800f6fc:	20000484 	.word	0x20000484
 800f700:	20000488 	.word	0x20000488
 800f704:	20002cc8 	.word	0x20002cc8

0800f708 <Custom_STM_App_Notification>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void Custom_STM_App_Notification(Custom_STM_App_Notification_evt_t *pNotification)
{
 800f708:	b480      	push	{r7}
 800f70a:	b083      	sub	sp, #12
 800f70c:	af00      	add	r7, sp, #0
 800f70e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_1 */

  /* USER CODE END CUSTOM_STM_App_Notification_1 */
  switch (pNotification->Custom_Evt_Opcode)
 800f710:	687b      	ldr	r3, [r7, #4]
 800f712:	781b      	ldrb	r3, [r3, #0]
 800f714:	2b03      	cmp	r3, #3
 800f716:	d80b      	bhi.n	800f730 <Custom_STM_App_Notification+0x28>
 800f718:	a201      	add	r2, pc, #4	@ (adr r2, 800f720 <Custom_STM_App_Notification+0x18>)
 800f71a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f71e:	bf00      	nop
 800f720:	0800f731 	.word	0x0800f731
 800f724:	0800f731 	.word	0x0800f731
 800f728:	0800f731 	.word	0x0800f731
 800f72c:	0800f731 	.word	0x0800f731

    default:
      /* USER CODE BEGIN CUSTOM_STM_App_Notification_default */

      /* USER CODE END CUSTOM_STM_App_Notification_default */
      break;
 800f730:	bf00      	nop
  }
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_2 */

  /* USER CODE END CUSTOM_STM_App_Notification_2 */
  return;
 800f732:	bf00      	nop
}
 800f734:	370c      	adds	r7, #12
 800f736:	46bd      	mov	sp, r7
 800f738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f73c:	4770      	bx	lr
 800f73e:	bf00      	nop

0800f740 <Custom_APP_Notification>:

void Custom_APP_Notification(Custom_App_ConnHandle_Not_evt_t *pNotification)
{
 800f740:	b480      	push	{r7}
 800f742:	b083      	sub	sp, #12
 800f744:	af00      	add	r7, sp, #0
 800f746:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_APP_Notification_1 */

  /* USER CODE END CUSTOM_APP_Notification_1 */

  switch (pNotification->Custom_Evt_Opcode)
 800f748:	687b      	ldr	r3, [r7, #4]
 800f74a:	781b      	ldrb	r3, [r3, #0]
 800f74c:	2b00      	cmp	r3, #0
 800f74e:	d002      	beq.n	800f756 <Custom_APP_Notification+0x16>
 800f750:	2b01      	cmp	r3, #1
 800f752:	d002      	beq.n	800f75a <Custom_APP_Notification+0x1a>

    default:
      /* USER CODE BEGIN CUSTOM_APP_Notification_default */

      /* USER CODE END CUSTOM_APP_Notification_default */
      break;
 800f754:	e002      	b.n	800f75c <Custom_APP_Notification+0x1c>
      break;
 800f756:	bf00      	nop
 800f758:	e000      	b.n	800f75c <Custom_APP_Notification+0x1c>
      break;
 800f75a:	bf00      	nop

  /* USER CODE BEGIN CUSTOM_APP_Notification_2 */

  /* USER CODE END CUSTOM_APP_Notification_2 */

  return;
 800f75c:	bf00      	nop
}
 800f75e:	370c      	adds	r7, #12
 800f760:	46bd      	mov	sp, r7
 800f762:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f766:	4770      	bx	lr

0800f768 <Custom_APP_Init>:

void Custom_APP_Init(void)
{
 800f768:	b480      	push	{r7}
 800f76a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CUSTOM_APP_Init */

  /* USER CODE END CUSTOM_APP_Init */
  return;
 800f76c:	bf00      	nop
}
 800f76e:	46bd      	mov	sp, r7
 800f770:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f774:	4770      	bx	lr
	...

0800f778 <Custom_Mycharnotify_Update_Char>:
 *
 *************************************************************/

/* mySVC */
__USED void Custom_Mycharnotify_Update_Char(void) /* Property Read */
{
 800f778:	b580      	push	{r7, lr}
 800f77a:	b082      	sub	sp, #8
 800f77c:	af00      	add	r7, sp, #0
  uint8_t updateflag = 0;
 800f77e:	2300      	movs	r3, #0
 800f780:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN Mycharnotify_UC_1*/
	updateflag = 1;
 800f782:	2301      	movs	r3, #1
 800f784:	71fb      	strb	r3, [r7, #7]
  /* USER CODE END Mycharnotify_UC_1*/

  if (updateflag != 0)
 800f786:	79fb      	ldrb	r3, [r7, #7]
 800f788:	2b00      	cmp	r3, #0
 800f78a:	d004      	beq.n	800f796 <Custom_Mycharnotify_Update_Char+0x1e>
  {
    Custom_STM_App_Update_Char(CUSTOM_STM_MYCHARNOTIFY, (uint8_t *)UpdateCharData);
 800f78c:	4904      	ldr	r1, [pc, #16]	@ (800f7a0 <Custom_Mycharnotify_Update_Char+0x28>)
 800f78e:	2001      	movs	r0, #1
 800f790:	f000 f960 	bl	800fa54 <Custom_STM_App_Update_Char>
  }

  /* USER CODE BEGIN Mycharnotify_UC_Last*/

  /* USER CODE END Mycharnotify_UC_Last*/
  return;
 800f794:	bf00      	nop
 800f796:	bf00      	nop
}
 800f798:	3708      	adds	r7, #8
 800f79a:	46bd      	mov	sp, r7
 800f79c:	bd80      	pop	{r7, pc}
 800f79e:	bf00      	nop
 800f7a0:	20002cc8 	.word	0x20002cc8

0800f7a4 <Custom_STM_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t Custom_STM_Event_Handler(void *Event)
{
 800f7a4:	b580      	push	{r7, lr}
 800f7a6:	b08c      	sub	sp, #48	@ 0x30
 800f7a8:	af00      	add	r7, sp, #0
 800f7aa:	6078      	str	r0, [r7, #4]
  Custom_STM_App_Notification_evt_t     Notification;
  /* USER CODE BEGIN Custom_STM_Event_Handler_1 */

  /* USER CODE END Custom_STM_Event_Handler_1 */

  return_value = SVCCTL_EvtNotAck;
 800f7ac:	2300      	movs	r3, #0
 800f7ae:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 800f7b2:	687b      	ldr	r3, [r7, #4]
 800f7b4:	3301      	adds	r3, #1
 800f7b6:	62bb      	str	r3, [r7, #40]	@ 0x28

  switch (event_pckt->evt)
 800f7b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f7ba:	781b      	ldrb	r3, [r3, #0]
 800f7bc:	2bff      	cmp	r3, #255	@ 0xff
 800f7be:	f040 808e 	bne.w	800f8de <Custom_STM_Event_Handler+0x13a>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
      blecore_evt = (evt_blecore_aci*)event_pckt->data;
 800f7c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f7c4:	3302      	adds	r3, #2
 800f7c6:	627b      	str	r3, [r7, #36]	@ 0x24
      switch (blecore_evt->ecode)
 800f7c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f7ca:	881b      	ldrh	r3, [r3, #0]
 800f7cc:	b29b      	uxth	r3, r3
 800f7ce:	f6a3 4301 	subw	r3, r3, #3073	@ 0xc01
 800f7d2:	2b1a      	cmp	r3, #26
 800f7d4:	d87f      	bhi.n	800f8d6 <Custom_STM_Event_Handler+0x132>
 800f7d6:	a201      	add	r2, pc, #4	@ (adr r2, 800f7dc <Custom_STM_Event_Handler+0x38>)
 800f7d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f7dc:	0800f849 	.word	0x0800f849
 800f7e0:	0800f8d7 	.word	0x0800f8d7
 800f7e4:	0800f8d7 	.word	0x0800f8d7
 800f7e8:	0800f8d7 	.word	0x0800f8d7
 800f7ec:	0800f8d7 	.word	0x0800f8d7
 800f7f0:	0800f8d7 	.word	0x0800f8d7
 800f7f4:	0800f8d7 	.word	0x0800f8d7
 800f7f8:	0800f8d7 	.word	0x0800f8d7
 800f7fc:	0800f8d7 	.word	0x0800f8d7
 800f800:	0800f8d7 	.word	0x0800f8d7
 800f804:	0800f8d7 	.word	0x0800f8d7
 800f808:	0800f8d7 	.word	0x0800f8d7
 800f80c:	0800f8d7 	.word	0x0800f8d7
 800f810:	0800f8d7 	.word	0x0800f8d7
 800f814:	0800f8d7 	.word	0x0800f8d7
 800f818:	0800f8d7 	.word	0x0800f8d7
 800f81c:	0800f8d7 	.word	0x0800f8d7
 800f820:	0800f8d7 	.word	0x0800f8d7
 800f824:	0800f8d7 	.word	0x0800f8d7
 800f828:	0800f8d7 	.word	0x0800f8d7
 800f82c:	0800f8d7 	.word	0x0800f8d7
 800f830:	0800f8d7 	.word	0x0800f8d7
 800f834:	0800f8d7 	.word	0x0800f8d7
 800f838:	0800f8d7 	.word	0x0800f8d7
 800f83c:	0800f8d7 	.word	0x0800f8d7
 800f840:	0800f8d7 	.word	0x0800f8d7
 800f844:	0800f8b9 	.word	0x0800f8b9
      {
        case ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE:
          /* USER CODE BEGIN EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_BEGIN */

          /* USER CODE END EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_BEGIN */
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blecore_evt->data;
 800f848:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f84a:	3302      	adds	r3, #2
 800f84c:	61fb      	str	r3, [r7, #28]
          if (attribute_modified->Attr_Handle == (CustomContext.CustomMycharnotifyHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))
 800f84e:	69fb      	ldr	r3, [r7, #28]
 800f850:	885b      	ldrh	r3, [r3, #2]
 800f852:	b29b      	uxth	r3, r3
 800f854:	461a      	mov	r2, r3
 800f856:	4b25      	ldr	r3, [pc, #148]	@ (800f8ec <Custom_STM_Event_Handler+0x148>)
 800f858:	889b      	ldrh	r3, [r3, #4]
 800f85a:	3302      	adds	r3, #2
 800f85c:	429a      	cmp	r2, r3
 800f85e:	d119      	bne.n	800f894 <Custom_STM_Event_Handler+0xf0>
          {
            return_value = SVCCTL_EvtAckFlowEnable;
 800f860:	2301      	movs	r3, #1
 800f862:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            /* USER CODE BEGIN CUSTOM_STM_Service_1_Char_2 */
            /* USER CODE END CUSTOM_STM_Service_1_Char_2 */
            switch (attribute_modified->Attr_Data[0])
 800f866:	69fb      	ldr	r3, [r7, #28]
 800f868:	7a1b      	ldrb	r3, [r3, #8]
 800f86a:	2b00      	cmp	r3, #0
 800f86c:	d002      	beq.n	800f874 <Custom_STM_Event_Handler+0xd0>
 800f86e:	2b01      	cmp	r3, #1
 800f870:	d008      	beq.n	800f884 <Custom_STM_Event_Handler+0xe0>

              default:
                /* USER CODE BEGIN CUSTOM_STM_Service_1_Char_2_default */

                /* USER CODE END CUSTOM_STM_Service_1_Char_2_default */
              break;
 800f872:	e020      	b.n	800f8b6 <Custom_STM_Event_Handler+0x112>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_MYCHARNOTIFY_NOTIFY_DISABLED_EVT;
 800f874:	2302      	movs	r3, #2
 800f876:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 800f878:	f107 0308 	add.w	r3, r7, #8
 800f87c:	4618      	mov	r0, r3
 800f87e:	f7ff ff43 	bl	800f708 <Custom_STM_App_Notification>
                break;
 800f882:	e018      	b.n	800f8b6 <Custom_STM_Event_Handler+0x112>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_MYCHARNOTIFY_NOTIFY_ENABLED_EVT;
 800f884:	2301      	movs	r3, #1
 800f886:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 800f888:	f107 0308 	add.w	r3, r7, #8
 800f88c:	4618      	mov	r0, r3
 800f88e:	f7ff ff3b 	bl	800f708 <Custom_STM_App_Notification>
                break;
 800f892:	e010      	b.n	800f8b6 <Custom_STM_Event_Handler+0x112>
            }
          }  /* if (attribute_modified->Attr_Handle == (CustomContext.CustomMycharnotifyHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))*/

          else if (attribute_modified->Attr_Handle == (CustomContext.CustomMycharwriteHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 800f894:	69fb      	ldr	r3, [r7, #28]
 800f896:	885b      	ldrh	r3, [r3, #2]
 800f898:	b29b      	uxth	r3, r3
 800f89a:	461a      	mov	r2, r3
 800f89c:	4b13      	ldr	r3, [pc, #76]	@ (800f8ec <Custom_STM_Event_Handler+0x148>)
 800f89e:	885b      	ldrh	r3, [r3, #2]
 800f8a0:	3301      	adds	r3, #1
 800f8a2:	429a      	cmp	r2, r3
 800f8a4:	d119      	bne.n	800f8da <Custom_STM_Event_Handler+0x136>
          {
            return_value = SVCCTL_EvtAckFlowEnable;
 800f8a6:	2301      	movs	r3, #1
 800f8a8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            /* USER CODE BEGIN CUSTOM_STM_Service_1_Char_1_ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE */
            HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800f8ac:	2101      	movs	r1, #1
 800f8ae:	4810      	ldr	r0, [pc, #64]	@ (800f8f0 <Custom_STM_Event_Handler+0x14c>)
 800f8b0:	f7f8 fe66 	bl	8008580 <HAL_GPIO_TogglePin>
            /* USER CODE END CUSTOM_STM_Service_1_Char_1_ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE */
          } /* if (attribute_modified->Attr_Handle == (CustomContext.CustomMycharwriteHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))*/
          /* USER CODE BEGIN EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_END */

          /* USER CODE END EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_END */
          break;
 800f8b4:	e011      	b.n	800f8da <Custom_STM_Event_Handler+0x136>
 800f8b6:	e010      	b.n	800f8da <Custom_STM_Event_Handler+0x136>
		case ACI_GATT_NOTIFICATION_COMPLETE_VSEVT_CODE:
        {
          /* USER CODE BEGIN EVT_BLUE_GATT_NOTIFICATION_COMPLETE_BEGIN */

          /* USER CODE END EVT_BLUE_GATT_NOTIFICATION_COMPLETE_BEGIN */
          notification_complete = (aci_gatt_notification_complete_event_rp0*)blecore_evt->data;
 800f8b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f8ba:	3302      	adds	r3, #2
 800f8bc:	623b      	str	r3, [r7, #32]
          Notification.Custom_Evt_Opcode = CUSTOM_STM_NOTIFICATION_COMPLETE_EVT;
 800f8be:	2303      	movs	r3, #3
 800f8c0:	723b      	strb	r3, [r7, #8]
          Notification.AttrHandle = notification_complete->Attr_Handle;
 800f8c2:	6a3b      	ldr	r3, [r7, #32]
 800f8c4:	881b      	ldrh	r3, [r3, #0]
 800f8c6:	b29b      	uxth	r3, r3
 800f8c8:	833b      	strh	r3, [r7, #24]
          Custom_STM_App_Notification(&Notification);
 800f8ca:	f107 0308 	add.w	r3, r7, #8
 800f8ce:	4618      	mov	r0, r3
 800f8d0:	f7ff ff1a 	bl	800f708 <Custom_STM_App_Notification>
          /* USER CODE BEGIN EVT_BLUE_GATT_NOTIFICATION_COMPLETE_END */

          /* USER CODE END EVT_BLUE_GATT_NOTIFICATION_COMPLETE_END */
          break;
 800f8d4:	e002      	b.n	800f8dc <Custom_STM_Event_Handler+0x138>
        /* USER CODE END BLECORE_EVT */
        default:
          /* USER CODE BEGIN EVT_DEFAULT */

          /* USER CODE END EVT_DEFAULT */
          break;
 800f8d6:	bf00      	nop
 800f8d8:	e002      	b.n	800f8e0 <Custom_STM_Event_Handler+0x13c>
          break;
 800f8da:	bf00      	nop
      }
      /* USER CODE BEGIN EVT_VENDOR*/

      /* USER CODE END EVT_VENDOR*/
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800f8dc:	e000      	b.n	800f8e0 <Custom_STM_Event_Handler+0x13c>

    default:
      /* USER CODE BEGIN EVENT_PCKT*/

      /* USER CODE END EVENT_PCKT*/
      break;
 800f8de:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_Event_Handler_2 */

  /* USER CODE END Custom_STM_Event_Handler_2 */

  return(return_value);
 800f8e0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}/* end Custom_STM_Event_Handler */
 800f8e4:	4618      	mov	r0, r3
 800f8e6:	3730      	adds	r7, #48	@ 0x30
 800f8e8:	46bd      	mov	sp, r7
 800f8ea:	bd80      	pop	{r7, pc}
 800f8ec:	20002ec8 	.word	0x20002ec8
 800f8f0:	48000400 	.word	0x48000400

0800f8f4 <SVCCTL_InitCustomSvc>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void SVCCTL_InitCustomSvc(void)
{
 800f8f4:	b580      	push	{r7, lr}
 800f8f6:	b08c      	sub	sp, #48	@ 0x30
 800f8f8:	af06      	add	r7, sp, #24

  Char_UUID_t  uuid;
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800f8fa:	2392      	movs	r3, #146	@ 0x92
 800f8fc:	75fb      	strb	r3, [r7, #23]
  /* USER CODE END SVCCTL_InitCustomSvc_1 */

  /**
   *  Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(Custom_STM_Event_Handler);
 800f8fe:	484f      	ldr	r0, [pc, #316]	@ (800fa3c <SVCCTL_InitCustomSvc+0x148>)
 800f900:	f7fe fb7a 	bl	800dff8 <SVCCTL_RegisterSvcHandler>
   *                              = 6
   *
   * This value doesn't take into account number of descriptors manually added
   * In case of descriptors added, please update the max_attr_record value accordingly in the next SVCCTL_InitService User Section
   */
  max_attr_record = 6;
 800f904:	2306      	movs	r3, #6
 800f906:	75bb      	strb	r3, [r7, #22]
  /* USER CODE BEGIN SVCCTL_InitService */
  /* max_attr_record to be updated if descriptors have been added */

  /* USER CODE END SVCCTL_InitService */

  COPY_MYSVC_UUID(uuid.Char_UUID_128);
 800f908:	238f      	movs	r3, #143	@ 0x8f
 800f90a:	713b      	strb	r3, [r7, #4]
 800f90c:	23e5      	movs	r3, #229	@ 0xe5
 800f90e:	717b      	strb	r3, [r7, #5]
 800f910:	23b3      	movs	r3, #179	@ 0xb3
 800f912:	71bb      	strb	r3, [r7, #6]
 800f914:	23d5      	movs	r3, #213	@ 0xd5
 800f916:	71fb      	strb	r3, [r7, #7]
 800f918:	232e      	movs	r3, #46	@ 0x2e
 800f91a:	723b      	strb	r3, [r7, #8]
 800f91c:	237f      	movs	r3, #127	@ 0x7f
 800f91e:	727b      	strb	r3, [r7, #9]
 800f920:	234a      	movs	r3, #74	@ 0x4a
 800f922:	72bb      	strb	r3, [r7, #10]
 800f924:	2398      	movs	r3, #152	@ 0x98
 800f926:	72fb      	strb	r3, [r7, #11]
 800f928:	232a      	movs	r3, #42	@ 0x2a
 800f92a:	733b      	strb	r3, [r7, #12]
 800f92c:	2348      	movs	r3, #72	@ 0x48
 800f92e:	737b      	strb	r3, [r7, #13]
 800f930:	237a      	movs	r3, #122	@ 0x7a
 800f932:	73bb      	strb	r3, [r7, #14]
 800f934:	23cc      	movs	r3, #204	@ 0xcc
 800f936:	73fb      	strb	r3, [r7, #15]
 800f938:	2300      	movs	r3, #0
 800f93a:	743b      	strb	r3, [r7, #16]
 800f93c:	2300      	movs	r3, #0
 800f93e:	747b      	strb	r3, [r7, #17]
 800f940:	2300      	movs	r3, #0
 800f942:	74bb      	strb	r3, [r7, #18]
 800f944:	2300      	movs	r3, #0
 800f946:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_service(UUID_TYPE_128,
 800f948:	7dbb      	ldrb	r3, [r7, #22]
 800f94a:	1d39      	adds	r1, r7, #4
 800f94c:	4a3c      	ldr	r2, [pc, #240]	@ (800fa40 <SVCCTL_InitCustomSvc+0x14c>)
 800f94e:	9200      	str	r2, [sp, #0]
 800f950:	2201      	movs	r2, #1
 800f952:	2002      	movs	r0, #2
 800f954:	f7fd fdc4 	bl	800d4e0 <aci_gatt_add_service>
 800f958:	4603      	mov	r3, r0
 800f95a:	75fb      	strb	r3, [r7, #23]
  }

  /**
   *  myCharWrite
   */
  COPY_MYCHARWRITE_UUID(uuid.Char_UUID_128);
 800f95c:	2319      	movs	r3, #25
 800f95e:	713b      	strb	r3, [r7, #4]
 800f960:	23ed      	movs	r3, #237	@ 0xed
 800f962:	717b      	strb	r3, [r7, #5]
 800f964:	2382      	movs	r3, #130	@ 0x82
 800f966:	71bb      	strb	r3, [r7, #6]
 800f968:	23ae      	movs	r3, #174	@ 0xae
 800f96a:	71fb      	strb	r3, [r7, #7]
 800f96c:	23ed      	movs	r3, #237	@ 0xed
 800f96e:	723b      	strb	r3, [r7, #8]
 800f970:	2321      	movs	r3, #33	@ 0x21
 800f972:	727b      	strb	r3, [r7, #9]
 800f974:	234c      	movs	r3, #76	@ 0x4c
 800f976:	72bb      	strb	r3, [r7, #10]
 800f978:	239d      	movs	r3, #157	@ 0x9d
 800f97a:	72fb      	strb	r3, [r7, #11]
 800f97c:	2341      	movs	r3, #65	@ 0x41
 800f97e:	733b      	strb	r3, [r7, #12]
 800f980:	2345      	movs	r3, #69	@ 0x45
 800f982:	737b      	strb	r3, [r7, #13]
 800f984:	2322      	movs	r3, #34	@ 0x22
 800f986:	73bb      	strb	r3, [r7, #14]
 800f988:	238e      	movs	r3, #142	@ 0x8e
 800f98a:	73fb      	strb	r3, [r7, #15]
 800f98c:	2300      	movs	r3, #0
 800f98e:	743b      	strb	r3, [r7, #16]
 800f990:	2300      	movs	r3, #0
 800f992:	747b      	strb	r3, [r7, #17]
 800f994:	2300      	movs	r3, #0
 800f996:	74bb      	strb	r3, [r7, #18]
 800f998:	2300      	movs	r3, #0
 800f99a:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomMysvcHdle,
 800f99c:	4b28      	ldr	r3, [pc, #160]	@ (800fa40 <SVCCTL_InitCustomSvc+0x14c>)
 800f99e:	8818      	ldrh	r0, [r3, #0]
 800f9a0:	4b28      	ldr	r3, [pc, #160]	@ (800fa44 <SVCCTL_InitCustomSvc+0x150>)
 800f9a2:	881b      	ldrh	r3, [r3, #0]
 800f9a4:	1d3a      	adds	r2, r7, #4
 800f9a6:	4928      	ldr	r1, [pc, #160]	@ (800fa48 <SVCCTL_InitCustomSvc+0x154>)
 800f9a8:	9105      	str	r1, [sp, #20]
 800f9aa:	2100      	movs	r1, #0
 800f9ac:	9104      	str	r1, [sp, #16]
 800f9ae:	2110      	movs	r1, #16
 800f9b0:	9103      	str	r1, [sp, #12]
 800f9b2:	2101      	movs	r1, #1
 800f9b4:	9102      	str	r1, [sp, #8]
 800f9b6:	2100      	movs	r1, #0
 800f9b8:	9101      	str	r1, [sp, #4]
 800f9ba:	2108      	movs	r1, #8
 800f9bc:	9100      	str	r1, [sp, #0]
 800f9be:	2102      	movs	r1, #2
 800f9c0:	f7fd fe64 	bl	800d68c <aci_gatt_add_char>
 800f9c4:	4603      	mov	r3, r0
 800f9c6:	75fb      	strb	r3, [r7, #23]

  /* USER CODE END SVCCTL_Init_Service1_Char1 */
  /**
   *  myCharNotify
   */
  COPY_MYCHARNOTIFY_UUID(uuid.Char_UUID_128);
 800f9c8:	2300      	movs	r3, #0
 800f9ca:	713b      	strb	r3, [r7, #4]
 800f9cc:	2300      	movs	r3, #0
 800f9ce:	717b      	strb	r3, [r7, #5]
 800f9d0:	2300      	movs	r3, #0
 800f9d2:	71bb      	strb	r3, [r7, #6]
 800f9d4:	2300      	movs	r3, #0
 800f9d6:	71fb      	strb	r3, [r7, #7]
 800f9d8:	2300      	movs	r3, #0
 800f9da:	723b      	strb	r3, [r7, #8]
 800f9dc:	2300      	movs	r3, #0
 800f9de:	727b      	strb	r3, [r7, #9]
 800f9e0:	2300      	movs	r3, #0
 800f9e2:	72bb      	strb	r3, [r7, #10]
 800f9e4:	2300      	movs	r3, #0
 800f9e6:	72fb      	strb	r3, [r7, #11]
 800f9e8:	2300      	movs	r3, #0
 800f9ea:	733b      	strb	r3, [r7, #12]
 800f9ec:	2300      	movs	r3, #0
 800f9ee:	737b      	strb	r3, [r7, #13]
 800f9f0:	2300      	movs	r3, #0
 800f9f2:	73bb      	strb	r3, [r7, #14]
 800f9f4:	2300      	movs	r3, #0
 800f9f6:	73fb      	strb	r3, [r7, #15]
 800f9f8:	2300      	movs	r3, #0
 800f9fa:	743b      	strb	r3, [r7, #16]
 800f9fc:	2300      	movs	r3, #0
 800f9fe:	747b      	strb	r3, [r7, #17]
 800fa00:	2301      	movs	r3, #1
 800fa02:	74bb      	strb	r3, [r7, #18]
 800fa04:	2300      	movs	r3, #0
 800fa06:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomMysvcHdle,
 800fa08:	4b0d      	ldr	r3, [pc, #52]	@ (800fa40 <SVCCTL_InitCustomSvc+0x14c>)
 800fa0a:	8818      	ldrh	r0, [r3, #0]
 800fa0c:	4b0f      	ldr	r3, [pc, #60]	@ (800fa4c <SVCCTL_InitCustomSvc+0x158>)
 800fa0e:	881b      	ldrh	r3, [r3, #0]
 800fa10:	1d3a      	adds	r2, r7, #4
 800fa12:	490f      	ldr	r1, [pc, #60]	@ (800fa50 <SVCCTL_InitCustomSvc+0x15c>)
 800fa14:	9105      	str	r1, [sp, #20]
 800fa16:	2100      	movs	r1, #0
 800fa18:	9104      	str	r1, [sp, #16]
 800fa1a:	2110      	movs	r1, #16
 800fa1c:	9103      	str	r1, [sp, #12]
 800fa1e:	2107      	movs	r1, #7
 800fa20:	9102      	str	r1, [sp, #8]
 800fa22:	2100      	movs	r1, #0
 800fa24:	9101      	str	r1, [sp, #4]
 800fa26:	2110      	movs	r1, #16
 800fa28:	9100      	str	r1, [sp, #0]
 800fa2a:	2102      	movs	r1, #2
 800fa2c:	f7fd fe2e 	bl	800d68c <aci_gatt_add_char>
 800fa30:	4603      	mov	r3, r0
 800fa32:	75fb      	strb	r3, [r7, #23]

  /* USER CODE BEGIN SVCCTL_InitCustomSvc_2 */

  /* USER CODE END SVCCTL_InitCustomSvc_2 */

  return;
 800fa34:	bf00      	nop
}
 800fa36:	3718      	adds	r7, #24
 800fa38:	46bd      	mov	sp, r7
 800fa3a:	bd80      	pop	{r7, pc}
 800fa3c:	0800f7a5 	.word	0x0800f7a5
 800fa40:	20002ec8 	.word	0x20002ec8
 800fa44:	20000066 	.word	0x20000066
 800fa48:	20002eca 	.word	0x20002eca
 800fa4c:	20000068 	.word	0x20000068
 800fa50:	20002ecc 	.word	0x20002ecc

0800fa54 <Custom_STM_App_Update_Char>:
 * @param  CharOpcode: Characteristic identifier
 * @param  Service_Instance: Instance of the service to which the characteristic belongs
 *
 */
tBleStatus Custom_STM_App_Update_Char(Custom_STM_Char_Opcode_t CharOpcode, uint8_t *pPayload)
{
 800fa54:	b580      	push	{r7, lr}
 800fa56:	b086      	sub	sp, #24
 800fa58:	af02      	add	r7, sp, #8
 800fa5a:	4603      	mov	r3, r0
 800fa5c:	6039      	str	r1, [r7, #0]
 800fa5e:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800fa60:	2392      	movs	r3, #146	@ 0x92
 800fa62:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN Custom_STM_App_Update_Char_1 */

  /* USER CODE END Custom_STM_App_Update_Char_1 */

  switch (CharOpcode)
 800fa64:	79fb      	ldrb	r3, [r7, #7]
 800fa66:	2b00      	cmp	r3, #0
 800fa68:	d002      	beq.n	800fa70 <Custom_STM_App_Update_Char+0x1c>
 800fa6a:	2b01      	cmp	r3, #1
 800fa6c:	d01a      	beq.n	800faa4 <Custom_STM_App_Update_Char+0x50>

      /* USER CODE END CUSTOM_STM_App_Update_Service_1_Char_2*/
      break;

    default:
      break;
 800fa6e:	e029      	b.n	800fac4 <Custom_STM_App_Update_Char+0x70>
      ret = aci_gatt_update_char_value(CustomContext.CustomMysvcHdle,
 800fa70:	4b17      	ldr	r3, [pc, #92]	@ (800fad0 <Custom_STM_App_Update_Char+0x7c>)
 800fa72:	8818      	ldrh	r0, [r3, #0]
 800fa74:	4b16      	ldr	r3, [pc, #88]	@ (800fad0 <Custom_STM_App_Update_Char+0x7c>)
 800fa76:	8859      	ldrh	r1, [r3, #2]
 800fa78:	4b16      	ldr	r3, [pc, #88]	@ (800fad4 <Custom_STM_App_Update_Char+0x80>)
 800fa7a:	881b      	ldrh	r3, [r3, #0]
 800fa7c:	b2da      	uxtb	r2, r3
 800fa7e:	683b      	ldr	r3, [r7, #0]
 800fa80:	9300      	str	r3, [sp, #0]
 800fa82:	4613      	mov	r3, r2
 800fa84:	2200      	movs	r2, #0
 800fa86:	f7fd ff09 	bl	800d89c <aci_gatt_update_char_value>
 800fa8a:	4603      	mov	r3, r0
 800fa8c:	73fb      	strb	r3, [r7, #15]
      test4 = test4+1;
 800fa8e:	4b12      	ldr	r3, [pc, #72]	@ (800fad8 <Custom_STM_App_Update_Char+0x84>)
 800fa90:	edd3 7a00 	vldr	s15, [r3]
 800fa94:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800fa98:	ee77 7a87 	vadd.f32	s15, s15, s14
 800fa9c:	4b0e      	ldr	r3, [pc, #56]	@ (800fad8 <Custom_STM_App_Update_Char+0x84>)
 800fa9e:	edc3 7a00 	vstr	s15, [r3]
      break;
 800faa2:	e00f      	b.n	800fac4 <Custom_STM_App_Update_Char+0x70>
      ret = aci_gatt_update_char_value(CustomContext.CustomMysvcHdle,
 800faa4:	4b0a      	ldr	r3, [pc, #40]	@ (800fad0 <Custom_STM_App_Update_Char+0x7c>)
 800faa6:	8818      	ldrh	r0, [r3, #0]
 800faa8:	4b09      	ldr	r3, [pc, #36]	@ (800fad0 <Custom_STM_App_Update_Char+0x7c>)
 800faaa:	8899      	ldrh	r1, [r3, #4]
 800faac:	4b0b      	ldr	r3, [pc, #44]	@ (800fadc <Custom_STM_App_Update_Char+0x88>)
 800faae:	881b      	ldrh	r3, [r3, #0]
 800fab0:	b2da      	uxtb	r2, r3
 800fab2:	683b      	ldr	r3, [r7, #0]
 800fab4:	9300      	str	r3, [sp, #0]
 800fab6:	4613      	mov	r3, r2
 800fab8:	2200      	movs	r2, #0
 800faba:	f7fd feef 	bl	800d89c <aci_gatt_update_char_value>
 800fabe:	4603      	mov	r3, r0
 800fac0:	73fb      	strb	r3, [r7, #15]
      break;
 800fac2:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_App_Update_Char_2 */

  /* USER CODE END Custom_STM_App_Update_Char_2 */

  return ret;
 800fac4:	7bfb      	ldrb	r3, [r7, #15]
}
 800fac6:	4618      	mov	r0, r3
 800fac8:	3710      	adds	r7, #16
 800faca:	46bd      	mov	sp, r7
 800facc:	bd80      	pop	{r7, pc}
 800face:	bf00      	nop
 800fad0:	20002ec8 	.word	0x20002ec8
 800fad4:	20000066 	.word	0x20000066
 800fad8:	20002ed0 	.word	0x20002ed0
 800fadc:	20000068 	.word	0x20000068

0800fae0 <LL_PWR_EnableBootC2>:
{
 800fae0:	b480      	push	{r7}
 800fae2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 800fae4:	4b05      	ldr	r3, [pc, #20]	@ (800fafc <LL_PWR_EnableBootC2+0x1c>)
 800fae6:	68db      	ldr	r3, [r3, #12]
 800fae8:	4a04      	ldr	r2, [pc, #16]	@ (800fafc <LL_PWR_EnableBootC2+0x1c>)
 800faea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800faee:	60d3      	str	r3, [r2, #12]
}
 800faf0:	bf00      	nop
 800faf2:	46bd      	mov	sp, r7
 800faf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faf8:	4770      	bx	lr
 800fafa:	bf00      	nop
 800fafc:	58000400 	.word	0x58000400

0800fb00 <LL_C2_EXTI_EnableEvent_32_63>:
{
 800fb00:	b480      	push	{r7}
 800fb02:	b083      	sub	sp, #12
 800fb04:	af00      	add	r7, sp, #0
 800fb06:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 800fb08:	4b06      	ldr	r3, [pc, #24]	@ (800fb24 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800fb0a:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 800fb0e:	4905      	ldr	r1, [pc, #20]	@ (800fb24 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800fb10:	687b      	ldr	r3, [r7, #4]
 800fb12:	4313      	orrs	r3, r2
 800fb14:	f8c1 30d4 	str.w	r3, [r1, #212]	@ 0xd4
}
 800fb18:	bf00      	nop
 800fb1a:	370c      	adds	r7, #12
 800fb1c:	46bd      	mov	sp, r7
 800fb1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb22:	4770      	bx	lr
 800fb24:	58000800 	.word	0x58000800

0800fb28 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 800fb28:	b480      	push	{r7}
 800fb2a:	b083      	sub	sp, #12
 800fb2c:	af00      	add	r7, sp, #0
 800fb2e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 800fb30:	4b05      	ldr	r3, [pc, #20]	@ (800fb48 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800fb32:	6a1a      	ldr	r2, [r3, #32]
 800fb34:	4904      	ldr	r1, [pc, #16]	@ (800fb48 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800fb36:	687b      	ldr	r3, [r7, #4]
 800fb38:	4313      	orrs	r3, r2
 800fb3a:	620b      	str	r3, [r1, #32]
}
 800fb3c:	bf00      	nop
 800fb3e:	370c      	adds	r7, #12
 800fb40:	46bd      	mov	sp, r7
 800fb42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb46:	4770      	bx	lr
 800fb48:	58000800 	.word	0x58000800

0800fb4c <LL_AHB3_GRP1_EnableClock>:
{
 800fb4c:	b480      	push	{r7}
 800fb4e:	b085      	sub	sp, #20
 800fb50:	af00      	add	r7, sp, #0
 800fb52:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 800fb54:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800fb58:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800fb5a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800fb5e:	687b      	ldr	r3, [r7, #4]
 800fb60:	4313      	orrs	r3, r2
 800fb62:	650b      	str	r3, [r1, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800fb64:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800fb68:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800fb6a:	687b      	ldr	r3, [r7, #4]
 800fb6c:	4013      	ands	r3, r2
 800fb6e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800fb70:	68fb      	ldr	r3, [r7, #12]
}
 800fb72:	bf00      	nop
 800fb74:	3714      	adds	r7, #20
 800fb76:	46bd      	mov	sp, r7
 800fb78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb7c:	4770      	bx	lr

0800fb7e <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 800fb7e:	b480      	push	{r7}
 800fb80:	b085      	sub	sp, #20
 800fb82:	af00      	add	r7, sp, #0
 800fb84:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 800fb86:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800fb8a:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 800fb8e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800fb92:	687b      	ldr	r3, [r7, #4]
 800fb94:	4313      	orrs	r3, r2
 800fb96:	f8c1 3150 	str.w	r3, [r1, #336]	@ 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 800fb9a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800fb9e:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 800fba2:	687b      	ldr	r3, [r7, #4]
 800fba4:	4013      	ands	r3, r2
 800fba6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800fba8:	68fb      	ldr	r3, [r7, #12]
}
 800fbaa:	bf00      	nop
 800fbac:	3714      	adds	r7, #20
 800fbae:	46bd      	mov	sp, r7
 800fbb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbb4:	4770      	bx	lr

0800fbb6 <LL_C1_IPCC_EnableIT_TXF>:
  * @rmtoll C1CR          TXFIE         LL_C1_IPCC_EnableIT_TXF
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_TXF(IPCC_TypeDef *IPCCx)
{
 800fbb6:	b480      	push	{r7}
 800fbb8:	b083      	sub	sp, #12
 800fbba:	af00      	add	r7, sp, #0
 800fbbc:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 800fbbe:	687b      	ldr	r3, [r7, #4]
 800fbc0:	681b      	ldr	r3, [r3, #0]
 800fbc2:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800fbc6:	687b      	ldr	r3, [r7, #4]
 800fbc8:	601a      	str	r2, [r3, #0]
}
 800fbca:	bf00      	nop
 800fbcc:	370c      	adds	r7, #12
 800fbce:	46bd      	mov	sp, r7
 800fbd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbd4:	4770      	bx	lr

0800fbd6 <LL_C1_IPCC_EnableIT_RXO>:
  * @rmtoll C1CR          RXOIE         LL_C1_IPCC_EnableIT_RXO
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_RXO(IPCC_TypeDef *IPCCx)
{
 800fbd6:	b480      	push	{r7}
 800fbd8:	b083      	sub	sp, #12
 800fbda:	af00      	add	r7, sp, #0
 800fbdc:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 800fbde:	687b      	ldr	r3, [r7, #4]
 800fbe0:	681b      	ldr	r3, [r3, #0]
 800fbe2:	f043 0201 	orr.w	r2, r3, #1
 800fbe6:	687b      	ldr	r3, [r7, #4]
 800fbe8:	601a      	str	r2, [r3, #0]
}
 800fbea:	bf00      	nop
 800fbec:	370c      	adds	r7, #12
 800fbee:	46bd      	mov	sp, r7
 800fbf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbf4:	4770      	bx	lr

0800fbf6 <LL_C1_IPCC_EnableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800fbf6:	b480      	push	{r7}
 800fbf8:	b083      	sub	sp, #12
 800fbfa:	af00      	add	r7, sp, #0
 800fbfc:	6078      	str	r0, [r7, #4]
 800fbfe:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800fc00:	687b      	ldr	r3, [r7, #4]
 800fc02:	685a      	ldr	r2, [r3, #4]
 800fc04:	683b      	ldr	r3, [r7, #0]
 800fc06:	041b      	lsls	r3, r3, #16
 800fc08:	43db      	mvns	r3, r3
 800fc0a:	401a      	ands	r2, r3
 800fc0c:	687b      	ldr	r3, [r7, #4]
 800fc0e:	605a      	str	r2, [r3, #4]
}
 800fc10:	bf00      	nop
 800fc12:	370c      	adds	r7, #12
 800fc14:	46bd      	mov	sp, r7
 800fc16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc1a:	4770      	bx	lr

0800fc1c <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800fc1c:	b480      	push	{r7}
 800fc1e:	b083      	sub	sp, #12
 800fc20:	af00      	add	r7, sp, #0
 800fc22:	6078      	str	r0, [r7, #4]
 800fc24:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800fc26:	687b      	ldr	r3, [r7, #4]
 800fc28:	685a      	ldr	r2, [r3, #4]
 800fc2a:	683b      	ldr	r3, [r7, #0]
 800fc2c:	041b      	lsls	r3, r3, #16
 800fc2e:	431a      	orrs	r2, r3
 800fc30:	687b      	ldr	r3, [r7, #4]
 800fc32:	605a      	str	r2, [r3, #4]
}
 800fc34:	bf00      	nop
 800fc36:	370c      	adds	r7, #12
 800fc38:	46bd      	mov	sp, r7
 800fc3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc3e:	4770      	bx	lr

0800fc40 <LL_C1_IPCC_EnableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800fc40:	b480      	push	{r7}
 800fc42:	b083      	sub	sp, #12
 800fc44:	af00      	add	r7, sp, #0
 800fc46:	6078      	str	r0, [r7, #4]
 800fc48:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 800fc4a:	687b      	ldr	r3, [r7, #4]
 800fc4c:	685a      	ldr	r2, [r3, #4]
 800fc4e:	683b      	ldr	r3, [r7, #0]
 800fc50:	43db      	mvns	r3, r3
 800fc52:	401a      	ands	r2, r3
 800fc54:	687b      	ldr	r3, [r7, #4]
 800fc56:	605a      	str	r2, [r3, #4]
}
 800fc58:	bf00      	nop
 800fc5a:	370c      	adds	r7, #12
 800fc5c:	46bd      	mov	sp, r7
 800fc5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc62:	4770      	bx	lr

0800fc64 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800fc64:	b480      	push	{r7}
 800fc66:	b083      	sub	sp, #12
 800fc68:	af00      	add	r7, sp, #0
 800fc6a:	6078      	str	r0, [r7, #4]
 800fc6c:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 800fc6e:	687b      	ldr	r3, [r7, #4]
 800fc70:	683a      	ldr	r2, [r7, #0]
 800fc72:	609a      	str	r2, [r3, #8]
}
 800fc74:	bf00      	nop
 800fc76:	370c      	adds	r7, #12
 800fc78:	46bd      	mov	sp, r7
 800fc7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc7e:	4770      	bx	lr

0800fc80 <LL_C1_IPCC_SetFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_SetFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800fc80:	b480      	push	{r7}
 800fc82:	b083      	sub	sp, #12
 800fc84:	af00      	add	r7, sp, #0
 800fc86:	6078      	str	r0, [r7, #4]
 800fc88:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 800fc8a:	683b      	ldr	r3, [r7, #0]
 800fc8c:	041a      	lsls	r2, r3, #16
 800fc8e:	687b      	ldr	r3, [r7, #4]
 800fc90:	609a      	str	r2, [r3, #8]
}
 800fc92:	bf00      	nop
 800fc94:	370c      	adds	r7, #12
 800fc96:	46bd      	mov	sp, r7
 800fc98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc9c:	4770      	bx	lr

0800fc9e <LL_C1_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C1_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 800fc9e:	b480      	push	{r7}
 800fca0:	b083      	sub	sp, #12
 800fca2:	af00      	add	r7, sp, #0
 800fca4:	6078      	str	r0, [r7, #4]
 800fca6:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 800fca8:	687b      	ldr	r3, [r7, #4]
 800fcaa:	68da      	ldr	r2, [r3, #12]
 800fcac:	683b      	ldr	r3, [r7, #0]
 800fcae:	4013      	ands	r3, r2
 800fcb0:	683a      	ldr	r2, [r7, #0]
 800fcb2:	429a      	cmp	r2, r3
 800fcb4:	d101      	bne.n	800fcba <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 800fcb6:	2301      	movs	r3, #1
 800fcb8:	e000      	b.n	800fcbc <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 800fcba:	2300      	movs	r3, #0
}
 800fcbc:	4618      	mov	r0, r3
 800fcbe:	370c      	adds	r7, #12
 800fcc0:	46bd      	mov	sp, r7
 800fcc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcc6:	4770      	bx	lr

0800fcc8 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 800fcc8:	b480      	push	{r7}
 800fcca:	b083      	sub	sp, #12
 800fccc:	af00      	add	r7, sp, #0
 800fcce:	6078      	str	r0, [r7, #4]
 800fcd0:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 800fcd2:	687b      	ldr	r3, [r7, #4]
 800fcd4:	69da      	ldr	r2, [r3, #28]
 800fcd6:	683b      	ldr	r3, [r7, #0]
 800fcd8:	4013      	ands	r3, r2
 800fcda:	683a      	ldr	r2, [r7, #0]
 800fcdc:	429a      	cmp	r2, r3
 800fcde:	d101      	bne.n	800fce4 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 800fce0:	2301      	movs	r3, #1
 800fce2:	e000      	b.n	800fce6 <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 800fce4:	2300      	movs	r3, #0
}
 800fce6:	4618      	mov	r0, r3
 800fce8:	370c      	adds	r7, #12
 800fcea:	46bd      	mov	sp, r7
 800fcec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcf0:	4770      	bx	lr
	...

0800fcf4 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 800fcf4:	b580      	push	{r7, lr}
 800fcf6:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 800fcf8:	2102      	movs	r1, #2
 800fcfa:	4818      	ldr	r0, [pc, #96]	@ (800fd5c <HW_IPCC_Rx_Handler+0x68>)
 800fcfc:	f7ff ffe4 	bl	800fcc8 <LL_C2_IPCC_IsActiveFlag_CHx>
 800fd00:	4603      	mov	r3, r0
 800fd02:	2b00      	cmp	r3, #0
 800fd04:	d008      	beq.n	800fd18 <HW_IPCC_Rx_Handler+0x24>
 800fd06:	4b15      	ldr	r3, [pc, #84]	@ (800fd5c <HW_IPCC_Rx_Handler+0x68>)
 800fd08:	685b      	ldr	r3, [r3, #4]
 800fd0a:	f003 0302 	and.w	r3, r3, #2
 800fd0e:	2b00      	cmp	r3, #0
 800fd10:	d102      	bne.n	800fd18 <HW_IPCC_Rx_Handler+0x24>
  {
      HW_IPCC_SYS_EvtHandler();
 800fd12:	f000 f8d5 	bl	800fec0 <HW_IPCC_SYS_EvtHandler>
 800fd16:	e01e      	b.n	800fd56 <HW_IPCC_Rx_Handler+0x62>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 800fd18:	2101      	movs	r1, #1
 800fd1a:	4810      	ldr	r0, [pc, #64]	@ (800fd5c <HW_IPCC_Rx_Handler+0x68>)
 800fd1c:	f7ff ffd4 	bl	800fcc8 <LL_C2_IPCC_IsActiveFlag_CHx>
 800fd20:	4603      	mov	r3, r0
 800fd22:	2b00      	cmp	r3, #0
 800fd24:	d008      	beq.n	800fd38 <HW_IPCC_Rx_Handler+0x44>
 800fd26:	4b0d      	ldr	r3, [pc, #52]	@ (800fd5c <HW_IPCC_Rx_Handler+0x68>)
 800fd28:	685b      	ldr	r3, [r3, #4]
 800fd2a:	f003 0301 	and.w	r3, r3, #1
 800fd2e:	2b00      	cmp	r3, #0
 800fd30:	d102      	bne.n	800fd38 <HW_IPCC_Rx_Handler+0x44>
  {
    HW_IPCC_BLE_EvtHandler();
 800fd32:	f000 f889 	bl	800fe48 <HW_IPCC_BLE_EvtHandler>
 800fd36:	e00e      	b.n	800fd56 <HW_IPCC_Rx_Handler+0x62>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 800fd38:	2108      	movs	r1, #8
 800fd3a:	4808      	ldr	r0, [pc, #32]	@ (800fd5c <HW_IPCC_Rx_Handler+0x68>)
 800fd3c:	f7ff ffc4 	bl	800fcc8 <LL_C2_IPCC_IsActiveFlag_CHx>
 800fd40:	4603      	mov	r3, r0
 800fd42:	2b00      	cmp	r3, #0
 800fd44:	d008      	beq.n	800fd58 <HW_IPCC_Rx_Handler+0x64>
 800fd46:	4b05      	ldr	r3, [pc, #20]	@ (800fd5c <HW_IPCC_Rx_Handler+0x68>)
 800fd48:	685b      	ldr	r3, [r3, #4]
 800fd4a:	f003 0308 	and.w	r3, r3, #8
 800fd4e:	2b00      	cmp	r3, #0
 800fd50:	d102      	bne.n	800fd58 <HW_IPCC_Rx_Handler+0x64>
  {
    HW_IPCC_TRACES_EvtHandler();
 800fd52:	f000 f901 	bl	800ff58 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 800fd56:	bf00      	nop
 800fd58:	bf00      	nop
}
 800fd5a:	bd80      	pop	{r7, pc}
 800fd5c:	58000c00 	.word	0x58000c00

0800fd60 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 800fd60:	b580      	push	{r7, lr}
 800fd62:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 800fd64:	2102      	movs	r1, #2
 800fd66:	4818      	ldr	r0, [pc, #96]	@ (800fdc8 <HW_IPCC_Tx_Handler+0x68>)
 800fd68:	f7ff ff99 	bl	800fc9e <LL_C1_IPCC_IsActiveFlag_CHx>
 800fd6c:	4603      	mov	r3, r0
 800fd6e:	2b00      	cmp	r3, #0
 800fd70:	d108      	bne.n	800fd84 <HW_IPCC_Tx_Handler+0x24>
 800fd72:	4b15      	ldr	r3, [pc, #84]	@ (800fdc8 <HW_IPCC_Tx_Handler+0x68>)
 800fd74:	685b      	ldr	r3, [r3, #4]
 800fd76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800fd7a:	2b00      	cmp	r3, #0
 800fd7c:	d102      	bne.n	800fd84 <HW_IPCC_Tx_Handler+0x24>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 800fd7e:	f000 f893 	bl	800fea8 <HW_IPCC_SYS_CmdEvtHandler>
 800fd82:	e01e      	b.n	800fdc2 <HW_IPCC_Tx_Handler+0x62>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 800fd84:	2108      	movs	r1, #8
 800fd86:	4810      	ldr	r0, [pc, #64]	@ (800fdc8 <HW_IPCC_Tx_Handler+0x68>)
 800fd88:	f7ff ff89 	bl	800fc9e <LL_C1_IPCC_IsActiveFlag_CHx>
 800fd8c:	4603      	mov	r3, r0
 800fd8e:	2b00      	cmp	r3, #0
 800fd90:	d108      	bne.n	800fda4 <HW_IPCC_Tx_Handler+0x44>
 800fd92:	4b0d      	ldr	r3, [pc, #52]	@ (800fdc8 <HW_IPCC_Tx_Handler+0x68>)
 800fd94:	685b      	ldr	r3, [r3, #4]
 800fd96:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800fd9a:	2b00      	cmp	r3, #0
 800fd9c:	d102      	bne.n	800fda4 <HW_IPCC_Tx_Handler+0x44>
  {
    HW_IPCC_MM_FreeBufHandler();
 800fd9e:	f000 f8bd 	bl	800ff1c <HW_IPCC_MM_FreeBufHandler>
 800fda2:	e00e      	b.n	800fdc2 <HW_IPCC_Tx_Handler+0x62>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 800fda4:	2120      	movs	r1, #32
 800fda6:	4808      	ldr	r0, [pc, #32]	@ (800fdc8 <HW_IPCC_Tx_Handler+0x68>)
 800fda8:	f7ff ff79 	bl	800fc9e <LL_C1_IPCC_IsActiveFlag_CHx>
 800fdac:	4603      	mov	r3, r0
 800fdae:	2b00      	cmp	r3, #0
 800fdb0:	d108      	bne.n	800fdc4 <HW_IPCC_Tx_Handler+0x64>
 800fdb2:	4b05      	ldr	r3, [pc, #20]	@ (800fdc8 <HW_IPCC_Tx_Handler+0x68>)
 800fdb4:	685b      	ldr	r3, [r3, #4]
 800fdb6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800fdba:	2b00      	cmp	r3, #0
 800fdbc:	d102      	bne.n	800fdc4 <HW_IPCC_Tx_Handler+0x64>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 800fdbe:	f000 f84f 	bl	800fe60 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 800fdc2:	bf00      	nop
 800fdc4:	bf00      	nop
}
 800fdc6:	bd80      	pop	{r7, pc}
 800fdc8:	58000c00 	.word	0x58000c00

0800fdcc <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 800fdcc:	b580      	push	{r7, lr}
 800fdce:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
  * when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 800fdd0:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800fdd4:	f7ff fed3 	bl	800fb7e <LL_C2_AHB3_GRP1_EnableClock>

  /**
  * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
  */
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 800fdd8:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800fddc:	f7ff fea4 	bl	800fb28 <LL_EXTI_EnableRisingTrig_32_63>
  /* It is required to have at least a system clock cycle before a SEV after LL_EXTI_EnableRisingTrig_32_63() */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 800fde0:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800fde4:	f7ff fe8c 	bl	800fb00 <LL_C2_EXTI_EnableEvent_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 800fde8:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 800fdea:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 800fdec:	f7ff fe78 	bl	800fae0 <LL_PWR_EnableBootC2>

  return;
 800fdf0:	bf00      	nop
}
 800fdf2:	bd80      	pop	{r7, pc}

0800fdf4 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 800fdf4:	b580      	push	{r7, lr}
 800fdf6:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 800fdf8:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800fdfc:	f7ff fea6 	bl	800fb4c <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 800fe00:	4806      	ldr	r0, [pc, #24]	@ (800fe1c <HW_IPCC_Init+0x28>)
 800fe02:	f7ff fee8 	bl	800fbd6 <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 800fe06:	4805      	ldr	r0, [pc, #20]	@ (800fe1c <HW_IPCC_Init+0x28>)
 800fe08:	f7ff fed5 	bl	800fbb6 <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 800fe0c:	202c      	movs	r0, #44	@ 0x2c
 800fe0e:	f7f7 ff08 	bl	8007c22 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 800fe12:	202d      	movs	r0, #45	@ 0x2d
 800fe14:	f7f7 ff05 	bl	8007c22 <HAL_NVIC_EnableIRQ>

  return;
 800fe18:	bf00      	nop
}
 800fe1a:	bd80      	pop	{r7, pc}
 800fe1c:	58000c00 	.word	0x58000c00

0800fe20 <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 800fe20:	b580      	push	{r7, lr}
 800fe22:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800fe24:	2101      	movs	r1, #1
 800fe26:	4802      	ldr	r0, [pc, #8]	@ (800fe30 <HW_IPCC_BLE_Init+0x10>)
 800fe28:	f7ff ff0a 	bl	800fc40 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800fe2c:	bf00      	nop
}
 800fe2e:	bd80      	pop	{r7, pc}
 800fe30:	58000c00 	.word	0x58000c00

0800fe34 <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 800fe34:	b580      	push	{r7, lr}
 800fe36:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 800fe38:	2101      	movs	r1, #1
 800fe3a:	4802      	ldr	r0, [pc, #8]	@ (800fe44 <HW_IPCC_BLE_SendCmd+0x10>)
 800fe3c:	f7ff ff20 	bl	800fc80 <LL_C1_IPCC_SetFlag_CHx>

  return;
 800fe40:	bf00      	nop
}
 800fe42:	bd80      	pop	{r7, pc}
 800fe44:	58000c00 	.word	0x58000c00

0800fe48 <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 800fe48:	b580      	push	{r7, lr}
 800fe4a:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 800fe4c:	f7fe fd98 	bl	800e980 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800fe50:	2101      	movs	r1, #1
 800fe52:	4802      	ldr	r0, [pc, #8]	@ (800fe5c <HW_IPCC_BLE_EvtHandler+0x14>)
 800fe54:	f7ff ff06 	bl	800fc64 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800fe58:	bf00      	nop
}
 800fe5a:	bd80      	pop	{r7, pc}
 800fe5c:	58000c00 	.word	0x58000c00

0800fe60 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 800fe60:	b580      	push	{r7, lr}
 800fe62:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 800fe64:	2120      	movs	r1, #32
 800fe66:	4803      	ldr	r0, [pc, #12]	@ (800fe74 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 800fe68:	f7ff fed8 	bl	800fc1c <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 800fe6c:	f7fe fdb8 	bl	800e9e0 <HW_IPCC_BLE_AclDataAckNot>

  return;
 800fe70:	bf00      	nop
}
 800fe72:	bd80      	pop	{r7, pc}
 800fe74:	58000c00 	.word	0x58000c00

0800fe78 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 800fe78:	b580      	push	{r7, lr}
 800fe7a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800fe7c:	2102      	movs	r1, #2
 800fe7e:	4802      	ldr	r0, [pc, #8]	@ (800fe88 <HW_IPCC_SYS_Init+0x10>)
 800fe80:	f7ff fede 	bl	800fc40 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800fe84:	bf00      	nop
}
 800fe86:	bd80      	pop	{r7, pc}
 800fe88:	58000c00 	.word	0x58000c00

0800fe8c <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 800fe8c:	b580      	push	{r7, lr}
 800fe8e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800fe90:	2102      	movs	r1, #2
 800fe92:	4804      	ldr	r0, [pc, #16]	@ (800fea4 <HW_IPCC_SYS_SendCmd+0x18>)
 800fe94:	f7ff fef4 	bl	800fc80 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800fe98:	2102      	movs	r1, #2
 800fe9a:	4802      	ldr	r0, [pc, #8]	@ (800fea4 <HW_IPCC_SYS_SendCmd+0x18>)
 800fe9c:	f7ff feab 	bl	800fbf6 <LL_C1_IPCC_EnableTransmitChannel>

  return;
 800fea0:	bf00      	nop
}
 800fea2:	bd80      	pop	{r7, pc}
 800fea4:	58000c00 	.word	0x58000c00

0800fea8 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 800fea8:	b580      	push	{r7, lr}
 800feaa:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800feac:	2102      	movs	r1, #2
 800feae:	4803      	ldr	r0, [pc, #12]	@ (800febc <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 800feb0:	f7ff feb4 	bl	800fc1c <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 800feb4:	f7fe fde4 	bl	800ea80 <HW_IPCC_SYS_CmdEvtNot>

  return;
 800feb8:	bf00      	nop
}
 800feba:	bd80      	pop	{r7, pc}
 800febc:	58000c00 	.word	0x58000c00

0800fec0 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 800fec0:	b580      	push	{r7, lr}
 800fec2:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 800fec4:	f7fe fdf2 	bl	800eaac <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800fec8:	2102      	movs	r1, #2
 800feca:	4802      	ldr	r0, [pc, #8]	@ (800fed4 <HW_IPCC_SYS_EvtHandler+0x14>)
 800fecc:	f7ff feca 	bl	800fc64 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800fed0:	bf00      	nop
}
 800fed2:	bd80      	pop	{r7, pc}
 800fed4:	58000c00 	.word	0x58000c00

0800fed8 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 800fed8:	b580      	push	{r7, lr}
 800feda:	b082      	sub	sp, #8
 800fedc:	af00      	add	r7, sp, #0
 800fede:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 800fee0:	2108      	movs	r1, #8
 800fee2:	480c      	ldr	r0, [pc, #48]	@ (800ff14 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800fee4:	f7ff fedb 	bl	800fc9e <LL_C1_IPCC_IsActiveFlag_CHx>
 800fee8:	4603      	mov	r3, r0
 800feea:	2b00      	cmp	r3, #0
 800feec:	d007      	beq.n	800fefe <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 800feee:	4a0a      	ldr	r2, [pc, #40]	@ (800ff18 <HW_IPCC_MM_SendFreeBuf+0x40>)
 800fef0:	687b      	ldr	r3, [r7, #4]
 800fef2:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800fef4:	2108      	movs	r1, #8
 800fef6:	4807      	ldr	r0, [pc, #28]	@ (800ff14 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800fef8:	f7ff fe7d 	bl	800fbf6 <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 800fefc:	e006      	b.n	800ff0c <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 800fefe:	687b      	ldr	r3, [r7, #4]
 800ff00:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800ff02:	2108      	movs	r1, #8
 800ff04:	4803      	ldr	r0, [pc, #12]	@ (800ff14 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800ff06:	f7ff febb 	bl	800fc80 <LL_C1_IPCC_SetFlag_CHx>
  return;
 800ff0a:	bf00      	nop
}
 800ff0c:	3708      	adds	r7, #8
 800ff0e:	46bd      	mov	sp, r7
 800ff10:	bd80      	pop	{r7, pc}
 800ff12:	bf00      	nop
 800ff14:	58000c00 	.word	0x58000c00
 800ff18:	20002ed4 	.word	0x20002ed4

0800ff1c <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 800ff1c:	b580      	push	{r7, lr}
 800ff1e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800ff20:	2108      	movs	r1, #8
 800ff22:	4806      	ldr	r0, [pc, #24]	@ (800ff3c <HW_IPCC_MM_FreeBufHandler+0x20>)
 800ff24:	f7ff fe7a 	bl	800fc1c <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 800ff28:	4b05      	ldr	r3, [pc, #20]	@ (800ff40 <HW_IPCC_MM_FreeBufHandler+0x24>)
 800ff2a:	681b      	ldr	r3, [r3, #0]
 800ff2c:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800ff2e:	2108      	movs	r1, #8
 800ff30:	4802      	ldr	r0, [pc, #8]	@ (800ff3c <HW_IPCC_MM_FreeBufHandler+0x20>)
 800ff32:	f7ff fea5 	bl	800fc80 <LL_C1_IPCC_SetFlag_CHx>

  return;
 800ff36:	bf00      	nop
}
 800ff38:	bd80      	pop	{r7, pc}
 800ff3a:	bf00      	nop
 800ff3c:	58000c00 	.word	0x58000c00
 800ff40:	20002ed4 	.word	0x20002ed4

0800ff44 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 800ff44:	b580      	push	{r7, lr}
 800ff46:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 800ff48:	2108      	movs	r1, #8
 800ff4a:	4802      	ldr	r0, [pc, #8]	@ (800ff54 <HW_IPCC_TRACES_Init+0x10>)
 800ff4c:	f7ff fe78 	bl	800fc40 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800ff50:	bf00      	nop
}
 800ff52:	bd80      	pop	{r7, pc}
 800ff54:	58000c00 	.word	0x58000c00

0800ff58 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 800ff58:	b580      	push	{r7, lr}
 800ff5a:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 800ff5c:	f7fe fe4e 	bl	800ebfc <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 800ff60:	2108      	movs	r1, #8
 800ff62:	4802      	ldr	r0, [pc, #8]	@ (800ff6c <HW_IPCC_TRACES_EvtHandler+0x14>)
 800ff64:	f7ff fe7e 	bl	800fc64 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800ff68:	bf00      	nop
}
 800ff6a:	bd80      	pop	{r7, pc}
 800ff6c:	58000c00 	.word	0x58000c00

0800ff70 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 800ff70:	b480      	push	{r7}
 800ff72:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 800ff74:	4b05      	ldr	r3, [pc, #20]	@ (800ff8c <UTIL_LPM_Init+0x1c>)
 800ff76:	2200      	movs	r2, #0
 800ff78:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 800ff7a:	4b05      	ldr	r3, [pc, #20]	@ (800ff90 <UTIL_LPM_Init+0x20>)
 800ff7c:	2200      	movs	r2, #0
 800ff7e:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 800ff80:	bf00      	nop
 800ff82:	46bd      	mov	sp, r7
 800ff84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff88:	4770      	bx	lr
 800ff8a:	bf00      	nop
 800ff8c:	20002ed8 	.word	0x20002ed8
 800ff90:	20002edc 	.word	0x20002edc

0800ff94 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800ff94:	b480      	push	{r7}
 800ff96:	b087      	sub	sp, #28
 800ff98:	af00      	add	r7, sp, #0
 800ff9a:	6078      	str	r0, [r7, #4]
 800ff9c:	460b      	mov	r3, r1
 800ff9e:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ffa0:	f3ef 8310 	mrs	r3, PRIMASK
 800ffa4:	613b      	str	r3, [r7, #16]
  return(result);
 800ffa6:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 800ffa8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800ffaa:	b672      	cpsid	i
}
 800ffac:	bf00      	nop
  
  switch(state)
 800ffae:	78fb      	ldrb	r3, [r7, #3]
 800ffb0:	2b00      	cmp	r3, #0
 800ffb2:	d008      	beq.n	800ffc6 <UTIL_LPM_SetOffMode+0x32>
 800ffb4:	2b01      	cmp	r3, #1
 800ffb6:	d10e      	bne.n	800ffd6 <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 800ffb8:	4b0d      	ldr	r3, [pc, #52]	@ (800fff0 <UTIL_LPM_SetOffMode+0x5c>)
 800ffba:	681a      	ldr	r2, [r3, #0]
 800ffbc:	687b      	ldr	r3, [r7, #4]
 800ffbe:	4313      	orrs	r3, r2
 800ffc0:	4a0b      	ldr	r2, [pc, #44]	@ (800fff0 <UTIL_LPM_SetOffMode+0x5c>)
 800ffc2:	6013      	str	r3, [r2, #0]
      break;
 800ffc4:	e008      	b.n	800ffd8 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 800ffc6:	687b      	ldr	r3, [r7, #4]
 800ffc8:	43da      	mvns	r2, r3
 800ffca:	4b09      	ldr	r3, [pc, #36]	@ (800fff0 <UTIL_LPM_SetOffMode+0x5c>)
 800ffcc:	681b      	ldr	r3, [r3, #0]
 800ffce:	4013      	ands	r3, r2
 800ffd0:	4a07      	ldr	r2, [pc, #28]	@ (800fff0 <UTIL_LPM_SetOffMode+0x5c>)
 800ffd2:	6013      	str	r3, [r2, #0]
      break;
 800ffd4:	e000      	b.n	800ffd8 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 800ffd6:	bf00      	nop
 800ffd8:	697b      	ldr	r3, [r7, #20]
 800ffda:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ffdc:	68fb      	ldr	r3, [r7, #12]
 800ffde:	f383 8810 	msr	PRIMASK, r3
}
 800ffe2:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800ffe4:	bf00      	nop
 800ffe6:	371c      	adds	r7, #28
 800ffe8:	46bd      	mov	sp, r7
 800ffea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffee:	4770      	bx	lr
 800fff0:	20002edc 	.word	0x20002edc

0800fff4 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 800fff4:	b580      	push	{r7, lr}
 800fff6:	b090      	sub	sp, #64	@ 0x40
 800fff8:	af00      	add	r7, sp, #0
 800fffa:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 800fffc:	4b73      	ldr	r3, [pc, #460]	@ (80101cc <UTIL_SEQ_Run+0x1d8>)
 800fffe:	681b      	ldr	r3, [r3, #0]
 8010000:	62bb      	str	r3, [r7, #40]	@ 0x28
  SuperMask &= Mask_bm;
 8010002:	4b72      	ldr	r3, [pc, #456]	@ (80101cc <UTIL_SEQ_Run+0x1d8>)
 8010004:	681a      	ldr	r2, [r3, #0]
 8010006:	687b      	ldr	r3, [r7, #4]
 8010008:	4013      	ands	r3, r2
 801000a:	4a70      	ldr	r2, [pc, #448]	@ (80101cc <UTIL_SEQ_Run+0x1d8>)
 801000c:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 801000e:	4b70      	ldr	r3, [pc, #448]	@ (80101d0 <UTIL_SEQ_Run+0x1dc>)
 8010010:	681b      	ldr	r3, [r3, #0]
 8010012:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 8010014:	4b6f      	ldr	r3, [pc, #444]	@ (80101d4 <UTIL_SEQ_Run+0x1e0>)
 8010016:	681b      	ldr	r3, [r3, #0]
 8010018:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 801001a:	4b6f      	ldr	r3, [pc, #444]	@ (80101d8 <UTIL_SEQ_Run+0x1e4>)
 801001c:	681b      	ldr	r3, [r3, #0]
 801001e:	633b      	str	r3, [r7, #48]	@ 0x30
  local_evtwaited =  EvtWaited;
 8010020:	4b6e      	ldr	r3, [pc, #440]	@ (80101dc <UTIL_SEQ_Run+0x1e8>)
 8010022:	681b      	ldr	r3, [r3, #0]
 8010024:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 8010026:	e08d      	b.n	8010144 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 8010028:	2300      	movs	r3, #0
 801002a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 801002c:	e002      	b.n	8010034 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 801002e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010030:	3301      	adds	r3, #1
 8010032:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 8010034:	4a6a      	ldr	r2, [pc, #424]	@ (80101e0 <UTIL_SEQ_Run+0x1ec>)
 8010036:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010038:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801003c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801003e:	401a      	ands	r2, r3
 8010040:	4b62      	ldr	r3, [pc, #392]	@ (80101cc <UTIL_SEQ_Run+0x1d8>)
 8010042:	681b      	ldr	r3, [r3, #0]
 8010044:	4013      	ands	r3, r2
 8010046:	2b00      	cmp	r3, #0
 8010048:	d0f1      	beq.n	801002e <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 801004a:	4a65      	ldr	r2, [pc, #404]	@ (80101e0 <UTIL_SEQ_Run+0x1ec>)
 801004c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801004e:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8010052:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010054:	401a      	ands	r2, r3
 8010056:	4b5d      	ldr	r3, [pc, #372]	@ (80101cc <UTIL_SEQ_Run+0x1d8>)
 8010058:	681b      	ldr	r3, [r3, #0]
 801005a:	4013      	ands	r3, r2
 801005c:	627b      	str	r3, [r7, #36]	@ 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 801005e:	4a60      	ldr	r2, [pc, #384]	@ (80101e0 <UTIL_SEQ_Run+0x1ec>)
 8010060:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010062:	00db      	lsls	r3, r3, #3
 8010064:	4413      	add	r3, r2
 8010066:	685a      	ldr	r2, [r3, #4]
 8010068:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801006a:	4013      	ands	r3, r2
 801006c:	2b00      	cmp	r3, #0
 801006e:	d106      	bne.n	801007e <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 8010070:	4a5b      	ldr	r2, [pc, #364]	@ (80101e0 <UTIL_SEQ_Run+0x1ec>)
 8010072:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010074:	00db      	lsls	r3, r3, #3
 8010076:	4413      	add	r3, r2
 8010078:	f04f 32ff 	mov.w	r2, #4294967295
 801007c:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 801007e:	4a58      	ldr	r2, [pc, #352]	@ (80101e0 <UTIL_SEQ_Run+0x1ec>)
 8010080:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010082:	00db      	lsls	r3, r3, #3
 8010084:	4413      	add	r3, r2
 8010086:	685a      	ldr	r2, [r3, #4]
 8010088:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801008a:	4013      	ands	r3, r2
 801008c:	4618      	mov	r0, r3
 801008e:	f000 f9b3 	bl	80103f8 <SEQ_BitPosition>
 8010092:	4603      	mov	r3, r0
 8010094:	461a      	mov	r2, r3
 8010096:	4b53      	ldr	r3, [pc, #332]	@ (80101e4 <UTIL_SEQ_Run+0x1f0>)
 8010098:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 801009a:	4a51      	ldr	r2, [pc, #324]	@ (80101e0 <UTIL_SEQ_Run+0x1ec>)
 801009c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801009e:	00db      	lsls	r3, r3, #3
 80100a0:	4413      	add	r3, r2
 80100a2:	685a      	ldr	r2, [r3, #4]
 80100a4:	4b4f      	ldr	r3, [pc, #316]	@ (80101e4 <UTIL_SEQ_Run+0x1f0>)
 80100a6:	681b      	ldr	r3, [r3, #0]
 80100a8:	2101      	movs	r1, #1
 80100aa:	fa01 f303 	lsl.w	r3, r1, r3
 80100ae:	43db      	mvns	r3, r3
 80100b0:	401a      	ands	r2, r3
 80100b2:	494b      	ldr	r1, [pc, #300]	@ (80101e0 <UTIL_SEQ_Run+0x1ec>)
 80100b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80100b6:	00db      	lsls	r3, r3, #3
 80100b8:	440b      	add	r3, r1
 80100ba:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80100bc:	f3ef 8310 	mrs	r3, PRIMASK
 80100c0:	61bb      	str	r3, [r7, #24]
  return(result);
 80100c2:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80100c4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 80100c6:	b672      	cpsid	i
}
 80100c8:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 80100ca:	4b46      	ldr	r3, [pc, #280]	@ (80101e4 <UTIL_SEQ_Run+0x1f0>)
 80100cc:	681b      	ldr	r3, [r3, #0]
 80100ce:	2201      	movs	r2, #1
 80100d0:	fa02 f303 	lsl.w	r3, r2, r3
 80100d4:	43da      	mvns	r2, r3
 80100d6:	4b3e      	ldr	r3, [pc, #248]	@ (80101d0 <UTIL_SEQ_Run+0x1dc>)
 80100d8:	681b      	ldr	r3, [r3, #0]
 80100da:	4013      	ands	r3, r2
 80100dc:	4a3c      	ldr	r2, [pc, #240]	@ (80101d0 <UTIL_SEQ_Run+0x1dc>)
 80100de:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 80100e0:	2302      	movs	r3, #2
 80100e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80100e4:	e013      	b.n	801010e <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 80100e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80100e8:	3b01      	subs	r3, #1
 80100ea:	4a3d      	ldr	r2, [pc, #244]	@ (80101e0 <UTIL_SEQ_Run+0x1ec>)
 80100ec:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 80100f0:	4b3c      	ldr	r3, [pc, #240]	@ (80101e4 <UTIL_SEQ_Run+0x1f0>)
 80100f2:	681b      	ldr	r3, [r3, #0]
 80100f4:	2201      	movs	r2, #1
 80100f6:	fa02 f303 	lsl.w	r3, r2, r3
 80100fa:	43da      	mvns	r2, r3
 80100fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80100fe:	3b01      	subs	r3, #1
 8010100:	400a      	ands	r2, r1
 8010102:	4937      	ldr	r1, [pc, #220]	@ (80101e0 <UTIL_SEQ_Run+0x1ec>)
 8010104:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8010108:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801010a:	3b01      	subs	r3, #1
 801010c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801010e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010110:	2b00      	cmp	r3, #0
 8010112:	d1e8      	bne.n	80100e6 <UTIL_SEQ_Run+0xf2>
 8010114:	6a3b      	ldr	r3, [r7, #32]
 8010116:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010118:	697b      	ldr	r3, [r7, #20]
 801011a:	f383 8810 	msr	PRIMASK, r3
}
 801011e:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 8010120:	4b30      	ldr	r3, [pc, #192]	@ (80101e4 <UTIL_SEQ_Run+0x1f0>)
 8010122:	681b      	ldr	r3, [r3, #0]
 8010124:	4a30      	ldr	r2, [pc, #192]	@ (80101e8 <UTIL_SEQ_Run+0x1f4>)
 8010126:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801012a:	4798      	blx	r3

    local_taskset = TaskSet;
 801012c:	4b28      	ldr	r3, [pc, #160]	@ (80101d0 <UTIL_SEQ_Run+0x1dc>)
 801012e:	681b      	ldr	r3, [r3, #0]
 8010130:	63bb      	str	r3, [r7, #56]	@ 0x38
    local_evtset = EvtSet;
 8010132:	4b28      	ldr	r3, [pc, #160]	@ (80101d4 <UTIL_SEQ_Run+0x1e0>)
 8010134:	681b      	ldr	r3, [r3, #0]
 8010136:	637b      	str	r3, [r7, #52]	@ 0x34
    local_taskmask = TaskMask;
 8010138:	4b27      	ldr	r3, [pc, #156]	@ (80101d8 <UTIL_SEQ_Run+0x1e4>)
 801013a:	681b      	ldr	r3, [r3, #0]
 801013c:	633b      	str	r3, [r7, #48]	@ 0x30
    local_evtwaited = EvtWaited;
 801013e:	4b27      	ldr	r3, [pc, #156]	@ (80101dc <UTIL_SEQ_Run+0x1e8>)
 8010140:	681b      	ldr	r3, [r3, #0]
 8010142:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 8010144:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010146:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010148:	401a      	ands	r2, r3
 801014a:	4b20      	ldr	r3, [pc, #128]	@ (80101cc <UTIL_SEQ_Run+0x1d8>)
 801014c:	681b      	ldr	r3, [r3, #0]
 801014e:	4013      	ands	r3, r2
 8010150:	2b00      	cmp	r3, #0
 8010152:	d005      	beq.n	8010160 <UTIL_SEQ_Run+0x16c>
 8010154:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010156:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010158:	4013      	ands	r3, r2
 801015a:	2b00      	cmp	r3, #0
 801015c:	f43f af64 	beq.w	8010028 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 8010160:	4b20      	ldr	r3, [pc, #128]	@ (80101e4 <UTIL_SEQ_Run+0x1f0>)
 8010162:	f04f 32ff 	mov.w	r2, #4294967295
 8010166:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 8010168:	f000 f938 	bl	80103dc <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801016c:	f3ef 8310 	mrs	r3, PRIMASK
 8010170:	613b      	str	r3, [r7, #16]
  return(result);
 8010172:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 8010174:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8010176:	b672      	cpsid	i
}
 8010178:	bf00      	nop
  local_taskset = TaskSet;
 801017a:	4b15      	ldr	r3, [pc, #84]	@ (80101d0 <UTIL_SEQ_Run+0x1dc>)
 801017c:	681b      	ldr	r3, [r3, #0]
 801017e:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 8010180:	4b14      	ldr	r3, [pc, #80]	@ (80101d4 <UTIL_SEQ_Run+0x1e0>)
 8010182:	681b      	ldr	r3, [r3, #0]
 8010184:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 8010186:	4b14      	ldr	r3, [pc, #80]	@ (80101d8 <UTIL_SEQ_Run+0x1e4>)
 8010188:	681b      	ldr	r3, [r3, #0]
 801018a:	633b      	str	r3, [r7, #48]	@ 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 801018c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801018e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010190:	401a      	ands	r2, r3
 8010192:	4b0e      	ldr	r3, [pc, #56]	@ (80101cc <UTIL_SEQ_Run+0x1d8>)
 8010194:	681b      	ldr	r3, [r3, #0]
 8010196:	4013      	ands	r3, r2
 8010198:	2b00      	cmp	r3, #0
 801019a:	d107      	bne.n	80101ac <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 801019c:	4b0f      	ldr	r3, [pc, #60]	@ (80101dc <UTIL_SEQ_Run+0x1e8>)
 801019e:	681a      	ldr	r2, [r3, #0]
 80101a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80101a2:	4013      	ands	r3, r2
 80101a4:	2b00      	cmp	r3, #0
 80101a6:	d101      	bne.n	80101ac <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 80101a8:	f7f0 ff3a 	bl	8001020 <UTIL_SEQ_Idle>
 80101ac:	69fb      	ldr	r3, [r7, #28]
 80101ae:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80101b0:	68fb      	ldr	r3, [r7, #12]
 80101b2:	f383 8810 	msr	PRIMASK, r3
}
 80101b6:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 80101b8:	f000 f917 	bl	80103ea <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 80101bc:	4a03      	ldr	r2, [pc, #12]	@ (80101cc <UTIL_SEQ_Run+0x1d8>)
 80101be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80101c0:	6013      	str	r3, [r2, #0]

  return;
 80101c2:	bf00      	nop
}
 80101c4:	3740      	adds	r7, #64	@ 0x40
 80101c6:	46bd      	mov	sp, r7
 80101c8:	bd80      	pop	{r7, pc}
 80101ca:	bf00      	nop
 80101cc:	20000070 	.word	0x20000070
 80101d0:	20002ee0 	.word	0x20002ee0
 80101d4:	20002ee4 	.word	0x20002ee4
 80101d8:	2000006c 	.word	0x2000006c
 80101dc:	20002ee8 	.word	0x20002ee8
 80101e0:	20002f70 	.word	0x20002f70
 80101e4:	20002eec 	.word	0x20002eec
 80101e8:	20002ef0 	.word	0x20002ef0

080101ec <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 80101ec:	b580      	push	{r7, lr}
 80101ee:	b088      	sub	sp, #32
 80101f0:	af00      	add	r7, sp, #0
 80101f2:	60f8      	str	r0, [r7, #12]
 80101f4:	60b9      	str	r1, [r7, #8]
 80101f6:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80101f8:	f3ef 8310 	mrs	r3, PRIMASK
 80101fc:	617b      	str	r3, [r7, #20]
  return(result);
 80101fe:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 8010200:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8010202:	b672      	cpsid	i
}
 8010204:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 8010206:	68f8      	ldr	r0, [r7, #12]
 8010208:	f000 f8f6 	bl	80103f8 <SEQ_BitPosition>
 801020c:	4603      	mov	r3, r0
 801020e:	4619      	mov	r1, r3
 8010210:	4a06      	ldr	r2, [pc, #24]	@ (801022c <UTIL_SEQ_RegTask+0x40>)
 8010212:	687b      	ldr	r3, [r7, #4]
 8010214:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8010218:	69fb      	ldr	r3, [r7, #28]
 801021a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801021c:	69bb      	ldr	r3, [r7, #24]
 801021e:	f383 8810 	msr	PRIMASK, r3
}
 8010222:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 8010224:	bf00      	nop
}
 8010226:	3720      	adds	r7, #32
 8010228:	46bd      	mov	sp, r7
 801022a:	bd80      	pop	{r7, pc}
 801022c:	20002ef0 	.word	0x20002ef0

08010230 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 8010230:	b480      	push	{r7}
 8010232:	b087      	sub	sp, #28
 8010234:	af00      	add	r7, sp, #0
 8010236:	6078      	str	r0, [r7, #4]
 8010238:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801023a:	f3ef 8310 	mrs	r3, PRIMASK
 801023e:	60fb      	str	r3, [r7, #12]
  return(result);
 8010240:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8010242:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8010244:	b672      	cpsid	i
}
 8010246:	bf00      	nop

  TaskSet |= TaskId_bm;
 8010248:	4b0d      	ldr	r3, [pc, #52]	@ (8010280 <UTIL_SEQ_SetTask+0x50>)
 801024a:	681a      	ldr	r2, [r3, #0]
 801024c:	687b      	ldr	r3, [r7, #4]
 801024e:	4313      	orrs	r3, r2
 8010250:	4a0b      	ldr	r2, [pc, #44]	@ (8010280 <UTIL_SEQ_SetTask+0x50>)
 8010252:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 8010254:	4a0b      	ldr	r2, [pc, #44]	@ (8010284 <UTIL_SEQ_SetTask+0x54>)
 8010256:	683b      	ldr	r3, [r7, #0]
 8010258:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801025c:	687b      	ldr	r3, [r7, #4]
 801025e:	431a      	orrs	r2, r3
 8010260:	4908      	ldr	r1, [pc, #32]	@ (8010284 <UTIL_SEQ_SetTask+0x54>)
 8010262:	683b      	ldr	r3, [r7, #0]
 8010264:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 8010268:	697b      	ldr	r3, [r7, #20]
 801026a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801026c:	693b      	ldr	r3, [r7, #16]
 801026e:	f383 8810 	msr	PRIMASK, r3
}
 8010272:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8010274:	bf00      	nop
}
 8010276:	371c      	adds	r7, #28
 8010278:	46bd      	mov	sp, r7
 801027a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801027e:	4770      	bx	lr
 8010280:	20002ee0 	.word	0x20002ee0
 8010284:	20002f70 	.word	0x20002f70

08010288 <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 8010288:	b480      	push	{r7}
 801028a:	b087      	sub	sp, #28
 801028c:	af00      	add	r7, sp, #0
 801028e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010290:	f3ef 8310 	mrs	r3, PRIMASK
 8010294:	60fb      	str	r3, [r7, #12]
  return(result);
 8010296:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8010298:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801029a:	b672      	cpsid	i
}
 801029c:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 801029e:	687b      	ldr	r3, [r7, #4]
 80102a0:	43da      	mvns	r2, r3
 80102a2:	4b08      	ldr	r3, [pc, #32]	@ (80102c4 <UTIL_SEQ_PauseTask+0x3c>)
 80102a4:	681b      	ldr	r3, [r3, #0]
 80102a6:	4013      	ands	r3, r2
 80102a8:	4a06      	ldr	r2, [pc, #24]	@ (80102c4 <UTIL_SEQ_PauseTask+0x3c>)
 80102aa:	6013      	str	r3, [r2, #0]
 80102ac:	697b      	ldr	r3, [r7, #20]
 80102ae:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80102b0:	693b      	ldr	r3, [r7, #16]
 80102b2:	f383 8810 	msr	PRIMASK, r3
}
 80102b6:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 80102b8:	bf00      	nop
}
 80102ba:	371c      	adds	r7, #28
 80102bc:	46bd      	mov	sp, r7
 80102be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102c2:	4770      	bx	lr
 80102c4:	2000006c 	.word	0x2000006c

080102c8 <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 80102c8:	b480      	push	{r7}
 80102ca:	b087      	sub	sp, #28
 80102cc:	af00      	add	r7, sp, #0
 80102ce:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80102d0:	f3ef 8310 	mrs	r3, PRIMASK
 80102d4:	60fb      	str	r3, [r7, #12]
  return(result);
 80102d6:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80102d8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80102da:	b672      	cpsid	i
}
 80102dc:	bf00      	nop

  TaskMask |= TaskId_bm;
 80102de:	4b09      	ldr	r3, [pc, #36]	@ (8010304 <UTIL_SEQ_ResumeTask+0x3c>)
 80102e0:	681a      	ldr	r2, [r3, #0]
 80102e2:	687b      	ldr	r3, [r7, #4]
 80102e4:	4313      	orrs	r3, r2
 80102e6:	4a07      	ldr	r2, [pc, #28]	@ (8010304 <UTIL_SEQ_ResumeTask+0x3c>)
 80102e8:	6013      	str	r3, [r2, #0]
 80102ea:	697b      	ldr	r3, [r7, #20]
 80102ec:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80102ee:	693b      	ldr	r3, [r7, #16]
 80102f0:	f383 8810 	msr	PRIMASK, r3
}
 80102f4:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 80102f6:	bf00      	nop
}
 80102f8:	371c      	adds	r7, #28
 80102fa:	46bd      	mov	sp, r7
 80102fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010300:	4770      	bx	lr
 8010302:	bf00      	nop
 8010304:	2000006c 	.word	0x2000006c

08010308 <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 8010308:	b480      	push	{r7}
 801030a:	b087      	sub	sp, #28
 801030c:	af00      	add	r7, sp, #0
 801030e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010310:	f3ef 8310 	mrs	r3, PRIMASK
 8010314:	60fb      	str	r3, [r7, #12]
  return(result);
 8010316:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8010318:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801031a:	b672      	cpsid	i
}
 801031c:	bf00      	nop

  EvtSet |= EvtId_bm;
 801031e:	4b09      	ldr	r3, [pc, #36]	@ (8010344 <UTIL_SEQ_SetEvt+0x3c>)
 8010320:	681a      	ldr	r2, [r3, #0]
 8010322:	687b      	ldr	r3, [r7, #4]
 8010324:	4313      	orrs	r3, r2
 8010326:	4a07      	ldr	r2, [pc, #28]	@ (8010344 <UTIL_SEQ_SetEvt+0x3c>)
 8010328:	6013      	str	r3, [r2, #0]
 801032a:	697b      	ldr	r3, [r7, #20]
 801032c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801032e:	693b      	ldr	r3, [r7, #16]
 8010330:	f383 8810 	msr	PRIMASK, r3
}
 8010334:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8010336:	bf00      	nop
}
 8010338:	371c      	adds	r7, #28
 801033a:	46bd      	mov	sp, r7
 801033c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010340:	4770      	bx	lr
 8010342:	bf00      	nop
 8010344:	20002ee4 	.word	0x20002ee4

08010348 <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 8010348:	b580      	push	{r7, lr}
 801034a:	b088      	sub	sp, #32
 801034c:	af00      	add	r7, sp, #0
 801034e:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 8010350:	4b1f      	ldr	r3, [pc, #124]	@ (80103d0 <UTIL_SEQ_WaitEvt+0x88>)
 8010352:	681b      	ldr	r3, [r3, #0]
 8010354:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 8010356:	4b1e      	ldr	r3, [pc, #120]	@ (80103d0 <UTIL_SEQ_WaitEvt+0x88>)
 8010358:	681b      	ldr	r3, [r3, #0]
 801035a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801035e:	d102      	bne.n	8010366 <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0u;
 8010360:	2300      	movs	r3, #0
 8010362:	61fb      	str	r3, [r7, #28]
 8010364:	e005      	b.n	8010372 <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
 8010366:	4b1a      	ldr	r3, [pc, #104]	@ (80103d0 <UTIL_SEQ_WaitEvt+0x88>)
 8010368:	681b      	ldr	r3, [r3, #0]
 801036a:	2201      	movs	r2, #1
 801036c:	fa02 f303 	lsl.w	r3, r2, r3
 8010370:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 8010372:	4b18      	ldr	r3, [pc, #96]	@ (80103d4 <UTIL_SEQ_WaitEvt+0x8c>)
 8010374:	681b      	ldr	r3, [r3, #0]
 8010376:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 8010378:	4a16      	ldr	r2, [pc, #88]	@ (80103d4 <UTIL_SEQ_WaitEvt+0x8c>)
 801037a:	687b      	ldr	r3, [r7, #4]
 801037c:	6013      	str	r3, [r2, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
 801037e:	e003      	b.n	8010388 <UTIL_SEQ_WaitEvt+0x40>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
 8010380:	6879      	ldr	r1, [r7, #4]
 8010382:	69f8      	ldr	r0, [r7, #28]
 8010384:	f7f0 fe53 	bl	800102e <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
 8010388:	4b13      	ldr	r3, [pc, #76]	@ (80103d8 <UTIL_SEQ_WaitEvt+0x90>)
 801038a:	681a      	ldr	r2, [r3, #0]
 801038c:	687b      	ldr	r3, [r7, #4]
 801038e:	4013      	ands	r3, r2
 8010390:	2b00      	cmp	r3, #0
 8010392:	d0f5      	beq.n	8010380 <UTIL_SEQ_WaitEvt+0x38>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 8010394:	4a0e      	ldr	r2, [pc, #56]	@ (80103d0 <UTIL_SEQ_WaitEvt+0x88>)
 8010396:	69bb      	ldr	r3, [r7, #24]
 8010398:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801039a:	f3ef 8310 	mrs	r3, PRIMASK
 801039e:	60bb      	str	r3, [r7, #8]
  return(result);
 80103a0:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80103a2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80103a4:	b672      	cpsid	i
}
 80103a6:	bf00      	nop

  EvtSet &= (~EvtId_bm);
 80103a8:	687b      	ldr	r3, [r7, #4]
 80103aa:	43da      	mvns	r2, r3
 80103ac:	4b0a      	ldr	r3, [pc, #40]	@ (80103d8 <UTIL_SEQ_WaitEvt+0x90>)
 80103ae:	681b      	ldr	r3, [r3, #0]
 80103b0:	4013      	ands	r3, r2
 80103b2:	4a09      	ldr	r2, [pc, #36]	@ (80103d8 <UTIL_SEQ_WaitEvt+0x90>)
 80103b4:	6013      	str	r3, [r2, #0]
 80103b6:	693b      	ldr	r3, [r7, #16]
 80103b8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80103ba:	68fb      	ldr	r3, [r7, #12]
 80103bc:	f383 8810 	msr	PRIMASK, r3
}
 80103c0:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 80103c2:	4a04      	ldr	r2, [pc, #16]	@ (80103d4 <UTIL_SEQ_WaitEvt+0x8c>)
 80103c4:	697b      	ldr	r3, [r7, #20]
 80103c6:	6013      	str	r3, [r2, #0]
  return;
 80103c8:	bf00      	nop
}
 80103ca:	3720      	adds	r7, #32
 80103cc:	46bd      	mov	sp, r7
 80103ce:	bd80      	pop	{r7, pc}
 80103d0:	20002eec 	.word	0x20002eec
 80103d4:	20002ee8 	.word	0x20002ee8
 80103d8:	20002ee4 	.word	0x20002ee4

080103dc <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 80103dc:	b480      	push	{r7}
 80103de:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 80103e0:	bf00      	nop
}
 80103e2:	46bd      	mov	sp, r7
 80103e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103e8:	4770      	bx	lr

080103ea <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 80103ea:	b480      	push	{r7}
 80103ec:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 80103ee:	bf00      	nop
}
 80103f0:	46bd      	mov	sp, r7
 80103f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103f6:	4770      	bx	lr

080103f8 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 80103f8:	b480      	push	{r7}
 80103fa:	b085      	sub	sp, #20
 80103fc:	af00      	add	r7, sp, #0
 80103fe:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 8010400:	2300      	movs	r3, #0
 8010402:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 8010404:	687b      	ldr	r3, [r7, #4]
 8010406:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 8010408:	68bb      	ldr	r3, [r7, #8]
 801040a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801040e:	d204      	bcs.n	801041a <SEQ_BitPosition+0x22>
 8010410:	2310      	movs	r3, #16
 8010412:	73fb      	strb	r3, [r7, #15]
 8010414:	68bb      	ldr	r3, [r7, #8]
 8010416:	041b      	lsls	r3, r3, #16
 8010418:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 801041a:	68bb      	ldr	r3, [r7, #8]
 801041c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8010420:	d205      	bcs.n	801042e <SEQ_BitPosition+0x36>
 8010422:	7bfb      	ldrb	r3, [r7, #15]
 8010424:	3308      	adds	r3, #8
 8010426:	73fb      	strb	r3, [r7, #15]
 8010428:	68bb      	ldr	r3, [r7, #8]
 801042a:	021b      	lsls	r3, r3, #8
 801042c:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 801042e:	68bb      	ldr	r3, [r7, #8]
 8010430:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8010434:	d205      	bcs.n	8010442 <SEQ_BitPosition+0x4a>
 8010436:	7bfb      	ldrb	r3, [r7, #15]
 8010438:	3304      	adds	r3, #4
 801043a:	73fb      	strb	r3, [r7, #15]
 801043c:	68bb      	ldr	r3, [r7, #8]
 801043e:	011b      	lsls	r3, r3, #4
 8010440:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 8010442:	68bb      	ldr	r3, [r7, #8]
 8010444:	0f1b      	lsrs	r3, r3, #28
 8010446:	4a07      	ldr	r2, [pc, #28]	@ (8010464 <SEQ_BitPosition+0x6c>)
 8010448:	5cd2      	ldrb	r2, [r2, r3]
 801044a:	7bfb      	ldrb	r3, [r7, #15]
 801044c:	4413      	add	r3, r2
 801044e:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 8010450:	7bfb      	ldrb	r3, [r7, #15]
 8010452:	f1c3 031f 	rsb	r3, r3, #31
 8010456:	b2db      	uxtb	r3, r3
}
 8010458:	4618      	mov	r0, r3
 801045a:	3714      	adds	r7, #20
 801045c:	46bd      	mov	sp, r7
 801045e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010462:	4770      	bx	lr
 8010464:	08012414 	.word	0x08012414

08010468 <random>:
 8010468:	4b16      	ldr	r3, [pc, #88]	@ (80104c4 <random+0x5c>)
 801046a:	b510      	push	{r4, lr}
 801046c:	681c      	ldr	r4, [r3, #0]
 801046e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8010470:	b9b3      	cbnz	r3, 80104a0 <random+0x38>
 8010472:	2018      	movs	r0, #24
 8010474:	f000 fa2e 	bl	80108d4 <malloc>
 8010478:	4602      	mov	r2, r0
 801047a:	6320      	str	r0, [r4, #48]	@ 0x30
 801047c:	b920      	cbnz	r0, 8010488 <random+0x20>
 801047e:	4b12      	ldr	r3, [pc, #72]	@ (80104c8 <random+0x60>)
 8010480:	4812      	ldr	r0, [pc, #72]	@ (80104cc <random+0x64>)
 8010482:	214c      	movs	r1, #76	@ 0x4c
 8010484:	f000 f9be 	bl	8010804 <__assert_func>
 8010488:	4911      	ldr	r1, [pc, #68]	@ (80104d0 <random+0x68>)
 801048a:	4b12      	ldr	r3, [pc, #72]	@ (80104d4 <random+0x6c>)
 801048c:	e9c0 1300 	strd	r1, r3, [r0]
 8010490:	4b11      	ldr	r3, [pc, #68]	@ (80104d8 <random+0x70>)
 8010492:	6083      	str	r3, [r0, #8]
 8010494:	230b      	movs	r3, #11
 8010496:	8183      	strh	r3, [r0, #12]
 8010498:	2100      	movs	r1, #0
 801049a:	2001      	movs	r0, #1
 801049c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80104a0:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80104a2:	480e      	ldr	r0, [pc, #56]	@ (80104dc <random+0x74>)
 80104a4:	690b      	ldr	r3, [r1, #16]
 80104a6:	694c      	ldr	r4, [r1, #20]
 80104a8:	4a0d      	ldr	r2, [pc, #52]	@ (80104e0 <random+0x78>)
 80104aa:	4358      	muls	r0, r3
 80104ac:	fb02 0004 	mla	r0, r2, r4, r0
 80104b0:	fba3 3202 	umull	r3, r2, r3, r2
 80104b4:	3301      	adds	r3, #1
 80104b6:	eb40 0002 	adc.w	r0, r0, r2
 80104ba:	e9c1 3004 	strd	r3, r0, [r1, #16]
 80104be:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80104c2:	bd10      	pop	{r4, pc}
 80104c4:	20000080 	.word	0x20000080
 80104c8:	08012424 	.word	0x08012424
 80104cc:	0801243b 	.word	0x0801243b
 80104d0:	abcd330e 	.word	0xabcd330e
 80104d4:	e66d1234 	.word	0xe66d1234
 80104d8:	0005deec 	.word	0x0005deec
 80104dc:	5851f42d 	.word	0x5851f42d
 80104e0:	4c957f2d 	.word	0x4c957f2d

080104e4 <std>:
 80104e4:	2300      	movs	r3, #0
 80104e6:	b510      	push	{r4, lr}
 80104e8:	4604      	mov	r4, r0
 80104ea:	e9c0 3300 	strd	r3, r3, [r0]
 80104ee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80104f2:	6083      	str	r3, [r0, #8]
 80104f4:	8181      	strh	r1, [r0, #12]
 80104f6:	6643      	str	r3, [r0, #100]	@ 0x64
 80104f8:	81c2      	strh	r2, [r0, #14]
 80104fa:	6183      	str	r3, [r0, #24]
 80104fc:	4619      	mov	r1, r3
 80104fe:	2208      	movs	r2, #8
 8010500:	305c      	adds	r0, #92	@ 0x5c
 8010502:	f000 f8f4 	bl	80106ee <memset>
 8010506:	4b0d      	ldr	r3, [pc, #52]	@ (801053c <std+0x58>)
 8010508:	6263      	str	r3, [r4, #36]	@ 0x24
 801050a:	4b0d      	ldr	r3, [pc, #52]	@ (8010540 <std+0x5c>)
 801050c:	62a3      	str	r3, [r4, #40]	@ 0x28
 801050e:	4b0d      	ldr	r3, [pc, #52]	@ (8010544 <std+0x60>)
 8010510:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8010512:	4b0d      	ldr	r3, [pc, #52]	@ (8010548 <std+0x64>)
 8010514:	6323      	str	r3, [r4, #48]	@ 0x30
 8010516:	4b0d      	ldr	r3, [pc, #52]	@ (801054c <std+0x68>)
 8010518:	6224      	str	r4, [r4, #32]
 801051a:	429c      	cmp	r4, r3
 801051c:	d006      	beq.n	801052c <std+0x48>
 801051e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8010522:	4294      	cmp	r4, r2
 8010524:	d002      	beq.n	801052c <std+0x48>
 8010526:	33d0      	adds	r3, #208	@ 0xd0
 8010528:	429c      	cmp	r4, r3
 801052a:	d105      	bne.n	8010538 <std+0x54>
 801052c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8010530:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010534:	f000 b954 	b.w	80107e0 <__retarget_lock_init_recursive>
 8010538:	bd10      	pop	{r4, pc}
 801053a:	bf00      	nop
 801053c:	08010669 	.word	0x08010669
 8010540:	0801068b 	.word	0x0801068b
 8010544:	080106c3 	.word	0x080106c3
 8010548:	080106e7 	.word	0x080106e7
 801054c:	20002f80 	.word	0x20002f80

08010550 <stdio_exit_handler>:
 8010550:	4a02      	ldr	r2, [pc, #8]	@ (801055c <stdio_exit_handler+0xc>)
 8010552:	4903      	ldr	r1, [pc, #12]	@ (8010560 <stdio_exit_handler+0x10>)
 8010554:	4803      	ldr	r0, [pc, #12]	@ (8010564 <stdio_exit_handler+0x14>)
 8010556:	f000 b869 	b.w	801062c <_fwalk_sglue>
 801055a:	bf00      	nop
 801055c:	20000074 	.word	0x20000074
 8010560:	080110e9 	.word	0x080110e9
 8010564:	20000084 	.word	0x20000084

08010568 <cleanup_stdio>:
 8010568:	6841      	ldr	r1, [r0, #4]
 801056a:	4b0c      	ldr	r3, [pc, #48]	@ (801059c <cleanup_stdio+0x34>)
 801056c:	4299      	cmp	r1, r3
 801056e:	b510      	push	{r4, lr}
 8010570:	4604      	mov	r4, r0
 8010572:	d001      	beq.n	8010578 <cleanup_stdio+0x10>
 8010574:	f000 fdb8 	bl	80110e8 <_fflush_r>
 8010578:	68a1      	ldr	r1, [r4, #8]
 801057a:	4b09      	ldr	r3, [pc, #36]	@ (80105a0 <cleanup_stdio+0x38>)
 801057c:	4299      	cmp	r1, r3
 801057e:	d002      	beq.n	8010586 <cleanup_stdio+0x1e>
 8010580:	4620      	mov	r0, r4
 8010582:	f000 fdb1 	bl	80110e8 <_fflush_r>
 8010586:	68e1      	ldr	r1, [r4, #12]
 8010588:	4b06      	ldr	r3, [pc, #24]	@ (80105a4 <cleanup_stdio+0x3c>)
 801058a:	4299      	cmp	r1, r3
 801058c:	d004      	beq.n	8010598 <cleanup_stdio+0x30>
 801058e:	4620      	mov	r0, r4
 8010590:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010594:	f000 bda8 	b.w	80110e8 <_fflush_r>
 8010598:	bd10      	pop	{r4, pc}
 801059a:	bf00      	nop
 801059c:	20002f80 	.word	0x20002f80
 80105a0:	20002fe8 	.word	0x20002fe8
 80105a4:	20003050 	.word	0x20003050

080105a8 <global_stdio_init.part.0>:
 80105a8:	b510      	push	{r4, lr}
 80105aa:	4b0b      	ldr	r3, [pc, #44]	@ (80105d8 <global_stdio_init.part.0+0x30>)
 80105ac:	4c0b      	ldr	r4, [pc, #44]	@ (80105dc <global_stdio_init.part.0+0x34>)
 80105ae:	4a0c      	ldr	r2, [pc, #48]	@ (80105e0 <global_stdio_init.part.0+0x38>)
 80105b0:	601a      	str	r2, [r3, #0]
 80105b2:	4620      	mov	r0, r4
 80105b4:	2200      	movs	r2, #0
 80105b6:	2104      	movs	r1, #4
 80105b8:	f7ff ff94 	bl	80104e4 <std>
 80105bc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80105c0:	2201      	movs	r2, #1
 80105c2:	2109      	movs	r1, #9
 80105c4:	f7ff ff8e 	bl	80104e4 <std>
 80105c8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80105cc:	2202      	movs	r2, #2
 80105ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80105d2:	2112      	movs	r1, #18
 80105d4:	f7ff bf86 	b.w	80104e4 <std>
 80105d8:	200030b8 	.word	0x200030b8
 80105dc:	20002f80 	.word	0x20002f80
 80105e0:	08010551 	.word	0x08010551

080105e4 <__sfp_lock_acquire>:
 80105e4:	4801      	ldr	r0, [pc, #4]	@ (80105ec <__sfp_lock_acquire+0x8>)
 80105e6:	f000 b8fc 	b.w	80107e2 <__retarget_lock_acquire_recursive>
 80105ea:	bf00      	nop
 80105ec:	200030c1 	.word	0x200030c1

080105f0 <__sfp_lock_release>:
 80105f0:	4801      	ldr	r0, [pc, #4]	@ (80105f8 <__sfp_lock_release+0x8>)
 80105f2:	f000 b8f7 	b.w	80107e4 <__retarget_lock_release_recursive>
 80105f6:	bf00      	nop
 80105f8:	200030c1 	.word	0x200030c1

080105fc <__sinit>:
 80105fc:	b510      	push	{r4, lr}
 80105fe:	4604      	mov	r4, r0
 8010600:	f7ff fff0 	bl	80105e4 <__sfp_lock_acquire>
 8010604:	6a23      	ldr	r3, [r4, #32]
 8010606:	b11b      	cbz	r3, 8010610 <__sinit+0x14>
 8010608:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801060c:	f7ff bff0 	b.w	80105f0 <__sfp_lock_release>
 8010610:	4b04      	ldr	r3, [pc, #16]	@ (8010624 <__sinit+0x28>)
 8010612:	6223      	str	r3, [r4, #32]
 8010614:	4b04      	ldr	r3, [pc, #16]	@ (8010628 <__sinit+0x2c>)
 8010616:	681b      	ldr	r3, [r3, #0]
 8010618:	2b00      	cmp	r3, #0
 801061a:	d1f5      	bne.n	8010608 <__sinit+0xc>
 801061c:	f7ff ffc4 	bl	80105a8 <global_stdio_init.part.0>
 8010620:	e7f2      	b.n	8010608 <__sinit+0xc>
 8010622:	bf00      	nop
 8010624:	08010569 	.word	0x08010569
 8010628:	200030b8 	.word	0x200030b8

0801062c <_fwalk_sglue>:
 801062c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010630:	4607      	mov	r7, r0
 8010632:	4688      	mov	r8, r1
 8010634:	4614      	mov	r4, r2
 8010636:	2600      	movs	r6, #0
 8010638:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801063c:	f1b9 0901 	subs.w	r9, r9, #1
 8010640:	d505      	bpl.n	801064e <_fwalk_sglue+0x22>
 8010642:	6824      	ldr	r4, [r4, #0]
 8010644:	2c00      	cmp	r4, #0
 8010646:	d1f7      	bne.n	8010638 <_fwalk_sglue+0xc>
 8010648:	4630      	mov	r0, r6
 801064a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801064e:	89ab      	ldrh	r3, [r5, #12]
 8010650:	2b01      	cmp	r3, #1
 8010652:	d907      	bls.n	8010664 <_fwalk_sglue+0x38>
 8010654:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010658:	3301      	adds	r3, #1
 801065a:	d003      	beq.n	8010664 <_fwalk_sglue+0x38>
 801065c:	4629      	mov	r1, r5
 801065e:	4638      	mov	r0, r7
 8010660:	47c0      	blx	r8
 8010662:	4306      	orrs	r6, r0
 8010664:	3568      	adds	r5, #104	@ 0x68
 8010666:	e7e9      	b.n	801063c <_fwalk_sglue+0x10>

08010668 <__sread>:
 8010668:	b510      	push	{r4, lr}
 801066a:	460c      	mov	r4, r1
 801066c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010670:	f000 f868 	bl	8010744 <_read_r>
 8010674:	2800      	cmp	r0, #0
 8010676:	bfab      	itete	ge
 8010678:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801067a:	89a3      	ldrhlt	r3, [r4, #12]
 801067c:	181b      	addge	r3, r3, r0
 801067e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8010682:	bfac      	ite	ge
 8010684:	6563      	strge	r3, [r4, #84]	@ 0x54
 8010686:	81a3      	strhlt	r3, [r4, #12]
 8010688:	bd10      	pop	{r4, pc}

0801068a <__swrite>:
 801068a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801068e:	461f      	mov	r7, r3
 8010690:	898b      	ldrh	r3, [r1, #12]
 8010692:	05db      	lsls	r3, r3, #23
 8010694:	4605      	mov	r5, r0
 8010696:	460c      	mov	r4, r1
 8010698:	4616      	mov	r6, r2
 801069a:	d505      	bpl.n	80106a8 <__swrite+0x1e>
 801069c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80106a0:	2302      	movs	r3, #2
 80106a2:	2200      	movs	r2, #0
 80106a4:	f000 f83c 	bl	8010720 <_lseek_r>
 80106a8:	89a3      	ldrh	r3, [r4, #12]
 80106aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80106ae:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80106b2:	81a3      	strh	r3, [r4, #12]
 80106b4:	4632      	mov	r2, r6
 80106b6:	463b      	mov	r3, r7
 80106b8:	4628      	mov	r0, r5
 80106ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80106be:	f000 b853 	b.w	8010768 <_write_r>

080106c2 <__sseek>:
 80106c2:	b510      	push	{r4, lr}
 80106c4:	460c      	mov	r4, r1
 80106c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80106ca:	f000 f829 	bl	8010720 <_lseek_r>
 80106ce:	1c43      	adds	r3, r0, #1
 80106d0:	89a3      	ldrh	r3, [r4, #12]
 80106d2:	bf15      	itete	ne
 80106d4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80106d6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80106da:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80106de:	81a3      	strheq	r3, [r4, #12]
 80106e0:	bf18      	it	ne
 80106e2:	81a3      	strhne	r3, [r4, #12]
 80106e4:	bd10      	pop	{r4, pc}

080106e6 <__sclose>:
 80106e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80106ea:	f000 b809 	b.w	8010700 <_close_r>

080106ee <memset>:
 80106ee:	4402      	add	r2, r0
 80106f0:	4603      	mov	r3, r0
 80106f2:	4293      	cmp	r3, r2
 80106f4:	d100      	bne.n	80106f8 <memset+0xa>
 80106f6:	4770      	bx	lr
 80106f8:	f803 1b01 	strb.w	r1, [r3], #1
 80106fc:	e7f9      	b.n	80106f2 <memset+0x4>
	...

08010700 <_close_r>:
 8010700:	b538      	push	{r3, r4, r5, lr}
 8010702:	4d06      	ldr	r5, [pc, #24]	@ (801071c <_close_r+0x1c>)
 8010704:	2300      	movs	r3, #0
 8010706:	4604      	mov	r4, r0
 8010708:	4608      	mov	r0, r1
 801070a:	602b      	str	r3, [r5, #0]
 801070c:	f7f6 ffab 	bl	8007666 <_close>
 8010710:	1c43      	adds	r3, r0, #1
 8010712:	d102      	bne.n	801071a <_close_r+0x1a>
 8010714:	682b      	ldr	r3, [r5, #0]
 8010716:	b103      	cbz	r3, 801071a <_close_r+0x1a>
 8010718:	6023      	str	r3, [r4, #0]
 801071a:	bd38      	pop	{r3, r4, r5, pc}
 801071c:	200030bc 	.word	0x200030bc

08010720 <_lseek_r>:
 8010720:	b538      	push	{r3, r4, r5, lr}
 8010722:	4d07      	ldr	r5, [pc, #28]	@ (8010740 <_lseek_r+0x20>)
 8010724:	4604      	mov	r4, r0
 8010726:	4608      	mov	r0, r1
 8010728:	4611      	mov	r1, r2
 801072a:	2200      	movs	r2, #0
 801072c:	602a      	str	r2, [r5, #0]
 801072e:	461a      	mov	r2, r3
 8010730:	f7f6 ffc0 	bl	80076b4 <_lseek>
 8010734:	1c43      	adds	r3, r0, #1
 8010736:	d102      	bne.n	801073e <_lseek_r+0x1e>
 8010738:	682b      	ldr	r3, [r5, #0]
 801073a:	b103      	cbz	r3, 801073e <_lseek_r+0x1e>
 801073c:	6023      	str	r3, [r4, #0]
 801073e:	bd38      	pop	{r3, r4, r5, pc}
 8010740:	200030bc 	.word	0x200030bc

08010744 <_read_r>:
 8010744:	b538      	push	{r3, r4, r5, lr}
 8010746:	4d07      	ldr	r5, [pc, #28]	@ (8010764 <_read_r+0x20>)
 8010748:	4604      	mov	r4, r0
 801074a:	4608      	mov	r0, r1
 801074c:	4611      	mov	r1, r2
 801074e:	2200      	movs	r2, #0
 8010750:	602a      	str	r2, [r5, #0]
 8010752:	461a      	mov	r2, r3
 8010754:	f7f6 ff4e 	bl	80075f4 <_read>
 8010758:	1c43      	adds	r3, r0, #1
 801075a:	d102      	bne.n	8010762 <_read_r+0x1e>
 801075c:	682b      	ldr	r3, [r5, #0]
 801075e:	b103      	cbz	r3, 8010762 <_read_r+0x1e>
 8010760:	6023      	str	r3, [r4, #0]
 8010762:	bd38      	pop	{r3, r4, r5, pc}
 8010764:	200030bc 	.word	0x200030bc

08010768 <_write_r>:
 8010768:	b538      	push	{r3, r4, r5, lr}
 801076a:	4d07      	ldr	r5, [pc, #28]	@ (8010788 <_write_r+0x20>)
 801076c:	4604      	mov	r4, r0
 801076e:	4608      	mov	r0, r1
 8010770:	4611      	mov	r1, r2
 8010772:	2200      	movs	r2, #0
 8010774:	602a      	str	r2, [r5, #0]
 8010776:	461a      	mov	r2, r3
 8010778:	f7f6 ff59 	bl	800762e <_write>
 801077c:	1c43      	adds	r3, r0, #1
 801077e:	d102      	bne.n	8010786 <_write_r+0x1e>
 8010780:	682b      	ldr	r3, [r5, #0]
 8010782:	b103      	cbz	r3, 8010786 <_write_r+0x1e>
 8010784:	6023      	str	r3, [r4, #0]
 8010786:	bd38      	pop	{r3, r4, r5, pc}
 8010788:	200030bc 	.word	0x200030bc

0801078c <__errno>:
 801078c:	4b01      	ldr	r3, [pc, #4]	@ (8010794 <__errno+0x8>)
 801078e:	6818      	ldr	r0, [r3, #0]
 8010790:	4770      	bx	lr
 8010792:	bf00      	nop
 8010794:	20000080 	.word	0x20000080

08010798 <__libc_init_array>:
 8010798:	b570      	push	{r4, r5, r6, lr}
 801079a:	4d0d      	ldr	r5, [pc, #52]	@ (80107d0 <__libc_init_array+0x38>)
 801079c:	4c0d      	ldr	r4, [pc, #52]	@ (80107d4 <__libc_init_array+0x3c>)
 801079e:	1b64      	subs	r4, r4, r5
 80107a0:	10a4      	asrs	r4, r4, #2
 80107a2:	2600      	movs	r6, #0
 80107a4:	42a6      	cmp	r6, r4
 80107a6:	d109      	bne.n	80107bc <__libc_init_array+0x24>
 80107a8:	4d0b      	ldr	r5, [pc, #44]	@ (80107d8 <__libc_init_array+0x40>)
 80107aa:	4c0c      	ldr	r4, [pc, #48]	@ (80107dc <__libc_init_array+0x44>)
 80107ac:	f001 fcf2 	bl	8012194 <_init>
 80107b0:	1b64      	subs	r4, r4, r5
 80107b2:	10a4      	asrs	r4, r4, #2
 80107b4:	2600      	movs	r6, #0
 80107b6:	42a6      	cmp	r6, r4
 80107b8:	d105      	bne.n	80107c6 <__libc_init_array+0x2e>
 80107ba:	bd70      	pop	{r4, r5, r6, pc}
 80107bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80107c0:	4798      	blx	r3
 80107c2:	3601      	adds	r6, #1
 80107c4:	e7ee      	b.n	80107a4 <__libc_init_array+0xc>
 80107c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80107ca:	4798      	blx	r3
 80107cc:	3601      	adds	r6, #1
 80107ce:	e7f2      	b.n	80107b6 <__libc_init_array+0x1e>
 80107d0:	0801255c 	.word	0x0801255c
 80107d4:	0801255c 	.word	0x0801255c
 80107d8:	0801255c 	.word	0x0801255c
 80107dc:	08012560 	.word	0x08012560

080107e0 <__retarget_lock_init_recursive>:
 80107e0:	4770      	bx	lr

080107e2 <__retarget_lock_acquire_recursive>:
 80107e2:	4770      	bx	lr

080107e4 <__retarget_lock_release_recursive>:
 80107e4:	4770      	bx	lr

080107e6 <memcpy>:
 80107e6:	440a      	add	r2, r1
 80107e8:	4291      	cmp	r1, r2
 80107ea:	f100 33ff 	add.w	r3, r0, #4294967295
 80107ee:	d100      	bne.n	80107f2 <memcpy+0xc>
 80107f0:	4770      	bx	lr
 80107f2:	b510      	push	{r4, lr}
 80107f4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80107f8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80107fc:	4291      	cmp	r1, r2
 80107fe:	d1f9      	bne.n	80107f4 <memcpy+0xe>
 8010800:	bd10      	pop	{r4, pc}
	...

08010804 <__assert_func>:
 8010804:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010806:	4614      	mov	r4, r2
 8010808:	461a      	mov	r2, r3
 801080a:	4b09      	ldr	r3, [pc, #36]	@ (8010830 <__assert_func+0x2c>)
 801080c:	681b      	ldr	r3, [r3, #0]
 801080e:	4605      	mov	r5, r0
 8010810:	68d8      	ldr	r0, [r3, #12]
 8010812:	b954      	cbnz	r4, 801082a <__assert_func+0x26>
 8010814:	4b07      	ldr	r3, [pc, #28]	@ (8010834 <__assert_func+0x30>)
 8010816:	461c      	mov	r4, r3
 8010818:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801081c:	9100      	str	r1, [sp, #0]
 801081e:	462b      	mov	r3, r5
 8010820:	4905      	ldr	r1, [pc, #20]	@ (8010838 <__assert_func+0x34>)
 8010822:	f000 fc89 	bl	8011138 <fiprintf>
 8010826:	f000 fd3d 	bl	80112a4 <abort>
 801082a:	4b04      	ldr	r3, [pc, #16]	@ (801083c <__assert_func+0x38>)
 801082c:	e7f4      	b.n	8010818 <__assert_func+0x14>
 801082e:	bf00      	nop
 8010830:	20000080 	.word	0x20000080
 8010834:	080124d0 	.word	0x080124d0
 8010838:	080124a2 	.word	0x080124a2
 801083c:	08012495 	.word	0x08012495

08010840 <_free_r>:
 8010840:	b538      	push	{r3, r4, r5, lr}
 8010842:	4605      	mov	r5, r0
 8010844:	2900      	cmp	r1, #0
 8010846:	d041      	beq.n	80108cc <_free_r+0x8c>
 8010848:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801084c:	1f0c      	subs	r4, r1, #4
 801084e:	2b00      	cmp	r3, #0
 8010850:	bfb8      	it	lt
 8010852:	18e4      	addlt	r4, r4, r3
 8010854:	f000 f8e8 	bl	8010a28 <__malloc_lock>
 8010858:	4a1d      	ldr	r2, [pc, #116]	@ (80108d0 <_free_r+0x90>)
 801085a:	6813      	ldr	r3, [r2, #0]
 801085c:	b933      	cbnz	r3, 801086c <_free_r+0x2c>
 801085e:	6063      	str	r3, [r4, #4]
 8010860:	6014      	str	r4, [r2, #0]
 8010862:	4628      	mov	r0, r5
 8010864:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010868:	f000 b8e4 	b.w	8010a34 <__malloc_unlock>
 801086c:	42a3      	cmp	r3, r4
 801086e:	d908      	bls.n	8010882 <_free_r+0x42>
 8010870:	6820      	ldr	r0, [r4, #0]
 8010872:	1821      	adds	r1, r4, r0
 8010874:	428b      	cmp	r3, r1
 8010876:	bf01      	itttt	eq
 8010878:	6819      	ldreq	r1, [r3, #0]
 801087a:	685b      	ldreq	r3, [r3, #4]
 801087c:	1809      	addeq	r1, r1, r0
 801087e:	6021      	streq	r1, [r4, #0]
 8010880:	e7ed      	b.n	801085e <_free_r+0x1e>
 8010882:	461a      	mov	r2, r3
 8010884:	685b      	ldr	r3, [r3, #4]
 8010886:	b10b      	cbz	r3, 801088c <_free_r+0x4c>
 8010888:	42a3      	cmp	r3, r4
 801088a:	d9fa      	bls.n	8010882 <_free_r+0x42>
 801088c:	6811      	ldr	r1, [r2, #0]
 801088e:	1850      	adds	r0, r2, r1
 8010890:	42a0      	cmp	r0, r4
 8010892:	d10b      	bne.n	80108ac <_free_r+0x6c>
 8010894:	6820      	ldr	r0, [r4, #0]
 8010896:	4401      	add	r1, r0
 8010898:	1850      	adds	r0, r2, r1
 801089a:	4283      	cmp	r3, r0
 801089c:	6011      	str	r1, [r2, #0]
 801089e:	d1e0      	bne.n	8010862 <_free_r+0x22>
 80108a0:	6818      	ldr	r0, [r3, #0]
 80108a2:	685b      	ldr	r3, [r3, #4]
 80108a4:	6053      	str	r3, [r2, #4]
 80108a6:	4408      	add	r0, r1
 80108a8:	6010      	str	r0, [r2, #0]
 80108aa:	e7da      	b.n	8010862 <_free_r+0x22>
 80108ac:	d902      	bls.n	80108b4 <_free_r+0x74>
 80108ae:	230c      	movs	r3, #12
 80108b0:	602b      	str	r3, [r5, #0]
 80108b2:	e7d6      	b.n	8010862 <_free_r+0x22>
 80108b4:	6820      	ldr	r0, [r4, #0]
 80108b6:	1821      	adds	r1, r4, r0
 80108b8:	428b      	cmp	r3, r1
 80108ba:	bf04      	itt	eq
 80108bc:	6819      	ldreq	r1, [r3, #0]
 80108be:	685b      	ldreq	r3, [r3, #4]
 80108c0:	6063      	str	r3, [r4, #4]
 80108c2:	bf04      	itt	eq
 80108c4:	1809      	addeq	r1, r1, r0
 80108c6:	6021      	streq	r1, [r4, #0]
 80108c8:	6054      	str	r4, [r2, #4]
 80108ca:	e7ca      	b.n	8010862 <_free_r+0x22>
 80108cc:	bd38      	pop	{r3, r4, r5, pc}
 80108ce:	bf00      	nop
 80108d0:	200030c8 	.word	0x200030c8

080108d4 <malloc>:
 80108d4:	4b02      	ldr	r3, [pc, #8]	@ (80108e0 <malloc+0xc>)
 80108d6:	4601      	mov	r1, r0
 80108d8:	6818      	ldr	r0, [r3, #0]
 80108da:	f000 b825 	b.w	8010928 <_malloc_r>
 80108de:	bf00      	nop
 80108e0:	20000080 	.word	0x20000080

080108e4 <sbrk_aligned>:
 80108e4:	b570      	push	{r4, r5, r6, lr}
 80108e6:	4e0f      	ldr	r6, [pc, #60]	@ (8010924 <sbrk_aligned+0x40>)
 80108e8:	460c      	mov	r4, r1
 80108ea:	6831      	ldr	r1, [r6, #0]
 80108ec:	4605      	mov	r5, r0
 80108ee:	b911      	cbnz	r1, 80108f6 <sbrk_aligned+0x12>
 80108f0:	f000 fcc8 	bl	8011284 <_sbrk_r>
 80108f4:	6030      	str	r0, [r6, #0]
 80108f6:	4621      	mov	r1, r4
 80108f8:	4628      	mov	r0, r5
 80108fa:	f000 fcc3 	bl	8011284 <_sbrk_r>
 80108fe:	1c43      	adds	r3, r0, #1
 8010900:	d103      	bne.n	801090a <sbrk_aligned+0x26>
 8010902:	f04f 34ff 	mov.w	r4, #4294967295
 8010906:	4620      	mov	r0, r4
 8010908:	bd70      	pop	{r4, r5, r6, pc}
 801090a:	1cc4      	adds	r4, r0, #3
 801090c:	f024 0403 	bic.w	r4, r4, #3
 8010910:	42a0      	cmp	r0, r4
 8010912:	d0f8      	beq.n	8010906 <sbrk_aligned+0x22>
 8010914:	1a21      	subs	r1, r4, r0
 8010916:	4628      	mov	r0, r5
 8010918:	f000 fcb4 	bl	8011284 <_sbrk_r>
 801091c:	3001      	adds	r0, #1
 801091e:	d1f2      	bne.n	8010906 <sbrk_aligned+0x22>
 8010920:	e7ef      	b.n	8010902 <sbrk_aligned+0x1e>
 8010922:	bf00      	nop
 8010924:	200030c4 	.word	0x200030c4

08010928 <_malloc_r>:
 8010928:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801092c:	1ccd      	adds	r5, r1, #3
 801092e:	f025 0503 	bic.w	r5, r5, #3
 8010932:	3508      	adds	r5, #8
 8010934:	2d0c      	cmp	r5, #12
 8010936:	bf38      	it	cc
 8010938:	250c      	movcc	r5, #12
 801093a:	2d00      	cmp	r5, #0
 801093c:	4606      	mov	r6, r0
 801093e:	db01      	blt.n	8010944 <_malloc_r+0x1c>
 8010940:	42a9      	cmp	r1, r5
 8010942:	d904      	bls.n	801094e <_malloc_r+0x26>
 8010944:	230c      	movs	r3, #12
 8010946:	6033      	str	r3, [r6, #0]
 8010948:	2000      	movs	r0, #0
 801094a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801094e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8010a24 <_malloc_r+0xfc>
 8010952:	f000 f869 	bl	8010a28 <__malloc_lock>
 8010956:	f8d8 3000 	ldr.w	r3, [r8]
 801095a:	461c      	mov	r4, r3
 801095c:	bb44      	cbnz	r4, 80109b0 <_malloc_r+0x88>
 801095e:	4629      	mov	r1, r5
 8010960:	4630      	mov	r0, r6
 8010962:	f7ff ffbf 	bl	80108e4 <sbrk_aligned>
 8010966:	1c43      	adds	r3, r0, #1
 8010968:	4604      	mov	r4, r0
 801096a:	d158      	bne.n	8010a1e <_malloc_r+0xf6>
 801096c:	f8d8 4000 	ldr.w	r4, [r8]
 8010970:	4627      	mov	r7, r4
 8010972:	2f00      	cmp	r7, #0
 8010974:	d143      	bne.n	80109fe <_malloc_r+0xd6>
 8010976:	2c00      	cmp	r4, #0
 8010978:	d04b      	beq.n	8010a12 <_malloc_r+0xea>
 801097a:	6823      	ldr	r3, [r4, #0]
 801097c:	4639      	mov	r1, r7
 801097e:	4630      	mov	r0, r6
 8010980:	eb04 0903 	add.w	r9, r4, r3
 8010984:	f000 fc7e 	bl	8011284 <_sbrk_r>
 8010988:	4581      	cmp	r9, r0
 801098a:	d142      	bne.n	8010a12 <_malloc_r+0xea>
 801098c:	6821      	ldr	r1, [r4, #0]
 801098e:	1a6d      	subs	r5, r5, r1
 8010990:	4629      	mov	r1, r5
 8010992:	4630      	mov	r0, r6
 8010994:	f7ff ffa6 	bl	80108e4 <sbrk_aligned>
 8010998:	3001      	adds	r0, #1
 801099a:	d03a      	beq.n	8010a12 <_malloc_r+0xea>
 801099c:	6823      	ldr	r3, [r4, #0]
 801099e:	442b      	add	r3, r5
 80109a0:	6023      	str	r3, [r4, #0]
 80109a2:	f8d8 3000 	ldr.w	r3, [r8]
 80109a6:	685a      	ldr	r2, [r3, #4]
 80109a8:	bb62      	cbnz	r2, 8010a04 <_malloc_r+0xdc>
 80109aa:	f8c8 7000 	str.w	r7, [r8]
 80109ae:	e00f      	b.n	80109d0 <_malloc_r+0xa8>
 80109b0:	6822      	ldr	r2, [r4, #0]
 80109b2:	1b52      	subs	r2, r2, r5
 80109b4:	d420      	bmi.n	80109f8 <_malloc_r+0xd0>
 80109b6:	2a0b      	cmp	r2, #11
 80109b8:	d917      	bls.n	80109ea <_malloc_r+0xc2>
 80109ba:	1961      	adds	r1, r4, r5
 80109bc:	42a3      	cmp	r3, r4
 80109be:	6025      	str	r5, [r4, #0]
 80109c0:	bf18      	it	ne
 80109c2:	6059      	strne	r1, [r3, #4]
 80109c4:	6863      	ldr	r3, [r4, #4]
 80109c6:	bf08      	it	eq
 80109c8:	f8c8 1000 	streq.w	r1, [r8]
 80109cc:	5162      	str	r2, [r4, r5]
 80109ce:	604b      	str	r3, [r1, #4]
 80109d0:	4630      	mov	r0, r6
 80109d2:	f000 f82f 	bl	8010a34 <__malloc_unlock>
 80109d6:	f104 000b 	add.w	r0, r4, #11
 80109da:	1d23      	adds	r3, r4, #4
 80109dc:	f020 0007 	bic.w	r0, r0, #7
 80109e0:	1ac2      	subs	r2, r0, r3
 80109e2:	bf1c      	itt	ne
 80109e4:	1a1b      	subne	r3, r3, r0
 80109e6:	50a3      	strne	r3, [r4, r2]
 80109e8:	e7af      	b.n	801094a <_malloc_r+0x22>
 80109ea:	6862      	ldr	r2, [r4, #4]
 80109ec:	42a3      	cmp	r3, r4
 80109ee:	bf0c      	ite	eq
 80109f0:	f8c8 2000 	streq.w	r2, [r8]
 80109f4:	605a      	strne	r2, [r3, #4]
 80109f6:	e7eb      	b.n	80109d0 <_malloc_r+0xa8>
 80109f8:	4623      	mov	r3, r4
 80109fa:	6864      	ldr	r4, [r4, #4]
 80109fc:	e7ae      	b.n	801095c <_malloc_r+0x34>
 80109fe:	463c      	mov	r4, r7
 8010a00:	687f      	ldr	r7, [r7, #4]
 8010a02:	e7b6      	b.n	8010972 <_malloc_r+0x4a>
 8010a04:	461a      	mov	r2, r3
 8010a06:	685b      	ldr	r3, [r3, #4]
 8010a08:	42a3      	cmp	r3, r4
 8010a0a:	d1fb      	bne.n	8010a04 <_malloc_r+0xdc>
 8010a0c:	2300      	movs	r3, #0
 8010a0e:	6053      	str	r3, [r2, #4]
 8010a10:	e7de      	b.n	80109d0 <_malloc_r+0xa8>
 8010a12:	230c      	movs	r3, #12
 8010a14:	6033      	str	r3, [r6, #0]
 8010a16:	4630      	mov	r0, r6
 8010a18:	f000 f80c 	bl	8010a34 <__malloc_unlock>
 8010a1c:	e794      	b.n	8010948 <_malloc_r+0x20>
 8010a1e:	6005      	str	r5, [r0, #0]
 8010a20:	e7d6      	b.n	80109d0 <_malloc_r+0xa8>
 8010a22:	bf00      	nop
 8010a24:	200030c8 	.word	0x200030c8

08010a28 <__malloc_lock>:
 8010a28:	4801      	ldr	r0, [pc, #4]	@ (8010a30 <__malloc_lock+0x8>)
 8010a2a:	f7ff beda 	b.w	80107e2 <__retarget_lock_acquire_recursive>
 8010a2e:	bf00      	nop
 8010a30:	200030c0 	.word	0x200030c0

08010a34 <__malloc_unlock>:
 8010a34:	4801      	ldr	r0, [pc, #4]	@ (8010a3c <__malloc_unlock+0x8>)
 8010a36:	f7ff bed5 	b.w	80107e4 <__retarget_lock_release_recursive>
 8010a3a:	bf00      	nop
 8010a3c:	200030c0 	.word	0x200030c0

08010a40 <__sfputc_r>:
 8010a40:	6893      	ldr	r3, [r2, #8]
 8010a42:	3b01      	subs	r3, #1
 8010a44:	2b00      	cmp	r3, #0
 8010a46:	b410      	push	{r4}
 8010a48:	6093      	str	r3, [r2, #8]
 8010a4a:	da08      	bge.n	8010a5e <__sfputc_r+0x1e>
 8010a4c:	6994      	ldr	r4, [r2, #24]
 8010a4e:	42a3      	cmp	r3, r4
 8010a50:	db01      	blt.n	8010a56 <__sfputc_r+0x16>
 8010a52:	290a      	cmp	r1, #10
 8010a54:	d103      	bne.n	8010a5e <__sfputc_r+0x1e>
 8010a56:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010a5a:	f000 bb7f 	b.w	801115c <__swbuf_r>
 8010a5e:	6813      	ldr	r3, [r2, #0]
 8010a60:	1c58      	adds	r0, r3, #1
 8010a62:	6010      	str	r0, [r2, #0]
 8010a64:	7019      	strb	r1, [r3, #0]
 8010a66:	4608      	mov	r0, r1
 8010a68:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010a6c:	4770      	bx	lr

08010a6e <__sfputs_r>:
 8010a6e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010a70:	4606      	mov	r6, r0
 8010a72:	460f      	mov	r7, r1
 8010a74:	4614      	mov	r4, r2
 8010a76:	18d5      	adds	r5, r2, r3
 8010a78:	42ac      	cmp	r4, r5
 8010a7a:	d101      	bne.n	8010a80 <__sfputs_r+0x12>
 8010a7c:	2000      	movs	r0, #0
 8010a7e:	e007      	b.n	8010a90 <__sfputs_r+0x22>
 8010a80:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010a84:	463a      	mov	r2, r7
 8010a86:	4630      	mov	r0, r6
 8010a88:	f7ff ffda 	bl	8010a40 <__sfputc_r>
 8010a8c:	1c43      	adds	r3, r0, #1
 8010a8e:	d1f3      	bne.n	8010a78 <__sfputs_r+0xa>
 8010a90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010a94 <_vfiprintf_r>:
 8010a94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a98:	460d      	mov	r5, r1
 8010a9a:	b09d      	sub	sp, #116	@ 0x74
 8010a9c:	4614      	mov	r4, r2
 8010a9e:	4698      	mov	r8, r3
 8010aa0:	4606      	mov	r6, r0
 8010aa2:	b118      	cbz	r0, 8010aac <_vfiprintf_r+0x18>
 8010aa4:	6a03      	ldr	r3, [r0, #32]
 8010aa6:	b90b      	cbnz	r3, 8010aac <_vfiprintf_r+0x18>
 8010aa8:	f7ff fda8 	bl	80105fc <__sinit>
 8010aac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010aae:	07d9      	lsls	r1, r3, #31
 8010ab0:	d405      	bmi.n	8010abe <_vfiprintf_r+0x2a>
 8010ab2:	89ab      	ldrh	r3, [r5, #12]
 8010ab4:	059a      	lsls	r2, r3, #22
 8010ab6:	d402      	bmi.n	8010abe <_vfiprintf_r+0x2a>
 8010ab8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010aba:	f7ff fe92 	bl	80107e2 <__retarget_lock_acquire_recursive>
 8010abe:	89ab      	ldrh	r3, [r5, #12]
 8010ac0:	071b      	lsls	r3, r3, #28
 8010ac2:	d501      	bpl.n	8010ac8 <_vfiprintf_r+0x34>
 8010ac4:	692b      	ldr	r3, [r5, #16]
 8010ac6:	b99b      	cbnz	r3, 8010af0 <_vfiprintf_r+0x5c>
 8010ac8:	4629      	mov	r1, r5
 8010aca:	4630      	mov	r0, r6
 8010acc:	f000 fb84 	bl	80111d8 <__swsetup_r>
 8010ad0:	b170      	cbz	r0, 8010af0 <_vfiprintf_r+0x5c>
 8010ad2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010ad4:	07dc      	lsls	r4, r3, #31
 8010ad6:	d504      	bpl.n	8010ae2 <_vfiprintf_r+0x4e>
 8010ad8:	f04f 30ff 	mov.w	r0, #4294967295
 8010adc:	b01d      	add	sp, #116	@ 0x74
 8010ade:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ae2:	89ab      	ldrh	r3, [r5, #12]
 8010ae4:	0598      	lsls	r0, r3, #22
 8010ae6:	d4f7      	bmi.n	8010ad8 <_vfiprintf_r+0x44>
 8010ae8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010aea:	f7ff fe7b 	bl	80107e4 <__retarget_lock_release_recursive>
 8010aee:	e7f3      	b.n	8010ad8 <_vfiprintf_r+0x44>
 8010af0:	2300      	movs	r3, #0
 8010af2:	9309      	str	r3, [sp, #36]	@ 0x24
 8010af4:	2320      	movs	r3, #32
 8010af6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8010afa:	f8cd 800c 	str.w	r8, [sp, #12]
 8010afe:	2330      	movs	r3, #48	@ 0x30
 8010b00:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8010cb0 <_vfiprintf_r+0x21c>
 8010b04:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8010b08:	f04f 0901 	mov.w	r9, #1
 8010b0c:	4623      	mov	r3, r4
 8010b0e:	469a      	mov	sl, r3
 8010b10:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010b14:	b10a      	cbz	r2, 8010b1a <_vfiprintf_r+0x86>
 8010b16:	2a25      	cmp	r2, #37	@ 0x25
 8010b18:	d1f9      	bne.n	8010b0e <_vfiprintf_r+0x7a>
 8010b1a:	ebba 0b04 	subs.w	fp, sl, r4
 8010b1e:	d00b      	beq.n	8010b38 <_vfiprintf_r+0xa4>
 8010b20:	465b      	mov	r3, fp
 8010b22:	4622      	mov	r2, r4
 8010b24:	4629      	mov	r1, r5
 8010b26:	4630      	mov	r0, r6
 8010b28:	f7ff ffa1 	bl	8010a6e <__sfputs_r>
 8010b2c:	3001      	adds	r0, #1
 8010b2e:	f000 80a7 	beq.w	8010c80 <_vfiprintf_r+0x1ec>
 8010b32:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010b34:	445a      	add	r2, fp
 8010b36:	9209      	str	r2, [sp, #36]	@ 0x24
 8010b38:	f89a 3000 	ldrb.w	r3, [sl]
 8010b3c:	2b00      	cmp	r3, #0
 8010b3e:	f000 809f 	beq.w	8010c80 <_vfiprintf_r+0x1ec>
 8010b42:	2300      	movs	r3, #0
 8010b44:	f04f 32ff 	mov.w	r2, #4294967295
 8010b48:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010b4c:	f10a 0a01 	add.w	sl, sl, #1
 8010b50:	9304      	str	r3, [sp, #16]
 8010b52:	9307      	str	r3, [sp, #28]
 8010b54:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8010b58:	931a      	str	r3, [sp, #104]	@ 0x68
 8010b5a:	4654      	mov	r4, sl
 8010b5c:	2205      	movs	r2, #5
 8010b5e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010b62:	4853      	ldr	r0, [pc, #332]	@ (8010cb0 <_vfiprintf_r+0x21c>)
 8010b64:	f7ef fb14 	bl	8000190 <memchr>
 8010b68:	9a04      	ldr	r2, [sp, #16]
 8010b6a:	b9d8      	cbnz	r0, 8010ba4 <_vfiprintf_r+0x110>
 8010b6c:	06d1      	lsls	r1, r2, #27
 8010b6e:	bf44      	itt	mi
 8010b70:	2320      	movmi	r3, #32
 8010b72:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010b76:	0713      	lsls	r3, r2, #28
 8010b78:	bf44      	itt	mi
 8010b7a:	232b      	movmi	r3, #43	@ 0x2b
 8010b7c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010b80:	f89a 3000 	ldrb.w	r3, [sl]
 8010b84:	2b2a      	cmp	r3, #42	@ 0x2a
 8010b86:	d015      	beq.n	8010bb4 <_vfiprintf_r+0x120>
 8010b88:	9a07      	ldr	r2, [sp, #28]
 8010b8a:	4654      	mov	r4, sl
 8010b8c:	2000      	movs	r0, #0
 8010b8e:	f04f 0c0a 	mov.w	ip, #10
 8010b92:	4621      	mov	r1, r4
 8010b94:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010b98:	3b30      	subs	r3, #48	@ 0x30
 8010b9a:	2b09      	cmp	r3, #9
 8010b9c:	d94b      	bls.n	8010c36 <_vfiprintf_r+0x1a2>
 8010b9e:	b1b0      	cbz	r0, 8010bce <_vfiprintf_r+0x13a>
 8010ba0:	9207      	str	r2, [sp, #28]
 8010ba2:	e014      	b.n	8010bce <_vfiprintf_r+0x13a>
 8010ba4:	eba0 0308 	sub.w	r3, r0, r8
 8010ba8:	fa09 f303 	lsl.w	r3, r9, r3
 8010bac:	4313      	orrs	r3, r2
 8010bae:	9304      	str	r3, [sp, #16]
 8010bb0:	46a2      	mov	sl, r4
 8010bb2:	e7d2      	b.n	8010b5a <_vfiprintf_r+0xc6>
 8010bb4:	9b03      	ldr	r3, [sp, #12]
 8010bb6:	1d19      	adds	r1, r3, #4
 8010bb8:	681b      	ldr	r3, [r3, #0]
 8010bba:	9103      	str	r1, [sp, #12]
 8010bbc:	2b00      	cmp	r3, #0
 8010bbe:	bfbb      	ittet	lt
 8010bc0:	425b      	neglt	r3, r3
 8010bc2:	f042 0202 	orrlt.w	r2, r2, #2
 8010bc6:	9307      	strge	r3, [sp, #28]
 8010bc8:	9307      	strlt	r3, [sp, #28]
 8010bca:	bfb8      	it	lt
 8010bcc:	9204      	strlt	r2, [sp, #16]
 8010bce:	7823      	ldrb	r3, [r4, #0]
 8010bd0:	2b2e      	cmp	r3, #46	@ 0x2e
 8010bd2:	d10a      	bne.n	8010bea <_vfiprintf_r+0x156>
 8010bd4:	7863      	ldrb	r3, [r4, #1]
 8010bd6:	2b2a      	cmp	r3, #42	@ 0x2a
 8010bd8:	d132      	bne.n	8010c40 <_vfiprintf_r+0x1ac>
 8010bda:	9b03      	ldr	r3, [sp, #12]
 8010bdc:	1d1a      	adds	r2, r3, #4
 8010bde:	681b      	ldr	r3, [r3, #0]
 8010be0:	9203      	str	r2, [sp, #12]
 8010be2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010be6:	3402      	adds	r4, #2
 8010be8:	9305      	str	r3, [sp, #20]
 8010bea:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8010cc0 <_vfiprintf_r+0x22c>
 8010bee:	7821      	ldrb	r1, [r4, #0]
 8010bf0:	2203      	movs	r2, #3
 8010bf2:	4650      	mov	r0, sl
 8010bf4:	f7ef facc 	bl	8000190 <memchr>
 8010bf8:	b138      	cbz	r0, 8010c0a <_vfiprintf_r+0x176>
 8010bfa:	9b04      	ldr	r3, [sp, #16]
 8010bfc:	eba0 000a 	sub.w	r0, r0, sl
 8010c00:	2240      	movs	r2, #64	@ 0x40
 8010c02:	4082      	lsls	r2, r0
 8010c04:	4313      	orrs	r3, r2
 8010c06:	3401      	adds	r4, #1
 8010c08:	9304      	str	r3, [sp, #16]
 8010c0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010c0e:	4829      	ldr	r0, [pc, #164]	@ (8010cb4 <_vfiprintf_r+0x220>)
 8010c10:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8010c14:	2206      	movs	r2, #6
 8010c16:	f7ef fabb 	bl	8000190 <memchr>
 8010c1a:	2800      	cmp	r0, #0
 8010c1c:	d03f      	beq.n	8010c9e <_vfiprintf_r+0x20a>
 8010c1e:	4b26      	ldr	r3, [pc, #152]	@ (8010cb8 <_vfiprintf_r+0x224>)
 8010c20:	bb1b      	cbnz	r3, 8010c6a <_vfiprintf_r+0x1d6>
 8010c22:	9b03      	ldr	r3, [sp, #12]
 8010c24:	3307      	adds	r3, #7
 8010c26:	f023 0307 	bic.w	r3, r3, #7
 8010c2a:	3308      	adds	r3, #8
 8010c2c:	9303      	str	r3, [sp, #12]
 8010c2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010c30:	443b      	add	r3, r7
 8010c32:	9309      	str	r3, [sp, #36]	@ 0x24
 8010c34:	e76a      	b.n	8010b0c <_vfiprintf_r+0x78>
 8010c36:	fb0c 3202 	mla	r2, ip, r2, r3
 8010c3a:	460c      	mov	r4, r1
 8010c3c:	2001      	movs	r0, #1
 8010c3e:	e7a8      	b.n	8010b92 <_vfiprintf_r+0xfe>
 8010c40:	2300      	movs	r3, #0
 8010c42:	3401      	adds	r4, #1
 8010c44:	9305      	str	r3, [sp, #20]
 8010c46:	4619      	mov	r1, r3
 8010c48:	f04f 0c0a 	mov.w	ip, #10
 8010c4c:	4620      	mov	r0, r4
 8010c4e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010c52:	3a30      	subs	r2, #48	@ 0x30
 8010c54:	2a09      	cmp	r2, #9
 8010c56:	d903      	bls.n	8010c60 <_vfiprintf_r+0x1cc>
 8010c58:	2b00      	cmp	r3, #0
 8010c5a:	d0c6      	beq.n	8010bea <_vfiprintf_r+0x156>
 8010c5c:	9105      	str	r1, [sp, #20]
 8010c5e:	e7c4      	b.n	8010bea <_vfiprintf_r+0x156>
 8010c60:	fb0c 2101 	mla	r1, ip, r1, r2
 8010c64:	4604      	mov	r4, r0
 8010c66:	2301      	movs	r3, #1
 8010c68:	e7f0      	b.n	8010c4c <_vfiprintf_r+0x1b8>
 8010c6a:	ab03      	add	r3, sp, #12
 8010c6c:	9300      	str	r3, [sp, #0]
 8010c6e:	462a      	mov	r2, r5
 8010c70:	4b12      	ldr	r3, [pc, #72]	@ (8010cbc <_vfiprintf_r+0x228>)
 8010c72:	a904      	add	r1, sp, #16
 8010c74:	4630      	mov	r0, r6
 8010c76:	f3af 8000 	nop.w
 8010c7a:	4607      	mov	r7, r0
 8010c7c:	1c78      	adds	r0, r7, #1
 8010c7e:	d1d6      	bne.n	8010c2e <_vfiprintf_r+0x19a>
 8010c80:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010c82:	07d9      	lsls	r1, r3, #31
 8010c84:	d405      	bmi.n	8010c92 <_vfiprintf_r+0x1fe>
 8010c86:	89ab      	ldrh	r3, [r5, #12]
 8010c88:	059a      	lsls	r2, r3, #22
 8010c8a:	d402      	bmi.n	8010c92 <_vfiprintf_r+0x1fe>
 8010c8c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010c8e:	f7ff fda9 	bl	80107e4 <__retarget_lock_release_recursive>
 8010c92:	89ab      	ldrh	r3, [r5, #12]
 8010c94:	065b      	lsls	r3, r3, #25
 8010c96:	f53f af1f 	bmi.w	8010ad8 <_vfiprintf_r+0x44>
 8010c9a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010c9c:	e71e      	b.n	8010adc <_vfiprintf_r+0x48>
 8010c9e:	ab03      	add	r3, sp, #12
 8010ca0:	9300      	str	r3, [sp, #0]
 8010ca2:	462a      	mov	r2, r5
 8010ca4:	4b05      	ldr	r3, [pc, #20]	@ (8010cbc <_vfiprintf_r+0x228>)
 8010ca6:	a904      	add	r1, sp, #16
 8010ca8:	4630      	mov	r0, r6
 8010caa:	f000 f879 	bl	8010da0 <_printf_i>
 8010cae:	e7e4      	b.n	8010c7a <_vfiprintf_r+0x1e6>
 8010cb0:	080124d1 	.word	0x080124d1
 8010cb4:	080124db 	.word	0x080124db
 8010cb8:	00000000 	.word	0x00000000
 8010cbc:	08010a6f 	.word	0x08010a6f
 8010cc0:	080124d7 	.word	0x080124d7

08010cc4 <_printf_common>:
 8010cc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010cc8:	4616      	mov	r6, r2
 8010cca:	4698      	mov	r8, r3
 8010ccc:	688a      	ldr	r2, [r1, #8]
 8010cce:	690b      	ldr	r3, [r1, #16]
 8010cd0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8010cd4:	4293      	cmp	r3, r2
 8010cd6:	bfb8      	it	lt
 8010cd8:	4613      	movlt	r3, r2
 8010cda:	6033      	str	r3, [r6, #0]
 8010cdc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8010ce0:	4607      	mov	r7, r0
 8010ce2:	460c      	mov	r4, r1
 8010ce4:	b10a      	cbz	r2, 8010cea <_printf_common+0x26>
 8010ce6:	3301      	adds	r3, #1
 8010ce8:	6033      	str	r3, [r6, #0]
 8010cea:	6823      	ldr	r3, [r4, #0]
 8010cec:	0699      	lsls	r1, r3, #26
 8010cee:	bf42      	ittt	mi
 8010cf0:	6833      	ldrmi	r3, [r6, #0]
 8010cf2:	3302      	addmi	r3, #2
 8010cf4:	6033      	strmi	r3, [r6, #0]
 8010cf6:	6825      	ldr	r5, [r4, #0]
 8010cf8:	f015 0506 	ands.w	r5, r5, #6
 8010cfc:	d106      	bne.n	8010d0c <_printf_common+0x48>
 8010cfe:	f104 0a19 	add.w	sl, r4, #25
 8010d02:	68e3      	ldr	r3, [r4, #12]
 8010d04:	6832      	ldr	r2, [r6, #0]
 8010d06:	1a9b      	subs	r3, r3, r2
 8010d08:	42ab      	cmp	r3, r5
 8010d0a:	dc26      	bgt.n	8010d5a <_printf_common+0x96>
 8010d0c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8010d10:	6822      	ldr	r2, [r4, #0]
 8010d12:	3b00      	subs	r3, #0
 8010d14:	bf18      	it	ne
 8010d16:	2301      	movne	r3, #1
 8010d18:	0692      	lsls	r2, r2, #26
 8010d1a:	d42b      	bmi.n	8010d74 <_printf_common+0xb0>
 8010d1c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8010d20:	4641      	mov	r1, r8
 8010d22:	4638      	mov	r0, r7
 8010d24:	47c8      	blx	r9
 8010d26:	3001      	adds	r0, #1
 8010d28:	d01e      	beq.n	8010d68 <_printf_common+0xa4>
 8010d2a:	6823      	ldr	r3, [r4, #0]
 8010d2c:	6922      	ldr	r2, [r4, #16]
 8010d2e:	f003 0306 	and.w	r3, r3, #6
 8010d32:	2b04      	cmp	r3, #4
 8010d34:	bf02      	ittt	eq
 8010d36:	68e5      	ldreq	r5, [r4, #12]
 8010d38:	6833      	ldreq	r3, [r6, #0]
 8010d3a:	1aed      	subeq	r5, r5, r3
 8010d3c:	68a3      	ldr	r3, [r4, #8]
 8010d3e:	bf0c      	ite	eq
 8010d40:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010d44:	2500      	movne	r5, #0
 8010d46:	4293      	cmp	r3, r2
 8010d48:	bfc4      	itt	gt
 8010d4a:	1a9b      	subgt	r3, r3, r2
 8010d4c:	18ed      	addgt	r5, r5, r3
 8010d4e:	2600      	movs	r6, #0
 8010d50:	341a      	adds	r4, #26
 8010d52:	42b5      	cmp	r5, r6
 8010d54:	d11a      	bne.n	8010d8c <_printf_common+0xc8>
 8010d56:	2000      	movs	r0, #0
 8010d58:	e008      	b.n	8010d6c <_printf_common+0xa8>
 8010d5a:	2301      	movs	r3, #1
 8010d5c:	4652      	mov	r2, sl
 8010d5e:	4641      	mov	r1, r8
 8010d60:	4638      	mov	r0, r7
 8010d62:	47c8      	blx	r9
 8010d64:	3001      	adds	r0, #1
 8010d66:	d103      	bne.n	8010d70 <_printf_common+0xac>
 8010d68:	f04f 30ff 	mov.w	r0, #4294967295
 8010d6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010d70:	3501      	adds	r5, #1
 8010d72:	e7c6      	b.n	8010d02 <_printf_common+0x3e>
 8010d74:	18e1      	adds	r1, r4, r3
 8010d76:	1c5a      	adds	r2, r3, #1
 8010d78:	2030      	movs	r0, #48	@ 0x30
 8010d7a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8010d7e:	4422      	add	r2, r4
 8010d80:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8010d84:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8010d88:	3302      	adds	r3, #2
 8010d8a:	e7c7      	b.n	8010d1c <_printf_common+0x58>
 8010d8c:	2301      	movs	r3, #1
 8010d8e:	4622      	mov	r2, r4
 8010d90:	4641      	mov	r1, r8
 8010d92:	4638      	mov	r0, r7
 8010d94:	47c8      	blx	r9
 8010d96:	3001      	adds	r0, #1
 8010d98:	d0e6      	beq.n	8010d68 <_printf_common+0xa4>
 8010d9a:	3601      	adds	r6, #1
 8010d9c:	e7d9      	b.n	8010d52 <_printf_common+0x8e>
	...

08010da0 <_printf_i>:
 8010da0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010da4:	7e0f      	ldrb	r7, [r1, #24]
 8010da6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8010da8:	2f78      	cmp	r7, #120	@ 0x78
 8010daa:	4691      	mov	r9, r2
 8010dac:	4680      	mov	r8, r0
 8010dae:	460c      	mov	r4, r1
 8010db0:	469a      	mov	sl, r3
 8010db2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8010db6:	d807      	bhi.n	8010dc8 <_printf_i+0x28>
 8010db8:	2f62      	cmp	r7, #98	@ 0x62
 8010dba:	d80a      	bhi.n	8010dd2 <_printf_i+0x32>
 8010dbc:	2f00      	cmp	r7, #0
 8010dbe:	f000 80d2 	beq.w	8010f66 <_printf_i+0x1c6>
 8010dc2:	2f58      	cmp	r7, #88	@ 0x58
 8010dc4:	f000 80b9 	beq.w	8010f3a <_printf_i+0x19a>
 8010dc8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010dcc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8010dd0:	e03a      	b.n	8010e48 <_printf_i+0xa8>
 8010dd2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8010dd6:	2b15      	cmp	r3, #21
 8010dd8:	d8f6      	bhi.n	8010dc8 <_printf_i+0x28>
 8010dda:	a101      	add	r1, pc, #4	@ (adr r1, 8010de0 <_printf_i+0x40>)
 8010ddc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010de0:	08010e39 	.word	0x08010e39
 8010de4:	08010e4d 	.word	0x08010e4d
 8010de8:	08010dc9 	.word	0x08010dc9
 8010dec:	08010dc9 	.word	0x08010dc9
 8010df0:	08010dc9 	.word	0x08010dc9
 8010df4:	08010dc9 	.word	0x08010dc9
 8010df8:	08010e4d 	.word	0x08010e4d
 8010dfc:	08010dc9 	.word	0x08010dc9
 8010e00:	08010dc9 	.word	0x08010dc9
 8010e04:	08010dc9 	.word	0x08010dc9
 8010e08:	08010dc9 	.word	0x08010dc9
 8010e0c:	08010f4d 	.word	0x08010f4d
 8010e10:	08010e77 	.word	0x08010e77
 8010e14:	08010f07 	.word	0x08010f07
 8010e18:	08010dc9 	.word	0x08010dc9
 8010e1c:	08010dc9 	.word	0x08010dc9
 8010e20:	08010f6f 	.word	0x08010f6f
 8010e24:	08010dc9 	.word	0x08010dc9
 8010e28:	08010e77 	.word	0x08010e77
 8010e2c:	08010dc9 	.word	0x08010dc9
 8010e30:	08010dc9 	.word	0x08010dc9
 8010e34:	08010f0f 	.word	0x08010f0f
 8010e38:	6833      	ldr	r3, [r6, #0]
 8010e3a:	1d1a      	adds	r2, r3, #4
 8010e3c:	681b      	ldr	r3, [r3, #0]
 8010e3e:	6032      	str	r2, [r6, #0]
 8010e40:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010e44:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8010e48:	2301      	movs	r3, #1
 8010e4a:	e09d      	b.n	8010f88 <_printf_i+0x1e8>
 8010e4c:	6833      	ldr	r3, [r6, #0]
 8010e4e:	6820      	ldr	r0, [r4, #0]
 8010e50:	1d19      	adds	r1, r3, #4
 8010e52:	6031      	str	r1, [r6, #0]
 8010e54:	0606      	lsls	r6, r0, #24
 8010e56:	d501      	bpl.n	8010e5c <_printf_i+0xbc>
 8010e58:	681d      	ldr	r5, [r3, #0]
 8010e5a:	e003      	b.n	8010e64 <_printf_i+0xc4>
 8010e5c:	0645      	lsls	r5, r0, #25
 8010e5e:	d5fb      	bpl.n	8010e58 <_printf_i+0xb8>
 8010e60:	f9b3 5000 	ldrsh.w	r5, [r3]
 8010e64:	2d00      	cmp	r5, #0
 8010e66:	da03      	bge.n	8010e70 <_printf_i+0xd0>
 8010e68:	232d      	movs	r3, #45	@ 0x2d
 8010e6a:	426d      	negs	r5, r5
 8010e6c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010e70:	4859      	ldr	r0, [pc, #356]	@ (8010fd8 <_printf_i+0x238>)
 8010e72:	230a      	movs	r3, #10
 8010e74:	e011      	b.n	8010e9a <_printf_i+0xfa>
 8010e76:	6821      	ldr	r1, [r4, #0]
 8010e78:	6833      	ldr	r3, [r6, #0]
 8010e7a:	0608      	lsls	r0, r1, #24
 8010e7c:	f853 5b04 	ldr.w	r5, [r3], #4
 8010e80:	d402      	bmi.n	8010e88 <_printf_i+0xe8>
 8010e82:	0649      	lsls	r1, r1, #25
 8010e84:	bf48      	it	mi
 8010e86:	b2ad      	uxthmi	r5, r5
 8010e88:	2f6f      	cmp	r7, #111	@ 0x6f
 8010e8a:	4853      	ldr	r0, [pc, #332]	@ (8010fd8 <_printf_i+0x238>)
 8010e8c:	6033      	str	r3, [r6, #0]
 8010e8e:	bf14      	ite	ne
 8010e90:	230a      	movne	r3, #10
 8010e92:	2308      	moveq	r3, #8
 8010e94:	2100      	movs	r1, #0
 8010e96:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8010e9a:	6866      	ldr	r6, [r4, #4]
 8010e9c:	60a6      	str	r6, [r4, #8]
 8010e9e:	2e00      	cmp	r6, #0
 8010ea0:	bfa2      	ittt	ge
 8010ea2:	6821      	ldrge	r1, [r4, #0]
 8010ea4:	f021 0104 	bicge.w	r1, r1, #4
 8010ea8:	6021      	strge	r1, [r4, #0]
 8010eaa:	b90d      	cbnz	r5, 8010eb0 <_printf_i+0x110>
 8010eac:	2e00      	cmp	r6, #0
 8010eae:	d04b      	beq.n	8010f48 <_printf_i+0x1a8>
 8010eb0:	4616      	mov	r6, r2
 8010eb2:	fbb5 f1f3 	udiv	r1, r5, r3
 8010eb6:	fb03 5711 	mls	r7, r3, r1, r5
 8010eba:	5dc7      	ldrb	r7, [r0, r7]
 8010ebc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8010ec0:	462f      	mov	r7, r5
 8010ec2:	42bb      	cmp	r3, r7
 8010ec4:	460d      	mov	r5, r1
 8010ec6:	d9f4      	bls.n	8010eb2 <_printf_i+0x112>
 8010ec8:	2b08      	cmp	r3, #8
 8010eca:	d10b      	bne.n	8010ee4 <_printf_i+0x144>
 8010ecc:	6823      	ldr	r3, [r4, #0]
 8010ece:	07df      	lsls	r7, r3, #31
 8010ed0:	d508      	bpl.n	8010ee4 <_printf_i+0x144>
 8010ed2:	6923      	ldr	r3, [r4, #16]
 8010ed4:	6861      	ldr	r1, [r4, #4]
 8010ed6:	4299      	cmp	r1, r3
 8010ed8:	bfde      	ittt	le
 8010eda:	2330      	movle	r3, #48	@ 0x30
 8010edc:	f806 3c01 	strble.w	r3, [r6, #-1]
 8010ee0:	f106 36ff 	addle.w	r6, r6, #4294967295
 8010ee4:	1b92      	subs	r2, r2, r6
 8010ee6:	6122      	str	r2, [r4, #16]
 8010ee8:	f8cd a000 	str.w	sl, [sp]
 8010eec:	464b      	mov	r3, r9
 8010eee:	aa03      	add	r2, sp, #12
 8010ef0:	4621      	mov	r1, r4
 8010ef2:	4640      	mov	r0, r8
 8010ef4:	f7ff fee6 	bl	8010cc4 <_printf_common>
 8010ef8:	3001      	adds	r0, #1
 8010efa:	d14a      	bne.n	8010f92 <_printf_i+0x1f2>
 8010efc:	f04f 30ff 	mov.w	r0, #4294967295
 8010f00:	b004      	add	sp, #16
 8010f02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010f06:	6823      	ldr	r3, [r4, #0]
 8010f08:	f043 0320 	orr.w	r3, r3, #32
 8010f0c:	6023      	str	r3, [r4, #0]
 8010f0e:	4833      	ldr	r0, [pc, #204]	@ (8010fdc <_printf_i+0x23c>)
 8010f10:	2778      	movs	r7, #120	@ 0x78
 8010f12:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8010f16:	6823      	ldr	r3, [r4, #0]
 8010f18:	6831      	ldr	r1, [r6, #0]
 8010f1a:	061f      	lsls	r7, r3, #24
 8010f1c:	f851 5b04 	ldr.w	r5, [r1], #4
 8010f20:	d402      	bmi.n	8010f28 <_printf_i+0x188>
 8010f22:	065f      	lsls	r7, r3, #25
 8010f24:	bf48      	it	mi
 8010f26:	b2ad      	uxthmi	r5, r5
 8010f28:	6031      	str	r1, [r6, #0]
 8010f2a:	07d9      	lsls	r1, r3, #31
 8010f2c:	bf44      	itt	mi
 8010f2e:	f043 0320 	orrmi.w	r3, r3, #32
 8010f32:	6023      	strmi	r3, [r4, #0]
 8010f34:	b11d      	cbz	r5, 8010f3e <_printf_i+0x19e>
 8010f36:	2310      	movs	r3, #16
 8010f38:	e7ac      	b.n	8010e94 <_printf_i+0xf4>
 8010f3a:	4827      	ldr	r0, [pc, #156]	@ (8010fd8 <_printf_i+0x238>)
 8010f3c:	e7e9      	b.n	8010f12 <_printf_i+0x172>
 8010f3e:	6823      	ldr	r3, [r4, #0]
 8010f40:	f023 0320 	bic.w	r3, r3, #32
 8010f44:	6023      	str	r3, [r4, #0]
 8010f46:	e7f6      	b.n	8010f36 <_printf_i+0x196>
 8010f48:	4616      	mov	r6, r2
 8010f4a:	e7bd      	b.n	8010ec8 <_printf_i+0x128>
 8010f4c:	6833      	ldr	r3, [r6, #0]
 8010f4e:	6825      	ldr	r5, [r4, #0]
 8010f50:	6961      	ldr	r1, [r4, #20]
 8010f52:	1d18      	adds	r0, r3, #4
 8010f54:	6030      	str	r0, [r6, #0]
 8010f56:	062e      	lsls	r6, r5, #24
 8010f58:	681b      	ldr	r3, [r3, #0]
 8010f5a:	d501      	bpl.n	8010f60 <_printf_i+0x1c0>
 8010f5c:	6019      	str	r1, [r3, #0]
 8010f5e:	e002      	b.n	8010f66 <_printf_i+0x1c6>
 8010f60:	0668      	lsls	r0, r5, #25
 8010f62:	d5fb      	bpl.n	8010f5c <_printf_i+0x1bc>
 8010f64:	8019      	strh	r1, [r3, #0]
 8010f66:	2300      	movs	r3, #0
 8010f68:	6123      	str	r3, [r4, #16]
 8010f6a:	4616      	mov	r6, r2
 8010f6c:	e7bc      	b.n	8010ee8 <_printf_i+0x148>
 8010f6e:	6833      	ldr	r3, [r6, #0]
 8010f70:	1d1a      	adds	r2, r3, #4
 8010f72:	6032      	str	r2, [r6, #0]
 8010f74:	681e      	ldr	r6, [r3, #0]
 8010f76:	6862      	ldr	r2, [r4, #4]
 8010f78:	2100      	movs	r1, #0
 8010f7a:	4630      	mov	r0, r6
 8010f7c:	f7ef f908 	bl	8000190 <memchr>
 8010f80:	b108      	cbz	r0, 8010f86 <_printf_i+0x1e6>
 8010f82:	1b80      	subs	r0, r0, r6
 8010f84:	6060      	str	r0, [r4, #4]
 8010f86:	6863      	ldr	r3, [r4, #4]
 8010f88:	6123      	str	r3, [r4, #16]
 8010f8a:	2300      	movs	r3, #0
 8010f8c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010f90:	e7aa      	b.n	8010ee8 <_printf_i+0x148>
 8010f92:	6923      	ldr	r3, [r4, #16]
 8010f94:	4632      	mov	r2, r6
 8010f96:	4649      	mov	r1, r9
 8010f98:	4640      	mov	r0, r8
 8010f9a:	47d0      	blx	sl
 8010f9c:	3001      	adds	r0, #1
 8010f9e:	d0ad      	beq.n	8010efc <_printf_i+0x15c>
 8010fa0:	6823      	ldr	r3, [r4, #0]
 8010fa2:	079b      	lsls	r3, r3, #30
 8010fa4:	d413      	bmi.n	8010fce <_printf_i+0x22e>
 8010fa6:	68e0      	ldr	r0, [r4, #12]
 8010fa8:	9b03      	ldr	r3, [sp, #12]
 8010faa:	4298      	cmp	r0, r3
 8010fac:	bfb8      	it	lt
 8010fae:	4618      	movlt	r0, r3
 8010fb0:	e7a6      	b.n	8010f00 <_printf_i+0x160>
 8010fb2:	2301      	movs	r3, #1
 8010fb4:	4632      	mov	r2, r6
 8010fb6:	4649      	mov	r1, r9
 8010fb8:	4640      	mov	r0, r8
 8010fba:	47d0      	blx	sl
 8010fbc:	3001      	adds	r0, #1
 8010fbe:	d09d      	beq.n	8010efc <_printf_i+0x15c>
 8010fc0:	3501      	adds	r5, #1
 8010fc2:	68e3      	ldr	r3, [r4, #12]
 8010fc4:	9903      	ldr	r1, [sp, #12]
 8010fc6:	1a5b      	subs	r3, r3, r1
 8010fc8:	42ab      	cmp	r3, r5
 8010fca:	dcf2      	bgt.n	8010fb2 <_printf_i+0x212>
 8010fcc:	e7eb      	b.n	8010fa6 <_printf_i+0x206>
 8010fce:	2500      	movs	r5, #0
 8010fd0:	f104 0619 	add.w	r6, r4, #25
 8010fd4:	e7f5      	b.n	8010fc2 <_printf_i+0x222>
 8010fd6:	bf00      	nop
 8010fd8:	080124e2 	.word	0x080124e2
 8010fdc:	080124f3 	.word	0x080124f3

08010fe0 <__sflush_r>:
 8010fe0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8010fe4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010fe8:	0716      	lsls	r6, r2, #28
 8010fea:	4605      	mov	r5, r0
 8010fec:	460c      	mov	r4, r1
 8010fee:	d454      	bmi.n	801109a <__sflush_r+0xba>
 8010ff0:	684b      	ldr	r3, [r1, #4]
 8010ff2:	2b00      	cmp	r3, #0
 8010ff4:	dc02      	bgt.n	8010ffc <__sflush_r+0x1c>
 8010ff6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8010ff8:	2b00      	cmp	r3, #0
 8010ffa:	dd48      	ble.n	801108e <__sflush_r+0xae>
 8010ffc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8010ffe:	2e00      	cmp	r6, #0
 8011000:	d045      	beq.n	801108e <__sflush_r+0xae>
 8011002:	2300      	movs	r3, #0
 8011004:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8011008:	682f      	ldr	r7, [r5, #0]
 801100a:	6a21      	ldr	r1, [r4, #32]
 801100c:	602b      	str	r3, [r5, #0]
 801100e:	d030      	beq.n	8011072 <__sflush_r+0x92>
 8011010:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8011012:	89a3      	ldrh	r3, [r4, #12]
 8011014:	0759      	lsls	r1, r3, #29
 8011016:	d505      	bpl.n	8011024 <__sflush_r+0x44>
 8011018:	6863      	ldr	r3, [r4, #4]
 801101a:	1ad2      	subs	r2, r2, r3
 801101c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801101e:	b10b      	cbz	r3, 8011024 <__sflush_r+0x44>
 8011020:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8011022:	1ad2      	subs	r2, r2, r3
 8011024:	2300      	movs	r3, #0
 8011026:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8011028:	6a21      	ldr	r1, [r4, #32]
 801102a:	4628      	mov	r0, r5
 801102c:	47b0      	blx	r6
 801102e:	1c43      	adds	r3, r0, #1
 8011030:	89a3      	ldrh	r3, [r4, #12]
 8011032:	d106      	bne.n	8011042 <__sflush_r+0x62>
 8011034:	6829      	ldr	r1, [r5, #0]
 8011036:	291d      	cmp	r1, #29
 8011038:	d82b      	bhi.n	8011092 <__sflush_r+0xb2>
 801103a:	4a2a      	ldr	r2, [pc, #168]	@ (80110e4 <__sflush_r+0x104>)
 801103c:	410a      	asrs	r2, r1
 801103e:	07d6      	lsls	r6, r2, #31
 8011040:	d427      	bmi.n	8011092 <__sflush_r+0xb2>
 8011042:	2200      	movs	r2, #0
 8011044:	6062      	str	r2, [r4, #4]
 8011046:	04d9      	lsls	r1, r3, #19
 8011048:	6922      	ldr	r2, [r4, #16]
 801104a:	6022      	str	r2, [r4, #0]
 801104c:	d504      	bpl.n	8011058 <__sflush_r+0x78>
 801104e:	1c42      	adds	r2, r0, #1
 8011050:	d101      	bne.n	8011056 <__sflush_r+0x76>
 8011052:	682b      	ldr	r3, [r5, #0]
 8011054:	b903      	cbnz	r3, 8011058 <__sflush_r+0x78>
 8011056:	6560      	str	r0, [r4, #84]	@ 0x54
 8011058:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801105a:	602f      	str	r7, [r5, #0]
 801105c:	b1b9      	cbz	r1, 801108e <__sflush_r+0xae>
 801105e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011062:	4299      	cmp	r1, r3
 8011064:	d002      	beq.n	801106c <__sflush_r+0x8c>
 8011066:	4628      	mov	r0, r5
 8011068:	f7ff fbea 	bl	8010840 <_free_r>
 801106c:	2300      	movs	r3, #0
 801106e:	6363      	str	r3, [r4, #52]	@ 0x34
 8011070:	e00d      	b.n	801108e <__sflush_r+0xae>
 8011072:	2301      	movs	r3, #1
 8011074:	4628      	mov	r0, r5
 8011076:	47b0      	blx	r6
 8011078:	4602      	mov	r2, r0
 801107a:	1c50      	adds	r0, r2, #1
 801107c:	d1c9      	bne.n	8011012 <__sflush_r+0x32>
 801107e:	682b      	ldr	r3, [r5, #0]
 8011080:	2b00      	cmp	r3, #0
 8011082:	d0c6      	beq.n	8011012 <__sflush_r+0x32>
 8011084:	2b1d      	cmp	r3, #29
 8011086:	d001      	beq.n	801108c <__sflush_r+0xac>
 8011088:	2b16      	cmp	r3, #22
 801108a:	d11e      	bne.n	80110ca <__sflush_r+0xea>
 801108c:	602f      	str	r7, [r5, #0]
 801108e:	2000      	movs	r0, #0
 8011090:	e022      	b.n	80110d8 <__sflush_r+0xf8>
 8011092:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011096:	b21b      	sxth	r3, r3
 8011098:	e01b      	b.n	80110d2 <__sflush_r+0xf2>
 801109a:	690f      	ldr	r7, [r1, #16]
 801109c:	2f00      	cmp	r7, #0
 801109e:	d0f6      	beq.n	801108e <__sflush_r+0xae>
 80110a0:	0793      	lsls	r3, r2, #30
 80110a2:	680e      	ldr	r6, [r1, #0]
 80110a4:	bf08      	it	eq
 80110a6:	694b      	ldreq	r3, [r1, #20]
 80110a8:	600f      	str	r7, [r1, #0]
 80110aa:	bf18      	it	ne
 80110ac:	2300      	movne	r3, #0
 80110ae:	eba6 0807 	sub.w	r8, r6, r7
 80110b2:	608b      	str	r3, [r1, #8]
 80110b4:	f1b8 0f00 	cmp.w	r8, #0
 80110b8:	dde9      	ble.n	801108e <__sflush_r+0xae>
 80110ba:	6a21      	ldr	r1, [r4, #32]
 80110bc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80110be:	4643      	mov	r3, r8
 80110c0:	463a      	mov	r2, r7
 80110c2:	4628      	mov	r0, r5
 80110c4:	47b0      	blx	r6
 80110c6:	2800      	cmp	r0, #0
 80110c8:	dc08      	bgt.n	80110dc <__sflush_r+0xfc>
 80110ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80110ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80110d2:	81a3      	strh	r3, [r4, #12]
 80110d4:	f04f 30ff 	mov.w	r0, #4294967295
 80110d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80110dc:	4407      	add	r7, r0
 80110de:	eba8 0800 	sub.w	r8, r8, r0
 80110e2:	e7e7      	b.n	80110b4 <__sflush_r+0xd4>
 80110e4:	dfbffffe 	.word	0xdfbffffe

080110e8 <_fflush_r>:
 80110e8:	b538      	push	{r3, r4, r5, lr}
 80110ea:	690b      	ldr	r3, [r1, #16]
 80110ec:	4605      	mov	r5, r0
 80110ee:	460c      	mov	r4, r1
 80110f0:	b913      	cbnz	r3, 80110f8 <_fflush_r+0x10>
 80110f2:	2500      	movs	r5, #0
 80110f4:	4628      	mov	r0, r5
 80110f6:	bd38      	pop	{r3, r4, r5, pc}
 80110f8:	b118      	cbz	r0, 8011102 <_fflush_r+0x1a>
 80110fa:	6a03      	ldr	r3, [r0, #32]
 80110fc:	b90b      	cbnz	r3, 8011102 <_fflush_r+0x1a>
 80110fe:	f7ff fa7d 	bl	80105fc <__sinit>
 8011102:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011106:	2b00      	cmp	r3, #0
 8011108:	d0f3      	beq.n	80110f2 <_fflush_r+0xa>
 801110a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801110c:	07d0      	lsls	r0, r2, #31
 801110e:	d404      	bmi.n	801111a <_fflush_r+0x32>
 8011110:	0599      	lsls	r1, r3, #22
 8011112:	d402      	bmi.n	801111a <_fflush_r+0x32>
 8011114:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011116:	f7ff fb64 	bl	80107e2 <__retarget_lock_acquire_recursive>
 801111a:	4628      	mov	r0, r5
 801111c:	4621      	mov	r1, r4
 801111e:	f7ff ff5f 	bl	8010fe0 <__sflush_r>
 8011122:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011124:	07da      	lsls	r2, r3, #31
 8011126:	4605      	mov	r5, r0
 8011128:	d4e4      	bmi.n	80110f4 <_fflush_r+0xc>
 801112a:	89a3      	ldrh	r3, [r4, #12]
 801112c:	059b      	lsls	r3, r3, #22
 801112e:	d4e1      	bmi.n	80110f4 <_fflush_r+0xc>
 8011130:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011132:	f7ff fb57 	bl	80107e4 <__retarget_lock_release_recursive>
 8011136:	e7dd      	b.n	80110f4 <_fflush_r+0xc>

08011138 <fiprintf>:
 8011138:	b40e      	push	{r1, r2, r3}
 801113a:	b503      	push	{r0, r1, lr}
 801113c:	4601      	mov	r1, r0
 801113e:	ab03      	add	r3, sp, #12
 8011140:	4805      	ldr	r0, [pc, #20]	@ (8011158 <fiprintf+0x20>)
 8011142:	f853 2b04 	ldr.w	r2, [r3], #4
 8011146:	6800      	ldr	r0, [r0, #0]
 8011148:	9301      	str	r3, [sp, #4]
 801114a:	f7ff fca3 	bl	8010a94 <_vfiprintf_r>
 801114e:	b002      	add	sp, #8
 8011150:	f85d eb04 	ldr.w	lr, [sp], #4
 8011154:	b003      	add	sp, #12
 8011156:	4770      	bx	lr
 8011158:	20000080 	.word	0x20000080

0801115c <__swbuf_r>:
 801115c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801115e:	460e      	mov	r6, r1
 8011160:	4614      	mov	r4, r2
 8011162:	4605      	mov	r5, r0
 8011164:	b118      	cbz	r0, 801116e <__swbuf_r+0x12>
 8011166:	6a03      	ldr	r3, [r0, #32]
 8011168:	b90b      	cbnz	r3, 801116e <__swbuf_r+0x12>
 801116a:	f7ff fa47 	bl	80105fc <__sinit>
 801116e:	69a3      	ldr	r3, [r4, #24]
 8011170:	60a3      	str	r3, [r4, #8]
 8011172:	89a3      	ldrh	r3, [r4, #12]
 8011174:	071a      	lsls	r2, r3, #28
 8011176:	d501      	bpl.n	801117c <__swbuf_r+0x20>
 8011178:	6923      	ldr	r3, [r4, #16]
 801117a:	b943      	cbnz	r3, 801118e <__swbuf_r+0x32>
 801117c:	4621      	mov	r1, r4
 801117e:	4628      	mov	r0, r5
 8011180:	f000 f82a 	bl	80111d8 <__swsetup_r>
 8011184:	b118      	cbz	r0, 801118e <__swbuf_r+0x32>
 8011186:	f04f 37ff 	mov.w	r7, #4294967295
 801118a:	4638      	mov	r0, r7
 801118c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801118e:	6823      	ldr	r3, [r4, #0]
 8011190:	6922      	ldr	r2, [r4, #16]
 8011192:	1a98      	subs	r0, r3, r2
 8011194:	6963      	ldr	r3, [r4, #20]
 8011196:	b2f6      	uxtb	r6, r6
 8011198:	4283      	cmp	r3, r0
 801119a:	4637      	mov	r7, r6
 801119c:	dc05      	bgt.n	80111aa <__swbuf_r+0x4e>
 801119e:	4621      	mov	r1, r4
 80111a0:	4628      	mov	r0, r5
 80111a2:	f7ff ffa1 	bl	80110e8 <_fflush_r>
 80111a6:	2800      	cmp	r0, #0
 80111a8:	d1ed      	bne.n	8011186 <__swbuf_r+0x2a>
 80111aa:	68a3      	ldr	r3, [r4, #8]
 80111ac:	3b01      	subs	r3, #1
 80111ae:	60a3      	str	r3, [r4, #8]
 80111b0:	6823      	ldr	r3, [r4, #0]
 80111b2:	1c5a      	adds	r2, r3, #1
 80111b4:	6022      	str	r2, [r4, #0]
 80111b6:	701e      	strb	r6, [r3, #0]
 80111b8:	6962      	ldr	r2, [r4, #20]
 80111ba:	1c43      	adds	r3, r0, #1
 80111bc:	429a      	cmp	r2, r3
 80111be:	d004      	beq.n	80111ca <__swbuf_r+0x6e>
 80111c0:	89a3      	ldrh	r3, [r4, #12]
 80111c2:	07db      	lsls	r3, r3, #31
 80111c4:	d5e1      	bpl.n	801118a <__swbuf_r+0x2e>
 80111c6:	2e0a      	cmp	r6, #10
 80111c8:	d1df      	bne.n	801118a <__swbuf_r+0x2e>
 80111ca:	4621      	mov	r1, r4
 80111cc:	4628      	mov	r0, r5
 80111ce:	f7ff ff8b 	bl	80110e8 <_fflush_r>
 80111d2:	2800      	cmp	r0, #0
 80111d4:	d0d9      	beq.n	801118a <__swbuf_r+0x2e>
 80111d6:	e7d6      	b.n	8011186 <__swbuf_r+0x2a>

080111d8 <__swsetup_r>:
 80111d8:	b538      	push	{r3, r4, r5, lr}
 80111da:	4b29      	ldr	r3, [pc, #164]	@ (8011280 <__swsetup_r+0xa8>)
 80111dc:	4605      	mov	r5, r0
 80111de:	6818      	ldr	r0, [r3, #0]
 80111e0:	460c      	mov	r4, r1
 80111e2:	b118      	cbz	r0, 80111ec <__swsetup_r+0x14>
 80111e4:	6a03      	ldr	r3, [r0, #32]
 80111e6:	b90b      	cbnz	r3, 80111ec <__swsetup_r+0x14>
 80111e8:	f7ff fa08 	bl	80105fc <__sinit>
 80111ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80111f0:	0719      	lsls	r1, r3, #28
 80111f2:	d422      	bmi.n	801123a <__swsetup_r+0x62>
 80111f4:	06da      	lsls	r2, r3, #27
 80111f6:	d407      	bmi.n	8011208 <__swsetup_r+0x30>
 80111f8:	2209      	movs	r2, #9
 80111fa:	602a      	str	r2, [r5, #0]
 80111fc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011200:	81a3      	strh	r3, [r4, #12]
 8011202:	f04f 30ff 	mov.w	r0, #4294967295
 8011206:	e033      	b.n	8011270 <__swsetup_r+0x98>
 8011208:	0758      	lsls	r0, r3, #29
 801120a:	d512      	bpl.n	8011232 <__swsetup_r+0x5a>
 801120c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801120e:	b141      	cbz	r1, 8011222 <__swsetup_r+0x4a>
 8011210:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011214:	4299      	cmp	r1, r3
 8011216:	d002      	beq.n	801121e <__swsetup_r+0x46>
 8011218:	4628      	mov	r0, r5
 801121a:	f7ff fb11 	bl	8010840 <_free_r>
 801121e:	2300      	movs	r3, #0
 8011220:	6363      	str	r3, [r4, #52]	@ 0x34
 8011222:	89a3      	ldrh	r3, [r4, #12]
 8011224:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8011228:	81a3      	strh	r3, [r4, #12]
 801122a:	2300      	movs	r3, #0
 801122c:	6063      	str	r3, [r4, #4]
 801122e:	6923      	ldr	r3, [r4, #16]
 8011230:	6023      	str	r3, [r4, #0]
 8011232:	89a3      	ldrh	r3, [r4, #12]
 8011234:	f043 0308 	orr.w	r3, r3, #8
 8011238:	81a3      	strh	r3, [r4, #12]
 801123a:	6923      	ldr	r3, [r4, #16]
 801123c:	b94b      	cbnz	r3, 8011252 <__swsetup_r+0x7a>
 801123e:	89a3      	ldrh	r3, [r4, #12]
 8011240:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8011244:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011248:	d003      	beq.n	8011252 <__swsetup_r+0x7a>
 801124a:	4621      	mov	r1, r4
 801124c:	4628      	mov	r0, r5
 801124e:	f000 f856 	bl	80112fe <__smakebuf_r>
 8011252:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011256:	f013 0201 	ands.w	r2, r3, #1
 801125a:	d00a      	beq.n	8011272 <__swsetup_r+0x9a>
 801125c:	2200      	movs	r2, #0
 801125e:	60a2      	str	r2, [r4, #8]
 8011260:	6962      	ldr	r2, [r4, #20]
 8011262:	4252      	negs	r2, r2
 8011264:	61a2      	str	r2, [r4, #24]
 8011266:	6922      	ldr	r2, [r4, #16]
 8011268:	b942      	cbnz	r2, 801127c <__swsetup_r+0xa4>
 801126a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801126e:	d1c5      	bne.n	80111fc <__swsetup_r+0x24>
 8011270:	bd38      	pop	{r3, r4, r5, pc}
 8011272:	0799      	lsls	r1, r3, #30
 8011274:	bf58      	it	pl
 8011276:	6962      	ldrpl	r2, [r4, #20]
 8011278:	60a2      	str	r2, [r4, #8]
 801127a:	e7f4      	b.n	8011266 <__swsetup_r+0x8e>
 801127c:	2000      	movs	r0, #0
 801127e:	e7f7      	b.n	8011270 <__swsetup_r+0x98>
 8011280:	20000080 	.word	0x20000080

08011284 <_sbrk_r>:
 8011284:	b538      	push	{r3, r4, r5, lr}
 8011286:	4d06      	ldr	r5, [pc, #24]	@ (80112a0 <_sbrk_r+0x1c>)
 8011288:	2300      	movs	r3, #0
 801128a:	4604      	mov	r4, r0
 801128c:	4608      	mov	r0, r1
 801128e:	602b      	str	r3, [r5, #0]
 8011290:	f7f6 fa1e 	bl	80076d0 <_sbrk>
 8011294:	1c43      	adds	r3, r0, #1
 8011296:	d102      	bne.n	801129e <_sbrk_r+0x1a>
 8011298:	682b      	ldr	r3, [r5, #0]
 801129a:	b103      	cbz	r3, 801129e <_sbrk_r+0x1a>
 801129c:	6023      	str	r3, [r4, #0]
 801129e:	bd38      	pop	{r3, r4, r5, pc}
 80112a0:	200030bc 	.word	0x200030bc

080112a4 <abort>:
 80112a4:	b508      	push	{r3, lr}
 80112a6:	2006      	movs	r0, #6
 80112a8:	f000 f88e 	bl	80113c8 <raise>
 80112ac:	2001      	movs	r0, #1
 80112ae:	f7f6 f996 	bl	80075de <_exit>

080112b2 <__swhatbuf_r>:
 80112b2:	b570      	push	{r4, r5, r6, lr}
 80112b4:	460c      	mov	r4, r1
 80112b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80112ba:	2900      	cmp	r1, #0
 80112bc:	b096      	sub	sp, #88	@ 0x58
 80112be:	4615      	mov	r5, r2
 80112c0:	461e      	mov	r6, r3
 80112c2:	da0d      	bge.n	80112e0 <__swhatbuf_r+0x2e>
 80112c4:	89a3      	ldrh	r3, [r4, #12]
 80112c6:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80112ca:	f04f 0100 	mov.w	r1, #0
 80112ce:	bf14      	ite	ne
 80112d0:	2340      	movne	r3, #64	@ 0x40
 80112d2:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80112d6:	2000      	movs	r0, #0
 80112d8:	6031      	str	r1, [r6, #0]
 80112da:	602b      	str	r3, [r5, #0]
 80112dc:	b016      	add	sp, #88	@ 0x58
 80112de:	bd70      	pop	{r4, r5, r6, pc}
 80112e0:	466a      	mov	r2, sp
 80112e2:	f000 f879 	bl	80113d8 <_fstat_r>
 80112e6:	2800      	cmp	r0, #0
 80112e8:	dbec      	blt.n	80112c4 <__swhatbuf_r+0x12>
 80112ea:	9901      	ldr	r1, [sp, #4]
 80112ec:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80112f0:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80112f4:	4259      	negs	r1, r3
 80112f6:	4159      	adcs	r1, r3
 80112f8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80112fc:	e7eb      	b.n	80112d6 <__swhatbuf_r+0x24>

080112fe <__smakebuf_r>:
 80112fe:	898b      	ldrh	r3, [r1, #12]
 8011300:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011302:	079d      	lsls	r5, r3, #30
 8011304:	4606      	mov	r6, r0
 8011306:	460c      	mov	r4, r1
 8011308:	d507      	bpl.n	801131a <__smakebuf_r+0x1c>
 801130a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801130e:	6023      	str	r3, [r4, #0]
 8011310:	6123      	str	r3, [r4, #16]
 8011312:	2301      	movs	r3, #1
 8011314:	6163      	str	r3, [r4, #20]
 8011316:	b003      	add	sp, #12
 8011318:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801131a:	ab01      	add	r3, sp, #4
 801131c:	466a      	mov	r2, sp
 801131e:	f7ff ffc8 	bl	80112b2 <__swhatbuf_r>
 8011322:	9f00      	ldr	r7, [sp, #0]
 8011324:	4605      	mov	r5, r0
 8011326:	4639      	mov	r1, r7
 8011328:	4630      	mov	r0, r6
 801132a:	f7ff fafd 	bl	8010928 <_malloc_r>
 801132e:	b948      	cbnz	r0, 8011344 <__smakebuf_r+0x46>
 8011330:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011334:	059a      	lsls	r2, r3, #22
 8011336:	d4ee      	bmi.n	8011316 <__smakebuf_r+0x18>
 8011338:	f023 0303 	bic.w	r3, r3, #3
 801133c:	f043 0302 	orr.w	r3, r3, #2
 8011340:	81a3      	strh	r3, [r4, #12]
 8011342:	e7e2      	b.n	801130a <__smakebuf_r+0xc>
 8011344:	89a3      	ldrh	r3, [r4, #12]
 8011346:	6020      	str	r0, [r4, #0]
 8011348:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801134c:	81a3      	strh	r3, [r4, #12]
 801134e:	9b01      	ldr	r3, [sp, #4]
 8011350:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8011354:	b15b      	cbz	r3, 801136e <__smakebuf_r+0x70>
 8011356:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801135a:	4630      	mov	r0, r6
 801135c:	f000 f84e 	bl	80113fc <_isatty_r>
 8011360:	b128      	cbz	r0, 801136e <__smakebuf_r+0x70>
 8011362:	89a3      	ldrh	r3, [r4, #12]
 8011364:	f023 0303 	bic.w	r3, r3, #3
 8011368:	f043 0301 	orr.w	r3, r3, #1
 801136c:	81a3      	strh	r3, [r4, #12]
 801136e:	89a3      	ldrh	r3, [r4, #12]
 8011370:	431d      	orrs	r5, r3
 8011372:	81a5      	strh	r5, [r4, #12]
 8011374:	e7cf      	b.n	8011316 <__smakebuf_r+0x18>

08011376 <_raise_r>:
 8011376:	291f      	cmp	r1, #31
 8011378:	b538      	push	{r3, r4, r5, lr}
 801137a:	4605      	mov	r5, r0
 801137c:	460c      	mov	r4, r1
 801137e:	d904      	bls.n	801138a <_raise_r+0x14>
 8011380:	2316      	movs	r3, #22
 8011382:	6003      	str	r3, [r0, #0]
 8011384:	f04f 30ff 	mov.w	r0, #4294967295
 8011388:	bd38      	pop	{r3, r4, r5, pc}
 801138a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801138c:	b112      	cbz	r2, 8011394 <_raise_r+0x1e>
 801138e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011392:	b94b      	cbnz	r3, 80113a8 <_raise_r+0x32>
 8011394:	4628      	mov	r0, r5
 8011396:	f000 f853 	bl	8011440 <_getpid_r>
 801139a:	4622      	mov	r2, r4
 801139c:	4601      	mov	r1, r0
 801139e:	4628      	mov	r0, r5
 80113a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80113a4:	f000 b83a 	b.w	801141c <_kill_r>
 80113a8:	2b01      	cmp	r3, #1
 80113aa:	d00a      	beq.n	80113c2 <_raise_r+0x4c>
 80113ac:	1c59      	adds	r1, r3, #1
 80113ae:	d103      	bne.n	80113b8 <_raise_r+0x42>
 80113b0:	2316      	movs	r3, #22
 80113b2:	6003      	str	r3, [r0, #0]
 80113b4:	2001      	movs	r0, #1
 80113b6:	e7e7      	b.n	8011388 <_raise_r+0x12>
 80113b8:	2100      	movs	r1, #0
 80113ba:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80113be:	4620      	mov	r0, r4
 80113c0:	4798      	blx	r3
 80113c2:	2000      	movs	r0, #0
 80113c4:	e7e0      	b.n	8011388 <_raise_r+0x12>
	...

080113c8 <raise>:
 80113c8:	4b02      	ldr	r3, [pc, #8]	@ (80113d4 <raise+0xc>)
 80113ca:	4601      	mov	r1, r0
 80113cc:	6818      	ldr	r0, [r3, #0]
 80113ce:	f7ff bfd2 	b.w	8011376 <_raise_r>
 80113d2:	bf00      	nop
 80113d4:	20000080 	.word	0x20000080

080113d8 <_fstat_r>:
 80113d8:	b538      	push	{r3, r4, r5, lr}
 80113da:	4d07      	ldr	r5, [pc, #28]	@ (80113f8 <_fstat_r+0x20>)
 80113dc:	2300      	movs	r3, #0
 80113de:	4604      	mov	r4, r0
 80113e0:	4608      	mov	r0, r1
 80113e2:	4611      	mov	r1, r2
 80113e4:	602b      	str	r3, [r5, #0]
 80113e6:	f7f6 f94a 	bl	800767e <_fstat>
 80113ea:	1c43      	adds	r3, r0, #1
 80113ec:	d102      	bne.n	80113f4 <_fstat_r+0x1c>
 80113ee:	682b      	ldr	r3, [r5, #0]
 80113f0:	b103      	cbz	r3, 80113f4 <_fstat_r+0x1c>
 80113f2:	6023      	str	r3, [r4, #0]
 80113f4:	bd38      	pop	{r3, r4, r5, pc}
 80113f6:	bf00      	nop
 80113f8:	200030bc 	.word	0x200030bc

080113fc <_isatty_r>:
 80113fc:	b538      	push	{r3, r4, r5, lr}
 80113fe:	4d06      	ldr	r5, [pc, #24]	@ (8011418 <_isatty_r+0x1c>)
 8011400:	2300      	movs	r3, #0
 8011402:	4604      	mov	r4, r0
 8011404:	4608      	mov	r0, r1
 8011406:	602b      	str	r3, [r5, #0]
 8011408:	f7f6 f949 	bl	800769e <_isatty>
 801140c:	1c43      	adds	r3, r0, #1
 801140e:	d102      	bne.n	8011416 <_isatty_r+0x1a>
 8011410:	682b      	ldr	r3, [r5, #0]
 8011412:	b103      	cbz	r3, 8011416 <_isatty_r+0x1a>
 8011414:	6023      	str	r3, [r4, #0]
 8011416:	bd38      	pop	{r3, r4, r5, pc}
 8011418:	200030bc 	.word	0x200030bc

0801141c <_kill_r>:
 801141c:	b538      	push	{r3, r4, r5, lr}
 801141e:	4d07      	ldr	r5, [pc, #28]	@ (801143c <_kill_r+0x20>)
 8011420:	2300      	movs	r3, #0
 8011422:	4604      	mov	r4, r0
 8011424:	4608      	mov	r0, r1
 8011426:	4611      	mov	r1, r2
 8011428:	602b      	str	r3, [r5, #0]
 801142a:	f7f6 f8c8 	bl	80075be <_kill>
 801142e:	1c43      	adds	r3, r0, #1
 8011430:	d102      	bne.n	8011438 <_kill_r+0x1c>
 8011432:	682b      	ldr	r3, [r5, #0]
 8011434:	b103      	cbz	r3, 8011438 <_kill_r+0x1c>
 8011436:	6023      	str	r3, [r4, #0]
 8011438:	bd38      	pop	{r3, r4, r5, pc}
 801143a:	bf00      	nop
 801143c:	200030bc 	.word	0x200030bc

08011440 <_getpid_r>:
 8011440:	f7f6 b8b5 	b.w	80075ae <_getpid>

08011444 <sqrt>:
 8011444:	b538      	push	{r3, r4, r5, lr}
 8011446:	ed2d 8b02 	vpush	{d8}
 801144a:	ec55 4b10 	vmov	r4, r5, d0
 801144e:	f000 f8a7 	bl	80115a0 <__ieee754_sqrt>
 8011452:	4622      	mov	r2, r4
 8011454:	462b      	mov	r3, r5
 8011456:	4620      	mov	r0, r4
 8011458:	4629      	mov	r1, r5
 801145a:	eeb0 8a40 	vmov.f32	s16, s0
 801145e:	eef0 8a60 	vmov.f32	s17, s1
 8011462:	f7ef fb3b 	bl	8000adc <__aeabi_dcmpun>
 8011466:	b990      	cbnz	r0, 801148e <sqrt+0x4a>
 8011468:	2200      	movs	r2, #0
 801146a:	2300      	movs	r3, #0
 801146c:	4620      	mov	r0, r4
 801146e:	4629      	mov	r1, r5
 8011470:	f7ef fb0c 	bl	8000a8c <__aeabi_dcmplt>
 8011474:	b158      	cbz	r0, 801148e <sqrt+0x4a>
 8011476:	f7ff f989 	bl	801078c <__errno>
 801147a:	2321      	movs	r3, #33	@ 0x21
 801147c:	6003      	str	r3, [r0, #0]
 801147e:	2200      	movs	r2, #0
 8011480:	2300      	movs	r3, #0
 8011482:	4610      	mov	r0, r2
 8011484:	4619      	mov	r1, r3
 8011486:	f7ef f9b9 	bl	80007fc <__aeabi_ddiv>
 801148a:	ec41 0b18 	vmov	d8, r0, r1
 801148e:	eeb0 0a48 	vmov.f32	s0, s16
 8011492:	eef0 0a68 	vmov.f32	s1, s17
 8011496:	ecbd 8b02 	vpop	{d8}
 801149a:	bd38      	pop	{r3, r4, r5, pc}

0801149c <atan2f>:
 801149c:	f000 b9a2 	b.w	80117e4 <__ieee754_atan2f>

080114a0 <powf>:
 80114a0:	b508      	push	{r3, lr}
 80114a2:	ed2d 8b04 	vpush	{d8-d9}
 80114a6:	eeb0 8a60 	vmov.f32	s16, s1
 80114aa:	eeb0 9a40 	vmov.f32	s18, s0
 80114ae:	f000 fa39 	bl	8011924 <__ieee754_powf>
 80114b2:	eeb4 8a48 	vcmp.f32	s16, s16
 80114b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80114ba:	eef0 8a40 	vmov.f32	s17, s0
 80114be:	d63e      	bvs.n	801153e <powf+0x9e>
 80114c0:	eeb5 9a40 	vcmp.f32	s18, #0.0
 80114c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80114c8:	d112      	bne.n	80114f0 <powf+0x50>
 80114ca:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80114ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80114d2:	d039      	beq.n	8011548 <powf+0xa8>
 80114d4:	eeb0 0a48 	vmov.f32	s0, s16
 80114d8:	f000 f858 	bl	801158c <finitef>
 80114dc:	b378      	cbz	r0, 801153e <powf+0x9e>
 80114de:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80114e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80114e6:	d52a      	bpl.n	801153e <powf+0x9e>
 80114e8:	f7ff f950 	bl	801078c <__errno>
 80114ec:	2322      	movs	r3, #34	@ 0x22
 80114ee:	e014      	b.n	801151a <powf+0x7a>
 80114f0:	f000 f84c 	bl	801158c <finitef>
 80114f4:	b998      	cbnz	r0, 801151e <powf+0x7e>
 80114f6:	eeb0 0a49 	vmov.f32	s0, s18
 80114fa:	f000 f847 	bl	801158c <finitef>
 80114fe:	b170      	cbz	r0, 801151e <powf+0x7e>
 8011500:	eeb0 0a48 	vmov.f32	s0, s16
 8011504:	f000 f842 	bl	801158c <finitef>
 8011508:	b148      	cbz	r0, 801151e <powf+0x7e>
 801150a:	eef4 8a68 	vcmp.f32	s17, s17
 801150e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011512:	d7e9      	bvc.n	80114e8 <powf+0x48>
 8011514:	f7ff f93a 	bl	801078c <__errno>
 8011518:	2321      	movs	r3, #33	@ 0x21
 801151a:	6003      	str	r3, [r0, #0]
 801151c:	e00f      	b.n	801153e <powf+0x9e>
 801151e:	eef5 8a40 	vcmp.f32	s17, #0.0
 8011522:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011526:	d10a      	bne.n	801153e <powf+0x9e>
 8011528:	eeb0 0a49 	vmov.f32	s0, s18
 801152c:	f000 f82e 	bl	801158c <finitef>
 8011530:	b128      	cbz	r0, 801153e <powf+0x9e>
 8011532:	eeb0 0a48 	vmov.f32	s0, s16
 8011536:	f000 f829 	bl	801158c <finitef>
 801153a:	2800      	cmp	r0, #0
 801153c:	d1d4      	bne.n	80114e8 <powf+0x48>
 801153e:	eeb0 0a68 	vmov.f32	s0, s17
 8011542:	ecbd 8b04 	vpop	{d8-d9}
 8011546:	bd08      	pop	{r3, pc}
 8011548:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 801154c:	e7f7      	b.n	801153e <powf+0x9e>
	...

08011550 <sqrtf>:
 8011550:	b508      	push	{r3, lr}
 8011552:	ed2d 8b02 	vpush	{d8}
 8011556:	eeb0 8a40 	vmov.f32	s16, s0
 801155a:	f000 f8fb 	bl	8011754 <__ieee754_sqrtf>
 801155e:	eeb4 8a48 	vcmp.f32	s16, s16
 8011562:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011566:	d60c      	bvs.n	8011582 <sqrtf+0x32>
 8011568:	eddf 8a07 	vldr	s17, [pc, #28]	@ 8011588 <sqrtf+0x38>
 801156c:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8011570:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011574:	d505      	bpl.n	8011582 <sqrtf+0x32>
 8011576:	f7ff f909 	bl	801078c <__errno>
 801157a:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 801157e:	2321      	movs	r3, #33	@ 0x21
 8011580:	6003      	str	r3, [r0, #0]
 8011582:	ecbd 8b02 	vpop	{d8}
 8011586:	bd08      	pop	{r3, pc}
 8011588:	00000000 	.word	0x00000000

0801158c <finitef>:
 801158c:	ee10 3a10 	vmov	r3, s0
 8011590:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 8011594:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 8011598:	bfac      	ite	ge
 801159a:	2000      	movge	r0, #0
 801159c:	2001      	movlt	r0, #1
 801159e:	4770      	bx	lr

080115a0 <__ieee754_sqrt>:
 80115a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80115a4:	4a68      	ldr	r2, [pc, #416]	@ (8011748 <__ieee754_sqrt+0x1a8>)
 80115a6:	ec55 4b10 	vmov	r4, r5, d0
 80115aa:	43aa      	bics	r2, r5
 80115ac:	462b      	mov	r3, r5
 80115ae:	4621      	mov	r1, r4
 80115b0:	d110      	bne.n	80115d4 <__ieee754_sqrt+0x34>
 80115b2:	4622      	mov	r2, r4
 80115b4:	4620      	mov	r0, r4
 80115b6:	4629      	mov	r1, r5
 80115b8:	f7ee fff6 	bl	80005a8 <__aeabi_dmul>
 80115bc:	4602      	mov	r2, r0
 80115be:	460b      	mov	r3, r1
 80115c0:	4620      	mov	r0, r4
 80115c2:	4629      	mov	r1, r5
 80115c4:	f7ee fe3a 	bl	800023c <__adddf3>
 80115c8:	4604      	mov	r4, r0
 80115ca:	460d      	mov	r5, r1
 80115cc:	ec45 4b10 	vmov	d0, r4, r5
 80115d0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80115d4:	2d00      	cmp	r5, #0
 80115d6:	dc0e      	bgt.n	80115f6 <__ieee754_sqrt+0x56>
 80115d8:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 80115dc:	4322      	orrs	r2, r4
 80115de:	d0f5      	beq.n	80115cc <__ieee754_sqrt+0x2c>
 80115e0:	b19d      	cbz	r5, 801160a <__ieee754_sqrt+0x6a>
 80115e2:	4622      	mov	r2, r4
 80115e4:	4620      	mov	r0, r4
 80115e6:	4629      	mov	r1, r5
 80115e8:	f7ee fe26 	bl	8000238 <__aeabi_dsub>
 80115ec:	4602      	mov	r2, r0
 80115ee:	460b      	mov	r3, r1
 80115f0:	f7ef f904 	bl	80007fc <__aeabi_ddiv>
 80115f4:	e7e8      	b.n	80115c8 <__ieee754_sqrt+0x28>
 80115f6:	152a      	asrs	r2, r5, #20
 80115f8:	d115      	bne.n	8011626 <__ieee754_sqrt+0x86>
 80115fa:	2000      	movs	r0, #0
 80115fc:	e009      	b.n	8011612 <__ieee754_sqrt+0x72>
 80115fe:	0acb      	lsrs	r3, r1, #11
 8011600:	3a15      	subs	r2, #21
 8011602:	0549      	lsls	r1, r1, #21
 8011604:	2b00      	cmp	r3, #0
 8011606:	d0fa      	beq.n	80115fe <__ieee754_sqrt+0x5e>
 8011608:	e7f7      	b.n	80115fa <__ieee754_sqrt+0x5a>
 801160a:	462a      	mov	r2, r5
 801160c:	e7fa      	b.n	8011604 <__ieee754_sqrt+0x64>
 801160e:	005b      	lsls	r3, r3, #1
 8011610:	3001      	adds	r0, #1
 8011612:	02dc      	lsls	r4, r3, #11
 8011614:	d5fb      	bpl.n	801160e <__ieee754_sqrt+0x6e>
 8011616:	1e44      	subs	r4, r0, #1
 8011618:	1b12      	subs	r2, r2, r4
 801161a:	f1c0 0420 	rsb	r4, r0, #32
 801161e:	fa21 f404 	lsr.w	r4, r1, r4
 8011622:	4323      	orrs	r3, r4
 8011624:	4081      	lsls	r1, r0
 8011626:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801162a:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 801162e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8011632:	07d2      	lsls	r2, r2, #31
 8011634:	bf5c      	itt	pl
 8011636:	005b      	lslpl	r3, r3, #1
 8011638:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 801163c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8011640:	bf58      	it	pl
 8011642:	0049      	lslpl	r1, r1, #1
 8011644:	2600      	movs	r6, #0
 8011646:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 801164a:	106d      	asrs	r5, r5, #1
 801164c:	0049      	lsls	r1, r1, #1
 801164e:	2016      	movs	r0, #22
 8011650:	4632      	mov	r2, r6
 8011652:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8011656:	1917      	adds	r7, r2, r4
 8011658:	429f      	cmp	r7, r3
 801165a:	bfde      	ittt	le
 801165c:	193a      	addle	r2, r7, r4
 801165e:	1bdb      	suble	r3, r3, r7
 8011660:	1936      	addle	r6, r6, r4
 8011662:	0fcf      	lsrs	r7, r1, #31
 8011664:	3801      	subs	r0, #1
 8011666:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 801166a:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801166e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8011672:	d1f0      	bne.n	8011656 <__ieee754_sqrt+0xb6>
 8011674:	4604      	mov	r4, r0
 8011676:	2720      	movs	r7, #32
 8011678:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 801167c:	429a      	cmp	r2, r3
 801167e:	eb00 0e0c 	add.w	lr, r0, ip
 8011682:	db02      	blt.n	801168a <__ieee754_sqrt+0xea>
 8011684:	d113      	bne.n	80116ae <__ieee754_sqrt+0x10e>
 8011686:	458e      	cmp	lr, r1
 8011688:	d811      	bhi.n	80116ae <__ieee754_sqrt+0x10e>
 801168a:	f1be 0f00 	cmp.w	lr, #0
 801168e:	eb0e 000c 	add.w	r0, lr, ip
 8011692:	da42      	bge.n	801171a <__ieee754_sqrt+0x17a>
 8011694:	2800      	cmp	r0, #0
 8011696:	db40      	blt.n	801171a <__ieee754_sqrt+0x17a>
 8011698:	f102 0801 	add.w	r8, r2, #1
 801169c:	1a9b      	subs	r3, r3, r2
 801169e:	458e      	cmp	lr, r1
 80116a0:	bf88      	it	hi
 80116a2:	f103 33ff 	addhi.w	r3, r3, #4294967295
 80116a6:	eba1 010e 	sub.w	r1, r1, lr
 80116aa:	4464      	add	r4, ip
 80116ac:	4642      	mov	r2, r8
 80116ae:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 80116b2:	3f01      	subs	r7, #1
 80116b4:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 80116b8:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80116bc:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 80116c0:	d1dc      	bne.n	801167c <__ieee754_sqrt+0xdc>
 80116c2:	4319      	orrs	r1, r3
 80116c4:	d01b      	beq.n	80116fe <__ieee754_sqrt+0x15e>
 80116c6:	f8df a084 	ldr.w	sl, [pc, #132]	@ 801174c <__ieee754_sqrt+0x1ac>
 80116ca:	f8df b084 	ldr.w	fp, [pc, #132]	@ 8011750 <__ieee754_sqrt+0x1b0>
 80116ce:	e9da 0100 	ldrd	r0, r1, [sl]
 80116d2:	e9db 2300 	ldrd	r2, r3, [fp]
 80116d6:	f7ee fdaf 	bl	8000238 <__aeabi_dsub>
 80116da:	e9da 8900 	ldrd	r8, r9, [sl]
 80116de:	4602      	mov	r2, r0
 80116e0:	460b      	mov	r3, r1
 80116e2:	4640      	mov	r0, r8
 80116e4:	4649      	mov	r1, r9
 80116e6:	f7ef f9db 	bl	8000aa0 <__aeabi_dcmple>
 80116ea:	b140      	cbz	r0, 80116fe <__ieee754_sqrt+0x15e>
 80116ec:	f1b4 3fff 	cmp.w	r4, #4294967295
 80116f0:	e9da 0100 	ldrd	r0, r1, [sl]
 80116f4:	e9db 2300 	ldrd	r2, r3, [fp]
 80116f8:	d111      	bne.n	801171e <__ieee754_sqrt+0x17e>
 80116fa:	3601      	adds	r6, #1
 80116fc:	463c      	mov	r4, r7
 80116fe:	1072      	asrs	r2, r6, #1
 8011700:	0863      	lsrs	r3, r4, #1
 8011702:	07f1      	lsls	r1, r6, #31
 8011704:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8011708:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 801170c:	bf48      	it	mi
 801170e:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8011712:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 8011716:	4618      	mov	r0, r3
 8011718:	e756      	b.n	80115c8 <__ieee754_sqrt+0x28>
 801171a:	4690      	mov	r8, r2
 801171c:	e7be      	b.n	801169c <__ieee754_sqrt+0xfc>
 801171e:	f7ee fd8d 	bl	800023c <__adddf3>
 8011722:	e9da 8900 	ldrd	r8, r9, [sl]
 8011726:	4602      	mov	r2, r0
 8011728:	460b      	mov	r3, r1
 801172a:	4640      	mov	r0, r8
 801172c:	4649      	mov	r1, r9
 801172e:	f7ef f9ad 	bl	8000a8c <__aeabi_dcmplt>
 8011732:	b120      	cbz	r0, 801173e <__ieee754_sqrt+0x19e>
 8011734:	1ca0      	adds	r0, r4, #2
 8011736:	bf08      	it	eq
 8011738:	3601      	addeq	r6, #1
 801173a:	3402      	adds	r4, #2
 801173c:	e7df      	b.n	80116fe <__ieee754_sqrt+0x15e>
 801173e:	1c63      	adds	r3, r4, #1
 8011740:	f023 0401 	bic.w	r4, r3, #1
 8011744:	e7db      	b.n	80116fe <__ieee754_sqrt+0x15e>
 8011746:	bf00      	nop
 8011748:	7ff00000 	.word	0x7ff00000
 801174c:	200000d8 	.word	0x200000d8
 8011750:	200000d0 	.word	0x200000d0

08011754 <__ieee754_sqrtf>:
 8011754:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8011758:	4770      	bx	lr
	...

0801175c <floorf>:
 801175c:	ee10 3a10 	vmov	r3, s0
 8011760:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8011764:	3a7f      	subs	r2, #127	@ 0x7f
 8011766:	2a16      	cmp	r2, #22
 8011768:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 801176c:	dc2b      	bgt.n	80117c6 <floorf+0x6a>
 801176e:	2a00      	cmp	r2, #0
 8011770:	da12      	bge.n	8011798 <floorf+0x3c>
 8011772:	eddf 7a19 	vldr	s15, [pc, #100]	@ 80117d8 <floorf+0x7c>
 8011776:	ee30 0a27 	vadd.f32	s0, s0, s15
 801177a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801177e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011782:	dd06      	ble.n	8011792 <floorf+0x36>
 8011784:	2b00      	cmp	r3, #0
 8011786:	da24      	bge.n	80117d2 <floorf+0x76>
 8011788:	2900      	cmp	r1, #0
 801178a:	4b14      	ldr	r3, [pc, #80]	@ (80117dc <floorf+0x80>)
 801178c:	bf08      	it	eq
 801178e:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 8011792:	ee00 3a10 	vmov	s0, r3
 8011796:	4770      	bx	lr
 8011798:	4911      	ldr	r1, [pc, #68]	@ (80117e0 <floorf+0x84>)
 801179a:	4111      	asrs	r1, r2
 801179c:	420b      	tst	r3, r1
 801179e:	d0fa      	beq.n	8011796 <floorf+0x3a>
 80117a0:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 80117d8 <floorf+0x7c>
 80117a4:	ee30 0a27 	vadd.f32	s0, s0, s15
 80117a8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80117ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80117b0:	ddef      	ble.n	8011792 <floorf+0x36>
 80117b2:	2b00      	cmp	r3, #0
 80117b4:	bfbe      	ittt	lt
 80117b6:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 80117ba:	fa40 f202 	asrlt.w	r2, r0, r2
 80117be:	189b      	addlt	r3, r3, r2
 80117c0:	ea23 0301 	bic.w	r3, r3, r1
 80117c4:	e7e5      	b.n	8011792 <floorf+0x36>
 80117c6:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 80117ca:	d3e4      	bcc.n	8011796 <floorf+0x3a>
 80117cc:	ee30 0a00 	vadd.f32	s0, s0, s0
 80117d0:	4770      	bx	lr
 80117d2:	2300      	movs	r3, #0
 80117d4:	e7dd      	b.n	8011792 <floorf+0x36>
 80117d6:	bf00      	nop
 80117d8:	7149f2ca 	.word	0x7149f2ca
 80117dc:	bf800000 	.word	0xbf800000
 80117e0:	007fffff 	.word	0x007fffff

080117e4 <__ieee754_atan2f>:
 80117e4:	ee10 2a90 	vmov	r2, s1
 80117e8:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 80117ec:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 80117f0:	b510      	push	{r4, lr}
 80117f2:	eef0 7a40 	vmov.f32	s15, s0
 80117f6:	d806      	bhi.n	8011806 <__ieee754_atan2f+0x22>
 80117f8:	ee10 0a10 	vmov	r0, s0
 80117fc:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 8011800:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8011804:	d904      	bls.n	8011810 <__ieee754_atan2f+0x2c>
 8011806:	ee77 7aa0 	vadd.f32	s15, s15, s1
 801180a:	eeb0 0a67 	vmov.f32	s0, s15
 801180e:	bd10      	pop	{r4, pc}
 8011810:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 8011814:	d103      	bne.n	801181e <__ieee754_atan2f+0x3a>
 8011816:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801181a:	f000 bb53 	b.w	8011ec4 <atanf>
 801181e:	1794      	asrs	r4, r2, #30
 8011820:	f004 0402 	and.w	r4, r4, #2
 8011824:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8011828:	b943      	cbnz	r3, 801183c <__ieee754_atan2f+0x58>
 801182a:	2c02      	cmp	r4, #2
 801182c:	d05e      	beq.n	80118ec <__ieee754_atan2f+0x108>
 801182e:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8011900 <__ieee754_atan2f+0x11c>
 8011832:	2c03      	cmp	r4, #3
 8011834:	bf08      	it	eq
 8011836:	eef0 7a47 	vmoveq.f32	s15, s14
 801183a:	e7e6      	b.n	801180a <__ieee754_atan2f+0x26>
 801183c:	b941      	cbnz	r1, 8011850 <__ieee754_atan2f+0x6c>
 801183e:	eddf 7a31 	vldr	s15, [pc, #196]	@ 8011904 <__ieee754_atan2f+0x120>
 8011842:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8011908 <__ieee754_atan2f+0x124>
 8011846:	2800      	cmp	r0, #0
 8011848:	bfb8      	it	lt
 801184a:	eef0 7a47 	vmovlt.f32	s15, s14
 801184e:	e7dc      	b.n	801180a <__ieee754_atan2f+0x26>
 8011850:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8011854:	d110      	bne.n	8011878 <__ieee754_atan2f+0x94>
 8011856:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 801185a:	f104 34ff 	add.w	r4, r4, #4294967295
 801185e:	d107      	bne.n	8011870 <__ieee754_atan2f+0x8c>
 8011860:	2c02      	cmp	r4, #2
 8011862:	d846      	bhi.n	80118f2 <__ieee754_atan2f+0x10e>
 8011864:	4b29      	ldr	r3, [pc, #164]	@ (801190c <__ieee754_atan2f+0x128>)
 8011866:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 801186a:	edd3 7a00 	vldr	s15, [r3]
 801186e:	e7cc      	b.n	801180a <__ieee754_atan2f+0x26>
 8011870:	2c02      	cmp	r4, #2
 8011872:	d841      	bhi.n	80118f8 <__ieee754_atan2f+0x114>
 8011874:	4b26      	ldr	r3, [pc, #152]	@ (8011910 <__ieee754_atan2f+0x12c>)
 8011876:	e7f6      	b.n	8011866 <__ieee754_atan2f+0x82>
 8011878:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 801187c:	d0df      	beq.n	801183e <__ieee754_atan2f+0x5a>
 801187e:	1a5b      	subs	r3, r3, r1
 8011880:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 8011884:	ea4f 51e3 	mov.w	r1, r3, asr #23
 8011888:	da1a      	bge.n	80118c0 <__ieee754_atan2f+0xdc>
 801188a:	2a00      	cmp	r2, #0
 801188c:	da01      	bge.n	8011892 <__ieee754_atan2f+0xae>
 801188e:	313c      	adds	r1, #60	@ 0x3c
 8011890:	db19      	blt.n	80118c6 <__ieee754_atan2f+0xe2>
 8011892:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 8011896:	f000 fbe9 	bl	801206c <fabsf>
 801189a:	f000 fb13 	bl	8011ec4 <atanf>
 801189e:	eef0 7a40 	vmov.f32	s15, s0
 80118a2:	2c01      	cmp	r4, #1
 80118a4:	d012      	beq.n	80118cc <__ieee754_atan2f+0xe8>
 80118a6:	2c02      	cmp	r4, #2
 80118a8:	d017      	beq.n	80118da <__ieee754_atan2f+0xf6>
 80118aa:	2c00      	cmp	r4, #0
 80118ac:	d0ad      	beq.n	801180a <__ieee754_atan2f+0x26>
 80118ae:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8011914 <__ieee754_atan2f+0x130>
 80118b2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80118b6:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8011918 <__ieee754_atan2f+0x134>
 80118ba:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80118be:	e7a4      	b.n	801180a <__ieee754_atan2f+0x26>
 80118c0:	eddf 7a10 	vldr	s15, [pc, #64]	@ 8011904 <__ieee754_atan2f+0x120>
 80118c4:	e7ed      	b.n	80118a2 <__ieee754_atan2f+0xbe>
 80118c6:	eddf 7a15 	vldr	s15, [pc, #84]	@ 801191c <__ieee754_atan2f+0x138>
 80118ca:	e7ea      	b.n	80118a2 <__ieee754_atan2f+0xbe>
 80118cc:	ee17 3a90 	vmov	r3, s15
 80118d0:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 80118d4:	ee07 3a90 	vmov	s15, r3
 80118d8:	e797      	b.n	801180a <__ieee754_atan2f+0x26>
 80118da:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8011914 <__ieee754_atan2f+0x130>
 80118de:	ee77 7a87 	vadd.f32	s15, s15, s14
 80118e2:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8011918 <__ieee754_atan2f+0x134>
 80118e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80118ea:	e78e      	b.n	801180a <__ieee754_atan2f+0x26>
 80118ec:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 8011918 <__ieee754_atan2f+0x134>
 80118f0:	e78b      	b.n	801180a <__ieee754_atan2f+0x26>
 80118f2:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 8011920 <__ieee754_atan2f+0x13c>
 80118f6:	e788      	b.n	801180a <__ieee754_atan2f+0x26>
 80118f8:	eddf 7a08 	vldr	s15, [pc, #32]	@ 801191c <__ieee754_atan2f+0x138>
 80118fc:	e785      	b.n	801180a <__ieee754_atan2f+0x26>
 80118fe:	bf00      	nop
 8011900:	c0490fdb 	.word	0xc0490fdb
 8011904:	3fc90fdb 	.word	0x3fc90fdb
 8011908:	bfc90fdb 	.word	0xbfc90fdb
 801190c:	08012510 	.word	0x08012510
 8011910:	08012504 	.word	0x08012504
 8011914:	33bbbd2e 	.word	0x33bbbd2e
 8011918:	40490fdb 	.word	0x40490fdb
 801191c:	00000000 	.word	0x00000000
 8011920:	3f490fdb 	.word	0x3f490fdb

08011924 <__ieee754_powf>:
 8011924:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011928:	ee10 4a90 	vmov	r4, s1
 801192c:	f034 4900 	bics.w	r9, r4, #2147483648	@ 0x80000000
 8011930:	ed2d 8b02 	vpush	{d8}
 8011934:	ee10 6a10 	vmov	r6, s0
 8011938:	eeb0 8a40 	vmov.f32	s16, s0
 801193c:	eef0 8a60 	vmov.f32	s17, s1
 8011940:	d10c      	bne.n	801195c <__ieee754_powf+0x38>
 8011942:	f486 0680 	eor.w	r6, r6, #4194304	@ 0x400000
 8011946:	0076      	lsls	r6, r6, #1
 8011948:	f516 0f00 	cmn.w	r6, #8388608	@ 0x800000
 801194c:	f240 829c 	bls.w	8011e88 <__ieee754_powf+0x564>
 8011950:	ee38 0a28 	vadd.f32	s0, s16, s17
 8011954:	ecbd 8b02 	vpop	{d8}
 8011958:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801195c:	f026 4800 	bic.w	r8, r6, #2147483648	@ 0x80000000
 8011960:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 8011964:	d802      	bhi.n	801196c <__ieee754_powf+0x48>
 8011966:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 801196a:	d908      	bls.n	801197e <__ieee754_powf+0x5a>
 801196c:	f1b6 5f7e 	cmp.w	r6, #1065353216	@ 0x3f800000
 8011970:	d1ee      	bne.n	8011950 <__ieee754_powf+0x2c>
 8011972:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 8011976:	0064      	lsls	r4, r4, #1
 8011978:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 801197c:	e7e6      	b.n	801194c <__ieee754_powf+0x28>
 801197e:	2e00      	cmp	r6, #0
 8011980:	da1e      	bge.n	80119c0 <__ieee754_powf+0x9c>
 8011982:	f1b9 4f97 	cmp.w	r9, #1266679808	@ 0x4b800000
 8011986:	d22b      	bcs.n	80119e0 <__ieee754_powf+0xbc>
 8011988:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 801198c:	d332      	bcc.n	80119f4 <__ieee754_powf+0xd0>
 801198e:	ea4f 53e9 	mov.w	r3, r9, asr #23
 8011992:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 8011996:	fa49 f503 	asr.w	r5, r9, r3
 801199a:	fa05 f303 	lsl.w	r3, r5, r3
 801199e:	454b      	cmp	r3, r9
 80119a0:	d126      	bne.n	80119f0 <__ieee754_powf+0xcc>
 80119a2:	f005 0501 	and.w	r5, r5, #1
 80119a6:	f1c5 0502 	rsb	r5, r5, #2
 80119aa:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 80119ae:	d122      	bne.n	80119f6 <__ieee754_powf+0xd2>
 80119b0:	2c00      	cmp	r4, #0
 80119b2:	f280 826f 	bge.w	8011e94 <__ieee754_powf+0x570>
 80119b6:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80119ba:	ee87 0a88 	vdiv.f32	s0, s15, s16
 80119be:	e7c9      	b.n	8011954 <__ieee754_powf+0x30>
 80119c0:	2500      	movs	r5, #0
 80119c2:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 80119c6:	d1f0      	bne.n	80119aa <__ieee754_powf+0x86>
 80119c8:	f1b8 5f7e 	cmp.w	r8, #1065353216	@ 0x3f800000
 80119cc:	f000 825c 	beq.w	8011e88 <__ieee754_powf+0x564>
 80119d0:	d908      	bls.n	80119e4 <__ieee754_powf+0xc0>
 80119d2:	ed9f 0ad8 	vldr	s0, [pc, #864]	@ 8011d34 <__ieee754_powf+0x410>
 80119d6:	2c00      	cmp	r4, #0
 80119d8:	bfa8      	it	ge
 80119da:	eeb0 0a68 	vmovge.f32	s0, s17
 80119de:	e7b9      	b.n	8011954 <__ieee754_powf+0x30>
 80119e0:	2502      	movs	r5, #2
 80119e2:	e7ee      	b.n	80119c2 <__ieee754_powf+0x9e>
 80119e4:	2c00      	cmp	r4, #0
 80119e6:	f280 8252 	bge.w	8011e8e <__ieee754_powf+0x56a>
 80119ea:	eeb1 0a68 	vneg.f32	s0, s17
 80119ee:	e7b1      	b.n	8011954 <__ieee754_powf+0x30>
 80119f0:	2500      	movs	r5, #0
 80119f2:	e7da      	b.n	80119aa <__ieee754_powf+0x86>
 80119f4:	2500      	movs	r5, #0
 80119f6:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 80119fa:	d102      	bne.n	8011a02 <__ieee754_powf+0xde>
 80119fc:	ee28 0a08 	vmul.f32	s0, s16, s16
 8011a00:	e7a8      	b.n	8011954 <__ieee754_powf+0x30>
 8011a02:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 8011a06:	d109      	bne.n	8011a1c <__ieee754_powf+0xf8>
 8011a08:	2e00      	cmp	r6, #0
 8011a0a:	db07      	blt.n	8011a1c <__ieee754_powf+0xf8>
 8011a0c:	eeb0 0a48 	vmov.f32	s0, s16
 8011a10:	ecbd 8b02 	vpop	{d8}
 8011a14:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011a18:	f7ff be9c 	b.w	8011754 <__ieee754_sqrtf>
 8011a1c:	eeb0 0a48 	vmov.f32	s0, s16
 8011a20:	f000 fb24 	bl	801206c <fabsf>
 8011a24:	f026 4340 	bic.w	r3, r6, #3221225472	@ 0xc0000000
 8011a28:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 8011a2c:	4647      	mov	r7, r8
 8011a2e:	d002      	beq.n	8011a36 <__ieee754_powf+0x112>
 8011a30:	f1b8 0f00 	cmp.w	r8, #0
 8011a34:	d117      	bne.n	8011a66 <__ieee754_powf+0x142>
 8011a36:	2c00      	cmp	r4, #0
 8011a38:	bfbc      	itt	lt
 8011a3a:	eef7 7a00 	vmovlt.f32	s15, #112	@ 0x3f800000  1.0
 8011a3e:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 8011a42:	2e00      	cmp	r6, #0
 8011a44:	da86      	bge.n	8011954 <__ieee754_powf+0x30>
 8011a46:	f1a8 587e 	sub.w	r8, r8, #1065353216	@ 0x3f800000
 8011a4a:	ea58 0805 	orrs.w	r8, r8, r5
 8011a4e:	d104      	bne.n	8011a5a <__ieee754_powf+0x136>
 8011a50:	ee70 7a40 	vsub.f32	s15, s0, s0
 8011a54:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8011a58:	e77c      	b.n	8011954 <__ieee754_powf+0x30>
 8011a5a:	2d01      	cmp	r5, #1
 8011a5c:	f47f af7a 	bne.w	8011954 <__ieee754_powf+0x30>
 8011a60:	eeb1 0a40 	vneg.f32	s0, s0
 8011a64:	e776      	b.n	8011954 <__ieee754_powf+0x30>
 8011a66:	0ff0      	lsrs	r0, r6, #31
 8011a68:	3801      	subs	r0, #1
 8011a6a:	ea55 0300 	orrs.w	r3, r5, r0
 8011a6e:	d104      	bne.n	8011a7a <__ieee754_powf+0x156>
 8011a70:	ee38 8a48 	vsub.f32	s16, s16, s16
 8011a74:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8011a78:	e76c      	b.n	8011954 <__ieee754_powf+0x30>
 8011a7a:	f1b9 4f9a 	cmp.w	r9, #1291845632	@ 0x4d000000
 8011a7e:	d973      	bls.n	8011b68 <__ieee754_powf+0x244>
 8011a80:	4bad      	ldr	r3, [pc, #692]	@ (8011d38 <__ieee754_powf+0x414>)
 8011a82:	4598      	cmp	r8, r3
 8011a84:	d808      	bhi.n	8011a98 <__ieee754_powf+0x174>
 8011a86:	2c00      	cmp	r4, #0
 8011a88:	da0b      	bge.n	8011aa2 <__ieee754_powf+0x17e>
 8011a8a:	2000      	movs	r0, #0
 8011a8c:	ecbd 8b02 	vpop	{d8}
 8011a90:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011a94:	f000 bb78 	b.w	8012188 <__math_oflowf>
 8011a98:	4ba8      	ldr	r3, [pc, #672]	@ (8011d3c <__ieee754_powf+0x418>)
 8011a9a:	4598      	cmp	r8, r3
 8011a9c:	d908      	bls.n	8011ab0 <__ieee754_powf+0x18c>
 8011a9e:	2c00      	cmp	r4, #0
 8011aa0:	dcf3      	bgt.n	8011a8a <__ieee754_powf+0x166>
 8011aa2:	2000      	movs	r0, #0
 8011aa4:	ecbd 8b02 	vpop	{d8}
 8011aa8:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011aac:	f000 bb66 	b.w	801217c <__math_uflowf>
 8011ab0:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8011ab4:	ee30 0a67 	vsub.f32	s0, s0, s15
 8011ab8:	eddf 6aa1 	vldr	s13, [pc, #644]	@ 8011d40 <__ieee754_powf+0x41c>
 8011abc:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 8011ac0:	eee0 6a67 	vfms.f32	s13, s0, s15
 8011ac4:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8011ac8:	eee6 7ac0 	vfms.f32	s15, s13, s0
 8011acc:	ee20 7a00 	vmul.f32	s14, s0, s0
 8011ad0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8011ad4:	eddf 7a9b 	vldr	s15, [pc, #620]	@ 8011d44 <__ieee754_powf+0x420>
 8011ad8:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 8011adc:	ed9f 7a9a 	vldr	s14, [pc, #616]	@ 8011d48 <__ieee754_powf+0x424>
 8011ae0:	eee0 7a07 	vfma.f32	s15, s0, s14
 8011ae4:	ed9f 7a99 	vldr	s14, [pc, #612]	@ 8011d4c <__ieee754_powf+0x428>
 8011ae8:	eef0 6a67 	vmov.f32	s13, s15
 8011aec:	eee0 6a07 	vfma.f32	s13, s0, s14
 8011af0:	ee16 3a90 	vmov	r3, s13
 8011af4:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8011af8:	f023 030f 	bic.w	r3, r3, #15
 8011afc:	ee06 3a90 	vmov	s13, r3
 8011b00:	eee0 6a47 	vfms.f32	s13, s0, s14
 8011b04:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8011b08:	3d01      	subs	r5, #1
 8011b0a:	f424 647f 	bic.w	r4, r4, #4080	@ 0xff0
 8011b0e:	4305      	orrs	r5, r0
 8011b10:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8011b14:	f024 040f 	bic.w	r4, r4, #15
 8011b18:	eebf 8a00 	vmov.f32	s16, #240	@ 0xbf800000 -1.0
 8011b1c:	bf18      	it	ne
 8011b1e:	eeb0 8a47 	vmovne.f32	s16, s14
 8011b22:	ee07 4a10 	vmov	s14, r4
 8011b26:	ee67 0aa8 	vmul.f32	s1, s15, s17
 8011b2a:	ee38 7ac7 	vsub.f32	s14, s17, s14
 8011b2e:	ee07 3a90 	vmov	s15, r3
 8011b32:	eee7 0a27 	vfma.f32	s1, s14, s15
 8011b36:	ee07 4a10 	vmov	s14, r4
 8011b3a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8011b3e:	ee30 7aa7 	vadd.f32	s14, s1, s15
 8011b42:	ee17 1a10 	vmov	r1, s14
 8011b46:	2900      	cmp	r1, #0
 8011b48:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8011b4c:	f340 80dd 	ble.w	8011d0a <__ieee754_powf+0x3e6>
 8011b50:	f1b3 4f86 	cmp.w	r3, #1124073472	@ 0x43000000
 8011b54:	f240 80ca 	bls.w	8011cec <__ieee754_powf+0x3c8>
 8011b58:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8011b5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011b60:	bf4c      	ite	mi
 8011b62:	2001      	movmi	r0, #1
 8011b64:	2000      	movpl	r0, #0
 8011b66:	e791      	b.n	8011a8c <__ieee754_powf+0x168>
 8011b68:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 8011b6c:	bf01      	itttt	eq
 8011b6e:	eddf 7a78 	vldreq	s15, [pc, #480]	@ 8011d50 <__ieee754_powf+0x42c>
 8011b72:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 8011b76:	f06f 0317 	mvneq.w	r3, #23
 8011b7a:	ee17 7a90 	vmoveq	r7, s15
 8011b7e:	ea4f 52e7 	mov.w	r2, r7, asr #23
 8011b82:	bf18      	it	ne
 8011b84:	2300      	movne	r3, #0
 8011b86:	3a7f      	subs	r2, #127	@ 0x7f
 8011b88:	441a      	add	r2, r3
 8011b8a:	4b72      	ldr	r3, [pc, #456]	@ (8011d54 <__ieee754_powf+0x430>)
 8011b8c:	f3c7 0716 	ubfx	r7, r7, #0, #23
 8011b90:	429f      	cmp	r7, r3
 8011b92:	f047 517e 	orr.w	r1, r7, #1065353216	@ 0x3f800000
 8011b96:	dd06      	ble.n	8011ba6 <__ieee754_powf+0x282>
 8011b98:	4b6f      	ldr	r3, [pc, #444]	@ (8011d58 <__ieee754_powf+0x434>)
 8011b9a:	429f      	cmp	r7, r3
 8011b9c:	f340 80a4 	ble.w	8011ce8 <__ieee754_powf+0x3c4>
 8011ba0:	3201      	adds	r2, #1
 8011ba2:	f5a1 0100 	sub.w	r1, r1, #8388608	@ 0x800000
 8011ba6:	2600      	movs	r6, #0
 8011ba8:	4b6c      	ldr	r3, [pc, #432]	@ (8011d5c <__ieee754_powf+0x438>)
 8011baa:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 8011bae:	ee07 1a10 	vmov	s14, r1
 8011bb2:	edd3 5a00 	vldr	s11, [r3]
 8011bb6:	4b6a      	ldr	r3, [pc, #424]	@ (8011d60 <__ieee754_powf+0x43c>)
 8011bb8:	ee75 7a87 	vadd.f32	s15, s11, s14
 8011bbc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8011bc0:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 8011bc4:	1049      	asrs	r1, r1, #1
 8011bc6:	f041 5100 	orr.w	r1, r1, #536870912	@ 0x20000000
 8011bca:	f501 2180 	add.w	r1, r1, #262144	@ 0x40000
 8011bce:	eb01 5146 	add.w	r1, r1, r6, lsl #21
 8011bd2:	ee37 6a65 	vsub.f32	s12, s14, s11
 8011bd6:	ee07 1a90 	vmov	s15, r1
 8011bda:	ee26 5a24 	vmul.f32	s10, s12, s9
 8011bde:	ee77 5ae5 	vsub.f32	s11, s15, s11
 8011be2:	ee15 7a10 	vmov	r7, s10
 8011be6:	401f      	ands	r7, r3
 8011be8:	ee06 7a90 	vmov	s13, r7
 8011bec:	eea6 6ae7 	vfms.f32	s12, s13, s15
 8011bf0:	ee37 7a65 	vsub.f32	s14, s14, s11
 8011bf4:	ee65 7a05 	vmul.f32	s15, s10, s10
 8011bf8:	eea6 6ac7 	vfms.f32	s12, s13, s14
 8011bfc:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8011d64 <__ieee754_powf+0x440>
 8011c00:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 8011d68 <__ieee754_powf+0x444>
 8011c04:	eee7 5a87 	vfma.f32	s11, s15, s14
 8011c08:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 8011d6c <__ieee754_powf+0x448>
 8011c0c:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8011c10:	eddf 5a4b 	vldr	s11, [pc, #300]	@ 8011d40 <__ieee754_powf+0x41c>
 8011c14:	eee7 5a27 	vfma.f32	s11, s14, s15
 8011c18:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 8011d70 <__ieee754_powf+0x44c>
 8011c1c:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8011c20:	eddf 5a54 	vldr	s11, [pc, #336]	@ 8011d74 <__ieee754_powf+0x450>
 8011c24:	ee26 6a24 	vmul.f32	s12, s12, s9
 8011c28:	eee7 5a27 	vfma.f32	s11, s14, s15
 8011c2c:	ee35 7a26 	vadd.f32	s14, s10, s13
 8011c30:	ee67 4aa7 	vmul.f32	s9, s15, s15
 8011c34:	ee27 7a06 	vmul.f32	s14, s14, s12
 8011c38:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 8011c3c:	eea4 7aa5 	vfma.f32	s14, s9, s11
 8011c40:	eef0 5a67 	vmov.f32	s11, s15
 8011c44:	eee6 5aa6 	vfma.f32	s11, s13, s13
 8011c48:	ee75 5a87 	vadd.f32	s11, s11, s14
 8011c4c:	ee15 1a90 	vmov	r1, s11
 8011c50:	4019      	ands	r1, r3
 8011c52:	ee05 1a90 	vmov	s11, r1
 8011c56:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8011c5a:	eee6 7ae6 	vfms.f32	s15, s13, s13
 8011c5e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011c62:	ee67 7a85 	vmul.f32	s15, s15, s10
 8011c66:	eee6 7a25 	vfma.f32	s15, s12, s11
 8011c6a:	eeb0 6a67 	vmov.f32	s12, s15
 8011c6e:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8011c72:	ee16 1a10 	vmov	r1, s12
 8011c76:	4019      	ands	r1, r3
 8011c78:	ee06 1a10 	vmov	s12, r1
 8011c7c:	eeb0 7a46 	vmov.f32	s14, s12
 8011c80:	eea6 7ae5 	vfms.f32	s14, s13, s11
 8011c84:	493c      	ldr	r1, [pc, #240]	@ (8011d78 <__ieee754_powf+0x454>)
 8011c86:	eb01 0186 	add.w	r1, r1, r6, lsl #2
 8011c8a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011c8e:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 8011d7c <__ieee754_powf+0x458>
 8011c92:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 8011d80 <__ieee754_powf+0x45c>
 8011c96:	ee67 7a87 	vmul.f32	s15, s15, s14
 8011c9a:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 8011d84 <__ieee754_powf+0x460>
 8011c9e:	eee6 7a07 	vfma.f32	s15, s12, s14
 8011ca2:	ed91 7a00 	vldr	s14, [r1]
 8011ca6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011caa:	ee07 2a10 	vmov	s14, r2
 8011cae:	eef0 6a67 	vmov.f32	s13, s15
 8011cb2:	4a35      	ldr	r2, [pc, #212]	@ (8011d88 <__ieee754_powf+0x464>)
 8011cb4:	eee6 6a25 	vfma.f32	s13, s12, s11
 8011cb8:	eb02 0286 	add.w	r2, r2, r6, lsl #2
 8011cbc:	ed92 5a00 	vldr	s10, [r2]
 8011cc0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8011cc4:	ee76 6a85 	vadd.f32	s13, s13, s10
 8011cc8:	ee76 6a87 	vadd.f32	s13, s13, s14
 8011ccc:	ee16 2a90 	vmov	r2, s13
 8011cd0:	4013      	ands	r3, r2
 8011cd2:	ee06 3a90 	vmov	s13, r3
 8011cd6:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8011cda:	ee37 7a45 	vsub.f32	s14, s14, s10
 8011cde:	eea6 7a65 	vfms.f32	s14, s12, s11
 8011ce2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011ce6:	e70f      	b.n	8011b08 <__ieee754_powf+0x1e4>
 8011ce8:	2601      	movs	r6, #1
 8011cea:	e75d      	b.n	8011ba8 <__ieee754_powf+0x284>
 8011cec:	d152      	bne.n	8011d94 <__ieee754_powf+0x470>
 8011cee:	eddf 6a27 	vldr	s13, [pc, #156]	@ 8011d8c <__ieee754_powf+0x468>
 8011cf2:	ee37 7a67 	vsub.f32	s14, s14, s15
 8011cf6:	ee70 6aa6 	vadd.f32	s13, s1, s13
 8011cfa:	eef4 6ac7 	vcmpe.f32	s13, s14
 8011cfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011d02:	f73f af29 	bgt.w	8011b58 <__ieee754_powf+0x234>
 8011d06:	2386      	movs	r3, #134	@ 0x86
 8011d08:	e048      	b.n	8011d9c <__ieee754_powf+0x478>
 8011d0a:	4a21      	ldr	r2, [pc, #132]	@ (8011d90 <__ieee754_powf+0x46c>)
 8011d0c:	4293      	cmp	r3, r2
 8011d0e:	d907      	bls.n	8011d20 <__ieee754_powf+0x3fc>
 8011d10:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8011d14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011d18:	bf4c      	ite	mi
 8011d1a:	2001      	movmi	r0, #1
 8011d1c:	2000      	movpl	r0, #0
 8011d1e:	e6c1      	b.n	8011aa4 <__ieee754_powf+0x180>
 8011d20:	d138      	bne.n	8011d94 <__ieee754_powf+0x470>
 8011d22:	ee37 7a67 	vsub.f32	s14, s14, s15
 8011d26:	eeb4 7ae0 	vcmpe.f32	s14, s1
 8011d2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011d2e:	dbea      	blt.n	8011d06 <__ieee754_powf+0x3e2>
 8011d30:	e7ee      	b.n	8011d10 <__ieee754_powf+0x3ec>
 8011d32:	bf00      	nop
 8011d34:	00000000 	.word	0x00000000
 8011d38:	3f7ffff3 	.word	0x3f7ffff3
 8011d3c:	3f800007 	.word	0x3f800007
 8011d40:	3eaaaaab 	.word	0x3eaaaaab
 8011d44:	3fb8aa3b 	.word	0x3fb8aa3b
 8011d48:	36eca570 	.word	0x36eca570
 8011d4c:	3fb8aa00 	.word	0x3fb8aa00
 8011d50:	4b800000 	.word	0x4b800000
 8011d54:	001cc471 	.word	0x001cc471
 8011d58:	005db3d6 	.word	0x005db3d6
 8011d5c:	0801252c 	.word	0x0801252c
 8011d60:	fffff000 	.word	0xfffff000
 8011d64:	3e6c3255 	.word	0x3e6c3255
 8011d68:	3e53f142 	.word	0x3e53f142
 8011d6c:	3e8ba305 	.word	0x3e8ba305
 8011d70:	3edb6db7 	.word	0x3edb6db7
 8011d74:	3f19999a 	.word	0x3f19999a
 8011d78:	0801251c 	.word	0x0801251c
 8011d7c:	3f76384f 	.word	0x3f76384f
 8011d80:	3f763800 	.word	0x3f763800
 8011d84:	369dc3a0 	.word	0x369dc3a0
 8011d88:	08012524 	.word	0x08012524
 8011d8c:	3338aa3c 	.word	0x3338aa3c
 8011d90:	43160000 	.word	0x43160000
 8011d94:	f1b3 5f7c 	cmp.w	r3, #1056964608	@ 0x3f000000
 8011d98:	d971      	bls.n	8011e7e <__ieee754_powf+0x55a>
 8011d9a:	15db      	asrs	r3, r3, #23
 8011d9c:	3b7e      	subs	r3, #126	@ 0x7e
 8011d9e:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8011da2:	4118      	asrs	r0, r3
 8011da4:	4408      	add	r0, r1
 8011da6:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8011daa:	4a3c      	ldr	r2, [pc, #240]	@ (8011e9c <__ieee754_powf+0x578>)
 8011dac:	3b7f      	subs	r3, #127	@ 0x7f
 8011dae:	411a      	asrs	r2, r3
 8011db0:	4002      	ands	r2, r0
 8011db2:	ee07 2a10 	vmov	s14, r2
 8011db6:	f3c0 0016 	ubfx	r0, r0, #0, #23
 8011dba:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8011dbe:	f1c3 0317 	rsb	r3, r3, #23
 8011dc2:	4118      	asrs	r0, r3
 8011dc4:	2900      	cmp	r1, #0
 8011dc6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011dca:	bfb8      	it	lt
 8011dcc:	4240      	neglt	r0, r0
 8011dce:	ee37 7aa0 	vadd.f32	s14, s15, s1
 8011dd2:	eddf 6a33 	vldr	s13, [pc, #204]	@ 8011ea0 <__ieee754_powf+0x57c>
 8011dd6:	ed9f 6a33 	vldr	s12, [pc, #204]	@ 8011ea4 <__ieee754_powf+0x580>
 8011dda:	ee17 3a10 	vmov	r3, s14
 8011dde:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8011de2:	f023 030f 	bic.w	r3, r3, #15
 8011de6:	ee07 3a10 	vmov	s14, r3
 8011dea:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011dee:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8011df2:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8011df6:	eddf 7a2c 	vldr	s15, [pc, #176]	@ 8011ea8 <__ieee754_powf+0x584>
 8011dfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011dfe:	eee0 7aa6 	vfma.f32	s15, s1, s13
 8011e02:	eef0 6a67 	vmov.f32	s13, s15
 8011e06:	eee7 6a06 	vfma.f32	s13, s14, s12
 8011e0a:	eef0 5a66 	vmov.f32	s11, s13
 8011e0e:	eee7 5a46 	vfms.f32	s11, s14, s12
 8011e12:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8011e16:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8011e1a:	ed9f 6a24 	vldr	s12, [pc, #144]	@ 8011eac <__ieee754_powf+0x588>
 8011e1e:	eddf 5a24 	vldr	s11, [pc, #144]	@ 8011eb0 <__ieee754_powf+0x58c>
 8011e22:	eea7 6a25 	vfma.f32	s12, s14, s11
 8011e26:	eddf 5a23 	vldr	s11, [pc, #140]	@ 8011eb4 <__ieee754_powf+0x590>
 8011e2a:	eee6 5a07 	vfma.f32	s11, s12, s14
 8011e2e:	ed9f 6a22 	vldr	s12, [pc, #136]	@ 8011eb8 <__ieee754_powf+0x594>
 8011e32:	eea5 6a87 	vfma.f32	s12, s11, s14
 8011e36:	eddf 5a21 	vldr	s11, [pc, #132]	@ 8011ebc <__ieee754_powf+0x598>
 8011e3a:	eee6 5a07 	vfma.f32	s11, s12, s14
 8011e3e:	eeb0 6a66 	vmov.f32	s12, s13
 8011e42:	eea5 6ac7 	vfms.f32	s12, s11, s14
 8011e46:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8011e4a:	ee66 5a86 	vmul.f32	s11, s13, s12
 8011e4e:	ee36 6a47 	vsub.f32	s12, s12, s14
 8011e52:	eee6 7aa7 	vfma.f32	s15, s13, s15
 8011e56:	ee85 7a86 	vdiv.f32	s14, s11, s12
 8011e5a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011e5e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8011e62:	ee30 0a67 	vsub.f32	s0, s0, s15
 8011e66:	ee10 3a10 	vmov	r3, s0
 8011e6a:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 8011e6e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8011e72:	da06      	bge.n	8011e82 <__ieee754_powf+0x55e>
 8011e74:	f000 f902 	bl	801207c <scalbnf>
 8011e78:	ee20 0a08 	vmul.f32	s0, s0, s16
 8011e7c:	e56a      	b.n	8011954 <__ieee754_powf+0x30>
 8011e7e:	2000      	movs	r0, #0
 8011e80:	e7a5      	b.n	8011dce <__ieee754_powf+0x4aa>
 8011e82:	ee00 3a10 	vmov	s0, r3
 8011e86:	e7f7      	b.n	8011e78 <__ieee754_powf+0x554>
 8011e88:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8011e8c:	e562      	b.n	8011954 <__ieee754_powf+0x30>
 8011e8e:	ed9f 0a0c 	vldr	s0, [pc, #48]	@ 8011ec0 <__ieee754_powf+0x59c>
 8011e92:	e55f      	b.n	8011954 <__ieee754_powf+0x30>
 8011e94:	eeb0 0a48 	vmov.f32	s0, s16
 8011e98:	e55c      	b.n	8011954 <__ieee754_powf+0x30>
 8011e9a:	bf00      	nop
 8011e9c:	ff800000 	.word	0xff800000
 8011ea0:	3f317218 	.word	0x3f317218
 8011ea4:	3f317200 	.word	0x3f317200
 8011ea8:	35bfbe8c 	.word	0x35bfbe8c
 8011eac:	b5ddea0e 	.word	0xb5ddea0e
 8011eb0:	3331bb4c 	.word	0x3331bb4c
 8011eb4:	388ab355 	.word	0x388ab355
 8011eb8:	bb360b61 	.word	0xbb360b61
 8011ebc:	3e2aaaab 	.word	0x3e2aaaab
 8011ec0:	00000000 	.word	0x00000000

08011ec4 <atanf>:
 8011ec4:	b538      	push	{r3, r4, r5, lr}
 8011ec6:	ee10 5a10 	vmov	r5, s0
 8011eca:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 8011ece:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 8011ed2:	eef0 7a40 	vmov.f32	s15, s0
 8011ed6:	d310      	bcc.n	8011efa <atanf+0x36>
 8011ed8:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 8011edc:	d904      	bls.n	8011ee8 <atanf+0x24>
 8011ede:	ee70 7a00 	vadd.f32	s15, s0, s0
 8011ee2:	eeb0 0a67 	vmov.f32	s0, s15
 8011ee6:	bd38      	pop	{r3, r4, r5, pc}
 8011ee8:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 8012020 <atanf+0x15c>
 8011eec:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 8012024 <atanf+0x160>
 8011ef0:	2d00      	cmp	r5, #0
 8011ef2:	bfc8      	it	gt
 8011ef4:	eef0 7a47 	vmovgt.f32	s15, s14
 8011ef8:	e7f3      	b.n	8011ee2 <atanf+0x1e>
 8011efa:	4b4b      	ldr	r3, [pc, #300]	@ (8012028 <atanf+0x164>)
 8011efc:	429c      	cmp	r4, r3
 8011efe:	d810      	bhi.n	8011f22 <atanf+0x5e>
 8011f00:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 8011f04:	d20a      	bcs.n	8011f1c <atanf+0x58>
 8011f06:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 801202c <atanf+0x168>
 8011f0a:	ee30 7a07 	vadd.f32	s14, s0, s14
 8011f0e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8011f12:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8011f16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011f1a:	dce2      	bgt.n	8011ee2 <atanf+0x1e>
 8011f1c:	f04f 33ff 	mov.w	r3, #4294967295
 8011f20:	e013      	b.n	8011f4a <atanf+0x86>
 8011f22:	f000 f8a3 	bl	801206c <fabsf>
 8011f26:	4b42      	ldr	r3, [pc, #264]	@ (8012030 <atanf+0x16c>)
 8011f28:	429c      	cmp	r4, r3
 8011f2a:	d84f      	bhi.n	8011fcc <atanf+0x108>
 8011f2c:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 8011f30:	429c      	cmp	r4, r3
 8011f32:	d841      	bhi.n	8011fb8 <atanf+0xf4>
 8011f34:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 8011f38:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8011f3c:	eea0 7a27 	vfma.f32	s14, s0, s15
 8011f40:	2300      	movs	r3, #0
 8011f42:	ee30 0a27 	vadd.f32	s0, s0, s15
 8011f46:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8011f4a:	1c5a      	adds	r2, r3, #1
 8011f4c:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8011f50:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 8012034 <atanf+0x170>
 8011f54:	eddf 5a38 	vldr	s11, [pc, #224]	@ 8012038 <atanf+0x174>
 8011f58:	ed9f 5a38 	vldr	s10, [pc, #224]	@ 801203c <atanf+0x178>
 8011f5c:	ee66 6a06 	vmul.f32	s13, s12, s12
 8011f60:	eee6 5a87 	vfma.f32	s11, s13, s14
 8011f64:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 8012040 <atanf+0x17c>
 8011f68:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8011f6c:	eddf 5a35 	vldr	s11, [pc, #212]	@ 8012044 <atanf+0x180>
 8011f70:	eee7 5a26 	vfma.f32	s11, s14, s13
 8011f74:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8012048 <atanf+0x184>
 8011f78:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8011f7c:	eddf 5a33 	vldr	s11, [pc, #204]	@ 801204c <atanf+0x188>
 8011f80:	eee7 5a26 	vfma.f32	s11, s14, s13
 8011f84:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8012050 <atanf+0x18c>
 8011f88:	eea6 5a87 	vfma.f32	s10, s13, s14
 8011f8c:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8012054 <atanf+0x190>
 8011f90:	eea5 7a26 	vfma.f32	s14, s10, s13
 8011f94:	ed9f 5a30 	vldr	s10, [pc, #192]	@ 8012058 <atanf+0x194>
 8011f98:	eea7 5a26 	vfma.f32	s10, s14, s13
 8011f9c:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 801205c <atanf+0x198>
 8011fa0:	eea5 7a26 	vfma.f32	s14, s10, s13
 8011fa4:	ee27 7a26 	vmul.f32	s14, s14, s13
 8011fa8:	eea5 7a86 	vfma.f32	s14, s11, s12
 8011fac:	ee27 7a87 	vmul.f32	s14, s15, s14
 8011fb0:	d121      	bne.n	8011ff6 <atanf+0x132>
 8011fb2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011fb6:	e794      	b.n	8011ee2 <atanf+0x1e>
 8011fb8:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8011fbc:	ee30 7a67 	vsub.f32	s14, s0, s15
 8011fc0:	ee30 0a27 	vadd.f32	s0, s0, s15
 8011fc4:	2301      	movs	r3, #1
 8011fc6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8011fca:	e7be      	b.n	8011f4a <atanf+0x86>
 8011fcc:	4b24      	ldr	r3, [pc, #144]	@ (8012060 <atanf+0x19c>)
 8011fce:	429c      	cmp	r4, r3
 8011fd0:	d80b      	bhi.n	8011fea <atanf+0x126>
 8011fd2:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 8011fd6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8011fda:	eea0 7a27 	vfma.f32	s14, s0, s15
 8011fde:	2302      	movs	r3, #2
 8011fe0:	ee70 6a67 	vsub.f32	s13, s0, s15
 8011fe4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011fe8:	e7af      	b.n	8011f4a <atanf+0x86>
 8011fea:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8011fee:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8011ff2:	2303      	movs	r3, #3
 8011ff4:	e7a9      	b.n	8011f4a <atanf+0x86>
 8011ff6:	4a1b      	ldr	r2, [pc, #108]	@ (8012064 <atanf+0x1a0>)
 8011ff8:	491b      	ldr	r1, [pc, #108]	@ (8012068 <atanf+0x1a4>)
 8011ffa:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8011ffe:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8012002:	edd3 6a00 	vldr	s13, [r3]
 8012006:	ee37 7a66 	vsub.f32	s14, s14, s13
 801200a:	2d00      	cmp	r5, #0
 801200c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8012010:	edd2 7a00 	vldr	s15, [r2]
 8012014:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012018:	bfb8      	it	lt
 801201a:	eef1 7a67 	vneglt.f32	s15, s15
 801201e:	e760      	b.n	8011ee2 <atanf+0x1e>
 8012020:	bfc90fdb 	.word	0xbfc90fdb
 8012024:	3fc90fdb 	.word	0x3fc90fdb
 8012028:	3edfffff 	.word	0x3edfffff
 801202c:	7149f2ca 	.word	0x7149f2ca
 8012030:	3f97ffff 	.word	0x3f97ffff
 8012034:	3c8569d7 	.word	0x3c8569d7
 8012038:	3d4bda59 	.word	0x3d4bda59
 801203c:	bd6ef16b 	.word	0xbd6ef16b
 8012040:	3d886b35 	.word	0x3d886b35
 8012044:	3dba2e6e 	.word	0x3dba2e6e
 8012048:	3e124925 	.word	0x3e124925
 801204c:	3eaaaaab 	.word	0x3eaaaaab
 8012050:	bd15a221 	.word	0xbd15a221
 8012054:	bd9d8795 	.word	0xbd9d8795
 8012058:	bde38e38 	.word	0xbde38e38
 801205c:	be4ccccd 	.word	0xbe4ccccd
 8012060:	401bffff 	.word	0x401bffff
 8012064:	08012544 	.word	0x08012544
 8012068:	08012534 	.word	0x08012534

0801206c <fabsf>:
 801206c:	ee10 3a10 	vmov	r3, s0
 8012070:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8012074:	ee00 3a10 	vmov	s0, r3
 8012078:	4770      	bx	lr
	...

0801207c <scalbnf>:
 801207c:	ee10 3a10 	vmov	r3, s0
 8012080:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8012084:	d02b      	beq.n	80120de <scalbnf+0x62>
 8012086:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 801208a:	d302      	bcc.n	8012092 <scalbnf+0x16>
 801208c:	ee30 0a00 	vadd.f32	s0, s0, s0
 8012090:	4770      	bx	lr
 8012092:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 8012096:	d123      	bne.n	80120e0 <scalbnf+0x64>
 8012098:	4b24      	ldr	r3, [pc, #144]	@ (801212c <scalbnf+0xb0>)
 801209a:	eddf 7a25 	vldr	s15, [pc, #148]	@ 8012130 <scalbnf+0xb4>
 801209e:	4298      	cmp	r0, r3
 80120a0:	ee20 0a27 	vmul.f32	s0, s0, s15
 80120a4:	db17      	blt.n	80120d6 <scalbnf+0x5a>
 80120a6:	ee10 3a10 	vmov	r3, s0
 80120aa:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80120ae:	3a19      	subs	r2, #25
 80120b0:	f24c 3150 	movw	r1, #50000	@ 0xc350
 80120b4:	4288      	cmp	r0, r1
 80120b6:	dd15      	ble.n	80120e4 <scalbnf+0x68>
 80120b8:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 8012134 <scalbnf+0xb8>
 80120bc:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8012138 <scalbnf+0xbc>
 80120c0:	ee10 3a10 	vmov	r3, s0
 80120c4:	eeb0 7a67 	vmov.f32	s14, s15
 80120c8:	2b00      	cmp	r3, #0
 80120ca:	bfb8      	it	lt
 80120cc:	eef0 7a66 	vmovlt.f32	s15, s13
 80120d0:	ee27 0a87 	vmul.f32	s0, s15, s14
 80120d4:	4770      	bx	lr
 80120d6:	eddf 7a19 	vldr	s15, [pc, #100]	@ 801213c <scalbnf+0xc0>
 80120da:	ee27 0a80 	vmul.f32	s0, s15, s0
 80120de:	4770      	bx	lr
 80120e0:	0dd2      	lsrs	r2, r2, #23
 80120e2:	e7e5      	b.n	80120b0 <scalbnf+0x34>
 80120e4:	4410      	add	r0, r2
 80120e6:	28fe      	cmp	r0, #254	@ 0xfe
 80120e8:	dce6      	bgt.n	80120b8 <scalbnf+0x3c>
 80120ea:	2800      	cmp	r0, #0
 80120ec:	dd06      	ble.n	80120fc <scalbnf+0x80>
 80120ee:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80120f2:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 80120f6:	ee00 3a10 	vmov	s0, r3
 80120fa:	4770      	bx	lr
 80120fc:	f110 0f16 	cmn.w	r0, #22
 8012100:	da09      	bge.n	8012116 <scalbnf+0x9a>
 8012102:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 801213c <scalbnf+0xc0>
 8012106:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8012140 <scalbnf+0xc4>
 801210a:	ee10 3a10 	vmov	r3, s0
 801210e:	eeb0 7a67 	vmov.f32	s14, s15
 8012112:	2b00      	cmp	r3, #0
 8012114:	e7d9      	b.n	80120ca <scalbnf+0x4e>
 8012116:	3019      	adds	r0, #25
 8012118:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 801211c:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8012120:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8012144 <scalbnf+0xc8>
 8012124:	ee07 3a90 	vmov	s15, r3
 8012128:	e7d7      	b.n	80120da <scalbnf+0x5e>
 801212a:	bf00      	nop
 801212c:	ffff3cb0 	.word	0xffff3cb0
 8012130:	4c000000 	.word	0x4c000000
 8012134:	7149f2ca 	.word	0x7149f2ca
 8012138:	f149f2ca 	.word	0xf149f2ca
 801213c:	0da24260 	.word	0x0da24260
 8012140:	8da24260 	.word	0x8da24260
 8012144:	33000000 	.word	0x33000000

08012148 <with_errnof>:
 8012148:	b510      	push	{r4, lr}
 801214a:	ed2d 8b02 	vpush	{d8}
 801214e:	eeb0 8a40 	vmov.f32	s16, s0
 8012152:	4604      	mov	r4, r0
 8012154:	f7fe fb1a 	bl	801078c <__errno>
 8012158:	eeb0 0a48 	vmov.f32	s0, s16
 801215c:	ecbd 8b02 	vpop	{d8}
 8012160:	6004      	str	r4, [r0, #0]
 8012162:	bd10      	pop	{r4, pc}

08012164 <xflowf>:
 8012164:	b130      	cbz	r0, 8012174 <xflowf+0x10>
 8012166:	eef1 7a40 	vneg.f32	s15, s0
 801216a:	ee27 0a80 	vmul.f32	s0, s15, s0
 801216e:	2022      	movs	r0, #34	@ 0x22
 8012170:	f7ff bfea 	b.w	8012148 <with_errnof>
 8012174:	eef0 7a40 	vmov.f32	s15, s0
 8012178:	e7f7      	b.n	801216a <xflowf+0x6>
	...

0801217c <__math_uflowf>:
 801217c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8012184 <__math_uflowf+0x8>
 8012180:	f7ff bff0 	b.w	8012164 <xflowf>
 8012184:	10000000 	.word	0x10000000

08012188 <__math_oflowf>:
 8012188:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8012190 <__math_oflowf+0x8>
 801218c:	f7ff bfea 	b.w	8012164 <xflowf>
 8012190:	70000000 	.word	0x70000000

08012194 <_init>:
 8012194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012196:	bf00      	nop
 8012198:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801219a:	bc08      	pop	{r3}
 801219c:	469e      	mov	lr, r3
 801219e:	4770      	bx	lr

080121a0 <_fini>:
 80121a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80121a2:	bf00      	nop
 80121a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80121a6:	bc08      	pop	{r3}
 80121a8:	469e      	mov	lr, r3
 80121aa:	4770      	bx	lr
